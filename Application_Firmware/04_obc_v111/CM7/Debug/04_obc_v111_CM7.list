
04_obc_v111_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dma_buffer   000004a8  24000000  24000000  00035000  2**3
                  ALLOC
  1 .fs_buffer    00014280  240004a8  240004a8  00035000  2**2
                  ALLOC
  2 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0002a628  080402a0  080402a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00007e68  0806a8c8  0806a8c8  0002b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08072730  08072730  00034a68  2**0
                  CONTENTS, READONLY
  6 .ARM          00000008  08072730  08072730  00033730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08072738  08072738  00034a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08072738  08072738  00033738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0807273c  0807273c  0003373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000340  24014728  08072740  00034728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0005a06c  24014a68  08072a80  00034a68  2**2
                  ALLOC
 12 ._user_heap_stack 00000a04  2406ead4  08072a80  00034ad4  2**0
                  ALLOC
 13 .dmesg_buffer 00008000  20000000  20000000  00035000  2**0
                  ALLOC
 14 .custom_data  00008000  30000000  30000000  00035000  2**0
                  ALLOC
 15 .log_data     00024000  30008000  30008000  00035000  2**2
                  ALLOC
 16 .shared_mem   00000000  3800f800  3800f800  00034a68  2**0
                  CONTENTS
 17 .ARM.attributes 0000002e  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY
 18 .debug_info   00044922  00000000  00000000  00034a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000b0a0  00000000  00000000  000793b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003ec0  00000000  00000000  00084458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00003041  00000000  00000000  00088318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00051610  00000000  00000000  0008b359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00059fa7  00000000  00000000  000dc969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001caa2e  00000000  00000000  00136910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000043  00000000  00000000  0030133e  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00011490  00000000  00000000  00301384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000055  00000000  00000000  00312814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	@ (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	@ (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	@ (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24014a68 	.word	0x24014a68
 80402bc:	00000000 	.word	0x00000000
 80402c0:	0806a8b0 	.word	0x0806a8b0

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	@ (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	@ (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	@ (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24014a6c 	.word	0x24014a6c
 80402dc:	0806a8b0 	.word	0x0806a8b0

080402e0 <strcmp>:
 80402e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80402e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80402e8:	2a01      	cmp	r2, #1
 80402ea:	bf28      	it	cs
 80402ec:	429a      	cmpcs	r2, r3
 80402ee:	d0f7      	beq.n	80402e0 <strcmp>
 80402f0:	1ad0      	subs	r0, r2, r3
 80402f2:	4770      	bx	lr

080402f4 <strlen>:
 80402f4:	4603      	mov	r3, r0
 80402f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80402fa:	2a00      	cmp	r2, #0
 80402fc:	d1fb      	bne.n	80402f6 <strlen+0x2>
 80402fe:	1a18      	subs	r0, r3, r0
 8040300:	3801      	subs	r0, #1
 8040302:	4770      	bx	lr
	...

08040310 <memchr>:
 8040310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8040314:	2a10      	cmp	r2, #16
 8040316:	db2b      	blt.n	8040370 <memchr+0x60>
 8040318:	f010 0f07 	tst.w	r0, #7
 804031c:	d008      	beq.n	8040330 <memchr+0x20>
 804031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040322:	3a01      	subs	r2, #1
 8040324:	428b      	cmp	r3, r1
 8040326:	d02d      	beq.n	8040384 <memchr+0x74>
 8040328:	f010 0f07 	tst.w	r0, #7
 804032c:	b342      	cbz	r2, 8040380 <memchr+0x70>
 804032e:	d1f6      	bne.n	804031e <memchr+0xe>
 8040330:	b4f0      	push	{r4, r5, r6, r7}
 8040332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804033a:	f022 0407 	bic.w	r4, r2, #7
 804033e:	f07f 0700 	mvns.w	r7, #0
 8040342:	2300      	movs	r3, #0
 8040344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040348:	3c08      	subs	r4, #8
 804034a:	ea85 0501 	eor.w	r5, r5, r1
 804034e:	ea86 0601 	eor.w	r6, r6, r1
 8040352:	fa85 f547 	uadd8	r5, r5, r7
 8040356:	faa3 f587 	sel	r5, r3, r7
 804035a:	fa86 f647 	uadd8	r6, r6, r7
 804035e:	faa5 f687 	sel	r6, r5, r7
 8040362:	b98e      	cbnz	r6, 8040388 <memchr+0x78>
 8040364:	d1ee      	bne.n	8040344 <memchr+0x34>
 8040366:	bcf0      	pop	{r4, r5, r6, r7}
 8040368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804036c:	f002 0207 	and.w	r2, r2, #7
 8040370:	b132      	cbz	r2, 8040380 <memchr+0x70>
 8040372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040376:	3a01      	subs	r2, #1
 8040378:	ea83 0301 	eor.w	r3, r3, r1
 804037c:	b113      	cbz	r3, 8040384 <memchr+0x74>
 804037e:	d1f8      	bne.n	8040372 <memchr+0x62>
 8040380:	2000      	movs	r0, #0
 8040382:	4770      	bx	lr
 8040384:	3801      	subs	r0, #1
 8040386:	4770      	bx	lr
 8040388:	2d00      	cmp	r5, #0
 804038a:	bf06      	itte	eq
 804038c:	4635      	moveq	r5, r6
 804038e:	3803      	subeq	r0, #3
 8040390:	3807      	subne	r0, #7
 8040392:	f015 0f01 	tst.w	r5, #1
 8040396:	d107      	bne.n	80403a8 <memchr+0x98>
 8040398:	3001      	adds	r0, #1
 804039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804039e:	bf02      	ittt	eq
 80403a0:	3001      	addeq	r0, #1
 80403a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80403a6:	3001      	addeq	r0, #1
 80403a8:	bcf0      	pop	{r4, r5, r6, r7}
 80403aa:	3801      	subs	r0, #1
 80403ac:	4770      	bx	lr
 80403ae:	bf00      	nop

080403b0 <__aeabi_uldivmod>:
 80403b0:	b953      	cbnz	r3, 80403c8 <__aeabi_uldivmod+0x18>
 80403b2:	b94a      	cbnz	r2, 80403c8 <__aeabi_uldivmod+0x18>
 80403b4:	2900      	cmp	r1, #0
 80403b6:	bf08      	it	eq
 80403b8:	2800      	cmpeq	r0, #0
 80403ba:	bf1c      	itt	ne
 80403bc:	f04f 31ff 	movne.w	r1, #4294967295
 80403c0:	f04f 30ff 	movne.w	r0, #4294967295
 80403c4:	f000 b988 	b.w	80406d8 <__aeabi_idiv0>
 80403c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80403cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403d0:	f000 f806 	bl	80403e0 <__udivmoddi4>
 80403d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403dc:	b004      	add	sp, #16
 80403de:	4770      	bx	lr

080403e0 <__udivmoddi4>:
 80403e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403e4:	9d08      	ldr	r5, [sp, #32]
 80403e6:	468e      	mov	lr, r1
 80403e8:	4604      	mov	r4, r0
 80403ea:	4688      	mov	r8, r1
 80403ec:	2b00      	cmp	r3, #0
 80403ee:	d14a      	bne.n	8040486 <__udivmoddi4+0xa6>
 80403f0:	428a      	cmp	r2, r1
 80403f2:	4617      	mov	r7, r2
 80403f4:	d962      	bls.n	80404bc <__udivmoddi4+0xdc>
 80403f6:	fab2 f682 	clz	r6, r2
 80403fa:	b14e      	cbz	r6, 8040410 <__udivmoddi4+0x30>
 80403fc:	f1c6 0320 	rsb	r3, r6, #32
 8040400:	fa01 f806 	lsl.w	r8, r1, r6
 8040404:	fa20 f303 	lsr.w	r3, r0, r3
 8040408:	40b7      	lsls	r7, r6
 804040a:	ea43 0808 	orr.w	r8, r3, r8
 804040e:	40b4      	lsls	r4, r6
 8040410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040414:	fa1f fc87 	uxth.w	ip, r7
 8040418:	fbb8 f1fe 	udiv	r1, r8, lr
 804041c:	0c23      	lsrs	r3, r4, #16
 804041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8040422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040426:	fb01 f20c 	mul.w	r2, r1, ip
 804042a:	429a      	cmp	r2, r3
 804042c:	d909      	bls.n	8040442 <__udivmoddi4+0x62>
 804042e:	18fb      	adds	r3, r7, r3
 8040430:	f101 30ff 	add.w	r0, r1, #4294967295
 8040434:	f080 80ea 	bcs.w	804060c <__udivmoddi4+0x22c>
 8040438:	429a      	cmp	r2, r3
 804043a:	f240 80e7 	bls.w	804060c <__udivmoddi4+0x22c>
 804043e:	3902      	subs	r1, #2
 8040440:	443b      	add	r3, r7
 8040442:	1a9a      	subs	r2, r3, r2
 8040444:	b2a3      	uxth	r3, r4
 8040446:	fbb2 f0fe 	udiv	r0, r2, lr
 804044a:	fb0e 2210 	mls	r2, lr, r0, r2
 804044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8040452:	fb00 fc0c 	mul.w	ip, r0, ip
 8040456:	459c      	cmp	ip, r3
 8040458:	d909      	bls.n	804046e <__udivmoddi4+0x8e>
 804045a:	18fb      	adds	r3, r7, r3
 804045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8040460:	f080 80d6 	bcs.w	8040610 <__udivmoddi4+0x230>
 8040464:	459c      	cmp	ip, r3
 8040466:	f240 80d3 	bls.w	8040610 <__udivmoddi4+0x230>
 804046a:	443b      	add	r3, r7
 804046c:	3802      	subs	r0, #2
 804046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040472:	eba3 030c 	sub.w	r3, r3, ip
 8040476:	2100      	movs	r1, #0
 8040478:	b11d      	cbz	r5, 8040482 <__udivmoddi4+0xa2>
 804047a:	40f3      	lsrs	r3, r6
 804047c:	2200      	movs	r2, #0
 804047e:	e9c5 3200 	strd	r3, r2, [r5]
 8040482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040486:	428b      	cmp	r3, r1
 8040488:	d905      	bls.n	8040496 <__udivmoddi4+0xb6>
 804048a:	b10d      	cbz	r5, 8040490 <__udivmoddi4+0xb0>
 804048c:	e9c5 0100 	strd	r0, r1, [r5]
 8040490:	2100      	movs	r1, #0
 8040492:	4608      	mov	r0, r1
 8040494:	e7f5      	b.n	8040482 <__udivmoddi4+0xa2>
 8040496:	fab3 f183 	clz	r1, r3
 804049a:	2900      	cmp	r1, #0
 804049c:	d146      	bne.n	804052c <__udivmoddi4+0x14c>
 804049e:	4573      	cmp	r3, lr
 80404a0:	d302      	bcc.n	80404a8 <__udivmoddi4+0xc8>
 80404a2:	4282      	cmp	r2, r0
 80404a4:	f200 8105 	bhi.w	80406b2 <__udivmoddi4+0x2d2>
 80404a8:	1a84      	subs	r4, r0, r2
 80404aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80404ae:	2001      	movs	r0, #1
 80404b0:	4690      	mov	r8, r2
 80404b2:	2d00      	cmp	r5, #0
 80404b4:	d0e5      	beq.n	8040482 <__udivmoddi4+0xa2>
 80404b6:	e9c5 4800 	strd	r4, r8, [r5]
 80404ba:	e7e2      	b.n	8040482 <__udivmoddi4+0xa2>
 80404bc:	2a00      	cmp	r2, #0
 80404be:	f000 8090 	beq.w	80405e2 <__udivmoddi4+0x202>
 80404c2:	fab2 f682 	clz	r6, r2
 80404c6:	2e00      	cmp	r6, #0
 80404c8:	f040 80a4 	bne.w	8040614 <__udivmoddi4+0x234>
 80404cc:	1a8a      	subs	r2, r1, r2
 80404ce:	0c03      	lsrs	r3, r0, #16
 80404d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404d4:	b280      	uxth	r0, r0
 80404d6:	b2bc      	uxth	r4, r7
 80404d8:	2101      	movs	r1, #1
 80404da:	fbb2 fcfe 	udiv	ip, r2, lr
 80404de:	fb0e 221c 	mls	r2, lr, ip, r2
 80404e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80404e6:	fb04 f20c 	mul.w	r2, r4, ip
 80404ea:	429a      	cmp	r2, r3
 80404ec:	d907      	bls.n	80404fe <__udivmoddi4+0x11e>
 80404ee:	18fb      	adds	r3, r7, r3
 80404f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80404f4:	d202      	bcs.n	80404fc <__udivmoddi4+0x11c>
 80404f6:	429a      	cmp	r2, r3
 80404f8:	f200 80e0 	bhi.w	80406bc <__udivmoddi4+0x2dc>
 80404fc:	46c4      	mov	ip, r8
 80404fe:	1a9b      	subs	r3, r3, r2
 8040500:	fbb3 f2fe 	udiv	r2, r3, lr
 8040504:	fb0e 3312 	mls	r3, lr, r2, r3
 8040508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 804050c:	fb02 f404 	mul.w	r4, r2, r4
 8040510:	429c      	cmp	r4, r3
 8040512:	d907      	bls.n	8040524 <__udivmoddi4+0x144>
 8040514:	18fb      	adds	r3, r7, r3
 8040516:	f102 30ff 	add.w	r0, r2, #4294967295
 804051a:	d202      	bcs.n	8040522 <__udivmoddi4+0x142>
 804051c:	429c      	cmp	r4, r3
 804051e:	f200 80ca 	bhi.w	80406b6 <__udivmoddi4+0x2d6>
 8040522:	4602      	mov	r2, r0
 8040524:	1b1b      	subs	r3, r3, r4
 8040526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 804052a:	e7a5      	b.n	8040478 <__udivmoddi4+0x98>
 804052c:	f1c1 0620 	rsb	r6, r1, #32
 8040530:	408b      	lsls	r3, r1
 8040532:	fa22 f706 	lsr.w	r7, r2, r6
 8040536:	431f      	orrs	r7, r3
 8040538:	fa0e f401 	lsl.w	r4, lr, r1
 804053c:	fa20 f306 	lsr.w	r3, r0, r6
 8040540:	fa2e fe06 	lsr.w	lr, lr, r6
 8040544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8040548:	4323      	orrs	r3, r4
 804054a:	fa00 f801 	lsl.w	r8, r0, r1
 804054e:	fa1f fc87 	uxth.w	ip, r7
 8040552:	fbbe f0f9 	udiv	r0, lr, r9
 8040556:	0c1c      	lsrs	r4, r3, #16
 8040558:	fb09 ee10 	mls	lr, r9, r0, lr
 804055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8040560:	fb00 fe0c 	mul.w	lr, r0, ip
 8040564:	45a6      	cmp	lr, r4
 8040566:	fa02 f201 	lsl.w	r2, r2, r1
 804056a:	d909      	bls.n	8040580 <__udivmoddi4+0x1a0>
 804056c:	193c      	adds	r4, r7, r4
 804056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8040572:	f080 809c 	bcs.w	80406ae <__udivmoddi4+0x2ce>
 8040576:	45a6      	cmp	lr, r4
 8040578:	f240 8099 	bls.w	80406ae <__udivmoddi4+0x2ce>
 804057c:	3802      	subs	r0, #2
 804057e:	443c      	add	r4, r7
 8040580:	eba4 040e 	sub.w	r4, r4, lr
 8040584:	fa1f fe83 	uxth.w	lr, r3
 8040588:	fbb4 f3f9 	udiv	r3, r4, r9
 804058c:	fb09 4413 	mls	r4, r9, r3, r4
 8040590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8040594:	fb03 fc0c 	mul.w	ip, r3, ip
 8040598:	45a4      	cmp	ip, r4
 804059a:	d908      	bls.n	80405ae <__udivmoddi4+0x1ce>
 804059c:	193c      	adds	r4, r7, r4
 804059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80405a2:	f080 8082 	bcs.w	80406aa <__udivmoddi4+0x2ca>
 80405a6:	45a4      	cmp	ip, r4
 80405a8:	d97f      	bls.n	80406aa <__udivmoddi4+0x2ca>
 80405aa:	3b02      	subs	r3, #2
 80405ac:	443c      	add	r4, r7
 80405ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80405b2:	eba4 040c 	sub.w	r4, r4, ip
 80405b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80405ba:	4564      	cmp	r4, ip
 80405bc:	4673      	mov	r3, lr
 80405be:	46e1      	mov	r9, ip
 80405c0:	d362      	bcc.n	8040688 <__udivmoddi4+0x2a8>
 80405c2:	d05f      	beq.n	8040684 <__udivmoddi4+0x2a4>
 80405c4:	b15d      	cbz	r5, 80405de <__udivmoddi4+0x1fe>
 80405c6:	ebb8 0203 	subs.w	r2, r8, r3
 80405ca:	eb64 0409 	sbc.w	r4, r4, r9
 80405ce:	fa04 f606 	lsl.w	r6, r4, r6
 80405d2:	fa22 f301 	lsr.w	r3, r2, r1
 80405d6:	431e      	orrs	r6, r3
 80405d8:	40cc      	lsrs	r4, r1
 80405da:	e9c5 6400 	strd	r6, r4, [r5]
 80405de:	2100      	movs	r1, #0
 80405e0:	e74f      	b.n	8040482 <__udivmoddi4+0xa2>
 80405e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80405e6:	0c01      	lsrs	r1, r0, #16
 80405e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80405ec:	b280      	uxth	r0, r0
 80405ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80405f2:	463b      	mov	r3, r7
 80405f4:	4638      	mov	r0, r7
 80405f6:	463c      	mov	r4, r7
 80405f8:	46b8      	mov	r8, r7
 80405fa:	46be      	mov	lr, r7
 80405fc:	2620      	movs	r6, #32
 80405fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8040602:	eba2 0208 	sub.w	r2, r2, r8
 8040606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 804060a:	e766      	b.n	80404da <__udivmoddi4+0xfa>
 804060c:	4601      	mov	r1, r0
 804060e:	e718      	b.n	8040442 <__udivmoddi4+0x62>
 8040610:	4610      	mov	r0, r2
 8040612:	e72c      	b.n	804046e <__udivmoddi4+0x8e>
 8040614:	f1c6 0220 	rsb	r2, r6, #32
 8040618:	fa2e f302 	lsr.w	r3, lr, r2
 804061c:	40b7      	lsls	r7, r6
 804061e:	40b1      	lsls	r1, r6
 8040620:	fa20 f202 	lsr.w	r2, r0, r2
 8040624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040628:	430a      	orrs	r2, r1
 804062a:	fbb3 f8fe 	udiv	r8, r3, lr
 804062e:	b2bc      	uxth	r4, r7
 8040630:	fb0e 3318 	mls	r3, lr, r8, r3
 8040634:	0c11      	lsrs	r1, r2, #16
 8040636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804063a:	fb08 f904 	mul.w	r9, r8, r4
 804063e:	40b0      	lsls	r0, r6
 8040640:	4589      	cmp	r9, r1
 8040642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8040646:	b280      	uxth	r0, r0
 8040648:	d93e      	bls.n	80406c8 <__udivmoddi4+0x2e8>
 804064a:	1879      	adds	r1, r7, r1
 804064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8040650:	d201      	bcs.n	8040656 <__udivmoddi4+0x276>
 8040652:	4589      	cmp	r9, r1
 8040654:	d81f      	bhi.n	8040696 <__udivmoddi4+0x2b6>
 8040656:	eba1 0109 	sub.w	r1, r1, r9
 804065a:	fbb1 f9fe 	udiv	r9, r1, lr
 804065e:	fb09 f804 	mul.w	r8, r9, r4
 8040662:	fb0e 1119 	mls	r1, lr, r9, r1
 8040666:	b292      	uxth	r2, r2
 8040668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804066c:	4542      	cmp	r2, r8
 804066e:	d229      	bcs.n	80406c4 <__udivmoddi4+0x2e4>
 8040670:	18ba      	adds	r2, r7, r2
 8040672:	f109 31ff 	add.w	r1, r9, #4294967295
 8040676:	d2c4      	bcs.n	8040602 <__udivmoddi4+0x222>
 8040678:	4542      	cmp	r2, r8
 804067a:	d2c2      	bcs.n	8040602 <__udivmoddi4+0x222>
 804067c:	f1a9 0102 	sub.w	r1, r9, #2
 8040680:	443a      	add	r2, r7
 8040682:	e7be      	b.n	8040602 <__udivmoddi4+0x222>
 8040684:	45f0      	cmp	r8, lr
 8040686:	d29d      	bcs.n	80405c4 <__udivmoddi4+0x1e4>
 8040688:	ebbe 0302 	subs.w	r3, lr, r2
 804068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040690:	3801      	subs	r0, #1
 8040692:	46e1      	mov	r9, ip
 8040694:	e796      	b.n	80405c4 <__udivmoddi4+0x1e4>
 8040696:	eba7 0909 	sub.w	r9, r7, r9
 804069a:	4449      	add	r1, r9
 804069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80406a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80406a4:	fb09 f804 	mul.w	r8, r9, r4
 80406a8:	e7db      	b.n	8040662 <__udivmoddi4+0x282>
 80406aa:	4673      	mov	r3, lr
 80406ac:	e77f      	b.n	80405ae <__udivmoddi4+0x1ce>
 80406ae:	4650      	mov	r0, sl
 80406b0:	e766      	b.n	8040580 <__udivmoddi4+0x1a0>
 80406b2:	4608      	mov	r0, r1
 80406b4:	e6fd      	b.n	80404b2 <__udivmoddi4+0xd2>
 80406b6:	443b      	add	r3, r7
 80406b8:	3a02      	subs	r2, #2
 80406ba:	e733      	b.n	8040524 <__udivmoddi4+0x144>
 80406bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80406c0:	443b      	add	r3, r7
 80406c2:	e71c      	b.n	80404fe <__udivmoddi4+0x11e>
 80406c4:	4649      	mov	r1, r9
 80406c6:	e79c      	b.n	8040602 <__udivmoddi4+0x222>
 80406c8:	eba1 0109 	sub.w	r1, r1, r9
 80406cc:	46c4      	mov	ip, r8
 80406ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80406d2:	fb09 f804 	mul.w	r8, r9, r4
 80406d6:	e7c4      	b.n	8040662 <__udivmoddi4+0x282>

080406d8 <__aeabi_idiv0>:
 80406d8:	4770      	bx	lr
 80406da:	bf00      	nop

080406dc <Mgmt_HardwareSystemPreparing>:
#include "log_manager.h"

SystemStatus_t Mgmt_GetSystemStatus(void);

Std_ReturnType Mgmt_HardwareSystemPreparing(void)
{
 80406dc:	b580      	push	{r7, lr}
 80406de:	b082      	sub	sp, #8
 80406e0:	af00      	add	r7, sp, #0
	Std_ReturnType ret = E_ERROR;
 80406e2:	2301      	movs	r3, #1
 80406e4:	71fb      	strb	r3, [r7, #7]
	system_status.init_state = INIT_STATE_STEP_PREPARING;
 80406e6:	4b1c      	ldr	r3, [pc, #112]	@ (8040758 <Mgmt_HardwareSystemPreparing+0x7c>)
 80406e8:	2201      	movs	r2, #1
 80406ea:	701a      	strb	r2, [r3, #0]

	RV3129_Driver_Init(I2C_RTC);
 80406ec:	481b      	ldr	r0, [pc, #108]	@ (804075c <Mgmt_HardwareSystemPreparing+0x80>)
 80406ee:	f00b fd83 	bl	804c1f8 <RV3129_Driver_Init>
	FRAM_SPI_Driver_Init(SPI_MEM, FRAM_CS_Port, FRAM_CS);
 80406f2:	2210      	movs	r2, #16
 80406f4:	491a      	ldr	r1, [pc, #104]	@ (8040760 <Mgmt_HardwareSystemPreparing+0x84>)
 80406f6:	481b      	ldr	r0, [pc, #108]	@ (8040764 <Mgmt_HardwareSystemPreparing+0x88>)
 80406f8:	f00b fed6 	bl	804c4a8 <FRAM_SPI_Driver_Init>
	ret = UART_DMA_Driver_Init();
 80406fc:	f001 ff2c 	bl	8042558 <UART_DMA_Driver_Init>
 8040700:	4603      	mov	r3, r0
 8040702:	71fb      	strb	r3, [r7, #7]

    Watchdog_Device_Init();
 8040704:	f00b fe70 	bl	804c3e8 <Watchdog_Device_Init>

	Utils_SoftTime_Init();
 8040708:	f00d f9f6 	bl	804daf8 <Utils_SoftTime_Init>

	SharedREG_Init(DIR_M7_TO_M4);
 804070c:	2000      	movs	r0, #0
 804070e:	f001 fcc5 	bl	804209c <SharedREG_Init>

	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Preparing!");
 8040712:	4a15      	ldr	r2, [pc, #84]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8040714:	2102      	movs	r1, #2
 8040716:	2000      	movs	r0, #0
 8040718:	f00b f9a6 	bl	804ba68 <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_INFOR ,  	"OBC OS Preparing!");
 804071c:	4a12      	ldr	r2, [pc, #72]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 804071e:	2100      	movs	r1, #0
 8040720:	2000      	movs	r0, #0
 8040722:	f00b f9a1 	bl	804ba68 <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_DEBUG, 		"OBC OS Preparing!");
 8040726:	4a10      	ldr	r2, [pc, #64]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8040728:	2101      	movs	r1, #1
 804072a:	2000      	movs	r0, #0
 804072c:	f00b f99c 	bl	804ba68 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_WARN, 		"OBC OS Preparing!");
 8040730:	4a0d      	ldr	r2, [pc, #52]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8040732:	2103      	movs	r1, #3
 8040734:	2000      	movs	r0, #0
 8040736:	f00b f997 	bl	804ba68 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_ERROR, 		"OBC OS Preparing!");
 804073a:	4a0b      	ldr	r2, [pc, #44]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 804073c:	2104      	movs	r1, #4
 804073e:	2000      	movs	r0, #0
 8040740:	f00b f992 	bl	804ba68 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_FATAL, 		"OBC OS Preparing!");
 8040744:	4a08      	ldr	r2, [pc, #32]	@ (8040768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8040746:	2105      	movs	r1, #5
 8040748:	2000      	movs	r0, #0
 804074a:	f00b f98d 	bl	804ba68 <Sys_Debugcast>
	return ret;
 804074e:	79fb      	ldrb	r3, [r7, #7]
}
 8040750:	4618      	mov	r0, r3
 8040752:	3708      	adds	r7, #8
 8040754:	46bd      	mov	sp, r7
 8040756:	bd80      	pop	{r7, pc}
 8040758:	24014a84 	.word	0x24014a84
 804075c:	40005800 	.word	0x40005800
 8040760:	58021000 	.word	0x58021000
 8040764:	40013400 	.word	0x40013400
 8040768:	0806a8c8 	.word	0x0806a8c8

0804076c <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 804076c:	b580      	push	{r7, lr}
 804076e:	af00      	add	r7, sp, #0
	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Starting!");
 8040770:	4a04      	ldr	r2, [pc, #16]	@ (8040784 <Mgmt_SystemStart+0x18>)
 8040772:	2102      	movs	r1, #2
 8040774:	2000      	movs	r0, #0
 8040776:	f00b f977 	bl	804ba68 <Sys_Debugcast>

	OBC_RTOS_Start();
 804077a:	f000 f90b 	bl	8040994 <OBC_RTOS_Start>
}
 804077e:	bf00      	nop
 8040780:	bd80      	pop	{r7, pc}
 8040782:	bf00      	nop
 8040784:	0806a8dc 	.word	0x0806a8dc

08040788 <Mgmt_SystemInitStepZero>:

/*************************************************
 *                   RTOS Control                *
 *************************************************/
Std_ReturnType Mgmt_SystemInitStepZero(void)
{
 8040788:	b5b0      	push	{r4, r5, r7, lr}
 804078a:	b088      	sub	sp, #32
 804078c:	af04      	add	r7, sp, #16
	Std_ReturnType ret = E_ERROR;
 804078e:	2301      	movs	r3, #1
 8040790:	73fb      	strb	r3, [r7, #15]
	system_status.init_state = INIT_STATE_STEP_ZERO;
 8040792:	4b20      	ldr	r3, [pc, #128]	@ (8040814 <Mgmt_SystemInitStepZero+0x8c>)
 8040794:	2202      	movs	r2, #2
 8040796:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Zero: Pending...");
 8040798:	4a1f      	ldr	r2, [pc, #124]	@ (8040818 <Mgmt_SystemInitStepZero+0x90>)
 804079a:	2100      	movs	r1, #0
 804079c:	2000      	movs	r0, #0
 804079e:	f00b f963 	bl	804ba68 <Sys_Debugcast>

	LWL_Init();
 80407a2:	f018 fec1 	bl	8059528 <LWL_Init>

	LogManager_Init();
 80407a6:	f018 fd09 	bl	80591bc <LogManager_Init>

	LWL_TestLogs();
 80407aa:	f018 ff97 	bl	80596dc <LWL_TestLogs>

	ret = Utils_SoftTime_Sync();
 80407ae:	f00d fa6d 	bl	804dc8c <Utils_SoftTime_Sync>
 80407b2:	4603      	mov	r3, r0
 80407b4:	73fb      	strb	r3, [r7, #15]

	if(Utils_SoftTime_Sync() == E_OK){
 80407b6:	f00d fa69 	bl	804dc8c <Utils_SoftTime_Sync>
 80407ba:	4603      	mov	r3, r0
 80407bc:	2b00      	cmp	r3, #0
 80407be:	d11d      	bne.n	80407fc <Mgmt_SystemInitStepZero+0x74>
		Sys_Boardcast(E_OK,	LOG_NOTICE, "[Sync Time!]");
 80407c0:	4a16      	ldr	r2, [pc, #88]	@ (804081c <Mgmt_SystemInitStepZero+0x94>)
 80407c2:	2102      	movs	r1, #2
 80407c4:	2000      	movs	r0, #0
 80407c6:	f00b f841 	bl	804b84c <Sys_Boardcast>

	    s_DateTime now;
	    Utils_GetRTC(&now);
 80407ca:	1d3b      	adds	r3, r7, #4
 80407cc:	4618      	mov	r0, r3
 80407ce:	f00d f9d7 	bl	804db80 <Utils_GetRTC>
	    uint16_t full_year = 2000 + now.year;
 80407d2:	79bb      	ldrb	r3, [r7, #6]
 80407d4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80407d8:	81bb      	strh	r3, [r7, #12]
	    LWL_Log(OBC_STM32_BOOTING, now.day, now.month, full_year, now.hour, now.minute, now.second);
 80407da:	793b      	ldrb	r3, [r7, #4]
 80407dc:	461c      	mov	r4, r3
 80407de:	797b      	ldrb	r3, [r7, #5]
 80407e0:	461d      	mov	r5, r3
 80407e2:	89bb      	ldrh	r3, [r7, #12]
 80407e4:	79fa      	ldrb	r2, [r7, #7]
 80407e6:	7a39      	ldrb	r1, [r7, #8]
 80407e8:	7a78      	ldrb	r0, [r7, #9]
 80407ea:	9002      	str	r0, [sp, #8]
 80407ec:	9101      	str	r1, [sp, #4]
 80407ee:	9200      	str	r2, [sp, #0]
 80407f0:	462a      	mov	r2, r5
 80407f2:	4621      	mov	r1, r4
 80407f4:	201a      	movs	r0, #26
 80407f6:	f018 fea3 	bl	8059540 <LWL_Log>
 80407fa:	e005      	b.n	8040808 <Mgmt_SystemInitStepZero+0x80>

	}else{
		system_status.last_error = ret;
 80407fc:	4a05      	ldr	r2, [pc, #20]	@ (8040814 <Mgmt_SystemInitStepZero+0x8c>)
 80407fe:	7bfb      	ldrb	r3, [r7, #15]
 8040800:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 8040802:	4b04      	ldr	r3, [pc, #16]	@ (8040814 <Mgmt_SystemInitStepZero+0x8c>)
 8040804:	2207      	movs	r2, #7
 8040806:	701a      	strb	r2, [r3, #0]
	}



	return ret;
 8040808:	7bfb      	ldrb	r3, [r7, #15]
}
 804080a:	4618      	mov	r0, r3
 804080c:	3710      	adds	r7, #16
 804080e:	46bd      	mov	sp, r7
 8040810:	bdb0      	pop	{r4, r5, r7, pc}
 8040812:	bf00      	nop
 8040814:	24014a84 	.word	0x24014a84
 8040818:	0806a8f0 	.word	0x0806a8f0
 804081c:	0806a908 	.word	0x0806a908

08040820 <Mgmt_SystemInitStepOne>:

Std_ReturnType Mgmt_SystemInitStepOne(void)
{
 8040820:	b580      	push	{r7, lr}
 8040822:	b082      	sub	sp, #8
 8040824:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_ONE;
 8040826:	4b20      	ldr	r3, [pc, #128]	@ (80408a8 <Mgmt_SystemInitStepOne+0x88>)
 8040828:	2203      	movs	r2, #3
 804082a:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 804082c:	2301      	movs	r3, #1
 804082e:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step One: Pending...");
 8040830:	4a1e      	ldr	r2, [pc, #120]	@ (80408ac <Mgmt_SystemInitStepOne+0x8c>)
 8040832:	2100      	movs	r1, #0
 8040834:	2000      	movs	r0, #0
 8040836:	f00b f917 	bl	804ba68 <Sys_Debugcast>

	ret = SystemCLI_Init();
 804083a:	f005 fa4b 	bl	8045cd4 <SystemCLI_Init>
 804083e:	4603      	mov	r3, r0
 8040840:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8040842:	79fb      	ldrb	r3, [r7, #7]
 8040844:	2b00      	cmp	r3, #0
 8040846:	d00b      	beq.n	8040860 <Mgmt_SystemInitStepOne+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[CLI-Interface Init Fail]");
 8040848:	4a19      	ldr	r2, [pc, #100]	@ (80408b0 <Mgmt_SystemInitStepOne+0x90>)
 804084a:	2104      	movs	r1, #4
 804084c:	2001      	movs	r0, #1
 804084e:	f00a fffd 	bl	804b84c <Sys_Boardcast>
		system_status.last_error = ret;
 8040852:	4a15      	ldr	r2, [pc, #84]	@ (80408a8 <Mgmt_SystemInitStepOne+0x88>)
 8040854:	79fb      	ldrb	r3, [r7, #7]
 8040856:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 8040858:	4b13      	ldr	r3, [pc, #76]	@ (80408a8 <Mgmt_SystemInitStepOne+0x88>)
 804085a:	2207      	movs	r2, #7
 804085c:	701a      	strb	r2, [r3, #0]
 804085e:	e004      	b.n	804086a <Mgmt_SystemInitStepOne+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[CLI-Interface Init Done]");
 8040860:	4a14      	ldr	r2, [pc, #80]	@ (80408b4 <Mgmt_SystemInitStepOne+0x94>)
 8040862:	2102      	movs	r1, #2
 8040864:	2000      	movs	r0, #0
 8040866:	f00a fff1 	bl	804b84c <Sys_Boardcast>
	}

	ret = Link_SDFS_Driver();
 804086a:	f007 fc37 	bl	80480dc <Link_SDFS_Driver>
 804086e:	4603      	mov	r3, r0
 8040870:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8040872:	79fb      	ldrb	r3, [r7, #7]
 8040874:	2b00      	cmp	r3, #0
 8040876:	d00b      	beq.n	8040890 <Mgmt_SystemInitStepOne+0x70>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[Link FATFS Fail]");
 8040878:	4a0f      	ldr	r2, [pc, #60]	@ (80408b8 <Mgmt_SystemInitStepOne+0x98>)
 804087a:	2104      	movs	r1, #4
 804087c:	2001      	movs	r0, #1
 804087e:	f00a ffe5 	bl	804b84c <Sys_Boardcast>
		system_status.last_error = ret;
 8040882:	4a09      	ldr	r2, [pc, #36]	@ (80408a8 <Mgmt_SystemInitStepOne+0x88>)
 8040884:	79fb      	ldrb	r3, [r7, #7]
 8040886:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 8040888:	4b07      	ldr	r3, [pc, #28]	@ (80408a8 <Mgmt_SystemInitStepOne+0x88>)
 804088a:	2207      	movs	r2, #7
 804088c:	701a      	strb	r2, [r3, #0]
 804088e:	e004      	b.n	804089a <Mgmt_SystemInitStepOne+0x7a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[Link FATFS Success]");
 8040890:	4a0a      	ldr	r2, [pc, #40]	@ (80408bc <Mgmt_SystemInitStepOne+0x9c>)
 8040892:	2102      	movs	r1, #2
 8040894:	2000      	movs	r0, #0
 8040896:	f00a ffd9 	bl	804b84c <Sys_Boardcast>
	}

	SysLogQueue_Init();
 804089a:	f00b fa83 	bl	804bda4 <SysLogQueue_Init>

	return ret;
 804089e:	79fb      	ldrb	r3, [r7, #7]
}
 80408a0:	4618      	mov	r0, r3
 80408a2:	3708      	adds	r7, #8
 80408a4:	46bd      	mov	sp, r7
 80408a6:	bd80      	pop	{r7, pc}
 80408a8:	24014a84 	.word	0x24014a84
 80408ac:	0806a918 	.word	0x0806a918
 80408b0:	0806a930 	.word	0x0806a930
 80408b4:	0806a94c 	.word	0x0806a94c
 80408b8:	0806a968 	.word	0x0806a968
 80408bc:	0806a97c 	.word	0x0806a97c

080408c0 <Mgmt_SystemInitStepTwo>:

Std_ReturnType Mgmt_SystemInitStepTwo(void)
{
 80408c0:	b580      	push	{r7, lr}
 80408c2:	b082      	sub	sp, #8
 80408c4:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_TWO;
 80408c6:	4b21      	ldr	r3, [pc, #132]	@ (804094c <Mgmt_SystemInitStepTwo+0x8c>)
 80408c8:	2204      	movs	r2, #4
 80408ca:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 80408cc:	2301      	movs	r3, #1
 80408ce:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Two: Pending...");
 80408d0:	4a1f      	ldr	r2, [pc, #124]	@ (8040950 <Mgmt_SystemInitStepTwo+0x90>)
 80408d2:	2100      	movs	r1, #0
 80408d4:	2000      	movs	r0, #0
 80408d6:	f00b f8c7 	bl	804ba68 <Sys_Debugcast>

	ret = SPI_SlaveDevice_Init();
 80408da:	f00c fc89 	bl	804d1f0 <SPI_SlaveDevice_Init>
 80408de:	4603      	mov	r3, r0
 80408e0:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 80408e2:	79fb      	ldrb	r3, [r7, #7]
 80408e4:	2b00      	cmp	r3, #0
 80408e6:	d00b      	beq.n	8040900 <Mgmt_SystemInitStepTwo+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Device Init Fail]");
 80408e8:	4a1a      	ldr	r2, [pc, #104]	@ (8040954 <Mgmt_SystemInitStepTwo+0x94>)
 80408ea:	2104      	movs	r1, #4
 80408ec:	2001      	movs	r0, #1
 80408ee:	f00a ffad 	bl	804b84c <Sys_Boardcast>
		system_status.last_error = ret;
 80408f2:	4a16      	ldr	r2, [pc, #88]	@ (804094c <Mgmt_SystemInitStepTwo+0x8c>)
 80408f4:	79fb      	ldrb	r3, [r7, #7]
 80408f6:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80408f8:	4b14      	ldr	r3, [pc, #80]	@ (804094c <Mgmt_SystemInitStepTwo+0x8c>)
 80408fa:	2207      	movs	r2, #7
 80408fc:	701a      	strb	r2, [r3, #0]
 80408fe:	e004      	b.n	804090a <Mgmt_SystemInitStepTwo+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Device Init Done]");
 8040900:	4a15      	ldr	r2, [pc, #84]	@ (8040958 <Mgmt_SystemInitStepTwo+0x98>)
 8040902:	2102      	movs	r1, #2
 8040904:	2000      	movs	r0, #0
 8040906:	f00a ffa1 	bl	804b84c <Sys_Boardcast>
	}

	ret = SPI_MasterDevice_Init(SPI6, SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 804090a:	2210      	movs	r2, #16
 804090c:	4913      	ldr	r1, [pc, #76]	@ (804095c <Mgmt_SystemInitStepTwo+0x9c>)
 804090e:	4814      	ldr	r0, [pc, #80]	@ (8040960 <Mgmt_SystemInitStepTwo+0xa0>)
 8040910:	f00c f934 	bl	804cb7c <SPI_MasterDevice_Init>
 8040914:	4603      	mov	r3, r0
 8040916:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8040918:	79fb      	ldrb	r3, [r7, #7]
 804091a:	2b00      	cmp	r3, #0
 804091c:	d00b      	beq.n	8040936 <Mgmt_SystemInitStepTwo+0x76>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Master Init Fail]");
 804091e:	4a11      	ldr	r2, [pc, #68]	@ (8040964 <Mgmt_SystemInitStepTwo+0xa4>)
 8040920:	2104      	movs	r1, #4
 8040922:	2001      	movs	r0, #1
 8040924:	f00a ff92 	bl	804b84c <Sys_Boardcast>
		system_status.last_error = ret;
 8040928:	4a08      	ldr	r2, [pc, #32]	@ (804094c <Mgmt_SystemInitStepTwo+0x8c>)
 804092a:	79fb      	ldrb	r3, [r7, #7]
 804092c:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 804092e:	4b07      	ldr	r3, [pc, #28]	@ (804094c <Mgmt_SystemInitStepTwo+0x8c>)
 8040930:	2207      	movs	r2, #7
 8040932:	701a      	strb	r2, [r3, #0]
 8040934:	e004      	b.n	8040940 <Mgmt_SystemInitStepTwo+0x80>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Master Init Done]");
 8040936:	4a0c      	ldr	r2, [pc, #48]	@ (8040968 <Mgmt_SystemInitStepTwo+0xa8>)
 8040938:	2102      	movs	r1, #2
 804093a:	2000      	movs	r0, #0
 804093c:	f00a ff86 	bl	804b84c <Sys_Boardcast>
	}

	return ret;
 8040940:	79fb      	ldrb	r3, [r7, #7]
}
 8040942:	4618      	mov	r0, r3
 8040944:	3708      	adds	r7, #8
 8040946:	46bd      	mov	sp, r7
 8040948:	bd80      	pop	{r7, pc}
 804094a:	bf00      	nop
 804094c:	24014a84 	.word	0x24014a84
 8040950:	0806a994 	.word	0x0806a994
 8040954:	0806a9ac 	.word	0x0806a9ac
 8040958:	0806a9c4 	.word	0x0806a9c4
 804095c:	58020000 	.word	0x58020000
 8040960:	58001400 	.word	0x58001400
 8040964:	0806a9dc 	.word	0x0806a9dc
 8040968:	0806a9f4 	.word	0x0806a9f4

0804096c <Mgmt_SystemInitFinal>:

Std_ReturnType Mgmt_SystemInitFinal(void)
{
 804096c:	b580      	push	{r7, lr}
 804096e:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_FINAL;
 8040970:	4b06      	ldr	r3, [pc, #24]	@ (804098c <Mgmt_SystemInitFinal+0x20>)
 8040972:	2205      	movs	r2, #5
 8040974:	701a      	strb	r2, [r3, #0]
	system_status.init_state = INIT_STATE_COMPLETED;
 8040976:	4b05      	ldr	r3, [pc, #20]	@ (804098c <Mgmt_SystemInitFinal+0x20>)
 8040978:	2206      	movs	r2, #6
 804097a:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Final: Pending...");
 804097c:	4a04      	ldr	r2, [pc, #16]	@ (8040990 <Mgmt_SystemInitFinal+0x24>)
 804097e:	2100      	movs	r1, #0
 8040980:	2000      	movs	r0, #0
 8040982:	f00b f871 	bl	804ba68 <Sys_Debugcast>
	return E_OK;
 8040986:	2300      	movs	r3, #0
}
 8040988:	4618      	mov	r0, r3
 804098a:	bd80      	pop	{r7, pc}
 804098c:	24014a84 	.word	0x24014a84
 8040990:	0806aa0c 	.word	0x0806aa0c

08040994 <OBC_RTOS_Start>:
#include "SysLog/syslog.h"
#include "stdio.h"

/*--------------------Star RTOS--------------*/
void OBC_RTOS_Start(void)
{
 8040994:	b580      	push	{r7, lr}
 8040996:	af00      	add	r7, sp, #0
	OBC_RootGrowUp();
 8040998:	f000 f97c 	bl	8040c94 <OBC_RootGrowUp>
}
 804099c:	bf00      	nop
 804099e:	bd80      	pop	{r7, pc}

080409a0 <vApplicationStackOverflowHook>:

/*--------------------RTOS Task List--------------*/

/* Hook prototypes */
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 80409a0:	b580      	push	{r7, lr}
 80409a2:	b0c2      	sub	sp, #264	@ 0x108
 80409a4:	af00      	add	r7, sp, #0
 80409a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80409aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80409ae:	6018      	str	r0, [r3, #0]
 80409b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80409b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80409b8:	6019      	str	r1, [r3, #0]
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Stack Overflow -> Task %s", pcTaskName);
 80409ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80409be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80409c2:	f107 0008 	add.w	r0, r7, #8
 80409c6:	681b      	ldr	r3, [r3, #0]
 80409c8:	4a08      	ldr	r2, [pc, #32]	@ (80409ec <vApplicationStackOverflowHook+0x4c>)
 80409ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80409ce:	f028 fe07 	bl	80695e0 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 80409d2:	f107 0308 	add.w	r3, r7, #8
 80409d6:	2201      	movs	r2, #1
 80409d8:	4619      	mov	r1, r3
 80409da:	2005      	movs	r0, #5
 80409dc:	f00b f8e8 	bl	804bbb0 <syslog_log>
}
 80409e0:	bf00      	nop
 80409e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80409e6:	46bd      	mov	sp, r7
 80409e8:	bd80      	pop	{r7, pc}
 80409ea:	bf00      	nop
 80409ec:	0806aa24 	.word	0x0806aa24

080409f0 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
 80409f0:	b580      	push	{r7, lr}
 80409f2:	b0c0      	sub	sp, #256	@ 0x100
 80409f4:	af00      	add	r7, sp, #0
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Malloc Hook Overflow");
 80409f6:	463b      	mov	r3, r7
 80409f8:	4a08      	ldr	r2, [pc, #32]	@ (8040a1c <vApplicationMallocFailedHook+0x2c>)
 80409fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80409fe:	4618      	mov	r0, r3
 8040a00:	f028 fdee 	bl	80695e0 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 8040a04:	463b      	mov	r3, r7
 8040a06:	2201      	movs	r2, #1
 8040a08:	4619      	mov	r1, r3
 8040a0a:	2005      	movs	r0, #5
 8040a0c:	f00b f8d0 	bl	804bbb0 <syslog_log>
}
 8040a10:	bf00      	nop
 8040a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8040a16:	46bd      	mov	sp, r7
 8040a18:	bd80      	pop	{r7, pc}
 8040a1a:	bf00      	nop
 8040a1c:	0806aa40 	.word	0x0806aa40

08040a20 <toCM4_Init>:
#include "utils.h"
#include "main.h"
#include "board.h"
#include "gpio_state.h"

void toCM4_Init(void) {
 8040a20:	b580      	push	{r7, lr}
 8040a22:	af00      	add	r7, sp, #0
//	GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
//	GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
    toCM4_SetState(TOCM4_IDLE);
 8040a24:	2003      	movs	r0, #3
 8040a26:	f000 f803 	bl	8040a30 <toCM4_SetState>
}
 8040a2a:	bf00      	nop
 8040a2c:	bd80      	pop	{r7, pc}
	...

08040a30 <toCM4_SetState>:

void toCM4_SetState(toCM4_State_t state) {
 8040a30:	b480      	push	{r7}
 8040a32:	b083      	sub	sp, #12
 8040a34:	af00      	add	r7, sp, #0
 8040a36:	4603      	mov	r3, r0
 8040a38:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8040a3a:	79fb      	ldrb	r3, [r7, #7]
 8040a3c:	2b03      	cmp	r3, #3
 8040a3e:	d80b      	bhi.n	8040a58 <toCM4_SetState+0x28>
 8040a40:	a201      	add	r2, pc, #4	@ (adr r2, 8040a48 <toCM4_SetState+0x18>)
 8040a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8040a46:	bf00      	nop
 8040a48:	08040a59 	.word	0x08040a59
 8040a4c:	08040a59 	.word	0x08040a59
 8040a50:	08040a59 	.word	0x08040a59
 8040a54:	08040a59 	.word	0x08040a59
//            GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
            break;
        default:
//            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
//            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
            break;
 8040a58:	bf00      	nop
    }
}
 8040a5a:	bf00      	nop
 8040a5c:	370c      	adds	r7, #12
 8040a5e:	46bd      	mov	sp, r7
 8040a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a64:	4770      	bx	lr
 8040a66:	bf00      	nop

08040a68 <toCM4_GetState>:

toCM4_State_t toCM4_GetState(void) {
 8040a68:	b480      	push	{r7}
 8040a6a:	af00      	add	r7, sp, #0
//        return TOCM4_BUSY;
//    } else { // busy_state == 1 && readysend_state == 1
//        return TOCM4_IDLE;
//    }
//
    return TOCM4_IDLE;
 8040a6c:	2303      	movs	r3, #3
}
 8040a6e:	4618      	mov	r0, r3
 8040a70:	46bd      	mov	sp, r7
 8040a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a76:	4770      	bx	lr

08040a78 <ForwardMode_Set>:
#include <stdio.h>

static ForwardMode_t currentMode = FORWARD_MODE_NORMAL;
static uint8_t backslashCount = 0;

void ForwardMode_Set(ForwardMode_t mode) {
 8040a78:	b480      	push	{r7}
 8040a7a:	b083      	sub	sp, #12
 8040a7c:	af00      	add	r7, sp, #0
 8040a7e:	4603      	mov	r3, r0
 8040a80:	71fb      	strb	r3, [r7, #7]
    currentMode = mode;
 8040a82:	4a06      	ldr	r2, [pc, #24]	@ (8040a9c <ForwardMode_Set+0x24>)
 8040a84:	79fb      	ldrb	r3, [r7, #7]
 8040a86:	7013      	strb	r3, [r2, #0]
    backslashCount = 0;
 8040a88:	4b05      	ldr	r3, [pc, #20]	@ (8040aa0 <ForwardMode_Set+0x28>)
 8040a8a:	2200      	movs	r2, #0
 8040a8c:	701a      	strb	r2, [r3, #0]
}
 8040a8e:	bf00      	nop
 8040a90:	370c      	adds	r7, #12
 8040a92:	46bd      	mov	sp, r7
 8040a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a98:	4770      	bx	lr
 8040a9a:	bf00      	nop
 8040a9c:	24014a87 	.word	0x24014a87
 8040aa0:	24014a88 	.word	0x24014a88

08040aa4 <ForwardMode_Get>:

ForwardMode_t ForwardMode_Get(void) {
 8040aa4:	b480      	push	{r7}
 8040aa6:	af00      	add	r7, sp, #0
    return currentMode;
 8040aa8:	4b03      	ldr	r3, [pc, #12]	@ (8040ab8 <ForwardMode_Get+0x14>)
 8040aaa:	781b      	ldrb	r3, [r3, #0]
}
 8040aac:	4618      	mov	r0, r3
 8040aae:	46bd      	mov	sp, r7
 8040ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ab4:	4770      	bx	lr
 8040ab6:	bf00      	nop
 8040ab8:	24014a87 	.word	0x24014a87

08040abc <ForwardMode_ProcessReceivedByte>:

_Bool ForwardMode_ProcessReceivedByte(uint8_t byte) {
 8040abc:	b480      	push	{r7}
 8040abe:	b083      	sub	sp, #12
 8040ac0:	af00      	add	r7, sp, #0
 8040ac2:	4603      	mov	r3, r0
 8040ac4:	71fb      	strb	r3, [r7, #7]
    if ((char)byte == '\\') {
 8040ac6:	79fb      	ldrb	r3, [r7, #7]
 8040ac8:	2b5c      	cmp	r3, #92	@ 0x5c
 8040aca:	d106      	bne.n	8040ada <ForwardMode_ProcessReceivedByte+0x1e>
        backslashCount++;
 8040acc:	4b0e      	ldr	r3, [pc, #56]	@ (8040b08 <ForwardMode_ProcessReceivedByte+0x4c>)
 8040ace:	781b      	ldrb	r3, [r3, #0]
 8040ad0:	3301      	adds	r3, #1
 8040ad2:	b2da      	uxtb	r2, r3
 8040ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8040b08 <ForwardMode_ProcessReceivedByte+0x4c>)
 8040ad6:	701a      	strb	r2, [r3, #0]
 8040ad8:	e002      	b.n	8040ae0 <ForwardMode_ProcessReceivedByte+0x24>
    } else {
        backslashCount = 0;
 8040ada:	4b0b      	ldr	r3, [pc, #44]	@ (8040b08 <ForwardMode_ProcessReceivedByte+0x4c>)
 8040adc:	2200      	movs	r2, #0
 8040ade:	701a      	strb	r2, [r3, #0]
    }
    if (backslashCount >= 10) {
 8040ae0:	4b09      	ldr	r3, [pc, #36]	@ (8040b08 <ForwardMode_ProcessReceivedByte+0x4c>)
 8040ae2:	781b      	ldrb	r3, [r3, #0]
 8040ae4:	2b09      	cmp	r3, #9
 8040ae6:	d907      	bls.n	8040af8 <ForwardMode_ProcessReceivedByte+0x3c>
        currentMode = FORWARD_MODE_NORMAL;
 8040ae8:	4b08      	ldr	r3, [pc, #32]	@ (8040b0c <ForwardMode_ProcessReceivedByte+0x50>)
 8040aea:	2200      	movs	r2, #0
 8040aec:	701a      	strb	r2, [r3, #0]
        backslashCount = 0;
 8040aee:	4b06      	ldr	r3, [pc, #24]	@ (8040b08 <ForwardMode_ProcessReceivedByte+0x4c>)
 8040af0:	2200      	movs	r2, #0
 8040af2:	701a      	strb	r2, [r3, #0]
        return true;
 8040af4:	2301      	movs	r3, #1
 8040af6:	e000      	b.n	8040afa <ForwardMode_ProcessReceivedByte+0x3e>
    }
    return false;
 8040af8:	2300      	movs	r3, #0
}
 8040afa:	4618      	mov	r0, r3
 8040afc:	370c      	adds	r7, #12
 8040afe:	46bd      	mov	sp, r7
 8040b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b04:	4770      	bx	lr
 8040b06:	bf00      	nop
 8040b08:	24014a88 	.word	0x24014a88
 8040b0c:	24014a87 	.word	0x24014a87

08040b10 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8040b10:	b480      	push	{r7}
 8040b12:	b083      	sub	sp, #12
 8040b14:	af00      	add	r7, sp, #0
 8040b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8040b18:	687b      	ldr	r3, [r7, #4]
 8040b1a:	69db      	ldr	r3, [r3, #28]
 8040b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8040b20:	2b40      	cmp	r3, #64	@ 0x40
 8040b22:	d101      	bne.n	8040b28 <LL_USART_IsActiveFlag_TC+0x18>
 8040b24:	2301      	movs	r3, #1
 8040b26:	e000      	b.n	8040b2a <LL_USART_IsActiveFlag_TC+0x1a>
 8040b28:	2300      	movs	r3, #0
}
 8040b2a:	4618      	mov	r0, r3
 8040b2c:	370c      	adds	r7, #12
 8040b2e:	46bd      	mov	sp, r7
 8040b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b34:	4770      	bx	lr

08040b36 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8040b36:	b480      	push	{r7}
 8040b38:	b083      	sub	sp, #12
 8040b3a:	af00      	add	r7, sp, #0
 8040b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8040b3e:	687b      	ldr	r3, [r7, #4]
 8040b40:	69db      	ldr	r3, [r3, #28]
 8040b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040b46:	2b80      	cmp	r3, #128	@ 0x80
 8040b48:	d101      	bne.n	8040b4e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8040b4a:	2301      	movs	r3, #1
 8040b4c:	e000      	b.n	8040b50 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8040b4e:	2300      	movs	r3, #0
}
 8040b50:	4618      	mov	r0, r3
 8040b52:	370c      	adds	r7, #12
 8040b54:	46bd      	mov	sp, r7
 8040b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b5a:	4770      	bx	lr

08040b5c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8040b5c:	b480      	push	{r7}
 8040b5e:	b083      	sub	sp, #12
 8040b60:	af00      	add	r7, sp, #0
 8040b62:	6078      	str	r0, [r7, #4]
 8040b64:	460b      	mov	r3, r1
 8040b66:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8040b68:	78fa      	ldrb	r2, [r7, #3]
 8040b6a:	687b      	ldr	r3, [r7, #4]
 8040b6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8040b6e:	bf00      	nop
 8040b70:	370c      	adds	r7, #12
 8040b72:	46bd      	mov	sp, r7
 8040b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b78:	4770      	bx	lr

08040b7a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040b7a:	b480      	push	{r7}
 8040b7c:	b083      	sub	sp, #12
 8040b7e:	af00      	add	r7, sp, #0
 8040b80:	6078      	str	r0, [r7, #4]
 8040b82:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8040b84:	687b      	ldr	r3, [r7, #4]
 8040b86:	691a      	ldr	r2, [r3, #16]
 8040b88:	683b      	ldr	r3, [r7, #0]
 8040b8a:	4013      	ands	r3, r2
 8040b8c:	683a      	ldr	r2, [r7, #0]
 8040b8e:	429a      	cmp	r2, r3
 8040b90:	d101      	bne.n	8040b96 <LL_GPIO_IsInputPinSet+0x1c>
 8040b92:	2301      	movs	r3, #1
 8040b94:	e000      	b.n	8040b98 <LL_GPIO_IsInputPinSet+0x1e>
 8040b96:	2300      	movs	r3, #0
}
 8040b98:	4618      	mov	r0, r3
 8040b9a:	370c      	adds	r7, #12
 8040b9c:	46bd      	mov	sp, r7
 8040b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba2:	4770      	bx	lr

08040ba4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040ba4:	b480      	push	{r7}
 8040ba6:	b083      	sub	sp, #12
 8040ba8:	af00      	add	r7, sp, #0
 8040baa:	6078      	str	r0, [r7, #4]
 8040bac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8040bae:	687b      	ldr	r3, [r7, #4]
 8040bb0:	683a      	ldr	r2, [r7, #0]
 8040bb2:	619a      	str	r2, [r3, #24]
}
 8040bb4:	bf00      	nop
 8040bb6:	370c      	adds	r7, #12
 8040bb8:	46bd      	mov	sp, r7
 8040bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bbe:	4770      	bx	lr

08040bc0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040bc0:	b480      	push	{r7}
 8040bc2:	b083      	sub	sp, #12
 8040bc4:	af00      	add	r7, sp, #0
 8040bc6:	6078      	str	r0, [r7, #4]
 8040bc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8040bca:	683b      	ldr	r3, [r7, #0]
 8040bcc:	041a      	lsls	r2, r3, #16
 8040bce:	687b      	ldr	r3, [r7, #4]
 8040bd0:	619a      	str	r2, [r3, #24]
}
 8040bd2:	bf00      	nop
 8040bd4:	370c      	adds	r7, #12
 8040bd6:	46bd      	mov	sp, r7
 8040bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bdc:	4770      	bx	lr
	...

08040be0 <writeChar_auth_USB>:
 *************************************************/
ShieldInstance_t auth_usb;

MODFSP_Data_t cm4_protocol;

static void writeChar_auth_USB(char c) {
 8040be0:	b580      	push	{r7, lr}
 8040be2:	b084      	sub	sp, #16
 8040be4:	af00      	add	r7, sp, #0
 8040be6:	4603      	mov	r3, r0
 8040be8:	71fb      	strb	r3, [r7, #7]
    uint8_t c_to_send = c;
 8040bea:	79fb      	ldrb	r3, [r7, #7]
 8040bec:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 8040bee:	7bfb      	ldrb	r3, [r7, #15]
 8040bf0:	4619      	mov	r1, r3
 8040bf2:	4803      	ldr	r0, [pc, #12]	@ (8040c00 <writeChar_auth_USB+0x20>)
 8040bf4:	f001 fe66 	bl	80428c4 <UART_Driver_Write>
}
 8040bf8:	bf00      	nop
 8040bfa:	3710      	adds	r7, #16
 8040bfc:	46bd      	mov	sp, r7
 8040bfe:	bd80      	pop	{r7, pc}
 8040c00:	40011000 	.word	0x40011000

08040c04 <Task_Kick>:
    {"LOG", 0}
};

volatile uint8_t watchdog_allow_pulse = 1;

void Task_Kick(const char *taskName) {
 8040c04:	b580      	push	{r7, lr}
 8040c06:	b084      	sub	sp, #16
 8040c08:	af00      	add	r7, sp, #0
 8040c0a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < TASK_COUNT; i++) {
 8040c0c:	2300      	movs	r3, #0
 8040c0e:	60fb      	str	r3, [r7, #12]
 8040c10:	e014      	b.n	8040c3c <Task_Kick+0x38>
        if (strcmp(taskHeartbeats[i].name, taskName) == 0) {
 8040c12:	4a0e      	ldr	r2, [pc, #56]	@ (8040c4c <Task_Kick+0x48>)
 8040c14:	68fb      	ldr	r3, [r7, #12]
 8040c16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8040c1a:	6879      	ldr	r1, [r7, #4]
 8040c1c:	4618      	mov	r0, r3
 8040c1e:	f7ff fb5f 	bl	80402e0 <strcmp>
 8040c22:	4603      	mov	r3, r0
 8040c24:	2b00      	cmp	r3, #0
 8040c26:	d106      	bne.n	8040c36 <Task_Kick+0x32>
            taskHeartbeats[i].alive = 1;
 8040c28:	4a08      	ldr	r2, [pc, #32]	@ (8040c4c <Task_Kick+0x48>)
 8040c2a:	68fb      	ldr	r3, [r7, #12]
 8040c2c:	00db      	lsls	r3, r3, #3
 8040c2e:	4413      	add	r3, r2
 8040c30:	2201      	movs	r2, #1
 8040c32:	711a      	strb	r2, [r3, #4]
            break;
 8040c34:	e006      	b.n	8040c44 <Task_Kick+0x40>
    for (int i = 0; i < TASK_COUNT; i++) {
 8040c36:	68fb      	ldr	r3, [r7, #12]
 8040c38:	3301      	adds	r3, #1
 8040c3a:	60fb      	str	r3, [r7, #12]
 8040c3c:	68fb      	ldr	r3, [r7, #12]
 8040c3e:	2b02      	cmp	r3, #2
 8040c40:	dde7      	ble.n	8040c12 <Task_Kick+0xe>
        }
    }
}
 8040c42:	bf00      	nop
 8040c44:	bf00      	nop
 8040c46:	3710      	adds	r7, #16
 8040c48:	46bd      	mov	sp, r7
 8040c4a:	bd80      	pop	{r7, pc}
 8040c4c:	24014728 	.word	0x24014728

08040c50 <OBC_RootTask>:
 *               	Root Task	                 *
 *************************************************/
void OBC_RootTask(void *pvParameters);

void OBC_RootTask(void *pvParameters)
{
 8040c50:	b580      	push	{r7, lr}
 8040c52:	b082      	sub	sp, #8
 8040c54:	af00      	add	r7, sp, #0
 8040c56:	6078      	str	r0, [r7, #4]
	Sys_Debugcast(E_OK, LOG_NOTICE, "Root task started");
 8040c58:	4a0b      	ldr	r2, [pc, #44]	@ (8040c88 <OBC_RootTask+0x38>)
 8040c5a:	2102      	movs	r1, #2
 8040c5c:	2000      	movs	r0, #0
 8040c5e:	f00a ff03 	bl	804ba68 <Sys_Debugcast>
    if (OBC_AppInit() != E_OK)
 8040c62:	f000 f843 	bl	8040cec <OBC_AppInit>
 8040c66:	4603      	mov	r3, r0
 8040c68:	2b00      	cmp	r3, #0
 8040c6a:	d007      	beq.n	8040c7c <OBC_RootTask+0x2c>
    {
        Sys_Boardcast(E_ERROR, LOG_ERROR, "!!! Application Initialization Failed");
 8040c6c:	4a07      	ldr	r2, [pc, #28]	@ (8040c8c <OBC_RootTask+0x3c>)
 8040c6e:	2104      	movs	r1, #4
 8040c70:	2001      	movs	r0, #1
 8040c72:	f00a fdeb 	bl	804b84c <Sys_Boardcast>
        system_status.program_state = PROGRAM_STATE_ERROR;
 8040c76:	4b06      	ldr	r3, [pc, #24]	@ (8040c90 <OBC_RootTask+0x40>)
 8040c78:	2202      	movs	r2, #2
 8040c7a:	705a      	strb	r2, [r3, #1]
    }

    vTaskDelete(NULL);
 8040c7c:	2000      	movs	r0, #0
 8040c7e:	f015 fbc5 	bl	805640c <vTaskDelete>
    while(1){
 8040c82:	bf00      	nop
 8040c84:	e7fd      	b.n	8040c82 <OBC_RootTask+0x32>
 8040c86:	bf00      	nop
 8040c88:	0806aa68 	.word	0x0806aa68
 8040c8c:	0806aa7c 	.word	0x0806aa7c
 8040c90:	24014a8c 	.word	0x24014a8c

08040c94 <OBC_RootGrowUp>:
    	// Should not go here
    }
}

void OBC_RootGrowUp(void)
{
 8040c94:	b580      	push	{r7, lr}
 8040c96:	b086      	sub	sp, #24
 8040c98:	af04      	add	r7, sp, #16
    TaskHandle_t task_handle = xTaskCreateStatic(
 8040c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8040cd8 <OBC_RootGrowUp+0x44>)
 8040c9c:	9302      	str	r3, [sp, #8]
 8040c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8040cdc <OBC_RootGrowUp+0x48>)
 8040ca0:	9301      	str	r3, [sp, #4]
 8040ca2:	2305      	movs	r3, #5
 8040ca4:	9300      	str	r3, [sp, #0]
 8040ca6:	2300      	movs	r3, #0
 8040ca8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8040cac:	490c      	ldr	r1, [pc, #48]	@ (8040ce0 <OBC_RootGrowUp+0x4c>)
 8040cae:	480d      	ldr	r0, [pc, #52]	@ (8040ce4 <OBC_RootGrowUp+0x50>)
 8040cb0:	f015 f9f9 	bl	80560a6 <xTaskCreateStatic>
 8040cb4:	6078      	str	r0, [r7, #4]
        ROOT_PRIORITY,
        root_stack,
        &root_tcb
    );

    if (task_handle == NULL)
 8040cb6:	687b      	ldr	r3, [r7, #4]
 8040cb8:	2b00      	cmp	r3, #0
 8040cba:	d106      	bne.n	8040cca <OBC_RootGrowUp+0x36>
    {
        Sys_Boardcast(E_ERROR, LOG_FATAL, "Cannot Start Root-Task!!!");
 8040cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8040ce8 <OBC_RootGrowUp+0x54>)
 8040cbe:	2105      	movs	r1, #5
 8040cc0:	2001      	movs	r0, #1
 8040cc2:	f00a fdc3 	bl	804b84c <Sys_Boardcast>
        while (1);
 8040cc6:	bf00      	nop
 8040cc8:	e7fd      	b.n	8040cc6 <OBC_RootGrowUp+0x32>
    }

    vTaskStartScheduler();
 8040cca:	f015 fdcd 	bl	8056868 <vTaskStartScheduler>
}
 8040cce:	bf00      	nop
 8040cd0:	3708      	adds	r7, #8
 8040cd2:	46bd      	mov	sp, r7
 8040cd4:	bd80      	pop	{r7, pc}
 8040cd6:	bf00      	nop
 8040cd8:	240172fc 	.word	0x240172fc
 8040cdc:	24015efc 	.word	0x24015efc
 8040ce0:	0806aaa4 	.word	0x0806aaa4
 8040ce4:	08040c51 	.word	0x08040c51
 8040ce8:	0806aab4 	.word	0x0806aab4

08040cec <OBC_AppInit>:
/*************************************************
 *               	TASK INIT	                 *
 *************************************************/

Std_ReturnType OBC_AppInit(void)
{
 8040cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8040cee:	b0cf      	sub	sp, #316	@ 0x13c
 8040cf0:	af06      	add	r7, sp, #24

	Std_ReturnType ret = E_ERROR;
 8040cf2:	2301      	movs	r3, #1
 8040cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	ret = Mgmt_SystemInitStepZero();
 8040cf8:	f7ff fd46 	bl	8040788 <Mgmt_SystemInitStepZero>
 8040cfc:	4603      	mov	r3, r0
 8040cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8040d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8040d06:	2b00      	cmp	r3, #0
 8040d08:	d005      	beq.n	8040d16 <OBC_AppInit+0x2a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Zero Failed!!!");
 8040d0a:	4acc      	ldr	r2, [pc, #816]	@ (804103c <OBC_AppInit+0x350>)
 8040d0c:	2105      	movs	r1, #5
 8040d0e:	2001      	movs	r0, #1
 8040d10:	f00a fd9c 	bl	804b84c <Sys_Boardcast>
 8040d14:	e004      	b.n	8040d20 <OBC_AppInit+0x34>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Zero: PASS!");
 8040d16:	4aca      	ldr	r2, [pc, #808]	@ (8041040 <OBC_AppInit+0x354>)
 8040d18:	2100      	movs	r1, #0
 8040d1a:	2000      	movs	r0, #0
 8040d1c:	f00a fd96 	bl	804b84c <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepOne();
 8040d20:	f7ff fd7e 	bl	8040820 <Mgmt_SystemInitStepOne>
 8040d24:	4603      	mov	r3, r0
 8040d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8040d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	d005      	beq.n	8040d3e <OBC_AppInit+0x52>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step One Failed!!!");
 8040d32:	4ac4      	ldr	r2, [pc, #784]	@ (8041044 <OBC_AppInit+0x358>)
 8040d34:	2105      	movs	r1, #5
 8040d36:	2001      	movs	r0, #1
 8040d38:	f00a fd88 	bl	804b84c <Sys_Boardcast>
 8040d3c:	e004      	b.n	8040d48 <OBC_AppInit+0x5c>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step One: PASS!");
 8040d3e:	4ac2      	ldr	r2, [pc, #776]	@ (8041048 <OBC_AppInit+0x35c>)
 8040d40:	2100      	movs	r1, #0
 8040d42:	2000      	movs	r0, #0
 8040d44:	f00a fd82 	bl	804b84c <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepTwo();
 8040d48:	f7ff fdba 	bl	80408c0 <Mgmt_SystemInitStepTwo>
 8040d4c:	4603      	mov	r3, r0
 8040d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8040d52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8040d56:	2b00      	cmp	r3, #0
 8040d58:	d005      	beq.n	8040d66 <OBC_AppInit+0x7a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Two Failed!!!");
 8040d5a:	4abc      	ldr	r2, [pc, #752]	@ (804104c <OBC_AppInit+0x360>)
 8040d5c:	2105      	movs	r1, #5
 8040d5e:	2001      	movs	r0, #1
 8040d60:	f00a fd74 	bl	804b84c <Sys_Boardcast>
 8040d64:	e004      	b.n	8040d70 <OBC_AppInit+0x84>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Two: PASS!");
 8040d66:	4aba      	ldr	r2, [pc, #744]	@ (8041050 <OBC_AppInit+0x364>)
 8040d68:	2100      	movs	r1, #0
 8040d6a:	2000      	movs	r0, #0
 8040d6c:	f00a fd6e 	bl	804b84c <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitFinal();
 8040d70:	f7ff fdfc 	bl	804096c <Mgmt_SystemInitFinal>
 8040d74:	4603      	mov	r3, r0
 8040d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8040d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8040d7e:	2b00      	cmp	r3, #0
 8040d80:	d005      	beq.n	8040d8e <OBC_AppInit+0xa2>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Final Failed!!!");
 8040d82:	4ab4      	ldr	r2, [pc, #720]	@ (8041054 <OBC_AppInit+0x368>)
 8040d84:	2105      	movs	r1, #5
 8040d86:	2001      	movs	r0, #1
 8040d88:	f00a fd60 	bl	804b84c <Sys_Boardcast>
 8040d8c:	e004      	b.n	8040d98 <OBC_AppInit+0xac>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Final: PASS!");
 8040d8e:	4ab2      	ldr	r2, [pc, #712]	@ (8041058 <OBC_AppInit+0x36c>)
 8040d90:	2100      	movs	r1, #0
 8040d92:	2000      	movs	r0, #0
 8040d94:	f00a fd5a 	bl	804b84c <Sys_Boardcast>
	}

	FS_Init();
 8040d98:	f007 f850 	bl	8047e3c <FS_Init>

	MIN_Process_Init();
 8040d9c:	f007 fcb4 	bl	8048708 <MIN_Process_Init>

	if (ret != E_OK){
 8040da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8040da4:	2b00      	cmp	r3, #0
 8040da6:	d005      	beq.n	8040db4 <OBC_AppInit+0xc8>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Failed!!!");
 8040da8:	4aac      	ldr	r2, [pc, #688]	@ (804105c <OBC_AppInit+0x370>)
 8040daa:	2105      	movs	r1, #5
 8040dac:	2001      	movs	r0, #1
 8040dae:	f00a fd4d 	bl	804b84c <Sys_Boardcast>
 8040db2:	e004      	b.n	8040dbe <OBC_AppInit+0xd2>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "[WELCOME]");
 8040db4:	4aaa      	ldr	r2, [pc, #680]	@ (8041060 <OBC_AppInit+0x374>)
 8040db6:	2100      	movs	r1, #0
 8040db8:	2000      	movs	r0, #0
 8040dba:	f00a fd47 	bl	804b84c <Sys_Boardcast>
	}

	char boot_log[256] = {0};
 8040dbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040dc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8040dc6:	4618      	mov	r0, r3
 8040dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040dcc:	461a      	mov	r2, r3
 8040dce:	2100      	movs	r1, #0
 8040dd0:	f028 fd08 	bl	80697e4 <memset>
    int offset = 0;
 8040dd4:	2300      	movs	r3, #0
 8040dd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 8040dda:	f107 0308 	add.w	r3, r7, #8
 8040dde:	4618      	mov	r0, r3
 8040de0:	f00c fece 	bl	804db80 <Utils_GetRTC>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040de4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040de8:	f107 0210 	add.w	r2, r7, #16
 8040dec:	18d0      	adds	r0, r2, r3
 8040dee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040df2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
                "\r\nHardtime: 20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040df6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040dfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040dfe:	789b      	ldrb	r3, [r3, #2]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e00:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040e02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040e0a:	785b      	ldrb	r3, [r3, #1]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e0c:	461a      	mov	r2, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040e0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e12:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040e16:	781b      	ldrb	r3, [r3, #0]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e18:	461c      	mov	r4, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040e1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e1e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040e22:	78db      	ldrb	r3, [r3, #3]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e24:	461d      	mov	r5, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040e26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e2a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040e2e:	791b      	ldrb	r3, [r3, #4]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e30:	461e      	mov	r6, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8040e32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e36:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8040e3a:	795b      	ldrb	r3, [r3, #5]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e3c:	9304      	str	r3, [sp, #16]
 8040e3e:	9603      	str	r6, [sp, #12]
 8040e40:	9502      	str	r5, [sp, #8]
 8040e42:	9401      	str	r4, [sp, #4]
 8040e44:	9200      	str	r2, [sp, #0]
 8040e46:	4663      	mov	r3, ip
 8040e48:	4a86      	ldr	r2, [pc, #536]	@ (8041064 <OBC_AppInit+0x378>)
 8040e4a:	f028 fbc9 	bl	80695e0 <sniprintf>
 8040e4e:	4602      	mov	r2, r0
 8040e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040e54:	4413      	add	r3, r2
 8040e56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint8_t hours = 0, minutes = 0, seconds = 0;
 8040e5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e5e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8040e62:	2200      	movs	r2, #0
 8040e64:	701a      	strb	r2, [r3, #0]
 8040e66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e6a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8040e6e:	2200      	movs	r2, #0
 8040e70:	701a      	strb	r2, [r3, #0]
 8040e72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040e76:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8040e7a:	2200      	movs	r2, #0
 8040e7c:	701a      	strb	r2, [r3, #0]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 8040e7e:	1d7b      	adds	r3, r7, #5
 8040e80:	1dba      	adds	r2, r7, #6
 8040e82:	1df9      	adds	r1, r7, #7
 8040e84:	2000      	movs	r0, #0
 8040e86:	f00c fed5 	bl	804dc34 <Utils_GetWorkingTime>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040e8e:	f107 0210 	add.w	r2, r7, #16
 8040e92:	18d0      	adds	r0, r2, r3
 8040e94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040e98:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8040e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040ea0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8040ea4:	781b      	ldrb	r3, [r3, #0]
 8040ea6:	461c      	mov	r4, r3
 8040ea8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040eac:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8040eb0:	781b      	ldrb	r3, [r3, #0]
 8040eb2:	461a      	mov	r2, r3
 8040eb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040eb8:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8040ebc:	781b      	ldrb	r3, [r3, #0]
 8040ebe:	9301      	str	r3, [sp, #4]
 8040ec0:	9200      	str	r2, [sp, #0]
 8040ec2:	4623      	mov	r3, r4
 8040ec4:	4a68      	ldr	r2, [pc, #416]	@ (8041068 <OBC_AppInit+0x37c>)
 8040ec6:	f028 fb8b 	bl	80695e0 <sniprintf>
 8040eca:	4602      	mov	r2, r0
 8040ecc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040ed0:	4413      	add	r3, r2
 8040ed2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nUptime: %02u:%02u:%02u",
                    hours, minutes, seconds);
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8040ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040eda:	f107 0210 	add.w	r2, r7, #16
 8040ede:	18d0      	adds	r0, r2, r3
 8040ee0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040ee4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8040ee8:	4a60      	ldr	r2, [pc, #384]	@ (804106c <OBC_AppInit+0x380>)
 8040eea:	4619      	mov	r1, r3
 8040eec:	f028 fb78 	bl	80695e0 <sniprintf>
 8040ef0:	4602      	mov	r2, r0
 8040ef2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8040ef6:	4413      	add	r3, r2
 8040ef8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nWelcome to SpaceLiinTech - SLT BEE-PC1 OBC \r\n\r\n");

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8040efc:	2300      	movs	r3, #0
 8040efe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8040f02:	e017      	b.n	8040f34 <OBC_AppInit+0x248>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART1));
 8040f04:	bf00      	nop
 8040f06:	485a      	ldr	r0, [pc, #360]	@ (8041070 <OBC_AppInit+0x384>)
 8040f08:	f7ff fe15 	bl	8040b36 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8040f0c:	4603      	mov	r3, r0
 8040f0e:	2b00      	cmp	r3, #0
 8040f10:	d0f9      	beq.n	8040f06 <OBC_AppInit+0x21a>
	    LL_USART_TransmitData8(USART1, (uint8_t)boot_log[i]);
 8040f12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040f16:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8040f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8040f1e:	4413      	add	r3, r2
 8040f20:	781b      	ldrb	r3, [r3, #0]
 8040f22:	4619      	mov	r1, r3
 8040f24:	4852      	ldr	r0, [pc, #328]	@ (8041070 <OBC_AppInit+0x384>)
 8040f26:	f7ff fe19 	bl	8040b5c <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8040f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8040f2e:	3301      	adds	r3, #1
 8040f30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8040f34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040f38:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8040f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8040f40:	4413      	add	r3, r2
 8040f42:	781b      	ldrb	r3, [r3, #0]
 8040f44:	2b00      	cmp	r3, #0
 8040f46:	d1dd      	bne.n	8040f04 <OBC_AppInit+0x218>
	}
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8040f48:	bf00      	nop
 8040f4a:	4849      	ldr	r0, [pc, #292]	@ (8041070 <OBC_AppInit+0x384>)
 8040f4c:	f7ff fde0 	bl	8040b10 <LL_USART_IsActiveFlag_TC>
 8040f50:	4603      	mov	r3, r0
 8040f52:	2b00      	cmp	r3, #0
 8040f54:	d0f9      	beq.n	8040f4a <OBC_AppInit+0x25e>

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8040f56:	2300      	movs	r3, #0
 8040f58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8040f5c:	e017      	b.n	8040f8e <OBC_AppInit+0x2a2>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8040f5e:	bf00      	nop
 8040f60:	4844      	ldr	r0, [pc, #272]	@ (8041074 <OBC_AppInit+0x388>)
 8040f62:	f7ff fde8 	bl	8040b36 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8040f66:	4603      	mov	r3, r0
 8040f68:	2b00      	cmp	r3, #0
 8040f6a:	d0f9      	beq.n	8040f60 <OBC_AppInit+0x274>
	    LL_USART_TransmitData8(USART2, (uint8_t)boot_log[i]);
 8040f6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040f70:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8040f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8040f78:	4413      	add	r3, r2
 8040f7a:	781b      	ldrb	r3, [r3, #0]
 8040f7c:	4619      	mov	r1, r3
 8040f7e:	483d      	ldr	r0, [pc, #244]	@ (8041074 <OBC_AppInit+0x388>)
 8040f80:	f7ff fdec 	bl	8040b5c <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8040f84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8040f88:	3301      	adds	r3, #1
 8040f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8040f8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8040f92:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8040f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8040f9a:	4413      	add	r3, r2
 8040f9c:	781b      	ldrb	r3, [r3, #0]
 8040f9e:	2b00      	cmp	r3, #0
 8040fa0:	d1dd      	bne.n	8040f5e <OBC_AppInit+0x272>
	}
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8040fa2:	bf00      	nop
 8040fa4:	4833      	ldr	r0, [pc, #204]	@ (8041074 <OBC_AppInit+0x388>)
 8040fa6:	f7ff fdb3 	bl	8040b10 <LL_USART_IsActiveFlag_TC>
 8040faa:	4603      	mov	r3, r0
 8040fac:	2b00      	cmp	r3, #0
 8040fae:	d0f9      	beq.n	8040fa4 <OBC_AppInit+0x2b8>


	ScriptManager_Init();
 8040fb0:	f008 fdb6 	bl	8049b20 <ScriptManager_Init>

	MODFSP_Init(&cm4_protocol);
 8040fb4:	4830      	ldr	r0, [pc, #192]	@ (8041078 <OBC_AppInit+0x38c>)
 8040fb6:	f01b fbfb 	bl	805c7b0 <MODFSP_Init>


    CREATE_TASK(FS_Gatekeeper_Task, 	"FS_Gatekeeper", 	MIN_STACK_SIZE * 20, 	NULL, 									2, NULL);
 8040fba:	2300      	movs	r3, #0
 8040fbc:	9301      	str	r3, [sp, #4]
 8040fbe:	2302      	movs	r3, #2
 8040fc0:	9300      	str	r3, [sp, #0]
 8040fc2:	2300      	movs	r3, #0
 8040fc4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8040fc8:	492c      	ldr	r1, [pc, #176]	@ (804107c <OBC_AppInit+0x390>)
 8040fca:	482d      	ldr	r0, [pc, #180]	@ (8041080 <OBC_AppInit+0x394>)
 8040fcc:	f015 f8cf 	bl	805616e <xTaskCreate>
 8040fd0:	4603      	mov	r3, r0
 8040fd2:	2b01      	cmp	r3, #1
 8040fd4:	d001      	beq.n	8040fda <OBC_AppInit+0x2ee>
 8040fd6:	2301      	movs	r3, #1
 8040fd8:	e161      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(MIN_Process_Task, 		"MIN_Process", 		MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8040fda:	2300      	movs	r3, #0
 8040fdc:	9301      	str	r3, [sp, #4]
 8040fde:	2301      	movs	r3, #1
 8040fe0:	9300      	str	r3, [sp, #0]
 8040fe2:	2300      	movs	r3, #0
 8040fe4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8040fe8:	4926      	ldr	r1, [pc, #152]	@ (8041084 <OBC_AppInit+0x398>)
 8040fea:	4827      	ldr	r0, [pc, #156]	@ (8041088 <OBC_AppInit+0x39c>)
 8040fec:	f015 f8bf 	bl	805616e <xTaskCreate>
 8040ff0:	4603      	mov	r3, r0
 8040ff2:	2b01      	cmp	r3, #1
 8040ff4:	d001      	beq.n	8040ffa <OBC_AppInit+0x30e>
 8040ff6:	2301      	movs	r3, #1
 8040ff8:	e151      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(MODFSP_Process_Task, 	"MODFSP_Process", 	MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8040ffa:	2300      	movs	r3, #0
 8040ffc:	9301      	str	r3, [sp, #4]
 8040ffe:	2301      	movs	r3, #1
 8041000:	9300      	str	r3, [sp, #0]
 8041002:	2300      	movs	r3, #0
 8041004:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8041008:	4920      	ldr	r1, [pc, #128]	@ (804108c <OBC_AppInit+0x3a0>)
 804100a:	4821      	ldr	r0, [pc, #132]	@ (8041090 <OBC_AppInit+0x3a4>)
 804100c:	f015 f8af 	bl	805616e <xTaskCreate>
 8041010:	4603      	mov	r3, r0
 8041012:	2b01      	cmp	r3, #1
 8041014:	d001      	beq.n	804101a <OBC_AppInit+0x32e>
 8041016:	2301      	movs	r3, #1
 8041018:	e141      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(SysLog_Task, 			"SysLog_Task", 		MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);	// Syslog Queue from syslog_queue.c
 804101a:	2300      	movs	r3, #0
 804101c:	9301      	str	r3, [sp, #4]
 804101e:	2301      	movs	r3, #1
 8041020:	9300      	str	r3, [sp, #0]
 8041022:	2300      	movs	r3, #0
 8041024:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8041028:	491a      	ldr	r1, [pc, #104]	@ (8041094 <OBC_AppInit+0x3a8>)
 804102a:	481b      	ldr	r0, [pc, #108]	@ (8041098 <OBC_AppInit+0x3ac>)
 804102c:	f015 f89f 	bl	805616e <xTaskCreate>
 8041030:	4603      	mov	r3, r0
 8041032:	2b01      	cmp	r3, #1
 8041034:	d032      	beq.n	804109c <OBC_AppInit+0x3b0>
 8041036:	2301      	movs	r3, #1
 8041038:	e131      	b.n	804129e <OBC_AppInit+0x5b2>
 804103a:	bf00      	nop
 804103c:	0806aad0 	.word	0x0806aad0
 8041040:	0806aaf0 	.word	0x0806aaf0
 8041044:	0806ab04 	.word	0x0806ab04
 8041048:	0806ab24 	.word	0x0806ab24
 804104c:	0806ab34 	.word	0x0806ab34
 8041050:	0806ab54 	.word	0x0806ab54
 8041054:	0806ab64 	.word	0x0806ab64
 8041058:	0806ab80 	.word	0x0806ab80
 804105c:	0806ab94 	.word	0x0806ab94
 8041060:	0806aba8 	.word	0x0806aba8
 8041064:	0806abb4 	.word	0x0806abb4
 8041068:	0806abe4 	.word	0x0806abe4
 804106c:	0806ac00 	.word	0x0806ac00
 8041070:	40011000 	.word	0x40011000
 8041074:	40004400 	.word	0x40004400
 8041078:	24014aec 	.word	0x24014aec
 804107c:	0806ac34 	.word	0x0806ac34
 8041080:	08047ec1 	.word	0x08047ec1
 8041084:	0806ac44 	.word	0x0806ac44
 8041088:	0804169d 	.word	0x0804169d
 804108c:	0806ac50 	.word	0x0806ac50
 8041090:	08041651 	.word	0x08041651
 8041094:	0806ac60 	.word	0x0806ac60
 8041098:	0804bdc1 	.word	0x0804bdc1

    CREATE_TASK(vSoft_RTC_Task, 		"Soft_RTC_Task", 	MIN_STACK_SIZE * 5, 	NULL, 									1, NULL);
 804109c:	2300      	movs	r3, #0
 804109e:	9301      	str	r3, [sp, #4]
 80410a0:	2301      	movs	r3, #1
 80410a2:	9300      	str	r3, [sp, #0]
 80410a4:	2300      	movs	r3, #0
 80410a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80410aa:	497f      	ldr	r1, [pc, #508]	@ (80412a8 <OBC_AppInit+0x5bc>)
 80410ac:	487f      	ldr	r0, [pc, #508]	@ (80412ac <OBC_AppInit+0x5c0>)
 80410ae:	f015 f85e 	bl	805616e <xTaskCreate>
 80410b2:	4603      	mov	r3, r0
 80410b4:	2b01      	cmp	r3, #1
 80410b6:	d001      	beq.n	80410bc <OBC_AppInit+0x3d0>
 80410b8:	2301      	movs	r3, #1
 80410ba:	e0f0      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(UART_DEBUG_DMA_RX_Task, "DEBUG_RX_Task", 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_DEBUG), 1, NULL);
 80410bc:	487c      	ldr	r0, [pc, #496]	@ (80412b0 <OBC_AppInit+0x5c4>)
 80410be:	f001 fa21 	bl	8042504 <UART_DMA_Driver_Get>
 80410c2:	4603      	mov	r3, r0
 80410c4:	2200      	movs	r2, #0
 80410c6:	9201      	str	r2, [sp, #4]
 80410c8:	2201      	movs	r2, #1
 80410ca:	9200      	str	r2, [sp, #0]
 80410cc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80410d0:	4978      	ldr	r1, [pc, #480]	@ (80412b4 <OBC_AppInit+0x5c8>)
 80410d2:	4879      	ldr	r0, [pc, #484]	@ (80412b8 <OBC_AppInit+0x5cc>)
 80410d4:	f015 f84b 	bl	805616e <xTaskCreate>
 80410d8:	4603      	mov	r3, r0
 80410da:	2b01      	cmp	r3, #1
 80410dc:	d001      	beq.n	80410e2 <OBC_AppInit+0x3f6>
 80410de:	2301      	movs	r3, #1
 80410e0:	e0dd      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(UART_EXP_DMA_RX_Task, 	"EXP_RX_Task",	 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_EXP), 	1, NULL);
 80410e2:	4876      	ldr	r0, [pc, #472]	@ (80412bc <OBC_AppInit+0x5d0>)
 80410e4:	f001 fa0e 	bl	8042504 <UART_DMA_Driver_Get>
 80410e8:	4603      	mov	r3, r0
 80410ea:	2200      	movs	r2, #0
 80410ec:	9201      	str	r2, [sp, #4]
 80410ee:	2201      	movs	r2, #1
 80410f0:	9200      	str	r2, [sp, #0]
 80410f2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80410f6:	4972      	ldr	r1, [pc, #456]	@ (80412c0 <OBC_AppInit+0x5d4>)
 80410f8:	4872      	ldr	r0, [pc, #456]	@ (80412c4 <OBC_AppInit+0x5d8>)
 80410fa:	f015 f838 	bl	805616e <xTaskCreate>
 80410fe:	4603      	mov	r3, r0
 8041100:	2b01      	cmp	r3, #1
 8041102:	d001      	beq.n	8041108 <OBC_AppInit+0x41c>
 8041104:	2301      	movs	r3, #1
 8041106:	e0ca      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(CLI_Handle_Task, 		"CLI_Handle_Task", 	MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);
 8041108:	2300      	movs	r3, #0
 804110a:	9301      	str	r3, [sp, #4]
 804110c:	2301      	movs	r3, #1
 804110e:	9300      	str	r3, [sp, #0]
 8041110:	2300      	movs	r3, #0
 8041112:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8041116:	496c      	ldr	r1, [pc, #432]	@ (80412c8 <OBC_AppInit+0x5dc>)
 8041118:	486c      	ldr	r0, [pc, #432]	@ (80412cc <OBC_AppInit+0x5e0>)
 804111a:	f015 f828 	bl	805616e <xTaskCreate>
 804111e:	4603      	mov	r3, r0
 8041120:	2b01      	cmp	r3, #1
 8041122:	d001      	beq.n	8041128 <OBC_AppInit+0x43c>
 8041124:	2301      	movs	r3, #1
 8041126:	e0ba      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(vTask1_handler, 		"vTask1", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 8041128:	2300      	movs	r3, #0
 804112a:	9301      	str	r3, [sp, #4]
 804112c:	2301      	movs	r3, #1
 804112e:	9300      	str	r3, [sp, #0]
 8041130:	2300      	movs	r3, #0
 8041132:	2280      	movs	r2, #128	@ 0x80
 8041134:	4966      	ldr	r1, [pc, #408]	@ (80412d0 <OBC_AppInit+0x5e4>)
 8041136:	4867      	ldr	r0, [pc, #412]	@ (80412d4 <OBC_AppInit+0x5e8>)
 8041138:	f015 f819 	bl	805616e <xTaskCreate>
 804113c:	4603      	mov	r3, r0
 804113e:	2b01      	cmp	r3, #1
 8041140:	d001      	beq.n	8041146 <OBC_AppInit+0x45a>
 8041142:	2301      	movs	r3, #1
 8041144:	e0ab      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(vTask2_handler, 		"vTask2", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 8041146:	2300      	movs	r3, #0
 8041148:	9301      	str	r3, [sp, #4]
 804114a:	2301      	movs	r3, #1
 804114c:	9300      	str	r3, [sp, #0]
 804114e:	2300      	movs	r3, #0
 8041150:	2280      	movs	r2, #128	@ 0x80
 8041152:	4961      	ldr	r1, [pc, #388]	@ (80412d8 <OBC_AppInit+0x5ec>)
 8041154:	4861      	ldr	r0, [pc, #388]	@ (80412dc <OBC_AppInit+0x5f0>)
 8041156:	f015 f80a 	bl	805616e <xTaskCreate>
 804115a:	4603      	mov	r3, r0
 804115c:	2b01      	cmp	r3, #1
 804115e:	d001      	beq.n	8041164 <OBC_AppInit+0x478>
 8041160:	2301      	movs	r3, #1
 8041162:	e09c      	b.n	804129e <OBC_AppInit+0x5b2>

    		CREATE_TASK(ScriptManager_Task, 		"vTaskx", 			MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8041164:	2300      	movs	r3, #0
 8041166:	9301      	str	r3, [sp, #4]
 8041168:	2301      	movs	r3, #1
 804116a:	9300      	str	r3, [sp, #0]
 804116c:	2300      	movs	r3, #0
 804116e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8041172:	495b      	ldr	r1, [pc, #364]	@ (80412e0 <OBC_AppInit+0x5f4>)
 8041174:	485b      	ldr	r0, [pc, #364]	@ (80412e4 <OBC_AppInit+0x5f8>)
 8041176:	f014 fffa 	bl	805616e <xTaskCreate>
 804117a:	4603      	mov	r3, r0
 804117c:	2b01      	cmp	r3, #1
 804117e:	d001      	beq.n	8041184 <OBC_AppInit+0x498>
 8041180:	2301      	movs	r3, #1
 8041182:	e08c      	b.n	804129e <OBC_AppInit+0x5b2>
    		CREATE_TASK(ScriptDLS_Task, 			"vTasky", 			MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8041184:	2300      	movs	r3, #0
 8041186:	9301      	str	r3, [sp, #4]
 8041188:	2301      	movs	r3, #1
 804118a:	9300      	str	r3, [sp, #0]
 804118c:	2300      	movs	r3, #0
 804118e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8041192:	4955      	ldr	r1, [pc, #340]	@ (80412e8 <OBC_AppInit+0x5fc>)
 8041194:	4855      	ldr	r0, [pc, #340]	@ (80412ec <OBC_AppInit+0x600>)
 8041196:	f014 ffea 	bl	805616e <xTaskCreate>
 804119a:	4603      	mov	r3, r0
 804119c:	2b01      	cmp	r3, #1
 804119e:	d001      	beq.n	80411a4 <OBC_AppInit+0x4b8>
 80411a0:	2301      	movs	r3, #1
 80411a2:	e07c      	b.n	804129e <OBC_AppInit+0x5b2>
    		CREATE_TASK(ScriptCAM_Task, 			"vTaskz", 			MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 80411a4:	2300      	movs	r3, #0
 80411a6:	9301      	str	r3, [sp, #4]
 80411a8:	2301      	movs	r3, #1
 80411aa:	9300      	str	r3, [sp, #0]
 80411ac:	2300      	movs	r3, #0
 80411ae:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80411b2:	494f      	ldr	r1, [pc, #316]	@ (80412f0 <OBC_AppInit+0x604>)
 80411b4:	484f      	ldr	r0, [pc, #316]	@ (80412f4 <OBC_AppInit+0x608>)
 80411b6:	f014 ffda 	bl	805616e <xTaskCreate>
 80411ba:	4603      	mov	r3, r0
 80411bc:	2b01      	cmp	r3, #1
 80411be:	d001      	beq.n	80411c4 <OBC_AppInit+0x4d8>
 80411c0:	2301      	movs	r3, #1
 80411c2:	e06c      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(UART_USB_DMA_RX_TASK, 	"UART_USB_RX_Task", MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_USB),	1, NULL);
 80411c4:	484c      	ldr	r0, [pc, #304]	@ (80412f8 <OBC_AppInit+0x60c>)
 80411c6:	f001 f99d 	bl	8042504 <UART_DMA_Driver_Get>
 80411ca:	4603      	mov	r3, r0
 80411cc:	2200      	movs	r2, #0
 80411ce:	9201      	str	r2, [sp, #4]
 80411d0:	2201      	movs	r2, #1
 80411d2:	9200      	str	r2, [sp, #0]
 80411d4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80411d8:	4948      	ldr	r1, [pc, #288]	@ (80412fc <OBC_AppInit+0x610>)
 80411da:	4849      	ldr	r0, [pc, #292]	@ (8041300 <OBC_AppInit+0x614>)
 80411dc:	f014 ffc7 	bl	805616e <xTaskCreate>
 80411e0:	4603      	mov	r3, r0
 80411e2:	2b01      	cmp	r3, #1
 80411e4:	d001      	beq.n	80411ea <OBC_AppInit+0x4fe>
 80411e6:	2301      	movs	r3, #1
 80411e8:	e059      	b.n	804129e <OBC_AppInit+0x5b2>

    		CREATE_TASK(LogManager_Task, 			"LogManager", 		MIN_STACK_SIZE * 5, 		NULL, 								1, NULL);
 80411ea:	2300      	movs	r3, #0
 80411ec:	9301      	str	r3, [sp, #4]
 80411ee:	2301      	movs	r3, #1
 80411f0:	9300      	str	r3, [sp, #0]
 80411f2:	2300      	movs	r3, #0
 80411f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80411f8:	4942      	ldr	r1, [pc, #264]	@ (8041304 <OBC_AppInit+0x618>)
 80411fa:	4843      	ldr	r0, [pc, #268]	@ (8041308 <OBC_AppInit+0x61c>)
 80411fc:	f014 ffb7 	bl	805616e <xTaskCreate>
 8041200:	4603      	mov	r3, r0
 8041202:	2b01      	cmp	r3, #1
 8041204:	d001      	beq.n	804120a <OBC_AppInit+0x51e>
 8041206:	2301      	movs	r3, #1
 8041208:	e049      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(WatchdogMonitorTask, 	"WatchdogMonitorTask", 	MIN_STACK_SIZE * 2, 		NULL, 									1, NULL);
 804120a:	2300      	movs	r3, #0
 804120c:	9301      	str	r3, [sp, #4]
 804120e:	2301      	movs	r3, #1
 8041210:	9300      	str	r3, [sp, #0]
 8041212:	2300      	movs	r3, #0
 8041214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8041218:	493c      	ldr	r1, [pc, #240]	@ (804130c <OBC_AppInit+0x620>)
 804121a:	483d      	ldr	r0, [pc, #244]	@ (8041310 <OBC_AppInit+0x624>)
 804121c:	f014 ffa7 	bl	805616e <xTaskCreate>
 8041220:	4603      	mov	r3, r0
 8041222:	2b01      	cmp	r3, #1
 8041224:	d001      	beq.n	804122a <OBC_AppInit+0x53e>
 8041226:	2301      	movs	r3, #1
 8041228:	e039      	b.n	804129e <OBC_AppInit+0x5b2>
    CREATE_TASK(WatchdogPulseTask, 		"WatchdogPulseTask", 	MIN_STACK_SIZE * 2, 		NULL, 									1, NULL);
 804122a:	2300      	movs	r3, #0
 804122c:	9301      	str	r3, [sp, #4]
 804122e:	2301      	movs	r3, #1
 8041230:	9300      	str	r3, [sp, #0]
 8041232:	2300      	movs	r3, #0
 8041234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8041238:	4936      	ldr	r1, [pc, #216]	@ (8041314 <OBC_AppInit+0x628>)
 804123a:	4837      	ldr	r0, [pc, #220]	@ (8041318 <OBC_AppInit+0x62c>)
 804123c:	f014 ff97 	bl	805616e <xTaskCreate>
 8041240:	4603      	mov	r3, r0
 8041242:	2b01      	cmp	r3, #1
 8041244:	d001      	beq.n	804124a <OBC_AppInit+0x55e>
 8041246:	2301      	movs	r3, #1
 8041248:	e029      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(CM4_KeepAliveTask, 		"CM4_KeepAlive", 		MIN_STACK_SIZE * 5, 		NULL, 									1, NULL);
 804124a:	2300      	movs	r3, #0
 804124c:	9301      	str	r3, [sp, #4]
 804124e:	2301      	movs	r3, #1
 8041250:	9300      	str	r3, [sp, #0]
 8041252:	2300      	movs	r3, #0
 8041254:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8041258:	4930      	ldr	r1, [pc, #192]	@ (804131c <OBC_AppInit+0x630>)
 804125a:	4831      	ldr	r0, [pc, #196]	@ (8041320 <OBC_AppInit+0x634>)
 804125c:	f014 ff87 	bl	805616e <xTaskCreate>
 8041260:	4603      	mov	r3, r0
 8041262:	2b01      	cmp	r3, #1
 8041264:	d001      	beq.n	804126a <OBC_AppInit+0x57e>
 8041266:	2301      	movs	r3, #1
 8041268:	e019      	b.n	804129e <OBC_AppInit+0x5b2>

    CREATE_TASK(ExpMonitorTask, 		"ExpMonitorTask", 		MIN_STACK_SIZE * 2, 		NULL, 									1, NULL);
 804126a:	2300      	movs	r3, #0
 804126c:	9301      	str	r3, [sp, #4]
 804126e:	2301      	movs	r3, #1
 8041270:	9300      	str	r3, [sp, #0]
 8041272:	2300      	movs	r3, #0
 8041274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8041278:	492a      	ldr	r1, [pc, #168]	@ (8041324 <OBC_AppInit+0x638>)
 804127a:	482b      	ldr	r0, [pc, #172]	@ (8041328 <OBC_AppInit+0x63c>)
 804127c:	f014 ff77 	bl	805616e <xTaskCreate>
 8041280:	4603      	mov	r3, r0
 8041282:	2b01      	cmp	r3, #1
 8041284:	d001      	beq.n	804128a <OBC_AppInit+0x59e>
 8041286:	2301      	movs	r3, #1
 8041288:	e009      	b.n	804129e <OBC_AppInit+0x5b2>

    vTaskDelay(pdMS_TO_TICKS(1));
 804128a:	2001      	movs	r0, #1
 804128c:	f015 f9ea 	bl	8056664 <vTaskDelay>

	Shield_Init(&auth_usb, writeChar_auth_USB);
 8041290:	4926      	ldr	r1, [pc, #152]	@ (804132c <OBC_AppInit+0x640>)
 8041292:	4827      	ldr	r0, [pc, #156]	@ (8041330 <OBC_AppInit+0x644>)
 8041294:	f001 fe9a 	bl	8042fcc <Shield_Init>

	Dmesg_Init();
 8041298:	f006 fb76 	bl	8047988 <Dmesg_Init>

    return E_OK;
 804129c:	2300      	movs	r3, #0
}
 804129e:	4618      	mov	r0, r3
 80412a0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80412a4:	46bd      	mov	sp, r7
 80412a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80412a8:	0806ac6c 	.word	0x0806ac6c
 80412ac:	08041335 	.word	0x08041335
 80412b0:	40004400 	.word	0x40004400
 80412b4:	0806ac7c 	.word	0x0806ac7c
 80412b8:	080415c5 	.word	0x080415c5
 80412bc:	40007800 	.word	0x40007800
 80412c0:	0806ac8c 	.word	0x0806ac8c
 80412c4:	080414e9 	.word	0x080414e9
 80412c8:	0806ac98 	.word	0x0806ac98
 80412cc:	08041381 	.word	0x08041381
 80412d0:	0806aca8 	.word	0x0806aca8
 80412d4:	080416c9 	.word	0x080416c9
 80412d8:	0806acb0 	.word	0x0806acb0
 80412dc:	080416fd 	.word	0x080416fd
 80412e0:	0806acb8 	.word	0x0806acb8
 80412e4:	0804a451 	.word	0x0804a451
 80412e8:	0806acc0 	.word	0x0806acc0
 80412ec:	0804a63d 	.word	0x0804a63d
 80412f0:	0806acc8 	.word	0x0806acc8
 80412f4:	0804a7d1 	.word	0x0804a7d1
 80412f8:	40011000 	.word	0x40011000
 80412fc:	0806acd0 	.word	0x0806acd0
 8041300:	080413d9 	.word	0x080413d9
 8041304:	0806ace4 	.word	0x0806ace4
 8041308:	08041731 	.word	0x08041731
 804130c:	0806acf0 	.word	0x0806acf0
 8041310:	08041751 	.word	0x08041751
 8041314:	0806ad04 	.word	0x0806ad04
 8041318:	080417d5 	.word	0x080417d5
 804131c:	0806ad18 	.word	0x0806ad18
 8041320:	08042cb1 	.word	0x08042cb1
 8041324:	0806ad28 	.word	0x0806ad28
 8041328:	0804180d 	.word	0x0804180d
 804132c:	08040be1 	.word	0x08040be1
 8041330:	24014a90 	.word	0x24014a90

08041334 <vSoft_RTC_Task>:

/*************************************************
 *               TASK LIST                       *
 *************************************************/
void vSoft_RTC_Task(void *pvParameters)
{
 8041334:	b580      	push	{r7, lr}
 8041336:	b082      	sub	sp, #8
 8041338:	af00      	add	r7, sp, #0
 804133a:	6078      	str	r0, [r7, #4]
    static uint32_t countingSyncTime = 1;

    while(1)
    {
        Utils_SoftTime_Update();
 804133c:	f00c fa0c 	bl	804d758 <Utils_SoftTime_Update>
        countingSyncTime++;
 8041340:	4b0d      	ldr	r3, [pc, #52]	@ (8041378 <vSoft_RTC_Task+0x44>)
 8041342:	681b      	ldr	r3, [r3, #0]
 8041344:	3301      	adds	r3, #1
 8041346:	4a0c      	ldr	r2, [pc, #48]	@ (8041378 <vSoft_RTC_Task+0x44>)
 8041348:	6013      	str	r3, [r2, #0]
        if(countingSyncTime > 7200)
 804134a:	4b0b      	ldr	r3, [pc, #44]	@ (8041378 <vSoft_RTC_Task+0x44>)
 804134c:	681b      	ldr	r3, [r3, #0]
 804134e:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 8041352:	d90c      	bls.n	804136e <vSoft_RTC_Task+0x3a>
        {
            countingSyncTime = 0;
 8041354:	4b08      	ldr	r3, [pc, #32]	@ (8041378 <vSoft_RTC_Task+0x44>)
 8041356:	2200      	movs	r2, #0
 8041358:	601a      	str	r2, [r3, #0]
            if(Utils_SoftTime_Sync() == E_OK)
 804135a:	f00c fc97 	bl	804dc8c <Utils_SoftTime_Sync>
 804135e:	4603      	mov	r3, r0
 8041360:	2b00      	cmp	r3, #0
 8041362:	d104      	bne.n	804136e <vSoft_RTC_Task+0x3a>
            {
                SYSLOG_NOTICE("[Sync Time!]");
 8041364:	2200      	movs	r2, #0
 8041366:	4905      	ldr	r1, [pc, #20]	@ (804137c <vSoft_RTC_Task+0x48>)
 8041368:	2002      	movs	r0, #2
 804136a:	f00a fc21 	bl	804bbb0 <syslog_log>
            }
        }

        vTaskDelay(1000);
 804136e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8041372:	f015 f977 	bl	8056664 <vTaskDelay>
        Utils_SoftTime_Update();
 8041376:	e7e1      	b.n	804133c <vSoft_RTC_Task+0x8>
 8041378:	24014744 	.word	0x24014744
 804137c:	0806ad38 	.word	0x0806ad38

08041380 <CLI_Handle_Task>:
    }
}

void CLI_Handle_Task(void *pvParameters)
{
 8041380:	b580      	push	{r7, lr}
 8041382:	b084      	sub	sp, #16
 8041384:	af00      	add	r7, sp, #0
 8041386:	6078      	str	r0, [r7, #4]
	while (1)
	{
    	ShieldAuthState_t auth_state;

    	auth_state = Shield_GetState(&auth_usb);
 8041388:	4811      	ldr	r0, [pc, #68]	@ (80413d0 <CLI_Handle_Task+0x50>)
 804138a:	f002 f8b3 	bl	80434f4 <Shield_GetState>
 804138e:	4603      	mov	r3, r0
 8041390:	73fb      	strb	r3, [r7, #15]
    	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 8041392:	7bfb      	ldrb	r3, [r7, #15]
 8041394:	2b03      	cmp	r3, #3
 8041396:	d002      	beq.n	804139e <CLI_Handle_Task+0x1e>
 8041398:	7bfb      	ldrb	r3, [r7, #15]
 804139a:	2b04      	cmp	r3, #4
 804139c:	d113      	bne.n	80413c6 <CLI_Handle_Task+0x46>
        	if(auth_usb.initreset == 1){
 804139e:	4b0c      	ldr	r3, [pc, #48]	@ (80413d0 <CLI_Handle_Task+0x50>)
 80413a0:	6a1b      	ldr	r3, [r3, #32]
 80413a2:	2b01      	cmp	r3, #1
 80413a4:	d109      	bne.n	80413ba <CLI_Handle_Task+0x3a>
                embeddedCliPrint(getUsbCdcCliPointer(), "");
 80413a6:	f004 fce1 	bl	8045d6c <getUsbCdcCliPointer>
 80413aa:	4603      	mov	r3, r0
 80413ac:	4909      	ldr	r1, [pc, #36]	@ (80413d4 <CLI_Handle_Task+0x54>)
 80413ae:	4618      	mov	r0, r3
 80413b0:	f004 fe86 	bl	80460c0 <embeddedCliPrint>
                auth_usb.initreset = 0;
 80413b4:	4b06      	ldr	r3, [pc, #24]	@ (80413d0 <CLI_Handle_Task+0x50>)
 80413b6:	2200      	movs	r2, #0
 80413b8:	621a      	str	r2, [r3, #32]
        	}
			embeddedCliProcess(getUsbCdcCliPointer());
 80413ba:	f004 fcd7 	bl	8045d6c <getUsbCdcCliPointer>
 80413be:	4603      	mov	r3, r0
 80413c0:	4618      	mov	r0, r3
 80413c2:	f004 fdec 	bl	8045f9e <embeddedCliProcess>
//			embeddedCliProcess(getUartCm4CliPointer());
    	}

		vTaskDelay(100);
 80413c6:	2064      	movs	r0, #100	@ 0x64
 80413c8:	f015 f94c 	bl	8056664 <vTaskDelay>
	{
 80413cc:	e7dc      	b.n	8041388 <CLI_Handle_Task+0x8>
 80413ce:	bf00      	nop
 80413d0:	24014a90 	.word	0x24014a90
 80413d4:	0806ad48 	.word	0x0806ad48

080413d8 <UART_USB_DMA_RX_TASK>:
	}
}

void UART_USB_DMA_RX_TASK(void *pvParameters)
{
 80413d8:	b580      	push	{r7, lr}
 80413da:	b086      	sub	sp, #24
 80413dc:	af00      	add	r7, sp, #0
 80413de:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 80413e0:	687b      	ldr	r3, [r7, #4]
 80413e2:	617b      	str	r3, [r7, #20]
    for (;;)
    {
    		// Sửa port max delay
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 80413e4:	697b      	ldr	r3, [r7, #20]
 80413e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80413e8:	f04f 31ff 	mov.w	r1, #4294967295
 80413ec:	4618      	mov	r0, r3
 80413ee:	f014 f9f3 	bl	80557d8 <xQueueSemaphoreTake>
 80413f2:	4603      	mov	r3, r0
 80413f4:	2b01      	cmp	r3, #1
 80413f6:	d16d      	bne.n	80414d4 <UART_USB_DMA_RX_TASK+0xfc>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80413f8:	e062      	b.n	80414c0 <UART_USB_DMA_RX_TASK+0xe8>
            {
                ForwardMode_t mode = ForwardMode_Get();
 80413fa:	f7ff fb53 	bl	8040aa4 <ForwardMode_Get>
 80413fe:	4603      	mov	r3, r0
 8041400:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_USB) {
 8041402:	7bfb      	ldrb	r3, [r7, #15]
 8041404:	2b02      	cmp	r3, #2
 8041406:	d115      	bne.n	8041434 <UART_USB_DMA_RX_TASK+0x5c>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    UART_Driver_Write(UART_EXP, (uint8_t)c);
 8041408:	693b      	ldr	r3, [r7, #16]
 804140a:	b2db      	uxtb	r3, r3
 804140c:	4619      	mov	r1, r3
 804140e:	4833      	ldr	r0, [pc, #204]	@ (80414dc <UART_USB_DMA_RX_TASK+0x104>)
 8041410:	f001 fa58 	bl	80428c4 <UART_Driver_Write>

                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 8041414:	693b      	ldr	r3, [r7, #16]
 8041416:	b2db      	uxtb	r3, r3
 8041418:	4618      	mov	r0, r3
 804141a:	f7ff fb4f 	bl	8040abc <ForwardMode_ProcessReceivedByte>
 804141e:	4603      	mov	r3, r0
 8041420:	2b00      	cmp	r3, #0
 8041422:	d04d      	beq.n	80414c0 <UART_USB_DMA_RX_TASK+0xe8>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 8041424:	f004 fca2 	bl	8045d6c <getUsbCdcCliPointer>
 8041428:	4603      	mov	r3, r0
 804142a:	492d      	ldr	r1, [pc, #180]	@ (80414e0 <UART_USB_DMA_RX_TASK+0x108>)
 804142c:	4618      	mov	r0, r3
 804142e:	f004 fe47 	bl	80460c0 <embeddedCliPrint>
 8041432:	e045      	b.n	80414c0 <UART_USB_DMA_RX_TASK+0xe8>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 8041434:	7bfb      	ldrb	r3, [r7, #15]
 8041436:	2b04      	cmp	r3, #4
 8041438:	d11e      	bne.n	8041478 <UART_USB_DMA_RX_TASK+0xa0>
                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 804143a:	693b      	ldr	r3, [r7, #16]
 804143c:	b2db      	uxtb	r3, r3
 804143e:	4618      	mov	r0, r3
 8041440:	f7ff fb3c 	bl	8040abc <ForwardMode_ProcessReceivedByte>
 8041444:	4603      	mov	r3, r0
 8041446:	2b00      	cmp	r3, #0
 8041448:	d006      	beq.n	8041458 <UART_USB_DMA_RX_TASK+0x80>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 804144a:	f004 fc8f 	bl	8045d6c <getUsbCdcCliPointer>
 804144e:	4603      	mov	r3, r0
 8041450:	4923      	ldr	r1, [pc, #140]	@ (80414e0 <UART_USB_DMA_RX_TASK+0x108>)
 8041452:	4618      	mov	r0, r3
 8041454:	f004 fe34 	bl	80460c0 <embeddedCliPrint>
                    }
                    embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 8041458:	f004 fc88 	bl	8045d6c <getUsbCdcCliPointer>
 804145c:	4602      	mov	r2, r0
 804145e:	693b      	ldr	r3, [r7, #16]
 8041460:	b2db      	uxtb	r3, r3
 8041462:	4619      	mov	r1, r3
 8041464:	4610      	mov	r0, r2
 8041466:	f004 fd77 	bl	8045f58 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUsbCdcCliPointer());
 804146a:	f004 fc7f 	bl	8045d6c <getUsbCdcCliPointer>
 804146e:	4603      	mov	r3, r0
 8041470:	4618      	mov	r0, r3
 8041472:	f004 fd94 	bl	8045f9e <embeddedCliProcess>
 8041476:	e023      	b.n	80414c0 <UART_USB_DMA_RX_TASK+0xe8>
                } else {
                    // Mode NORMAL: CLI
                	ShieldAuthState_t auth_state = Shield_GetState(&auth_usb);
 8041478:	481a      	ldr	r0, [pc, #104]	@ (80414e4 <UART_USB_DMA_RX_TASK+0x10c>)
 804147a:	f002 f83b 	bl	80434f4 <Shield_GetState>
 804147e:	4603      	mov	r3, r0
 8041480:	73bb      	strb	r3, [r7, #14]
                	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 8041482:	7bbb      	ldrb	r3, [r7, #14]
 8041484:	2b03      	cmp	r3, #3
 8041486:	d002      	beq.n	804148e <UART_USB_DMA_RX_TASK+0xb6>
 8041488:	7bbb      	ldrb	r3, [r7, #14]
 804148a:	2b04      	cmp	r3, #4
 804148c:	d112      	bne.n	80414b4 <UART_USB_DMA_RX_TASK+0xdc>
                		Shield_ResetTimer(&auth_usb);
 804148e:	4815      	ldr	r0, [pc, #84]	@ (80414e4 <UART_USB_DMA_RX_TASK+0x10c>)
 8041490:	f001 fd8a 	bl	8042fa8 <Shield_ResetTimer>
                        embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 8041494:	f004 fc6a 	bl	8045d6c <getUsbCdcCliPointer>
 8041498:	4602      	mov	r2, r0
 804149a:	693b      	ldr	r3, [r7, #16]
 804149c:	b2db      	uxtb	r3, r3
 804149e:	4619      	mov	r1, r3
 80414a0:	4610      	mov	r0, r2
 80414a2:	f004 fd59 	bl	8045f58 <embeddedCliReceiveChar>
                        embeddedCliProcess(getUsbCdcCliPointer());
 80414a6:	f004 fc61 	bl	8045d6c <getUsbCdcCliPointer>
 80414aa:	4603      	mov	r3, r0
 80414ac:	4618      	mov	r0, r3
 80414ae:	f004 fd76 	bl	8045f9e <embeddedCliProcess>
 80414b2:	e005      	b.n	80414c0 <UART_USB_DMA_RX_TASK+0xe8>
                	}else{
                		Shield_ReceiveChar(&auth_usb, (char)c);
 80414b4:	693b      	ldr	r3, [r7, #16]
 80414b6:	b2db      	uxtb	r3, r3
 80414b8:	4619      	mov	r1, r3
 80414ba:	480a      	ldr	r0, [pc, #40]	@ (80414e4 <UART_USB_DMA_RX_TASK+0x10c>)
 80414bc:	f001 fe96 	bl	80431ec <Shield_ReceiveChar>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80414c0:	697b      	ldr	r3, [r7, #20]
 80414c2:	681b      	ldr	r3, [r3, #0]
 80414c4:	4618      	mov	r0, r3
 80414c6:	f001 fb37 	bl	8042b38 <UART_DMA_Driver_Read>
 80414ca:	6138      	str	r0, [r7, #16]
 80414cc:	693b      	ldr	r3, [r7, #16]
 80414ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80414d2:	d192      	bne.n	80413fa <UART_USB_DMA_RX_TASK+0x22>
                	}
                }
            }
        }
        	// Đổi timeout của xtake semapphore -> trigger watchdog task (trigger bit)
        vTaskDelay(pdMS_TO_TICKS(1));
 80414d4:	2001      	movs	r0, #1
 80414d6:	f015 f8c5 	bl	8056664 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 80414da:	e783      	b.n	80413e4 <UART_USB_DMA_RX_TASK+0xc>
 80414dc:	40007800 	.word	0x40007800
 80414e0:	0806ad4c 	.word	0x0806ad4c
 80414e4:	24014a90 	.word	0x24014a90

080414e8 <UART_EXP_DMA_RX_Task>:
    }
}

void UART_EXP_DMA_RX_Task(void *pvParameters)
{
 80414e8:	b580      	push	{r7, lr}
 80414ea:	b088      	sub	sp, #32
 80414ec:	af00      	add	r7, sp, #0
 80414ee:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 80414f0:	687b      	ldr	r3, [r7, #4]
 80414f2:	61fb      	str	r3, [r7, #28]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 80414f4:	69fb      	ldr	r3, [r7, #28]
 80414f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80414f8:	2100      	movs	r1, #0
 80414fa:	4618      	mov	r0, r3
 80414fc:	f014 f96c 	bl	80557d8 <xQueueSemaphoreTake>
 8041500:	4603      	mov	r3, r0
 8041502:	2b01      	cmp	r3, #1
 8041504:	d156      	bne.n	80415b4 <UART_EXP_DMA_RX_Task+0xcc>
        {
                ForwardMode_t mode = ForwardMode_Get();
 8041506:	f7ff facd 	bl	8040aa4 <ForwardMode_Get>
 804150a:	4603      	mov	r3, r0
 804150c:	76fb      	strb	r3, [r7, #27]
                if (mode == FORWARD_MODE_UART) {
 804150e:	7efb      	ldrb	r3, [r7, #27]
 8041510:	2b01      	cmp	r3, #1
 8041512:	d111      	bne.n	8041538 <UART_EXP_DMA_RX_Task+0x50>
                    // Forward mode (CM4): UART7 RX -> UART_DEBUG
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041514:	e005      	b.n	8041522 <UART_EXP_DMA_RX_Task+0x3a>
                    {
						UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 8041516:	68bb      	ldr	r3, [r7, #8]
 8041518:	b2db      	uxtb	r3, r3
 804151a:	4619      	mov	r1, r3
 804151c:	4827      	ldr	r0, [pc, #156]	@ (80415bc <UART_EXP_DMA_RX_Task+0xd4>)
 804151e:	f001 f9d1 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041522:	69fb      	ldr	r3, [r7, #28]
 8041524:	681b      	ldr	r3, [r3, #0]
 8041526:	4618      	mov	r0, r3
 8041528:	f001 fb06 	bl	8042b38 <UART_DMA_Driver_Read>
 804152c:	60b8      	str	r0, [r7, #8]
 804152e:	68bb      	ldr	r3, [r7, #8]
 8041530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041534:	d1ef      	bne.n	8041516 <UART_EXP_DMA_RX_Task+0x2e>
 8041536:	e03d      	b.n	80415b4 <UART_EXP_DMA_RX_Task+0xcc>
                    }
//                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
                } else if (mode == FORWARD_MODE_USB) {
 8041538:	7efb      	ldrb	r3, [r7, #27]
 804153a:	2b02      	cmp	r3, #2
 804153c:	d111      	bne.n	8041562 <UART_EXP_DMA_RX_Task+0x7a>
                    // Forward mode (USB): UART7 -> to CDC
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 804153e:	e005      	b.n	804154c <UART_EXP_DMA_RX_Task+0x64>
                    {
						UART_Driver_Write(UART_USB, (uint8_t)c);
 8041540:	68fb      	ldr	r3, [r7, #12]
 8041542:	b2db      	uxtb	r3, r3
 8041544:	4619      	mov	r1, r3
 8041546:	481e      	ldr	r0, [pc, #120]	@ (80415c0 <UART_EXP_DMA_RX_Task+0xd8>)
 8041548:	f001 f9bc 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 804154c:	69fb      	ldr	r3, [r7, #28]
 804154e:	681b      	ldr	r3, [r3, #0]
 8041550:	4618      	mov	r0, r3
 8041552:	f001 faf1 	bl	8042b38 <UART_DMA_Driver_Read>
 8041556:	60f8      	str	r0, [r7, #12]
 8041558:	68fb      	ldr	r3, [r7, #12]
 804155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804155e:	d1ef      	bne.n	8041540 <UART_EXP_DMA_RX_Task+0x58>
 8041560:	e028      	b.n	80415b4 <UART_EXP_DMA_RX_Task+0xcc>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 8041562:	7efb      	ldrb	r3, [r7, #27]
 8041564:	2b03      	cmp	r3, #3
 8041566:	d111      	bne.n	804158c <UART_EXP_DMA_RX_Task+0xa4>
                    // Listen mode (CM4): UART7 RX -> UART_DEBUG
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041568:	e005      	b.n	8041576 <UART_EXP_DMA_RX_Task+0x8e>
                    {
						UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 804156a:	693b      	ldr	r3, [r7, #16]
 804156c:	b2db      	uxtb	r3, r3
 804156e:	4619      	mov	r1, r3
 8041570:	4812      	ldr	r0, [pc, #72]	@ (80415bc <UART_EXP_DMA_RX_Task+0xd4>)
 8041572:	f001 f9a7 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041576:	69fb      	ldr	r3, [r7, #28]
 8041578:	681b      	ldr	r3, [r3, #0]
 804157a:	4618      	mov	r0, r3
 804157c:	f001 fadc 	bl	8042b38 <UART_DMA_Driver_Read>
 8041580:	6138      	str	r0, [r7, #16]
 8041582:	693b      	ldr	r3, [r7, #16]
 8041584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041588:	d1ef      	bne.n	804156a <UART_EXP_DMA_RX_Task+0x82>
 804158a:	e013      	b.n	80415b4 <UART_EXP_DMA_RX_Task+0xcc>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 804158c:	7efb      	ldrb	r3, [r7, #27]
 804158e:	2b04      	cmp	r3, #4
 8041590:	d110      	bne.n	80415b4 <UART_EXP_DMA_RX_Task+0xcc>
                    // Listen mode (USB):UART7 RX -> CDC
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041592:	e005      	b.n	80415a0 <UART_EXP_DMA_RX_Task+0xb8>
                    {
						UART_Driver_Write(UART_USB, (uint8_t)c);
 8041594:	697b      	ldr	r3, [r7, #20]
 8041596:	b2db      	uxtb	r3, r3
 8041598:	4619      	mov	r1, r3
 804159a:	4809      	ldr	r0, [pc, #36]	@ (80415c0 <UART_EXP_DMA_RX_Task+0xd8>)
 804159c:	f001 f992 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80415a0:	69fb      	ldr	r3, [r7, #28]
 80415a2:	681b      	ldr	r3, [r3, #0]
 80415a4:	4618      	mov	r0, r3
 80415a6:	f001 fac7 	bl	8042b38 <UART_DMA_Driver_Read>
 80415aa:	6178      	str	r0, [r7, #20]
 80415ac:	697b      	ldr	r3, [r7, #20]
 80415ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80415b2:	d1ef      	bne.n	8041594 <UART_EXP_DMA_RX_Task+0xac>
//                    } else if (mode == FORWARD_MODE_USB || mode == FORWARD_MODE_LISTEN_USB) {
//                        embeddedCliPrint(getUsbCdcCliPointer(), "Listen/Forward mode disabled due to 10 consecutive '\\'.");
//                    }
//                }
            }
        vTaskDelay(pdMS_TO_TICKS(1));
 80415b4:	2001      	movs	r0, #1
 80415b6:	f015 f855 	bl	8056664 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 80415ba:	e79b      	b.n	80414f4 <UART_EXP_DMA_RX_Task+0xc>
 80415bc:	40004400 	.word	0x40004400
 80415c0:	40011000 	.word	0x40011000

080415c4 <UART_DEBUG_DMA_RX_Task>:

}


void UART_DEBUG_DMA_RX_Task(void *pvParameters)
{
 80415c4:	b580      	push	{r7, lr}
 80415c6:	b086      	sub	sp, #24
 80415c8:	af00      	add	r7, sp, #0
 80415ca:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 80415cc:	687b      	ldr	r3, [r7, #4]
 80415ce:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 80415d0:	697b      	ldr	r3, [r7, #20]
 80415d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80415d4:	f04f 31ff 	mov.w	r1, #4294967295
 80415d8:	4618      	mov	r0, r3
 80415da:	f014 f8fd 	bl	80557d8 <xQueueSemaphoreTake>
 80415de:	4603      	mov	r3, r0
 80415e0:	2b01      	cmp	r3, #1
 80415e2:	d12c      	bne.n	804163e <UART_DEBUG_DMA_RX_Task+0x7a>
        {

                ForwardMode_t mode = ForwardMode_Get();
 80415e4:	f7ff fa5e 	bl	8040aa4 <ForwardMode_Get>
 80415e8:	4603      	mov	r3, r0
 80415ea:	74fb      	strb	r3, [r7, #19]
                if (mode == FORWARD_MODE_UART) {
 80415ec:	7cfb      	ldrb	r3, [r7, #19]
 80415ee:	2b01      	cmp	r3, #1
 80415f0:	d111      	bne.n	8041616 <UART_DEBUG_DMA_RX_Task+0x52>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80415f2:	e005      	b.n	8041600 <UART_DEBUG_DMA_RX_Task+0x3c>
                    {
						UART_Driver_Write(UART_EXP, (uint8_t)c);
 80415f4:	68bb      	ldr	r3, [r7, #8]
 80415f6:	b2db      	uxtb	r3, r3
 80415f8:	4619      	mov	r1, r3
 80415fa:	4813      	ldr	r0, [pc, #76]	@ (8041648 <UART_DEBUG_DMA_RX_Task+0x84>)
 80415fc:	f001 f962 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8041600:	697b      	ldr	r3, [r7, #20]
 8041602:	681b      	ldr	r3, [r3, #0]
 8041604:	4618      	mov	r0, r3
 8041606:	f001 fa97 	bl	8042b38 <UART_DMA_Driver_Read>
 804160a:	60b8      	str	r0, [r7, #8]
 804160c:	68bb      	ldr	r3, [r7, #8]
 804160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041612:	d1ef      	bne.n	80415f4 <UART_DEBUG_DMA_RX_Task+0x30>
 8041614:	e013      	b.n	804163e <UART_DEBUG_DMA_RX_Task+0x7a>
                    }

                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 8041616:	7cfb      	ldrb	r3, [r7, #19]
 8041618:	2b03      	cmp	r3, #3
 804161a:	d110      	bne.n	804163e <UART_DEBUG_DMA_RX_Task+0x7a>
                    int c;
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 804161c:	e005      	b.n	804162a <UART_DEBUG_DMA_RX_Task+0x66>
                    {
                    	UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 804161e:	68fb      	ldr	r3, [r7, #12]
 8041620:	b2db      	uxtb	r3, r3
 8041622:	4619      	mov	r1, r3
 8041624:	4809      	ldr	r0, [pc, #36]	@ (804164c <UART_DEBUG_DMA_RX_Task+0x88>)
 8041626:	f001 f94d 	bl	80428c4 <UART_Driver_Write>
                    while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 804162a:	697b      	ldr	r3, [r7, #20]
 804162c:	681b      	ldr	r3, [r3, #0]
 804162e:	4618      	mov	r0, r3
 8041630:	f001 fa82 	bl	8042b38 <UART_DMA_Driver_Read>
 8041634:	60f8      	str	r0, [r7, #12]
 8041636:	68fb      	ldr	r3, [r7, #12]
 8041638:	f1b3 3fff 	cmp.w	r3, #4294967295
 804163c:	d1ef      	bne.n	804161e <UART_DEBUG_DMA_RX_Task+0x5a>
                    // Mode NORMAL: CLI
//                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
//                    embeddedCliProcess(getUartCm4CliPointer());
                }
            }
        vTaskDelay(pdMS_TO_TICKS(1));
 804163e:	2001      	movs	r0, #1
 8041640:	f015 f810 	bl	8056664 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 8041644:	e7c4      	b.n	80415d0 <UART_DEBUG_DMA_RX_Task+0xc>
 8041646:	bf00      	nop
 8041648:	40007800 	.word	0x40007800
 804164c:	40004400 	.word	0x40004400

08041650 <MODFSP_Process_Task>:
    }

}

void MODFSP_Process_Task(void *pvParameters)
{
 8041650:	b580      	push	{r7, lr}
 8041652:	b084      	sub	sp, #16
 8041654:	af00      	add	r7, sp, #0
 8041656:	6078      	str	r0, [r7, #4]
	while(1){
		Task_Kick("MODFSP");
 8041658:	480d      	ldr	r0, [pc, #52]	@ (8041690 <MODFSP_Process_Task+0x40>)
 804165a:	f7ff fad3 	bl	8040c04 <Task_Kick>
        ForwardMode_t mode = ForwardMode_Get();
 804165e:	f7ff fa21 	bl	8040aa4 <ForwardMode_Get>
 8041662:	4603      	mov	r3, r0
 8041664:	73fb      	strb	r3, [r7, #15]
        if (mode == FORWARD_MODE_NORMAL) {
 8041666:	7bfb      	ldrb	r3, [r7, #15]
 8041668:	2b00      	cmp	r3, #0
 804166a:	d10c      	bne.n	8041686 <MODFSP_Process_Task+0x36>
            if (UART_DMA_Driver_IsDataAvailable(UART_DEBUG)) {
 804166c:	4809      	ldr	r0, [pc, #36]	@ (8041694 <MODFSP_Process_Task+0x44>)
 804166e:	f001 fa84 	bl	8042b7a <UART_DMA_Driver_IsDataAvailable>
 8041672:	4603      	mov	r3, r0
 8041674:	2b00      	cmp	r3, #0
 8041676:	d003      	beq.n	8041680 <MODFSP_Process_Task+0x30>
            	MODFSP_Process(&cm4_protocol);
 8041678:	4807      	ldr	r0, [pc, #28]	@ (8041698 <MODFSP_Process_Task+0x48>)
 804167a:	f01b fbc3 	bl	805ce04 <MODFSP_Process>
 804167e:	e002      	b.n	8041686 <MODFSP_Process_Task+0x36>
            }else{
            	MODFSP_Process(&cm4_protocol);
 8041680:	4805      	ldr	r0, [pc, #20]	@ (8041698 <MODFSP_Process_Task+0x48>)
 8041682:	f01b fbbf 	bl	805ce04 <MODFSP_Process>
            }
        }
	    vTaskDelay(pdMS_TO_TICKS(1));
 8041686:	2001      	movs	r0, #1
 8041688:	f014 ffec 	bl	8056664 <vTaskDelay>
	while(1){
 804168c:	e7e4      	b.n	8041658 <MODFSP_Process_Task+0x8>
 804168e:	bf00      	nop
 8041690:	0806aa5c 	.word	0x0806aa5c
 8041694:	40004400 	.word	0x40004400
 8041698:	24014aec 	.word	0x24014aec

0804169c <MIN_Process_Task>:
	}
}


void MIN_Process_Task(void *pvParameters)
{
 804169c:	b580      	push	{r7, lr}
 804169e:	b084      	sub	sp, #16
 80416a0:	af00      	add	r7, sp, #0
 80416a2:	6078      	str	r0, [r7, #4]
	while(1){
		Task_Kick("MIN");
 80416a4:	4807      	ldr	r0, [pc, #28]	@ (80416c4 <MIN_Process_Task+0x28>)
 80416a6:	f7ff faad 	bl	8040c04 <Task_Kick>
        ForwardMode_t mode = ForwardMode_Get();
 80416aa:	f7ff f9fb 	bl	8040aa4 <ForwardMode_Get>
 80416ae:	4603      	mov	r3, r0
 80416b0:	73fb      	strb	r3, [r7, #15]
        if (mode == FORWARD_MODE_NORMAL) {
 80416b2:	7bfb      	ldrb	r3, [r7, #15]
 80416b4:	2b00      	cmp	r3, #0
 80416b6:	d101      	bne.n	80416bc <MIN_Process_Task+0x20>
        	MIN_Processing();
 80416b8:	f007 f858 	bl	804876c <MIN_Processing>
        }
	    vTaskDelay(pdMS_TO_TICKS(1));
 80416bc:	2001      	movs	r0, #1
 80416be:	f014 ffd1 	bl	8056664 <vTaskDelay>
	while(1){
 80416c2:	e7ef      	b.n	80416a4 <MIN_Process_Task+0x8>
 80416c4:	0806aa58 	.word	0x0806aa58

080416c8 <vTask1_handler>:
	}
}

void vTask1_handler(void *pvParameters)
{
 80416c8:	b580      	push	{r7, lr}
 80416ca:	b082      	sub	sp, #8
 80416cc:	af00      	add	r7, sp, #0
 80416ce:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetLow(LED0_Port, LED0);
 80416d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80416d4:	4808      	ldr	r0, [pc, #32]	@ (80416f8 <vTask1_handler+0x30>)
 80416d6:	f7ff fa73 	bl	8040bc0 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 80416da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80416de:	f014 ffc1 	bl	8056664 <vTaskDelay>

		GPIO_SetHigh(LED0_Port, LED0);
 80416e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80416e6:	4804      	ldr	r0, [pc, #16]	@ (80416f8 <vTask1_handler+0x30>)
 80416e8:	f7ff fa5c 	bl	8040ba4 <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 80416ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80416f0:	f014 ffb8 	bl	8056664 <vTaskDelay>
		GPIO_SetLow(LED0_Port, LED0);
 80416f4:	bf00      	nop
 80416f6:	e7eb      	b.n	80416d0 <vTask1_handler+0x8>
 80416f8:	58020c00 	.word	0x58020c00

080416fc <vTask2_handler>:
	}
}

void vTask2_handler(void *pvParameters)
{
 80416fc:	b580      	push	{r7, lr}
 80416fe:	b082      	sub	sp, #8
 8041700:	af00      	add	r7, sp, #0
 8041702:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetHigh(LED1_Port, LED1);
 8041704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8041708:	4808      	ldr	r0, [pc, #32]	@ (804172c <vTask2_handler+0x30>)
 804170a:	f7ff fa4b 	bl	8040ba4 <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 804170e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8041712:	f014 ffa7 	bl	8056664 <vTaskDelay>
		GPIO_SetLow(LED1_Port, LED1);
 8041716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804171a:	4804      	ldr	r0, [pc, #16]	@ (804172c <vTask2_handler+0x30>)
 804171c:	f7ff fa50 	bl	8040bc0 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 8041720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8041724:	f014 ff9e 	bl	8056664 <vTaskDelay>
		GPIO_SetHigh(LED1_Port, LED1);
 8041728:	bf00      	nop
 804172a:	e7eb      	b.n	8041704 <vTask2_handler+0x8>
 804172c:	58020c00 	.word	0x58020c00

08041730 <LogManager_Task>:
		vTaskDelay(60000);
	}
}\

void LogManager_Task(void *pvParameters)
{
 8041730:	b580      	push	{r7, lr}
 8041732:	b082      	sub	sp, #8
 8041734:	af00      	add	r7, sp, #0
 8041736:	6078      	str	r0, [r7, #4]
    for (;;) {
    	Task_Kick("LOG");
 8041738:	4804      	ldr	r0, [pc, #16]	@ (804174c <LogManager_Task+0x1c>)
 804173a:	f7ff fa63 	bl	8040c04 <Task_Kick>
    	LogManager_Process();
 804173e:	f017 fd73 	bl	8059228 <LogManager_Process>
        vTaskDelay(100);
 8041742:	2064      	movs	r0, #100	@ 0x64
 8041744:	f014 ff8e 	bl	8056664 <vTaskDelay>
    	Task_Kick("LOG");
 8041748:	bf00      	nop
 804174a:	e7f5      	b.n	8041738 <LogManager_Task+0x8>
 804174c:	0806aa64 	.word	0x0806aa64

08041750 <WatchdogMonitorTask>:
    }
}

void WatchdogMonitorTask(void *pvParameters)
{
 8041750:	b580      	push	{r7, lr}
 8041752:	b086      	sub	sp, #24
 8041754:	af00      	add	r7, sp, #0
 8041756:	6078      	str	r0, [r7, #4]
    for (;;) {
        int allAlive = 1;
 8041758:	2301      	movs	r3, #1
 804175a:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < TASK_COUNT; i++) {
 804175c:	2300      	movs	r3, #0
 804175e:	613b      	str	r3, [r7, #16]
 8041760:	e010      	b.n	8041784 <WatchdogMonitorTask+0x34>
            if (taskHeartbeats[i].alive == 0) {
 8041762:	4a19      	ldr	r2, [pc, #100]	@ (80417c8 <WatchdogMonitorTask+0x78>)
 8041764:	693b      	ldr	r3, [r7, #16]
 8041766:	00db      	lsls	r3, r3, #3
 8041768:	4413      	add	r3, r2
 804176a:	791b      	ldrb	r3, [r3, #4]
 804176c:	2b00      	cmp	r3, #0
 804176e:	d106      	bne.n	804177e <WatchdogMonitorTask+0x2e>
                allAlive = 0;
 8041770:	2300      	movs	r3, #0
 8041772:	617b      	str	r3, [r7, #20]
                SYSLOG_WARN("Missed heartbeat");
 8041774:	2200      	movs	r2, #0
 8041776:	4915      	ldr	r1, [pc, #84]	@ (80417cc <WatchdogMonitorTask+0x7c>)
 8041778:	2003      	movs	r0, #3
 804177a:	f00a fa19 	bl	804bbb0 <syslog_log>
        for (int i = 0; i < TASK_COUNT; i++) {
 804177e:	693b      	ldr	r3, [r7, #16]
 8041780:	3301      	adds	r3, #1
 8041782:	613b      	str	r3, [r7, #16]
 8041784:	693b      	ldr	r3, [r7, #16]
 8041786:	2b02      	cmp	r3, #2
 8041788:	ddeb      	ble.n	8041762 <WatchdogMonitorTask+0x12>
            }
        }

        if (allAlive) {
 804178a:	697b      	ldr	r3, [r7, #20]
 804178c:	2b00      	cmp	r3, #0
 804178e:	d003      	beq.n	8041798 <WatchdogMonitorTask+0x48>
            watchdog_allow_pulse = 1;
 8041790:	4b0f      	ldr	r3, [pc, #60]	@ (80417d0 <WatchdogMonitorTask+0x80>)
 8041792:	2201      	movs	r2, #1
 8041794:	701a      	strb	r2, [r3, #0]
 8041796:	e002      	b.n	804179e <WatchdogMonitorTask+0x4e>
        } else {
            watchdog_allow_pulse = 0;
 8041798:	4b0d      	ldr	r3, [pc, #52]	@ (80417d0 <WatchdogMonitorTask+0x80>)
 804179a:	2200      	movs	r2, #0
 804179c:	701a      	strb	r2, [r3, #0]
        }

        for (int i = 0; i < TASK_COUNT; i++) {
 804179e:	2300      	movs	r3, #0
 80417a0:	60fb      	str	r3, [r7, #12]
 80417a2:	e008      	b.n	80417b6 <WatchdogMonitorTask+0x66>
            taskHeartbeats[i].alive = 0;
 80417a4:	4a08      	ldr	r2, [pc, #32]	@ (80417c8 <WatchdogMonitorTask+0x78>)
 80417a6:	68fb      	ldr	r3, [r7, #12]
 80417a8:	00db      	lsls	r3, r3, #3
 80417aa:	4413      	add	r3, r2
 80417ac:	2200      	movs	r2, #0
 80417ae:	711a      	strb	r2, [r3, #4]
        for (int i = 0; i < TASK_COUNT; i++) {
 80417b0:	68fb      	ldr	r3, [r7, #12]
 80417b2:	3301      	adds	r3, #1
 80417b4:	60fb      	str	r3, [r7, #12]
 80417b6:	68fb      	ldr	r3, [r7, #12]
 80417b8:	2b02      	cmp	r3, #2
 80417ba:	ddf3      	ble.n	80417a4 <WatchdogMonitorTask+0x54>
        }

        vTaskDelay(pdMS_TO_TICKS(500));
 80417bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80417c0:	f014 ff50 	bl	8056664 <vTaskDelay>
    for (;;) {
 80417c4:	e7c8      	b.n	8041758 <WatchdogMonitorTask+0x8>
 80417c6:	bf00      	nop
 80417c8:	24014728 	.word	0x24014728
 80417cc:	0806ad98 	.word	0x0806ad98
 80417d0:	24014740 	.word	0x24014740

080417d4 <WatchdogPulseTask>:
    }
}


void WatchdogPulseTask(void *pvParameters)
{
 80417d4:	b580      	push	{r7, lr}
 80417d6:	b082      	sub	sp, #8
 80417d8:	af00      	add	r7, sp, #0
 80417da:	6078      	str	r0, [r7, #4]
    for (;;) {
        if (watchdog_allow_pulse) {
 80417dc:	4b0a      	ldr	r3, [pc, #40]	@ (8041808 <WatchdogPulseTask+0x34>)
 80417de:	781b      	ldrb	r3, [r3, #0]
 80417e0:	b2db      	uxtb	r3, r3
 80417e2:	2b00      	cmp	r3, #0
 80417e4:	d001      	beq.n	80417ea <WatchdogPulseTask+0x16>
            Watchdog_Device_Update();
 80417e6:	f00a fe0f 	bl	804c408 <Watchdog_Device_Update>
        }

        if (Watchdog_Device_GetState() == WATCHDOG_STATE_HIGH) {
 80417ea:	f00a fe29 	bl	804c440 <Watchdog_Device_GetState>
 80417ee:	4603      	mov	r3, r0
 80417f0:	2b01      	cmp	r3, #1
 80417f2:	d103      	bne.n	80417fc <WatchdogPulseTask+0x28>
            vTaskDelay(pdMS_TO_TICKS(HIGH_PERIOD));
 80417f4:	20c8      	movs	r0, #200	@ 0xc8
 80417f6:	f014 ff35 	bl	8056664 <vTaskDelay>
 80417fa:	e7ef      	b.n	80417dc <WatchdogPulseTask+0x8>
        } else {
            vTaskDelay(pdMS_TO_TICKS(LOW_PERIOD));
 80417fc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8041800:	f014 ff30 	bl	8056664 <vTaskDelay>
        if (watchdog_allow_pulse) {
 8041804:	e7ea      	b.n	80417dc <WatchdogPulseTask+0x8>
 8041806:	bf00      	nop
 8041808:	24014740 	.word	0x24014740

0804180c <ExpMonitorTask>:
        }
    }
}

void ExpMonitorTask(void *pvParameters) {
 804180c:	b580      	push	{r7, lr}
 804180e:	b088      	sub	sp, #32
 8041810:	af00      	add	r7, sp, #0
 8041812:	6078      	str	r0, [r7, #4]
    uint8_t lastLow = GPIO_IsInLow(CM4_PIN_PORT, CM4_PIN);
 8041814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8041818:	4828      	ldr	r0, [pc, #160]	@ (80418bc <ExpMonitorTask+0xb0>)
 804181a:	f7ff f9ae 	bl	8040b7a <LL_GPIO_IsInputPinSet>
 804181e:	4603      	mov	r3, r0
 8041820:	2b00      	cmp	r3, #0
 8041822:	bf0c      	ite	eq
 8041824:	2301      	moveq	r3, #1
 8041826:	2300      	movne	r3, #0
 8041828:	b2db      	uxtb	r3, r3
 804182a:	77fb      	strb	r3, [r7, #31]
    uint32_t lastChangeTime = xTaskGetTickCount();
 804182c:	f015 f97c 	bl	8056b28 <xTaskGetTickCount>
 8041830:	61b8      	str	r0, [r7, #24]

    for (;;) {
        if (!ExpMonitor_IsEnabled()) {
 8041832:	f008 fe01 	bl	804a438 <ExpMonitor_IsEnabled>
 8041836:	4603      	mov	r3, r0
 8041838:	2b00      	cmp	r3, #0
 804183a:	d103      	bne.n	8041844 <ExpMonitorTask+0x38>
            vTaskDelay(pdMS_TO_TICKS(100));
 804183c:	2064      	movs	r0, #100	@ 0x64
 804183e:	f014 ff11 	bl	8056664 <vTaskDelay>
            continue;
 8041842:	e039      	b.n	80418b8 <ExpMonitorTask+0xac>
        }

        uint8_t isLow = GPIO_IsInLow(CM4_PIN_PORT, CM4_PIN);
 8041844:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8041848:	481c      	ldr	r0, [pc, #112]	@ (80418bc <ExpMonitorTask+0xb0>)
 804184a:	f7ff f996 	bl	8040b7a <LL_GPIO_IsInputPinSet>
 804184e:	4603      	mov	r3, r0
 8041850:	2b00      	cmp	r3, #0
 8041852:	bf0c      	ite	eq
 8041854:	2301      	moveq	r3, #1
 8041856:	2300      	movne	r3, #0
 8041858:	b2db      	uxtb	r3, r3
 804185a:	75fb      	strb	r3, [r7, #23]
        uint32_t now = xTaskGetTickCount();
 804185c:	f015 f964 	bl	8056b28 <xTaskGetTickCount>
 8041860:	6138      	str	r0, [r7, #16]

        if (isLow != lastLow) {
 8041862:	7dfa      	ldrb	r2, [r7, #23]
 8041864:	7ffb      	ldrb	r3, [r7, #31]
 8041866:	429a      	cmp	r2, r3
 8041868:	d004      	beq.n	8041874 <ExpMonitorTask+0x68>
            lastLow = isLow;
 804186a:	7dfb      	ldrb	r3, [r7, #23]
 804186c:	77fb      	strb	r3, [r7, #31]
            lastChangeTime = now;
 804186e:	693b      	ldr	r3, [r7, #16]
 8041870:	61bb      	str	r3, [r7, #24]
 8041872:	e01e      	b.n	80418b2 <ExpMonitorTask+0xa6>
        } else {
            uint32_t elapsedMs = (now - lastChangeTime) * portTICK_PERIOD_MS;
 8041874:	693a      	ldr	r2, [r7, #16]
 8041876:	69bb      	ldr	r3, [r7, #24]
 8041878:	1ad3      	subs	r3, r2, r3
 804187a:	60fb      	str	r3, [r7, #12]
            if (isLow && elapsedMs >= MONITOR_DEBOUNCE_MS) {
 804187c:	7dfb      	ldrb	r3, [r7, #23]
 804187e:	2b00      	cmp	r3, #0
 8041880:	d00b      	beq.n	804189a <ExpMonitorTask+0x8e>
 8041882:	68fb      	ldr	r3, [r7, #12]
 8041884:	2b63      	cmp	r3, #99	@ 0x63
 8041886:	d908      	bls.n	804189a <ExpMonitorTask+0x8e>
                // Low > 100 ms: reset EXP  UART-forward
            	MIN_Send_PLEASE_RESET_CMD();
 8041888:	f006 ff98 	bl	80487bc <MIN_Send_PLEASE_RESET_CMD>
                ForwardMode_Set(FORWARD_MODE_UART);
 804188c:	2001      	movs	r0, #1
 804188e:	f7ff f8f3 	bl	8040a78 <ForwardMode_Set>
                ExpMonitor_SetEnabled(0);
 8041892:	2000      	movs	r0, #0
 8041894:	f008 fdb6 	bl	804a404 <ExpMonitor_SetEnabled>
 8041898:	e00b      	b.n	80418b2 <ExpMonitorTask+0xa6>
            }
            else if (!isLow && elapsedMs >= MONITOR_DEBOUNCE_MS) {
 804189a:	7dfb      	ldrb	r3, [r7, #23]
 804189c:	2b00      	cmp	r3, #0
 804189e:	d108      	bne.n	80418b2 <ExpMonitorTask+0xa6>
 80418a0:	68fb      	ldr	r3, [r7, #12]
 80418a2:	2b63      	cmp	r3, #99	@ 0x63
 80418a4:	d905      	bls.n	80418b2 <ExpMonitorTask+0xa6>
                // High > 100 ms: NORMAL mode
                ForwardMode_Set(FORWARD_MODE_NORMAL);
 80418a6:	2000      	movs	r0, #0
 80418a8:	f7ff f8e6 	bl	8040a78 <ForwardMode_Set>
                ExpMonitor_SetEnabled(0);
 80418ac:	2000      	movs	r0, #0
 80418ae:	f008 fda9 	bl	804a404 <ExpMonitor_SetEnabled>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(10));
 80418b2:	200a      	movs	r0, #10
 80418b4:	f014 fed6 	bl	8056664 <vTaskDelay>
    for (;;) {
 80418b8:	e7bb      	b.n	8041832 <ExpMonitorTask+0x26>
 80418ba:	bf00      	nop
 80418bc:	58021000 	.word	0x58021000

080418c0 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 80418c0:	b480      	push	{r7}
 80418c2:	b083      	sub	sp, #12
 80418c4:	af00      	add	r7, sp, #0
 80418c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 80418c8:	687b      	ldr	r3, [r7, #4]
 80418ca:	699b      	ldr	r3, [r3, #24]
 80418cc:	f003 0301 	and.w	r3, r3, #1
 80418d0:	2b01      	cmp	r3, #1
 80418d2:	d101      	bne.n	80418d8 <LL_I2C_IsActiveFlag_TXE+0x18>
 80418d4:	2301      	movs	r3, #1
 80418d6:	e000      	b.n	80418da <LL_I2C_IsActiveFlag_TXE+0x1a>
 80418d8:	2300      	movs	r3, #0
}
 80418da:	4618      	mov	r0, r3
 80418dc:	370c      	adds	r7, #12
 80418de:	46bd      	mov	sp, r7
 80418e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418e4:	4770      	bx	lr

080418e6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80418e6:	b480      	push	{r7}
 80418e8:	b083      	sub	sp, #12
 80418ea:	af00      	add	r7, sp, #0
 80418ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80418ee:	687b      	ldr	r3, [r7, #4]
 80418f0:	699b      	ldr	r3, [r3, #24]
 80418f2:	f003 0302 	and.w	r3, r3, #2
 80418f6:	2b02      	cmp	r3, #2
 80418f8:	d101      	bne.n	80418fe <LL_I2C_IsActiveFlag_TXIS+0x18>
 80418fa:	2301      	movs	r3, #1
 80418fc:	e000      	b.n	8041900 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80418fe:	2300      	movs	r3, #0
}
 8041900:	4618      	mov	r0, r3
 8041902:	370c      	adds	r7, #12
 8041904:	46bd      	mov	sp, r7
 8041906:	f85d 7b04 	ldr.w	r7, [sp], #4
 804190a:	4770      	bx	lr

0804190c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 804190c:	b480      	push	{r7}
 804190e:	b083      	sub	sp, #12
 8041910:	af00      	add	r7, sp, #0
 8041912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8041914:	687b      	ldr	r3, [r7, #4]
 8041916:	699b      	ldr	r3, [r3, #24]
 8041918:	f003 0304 	and.w	r3, r3, #4
 804191c:	2b04      	cmp	r3, #4
 804191e:	d101      	bne.n	8041924 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8041920:	2301      	movs	r3, #1
 8041922:	e000      	b.n	8041926 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8041924:	2300      	movs	r3, #0
}
 8041926:	4618      	mov	r0, r3
 8041928:	370c      	adds	r7, #12
 804192a:	46bd      	mov	sp, r7
 804192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041930:	4770      	bx	lr

08041932 <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(const I2C_TypeDef *I2Cx)
{
 8041932:	b480      	push	{r7}
 8041934:	b083      	sub	sp, #12
 8041936:	af00      	add	r7, sp, #0
 8041938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 804193a:	687b      	ldr	r3, [r7, #4]
 804193c:	699b      	ldr	r3, [r3, #24]
 804193e:	f003 0310 	and.w	r3, r3, #16
 8041942:	2b10      	cmp	r3, #16
 8041944:	d101      	bne.n	804194a <LL_I2C_IsActiveFlag_NACK+0x18>
 8041946:	2301      	movs	r3, #1
 8041948:	e000      	b.n	804194c <LL_I2C_IsActiveFlag_NACK+0x1a>
 804194a:	2300      	movs	r3, #0
}
 804194c:	4618      	mov	r0, r3
 804194e:	370c      	adds	r7, #12
 8041950:	46bd      	mov	sp, r7
 8041952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041956:	4770      	bx	lr

08041958 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 8041958:	b480      	push	{r7}
 804195a:	b083      	sub	sp, #12
 804195c:	af00      	add	r7, sp, #0
 804195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8041960:	687b      	ldr	r3, [r7, #4]
 8041962:	699b      	ldr	r3, [r3, #24]
 8041964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8041968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 804196c:	d101      	bne.n	8041972 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 804196e:	2301      	movs	r3, #1
 8041970:	e000      	b.n	8041974 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8041972:	2300      	movs	r3, #0
}
 8041974:	4618      	mov	r0, r3
 8041976:	370c      	adds	r7, #12
 8041978:	46bd      	mov	sp, r7
 804197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804197e:	4770      	bx	lr

08041980 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8041980:	b480      	push	{r7}
 8041982:	b083      	sub	sp, #12
 8041984:	af00      	add	r7, sp, #0
 8041986:	6078      	str	r0, [r7, #4]
 8041988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 804198a:	687b      	ldr	r3, [r7, #4]
 804198c:	685b      	ldr	r3, [r3, #4]
 804198e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8041992:	683b      	ldr	r3, [r7, #0]
 8041994:	431a      	orrs	r2, r3
 8041996:	687b      	ldr	r3, [r7, #4]
 8041998:	605a      	str	r2, [r3, #4]
}
 804199a:	bf00      	nop
 804199c:	370c      	adds	r7, #12
 804199e:	46bd      	mov	sp, r7
 80419a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419a4:	4770      	bx	lr
	...

080419a8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80419a8:	b480      	push	{r7}
 80419aa:	b087      	sub	sp, #28
 80419ac:	af00      	add	r7, sp, #0
 80419ae:	60f8      	str	r0, [r7, #12]
 80419b0:	60b9      	str	r1, [r7, #8]
 80419b2:	607a      	str	r2, [r7, #4]
 80419b4:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80419b6:	68bb      	ldr	r3, [r7, #8]
 80419b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80419bc:	687b      	ldr	r3, [r7, #4]
 80419be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80419c2:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80419c4:	683b      	ldr	r3, [r7, #0]
 80419c6:	041b      	lsls	r3, r3, #16
 80419c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80419cc:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80419ce:	6a3b      	ldr	r3, [r7, #32]
 80419d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80419d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419d4:	4313      	orrs	r3, r2
 80419d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80419da:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80419dc:	68fb      	ldr	r3, [r7, #12]
 80419de:	685a      	ldr	r2, [r3, #4]
 80419e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419e2:	0d5b      	lsrs	r3, r3, #21
 80419e4:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80419e8:	4b06      	ldr	r3, [pc, #24]	@ (8041a04 <LL_I2C_HandleTransfer+0x5c>)
 80419ea:	430b      	orrs	r3, r1
 80419ec:	43db      	mvns	r3, r3
 80419ee:	401a      	ands	r2, r3
 80419f0:	697b      	ldr	r3, [r7, #20]
 80419f2:	431a      	orrs	r2, r3
 80419f4:	68fb      	ldr	r3, [r7, #12]
 80419f6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 80419f8:	bf00      	nop
 80419fa:	371c      	adds	r7, #28
 80419fc:	46bd      	mov	sp, r7
 80419fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a02:	4770      	bx	lr
 8041a04:	03ff7bff 	.word	0x03ff7bff

08041a08 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8041a08:	b480      	push	{r7}
 8041a0a:	b083      	sub	sp, #12
 8041a0c:	af00      	add	r7, sp, #0
 8041a0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8041a10:	687b      	ldr	r3, [r7, #4]
 8041a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041a14:	b2db      	uxtb	r3, r3
}
 8041a16:	4618      	mov	r0, r3
 8041a18:	370c      	adds	r7, #12
 8041a1a:	46bd      	mov	sp, r7
 8041a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a20:	4770      	bx	lr

08041a22 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8041a22:	b480      	push	{r7}
 8041a24:	b083      	sub	sp, #12
 8041a26:	af00      	add	r7, sp, #0
 8041a28:	6078      	str	r0, [r7, #4]
 8041a2a:	460b      	mov	r3, r1
 8041a2c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8041a2e:	78fa      	ldrb	r2, [r7, #3]
 8041a30:	687b      	ldr	r3, [r7, #4]
 8041a32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8041a34:	bf00      	nop
 8041a36:	370c      	adds	r7, #12
 8041a38:	46bd      	mov	sp, r7
 8041a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a3e:	4770      	bx	lr

08041a40 <I2C_Write>:
#include "reinit.h"

#define I2C_TIMEOUT     10      /* 10ms */

Std_ReturnType I2C_Write(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address, uint8_t *pData, uint8_t Length)
{
 8041a40:	b580      	push	{r7, lr}
 8041a42:	b088      	sub	sp, #32
 8041a44:	af02      	add	r7, sp, #8
 8041a46:	60f8      	str	r0, [r7, #12]
 8041a48:	607b      	str	r3, [r7, #4]
 8041a4a:	460b      	mov	r3, r1
 8041a4c:	72fb      	strb	r3, [r7, #11]
 8041a4e:	4613      	mov	r3, r2
 8041a50:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 8041a52:	f00c fa8f 	bl	804df74 <Utils_GetTick>
 8041a56:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8041a58:	e00d      	b.n	8041a76 <I2C_Write+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041a5a:	f00c fa8b 	bl	804df74 <Utils_GetTick>
 8041a5e:	4602      	mov	r2, r0
 8041a60:	693b      	ldr	r3, [r7, #16]
 8041a62:	1ad3      	subs	r3, r2, r3
 8041a64:	2b0a      	cmp	r3, #10
 8041a66:	d906      	bls.n	8041a76 <I2C_Write+0x36>
        	I2C_ReInit(i2c->Instance);
 8041a68:	68fb      	ldr	r3, [r7, #12]
 8041a6a:	681b      	ldr	r3, [r3, #0]
 8041a6c:	4618      	mov	r0, r3
 8041a6e:	f01c f94b 	bl	805dd08 <I2C_ReInit>
            return E_BUSY;
 8041a72:	2302      	movs	r3, #2
 8041a74:	e096      	b.n	8041ba4 <I2C_Write+0x164>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8041a76:	68fb      	ldr	r3, [r7, #12]
 8041a78:	681b      	ldr	r3, [r3, #0]
 8041a7a:	4618      	mov	r0, r3
 8041a7c:	f7ff ff6c 	bl	8041958 <LL_I2C_IsActiveFlag_BUSY>
 8041a80:	4603      	mov	r3, r0
 8041a82:	2b00      	cmp	r3, #0
 8041a84:	d1e9      	bne.n	8041a5a <I2C_Write+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, Length + 1,
 8041a86:	68fb      	ldr	r3, [r7, #12]
 8041a88:	6818      	ldr	r0, [r3, #0]
 8041a8a:	7afb      	ldrb	r3, [r7, #11]
 8041a8c:	0059      	lsls	r1, r3, #1
 8041a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8041a92:	3301      	adds	r3, #1
 8041a94:	461a      	mov	r2, r3
 8041a96:	4b45      	ldr	r3, [pc, #276]	@ (8041bac <I2C_Write+0x16c>)
 8041a98:	9301      	str	r3, [sp, #4]
 8041a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041a9e:	9300      	str	r3, [sp, #0]
 8041aa0:	4613      	mov	r3, r2
 8041aa2:	2200      	movs	r2, #0
 8041aa4:	f7ff ff80 	bl	80419a8 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 8041aa8:	f00c fa64 	bl	804df74 <Utils_GetTick>
 8041aac:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041aae:	e017      	b.n	8041ae0 <I2C_Write+0xa0>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8041ab0:	68fb      	ldr	r3, [r7, #12]
 8041ab2:	681b      	ldr	r3, [r3, #0]
 8041ab4:	4618      	mov	r0, r3
 8041ab6:	f7ff ff3c 	bl	8041932 <LL_I2C_IsActiveFlag_NACK>
 8041aba:	4603      	mov	r3, r0
 8041abc:	2b00      	cmp	r3, #0
 8041abe:	d001      	beq.n	8041ac4 <I2C_Write+0x84>
            return E_ERROR;
 8041ac0:	2301      	movs	r3, #1
 8041ac2:	e06f      	b.n	8041ba4 <I2C_Write+0x164>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041ac4:	f00c fa56 	bl	804df74 <Utils_GetTick>
 8041ac8:	4602      	mov	r2, r0
 8041aca:	693b      	ldr	r3, [r7, #16]
 8041acc:	1ad3      	subs	r3, r2, r3
 8041ace:	2b0a      	cmp	r3, #10
 8041ad0:	d906      	bls.n	8041ae0 <I2C_Write+0xa0>
        	I2C_ReInit(i2c->Instance);
 8041ad2:	68fb      	ldr	r3, [r7, #12]
 8041ad4:	681b      	ldr	r3, [r3, #0]
 8041ad6:	4618      	mov	r0, r3
 8041ad8:	f01c f916 	bl	805dd08 <I2C_ReInit>
            return E_TIMEOUT;
 8041adc:	2303      	movs	r3, #3
 8041ade:	e061      	b.n	8041ba4 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041ae0:	68fb      	ldr	r3, [r7, #12]
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	4618      	mov	r0, r3
 8041ae6:	f7ff fefe 	bl	80418e6 <LL_I2C_IsActiveFlag_TXIS>
 8041aea:	4603      	mov	r3, r0
 8041aec:	2b00      	cmp	r3, #0
 8041aee:	d0df      	beq.n	8041ab0 <I2C_Write+0x70>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8041af0:	68fb      	ldr	r3, [r7, #12]
 8041af2:	681b      	ldr	r3, [r3, #0]
 8041af4:	7aba      	ldrb	r2, [r7, #10]
 8041af6:	4611      	mov	r1, r2
 8041af8:	4618      	mov	r0, r3
 8041afa:	f7ff ff92 	bl	8041a22 <LL_I2C_TransmitData8>

    for(uint8_t i = 0; i < Length; i++)
 8041afe:	2300      	movs	r3, #0
 8041b00:	75fb      	strb	r3, [r7, #23]
 8041b02:	e02f      	b.n	8041b64 <I2C_Write+0x124>
    {
        tickstart = Utils_GetTick();
 8041b04:	f00c fa36 	bl	804df74 <Utils_GetTick>
 8041b08:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041b0a:	e017      	b.n	8041b3c <I2C_Write+0xfc>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8041b0c:	68fb      	ldr	r3, [r7, #12]
 8041b0e:	681b      	ldr	r3, [r3, #0]
 8041b10:	4618      	mov	r0, r3
 8041b12:	f7ff ff0e 	bl	8041932 <LL_I2C_IsActiveFlag_NACK>
 8041b16:	4603      	mov	r3, r0
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d001      	beq.n	8041b20 <I2C_Write+0xe0>
                return E_ERROR;
 8041b1c:	2301      	movs	r3, #1
 8041b1e:	e041      	b.n	8041ba4 <I2C_Write+0x164>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041b20:	f00c fa28 	bl	804df74 <Utils_GetTick>
 8041b24:	4602      	mov	r2, r0
 8041b26:	693b      	ldr	r3, [r7, #16]
 8041b28:	1ad3      	subs	r3, r2, r3
 8041b2a:	2b0a      	cmp	r3, #10
 8041b2c:	d906      	bls.n	8041b3c <I2C_Write+0xfc>
            	I2C_ReInit(i2c->Instance);
 8041b2e:	68fb      	ldr	r3, [r7, #12]
 8041b30:	681b      	ldr	r3, [r3, #0]
 8041b32:	4618      	mov	r0, r3
 8041b34:	f01c f8e8 	bl	805dd08 <I2C_ReInit>
                return E_TIMEOUT;
 8041b38:	2303      	movs	r3, #3
 8041b3a:	e033      	b.n	8041ba4 <I2C_Write+0x164>
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041b3c:	68fb      	ldr	r3, [r7, #12]
 8041b3e:	681b      	ldr	r3, [r3, #0]
 8041b40:	4618      	mov	r0, r3
 8041b42:	f7ff fed0 	bl	80418e6 <LL_I2C_IsActiveFlag_TXIS>
 8041b46:	4603      	mov	r3, r0
 8041b48:	2b00      	cmp	r3, #0
 8041b4a:	d0df      	beq.n	8041b0c <I2C_Write+0xcc>
            }
        }
        LL_I2C_TransmitData8(i2c->Instance, pData[i]);
 8041b4c:	68fb      	ldr	r3, [r7, #12]
 8041b4e:	6818      	ldr	r0, [r3, #0]
 8041b50:	7dfb      	ldrb	r3, [r7, #23]
 8041b52:	687a      	ldr	r2, [r7, #4]
 8041b54:	4413      	add	r3, r2
 8041b56:	781b      	ldrb	r3, [r3, #0]
 8041b58:	4619      	mov	r1, r3
 8041b5a:	f7ff ff62 	bl	8041a22 <LL_I2C_TransmitData8>
    for(uint8_t i = 0; i < Length; i++)
 8041b5e:	7dfb      	ldrb	r3, [r7, #23]
 8041b60:	3301      	adds	r3, #1
 8041b62:	75fb      	strb	r3, [r7, #23]
 8041b64:	7dfa      	ldrb	r2, [r7, #23]
 8041b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8041b6a:	429a      	cmp	r2, r3
 8041b6c:	d3ca      	bcc.n	8041b04 <I2C_Write+0xc4>
    }

    tickstart = Utils_GetTick();
 8041b6e:	f00c fa01 	bl	804df74 <Utils_GetTick>
 8041b72:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8041b74:	e00d      	b.n	8041b92 <I2C_Write+0x152>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041b76:	f00c f9fd 	bl	804df74 <Utils_GetTick>
 8041b7a:	4602      	mov	r2, r0
 8041b7c:	693b      	ldr	r3, [r7, #16]
 8041b7e:	1ad3      	subs	r3, r2, r3
 8041b80:	2b0a      	cmp	r3, #10
 8041b82:	d906      	bls.n	8041b92 <I2C_Write+0x152>
        	I2C_ReInit(i2c->Instance);
 8041b84:	68fb      	ldr	r3, [r7, #12]
 8041b86:	681b      	ldr	r3, [r3, #0]
 8041b88:	4618      	mov	r0, r3
 8041b8a:	f01c f8bd 	bl	805dd08 <I2C_ReInit>
            return E_TIMEOUT;
 8041b8e:	2303      	movs	r3, #3
 8041b90:	e008      	b.n	8041ba4 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8041b92:	68fb      	ldr	r3, [r7, #12]
 8041b94:	681b      	ldr	r3, [r3, #0]
 8041b96:	4618      	mov	r0, r3
 8041b98:	f7ff fe92 	bl	80418c0 <LL_I2C_IsActiveFlag_TXE>
 8041b9c:	4603      	mov	r3, r0
 8041b9e:	2b00      	cmp	r3, #0
 8041ba0:	d0e9      	beq.n	8041b76 <I2C_Write+0x136>
        }
    }
    return E_OK;
 8041ba2:	2300      	movs	r3, #0
}
 8041ba4:	4618      	mov	r0, r3
 8041ba6:	3718      	adds	r7, #24
 8041ba8:	46bd      	mov	sp, r7
 8041baa:	bd80      	pop	{r7, pc}
 8041bac:	80002000 	.word	0x80002000

08041bb0 <I2C_Read>:

Std_ReturnType I2C_Read(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
                                  uint8_t *pData, uint8_t Length)
{
 8041bb0:	b590      	push	{r4, r7, lr}
 8041bb2:	b089      	sub	sp, #36	@ 0x24
 8041bb4:	af02      	add	r7, sp, #8
 8041bb6:	60f8      	str	r0, [r7, #12]
 8041bb8:	607b      	str	r3, [r7, #4]
 8041bba:	460b      	mov	r3, r1
 8041bbc:	72fb      	strb	r3, [r7, #11]
 8041bbe:	4613      	mov	r3, r2
 8041bc0:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 8041bc2:	f00c f9d7 	bl	804df74 <Utils_GetTick>
 8041bc6:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8041bc8:	e00d      	b.n	8041be6 <I2C_Read+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041bca:	f00c f9d3 	bl	804df74 <Utils_GetTick>
 8041bce:	4602      	mov	r2, r0
 8041bd0:	693b      	ldr	r3, [r7, #16]
 8041bd2:	1ad3      	subs	r3, r2, r3
 8041bd4:	2b0a      	cmp	r3, #10
 8041bd6:	d906      	bls.n	8041be6 <I2C_Read+0x36>
        	I2C_ReInit(i2c->Instance);
 8041bd8:	68fb      	ldr	r3, [r7, #12]
 8041bda:	681b      	ldr	r3, [r3, #0]
 8041bdc:	4618      	mov	r0, r3
 8041bde:	f01c f893 	bl	805dd08 <I2C_ReInit>
            return E_BUSY;
 8041be2:	2302      	movs	r3, #2
 8041be4:	e0b8      	b.n	8041d58 <I2C_Read+0x1a8>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8041be6:	68fb      	ldr	r3, [r7, #12]
 8041be8:	681b      	ldr	r3, [r3, #0]
 8041bea:	4618      	mov	r0, r3
 8041bec:	f7ff feb4 	bl	8041958 <LL_I2C_IsActiveFlag_BUSY>
 8041bf0:	4603      	mov	r3, r0
 8041bf2:	2b00      	cmp	r3, #0
 8041bf4:	d1e9      	bne.n	8041bca <I2C_Read+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 8041bf6:	68fb      	ldr	r3, [r7, #12]
 8041bf8:	6818      	ldr	r0, [r3, #0]
 8041bfa:	7afb      	ldrb	r3, [r7, #11]
 8041bfc:	0059      	lsls	r1, r3, #1
 8041bfe:	4b58      	ldr	r3, [pc, #352]	@ (8041d60 <I2C_Read+0x1b0>)
 8041c00:	9301      	str	r3, [sp, #4]
 8041c02:	2300      	movs	r3, #0
 8041c04:	9300      	str	r3, [sp, #0]
 8041c06:	2301      	movs	r3, #1
 8041c08:	2200      	movs	r2, #0
 8041c0a:	f7ff fecd 	bl	80419a8 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 8041c0e:	f00c f9b1 	bl	804df74 <Utils_GetTick>
 8041c12:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041c14:	e017      	b.n	8041c46 <I2C_Read+0x96>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8041c16:	68fb      	ldr	r3, [r7, #12]
 8041c18:	681b      	ldr	r3, [r3, #0]
 8041c1a:	4618      	mov	r0, r3
 8041c1c:	f7ff fe89 	bl	8041932 <LL_I2C_IsActiveFlag_NACK>
 8041c20:	4603      	mov	r3, r0
 8041c22:	2b00      	cmp	r3, #0
 8041c24:	d001      	beq.n	8041c2a <I2C_Read+0x7a>
            return E_ERROR;
 8041c26:	2301      	movs	r3, #1
 8041c28:	e096      	b.n	8041d58 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041c2a:	f00c f9a3 	bl	804df74 <Utils_GetTick>
 8041c2e:	4602      	mov	r2, r0
 8041c30:	693b      	ldr	r3, [r7, #16]
 8041c32:	1ad3      	subs	r3, r2, r3
 8041c34:	2b0a      	cmp	r3, #10
 8041c36:	d906      	bls.n	8041c46 <I2C_Read+0x96>
        	I2C_ReInit(i2c->Instance);
 8041c38:	68fb      	ldr	r3, [r7, #12]
 8041c3a:	681b      	ldr	r3, [r3, #0]
 8041c3c:	4618      	mov	r0, r3
 8041c3e:	f01c f863 	bl	805dd08 <I2C_ReInit>
            return E_TIMEOUT;
 8041c42:	2303      	movs	r3, #3
 8041c44:	e088      	b.n	8041d58 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8041c46:	68fb      	ldr	r3, [r7, #12]
 8041c48:	681b      	ldr	r3, [r3, #0]
 8041c4a:	4618      	mov	r0, r3
 8041c4c:	f7ff fe4b 	bl	80418e6 <LL_I2C_IsActiveFlag_TXIS>
 8041c50:	4603      	mov	r3, r0
 8041c52:	2b00      	cmp	r3, #0
 8041c54:	d0df      	beq.n	8041c16 <I2C_Read+0x66>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8041c56:	68fb      	ldr	r3, [r7, #12]
 8041c58:	681b      	ldr	r3, [r3, #0]
 8041c5a:	7aba      	ldrb	r2, [r7, #10]
 8041c5c:	4611      	mov	r1, r2
 8041c5e:	4618      	mov	r0, r3
 8041c60:	f7ff fedf 	bl	8041a22 <LL_I2C_TransmitData8>

    tickstart = Utils_GetTick();
 8041c64:	f00c f986 	bl	804df74 <Utils_GetTick>
 8041c68:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8041c6a:	e017      	b.n	8041c9c <I2C_Read+0xec>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8041c6c:	68fb      	ldr	r3, [r7, #12]
 8041c6e:	681b      	ldr	r3, [r3, #0]
 8041c70:	4618      	mov	r0, r3
 8041c72:	f7ff fe5e 	bl	8041932 <LL_I2C_IsActiveFlag_NACK>
 8041c76:	4603      	mov	r3, r0
 8041c78:	2b00      	cmp	r3, #0
 8041c7a:	d001      	beq.n	8041c80 <I2C_Read+0xd0>
            return E_ERROR;
 8041c7c:	2301      	movs	r3, #1
 8041c7e:	e06b      	b.n	8041d58 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041c80:	f00c f978 	bl	804df74 <Utils_GetTick>
 8041c84:	4602      	mov	r2, r0
 8041c86:	693b      	ldr	r3, [r7, #16]
 8041c88:	1ad3      	subs	r3, r2, r3
 8041c8a:	2b0a      	cmp	r3, #10
 8041c8c:	d906      	bls.n	8041c9c <I2C_Read+0xec>
        	I2C_ReInit(i2c->Instance);
 8041c8e:	68fb      	ldr	r3, [r7, #12]
 8041c90:	681b      	ldr	r3, [r3, #0]
 8041c92:	4618      	mov	r0, r3
 8041c94:	f01c f838 	bl	805dd08 <I2C_ReInit>
            return E_TIMEOUT;
 8041c98:	2303      	movs	r3, #3
 8041c9a:	e05d      	b.n	8041d58 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8041c9c:	68fb      	ldr	r3, [r7, #12]
 8041c9e:	681b      	ldr	r3, [r3, #0]
 8041ca0:	4618      	mov	r0, r3
 8041ca2:	f7ff fe0d 	bl	80418c0 <LL_I2C_IsActiveFlag_TXE>
 8041ca6:	4603      	mov	r3, r0
 8041ca8:	2b00      	cmp	r3, #0
 8041caa:	d0df      	beq.n	8041c6c <I2C_Read+0xbc>
        }
    }

    LL_I2C_AcknowledgeNextData(i2c->Instance, LL_I2C_ACK);
 8041cac:	68fb      	ldr	r3, [r7, #12]
 8041cae:	681b      	ldr	r3, [r3, #0]
 8041cb0:	2100      	movs	r1, #0
 8041cb2:	4618      	mov	r0, r3
 8041cb4:	f7ff fe64 	bl	8041980 <LL_I2C_AcknowledgeNextData>

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), ((Slave_address << 1) | 1),
 8041cb8:	68fb      	ldr	r3, [r7, #12]
 8041cba:	6818      	ldr	r0, [r3, #0]
 8041cbc:	7afb      	ldrb	r3, [r7, #11]
 8041cbe:	0059      	lsls	r1, r3, #1
 8041cc0:	7afb      	ldrb	r3, [r7, #11]
 8041cc2:	005b      	lsls	r3, r3, #1
 8041cc4:	f043 0301 	orr.w	r3, r3, #1
 8041cc8:	461c      	mov	r4, r3
 8041cca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8041cce:	4a25      	ldr	r2, [pc, #148]	@ (8041d64 <I2C_Read+0x1b4>)
 8041cd0:	9201      	str	r2, [sp, #4]
 8041cd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041cd6:	9200      	str	r2, [sp, #0]
 8041cd8:	4622      	mov	r2, r4
 8041cda:	f7ff fe65 	bl	80419a8 <LL_I2C_HandleTransfer>
                          Length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

    tickstart = Utils_GetTick();
 8041cde:	f00c f949 	bl	804df74 <Utils_GetTick>
 8041ce2:	6138      	str	r0, [r7, #16]
    for(uint8_t i = 0; i < Length; i++)
 8041ce4:	2300      	movs	r3, #0
 8041ce6:	75fb      	strb	r3, [r7, #23]
 8041ce8:	e030      	b.n	8041d4c <I2C_Read+0x19c>
    {
        tickstart = Utils_GetTick();
 8041cea:	f00c f943 	bl	804df74 <Utils_GetTick>
 8041cee:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8041cf0:	e017      	b.n	8041d22 <I2C_Read+0x172>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8041cf2:	68fb      	ldr	r3, [r7, #12]
 8041cf4:	681b      	ldr	r3, [r3, #0]
 8041cf6:	4618      	mov	r0, r3
 8041cf8:	f7ff fe1b 	bl	8041932 <LL_I2C_IsActiveFlag_NACK>
 8041cfc:	4603      	mov	r3, r0
 8041cfe:	2b00      	cmp	r3, #0
 8041d00:	d001      	beq.n	8041d06 <I2C_Read+0x156>
                return E_ERROR;
 8041d02:	2301      	movs	r3, #1
 8041d04:	e028      	b.n	8041d58 <I2C_Read+0x1a8>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8041d06:	f00c f935 	bl	804df74 <Utils_GetTick>
 8041d0a:	4602      	mov	r2, r0
 8041d0c:	693b      	ldr	r3, [r7, #16]
 8041d0e:	1ad3      	subs	r3, r2, r3
 8041d10:	2b0a      	cmp	r3, #10
 8041d12:	d906      	bls.n	8041d22 <I2C_Read+0x172>
            	I2C_ReInit(i2c->Instance);
 8041d14:	68fb      	ldr	r3, [r7, #12]
 8041d16:	681b      	ldr	r3, [r3, #0]
 8041d18:	4618      	mov	r0, r3
 8041d1a:	f01b fff5 	bl	805dd08 <I2C_ReInit>
                return E_TIMEOUT;
 8041d1e:	2303      	movs	r3, #3
 8041d20:	e01a      	b.n	8041d58 <I2C_Read+0x1a8>
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8041d22:	68fb      	ldr	r3, [r7, #12]
 8041d24:	681b      	ldr	r3, [r3, #0]
 8041d26:	4618      	mov	r0, r3
 8041d28:	f7ff fdf0 	bl	804190c <LL_I2C_IsActiveFlag_RXNE>
 8041d2c:	4603      	mov	r3, r0
 8041d2e:	2b00      	cmp	r3, #0
 8041d30:	d0df      	beq.n	8041cf2 <I2C_Read+0x142>
            }
        }
        pData[i] = LL_I2C_ReceiveData8(i2c->Instance);
 8041d32:	68fb      	ldr	r3, [r7, #12]
 8041d34:	6819      	ldr	r1, [r3, #0]
 8041d36:	7dfb      	ldrb	r3, [r7, #23]
 8041d38:	687a      	ldr	r2, [r7, #4]
 8041d3a:	18d4      	adds	r4, r2, r3
 8041d3c:	4608      	mov	r0, r1
 8041d3e:	f7ff fe63 	bl	8041a08 <LL_I2C_ReceiveData8>
 8041d42:	4603      	mov	r3, r0
 8041d44:	7023      	strb	r3, [r4, #0]
    for(uint8_t i = 0; i < Length; i++)
 8041d46:	7dfb      	ldrb	r3, [r7, #23]
 8041d48:	3301      	adds	r3, #1
 8041d4a:	75fb      	strb	r3, [r7, #23]
 8041d4c:	7dfa      	ldrb	r2, [r7, #23]
 8041d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8041d52:	429a      	cmp	r2, r3
 8041d54:	d3c9      	bcc.n	8041cea <I2C_Read+0x13a>
    }
    return E_OK;
 8041d56:	2300      	movs	r3, #0
}
 8041d58:	4618      	mov	r0, r3
 8041d5a:	371c      	adds	r7, #28
 8041d5c:	46bd      	mov	sp, r7
 8041d5e:	bd90      	pop	{r4, r7, pc}
 8041d60:	80002000 	.word	0x80002000
 8041d64:	80002400 	.word	0x80002400

08041d68 <BSP_MMC_Init>:
  * @brief  Initializes the MMC card device.
  * @param  Instance      SDMMC Instance
  * @retval BSP status
  */
int32_t BSP_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8041d68:	b580      	push	{r7, lr}
 8041d6a:	b084      	sub	sp, #16
 8041d6c:	af00      	add	r7, sp, #0
 8041d6e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8041d70:	2300      	movs	r3, #0
 8041d72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_MMC_REGISTER_CALLBACKS == 0)
    /* Msp MMC initialization */

    MMC_MspInit(hmmc);
 8041d74:	6878      	ldr	r0, [r7, #4]
 8041d76:	f000 f895 	bl	8041ea4 <MMC_MspInit>
    if(ret == BSP_ERROR_NONE)
    {
#endif
      /* HAL MMC initialization */

      if(MX_MMC_SD_Init(hmmc) != HAL_OK)
 8041d7a:	6878      	ldr	r0, [r7, #4]
 8041d7c:	f000 f80b 	bl	8041d96 <MX_MMC_SD_Init>
 8041d80:	4603      	mov	r3, r0
 8041d82:	2b00      	cmp	r3, #0
 8041d84:	d002      	beq.n	8041d8c <BSP_MMC_Init+0x24>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8041d86:	f06f 0303 	mvn.w	r3, #3
 8041d8a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */


  return  ret;
 8041d8c:	68fb      	ldr	r3, [r7, #12]
}
 8041d8e:	4618      	mov	r0, r3
 8041d90:	3710      	adds	r7, #16
 8041d92:	46bd      	mov	sp, r7
 8041d94:	bd80      	pop	{r7, pc}

08041d96 <MX_MMC_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hmmc SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_MMC_SD_Init(MMC_HandleTypeDef *hmmc)
{
 8041d96:	b580      	push	{r7, lr}
 8041d98:	b084      	sub	sp, #16
 8041d9a:	af00      	add	r7, sp, #0
 8041d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8041d9e:	2300      	movs	r3, #0
 8041da0:	73fb      	strb	r3, [r7, #15]
//  hmmc->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
//  hmmc->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
//  hmmc->Init.BusWide             = SDMMC_BUS_WIDE_4B;

  /* HAL SD initialization */
  if(HAL_MMC_Init(hmmc) != HAL_OK)
 8041da2:	6878      	ldr	r0, [r7, #4]
 8041da4:	f01f fdc2 	bl	806192c <HAL_MMC_Init>
 8041da8:	4603      	mov	r3, r0
 8041daa:	2b00      	cmp	r3, #0
 8041dac:	d001      	beq.n	8041db2 <MX_MMC_SD_Init+0x1c>
  {
    ret = HAL_ERROR;
 8041dae:	2301      	movs	r3, #1
 8041db0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8041db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8041db4:	4618      	mov	r0, r3
 8041db6:	3710      	adds	r7, #16
 8041db8:	46bd      	mov	sp, r7
 8041dba:	bd80      	pop	{r7, pc}

08041dbc <BSP_MMC_ReadBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of MMC blocks to read
  * @retval BSP status
  */
int32_t BSP_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8041dbc:	b580      	push	{r7, lr}
 8041dbe:	b086      	sub	sp, #24
 8041dc0:	af00      	add	r7, sp, #0
 8041dc2:	60f8      	str	r0, [r7, #12]
 8041dc4:	60b9      	str	r1, [r7, #8]
 8041dc6:	607a      	str	r2, [r7, #4]
 8041dc8:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_ReadBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8041dca:	683b      	ldr	r3, [r7, #0]
 8041dcc:	687a      	ldr	r2, [r7, #4]
 8041dce:	68b9      	ldr	r1, [r7, #8]
 8041dd0:	68f8      	ldr	r0, [r7, #12]
 8041dd2:	f01f fea7 	bl	8061b24 <HAL_MMC_ReadBlocks_DMA>
 8041dd6:	4603      	mov	r3, r0
 8041dd8:	2b00      	cmp	r3, #0
 8041dda:	d003      	beq.n	8041de4 <BSP_MMC_ReadBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8041ddc:	f06f 0303 	mvn.w	r3, #3
 8041de0:	617b      	str	r3, [r7, #20]
 8041de2:	e001      	b.n	8041de8 <BSP_MMC_ReadBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8041de4:	2300      	movs	r3, #0
 8041de6:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8041de8:	697b      	ldr	r3, [r7, #20]
}
 8041dea:	4618      	mov	r0, r3
 8041dec:	3718      	adds	r7, #24
 8041dee:	46bd      	mov	sp, r7
 8041df0:	bd80      	pop	{r7, pc}

08041df2 <BSP_MMC_WriteBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of MMC blocks to write
  * @retval BSP status
  */
int32_t BSP_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8041df2:	b580      	push	{r7, lr}
 8041df4:	b086      	sub	sp, #24
 8041df6:	af00      	add	r7, sp, #0
 8041df8:	60f8      	str	r0, [r7, #12]
 8041dfa:	60b9      	str	r1, [r7, #8]
 8041dfc:	607a      	str	r2, [r7, #4]
 8041dfe:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_WriteBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8041e00:	683b      	ldr	r3, [r7, #0]
 8041e02:	687a      	ldr	r2, [r7, #4]
 8041e04:	68b9      	ldr	r1, [r7, #8]
 8041e06:	68f8      	ldr	r0, [r7, #12]
 8041e08:	f01f ff50 	bl	8061cac <HAL_MMC_WriteBlocks_DMA>
 8041e0c:	4603      	mov	r3, r0
 8041e0e:	2b00      	cmp	r3, #0
 8041e10:	d003      	beq.n	8041e1a <BSP_MMC_WriteBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8041e12:	f06f 0303 	mvn.w	r3, #3
 8041e16:	617b      	str	r3, [r7, #20]
 8041e18:	e001      	b.n	8041e1e <BSP_MMC_WriteBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8041e1a:	2300      	movs	r3, #0
 8041e1c:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8041e1e:	697b      	ldr	r3, [r7, #20]
}
 8041e20:	4618      	mov	r0, r3
 8041e22:	3718      	adds	r7, #24
 8041e24:	46bd      	mov	sp, r7
 8041e26:	bd80      	pop	{r7, pc}

08041e28 <BSP_MMC_GetCardState>:
  *            @arg  MMC_TRANSFER_OK: No data transfer is acting
  *            @arg  MMC_TRANSFER_BUSY: Data transfer is acting
  *            @arg  MMC_TRANSFER_ERROR: Data transfer error
  */
int32_t BSP_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 8041e28:	b580      	push	{r7, lr}
 8041e2a:	b082      	sub	sp, #8
 8041e2c:	af00      	add	r7, sp, #0
 8041e2e:	6078      	str	r0, [r7, #4]
  return((HAL_MMC_GetCardState(hmmc) == HAL_MMC_CARD_TRANSFER ) ? MMC_TRANSFER_OK : MMC_TRANSFER_BUSY);
 8041e30:	6878      	ldr	r0, [r7, #4]
 8041e32:	f020 fd4f 	bl	80628d4 <HAL_MMC_GetCardState>
 8041e36:	4603      	mov	r3, r0
 8041e38:	2b04      	cmp	r3, #4
 8041e3a:	bf14      	ite	ne
 8041e3c:	2301      	movne	r3, #1
 8041e3e:	2300      	moveq	r3, #0
 8041e40:	b2db      	uxtb	r3, r3
}
 8041e42:	4618      	mov	r0, r3
 8041e44:	3708      	adds	r7, #8
 8041e46:	46bd      	mov	sp, r7
 8041e48:	bd80      	pop	{r7, pc}

08041e4a <BSP_MMC_GetCardInfo>:
  * @param  Instance   MMC Instance
  * @param  CardInfo : Pointer to HAL_MMC_CardInfoTypedef structure
  * @retval None
  */
int32_t BSP_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, BSP_MMC_CardInfo *CardInfo)
{
 8041e4a:	b580      	push	{r7, lr}
 8041e4c:	b084      	sub	sp, #16
 8041e4e:	af00      	add	r7, sp, #0
 8041e50:	6078      	str	r0, [r7, #4]
 8041e52:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(HAL_MMC_GetCardInfo(hmmc, CardInfo) != HAL_OK)
 8041e54:	6839      	ldr	r1, [r7, #0]
 8041e56:	6878      	ldr	r0, [r7, #4]
 8041e58:	f020 fb4c 	bl	80624f4 <HAL_MMC_GetCardInfo>
 8041e5c:	4603      	mov	r3, r0
 8041e5e:	2b00      	cmp	r3, #0
 8041e60:	d003      	beq.n	8041e6a <BSP_MMC_GetCardInfo+0x20>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8041e62:	f06f 0303 	mvn.w	r3, #3
 8041e66:	60fb      	str	r3, [r7, #12]
 8041e68:	e001      	b.n	8041e6e <BSP_MMC_GetCardInfo+0x24>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8041e6a:	2300      	movs	r3, #0
 8041e6c:	60fb      	str	r3, [r7, #12]
  }
  /* Return BSP status */
  return ret;
 8041e6e:	68fb      	ldr	r3, [r7, #12]
}
 8041e70:	4618      	mov	r0, r3
 8041e72:	3710      	adds	r7, #16
 8041e74:	46bd      	mov	sp, r7
 8041e76:	bd80      	pop	{r7, pc}

08041e78 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8041e78:	b580      	push	{r7, lr}
 8041e7a:	b082      	sub	sp, #8
 8041e7c:	af00      	add	r7, sp, #0
 8041e7e:	6078      	str	r0, [r7, #4]
  BSP_MMC_WriteCpltCallback(hmmc);
 8041e80:	6878      	ldr	r0, [r7, #4]
 8041e82:	f012 fd91 	bl	80549a8 <BSP_MMC_WriteCpltCallback>
}
 8041e86:	bf00      	nop
 8041e88:	3708      	adds	r7, #8
 8041e8a:	46bd      	mov	sp, r7
 8041e8c:	bd80      	pop	{r7, pc}

08041e8e <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8041e8e:	b580      	push	{r7, lr}
 8041e90:	b082      	sub	sp, #8
 8041e92:	af00      	add	r7, sp, #0
 8041e94:	6078      	str	r0, [r7, #4]
  BSP_MMC_ReadCpltCallback(hmmc);
 8041e96:	6878      	ldr	r0, [r7, #4]
 8041e98:	f012 fdb0 	bl	80549fc <BSP_MMC_ReadCpltCallback>
}
 8041e9c:	bf00      	nop
 8041e9e:	3708      	adds	r7, #8
 8041ea0:	46bd      	mov	sp, r7
 8041ea2:	bd80      	pop	{r7, pc}

08041ea4 <MMC_MspInit>:
  * @brief  Initializes the MMC MSP.
  * @param  hmmc  MMC handle
  * @retval None
  */
static void MMC_MspInit(MMC_HandleTypeDef *hmmc)
{
 8041ea4:	b580      	push	{r7, lr}
 8041ea6:	b082      	sub	sp, #8
 8041ea8:	af00      	add	r7, sp, #0
 8041eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);

  /* __weak function can be modified by the application */
  HAL_MMC_MspInit(hmmc);
 8041eac:	6878      	ldr	r0, [r7, #4]
 8041eae:	f01d fc97 	bl	805f7e0 <HAL_MMC_MspInit>
}
 8041eb2:	bf00      	nop
 8041eb4:	3708      	adds	r7, #8
 8041eb6:	46bd      	mov	sp, r7
 8041eb8:	bd80      	pop	{r7, pc}

08041eba <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8041eba:	b480      	push	{r7}
 8041ebc:	b083      	sub	sp, #12
 8041ebe:	af00      	add	r7, sp, #0
 8041ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8041ec2:	687b      	ldr	r3, [r7, #4]
 8041ec4:	681b      	ldr	r3, [r3, #0]
 8041ec6:	f003 0301 	and.w	r3, r3, #1
 8041eca:	2b01      	cmp	r3, #1
 8041ecc:	d101      	bne.n	8041ed2 <LL_SPI_IsEnabled+0x18>
 8041ece:	2301      	movs	r3, #1
 8041ed0:	e000      	b.n	8041ed4 <LL_SPI_IsEnabled+0x1a>
 8041ed2:	2300      	movs	r3, #0
}
 8041ed4:	4618      	mov	r0, r3
 8041ed6:	370c      	adds	r7, #12
 8041ed8:	46bd      	mov	sp, r7
 8041eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ede:	4770      	bx	lr

08041ee0 <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8041ee0:	b480      	push	{r7}
 8041ee2:	b083      	sub	sp, #12
 8041ee4:	af00      	add	r7, sp, #0
 8041ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8041ee8:	687b      	ldr	r3, [r7, #4]
 8041eea:	695b      	ldr	r3, [r3, #20]
 8041eec:	f003 0301 	and.w	r3, r3, #1
 8041ef0:	2b01      	cmp	r3, #1
 8041ef2:	d101      	bne.n	8041ef8 <LL_SPI_IsActiveFlag_RXP+0x18>
 8041ef4:	2301      	movs	r3, #1
 8041ef6:	e000      	b.n	8041efa <LL_SPI_IsActiveFlag_RXP+0x1a>
 8041ef8:	2300      	movs	r3, #0
}
 8041efa:	4618      	mov	r0, r3
 8041efc:	370c      	adds	r7, #12
 8041efe:	46bd      	mov	sp, r7
 8041f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f04:	4770      	bx	lr

08041f06 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8041f06:	b480      	push	{r7}
 8041f08:	b083      	sub	sp, #12
 8041f0a:	af00      	add	r7, sp, #0
 8041f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8041f0e:	687b      	ldr	r3, [r7, #4]
 8041f10:	695b      	ldr	r3, [r3, #20]
 8041f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8041f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8041f1a:	d101      	bne.n	8041f20 <LL_SPI_IsActiveFlag_TXC+0x1a>
 8041f1c:	2301      	movs	r3, #1
 8041f1e:	e000      	b.n	8041f22 <LL_SPI_IsActiveFlag_TXC+0x1c>
 8041f20:	2300      	movs	r3, #0
}
 8041f22:	4618      	mov	r0, r3
 8041f24:	370c      	adds	r7, #12
 8041f26:	46bd      	mov	sp, r7
 8041f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f2c:	4770      	bx	lr

08041f2e <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8041f2e:	b480      	push	{r7}
 8041f30:	b083      	sub	sp, #12
 8041f32:	af00      	add	r7, sp, #0
 8041f34:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8041f36:	687b      	ldr	r3, [r7, #4]
 8041f38:	3330      	adds	r3, #48	@ 0x30
 8041f3a:	781b      	ldrb	r3, [r3, #0]
 8041f3c:	b2db      	uxtb	r3, r3
}
 8041f3e:	4618      	mov	r0, r3
 8041f40:	370c      	adds	r7, #12
 8041f42:	46bd      	mov	sp, r7
 8041f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f48:	4770      	bx	lr

08041f4a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8041f4a:	b480      	push	{r7}
 8041f4c:	b083      	sub	sp, #12
 8041f4e:	af00      	add	r7, sp, #0
 8041f50:	6078      	str	r0, [r7, #4]
 8041f52:	460b      	mov	r3, r1
 8041f54:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8041f56:	687b      	ldr	r3, [r7, #4]
 8041f58:	3320      	adds	r3, #32
 8041f5a:	78fa      	ldrb	r2, [r7, #3]
 8041f5c:	701a      	strb	r2, [r3, #0]
}
 8041f5e:	bf00      	nop
 8041f60:	370c      	adds	r7, #12
 8041f62:	46bd      	mov	sp, r7
 8041f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f68:	4770      	bx	lr

08041f6a <SPI_Driver_Transmit8>:
#include "spi_driver.h"
#include "uart_driver_dma.h"

#define SPI_TIMEOUT_MS 10  // 10ms timeout

Std_ReturnType SPI_Driver_Transmit8(SPI_TypeDef *SPIx, uint8_t data, uint8_t *receivedData) {
 8041f6a:	b580      	push	{r7, lr}
 8041f6c:	b086      	sub	sp, #24
 8041f6e:	af00      	add	r7, sp, #0
 8041f70:	60f8      	str	r0, [r7, #12]
 8041f72:	460b      	mov	r3, r1
 8041f74:	607a      	str	r2, [r7, #4]
 8041f76:	72fb      	strb	r3, [r7, #11]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8041f78:	68f8      	ldr	r0, [r7, #12]
 8041f7a:	f7ff ff9e 	bl	8041eba <LL_SPI_IsEnabled>
 8041f7e:	4603      	mov	r3, r0
 8041f80:	2b00      	cmp	r3, #0
 8041f82:	d101      	bne.n	8041f88 <SPI_Driver_Transmit8+0x1e>
 8041f84:	2301      	movs	r3, #1
 8041f86:	e035      	b.n	8041ff4 <SPI_Driver_Transmit8+0x8a>

    uint32_t startTick = Utils_GetTick();
 8041f88:	f00b fff4 	bl	804df74 <Utils_GetTick>
 8041f8c:	6178      	str	r0, [r7, #20]
    LL_SPI_TransmitData8(SPIx, data);
 8041f8e:	7afb      	ldrb	r3, [r7, #11]
 8041f90:	4619      	mov	r1, r3
 8041f92:	68f8      	ldr	r0, [r7, #12]
 8041f94:	f7ff ffd9 	bl	8041f4a <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8041f98:	e008      	b.n	8041fac <SPI_Driver_Transmit8+0x42>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8041f9a:	f00b ffeb 	bl	804df74 <Utils_GetTick>
 8041f9e:	4602      	mov	r2, r0
 8041fa0:	697b      	ldr	r3, [r7, #20]
 8041fa2:	1ad3      	subs	r3, r2, r3
 8041fa4:	2b0a      	cmp	r3, #10
 8041fa6:	d901      	bls.n	8041fac <SPI_Driver_Transmit8+0x42>
            return E_TIMEOUT;
 8041fa8:	2303      	movs	r3, #3
 8041faa:	e023      	b.n	8041ff4 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8041fac:	68f8      	ldr	r0, [r7, #12]
 8041fae:	f7ff ffaa 	bl	8041f06 <LL_SPI_IsActiveFlag_TXC>
 8041fb2:	4603      	mov	r3, r0
 8041fb4:	2b00      	cmp	r3, #0
 8041fb6:	d0f0      	beq.n	8041f9a <SPI_Driver_Transmit8+0x30>
        }
    }

    startTick = Utils_GetTick();
 8041fb8:	f00b ffdc 	bl	804df74 <Utils_GetTick>
 8041fbc:	6178      	str	r0, [r7, #20]
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8041fbe:	e008      	b.n	8041fd2 <SPI_Driver_Transmit8+0x68>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8041fc0:	f00b ffd8 	bl	804df74 <Utils_GetTick>
 8041fc4:	4602      	mov	r2, r0
 8041fc6:	697b      	ldr	r3, [r7, #20]
 8041fc8:	1ad3      	subs	r3, r2, r3
 8041fca:	2b0a      	cmp	r3, #10
 8041fcc:	d901      	bls.n	8041fd2 <SPI_Driver_Transmit8+0x68>
            return E_TIMEOUT;
 8041fce:	2303      	movs	r3, #3
 8041fd0:	e010      	b.n	8041ff4 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8041fd2:	68f8      	ldr	r0, [r7, #12]
 8041fd4:	f7ff ff84 	bl	8041ee0 <LL_SPI_IsActiveFlag_RXP>
 8041fd8:	4603      	mov	r3, r0
 8041fda:	2b00      	cmp	r3, #0
 8041fdc:	d0f0      	beq.n	8041fc0 <SPI_Driver_Transmit8+0x56>
        }
    }

    if (receivedData) {
 8041fde:	687b      	ldr	r3, [r7, #4]
 8041fe0:	2b00      	cmp	r3, #0
 8041fe2:	d006      	beq.n	8041ff2 <SPI_Driver_Transmit8+0x88>
        *receivedData = LL_SPI_ReceiveData8(SPIx);
 8041fe4:	68f8      	ldr	r0, [r7, #12]
 8041fe6:	f7ff ffa2 	bl	8041f2e <LL_SPI_ReceiveData8>
 8041fea:	4603      	mov	r3, r0
 8041fec:	461a      	mov	r2, r3
 8041fee:	687b      	ldr	r3, [r7, #4]
 8041ff0:	701a      	strb	r2, [r3, #0]
    }

    return E_OK;
 8041ff2:	2300      	movs	r3, #0
}
 8041ff4:	4618      	mov	r0, r3
 8041ff6:	3718      	adds	r7, #24
 8041ff8:	46bd      	mov	sp, r7
 8041ffa:	bd80      	pop	{r7, pc}

08041ffc <SPI_Driver_Write>:
    }

    return E_OK;
}

Std_ReturnType SPI_Driver_Write(SPI_TypeDef *SPIx, uint8_t data) {
 8041ffc:	b580      	push	{r7, lr}
 8041ffe:	b084      	sub	sp, #16
 8042000:	af00      	add	r7, sp, #0
 8042002:	6078      	str	r0, [r7, #4]
 8042004:	460b      	mov	r3, r1
 8042006:	70fb      	strb	r3, [r7, #3]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8042008:	6878      	ldr	r0, [r7, #4]
 804200a:	f7ff ff56 	bl	8041eba <LL_SPI_IsEnabled>
 804200e:	4603      	mov	r3, r0
 8042010:	2b00      	cmp	r3, #0
 8042012:	d101      	bne.n	8042018 <SPI_Driver_Write+0x1c>
 8042014:	2301      	movs	r3, #1
 8042016:	e01b      	b.n	8042050 <SPI_Driver_Write+0x54>

    uint32_t startTick = Utils_GetTick();
 8042018:	f00b ffac 	bl	804df74 <Utils_GetTick>
 804201c:	60f8      	str	r0, [r7, #12]
    LL_SPI_TransmitData8(SPIx, data);
 804201e:	78fb      	ldrb	r3, [r7, #3]
 8042020:	4619      	mov	r1, r3
 8042022:	6878      	ldr	r0, [r7, #4]
 8042024:	f7ff ff91 	bl	8041f4a <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8042028:	e008      	b.n	804203c <SPI_Driver_Write+0x40>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 804202a:	f00b ffa3 	bl	804df74 <Utils_GetTick>
 804202e:	4602      	mov	r2, r0
 8042030:	68fb      	ldr	r3, [r7, #12]
 8042032:	1ad3      	subs	r3, r2, r3
 8042034:	2b0a      	cmp	r3, #10
 8042036:	d901      	bls.n	804203c <SPI_Driver_Write+0x40>
            return E_TIMEOUT;
 8042038:	2303      	movs	r3, #3
 804203a:	e009      	b.n	8042050 <SPI_Driver_Write+0x54>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 804203c:	6878      	ldr	r0, [r7, #4]
 804203e:	f7ff ff62 	bl	8041f06 <LL_SPI_IsActiveFlag_TXC>
 8042042:	4603      	mov	r3, r0
 8042044:	2b00      	cmp	r3, #0
 8042046:	d0f0      	beq.n	804202a <SPI_Driver_Write+0x2e>
        }
    }

    LL_SPI_ReceiveData8(SPIx);
 8042048:	6878      	ldr	r0, [r7, #4]
 804204a:	f7ff ff70 	bl	8041f2e <LL_SPI_ReceiveData8>
    return E_OK;
 804204e:	2300      	movs	r3, #0
}
 8042050:	4618      	mov	r0, r3
 8042052:	3710      	adds	r7, #16
 8042054:	46bd      	mov	sp, r7
 8042056:	bd80      	pop	{r7, pc}

08042058 <SharedREG_Clear>:
            SHARED.M7_to_M4[slot] :
            SHARED.M4_to_M7[slot];
}

void SharedREG_Clear(SharedDir_t dir)
{
 8042058:	b580      	push	{r7, lr}
 804205a:	b082      	sub	sp, #8
 804205c:	af00      	add	r7, sp, #0
 804205e:	4603      	mov	r3, r0
 8042060:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 8042062:	79fb      	ldrb	r3, [r7, #7]
 8042064:	2b00      	cmp	r3, #0
 8042066:	d110      	bne.n	804208a <SharedREG_Clear+0x32>

    if (dir == DIR_M7_TO_M4)
 8042068:	79fb      	ldrb	r3, [r7, #7]
 804206a:	2b00      	cmp	r3, #0
 804206c:	d106      	bne.n	804207c <SharedREG_Clear+0x24>
        memset((void *)SHARED.M7_to_M4, 0, sizeof(SHARED.M7_to_M4));
 804206e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8042072:	2100      	movs	r1, #0
 8042074:	4807      	ldr	r0, [pc, #28]	@ (8042094 <SharedREG_Clear+0x3c>)
 8042076:	f027 fbb5 	bl	80697e4 <memset>
 804207a:	e007      	b.n	804208c <SharedREG_Clear+0x34>
    else
        memset((void *)SHARED.M4_to_M7, 0, sizeof(SHARED.M4_to_M7));
 804207c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8042080:	2100      	movs	r1, #0
 8042082:	4805      	ldr	r0, [pc, #20]	@ (8042098 <SharedREG_Clear+0x40>)
 8042084:	f027 fbae 	bl	80697e4 <memset>
 8042088:	e000      	b.n	804208c <SharedREG_Clear+0x34>
    if (!SHARED_IS_WRITER(dir)) return;
 804208a:	bf00      	nop
}
 804208c:	3708      	adds	r7, #8
 804208e:	46bd      	mov	sp, r7
 8042090:	bd80      	pop	{r7, pc}
 8042092:	bf00      	nop
 8042094:	3800f800 	.word	0x3800f800
 8042098:	3800fc00 	.word	0x3800fc00

0804209c <SharedREG_Init>:

void SharedREG_Init(SharedDir_t dir)
{
 804209c:	b580      	push	{r7, lr}
 804209e:	b082      	sub	sp, #8
 80420a0:	af00      	add	r7, sp, #0
 80420a2:	4603      	mov	r3, r0
 80420a4:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 80420a6:	79fb      	ldrb	r3, [r7, #7]
 80420a8:	2b00      	cmp	r3, #0
 80420aa:	d104      	bne.n	80420b6 <SharedREG_Init+0x1a>

    SharedREG_Clear(dir);
 80420ac:	79fb      	ldrb	r3, [r7, #7]
 80420ae:	4618      	mov	r0, r3
 80420b0:	f7ff ffd2 	bl	8042058 <SharedREG_Clear>
 80420b4:	e000      	b.n	80420b8 <SharedREG_Init+0x1c>
    if (!SHARED_IS_WRITER(dir)) return;
 80420b6:	bf00      	nop
//    if (dir == DIR_M4_TO_M7)
//    {
//        SharedREG_Write(DIR_M4_TO_M7, 0, 0);
//    }
}
 80420b8:	3708      	adds	r7, #8
 80420ba:	46bd      	mov	sp, r7
 80420bc:	bd80      	pop	{r7, pc}

080420be <LL_USART_Enable>:
{
 80420be:	b480      	push	{r7}
 80420c0:	b083      	sub	sp, #12
 80420c2:	af00      	add	r7, sp, #0
 80420c4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80420c6:	687b      	ldr	r3, [r7, #4]
 80420c8:	681b      	ldr	r3, [r3, #0]
 80420ca:	f043 0201 	orr.w	r2, r3, #1
 80420ce:	687b      	ldr	r3, [r7, #4]
 80420d0:	601a      	str	r2, [r3, #0]
}
 80420d2:	bf00      	nop
 80420d4:	370c      	adds	r7, #12
 80420d6:	46bd      	mov	sp, r7
 80420d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420dc:	4770      	bx	lr

080420de <LL_USART_Disable>:
{
 80420de:	b480      	push	{r7}
 80420e0:	b083      	sub	sp, #12
 80420e2:	af00      	add	r7, sp, #0
 80420e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80420e6:	687b      	ldr	r3, [r7, #4]
 80420e8:	681b      	ldr	r3, [r3, #0]
 80420ea:	f023 0201 	bic.w	r2, r3, #1
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	601a      	str	r2, [r3, #0]
}
 80420f2:	bf00      	nop
 80420f4:	370c      	adds	r7, #12
 80420f6:	46bd      	mov	sp, r7
 80420f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420fc:	4770      	bx	lr

080420fe <LL_USART_IsActiveFlag_TC>:
{
 80420fe:	b480      	push	{r7}
 8042100:	b083      	sub	sp, #12
 8042102:	af00      	add	r7, sp, #0
 8042104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8042106:	687b      	ldr	r3, [r7, #4]
 8042108:	69db      	ldr	r3, [r3, #28]
 804210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804210e:	2b40      	cmp	r3, #64	@ 0x40
 8042110:	d101      	bne.n	8042116 <LL_USART_IsActiveFlag_TC+0x18>
 8042112:	2301      	movs	r3, #1
 8042114:	e000      	b.n	8042118 <LL_USART_IsActiveFlag_TC+0x1a>
 8042116:	2300      	movs	r3, #0
}
 8042118:	4618      	mov	r0, r3
 804211a:	370c      	adds	r7, #12
 804211c:	46bd      	mov	sp, r7
 804211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042122:	4770      	bx	lr

08042124 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8042124:	b480      	push	{r7}
 8042126:	b083      	sub	sp, #12
 8042128:	af00      	add	r7, sp, #0
 804212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 804212c:	687b      	ldr	r3, [r7, #4]
 804212e:	69db      	ldr	r3, [r3, #28]
 8042130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042134:	2b80      	cmp	r3, #128	@ 0x80
 8042136:	d101      	bne.n	804213c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8042138:	2301      	movs	r3, #1
 804213a:	e000      	b.n	804213e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 804213c:	2300      	movs	r3, #0
}
 804213e:	4618      	mov	r0, r3
 8042140:	370c      	adds	r7, #12
 8042142:	46bd      	mov	sp, r7
 8042144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042148:	4770      	bx	lr

0804214a <LL_USART_EnableIT_IDLE>:
{
 804214a:	b480      	push	{r7}
 804214c:	b089      	sub	sp, #36	@ 0x24
 804214e:	af00      	add	r7, sp, #0
 8042150:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8042152:	687b      	ldr	r3, [r7, #4]
 8042154:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042156:	68fb      	ldr	r3, [r7, #12]
 8042158:	e853 3f00 	ldrex	r3, [r3]
 804215c:	60bb      	str	r3, [r7, #8]
   return(result);
 804215e:	68bb      	ldr	r3, [r7, #8]
 8042160:	f043 0310 	orr.w	r3, r3, #16
 8042164:	61fb      	str	r3, [r7, #28]
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	69fa      	ldr	r2, [r7, #28]
 804216a:	61ba      	str	r2, [r7, #24]
 804216c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804216e:	6979      	ldr	r1, [r7, #20]
 8042170:	69ba      	ldr	r2, [r7, #24]
 8042172:	e841 2300 	strex	r3, r2, [r1]
 8042176:	613b      	str	r3, [r7, #16]
   return(result);
 8042178:	693b      	ldr	r3, [r7, #16]
 804217a:	2b00      	cmp	r3, #0
 804217c:	d1e9      	bne.n	8042152 <LL_USART_EnableIT_IDLE+0x8>
}
 804217e:	bf00      	nop
 8042180:	bf00      	nop
 8042182:	3724      	adds	r7, #36	@ 0x24
 8042184:	46bd      	mov	sp, r7
 8042186:	f85d 7b04 	ldr.w	r7, [sp], #4
 804218a:	4770      	bx	lr

0804218c <LL_USART_EnableIT_TXE_TXFNF>:
{
 804218c:	b480      	push	{r7}
 804218e:	b089      	sub	sp, #36	@ 0x24
 8042190:	af00      	add	r7, sp, #0
 8042192:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042194:	687b      	ldr	r3, [r7, #4]
 8042196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042198:	68fb      	ldr	r3, [r7, #12]
 804219a:	e853 3f00 	ldrex	r3, [r3]
 804219e:	60bb      	str	r3, [r7, #8]
   return(result);
 80421a0:	68bb      	ldr	r3, [r7, #8]
 80421a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80421a6:	61fb      	str	r3, [r7, #28]
 80421a8:	687b      	ldr	r3, [r7, #4]
 80421aa:	69fa      	ldr	r2, [r7, #28]
 80421ac:	61ba      	str	r2, [r7, #24]
 80421ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80421b0:	6979      	ldr	r1, [r7, #20]
 80421b2:	69ba      	ldr	r2, [r7, #24]
 80421b4:	e841 2300 	strex	r3, r2, [r1]
 80421b8:	613b      	str	r3, [r7, #16]
   return(result);
 80421ba:	693b      	ldr	r3, [r7, #16]
 80421bc:	2b00      	cmp	r3, #0
 80421be:	d1e9      	bne.n	8042194 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 80421c0:	bf00      	nop
 80421c2:	bf00      	nop
 80421c4:	3724      	adds	r7, #36	@ 0x24
 80421c6:	46bd      	mov	sp, r7
 80421c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421cc:	4770      	bx	lr

080421ce <LL_USART_DisableIT_TXE_TXFNF>:
{
 80421ce:	b480      	push	{r7}
 80421d0:	b089      	sub	sp, #36	@ 0x24
 80421d2:	af00      	add	r7, sp, #0
 80421d4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80421d6:	687b      	ldr	r3, [r7, #4]
 80421d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80421da:	68fb      	ldr	r3, [r7, #12]
 80421dc:	e853 3f00 	ldrex	r3, [r3]
 80421e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80421e2:	68bb      	ldr	r3, [r7, #8]
 80421e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80421e8:	61fb      	str	r3, [r7, #28]
 80421ea:	687b      	ldr	r3, [r7, #4]
 80421ec:	69fa      	ldr	r2, [r7, #28]
 80421ee:	61ba      	str	r2, [r7, #24]
 80421f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80421f2:	6979      	ldr	r1, [r7, #20]
 80421f4:	69ba      	ldr	r2, [r7, #24]
 80421f6:	e841 2300 	strex	r3, r2, [r1]
 80421fa:	613b      	str	r3, [r7, #16]
   return(result);
 80421fc:	693b      	ldr	r3, [r7, #16]
 80421fe:	2b00      	cmp	r3, #0
 8042200:	d1e9      	bne.n	80421d6 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8042202:	bf00      	nop
 8042204:	bf00      	nop
 8042206:	3724      	adds	r7, #36	@ 0x24
 8042208:	46bd      	mov	sp, r7
 804220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804220e:	4770      	bx	lr

08042210 <LL_USART_IsEnabledIT_TXE_TXFNF>:
{
 8042210:	b480      	push	{r7}
 8042212:	b083      	sub	sp, #12
 8042214:	af00      	add	r7, sp, #0
 8042216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	681b      	ldr	r3, [r3, #0]
 804221c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042220:	2b80      	cmp	r3, #128	@ 0x80
 8042222:	d101      	bne.n	8042228 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8042224:	2301      	movs	r3, #1
 8042226:	e000      	b.n	804222a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8042228:	2300      	movs	r3, #0
}
 804222a:	4618      	mov	r0, r3
 804222c:	370c      	adds	r7, #12
 804222e:	46bd      	mov	sp, r7
 8042230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042234:	4770      	bx	lr

08042236 <LL_USART_EnableDMAReq_RX>:
{
 8042236:	b480      	push	{r7}
 8042238:	b089      	sub	sp, #36	@ 0x24
 804223a:	af00      	add	r7, sp, #0
 804223c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 804223e:	687b      	ldr	r3, [r7, #4]
 8042240:	3308      	adds	r3, #8
 8042242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042244:	68fb      	ldr	r3, [r7, #12]
 8042246:	e853 3f00 	ldrex	r3, [r3]
 804224a:	60bb      	str	r3, [r7, #8]
   return(result);
 804224c:	68bb      	ldr	r3, [r7, #8]
 804224e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8042252:	61fb      	str	r3, [r7, #28]
 8042254:	687b      	ldr	r3, [r7, #4]
 8042256:	3308      	adds	r3, #8
 8042258:	69fa      	ldr	r2, [r7, #28]
 804225a:	61ba      	str	r2, [r7, #24]
 804225c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804225e:	6979      	ldr	r1, [r7, #20]
 8042260:	69ba      	ldr	r2, [r7, #24]
 8042262:	e841 2300 	strex	r3, r2, [r1]
 8042266:	613b      	str	r3, [r7, #16]
   return(result);
 8042268:	693b      	ldr	r3, [r7, #16]
 804226a:	2b00      	cmp	r3, #0
 804226c:	d1e7      	bne.n	804223e <LL_USART_EnableDMAReq_RX+0x8>
}
 804226e:	bf00      	nop
 8042270:	bf00      	nop
 8042272:	3724      	adds	r7, #36	@ 0x24
 8042274:	46bd      	mov	sp, r7
 8042276:	f85d 7b04 	ldr.w	r7, [sp], #4
 804227a:	4770      	bx	lr

0804227c <LL_USART_DMA_GetRegAddr>:
{
 804227c:	b480      	push	{r7}
 804227e:	b085      	sub	sp, #20
 8042280:	af00      	add	r7, sp, #0
 8042282:	6078      	str	r0, [r7, #4]
 8042284:	6039      	str	r1, [r7, #0]
  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8042286:	683b      	ldr	r3, [r7, #0]
 8042288:	2b00      	cmp	r3, #0
 804228a:	d103      	bne.n	8042294 <LL_USART_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 804228c:	687b      	ldr	r3, [r7, #4]
 804228e:	3328      	adds	r3, #40	@ 0x28
 8042290:	60fb      	str	r3, [r7, #12]
 8042292:	e002      	b.n	804229a <LL_USART_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8042294:	687b      	ldr	r3, [r7, #4]
 8042296:	3324      	adds	r3, #36	@ 0x24
 8042298:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 804229a:	68fb      	ldr	r3, [r7, #12]
}
 804229c:	4618      	mov	r0, r3
 804229e:	3714      	adds	r7, #20
 80422a0:	46bd      	mov	sp, r7
 80422a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422a6:	4770      	bx	lr

080422a8 <LL_USART_TransmitData8>:
{
 80422a8:	b480      	push	{r7}
 80422aa:	b083      	sub	sp, #12
 80422ac:	af00      	add	r7, sp, #0
 80422ae:	6078      	str	r0, [r7, #4]
 80422b0:	460b      	mov	r3, r1
 80422b2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80422b4:	78fa      	ldrb	r2, [r7, #3]
 80422b6:	687b      	ldr	r3, [r7, #4]
 80422b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80422ba:	bf00      	nop
 80422bc:	370c      	adds	r7, #12
 80422be:	46bd      	mov	sp, r7
 80422c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422c4:	4770      	bx	lr
	...

080422c8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80422c8:	b480      	push	{r7}
 80422ca:	b085      	sub	sp, #20
 80422cc:	af00      	add	r7, sp, #0
 80422ce:	6078      	str	r0, [r7, #4]
 80422d0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80422d2:	687b      	ldr	r3, [r7, #4]
 80422d4:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80422d6:	4a0c      	ldr	r2, [pc, #48]	@ (8042308 <LL_DMA_EnableStream+0x40>)
 80422d8:	683b      	ldr	r3, [r7, #0]
 80422da:	4413      	add	r3, r2
 80422dc:	781b      	ldrb	r3, [r3, #0]
 80422de:	461a      	mov	r2, r3
 80422e0:	68fb      	ldr	r3, [r7, #12]
 80422e2:	4413      	add	r3, r2
 80422e4:	681b      	ldr	r3, [r3, #0]
 80422e6:	4908      	ldr	r1, [pc, #32]	@ (8042308 <LL_DMA_EnableStream+0x40>)
 80422e8:	683a      	ldr	r2, [r7, #0]
 80422ea:	440a      	add	r2, r1
 80422ec:	7812      	ldrb	r2, [r2, #0]
 80422ee:	4611      	mov	r1, r2
 80422f0:	68fa      	ldr	r2, [r7, #12]
 80422f2:	440a      	add	r2, r1
 80422f4:	f043 0301 	orr.w	r3, r3, #1
 80422f8:	6013      	str	r3, [r2, #0]
}
 80422fa:	bf00      	nop
 80422fc:	3714      	adds	r7, #20
 80422fe:	46bd      	mov	sp, r7
 8042300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042304:	4770      	bx	lr
 8042306:	bf00      	nop
 8042308:	08071884 	.word	0x08071884

0804230c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 804230c:	b480      	push	{r7}
 804230e:	b085      	sub	sp, #20
 8042310:	af00      	add	r7, sp, #0
 8042312:	6078      	str	r0, [r7, #4]
 8042314:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8042316:	687b      	ldr	r3, [r7, #4]
 8042318:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 804231a:	4a0c      	ldr	r2, [pc, #48]	@ (804234c <LL_DMA_DisableStream+0x40>)
 804231c:	683b      	ldr	r3, [r7, #0]
 804231e:	4413      	add	r3, r2
 8042320:	781b      	ldrb	r3, [r3, #0]
 8042322:	461a      	mov	r2, r3
 8042324:	68fb      	ldr	r3, [r7, #12]
 8042326:	4413      	add	r3, r2
 8042328:	681b      	ldr	r3, [r3, #0]
 804232a:	4908      	ldr	r1, [pc, #32]	@ (804234c <LL_DMA_DisableStream+0x40>)
 804232c:	683a      	ldr	r2, [r7, #0]
 804232e:	440a      	add	r2, r1
 8042330:	7812      	ldrb	r2, [r2, #0]
 8042332:	4611      	mov	r1, r2
 8042334:	68fa      	ldr	r2, [r7, #12]
 8042336:	440a      	add	r2, r1
 8042338:	f023 0301 	bic.w	r3, r3, #1
 804233c:	6013      	str	r3, [r2, #0]
}
 804233e:	bf00      	nop
 8042340:	3714      	adds	r7, #20
 8042342:	46bd      	mov	sp, r7
 8042344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042348:	4770      	bx	lr
 804234a:	bf00      	nop
 804234c:	08071884 	.word	0x08071884

08042350 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 8042350:	b480      	push	{r7}
 8042352:	b087      	sub	sp, #28
 8042354:	af00      	add	r7, sp, #0
 8042356:	60f8      	str	r0, [r7, #12]
 8042358:	60b9      	str	r1, [r7, #8]
 804235a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804235c:	68fb      	ldr	r3, [r7, #12]
 804235e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8042360:	4a0d      	ldr	r2, [pc, #52]	@ (8042398 <LL_DMA_SetDataLength+0x48>)
 8042362:	68bb      	ldr	r3, [r7, #8]
 8042364:	4413      	add	r3, r2
 8042366:	781b      	ldrb	r3, [r3, #0]
 8042368:	461a      	mov	r2, r3
 804236a:	697b      	ldr	r3, [r7, #20]
 804236c:	4413      	add	r3, r2
 804236e:	685a      	ldr	r2, [r3, #4]
 8042370:	4b0a      	ldr	r3, [pc, #40]	@ (804239c <LL_DMA_SetDataLength+0x4c>)
 8042372:	4013      	ands	r3, r2
 8042374:	4908      	ldr	r1, [pc, #32]	@ (8042398 <LL_DMA_SetDataLength+0x48>)
 8042376:	68ba      	ldr	r2, [r7, #8]
 8042378:	440a      	add	r2, r1
 804237a:	7812      	ldrb	r2, [r2, #0]
 804237c:	4611      	mov	r1, r2
 804237e:	697a      	ldr	r2, [r7, #20]
 8042380:	440a      	add	r2, r1
 8042382:	4611      	mov	r1, r2
 8042384:	687a      	ldr	r2, [r7, #4]
 8042386:	4313      	orrs	r3, r2
 8042388:	604b      	str	r3, [r1, #4]
}
 804238a:	bf00      	nop
 804238c:	371c      	adds	r7, #28
 804238e:	46bd      	mov	sp, r7
 8042390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042394:	4770      	bx	lr
 8042396:	bf00      	nop
 8042398:	08071884 	.word	0x08071884
 804239c:	ffff0000 	.word	0xffff0000

080423a0 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80423a0:	b480      	push	{r7}
 80423a2:	b085      	sub	sp, #20
 80423a4:	af00      	add	r7, sp, #0
 80423a6:	6078      	str	r0, [r7, #4]
 80423a8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80423aa:	687b      	ldr	r3, [r7, #4]
 80423ac:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 80423ae:	4a07      	ldr	r2, [pc, #28]	@ (80423cc <LL_DMA_GetDataLength+0x2c>)
 80423b0:	683b      	ldr	r3, [r7, #0]
 80423b2:	4413      	add	r3, r2
 80423b4:	781b      	ldrb	r3, [r3, #0]
 80423b6:	461a      	mov	r2, r3
 80423b8:	68fb      	ldr	r3, [r7, #12]
 80423ba:	4413      	add	r3, r2
 80423bc:	685b      	ldr	r3, [r3, #4]
 80423be:	b29b      	uxth	r3, r3
}
 80423c0:	4618      	mov	r0, r3
 80423c2:	3714      	adds	r7, #20
 80423c4:	46bd      	mov	sp, r7
 80423c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423ca:	4770      	bx	lr
 80423cc:	08071884 	.word	0x08071884

080423d0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80423d0:	b480      	push	{r7}
 80423d2:	b087      	sub	sp, #28
 80423d4:	af00      	add	r7, sp, #0
 80423d6:	60f8      	str	r0, [r7, #12]
 80423d8:	60b9      	str	r1, [r7, #8]
 80423da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80423dc:	68fb      	ldr	r3, [r7, #12]
 80423de:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 80423e0:	4a07      	ldr	r2, [pc, #28]	@ (8042400 <LL_DMA_SetMemoryAddress+0x30>)
 80423e2:	68bb      	ldr	r3, [r7, #8]
 80423e4:	4413      	add	r3, r2
 80423e6:	781b      	ldrb	r3, [r3, #0]
 80423e8:	461a      	mov	r2, r3
 80423ea:	697b      	ldr	r3, [r7, #20]
 80423ec:	4413      	add	r3, r2
 80423ee:	461a      	mov	r2, r3
 80423f0:	687b      	ldr	r3, [r7, #4]
 80423f2:	60d3      	str	r3, [r2, #12]
}
 80423f4:	bf00      	nop
 80423f6:	371c      	adds	r7, #28
 80423f8:	46bd      	mov	sp, r7
 80423fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423fe:	4770      	bx	lr
 8042400:	08071884 	.word	0x08071884

08042404 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8042404:	b480      	push	{r7}
 8042406:	b087      	sub	sp, #28
 8042408:	af00      	add	r7, sp, #0
 804240a:	60f8      	str	r0, [r7, #12]
 804240c:	60b9      	str	r1, [r7, #8]
 804240e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8042410:	68fb      	ldr	r3, [r7, #12]
 8042412:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8042414:	4a07      	ldr	r2, [pc, #28]	@ (8042434 <LL_DMA_SetPeriphAddress+0x30>)
 8042416:	68bb      	ldr	r3, [r7, #8]
 8042418:	4413      	add	r3, r2
 804241a:	781b      	ldrb	r3, [r3, #0]
 804241c:	461a      	mov	r2, r3
 804241e:	697b      	ldr	r3, [r7, #20]
 8042420:	4413      	add	r3, r2
 8042422:	461a      	mov	r2, r3
 8042424:	687b      	ldr	r3, [r7, #4]
 8042426:	6093      	str	r3, [r2, #8]
}
 8042428:	bf00      	nop
 804242a:	371c      	adds	r7, #28
 804242c:	46bd      	mov	sp, r7
 804242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042432:	4770      	bx	lr
 8042434:	08071884 	.word	0x08071884

08042438 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8042438:	b480      	push	{r7}
 804243a:	b085      	sub	sp, #20
 804243c:	af00      	add	r7, sp, #0
 804243e:	6078      	str	r0, [r7, #4]
 8042440:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8042442:	687b      	ldr	r3, [r7, #4]
 8042444:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8042446:	4a0c      	ldr	r2, [pc, #48]	@ (8042478 <LL_DMA_EnableIT_HT+0x40>)
 8042448:	683b      	ldr	r3, [r7, #0]
 804244a:	4413      	add	r3, r2
 804244c:	781b      	ldrb	r3, [r3, #0]
 804244e:	461a      	mov	r2, r3
 8042450:	68fb      	ldr	r3, [r7, #12]
 8042452:	4413      	add	r3, r2
 8042454:	681b      	ldr	r3, [r3, #0]
 8042456:	4908      	ldr	r1, [pc, #32]	@ (8042478 <LL_DMA_EnableIT_HT+0x40>)
 8042458:	683a      	ldr	r2, [r7, #0]
 804245a:	440a      	add	r2, r1
 804245c:	7812      	ldrb	r2, [r2, #0]
 804245e:	4611      	mov	r1, r2
 8042460:	68fa      	ldr	r2, [r7, #12]
 8042462:	440a      	add	r2, r1
 8042464:	f043 0308 	orr.w	r3, r3, #8
 8042468:	6013      	str	r3, [r2, #0]
}
 804246a:	bf00      	nop
 804246c:	3714      	adds	r7, #20
 804246e:	46bd      	mov	sp, r7
 8042470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042474:	4770      	bx	lr
 8042476:	bf00      	nop
 8042478:	08071884 	.word	0x08071884

0804247c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 804247c:	b480      	push	{r7}
 804247e:	b085      	sub	sp, #20
 8042480:	af00      	add	r7, sp, #0
 8042482:	6078      	str	r0, [r7, #4]
 8042484:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8042486:	687b      	ldr	r3, [r7, #4]
 8042488:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 804248a:	4a0c      	ldr	r2, [pc, #48]	@ (80424bc <LL_DMA_EnableIT_TE+0x40>)
 804248c:	683b      	ldr	r3, [r7, #0]
 804248e:	4413      	add	r3, r2
 8042490:	781b      	ldrb	r3, [r3, #0]
 8042492:	461a      	mov	r2, r3
 8042494:	68fb      	ldr	r3, [r7, #12]
 8042496:	4413      	add	r3, r2
 8042498:	681b      	ldr	r3, [r3, #0]
 804249a:	4908      	ldr	r1, [pc, #32]	@ (80424bc <LL_DMA_EnableIT_TE+0x40>)
 804249c:	683a      	ldr	r2, [r7, #0]
 804249e:	440a      	add	r2, r1
 80424a0:	7812      	ldrb	r2, [r2, #0]
 80424a2:	4611      	mov	r1, r2
 80424a4:	68fa      	ldr	r2, [r7, #12]
 80424a6:	440a      	add	r2, r1
 80424a8:	f043 0304 	orr.w	r3, r3, #4
 80424ac:	6013      	str	r3, [r2, #0]
}
 80424ae:	bf00      	nop
 80424b0:	3714      	adds	r7, #20
 80424b2:	46bd      	mov	sp, r7
 80424b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424b8:	4770      	bx	lr
 80424ba:	bf00      	nop
 80424bc:	08071884 	.word	0x08071884

080424c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80424c0:	b480      	push	{r7}
 80424c2:	b085      	sub	sp, #20
 80424c4:	af00      	add	r7, sp, #0
 80424c6:	6078      	str	r0, [r7, #4]
 80424c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80424ca:	687b      	ldr	r3, [r7, #4]
 80424cc:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80424ce:	4a0c      	ldr	r2, [pc, #48]	@ (8042500 <LL_DMA_EnableIT_TC+0x40>)
 80424d0:	683b      	ldr	r3, [r7, #0]
 80424d2:	4413      	add	r3, r2
 80424d4:	781b      	ldrb	r3, [r3, #0]
 80424d6:	461a      	mov	r2, r3
 80424d8:	68fb      	ldr	r3, [r7, #12]
 80424da:	4413      	add	r3, r2
 80424dc:	681b      	ldr	r3, [r3, #0]
 80424de:	4908      	ldr	r1, [pc, #32]	@ (8042500 <LL_DMA_EnableIT_TC+0x40>)
 80424e0:	683a      	ldr	r2, [r7, #0]
 80424e2:	440a      	add	r2, r1
 80424e4:	7812      	ldrb	r2, [r2, #0]
 80424e6:	4611      	mov	r1, r2
 80424e8:	68fa      	ldr	r2, [r7, #12]
 80424ea:	440a      	add	r2, r1
 80424ec:	f043 0310 	orr.w	r3, r3, #16
 80424f0:	6013      	str	r3, [r2, #0]
}
 80424f2:	bf00      	nop
 80424f4:	3714      	adds	r7, #20
 80424f6:	46bd      	mov	sp, r7
 80424f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424fc:	4770      	bx	lr
 80424fe:	bf00      	nop
 8042500:	08071884 	.word	0x08071884

08042504 <UART_DMA_Driver_Get>:
#ifndef RESET
#define RESET 						    0U
#endif

UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 8042504:	b480      	push	{r7}
 8042506:	b085      	sub	sp, #20
 8042508:	af00      	add	r7, sp, #0
 804250a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 804250c:	2300      	movs	r3, #0
 804250e:	60fb      	str	r3, [r7, #12]
 8042510:	e015      	b.n	804253e <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 8042512:	4910      	ldr	r1, [pc, #64]	@ (8042554 <UART_DMA_Driver_Get+0x50>)
 8042514:	68fa      	ldr	r2, [r7, #12]
 8042516:	4613      	mov	r3, r2
 8042518:	015b      	lsls	r3, r3, #5
 804251a:	1a9b      	subs	r3, r3, r2
 804251c:	009b      	lsls	r3, r3, #2
 804251e:	440b      	add	r3, r1
 8042520:	681b      	ldr	r3, [r3, #0]
 8042522:	687a      	ldr	r2, [r7, #4]
 8042524:	429a      	cmp	r2, r3
 8042526:	d107      	bne.n	8042538 <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 8042528:	68fa      	ldr	r2, [r7, #12]
 804252a:	4613      	mov	r3, r2
 804252c:	015b      	lsls	r3, r3, #5
 804252e:	1a9b      	subs	r3, r3, r2
 8042530:	009b      	lsls	r3, r3, #2
 8042532:	4a08      	ldr	r2, [pc, #32]	@ (8042554 <UART_DMA_Driver_Get+0x50>)
 8042534:	4413      	add	r3, r2
 8042536:	e006      	b.n	8042546 <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8042538:	68fb      	ldr	r3, [r7, #12]
 804253a:	3301      	adds	r3, #1
 804253c:	60fb      	str	r3, [r7, #12]
 804253e:	68fb      	ldr	r3, [r7, #12]
 8042540:	2b02      	cmp	r3, #2
 8042542:	dde6      	ble.n	8042512 <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 8042544:	2300      	movs	r3, #0
}
 8042546:	4618      	mov	r0, r3
 8042548:	3714      	adds	r7, #20
 804254a:	46bd      	mov	sp, r7
 804254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042550:	4770      	bx	lr
 8042552:	bf00      	nop
 8042554:	24014748 	.word	0x24014748

08042558 <UART_DMA_Driver_Init>:

/*************************************************
 *                    Init                       *
 *************************************************/
Std_ReturnType UART_DMA_Driver_Init(void)
{
 8042558:	b5b0      	push	{r4, r5, r7, lr}
 804255a:	b084      	sub	sp, #16
 804255c:	af02      	add	r7, sp, #8
    // USART1 (index 0)
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 804255e:	2300      	movs	r3, #0
 8042560:	607b      	str	r3, [r7, #4]
 8042562:	e022      	b.n	80425aa <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8042564:	49b5      	ldr	r1, [pc, #724]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042566:	687a      	ldr	r2, [r7, #4]
 8042568:	4613      	mov	r3, r2
 804256a:	015b      	lsls	r3, r3, #5
 804256c:	1a9b      	subs	r3, r3, r2
 804256e:	009b      	lsls	r3, r3, #2
 8042570:	440b      	add	r3, r1
 8042572:	681b      	ldr	r3, [r3, #0]
 8042574:	4618      	mov	r0, r3
 8042576:	f7ff fdb2 	bl	80420de <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 804257a:	49b0      	ldr	r1, [pc, #704]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804257c:	687a      	ldr	r2, [r7, #4]
 804257e:	4613      	mov	r3, r2
 8042580:	015b      	lsls	r3, r3, #5
 8042582:	1a9b      	subs	r3, r3, r2
 8042584:	009b      	lsls	r3, r3, #2
 8042586:	440b      	add	r3, r1
 8042588:	3368      	adds	r3, #104	@ 0x68
 804258a:	6818      	ldr	r0, [r3, #0]
 804258c:	49ab      	ldr	r1, [pc, #684]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804258e:	687a      	ldr	r2, [r7, #4]
 8042590:	4613      	mov	r3, r2
 8042592:	015b      	lsls	r3, r3, #5
 8042594:	1a9b      	subs	r3, r3, r2
 8042596:	009b      	lsls	r3, r3, #2
 8042598:	440b      	add	r3, r1
 804259a:	336c      	adds	r3, #108	@ 0x6c
 804259c:	681b      	ldr	r3, [r3, #0]
 804259e:	4619      	mov	r1, r3
 80425a0:	f7ff feb4 	bl	804230c <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80425a4:	687b      	ldr	r3, [r7, #4]
 80425a6:	3301      	adds	r3, #1
 80425a8:	607b      	str	r3, [r7, #4]
 80425aa:	687b      	ldr	r3, [r7, #4]
 80425ac:	2b02      	cmp	r3, #2
 80425ae:	ddd9      	ble.n	8042564 <UART_DMA_Driver_Init+0xc>
    }

    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1, "UART1_RX", uart1_rx_data, UART1_BUFFER_SIZE);
 80425b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80425b4:	9300      	str	r3, [sp, #0]
 80425b6:	4ba2      	ldr	r3, [pc, #648]	@ (8042840 <UART_DMA_Driver_Init+0x2e8>)
 80425b8:	4aa2      	ldr	r2, [pc, #648]	@ (8042844 <UART_DMA_Driver_Init+0x2ec>)
 80425ba:	2101      	movs	r1, #1
 80425bc:	48a2      	ldr	r0, [pc, #648]	@ (8042848 <UART_DMA_Driver_Init+0x2f0>)
 80425be:	f00b fb80 	bl	804dcc2 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2, "UART1_TX", uart1_tx_data, UART1_BUFFER_SIZE);
 80425c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80425c6:	9300      	str	r3, [sp, #0]
 80425c8:	4ba0      	ldr	r3, [pc, #640]	@ (804284c <UART_DMA_Driver_Init+0x2f4>)
 80425ca:	4aa1      	ldr	r2, [pc, #644]	@ (8042850 <UART_DMA_Driver_Init+0x2f8>)
 80425cc:	2102      	movs	r1, #2
 80425ce:	48a1      	ldr	r0, [pc, #644]	@ (8042854 <UART_DMA_Driver_Init+0x2fc>)
 80425d0:	f00b fb77 	bl	804dcc2 <RingBuffer_Create>
    uart_dma_drivers[0].rxSemaphore = xSemaphoreCreateBinary();
 80425d4:	2203      	movs	r2, #3
 80425d6:	2100      	movs	r1, #0
 80425d8:	2001      	movs	r0, #1
 80425da:	f012 fdae 	bl	805513a <xQueueGenericCreate>
 80425de:	4603      	mov	r3, r0
 80425e0:	4a96      	ldr	r2, [pc, #600]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80425e2:	6653      	str	r3, [r2, #100]	@ 0x64

    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80425e4:	4b95      	ldr	r3, [pc, #596]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80425e6:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 80425e8:	4b94      	ldr	r3, [pc, #592]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80425ea:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80425ec:	2101      	movs	r1, #1
 80425ee:	489a      	ldr	r0, [pc, #616]	@ (8042858 <UART_DMA_Driver_Init+0x300>)
 80425f0:	f7ff fe44 	bl	804227c <LL_USART_DMA_GetRegAddr>
 80425f4:	4603      	mov	r3, r0
 80425f6:	461a      	mov	r2, r3
 80425f8:	4629      	mov	r1, r5
 80425fa:	4620      	mov	r0, r4
 80425fc:	f7ff ff02 	bl	8042404 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8042600:	4b8e      	ldr	r3, [pc, #568]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8042604:	4a8d      	ldr	r2, [pc, #564]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042606:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                         uart_dma_drivers[0].dma_rx_buffer_size);
 8042608:	4a8c      	ldr	r2, [pc, #560]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804260a:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 804260e:	4618      	mov	r0, r3
 8042610:	f7ff fe9e 	bl	8042350 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8042614:	4b89      	ldr	r3, [pc, #548]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8042618:	4a88      	ldr	r2, [pc, #544]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804261a:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 804261c:	4a87      	ldr	r2, [pc, #540]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804261e:	6f12      	ldr	r2, [r2, #112]	@ 0x70
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8042620:	4618      	mov	r0, r3
 8042622:	f7ff fed5 	bl	80423d0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8042626:	4b85      	ldr	r3, [pc, #532]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804262a:	4a84      	ldr	r2, [pc, #528]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804262c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 804262e:	4611      	mov	r1, r2
 8042630:	4618      	mov	r0, r3
 8042632:	f7ff ff45 	bl	80424c0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8042636:	4b81      	ldr	r3, [pc, #516]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804263a:	4a80      	ldr	r2, [pc, #512]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804263c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 804263e:	4611      	mov	r1, r2
 8042640:	4618      	mov	r0, r3
 8042642:	f7ff fef9 	bl	8042438 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8042646:	4b7d      	ldr	r3, [pc, #500]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804264a:	4a7c      	ldr	r2, [pc, #496]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804264c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 804264e:	4611      	mov	r1, r2
 8042650:	4618      	mov	r0, r3
 8042652:	f7ff ff13 	bl	804247c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 8042656:	4880      	ldr	r0, [pc, #512]	@ (8042858 <UART_DMA_Driver_Init+0x300>)
 8042658:	f7ff fded 	bl	8042236 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 804265c:	4b77      	ldr	r3, [pc, #476]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804265e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8042660:	4a76      	ldr	r2, [pc, #472]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042662:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8042664:	4611      	mov	r1, r2
 8042666:	4618      	mov	r0, r3
 8042668:	f7ff fe2e 	bl	80422c8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART1);
 804266c:	487a      	ldr	r0, [pc, #488]	@ (8042858 <UART_DMA_Driver_Init+0x300>)
 804266e:	f7ff fd6c 	bl	804214a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART1);

    // USART2 (index 1)
    RingBuffer_Create(&uart_dma_drivers[1].rx_buffer, 5, "UART2_RX", uart2_rx_data, UART2_BUFFER_SIZE);
 8042672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8042676:	9300      	str	r3, [sp, #0]
 8042678:	4b78      	ldr	r3, [pc, #480]	@ (804285c <UART_DMA_Driver_Init+0x304>)
 804267a:	4a79      	ldr	r2, [pc, #484]	@ (8042860 <UART_DMA_Driver_Init+0x308>)
 804267c:	2105      	movs	r1, #5
 804267e:	4879      	ldr	r0, [pc, #484]	@ (8042864 <UART_DMA_Driver_Init+0x30c>)
 8042680:	f00b fb1f 	bl	804dcc2 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[1].tx_buffer, 6, "UART2_TX", uart2_tx_data, UART2_BUFFER_SIZE);
 8042684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8042688:	9300      	str	r3, [sp, #0]
 804268a:	4b77      	ldr	r3, [pc, #476]	@ (8042868 <UART_DMA_Driver_Init+0x310>)
 804268c:	4a77      	ldr	r2, [pc, #476]	@ (804286c <UART_DMA_Driver_Init+0x314>)
 804268e:	2106      	movs	r1, #6
 8042690:	4877      	ldr	r0, [pc, #476]	@ (8042870 <UART_DMA_Driver_Init+0x318>)
 8042692:	f00b fb16 	bl	804dcc2 <RingBuffer_Create>
    uart_dma_drivers[1].rxSemaphore = xSemaphoreCreateBinary();
 8042696:	2203      	movs	r2, #3
 8042698:	2100      	movs	r1, #0
 804269a:	2001      	movs	r0, #1
 804269c:	f012 fd4d 	bl	805513a <xQueueGenericCreate>
 80426a0:	4603      	mov	r3, r0
 80426a2:	4a66      	ldr	r2, [pc, #408]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    LL_DMA_SetPeriphAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80426a8:	4b64      	ldr	r3, [pc, #400]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426aa:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 80426ae:	4b63      	ldr	r3, [pc, #396]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426b0:	f8d3 50e8 	ldr.w	r5, [r3, #232]	@ 0xe8
 80426b4:	2101      	movs	r1, #1
 80426b6:	486f      	ldr	r0, [pc, #444]	@ (8042874 <UART_DMA_Driver_Init+0x31c>)
 80426b8:	f7ff fde0 	bl	804227c <LL_USART_DMA_GetRegAddr>
 80426bc:	4603      	mov	r3, r0
 80426be:	461a      	mov	r2, r3
 80426c0:	4629      	mov	r1, r5
 80426c2:	4620      	mov	r0, r4
 80426c4:	f7ff fe9e 	bl	8042404 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80426c8:	4b5c      	ldr	r3, [pc, #368]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80426ce:	4a5b      	ldr	r2, [pc, #364]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426d0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                         uart_dma_drivers[1].dma_rx_buffer_size);
 80426d4:	4a59      	ldr	r2, [pc, #356]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426d6:	f8b2 20f0 	ldrh.w	r2, [r2, #240]	@ 0xf0
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80426da:	4618      	mov	r0, r3
 80426dc:	f7ff fe38 	bl	8042350 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80426e0:	4b56      	ldr	r3, [pc, #344]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80426e6:	4a55      	ldr	r2, [pc, #340]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426e8:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                            (uint32_t)uart_dma_drivers[1].dma_rx_buffer);
 80426ec:	4a53      	ldr	r2, [pc, #332]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426ee:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80426f2:	4618      	mov	r0, r3
 80426f4:	f7ff fe6c 	bl	80423d0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 80426f8:	4b50      	ldr	r3, [pc, #320]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80426fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80426fe:	4a4f      	ldr	r2, [pc, #316]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042700:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8042704:	4611      	mov	r1, r2
 8042706:	4618      	mov	r0, r3
 8042708:	f7ff feda 	bl	80424c0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 804270c:	4b4b      	ldr	r3, [pc, #300]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804270e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8042712:	4a4a      	ldr	r2, [pc, #296]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042714:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8042718:	4611      	mov	r1, r2
 804271a:	4618      	mov	r0, r3
 804271c:	f7ff fe8c 	bl	8042438 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 8042720:	4b46      	ldr	r3, [pc, #280]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8042726:	4a45      	ldr	r2, [pc, #276]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042728:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 804272c:	4611      	mov	r1, r2
 804272e:	4618      	mov	r0, r3
 8042730:	f7ff fea4 	bl	804247c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART2);
 8042734:	484f      	ldr	r0, [pc, #316]	@ (8042874 <UART_DMA_Driver_Init+0x31c>)
 8042736:	f7ff fd7e 	bl	8042236 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 804273a:	4b40      	ldr	r3, [pc, #256]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804273c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8042740:	4a3e      	ldr	r2, [pc, #248]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042742:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8042746:	4611      	mov	r1, r2
 8042748:	4618      	mov	r0, r3
 804274a:	f7ff fdbd 	bl	80422c8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART2);
 804274e:	4849      	ldr	r0, [pc, #292]	@ (8042874 <UART_DMA_Driver_Init+0x31c>)
 8042750:	f7ff fcfb 	bl	804214a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART2);

    // UART7 (index 2)
    RingBuffer_Create(&uart_dma_drivers[2].rx_buffer, 11, "UART7_RX", uart7_rx_data, UART7_BUFFER_SIZE);
 8042754:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8042758:	9300      	str	r3, [sp, #0]
 804275a:	4b47      	ldr	r3, [pc, #284]	@ (8042878 <UART_DMA_Driver_Init+0x320>)
 804275c:	4a47      	ldr	r2, [pc, #284]	@ (804287c <UART_DMA_Driver_Init+0x324>)
 804275e:	210b      	movs	r1, #11
 8042760:	4847      	ldr	r0, [pc, #284]	@ (8042880 <UART_DMA_Driver_Init+0x328>)
 8042762:	f00b faae 	bl	804dcc2 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[2].tx_buffer, 12, "UART7_TX", uart7_tx_data, UART7_BUFFER_SIZE);
 8042766:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 804276a:	9300      	str	r3, [sp, #0]
 804276c:	4b45      	ldr	r3, [pc, #276]	@ (8042884 <UART_DMA_Driver_Init+0x32c>)
 804276e:	4a46      	ldr	r2, [pc, #280]	@ (8042888 <UART_DMA_Driver_Init+0x330>)
 8042770:	210c      	movs	r1, #12
 8042772:	4846      	ldr	r0, [pc, #280]	@ (804288c <UART_DMA_Driver_Init+0x334>)
 8042774:	f00b faa5 	bl	804dcc2 <RingBuffer_Create>
    uart_dma_drivers[2].rxSemaphore = xSemaphoreCreateBinary();
 8042778:	2203      	movs	r2, #3
 804277a:	2100      	movs	r1, #0
 804277c:	2001      	movs	r0, #1
 804277e:	f012 fcdc 	bl	805513a <xQueueGenericCreate>
 8042782:	4603      	mov	r3, r0
 8042784:	4a2d      	ldr	r2, [pc, #180]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042786:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c

    LL_DMA_SetPeriphAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 804278a:	4b2c      	ldr	r3, [pc, #176]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804278c:	f8d3 4160 	ldr.w	r4, [r3, #352]	@ 0x160
 8042790:	4b2a      	ldr	r3, [pc, #168]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042792:	f8d3 5164 	ldr.w	r5, [r3, #356]	@ 0x164
 8042796:	2101      	movs	r1, #1
 8042798:	483d      	ldr	r0, [pc, #244]	@ (8042890 <UART_DMA_Driver_Init+0x338>)
 804279a:	f7ff fd6f 	bl	804227c <LL_USART_DMA_GetRegAddr>
 804279e:	4603      	mov	r3, r0
 80427a0:	461a      	mov	r2, r3
 80427a2:	4629      	mov	r1, r5
 80427a4:	4620      	mov	r0, r4
 80427a6:	f7ff fe2d 	bl	8042404 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80427aa:	4b24      	ldr	r3, [pc, #144]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80427b0:	4a22      	ldr	r2, [pc, #136]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427b2:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                         uart_dma_drivers[2].dma_rx_buffer_size);
 80427b6:	4a21      	ldr	r2, [pc, #132]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427b8:	f8b2 216c 	ldrh.w	r2, [r2, #364]	@ 0x16c
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80427bc:	4618      	mov	r0, r3
 80427be:	f7ff fdc7 	bl	8042350 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80427c2:	4b1e      	ldr	r3, [pc, #120]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427c4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80427c8:	4a1c      	ldr	r2, [pc, #112]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427ca:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                            (uint32_t)uart_dma_drivers[2].dma_rx_buffer);
 80427ce:	4a1b      	ldr	r2, [pc, #108]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427d0:	f8d2 2168 	ldr.w	r2, [r2, #360]	@ 0x168
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80427d4:	4618      	mov	r0, r3
 80427d6:	f7ff fdfb 	bl	80423d0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80427da:	4b18      	ldr	r3, [pc, #96]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80427e0:	4a16      	ldr	r2, [pc, #88]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427e2:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 80427e6:	4611      	mov	r1, r2
 80427e8:	4618      	mov	r0, r3
 80427ea:	f7ff fe69 	bl	80424c0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80427ee:	4b13      	ldr	r3, [pc, #76]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427f0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80427f4:	4a11      	ldr	r2, [pc, #68]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 80427f6:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 80427fa:	4611      	mov	r1, r2
 80427fc:	4618      	mov	r0, r3
 80427fe:	f7ff fe1b 	bl	8042438 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 8042802:	4b0e      	ldr	r3, [pc, #56]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042804:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8042808:	4a0c      	ldr	r2, [pc, #48]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804280a:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 804280e:	4611      	mov	r1, r2
 8042810:	4618      	mov	r0, r3
 8042812:	f7ff fe33 	bl	804247c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(UART7);
 8042816:	481e      	ldr	r0, [pc, #120]	@ (8042890 <UART_DMA_Driver_Init+0x338>)
 8042818:	f7ff fd0d 	bl	8042236 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 804281c:	4b07      	ldr	r3, [pc, #28]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 804281e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8042822:	4a06      	ldr	r2, [pc, #24]	@ (804283c <UART_DMA_Driver_Init+0x2e4>)
 8042824:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 8042828:	4611      	mov	r1, r2
 804282a:	4618      	mov	r0, r3
 804282c:	f7ff fd4c 	bl	80422c8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(UART7);
 8042830:	4817      	ldr	r0, [pc, #92]	@ (8042890 <UART_DMA_Driver_Init+0x338>)
 8042832:	f7ff fc8a 	bl	804214a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(UART7);

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8042836:	2300      	movs	r3, #0
 8042838:	603b      	str	r3, [r7, #0]
 804283a:	e039      	b.n	80428b0 <UART_DMA_Driver_Init+0x358>
 804283c:	24014748 	.word	0x24014748
 8042840:	24017b58 	.word	0x24017b58
 8042844:	0806adac 	.word	0x0806adac
 8042848:	2401474c 	.word	0x2401474c
 804284c:	24018358 	.word	0x24018358
 8042850:	0806adb8 	.word	0x0806adb8
 8042854:	2401477c 	.word	0x2401477c
 8042858:	40011000 	.word	0x40011000
 804285c:	24019b58 	.word	0x24019b58
 8042860:	0806adc4 	.word	0x0806adc4
 8042864:	240147c8 	.word	0x240147c8
 8042868:	2401ab58 	.word	0x2401ab58
 804286c:	0806add0 	.word	0x0806add0
 8042870:	240147f8 	.word	0x240147f8
 8042874:	40004400 	.word	0x40004400
 8042878:	2401c758 	.word	0x2401c758
 804287c:	0806addc 	.word	0x0806addc
 8042880:	24014844 	.word	0x24014844
 8042884:	2401d358 	.word	0x2401d358
 8042888:	0806ade8 	.word	0x0806ade8
 804288c:	24014874 	.word	0x24014874
 8042890:	40007800 	.word	0x40007800
        LL_USART_Enable(uart_dma_drivers[i].uart);
 8042894:	490a      	ldr	r1, [pc, #40]	@ (80428c0 <UART_DMA_Driver_Init+0x368>)
 8042896:	683a      	ldr	r2, [r7, #0]
 8042898:	4613      	mov	r3, r2
 804289a:	015b      	lsls	r3, r3, #5
 804289c:	1a9b      	subs	r3, r3, r2
 804289e:	009b      	lsls	r3, r3, #2
 80428a0:	440b      	add	r3, r1
 80428a2:	681b      	ldr	r3, [r3, #0]
 80428a4:	4618      	mov	r0, r3
 80428a6:	f7ff fc0a 	bl	80420be <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80428aa:	683b      	ldr	r3, [r7, #0]
 80428ac:	3301      	adds	r3, #1
 80428ae:	603b      	str	r3, [r7, #0]
 80428b0:	683b      	ldr	r3, [r7, #0]
 80428b2:	2b02      	cmp	r3, #2
 80428b4:	ddee      	ble.n	8042894 <UART_DMA_Driver_Init+0x33c>
    }
    return E_OK;
 80428b6:	2300      	movs	r3, #0
}
 80428b8:	4618      	mov	r0, r3
 80428ba:	3708      	adds	r7, #8
 80428bc:	46bd      	mov	sp, r7
 80428be:	bdb0      	pop	{r4, r5, r7, pc}
 80428c0:	24014748 	.word	0x24014748

080428c4 <UART_Driver_Write>:
////    if (!LL_USART_IsEnabledIT_TXE(uart)) {
//        LL_USART_EnableIT_TXE(uart);
////    }
//}
void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 80428c4:	b580      	push	{r7, lr}
 80428c6:	b084      	sub	sp, #16
 80428c8:	af00      	add	r7, sp, #0
 80428ca:	6078      	str	r0, [r7, #4]
 80428cc:	460b      	mov	r3, r1
 80428ce:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80428d0:	6878      	ldr	r0, [r7, #4]
 80428d2:	f7ff fe17 	bl	8042504 <UART_DMA_Driver_Get>
 80428d6:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 80428d8:	68bb      	ldr	r3, [r7, #8]
 80428da:	2b00      	cmp	r3, #0
 80428dc:	d01f      	beq.n	804291e <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 80428de:	4b13      	ldr	r3, [pc, #76]	@ (804292c <UART_Driver_Write+0x68>)
 80428e0:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80428e2:	e005      	b.n	80428f0 <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 80428e4:	68fb      	ldr	r3, [r7, #12]
 80428e6:	3b01      	subs	r3, #1
 80428e8:	60fb      	str	r3, [r7, #12]
 80428ea:	68fb      	ldr	r3, [r7, #12]
 80428ec:	2b00      	cmp	r3, #0
 80428ee:	d018      	beq.n	8042922 <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80428f0:	68bb      	ldr	r3, [r7, #8]
 80428f2:	3334      	adds	r3, #52	@ 0x34
 80428f4:	78fa      	ldrb	r2, [r7, #3]
 80428f6:	4611      	mov	r1, r2
 80428f8:	4618      	mov	r0, r3
 80428fa:	f00b fa15 	bl	804dd28 <RingBuffer_Put>
 80428fe:	4603      	mov	r3, r0
 8042900:	f083 0301 	eor.w	r3, r3, #1
 8042904:	b2db      	uxtb	r3, r3
 8042906:	2b00      	cmp	r3, #0
 8042908:	d1ec      	bne.n	80428e4 <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 804290a:	6878      	ldr	r0, [r7, #4]
 804290c:	f7ff fc80 	bl	8042210 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8042910:	4603      	mov	r3, r0
 8042912:	2b00      	cmp	r3, #0
 8042914:	d106      	bne.n	8042924 <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 8042916:	6878      	ldr	r0, [r7, #4]
 8042918:	f7ff fc38 	bl	804218c <LL_USART_EnableIT_TXE_TXFNF>
 804291c:	e002      	b.n	8042924 <UART_Driver_Write+0x60>
        return;
 804291e:	bf00      	nop
 8042920:	e000      	b.n	8042924 <UART_Driver_Write+0x60>
            return;
 8042922:	bf00      	nop
    }
}
 8042924:	3710      	adds	r7, #16
 8042926:	46bd      	mov	sp, r7
 8042928:	bd80      	pop	{r7, pc}
 804292a:	bf00      	nop
 804292c:	0007a120 	.word	0x0007a120

08042930 <UART_Driver_SendString>:

void UART_Driver_SendString(USART_TypeDef *uart, const char *str)
{
 8042930:	b580      	push	{r7, lr}
 8042932:	b084      	sub	sp, #16
 8042934:	af00      	add	r7, sp, #0
 8042936:	6078      	str	r0, [r7, #4]
 8042938:	6039      	str	r1, [r7, #0]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 804293a:	6878      	ldr	r0, [r7, #4]
 804293c:	f7ff fde2 	bl	8042504 <UART_DMA_Driver_Get>
 8042940:	60f8      	str	r0, [r7, #12]
    if (driver == NULL || str == NULL)
 8042942:	68fb      	ldr	r3, [r7, #12]
 8042944:	2b00      	cmp	r3, #0
 8042946:	d011      	beq.n	804296c <UART_Driver_SendString+0x3c>
 8042948:	683b      	ldr	r3, [r7, #0]
 804294a:	2b00      	cmp	r3, #0
 804294c:	d00e      	beq.n	804296c <UART_Driver_SendString+0x3c>
        return;


    while (*str)
 804294e:	e008      	b.n	8042962 <UART_Driver_SendString+0x32>
        {
            UART_Driver_Write(uart, (uint8_t)(*str));
 8042950:	683b      	ldr	r3, [r7, #0]
 8042952:	781b      	ldrb	r3, [r3, #0]
 8042954:	4619      	mov	r1, r3
 8042956:	6878      	ldr	r0, [r7, #4]
 8042958:	f7ff ffb4 	bl	80428c4 <UART_Driver_Write>
            str++;
 804295c:	683b      	ldr	r3, [r7, #0]
 804295e:	3301      	adds	r3, #1
 8042960:	603b      	str	r3, [r7, #0]
    while (*str)
 8042962:	683b      	ldr	r3, [r7, #0]
 8042964:	781b      	ldrb	r3, [r3, #0]
 8042966:	2b00      	cmp	r3, #0
 8042968:	d1f2      	bne.n	8042950 <UART_Driver_SendString+0x20>
 804296a:	e000      	b.n	804296e <UART_Driver_SendString+0x3e>
        return;
 804296c:	bf00      	nop
        }
}
 804296e:	3710      	adds	r7, #16
 8042970:	46bd      	mov	sp, r7
 8042972:	bd80      	pop	{r7, pc}

08042974 <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 8042974:	b580      	push	{r7, lr}
 8042976:	b084      	sub	sp, #16
 8042978:	af00      	add	r7, sp, #0
 804297a:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 804297c:	6878      	ldr	r0, [r7, #4]
 804297e:	f7ff fdc1 	bl	8042504 <UART_DMA_Driver_Get>
 8042982:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8042984:	68fb      	ldr	r3, [r7, #12]
 8042986:	2b00      	cmp	r3, #0
 8042988:	d042      	beq.n	8042a10 <UART_Driver_TX_ISR+0x9c>
        return;

    if (driver->uart->ISR & USART_ISR_FE) {
 804298a:	68fb      	ldr	r3, [r7, #12]
 804298c:	681b      	ldr	r3, [r3, #0]
 804298e:	69db      	ldr	r3, [r3, #28]
 8042990:	f003 0302 	and.w	r3, r3, #2
 8042994:	2b00      	cmp	r3, #0
 8042996:	d003      	beq.n	80429a0 <UART_Driver_TX_ISR+0x2c>
        driver->uart->ICR = USART_ICR_FECF;  // Clear Framing Error Flag
 8042998:	68fb      	ldr	r3, [r7, #12]
 804299a:	681b      	ldr	r3, [r3, #0]
 804299c:	2202      	movs	r2, #2
 804299e:	621a      	str	r2, [r3, #32]
    }

    if (driver->uart->ISR & USART_ISR_NE) {
 80429a0:	68fb      	ldr	r3, [r7, #12]
 80429a2:	681b      	ldr	r3, [r3, #0]
 80429a4:	69db      	ldr	r3, [r3, #28]
 80429a6:	f003 0304 	and.w	r3, r3, #4
 80429aa:	2b00      	cmp	r3, #0
 80429ac:	d003      	beq.n	80429b6 <UART_Driver_TX_ISR+0x42>
        driver->uart->ICR = USART_ICR_NECF;  // Clear Noise Error Flag
 80429ae:	68fb      	ldr	r3, [r7, #12]
 80429b0:	681b      	ldr	r3, [r3, #0]
 80429b2:	2204      	movs	r2, #4
 80429b4:	621a      	str	r2, [r3, #32]

//    if (driver->uart->ISR & USART_ISR_EOBF) {
//        driver->uart->ICR = USART_ICR_EOBCF; // Clear End of Block Flag
//    }

    if (driver->uart->ISR & USART_ISR_CMF) {
 80429b6:	68fb      	ldr	r3, [r7, #12]
 80429b8:	681b      	ldr	r3, [r3, #0]
 80429ba:	69db      	ldr	r3, [r3, #28]
 80429bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80429c0:	2b00      	cmp	r3, #0
 80429c2:	d004      	beq.n	80429ce <UART_Driver_TX_ISR+0x5a>
        driver->uart->ICR = USART_ICR_CMCF;  // Clear Character Match Flag
 80429c4:	68fb      	ldr	r3, [r7, #12]
 80429c6:	681b      	ldr	r3, [r3, #0]
 80429c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80429cc:	621a      	str	r2, [r3, #32]
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80429ce:	6878      	ldr	r0, [r7, #4]
 80429d0:	f7ff fba8 	bl	8042124 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80429d4:	4603      	mov	r3, r0
 80429d6:	2b00      	cmp	r3, #0
 80429d8:	d01b      	beq.n	8042a12 <UART_Driver_TX_ISR+0x9e>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 80429da:	6878      	ldr	r0, [r7, #4]
 80429dc:	f7ff fc18 	bl	8042210 <LL_USART_IsEnabledIT_TXE_TXFNF>
 80429e0:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80429e2:	2b00      	cmp	r3, #0
 80429e4:	d015      	beq.n	8042a12 <UART_Driver_TX_ISR+0x9e>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 80429e6:	68fb      	ldr	r3, [r7, #12]
 80429e8:	3334      	adds	r3, #52	@ 0x34
 80429ea:	f107 020b 	add.w	r2, r7, #11
 80429ee:	4611      	mov	r1, r2
 80429f0:	4618      	mov	r0, r3
 80429f2:	f00b f9df 	bl	804ddb4 <RingBuffer_Get>
 80429f6:	4603      	mov	r3, r0
 80429f8:	2b00      	cmp	r3, #0
 80429fa:	d005      	beq.n	8042a08 <UART_Driver_TX_ISR+0x94>
        {
            LL_USART_TransmitData8(uart, tx_data);
 80429fc:	7afb      	ldrb	r3, [r7, #11]
 80429fe:	4619      	mov	r1, r3
 8042a00:	6878      	ldr	r0, [r7, #4]
 8042a02:	f7ff fc51 	bl	80422a8 <LL_USART_TransmitData8>
 8042a06:	e004      	b.n	8042a12 <UART_Driver_TX_ISR+0x9e>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 8042a08:	6878      	ldr	r0, [r7, #4]
 8042a0a:	f7ff fbe0 	bl	80421ce <LL_USART_DisableIT_TXE_TXFNF>
 8042a0e:	e000      	b.n	8042a12 <UART_Driver_TX_ISR+0x9e>
        return;
 8042a10:	bf00      	nop
        }
    }
}
 8042a12:	3710      	adds	r7, #16
 8042a14:	46bd      	mov	sp, r7
 8042a16:	bd80      	pop	{r7, pc}

08042a18 <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart) {
 8042a18:	b580      	push	{r7, lr}
 8042a1a:	b08a      	sub	sp, #40	@ 0x28
 8042a1c:	af00      	add	r7, sp, #0
 8042a1e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8042a20:	2300      	movs	r3, #0
 8042a22:	60bb      	str	r3, [r7, #8]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8042a24:	6878      	ldr	r0, [r7, #4]
 8042a26:	f7ff fd6d 	bl	8042504 <UART_DMA_Driver_Get>
 8042a2a:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 8042a2c:	69bb      	ldr	r3, [r7, #24]
 8042a2e:	2b00      	cmp	r3, #0
 8042a30:	d07c      	beq.n	8042b2c <UART_DMA_Rx_Check+0x114>
        return;

    size_t old_pos = driver->old_dma_pos;
 8042a32:	69bb      	ldr	r3, [r7, #24]
 8042a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8042a36:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance, driver->dma_rx_channel);
 8042a38:	69bb      	ldr	r3, [r7, #24]
 8042a3a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8042a3c:	69bb      	ldr	r3, [r7, #24]
 8042a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8042a40:	4619      	mov	r1, r3
 8042a42:	4610      	mov	r0, r2
 8042a44:	f7ff fcac 	bl	80423a0 <LL_DMA_GetDataLength>
 8042a48:	4603      	mov	r3, r0
 8042a4a:	827b      	strh	r3, [r7, #18]
    pos = driver->dma_rx_buffer_size - remaining;
 8042a4c:	69bb      	ldr	r3, [r7, #24]
 8042a4e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8042a52:	461a      	mov	r2, r3
 8042a54:	8a7b      	ldrh	r3, [r7, #18]
 8042a56:	1ad3      	subs	r3, r2, r3
 8042a58:	60fb      	str	r3, [r7, #12]
//    if (driver->uart->ISR & USART_ISR_ORE) {
//        driver->uart->ICR = USART_ICR_ORECF;
//        UART_Driver_Polling_SendString(USART1, "Overrun Error detected!\r\n");
//    }

    if (pos != old_pos) {
 8042a5a:	68fa      	ldr	r2, [r7, #12]
 8042a5c:	697b      	ldr	r3, [r7, #20]
 8042a5e:	429a      	cmp	r2, r3
 8042a60:	d065      	beq.n	8042b2e <UART_DMA_Rx_Check+0x116>
        if (pos > old_pos) {
 8042a62:	68fa      	ldr	r2, [r7, #12]
 8042a64:	697b      	ldr	r3, [r7, #20]
 8042a66:	429a      	cmp	r2, r3
 8042a68:	d914      	bls.n	8042a94 <UART_DMA_Rx_Check+0x7c>
            for (size_t i = old_pos; i < pos; i++) {
 8042a6a:	697b      	ldr	r3, [r7, #20]
 8042a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8042a6e:	e00c      	b.n	8042a8a <UART_DMA_Rx_Check+0x72>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8042a70:	69bb      	ldr	r3, [r7, #24]
 8042a72:	1d18      	adds	r0, r3, #4
 8042a74:	69bb      	ldr	r3, [r7, #24]
 8042a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8042a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042a7a:	4413      	add	r3, r2
 8042a7c:	781b      	ldrb	r3, [r3, #0]
 8042a7e:	4619      	mov	r1, r3
 8042a80:	f00b f952 	bl	804dd28 <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 8042a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042a86:	3301      	adds	r3, #1
 8042a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8042a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042a8c:	68fb      	ldr	r3, [r7, #12]
 8042a8e:	429a      	cmp	r2, r3
 8042a90:	d3ee      	bcc.n	8042a70 <UART_DMA_Rx_Check+0x58>
 8042a92:	e02a      	b.n	8042aea <UART_DMA_Rx_Check+0xd2>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8042a94:	697b      	ldr	r3, [r7, #20]
 8042a96:	623b      	str	r3, [r7, #32]
 8042a98:	e00c      	b.n	8042ab4 <UART_DMA_Rx_Check+0x9c>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8042a9a:	69bb      	ldr	r3, [r7, #24]
 8042a9c:	1d18      	adds	r0, r3, #4
 8042a9e:	69bb      	ldr	r3, [r7, #24]
 8042aa0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8042aa2:	6a3b      	ldr	r3, [r7, #32]
 8042aa4:	4413      	add	r3, r2
 8042aa6:	781b      	ldrb	r3, [r3, #0]
 8042aa8:	4619      	mov	r1, r3
 8042aaa:	f00b f93d 	bl	804dd28 <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8042aae:	6a3b      	ldr	r3, [r7, #32]
 8042ab0:	3301      	adds	r3, #1
 8042ab2:	623b      	str	r3, [r7, #32]
 8042ab4:	69bb      	ldr	r3, [r7, #24]
 8042ab6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8042aba:	461a      	mov	r2, r3
 8042abc:	6a3b      	ldr	r3, [r7, #32]
 8042abe:	4293      	cmp	r3, r2
 8042ac0:	d3eb      	bcc.n	8042a9a <UART_DMA_Rx_Check+0x82>
            }
            for (size_t i = 0; i < pos; i++) {
 8042ac2:	2300      	movs	r3, #0
 8042ac4:	61fb      	str	r3, [r7, #28]
 8042ac6:	e00c      	b.n	8042ae2 <UART_DMA_Rx_Check+0xca>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8042ac8:	69bb      	ldr	r3, [r7, #24]
 8042aca:	1d18      	adds	r0, r3, #4
 8042acc:	69bb      	ldr	r3, [r7, #24]
 8042ace:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8042ad0:	69fb      	ldr	r3, [r7, #28]
 8042ad2:	4413      	add	r3, r2
 8042ad4:	781b      	ldrb	r3, [r3, #0]
 8042ad6:	4619      	mov	r1, r3
 8042ad8:	f00b f926 	bl	804dd28 <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 8042adc:	69fb      	ldr	r3, [r7, #28]
 8042ade:	3301      	adds	r3, #1
 8042ae0:	61fb      	str	r3, [r7, #28]
 8042ae2:	69fa      	ldr	r2, [r7, #28]
 8042ae4:	68fb      	ldr	r3, [r7, #12]
 8042ae6:	429a      	cmp	r2, r3
 8042ae8:	d3ee      	bcc.n	8042ac8 <UART_DMA_Rx_Check+0xb0>
            }
        }
        xSemaphoreGiveFromISR(driver->rxSemaphore, &xHigherPriorityTaskWoken);
 8042aea:	69bb      	ldr	r3, [r7, #24]
 8042aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8042aee:	f107 0208 	add.w	r2, r7, #8
 8042af2:	4611      	mov	r1, r2
 8042af4:	4618      	mov	r0, r3
 8042af6:	f012 fcd5 	bl	80554a4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8042afa:	68bb      	ldr	r3, [r7, #8]
 8042afc:	2b00      	cmp	r3, #0
 8042afe:	d007      	beq.n	8042b10 <UART_DMA_Rx_Check+0xf8>
 8042b00:	4b0c      	ldr	r3, [pc, #48]	@ (8042b34 <UART_DMA_Rx_Check+0x11c>)
 8042b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8042b06:	601a      	str	r2, [r3, #0]
 8042b08:	f3bf 8f4f 	dsb	sy
 8042b0c:	f3bf 8f6f 	isb	sy

        driver->old_dma_pos = pos;
 8042b10:	69bb      	ldr	r3, [r7, #24]
 8042b12:	68fa      	ldr	r2, [r7, #12]
 8042b14:	679a      	str	r2, [r3, #120]	@ 0x78
        if (driver->old_dma_pos == driver->dma_rx_buffer_size) {
 8042b16:	69bb      	ldr	r3, [r7, #24]
 8042b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8042b1a:	69ba      	ldr	r2, [r7, #24]
 8042b1c:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
 8042b20:	4293      	cmp	r3, r2
 8042b22:	d104      	bne.n	8042b2e <UART_DMA_Rx_Check+0x116>
            driver->old_dma_pos = 0;
 8042b24:	69bb      	ldr	r3, [r7, #24]
 8042b26:	2200      	movs	r2, #0
 8042b28:	679a      	str	r2, [r3, #120]	@ 0x78
 8042b2a:	e000      	b.n	8042b2e <UART_DMA_Rx_Check+0x116>
        return;
 8042b2c:	bf00      	nop
        }
    }
}
 8042b2e:	3728      	adds	r7, #40	@ 0x28
 8042b30:	46bd      	mov	sp, r7
 8042b32:	bd80      	pop	{r7, pc}
 8042b34:	e000ed04 	.word	0xe000ed04

08042b38 <UART_DMA_Driver_Read>:



int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 8042b38:	b580      	push	{r7, lr}
 8042b3a:	b084      	sub	sp, #16
 8042b3c:	af00      	add	r7, sp, #0
 8042b3e:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8042b40:	6878      	ldr	r0, [r7, #4]
 8042b42:	f7ff fcdf 	bl	8042504 <UART_DMA_Driver_Get>
 8042b46:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 8042b48:	68fb      	ldr	r3, [r7, #12]
 8042b4a:	2b00      	cmp	r3, #0
 8042b4c:	d102      	bne.n	8042b54 <UART_DMA_Driver_Read+0x1c>
        return -1;
 8042b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8042b52:	e00e      	b.n	8042b72 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 8042b54:	68fb      	ldr	r3, [r7, #12]
 8042b56:	3304      	adds	r3, #4
 8042b58:	f107 020b 	add.w	r2, r7, #11
 8042b5c:	4611      	mov	r1, r2
 8042b5e:	4618      	mov	r0, r3
 8042b60:	f00b f928 	bl	804ddb4 <RingBuffer_Get>
 8042b64:	4603      	mov	r3, r0
 8042b66:	2b00      	cmp	r3, #0
 8042b68:	d001      	beq.n	8042b6e <UART_DMA_Driver_Read+0x36>
        return data;
 8042b6a:	7afb      	ldrb	r3, [r7, #11]
 8042b6c:	e001      	b.n	8042b72 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 8042b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8042b72:	4618      	mov	r0, r3
 8042b74:	3710      	adds	r7, #16
 8042b76:	46bd      	mov	sp, r7
 8042b78:	bd80      	pop	{r7, pc}

08042b7a <UART_DMA_Driver_IsDataAvailable>:

_Bool UART_DMA_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 8042b7a:	b580      	push	{r7, lr}
 8042b7c:	b084      	sub	sp, #16
 8042b7e:	af00      	add	r7, sp, #0
 8042b80:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8042b82:	6878      	ldr	r0, [r7, #4]
 8042b84:	f7ff fcbe 	bl	8042504 <UART_DMA_Driver_Get>
 8042b88:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 8042b8a:	68fb      	ldr	r3, [r7, #12]
 8042b8c:	2b00      	cmp	r3, #0
 8042b8e:	d101      	bne.n	8042b94 <UART_DMA_Driver_IsDataAvailable+0x1a>
        return false;
 8042b90:	2300      	movs	r3, #0
 8042b92:	e005      	b.n	8042ba0 <UART_DMA_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 8042b94:	68fb      	ldr	r3, [r7, #12]
 8042b96:	3304      	adds	r3, #4
 8042b98:	4618      	mov	r0, r3
 8042b9a:	f00b f988 	bl	804deae <RingBuffer_IsDataAvailable>
 8042b9e:	4603      	mov	r3, r0
}
 8042ba0:	4618      	mov	r0, r3
 8042ba2:	3710      	adds	r7, #16
 8042ba4:	46bd      	mov	sp, r7
 8042ba6:	bd80      	pop	{r7, pc}

08042ba8 <UART_DMA_Driver_TXNumFreeSlots>:

uint16_t UART_DMA_Driver_TXNumFreeSlots(USART_TypeDef *uart)
{
 8042ba8:	b580      	push	{r7, lr}
 8042baa:	b084      	sub	sp, #16
 8042bac:	af00      	add	r7, sp, #0
 8042bae:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8042bb0:	6878      	ldr	r0, [r7, #4]
 8042bb2:	f7ff fca7 	bl	8042504 <UART_DMA_Driver_Get>
 8042bb6:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8042bb8:	68fb      	ldr	r3, [r7, #12]
 8042bba:	2b00      	cmp	r3, #0
 8042bbc:	d101      	bne.n	8042bc2 <UART_DMA_Driver_TXNumFreeSlots+0x1a>
        return 0;
 8042bbe:	2300      	movs	r3, #0
 8042bc0:	e006      	b.n	8042bd0 <UART_DMA_Driver_TXNumFreeSlots+0x28>

    return (uint16_t)RingBuffer_NumFreeSlots(&driver->tx_buffer);
 8042bc2:	68fb      	ldr	r3, [r7, #12]
 8042bc4:	3334      	adds	r3, #52	@ 0x34
 8042bc6:	4618      	mov	r0, r3
 8042bc8:	f00b f935 	bl	804de36 <RingBuffer_NumFreeSlots>
 8042bcc:	4603      	mov	r3, r0
 8042bce:	bf00      	nop
}
 8042bd0:	4618      	mov	r0, r3
 8042bd2:	3710      	adds	r7, #16
 8042bd4:	46bd      	mov	sp, r7
 8042bd6:	bd80      	pop	{r7, pc}

08042bd8 <UART_Driver_Polling_Write>:

/************************************************************************************************
 *                    						EXPAND FUNCTION                    					*
 ***********************************************************************************************/
void UART_Driver_Polling_Write(USART_TypeDef *uart, uint8_t data)
{
 8042bd8:	b580      	push	{r7, lr}
 8042bda:	b082      	sub	sp, #8
 8042bdc:	af00      	add	r7, sp, #0
 8042bde:	6078      	str	r0, [r7, #4]
 8042be0:	460b      	mov	r3, r1
 8042be2:	70fb      	strb	r3, [r7, #3]
    while (!LL_USART_IsActiveFlag_TXE(uart))
 8042be4:	bf00      	nop
 8042be6:	6878      	ldr	r0, [r7, #4]
 8042be8:	f7ff fa9c 	bl	8042124 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8042bec:	4603      	mov	r3, r0
 8042bee:	2b00      	cmp	r3, #0
 8042bf0:	d0f9      	beq.n	8042be6 <UART_Driver_Polling_Write+0xe>
    {
    }
    LL_USART_TransmitData8(uart, data);
 8042bf2:	78fb      	ldrb	r3, [r7, #3]
 8042bf4:	4619      	mov	r1, r3
 8042bf6:	6878      	ldr	r0, [r7, #4]
 8042bf8:	f7ff fb56 	bl	80422a8 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(uart))
 8042bfc:	bf00      	nop
 8042bfe:	6878      	ldr	r0, [r7, #4]
 8042c00:	f7ff fa7d 	bl	80420fe <LL_USART_IsActiveFlag_TC>
 8042c04:	4603      	mov	r3, r0
 8042c06:	2b00      	cmp	r3, #0
 8042c08:	d0f9      	beq.n	8042bfe <UART_Driver_Polling_Write+0x26>
    {
    }
}
 8042c0a:	bf00      	nop
 8042c0c:	bf00      	nop
 8042c0e:	3708      	adds	r7, #8
 8042c10:	46bd      	mov	sp, r7
 8042c12:	bd80      	pop	{r7, pc}

08042c14 <UART_Driver_Polling_SendString>:

void UART_Driver_Polling_SendString(USART_TypeDef *uart, const char *str)
{
 8042c14:	b580      	push	{r7, lr}
 8042c16:	b082      	sub	sp, #8
 8042c18:	af00      	add	r7, sp, #0
 8042c1a:	6078      	str	r0, [r7, #4]
 8042c1c:	6039      	str	r1, [r7, #0]
    if (str == NULL)
 8042c1e:	683b      	ldr	r3, [r7, #0]
 8042c20:	2b00      	cmp	r3, #0
 8042c22:	d00e      	beq.n	8042c42 <UART_Driver_Polling_SendString+0x2e>
        return;
    while (*str)
 8042c24:	e008      	b.n	8042c38 <UART_Driver_Polling_SendString+0x24>
    {
    	UART_Driver_Polling_Write(uart, (uint8_t)(*str));
 8042c26:	683b      	ldr	r3, [r7, #0]
 8042c28:	781b      	ldrb	r3, [r3, #0]
 8042c2a:	4619      	mov	r1, r3
 8042c2c:	6878      	ldr	r0, [r7, #4]
 8042c2e:	f7ff ffd3 	bl	8042bd8 <UART_Driver_Polling_Write>
        str++;
 8042c32:	683b      	ldr	r3, [r7, #0]
 8042c34:	3301      	adds	r3, #1
 8042c36:	603b      	str	r3, [r7, #0]
    while (*str)
 8042c38:	683b      	ldr	r3, [r7, #0]
 8042c3a:	781b      	ldrb	r3, [r3, #0]
 8042c3c:	2b00      	cmp	r3, #0
 8042c3e:	d1f2      	bne.n	8042c26 <UART_Driver_Polling_SendString+0x12>
 8042c40:	e000      	b.n	8042c44 <UART_Driver_Polling_SendString+0x30>
        return;
 8042c42:	bf00      	nop
    }
}
 8042c44:	3708      	adds	r7, #8
 8042c46:	46bd      	mov	sp, r7
 8042c48:	bd80      	pop	{r7, pc}

08042c4a <LL_GPIO_IsInputPinSet>:
{
 8042c4a:	b480      	push	{r7}
 8042c4c:	b083      	sub	sp, #12
 8042c4e:	af00      	add	r7, sp, #0
 8042c50:	6078      	str	r0, [r7, #4]
 8042c52:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	691a      	ldr	r2, [r3, #16]
 8042c58:	683b      	ldr	r3, [r7, #0]
 8042c5a:	4013      	ands	r3, r2
 8042c5c:	683a      	ldr	r2, [r7, #0]
 8042c5e:	429a      	cmp	r2, r3
 8042c60:	d101      	bne.n	8042c66 <LL_GPIO_IsInputPinSet+0x1c>
 8042c62:	2301      	movs	r3, #1
 8042c64:	e000      	b.n	8042c68 <LL_GPIO_IsInputPinSet+0x1e>
 8042c66:	2300      	movs	r3, #0
}
 8042c68:	4618      	mov	r0, r3
 8042c6a:	370c      	adds	r7, #12
 8042c6c:	46bd      	mov	sp, r7
 8042c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c72:	4770      	bx	lr

08042c74 <LL_GPIO_SetOutputPin>:
{
 8042c74:	b480      	push	{r7}
 8042c76:	b083      	sub	sp, #12
 8042c78:	af00      	add	r7, sp, #0
 8042c7a:	6078      	str	r0, [r7, #4]
 8042c7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8042c7e:	687b      	ldr	r3, [r7, #4]
 8042c80:	683a      	ldr	r2, [r7, #0]
 8042c82:	619a      	str	r2, [r3, #24]
}
 8042c84:	bf00      	nop
 8042c86:	370c      	adds	r7, #12
 8042c88:	46bd      	mov	sp, r7
 8042c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c8e:	4770      	bx	lr

08042c90 <LL_GPIO_ResetOutputPin>:
{
 8042c90:	b480      	push	{r7}
 8042c92:	b083      	sub	sp, #12
 8042c94:	af00      	add	r7, sp, #0
 8042c96:	6078      	str	r0, [r7, #4]
 8042c98:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8042c9a:	683b      	ldr	r3, [r7, #0]
 8042c9c:	041a      	lsls	r2, r3, #16
 8042c9e:	687b      	ldr	r3, [r7, #4]
 8042ca0:	619a      	str	r2, [r3, #24]
}
 8042ca2:	bf00      	nop
 8042ca4:	370c      	adds	r7, #12
 8042ca6:	46bd      	mov	sp, r7
 8042ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cac:	4770      	bx	lr
	...

08042cb0 <CM4_KeepAliveTask>:
#define CM4_RST_PIN           MCU_IO_RESET_CM4_Pin

static uint16_t cm4_miss_count = 0;

void CM4_KeepAliveTask(void *pvParameters)
{
 8042cb0:	b580      	push	{r7, lr}
 8042cb2:	b086      	sub	sp, #24
 8042cb4:	af00      	add	r7, sp, #0
 8042cb6:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8042cb8:	f013 ff36 	bl	8056b28 <xTaskGetTickCount>
 8042cbc:	4603      	mov	r3, r0
 8042cbe:	60fb      	str	r3, [r7, #12]
    while (1)
    {
        GPIO_SetLow(KEEPALIVE_OUT_PORT, KEEPALIVE_OUT_PIN);
 8042cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8042cc4:	4837      	ldr	r0, [pc, #220]	@ (8042da4 <CM4_KeepAliveTask+0xf4>)
 8042cc6:	f7ff ffe3 	bl	8042c90 <LL_GPIO_ResetOutputPin>

        uint8_t respondedLow = 0;
 8042cca:	2300      	movs	r3, #0
 8042ccc:	75fb      	strb	r3, [r7, #23]
        TickType_t start = xTaskGetTickCount();
 8042cce:	f013 ff2b 	bl	8056b28 <xTaskGetTickCount>
 8042cd2:	6138      	str	r0, [r7, #16]
        while (xTaskGetTickCount() - start < pdMS_TO_TICKS(RESPONSE_TIMEOUT_MS)) {
 8042cd4:	e00d      	b.n	8042cf2 <CM4_KeepAliveTask+0x42>
            if (GPIO_IsInLow(KEEPALIVE_IN_PORT, KEEPALIVE_IN_PIN)) {
 8042cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8042cda:	4833      	ldr	r0, [pc, #204]	@ (8042da8 <CM4_KeepAliveTask+0xf8>)
 8042cdc:	f7ff ffb5 	bl	8042c4a <LL_GPIO_IsInputPinSet>
 8042ce0:	4603      	mov	r3, r0
 8042ce2:	2b00      	cmp	r3, #0
 8042ce4:	d102      	bne.n	8042cec <CM4_KeepAliveTask+0x3c>
                respondedLow = 1;
 8042ce6:	2301      	movs	r3, #1
 8042ce8:	75fb      	strb	r3, [r7, #23]
                break;
 8042cea:	e00a      	b.n	8042d02 <CM4_KeepAliveTask+0x52>
            }
            vTaskDelay(pdMS_TO_TICKS(50));
 8042cec:	2032      	movs	r0, #50	@ 0x32
 8042cee:	f013 fcb9 	bl	8056664 <vTaskDelay>
        while (xTaskGetTickCount() - start < pdMS_TO_TICKS(RESPONSE_TIMEOUT_MS)) {
 8042cf2:	f013 ff19 	bl	8056b28 <xTaskGetTickCount>
 8042cf6:	4602      	mov	r2, r0
 8042cf8:	693b      	ldr	r3, [r7, #16]
 8042cfa:	1ad3      	subs	r3, r2, r3
 8042cfc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8042d00:	d3e9      	bcc.n	8042cd6 <CM4_KeepAliveTask+0x26>
        }

        GPIO_SetHigh(KEEPALIVE_OUT_PORT, KEEPALIVE_OUT_PIN);
 8042d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8042d06:	4827      	ldr	r0, [pc, #156]	@ (8042da4 <CM4_KeepAliveTask+0xf4>)
 8042d08:	f7ff ffb4 	bl	8042c74 <LL_GPIO_SetOutputPin>

        uint8_t respondedHigh = 0;
 8042d0c:	2300      	movs	r3, #0
 8042d0e:	75bb      	strb	r3, [r7, #22]
        start = xTaskGetTickCount();
 8042d10:	f013 ff0a 	bl	8056b28 <xTaskGetTickCount>
 8042d14:	6138      	str	r0, [r7, #16]
        while (xTaskGetTickCount() - start < pdMS_TO_TICKS(RESPONSE_TIMEOUT_MS)) {
 8042d16:	e00d      	b.n	8042d34 <CM4_KeepAliveTask+0x84>
            if (GPIO_IsInHigh(KEEPALIVE_IN_PORT, KEEPALIVE_IN_PIN)) {
 8042d18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8042d1c:	4822      	ldr	r0, [pc, #136]	@ (8042da8 <CM4_KeepAliveTask+0xf8>)
 8042d1e:	f7ff ff94 	bl	8042c4a <LL_GPIO_IsInputPinSet>
 8042d22:	4603      	mov	r3, r0
 8042d24:	2b00      	cmp	r3, #0
 8042d26:	d002      	beq.n	8042d2e <CM4_KeepAliveTask+0x7e>
                respondedHigh = 1;
 8042d28:	2301      	movs	r3, #1
 8042d2a:	75bb      	strb	r3, [r7, #22]
                break;
 8042d2c:	e00a      	b.n	8042d44 <CM4_KeepAliveTask+0x94>
            }
            vTaskDelay(pdMS_TO_TICKS(50));
 8042d2e:	2032      	movs	r0, #50	@ 0x32
 8042d30:	f013 fc98 	bl	8056664 <vTaskDelay>
        while (xTaskGetTickCount() - start < pdMS_TO_TICKS(RESPONSE_TIMEOUT_MS)) {
 8042d34:	f013 fef8 	bl	8056b28 <xTaskGetTickCount>
 8042d38:	4602      	mov	r2, r0
 8042d3a:	693b      	ldr	r3, [r7, #16]
 8042d3c:	1ad3      	subs	r3, r2, r3
 8042d3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8042d42:	d3e9      	bcc.n	8042d18 <CM4_KeepAliveTask+0x68>
        }

        if (respondedLow && respondedHigh) {
 8042d44:	7dfb      	ldrb	r3, [r7, #23]
 8042d46:	2b00      	cmp	r3, #0
 8042d48:	d006      	beq.n	8042d58 <CM4_KeepAliveTask+0xa8>
 8042d4a:	7dbb      	ldrb	r3, [r7, #22]
 8042d4c:	2b00      	cmp	r3, #0
 8042d4e:	d003      	beq.n	8042d58 <CM4_KeepAliveTask+0xa8>
            cm4_miss_count = 0;
 8042d50:	4b16      	ldr	r3, [pc, #88]	@ (8042dac <CM4_KeepAliveTask+0xfc>)
 8042d52:	2200      	movs	r2, #0
 8042d54:	801a      	strh	r2, [r3, #0]
 8042d56:	e005      	b.n	8042d64 <CM4_KeepAliveTask+0xb4>
        } else {
            cm4_miss_count++;
 8042d58:	4b14      	ldr	r3, [pc, #80]	@ (8042dac <CM4_KeepAliveTask+0xfc>)
 8042d5a:	881b      	ldrh	r3, [r3, #0]
 8042d5c:	3301      	adds	r3, #1
 8042d5e:	b29a      	uxth	r2, r3
 8042d60:	4b12      	ldr	r3, [pc, #72]	@ (8042dac <CM4_KeepAliveTask+0xfc>)
 8042d62:	801a      	strh	r2, [r3, #0]
        }

        if (cm4_miss_count >= MAX_RETRY_COUNT) {
 8042d64:	4b11      	ldr	r3, [pc, #68]	@ (8042dac <CM4_KeepAliveTask+0xfc>)
 8042d66:	881b      	ldrh	r3, [r3, #0]
 8042d68:	2b77      	cmp	r3, #119	@ 0x77
 8042d6a:	d912      	bls.n	8042d92 <CM4_KeepAliveTask+0xe2>
            SYSLOG_ERROR("CM4 unresponsive. Triggering reset.");
 8042d6c:	2200      	movs	r2, #0
 8042d6e:	4910      	ldr	r1, [pc, #64]	@ (8042db0 <CM4_KeepAliveTask+0x100>)
 8042d70:	2004      	movs	r0, #4
 8042d72:	f008 ff1d 	bl	804bbb0 <syslog_log>
            GPIO_SetLow(CM4_RST_PORT, CM4_RST_PIN);
 8042d76:	2180      	movs	r1, #128	@ 0x80
 8042d78:	480e      	ldr	r0, [pc, #56]	@ (8042db4 <CM4_KeepAliveTask+0x104>)
 8042d7a:	f7ff ff89 	bl	8042c90 <LL_GPIO_ResetOutputPin>
            vTaskDelay(pdMS_TO_TICKS(100));
 8042d7e:	2064      	movs	r0, #100	@ 0x64
 8042d80:	f013 fc70 	bl	8056664 <vTaskDelay>
            GPIO_SetHigh(CM4_RST_PORT, CM4_RST_PIN);
 8042d84:	2180      	movs	r1, #128	@ 0x80
 8042d86:	480b      	ldr	r0, [pc, #44]	@ (8042db4 <CM4_KeepAliveTask+0x104>)
 8042d88:	f7ff ff74 	bl	8042c74 <LL_GPIO_SetOutputPin>
            cm4_miss_count = 0;
 8042d8c:	4b07      	ldr	r3, [pc, #28]	@ (8042dac <CM4_KeepAliveTask+0xfc>)
 8042d8e:	2200      	movs	r2, #0
 8042d90:	801a      	strh	r2, [r3, #0]
        }

        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(CHECK_INTERVAL_MS));
 8042d92:	f107 030c 	add.w	r3, r7, #12
 8042d96:	f241 3188 	movw	r1, #5000	@ 0x1388
 8042d9a:	4618      	mov	r0, r3
 8042d9c:	f013 fbda 	bl	8056554 <xTaskDelayUntil>
    {
 8042da0:	e78e      	b.n	8042cc0 <CM4_KeepAliveTask+0x10>
 8042da2:	bf00      	nop
 8042da4:	58021400 	.word	0x58021400
 8042da8:	58021000 	.word	0x58021000
 8042dac:	2401df58 	.word	0x2401df58
 8042db0:	0806adf4 	.word	0x0806adf4
 8042db4:	58021800 	.word	0x58021800

08042db8 <CM4_GetMissCount>:
    }
}

uint16_t CM4_GetMissCount(void)
{
 8042db8:	b480      	push	{r7}
 8042dba:	af00      	add	r7, sp, #0
    return cm4_miss_count;
 8042dbc:	4b03      	ldr	r3, [pc, #12]	@ (8042dcc <CM4_GetMissCount+0x14>)
 8042dbe:	881b      	ldrh	r3, [r3, #0]
}
 8042dc0:	4618      	mov	r0, r3
 8042dc2:	46bd      	mov	sp, r7
 8042dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dc8:	4770      	bx	lr
 8042dca:	bf00      	nop
 8042dcc:	2401df58 	.word	0x2401df58

08042dd0 <fnv1a32>:
static int FRAM_PASSWORD_FAIL = 0;

#define FRAM_USER_PWD_LEN_ADDR  0x0000
#define FRAM_USER_PWD_ADDR      0x0001

static uint32_t fnv1a32(const char *s) {
 8042dd0:	b480      	push	{r7}
 8042dd2:	b085      	sub	sp, #20
 8042dd4:	af00      	add	r7, sp, #0
 8042dd6:	6078      	str	r0, [r7, #4]
    uint32_t h = 0x811C9DC5u;
 8042dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8042e10 <fnv1a32+0x40>)
 8042dda:	60fb      	str	r3, [r7, #12]
    while (*s) {
 8042ddc:	e00c      	b.n	8042df8 <fnv1a32+0x28>
        h ^= (uint8_t)(*s++);
 8042dde:	687b      	ldr	r3, [r7, #4]
 8042de0:	1c5a      	adds	r2, r3, #1
 8042de2:	607a      	str	r2, [r7, #4]
 8042de4:	781b      	ldrb	r3, [r3, #0]
 8042de6:	461a      	mov	r2, r3
 8042de8:	68fb      	ldr	r3, [r7, #12]
 8042dea:	4053      	eors	r3, r2
 8042dec:	60fb      	str	r3, [r7, #12]
        h *= 0x01000193u;
 8042dee:	68fb      	ldr	r3, [r7, #12]
 8042df0:	4a08      	ldr	r2, [pc, #32]	@ (8042e14 <fnv1a32+0x44>)
 8042df2:	fb02 f303 	mul.w	r3, r2, r3
 8042df6:	60fb      	str	r3, [r7, #12]
    while (*s) {
 8042df8:	687b      	ldr	r3, [r7, #4]
 8042dfa:	781b      	ldrb	r3, [r3, #0]
 8042dfc:	2b00      	cmp	r3, #0
 8042dfe:	d1ee      	bne.n	8042dde <fnv1a32+0xe>
    }
    return h;
 8042e00:	68fb      	ldr	r3, [r7, #12]
}
 8042e02:	4618      	mov	r0, r3
 8042e04:	3714      	adds	r7, #20
 8042e06:	46bd      	mov	sp, r7
 8042e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e0c:	4770      	bx	lr
 8042e0e:	bf00      	nop
 8042e10:	811c9dc5 	.word	0x811c9dc5
 8042e14:	01000193 	.word	0x01000193

08042e18 <hash_equal>:
static int hash_equal(uint32_t a, uint32_t b) {
 8042e18:	b480      	push	{r7}
 8042e1a:	b085      	sub	sp, #20
 8042e1c:	af00      	add	r7, sp, #0
 8042e1e:	6078      	str	r0, [r7, #4]
 8042e20:	6039      	str	r1, [r7, #0]
    uint32_t diff = a ^ b;
 8042e22:	687a      	ldr	r2, [r7, #4]
 8042e24:	683b      	ldr	r3, [r7, #0]
 8042e26:	4053      	eors	r3, r2
 8042e28:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 16;
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	0c1b      	lsrs	r3, r3, #16
 8042e2e:	68fa      	ldr	r2, [r7, #12]
 8042e30:	4313      	orrs	r3, r2
 8042e32:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 8;
 8042e34:	68fb      	ldr	r3, [r7, #12]
 8042e36:	0a1b      	lsrs	r3, r3, #8
 8042e38:	68fa      	ldr	r2, [r7, #12]
 8042e3a:	4313      	orrs	r3, r2
 8042e3c:	60fb      	str	r3, [r7, #12]
    return (diff & 0xFFu) == 0;
 8042e3e:	68fb      	ldr	r3, [r7, #12]
 8042e40:	b2db      	uxtb	r3, r3
 8042e42:	2b00      	cmp	r3, #0
 8042e44:	bf0c      	ite	eq
 8042e46:	2301      	moveq	r3, #1
 8042e48:	2300      	movne	r3, #0
 8042e4a:	b2db      	uxtb	r3, r3
}
 8042e4c:	4618      	mov	r0, r3
 8042e4e:	3714      	adds	r7, #20
 8042e50:	46bd      	mov	sp, r7
 8042e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e56:	4770      	bx	lr

08042e58 <verify_password>:

int verify_password(const char *input_password) {
 8042e58:	b580      	push	{r7, lr}
 8042e5a:	b084      	sub	sp, #16
 8042e5c:	af00      	add	r7, sp, #0
 8042e5e:	6078      	str	r0, [r7, #4]
    uint32_t input_hash = fnv1a32(input_password);
 8042e60:	6878      	ldr	r0, [r7, #4]
 8042e62:	f7ff ffb5 	bl	8042dd0 <fnv1a32>
 8042e66:	60f8      	str	r0, [r7, #12]
    uint32_t stored_hash = itwasmeulrich;
 8042e68:	4b05      	ldr	r3, [pc, #20]	@ (8042e80 <verify_password+0x28>)
 8042e6a:	60bb      	str	r3, [r7, #8]
    return hash_equal(input_hash, stored_hash);
 8042e6c:	68b9      	ldr	r1, [r7, #8]
 8042e6e:	68f8      	ldr	r0, [r7, #12]
 8042e70:	f7ff ffd2 	bl	8042e18 <hash_equal>
 8042e74:	4603      	mov	r3, r0
}
 8042e76:	4618      	mov	r0, r3
 8042e78:	3710      	adds	r7, #16
 8042e7a:	46bd      	mov	sp, r7
 8042e7c:	bd80      	pop	{r7, pc}
 8042e7e:	bf00      	nop
 8042e80:	c5477ba3 	.word	0xc5477ba3

08042e84 <load_user_password>:

static void load_user_password(ShieldInstance_t *instance) {
 8042e84:	b580      	push	{r7, lr}
 8042e86:	b084      	sub	sp, #16
 8042e88:	af00      	add	r7, sp, #0
 8042e8a:	6078      	str	r0, [r7, #4]
    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8042e8c:	f009 fb02 	bl	804c494 <FRAM_SPI_GetHandle>
 8042e90:	60f8      	str	r0, [r7, #12]
    uint8_t pwd_len = 0;
 8042e92:	2300      	movs	r3, #0
 8042e94:	72fb      	strb	r3, [r7, #11]

    if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_LEN_ADDR, &pwd_len, 1) != E_OK || pwd_len > MAX_PASSWORD_LEN) {
 8042e96:	f107 020b 	add.w	r2, r7, #11
 8042e9a:	2301      	movs	r3, #1
 8042e9c:	2100      	movs	r1, #0
 8042e9e:	68f8      	ldr	r0, [r7, #12]
 8042ea0:	f009 fbef 	bl	804c682 <FRAM_SPI_ReadMem>
 8042ea4:	4603      	mov	r3, r0
 8042ea6:	2b00      	cmp	r3, #0
 8042ea8:	d102      	bne.n	8042eb0 <load_user_password+0x2c>
 8042eaa:	7afb      	ldrb	r3, [r7, #11]
 8042eac:	2b10      	cmp	r3, #16
 8042eae:	d907      	bls.n	8042ec0 <load_user_password+0x3c>
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8042eb0:	4915      	ldr	r1, [pc, #84]	@ (8042f08 <load_user_password+0x84>)
 8042eb2:	6878      	ldr	r0, [r7, #4]
 8042eb4:	f000 f920 	bl	80430f8 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8042eb8:	4b14      	ldr	r3, [pc, #80]	@ (8042f0c <load_user_password+0x88>)
 8042eba:	2201      	movs	r2, #1
 8042ebc:	601a      	str	r2, [r3, #0]
 8042ebe:	e020      	b.n	8042f02 <load_user_password+0x7e>
        return;
    }

    if (pwd_len > 0) {
 8042ec0:	7afb      	ldrb	r3, [r7, #11]
 8042ec2:	2b00      	cmp	r3, #0
 8042ec4:	d016      	beq.n	8042ef4 <load_user_password+0x70>
        if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)user_password, pwd_len) == E_OK) {
 8042ec6:	7afb      	ldrb	r3, [r7, #11]
 8042ec8:	4a11      	ldr	r2, [pc, #68]	@ (8042f10 <load_user_password+0x8c>)
 8042eca:	2101      	movs	r1, #1
 8042ecc:	68f8      	ldr	r0, [r7, #12]
 8042ece:	f009 fbd8 	bl	804c682 <FRAM_SPI_ReadMem>
 8042ed2:	4603      	mov	r3, r0
 8042ed4:	2b00      	cmp	r3, #0
 8042ed6:	d105      	bne.n	8042ee4 <load_user_password+0x60>
            user_password[pwd_len] = '\0';
 8042ed8:	7afb      	ldrb	r3, [r7, #11]
 8042eda:	461a      	mov	r2, r3
 8042edc:	4b0c      	ldr	r3, [pc, #48]	@ (8042f10 <load_user_password+0x8c>)
 8042ede:	2100      	movs	r1, #0
 8042ee0:	5499      	strb	r1, [r3, r2]
 8042ee2:	e00e      	b.n	8042f02 <load_user_password+0x7e>
        } else {
            Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8042ee4:	4908      	ldr	r1, [pc, #32]	@ (8042f08 <load_user_password+0x84>)
 8042ee6:	6878      	ldr	r0, [r7, #4]
 8042ee8:	f000 f906 	bl	80430f8 <Shield_WriteString>
        	FRAM_PASSWORD_FAIL = 1;
 8042eec:	4b07      	ldr	r3, [pc, #28]	@ (8042f0c <load_user_password+0x88>)
 8042eee:	2201      	movs	r2, #1
 8042ef0:	601a      	str	r2, [r3, #0]
 8042ef2:	e006      	b.n	8042f02 <load_user_password+0x7e>
        }
    } else {
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8042ef4:	4904      	ldr	r1, [pc, #16]	@ (8042f08 <load_user_password+0x84>)
 8042ef6:	6878      	ldr	r0, [r7, #4]
 8042ef8:	f000 f8fe 	bl	80430f8 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8042efc:	4b03      	ldr	r3, [pc, #12]	@ (8042f0c <load_user_password+0x88>)
 8042efe:	2201      	movs	r2, #1
 8042f00:	601a      	str	r2, [r3, #0]
    }
}
 8042f02:	3710      	adds	r7, #16
 8042f04:	46bd      	mov	sp, r7
 8042f06:	bd80      	pop	{r7, pc}
 8042f08:	0806ae18 	.word	0x0806ae18
 8042f0c:	2401df70 	.word	0x2401df70
 8042f10:	2401df5c 	.word	0x2401df5c

08042f14 <verify_user_password>:

static int verify_user_password(const char *input_password){
 8042f14:	b580      	push	{r7, lr}
 8042f16:	b084      	sub	sp, #16
 8042f18:	af00      	add	r7, sp, #0
 8042f1a:	6078      	str	r0, [r7, #4]
	if(FRAM_PASSWORD_FAIL == 1){
 8042f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8042f58 <verify_user_password+0x44>)
 8042f1e:	681b      	ldr	r3, [r3, #0]
 8042f20:	2b01      	cmp	r3, #1
 8042f22:	d10b      	bne.n	8042f3c <verify_user_password+0x28>
	    uint32_t input_hash = fnv1a32(input_password);
 8042f24:	6878      	ldr	r0, [r7, #4]
 8042f26:	f7ff ff53 	bl	8042dd0 <fnv1a32>
 8042f2a:	60f8      	str	r0, [r7, #12]
	    uint32_t stored_hash = itwasmeulrich;
 8042f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8042f5c <verify_user_password+0x48>)
 8042f2e:	60bb      	str	r3, [r7, #8]
	    return hash_equal(input_hash, stored_hash);
 8042f30:	68b9      	ldr	r1, [r7, #8]
 8042f32:	68f8      	ldr	r0, [r7, #12]
 8042f34:	f7ff ff70 	bl	8042e18 <hash_equal>
 8042f38:	4603      	mov	r3, r0
 8042f3a:	e009      	b.n	8042f50 <verify_user_password+0x3c>
	}else{
		if(strcmp(input_password, user_password) == 0){
 8042f3c:	4908      	ldr	r1, [pc, #32]	@ (8042f60 <verify_user_password+0x4c>)
 8042f3e:	6878      	ldr	r0, [r7, #4]
 8042f40:	f7fd f9ce 	bl	80402e0 <strcmp>
 8042f44:	4603      	mov	r3, r0
 8042f46:	2b00      	cmp	r3, #0
 8042f48:	d101      	bne.n	8042f4e <verify_user_password+0x3a>
			return 1;
 8042f4a:	2301      	movs	r3, #1
 8042f4c:	e000      	b.n	8042f50 <verify_user_password+0x3c>
		}else{
			return 0;
 8042f4e:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 8042f50:	4618      	mov	r0, r3
 8042f52:	3710      	adds	r7, #16
 8042f54:	46bd      	mov	sp, r7
 8042f56:	bd80      	pop	{r7, pc}
 8042f58:	2401df70 	.word	0x2401df70
 8042f5c:	c5477ba3 	.word	0xc5477ba3
 8042f60:	2401df5c 	.word	0x2401df5c

08042f64 <Shield_UpdateTimer>:

void Shield_UpdateTimer(ShieldInstance_t *instance){
 8042f64:	b580      	push	{r7, lr}
 8042f66:	b082      	sub	sp, #8
 8042f68:	af00      	add	r7, sp, #0
 8042f6a:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8042f6c:	687b      	ldr	r3, [r7, #4]
 8042f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8042f72:	2b04      	cmp	r3, #4
 8042f74:	d110      	bne.n	8042f98 <Shield_UpdateTimer+0x34>
		instance->last_activity_time++;
 8042f76:	687b      	ldr	r3, [r7, #4]
 8042f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8042f7a:	1c5a      	adds	r2, r3, #1
 8042f7c:	687b      	ldr	r3, [r7, #4]
 8042f7e:	655a      	str	r2, [r3, #84]	@ 0x54
		if(instance->last_activity_time >= USER_TIMEOUT){
 8042f80:	687b      	ldr	r3, [r7, #4]
 8042f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8042f84:	4a06      	ldr	r2, [pc, #24]	@ (8042fa0 <Shield_UpdateTimer+0x3c>)
 8042f86:	4293      	cmp	r3, r2
 8042f88:	d306      	bcc.n	8042f98 <Shield_UpdateTimer+0x34>
			Shield_Reset(instance);
 8042f8a:	6878      	ldr	r0, [r7, #4]
 8042f8c:	f000 f868 	bl	8043060 <Shield_Reset>
		    Shield_WriteString(instance, "\r\nSession timed out due to inactivity.\r\n");
 8042f90:	4904      	ldr	r1, [pc, #16]	@ (8042fa4 <Shield_UpdateTimer+0x40>)
 8042f92:	6878      	ldr	r0, [r7, #4]
 8042f94:	f000 f8b0 	bl	80430f8 <Shield_WriteString>
		}
	}
}
 8042f98:	bf00      	nop
 8042f9a:	3708      	adds	r7, #8
 8042f9c:	46bd      	mov	sp, r7
 8042f9e:	bd80      	pop	{r7, pc}
 8042fa0:	000493e0 	.word	0x000493e0
 8042fa4:	0806ae54 	.word	0x0806ae54

08042fa8 <Shield_ResetTimer>:
void Shield_ResetTimer(ShieldInstance_t *instance){
 8042fa8:	b480      	push	{r7}
 8042faa:	b083      	sub	sp, #12
 8042fac:	af00      	add	r7, sp, #0
 8042fae:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8042fb0:	687b      	ldr	r3, [r7, #4]
 8042fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8042fb6:	2b04      	cmp	r3, #4
 8042fb8:	d102      	bne.n	8042fc0 <Shield_ResetTimer+0x18>
		instance->last_activity_time = 0;
 8042fba:	687b      	ldr	r3, [r7, #4]
 8042fbc:	2200      	movs	r2, #0
 8042fbe:	655a      	str	r2, [r3, #84]	@ 0x54
	}
}
 8042fc0:	bf00      	nop
 8042fc2:	370c      	adds	r7, #12
 8042fc4:	46bd      	mov	sp, r7
 8042fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fca:	4770      	bx	lr

08042fcc <Shield_Init>:

void Shield_Init(ShieldInstance_t *instance, void (*write_char_func)(char c)) {
 8042fcc:	b580      	push	{r7, lr}
 8042fce:	b082      	sub	sp, #8
 8042fd0:	af00      	add	r7, sp, #0
 8042fd2:	6078      	str	r0, [r7, #4]
 8042fd4:	6039      	str	r1, [r7, #0]
    instance->write_char = write_char_func;
 8042fd6:	687b      	ldr	r3, [r7, #4]
 8042fd8:	683a      	ldr	r2, [r7, #0]
 8042fda:	659a      	str	r2, [r3, #88]	@ 0x58
    instance->initreset = 0;
 8042fdc:	687b      	ldr	r3, [r7, #4]
 8042fde:	2200      	movs	r2, #0
 8042fe0:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 8042fe2:	687b      	ldr	r3, [r7, #4]
 8042fe4:	2200      	movs	r2, #0
 8042fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	2200      	movs	r2, #0
 8042fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 8042ff0:	687b      	ldr	r3, [r7, #4]
 8042ff2:	2200      	movs	r2, #0
 8042ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8042ff6:	687b      	ldr	r3, [r7, #4]
 8042ff8:	2200      	movs	r2, #0
 8042ffa:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0; // User should set this with actual time if needed
 8042ffc:	687b      	ldr	r3, [r7, #4]
 8042ffe:	2200      	movs	r2, #0
 8043000:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 8043002:	687b      	ldr	r3, [r7, #4]
 8043004:	2220      	movs	r2, #32
 8043006:	2100      	movs	r1, #0
 8043008:	4618      	mov	r0, r3
 804300a:	f026 fbeb 	bl	80697e4 <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 804300e:	687b      	ldr	r3, [r7, #4]
 8043010:	3330      	adds	r3, #48	@ 0x30
 8043012:	2220      	movs	r2, #32
 8043014:	2100      	movs	r1, #0
 8043016:	4618      	mov	r0, r3
 8043018:	f026 fbe4 	bl	80697e4 <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 804301c:	490b      	ldr	r1, [pc, #44]	@ (804304c <Shield_Init+0x80>)
 804301e:	6878      	ldr	r0, [r7, #4]
 8043020:	f000 f86a 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 8043024:	490a      	ldr	r1, [pc, #40]	@ (8043050 <Shield_Init+0x84>)
 8043026:	6878      	ldr	r0, [r7, #4]
 8043028:	f000 f866 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 804302c:	4909      	ldr	r1, [pc, #36]	@ (8043054 <Shield_Init+0x88>)
 804302e:	6878      	ldr	r0, [r7, #4]
 8043030:	f000 f862 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 8043034:	4908      	ldr	r1, [pc, #32]	@ (8043058 <Shield_Init+0x8c>)
 8043036:	6878      	ldr	r0, [r7, #4]
 8043038:	f000 f85e 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 804303c:	4907      	ldr	r1, [pc, #28]	@ (804305c <Shield_Init+0x90>)
 804303e:	6878      	ldr	r0, [r7, #4]
 8043040:	f000 f85a 	bl	80430f8 <Shield_WriteString>
//    Shield_WriteString(instance, SHIELD_INITATION);
}
 8043044:	bf00      	nop
 8043046:	3708      	adds	r7, #8
 8043048:	46bd      	mov	sp, r7
 804304a:	bd80      	pop	{r7, pc}
 804304c:	0806ae80 	.word	0x0806ae80
 8043050:	0806ae88 	.word	0x0806ae88
 8043054:	0806ae90 	.word	0x0806ae90
 8043058:	0806aea4 	.word	0x0806aea4
 804305c:	0806aeac 	.word	0x0806aeac

08043060 <Shield_Reset>:

void Shield_Reset(ShieldInstance_t *instance) {
 8043060:	b580      	push	{r7, lr}
 8043062:	b082      	sub	sp, #8
 8043064:	af00      	add	r7, sp, #0
 8043066:	6078      	str	r0, [r7, #4]
    instance->initreset = 1;
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	2201      	movs	r2, #1
 804306c:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	2200      	movs	r2, #0
 8043072:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	2200      	movs	r2, #0
 8043078:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 804307c:	687b      	ldr	r3, [r7, #4]
 804307e:	2200      	movs	r2, #0
 8043080:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8043082:	687b      	ldr	r3, [r7, #4]
 8043084:	2200      	movs	r2, #0
 8043086:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0;
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	2200      	movs	r2, #0
 804308c:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 804308e:	687b      	ldr	r3, [r7, #4]
 8043090:	2220      	movs	r2, #32
 8043092:	2100      	movs	r1, #0
 8043094:	4618      	mov	r0, r3
 8043096:	f026 fba5 	bl	80697e4 <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 804309a:	687b      	ldr	r3, [r7, #4]
 804309c:	3330      	adds	r3, #48	@ 0x30
 804309e:	2220      	movs	r2, #32
 80430a0:	2100      	movs	r1, #0
 80430a2:	4618      	mov	r0, r3
 80430a4:	f026 fb9e 	bl	80697e4 <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 80430a8:	490d      	ldr	r1, [pc, #52]	@ (80430e0 <Shield_Reset+0x80>)
 80430aa:	6878      	ldr	r0, [r7, #4]
 80430ac:	f000 f824 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 80430b0:	490c      	ldr	r1, [pc, #48]	@ (80430e4 <Shield_Reset+0x84>)
 80430b2:	6878      	ldr	r0, [r7, #4]
 80430b4:	f000 f820 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 80430b8:	490b      	ldr	r1, [pc, #44]	@ (80430e8 <Shield_Reset+0x88>)
 80430ba:	6878      	ldr	r0, [r7, #4]
 80430bc:	f000 f81c 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 80430c0:	490a      	ldr	r1, [pc, #40]	@ (80430ec <Shield_Reset+0x8c>)
 80430c2:	6878      	ldr	r0, [r7, #4]
 80430c4:	f000 f818 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 80430c8:	4909      	ldr	r1, [pc, #36]	@ (80430f0 <Shield_Reset+0x90>)
 80430ca:	6878      	ldr	r0, [r7, #4]
 80430cc:	f000 f814 	bl	80430f8 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_INITATION);
 80430d0:	4908      	ldr	r1, [pc, #32]	@ (80430f4 <Shield_Reset+0x94>)
 80430d2:	6878      	ldr	r0, [r7, #4]
 80430d4:	f000 f810 	bl	80430f8 <Shield_WriteString>
}
 80430d8:	bf00      	nop
 80430da:	3708      	adds	r7, #8
 80430dc:	46bd      	mov	sp, r7
 80430de:	bd80      	pop	{r7, pc}
 80430e0:	0806ae80 	.word	0x0806ae80
 80430e4:	0806ae88 	.word	0x0806ae88
 80430e8:	0806ae90 	.word	0x0806ae90
 80430ec:	0806aea4 	.word	0x0806aea4
 80430f0:	0806aeac 	.word	0x0806aeac
 80430f4:	0806aeb0 	.word	0x0806aeb0

080430f8 <Shield_WriteString>:

void Shield_WriteString(ShieldInstance_t *instance, const char *str) {
 80430f8:	b580      	push	{r7, lr}
 80430fa:	b082      	sub	sp, #8
 80430fc:	af00      	add	r7, sp, #0
 80430fe:	6078      	str	r0, [r7, #4]
 8043100:	6039      	str	r1, [r7, #0]
    while (*str) {
 8043102:	e007      	b.n	8043114 <Shield_WriteString+0x1c>
        instance->write_char(*str++);
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8043108:	683b      	ldr	r3, [r7, #0]
 804310a:	1c59      	adds	r1, r3, #1
 804310c:	6039      	str	r1, [r7, #0]
 804310e:	781b      	ldrb	r3, [r3, #0]
 8043110:	4618      	mov	r0, r3
 8043112:	4790      	blx	r2
    while (*str) {
 8043114:	683b      	ldr	r3, [r7, #0]
 8043116:	781b      	ldrb	r3, [r3, #0]
 8043118:	2b00      	cmp	r3, #0
 804311a:	d1f3      	bne.n	8043104 <Shield_WriteString+0xc>
    }
}
 804311c:	bf00      	nop
 804311e:	bf00      	nop
 8043120:	3708      	adds	r7, #8
 8043122:	46bd      	mov	sp, r7
 8043124:	bd80      	pop	{r7, pc}
	...

08043128 <Shield_Process>:

static void Shield_Process(ShieldInstance_t *instance) {
 8043128:	b580      	push	{r7, lr}
 804312a:	b082      	sub	sp, #8
 804312c:	af00      	add	r7, sp, #0
 804312e:	6078      	str	r0, [r7, #4]
    if (instance->state == UNAUTHORIZED) {
 8043130:	687b      	ldr	r3, [r7, #4]
 8043132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8043136:	2b00      	cmp	r3, #0
 8043138:	d137      	bne.n	80431aa <Shield_Process+0x82>
        if (strcmp(instance->buffer, "admin") == 0) {
 804313a:	687b      	ldr	r3, [r7, #4]
 804313c:	4924      	ldr	r1, [pc, #144]	@ (80431d0 <Shield_Process+0xa8>)
 804313e:	4618      	mov	r0, r3
 8043140:	f7fd f8ce 	bl	80402e0 <strcmp>
 8043144:	4603      	mov	r3, r0
 8043146:	2b00      	cmp	r3, #0
 8043148:	d10b      	bne.n	8043162 <Shield_Process+0x3a>
            instance->state = LOGIN_ADMIN;
 804314a:	687b      	ldr	r3, [r7, #4]
 804314c:	2201      	movs	r2, #1
 804314e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8043152:	687b      	ldr	r3, [r7, #4]
 8043154:	2200      	movs	r2, #0
 8043156:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8043158:	491e      	ldr	r1, [pc, #120]	@ (80431d4 <Shield_Process+0xac>)
 804315a:	6878      	ldr	r0, [r7, #4]
 804315c:	f7ff ffcc 	bl	80430f8 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
        Shield_WriteString(instance, "HelloWorld\r\n");
    }
}
 8043160:	e031      	b.n	80431c6 <Shield_Process+0x9e>
        } else if (strcmp(instance->buffer, "user") == 0) {
 8043162:	687b      	ldr	r3, [r7, #4]
 8043164:	491c      	ldr	r1, [pc, #112]	@ (80431d8 <Shield_Process+0xb0>)
 8043166:	4618      	mov	r0, r3
 8043168:	f7fd f8ba 	bl	80402e0 <strcmp>
 804316c:	4603      	mov	r3, r0
 804316e:	2b00      	cmp	r3, #0
 8043170:	d10e      	bne.n	8043190 <Shield_Process+0x68>
        	load_user_password(instance);
 8043172:	6878      	ldr	r0, [r7, #4]
 8043174:	f7ff fe86 	bl	8042e84 <load_user_password>
            instance->state = LOGIN_USER;
 8043178:	687b      	ldr	r3, [r7, #4]
 804317a:	2202      	movs	r2, #2
 804317c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8043180:	687b      	ldr	r3, [r7, #4]
 8043182:	2200      	movs	r2, #0
 8043184:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8043186:	4913      	ldr	r1, [pc, #76]	@ (80431d4 <Shield_Process+0xac>)
 8043188:	6878      	ldr	r0, [r7, #4]
 804318a:	f7ff ffb5 	bl	80430f8 <Shield_WriteString>
}
 804318e:	e01a      	b.n	80431c6 <Shield_Process+0x9e>
            Shield_WriteString(instance, "Unsupported this user name. [admin/user]\r\n");
 8043190:	4912      	ldr	r1, [pc, #72]	@ (80431dc <Shield_Process+0xb4>)
 8043192:	6878      	ldr	r0, [r7, #4]
 8043194:	f7ff ffb0 	bl	80430f8 <Shield_WriteString>
            Shield_WriteString(instance, SHIELD_NEWLINE);
 8043198:	4911      	ldr	r1, [pc, #68]	@ (80431e0 <Shield_Process+0xb8>)
 804319a:	6878      	ldr	r0, [r7, #4]
 804319c:	f7ff ffac 	bl	80430f8 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
 80431a0:	4910      	ldr	r1, [pc, #64]	@ (80431e4 <Shield_Process+0xbc>)
 80431a2:	6878      	ldr	r0, [r7, #4]
 80431a4:	f7ff ffa8 	bl	80430f8 <Shield_WriteString>
}
 80431a8:	e00d      	b.n	80431c6 <Shield_Process+0x9e>
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 80431aa:	687b      	ldr	r3, [r7, #4]
 80431ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80431b0:	2b03      	cmp	r3, #3
 80431b2:	d004      	beq.n	80431be <Shield_Process+0x96>
 80431b4:	687b      	ldr	r3, [r7, #4]
 80431b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80431ba:	2b04      	cmp	r3, #4
 80431bc:	d103      	bne.n	80431c6 <Shield_Process+0x9e>
        Shield_WriteString(instance, "HelloWorld\r\n");
 80431be:	490a      	ldr	r1, [pc, #40]	@ (80431e8 <Shield_Process+0xc0>)
 80431c0:	6878      	ldr	r0, [r7, #4]
 80431c2:	f7ff ff99 	bl	80430f8 <Shield_WriteString>
}
 80431c6:	bf00      	nop
 80431c8:	3708      	adds	r7, #8
 80431ca:	46bd      	mov	sp, r7
 80431cc:	bd80      	pop	{r7, pc}
 80431ce:	bf00      	nop
 80431d0:	0806aec8 	.word	0x0806aec8
 80431d4:	0806aed0 	.word	0x0806aed0
 80431d8:	0806aedc 	.word	0x0806aedc
 80431dc:	0806aee4 	.word	0x0806aee4
 80431e0:	0806aeac 	.word	0x0806aeac
 80431e4:	0806aeb0 	.word	0x0806aeb0
 80431e8:	0806af10 	.word	0x0806af10

080431ec <Shield_ReceiveChar>:

void Shield_ReceiveChar(ShieldInstance_t *instance, char ch) {
 80431ec:	b580      	push	{r7, lr}
 80431ee:	b082      	sub	sp, #8
 80431f0:	af00      	add	r7, sp, #0
 80431f2:	6078      	str	r0, [r7, #4]
 80431f4:	460b      	mov	r3, r1
 80431f6:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_SHIELD
    char hex[6];
    snprintf(hex, sizeof(hex), "0x%02X ", ch);
    Shield_WriteString(instance, hex);
#endif
    if (instance->state == LOGIN_ADMIN || instance->state == LOGIN_USER) {
 80431f8:	687b      	ldr	r3, [r7, #4]
 80431fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80431fe:	2b01      	cmp	r3, #1
 8043200:	d005      	beq.n	804320e <Shield_ReceiveChar+0x22>
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8043208:	2b02      	cmp	r3, #2
 804320a:	f040 80ed 	bne.w	80433e8 <Shield_ReceiveChar+0x1fc>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 804320e:	220a      	movs	r2, #10
 8043210:	78fb      	ldrb	r3, [r7, #3]
 8043212:	4293      	cmp	r3, r2
 8043214:	d004      	beq.n	8043220 <Shield_ReceiveChar+0x34>
 8043216:	220d      	movs	r2, #13
 8043218:	78fb      	ldrb	r3, [r7, #3]
 804321a:	4293      	cmp	r3, r2
 804321c:	f040 80b6 	bne.w	804338c <Shield_ReceiveChar+0x1a0>
            instance->password_buffer[instance->password_pos] = '\0';
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043224:	687a      	ldr	r2, [r7, #4]
 8043226:	4413      	add	r3, r2
 8043228:	2200      	movs	r2, #0
 804322a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            if (instance->state == LOGIN_ADMIN && verify_password(instance->password_buffer) == 1) {
 804322e:	687b      	ldr	r3, [r7, #4]
 8043230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8043234:	2b01      	cmp	r3, #1
 8043236:	d138      	bne.n	80432aa <Shield_ReceiveChar+0xbe>
 8043238:	687b      	ldr	r3, [r7, #4]
 804323a:	3330      	adds	r3, #48	@ 0x30
 804323c:	4618      	mov	r0, r3
 804323e:	f7ff fe0b 	bl	8042e58 <verify_password>
 8043242:	4603      	mov	r3, r0
 8043244:	2b01      	cmp	r3, #1
 8043246:	d130      	bne.n	80432aa <Shield_ReceiveChar+0xbe>
                instance->state = AUTH_ADMIN;
 8043248:	687b      	ldr	r3, [r7, #4]
 804324a:	2203      	movs	r2, #3
 804324c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8043250:	499a      	ldr	r1, [pc, #616]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 8043252:	6878      	ldr	r0, [r7, #4]
 8043254:	f7ff ff50 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 8043258:	4999      	ldr	r1, [pc, #612]	@ (80434c0 <Shield_ReceiveChar+0x2d4>)
 804325a:	6878      	ldr	r0, [r7, #4]
 804325c:	f7ff ff4c 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as admin: SLT-OBC v1.2.0");
 8043260:	4998      	ldr	r1, [pc, #608]	@ (80434c4 <Shield_ReceiveChar+0x2d8>)
 8043262:	6878      	ldr	r0, [r7, #4]
 8043264:	f7ff ff48 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8043268:	4994      	ldr	r1, [pc, #592]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 804326a:	6878      	ldr	r0, [r7, #4]
 804326c:	f7ff ff44 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8043270:	4995      	ldr	r1, [pc, #596]	@ (80434c8 <Shield_ReceiveChar+0x2dc>)
 8043272:	6878      	ldr	r0, [r7, #4]
 8043274:	f7ff ff40 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 8043278:	4994      	ldr	r1, [pc, #592]	@ (80434cc <Shield_ReceiveChar+0x2e0>)
 804327a:	6878      	ldr	r0, [r7, #4]
 804327c:	f7ff ff3c 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 8043280:	4993      	ldr	r1, [pc, #588]	@ (80434d0 <Shield_ReceiveChar+0x2e4>)
 8043282:	6878      	ldr	r0, [r7, #4]
 8043284:	f7ff ff38 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8043288:	4992      	ldr	r1, [pc, #584]	@ (80434d4 <Shield_ReceiveChar+0x2e8>)
 804328a:	6878      	ldr	r0, [r7, #4]
 804328c:	f7ff ff34 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 8043290:	4991      	ldr	r1, [pc, #580]	@ (80434d8 <Shield_ReceiveChar+0x2ec>)
 8043292:	6878      	ldr	r0, [r7, #4]
 8043294:	f7ff ff30 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8043298:	498b      	ldr	r1, [pc, #556]	@ (80434c8 <Shield_ReceiveChar+0x2dc>)
 804329a:	6878      	ldr	r0, [r7, #4]
 804329c:	f7ff ff2c 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 80432a0:	4986      	ldr	r1, [pc, #536]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 80432a2:	6878      	ldr	r0, [r7, #4]
 80432a4:	f7ff ff28 	bl	80430f8 <Shield_WriteString>
 80432a8:	e06c      	b.n	8043384 <Shield_ReceiveChar+0x198>
            } else if (instance->state == LOGIN_USER && verify_user_password(instance->password_buffer) == 1) {
 80432aa:	687b      	ldr	r3, [r7, #4]
 80432ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80432b0:	2b02      	cmp	r3, #2
 80432b2:	d138      	bne.n	8043326 <Shield_ReceiveChar+0x13a>
 80432b4:	687b      	ldr	r3, [r7, #4]
 80432b6:	3330      	adds	r3, #48	@ 0x30
 80432b8:	4618      	mov	r0, r3
 80432ba:	f7ff fe2b 	bl	8042f14 <verify_user_password>
 80432be:	4603      	mov	r3, r0
 80432c0:	2b01      	cmp	r3, #1
 80432c2:	d130      	bne.n	8043326 <Shield_ReceiveChar+0x13a>
                instance->state = AUTH_USER;
 80432c4:	687b      	ldr	r3, [r7, #4]
 80432c6:	2204      	movs	r2, #4
 80432c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 80432cc:	497b      	ldr	r1, [pc, #492]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 80432ce:	6878      	ldr	r0, [r7, #4]
 80432d0:	f7ff ff12 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 80432d4:	497a      	ldr	r1, [pc, #488]	@ (80434c0 <Shield_ReceiveChar+0x2d4>)
 80432d6:	6878      	ldr	r0, [r7, #4]
 80432d8:	f7ff ff0e 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as user: SLT-OBC v1.2.0");
 80432dc:	497f      	ldr	r1, [pc, #508]	@ (80434dc <Shield_ReceiveChar+0x2f0>)
 80432de:	6878      	ldr	r0, [r7, #4]
 80432e0:	f7ff ff0a 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 80432e4:	4975      	ldr	r1, [pc, #468]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 80432e6:	6878      	ldr	r0, [r7, #4]
 80432e8:	f7ff ff06 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 80432ec:	4976      	ldr	r1, [pc, #472]	@ (80434c8 <Shield_ReceiveChar+0x2dc>)
 80432ee:	6878      	ldr	r0, [r7, #4]
 80432f0:	f7ff ff02 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 80432f4:	4975      	ldr	r1, [pc, #468]	@ (80434cc <Shield_ReceiveChar+0x2e0>)
 80432f6:	6878      	ldr	r0, [r7, #4]
 80432f8:	f7ff fefe 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 80432fc:	4974      	ldr	r1, [pc, #464]	@ (80434d0 <Shield_ReceiveChar+0x2e4>)
 80432fe:	6878      	ldr	r0, [r7, #4]
 8043300:	f7ff fefa 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8043304:	4973      	ldr	r1, [pc, #460]	@ (80434d4 <Shield_ReceiveChar+0x2e8>)
 8043306:	6878      	ldr	r0, [r7, #4]
 8043308:	f7ff fef6 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 804330c:	4972      	ldr	r1, [pc, #456]	@ (80434d8 <Shield_ReceiveChar+0x2ec>)
 804330e:	6878      	ldr	r0, [r7, #4]
 8043310:	f7ff fef2 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8043314:	496c      	ldr	r1, [pc, #432]	@ (80434c8 <Shield_ReceiveChar+0x2dc>)
 8043316:	6878      	ldr	r0, [r7, #4]
 8043318:	f7ff feee 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 804331c:	4967      	ldr	r1, [pc, #412]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 804331e:	6878      	ldr	r0, [r7, #4]
 8043320:	f7ff feea 	bl	80430f8 <Shield_WriteString>
 8043324:	e02e      	b.n	8043384 <Shield_ReceiveChar+0x198>
            } else {
                instance->login_attempts++;
 8043326:	687b      	ldr	r3, [r7, #4]
 8043328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804332a:	1c5a      	adds	r2, r3, #1
 804332c:	687b      	ldr	r3, [r7, #4]
 804332e:	62da      	str	r2, [r3, #44]	@ 0x2c
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8043330:	4962      	ldr	r1, [pc, #392]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 8043332:	6878      	ldr	r0, [r7, #4]
 8043334:	f7ff fee0 	bl	80430f8 <Shield_WriteString>
                if (instance->login_attempts >= MAX_LOGIN_ATTEMPTS) {
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804333c:	2203      	movs	r2, #3
 804333e:	4293      	cmp	r3, r2
 8043340:	db14      	blt.n	804336c <Shield_ReceiveChar+0x180>
                    instance->state = UNAUTHORIZED;
 8043342:	687b      	ldr	r3, [r7, #4]
 8043344:	2200      	movs	r2, #0
 8043346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                    Shield_WriteString(instance, "Too many failed attempts. Please try again.");
 804334a:	4965      	ldr	r1, [pc, #404]	@ (80434e0 <Shield_ReceiveChar+0x2f4>)
 804334c:	6878      	ldr	r0, [r7, #4]
 804334e:	f7ff fed3 	bl	80430f8 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8043352:	495a      	ldr	r1, [pc, #360]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 8043354:	6878      	ldr	r0, [r7, #4]
 8043356:	f7ff fecf 	bl	80430f8 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 804335a:	4958      	ldr	r1, [pc, #352]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 804335c:	6878      	ldr	r0, [r7, #4]
 804335e:	f7ff fecb 	bl	80430f8 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_INITATION);
 8043362:	4960      	ldr	r1, [pc, #384]	@ (80434e4 <Shield_ReceiveChar+0x2f8>)
 8043364:	6878      	ldr	r0, [r7, #4]
 8043366:	f7ff fec7 	bl	80430f8 <Shield_WriteString>
 804336a:	e00b      	b.n	8043384 <Shield_ReceiveChar+0x198>
                } else {
                    Shield_WriteString(instance, "Incorrect password. Please try again.");
 804336c:	495e      	ldr	r1, [pc, #376]	@ (80434e8 <Shield_ReceiveChar+0x2fc>)
 804336e:	6878      	ldr	r0, [r7, #4]
 8043370:	f7ff fec2 	bl	80430f8 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8043374:	4951      	ldr	r1, [pc, #324]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 8043376:	6878      	ldr	r0, [r7, #4]
 8043378:	f7ff febe 	bl	80430f8 <Shield_WriteString>
                    Shield_WriteString(instance, "Password: ");
 804337c:	495b      	ldr	r1, [pc, #364]	@ (80434ec <Shield_ReceiveChar+0x300>)
 804337e:	6878      	ldr	r0, [r7, #4]
 8043380:	f7ff feba 	bl	80430f8 <Shield_WriteString>
                }
            }
            instance->password_pos = 0;
 8043384:	687b      	ldr	r3, [r7, #4]
 8043386:	2200      	movs	r2, #0
 8043388:	651a      	str	r2, [r3, #80]	@ 0x50
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 804338a:	e092      	b.n	80434b2 <Shield_ReceiveChar+0x2c6>
        } else if (ch == BACKSPACE) {
 804338c:	227f      	movs	r2, #127	@ 0x7f
 804338e:	78fb      	ldrb	r3, [r7, #3]
 8043390:	4293      	cmp	r3, r2
 8043392:	d116      	bne.n	80433c2 <Shield_ReceiveChar+0x1d6>
            if (instance->password_pos > 0) {
 8043394:	687b      	ldr	r3, [r7, #4]
 8043396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043398:	2b00      	cmp	r3, #0
 804339a:	f340 808a 	ble.w	80434b2 <Shield_ReceiveChar+0x2c6>
                instance->password_pos--;
 804339e:	687b      	ldr	r3, [r7, #4]
 80433a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80433a2:	1e5a      	subs	r2, r3, #1
 80433a4:	687b      	ldr	r3, [r7, #4]
 80433a6:	651a      	str	r2, [r3, #80]	@ 0x50
                instance->write_char('\b');
 80433a8:	687b      	ldr	r3, [r7, #4]
 80433aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80433ac:	2008      	movs	r0, #8
 80433ae:	4798      	blx	r3
                instance->write_char(' ');
 80433b0:	687b      	ldr	r3, [r7, #4]
 80433b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80433b4:	2020      	movs	r0, #32
 80433b6:	4798      	blx	r3
                instance->write_char('\b');
 80433b8:	687b      	ldr	r3, [r7, #4]
 80433ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80433bc:	2008      	movs	r0, #8
 80433be:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 80433c0:	e077      	b.n	80434b2 <Shield_ReceiveChar+0x2c6>
            }
        } else if (instance->password_pos < SHIELD_BUFFER_SIZE - 1) {
 80433c2:	687b      	ldr	r3, [r7, #4]
 80433c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80433c6:	2b1e      	cmp	r3, #30
 80433c8:	dc73      	bgt.n	80434b2 <Shield_ReceiveChar+0x2c6>
            instance->password_buffer[instance->password_pos++] = ch;
 80433ca:	687b      	ldr	r3, [r7, #4]
 80433cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80433ce:	1c59      	adds	r1, r3, #1
 80433d0:	687a      	ldr	r2, [r7, #4]
 80433d2:	6511      	str	r1, [r2, #80]	@ 0x50
 80433d4:	687a      	ldr	r2, [r7, #4]
 80433d6:	4413      	add	r3, r2
 80433d8:	78fa      	ldrb	r2, [r7, #3]
 80433da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            instance->write_char('*'); // Mask password with *
 80433de:	687b      	ldr	r3, [r7, #4]
 80433e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80433e2:	202a      	movs	r0, #42	@ 0x2a
 80433e4:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 80433e6:	e064      	b.n	80434b2 <Shield_ReceiveChar+0x2c6>
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 80433e8:	687b      	ldr	r3, [r7, #4]
 80433ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80433ee:	2b03      	cmp	r3, #3
 80433f0:	d004      	beq.n	80433fc <Shield_ReceiveChar+0x210>
 80433f2:	687b      	ldr	r3, [r7, #4]
 80433f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80433f8:	2b04      	cmp	r3, #4
 80433fa:	d104      	bne.n	8043406 <Shield_ReceiveChar+0x21a>
        Shield_WriteString(instance, "Hello123\r\n"); // Placeholder for command processing
 80433fc:	493c      	ldr	r1, [pc, #240]	@ (80434f0 <Shield_ReceiveChar+0x304>)
 80433fe:	6878      	ldr	r0, [r7, #4]
 8043400:	f7ff fe7a 	bl	80430f8 <Shield_WriteString>
 8043404:	e056      	b.n	80434b4 <Shield_ReceiveChar+0x2c8>
    } else {
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8043406:	220a      	movs	r2, #10
 8043408:	78fb      	ldrb	r3, [r7, #3]
 804340a:	4293      	cmp	r3, r2
 804340c:	d003      	beq.n	8043416 <Shield_ReceiveChar+0x22a>
 804340e:	220d      	movs	r2, #13
 8043410:	78fb      	ldrb	r3, [r7, #3]
 8043412:	4293      	cmp	r3, r2
 8043414:	d11c      	bne.n	8043450 <Shield_ReceiveChar+0x264>
            instance->buffer[instance->pos] = '\0';
 8043416:	687b      	ldr	r3, [r7, #4]
 8043418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804341a:	687a      	ldr	r2, [r7, #4]
 804341c:	2100      	movs	r1, #0
 804341e:	54d1      	strb	r1, [r2, r3]
            if (instance->pos > 0) {
 8043420:	687b      	ldr	r3, [r7, #4]
 8043422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043424:	2b00      	cmp	r3, #0
 8043426:	dd0a      	ble.n	804343e <Shield_ReceiveChar+0x252>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8043428:	4924      	ldr	r1, [pc, #144]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 804342a:	6878      	ldr	r0, [r7, #4]
 804342c:	f7ff fe64 	bl	80430f8 <Shield_WriteString>
                Shield_Process(instance);
 8043430:	6878      	ldr	r0, [r7, #4]
 8043432:	f7ff fe79 	bl	8043128 <Shield_Process>
                instance->pos = 0;
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	2200      	movs	r2, #0
 804343a:	625a      	str	r2, [r3, #36]	@ 0x24
            if (instance->pos > 0) {
 804343c:	e03a      	b.n	80434b4 <Shield_ReceiveChar+0x2c8>
            } else {
                Shield_WriteString(instance, SHIELD_NEWLINE);
 804343e:	491f      	ldr	r1, [pc, #124]	@ (80434bc <Shield_ReceiveChar+0x2d0>)
 8043440:	6878      	ldr	r0, [r7, #4]
 8043442:	f7ff fe59 	bl	80430f8 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_INITATION);
 8043446:	4927      	ldr	r1, [pc, #156]	@ (80434e4 <Shield_ReceiveChar+0x2f8>)
 8043448:	6878      	ldr	r0, [r7, #4]
 804344a:	f7ff fe55 	bl	80430f8 <Shield_WriteString>
            if (instance->pos > 0) {
 804344e:	e031      	b.n	80434b4 <Shield_ReceiveChar+0x2c8>
            }
        } else if (ch == BACKSPACE) {
 8043450:	227f      	movs	r2, #127	@ 0x7f
 8043452:	78fb      	ldrb	r3, [r7, #3]
 8043454:	4293      	cmp	r3, r2
 8043456:	d11a      	bne.n	804348e <Shield_ReceiveChar+0x2a2>
            if (instance->pos > 0) {
 8043458:	687b      	ldr	r3, [r7, #4]
 804345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804345c:	2b00      	cmp	r3, #0
 804345e:	dd29      	ble.n	80434b4 <Shield_ReceiveChar+0x2c8>
                instance->pos--;
 8043460:	687b      	ldr	r3, [r7, #4]
 8043462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043464:	1e5a      	subs	r2, r3, #1
 8043466:	687b      	ldr	r3, [r7, #4]
 8043468:	625a      	str	r2, [r3, #36]	@ 0x24
                instance->buffer[instance->pos] = '\0';
 804346a:	687b      	ldr	r3, [r7, #4]
 804346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804346e:	687a      	ldr	r2, [r7, #4]
 8043470:	2100      	movs	r1, #0
 8043472:	54d1      	strb	r1, [r2, r3]
                instance->write_char('\b');
 8043474:	687b      	ldr	r3, [r7, #4]
 8043476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043478:	2008      	movs	r0, #8
 804347a:	4798      	blx	r3
                instance->write_char(' ');
 804347c:	687b      	ldr	r3, [r7, #4]
 804347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043480:	2020      	movs	r0, #32
 8043482:	4798      	blx	r3
                instance->write_char('\b');
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043488:	2008      	movs	r0, #8
 804348a:	4798      	blx	r3
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
            instance->buffer[instance->pos++] = ch;
            instance->write_char(ch);
        }
    }
}
 804348c:	e012      	b.n	80434b4 <Shield_ReceiveChar+0x2c8>
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
 804348e:	687b      	ldr	r3, [r7, #4]
 8043490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043492:	2b1e      	cmp	r3, #30
 8043494:	dc0e      	bgt.n	80434b4 <Shield_ReceiveChar+0x2c8>
            instance->buffer[instance->pos++] = ch;
 8043496:	687b      	ldr	r3, [r7, #4]
 8043498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804349a:	1c59      	adds	r1, r3, #1
 804349c:	687a      	ldr	r2, [r7, #4]
 804349e:	6251      	str	r1, [r2, #36]	@ 0x24
 80434a0:	687a      	ldr	r2, [r7, #4]
 80434a2:	78f9      	ldrb	r1, [r7, #3]
 80434a4:	54d1      	strb	r1, [r2, r3]
            instance->write_char(ch);
 80434a6:	687b      	ldr	r3, [r7, #4]
 80434a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80434aa:	78fa      	ldrb	r2, [r7, #3]
 80434ac:	4610      	mov	r0, r2
 80434ae:	4798      	blx	r3
}
 80434b0:	e000      	b.n	80434b4 <Shield_ReceiveChar+0x2c8>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 80434b2:	bf00      	nop
}
 80434b4:	bf00      	nop
 80434b6:	3708      	adds	r7, #8
 80434b8:	46bd      	mov	sp, r7
 80434ba:	bd80      	pop	{r7, pc}
 80434bc:	0806aeac 	.word	0x0806aeac
 80434c0:	0806af20 	.word	0x0806af20
 80434c4:	0806af8c 	.word	0x0806af8c
 80434c8:	0806afb0 	.word	0x0806afb0
 80434cc:	0806afd8 	.word	0x0806afd8
 80434d0:	0806b000 	.word	0x0806b000
 80434d4:	0806b028 	.word	0x0806b028
 80434d8:	0806b050 	.word	0x0806b050
 80434dc:	0806b078 	.word	0x0806b078
 80434e0:	0806b09c 	.word	0x0806b09c
 80434e4:	0806aeb0 	.word	0x0806aeb0
 80434e8:	0806b0c8 	.word	0x0806b0c8
 80434ec:	0806aed0 	.word	0x0806aed0
 80434f0:	0806b0f0 	.word	0x0806b0f0

080434f4 <Shield_GetState>:

ShieldAuthState_t Shield_GetState(ShieldInstance_t *instance) {
 80434f4:	b480      	push	{r7}
 80434f6:	b083      	sub	sp, #12
 80434f8:	af00      	add	r7, sp, #0
 80434fa:	6078      	str	r0, [r7, #4]
    return instance->state;
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8043502:	4618      	mov	r0, r3
 8043504:	370c      	adds	r7, #12
 8043506:	46bd      	mov	sp, r7
 8043508:	f85d 7b04 	ldr.w	r7, [sp], #4
 804350c:	4770      	bx	lr
	...

08043510 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8043510:	b480      	push	{r7}
 8043512:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8043514:	f3bf 8f4f 	dsb	sy
}
 8043518:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804351a:	4b06      	ldr	r3, [pc, #24]	@ (8043534 <__NVIC_SystemReset+0x24>)
 804351c:	68db      	ldr	r3, [r3, #12]
 804351e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043522:	4904      	ldr	r1, [pc, #16]	@ (8043534 <__NVIC_SystemReset+0x24>)
 8043524:	4b04      	ldr	r3, [pc, #16]	@ (8043538 <__NVIC_SystemReset+0x28>)
 8043526:	4313      	orrs	r3, r2
 8043528:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 804352a:	f3bf 8f4f 	dsb	sy
}
 804352e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8043530:	bf00      	nop
 8043532:	e7fd      	b.n	8043530 <__NVIC_SystemReset+0x20>
 8043534:	e000ed00 	.word	0xe000ed00
 8043538:	05fa0004 	.word	0x05fa0004

0804353c <LL_GPIO_SetOutputPin>:
{
 804353c:	b480      	push	{r7}
 804353e:	b083      	sub	sp, #12
 8043540:	af00      	add	r7, sp, #0
 8043542:	6078      	str	r0, [r7, #4]
 8043544:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8043546:	687b      	ldr	r3, [r7, #4]
 8043548:	683a      	ldr	r2, [r7, #0]
 804354a:	619a      	str	r2, [r3, #24]
}
 804354c:	bf00      	nop
 804354e:	370c      	adds	r7, #12
 8043550:	46bd      	mov	sp, r7
 8043552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043556:	4770      	bx	lr

08043558 <LL_GPIO_ResetOutputPin>:
{
 8043558:	b480      	push	{r7}
 804355a:	b083      	sub	sp, #12
 804355c:	af00      	add	r7, sp, #0
 804355e:	6078      	str	r0, [r7, #4]
 8043560:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8043562:	683b      	ldr	r3, [r7, #0]
 8043564:	041a      	lsls	r2, r3, #16
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	619a      	str	r2, [r3, #24]
}
 804356a:	bf00      	nop
 804356c:	370c      	adds	r7, #12
 804356e:	46bd      	mov	sp, r7
 8043570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043574:	4770      	bx	lr

08043576 <UpdateCRC16_XMODEM>:
extern uint32_t _ecustom_data;
#define RAM_D2_200KB_START ((uint8_t*)&_scustom_data)
#define RAM_D3_START ((uint8_t*)0x38000000)
#define RAM_D2_200KB_SIZE  (200 * 1024)  // 200KB

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8043576:	b480      	push	{r7}
 8043578:	b085      	sub	sp, #20
 804357a:	af00      	add	r7, sp, #0
 804357c:	4603      	mov	r3, r0
 804357e:	460a      	mov	r2, r1
 8043580:	80fb      	strh	r3, [r7, #6]
 8043582:	4613      	mov	r3, r2
 8043584:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 8043586:	f241 0321 	movw	r3, #4129	@ 0x1021
 804358a:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 804358c:	797b      	ldrb	r3, [r7, #5]
 804358e:	b21b      	sxth	r3, r3
 8043590:	021b      	lsls	r3, r3, #8
 8043592:	b21a      	sxth	r2, r3
 8043594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8043598:	4053      	eors	r3, r2
 804359a:	b21b      	sxth	r3, r3
 804359c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 804359e:	2300      	movs	r3, #0
 80435a0:	73fb      	strb	r3, [r7, #15]
 80435a2:	e013      	b.n	80435cc <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 80435a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80435a8:	2b00      	cmp	r3, #0
 80435aa:	da09      	bge.n	80435c0 <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 80435ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80435b0:	005b      	lsls	r3, r3, #1
 80435b2:	b21a      	sxth	r2, r3
 80435b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80435b8:	4053      	eors	r3, r2
 80435ba:	b21b      	sxth	r3, r3
 80435bc:	80fb      	strh	r3, [r7, #6]
 80435be:	e002      	b.n	80435c6 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 80435c0:	88fb      	ldrh	r3, [r7, #6]
 80435c2:	005b      	lsls	r3, r3, #1
 80435c4:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80435c6:	7bfb      	ldrb	r3, [r7, #15]
 80435c8:	3301      	adds	r3, #1
 80435ca:	73fb      	strb	r3, [r7, #15]
 80435cc:	7bfb      	ldrb	r3, [r7, #15]
 80435ce:	2b07      	cmp	r3, #7
 80435d0:	d9e8      	bls.n	80435a4 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 80435d2:	88fb      	ldrh	r3, [r7, #6]
}
 80435d4:	4618      	mov	r0, r3
 80435d6:	3714      	adds	r7, #20
 80435d8:	46bd      	mov	sp, r7
 80435da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435de:	4770      	bx	lr

080435e0 <CMD_RamFill>:


static void CMD_RamFill(EmbeddedCli *cli, char *args, void *context) {
 80435e0:	b580      	push	{r7, lr}
 80435e2:	b0a8      	sub	sp, #160	@ 0xa0
 80435e4:	af02      	add	r7, sp, #8
 80435e6:	60f8      	str	r0, [r7, #12]
 80435e8:	60b9      	str	r1, [r7, #8]
 80435ea:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // option (1, 2, 3)
 80435ec:	2101      	movs	r1, #1
 80435ee:	68b8      	ldr	r0, [r7, #8]
 80435f0:	f002 fe28 	bl	8046244 <embeddedCliGetToken>
 80435f4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // size (byte)
 80435f8:	2102      	movs	r1, #2
 80435fa:	68b8      	ldr	r0, [r7, #8]
 80435fc:	f002 fe22 	bl	8046244 <embeddedCliGetToken>
 8043600:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char buffer[100];
    uint16_t crc = 0x0000;
 8043604:	2300      	movs	r3, #0
 8043606:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (arg1 == NULL || arg2 == NULL) {
 804360a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 804360e:	2b00      	cmp	r3, #0
 8043610:	d003      	beq.n	804361a <CMD_RamFill+0x3a>
 8043612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043616:	2b00      	cmp	r3, #0
 8043618:	d104      	bne.n	8043624 <CMD_RamFill+0x44>
        embeddedCliPrint(cli, "Usage: ram_fill <1|2|3> <size> (1: 0-255, 2: ASCII, 3: random, size: 1-200KB)");
 804361a:	49a0      	ldr	r1, [pc, #640]	@ (804389c <CMD_RamFill+0x2bc>)
 804361c:	68f8      	ldr	r0, [r7, #12]
 804361e:	f002 fd4f 	bl	80460c0 <embeddedCliPrint>
        return;
 8043622:	e138      	b.n	8043896 <CMD_RamFill+0x2b6>
    }

    int option = atoi(arg1);
 8043624:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8043628:	f025 fdc8 	bl	80691bc <atoi>
 804362c:	67f8      	str	r0, [r7, #124]	@ 0x7c
    uint32_t size = (uint32_t)strtoul(arg2, NULL, 0);
 804362e:	2200      	movs	r2, #0
 8043630:	2100      	movs	r1, #0
 8043632:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8043636:	f025 fef5 	bl	8069424 <strtoul>
 804363a:	67b8      	str	r0, [r7, #120]	@ 0x78

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 804363c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 804363e:	2b00      	cmp	r3, #0
 8043640:	d003      	beq.n	804364a <CMD_RamFill+0x6a>
 8043642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8043644:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8043648:	d90e      	bls.n	8043668 <CMD_RamFill+0x88>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 804364a:	f107 0010 	add.w	r0, r7, #16
 804364e:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8043652:	4a93      	ldr	r2, [pc, #588]	@ (80438a0 <CMD_RamFill+0x2c0>)
 8043654:	2164      	movs	r1, #100	@ 0x64
 8043656:	f025 ffc3 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 804365a:	f107 0310 	add.w	r3, r7, #16
 804365e:	4619      	mov	r1, r3
 8043660:	68f8      	ldr	r0, [r7, #12]
 8043662:	f002 fd2d 	bl	80460c0 <embeddedCliPrint>
        return;
 8043666:	e116      	b.n	8043896 <CMD_RamFill+0x2b6>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 8043668:	f7fd f9fe 	bl	8040a68 <toCM4_GetState>
 804366c:	4603      	mov	r3, r0
 804366e:	2b03      	cmp	r3, #3
 8043670:	d01b      	beq.n	80436aa <CMD_RamFill+0xca>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
                 toCM4_GetState() == TOCM4_BUSY ? "BUSY" :
 8043672:	f7fd f9f9 	bl	8040a68 <toCM4_GetState>
 8043676:	4603      	mov	r3, r0
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 8043678:	2b02      	cmp	r3, #2
 804367a:	d008      	beq.n	804368e <CMD_RamFill+0xae>
                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
 804367c:	f7fd f9f4 	bl	8040a68 <toCM4_GetState>
 8043680:	4603      	mov	r3, r0
 8043682:	2b01      	cmp	r3, #1
 8043684:	d101      	bne.n	804368a <CMD_RamFill+0xaa>
 8043686:	4b87      	ldr	r3, [pc, #540]	@ (80438a4 <CMD_RamFill+0x2c4>)
 8043688:	e002      	b.n	8043690 <CMD_RamFill+0xb0>
 804368a:	4b87      	ldr	r3, [pc, #540]	@ (80438a8 <CMD_RamFill+0x2c8>)
 804368c:	e000      	b.n	8043690 <CMD_RamFill+0xb0>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 804368e:	4b87      	ldr	r3, [pc, #540]	@ (80438ac <CMD_RamFill+0x2cc>)
 8043690:	f107 0010 	add.w	r0, r7, #16
 8043694:	4a86      	ldr	r2, [pc, #536]	@ (80438b0 <CMD_RamFill+0x2d0>)
 8043696:	2164      	movs	r1, #100	@ 0x64
 8043698:	f025 ffa2 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 804369c:	f107 0310 	add.w	r3, r7, #16
 80436a0:	4619      	mov	r1, r3
 80436a2:	68f8      	ldr	r0, [r7, #12]
 80436a4:	f002 fd0c 	bl	80460c0 <embeddedCliPrint>
        return;
 80436a8:	e0f5      	b.n	8043896 <CMD_RamFill+0x2b6>
    }

    toCM4_SetState(TOCM4_BUSY);
 80436aa:	2002      	movs	r0, #2
 80436ac:	f7fd f9c0 	bl	8040a30 <toCM4_SetState>

    switch (option) {
 80436b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80436b2:	2b03      	cmp	r3, #3
 80436b4:	d06d      	beq.n	8043792 <CMD_RamFill+0x1b2>
 80436b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80436b8:	2b03      	cmp	r3, #3
 80436ba:	f300 809c 	bgt.w	80437f6 <CMD_RamFill+0x216>
 80436be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80436c0:	2b01      	cmp	r3, #1
 80436c2:	d003      	beq.n	80436cc <CMD_RamFill+0xec>
 80436c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80436c6:	2b02      	cmp	r3, #2
 80436c8:	d02c      	beq.n	8043724 <CMD_RamFill+0x144>
 80436ca:	e094      	b.n	80437f6 <CMD_RamFill+0x216>
        case 1:  // 0-255
            for (uint32_t i = 0; i < size; i++) {
 80436cc:	2300      	movs	r3, #0
 80436ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80436d2:	e01a      	b.n	804370a <CMD_RamFill+0x12a>
                uint8_t value = (uint8_t)(i % 256);
 80436d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80436d8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
                RAM_D2_200KB_START[i] = value;
 80436dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80436e0:	4a74      	ldr	r2, [pc, #464]	@ (80438b4 <CMD_RamFill+0x2d4>)
 80436e2:	4413      	add	r3, r2
 80436e4:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80436e8:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 80436ea:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80436ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80436f2:	4611      	mov	r1, r2
 80436f4:	4618      	mov	r0, r3
 80436f6:	f7ff ff3e 	bl	8043576 <UpdateCRC16_XMODEM>
 80436fa:	4603      	mov	r3, r0
 80436fc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 8043700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043704:	3301      	adds	r3, #1
 8043706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 804370a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 804370e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8043710:	429a      	cmp	r2, r3
 8043712:	d3df      	bcc.n	80436d4 <CMD_RamFill+0xf4>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with pattern 0-255 repeating", (unsigned long)size);
 8043714:	f107 0010 	add.w	r0, r7, #16
 8043718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 804371a:	4a67      	ldr	r2, [pc, #412]	@ (80438b8 <CMD_RamFill+0x2d8>)
 804371c:	2164      	movs	r1, #100	@ 0x64
 804371e:	f025 ff5f 	bl	80695e0 <sniprintf>
            break;
 8043722:	e070      	b.n	8043806 <CMD_RamFill+0x226>

        case 2:  // ASCII 0x20-0x7F
            for (uint32_t i = 0; i < size; i++) {
 8043724:	2300      	movs	r3, #0
 8043726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 804372a:	e025      	b.n	8043778 <CMD_RamFill+0x198>
                uint8_t value = (uint8_t)(0x20 + (i % (0x7F - 0x20 + 1)));
 804372c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8043730:	4b62      	ldr	r3, [pc, #392]	@ (80438bc <CMD_RamFill+0x2dc>)
 8043732:	fba3 2301 	umull	r2, r3, r3, r1
 8043736:	099a      	lsrs	r2, r3, #6
 8043738:	4613      	mov	r3, r2
 804373a:	005b      	lsls	r3, r3, #1
 804373c:	4413      	add	r3, r2
 804373e:	015b      	lsls	r3, r3, #5
 8043740:	1aca      	subs	r2, r1, r3
 8043742:	b2d3      	uxtb	r3, r2
 8043744:	3320      	adds	r3, #32
 8043746:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
                RAM_D2_200KB_START[i] = value;
 804374a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 804374e:	4a59      	ldr	r2, [pc, #356]	@ (80438b4 <CMD_RamFill+0x2d4>)
 8043750:	4413      	add	r3, r2
 8043752:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8043756:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 8043758:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 804375c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8043760:	4611      	mov	r1, r2
 8043762:	4618      	mov	r0, r3
 8043764:	f7ff ff07 	bl	8043576 <UpdateCRC16_XMODEM>
 8043768:	4603      	mov	r3, r0
 804376a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 804376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8043772:	3301      	adds	r3, #1
 8043774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8043778:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 804377c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 804377e:	429a      	cmp	r2, r3
 8043780:	d3d4      	bcc.n	804372c <CMD_RamFill+0x14c>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with ASCII pattern (0x20-0x7F)", (unsigned long)size);
 8043782:	f107 0010 	add.w	r0, r7, #16
 8043786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8043788:	4a4d      	ldr	r2, [pc, #308]	@ (80438c0 <CMD_RamFill+0x2e0>)
 804378a:	2164      	movs	r1, #100	@ 0x64
 804378c:	f025 ff28 	bl	80695e0 <sniprintf>
            break;
 8043790:	e039      	b.n	8043806 <CMD_RamFill+0x226>

        case 3:  // Random
            for (uint32_t i = 0; i < size; i++) {
 8043792:	2300      	movs	r3, #0
 8043794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043798:	e020      	b.n	80437dc <CMD_RamFill+0x1fc>
                uint8_t value = (uint8_t)(rand() % 256);
 804379a:	f025 fd13 	bl	80691c4 <rand>
 804379e:	4603      	mov	r3, r0
 80437a0:	425a      	negs	r2, r3
 80437a2:	b2db      	uxtb	r3, r3
 80437a4:	b2d2      	uxtb	r2, r2
 80437a6:	bf58      	it	pl
 80437a8:	4253      	negpl	r3, r2
 80437aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                RAM_D2_200KB_START[i] = value;
 80437ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80437b2:	4a40      	ldr	r2, [pc, #256]	@ (80438b4 <CMD_RamFill+0x2d4>)
 80437b4:	4413      	add	r3, r2
 80437b6:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80437ba:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 80437bc:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80437c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80437c4:	4611      	mov	r1, r2
 80437c6:	4618      	mov	r0, r3
 80437c8:	f7ff fed5 	bl	8043576 <UpdateCRC16_XMODEM>
 80437cc:	4603      	mov	r3, r0
 80437ce:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 80437d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80437d6:	3301      	adds	r3, #1
 80437d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80437dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80437e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80437e2:	429a      	cmp	r2, r3
 80437e4:	d3d9      	bcc.n	804379a <CMD_RamFill+0x1ba>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with random bytes", (unsigned long)size);
 80437e6:	f107 0010 	add.w	r0, r7, #16
 80437ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80437ec:	4a35      	ldr	r2, [pc, #212]	@ (80438c4 <CMD_RamFill+0x2e4>)
 80437ee:	2164      	movs	r1, #100	@ 0x64
 80437f0:	f025 fef6 	bl	80695e0 <sniprintf>
            break;
 80437f4:	e007      	b.n	8043806 <CMD_RamFill+0x226>

        default:
            embeddedCliPrint(cli, "Invalid option. Use: ram_fill <1|2|3> <size>");
 80437f6:	4934      	ldr	r1, [pc, #208]	@ (80438c8 <CMD_RamFill+0x2e8>)
 80437f8:	68f8      	ldr	r0, [r7, #12]
 80437fa:	f002 fc61 	bl	80460c0 <embeddedCliPrint>
            toCM4_SetState(TOCM4_IDLE);
 80437fe:	2003      	movs	r0, #3
 8043800:	f7fd f916 	bl	8040a30 <toCM4_SetState>
            return;
 8043804:	e047      	b.n	8043896 <CMD_RamFill+0x2b6>
    }

    vTaskDelay(pdMS_TO_TICKS(1000));
 8043806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 804380a:	f012 ff2b 	bl	8056664 <vTaskDelay>

    toCM4_SetState(TOCM4_READYSEND);
 804380e:	2001      	movs	r0, #1
 8043810:	f7fd f90e 	bl	8040a30 <toCM4_SetState>

    embeddedCliPrint(cli, buffer);
 8043814:	f107 0310 	add.w	r3, r7, #16
 8043818:	4619      	mov	r1, r3
 804381a:	68f8      	ldr	r0, [r7, #12]
 804381c:	f002 fc50 	bl	80460c0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 8043820:	4a24      	ldr	r2, [pc, #144]	@ (80438b4 <CMD_RamFill+0x2d4>)
             (uint32_t)RAM_D2_200KB_START, RAM_D2_200KB_START[0]);
 8043822:	4b24      	ldr	r3, [pc, #144]	@ (80438b4 <CMD_RamFill+0x2d4>)
 8043824:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 8043826:	f107 0010 	add.w	r0, r7, #16
 804382a:	9300      	str	r3, [sp, #0]
 804382c:	4613      	mov	r3, r2
 804382e:	4a27      	ldr	r2, [pc, #156]	@ (80438cc <CMD_RamFill+0x2ec>)
 8043830:	2164      	movs	r1, #100	@ 0x64
 8043832:	f025 fed5 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8043836:	f107 0310 	add.w	r3, r7, #16
 804383a:	4619      	mov	r1, r3
 804383c:	68f8      	ldr	r0, [r7, #12]
 804383e:	f002 fc3f 	bl	80460c0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
             (uint32_t)(RAM_D2_200KB_START + size - 1),
 8043842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8043844:	3b01      	subs	r3, #1
 8043846:	4a1b      	ldr	r2, [pc, #108]	@ (80438b4 <CMD_RamFill+0x2d4>)
 8043848:	4413      	add	r3, r2
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 804384a:	4619      	mov	r1, r3
             RAM_D2_200KB_START[size - 1]);
 804384c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 804384e:	3b01      	subs	r3, #1
 8043850:	4a18      	ldr	r2, [pc, #96]	@ (80438b4 <CMD_RamFill+0x2d4>)
 8043852:	4413      	add	r3, r2
 8043854:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 8043856:	f107 0010 	add.w	r0, r7, #16
 804385a:	9300      	str	r3, [sp, #0]
 804385c:	460b      	mov	r3, r1
 804385e:	4a1c      	ldr	r2, [pc, #112]	@ (80438d0 <CMD_RamFill+0x2f0>)
 8043860:	2164      	movs	r1, #100	@ 0x64
 8043862:	f025 febd 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8043866:	f107 0310 	add.w	r3, r7, #16
 804386a:	4619      	mov	r1, r3
 804386c:	68f8      	ldr	r0, [r7, #12]
 804386e:	f002 fc27 	bl	80460c0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "CRC16-XMODEM: 0x%04X", crc);
 8043872:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8043876:	f107 0010 	add.w	r0, r7, #16
 804387a:	4a16      	ldr	r2, [pc, #88]	@ (80438d4 <CMD_RamFill+0x2f4>)
 804387c:	2164      	movs	r1, #100	@ 0x64
 804387e:	f025 feaf 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8043882:	f107 0310 	add.w	r3, r7, #16
 8043886:	4619      	mov	r1, r3
 8043888:	68f8      	ldr	r0, [r7, #12]
 804388a:	f002 fc19 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 804388e:	4912      	ldr	r1, [pc, #72]	@ (80438d8 <CMD_RamFill+0x2f8>)
 8043890:	68f8      	ldr	r0, [r7, #12]
 8043892:	f002 fc15 	bl	80460c0 <embeddedCliPrint>
}
 8043896:	3798      	adds	r7, #152	@ 0x98
 8043898:	46bd      	mov	sp, r7
 804389a:	bd80      	pop	{r7, pc}
 804389c:	0806bb84 	.word	0x0806bb84
 80438a0:	0806bbd4 	.word	0x0806bbd4
 80438a4:	0806bbfc 	.word	0x0806bbfc
 80438a8:	0806bc08 	.word	0x0806bc08
 80438ac:	0806bc10 	.word	0x0806bc10
 80438b0:	0806bc18 	.word	0x0806bc18
 80438b4:	30000000 	.word	0x30000000
 80438b8:	0806bc3c 	.word	0x0806bc3c
 80438bc:	aaaaaaab 	.word	0xaaaaaaab
 80438c0:	0806bc6c 	.word	0x0806bc6c
 80438c4:	0806bc9c 	.word	0x0806bc9c
 80438c8:	0806bcc0 	.word	0x0806bcc0
 80438cc:	0806bcf0 	.word	0x0806bcf0
 80438d0:	0806bd14 	.word	0x0806bd14
 80438d4:	0806bd34 	.word	0x0806bd34
 80438d8:	0806bd4c 	.word	0x0806bd4c

080438dc <CMD_RamDump>:

static void CMD_RamDump(EmbeddedCli *cli, char *args, void *context) {
 80438dc:	b580      	push	{r7, lr}
 80438de:	b0aa      	sub	sp, #168	@ 0xa8
 80438e0:	af02      	add	r7, sp, #8
 80438e2:	60f8      	str	r0, [r7, #12]
 80438e4:	60b9      	str	r1, [r7, #8]
 80438e6:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 80438e8:	2101      	movs	r1, #1
 80438ea:	68b8      	ldr	r0, [r7, #8]
 80438ec:	f002 fcaa 	bl	8046244 <embeddedCliGetToken>
 80438f0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    const uint32_t bytes_per_line = 16;
 80438f4:	2310      	movs	r3, #16
 80438f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t byte_count = 0;
 80438fa:	2300      	movs	r3, #0
 80438fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint16_t crc = 0x0000;
 8043900:	2300      	movs	r3, #0
 8043902:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

    if (arg1 == NULL) {
 8043906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 804390a:	2b00      	cmp	r3, #0
 804390c:	d104      	bne.n	8043918 <CMD_RamDump+0x3c>
        embeddedCliPrint(cli, "Usage: ram_dump <size> (size: 1-200KB)");
 804390e:	4980      	ldr	r1, [pc, #512]	@ (8043b10 <CMD_RamDump+0x234>)
 8043910:	68f8      	ldr	r0, [r7, #12]
 8043912:	f002 fbd5 	bl	80460c0 <embeddedCliPrint>
        return;
 8043916:	e0f7      	b.n	8043b08 <CMD_RamDump+0x22c>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8043918:	2200      	movs	r2, #0
 804391a:	2100      	movs	r1, #0
 804391c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8043920:	f025 fd80 	bl	8069424 <strtoul>
 8043924:	67f8      	str	r0, [r7, #124]	@ 0x7c

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 8043926:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043928:	2b00      	cmp	r3, #0
 804392a:	d003      	beq.n	8043934 <CMD_RamDump+0x58>
 804392c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 804392e:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8043932:	d90e      	bls.n	8043952 <CMD_RamDump+0x76>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 8043934:	f107 0014 	add.w	r0, r7, #20
 8043938:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 804393c:	4a75      	ldr	r2, [pc, #468]	@ (8043b14 <CMD_RamDump+0x238>)
 804393e:	2164      	movs	r1, #100	@ 0x64
 8043940:	f025 fe4e 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043944:	f107 0314 	add.w	r3, r7, #20
 8043948:	4619      	mov	r1, r3
 804394a:	68f8      	ldr	r0, [r7, #12]
 804394c:	f002 fbb8 	bl	80460c0 <embeddedCliPrint>
        return;
 8043950:	e0da      	b.n	8043b08 <CMD_RamDump+0x22c>
    }

    snprintf(buffer, sizeof(buffer), "Dumping %lu bytes of RAM_D3 contents:", (unsigned long)size);
 8043952:	f107 0014 	add.w	r0, r7, #20
 8043956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043958:	4a6f      	ldr	r2, [pc, #444]	@ (8043b18 <CMD_RamDump+0x23c>)
 804395a:	2164      	movs	r1, #100	@ 0x64
 804395c:	f025 fe40 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8043960:	f107 0314 	add.w	r3, r7, #20
 8043964:	4619      	mov	r1, r3
 8043966:	68f8      	ldr	r0, [r7, #12]
 8043968:	f002 fbaa 	bl	80460c0 <embeddedCliPrint>

    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 804396c:	2300      	movs	r3, #0
 804396e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8043972:	e0ae      	b.n	8043ad2 <CMD_RamDump+0x1f6>
        snprintf(buffer, sizeof(buffer), "0x%08lX: ", (uint32_t)(0x38000000 + i));
 8043974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8043978:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 804397c:	f107 0014 	add.w	r0, r7, #20
 8043980:	4a66      	ldr	r2, [pc, #408]	@ (8043b1c <CMD_RamDump+0x240>)
 8043982:	2164      	movs	r1, #100	@ 0x64
 8043984:	f025 fe2c 	bl	80695e0 <sniprintf>
        char *ptr = buffer + strlen(buffer);
 8043988:	f107 0314 	add.w	r3, r7, #20
 804398c:	4618      	mov	r0, r3
 804398e:	f7fc fcb1 	bl	80402f4 <strlen>
 8043992:	4602      	mov	r2, r0
 8043994:	f107 0314 	add.w	r3, r7, #20
 8043998:	4413      	add	r3, r2
 804399a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 804399e:	2300      	movs	r3, #0
 80439a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80439a4:	e031      	b.n	8043a0a <CMD_RamDump+0x12e>
            uint8_t value = RAM_D3_START[i + j];
 80439a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80439aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80439ae:	4413      	add	r3, r2
 80439b0:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80439b4:	781b      	ldrb	r3, [r3, #0]
 80439b6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
            snprintf(ptr, sizeof(buffer) - (ptr - buffer), "%02X ", value);
 80439ba:	f107 0314 	add.w	r3, r7, #20
 80439be:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80439c2:	1ad3      	subs	r3, r2, r3
 80439c4:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 80439c8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80439cc:	4a54      	ldr	r2, [pc, #336]	@ (8043b20 <CMD_RamDump+0x244>)
 80439ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80439d2:	f025 fe05 	bl	80695e0 <sniprintf>
            ptr += 3;
 80439d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80439da:	3303      	adds	r3, #3
 80439dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            byte_count++;
 80439e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80439e4:	3301      	adds	r3, #1
 80439e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            crc = UpdateCRC16_XMODEM(crc, value);
 80439ea:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 80439ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80439f2:	4611      	mov	r1, r2
 80439f4:	4618      	mov	r0, r3
 80439f6:	f7ff fdbe 	bl	8043576 <UpdateCRC16_XMODEM>
 80439fa:	4603      	mov	r3, r0
 80439fc:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8043a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8043a04:	3301      	adds	r3, #1
 8043a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8043a0a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8043a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043a12:	429a      	cmp	r2, r3
 8043a14:	d207      	bcs.n	8043a26 <CMD_RamDump+0x14a>
 8043a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8043a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8043a1e:	4413      	add	r3, r2
 8043a20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8043a22:	429a      	cmp	r2, r3
 8043a24:	d8bf      	bhi.n	80439a6 <CMD_RamDump+0xca>
        }

        *ptr++ = ' ';
 8043a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043a2a:	1c5a      	adds	r2, r3, #1
 8043a2c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8043a30:	2220      	movs	r2, #32
 8043a32:	701a      	strb	r2, [r3, #0]
        *ptr++ = '|';
 8043a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043a38:	1c5a      	adds	r2, r3, #1
 8043a3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8043a3e:	227c      	movs	r2, #124	@ 0x7c
 8043a40:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8043a42:	2300      	movs	r3, #0
 8043a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043a48:	e021      	b.n	8043a8e <CMD_RamDump+0x1b2>
            uint8_t c = RAM_D3_START[i + j];
 8043a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8043a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8043a52:	4413      	add	r3, r2
 8043a54:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8043a58:	781b      	ldrb	r3, [r3, #0]
 8043a5a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            *ptr++ = (c >= 32 && c <= 126) ? c : '.';
 8043a5e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8043a62:	2b1f      	cmp	r3, #31
 8043a64:	d906      	bls.n	8043a74 <CMD_RamDump+0x198>
 8043a66:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8043a6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8043a6c:	d802      	bhi.n	8043a74 <CMD_RamDump+0x198>
 8043a6e:	f897 107a 	ldrb.w	r1, [r7, #122]	@ 0x7a
 8043a72:	e000      	b.n	8043a76 <CMD_RamDump+0x19a>
 8043a74:	212e      	movs	r1, #46	@ 0x2e
 8043a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043a7a:	1c5a      	adds	r2, r3, #1
 8043a7c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8043a80:	460a      	mov	r2, r1
 8043a82:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8043a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8043a88:	3301      	adds	r3, #1
 8043a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043a8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8043a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043a96:	429a      	cmp	r2, r3
 8043a98:	d207      	bcs.n	8043aaa <CMD_RamDump+0x1ce>
 8043a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8043a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8043aa2:	4413      	add	r3, r2
 8043aa4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8043aa6:	429a      	cmp	r2, r3
 8043aa8:	d8cf      	bhi.n	8043a4a <CMD_RamDump+0x16e>
        }
        *ptr = '\0';
 8043aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043aae:	2200      	movs	r2, #0
 8043ab0:	701a      	strb	r2, [r3, #0]

        embeddedCliPrint(cli, buffer);
 8043ab2:	f107 0314 	add.w	r3, r7, #20
 8043ab6:	4619      	mov	r1, r3
 8043ab8:	68f8      	ldr	r0, [r7, #12]
 8043aba:	f002 fb01 	bl	80460c0 <embeddedCliPrint>

        vTaskDelay(pdMS_TO_TICKS(1));
 8043abe:	2001      	movs	r0, #1
 8043ac0:	f012 fdd0 	bl	8056664 <vTaskDelay>
    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 8043ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8043ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043acc:	4413      	add	r3, r2
 8043ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8043ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8043ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043ad8:	429a      	cmp	r2, r3
 8043ada:	f4ff af4b 	bcc.w	8043974 <CMD_RamDump+0x98>
    }

    snprintf(buffer, sizeof(buffer), "Dump complete. Counted bytes: %lu, CRC16-XMODEM: 0x%04X",
 8043ade:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8043ae2:	f107 0014 	add.w	r0, r7, #20
 8043ae6:	9300      	str	r3, [sp, #0]
 8043ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8043aec:	4a0d      	ldr	r2, [pc, #52]	@ (8043b24 <CMD_RamDump+0x248>)
 8043aee:	2164      	movs	r1, #100	@ 0x64
 8043af0:	f025 fd76 	bl	80695e0 <sniprintf>
             (unsigned long)byte_count, crc);
    embeddedCliPrint(cli, buffer);
 8043af4:	f107 0314 	add.w	r3, r7, #20
 8043af8:	4619      	mov	r1, r3
 8043afa:	68f8      	ldr	r0, [r7, #12]
 8043afc:	f002 fae0 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8043b00:	4909      	ldr	r1, [pc, #36]	@ (8043b28 <CMD_RamDump+0x24c>)
 8043b02:	68f8      	ldr	r0, [r7, #12]
 8043b04:	f002 fadc 	bl	80460c0 <embeddedCliPrint>
}
 8043b08:	37a0      	adds	r7, #160	@ 0xa0
 8043b0a:	46bd      	mov	sp, r7
 8043b0c:	bd80      	pop	{r7, pc}
 8043b0e:	bf00      	nop
 8043b10:	0806bd50 	.word	0x0806bd50
 8043b14:	0806bbd4 	.word	0x0806bbd4
 8043b18:	0806bd78 	.word	0x0806bd78
 8043b1c:	0806bda0 	.word	0x0806bda0
 8043b20:	0806bdac 	.word	0x0806bdac
 8043b24:	0806bdb4 	.word	0x0806bdb4
 8043b28:	0806bd4c 	.word	0x0806bd4c

08043b2c <CMD_StateToCM4>:

static void CMD_StateToCM4(EmbeddedCli *cli, char *args, void *context) {
 8043b2c:	b580      	push	{r7, lr}
 8043b2e:	b0a0      	sub	sp, #128	@ 0x80
 8043b30:	af00      	add	r7, sp, #0
 8043b32:	60f8      	str	r0, [r7, #12]
 8043b34:	60b9      	str	r1, [r7, #8]
 8043b36:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8043b38:	2101      	movs	r1, #1
 8043b3a:	68b8      	ldr	r0, [r7, #8]
 8043b3c:	f002 fb82 	bl	8046244 <embeddedCliGetToken>
 8043b40:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 8043b42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043b44:	2b00      	cmp	r3, #0
 8043b46:	d104      	bne.n	8043b52 <CMD_StateToCM4+0x26>
        embeddedCliPrint(cli, "Usage: state_tocm4 <get|reset>");
 8043b48:	4934      	ldr	r1, [pc, #208]	@ (8043c1c <CMD_StateToCM4+0xf0>)
 8043b4a:	68f8      	ldr	r0, [r7, #12]
 8043b4c:	f002 fab8 	bl	80460c0 <embeddedCliPrint>
 8043b50:	e060      	b.n	8043c14 <CMD_StateToCM4+0xe8>
        return;
    }

    if (strcmp(arg1, "get") == 0) {
 8043b52:	4933      	ldr	r1, [pc, #204]	@ (8043c20 <CMD_StateToCM4+0xf4>)
 8043b54:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8043b56:	f7fc fbc3 	bl	80402e0 <strcmp>
 8043b5a:	4603      	mov	r3, r0
 8043b5c:	2b00      	cmp	r3, #0
 8043b5e:	d142      	bne.n	8043be6 <CMD_StateToCM4+0xba>
        toCM4_State_t state = toCM4_GetState();
 8043b60:	f7fc ff82 	bl	8040a68 <toCM4_GetState>
 8043b64:	4603      	mov	r3, r0
 8043b66:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        switch (state) {
 8043b6a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8043b6e:	2b03      	cmp	r3, #3
 8043b70:	d82a      	bhi.n	8043bc8 <CMD_StateToCM4+0x9c>
 8043b72:	a201      	add	r2, pc, #4	@ (adr r2, 8043b78 <CMD_StateToCM4+0x4c>)
 8043b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043b78:	08043b89 	.word	0x08043b89
 8043b7c:	08043b99 	.word	0x08043b99
 8043b80:	08043ba9 	.word	0x08043ba9
 8043b84:	08043bb9 	.word	0x08043bb9
            case TOCM4_ERROR:
                snprintf(buffer, sizeof(buffer), "toCM4 State: ERROR");
 8043b88:	f107 0314 	add.w	r3, r7, #20
 8043b8c:	4a25      	ldr	r2, [pc, #148]	@ (8043c24 <CMD_StateToCM4+0xf8>)
 8043b8e:	2164      	movs	r1, #100	@ 0x64
 8043b90:	4618      	mov	r0, r3
 8043b92:	f025 fd25 	bl	80695e0 <sniprintf>
                break;
 8043b96:	e01f      	b.n	8043bd8 <CMD_StateToCM4+0xac>
            case TOCM4_READYSEND:
                snprintf(buffer, sizeof(buffer), "toCM4 State: READYSEND");
 8043b98:	f107 0314 	add.w	r3, r7, #20
 8043b9c:	4a22      	ldr	r2, [pc, #136]	@ (8043c28 <CMD_StateToCM4+0xfc>)
 8043b9e:	2164      	movs	r1, #100	@ 0x64
 8043ba0:	4618      	mov	r0, r3
 8043ba2:	f025 fd1d 	bl	80695e0 <sniprintf>
                break;
 8043ba6:	e017      	b.n	8043bd8 <CMD_StateToCM4+0xac>
            case TOCM4_BUSY:
                snprintf(buffer, sizeof(buffer), "toCM4 State: BUSY");
 8043ba8:	f107 0314 	add.w	r3, r7, #20
 8043bac:	4a1f      	ldr	r2, [pc, #124]	@ (8043c2c <CMD_StateToCM4+0x100>)
 8043bae:	2164      	movs	r1, #100	@ 0x64
 8043bb0:	4618      	mov	r0, r3
 8043bb2:	f025 fd15 	bl	80695e0 <sniprintf>
                break;
 8043bb6:	e00f      	b.n	8043bd8 <CMD_StateToCM4+0xac>
            case TOCM4_IDLE:
                snprintf(buffer, sizeof(buffer), "toCM4 State: IDLE");
 8043bb8:	f107 0314 	add.w	r3, r7, #20
 8043bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8043c30 <CMD_StateToCM4+0x104>)
 8043bbe:	2164      	movs	r1, #100	@ 0x64
 8043bc0:	4618      	mov	r0, r3
 8043bc2:	f025 fd0d 	bl	80695e0 <sniprintf>
                break;
 8043bc6:	e007      	b.n	8043bd8 <CMD_StateToCM4+0xac>
            default:
                snprintf(buffer, sizeof(buffer), "toCM4 State: UNKNOWN");
 8043bc8:	f107 0314 	add.w	r3, r7, #20
 8043bcc:	4a19      	ldr	r2, [pc, #100]	@ (8043c34 <CMD_StateToCM4+0x108>)
 8043bce:	2164      	movs	r1, #100	@ 0x64
 8043bd0:	4618      	mov	r0, r3
 8043bd2:	f025 fd05 	bl	80695e0 <sniprintf>
                break;
 8043bd6:	bf00      	nop
        }
        embeddedCliPrint(cli, buffer);
 8043bd8:	f107 0314 	add.w	r3, r7, #20
 8043bdc:	4619      	mov	r1, r3
 8043bde:	68f8      	ldr	r0, [r7, #12]
 8043be0:	f002 fa6e 	bl	80460c0 <embeddedCliPrint>
 8043be4:	e012      	b.n	8043c0c <CMD_StateToCM4+0xe0>
    } else if (strcmp(arg1, "reset") == 0) {
 8043be6:	4914      	ldr	r1, [pc, #80]	@ (8043c38 <CMD_StateToCM4+0x10c>)
 8043be8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8043bea:	f7fc fb79 	bl	80402e0 <strcmp>
 8043bee:	4603      	mov	r3, r0
 8043bf0:	2b00      	cmp	r3, #0
 8043bf2:	d107      	bne.n	8043c04 <CMD_StateToCM4+0xd8>
        toCM4_SetState(TOCM4_IDLE);
 8043bf4:	2003      	movs	r0, #3
 8043bf6:	f7fc ff1b 	bl	8040a30 <toCM4_SetState>
        embeddedCliPrint(cli, "toCM4 State reset to IDLE");
 8043bfa:	4910      	ldr	r1, [pc, #64]	@ (8043c3c <CMD_StateToCM4+0x110>)
 8043bfc:	68f8      	ldr	r0, [r7, #12]
 8043bfe:	f002 fa5f 	bl	80460c0 <embeddedCliPrint>
 8043c02:	e003      	b.n	8043c0c <CMD_StateToCM4+0xe0>
    } else {
        embeddedCliPrint(cli, "Invalid option. Usage: state_tocm4 <get|reset>");
 8043c04:	490e      	ldr	r1, [pc, #56]	@ (8043c40 <CMD_StateToCM4+0x114>)
 8043c06:	68f8      	ldr	r0, [r7, #12]
 8043c08:	f002 fa5a 	bl	80460c0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8043c0c:	490d      	ldr	r1, [pc, #52]	@ (8043c44 <CMD_StateToCM4+0x118>)
 8043c0e:	68f8      	ldr	r0, [r7, #12]
 8043c10:	f002 fa56 	bl	80460c0 <embeddedCliPrint>
}
 8043c14:	3780      	adds	r7, #128	@ 0x80
 8043c16:	46bd      	mov	sp, r7
 8043c18:	bd80      	pop	{r7, pc}
 8043c1a:	bf00      	nop
 8043c1c:	0806bdec 	.word	0x0806bdec
 8043c20:	0806be0c 	.word	0x0806be0c
 8043c24:	0806be10 	.word	0x0806be10
 8043c28:	0806be24 	.word	0x0806be24
 8043c2c:	0806be3c 	.word	0x0806be3c
 8043c30:	0806be50 	.word	0x0806be50
 8043c34:	0806be64 	.word	0x0806be64
 8043c38:	0806b5b8 	.word	0x0806b5b8
 8043c3c:	0806be7c 	.word	0x0806be7c
 8043c40:	0806be98 	.word	0x0806be98
 8043c44:	0806bd4c 	.word	0x0806bd4c

08043c48 <CMD_SPISlaveRST>:

static void CMD_SPISlaveRST(EmbeddedCli *cli, char *args, void *context) {
 8043c48:	b580      	push	{r7, lr}
 8043c4a:	b0a0      	sub	sp, #128	@ 0x80
 8043c4c:	af00      	add	r7, sp, #0
 8043c4e:	60f8      	str	r0, [r7, #12]
 8043c50:	60b9      	str	r1, [r7, #8]
 8043c52:	607a      	str	r2, [r7, #4]
    char buffer[100];

    SPI_SlaveDevice_t *device = SPI_SlaveDevice_GetHandle();
 8043c54:	f009 fac2 	bl	804d1dc <SPI_SlaveDevice_GetHandle>
 8043c58:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 8043c5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043c5c:	7d1b      	ldrb	r3, [r3, #20]
 8043c5e:	f083 0301 	eor.w	r3, r3, #1
 8043c62:	b2db      	uxtb	r3, r3
 8043c64:	2b00      	cmp	r3, #0
 8043c66:	d004      	beq.n	8043c72 <CMD_SPISlaveRST+0x2a>
        embeddedCliPrint(cli, "SPI Slave Device not initialized");
 8043c68:	4917      	ldr	r1, [pc, #92]	@ (8043cc8 <CMD_SPISlaveRST+0x80>)
 8043c6a:	68f8      	ldr	r0, [r7, #12]
 8043c6c:	f002 fa28 	bl	80460c0 <embeddedCliPrint>
 8043c70:	e027      	b.n	8043cc2 <CMD_SPISlaveRST+0x7a>
        return;
    }

    Std_ReturnType ret = SPI_SlaveDevice_Disable();
 8043c72:	f009 fbfd 	bl	804d470 <SPI_SlaveDevice_Disable>
 8043c76:	4603      	mov	r3, r0
 8043c78:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 8043c7c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8043c80:	2b00      	cmp	r3, #0
 8043c82:	d10d      	bne.n	8043ca0 <CMD_SPISlaveRST+0x58>
        snprintf(buffer, sizeof(buffer), "SPI Slave Device reset to IDLE state");
 8043c84:	f107 0314 	add.w	r3, r7, #20
 8043c88:	4a10      	ldr	r2, [pc, #64]	@ (8043ccc <CMD_SPISlaveRST+0x84>)
 8043c8a:	2164      	movs	r1, #100	@ 0x64
 8043c8c:	4618      	mov	r0, r3
 8043c8e:	f025 fca7 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043c92:	f107 0314 	add.w	r3, r7, #20
 8043c96:	4619      	mov	r1, r3
 8043c98:	68f8      	ldr	r0, [r7, #12]
 8043c9a:	f002 fa11 	bl	80460c0 <embeddedCliPrint>
 8043c9e:	e00c      	b.n	8043cba <CMD_SPISlaveRST+0x72>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to reset SPI Slave Device");
 8043ca0:	f107 0314 	add.w	r3, r7, #20
 8043ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8043cd0 <CMD_SPISlaveRST+0x88>)
 8043ca6:	2164      	movs	r1, #100	@ 0x64
 8043ca8:	4618      	mov	r0, r3
 8043caa:	f025 fc99 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043cae:	f107 0314 	add.w	r3, r7, #20
 8043cb2:	4619      	mov	r1, r3
 8043cb4:	68f8      	ldr	r0, [r7, #12]
 8043cb6:	f002 fa03 	bl	80460c0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8043cba:	4906      	ldr	r1, [pc, #24]	@ (8043cd4 <CMD_SPISlaveRST+0x8c>)
 8043cbc:	68f8      	ldr	r0, [r7, #12]
 8043cbe:	f002 f9ff 	bl	80460c0 <embeddedCliPrint>
}
 8043cc2:	3780      	adds	r7, #128	@ 0x80
 8043cc4:	46bd      	mov	sp, r7
 8043cc6:	bd80      	pop	{r7, pc}
 8043cc8:	0806bec8 	.word	0x0806bec8
 8043ccc:	0806beec 	.word	0x0806beec
 8043cd0:	0806bf14 	.word	0x0806bf14
 8043cd4:	0806bd4c 	.word	0x0806bd4c

08043cd8 <CMD_CollectData>:

static void CMD_CollectData(EmbeddedCli *cli, char *args, void *context) {
 8043cd8:	b590      	push	{r4, r7, lr}
 8043cda:	b0ab      	sub	sp, #172	@ 0xac
 8043cdc:	af04      	add	r7, sp, #16
 8043cde:	60f8      	str	r0, [r7, #12]
 8043ce0:	60b9      	str	r1, [r7, #8]
 8043ce2:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // type
 8043ce4:	2101      	movs	r1, #1
 8043ce6:	68b8      	ldr	r0, [r7, #8]
 8043ce8:	f002 faac 	bl	8046244 <embeddedCliGetToken>
 8043cec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *arg2 = embeddedCliGetToken(args, 2); // sample
 8043cf0:	2102      	movs	r1, #2
 8043cf2:	68b8      	ldr	r0, [r7, #8]
 8043cf4:	f002 faa6 	bl	8046244 <embeddedCliGetToken>
 8043cf8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 8043cfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8043d00:	2b00      	cmp	r3, #0
 8043d02:	d003      	beq.n	8043d0c <CMD_CollectData+0x34>
 8043d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8043d08:	2b00      	cmp	r3, #0
 8043d0a:	d104      	bne.n	8043d16 <CMD_CollectData+0x3e>
        embeddedCliPrint(cli, "Usage: collect_data <type> <sample>");
 8043d0c:	4934      	ldr	r1, [pc, #208]	@ (8043de0 <CMD_CollectData+0x108>)
 8043d0e:	68f8      	ldr	r0, [r7, #12]
 8043d10:	f002 f9d6 	bl	80460c0 <embeddedCliPrint>
 8043d14:	e061      	b.n	8043dda <CMD_CollectData+0x102>
        return;
    }

    uint8_t type = (uint8_t)atoi(arg1);
 8043d16:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8043d1a:	f025 fa4f 	bl	80691bc <atoi>
 8043d1e:	4603      	mov	r3, r0
 8043d20:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint32_t sample = (uint32_t)strtoul(arg2, NULL, 0);
 8043d24:	2200      	movs	r2, #0
 8043d26:	2100      	movs	r1, #0
 8043d28:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8043d2c:	f025 fb7a 	bl	8069424 <strtoul>
 8043d30:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

    Std_ReturnType ret = SPI_SlaveDevice_CollectData(type, sample, (uint32_t)RAM_D2_200KB_START);
 8043d34:	4a2b      	ldr	r2, [pc, #172]	@ (8043de4 <CMD_CollectData+0x10c>)
 8043d36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8043d3a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8043d3e:	4618      	mov	r0, r3
 8043d40:	f009 fa84 	bl	804d24c <SPI_SlaveDevice_CollectData>
 8043d44:	4603      	mov	r3, r0
 8043d46:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (ret == E_OK) {
 8043d4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8043d4e:	2b00      	cmp	r3, #0
 8043d50:	d11e      	bne.n	8043d90 <CMD_CollectData+0xb8>
        DataProcessContext_t ctx;
        if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8043d52:	f107 0310 	add.w	r3, r7, #16
 8043d56:	4618      	mov	r0, r3
 8043d58:	f009 fb14 	bl	804d384 <SPI_SlaveDevice_GetDataInfo>
 8043d5c:	4603      	mov	r3, r0
 8043d5e:	2b00      	cmp	r3, #0
 8043d60:	d137      	bne.n	8043dd2 <CMD_CollectData+0xfa>
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8043d62:	697a      	ldr	r2, [r7, #20]
 8043d64:	7c3b      	ldrb	r3, [r7, #16]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8043d66:	4619      	mov	r1, r3
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8043d68:	69bb      	ldr	r3, [r7, #24]
 8043d6a:	8bb8      	ldrh	r0, [r7, #28]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8043d6c:	4604      	mov	r4, r0
 8043d6e:	f107 0020 	add.w	r0, r7, #32
 8043d72:	9402      	str	r4, [sp, #8]
 8043d74:	9301      	str	r3, [sp, #4]
 8043d76:	9100      	str	r1, [sp, #0]
 8043d78:	4613      	mov	r3, r2
 8043d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8043de8 <CMD_CollectData+0x110>)
 8043d7c:	2164      	movs	r1, #100	@ 0x64
 8043d7e:	f025 fc2f 	bl	80695e0 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8043d82:	f107 0320 	add.w	r3, r7, #32
 8043d86:	4619      	mov	r1, r3
 8043d88:	68f8      	ldr	r0, [r7, #12]
 8043d8a:	f002 f999 	bl	80460c0 <embeddedCliPrint>
 8043d8e:	e020      	b.n	8043dd2 <CMD_CollectData+0xfa>
        }
    } else if (ret == E_BUSY) {
 8043d90:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8043d94:	2b02      	cmp	r3, #2
 8043d96:	d10e      	bne.n	8043db6 <CMD_CollectData+0xde>
        snprintf(buffer, sizeof(buffer), "Type %d not implemented yet.", type);
 8043d98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8043d9c:	f107 0020 	add.w	r0, r7, #32
 8043da0:	4a12      	ldr	r2, [pc, #72]	@ (8043dec <CMD_CollectData+0x114>)
 8043da2:	2164      	movs	r1, #100	@ 0x64
 8043da4:	f025 fc1c 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043da8:	f107 0320 	add.w	r3, r7, #32
 8043dac:	4619      	mov	r1, r3
 8043dae:	68f8      	ldr	r0, [r7, #12]
 8043db0:	f002 f986 	bl	80460c0 <embeddedCliPrint>
 8043db4:	e00d      	b.n	8043dd2 <CMD_CollectData+0xfa>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to collect data. Error code: %d", ret);
 8043db6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8043dba:	f107 0020 	add.w	r0, r7, #32
 8043dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8043df0 <CMD_CollectData+0x118>)
 8043dc0:	2164      	movs	r1, #100	@ 0x64
 8043dc2:	f025 fc0d 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043dc6:	f107 0320 	add.w	r3, r7, #32
 8043dca:	4619      	mov	r1, r3
 8043dcc:	68f8      	ldr	r0, [r7, #12]
 8043dce:	f002 f977 	bl	80460c0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8043dd2:	4908      	ldr	r1, [pc, #32]	@ (8043df4 <CMD_CollectData+0x11c>)
 8043dd4:	68f8      	ldr	r0, [r7, #12]
 8043dd6:	f002 f973 	bl	80460c0 <embeddedCliPrint>
}
 8043dda:	379c      	adds	r7, #156	@ 0x9c
 8043ddc:	46bd      	mov	sp, r7
 8043dde:	bd90      	pop	{r4, r7, pc}
 8043de0:	0806bf38 	.word	0x0806bf38
 8043de4:	30000000 	.word	0x30000000
 8043de8:	0806bf5c 	.word	0x0806bf5c
 8043dec:	0806bf9c 	.word	0x0806bf9c
 8043df0:	0806bfbc 	.word	0x0806bfbc
 8043df4:	0806bd4c 	.word	0x0806bd4c

08043df8 <CMD_PullData>:

static void CMD_PullData(EmbeddedCli *cli, char *args, void *context) {
 8043df8:	b580      	push	{r7, lr}
 8043dfa:	b0a4      	sub	sp, #144	@ 0x90
 8043dfc:	af02      	add	r7, sp, #8
 8043dfe:	60f8      	str	r0, [r7, #12]
 8043e00:	60b9      	str	r1, [r7, #8]
 8043e02:	607a      	str	r2, [r7, #4]
    char buffer[100];
    toCM4_State_t state = SPI_SlaveDevice_GetCM4State();
 8043e04:	f009 fb6e 	bl	804d4e4 <SPI_SlaveDevice_GetCM4State>
 8043e08:	4603      	mov	r3, r0
 8043e0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    switch (state) {
 8043e0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8043e12:	2b03      	cmp	r3, #3
 8043e14:	d838      	bhi.n	8043e88 <CMD_PullData+0x90>
 8043e16:	a201      	add	r2, pc, #4	@ (adr r2, 8043e1c <CMD_PullData+0x24>)
 8043e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043e1c:	08043e7f 	.word	0x08043e7f
 8043e20:	08043e41 	.word	0x08043e41
 8043e24:	08043e37 	.word	0x08043e37
 8043e28:	08043e2d 	.word	0x08043e2d
        case TOCM4_IDLE:
            embeddedCliPrint(cli, "State: IDLE");
 8043e2c:	491d      	ldr	r1, [pc, #116]	@ (8043ea4 <CMD_PullData+0xac>)
 8043e2e:	68f8      	ldr	r0, [r7, #12]
 8043e30:	f002 f946 	bl	80460c0 <embeddedCliPrint>
            break;
 8043e34:	e02d      	b.n	8043e92 <CMD_PullData+0x9a>
        case TOCM4_BUSY:
            embeddedCliPrint(cli, "State: BUSY");
 8043e36:	491c      	ldr	r1, [pc, #112]	@ (8043ea8 <CMD_PullData+0xb0>)
 8043e38:	68f8      	ldr	r0, [r7, #12]
 8043e3a:	f002 f941 	bl	80460c0 <embeddedCliPrint>
            break;
 8043e3e:	e028      	b.n	8043e92 <CMD_PullData+0x9a>
        case TOCM4_READYSEND:
        {
            DataProcessContext_t ctx;
            if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8043e40:	f107 0310 	add.w	r3, r7, #16
 8043e44:	4618      	mov	r0, r3
 8043e46:	f009 fa9d 	bl	804d384 <SPI_SlaveDevice_GetDataInfo>
 8043e4a:	4603      	mov	r3, r0
 8043e4c:	2b00      	cmp	r3, #0
 8043e4e:	d111      	bne.n	8043e74 <CMD_PullData+0x7c>
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
                         ctx.crc, (unsigned long)ctx.data_size);
 8043e50:	8bbb      	ldrh	r3, [r7, #28]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8043e52:	461a      	mov	r2, r3
                         ctx.crc, (unsigned long)ctx.data_size);
 8043e54:	69bb      	ldr	r3, [r7, #24]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8043e56:	f107 0020 	add.w	r0, r7, #32
 8043e5a:	9300      	str	r3, [sp, #0]
 8043e5c:	4613      	mov	r3, r2
 8043e5e:	4a13      	ldr	r2, [pc, #76]	@ (8043eac <CMD_PullData+0xb4>)
 8043e60:	2164      	movs	r1, #100	@ 0x64
 8043e62:	f025 fbbd 	bl	80695e0 <sniprintf>
                embeddedCliPrint(cli, buffer);
 8043e66:	f107 0320 	add.w	r3, r7, #32
 8043e6a:	4619      	mov	r1, r3
 8043e6c:	68f8      	ldr	r0, [r7, #12]
 8043e6e:	f002 f927 	bl	80460c0 <embeddedCliPrint>
            } else {
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
            }
            break;
 8043e72:	e00e      	b.n	8043e92 <CMD_PullData+0x9a>
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
 8043e74:	490e      	ldr	r1, [pc, #56]	@ (8043eb0 <CMD_PullData+0xb8>)
 8043e76:	68f8      	ldr	r0, [r7, #12]
 8043e78:	f002 f922 	bl	80460c0 <embeddedCliPrint>
            break;
 8043e7c:	e009      	b.n	8043e92 <CMD_PullData+0x9a>
        }
        case TOCM4_ERROR:
            embeddedCliPrint(cli, "State: ERROR");
 8043e7e:	490d      	ldr	r1, [pc, #52]	@ (8043eb4 <CMD_PullData+0xbc>)
 8043e80:	68f8      	ldr	r0, [r7, #12]
 8043e82:	f002 f91d 	bl	80460c0 <embeddedCliPrint>
            break;
 8043e86:	e004      	b.n	8043e92 <CMD_PullData+0x9a>
        default:
            embeddedCliPrint(cli, "State: UNKNOWN");
 8043e88:	490b      	ldr	r1, [pc, #44]	@ (8043eb8 <CMD_PullData+0xc0>)
 8043e8a:	68f8      	ldr	r0, [r7, #12]
 8043e8c:	f002 f918 	bl	80460c0 <embeddedCliPrint>
            break;
 8043e90:	bf00      	nop
    }

    embeddedCliPrint(cli, "");
 8043e92:	490a      	ldr	r1, [pc, #40]	@ (8043ebc <CMD_PullData+0xc4>)
 8043e94:	68f8      	ldr	r0, [r7, #12]
 8043e96:	f002 f913 	bl	80460c0 <embeddedCliPrint>
}
 8043e9a:	bf00      	nop
 8043e9c:	3788      	adds	r7, #136	@ 0x88
 8043e9e:	46bd      	mov	sp, r7
 8043ea0:	bd80      	pop	{r7, pc}
 8043ea2:	bf00      	nop
 8043ea4:	0806bfe4 	.word	0x0806bfe4
 8043ea8:	0806bff0 	.word	0x0806bff0
 8043eac:	0806bffc 	.word	0x0806bffc
 8043eb0:	0806c02c 	.word	0x0806c02c
 8043eb4:	0806c058 	.word	0x0806c058
 8043eb8:	0806c068 	.word	0x0806c068
 8043ebc:	0806bd4c 	.word	0x0806bd4c

08043ec0 <CMD_MasterRead>:

static void CMD_MasterRead(EmbeddedCli *cli, char *args, void *context) {
 8043ec0:	b580      	push	{r7, lr}
 8043ec2:	b0a6      	sub	sp, #152	@ 0x98
 8043ec4:	af02      	add	r7, sp, #8
 8043ec6:	60f8      	str	r0, [r7, #12]
 8043ec8:	60b9      	str	r1, [r7, #8]
 8043eca:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8043ecc:	2101      	movs	r1, #1
 8043ece:	68b8      	ldr	r0, [r7, #8]
 8043ed0:	f002 f9b8 	bl	8046244 <embeddedCliGetToken>
 8043ed4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];

    if (arg1 == NULL) {
 8043ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8043edc:	2b00      	cmp	r3, #0
 8043ede:	d104      	bne.n	8043eea <CMD_MasterRead+0x2a>
        embeddedCliPrint(cli, "Usage: master_read <size> (size: 1-200KB)");
 8043ee0:	4943      	ldr	r1, [pc, #268]	@ (8043ff0 <CMD_MasterRead+0x130>)
 8043ee2:	68f8      	ldr	r0, [r7, #12]
 8043ee4:	f002 f8ec 	bl	80460c0 <embeddedCliPrint>
        return;
 8043ee8:	e07f      	b.n	8043fea <CMD_MasterRead+0x12a>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8043eea:	2200      	movs	r2, #0
 8043eec:	2100      	movs	r1, #0
 8043eee:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8043ef2:	f025 fa97 	bl	8069424 <strtoul>
 8043ef6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 8043efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043efe:	2b00      	cmp	r3, #0
 8043f00:	d004      	beq.n	8043f0c <CMD_MasterRead+0x4c>
 8043f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043f06:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8043f0a:	d90e      	bls.n	8043f2a <CMD_MasterRead+0x6a>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 8043f0c:	f107 0014 	add.w	r0, r7, #20
 8043f10:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8043f14:	4a37      	ldr	r2, [pc, #220]	@ (8043ff4 <CMD_MasterRead+0x134>)
 8043f16:	2164      	movs	r1, #100	@ 0x64
 8043f18:	f025 fb62 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043f1c:	f107 0314 	add.w	r3, r7, #20
 8043f20:	4619      	mov	r1, r3
 8043f22:	68f8      	ldr	r0, [r7, #12]
 8043f24:	f002 f8cc 	bl	80460c0 <embeddedCliPrint>
        return;
 8043f28:	e05f      	b.n	8043fea <CMD_MasterRead+0x12a>
//                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
//        embeddedCliPrint(cli, buffer);
//        return;
//    }

    SPI_MasterDevice_t *device = SPI_MasterDevice_GetHandle();
 8043f2a:	f008 fe1d 	bl	804cb68 <SPI_MasterDevice_GetHandle>
 8043f2e:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 8043f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8043f32:	7adb      	ldrb	r3, [r3, #11]
 8043f34:	f083 0301 	eor.w	r3, r3, #1
 8043f38:	b2db      	uxtb	r3, r3
 8043f3a:	2b00      	cmp	r3, #0
 8043f3c:	d004      	beq.n	8043f48 <CMD_MasterRead+0x88>
        embeddedCliPrint(cli, "SPI Master Device not initialized");
 8043f3e:	492e      	ldr	r1, [pc, #184]	@ (8043ff8 <CMD_MasterRead+0x138>)
 8043f40:	68f8      	ldr	r0, [r7, #12]
 8043f42:	f002 f8bd 	bl	80460c0 <embeddedCliPrint>
        return;
 8043f46:	e050      	b.n	8043fea <CMD_MasterRead+0x12a>
    }

    Std_ReturnType ret = SPI_MasterDevice_ReadDMA(0x38000000, size);
 8043f48:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8043f4c:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8043f50:	f008 fe56 	bl	804cc00 <SPI_MasterDevice_ReadDMA>
 8043f54:	4603      	mov	r3, r0
 8043f56:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 8043f5a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8043f5e:	2b00      	cmp	r3, #0
 8043f60:	d131      	bne.n	8043fc6 <CMD_MasterRead+0x106>
        uint16_t crc = 0x0000;
 8043f62:	2300      	movs	r3, #0
 8043f64:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8043f68:	2300      	movs	r3, #0
 8043f6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043f6e:	e012      	b.n	8043f96 <CMD_MasterRead+0xd6>
            crc = UpdateCRC16_XMODEM(crc, RAM_D3_START[i]);
 8043f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8043f74:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8043f78:	781a      	ldrb	r2, [r3, #0]
 8043f7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8043f7e:	4611      	mov	r1, r2
 8043f80:	4618      	mov	r0, r3
 8043f82:	f7ff faf8 	bl	8043576 <UpdateCRC16_XMODEM>
 8043f86:	4603      	mov	r3, r0
 8043f88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8043f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8043f90:	3301      	adds	r3, #1
 8043f92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043f96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8043f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043f9e:	429a      	cmp	r2, r3
 8043fa0:	d3e6      	bcc.n	8043f70 <CMD_MasterRead+0xb0>
        }
        snprintf(buffer, sizeof(buffer), "Read %lu bytes via SPI6 Master, CRC: 0x%04X",
 8043fa2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8043fa6:	f107 0014 	add.w	r0, r7, #20
 8043faa:	9300      	str	r3, [sp, #0]
 8043fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8043fb0:	4a12      	ldr	r2, [pc, #72]	@ (8043ffc <CMD_MasterRead+0x13c>)
 8043fb2:	2164      	movs	r1, #100	@ 0x64
 8043fb4:	f025 fb14 	bl	80695e0 <sniprintf>
                 (unsigned long)size, crc);
        embeddedCliPrint(cli, buffer);
 8043fb8:	f107 0314 	add.w	r3, r7, #20
 8043fbc:	4619      	mov	r1, r3
 8043fbe:	68f8      	ldr	r0, [r7, #12]
 8043fc0:	f002 f87e 	bl	80460c0 <embeddedCliPrint>
 8043fc4:	e00d      	b.n	8043fe2 <CMD_MasterRead+0x122>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to read data. Error code: %d", ret);
 8043fc6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8043fca:	f107 0014 	add.w	r0, r7, #20
 8043fce:	4a0c      	ldr	r2, [pc, #48]	@ (8044000 <CMD_MasterRead+0x140>)
 8043fd0:	2164      	movs	r1, #100	@ 0x64
 8043fd2:	f025 fb05 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8043fd6:	f107 0314 	add.w	r3, r7, #20
 8043fda:	4619      	mov	r1, r3
 8043fdc:	68f8      	ldr	r0, [r7, #12]
 8043fde:	f002 f86f 	bl	80460c0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8043fe2:	4908      	ldr	r1, [pc, #32]	@ (8044004 <CMD_MasterRead+0x144>)
 8043fe4:	68f8      	ldr	r0, [r7, #12]
 8043fe6:	f002 f86b 	bl	80460c0 <embeddedCliPrint>
}
 8043fea:	3790      	adds	r7, #144	@ 0x90
 8043fec:	46bd      	mov	sp, r7
 8043fee:	bd80      	pop	{r7, pc}
 8043ff0:	0806c078 	.word	0x0806c078
 8043ff4:	0806bbd4 	.word	0x0806bbd4
 8043ff8:	0806c0a4 	.word	0x0806c0a4
 8043ffc:	0806c0c8 	.word	0x0806c0c8
 8044000:	0806c0f4 	.word	0x0806c0f4
 8044004:	0806bd4c 	.word	0x0806bd4c

08044008 <CMD_ClearCLI>:

static void CMD_ClearCLI(EmbeddedCli *cli, char *args, void *context) {
 8044008:	b580      	push	{r7, lr}
 804400a:	b088      	sub	sp, #32
 804400c:	af00      	add	r7, sp, #0
 804400e:	60f8      	str	r0, [r7, #12]
 8044010:	60b9      	str	r1, [r7, #8]
 8044012:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8044014:	f107 0314 	add.w	r3, r7, #20
 8044018:	4a07      	ldr	r2, [pc, #28]	@ (8044038 <CMD_ClearCLI+0x30>)
 804401a:	210a      	movs	r1, #10
 804401c:	4618      	mov	r0, r3
 804401e:	f025 fadf 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8044022:	f107 0314 	add.w	r3, r7, #20
 8044026:	4619      	mov	r1, r3
 8044028:	68f8      	ldr	r0, [r7, #12]
 804402a:	f002 f849 	bl	80460c0 <embeddedCliPrint>
}
 804402e:	bf00      	nop
 8044030:	3720      	adds	r7, #32
 8044032:	46bd      	mov	sp, r7
 8044034:	bd80      	pop	{r7, pc}
 8044036:	bf00      	nop
 8044038:	0806c118 	.word	0x0806c118

0804403c <CMD_RtcSet>:

static void CMD_RtcSet(EmbeddedCli *cli, char *args, void *context) {
 804403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804403e:	b0b3      	sub	sp, #204	@ 0xcc
 8044040:	af06      	add	r7, sp, #24
 8044042:	60f8      	str	r0, [r7, #12]
 8044044:	60b9      	str	r1, [r7, #8]
 8044046:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // hour
 8044048:	2101      	movs	r1, #1
 804404a:	68b8      	ldr	r0, [r7, #8]
 804404c:	f002 f8fa 	bl	8046244 <embeddedCliGetToken>
 8044050:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    const char *arg2 = embeddedCliGetToken(args, 2); // minute
 8044054:	2102      	movs	r1, #2
 8044056:	68b8      	ldr	r0, [r7, #8]
 8044058:	f002 f8f4 	bl	8046244 <embeddedCliGetToken>
 804405c:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    const char *arg3 = embeddedCliGetToken(args, 3); // second
 8044060:	2103      	movs	r1, #3
 8044062:	68b8      	ldr	r0, [r7, #8]
 8044064:	f002 f8ee 	bl	8046244 <embeddedCliGetToken>
 8044068:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const char *arg4 = embeddedCliGetToken(args, 4); // day
 804406c:	2104      	movs	r1, #4
 804406e:	68b8      	ldr	r0, [r7, #8]
 8044070:	f002 f8e8 	bl	8046244 <embeddedCliGetToken>
 8044074:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    const char *arg5 = embeddedCliGetToken(args, 5); // month
 8044078:	2105      	movs	r1, #5
 804407a:	68b8      	ldr	r0, [r7, #8]
 804407c:	f002 f8e2 	bl	8046244 <embeddedCliGetToken>
 8044080:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *arg6 = embeddedCliGetToken(args, 6); // year
 8044084:	2106      	movs	r1, #6
 8044086:	68b8      	ldr	r0, [r7, #8]
 8044088:	f002 f8dc 	bl	8046244 <embeddedCliGetToken>
 804408c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    char buffer[100];
    if (arg1 == NULL || arg2 == NULL || arg3 == NULL ||
 8044090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8044094:	2b00      	cmp	r3, #0
 8044096:	d013      	beq.n	80440c0 <CMD_RtcSet+0x84>
 8044098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 804409c:	2b00      	cmp	r3, #0
 804409e:	d00f      	beq.n	80440c0 <CMD_RtcSet+0x84>
 80440a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80440a4:	2b00      	cmp	r3, #0
 80440a6:	d00b      	beq.n	80440c0 <CMD_RtcSet+0x84>
 80440a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80440ac:	2b00      	cmp	r3, #0
 80440ae:	d007      	beq.n	80440c0 <CMD_RtcSet+0x84>
        arg4 == NULL || arg5 == NULL || arg6 == NULL) {
 80440b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80440b4:	2b00      	cmp	r3, #0
 80440b6:	d003      	beq.n	80440c0 <CMD_RtcSet+0x84>
 80440b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80440bc:	2b00      	cmp	r3, #0
 80440be:	d10d      	bne.n	80440dc <CMD_RtcSet+0xa0>
        snprintf(buffer, sizeof(buffer),
 80440c0:	f107 0318 	add.w	r3, r7, #24
 80440c4:	4a62      	ldr	r2, [pc, #392]	@ (8044250 <CMD_RtcSet+0x214>)
 80440c6:	2164      	movs	r1, #100	@ 0x64
 80440c8:	4618      	mov	r0, r3
 80440ca:	f025 fa89 	bl	80695e0 <sniprintf>
                 "Usage: rtc_set <hour> <minute> <second> <day> <month> <year>");
        embeddedCliPrint(cli, buffer);
 80440ce:	f107 0318 	add.w	r3, r7, #24
 80440d2:	4619      	mov	r1, r3
 80440d4:	68f8      	ldr	r0, [r7, #12]
 80440d6:	f001 fff3 	bl	80460c0 <embeddedCliPrint>
        return;
 80440da:	e0b6      	b.n	804424a <CMD_RtcSet+0x20e>
    }

    int hour   = atoi(arg1);
 80440dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80440e0:	f025 f86c 	bl	80691bc <atoi>
 80440e4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    int minute = atoi(arg2);
 80440e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80440ec:	f025 f866 	bl	80691bc <atoi>
 80440f0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    int second = atoi(arg3);
 80440f4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80440f8:	f025 f860 	bl	80691bc <atoi>
 80440fc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    int day    = atoi(arg4);
 8044100:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8044104:	f025 f85a 	bl	80691bc <atoi>
 8044108:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    int month  = atoi(arg5);
 804410c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8044110:	f025 f854 	bl	80691bc <atoi>
 8044114:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int year   = atoi(arg6);
 8044118:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 804411c:	f025 f84e 	bl	80691bc <atoi>
 8044120:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (hour < 0 || hour > 23) {
 8044124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8044128:	2b00      	cmp	r3, #0
 804412a:	db03      	blt.n	8044134 <CMD_RtcSet+0xf8>
 804412c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8044130:	2b17      	cmp	r3, #23
 8044132:	dd04      	ble.n	804413e <CMD_RtcSet+0x102>
        embeddedCliPrint(cli, "Invalid hour (must be 0-23). Please enter again.");
 8044134:	4947      	ldr	r1, [pc, #284]	@ (8044254 <CMD_RtcSet+0x218>)
 8044136:	68f8      	ldr	r0, [r7, #12]
 8044138:	f001 ffc2 	bl	80460c0 <embeddedCliPrint>
        return;
 804413c:	e085      	b.n	804424a <CMD_RtcSet+0x20e>
    }
    if (minute < 0 || minute > 59) {
 804413e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8044142:	2b00      	cmp	r3, #0
 8044144:	db03      	blt.n	804414e <CMD_RtcSet+0x112>
 8044146:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804414a:	2b3b      	cmp	r3, #59	@ 0x3b
 804414c:	dd04      	ble.n	8044158 <CMD_RtcSet+0x11c>
        embeddedCliPrint(cli, "Invalid minute (must be 0-59). Please enter again.");
 804414e:	4942      	ldr	r1, [pc, #264]	@ (8044258 <CMD_RtcSet+0x21c>)
 8044150:	68f8      	ldr	r0, [r7, #12]
 8044152:	f001 ffb5 	bl	80460c0 <embeddedCliPrint>
        return;
 8044156:	e078      	b.n	804424a <CMD_RtcSet+0x20e>
    }
    if (second < 0 || second > 59) {
 8044158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 804415c:	2b00      	cmp	r3, #0
 804415e:	db03      	blt.n	8044168 <CMD_RtcSet+0x12c>
 8044160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8044164:	2b3b      	cmp	r3, #59	@ 0x3b
 8044166:	dd04      	ble.n	8044172 <CMD_RtcSet+0x136>
        embeddedCliPrint(cli, "Invalid second (must be 0-59). Please enter again.");
 8044168:	493c      	ldr	r1, [pc, #240]	@ (804425c <CMD_RtcSet+0x220>)
 804416a:	68f8      	ldr	r0, [r7, #12]
 804416c:	f001 ffa8 	bl	80460c0 <embeddedCliPrint>
        return;
 8044170:	e06b      	b.n	804424a <CMD_RtcSet+0x20e>
    }
    if (day < 1 || day > 31) {
 8044172:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8044176:	2b00      	cmp	r3, #0
 8044178:	dd03      	ble.n	8044182 <CMD_RtcSet+0x146>
 804417a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 804417e:	2b1f      	cmp	r3, #31
 8044180:	dd04      	ble.n	804418c <CMD_RtcSet+0x150>
        embeddedCliPrint(cli, "Invalid day (must be 1-31). Please enter again.");
 8044182:	4937      	ldr	r1, [pc, #220]	@ (8044260 <CMD_RtcSet+0x224>)
 8044184:	68f8      	ldr	r0, [r7, #12]
 8044186:	f001 ff9b 	bl	80460c0 <embeddedCliPrint>
        return;
 804418a:	e05e      	b.n	804424a <CMD_RtcSet+0x20e>
    }
    if (month < 1 || month > 12) {
 804418c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8044190:	2b00      	cmp	r3, #0
 8044192:	dd03      	ble.n	804419c <CMD_RtcSet+0x160>
 8044194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8044198:	2b0c      	cmp	r3, #12
 804419a:	dd04      	ble.n	80441a6 <CMD_RtcSet+0x16a>
        embeddedCliPrint(cli, "Invalid month (must be 1-12). Please enter again.");
 804419c:	4931      	ldr	r1, [pc, #196]	@ (8044264 <CMD_RtcSet+0x228>)
 804419e:	68f8      	ldr	r0, [r7, #12]
 80441a0:	f001 ff8e 	bl	80460c0 <embeddedCliPrint>
        return;
 80441a4:	e051      	b.n	804424a <CMD_RtcSet+0x20e>
    }
    if (year < 0 || year > 99) {
 80441a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80441aa:	2b00      	cmp	r3, #0
 80441ac:	db03      	blt.n	80441b6 <CMD_RtcSet+0x17a>
 80441ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80441b2:	2b63      	cmp	r3, #99	@ 0x63
 80441b4:	dd04      	ble.n	80441c0 <CMD_RtcSet+0x184>
        embeddedCliPrint(cli, "Invalid year (must be 2 digits, e.g., 25 for 2025). Please enter again.");
 80441b6:	492c      	ldr	r1, [pc, #176]	@ (8044268 <CMD_RtcSet+0x22c>)
 80441b8:	68f8      	ldr	r0, [r7, #12]
 80441ba:	f001 ff81 	bl	80460c0 <embeddedCliPrint>
        return;
 80441be:	e044      	b.n	804424a <CMD_RtcSet+0x20e>
    }

    s_DateTime dt;
    dt.hour   = (uint8_t)hour;
 80441c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80441c4:	b2db      	uxtb	r3, r3
 80441c6:	74fb      	strb	r3, [r7, #19]
    dt.minute = (uint8_t)minute;
 80441c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80441cc:	b2db      	uxtb	r3, r3
 80441ce:	753b      	strb	r3, [r7, #20]
    dt.second = (uint8_t)second;
 80441d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80441d4:	b2db      	uxtb	r3, r3
 80441d6:	757b      	strb	r3, [r7, #21]
    dt.day    = (uint8_t)day;
 80441d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80441dc:	b2db      	uxtb	r3, r3
 80441de:	743b      	strb	r3, [r7, #16]
    dt.month  = (uint8_t)month;
 80441e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80441e4:	b2db      	uxtb	r3, r3
 80441e6:	747b      	strb	r3, [r7, #17]
    dt.year   = (uint8_t)year;
 80441e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80441ec:	b2db      	uxtb	r3, r3
 80441ee:	74bb      	strb	r3, [r7, #18]

    Utils_SetRTC(&dt);
 80441f0:	f107 0310 	add.w	r3, r7, #16
 80441f4:	4618      	mov	r0, r3
 80441f6:	f009 fcd9 	bl	804dbac <Utils_SetRTC>
    RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 80441fa:	f008 f81b 	bl	804c234 <RV3129_GetHandle>
 80441fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
    RV3129_SetTime(hrtc, &dt);
 8044200:	f107 0310 	add.w	r3, r7, #16
 8044204:	4619      	mov	r1, r3
 8044206:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8044208:	f008 f86a 	bl	804c2e0 <RV3129_SetTime>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804420c:	7cfb      	ldrb	r3, [r7, #19]
    snprintf(buffer, sizeof(buffer),
 804420e:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8044210:	7d3b      	ldrb	r3, [r7, #20]
 8044212:	7d7a      	ldrb	r2, [r7, #21]
 8044214:	7c39      	ldrb	r1, [r7, #16]
 8044216:	7c78      	ldrb	r0, [r7, #17]
    snprintf(buffer, sizeof(buffer),
 8044218:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804421a:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(buffer, sizeof(buffer),
 804421c:	4605      	mov	r5, r0
 804421e:	f107 0018 	add.w	r0, r7, #24
 8044222:	9504      	str	r5, [sp, #16]
 8044224:	9403      	str	r4, [sp, #12]
 8044226:	9102      	str	r1, [sp, #8]
 8044228:	9201      	str	r2, [sp, #4]
 804422a:	9300      	str	r3, [sp, #0]
 804422c:	4633      	mov	r3, r6
 804422e:	4a0f      	ldr	r2, [pc, #60]	@ (804426c <CMD_RtcSet+0x230>)
 8044230:	2164      	movs	r1, #100	@ 0x64
 8044232:	f025 f9d5 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8044236:	f107 0318 	add.w	r3, r7, #24
 804423a:	4619      	mov	r1, r3
 804423c:	68f8      	ldr	r0, [r7, #12]
 804423e:	f001 ff3f 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044242:	490b      	ldr	r1, [pc, #44]	@ (8044270 <CMD_RtcSet+0x234>)
 8044244:	68f8      	ldr	r0, [r7, #12]
 8044246:	f001 ff3b 	bl	80460c0 <embeddedCliPrint>
}
 804424a:	37b4      	adds	r7, #180	@ 0xb4
 804424c:	46bd      	mov	sp, r7
 804424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8044250:	0806c120 	.word	0x0806c120
 8044254:	0806c160 	.word	0x0806c160
 8044258:	0806c194 	.word	0x0806c194
 804425c:	0806c1c8 	.word	0x0806c1c8
 8044260:	0806c1fc 	.word	0x0806c1fc
 8044264:	0806c22c 	.word	0x0806c22c
 8044268:	0806c260 	.word	0x0806c260
 804426c:	0806c2a8 	.word	0x0806c2a8
 8044270:	0806bd4c 	.word	0x0806bd4c

08044274 <CMD_RtcGet>:

static void CMD_RtcGet(EmbeddedCli *cli, char *args, void *context) {
 8044274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044276:	b0b7      	sub	sp, #220	@ 0xdc
 8044278:	af06      	add	r7, sp, #24
 804427a:	60f8      	str	r0, [r7, #12]
 804427c:	60b9      	str	r1, [r7, #8]
 804427e:	607a      	str	r2, [r7, #4]
    const char *mode = embeddedCliGetToken(args, 1);
 8044280:	2101      	movs	r1, #1
 8044282:	68b8      	ldr	r0, [r7, #8]
 8044284:	f001 ffde 	bl	8046244 <embeddedCliGetToken>
 8044288:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    char buffer[100];

    if (mode == NULL) {
 804428c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8044290:	2b00      	cmp	r3, #0
 8044292:	d10d      	bne.n	80442b0 <CMD_RtcGet+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_get <hard|soft|work|epoch|all>");
 8044294:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044298:	4ac8      	ldr	r2, [pc, #800]	@ (80445bc <CMD_RtcGet+0x348>)
 804429a:	2164      	movs	r1, #100	@ 0x64
 804429c:	4618      	mov	r0, r3
 804429e:	f025 f99f 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80442a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80442a6:	4619      	mov	r1, r3
 80442a8:	68f8      	ldr	r0, [r7, #12]
 80442aa:	f001 ff09 	bl	80460c0 <embeddedCliPrint>
 80442ae:	e182      	b.n	80445b6 <CMD_RtcGet+0x342>
        return;
    }

    //Hard
    if (strcmp(mode, "hard") == 0) {
 80442b0:	49c3      	ldr	r1, [pc, #780]	@ (80445c0 <CMD_RtcGet+0x34c>)
 80442b2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80442b6:	f7fc f813 	bl	80402e0 <strcmp>
 80442ba:	4603      	mov	r3, r0
 80442bc:	2b00      	cmp	r3, #0
 80442be:	d13f      	bne.n	8044340 <CMD_RtcGet+0xcc>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 80442c0:	f007 ffb8 	bl	804c234 <RV3129_GetHandle>
 80442c4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 80442c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80442cc:	4619      	mov	r1, r3
 80442ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80442d2:	f007 ffb9 	bl	804c248 <RV3129_GetTime>
 80442d6:	4603      	mov	r3, r0
 80442d8:	2b00      	cmp	r3, #0
 80442da:	d12c      	bne.n	8044336 <CMD_RtcGet+0xc2>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 80442dc:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 80442e0:	4619      	mov	r1, r3
 80442e2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80442e6:	f008 f83f 	bl	804c368 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 80442ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
            snprintf(buffer, sizeof(buffer),
 80442ee:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 80442f0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80442f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
                     currentTime.day, currentTime.month, currentTime.year, temp);
 80442f8:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 80442fc:	f897 0041 	ldrb.w	r0, [r7, #65]	@ 0x41
            snprintf(buffer, sizeof(buffer),
 8044300:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 8044302:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
            snprintf(buffer, sizeof(buffer),
 8044306:	4605      	mov	r5, r0
 8044308:	f9b7 003e 	ldrsh.w	r0, [r7, #62]	@ 0x3e
 804430c:	4606      	mov	r6, r0
 804430e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8044312:	9605      	str	r6, [sp, #20]
 8044314:	9504      	str	r5, [sp, #16]
 8044316:	9403      	str	r4, [sp, #12]
 8044318:	9102      	str	r1, [sp, #8]
 804431a:	9201      	str	r2, [sp, #4]
 804431c:	9300      	str	r3, [sp, #0]
 804431e:	4663      	mov	r3, ip
 8044320:	4aa8      	ldr	r2, [pc, #672]	@ (80445c4 <CMD_RtcGet+0x350>)
 8044322:	2164      	movs	r1, #100	@ 0x64
 8044324:	f025 f95c 	bl	80695e0 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8044328:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804432c:	4619      	mov	r1, r3
 804432e:	68f8      	ldr	r0, [r7, #12]
 8044330:	f001 fec6 	bl	80460c0 <embeddedCliPrint>
 8044334:	e13b      	b.n	80445ae <CMD_RtcGet+0x33a>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC\r\n");
 8044336:	49a4      	ldr	r1, [pc, #656]	@ (80445c8 <CMD_RtcGet+0x354>)
 8044338:	68f8      	ldr	r0, [r7, #12]
 804433a:	f001 fec1 	bl	80460c0 <embeddedCliPrint>
 804433e:	e136      	b.n	80445ae <CMD_RtcGet+0x33a>
        }
    } else if (strcmp(mode, "soft") == 0) {
 8044340:	49a2      	ldr	r1, [pc, #648]	@ (80445cc <CMD_RtcGet+0x358>)
 8044342:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8044346:	f7fb ffcb 	bl	80402e0 <strcmp>
 804434a:	4603      	mov	r3, r0
 804434c:	2b00      	cmp	r3, #0
 804434e:	d126      	bne.n	804439e <CMD_RtcGet+0x12a>
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8044350:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8044354:	4618      	mov	r0, r3
 8044356:	f009 fc13 	bl	804db80 <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 804435a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        snprintf(buffer, sizeof(buffer),
 804435e:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 8044360:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8044364:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
                 rtc.day, rtc.month, rtc.year);
 8044368:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 804436c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
        snprintf(buffer, sizeof(buffer),
 8044370:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 8044372:	f897 003a 	ldrb.w	r0, [r7, #58]	@ 0x3a
        snprintf(buffer, sizeof(buffer),
 8044376:	4605      	mov	r5, r0
 8044378:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 804437c:	9504      	str	r5, [sp, #16]
 804437e:	9403      	str	r4, [sp, #12]
 8044380:	9102      	str	r1, [sp, #8]
 8044382:	9201      	str	r2, [sp, #4]
 8044384:	9300      	str	r3, [sp, #0]
 8044386:	4633      	mov	r3, r6
 8044388:	4a91      	ldr	r2, [pc, #580]	@ (80445d0 <CMD_RtcGet+0x35c>)
 804438a:	2164      	movs	r1, #100	@ 0x64
 804438c:	f025 f928 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044390:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044394:	4619      	mov	r1, r3
 8044396:	68f8      	ldr	r0, [r7, #12]
 8044398:	f001 fe92 	bl	80460c0 <embeddedCliPrint>
 804439c:	e107      	b.n	80445ae <CMD_RtcGet+0x33a>
    } else if (strcmp(mode, "work") == 0) {
 804439e:	498d      	ldr	r1, [pc, #564]	@ (80445d4 <CMD_RtcGet+0x360>)
 80443a0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80443a4:	f7fb ff9c 	bl	80402e0 <strcmp>
 80443a8:	4603      	mov	r3, r0
 80443aa:	2b00      	cmp	r3, #0
 80443ac:	d12e      	bne.n	804440c <CMD_RtcGet+0x198>
        uint32_t days = 0;
 80443ae:	2300      	movs	r3, #0
 80443b0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t hours = 0, minutes = 0, seconds = 0;
 80443b2:	2300      	movs	r3, #0
 80443b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80443b8:	2300      	movs	r3, #0
 80443ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80443be:	2300      	movs	r3, #0
 80443c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 80443c4:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80443c8:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 80443cc:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 80443d0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80443d4:	f009 fc2e 	bl	804dc34 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 80443d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80443dc:	461c      	mov	r4, r3
 80443de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80443e2:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 80443e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80443e8:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 80443ea:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80443ee:	9102      	str	r1, [sp, #8]
 80443f0:	9201      	str	r2, [sp, #4]
 80443f2:	9300      	str	r3, [sp, #0]
 80443f4:	4623      	mov	r3, r4
 80443f6:	4a78      	ldr	r2, [pc, #480]	@ (80445d8 <CMD_RtcGet+0x364>)
 80443f8:	2164      	movs	r1, #100	@ 0x64
 80443fa:	f025 f8f1 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80443fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044402:	4619      	mov	r1, r3
 8044404:	68f8      	ldr	r0, [r7, #12]
 8044406:	f001 fe5b 	bl	80460c0 <embeddedCliPrint>
 804440a:	e0d0      	b.n	80445ae <CMD_RtcGet+0x33a>
    }else if (strcmp(mode, "epoch") == 0) {
 804440c:	4973      	ldr	r1, [pc, #460]	@ (80445dc <CMD_RtcGet+0x368>)
 804440e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8044412:	f7fb ff65 	bl	80402e0 <strcmp>
 8044416:	4603      	mov	r3, r0
 8044418:	2b00      	cmp	r3, #0
 804441a:	d112      	bne.n	8044442 <CMD_RtcGet+0x1ce>
        uint32_t epoch = Utils_GetEpoch();
 804441c:	f009 fbfc 	bl	804dc18 <Utils_GetEpoch>
 8044420:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 8044424:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8044428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 804442c:	4a6c      	ldr	r2, [pc, #432]	@ (80445e0 <CMD_RtcGet+0x36c>)
 804442e:	2164      	movs	r1, #100	@ 0x64
 8044430:	f025 f8d6 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044434:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044438:	4619      	mov	r1, r3
 804443a:	68f8      	ldr	r0, [r7, #12]
 804443c:	f001 fe40 	bl	80460c0 <embeddedCliPrint>
 8044440:	e0b5      	b.n	80445ae <CMD_RtcGet+0x33a>
    } else if (strcmp(mode, "all") == 0) {
 8044442:	4968      	ldr	r1, [pc, #416]	@ (80445e4 <CMD_RtcGet+0x370>)
 8044444:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8044448:	f7fb ff4a 	bl	80402e0 <strcmp>
 804444c:	4603      	mov	r3, r0
 804444e:	2b00      	cmp	r3, #0
 8044450:	f040 80a0 	bne.w	8044594 <CMD_RtcGet+0x320>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8044454:	f007 feee 	bl	804c234 <RV3129_GetHandle>
 8044458:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 804445c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8044460:	4619      	mov	r1, r3
 8044462:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8044466:	f007 feef 	bl	804c248 <RV3129_GetTime>
 804446a:	4603      	mov	r3, r0
 804446c:	2b00      	cmp	r3, #0
 804446e:	d12c      	bne.n	80444ca <CMD_RtcGet+0x256>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 8044470:	f107 0316 	add.w	r3, r7, #22
 8044474:	4619      	mov	r1, r3
 8044476:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 804447a:	f007 ff75 	bl	804c368 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 804447e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
            snprintf(buffer, sizeof(buffer),
 8044482:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 8044484:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8044488:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
                     currentTime.day, currentTime.month, currentTime.year, temp);
 804448c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8044490:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
            snprintf(buffer, sizeof(buffer),
 8044494:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 8044496:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
            snprintf(buffer, sizeof(buffer),
 804449a:	4605      	mov	r5, r0
 804449c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80444a0:	4606      	mov	r6, r0
 80444a2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80444a6:	9605      	str	r6, [sp, #20]
 80444a8:	9504      	str	r5, [sp, #16]
 80444aa:	9403      	str	r4, [sp, #12]
 80444ac:	9102      	str	r1, [sp, #8]
 80444ae:	9201      	str	r2, [sp, #4]
 80444b0:	9300      	str	r3, [sp, #0]
 80444b2:	4663      	mov	r3, ip
 80444b4:	4a43      	ldr	r2, [pc, #268]	@ (80445c4 <CMD_RtcGet+0x350>)
 80444b6:	2164      	movs	r1, #100	@ 0x64
 80444b8:	f025 f892 	bl	80695e0 <sniprintf>
            embeddedCliPrint(cli, buffer);
 80444bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80444c0:	4619      	mov	r1, r3
 80444c2:	68f8      	ldr	r0, [r7, #12]
 80444c4:	f001 fdfc 	bl	80460c0 <embeddedCliPrint>
 80444c8:	e003      	b.n	80444d2 <CMD_RtcGet+0x25e>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC");
 80444ca:	4947      	ldr	r1, [pc, #284]	@ (80445e8 <CMD_RtcGet+0x374>)
 80444cc:	68f8      	ldr	r0, [r7, #12]
 80444ce:	f001 fdf7 	bl	80460c0 <embeddedCliPrint>
        }
        // Soft RTC
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 80444d2:	f107 0320 	add.w	r3, r7, #32
 80444d6:	4618      	mov	r0, r3
 80444d8:	f009 fb52 	bl	804db80 <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 80444dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
        snprintf(buffer, sizeof(buffer),
 80444e0:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 80444e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80444e6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
                 rtc.day, rtc.month, rtc.year);
 80444ea:	f897 1020 	ldrb.w	r1, [r7, #32]
 80444ee:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
        snprintf(buffer, sizeof(buffer),
 80444f2:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 80444f4:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
        snprintf(buffer, sizeof(buffer),
 80444f8:	4605      	mov	r5, r0
 80444fa:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80444fe:	9504      	str	r5, [sp, #16]
 8044500:	9403      	str	r4, [sp, #12]
 8044502:	9102      	str	r1, [sp, #8]
 8044504:	9201      	str	r2, [sp, #4]
 8044506:	9300      	str	r3, [sp, #0]
 8044508:	4633      	mov	r3, r6
 804450a:	4a31      	ldr	r2, [pc, #196]	@ (80445d0 <CMD_RtcGet+0x35c>)
 804450c:	2164      	movs	r1, #100	@ 0x64
 804450e:	f025 f867 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044512:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044516:	4619      	mov	r1, r3
 8044518:	68f8      	ldr	r0, [r7, #12]
 804451a:	f001 fdd1 	bl	80460c0 <embeddedCliPrint>
        // Working uptime:
        uint32_t days = 0;
 804451e:	2300      	movs	r3, #0
 8044520:	61fb      	str	r3, [r7, #28]
        uint8_t hours = 0, minutes = 0, seconds = 0;
 8044522:	2300      	movs	r3, #0
 8044524:	76fb      	strb	r3, [r7, #27]
 8044526:	2300      	movs	r3, #0
 8044528:	76bb      	strb	r3, [r7, #26]
 804452a:	2300      	movs	r3, #0
 804452c:	767b      	strb	r3, [r7, #25]
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 804452e:	f107 0319 	add.w	r3, r7, #25
 8044532:	f107 021a 	add.w	r2, r7, #26
 8044536:	f107 011b 	add.w	r1, r7, #27
 804453a:	f107 001c 	add.w	r0, r7, #28
 804453e:	f009 fb79 	bl	804dc34 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 8044542:	7efb      	ldrb	r3, [r7, #27]
 8044544:	461c      	mov	r4, r3
 8044546:	7ebb      	ldrb	r3, [r7, #26]
 8044548:	7e7a      	ldrb	r2, [r7, #25]
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 804454a:	69f9      	ldr	r1, [r7, #28]
 804454c:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 804454e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8044552:	9102      	str	r1, [sp, #8]
 8044554:	9201      	str	r2, [sp, #4]
 8044556:	9300      	str	r3, [sp, #0]
 8044558:	4623      	mov	r3, r4
 804455a:	4a1f      	ldr	r2, [pc, #124]	@ (80445d8 <CMD_RtcGet+0x364>)
 804455c:	2164      	movs	r1, #100	@ 0x64
 804455e:	f025 f83f 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044562:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044566:	4619      	mov	r1, r3
 8044568:	68f8      	ldr	r0, [r7, #12]
 804456a:	f001 fda9 	bl	80460c0 <embeddedCliPrint>
        // Epoch
        uint32_t epoch = Utils_GetEpoch();
 804456e:	f009 fb53 	bl	804dc18 <Utils_GetEpoch>
 8044572:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 8044576:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 804457a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 804457e:	4a18      	ldr	r2, [pc, #96]	@ (80445e0 <CMD_RtcGet+0x36c>)
 8044580:	2164      	movs	r1, #100	@ 0x64
 8044582:	f025 f82d 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044586:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804458a:	4619      	mov	r1, r3
 804458c:	68f8      	ldr	r0, [r7, #12]
 804458e:	f001 fd97 	bl	80460c0 <embeddedCliPrint>
 8044592:	e00c      	b.n	80445ae <CMD_RtcGet+0x33a>
    } else {
        snprintf(buffer, sizeof(buffer), "Unknown mode. Use: rtc_get <hard|soft|work|epoch|all>");
 8044594:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8044598:	4a14      	ldr	r2, [pc, #80]	@ (80445ec <CMD_RtcGet+0x378>)
 804459a:	2164      	movs	r1, #100	@ 0x64
 804459c:	4618      	mov	r0, r3
 804459e:	f025 f81f 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80445a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80445a6:	4619      	mov	r1, r3
 80445a8:	68f8      	ldr	r0, [r7, #12]
 80445aa:	f001 fd89 	bl	80460c0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80445ae:	4910      	ldr	r1, [pc, #64]	@ (80445f0 <CMD_RtcGet+0x37c>)
 80445b0:	68f8      	ldr	r0, [r7, #12]
 80445b2:	f001 fd85 	bl	80460c0 <embeddedCliPrint>
}
 80445b6:	37c4      	adds	r7, #196	@ 0xc4
 80445b8:	46bd      	mov	sp, r7
 80445ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80445bc:	0806c2d8 	.word	0x0806c2d8
 80445c0:	0806c304 	.word	0x0806c304
 80445c4:	0806c30c 	.word	0x0806c30c
 80445c8:	0806c354 	.word	0x0806c354
 80445cc:	0806c370 	.word	0x0806c370
 80445d0:	0806c378 	.word	0x0806c378
 80445d4:	0806c3b4 	.word	0x0806c3b4
 80445d8:	0806c3bc 	.word	0x0806c3bc
 80445dc:	0806c3f0 	.word	0x0806c3f0
 80445e0:	0806c3f8 	.word	0x0806c3f8
 80445e4:	0806c408 	.word	0x0806c408
 80445e8:	0806c40c 	.word	0x0806c40c
 80445ec:	0806c424 	.word	0x0806c424
 80445f0:	0806bd4c 	.word	0x0806bd4c

080445f4 <CMD_RtcSetEpoch>:

static void CMD_RtcSetEpoch(EmbeddedCli *cli, char *args, void *context) {
 80445f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80445f6:	b0a9      	sub	sp, #164	@ 0xa4
 80445f8:	af06      	add	r7, sp, #24
 80445fa:	60f8      	str	r0, [r7, #12]
 80445fc:	60b9      	str	r1, [r7, #8]
 80445fe:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8044600:	2101      	movs	r1, #1
 8044602:	68b8      	ldr	r0, [r7, #8]
 8044604:	f001 fe1e 	bl	8046244 <embeddedCliGetToken>
 8044608:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    if (arg1 == NULL) {
 804460c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8044610:	2b00      	cmp	r3, #0
 8044612:	d10d      	bne.n	8044630 <CMD_RtcSetEpoch+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_setepoch <epoch>");
 8044614:	f107 0318 	add.w	r3, r7, #24
 8044618:	4a2f      	ldr	r2, [pc, #188]	@ (80446d8 <CMD_RtcSetEpoch+0xe4>)
 804461a:	2164      	movs	r1, #100	@ 0x64
 804461c:	4618      	mov	r0, r3
 804461e:	f024 ffdf 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044622:	f107 0318 	add.w	r3, r7, #24
 8044626:	4619      	mov	r1, r3
 8044628:	68f8      	ldr	r0, [r7, #12]
 804462a:	f001 fd49 	bl	80460c0 <embeddedCliPrint>
        return;
 804462e:	e050      	b.n	80446d2 <CMD_RtcSetEpoch+0xde>
    }

    uint32_t epoch = (uint32_t)strtoul(arg1, NULL, 0);
 8044630:	2200      	movs	r2, #0
 8044632:	2100      	movs	r1, #0
 8044634:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8044638:	f024 fef4 	bl	8069424 <strtoul>
 804463c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (epoch < EPOCH_OFFSET_UNIX) {
 8044640:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8044644:	4a25      	ldr	r2, [pc, #148]	@ (80446dc <CMD_RtcSetEpoch+0xe8>)
 8044646:	4293      	cmp	r3, r2
 8044648:	d80d      	bhi.n	8044666 <CMD_RtcSetEpoch+0x72>
        snprintf(buffer, sizeof(buffer), "Invalid epoch. Must be >= %lu", (unsigned long)EPOCH_OFFSET_UNIX);
 804464a:	f107 0018 	add.w	r0, r7, #24
 804464e:	4b24      	ldr	r3, [pc, #144]	@ (80446e0 <CMD_RtcSetEpoch+0xec>)
 8044650:	4a24      	ldr	r2, [pc, #144]	@ (80446e4 <CMD_RtcSetEpoch+0xf0>)
 8044652:	2164      	movs	r1, #100	@ 0x64
 8044654:	f024 ffc4 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044658:	f107 0318 	add.w	r3, r7, #24
 804465c:	4619      	mov	r1, r3
 804465e:	68f8      	ldr	r0, [r7, #12]
 8044660:	f001 fd2e 	bl	80460c0 <embeddedCliPrint>
        return;
 8044664:	e035      	b.n	80446d2 <CMD_RtcSetEpoch+0xde>
    }

    Utils_SetEpoch(epoch);
 8044666:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 804466a:	f009 fab5 	bl	804dbd8 <Utils_SetEpoch>

    s_DateTime dt;
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 804466e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8044672:	4b1d      	ldr	r3, [pc, #116]	@ (80446e8 <CMD_RtcSetEpoch+0xf4>)
 8044674:	4413      	add	r3, r2
 8044676:	f107 0210 	add.w	r2, r7, #16
 804467a:	4611      	mov	r1, r2
 804467c:	4618      	mov	r0, r3
 804467e:	f008 ffe3 	bl	804d648 <EpochToDateTime>
    RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8044682:	f007 fdd7 	bl	804c234 <RV3129_GetHandle>
 8044686:	67f8      	str	r0, [r7, #124]	@ 0x7c
    RV3129_SetTime(hrtc, &dt);
 8044688:	f107 0310 	add.w	r3, r7, #16
 804468c:	4619      	mov	r1, r3
 804468e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8044690:	f007 fe26 	bl	804c2e0 <RV3129_SetTime>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8044694:	7cfb      	ldrb	r3, [r7, #19]
    snprintf(buffer, sizeof(buffer),
 8044696:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8044698:	7d3b      	ldrb	r3, [r7, #20]
 804469a:	7d7a      	ldrb	r2, [r7, #21]
 804469c:	7c39      	ldrb	r1, [r7, #16]
 804469e:	7c78      	ldrb	r0, [r7, #17]
    snprintf(buffer, sizeof(buffer),
 80446a0:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 80446a2:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(buffer, sizeof(buffer),
 80446a4:	4605      	mov	r5, r0
 80446a6:	f107 0018 	add.w	r0, r7, #24
 80446aa:	9504      	str	r5, [sp, #16]
 80446ac:	9403      	str	r4, [sp, #12]
 80446ae:	9102      	str	r1, [sp, #8]
 80446b0:	9201      	str	r2, [sp, #4]
 80446b2:	9300      	str	r3, [sp, #0]
 80446b4:	4633      	mov	r3, r6
 80446b6:	4a0d      	ldr	r2, [pc, #52]	@ (80446ec <CMD_RtcSetEpoch+0xf8>)
 80446b8:	2164      	movs	r1, #100	@ 0x64
 80446ba:	f024 ff91 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80446be:	f107 0318 	add.w	r3, r7, #24
 80446c2:	4619      	mov	r1, r3
 80446c4:	68f8      	ldr	r0, [r7, #12]
 80446c6:	f001 fcfb 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80446ca:	4909      	ldr	r1, [pc, #36]	@ (80446f0 <CMD_RtcSetEpoch+0xfc>)
 80446cc:	68f8      	ldr	r0, [r7, #12]
 80446ce:	f001 fcf7 	bl	80460c0 <embeddedCliPrint>
}
 80446d2:	378c      	adds	r7, #140	@ 0x8c
 80446d4:	46bd      	mov	sp, r7
 80446d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80446d8:	0806c45c 	.word	0x0806c45c
 80446dc:	386d437f 	.word	0x386d437f
 80446e0:	386d4380 	.word	0x386d4380
 80446e4:	0806c478 	.word	0x0806c478
 80446e8:	c792bc80 	.word	0xc792bc80
 80446ec:	0806c2a8 	.word	0x0806c2a8
 80446f0:	0806bd4c 	.word	0x0806bd4c

080446f4 <CMD_FramWrite>:


static void CMD_FramWrite(EmbeddedCli *cli, char *args, void *context) {
 80446f4:	b580      	push	{r7, lr}
 80446f6:	b0a4      	sub	sp, #144	@ 0x90
 80446f8:	af02      	add	r7, sp, #8
 80446fa:	60f8      	str	r0, [r7, #12]
 80446fc:	60b9      	str	r1, [r7, #8]
 80446fe:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 8044700:	2101      	movs	r1, #1
 8044702:	68b8      	ldr	r0, [r7, #8]
 8044704:	f001 fd9e 	bl	8046244 <embeddedCliGetToken>
 8044708:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // Value
 804470c:	2102      	movs	r1, #2
 804470e:	68b8      	ldr	r0, [r7, #8]
 8044710:	f001 fd98 	bl	8046244 <embeddedCliGetToken>
 8044714:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 8044718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 804471c:	2b00      	cmp	r3, #0
 804471e:	d003      	beq.n	8044728 <CMD_FramWrite+0x34>
 8044720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8044724:	2b00      	cmp	r3, #0
 8044726:	d10d      	bne.n	8044744 <CMD_FramWrite+0x50>
        snprintf(buffer, sizeof(buffer), "Usage: fram_write [address] [value]");
 8044728:	f107 0314 	add.w	r3, r7, #20
 804472c:	4a25      	ldr	r2, [pc, #148]	@ (80447c4 <CMD_FramWrite+0xd0>)
 804472e:	2164      	movs	r1, #100	@ 0x64
 8044730:	4618      	mov	r0, r3
 8044732:	f024 ff55 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044736:	f107 0314 	add.w	r3, r7, #20
 804473a:	4619      	mov	r1, r3
 804473c:	68f8      	ldr	r0, [r7, #12]
 804473e:	f001 fcbf 	bl	80460c0 <embeddedCliPrint>
 8044742:	e03c      	b.n	80447be <CMD_FramWrite+0xca>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 8044744:	2200      	movs	r2, #0
 8044746:	2100      	movs	r1, #0
 8044748:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 804474c:	f024 fdf2 	bl	8069334 <strtol>
 8044750:	4603      	mov	r3, r0
 8044752:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t value = (uint8_t)strtol(arg2, NULL, 0);
 8044756:	2200      	movs	r2, #0
 8044758:	2100      	movs	r1, #0
 804475a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 804475e:	f024 fde9 	bl	8069334 <strtol>
 8044762:	4603      	mov	r3, r0
 8044764:	b2db      	uxtb	r3, r3
 8044766:	74fb      	strb	r3, [r7, #19]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8044768:	f007 fe94 	bl	804c494 <FRAM_SPI_GetHandle>
 804476c:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (FRAM_SPI_WriteMem(hfram, address, &value, 1) == E_OK) {
 804476e:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 8044772:	f107 0213 	add.w	r2, r7, #19
 8044776:	2301      	movs	r3, #1
 8044778:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 804477a:	f007 fef3 	bl	804c564 <FRAM_SPI_WriteMem>
 804477e:	4603      	mov	r3, r0
 8044780:	2b00      	cmp	r3, #0
 8044782:	d10a      	bne.n	804479a <CMD_FramWrite+0xa6>
        snprintf(buffer, sizeof(buffer), "Write OK: Addr 0x%04X = 0x%02X", address, value);
 8044784:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8044788:	7cfa      	ldrb	r2, [r7, #19]
 804478a:	f107 0014 	add.w	r0, r7, #20
 804478e:	9200      	str	r2, [sp, #0]
 8044790:	4a0d      	ldr	r2, [pc, #52]	@ (80447c8 <CMD_FramWrite+0xd4>)
 8044792:	2164      	movs	r1, #100	@ 0x64
 8044794:	f024 ff24 	bl	80695e0 <sniprintf>
 8044798:	e007      	b.n	80447aa <CMD_FramWrite+0xb6>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Write Error at 0x%04X", address);
 804479a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 804479e:	f107 0014 	add.w	r0, r7, #20
 80447a2:	4a0a      	ldr	r2, [pc, #40]	@ (80447cc <CMD_FramWrite+0xd8>)
 80447a4:	2164      	movs	r1, #100	@ 0x64
 80447a6:	f024 ff1b 	bl	80695e0 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 80447aa:	f107 0314 	add.w	r3, r7, #20
 80447ae:	4619      	mov	r1, r3
 80447b0:	68f8      	ldr	r0, [r7, #12]
 80447b2:	f001 fc85 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80447b6:	4906      	ldr	r1, [pc, #24]	@ (80447d0 <CMD_FramWrite+0xdc>)
 80447b8:	68f8      	ldr	r0, [r7, #12]
 80447ba:	f001 fc81 	bl	80460c0 <embeddedCliPrint>
}
 80447be:	3788      	adds	r7, #136	@ 0x88
 80447c0:	46bd      	mov	sp, r7
 80447c2:	bd80      	pop	{r7, pc}
 80447c4:	0806c498 	.word	0x0806c498
 80447c8:	0806c4bc 	.word	0x0806c4bc
 80447cc:	0806c4dc 	.word	0x0806c4dc
 80447d0:	0806bd4c 	.word	0x0806bd4c

080447d4 <CMD_FramRead>:

static void CMD_FramRead(EmbeddedCli *cli, char *args, void *context) {
 80447d4:	b580      	push	{r7, lr}
 80447d6:	b0a4      	sub	sp, #144	@ 0x90
 80447d8:	af02      	add	r7, sp, #8
 80447da:	60f8      	str	r0, [r7, #12]
 80447dc:	60b9      	str	r1, [r7, #8]
 80447de:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 80447e0:	2101      	movs	r1, #1
 80447e2:	68b8      	ldr	r0, [r7, #8]
 80447e4:	f001 fd2e 	bl	8046244 <embeddedCliGetToken>
 80447e8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    char buffer[100];

    if (arg1 == NULL) {
 80447ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80447f0:	2b00      	cmp	r3, #0
 80447f2:	d10d      	bne.n	8044810 <CMD_FramRead+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: fram_read [address]");
 80447f4:	f107 0318 	add.w	r3, r7, #24
 80447f8:	4a22      	ldr	r2, [pc, #136]	@ (8044884 <CMD_FramRead+0xb0>)
 80447fa:	2164      	movs	r1, #100	@ 0x64
 80447fc:	4618      	mov	r0, r3
 80447fe:	f024 feef 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044802:	f107 0318 	add.w	r3, r7, #24
 8044806:	4619      	mov	r1, r3
 8044808:	68f8      	ldr	r0, [r7, #12]
 804480a:	f001 fc59 	bl	80460c0 <embeddedCliPrint>
 804480e:	e035      	b.n	804487c <CMD_FramRead+0xa8>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 8044810:	2200      	movs	r2, #0
 8044812:	2100      	movs	r1, #0
 8044814:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8044818:	f024 fd8c 	bl	8069334 <strtol>
 804481c:	4603      	mov	r3, r0
 804481e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    uint8_t readData = 0;
 8044822:	2300      	movs	r3, #0
 8044824:	75fb      	strb	r3, [r7, #23]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8044826:	f007 fe35 	bl	804c494 <FRAM_SPI_GetHandle>
 804482a:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (FRAM_SPI_ReadMem(hfram, address, &readData, 1) == E_OK) {
 804482c:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 8044830:	f107 0217 	add.w	r2, r7, #23
 8044834:	2301      	movs	r3, #1
 8044836:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8044838:	f007 ff23 	bl	804c682 <FRAM_SPI_ReadMem>
 804483c:	4603      	mov	r3, r0
 804483e:	2b00      	cmp	r3, #0
 8044840:	d10a      	bne.n	8044858 <CMD_FramRead+0x84>
        snprintf(buffer, sizeof(buffer), "Read OK: Addr 0x%04X = 0x%02X", address, readData);
 8044842:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8044846:	7dfa      	ldrb	r2, [r7, #23]
 8044848:	f107 0018 	add.w	r0, r7, #24
 804484c:	9200      	str	r2, [sp, #0]
 804484e:	4a0e      	ldr	r2, [pc, #56]	@ (8044888 <CMD_FramRead+0xb4>)
 8044850:	2164      	movs	r1, #100	@ 0x64
 8044852:	f024 fec5 	bl	80695e0 <sniprintf>
 8044856:	e007      	b.n	8044868 <CMD_FramRead+0x94>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Read Error at 0x%04X", address);
 8044858:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 804485c:	f107 0018 	add.w	r0, r7, #24
 8044860:	4a0a      	ldr	r2, [pc, #40]	@ (804488c <CMD_FramRead+0xb8>)
 8044862:	2164      	movs	r1, #100	@ 0x64
 8044864:	f024 febc 	bl	80695e0 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 8044868:	f107 0318 	add.w	r3, r7, #24
 804486c:	4619      	mov	r1, r3
 804486e:	68f8      	ldr	r0, [r7, #12]
 8044870:	f001 fc26 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044874:	4906      	ldr	r1, [pc, #24]	@ (8044890 <CMD_FramRead+0xbc>)
 8044876:	68f8      	ldr	r0, [r7, #12]
 8044878:	f001 fc22 	bl	80460c0 <embeddedCliPrint>
}
 804487c:	3788      	adds	r7, #136	@ 0x88
 804487e:	46bd      	mov	sp, r7
 8044880:	bd80      	pop	{r7, pc}
 8044882:	bf00      	nop
 8044884:	0806c4f8 	.word	0x0806c4f8
 8044888:	0806c514 	.word	0x0806c514
 804488c:	0806c534 	.word	0x0806c534
 8044890:	0806bd4c 	.word	0x0806bd4c

08044894 <CMD_ls>:

static void CMD_ls(EmbeddedCli *cli, char *args, void *context) {
 8044894:	b580      	push	{r7, lr}
 8044896:	b084      	sub	sp, #16
 8044898:	af00      	add	r7, sp, #0
 804489a:	60f8      	str	r0, [r7, #12]
 804489c:	60b9      	str	r1, [r7, #8]
 804489e:	607a      	str	r2, [r7, #4]
    FS_ListFiles_path(cli);
 80448a0:	68f8      	ldr	r0, [r7, #12]
 80448a2:	f003 fe03 	bl	80484ac <FS_ListFiles_path>
    embeddedCliPrint(cli, "");
 80448a6:	4904      	ldr	r1, [pc, #16]	@ (80448b8 <CMD_ls+0x24>)
 80448a8:	68f8      	ldr	r0, [r7, #12]
 80448aa:	f001 fc09 	bl	80460c0 <embeddedCliPrint>
}
 80448ae:	bf00      	nop
 80448b0:	3710      	adds	r7, #16
 80448b2:	46bd      	mov	sp, r7
 80448b4:	bd80      	pop	{r7, pc}
 80448b6:	bf00      	nop
 80448b8:	0806bd4c 	.word	0x0806bd4c

080448bc <CMD_sd_lockin>:

static void CMD_sd_lockin(EmbeddedCli *cli, char *args, void *context) {
 80448bc:	b580      	push	{r7, lr}
 80448be:	b086      	sub	sp, #24
 80448c0:	af00      	add	r7, sp, #0
 80448c2:	60f8      	str	r0, [r7, #12]
 80448c4:	60b9      	str	r1, [r7, #8]
 80448c6:	607a      	str	r2, [r7, #4]
	SD_Lockin();
 80448c8:	f003 fa94 	bl	8047df4 <SD_Lockin>
	SDMMC1_Init();
 80448cc:	f019 fa46 	bl	805dd5c <SDMMC1_Init>
    embeddedCliPrint(cli, "SD filesystem locked-in");
 80448d0:	490d      	ldr	r1, [pc, #52]	@ (8044908 <CMD_sd_lockin+0x4c>)
 80448d2:	68f8      	ldr	r0, [r7, #12]
 80448d4:	f001 fbf4 	bl	80460c0 <embeddedCliPrint>
	Std_ReturnType ret = Link_SDFS_Driver();
 80448d8:	f003 fc00 	bl	80480dc <Link_SDFS_Driver>
 80448dc:	4603      	mov	r3, r0
 80448de:	75fb      	strb	r3, [r7, #23]
	if(ret != E_OK){
 80448e0:	7dfb      	ldrb	r3, [r7, #23]
 80448e2:	2b00      	cmp	r3, #0
 80448e4:	d004      	beq.n	80448f0 <CMD_sd_lockin+0x34>
        embeddedCliPrint(cli, "[Link FATFS Fail]");
 80448e6:	4909      	ldr	r1, [pc, #36]	@ (804490c <CMD_sd_lockin+0x50>)
 80448e8:	68f8      	ldr	r0, [r7, #12]
 80448ea:	f001 fbe9 	bl	80460c0 <embeddedCliPrint>
 80448ee:	e003      	b.n	80448f8 <CMD_sd_lockin+0x3c>
	}else{
        embeddedCliPrint(cli, "[Link FATFS Successfully]");
 80448f0:	4907      	ldr	r1, [pc, #28]	@ (8044910 <CMD_sd_lockin+0x54>)
 80448f2:	68f8      	ldr	r0, [r7, #12]
 80448f4:	f001 fbe4 	bl	80460c0 <embeddedCliPrint>
	}
    embeddedCliPrint(cli, "");
 80448f8:	4906      	ldr	r1, [pc, #24]	@ (8044914 <CMD_sd_lockin+0x58>)
 80448fa:	68f8      	ldr	r0, [r7, #12]
 80448fc:	f001 fbe0 	bl	80460c0 <embeddedCliPrint>
}
 8044900:	bf00      	nop
 8044902:	3718      	adds	r7, #24
 8044904:	46bd      	mov	sp, r7
 8044906:	bd80      	pop	{r7, pc}
 8044908:	0806c550 	.word	0x0806c550
 804490c:	0806c568 	.word	0x0806c568
 8044910:	0806c57c 	.word	0x0806c57c
 8044914:	0806bd4c 	.word	0x0806bd4c

08044918 <CMD_sd_release>:

static void CMD_sd_release(EmbeddedCli *cli, char *args, void *context) {
 8044918:	b580      	push	{r7, lr}
 804491a:	b084      	sub	sp, #16
 804491c:	af00      	add	r7, sp, #0
 804491e:	60f8      	str	r0, [r7, #12]
 8044920:	60b9      	str	r1, [r7, #8]
 8044922:	607a      	str	r2, [r7, #4]
	SDMMC1_DeInit();
 8044924:	f019 fa10 	bl	805dd48 <SDMMC1_DeInit>
    SD_Release();
 8044928:	f003 fa76 	bl	8047e18 <SD_Release>
    embeddedCliPrint(cli, "SD filesystem released");
 804492c:	4905      	ldr	r1, [pc, #20]	@ (8044944 <CMD_sd_release+0x2c>)
 804492e:	68f8      	ldr	r0, [r7, #12]
 8044930:	f001 fbc6 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044934:	4904      	ldr	r1, [pc, #16]	@ (8044948 <CMD_sd_release+0x30>)
 8044936:	68f8      	ldr	r0, [r7, #12]
 8044938:	f001 fbc2 	bl	80460c0 <embeddedCliPrint>
}
 804493c:	bf00      	nop
 804493e:	3710      	adds	r7, #16
 8044940:	46bd      	mov	sp, r7
 8044942:	bd80      	pop	{r7, pc}
 8044944:	0806c598 	.word	0x0806c598
 8044948:	0806bd4c 	.word	0x0806bd4c

0804494c <CMD_vim_bypass>:

static void CMD_vim_bypass(EmbeddedCli *cli, char *args, void *context) {
 804494c:	b580      	push	{r7, lr}
 804494e:	b0a6      	sub	sp, #152	@ 0x98
 8044950:	af00      	add	r7, sp, #0
 8044952:	60f8      	str	r0, [r7, #12]
 8044954:	60b9      	str	r1, [r7, #8]
 8044956:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8044958:	2101      	movs	r1, #1
 804495a:	68b8      	ldr	r0, [r7, #8]
 804495c:	f001 fc72 	bl	8046244 <embeddedCliGetToken>
 8044960:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *content = embeddedCliGetToken(args, 2);
 8044964:	2102      	movs	r1, #2
 8044966:	68b8      	ldr	r0, [r7, #8]
 8044968:	f001 fc6c 	bl	8046244 <embeddedCliGetToken>
 804496c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[128];

    if (filename == NULL || content == NULL) {
 8044970:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8044974:	2b00      	cmp	r3, #0
 8044976:	d003      	beq.n	8044980 <CMD_vim_bypass+0x34>
 8044978:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804497c:	2b00      	cmp	r3, #0
 804497e:	d104      	bne.n	804498a <CMD_vim_bypass+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 8044980:	4911      	ldr	r1, [pc, #68]	@ (80449c8 <CMD_vim_bypass+0x7c>)
 8044982:	68f8      	ldr	r0, [r7, #12]
 8044984:	f001 fb9c 	bl	80460c0 <embeddedCliPrint>
 8044988:	e01b      	b.n	80449c2 <CMD_vim_bypass+0x76>
        return;
    }

    if (Vim_SDFS(cli, filename, content) == 0) {
 804498a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 804498e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8044992:	68f8      	ldr	r0, [r7, #12]
 8044994:	f003 fc9e 	bl	80482d4 <Vim_SDFS>
 8044998:	4603      	mov	r3, r0
 804499a:	2b00      	cmp	r3, #0
 804499c:	d10d      	bne.n	80449ba <CMD_vim_bypass+0x6e>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 804499e:	f107 0010 	add.w	r0, r7, #16
 80449a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80449a6:	4a09      	ldr	r2, [pc, #36]	@ (80449cc <CMD_vim_bypass+0x80>)
 80449a8:	2180      	movs	r1, #128	@ 0x80
 80449aa:	f024 fe19 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80449ae:	f107 0310 	add.w	r3, r7, #16
 80449b2:	4619      	mov	r1, r3
 80449b4:	68f8      	ldr	r0, [r7, #12]
 80449b6:	f001 fb83 	bl	80460c0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80449ba:	4905      	ldr	r1, [pc, #20]	@ (80449d0 <CMD_vim_bypass+0x84>)
 80449bc:	68f8      	ldr	r0, [r7, #12]
 80449be:	f001 fb7f 	bl	80460c0 <embeddedCliPrint>
}
 80449c2:	3798      	adds	r7, #152	@ 0x98
 80449c4:	46bd      	mov	sp, r7
 80449c6:	bd80      	pop	{r7, pc}
 80449c8:	0806c5b0 	.word	0x0806c5b0
 80449cc:	0806c5d0 	.word	0x0806c5d0
 80449d0:	0806bd4c 	.word	0x0806bd4c

080449d4 <CMD_vim>:

static void CMD_vim(EmbeddedCli *cli, char *args, void *context) {
 80449d4:	b580      	push	{r7, lr}
 80449d6:	b0a8      	sub	sp, #160	@ 0xa0
 80449d8:	af00      	add	r7, sp, #0
 80449da:	60f8      	str	r0, [r7, #12]
 80449dc:	60b9      	str	r1, [r7, #8]
 80449de:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 80449e0:	2101      	movs	r1, #1
 80449e2:	68b8      	ldr	r0, [r7, #8]
 80449e4:	f001 fc2e 	bl	8046244 <embeddedCliGetToken>
 80449e8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *content = embeddedCliGetToken(args, 2);
 80449ec:	2102      	movs	r1, #2
 80449ee:	68b8      	ldr	r0, [r7, #8]
 80449f0:	f001 fc28 	bl	8046244 <embeddedCliGetToken>
 80449f4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    char buffer[128];

    if (filename == NULL || content == NULL) {
 80449f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80449fc:	2b00      	cmp	r3, #0
 80449fe:	d003      	beq.n	8044a08 <CMD_vim+0x34>
 8044a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8044a04:	2b00      	cmp	r3, #0
 8044a06:	d104      	bne.n	8044a12 <CMD_vim+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 8044a08:	491c      	ldr	r1, [pc, #112]	@ (8044a7c <CMD_vim+0xa8>)
 8044a0a:	68f8      	ldr	r0, [r7, #12]
 8044a0c:	f001 fb58 	bl	80460c0 <embeddedCliPrint>
        return;
 8044a10:	e031      	b.n	8044a76 <CMD_vim+0xa2>
    }

    size_t content_len = strlen(content);
 8044a12:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8044a16:	f7fb fc6d 	bl	80402f4 <strlen>
 8044a1a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (content_len > (8 * 1024) ){
 8044a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8044a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044a26:	d904      	bls.n	8044a32 <CMD_vim+0x5e>
        embeddedCliPrint(cli, "Content exceeds 8KB limit");
 8044a28:	4915      	ldr	r1, [pc, #84]	@ (8044a80 <CMD_vim+0xac>)
 8044a2a:	68f8      	ldr	r0, [r7, #12]
 8044a2c:	f001 fb48 	bl	80460c0 <embeddedCliPrint>
        return;
 8044a30:	e021      	b.n	8044a76 <CMD_vim+0xa2>
    }

    if (FS_Request_Write(filename, (uint8_t*)content, content_len) == E_OK) {
 8044a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8044a36:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8044a3a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8044a3e:	f003 faa5 	bl	8047f8c <FS_Request_Write>
 8044a42:	4603      	mov	r3, r0
 8044a44:	2b00      	cmp	r3, #0
 8044a46:	d10e      	bne.n	8044a66 <CMD_vim+0x92>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 8044a48:	f107 0014 	add.w	r0, r7, #20
 8044a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8044a50:	4a0c      	ldr	r2, [pc, #48]	@ (8044a84 <CMD_vim+0xb0>)
 8044a52:	2180      	movs	r1, #128	@ 0x80
 8044a54:	f024 fdc4 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044a58:	f107 0314 	add.w	r3, r7, #20
 8044a5c:	4619      	mov	r1, r3
 8044a5e:	68f8      	ldr	r0, [r7, #12]
 8044a60:	f001 fb2e 	bl	80460c0 <embeddedCliPrint>
 8044a64:	e003      	b.n	8044a6e <CMD_vim+0x9a>
    } else {
        embeddedCliPrint(cli, "Failed to write to file");
 8044a66:	4908      	ldr	r1, [pc, #32]	@ (8044a88 <CMD_vim+0xb4>)
 8044a68:	68f8      	ldr	r0, [r7, #12]
 8044a6a:	f001 fb29 	bl	80460c0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8044a6e:	4907      	ldr	r1, [pc, #28]	@ (8044a8c <CMD_vim+0xb8>)
 8044a70:	68f8      	ldr	r0, [r7, #12]
 8044a72:	f001 fb25 	bl	80460c0 <embeddedCliPrint>
}
 8044a76:	37a0      	adds	r7, #160	@ 0xa0
 8044a78:	46bd      	mov	sp, r7
 8044a7a:	bd80      	pop	{r7, pc}
 8044a7c:	0806c5b0 	.word	0x0806c5b0
 8044a80:	0806c5e8 	.word	0x0806c5e8
 8044a84:	0806c5d0 	.word	0x0806c5d0
 8044a88:	0806c604 	.word	0x0806c604
 8044a8c:	0806bd4c 	.word	0x0806bd4c

08044a90 <CMD_cat>:

static void CMD_cat(EmbeddedCli *cli, char *args, void *context) {
 8044a90:	b580      	push	{r7, lr}
 8044a92:	b086      	sub	sp, #24
 8044a94:	af00      	add	r7, sp, #0
 8044a96:	60f8      	str	r0, [r7, #12]
 8044a98:	60b9      	str	r1, [r7, #8]
 8044a9a:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8044a9c:	2101      	movs	r1, #1
 8044a9e:	68b8      	ldr	r0, [r7, #8]
 8044aa0:	f001 fbd0 	bl	8046244 <embeddedCliGetToken>
 8044aa4:	6178      	str	r0, [r7, #20]

    if (filename == NULL) {
 8044aa6:	697b      	ldr	r3, [r7, #20]
 8044aa8:	2b00      	cmp	r3, #0
 8044aaa:	d104      	bne.n	8044ab6 <CMD_cat+0x26>
        embeddedCliPrint(cli, "Usage: cat <filename>");
 8044aac:	4907      	ldr	r1, [pc, #28]	@ (8044acc <CMD_cat+0x3c>)
 8044aae:	68f8      	ldr	r0, [r7, #12]
 8044ab0:	f001 fb06 	bl	80460c0 <embeddedCliPrint>
        return;
 8044ab4:	e007      	b.n	8044ac6 <CMD_cat+0x36>
    }

    Cat_SDFS(cli, filename);
 8044ab6:	6979      	ldr	r1, [r7, #20]
 8044ab8:	68f8      	ldr	r0, [r7, #12]
 8044aba:	f003 fb31 	bl	8048120 <Cat_SDFS>
    embeddedCliPrint(cli, "");
 8044abe:	4904      	ldr	r1, [pc, #16]	@ (8044ad0 <CMD_cat+0x40>)
 8044ac0:	68f8      	ldr	r0, [r7, #12]
 8044ac2:	f001 fafd 	bl	80460c0 <embeddedCliPrint>
}
 8044ac6:	3718      	adds	r7, #24
 8044ac8:	46bd      	mov	sp, r7
 8044aca:	bd80      	pop	{r7, pc}
 8044acc:	0806c61c 	.word	0x0806c61c
 8044ad0:	0806bd4c 	.word	0x0806bd4c

08044ad4 <CMD_Cm4Rst>:

static void CMD_Cm4Rst(EmbeddedCli *cli, char *args, void *context) {
 8044ad4:	b580      	push	{r7, lr}
 8044ad6:	b084      	sub	sp, #16
 8044ad8:	af00      	add	r7, sp, #0
 8044ada:	60f8      	str	r0, [r7, #12]
 8044adc:	60b9      	str	r1, [r7, #8]
 8044ade:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_RST_Port, CM4_RST_Pin);
 8044ae0:	2180      	movs	r1, #128	@ 0x80
 8044ae2:	480b      	ldr	r0, [pc, #44]	@ (8044b10 <CMD_Cm4Rst+0x3c>)
 8044ae4:	f7fe fd38 	bl	8043558 <LL_GPIO_ResetOutputPin>
    vTaskDelay(pdMS_TO_TICKS(100));
 8044ae8:	2064      	movs	r0, #100	@ 0x64
 8044aea:	f011 fdbb 	bl	8056664 <vTaskDelay>
    GPIO_SetHigh(CM4_RST_Port, CM4_RST_Pin);
 8044aee:	2180      	movs	r1, #128	@ 0x80
 8044af0:	4807      	ldr	r0, [pc, #28]	@ (8044b10 <CMD_Cm4Rst+0x3c>)
 8044af2:	f7fe fd23 	bl	804353c <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 reset pulse triggered.");
 8044af6:	4907      	ldr	r1, [pc, #28]	@ (8044b14 <CMD_Cm4Rst+0x40>)
 8044af8:	68f8      	ldr	r0, [r7, #12]
 8044afa:	f001 fae1 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044afe:	4906      	ldr	r1, [pc, #24]	@ (8044b18 <CMD_Cm4Rst+0x44>)
 8044b00:	68f8      	ldr	r0, [r7, #12]
 8044b02:	f001 fadd 	bl	80460c0 <embeddedCliPrint>
}
 8044b06:	bf00      	nop
 8044b08:	3710      	adds	r7, #16
 8044b0a:	46bd      	mov	sp, r7
 8044b0c:	bd80      	pop	{r7, pc}
 8044b0e:	bf00      	nop
 8044b10:	58021800 	.word	0x58021800
 8044b14:	0806c634 	.word	0x0806c634
 8044b18:	0806bd4c 	.word	0x0806bd4c

08044b1c <CMD_Cm4Dis>:

static void CMD_Cm4Dis(EmbeddedCli *cli, char *args, void *context) {
 8044b1c:	b580      	push	{r7, lr}
 8044b1e:	b084      	sub	sp, #16
 8044b20:	af00      	add	r7, sp, #0
 8044b22:	60f8      	str	r0, [r7, #12]
 8044b24:	60b9      	str	r1, [r7, #8]
 8044b26:	607a      	str	r2, [r7, #4]
    GPIO_SetHigh(CM4_ENA_Port, CM4_ENA_Pin);
 8044b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8044b2c:	4807      	ldr	r0, [pc, #28]	@ (8044b4c <CMD_Cm4Dis+0x30>)
 8044b2e:	f7fe fd05 	bl	804353c <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 power disabled (enable driven low).");
 8044b32:	4907      	ldr	r1, [pc, #28]	@ (8044b50 <CMD_Cm4Dis+0x34>)
 8044b34:	68f8      	ldr	r0, [r7, #12]
 8044b36:	f001 fac3 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044b3a:	4906      	ldr	r1, [pc, #24]	@ (8044b54 <CMD_Cm4Dis+0x38>)
 8044b3c:	68f8      	ldr	r0, [r7, #12]
 8044b3e:	f001 fabf 	bl	80460c0 <embeddedCliPrint>
}
 8044b42:	bf00      	nop
 8044b44:	3710      	adds	r7, #16
 8044b46:	46bd      	mov	sp, r7
 8044b48:	bd80      	pop	{r7, pc}
 8044b4a:	bf00      	nop
 8044b4c:	58021800 	.word	0x58021800
 8044b50:	0806c650 	.word	0x0806c650
 8044b54:	0806bd4c 	.word	0x0806bd4c

08044b58 <CMD_Cm4Ena>:

static void CMD_Cm4Ena(EmbeddedCli *cli, char *args, void *context) {
 8044b58:	b580      	push	{r7, lr}
 8044b5a:	b084      	sub	sp, #16
 8044b5c:	af00      	add	r7, sp, #0
 8044b5e:	60f8      	str	r0, [r7, #12]
 8044b60:	60b9      	str	r1, [r7, #8]
 8044b62:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_ENA_Port, CM4_ENA_Pin);
 8044b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8044b68:	4807      	ldr	r0, [pc, #28]	@ (8044b88 <CMD_Cm4Ena+0x30>)
 8044b6a:	f7fe fcf5 	bl	8043558 <LL_GPIO_ResetOutputPin>
    embeddedCliPrint(cli, "CM4 power enabled (enable driven high).");
 8044b6e:	4907      	ldr	r1, [pc, #28]	@ (8044b8c <CMD_Cm4Ena+0x34>)
 8044b70:	68f8      	ldr	r0, [r7, #12]
 8044b72:	f001 faa5 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044b76:	4906      	ldr	r1, [pc, #24]	@ (8044b90 <CMD_Cm4Ena+0x38>)
 8044b78:	68f8      	ldr	r0, [r7, #12]
 8044b7a:	f001 faa1 	bl	80460c0 <embeddedCliPrint>
}
 8044b7e:	bf00      	nop
 8044b80:	3710      	adds	r7, #16
 8044b82:	46bd      	mov	sp, r7
 8044b84:	bd80      	pop	{r7, pc}
 8044b86:	bf00      	nop
 8044b88:	58021800 	.word	0x58021800
 8044b8c:	0806c678 	.word	0x0806c678
 8044b90:	0806bd4c 	.word	0x0806bd4c

08044b94 <CMD_ExpForward>:

static void CMD_ExpForward(EmbeddedCli *cli, char *args, void *context) {
 8044b94:	b580      	push	{r7, lr}
 8044b96:	b086      	sub	sp, #24
 8044b98:	af00      	add	r7, sp, #0
 8044b9a:	60f8      	str	r0, [r7, #12]
 8044b9c:	60b9      	str	r1, [r7, #8]
 8044b9e:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 8044ba0:	2101      	movs	r1, #1
 8044ba2:	68b8      	ldr	r0, [r7, #8]
 8044ba4:	f001 fb4e 	bl	8046244 <embeddedCliGetToken>
 8044ba8:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8044baa:	697b      	ldr	r3, [r7, #20]
 8044bac:	2b00      	cmp	r3, #0
 8044bae:	d104      	bne.n	8044bba <CMD_ExpForward+0x26>
        embeddedCliPrint(cli, "Usage: exp_forward <cm4|usb|normal>");
 8044bb0:	491e      	ldr	r1, [pc, #120]	@ (8044c2c <CMD_ExpForward+0x98>)
 8044bb2:	68f8      	ldr	r0, [r7, #12]
 8044bb4:	f001 fa84 	bl	80460c0 <embeddedCliPrint>
        return;
 8044bb8:	e035      	b.n	8044c26 <CMD_ExpForward+0x92>
    }

    if (strcmp(param, "cm4") == 0) {
 8044bba:	491d      	ldr	r1, [pc, #116]	@ (8044c30 <CMD_ExpForward+0x9c>)
 8044bbc:	6978      	ldr	r0, [r7, #20]
 8044bbe:	f7fb fb8f 	bl	80402e0 <strcmp>
 8044bc2:	4603      	mov	r3, r0
 8044bc4:	2b00      	cmp	r3, #0
 8044bc6:	d107      	bne.n	8044bd8 <CMD_ExpForward+0x44>
        embeddedCliPrint(cli, "Forward mode enabled: CM4 <-> EXP forwarding.");
 8044bc8:	491a      	ldr	r1, [pc, #104]	@ (8044c34 <CMD_ExpForward+0xa0>)
 8044bca:	68f8      	ldr	r0, [r7, #12]
 8044bcc:	f001 fa78 	bl	80460c0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_UART);
 8044bd0:	2001      	movs	r0, #1
 8044bd2:	f7fb ff51 	bl	8040a78 <ForwardMode_Set>
 8044bd6:	e022      	b.n	8044c1e <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "usb") == 0) {
 8044bd8:	4917      	ldr	r1, [pc, #92]	@ (8044c38 <CMD_ExpForward+0xa4>)
 8044bda:	6978      	ldr	r0, [r7, #20]
 8044bdc:	f7fb fb80 	bl	80402e0 <strcmp>
 8044be0:	4603      	mov	r3, r0
 8044be2:	2b00      	cmp	r3, #0
 8044be4:	d107      	bne.n	8044bf6 <CMD_ExpForward+0x62>
        embeddedCliPrint(cli, "Forward mode enabled: CDC <-> EXP forwarding.");
 8044be6:	4915      	ldr	r1, [pc, #84]	@ (8044c3c <CMD_ExpForward+0xa8>)
 8044be8:	68f8      	ldr	r0, [r7, #12]
 8044bea:	f001 fa69 	bl	80460c0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_USB);
 8044bee:	2002      	movs	r0, #2
 8044bf0:	f7fb ff42 	bl	8040a78 <ForwardMode_Set>
 8044bf4:	e013      	b.n	8044c1e <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "normal") == 0) {
 8044bf6:	4912      	ldr	r1, [pc, #72]	@ (8044c40 <CMD_ExpForward+0xac>)
 8044bf8:	6978      	ldr	r0, [r7, #20]
 8044bfa:	f7fb fb71 	bl	80402e0 <strcmp>
 8044bfe:	4603      	mov	r3, r0
 8044c00:	2b00      	cmp	r3, #0
 8044c02:	d107      	bne.n	8044c14 <CMD_ExpForward+0x80>
        embeddedCliPrint(cli, "Forward mode disabled. Operating in NORMAL mode.");
 8044c04:	490f      	ldr	r1, [pc, #60]	@ (8044c44 <CMD_ExpForward+0xb0>)
 8044c06:	68f8      	ldr	r0, [r7, #12]
 8044c08:	f001 fa5a 	bl	80460c0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 8044c0c:	2000      	movs	r0, #0
 8044c0e:	f7fb ff33 	bl	8040a78 <ForwardMode_Set>
 8044c12:	e004      	b.n	8044c1e <CMD_ExpForward+0x8a>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_forward <cm4|usb|normal>");
 8044c14:	490c      	ldr	r1, [pc, #48]	@ (8044c48 <CMD_ExpForward+0xb4>)
 8044c16:	68f8      	ldr	r0, [r7, #12]
 8044c18:	f001 fa52 	bl	80460c0 <embeddedCliPrint>
        return;
 8044c1c:	e003      	b.n	8044c26 <CMD_ExpForward+0x92>
    }

    embeddedCliPrint(cli, "");
 8044c1e:	490b      	ldr	r1, [pc, #44]	@ (8044c4c <CMD_ExpForward+0xb8>)
 8044c20:	68f8      	ldr	r0, [r7, #12]
 8044c22:	f001 fa4d 	bl	80460c0 <embeddedCliPrint>
}
 8044c26:	3718      	adds	r7, #24
 8044c28:	46bd      	mov	sp, r7
 8044c2a:	bd80      	pop	{r7, pc}
 8044c2c:	0806c6a0 	.word	0x0806c6a0
 8044c30:	0806c6c4 	.word	0x0806c6c4
 8044c34:	0806c6c8 	.word	0x0806c6c8
 8044c38:	0806c6f8 	.word	0x0806c6f8
 8044c3c:	0806c6fc 	.word	0x0806c6fc
 8044c40:	0806c72c 	.word	0x0806c72c
 8044c44:	0806c734 	.word	0x0806c734
 8044c48:	0806c768 	.word	0x0806c768
 8044c4c:	0806bd4c 	.word	0x0806bd4c

08044c50 <CMD_ExpListen>:

static void CMD_ExpListen(EmbeddedCli *cli, char *args, void *context) {
 8044c50:	b580      	push	{r7, lr}
 8044c52:	b086      	sub	sp, #24
 8044c54:	af00      	add	r7, sp, #0
 8044c56:	60f8      	str	r0, [r7, #12]
 8044c58:	60b9      	str	r1, [r7, #8]
 8044c5a:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 8044c5c:	2101      	movs	r1, #1
 8044c5e:	68b8      	ldr	r0, [r7, #8]
 8044c60:	f001 faf0 	bl	8046244 <embeddedCliGetToken>
 8044c64:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8044c66:	697b      	ldr	r3, [r7, #20]
 8044c68:	2b00      	cmp	r3, #0
 8044c6a:	d104      	bne.n	8044c76 <CMD_ExpListen+0x26>
        embeddedCliPrint(cli, "Usage: exp_listen <cm4|usb|off>");
 8044c6c:	491e      	ldr	r1, [pc, #120]	@ (8044ce8 <CMD_ExpListen+0x98>)
 8044c6e:	68f8      	ldr	r0, [r7, #12]
 8044c70:	f001 fa26 	bl	80460c0 <embeddedCliPrint>
        return;
 8044c74:	e034      	b.n	8044ce0 <CMD_ExpListen+0x90>
    }

    if (strcmp(param, "cm4") == 0) {
 8044c76:	491d      	ldr	r1, [pc, #116]	@ (8044cec <CMD_ExpListen+0x9c>)
 8044c78:	6978      	ldr	r0, [r7, #20]
 8044c7a:	f7fb fb31 	bl	80402e0 <strcmp>
 8044c7e:	4603      	mov	r3, r0
 8044c80:	2b00      	cmp	r3, #0
 8044c82:	d107      	bne.n	8044c94 <CMD_ExpListen+0x44>
        ForwardMode_Set(FORWARD_MODE_LISTEN_CM4);
 8044c84:	2003      	movs	r0, #3
 8044c86:	f7fb fef7 	bl	8040a78 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to UART_DEBUG.");
 8044c8a:	4919      	ldr	r1, [pc, #100]	@ (8044cf0 <CMD_ExpListen+0xa0>)
 8044c8c:	68f8      	ldr	r0, [r7, #12]
 8044c8e:	f001 fa17 	bl	80460c0 <embeddedCliPrint>
 8044c92:	e021      	b.n	8044cd8 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "usb") == 0) {
 8044c94:	4917      	ldr	r1, [pc, #92]	@ (8044cf4 <CMD_ExpListen+0xa4>)
 8044c96:	6978      	ldr	r0, [r7, #20]
 8044c98:	f7fb fb22 	bl	80402e0 <strcmp>
 8044c9c:	4603      	mov	r3, r0
 8044c9e:	2b00      	cmp	r3, #0
 8044ca0:	d107      	bne.n	8044cb2 <CMD_ExpListen+0x62>
        ForwardMode_Set(FORWARD_MODE_LISTEN_USB);
 8044ca2:	2004      	movs	r0, #4
 8044ca4:	f7fb fee8 	bl	8040a78 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to CDC.");
 8044ca8:	4913      	ldr	r1, [pc, #76]	@ (8044cf8 <CMD_ExpListen+0xa8>)
 8044caa:	68f8      	ldr	r0, [r7, #12]
 8044cac:	f001 fa08 	bl	80460c0 <embeddedCliPrint>
 8044cb0:	e012      	b.n	8044cd8 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "off") == 0) {
 8044cb2:	4912      	ldr	r1, [pc, #72]	@ (8044cfc <CMD_ExpListen+0xac>)
 8044cb4:	6978      	ldr	r0, [r7, #20]
 8044cb6:	f7fb fb13 	bl	80402e0 <strcmp>
 8044cba:	4603      	mov	r3, r0
 8044cbc:	2b00      	cmp	r3, #0
 8044cbe:	d107      	bne.n	8044cd0 <CMD_ExpListen+0x80>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 8044cc0:	2000      	movs	r0, #0
 8044cc2:	f7fb fed9 	bl	8040a78 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode disabled. Operating in NORMAL mode.");
 8044cc6:	490e      	ldr	r1, [pc, #56]	@ (8044d00 <CMD_ExpListen+0xb0>)
 8044cc8:	68f8      	ldr	r0, [r7, #12]
 8044cca:	f001 f9f9 	bl	80460c0 <embeddedCliPrint>
 8044cce:	e003      	b.n	8044cd8 <CMD_ExpListen+0x88>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_listen <cm4|usb|off>");
 8044cd0:	490c      	ldr	r1, [pc, #48]	@ (8044d04 <CMD_ExpListen+0xb4>)
 8044cd2:	68f8      	ldr	r0, [r7, #12]
 8044cd4:	f001 f9f4 	bl	80460c0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8044cd8:	490b      	ldr	r1, [pc, #44]	@ (8044d08 <CMD_ExpListen+0xb8>)
 8044cda:	68f8      	ldr	r0, [r7, #12]
 8044cdc:	f001 f9f0 	bl	80460c0 <embeddedCliPrint>
}
 8044ce0:	3718      	adds	r7, #24
 8044ce2:	46bd      	mov	sp, r7
 8044ce4:	bd80      	pop	{r7, pc}
 8044ce6:	bf00      	nop
 8044ce8:	0806c7a0 	.word	0x0806c7a0
 8044cec:	0806c6c4 	.word	0x0806c6c4
 8044cf0:	0806c7c0 	.word	0x0806c7c0
 8044cf4:	0806c6f8 	.word	0x0806c6f8
 8044cf8:	0806c808 	.word	0x0806c808
 8044cfc:	0806c848 	.word	0x0806c848
 8044d00:	0806c84c 	.word	0x0806c84c
 8044d04:	0806c87c 	.word	0x0806c87c
 8044d08:	0806bd4c 	.word	0x0806bd4c

08044d0c <CMD_ExpSend>:

static void CMD_ExpSend(EmbeddedCli *cli, char *args, void *context) {
 8044d0c:	b580      	push	{r7, lr}
 8044d0e:	b088      	sub	sp, #32
 8044d10:	af00      	add	r7, sp, #0
 8044d12:	60f8      	str	r0, [r7, #12]
 8044d14:	60b9      	str	r1, [r7, #8]
 8044d16:	607a      	str	r2, [r7, #4]
    const char *msg = embeddedCliGetToken(args, 1);
 8044d18:	2101      	movs	r1, #1
 8044d1a:	68b8      	ldr	r0, [r7, #8]
 8044d1c:	f001 fa92 	bl	8046244 <embeddedCliGetToken>
 8044d20:	61b8      	str	r0, [r7, #24]
    if (msg == NULL) {
 8044d22:	69bb      	ldr	r3, [r7, #24]
 8044d24:	2b00      	cmp	r3, #0
 8044d26:	d104      	bne.n	8044d32 <CMD_ExpSend+0x26>
        embeddedCliPrint(cli, "Usage: exp_send \"message\"");
 8044d28:	4916      	ldr	r1, [pc, #88]	@ (8044d84 <CMD_ExpSend+0x78>)
 8044d2a:	68f8      	ldr	r0, [r7, #12]
 8044d2c:	f001 f9c8 	bl	80460c0 <embeddedCliPrint>
        return;
 8044d30:	e025      	b.n	8044d7e <CMD_ExpSend+0x72>
    }
    size_t len = strlen(msg);
 8044d32:	69b8      	ldr	r0, [r7, #24]
 8044d34:	f7fb fade 	bl	80402f4 <strlen>
 8044d38:	6178      	str	r0, [r7, #20]
    UART_Driver_Write(UART_EXP, '\r');
 8044d3a:	210d      	movs	r1, #13
 8044d3c:	4812      	ldr	r0, [pc, #72]	@ (8044d88 <CMD_ExpSend+0x7c>)
 8044d3e:	f7fd fdc1 	bl	80428c4 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8044d42:	2300      	movs	r3, #0
 8044d44:	61fb      	str	r3, [r7, #28]
 8044d46:	e00a      	b.n	8044d5e <CMD_ExpSend+0x52>
        UART_Driver_Write(UART_EXP, (uint8_t)msg[i]);
 8044d48:	69ba      	ldr	r2, [r7, #24]
 8044d4a:	69fb      	ldr	r3, [r7, #28]
 8044d4c:	4413      	add	r3, r2
 8044d4e:	781b      	ldrb	r3, [r3, #0]
 8044d50:	4619      	mov	r1, r3
 8044d52:	480d      	ldr	r0, [pc, #52]	@ (8044d88 <CMD_ExpSend+0x7c>)
 8044d54:	f7fd fdb6 	bl	80428c4 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8044d58:	69fb      	ldr	r3, [r7, #28]
 8044d5a:	3301      	adds	r3, #1
 8044d5c:	61fb      	str	r3, [r7, #28]
 8044d5e:	69fa      	ldr	r2, [r7, #28]
 8044d60:	697b      	ldr	r3, [r7, #20]
 8044d62:	429a      	cmp	r2, r3
 8044d64:	d3f0      	bcc.n	8044d48 <CMD_ExpSend+0x3c>
    }
    UART_Driver_Write(UART_EXP, '\r');
 8044d66:	210d      	movs	r1, #13
 8044d68:	4807      	ldr	r0, [pc, #28]	@ (8044d88 <CMD_ExpSend+0x7c>)
 8044d6a:	f7fd fdab 	bl	80428c4 <UART_Driver_Write>
    embeddedCliPrint(cli, "Message sent to EXP via UART7.");
 8044d6e:	4907      	ldr	r1, [pc, #28]	@ (8044d8c <CMD_ExpSend+0x80>)
 8044d70:	68f8      	ldr	r0, [r7, #12]
 8044d72:	f001 f9a5 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044d76:	4906      	ldr	r1, [pc, #24]	@ (8044d90 <CMD_ExpSend+0x84>)
 8044d78:	68f8      	ldr	r0, [r7, #12]
 8044d7a:	f001 f9a1 	bl	80460c0 <embeddedCliPrint>
}
 8044d7e:	3720      	adds	r7, #32
 8044d80:	46bd      	mov	sp, r7
 8044d82:	bd80      	pop	{r7, pc}
 8044d84:	0806c8b0 	.word	0x0806c8b0
 8044d88:	40007800 	.word	0x40007800
 8044d8c:	0806c8cc 	.word	0x0806c8cc
 8044d90:	0806bd4c 	.word	0x0806bd4c

08044d94 <CMD_AliveCheck>:
void callback_countdown(void *context) {
    EmbeddedCli *cli = (EmbeddedCli *)context;
    embeddedCliPrint(cli, "Callback Countdown");
}

static void CMD_AliveCheck(EmbeddedCli *cli, char *args, void *context) {
 8044d94:	b580      	push	{r7, lr}
 8044d96:	b084      	sub	sp, #16
 8044d98:	af00      	add	r7, sp, #0
 8044d9a:	60f8      	str	r0, [r7, #12]
 8044d9c:	60b9      	str	r1, [r7, #8]
 8044d9e:	607a      	str	r2, [r7, #4]
//	Utils_Cronjob_SetEvery(EVERY_SECOND, 10, 0, callback_every, cli, 0);
//	Utils_Cronjob_SetMoment(10, 20, 30, 0, callback_moment, cli, 1);
//	Utils_Cronjob_SetCountdown(20, 0, callback_countdown, cli, 2);

    embeddedCliPrint(cli, "Hello from OBC-STM32. Status: OK");
 8044da0:	4909      	ldr	r1, [pc, #36]	@ (8044dc8 <CMD_AliveCheck+0x34>)
 8044da2:	68f8      	ldr	r0, [r7, #12]
 8044da4:	f001 f98c 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Sparrow call Eagle. Code: OK");
 8044da8:	4908      	ldr	r1, [pc, #32]	@ (8044dcc <CMD_AliveCheck+0x38>)
 8044daa:	68f8      	ldr	r0, [r7, #12]
 8044dac:	f001 f988 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Eagle clear, end. Code: OK");
 8044db0:	4907      	ldr	r1, [pc, #28]	@ (8044dd0 <CMD_AliveCheck+0x3c>)
 8044db2:	68f8      	ldr	r0, [r7, #12]
 8044db4:	f001 f984 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8044db8:	4906      	ldr	r1, [pc, #24]	@ (8044dd4 <CMD_AliveCheck+0x40>)
 8044dba:	68f8      	ldr	r0, [r7, #12]
 8044dbc:	f001 f980 	bl	80460c0 <embeddedCliPrint>
}
 8044dc0:	bf00      	nop
 8044dc2:	3710      	adds	r7, #16
 8044dc4:	46bd      	mov	sp, r7
 8044dc6:	bd80      	pop	{r7, pc}
 8044dc8:	0806c920 	.word	0x0806c920
 8044dcc:	0806c944 	.word	0x0806c944
 8044dd0:	0806c964 	.word	0x0806c964
 8044dd4:	0806bd4c 	.word	0x0806bd4c

08044dd8 <CMD_RtosCheck>:

static void CMD_RtosCheck(EmbeddedCli *cli, char *args, void *context) {
 8044dd8:	b590      	push	{r4, r7, lr}
 8044dda:	f2ad 4d54 	subw	sp, sp, #1108	@ 0x454
 8044dde:	af04      	add	r7, sp, #16
 8044de0:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044de4:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044de8:	6018      	str	r0, [r3, #0]
 8044dea:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044dee:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8044df2:	6019      	str	r1, [r3, #0]
 8044df4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044df8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8044dfc:	601a      	str	r2, [r3, #0]
    TaskStatus_t taskStatusArray[22];
    UBaseType_t arraySize = 22;
 8044dfe:	2316      	movs	r3, #22
 8044e00:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    UBaseType_t totalTasks;
    char buffer[256];

    UBaseType_t numTasks = uxTaskGetNumberOfTasks();
 8044e04:	f011 fea0 	bl	8056b48 <uxTaskGetNumberOfTasks>
 8044e08:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
        snprintf(buffer, sizeof(buffer), "Number of tasks running: %lu", (unsigned long)numTasks);
 8044e0c:	f107 0014 	add.w	r0, r7, #20
 8044e10:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8044e14:	4a73      	ldr	r2, [pc, #460]	@ (8044fe4 <CMD_RtosCheck+0x20c>)
 8044e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8044e1a:	f024 fbe1 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8044e1e:	f107 0214 	add.w	r2, r7, #20
 8044e22:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044e26:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044e2a:	4611      	mov	r1, r2
 8044e2c:	6818      	ldr	r0, [r3, #0]
 8044e2e:	f001 f947 	bl	80460c0 <embeddedCliPrint>

    totalTasks = uxTaskGetSystemState(taskStatusArray, arraySize, NULL);
 8044e32:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8044e36:	2200      	movs	r2, #0
 8044e38:	f8d7 1434 	ldr.w	r1, [r7, #1076]	@ 0x434
 8044e3c:	4618      	mov	r0, r3
 8044e3e:	f011 fe8f 	bl	8056b60 <uxTaskGetSystemState>
 8044e42:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

    if (totalTasks == 0) {
 8044e46:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8044e4a:	2b00      	cmp	r3, #0
 8044e4c:	d110      	bne.n	8044e70 <CMD_RtosCheck+0x98>
        embeddedCliPrint(cli, "No tasks found or error occurred.");
 8044e4e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044e52:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044e56:	4964      	ldr	r1, [pc, #400]	@ (8044fe8 <CMD_RtosCheck+0x210>)
 8044e58:	6818      	ldr	r0, [r3, #0]
 8044e5a:	f001 f931 	bl	80460c0 <embeddedCliPrint>
        embeddedCliPrint(cli, "");
 8044e5e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044e62:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044e66:	4961      	ldr	r1, [pc, #388]	@ (8044fec <CMD_RtosCheck+0x214>)
 8044e68:	6818      	ldr	r0, [r3, #0]
 8044e6a:	f001 f929 	bl	80460c0 <embeddedCliPrint>
 8044e6e:	e0b4      	b.n	8044fda <CMD_RtosCheck+0x202>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Total Tasks: %lu", (unsigned long)totalTasks);
 8044e70:	f107 0014 	add.w	r0, r7, #20
 8044e74:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8044e78:	4a5d      	ldr	r2, [pc, #372]	@ (8044ff0 <CMD_RtosCheck+0x218>)
 8044e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8044e7e:	f024 fbaf 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8044e82:	f107 0214 	add.w	r2, r7, #20
 8044e86:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044e8a:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044e8e:	4611      	mov	r1, r2
 8044e90:	6818      	ldr	r0, [r3, #0]
 8044e92:	f001 f915 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Task Name          State     Prio  Stack Left");
 8044e96:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044e9a:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044e9e:	4955      	ldr	r1, [pc, #340]	@ (8044ff4 <CMD_RtosCheck+0x21c>)
 8044ea0:	6818      	ldr	r0, [r3, #0]
 8044ea2:	f001 f90d 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "----------------------------------------");
 8044ea6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044eaa:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044eae:	4952      	ldr	r1, [pc, #328]	@ (8044ff8 <CMD_RtosCheck+0x220>)
 8044eb0:	6818      	ldr	r0, [r3, #0]
 8044eb2:	f001 f905 	bl	80460c0 <embeddedCliPrint>

	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8044eb6:	2300      	movs	r3, #0
 8044eb8:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8044ebc:	e077      	b.n	8044fae <CMD_RtosCheck+0x1d6>
		const char *stateStr;
		switch (taskStatusArray[i].eCurrentState) {
 8044ebe:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044ec2:	f5a3 714b 	sub.w	r1, r3, #812	@ 0x32c
 8044ec6:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8044eca:	4613      	mov	r3, r2
 8044ecc:	00db      	lsls	r3, r3, #3
 8044ece:	4413      	add	r3, r2
 8044ed0:	009b      	lsls	r3, r3, #2
 8044ed2:	440b      	add	r3, r1
 8044ed4:	330c      	adds	r3, #12
 8044ed6:	781b      	ldrb	r3, [r3, #0]
 8044ed8:	2b04      	cmp	r3, #4
 8044eda:	d821      	bhi.n	8044f20 <CMD_RtosCheck+0x148>
 8044edc:	a201      	add	r2, pc, #4	@ (adr r2, 8044ee4 <CMD_RtosCheck+0x10c>)
 8044ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044ee2:	bf00      	nop
 8044ee4:	08044ef9 	.word	0x08044ef9
 8044ee8:	08044f01 	.word	0x08044f01
 8044eec:	08044f09 	.word	0x08044f09
 8044ef0:	08044f11 	.word	0x08044f11
 8044ef4:	08044f19 	.word	0x08044f19
		case eRunning:
			stateStr = "Running";
 8044ef8:	4b40      	ldr	r3, [pc, #256]	@ (8044ffc <CMD_RtosCheck+0x224>)
 8044efa:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044efe:	e013      	b.n	8044f28 <CMD_RtosCheck+0x150>
		case eReady:
			stateStr = "Ready";
 8044f00:	4b3f      	ldr	r3, [pc, #252]	@ (8045000 <CMD_RtosCheck+0x228>)
 8044f02:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044f06:	e00f      	b.n	8044f28 <CMD_RtosCheck+0x150>
		case eBlocked:
			stateStr = "Blocked";
 8044f08:	4b3e      	ldr	r3, [pc, #248]	@ (8045004 <CMD_RtosCheck+0x22c>)
 8044f0a:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044f0e:	e00b      	b.n	8044f28 <CMD_RtosCheck+0x150>
		case eSuspended:
			stateStr = "Suspend";
 8044f10:	4b3d      	ldr	r3, [pc, #244]	@ (8045008 <CMD_RtosCheck+0x230>)
 8044f12:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044f16:	e007      	b.n	8044f28 <CMD_RtosCheck+0x150>
		case eDeleted:
			stateStr = "Deleted";
 8044f18:	4b3c      	ldr	r3, [pc, #240]	@ (804500c <CMD_RtosCheck+0x234>)
 8044f1a:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044f1e:	e003      	b.n	8044f28 <CMD_RtosCheck+0x150>
		default:
			stateStr = "Unknown";
 8044f20:	4b3b      	ldr	r3, [pc, #236]	@ (8045010 <CMD_RtosCheck+0x238>)
 8044f22:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
			break;
 8044f26:	bf00      	nop
		}

		snprintf(buffer, sizeof(buffer), "%-18s %-10s %-4lu %10lu",
 8044f28:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044f2c:	f5a3 714b 	sub.w	r1, r3, #812	@ 0x32c
 8044f30:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8044f34:	4613      	mov	r3, r2
 8044f36:	00db      	lsls	r3, r3, #3
 8044f38:	4413      	add	r3, r2
 8044f3a:	009b      	lsls	r3, r3, #2
 8044f3c:	440b      	add	r3, r1
 8044f3e:	3304      	adds	r3, #4
 8044f40:	681c      	ldr	r4, [r3, #0]
 8044f42:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044f46:	f5a3 714b 	sub.w	r1, r3, #812	@ 0x32c
 8044f4a:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8044f4e:	4613      	mov	r3, r2
 8044f50:	00db      	lsls	r3, r3, #3
 8044f52:	4413      	add	r3, r2
 8044f54:	009b      	lsls	r3, r3, #2
 8044f56:	440b      	add	r3, r1
 8044f58:	3310      	adds	r3, #16
 8044f5a:	6819      	ldr	r1, [r3, #0]
 8044f5c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044f60:	f5a3 704b 	sub.w	r0, r3, #812	@ 0x32c
 8044f64:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8044f68:	4613      	mov	r3, r2
 8044f6a:	00db      	lsls	r3, r3, #3
 8044f6c:	4413      	add	r3, r2
 8044f6e:	009b      	lsls	r3, r3, #2
 8044f70:	4403      	add	r3, r0
 8044f72:	3320      	adds	r3, #32
 8044f74:	681b      	ldr	r3, [r3, #0]
 8044f76:	f107 0014 	add.w	r0, r7, #20
 8044f7a:	9302      	str	r3, [sp, #8]
 8044f7c:	9101      	str	r1, [sp, #4]
 8044f7e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8044f82:	9300      	str	r3, [sp, #0]
 8044f84:	4623      	mov	r3, r4
 8044f86:	4a23      	ldr	r2, [pc, #140]	@ (8045014 <CMD_RtosCheck+0x23c>)
 8044f88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8044f8c:	f024 fb28 	bl	80695e0 <sniprintf>
				taskStatusArray[i].pcTaskName, stateStr,
				taskStatusArray[i].uxCurrentPriority,
				taskStatusArray[i].usStackHighWaterMark);
		embeddedCliPrint(cli, buffer);
 8044f90:	f107 0214 	add.w	r2, r7, #20
 8044f94:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044f98:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044f9c:	4611      	mov	r1, r2
 8044f9e:	6818      	ldr	r0, [r3, #0]
 8044fa0:	f001 f88e 	bl	80460c0 <embeddedCliPrint>
	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8044fa4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8044fa8:	3301      	adds	r3, #1
 8044faa:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8044fae:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8044fb2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8044fb6:	429a      	cmp	r2, r3
 8044fb8:	d381      	bcc.n	8044ebe <CMD_RtosCheck+0xe6>
	}

	embeddedCliPrint(cli, "----------------------------------------");
 8044fba:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044fbe:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044fc2:	490d      	ldr	r1, [pc, #52]	@ (8044ff8 <CMD_RtosCheck+0x220>)
 8044fc4:	6818      	ldr	r0, [r3, #0]
 8044fc6:	f001 f87b 	bl	80460c0 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8044fca:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8044fce:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8044fd2:	4906      	ldr	r1, [pc, #24]	@ (8044fec <CMD_RtosCheck+0x214>)
 8044fd4:	6818      	ldr	r0, [r3, #0]
 8044fd6:	f001 f873 	bl	80460c0 <embeddedCliPrint>
}
 8044fda:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 8044fde:	46bd      	mov	sp, r7
 8044fe0:	bd90      	pop	{r4, r7, pc}
 8044fe2:	bf00      	nop
 8044fe4:	0806c980 	.word	0x0806c980
 8044fe8:	0806c9a0 	.word	0x0806c9a0
 8044fec:	0806bd4c 	.word	0x0806bd4c
 8044ff0:	0806c9c4 	.word	0x0806c9c4
 8044ff4:	0806c9d8 	.word	0x0806c9d8
 8044ff8:	0806ca08 	.word	0x0806ca08
 8044ffc:	0806ca34 	.word	0x0806ca34
 8045000:	0806ca3c 	.word	0x0806ca3c
 8045004:	0806ca44 	.word	0x0806ca44
 8045008:	0806ca4c 	.word	0x0806ca4c
 804500c:	0806ca54 	.word	0x0806ca54
 8045010:	0806ca5c 	.word	0x0806ca5c
 8045014:	0806ca64 	.word	0x0806ca64

08045018 <LogoutTimerCallback>:

static TimerHandle_t logoutTimer = NULL;
static void LogoutTimerCallback(TimerHandle_t xTimer) {
 8045018:	b580      	push	{r7, lr}
 804501a:	b082      	sub	sp, #8
 804501c:	af00      	add	r7, sp, #0
 804501e:	6078      	str	r0, [r7, #4]
    Shield_Reset(&auth_usb);
 8045020:	4803      	ldr	r0, [pc, #12]	@ (8045030 <LogoutTimerCallback+0x18>)
 8045022:	f7fe f81d 	bl	8043060 <Shield_Reset>
}
 8045026:	bf00      	nop
 8045028:	3708      	adds	r7, #8
 804502a:	46bd      	mov	sp, r7
 804502c:	bd80      	pop	{r7, pc}
 804502e:	bf00      	nop
 8045030:	24014a90 	.word	0x24014a90

08045034 <CMD_LogOut>:
static void CMD_LogOut(EmbeddedCli *cli, char *args, void *context) {
 8045034:	b590      	push	{r4, r7, lr}
 8045036:	b087      	sub	sp, #28
 8045038:	af02      	add	r7, sp, #8
 804503a:	60f8      	str	r0, [r7, #12]
 804503c:	60b9      	str	r1, [r7, #8]
 804503e:	607a      	str	r2, [r7, #4]
    embeddedCliPrint(cli, "Logging out...");
 8045040:	4913      	ldr	r1, [pc, #76]	@ (8045090 <CMD_LogOut+0x5c>)
 8045042:	68f8      	ldr	r0, [r7, #12]
 8045044:	f001 f83c 	bl	80460c0 <embeddedCliPrint>
    if (logoutTimer == NULL) {
 8045048:	4b12      	ldr	r3, [pc, #72]	@ (8045094 <CMD_LogOut+0x60>)
 804504a:	681b      	ldr	r3, [r3, #0]
 804504c:	2b00      	cmp	r3, #0
 804504e:	d10a      	bne.n	8045066 <CMD_LogOut+0x32>
        logoutTimer = xTimerCreate("LogoutTimer", pdMS_TO_TICKS(100), pdFALSE, NULL, LogoutTimerCallback);
 8045050:	4b11      	ldr	r3, [pc, #68]	@ (8045098 <CMD_LogOut+0x64>)
 8045052:	9300      	str	r3, [sp, #0]
 8045054:	2300      	movs	r3, #0
 8045056:	2200      	movs	r2, #0
 8045058:	2164      	movs	r1, #100	@ 0x64
 804505a:	4810      	ldr	r0, [pc, #64]	@ (804509c <CMD_LogOut+0x68>)
 804505c:	f012 ffec 	bl	8058038 <xTimerCreate>
 8045060:	4603      	mov	r3, r0
 8045062:	4a0c      	ldr	r2, [pc, #48]	@ (8045094 <CMD_LogOut+0x60>)
 8045064:	6013      	str	r3, [r2, #0]
    }
    if (logoutTimer != NULL) {
 8045066:	4b0b      	ldr	r3, [pc, #44]	@ (8045094 <CMD_LogOut+0x60>)
 8045068:	681b      	ldr	r3, [r3, #0]
 804506a:	2b00      	cmp	r3, #0
 804506c:	d00b      	beq.n	8045086 <CMD_LogOut+0x52>
        xTimerStart(logoutTimer, 0);
 804506e:	4b09      	ldr	r3, [pc, #36]	@ (8045094 <CMD_LogOut+0x60>)
 8045070:	681c      	ldr	r4, [r3, #0]
 8045072:	f011 fd59 	bl	8056b28 <xTaskGetTickCount>
 8045076:	4602      	mov	r2, r0
 8045078:	2300      	movs	r3, #0
 804507a:	9300      	str	r3, [sp, #0]
 804507c:	2300      	movs	r3, #0
 804507e:	2101      	movs	r1, #1
 8045080:	4620      	mov	r0, r4
 8045082:	f013 f835 	bl	80580f0 <xTimerGenericCommandFromTask>
    }
}
 8045086:	bf00      	nop
 8045088:	3714      	adds	r7, #20
 804508a:	46bd      	mov	sp, r7
 804508c:	bd90      	pop	{r4, r7, pc}
 804508e:	bf00      	nop
 8045090:	0806ca7c 	.word	0x0806ca7c
 8045094:	2401df74 	.word	0x2401df74
 8045098:	08045019 	.word	0x08045019
 804509c:	0806ca8c 	.word	0x0806ca8c

080450a0 <CMD_PwdChange>:

static void CMD_PwdChange(EmbeddedCli *cli, char *args, void *context) {
 80450a0:	b580      	push	{r7, lr}
 80450a2:	b08a      	sub	sp, #40	@ 0x28
 80450a4:	af00      	add	r7, sp, #0
 80450a6:	60f8      	str	r0, [r7, #12]
 80450a8:	60b9      	str	r1, [r7, #8]
 80450aa:	607a      	str	r2, [r7, #4]
    const char *new_password = embeddedCliGetToken(args, 1);
 80450ac:	2101      	movs	r1, #1
 80450ae:	68b8      	ldr	r0, [r7, #8]
 80450b0:	f001 f8c8 	bl	8046244 <embeddedCliGetToken>
 80450b4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (new_password == NULL) {
 80450b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80450b8:	2b00      	cmp	r3, #0
 80450ba:	d104      	bne.n	80450c6 <CMD_PwdChange+0x26>
        embeddedCliPrint(cli, "Usage: pwd_change <new_password>");
 80450bc:	4929      	ldr	r1, [pc, #164]	@ (8045164 <CMD_PwdChange+0xc4>)
 80450be:	68f8      	ldr	r0, [r7, #12]
 80450c0:	f000 fffe 	bl	80460c0 <embeddedCliPrint>
        return;
 80450c4:	e04a      	b.n	804515c <CMD_PwdChange+0xbc>
    }

	ShieldAuthState_t auth_state;
	auth_state = Shield_GetState(&auth_usb);
 80450c6:	4828      	ldr	r0, [pc, #160]	@ (8045168 <CMD_PwdChange+0xc8>)
 80450c8:	f7fe fa14 	bl	80434f4 <Shield_GetState>
 80450cc:	4603      	mov	r3, r0
 80450ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (auth_state == AUTH_ADMIN) {
 80450d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80450d6:	2b03      	cmp	r3, #3
 80450d8:	d13b      	bne.n	8045152 <CMD_PwdChange+0xb2>
    	size_t pwd_len = strlen(new_password);
 80450da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80450dc:	f7fb f90a 	bl	80402f4 <strlen>
 80450e0:	61f8      	str	r0, [r7, #28]
        if (pwd_len > MAX_PASSWORD_LEN) {
 80450e2:	69fb      	ldr	r3, [r7, #28]
 80450e4:	2b10      	cmp	r3, #16
 80450e6:	d904      	bls.n	80450f2 <CMD_PwdChange+0x52>
        	embeddedCliPrint(cli, "Password too long (max 16 characters).");
 80450e8:	4920      	ldr	r1, [pc, #128]	@ (804516c <CMD_PwdChange+0xcc>)
 80450ea:	68f8      	ldr	r0, [r7, #12]
 80450ec:	f000 ffe8 	bl	80460c0 <embeddedCliPrint>
            return;
 80450f0:	e034      	b.n	804515c <CMD_PwdChange+0xbc>
        }
        FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 80450f2:	f007 f9cf 	bl	804c494 <FRAM_SPI_GetHandle>
 80450f6:	61b8      	str	r0, [r7, #24]
        uint8_t len = (uint8_t)pwd_len;
 80450f8:	69fb      	ldr	r3, [r7, #28]
 80450fa:	b2db      	uxtb	r3, r3
 80450fc:	75fb      	strb	r3, [r7, #23]
        if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_LEN_ADDR, &len, 1) != E_OK) {
 80450fe:	f107 0217 	add.w	r2, r7, #23
 8045102:	2301      	movs	r3, #1
 8045104:	2100      	movs	r1, #0
 8045106:	69b8      	ldr	r0, [r7, #24]
 8045108:	f007 fa2c 	bl	804c564 <FRAM_SPI_WriteMem>
 804510c:	4603      	mov	r3, r0
 804510e:	2b00      	cmp	r3, #0
 8045110:	d004      	beq.n	804511c <CMD_PwdChange+0x7c>
        	embeddedCliPrint(cli, "Failed to write password length to FRAM.\r\n");
 8045112:	4917      	ldr	r1, [pc, #92]	@ (8045170 <CMD_PwdChange+0xd0>)
 8045114:	68f8      	ldr	r0, [r7, #12]
 8045116:	f000 ffd3 	bl	80460c0 <embeddedCliPrint>
            return;
 804511a:	e01f      	b.n	804515c <CMD_PwdChange+0xbc>
        }
        if (pwd_len > 0) {
 804511c:	69fb      	ldr	r3, [r7, #28]
 804511e:	2b00      	cmp	r3, #0
 8045120:	d00e      	beq.n	8045140 <CMD_PwdChange+0xa0>
            if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)new_password, pwd_len) != E_OK) {
 8045122:	69fb      	ldr	r3, [r7, #28]
 8045124:	b29b      	uxth	r3, r3
 8045126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8045128:	2101      	movs	r1, #1
 804512a:	69b8      	ldr	r0, [r7, #24]
 804512c:	f007 fa1a 	bl	804c564 <FRAM_SPI_WriteMem>
 8045130:	4603      	mov	r3, r0
 8045132:	2b00      	cmp	r3, #0
 8045134:	d004      	beq.n	8045140 <CMD_PwdChange+0xa0>
            	embeddedCliPrint(cli, "Failed to write password to FRAM.\r\n");
 8045136:	490f      	ldr	r1, [pc, #60]	@ (8045174 <CMD_PwdChange+0xd4>)
 8045138:	68f8      	ldr	r0, [r7, #12]
 804513a:	f000 ffc1 	bl	80460c0 <embeddedCliPrint>
                return;
 804513e:	e00d      	b.n	804515c <CMD_PwdChange+0xbc>
            }
        }
        embeddedCliPrint(cli, "User password updated successfully.");
 8045140:	490d      	ldr	r1, [pc, #52]	@ (8045178 <CMD_PwdChange+0xd8>)
 8045142:	68f8      	ldr	r0, [r7, #12]
 8045144:	f000 ffbc 	bl	80460c0 <embeddedCliPrint>
    } else {
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
        return;
    }
    embeddedCliPrint(cli, "");
 8045148:	490c      	ldr	r1, [pc, #48]	@ (804517c <CMD_PwdChange+0xdc>)
 804514a:	68f8      	ldr	r0, [r7, #12]
 804514c:	f000 ffb8 	bl	80460c0 <embeddedCliPrint>
 8045150:	e004      	b.n	804515c <CMD_PwdChange+0xbc>
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
 8045152:	490b      	ldr	r1, [pc, #44]	@ (8045180 <CMD_PwdChange+0xe0>)
 8045154:	68f8      	ldr	r0, [r7, #12]
 8045156:	f000 ffb3 	bl	80460c0 <embeddedCliPrint>
        return;
 804515a:	bf00      	nop
}
 804515c:	3728      	adds	r7, #40	@ 0x28
 804515e:	46bd      	mov	sp, r7
 8045160:	bd80      	pop	{r7, pc}
 8045162:	bf00      	nop
 8045164:	0806ca98 	.word	0x0806ca98
 8045168:	24014a90 	.word	0x24014a90
 804516c:	0806cabc 	.word	0x0806cabc
 8045170:	0806cae4 	.word	0x0806cae4
 8045174:	0806cb10 	.word	0x0806cb10
 8045178:	0806cb34 	.word	0x0806cb34
 804517c:	0806bd4c 	.word	0x0806bd4c
 8045180:	0806cb58 	.word	0x0806cb58

08045184 <CMD_Dmesg>:

static void CMD_Dmesg(EmbeddedCli *cli, char *args, void *context) {
 8045184:	b580      	push	{r7, lr}
 8045186:	b096      	sub	sp, #88	@ 0x58
 8045188:	af00      	add	r7, sp, #0
 804518a:	60f8      	str	r0, [r7, #12]
 804518c:	60b9      	str	r1, [r7, #8]
 804518e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8045190:	2101      	movs	r1, #1
 8045192:	68b8      	ldr	r0, [r7, #8]
 8045194:	f001 f856 	bl	8046244 <embeddedCliGetToken>
 8045198:	6578      	str	r0, [r7, #84]	@ 0x54
    char buffer[64];
    embeddedCliPrint(cli, "Dmesg - Logger Message:");
 804519a:	4919      	ldr	r1, [pc, #100]	@ (8045200 <CMD_Dmesg+0x7c>)
 804519c:	68f8      	ldr	r0, [r7, #12]
 804519e:	f000 ff8f 	bl	80460c0 <embeddedCliPrint>

    if (arg1 == NULL) {
 80451a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80451a4:	2b00      	cmp	r3, #0
 80451a6:	d10b      	bne.n	80451c0 <CMD_Dmesg+0x3c>
        embeddedCliPrint(cli, "--> Oldest >>");
 80451a8:	4916      	ldr	r1, [pc, #88]	@ (8045204 <CMD_Dmesg+0x80>)
 80451aa:	68f8      	ldr	r0, [r7, #12]
 80451ac:	f000 ff88 	bl	80460c0 <embeddedCliPrint>
        Dmesg_GetLogs(cli);
 80451b0:	68f8      	ldr	r0, [r7, #12]
 80451b2:	f002 fd3d 	bl	8047c30 <Dmesg_GetLogs>
        embeddedCliPrint(cli, "--> Latest <<");
 80451b6:	4914      	ldr	r1, [pc, #80]	@ (8045208 <CMD_Dmesg+0x84>)
 80451b8:	68f8      	ldr	r0, [r7, #12]
 80451ba:	f000 ff81 	bl	80460c0 <embeddedCliPrint>
 80451be:	e016      	b.n	80451ee <CMD_Dmesg+0x6a>
    } else {
        size_t N = (size_t)strtoul(arg1, NULL, 10);
 80451c0:	220a      	movs	r2, #10
 80451c2:	2100      	movs	r1, #0
 80451c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80451c6:	f024 f92d 	bl	8069424 <strtoul>
 80451ca:	6538      	str	r0, [r7, #80]	@ 0x50
        snprintf(buffer, sizeof(buffer), "Latest %lu Logs:", (unsigned long)N);
 80451cc:	f107 0010 	add.w	r0, r7, #16
 80451d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80451d2:	4a0e      	ldr	r2, [pc, #56]	@ (804520c <CMD_Dmesg+0x88>)
 80451d4:	2140      	movs	r1, #64	@ 0x40
 80451d6:	f024 fa03 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80451da:	f107 0310 	add.w	r3, r7, #16
 80451de:	4619      	mov	r1, r3
 80451e0:	68f8      	ldr	r0, [r7, #12]
 80451e2:	f000 ff6d 	bl	80460c0 <embeddedCliPrint>
        Dmesg_GetLatestN(N, cli);
 80451e6:	68f9      	ldr	r1, [r7, #12]
 80451e8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80451ea:	f002 fd55 	bl	8047c98 <Dmesg_GetLatestN>
    }

    embeddedCliPrint(cli, "");
 80451ee:	4908      	ldr	r1, [pc, #32]	@ (8045210 <CMD_Dmesg+0x8c>)
 80451f0:	68f8      	ldr	r0, [r7, #12]
 80451f2:	f000 ff65 	bl	80460c0 <embeddedCliPrint>
}
 80451f6:	bf00      	nop
 80451f8:	3758      	adds	r7, #88	@ 0x58
 80451fa:	46bd      	mov	sp, r7
 80451fc:	bd80      	pop	{r7, pc}
 80451fe:	bf00      	nop
 8045200:	0806cb88 	.word	0x0806cb88
 8045204:	0806cba0 	.word	0x0806cba0
 8045208:	0806cbb0 	.word	0x0806cbb0
 804520c:	0806cbc0 	.word	0x0806cbc0
 8045210:	0806bd4c 	.word	0x0806bd4c

08045214 <CMD_Reset>:
static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8045214:	b580      	push	{r7, lr}
 8045216:	b084      	sub	sp, #16
 8045218:	af00      	add	r7, sp, #0
 804521a:	60f8      	str	r0, [r7, #12]
 804521c:	60b9      	str	r1, [r7, #8]
 804521e:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8045220:	f7fe f976 	bl	8043510 <__NVIC_SystemReset>

08045224 <CMD_DevTestConnection>:

/*************************************************
 * Command Function "Dev"            *
 *************************************************/
static void CMD_DevTestConnection(EmbeddedCli *cli, char *args, void *context)
{
 8045224:	b580      	push	{r7, lr}
 8045226:	b0a0      	sub	sp, #128	@ 0x80
 8045228:	af00      	add	r7, sp, #0
 804522a:	60f8      	str	r0, [r7, #12]
 804522c:	60b9      	str	r1, [r7, #8]
 804522e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8045230:	2101      	movs	r1, #1
 8045232:	68b8      	ldr	r0, [r7, #8]
 8045234:	f001 f806 	bl	8046244 <embeddedCliGetToken>
 8045238:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];
    if (arg1 == NULL) {
 804523a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 804523c:	2b00      	cmp	r3, #0
 804523e:	d10d      	bne.n	804525c <CMD_DevTestConnection+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: test_connection <value(32bit)>");
 8045240:	f107 0314 	add.w	r3, r7, #20
 8045244:	4a14      	ldr	r2, [pc, #80]	@ (8045298 <CMD_DevTestConnection+0x74>)
 8045246:	2164      	movs	r1, #100	@ 0x64
 8045248:	4618      	mov	r0, r3
 804524a:	f024 f9c9 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 804524e:	f107 0314 	add.w	r3, r7, #20
 8045252:	4619      	mov	r1, r3
 8045254:	68f8      	ldr	r0, [r7, #12]
 8045256:	f000 ff33 	bl	80460c0 <embeddedCliPrint>
 804525a:	e019      	b.n	8045290 <CMD_DevTestConnection+0x6c>
        return;
    }
    uint32_t value = (uint32_t)strtoul(arg1, NULL, 0);
 804525c:	2200      	movs	r2, #0
 804525e:	2100      	movs	r1, #0
 8045260:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8045262:	f024 f8df 	bl	8069424 <strtoul>
 8045266:	67b8      	str	r0, [r7, #120]	@ 0x78
    MIN_Send_TEST_CONNECTION_CMD(value);
 8045268:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 804526a:	f003 fae3 	bl	8048834 <MIN_Send_TEST_CONNECTION_CMD>
    snprintf(buffer, sizeof(buffer), "Sent TEST_CONNECTION_CMD with value: %lu", (unsigned long)value);
 804526e:	f107 0014 	add.w	r0, r7, #20
 8045272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8045274:	4a09      	ldr	r2, [pc, #36]	@ (804529c <CMD_DevTestConnection+0x78>)
 8045276:	2164      	movs	r1, #100	@ 0x64
 8045278:	f024 f9b2 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 804527c:	f107 0314 	add.w	r3, r7, #20
 8045280:	4619      	mov	r1, r3
 8045282:	68f8      	ldr	r0, [r7, #12]
 8045284:	f000 ff1c 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045288:	4905      	ldr	r1, [pc, #20]	@ (80452a0 <CMD_DevTestConnection+0x7c>)
 804528a:	68f8      	ldr	r0, [r7, #12]
 804528c:	f000 ff18 	bl	80460c0 <embeddedCliPrint>
}
 8045290:	3780      	adds	r7, #128	@ 0x80
 8045292:	46bd      	mov	sp, r7
 8045294:	bd80      	pop	{r7, pc}
 8045296:	bf00      	nop
 8045298:	0806cbd4 	.word	0x0806cbd4
 804529c:	0806cbfc 	.word	0x0806cbfc
 80452a0:	0806bd4c 	.word	0x0806bd4c

080452a4 <CMD_DevSetTempProfile>:

static void CMD_DevSetTempProfile(EmbeddedCli *cli, char *args, void *context)
{
 80452a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80452a6:	b0d5      	sub	sp, #340	@ 0x154
 80452a8:	af06      	add	r7, sp, #24
 80452aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80452b2:	6018      	str	r0, [r3, #0]
 80452b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80452bc:	6019      	str	r1, [r3, #0]
 80452be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80452c6:	601a      	str	r2, [r3, #0]
    char buffer[256];
    const char *arg1 = embeddedCliGetToken(args, 1);
 80452c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80452d0:	2101      	movs	r1, #1
 80452d2:	6818      	ldr	r0, [r3, #0]
 80452d4:	f000 ffb6 	bl	8046244 <embeddedCliGetToken>
 80452d8:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    const char *arg2 = embeddedCliGetToken(args, 2);
 80452dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80452e4:	2102      	movs	r1, #2
 80452e6:	6818      	ldr	r0, [r3, #0]
 80452e8:	f000 ffac 	bl	8046244 <embeddedCliGetToken>
 80452ec:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    const char *arg3 = embeddedCliGetToken(args, 3);
 80452f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80452f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80452f8:	2103      	movs	r1, #3
 80452fa:	6818      	ldr	r0, [r3, #0]
 80452fc:	f000 ffa2 	bl	8046244 <embeddedCliGetToken>
 8045300:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    const char *arg4 = embeddedCliGetToken(args, 4);
 8045304:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8045308:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 804530c:	2104      	movs	r1, #4
 804530e:	6818      	ldr	r0, [r3, #0]
 8045310:	f000 ff98 	bl	8046244 <embeddedCliGetToken>
 8045314:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *arg5 = embeddedCliGetToken(args, 5);
 8045318:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 804531c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8045320:	2105      	movs	r1, #5
 8045322:	6818      	ldr	r0, [r3, #0]
 8045324:	f000 ff8e 	bl	8046244 <embeddedCliGetToken>
 8045328:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    const char *arg6 = embeddedCliGetToken(args, 6);
 804532c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8045330:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8045334:	2106      	movs	r1, #6
 8045336:	6818      	ldr	r0, [r3, #0]
 8045338:	f000 ff84 	bl	8046244 <embeddedCliGetToken>
 804533c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    if (!arg1 || !arg2 || !arg3 || !arg4 || !arg5 || !arg6) {
 8045340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8045344:	2b00      	cmp	r3, #0
 8045346:	d013      	beq.n	8045370 <CMD_DevSetTempProfile+0xcc>
 8045348:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 804534c:	2b00      	cmp	r3, #0
 804534e:	d00f      	beq.n	8045370 <CMD_DevSetTempProfile+0xcc>
 8045350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8045354:	2b00      	cmp	r3, #0
 8045356:	d00b      	beq.n	8045370 <CMD_DevSetTempProfile+0xcc>
 8045358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 804535c:	2b00      	cmp	r3, #0
 804535e:	d007      	beq.n	8045370 <CMD_DevSetTempProfile+0xcc>
 8045360:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8045364:	2b00      	cmp	r3, #0
 8045366:	d003      	beq.n	8045370 <CMD_DevSetTempProfile+0xcc>
 8045368:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 804536c:	2b00      	cmp	r3, #0
 804536e:	d112      	bne.n	8045396 <CMD_DevSetTempProfile+0xf2>
        snprintf(buffer, sizeof(buffer), "Usage: set_temp_profile <ntc_index> <tec_pos> <heater_pos> <tec_vol> <heater_duty> <target_temp>");
 8045370:	f107 0314 	add.w	r3, r7, #20
 8045374:	4a43      	ldr	r2, [pc, #268]	@ (8045484 <CMD_DevSetTempProfile+0x1e0>)
 8045376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 804537a:	4618      	mov	r0, r3
 804537c:	f024 f930 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8045380:	f107 0214 	add.w	r2, r7, #20
 8045384:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8045388:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 804538c:	4611      	mov	r1, r2
 804538e:	6818      	ldr	r0, [r3, #0]
 8045390:	f000 fe96 	bl	80460c0 <embeddedCliPrint>
 8045394:	e072      	b.n	804547c <CMD_DevSetTempProfile+0x1d8>
        return;
    }

    uint8_t ntc_index         = (uint8_t)strtoul(arg1, NULL, 0);
 8045396:	2200      	movs	r2, #0
 8045398:	2100      	movs	r1, #0
 804539a:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 804539e:	f024 f841 	bl	8069424 <strtoul>
 80453a2:	4603      	mov	r3, r0
 80453a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t tec_positions     = (uint8_t)strtoul(arg2, NULL, 0);
 80453a8:	2200      	movs	r2, #0
 80453aa:	2100      	movs	r1, #0
 80453ac:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80453b0:	f024 f838 	bl	8069424 <strtoul>
 80453b4:	4603      	mov	r3, r0
 80453b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    uint8_t heater_positions  = (uint8_t)strtoul(arg3, NULL, 0);
 80453ba:	2200      	movs	r2, #0
 80453bc:	2100      	movs	r1, #0
 80453be:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80453c2:	f024 f82f 	bl	8069424 <strtoul>
 80453c6:	4603      	mov	r3, r0
 80453c8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
    uint16_t tec_vol          = (uint16_t)strtoul(arg4, NULL, 0);
 80453cc:	2200      	movs	r2, #0
 80453ce:	2100      	movs	r1, #0
 80453d0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80453d4:	f024 f826 	bl	8069424 <strtoul>
 80453d8:	4603      	mov	r3, r0
 80453da:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    uint8_t heater_duty_cycle = (uint8_t)strtoul(arg5, NULL, 0);
 80453de:	2200      	movs	r2, #0
 80453e0:	2100      	movs	r1, #0
 80453e2:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80453e6:	f024 f81d 	bl	8069424 <strtoul>
 80453ea:	4603      	mov	r3, r0
 80453ec:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    uint16_t target_temp      = (uint16_t)strtoul(arg6, NULL, 0);
 80453f0:	2200      	movs	r2, #0
 80453f2:	2100      	movs	r1, #0
 80453f4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80453f8:	f024 f814 	bl	8069424 <strtoul>
 80453fc:	4603      	mov	r3, r0
 80453fe:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116

    MIN_Send_SET_TEMP_PROFILE_CMD(ntc_index, tec_positions, heater_positions, tec_vol, heater_duty_cycle, target_temp);
 8045402:	f8b7 411a 	ldrh.w	r4, [r7, #282]	@ 0x11a
 8045406:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 804540a:	f897 111e 	ldrb.w	r1, [r7, #286]	@ 0x11e
 804540e:	f897 011f 	ldrb.w	r0, [r7, #287]	@ 0x11f
 8045412:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8045416:	9301      	str	r3, [sp, #4]
 8045418:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 804541c:	9300      	str	r3, [sp, #0]
 804541e:	4623      	mov	r3, r4
 8045420:	f003 fa58 	bl	80488d4 <MIN_Send_SET_TEMP_PROFILE_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_TEMP_PROFILE_CMD with params: %u, %u, %u, %u, %u, %u",
 8045424:	f897 611f 	ldrb.w	r6, [r7, #287]	@ 0x11f
 8045428:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 804542c:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8045430:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8045434:	f897 0119 	ldrb.w	r0, [r7, #281]	@ 0x119
 8045438:	f8b7 4116 	ldrh.w	r4, [r7, #278]	@ 0x116
 804543c:	f107 0514 	add.w	r5, r7, #20
 8045440:	9404      	str	r4, [sp, #16]
 8045442:	9003      	str	r0, [sp, #12]
 8045444:	9102      	str	r1, [sp, #8]
 8045446:	9201      	str	r2, [sp, #4]
 8045448:	9300      	str	r3, [sp, #0]
 804544a:	4633      	mov	r3, r6
 804544c:	4a0e      	ldr	r2, [pc, #56]	@ (8045488 <CMD_DevSetTempProfile+0x1e4>)
 804544e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8045452:	4628      	mov	r0, r5
 8045454:	f024 f8c4 	bl	80695e0 <sniprintf>
             ntc_index, tec_positions, heater_positions, tec_vol, heater_duty_cycle, target_temp);
    embeddedCliPrint(cli, buffer);
 8045458:	f107 0214 	add.w	r2, r7, #20
 804545c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8045460:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8045464:	4611      	mov	r1, r2
 8045466:	6818      	ldr	r0, [r3, #0]
 8045468:	f000 fe2a 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 804546c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8045470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8045474:	4905      	ldr	r1, [pc, #20]	@ (804548c <CMD_DevSetTempProfile+0x1e8>)
 8045476:	6818      	ldr	r0, [r3, #0]
 8045478:	f000 fe22 	bl	80460c0 <embeddedCliPrint>
}
 804547c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8045480:	46bd      	mov	sp, r7
 8045482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8045484:	0806cc28 	.word	0x0806cc28
 8045488:	0806cc8c 	.word	0x0806cc8c
 804548c:	0806bd4c 	.word	0x0806bd4c

08045490 <CMD_DevStartTempProfile>:

static void CMD_DevStartTempProfile(EmbeddedCli *cli, char *args, void *context)
{
 8045490:	b580      	push	{r7, lr}
 8045492:	b084      	sub	sp, #16
 8045494:	af00      	add	r7, sp, #0
 8045496:	60f8      	str	r0, [r7, #12]
 8045498:	60b9      	str	r1, [r7, #8]
 804549a:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_START_TEMP_PROFILE_CMD();
 804549c:	f003 fa84 	bl	80489a8 <MIN_Send_START_TEMP_PROFILE_CMD>
    embeddedCliPrint(cli, "Sent START_TEMP_PROFILE_CMD");
 80454a0:	4905      	ldr	r1, [pc, #20]	@ (80454b8 <CMD_DevStartTempProfile+0x28>)
 80454a2:	68f8      	ldr	r0, [r7, #12]
 80454a4:	f000 fe0c 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80454a8:	4904      	ldr	r1, [pc, #16]	@ (80454bc <CMD_DevStartTempProfile+0x2c>)
 80454aa:	68f8      	ldr	r0, [r7, #12]
 80454ac:	f000 fe08 	bl	80460c0 <embeddedCliPrint>
}
 80454b0:	bf00      	nop
 80454b2:	3710      	adds	r7, #16
 80454b4:	46bd      	mov	sp, r7
 80454b6:	bd80      	pop	{r7, pc}
 80454b8:	0806cccc 	.word	0x0806cccc
 80454bc:	0806bd4c 	.word	0x0806bd4c

080454c0 <CMD_DevStopTempProfile>:

static void CMD_DevStopTempProfile(EmbeddedCli *cli, char *args, void *context)
{
 80454c0:	b580      	push	{r7, lr}
 80454c2:	b084      	sub	sp, #16
 80454c4:	af00      	add	r7, sp, #0
 80454c6:	60f8      	str	r0, [r7, #12]
 80454c8:	60b9      	str	r1, [r7, #8]
 80454ca:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_STOP_TEMP_PROFILE_CMD();
 80454cc:	f003 faaa 	bl	8048a24 <MIN_Send_STOP_TEMP_PROFILE_CMD>
    embeddedCliPrint(cli, "Sent STOP_TEMP_PROFILE_CMD");
 80454d0:	4905      	ldr	r1, [pc, #20]	@ (80454e8 <CMD_DevStopTempProfile+0x28>)
 80454d2:	68f8      	ldr	r0, [r7, #12]
 80454d4:	f000 fdf4 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80454d8:	4904      	ldr	r1, [pc, #16]	@ (80454ec <CMD_DevStopTempProfile+0x2c>)
 80454da:	68f8      	ldr	r0, [r7, #12]
 80454dc:	f000 fdf0 	bl	80460c0 <embeddedCliPrint>
}
 80454e0:	bf00      	nop
 80454e2:	3710      	adds	r7, #16
 80454e4:	46bd      	mov	sp, r7
 80454e6:	bd80      	pop	{r7, pc}
 80454e8:	0806cce8 	.word	0x0806cce8
 80454ec:	0806bd4c 	.word	0x0806bd4c

080454f0 <CMD_DevSetOverrideTecProfile>:

static void CMD_DevSetOverrideTecProfile(EmbeddedCli *cli, char *args, void *context)
{
 80454f0:	b580      	push	{r7, lr}
 80454f2:	b0a2      	sub	sp, #136	@ 0x88
 80454f4:	af02      	add	r7, sp, #8
 80454f6:	60f8      	str	r0, [r7, #12]
 80454f8:	60b9      	str	r1, [r7, #8]
 80454fa:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 80454fc:	2101      	movs	r1, #1
 80454fe:	68b8      	ldr	r0, [r7, #8]
 8045500:	f000 fea0 	bl	8046244 <embeddedCliGetToken>
 8045504:	67f8      	str	r0, [r7, #124]	@ 0x7c
    const char *arg2 = embeddedCliGetToken(args, 2);
 8045506:	2102      	movs	r1, #2
 8045508:	68b8      	ldr	r0, [r7, #8]
 804550a:	f000 fe9b 	bl	8046244 <embeddedCliGetToken>
 804550e:	67b8      	str	r0, [r7, #120]	@ 0x78

    if (!arg1 || !arg2) {
 8045510:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8045512:	2b00      	cmp	r3, #0
 8045514:	d002      	beq.n	804551c <CMD_DevSetOverrideTecProfile+0x2c>
 8045516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8045518:	2b00      	cmp	r3, #0
 804551a:	d10d      	bne.n	8045538 <CMD_DevSetOverrideTecProfile+0x48>
        snprintf(buffer, sizeof(buffer), "Usage: set_override_tec_profile <tec_index> <tec_vol>");
 804551c:	f107 0310 	add.w	r3, r7, #16
 8045520:	4a1e      	ldr	r2, [pc, #120]	@ (804559c <CMD_DevSetOverrideTecProfile+0xac>)
 8045522:	2164      	movs	r1, #100	@ 0x64
 8045524:	4618      	mov	r0, r3
 8045526:	f024 f85b 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 804552a:	f107 0310 	add.w	r3, r7, #16
 804552e:	4619      	mov	r1, r3
 8045530:	68f8      	ldr	r0, [r7, #12]
 8045532:	f000 fdc5 	bl	80460c0 <embeddedCliPrint>
 8045536:	e02d      	b.n	8045594 <CMD_DevSetOverrideTecProfile+0xa4>
        return;
    }

    uint8_t ovr_tec_index = (uint8_t)strtoul(arg1, NULL, 0);
 8045538:	2200      	movs	r2, #0
 804553a:	2100      	movs	r1, #0
 804553c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 804553e:	f023 ff71 	bl	8069424 <strtoul>
 8045542:	4603      	mov	r3, r0
 8045544:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint16_t ovr_tec_vol  = (uint16_t)strtoul(arg2, NULL, 0);
 8045548:	2200      	movs	r2, #0
 804554a:	2100      	movs	r1, #0
 804554c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 804554e:	f023 ff69 	bl	8069424 <strtoul>
 8045552:	4603      	mov	r3, r0
 8045554:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

    MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD(ovr_tec_index, ovr_tec_vol);
 8045558:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 804555c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8045560:	4611      	mov	r1, r2
 8045562:	4618      	mov	r0, r3
 8045564:	f003 fa9c 	bl	8048aa0 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_OVERRIDE_TEC_PROFILE_CMD with params: %u, %u",
 8045568:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 804556c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8045570:	f107 0010 	add.w	r0, r7, #16
 8045574:	9300      	str	r3, [sp, #0]
 8045576:	4613      	mov	r3, r2
 8045578:	4a09      	ldr	r2, [pc, #36]	@ (80455a0 <CMD_DevSetOverrideTecProfile+0xb0>)
 804557a:	2164      	movs	r1, #100	@ 0x64
 804557c:	f024 f830 	bl	80695e0 <sniprintf>
             ovr_tec_index, ovr_tec_vol);
    embeddedCliPrint(cli, buffer);
 8045580:	f107 0310 	add.w	r3, r7, #16
 8045584:	4619      	mov	r1, r3
 8045586:	68f8      	ldr	r0, [r7, #12]
 8045588:	f000 fd9a 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 804558c:	4905      	ldr	r1, [pc, #20]	@ (80455a4 <CMD_DevSetOverrideTecProfile+0xb4>)
 804558e:	68f8      	ldr	r0, [r7, #12]
 8045590:	f000 fd96 	bl	80460c0 <embeddedCliPrint>
}
 8045594:	3780      	adds	r7, #128	@ 0x80
 8045596:	46bd      	mov	sp, r7
 8045598:	bd80      	pop	{r7, pc}
 804559a:	bf00      	nop
 804559c:	0806cd04 	.word	0x0806cd04
 80455a0:	0806cd3c 	.word	0x0806cd3c
 80455a4:	0806bd4c 	.word	0x0806bd4c

080455a8 <CMD_DevStartOverrideTecProfile>:

static void CMD_DevStartOverrideTecProfile(EmbeddedCli *cli, char *args, void *context)
{
 80455a8:	b580      	push	{r7, lr}
 80455aa:	b084      	sub	sp, #16
 80455ac:	af00      	add	r7, sp, #0
 80455ae:	60f8      	str	r0, [r7, #12]
 80455b0:	60b9      	str	r1, [r7, #8]
 80455b2:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD();
 80455b4:	f003 fac4 	bl	8048b40 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD>
    embeddedCliPrint(cli, "Sent START_OVERRIDE_TEC_PROFILE_CMD");
 80455b8:	4905      	ldr	r1, [pc, #20]	@ (80455d0 <CMD_DevStartOverrideTecProfile+0x28>)
 80455ba:	68f8      	ldr	r0, [r7, #12]
 80455bc:	f000 fd80 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80455c0:	4904      	ldr	r1, [pc, #16]	@ (80455d4 <CMD_DevStartOverrideTecProfile+0x2c>)
 80455c2:	68f8      	ldr	r0, [r7, #12]
 80455c4:	f000 fd7c 	bl	80460c0 <embeddedCliPrint>
}
 80455c8:	bf00      	nop
 80455ca:	3710      	adds	r7, #16
 80455cc:	46bd      	mov	sp, r7
 80455ce:	bd80      	pop	{r7, pc}
 80455d0:	0806cd74 	.word	0x0806cd74
 80455d4:	0806bd4c 	.word	0x0806bd4c

080455d8 <CMD_DevStopOverrideTecProfile>:

static void CMD_DevStopOverrideTecProfile(EmbeddedCli *cli, char *args, void *context)
{
 80455d8:	b580      	push	{r7, lr}
 80455da:	b084      	sub	sp, #16
 80455dc:	af00      	add	r7, sp, #0
 80455de:	60f8      	str	r0, [r7, #12]
 80455e0:	60b9      	str	r1, [r7, #8]
 80455e2:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD();
 80455e4:	f003 faea 	bl	8048bbc <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD>
    embeddedCliPrint(cli, "Sent STOP_OVERRIDE_TEC_PROFILE_CMD");
 80455e8:	4905      	ldr	r1, [pc, #20]	@ (8045600 <CMD_DevStopOverrideTecProfile+0x28>)
 80455ea:	68f8      	ldr	r0, [r7, #12]
 80455ec:	f000 fd68 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80455f0:	4904      	ldr	r1, [pc, #16]	@ (8045604 <CMD_DevStopOverrideTecProfile+0x2c>)
 80455f2:	68f8      	ldr	r0, [r7, #12]
 80455f4:	f000 fd64 	bl	80460c0 <embeddedCliPrint>
}
 80455f8:	bf00      	nop
 80455fa:	3710      	adds	r7, #16
 80455fc:	46bd      	mov	sp, r7
 80455fe:	bd80      	pop	{r7, pc}
 8045600:	0806cd98 	.word	0x0806cd98
 8045604:	0806bd4c 	.word	0x0806bd4c

08045608 <CMD_DevSetSamplingProfile>:

static void CMD_DevSetSamplingProfile(EmbeddedCli *cli, char *args, void *context)
{
 8045608:	b580      	push	{r7, lr}
 804560a:	b0b0      	sub	sp, #192	@ 0xc0
 804560c:	af04      	add	r7, sp, #16
 804560e:	60f8      	str	r0, [r7, #12]
 8045610:	60b9      	str	r1, [r7, #8]
 8045612:	607a      	str	r2, [r7, #4]
    char buffer[128];
    const char *arg1 = embeddedCliGetToken(args, 1);
 8045614:	2101      	movs	r1, #1
 8045616:	68b8      	ldr	r0, [r7, #8]
 8045618:	f000 fe14 	bl	8046244 <embeddedCliGetToken>
 804561c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    const char *arg2 = embeddedCliGetToken(args, 2);
 8045620:	2102      	movs	r1, #2
 8045622:	68b8      	ldr	r0, [r7, #8]
 8045624:	f000 fe0e 	bl	8046244 <embeddedCliGetToken>
 8045628:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    const char *arg3 = embeddedCliGetToken(args, 3);
 804562c:	2103      	movs	r1, #3
 804562e:	68b8      	ldr	r0, [r7, #8]
 8045630:	f000 fe08 	bl	8046244 <embeddedCliGetToken>
 8045634:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const char *arg4 = embeddedCliGetToken(args, 4);
 8045638:	2104      	movs	r1, #4
 804563a:	68b8      	ldr	r0, [r7, #8]
 804563c:	f000 fe02 	bl	8046244 <embeddedCliGetToken>
 8045640:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    if (!arg1 || !arg2 || !arg3 || !arg4) {
 8045644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8045648:	2b00      	cmp	r3, #0
 804564a:	d00b      	beq.n	8045664 <CMD_DevSetSamplingProfile+0x5c>
 804564c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8045650:	2b00      	cmp	r3, #0
 8045652:	d007      	beq.n	8045664 <CMD_DevSetSamplingProfile+0x5c>
 8045654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8045658:	2b00      	cmp	r3, #0
 804565a:	d003      	beq.n	8045664 <CMD_DevSetSamplingProfile+0x5c>
 804565c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8045660:	2b00      	cmp	r3, #0
 8045662:	d10d      	bne.n	8045680 <CMD_DevSetSamplingProfile+0x78>
        snprintf(buffer, sizeof(buffer), "Usage: set_sampling_profile <pre> <in> <post> <sample_rate>");
 8045664:	f107 0310 	add.w	r3, r7, #16
 8045668:	4a2a      	ldr	r2, [pc, #168]	@ (8045714 <CMD_DevSetSamplingProfile+0x10c>)
 804566a:	2180      	movs	r1, #128	@ 0x80
 804566c:	4618      	mov	r0, r3
 804566e:	f023 ffb7 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8045672:	f107 0310 	add.w	r3, r7, #16
 8045676:	4619      	mov	r1, r3
 8045678:	68f8      	ldr	r0, [r7, #12]
 804567a:	f000 fd21 	bl	80460c0 <embeddedCliPrint>
 804567e:	e045      	b.n	804570c <CMD_DevSetSamplingProfile+0x104>
        return;
    }

    uint32_t pre         = (uint32_t)strtoul(arg1, NULL, 0);
 8045680:	2200      	movs	r2, #0
 8045682:	2100      	movs	r1, #0
 8045684:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8045688:	f023 fecc 	bl	8069424 <strtoul>
 804568c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    uint32_t in          = (uint32_t)strtoul(arg2, NULL, 0);
 8045690:	2200      	movs	r2, #0
 8045692:	2100      	movs	r1, #0
 8045694:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8045698:	f023 fec4 	bl	8069424 <strtoul>
 804569c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    uint32_t post        = (uint32_t)strtoul(arg3, NULL, 0);
 80456a0:	2200      	movs	r2, #0
 80456a2:	2100      	movs	r1, #0
 80456a4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80456a8:	f023 febc 	bl	8069424 <strtoul>
 80456ac:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    uint16_t sample_rate = (uint16_t)strtoul(arg4, NULL, 0);
 80456b0:	2200      	movs	r2, #0
 80456b2:	2100      	movs	r1, #0
 80456b4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80456b8:	f023 feb4 	bl	8069424 <strtoul>
 80456bc:	4603      	mov	r3, r0
 80456be:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

    MIN_Send_SET_PDA_PROFILE_CMD(pre, in, post, sample_rate);
 80456c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80456c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80456ca:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80456ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80456d2:	f003 fab1 	bl	8048c38 <MIN_Send_SET_PDA_PROFILE_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_SAMPLING_PROFILE_CMD with params: pre=%lu, in=%lu, post=%lu, sample_rate=%u",
 80456d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80456da:	f107 0010 	add.w	r0, r7, #16
 80456de:	9302      	str	r3, [sp, #8]
 80456e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80456e4:	9301      	str	r3, [sp, #4]
 80456e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80456ea:	9300      	str	r3, [sp, #0]
 80456ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80456f0:	4a09      	ldr	r2, [pc, #36]	@ (8045718 <CMD_DevSetSamplingProfile+0x110>)
 80456f2:	2180      	movs	r1, #128	@ 0x80
 80456f4:	f023 ff74 	bl	80695e0 <sniprintf>
             (unsigned long)pre, (unsigned long)in, (unsigned long)post, sample_rate);
    embeddedCliPrint(cli, buffer);
 80456f8:	f107 0310 	add.w	r3, r7, #16
 80456fc:	4619      	mov	r1, r3
 80456fe:	68f8      	ldr	r0, [r7, #12]
 8045700:	f000 fcde 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045704:	4905      	ldr	r1, [pc, #20]	@ (804571c <CMD_DevSetSamplingProfile+0x114>)
 8045706:	68f8      	ldr	r0, [r7, #12]
 8045708:	f000 fcda 	bl	80460c0 <embeddedCliPrint>
}
 804570c:	37b0      	adds	r7, #176	@ 0xb0
 804570e:	46bd      	mov	sp, r7
 8045710:	bd80      	pop	{r7, pc}
 8045712:	bf00      	nop
 8045714:	0806cdbc 	.word	0x0806cdbc
 8045718:	0806cdf8 	.word	0x0806cdf8
 804571c:	0806bd4c 	.word	0x0806bd4c

08045720 <CMD_DevSetLaserIntensity>:

static void CMD_DevSetLaserIntensity(EmbeddedCli *cli, char *args, void *context)
{
 8045720:	b580      	push	{r7, lr}
 8045722:	b0a0      	sub	sp, #128	@ 0x80
 8045724:	af00      	add	r7, sp, #0
 8045726:	60f8      	str	r0, [r7, #12]
 8045728:	60b9      	str	r1, [r7, #8]
 804572a:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 804572c:	2101      	movs	r1, #1
 804572e:	68b8      	ldr	r0, [r7, #8]
 8045730:	f000 fd88 	bl	8046244 <embeddedCliGetToken>
 8045734:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!arg1) {
 8045736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8045738:	2b00      	cmp	r3, #0
 804573a:	d10d      	bne.n	8045758 <CMD_DevSetLaserIntensity+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: set_laser_intensity <intensity>");
 804573c:	f107 0314 	add.w	r3, r7, #20
 8045740:	4a16      	ldr	r2, [pc, #88]	@ (804579c <CMD_DevSetLaserIntensity+0x7c>)
 8045742:	2164      	movs	r1, #100	@ 0x64
 8045744:	4618      	mov	r0, r3
 8045746:	f023 ff4b 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 804574a:	f107 0314 	add.w	r3, r7, #20
 804574e:	4619      	mov	r1, r3
 8045750:	68f8      	ldr	r0, [r7, #12]
 8045752:	f000 fcb5 	bl	80460c0 <embeddedCliPrint>
 8045756:	e01e      	b.n	8045796 <CMD_DevSetLaserIntensity+0x76>
        return;
    }
    uint8_t intensity = (uint8_t)strtoul(arg1, NULL, 0);
 8045758:	2200      	movs	r2, #0
 804575a:	2100      	movs	r1, #0
 804575c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 804575e:	f023 fe61 	bl	8069424 <strtoul>
 8045762:	4603      	mov	r3, r0
 8045764:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    MIN_Send_SET_LASER_INTENSITY_CMD(intensity);
 8045768:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 804576c:	4618      	mov	r0, r3
 804576e:	f003 faeb 	bl	8048d48 <MIN_Send_SET_LASER_INTENSITY_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_LASER_INTENSITY_CMD with intensity: %u", intensity);
 8045772:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8045776:	f107 0014 	add.w	r0, r7, #20
 804577a:	4a09      	ldr	r2, [pc, #36]	@ (80457a0 <CMD_DevSetLaserIntensity+0x80>)
 804577c:	2164      	movs	r1, #100	@ 0x64
 804577e:	f023 ff2f 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8045782:	f107 0314 	add.w	r3, r7, #20
 8045786:	4619      	mov	r1, r3
 8045788:	68f8      	ldr	r0, [r7, #12]
 804578a:	f000 fc99 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 804578e:	4905      	ldr	r1, [pc, #20]	@ (80457a4 <CMD_DevSetLaserIntensity+0x84>)
 8045790:	68f8      	ldr	r0, [r7, #12]
 8045792:	f000 fc95 	bl	80460c0 <embeddedCliPrint>
}
 8045796:	3780      	adds	r7, #128	@ 0x80
 8045798:	46bd      	mov	sp, r7
 804579a:	bd80      	pop	{r7, pc}
 804579c:	0806ce50 	.word	0x0806ce50
 80457a0:	0806ce78 	.word	0x0806ce78
 80457a4:	0806bd4c 	.word	0x0806bd4c

080457a8 <CMD_DevSetPosition>:

static void CMD_DevSetPosition(EmbeddedCli *cli, char *args, void *context)
{
 80457a8:	b580      	push	{r7, lr}
 80457aa:	b0a0      	sub	sp, #128	@ 0x80
 80457ac:	af00      	add	r7, sp, #0
 80457ae:	60f8      	str	r0, [r7, #12]
 80457b0:	60b9      	str	r1, [r7, #8]
 80457b2:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 80457b4:	2101      	movs	r1, #1
 80457b6:	68b8      	ldr	r0, [r7, #8]
 80457b8:	f000 fd44 	bl	8046244 <embeddedCliGetToken>
 80457bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!arg1) {
 80457be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80457c0:	2b00      	cmp	r3, #0
 80457c2:	d10d      	bne.n	80457e0 <CMD_DevSetPosition+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: set_position <position>");
 80457c4:	f107 0314 	add.w	r3, r7, #20
 80457c8:	4a16      	ldr	r2, [pc, #88]	@ (8045824 <CMD_DevSetPosition+0x7c>)
 80457ca:	2164      	movs	r1, #100	@ 0x64
 80457cc:	4618      	mov	r0, r3
 80457ce:	f023 ff07 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80457d2:	f107 0314 	add.w	r3, r7, #20
 80457d6:	4619      	mov	r1, r3
 80457d8:	68f8      	ldr	r0, [r7, #12]
 80457da:	f000 fc71 	bl	80460c0 <embeddedCliPrint>
 80457de:	e01e      	b.n	804581e <CMD_DevSetPosition+0x76>
        return;
    }
    uint8_t position = (uint8_t)strtoul(arg1, NULL, 0);
 80457e0:	2200      	movs	r2, #0
 80457e2:	2100      	movs	r1, #0
 80457e4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80457e6:	f023 fe1d 	bl	8069424 <strtoul>
 80457ea:	4603      	mov	r3, r0
 80457ec:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    MIN_Send_SET_POSITION_CMD(position);
 80457f0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80457f4:	4618      	mov	r0, r3
 80457f6:	f003 faed 	bl	8048dd4 <MIN_Send_SET_POSITION_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_POSITION_CMD with position: %u", position);
 80457fa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80457fe:	f107 0014 	add.w	r0, r7, #20
 8045802:	4a09      	ldr	r2, [pc, #36]	@ (8045828 <CMD_DevSetPosition+0x80>)
 8045804:	2164      	movs	r1, #100	@ 0x64
 8045806:	f023 feeb 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 804580a:	f107 0314 	add.w	r3, r7, #20
 804580e:	4619      	mov	r1, r3
 8045810:	68f8      	ldr	r0, [r7, #12]
 8045812:	f000 fc55 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045816:	4905      	ldr	r1, [pc, #20]	@ (804582c <CMD_DevSetPosition+0x84>)
 8045818:	68f8      	ldr	r0, [r7, #12]
 804581a:	f000 fc51 	bl	80460c0 <embeddedCliPrint>
}
 804581e:	3780      	adds	r7, #128	@ 0x80
 8045820:	46bd      	mov	sp, r7
 8045822:	bd80      	pop	{r7, pc}
 8045824:	0806cea8 	.word	0x0806cea8
 8045828:	0806cec8 	.word	0x0806cec8
 804582c:	0806bd4c 	.word	0x0806bd4c

08045830 <CMD_DevStartSamplingCycle>:

static void CMD_DevStartSamplingCycle(EmbeddedCli *cli, char *args, void *context)
{
 8045830:	b580      	push	{r7, lr}
 8045832:	b084      	sub	sp, #16
 8045834:	af00      	add	r7, sp, #0
 8045836:	60f8      	str	r0, [r7, #12]
 8045838:	60b9      	str	r1, [r7, #8]
 804583a:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_START_SAMPLE_CYCLE_CMD();
 804583c:	f003 fb10 	bl	8048e60 <MIN_Send_START_SAMPLE_CYCLE_CMD>
    embeddedCliPrint(cli, "Sent START_SAMPLING_CYCLE_CMD");
 8045840:	4905      	ldr	r1, [pc, #20]	@ (8045858 <CMD_DevStartSamplingCycle+0x28>)
 8045842:	68f8      	ldr	r0, [r7, #12]
 8045844:	f000 fc3c 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045848:	4904      	ldr	r1, [pc, #16]	@ (804585c <CMD_DevStartSamplingCycle+0x2c>)
 804584a:	68f8      	ldr	r0, [r7, #12]
 804584c:	f000 fc38 	bl	80460c0 <embeddedCliPrint>
}
 8045850:	bf00      	nop
 8045852:	3710      	adds	r7, #16
 8045854:	46bd      	mov	sp, r7
 8045856:	bd80      	pop	{r7, pc}
 8045858:	0806cef0 	.word	0x0806cef0
 804585c:	0806bd4c 	.word	0x0806bd4c

08045860 <CMD_DevGetInfoSample>:

static void CMD_DevGetInfoSample(EmbeddedCli *cli, char *args, void *context)
{
 8045860:	b580      	push	{r7, lr}
 8045862:	b084      	sub	sp, #16
 8045864:	af00      	add	r7, sp, #0
 8045866:	60f8      	str	r0, [r7, #12]
 8045868:	60b9      	str	r1, [r7, #8]
 804586a:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_GET_INFO_SAMPLE_CMD();
 804586c:	f003 fb36 	bl	8048edc <MIN_Send_GET_INFO_SAMPLE_CMD>
    embeddedCliPrint(cli, "Sent GET_INFO_SAMPLE_CMD");
 8045870:	4905      	ldr	r1, [pc, #20]	@ (8045888 <CMD_DevGetInfoSample+0x28>)
 8045872:	68f8      	ldr	r0, [r7, #12]
 8045874:	f000 fc24 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045878:	4904      	ldr	r1, [pc, #16]	@ (804588c <CMD_DevGetInfoSample+0x2c>)
 804587a:	68f8      	ldr	r0, [r7, #12]
 804587c:	f000 fc20 	bl	80460c0 <embeddedCliPrint>
}
 8045880:	bf00      	nop
 8045882:	3710      	adds	r7, #16
 8045884:	46bd      	mov	sp, r7
 8045886:	bd80      	pop	{r7, pc}
 8045888:	0806cf10 	.word	0x0806cf10
 804588c:	0806bd4c 	.word	0x0806bd4c

08045890 <CMD_DevGetChunk>:

static void CMD_DevGetChunk(EmbeddedCli *cli, char *args, void *context)
{
 8045890:	b580      	push	{r7, lr}
 8045892:	b0a0      	sub	sp, #128	@ 0x80
 8045894:	af00      	add	r7, sp, #0
 8045896:	60f8      	str	r0, [r7, #12]
 8045898:	60b9      	str	r1, [r7, #8]
 804589a:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 804589c:	2101      	movs	r1, #1
 804589e:	68b8      	ldr	r0, [r7, #8]
 80458a0:	f000 fcd0 	bl	8046244 <embeddedCliGetToken>
 80458a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!arg1) {
 80458a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80458a8:	2b00      	cmp	r3, #0
 80458aa:	d10d      	bne.n	80458c8 <CMD_DevGetChunk+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: get_chunk <num_chunk>");
 80458ac:	f107 0314 	add.w	r3, r7, #20
 80458b0:	4a16      	ldr	r2, [pc, #88]	@ (804590c <CMD_DevGetChunk+0x7c>)
 80458b2:	2164      	movs	r1, #100	@ 0x64
 80458b4:	4618      	mov	r0, r3
 80458b6:	f023 fe93 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80458ba:	f107 0314 	add.w	r3, r7, #20
 80458be:	4619      	mov	r1, r3
 80458c0:	68f8      	ldr	r0, [r7, #12]
 80458c2:	f000 fbfd 	bl	80460c0 <embeddedCliPrint>
 80458c6:	e01e      	b.n	8045906 <CMD_DevGetChunk+0x76>
        return;
    }
    uint8_t noChunk = (uint8_t)strtoul(arg1, NULL, 0);
 80458c8:	2200      	movs	r2, #0
 80458ca:	2100      	movs	r1, #0
 80458cc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80458ce:	f023 fda9 	bl	8069424 <strtoul>
 80458d2:	4603      	mov	r3, r0
 80458d4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    MIN_Send_GET_CHUNK_CMD(noChunk);
 80458d8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80458dc:	4618      	mov	r0, r3
 80458de:	f003 fb3b 	bl	8048f58 <MIN_Send_GET_CHUNK_CMD>
    snprintf(buffer, sizeof(buffer), "Sent GET_CHUNK_CMD for chunk: %u", noChunk);
 80458e2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80458e6:	f107 0014 	add.w	r0, r7, #20
 80458ea:	4a09      	ldr	r2, [pc, #36]	@ (8045910 <CMD_DevGetChunk+0x80>)
 80458ec:	2164      	movs	r1, #100	@ 0x64
 80458ee:	f023 fe77 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80458f2:	f107 0314 	add.w	r3, r7, #20
 80458f6:	4619      	mov	r1, r3
 80458f8:	68f8      	ldr	r0, [r7, #12]
 80458fa:	f000 fbe1 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80458fe:	4905      	ldr	r1, [pc, #20]	@ (8045914 <CMD_DevGetChunk+0x84>)
 8045900:	68f8      	ldr	r0, [r7, #12]
 8045902:	f000 fbdd 	bl	80460c0 <embeddedCliPrint>
}
 8045906:	3780      	adds	r7, #128	@ 0x80
 8045908:	46bd      	mov	sp, r7
 804590a:	bd80      	pop	{r7, pc}
 804590c:	0806cf2c 	.word	0x0806cf2c
 8045910:	0806cf4c 	.word	0x0806cf4c
 8045914:	0806bd4c 	.word	0x0806bd4c

08045918 <CMD_DevSetExtLaserProfile>:

static void CMD_DevSetExtLaserProfile(EmbeddedCli *cli, char *args, void *context)
{
 8045918:	b580      	push	{r7, lr}
 804591a:	b0a0      	sub	sp, #128	@ 0x80
 804591c:	af00      	add	r7, sp, #0
 804591e:	60f8      	str	r0, [r7, #12]
 8045920:	60b9      	str	r1, [r7, #8]
 8045922:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 8045924:	2101      	movs	r1, #1
 8045926:	68b8      	ldr	r0, [r7, #8]
 8045928:	f000 fc8c 	bl	8046244 <embeddedCliGetToken>
 804592c:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!arg1) {
 804592e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8045930:	2b00      	cmp	r3, #0
 8045932:	d10d      	bne.n	8045950 <CMD_DevSetExtLaserProfile+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: set_ext_laser_profile <intensity>");
 8045934:	f107 0314 	add.w	r3, r7, #20
 8045938:	4a16      	ldr	r2, [pc, #88]	@ (8045994 <CMD_DevSetExtLaserProfile+0x7c>)
 804593a:	2164      	movs	r1, #100	@ 0x64
 804593c:	4618      	mov	r0, r3
 804593e:	f023 fe4f 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8045942:	f107 0314 	add.w	r3, r7, #20
 8045946:	4619      	mov	r1, r3
 8045948:	68f8      	ldr	r0, [r7, #12]
 804594a:	f000 fbb9 	bl	80460c0 <embeddedCliPrint>
 804594e:	e01e      	b.n	804598e <CMD_DevSetExtLaserProfile+0x76>
        return;
    }
    uint8_t intensity = (uint8_t)strtoul(arg1, NULL, 0);
 8045950:	2200      	movs	r2, #0
 8045952:	2100      	movs	r1, #0
 8045954:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8045956:	f023 fd65 	bl	8069424 <strtoul>
 804595a:	4603      	mov	r3, r0
 804595c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    MIN_Send_SET_EXT_LASER_INTENSITY_CMD(intensity);
 8045960:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8045964:	4618      	mov	r0, r3
 8045966:	f003 fb3d 	bl	8048fe4 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD>
    snprintf(buffer, sizeof(buffer), "Sent SET_EXT_LASER_PROFILE_CMD with intensity: %u", intensity);
 804596a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 804596e:	f107 0014 	add.w	r0, r7, #20
 8045972:	4a09      	ldr	r2, [pc, #36]	@ (8045998 <CMD_DevSetExtLaserProfile+0x80>)
 8045974:	2164      	movs	r1, #100	@ 0x64
 8045976:	f023 fe33 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 804597a:	f107 0314 	add.w	r3, r7, #20
 804597e:	4619      	mov	r1, r3
 8045980:	68f8      	ldr	r0, [r7, #12]
 8045982:	f000 fb9d 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045986:	4905      	ldr	r1, [pc, #20]	@ (804599c <CMD_DevSetExtLaserProfile+0x84>)
 8045988:	68f8      	ldr	r0, [r7, #12]
 804598a:	f000 fb99 	bl	80460c0 <embeddedCliPrint>
}
 804598e:	3780      	adds	r7, #128	@ 0x80
 8045990:	46bd      	mov	sp, r7
 8045992:	bd80      	pop	{r7, pc}
 8045994:	0806cf70 	.word	0x0806cf70
 8045998:	0806cf9c 	.word	0x0806cf9c
 804599c:	0806bd4c 	.word	0x0806bd4c

080459a0 <CMD_DevTurnOnExtLaser>:

static void CMD_DevTurnOnExtLaser(EmbeddedCli *cli, char *args, void *context)
{
 80459a0:	b580      	push	{r7, lr}
 80459a2:	b0a0      	sub	sp, #128	@ 0x80
 80459a4:	af00      	add	r7, sp, #0
 80459a6:	60f8      	str	r0, [r7, #12]
 80459a8:	60b9      	str	r1, [r7, #8]
 80459aa:	607a      	str	r2, [r7, #4]
    char buffer[100];
    const char *arg1 = embeddedCliGetToken(args, 1);
 80459ac:	2101      	movs	r1, #1
 80459ae:	68b8      	ldr	r0, [r7, #8]
 80459b0:	f000 fc48 	bl	8046244 <embeddedCliGetToken>
 80459b4:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!arg1) {
 80459b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80459b8:	2b00      	cmp	r3, #0
 80459ba:	d10d      	bne.n	80459d8 <CMD_DevTurnOnExtLaser+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: turn_on_ext_laser <position>");
 80459bc:	f107 0314 	add.w	r3, r7, #20
 80459c0:	4a16      	ldr	r2, [pc, #88]	@ (8045a1c <CMD_DevTurnOnExtLaser+0x7c>)
 80459c2:	2164      	movs	r1, #100	@ 0x64
 80459c4:	4618      	mov	r0, r3
 80459c6:	f023 fe0b 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80459ca:	f107 0314 	add.w	r3, r7, #20
 80459ce:	4619      	mov	r1, r3
 80459d0:	68f8      	ldr	r0, [r7, #12]
 80459d2:	f000 fb75 	bl	80460c0 <embeddedCliPrint>
 80459d6:	e01e      	b.n	8045a16 <CMD_DevTurnOnExtLaser+0x76>
        return;
    }
    uint8_t position = (uint8_t)strtoul(arg1, NULL, 0);
 80459d8:	2200      	movs	r2, #0
 80459da:	2100      	movs	r1, #0
 80459dc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80459de:	f023 fd21 	bl	8069424 <strtoul>
 80459e2:	4603      	mov	r3, r0
 80459e4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    MIN_Send_TURN_ON_EXT_LASER_CMD(position);
 80459e8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80459ec:	4618      	mov	r0, r3
 80459ee:	f003 fb3f 	bl	8049070 <MIN_Send_TURN_ON_EXT_LASER_CMD>
    snprintf(buffer, sizeof(buffer), "Sent TURN_ON_EXT_LASER_CMD for position: %u", position);
 80459f2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80459f6:	f107 0014 	add.w	r0, r7, #20
 80459fa:	4a09      	ldr	r2, [pc, #36]	@ (8045a20 <CMD_DevTurnOnExtLaser+0x80>)
 80459fc:	2164      	movs	r1, #100	@ 0x64
 80459fe:	f023 fdef 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8045a02:	f107 0314 	add.w	r3, r7, #20
 8045a06:	4619      	mov	r1, r3
 8045a08:	68f8      	ldr	r0, [r7, #12]
 8045a0a:	f000 fb59 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045a0e:	4905      	ldr	r1, [pc, #20]	@ (8045a24 <CMD_DevTurnOnExtLaser+0x84>)
 8045a10:	68f8      	ldr	r0, [r7, #12]
 8045a12:	f000 fb55 	bl	80460c0 <embeddedCliPrint>
}
 8045a16:	3780      	adds	r7, #128	@ 0x80
 8045a18:	46bd      	mov	sp, r7
 8045a1a:	bd80      	pop	{r7, pc}
 8045a1c:	0806cfd0 	.word	0x0806cfd0
 8045a20:	0806cff4 	.word	0x0806cff4
 8045a24:	0806bd4c 	.word	0x0806bd4c

08045a28 <CMD_DevTurnOffExtLaser>:

static void CMD_DevTurnOffExtLaser(EmbeddedCli *cli, char *args, void *context)
{
 8045a28:	b580      	push	{r7, lr}
 8045a2a:	b084      	sub	sp, #16
 8045a2c:	af00      	add	r7, sp, #0
 8045a2e:	60f8      	str	r0, [r7, #12]
 8045a30:	60b9      	str	r1, [r7, #8]
 8045a32:	607a      	str	r2, [r7, #4]
    (void)args;
    (void)context;
    MIN_Send_TURN_OFF_EXT_LASER_CMD();
 8045a34:	f003 fb62 	bl	80490fc <MIN_Send_TURN_OFF_EXT_LASER_CMD>
    embeddedCliPrint(cli, "Sent TURN_OFF_EXT_LASER_CMD");
 8045a38:	4905      	ldr	r1, [pc, #20]	@ (8045a50 <CMD_DevTurnOffExtLaser+0x28>)
 8045a3a:	68f8      	ldr	r0, [r7, #12]
 8045a3c:	f000 fb40 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045a40:	4904      	ldr	r1, [pc, #16]	@ (8045a54 <CMD_DevTurnOffExtLaser+0x2c>)
 8045a42:	68f8      	ldr	r0, [r7, #12]
 8045a44:	f000 fb3c 	bl	80460c0 <embeddedCliPrint>
}
 8045a48:	bf00      	nop
 8045a4a:	3710      	adds	r7, #16
 8045a4c:	46bd      	mov	sp, r7
 8045a4e:	bd80      	pop	{r7, pc}
 8045a50:	0806d020 	.word	0x0806d020
 8045a54:	0806bd4c 	.word	0x0806bd4c

08045a58 <CMD_DevCustomCommand>:

static void CMD_DevCustomCommand(EmbeddedCli *cli, char *args, void *context)
{
 8045a58:	b580      	push	{r7, lr}
 8045a5a:	b09e      	sub	sp, #120	@ 0x78
 8045a5c:	af00      	add	r7, sp, #0
 8045a5e:	60f8      	str	r0, [r7, #12]
 8045a60:	60b9      	str	r1, [r7, #8]
 8045a62:	607a      	str	r2, [r7, #4]
    char buffer[100];
    if (args == NULL || *args == '\0') {
 8045a64:	68bb      	ldr	r3, [r7, #8]
 8045a66:	2b00      	cmp	r3, #0
 8045a68:	d003      	beq.n	8045a72 <CMD_DevCustomCommand+0x1a>
 8045a6a:	68bb      	ldr	r3, [r7, #8]
 8045a6c:	781b      	ldrb	r3, [r3, #0]
 8045a6e:	2b00      	cmp	r3, #0
 8045a70:	d10d      	bne.n	8045a8e <CMD_DevCustomCommand+0x36>
        snprintf(buffer, sizeof(buffer), "Usage: custom_cmd <string>");
 8045a72:	f107 0314 	add.w	r3, r7, #20
 8045a76:	4a14      	ldr	r2, [pc, #80]	@ (8045ac8 <CMD_DevCustomCommand+0x70>)
 8045a78:	2164      	movs	r1, #100	@ 0x64
 8045a7a:	4618      	mov	r0, r3
 8045a7c:	f023 fdb0 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8045a80:	f107 0314 	add.w	r3, r7, #20
 8045a84:	4619      	mov	r1, r3
 8045a86:	68f8      	ldr	r0, [r7, #12]
 8045a88:	f000 fb1a 	bl	80460c0 <embeddedCliPrint>
 8045a8c:	e019      	b.n	8045ac2 <CMD_DevCustomCommand+0x6a>
        return;
    }
    MIN_Send_CUSTOM_COMMAND_CMD(args, strlen(args));
 8045a8e:	68b8      	ldr	r0, [r7, #8]
 8045a90:	f7fa fc30 	bl	80402f4 <strlen>
 8045a94:	4603      	mov	r3, r0
 8045a96:	b2db      	uxtb	r3, r3
 8045a98:	4619      	mov	r1, r3
 8045a9a:	68b8      	ldr	r0, [r7, #8]
 8045a9c:	f003 fb6c 	bl	8049178 <MIN_Send_CUSTOM_COMMAND_CMD>
    snprintf(buffer, sizeof(buffer), "Sent CUSTOM_COMMAND with string: \"%s\"", args);
 8045aa0:	f107 0014 	add.w	r0, r7, #20
 8045aa4:	68bb      	ldr	r3, [r7, #8]
 8045aa6:	4a09      	ldr	r2, [pc, #36]	@ (8045acc <CMD_DevCustomCommand+0x74>)
 8045aa8:	2164      	movs	r1, #100	@ 0x64
 8045aaa:	f023 fd99 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8045aae:	f107 0314 	add.w	r3, r7, #20
 8045ab2:	4619      	mov	r1, r3
 8045ab4:	68f8      	ldr	r0, [r7, #12]
 8045ab6:	f000 fb03 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045aba:	4905      	ldr	r1, [pc, #20]	@ (8045ad0 <CMD_DevCustomCommand+0x78>)
 8045abc:	68f8      	ldr	r0, [r7, #12]
 8045abe:	f000 faff 	bl	80460c0 <embeddedCliPrint>
}
 8045ac2:	3778      	adds	r7, #120	@ 0x78
 8045ac4:	46bd      	mov	sp, r7
 8045ac6:	bd80      	pop	{r7, pc}
 8045ac8:	0806d03c 	.word	0x0806d03c
 8045acc:	0806d058 	.word	0x0806d058
 8045ad0:	0806bd4c 	.word	0x0806bd4c

08045ad4 <CMD_DevScriptManager>:


static void CMD_DevScriptManager(EmbeddedCli *cli, char *args, void *context)
{
 8045ad4:	b580      	push	{r7, lr}
 8045ad6:	b084      	sub	sp, #16
 8045ad8:	af00      	add	r7, sp, #0
 8045ada:	60f8      	str	r0, [r7, #12]
 8045adc:	60b9      	str	r1, [r7, #8]
 8045ade:	607a      	str	r2, [r7, #4]
	UserActivityTrigger();
 8045ae0:	f004 faa6 	bl	804a030 <UserActivityTrigger>
    ScriptManager_PrintStatus();
 8045ae4:	f005 fc70 	bl	804b3c8 <ScriptManager_PrintStatus>

    embeddedCliPrint(cli, "");
 8045ae8:	4903      	ldr	r1, [pc, #12]	@ (8045af8 <CMD_DevScriptManager+0x24>)
 8045aea:	68f8      	ldr	r0, [r7, #12]
 8045aec:	f000 fae8 	bl	80460c0 <embeddedCliPrint>
}
 8045af0:	bf00      	nop
 8045af2:	3710      	adds	r7, #16
 8045af4:	46bd      	mov	sp, r7
 8045af6:	bd80      	pop	{r7, pc}
 8045af8:	0806bd4c 	.word	0x0806bd4c

08045afc <CMD_DevEraseScript>:

static void CMD_DevEraseScript(EmbeddedCli *cli, char *args, void *context)
{
 8045afc:	b580      	push	{r7, lr}
 8045afe:	b084      	sub	sp, #16
 8045b00:	af00      	add	r7, sp, #0
 8045b02:	60f8      	str	r0, [r7, #12]
 8045b04:	60b9      	str	r1, [r7, #8]
 8045b06:	607a      	str	r2, [r7, #4]
	ScriptManager_EraseAllScriptsFromFRAM();
 8045b08:	f004 fa1c 	bl	8049f44 <ScriptManager_EraseAllScriptsFromFRAM>

    embeddedCliPrint(cli, "");
 8045b0c:	4903      	ldr	r1, [pc, #12]	@ (8045b1c <CMD_DevEraseScript+0x20>)
 8045b0e:	68f8      	ldr	r0, [r7, #12]
 8045b10:	f000 fad6 	bl	80460c0 <embeddedCliPrint>
}
 8045b14:	bf00      	nop
 8045b16:	3710      	adds	r7, #16
 8045b18:	46bd      	mov	sp, r7
 8045b1a:	bd80      	pop	{r7, pc}
 8045b1c:	0806bd4c 	.word	0x0806bd4c

08045b20 <CMD_DevLogManagerDebug>:

static void CMD_DevLogManagerDebug(EmbeddedCli *cli, char *args, void *context)
{
 8045b20:	b580      	push	{r7, lr}
 8045b22:	b086      	sub	sp, #24
 8045b24:	af00      	add	r7, sp, #0
 8045b26:	60f8      	str	r0, [r7, #12]
 8045b28:	60b9      	str	r1, [r7, #8]
 8045b2a:	607a      	str	r2, [r7, #4]

	for (LogSource_TypeDef source = 0; source < LOG_SOURCE_COUNT; source++) {
 8045b2c:	2300      	movs	r3, #0
 8045b2e:	75fb      	strb	r3, [r7, #23]
 8045b30:	e010      	b.n	8045b54 <CMD_DevLogManagerDebug+0x34>
		LogManager_DebugInfo(source);
 8045b32:	7dfb      	ldrb	r3, [r7, #23]
 8045b34:	4618      	mov	r0, r3
 8045b36:	f013 fbcd 	bl	80592d4 <LogManager_DebugInfo>
		LogManager_DumpBuffer(source, LOG_BUFFER_LEFT);
 8045b3a:	7dfb      	ldrb	r3, [r7, #23]
 8045b3c:	2100      	movs	r1, #0
 8045b3e:	4618      	mov	r0, r3
 8045b40:	f013 fc20 	bl	8059384 <LogManager_DumpBuffer>
		LogManager_DumpBuffer(source, LOG_BUFFER_RIGHT);
 8045b44:	7dfb      	ldrb	r3, [r7, #23]
 8045b46:	2101      	movs	r1, #1
 8045b48:	4618      	mov	r0, r3
 8045b4a:	f013 fc1b 	bl	8059384 <LogManager_DumpBuffer>
	for (LogSource_TypeDef source = 0; source < LOG_SOURCE_COUNT; source++) {
 8045b4e:	7dfb      	ldrb	r3, [r7, #23]
 8045b50:	3301      	adds	r3, #1
 8045b52:	75fb      	strb	r3, [r7, #23]
 8045b54:	7dfb      	ldrb	r3, [r7, #23]
 8045b56:	2b01      	cmp	r3, #1
 8045b58:	d9eb      	bls.n	8045b32 <CMD_DevLogManagerDebug+0x12>
	}

    embeddedCliPrint(cli, "");
 8045b5a:	4904      	ldr	r1, [pc, #16]	@ (8045b6c <CMD_DevLogManagerDebug+0x4c>)
 8045b5c:	68f8      	ldr	r0, [r7, #12]
 8045b5e:	f000 faaf 	bl	80460c0 <embeddedCliPrint>
}
 8045b62:	bf00      	nop
 8045b64:	3718      	adds	r7, #24
 8045b66:	46bd      	mov	sp, r7
 8045b68:	bd80      	pop	{r7, pc}
 8045b6a:	bf00      	nop
 8045b6c:	0806bd4c 	.word	0x0806bd4c

08045b70 <CMD_DevLogManagerLog>:


static void CMD_DevLogManagerLog(EmbeddedCli *cli, char *args, void *context)
{
 8045b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045b72:	b09d      	sub	sp, #116	@ 0x74
 8045b74:	af06      	add	r7, sp, #24
 8045b76:	60f8      	str	r0, [r7, #12]
 8045b78:	60b9      	str	r1, [r7, #8]
 8045b7a:	607a      	str	r2, [r7, #4]
    s_DateTime now;
    Utils_GetRTC(&now);
 8045b7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8045b80:	4618      	mov	r0, r3
 8045b82:	f007 fffd 	bl	804db80 <Utils_GetRTC>

    LWL_Log(OBC_STM32_LOGTEST, now.day, now.month, now.year, now.hour, now.minute, now.second);
 8045b86:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8045b8a:	4618      	mov	r0, r3
 8045b8c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8045b90:	461c      	mov	r4, r3
 8045b92:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8045b96:	461d      	mov	r5, r3
 8045b98:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8045b9c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8045ba0:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 8045ba4:	9102      	str	r1, [sp, #8]
 8045ba6:	9201      	str	r2, [sp, #4]
 8045ba8:	9300      	str	r3, [sp, #0]
 8045baa:	462b      	mov	r3, r5
 8045bac:	4622      	mov	r2, r4
 8045bae:	4601      	mov	r1, r0
 8045bb0:	201b      	movs	r0, #27
 8045bb2:	f013 fcc5 	bl	8059540 <LWL_Log>

    char log_msg[64];
    snprintf(log_msg, sizeof(log_msg),
             "Time logged: %02d/%02d/20%02d %02d:%02d:%02d\r\n",
             now.day, now.month, now.year,
 8045bb6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
    snprintf(log_msg, sizeof(log_msg),
 8045bba:	461e      	mov	r6, r3
             now.day, now.month, now.year,
 8045bbc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8045bc0:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
             now.hour, now.minute, now.second);
 8045bc4:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 8045bc8:	f897 0054 	ldrb.w	r0, [r7, #84]	@ 0x54
    snprintf(log_msg, sizeof(log_msg),
 8045bcc:	4604      	mov	r4, r0
             now.hour, now.minute, now.second);
 8045bce:	f897 0055 	ldrb.w	r0, [r7, #85]	@ 0x55
    snprintf(log_msg, sizeof(log_msg),
 8045bd2:	4605      	mov	r5, r0
 8045bd4:	f107 0010 	add.w	r0, r7, #16
 8045bd8:	9504      	str	r5, [sp, #16]
 8045bda:	9403      	str	r4, [sp, #12]
 8045bdc:	9102      	str	r1, [sp, #8]
 8045bde:	9201      	str	r2, [sp, #4]
 8045be0:	9300      	str	r3, [sp, #0]
 8045be2:	4633      	mov	r3, r6
 8045be4:	4a08      	ldr	r2, [pc, #32]	@ (8045c08 <CMD_DevLogManagerLog+0x98>)
 8045be6:	2140      	movs	r1, #64	@ 0x40
 8045be8:	f023 fcfa 	bl	80695e0 <sniprintf>

    embeddedCliPrint(cli, log_msg);
 8045bec:	f107 0310 	add.w	r3, r7, #16
 8045bf0:	4619      	mov	r1, r3
 8045bf2:	68f8      	ldr	r0, [r7, #12]
 8045bf4:	f000 fa64 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045bf8:	4904      	ldr	r1, [pc, #16]	@ (8045c0c <CMD_DevLogManagerLog+0x9c>)
 8045bfa:	68f8      	ldr	r0, [r7, #12]
 8045bfc:	f000 fa60 	bl	80460c0 <embeddedCliPrint>
}
 8045c00:	bf00      	nop
 8045c02:	375c      	adds	r7, #92	@ 0x5c
 8045c04:	46bd      	mov	sp, r7
 8045c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8045c08:	0806d080 	.word	0x0806d080
 8045c0c:	0806bd4c 	.word	0x0806bd4c

08045c10 <CMD_DevCM4KeepAliveStatus>:

static void CMD_DevCM4KeepAliveStatus(EmbeddedCli *cli, char *args, void *context)
{
 8045c10:	b580      	push	{r7, lr}
 8045c12:	b096      	sub	sp, #88	@ 0x58
 8045c14:	af02      	add	r7, sp, #8
 8045c16:	60f8      	str	r0, [r7, #12]
 8045c18:	60b9      	str	r1, [r7, #8]
 8045c1a:	607a      	str	r2, [r7, #4]
    char status[64];
    snprintf(status, sizeof(status), "CM4 Miss Count: %u / %d\r\n",
             CM4_GetMissCount(), MAX_RETRY_COUNT);
 8045c1c:	f7fd f8cc 	bl	8042db8 <CM4_GetMissCount>
 8045c20:	4603      	mov	r3, r0
    snprintf(status, sizeof(status), "CM4 Miss Count: %u / %d\r\n",
 8045c22:	461a      	mov	r2, r3
 8045c24:	f107 0010 	add.w	r0, r7, #16
 8045c28:	2378      	movs	r3, #120	@ 0x78
 8045c2a:	9300      	str	r3, [sp, #0]
 8045c2c:	4613      	mov	r3, r2
 8045c2e:	4a09      	ldr	r2, [pc, #36]	@ (8045c54 <CMD_DevCM4KeepAliveStatus+0x44>)
 8045c30:	2140      	movs	r1, #64	@ 0x40
 8045c32:	f023 fcd5 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, status);
 8045c36:	f107 0310 	add.w	r3, r7, #16
 8045c3a:	4619      	mov	r1, r3
 8045c3c:	68f8      	ldr	r0, [r7, #12]
 8045c3e:	f000 fa3f 	bl	80460c0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8045c42:	4905      	ldr	r1, [pc, #20]	@ (8045c58 <CMD_DevCM4KeepAliveStatus+0x48>)
 8045c44:	68f8      	ldr	r0, [r7, #12]
 8045c46:	f000 fa3b 	bl	80460c0 <embeddedCliPrint>
}
 8045c4a:	bf00      	nop
 8045c4c:	3750      	adds	r7, #80	@ 0x50
 8045c4e:	46bd      	mov	sp, r7
 8045c50:	bd80      	pop	{r7, pc}
 8045c52:	bf00      	nop
 8045c54:	0806d0b0 	.word	0x0806d0b0
 8045c58:	0806bd4c 	.word	0x0806bd4c

08045c5c <CMD_Boot_Reset>:

static void CMD_Boot_Reset(EmbeddedCli *cli, char *args, void *context)
{
 8045c5c:	b580      	push	{r7, lr}
 8045c5e:	b084      	sub	sp, #16
 8045c60:	af00      	add	r7, sp, #0
 8045c62:	60f8      	str	r0, [r7, #12]
 8045c64:	60b9      	str	r1, [r7, #8]
 8045c66:	607a      	str	r2, [r7, #4]
	embeddedCliPrint(cli, "bootloader");
 8045c68:	4906      	ldr	r1, [pc, #24]	@ (8045c84 <CMD_Boot_Reset+0x28>)
 8045c6a:	68f8      	ldr	r0, [r7, #12]
 8045c6c:	f000 fa28 	bl	80460c0 <embeddedCliPrint>
	vTaskDelay(1000);
 8045c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8045c74:	f010 fcf6 	bl	8056664 <vTaskDelay>
	System_On_Bootloader_Reset();
 8045c78:	f006 fa50 	bl	804c11c <System_On_Bootloader_Reset>
}
 8045c7c:	bf00      	nop
 8045c7e:	3710      	adds	r7, #16
 8045c80:	46bd      	mov	sp, r7
 8045c82:	bd80      	pop	{r7, pc}
 8045c84:	0806d0cc 	.word	0x0806d0cc

08045c88 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 8045c88:	b480      	push	{r7}
 8045c8a:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8045c8c:	4b02      	ldr	r3, [pc, #8]	@ (8045c98 <getCliStaticBindings+0x10>)
}
 8045c8e:	4618      	mov	r0, r3
 8045c90:	46bd      	mov	sp, r7
 8045c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c96:	4770      	bx	lr
 8045c98:	0807188c 	.word	0x0807188c

08045c9c <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8045c9c:	b480      	push	{r7}
 8045c9e:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8045ca0:	2338      	movs	r3, #56	@ 0x38
}
 8045ca2:	4618      	mov	r0, r3
 8045ca4:	46bd      	mov	sp, r7
 8045ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045caa:	4770      	bx	lr

08045cac <writeCharToCli_USBCDC>:

/*************************************************
 *          Tx Transmit CLI Byte Buffer          *
 *************************************************/

static void writeCharToCli_USBCDC(EmbeddedCli *embeddedCli, char c) {
 8045cac:	b580      	push	{r7, lr}
 8045cae:	b084      	sub	sp, #16
 8045cb0:	af00      	add	r7, sp, #0
 8045cb2:	6078      	str	r0, [r7, #4]
 8045cb4:	460b      	mov	r3, r1
 8045cb6:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 8045cb8:	78fb      	ldrb	r3, [r7, #3]
 8045cba:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 8045cbc:	7bfb      	ldrb	r3, [r7, #15]
 8045cbe:	4619      	mov	r1, r3
 8045cc0:	4803      	ldr	r0, [pc, #12]	@ (8045cd0 <writeCharToCli_USBCDC+0x24>)
 8045cc2:	f7fc fdff 	bl	80428c4 <UART_Driver_Write>
}
 8045cc6:	bf00      	nop
 8045cc8:	3710      	adds	r7, #16
 8045cca:	46bd      	mov	sp, r7
 8045ccc:	bd80      	pop	{r7, pc}
 8045cce:	bf00      	nop
 8045cd0:	40011000 	.word	0x40011000

08045cd4 <SystemCLI_Init>:
//}

//Call before FREERTOS be initialized
//Call After UART Driver Init (or Peripheral use CLI)

Std_ReturnType SystemCLI_Init() {
 8045cd4:	b580      	push	{r7, lr}
 8045cd6:	b082      	sub	sp, #8
 8045cd8:	af00      	add	r7, sp, #0
    // Initialize the CLI configuration settings
    // Initialize USB CDC CLI
    EmbeddedCliConfig *usbcdc_config = embeddedCliDefaultConfig();
 8045cda:	f000 f853 	bl	8045d84 <embeddedCliDefaultConfig>
 8045cde:	6078      	str	r0, [r7, #4]
    usbcdc_config->cliBuffer = usbcdc_cliStaticBuffer;
 8045ce0:	687b      	ldr	r3, [r7, #4]
 8045ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8045d58 <SystemCLI_Init+0x84>)
 8045ce4:	60da      	str	r2, [r3, #12]
    usbcdc_config->cliBufferSize = USBCDC_CLI_BUFFER_SIZE;
 8045ce6:	687b      	ldr	r3, [r7, #4]
 8045ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8045cec:	821a      	strh	r2, [r3, #16]
    usbcdc_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 8045cee:	687b      	ldr	r3, [r7, #4]
 8045cf0:	2210      	movs	r2, #16
 8045cf2:	809a      	strh	r2, [r3, #4]
    usbcdc_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8045cf4:	687b      	ldr	r3, [r7, #4]
 8045cf6:	2240      	movs	r2, #64	@ 0x40
 8045cf8:	80da      	strh	r2, [r3, #6]
    usbcdc_config->historyBufferSize = CLI_HISTORY_SIZE;
 8045cfa:	687b      	ldr	r3, [r7, #4]
 8045cfc:	2280      	movs	r2, #128	@ 0x80
 8045cfe:	811a      	strh	r2, [r3, #8]
    usbcdc_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8045d00:	687b      	ldr	r3, [r7, #4]
 8045d02:	2220      	movs	r2, #32
 8045d04:	815a      	strh	r2, [r3, #10]
    usbcdc_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 8045d06:	687b      	ldr	r3, [r7, #4]
 8045d08:	2201      	movs	r2, #1
 8045d0a:	749a      	strb	r2, [r3, #18]
    usbcdc_config->invitation = CLI_INITATION_USB;
 8045d0c:	687b      	ldr	r3, [r7, #4]
 8045d0e:	4a13      	ldr	r2, [pc, #76]	@ (8045d5c <SystemCLI_Init+0x88>)
 8045d10:	601a      	str	r2, [r3, #0]
    usbcdc_config->staticBindings = getCliStaticBindings();
 8045d12:	f7ff ffb9 	bl	8045c88 <getCliStaticBindings>
 8045d16:	4602      	mov	r2, r0
 8045d18:	687b      	ldr	r3, [r7, #4]
 8045d1a:	615a      	str	r2, [r3, #20]
    usbcdc_config->staticBindingCount = getCliStaticBindingCount();
 8045d1c:	f7ff ffbe 	bl	8045c9c <getCliStaticBindingCount>
 8045d20:	4603      	mov	r3, r0
 8045d22:	461a      	mov	r2, r3
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	831a      	strh	r2, [r3, #24]

    cli_usbcdc = embeddedCliNew(usbcdc_config);
 8045d28:	6878      	ldr	r0, [r7, #4]
 8045d2a:	f000 f886 	bl	8045e3a <embeddedCliNew>
 8045d2e:	4603      	mov	r3, r0
 8045d30:	4a0b      	ldr	r2, [pc, #44]	@ (8045d60 <SystemCLI_Init+0x8c>)
 8045d32:	6013      	str	r3, [r2, #0]
    if (cli_usbcdc == NULL) {
 8045d34:	4b0a      	ldr	r3, [pc, #40]	@ (8045d60 <SystemCLI_Init+0x8c>)
 8045d36:	681b      	ldr	r3, [r3, #0]
 8045d38:	2b00      	cmp	r3, #0
 8045d3a:	d101      	bne.n	8045d40 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8045d3c:	2301      	movs	r3, #1
 8045d3e:	e007      	b.n	8045d50 <SystemCLI_Init+0x7c>
    }
    cli_usbcdc->writeChar = writeCharToCli_USBCDC;
 8045d40:	4b07      	ldr	r3, [pc, #28]	@ (8045d60 <SystemCLI_Init+0x8c>)
 8045d42:	681b      	ldr	r3, [r3, #0]
 8045d44:	4a07      	ldr	r2, [pc, #28]	@ (8045d64 <SystemCLI_Init+0x90>)
 8045d46:	601a      	str	r2, [r3, #0]

    // Init the CLI with blank screen
//    onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 8045d48:	4b07      	ldr	r3, [pc, #28]	@ (8045d68 <SystemCLI_Init+0x94>)
 8045d4a:	2201      	movs	r2, #1
 8045d4c:	701a      	strb	r2, [r3, #0]

    return E_OK;
 8045d4e:	2300      	movs	r3, #0
}
 8045d50:	4618      	mov	r0, r3
 8045d52:	3708      	adds	r7, #8
 8045d54:	46bd      	mov	sp, r7
 8045d56:	bd80      	pop	{r7, pc}
 8045d58:	2401df78 	.word	0x2401df78
 8045d5c:	0806d0d8 	.word	0x0806d0d8
 8045d60:	2401e778 	.word	0x2401e778
 8045d64:	08045cad 	.word	0x08045cad
 8045d68:	2401e77c 	.word	0x2401e77c

08045d6c <getUsbCdcCliPointer>:


/*************************************************
 *             Get CLI Pointers                  *
 *************************************************/
EmbeddedCli *getUsbCdcCliPointer() {
 8045d6c:	b480      	push	{r7}
 8045d6e:	af00      	add	r7, sp, #0
    return cli_usbcdc;
 8045d70:	4b03      	ldr	r3, [pc, #12]	@ (8045d80 <getUsbCdcCliPointer+0x14>)
 8045d72:	681b      	ldr	r3, [r3, #0]
}
 8045d74:	4618      	mov	r0, r3
 8045d76:	46bd      	mov	sp, r7
 8045d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d7c:	4770      	bx	lr
 8045d7e:	bf00      	nop
 8045d80:	2401e778 	.word	0x2401e778

08045d84 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8045d84:	b480      	push	{r7}
 8045d86:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8045d88:	4b11      	ldr	r3, [pc, #68]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045d8a:	2240      	movs	r2, #64	@ 0x40
 8045d8c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8045d8e:	4b10      	ldr	r3, [pc, #64]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045d90:	2240      	movs	r2, #64	@ 0x40
 8045d92:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8045d94:	4b0e      	ldr	r3, [pc, #56]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045d96:	2280      	movs	r2, #128	@ 0x80
 8045d98:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8045d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045d9c:	2200      	movs	r2, #0
 8045d9e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8045da0:	4b0b      	ldr	r3, [pc, #44]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045da2:	2200      	movs	r2, #0
 8045da4:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8045da6:	4b0a      	ldr	r3, [pc, #40]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045da8:	2208      	movs	r2, #8
 8045daa:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8045dac:	4b08      	ldr	r3, [pc, #32]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045dae:	2201      	movs	r2, #1
 8045db0:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8045db2:	4b07      	ldr	r3, [pc, #28]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045db4:	4a07      	ldr	r2, [pc, #28]	@ (8045dd4 <embeddedCliDefaultConfig+0x50>)
 8045db6:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 8045db8:	4b05      	ldr	r3, [pc, #20]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045dba:	2200      	movs	r2, #0
 8045dbc:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 8045dbe:	4b04      	ldr	r3, [pc, #16]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
 8045dc0:	2200      	movs	r2, #0
 8045dc2:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8045dc4:	4b02      	ldr	r3, [pc, #8]	@ (8045dd0 <embeddedCliDefaultConfig+0x4c>)
}
 8045dc6:	4618      	mov	r0, r3
 8045dc8:	46bd      	mov	sp, r7
 8045dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045dce:	4770      	bx	lr
 8045dd0:	2401e780 	.word	0x2401e780
 8045dd4:	0806d108 	.word	0x0806d108

08045dd8 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8045dd8:	b480      	push	{r7}
 8045dda:	b085      	sub	sp, #20
 8045ddc:	af00      	add	r7, sp, #0
 8045dde:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 8045de0:	687b      	ldr	r3, [r7, #4]
 8045de2:	695b      	ldr	r3, [r3, #20]
 8045de4:	2b00      	cmp	r3, #0
 8045de6:	d102      	bne.n	8045dee <embeddedCliRequiredSize+0x16>
 8045de8:	687b      	ldr	r3, [r7, #4]
 8045dea:	895b      	ldrh	r3, [r3, #10]
 8045dec:	e000      	b.n	8045df0 <embeddedCliRequiredSize+0x18>
 8045dee:	2300      	movs	r3, #0
 8045df0:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8045df2:	687b      	ldr	r3, [r7, #4]
 8045df4:	889b      	ldrh	r3, [r3, #4]
 8045df6:	3303      	adds	r3, #3
 8045df8:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8045dfa:	687b      	ldr	r3, [r7, #4]
 8045dfc:	88db      	ldrh	r3, [r3, #6]
 8045dfe:	3303      	adds	r3, #3
 8045e00:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8045e02:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8045e04:	687b      	ldr	r3, [r7, #4]
 8045e06:	891b      	ldrh	r3, [r3, #8]
 8045e08:	3303      	adds	r3, #3
 8045e0a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8045e0c:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8045e0e:	89fa      	ldrh	r2, [r7, #14]
 8045e10:	4613      	mov	r3, r2
 8045e12:	005b      	lsls	r3, r3, #1
 8045e14:	4413      	add	r3, r2
 8045e16:	00db      	lsls	r3, r3, #3
 8045e18:	3303      	adds	r3, #3
 8045e1a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8045e1c:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 8045e1e:	89fb      	ldrh	r3, [r7, #14]
 8045e20:	3303      	adds	r3, #3
 8045e22:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8045e24:	4413      	add	r3, r2
 8045e26:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8045e28:	b29b      	uxth	r3, r3
 8045e2a:	009b      	lsls	r3, r3, #2
 8045e2c:	b29b      	uxth	r3, r3
    ));
}
 8045e2e:	4618      	mov	r0, r3
 8045e30:	3714      	adds	r7, #20
 8045e32:	46bd      	mov	sp, r7
 8045e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e38:	4770      	bx	lr

08045e3a <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8045e3a:	b580      	push	{r7, lr}
 8045e3c:	b088      	sub	sp, #32
 8045e3e:	af00      	add	r7, sp, #0
 8045e40:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8045e42:	2300      	movs	r3, #0
 8045e44:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 8045e46:	6878      	ldr	r0, [r7, #4]
 8045e48:	f7ff ffc6 	bl	8045dd8 <embeddedCliRequiredSize>
 8045e4c:	4603      	mov	r3, r0
 8045e4e:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 8045e50:	2300      	movs	r3, #0
 8045e52:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8045e54:	687b      	ldr	r3, [r7, #4]
 8045e56:	68db      	ldr	r3, [r3, #12]
 8045e58:	2b00      	cmp	r3, #0
 8045e5a:	d005      	beq.n	8045e68 <embeddedCliNew+0x2e>
 8045e5c:	687b      	ldr	r3, [r7, #4]
 8045e5e:	8a1b      	ldrh	r3, [r3, #16]
 8045e60:	461a      	mov	r2, r3
 8045e62:	69bb      	ldr	r3, [r7, #24]
 8045e64:	4293      	cmp	r3, r2
 8045e66:	d901      	bls.n	8045e6c <embeddedCliNew+0x32>
        return NULL;
 8045e68:	2300      	movs	r3, #0
 8045e6a:	e071      	b.n	8045f50 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 8045e6c:	687b      	ldr	r3, [r7, #4]
 8045e6e:	68db      	ldr	r3, [r3, #12]
 8045e70:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 8045e72:	69ba      	ldr	r2, [r7, #24]
 8045e74:	2100      	movs	r1, #0
 8045e76:	6938      	ldr	r0, [r7, #16]
 8045e78:	f023 fcb4 	bl	80697e4 <memset>

    cli = (EmbeddedCli *) buf;
 8045e7c:	693b      	ldr	r3, [r7, #16]
 8045e7e:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8045e80:	693b      	ldr	r3, [r7, #16]
 8045e82:	3310      	adds	r3, #16
 8045e84:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8045e86:	69fb      	ldr	r3, [r7, #28]
 8045e88:	693a      	ldr	r2, [r7, #16]
 8045e8a:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8045e8c:	693b      	ldr	r3, [r7, #16]
 8045e8e:	3338      	adds	r3, #56	@ 0x38
 8045e90:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8045e92:	69fb      	ldr	r3, [r7, #28]
 8045e94:	68db      	ldr	r3, [r3, #12]
 8045e96:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8045e98:	68fb      	ldr	r3, [r7, #12]
 8045e9a:	693a      	ldr	r2, [r7, #16]
 8045e9c:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8045e9e:	687b      	ldr	r3, [r7, #4]
 8045ea0:	889b      	ldrh	r3, [r3, #4]
 8045ea2:	3303      	adds	r3, #3
 8045ea4:	f023 0303 	bic.w	r3, r3, #3
 8045ea8:	693a      	ldr	r2, [r7, #16]
 8045eaa:	4413      	add	r3, r2
 8045eac:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 8045eae:	68fb      	ldr	r3, [r7, #12]
 8045eb0:	693a      	ldr	r2, [r7, #16]
 8045eb2:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8045eb4:	687b      	ldr	r3, [r7, #4]
 8045eb6:	88db      	ldrh	r3, [r3, #6]
 8045eb8:	3303      	adds	r3, #3
 8045eba:	f023 0303 	bic.w	r3, r3, #3
 8045ebe:	693a      	ldr	r2, [r7, #16]
 8045ec0:	4413      	add	r3, r2
 8045ec2:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8045ec4:	687b      	ldr	r3, [r7, #4]
 8045ec6:	695a      	ldr	r2, [r3, #20]
 8045ec8:	68fb      	ldr	r3, [r7, #12]
 8045eca:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8045ecc:	687b      	ldr	r3, [r7, #4]
 8045ece:	8b1a      	ldrh	r2, [r3, #24]
 8045ed0:	68fb      	ldr	r3, [r7, #12]
 8045ed2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8045ed4:	687b      	ldr	r3, [r7, #4]
 8045ed6:	8b1a      	ldrh	r2, [r3, #24]
 8045ed8:	68fb      	ldr	r3, [r7, #12]
 8045eda:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8045edc:	68fb      	ldr	r3, [r7, #12]
 8045ede:	693a      	ldr	r2, [r7, #16]
 8045ee0:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8045ee2:	687b      	ldr	r3, [r7, #4]
 8045ee4:	891a      	ldrh	r2, [r3, #8]
 8045ee6:	68fb      	ldr	r3, [r7, #12]
 8045ee8:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8045eea:	7dfb      	ldrb	r3, [r7, #23]
 8045eec:	2b00      	cmp	r3, #0
 8045eee:	d008      	beq.n	8045f02 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8045ef0:	68fb      	ldr	r3, [r7, #12]
 8045ef2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045ef6:	f043 0304 	orr.w	r3, r3, #4
 8045efa:	b2da      	uxtb	r2, r3
 8045efc:	68fb      	ldr	r3, [r7, #12]
 8045efe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8045f02:	687b      	ldr	r3, [r7, #4]
 8045f04:	7c9b      	ldrb	r3, [r3, #18]
 8045f06:	2b00      	cmp	r3, #0
 8045f08:	d008      	beq.n	8045f1c <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8045f0a:	68fb      	ldr	r3, [r7, #12]
 8045f0c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045f10:	f043 0320 	orr.w	r3, r3, #32
 8045f14:	b2da      	uxtb	r2, r3
 8045f16:	68fb      	ldr	r3, [r7, #12]
 8045f18:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8045f1c:	687b      	ldr	r3, [r7, #4]
 8045f1e:	889a      	ldrh	r2, [r3, #4]
 8045f20:	68fb      	ldr	r3, [r7, #12]
 8045f22:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8045f24:	68fb      	ldr	r3, [r7, #12]
 8045f26:	2200      	movs	r2, #0
 8045f28:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8045f2a:	68fb      	ldr	r3, [r7, #12]
 8045f2c:	2200      	movs	r2, #0
 8045f2e:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8045f30:	687b      	ldr	r3, [r7, #4]
 8045f32:	88da      	ldrh	r2, [r3, #6]
 8045f34:	68fb      	ldr	r3, [r7, #12]
 8045f36:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8045f38:	68fb      	ldr	r3, [r7, #12]
 8045f3a:	2200      	movs	r2, #0
 8045f3c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8045f40:	687b      	ldr	r3, [r7, #4]
 8045f42:	681a      	ldr	r2, [r3, #0]
 8045f44:	68fb      	ldr	r3, [r7, #12]
 8045f46:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 8045f48:	68fb      	ldr	r3, [r7, #12]
 8045f4a:	2200      	movs	r2, #0
 8045f4c:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 8045f4e:	69fb      	ldr	r3, [r7, #28]
}
 8045f50:	4618      	mov	r0, r3
 8045f52:	3720      	adds	r7, #32
 8045f54:	46bd      	mov	sp, r7
 8045f56:	bd80      	pop	{r7, pc}

08045f58 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8045f58:	b580      	push	{r7, lr}
 8045f5a:	b084      	sub	sp, #16
 8045f5c:	af00      	add	r7, sp, #0
 8045f5e:	6078      	str	r0, [r7, #4]
 8045f60:	460b      	mov	r3, r1
 8045f62:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8045f64:	687b      	ldr	r3, [r7, #4]
 8045f66:	68db      	ldr	r3, [r3, #12]
 8045f68:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8045f6a:	68fb      	ldr	r3, [r7, #12]
 8045f6c:	3310      	adds	r3, #16
 8045f6e:	78fa      	ldrb	r2, [r7, #3]
 8045f70:	4611      	mov	r1, r2
 8045f72:	4618      	mov	r0, r3
 8045f74:	f000 ff8a 	bl	8046e8c <fifoBufPush>
 8045f78:	4603      	mov	r3, r0
 8045f7a:	f083 0301 	eor.w	r3, r3, #1
 8045f7e:	b2db      	uxtb	r3, r3
 8045f80:	2b00      	cmp	r3, #0
 8045f82:	d008      	beq.n	8045f96 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8045f84:	68fb      	ldr	r3, [r7, #12]
 8045f86:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045f8a:	f043 0301 	orr.w	r3, r3, #1
 8045f8e:	b2da      	uxtb	r2, r3
 8045f90:	68fb      	ldr	r3, [r7, #12]
 8045f92:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8045f96:	bf00      	nop
 8045f98:	3710      	adds	r7, #16
 8045f9a:	46bd      	mov	sp, r7
 8045f9c:	bd80      	pop	{r7, pc}

08045f9e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8045f9e:	b580      	push	{r7, lr}
 8045fa0:	b084      	sub	sp, #16
 8045fa2:	af00      	add	r7, sp, #0
 8045fa4:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8045fa6:	687b      	ldr	r3, [r7, #4]
 8045fa8:	681b      	ldr	r3, [r3, #0]
 8045faa:	2b00      	cmp	r3, #0
 8045fac:	f000 8083 	beq.w	80460b6 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8045fb0:	687b      	ldr	r3, [r7, #4]
 8045fb2:	68db      	ldr	r3, [r3, #12]
 8045fb4:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8045fb6:	68fb      	ldr	r3, [r7, #12]
 8045fb8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045fbc:	f003 0302 	and.w	r3, r3, #2
 8045fc0:	2b00      	cmp	r3, #0
 8045fc2:	d155      	bne.n	8046070 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8045fc4:	68fb      	ldr	r3, [r7, #12]
 8045fc6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045fca:	f043 0302 	orr.w	r3, r3, #2
 8045fce:	b2da      	uxtb	r2, r3
 8045fd0:	68fb      	ldr	r3, [r7, #12]
 8045fd2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8045fd6:	68fb      	ldr	r3, [r7, #12]
 8045fd8:	681b      	ldr	r3, [r3, #0]
 8045fda:	4619      	mov	r1, r3
 8045fdc:	6878      	ldr	r0, [r7, #4]
 8045fde:	f000 fe7e 	bl	8046cde <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8045fe2:	e045      	b.n	8046070 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8045fe4:	68fb      	ldr	r3, [r7, #12]
 8045fe6:	3310      	adds	r3, #16
 8045fe8:	4618      	mov	r0, r3
 8045fea:	f000 ff27 	bl	8046e3c <fifoBufPop>
 8045fee:	4603      	mov	r3, r0
 8045ff0:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8045ff2:	68fb      	ldr	r3, [r7, #12]
 8045ff4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8045ff8:	f003 0308 	and.w	r3, r3, #8
 8045ffc:	2b00      	cmp	r3, #0
 8045ffe:	d005      	beq.n	804600c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8046000:	7afb      	ldrb	r3, [r7, #11]
 8046002:	4619      	mov	r1, r3
 8046004:	6878      	ldr	r0, [r7, #4]
 8046006:	f000 f9f5 	bl	80463f4 <onEscapedInput>
 804600a:	e02a      	b.n	8046062 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 804600c:	68fb      	ldr	r3, [r7, #12]
 804600e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8046012:	2b1b      	cmp	r3, #27
 8046014:	d10c      	bne.n	8046030 <embeddedCliProcess+0x92>
 8046016:	7afb      	ldrb	r3, [r7, #11]
 8046018:	2b5b      	cmp	r3, #91	@ 0x5b
 804601a:	d109      	bne.n	8046030 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 804601c:	68fb      	ldr	r3, [r7, #12]
 804601e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046022:	f043 0308 	orr.w	r3, r3, #8
 8046026:	b2da      	uxtb	r2, r3
 8046028:	68fb      	ldr	r3, [r7, #12]
 804602a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 804602e:	e018      	b.n	8046062 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8046030:	7afb      	ldrb	r3, [r7, #11]
 8046032:	4618      	mov	r0, r3
 8046034:	f000 feaa 	bl	8046d8c <isControlChar>
 8046038:	4603      	mov	r3, r0
 804603a:	2b00      	cmp	r3, #0
 804603c:	d005      	beq.n	804604a <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 804603e:	7afb      	ldrb	r3, [r7, #11]
 8046040:	4619      	mov	r1, r3
 8046042:	6878      	ldr	r0, [r7, #4]
 8046044:	f000 fa86 	bl	8046554 <onControlInput>
 8046048:	e00b      	b.n	8046062 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 804604a:	7afb      	ldrb	r3, [r7, #11]
 804604c:	4618      	mov	r0, r3
 804604e:	f000 febd 	bl	8046dcc <isDisplayableChar>
 8046052:	4603      	mov	r3, r0
 8046054:	2b00      	cmp	r3, #0
 8046056:	d004      	beq.n	8046062 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8046058:	7afb      	ldrb	r3, [r7, #11]
 804605a:	4619      	mov	r1, r3
 804605c:	6878      	ldr	r0, [r7, #4]
 804605e:	f000 fa27 	bl	80464b0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8046062:	6878      	ldr	r0, [r7, #4]
 8046064:	f000 fd12 	bl	8046a8c <printLiveAutocompletion>

        impl->lastChar = c;
 8046068:	68fb      	ldr	r3, [r7, #12]
 804606a:	7afa      	ldrb	r2, [r7, #11]
 804606c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8046070:	68fb      	ldr	r3, [r7, #12]
 8046072:	3310      	adds	r3, #16
 8046074:	4618      	mov	r0, r3
 8046076:	f000 fec0 	bl	8046dfa <fifoBufAvailable>
 804607a:	4603      	mov	r3, r0
 804607c:	2b00      	cmp	r3, #0
 804607e:	d1b1      	bne.n	8045fe4 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8046080:	68fb      	ldr	r3, [r7, #12]
 8046082:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046086:	f003 0301 	and.w	r3, r3, #1
 804608a:	2b00      	cmp	r3, #0
 804608c:	d014      	beq.n	80460b8 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 804608e:	68fb      	ldr	r3, [r7, #12]
 8046090:	2200      	movs	r2, #0
 8046092:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8046094:	68fb      	ldr	r3, [r7, #12]
 8046096:	69db      	ldr	r3, [r3, #28]
 8046098:	68fa      	ldr	r2, [r7, #12]
 804609a:	8c12      	ldrh	r2, [r2, #32]
 804609c:	4413      	add	r3, r2
 804609e:	2200      	movs	r2, #0
 80460a0:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80460a2:	68fb      	ldr	r3, [r7, #12]
 80460a4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80460a8:	f023 0301 	bic.w	r3, r3, #1
 80460ac:	b2da      	uxtb	r2, r3
 80460ae:	68fb      	ldr	r3, [r7, #12]
 80460b0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80460b4:	e000      	b.n	80460b8 <embeddedCliProcess+0x11a>
        return;
 80460b6:	bf00      	nop
    }
}
 80460b8:	3710      	adds	r7, #16
 80460ba:	46bd      	mov	sp, r7
 80460bc:	bd80      	pop	{r7, pc}
	...

080460c0 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80460c0:	b580      	push	{r7, lr}
 80460c2:	b084      	sub	sp, #16
 80460c4:	af00      	add	r7, sp, #0
 80460c6:	6078      	str	r0, [r7, #4]
 80460c8:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80460ca:	687b      	ldr	r3, [r7, #4]
 80460cc:	681b      	ldr	r3, [r3, #0]
 80460ce:	2b00      	cmp	r3, #0
 80460d0:	d03e      	beq.n	8046150 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 80460d2:	687b      	ldr	r3, [r7, #4]
 80460d4:	68db      	ldr	r3, [r3, #12]
 80460d6:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 80460d8:	68fb      	ldr	r3, [r7, #12]
 80460da:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80460dc:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80460de:	68fb      	ldr	r3, [r7, #12]
 80460e0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80460e4:	f003 0310 	and.w	r3, r3, #16
 80460e8:	2b00      	cmp	r3, #0
 80460ea:	d102      	bne.n	80460f2 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 80460ec:	6878      	ldr	r0, [r7, #4]
 80460ee:	f000 fdc1 	bl	8046c74 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 80460f2:	68fb      	ldr	r3, [r7, #12]
 80460f4:	897a      	ldrh	r2, [r7, #10]
 80460f6:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 80460f8:	6839      	ldr	r1, [r7, #0]
 80460fa:	6878      	ldr	r0, [r7, #4]
 80460fc:	f000 fdef 	bl	8046cde <writeToOutput>
    writeToOutput(cli, lineBreak);
 8046100:	4b15      	ldr	r3, [pc, #84]	@ (8046158 <embeddedCliPrint+0x98>)
 8046102:	681b      	ldr	r3, [r3, #0]
 8046104:	4619      	mov	r1, r3
 8046106:	6878      	ldr	r0, [r7, #4]
 8046108:	f000 fde9 	bl	8046cde <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 804610c:	68fb      	ldr	r3, [r7, #12]
 804610e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046112:	f003 0310 	and.w	r3, r3, #16
 8046116:	2b00      	cmp	r3, #0
 8046118:	d11b      	bne.n	8046152 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 804611a:	68fb      	ldr	r3, [r7, #12]
 804611c:	681b      	ldr	r3, [r3, #0]
 804611e:	4619      	mov	r1, r3
 8046120:	6878      	ldr	r0, [r7, #4]
 8046122:	f000 fddc 	bl	8046cde <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8046126:	68fb      	ldr	r3, [r7, #12]
 8046128:	69db      	ldr	r3, [r3, #28]
 804612a:	4619      	mov	r1, r3
 804612c:	6878      	ldr	r0, [r7, #4]
 804612e:	f000 fdd6 	bl	8046cde <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8046132:	68fb      	ldr	r3, [r7, #12]
 8046134:	8c1a      	ldrh	r2, [r3, #32]
 8046136:	68fb      	ldr	r3, [r7, #12]
 8046138:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 804613a:	68fb      	ldr	r3, [r7, #12]
 804613c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 804613e:	2200      	movs	r2, #0
 8046140:	4619      	mov	r1, r3
 8046142:	6878      	ldr	r0, [r7, #4]
 8046144:	f000 fdec 	bl	8046d20 <moveCursor>

        printLiveAutocompletion(cli);
 8046148:	6878      	ldr	r0, [r7, #4]
 804614a:	f000 fc9f 	bl	8046a8c <printLiveAutocompletion>
 804614e:	e000      	b.n	8046152 <embeddedCliPrint+0x92>
        return;
 8046150:	bf00      	nop
    }
}
 8046152:	3710      	adds	r7, #16
 8046154:	46bd      	mov	sp, r7
 8046156:	bd80      	pop	{r7, pc}
 8046158:	240148bc 	.word	0x240148bc

0804615c <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 804615c:	b580      	push	{r7, lr}
 804615e:	b088      	sub	sp, #32
 8046160:	af00      	add	r7, sp, #0
 8046162:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8046164:	687b      	ldr	r3, [r7, #4]
 8046166:	2b00      	cmp	r3, #0
 8046168:	d066      	beq.n	8046238 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 804616a:	4b35      	ldr	r3, [pc, #212]	@ (8046240 <embeddedCliTokenizeArgs+0xe4>)
 804616c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 804616e:	2300      	movs	r3, #0
 8046170:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8046172:	2300      	movs	r3, #0
 8046174:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8046176:	2300      	movs	r3, #0
 8046178:	61bb      	str	r3, [r7, #24]

    int i = 0;
 804617a:	2300      	movs	r3, #0
 804617c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 804617e:	e047      	b.n	8046210 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8046180:	697b      	ldr	r3, [r7, #20]
 8046182:	3301      	adds	r3, #1
 8046184:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8046186:	7fbb      	ldrb	r3, [r7, #30]
 8046188:	2b00      	cmp	r3, #0
 804618a:	d002      	beq.n	8046192 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 804618c:	2300      	movs	r3, #0
 804618e:	77bb      	strb	r3, [r7, #30]
 8046190:	e029      	b.n	80461e6 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8046192:	7cfb      	ldrb	r3, [r7, #19]
 8046194:	2b5c      	cmp	r3, #92	@ 0x5c
 8046196:	d102      	bne.n	804619e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8046198:	2301      	movs	r3, #1
 804619a:	77bb      	strb	r3, [r7, #30]
            continue;
 804619c:	e038      	b.n	8046210 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 804619e:	7cfb      	ldrb	r3, [r7, #19]
 80461a0:	2b22      	cmp	r3, #34	@ 0x22
 80461a2:	d110      	bne.n	80461c6 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80461a4:	7ffb      	ldrb	r3, [r7, #31]
 80461a6:	2b00      	cmp	r3, #0
 80461a8:	bf14      	ite	ne
 80461aa:	2301      	movne	r3, #1
 80461ac:	2300      	moveq	r3, #0
 80461ae:	b2db      	uxtb	r3, r3
 80461b0:	f083 0301 	eor.w	r3, r3, #1
 80461b4:	b2db      	uxtb	r3, r3
 80461b6:	77fb      	strb	r3, [r7, #31]
 80461b8:	7ffb      	ldrb	r3, [r7, #31]
 80461ba:	f003 0301 	and.w	r3, r3, #1
 80461be:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 80461c0:	2300      	movs	r3, #0
 80461c2:	74fb      	strb	r3, [r7, #19]
 80461c4:	e00f      	b.n	80461e6 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 80461c6:	7ffb      	ldrb	r3, [r7, #31]
 80461c8:	f083 0301 	eor.w	r3, r3, #1
 80461cc:	b2db      	uxtb	r3, r3
 80461ce:	2b00      	cmp	r3, #0
 80461d0:	d009      	beq.n	80461e6 <embeddedCliTokenizeArgs+0x8a>
 80461d2:	7cfb      	ldrb	r3, [r7, #19]
 80461d4:	4619      	mov	r1, r3
 80461d6:	68f8      	ldr	r0, [r7, #12]
 80461d8:	f023 fb1b 	bl	8069812 <strchr>
 80461dc:	4603      	mov	r3, r0
 80461de:	2b00      	cmp	r3, #0
 80461e0:	d001      	beq.n	80461e6 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80461e2:	2300      	movs	r3, #0
 80461e4:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80461e6:	7cfb      	ldrb	r3, [r7, #19]
 80461e8:	2b00      	cmp	r3, #0
 80461ea:	d109      	bne.n	8046200 <embeddedCliTokenizeArgs+0xa4>
 80461ec:	69bb      	ldr	r3, [r7, #24]
 80461ee:	2b00      	cmp	r3, #0
 80461f0:	dd0e      	ble.n	8046210 <embeddedCliTokenizeArgs+0xb4>
 80461f2:	69bb      	ldr	r3, [r7, #24]
 80461f4:	3b01      	subs	r3, #1
 80461f6:	687a      	ldr	r2, [r7, #4]
 80461f8:	4413      	add	r3, r2
 80461fa:	781b      	ldrb	r3, [r3, #0]
 80461fc:	2b00      	cmp	r3, #0
 80461fe:	d007      	beq.n	8046210 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8046200:	69bb      	ldr	r3, [r7, #24]
 8046202:	687a      	ldr	r2, [r7, #4]
 8046204:	4413      	add	r3, r2
 8046206:	7cfa      	ldrb	r2, [r7, #19]
 8046208:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 804620a:	69bb      	ldr	r3, [r7, #24]
 804620c:	3301      	adds	r3, #1
 804620e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8046210:	697b      	ldr	r3, [r7, #20]
 8046212:	687a      	ldr	r2, [r7, #4]
 8046214:	4413      	add	r3, r2
 8046216:	781b      	ldrb	r3, [r3, #0]
 8046218:	74fb      	strb	r3, [r7, #19]
 804621a:	7cfb      	ldrb	r3, [r7, #19]
 804621c:	2b00      	cmp	r3, #0
 804621e:	d1af      	bne.n	8046180 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8046220:	69bb      	ldr	r3, [r7, #24]
 8046222:	687a      	ldr	r2, [r7, #4]
 8046224:	4413      	add	r3, r2
 8046226:	2200      	movs	r2, #0
 8046228:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 804622a:	69bb      	ldr	r3, [r7, #24]
 804622c:	3301      	adds	r3, #1
 804622e:	687a      	ldr	r2, [r7, #4]
 8046230:	4413      	add	r3, r2
 8046232:	2200      	movs	r2, #0
 8046234:	701a      	strb	r2, [r3, #0]
 8046236:	e000      	b.n	804623a <embeddedCliTokenizeArgs+0xde>
        return;
 8046238:	bf00      	nop
}
 804623a:	3720      	adds	r7, #32
 804623c:	46bd      	mov	sp, r7
 804623e:	bd80      	pop	{r7, pc}
 8046240:	0806d10c 	.word	0x0806d10c

08046244 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8046244:	b580      	push	{r7, lr}
 8046246:	b084      	sub	sp, #16
 8046248:	af00      	add	r7, sp, #0
 804624a:	6078      	str	r0, [r7, #4]
 804624c:	460b      	mov	r3, r1
 804624e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8046250:	887b      	ldrh	r3, [r7, #2]
 8046252:	4619      	mov	r1, r3
 8046254:	6878      	ldr	r0, [r7, #4]
 8046256:	f000 ff20 	bl	804709a <getTokenPosition>
 804625a:	4603      	mov	r3, r0
 804625c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 804625e:	89fb      	ldrh	r3, [r7, #14]
 8046260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8046264:	4293      	cmp	r3, r2
 8046266:	d003      	beq.n	8046270 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8046268:	89fb      	ldrh	r3, [r7, #14]
 804626a:	687a      	ldr	r2, [r7, #4]
 804626c:	4413      	add	r3, r2
 804626e:	e000      	b.n	8046272 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8046270:	2300      	movs	r3, #0
}
 8046272:	4618      	mov	r0, r3
 8046274:	3710      	adds	r7, #16
 8046276:	46bd      	mov	sp, r7
 8046278:	bd80      	pop	{r7, pc}

0804627a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 804627a:	b580      	push	{r7, lr}
 804627c:	b084      	sub	sp, #16
 804627e:	af00      	add	r7, sp, #0
 8046280:	6078      	str	r0, [r7, #4]
 8046282:	460b      	mov	r3, r1
 8046284:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8046286:	887b      	ldrh	r3, [r7, #2]
 8046288:	4619      	mov	r1, r3
 804628a:	6878      	ldr	r0, [r7, #4]
 804628c:	f000 ff05 	bl	804709a <getTokenPosition>
 8046290:	4603      	mov	r3, r0
 8046292:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8046294:	89fb      	ldrh	r3, [r7, #14]
 8046296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 804629a:	4293      	cmp	r3, r2
 804629c:	d003      	beq.n	80462a6 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 804629e:	89fb      	ldrh	r3, [r7, #14]
 80462a0:	687a      	ldr	r2, [r7, #4]
 80462a2:	4413      	add	r3, r2
 80462a4:	e000      	b.n	80462a8 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80462a6:	2300      	movs	r3, #0
}
 80462a8:	4618      	mov	r0, r3
 80462aa:	3710      	adds	r7, #16
 80462ac:	46bd      	mov	sp, r7
 80462ae:	bd80      	pop	{r7, pc}

080462b0 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80462b0:	b480      	push	{r7}
 80462b2:	b085      	sub	sp, #20
 80462b4:	af00      	add	r7, sp, #0
 80462b6:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80462b8:	687b      	ldr	r3, [r7, #4]
 80462ba:	2b00      	cmp	r3, #0
 80462bc:	d003      	beq.n	80462c6 <embeddedCliGetTokenCount+0x16>
 80462be:	687b      	ldr	r3, [r7, #4]
 80462c0:	781b      	ldrb	r3, [r3, #0]
 80462c2:	2b00      	cmp	r3, #0
 80462c4:	d101      	bne.n	80462ca <embeddedCliGetTokenCount+0x1a>
        return 0;
 80462c6:	2300      	movs	r3, #0
 80462c8:	e019      	b.n	80462fe <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 80462ca:	2300      	movs	r3, #0
 80462cc:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80462ce:	2301      	movs	r3, #1
 80462d0:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80462d2:	68fb      	ldr	r3, [r7, #12]
 80462d4:	687a      	ldr	r2, [r7, #4]
 80462d6:	4413      	add	r3, r2
 80462d8:	781b      	ldrb	r3, [r3, #0]
 80462da:	2b00      	cmp	r3, #0
 80462dc:	d109      	bne.n	80462f2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80462de:	68fb      	ldr	r3, [r7, #12]
 80462e0:	3301      	adds	r3, #1
 80462e2:	687a      	ldr	r2, [r7, #4]
 80462e4:	4413      	add	r3, r2
 80462e6:	781b      	ldrb	r3, [r3, #0]
 80462e8:	2b00      	cmp	r3, #0
 80462ea:	d006      	beq.n	80462fa <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80462ec:	897b      	ldrh	r3, [r7, #10]
 80462ee:	3301      	adds	r3, #1
 80462f0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80462f2:	68fb      	ldr	r3, [r7, #12]
 80462f4:	3301      	adds	r3, #1
 80462f6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80462f8:	e7eb      	b.n	80462d2 <embeddedCliGetTokenCount+0x22>
                break;
 80462fa:	bf00      	nop
    }

    return tokenCount;
 80462fc:	897b      	ldrh	r3, [r7, #10]
}
 80462fe:	4618      	mov	r0, r3
 8046300:	3714      	adds	r7, #20
 8046302:	46bd      	mov	sp, r7
 8046304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046308:	4770      	bx	lr
	...

0804630c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 804630c:	b580      	push	{r7, lr}
 804630e:	b086      	sub	sp, #24
 8046310:	af00      	add	r7, sp, #0
 8046312:	6078      	str	r0, [r7, #4]
 8046314:	460b      	mov	r3, r1
 8046316:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8046318:	687b      	ldr	r3, [r7, #4]
 804631a:	68db      	ldr	r3, [r3, #12]
 804631c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 804631e:	693b      	ldr	r3, [r7, #16]
 8046320:	899b      	ldrh	r3, [r3, #12]
 8046322:	2b00      	cmp	r3, #0
 8046324:	d05f      	beq.n	80463e6 <navigateHistory+0xda>
 8046326:	78fb      	ldrb	r3, [r7, #3]
 8046328:	2b00      	cmp	r3, #0
 804632a:	d005      	beq.n	8046338 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 804632c:	693b      	ldr	r3, [r7, #16]
 804632e:	895a      	ldrh	r2, [r3, #10]
 8046330:	693b      	ldr	r3, [r7, #16]
 8046332:	899b      	ldrh	r3, [r3, #12]
 8046334:	429a      	cmp	r2, r3
 8046336:	d056      	beq.n	80463e6 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8046338:	78fb      	ldrb	r3, [r7, #3]
 804633a:	f083 0301 	eor.w	r3, r3, #1
 804633e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8046340:	2b00      	cmp	r3, #0
 8046342:	d003      	beq.n	804634c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8046344:	693b      	ldr	r3, [r7, #16]
 8046346:	895b      	ldrh	r3, [r3, #10]
 8046348:	2b00      	cmp	r3, #0
 804634a:	d04c      	beq.n	80463e6 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 804634c:	6878      	ldr	r0, [r7, #4]
 804634e:	f000 fc91 	bl	8046c74 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8046352:	693b      	ldr	r3, [r7, #16]
 8046354:	681b      	ldr	r3, [r3, #0]
 8046356:	4619      	mov	r1, r3
 8046358:	6878      	ldr	r0, [r7, #4]
 804635a:	f000 fcc0 	bl	8046cde <writeToOutput>

    if (navigateUp)
 804635e:	78fb      	ldrb	r3, [r7, #3]
 8046360:	2b00      	cmp	r3, #0
 8046362:	d006      	beq.n	8046372 <navigateHistory+0x66>
        ++impl->history.current;
 8046364:	693b      	ldr	r3, [r7, #16]
 8046366:	895b      	ldrh	r3, [r3, #10]
 8046368:	3301      	adds	r3, #1
 804636a:	b29a      	uxth	r2, r3
 804636c:	693b      	ldr	r3, [r7, #16]
 804636e:	815a      	strh	r2, [r3, #10]
 8046370:	e005      	b.n	804637e <navigateHistory+0x72>
    else
        --impl->history.current;
 8046372:	693b      	ldr	r3, [r7, #16]
 8046374:	895b      	ldrh	r3, [r3, #10]
 8046376:	3b01      	subs	r3, #1
 8046378:	b29a      	uxth	r2, r3
 804637a:	693b      	ldr	r3, [r7, #16]
 804637c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 804637e:	693b      	ldr	r3, [r7, #16]
 8046380:	1d1a      	adds	r2, r3, #4
 8046382:	693b      	ldr	r3, [r7, #16]
 8046384:	895b      	ldrh	r3, [r3, #10]
 8046386:	4619      	mov	r1, r3
 8046388:	4610      	mov	r0, r2
 804638a:	f000 fe0d 	bl	8046fa8 <historyGet>
 804638e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8046390:	697b      	ldr	r3, [r7, #20]
 8046392:	2b00      	cmp	r3, #0
 8046394:	d101      	bne.n	804639a <navigateHistory+0x8e>
        item = "";
 8046396:	4b16      	ldr	r3, [pc, #88]	@ (80463f0 <navigateHistory+0xe4>)
 8046398:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 804639a:	6978      	ldr	r0, [r7, #20]
 804639c:	f7f9 ffaa 	bl	80402f4 <strlen>
 80463a0:	4603      	mov	r3, r0
 80463a2:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80463a4:	693b      	ldr	r3, [r7, #16]
 80463a6:	69db      	ldr	r3, [r3, #28]
 80463a8:	89fa      	ldrh	r2, [r7, #14]
 80463aa:	6979      	ldr	r1, [r7, #20]
 80463ac:	4618      	mov	r0, r3
 80463ae:	f023 fac4 	bl	806993a <memcpy>
    impl->cmdBuffer[len] = '\0';
 80463b2:	693b      	ldr	r3, [r7, #16]
 80463b4:	69da      	ldr	r2, [r3, #28]
 80463b6:	89fb      	ldrh	r3, [r7, #14]
 80463b8:	4413      	add	r3, r2
 80463ba:	2200      	movs	r2, #0
 80463bc:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 80463be:	693b      	ldr	r3, [r7, #16]
 80463c0:	89fa      	ldrh	r2, [r7, #14]
 80463c2:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 80463c4:	693b      	ldr	r3, [r7, #16]
 80463c6:	69db      	ldr	r3, [r3, #28]
 80463c8:	4619      	mov	r1, r3
 80463ca:	6878      	ldr	r0, [r7, #4]
 80463cc:	f000 fc87 	bl	8046cde <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80463d0:	693b      	ldr	r3, [r7, #16]
 80463d2:	8c1a      	ldrh	r2, [r3, #32]
 80463d4:	693b      	ldr	r3, [r7, #16]
 80463d6:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 80463d8:	693b      	ldr	r3, [r7, #16]
 80463da:	2200      	movs	r2, #0
 80463dc:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 80463de:	6878      	ldr	r0, [r7, #4]
 80463e0:	f000 fb54 	bl	8046a8c <printLiveAutocompletion>
 80463e4:	e000      	b.n	80463e8 <navigateHistory+0xdc>
        return;
 80463e6:	bf00      	nop
}
 80463e8:	3718      	adds	r7, #24
 80463ea:	46bd      	mov	sp, r7
 80463ec:	bd80      	pop	{r7, pc}
 80463ee:	bf00      	nop
 80463f0:	0806d110 	.word	0x0806d110

080463f4 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80463f4:	b590      	push	{r4, r7, lr}
 80463f6:	b085      	sub	sp, #20
 80463f8:	af00      	add	r7, sp, #0
 80463fa:	6078      	str	r0, [r7, #4]
 80463fc:	460b      	mov	r3, r1
 80463fe:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8046400:	687b      	ldr	r3, [r7, #4]
 8046402:	68db      	ldr	r3, [r3, #12]
 8046404:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8046406:	78fb      	ldrb	r3, [r7, #3]
 8046408:	2b3f      	cmp	r3, #63	@ 0x3f
 804640a:	d948      	bls.n	804649e <onEscapedInput+0xaa>
 804640c:	78fb      	ldrb	r3, [r7, #3]
 804640e:	2b7e      	cmp	r3, #126	@ 0x7e
 8046410:	d845      	bhi.n	804649e <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8046412:	68fb      	ldr	r3, [r7, #12]
 8046414:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046418:	f023 0308 	bic.w	r3, r3, #8
 804641c:	b2da      	uxtb	r2, r3
 804641e:	68fb      	ldr	r3, [r7, #12]
 8046420:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8046424:	78fb      	ldrb	r3, [r7, #3]
 8046426:	2b41      	cmp	r3, #65	@ 0x41
 8046428:	d002      	beq.n	8046430 <onEscapedInput+0x3c>
 804642a:	78fb      	ldrb	r3, [r7, #3]
 804642c:	2b42      	cmp	r3, #66	@ 0x42
 804642e:	d109      	bne.n	8046444 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8046430:	78fb      	ldrb	r3, [r7, #3]
 8046432:	2b41      	cmp	r3, #65	@ 0x41
 8046434:	bf0c      	ite	eq
 8046436:	2301      	moveq	r3, #1
 8046438:	2300      	movne	r3, #0
 804643a:	b2db      	uxtb	r3, r3
 804643c:	4619      	mov	r1, r3
 804643e:	6878      	ldr	r0, [r7, #4]
 8046440:	f7ff ff64 	bl	804630c <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8046444:	78fb      	ldrb	r3, [r7, #3]
 8046446:	2b43      	cmp	r3, #67	@ 0x43
 8046448:	d10f      	bne.n	804646a <onEscapedInput+0x76>
 804644a:	68fb      	ldr	r3, [r7, #12]
 804644c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 804644e:	2b00      	cmp	r3, #0
 8046450:	d00b      	beq.n	804646a <onEscapedInput+0x76>
            impl->cursorPos--;
 8046452:	68fb      	ldr	r3, [r7, #12]
 8046454:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8046456:	3b01      	subs	r3, #1
 8046458:	b29a      	uxth	r2, r3
 804645a:	68fb      	ldr	r3, [r7, #12]
 804645c:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 804645e:	4b12      	ldr	r3, [pc, #72]	@ (80464a8 <onEscapedInput+0xb4>)
 8046460:	681b      	ldr	r3, [r3, #0]
 8046462:	4619      	mov	r1, r3
 8046464:	6878      	ldr	r0, [r7, #4]
 8046466:	f000 fc3a 	bl	8046cde <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 804646a:	78fb      	ldrb	r3, [r7, #3]
 804646c:	2b44      	cmp	r3, #68	@ 0x44
 804646e:	d116      	bne.n	804649e <onEscapedInput+0xaa>
 8046470:	68fb      	ldr	r3, [r7, #12]
 8046472:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8046474:	461c      	mov	r4, r3
 8046476:	68fb      	ldr	r3, [r7, #12]
 8046478:	69db      	ldr	r3, [r3, #28]
 804647a:	4618      	mov	r0, r3
 804647c:	f7f9 ff3a 	bl	80402f4 <strlen>
 8046480:	4603      	mov	r3, r0
 8046482:	429c      	cmp	r4, r3
 8046484:	d20b      	bcs.n	804649e <onEscapedInput+0xaa>
            impl->cursorPos++;
 8046486:	68fb      	ldr	r3, [r7, #12]
 8046488:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 804648a:	3301      	adds	r3, #1
 804648c:	b29a      	uxth	r2, r3
 804648e:	68fb      	ldr	r3, [r7, #12]
 8046490:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8046492:	4b06      	ldr	r3, [pc, #24]	@ (80464ac <onEscapedInput+0xb8>)
 8046494:	681b      	ldr	r3, [r3, #0]
 8046496:	4619      	mov	r1, r3
 8046498:	6878      	ldr	r0, [r7, #4]
 804649a:	f000 fc20 	bl	8046cde <writeToOutput>
        }
    }
}
 804649e:	bf00      	nop
 80464a0:	3714      	adds	r7, #20
 80464a2:	46bd      	mov	sp, r7
 80464a4:	bd90      	pop	{r4, r7, pc}
 80464a6:	bf00      	nop
 80464a8:	240148c0 	.word	0x240148c0
 80464ac:	240148c4 	.word	0x240148c4

080464b0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80464b0:	b580      	push	{r7, lr}
 80464b2:	b084      	sub	sp, #16
 80464b4:	af00      	add	r7, sp, #0
 80464b6:	6078      	str	r0, [r7, #4]
 80464b8:	460b      	mov	r3, r1
 80464ba:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80464bc:	687b      	ldr	r3, [r7, #4]
 80464be:	68db      	ldr	r3, [r3, #12]
 80464c0:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80464c2:	68fb      	ldr	r3, [r7, #12]
 80464c4:	8c1b      	ldrh	r3, [r3, #32]
 80464c6:	3302      	adds	r3, #2
 80464c8:	68fa      	ldr	r2, [r7, #12]
 80464ca:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80464cc:	4293      	cmp	r3, r2
 80464ce:	da3b      	bge.n	8046548 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 80464d0:	68fb      	ldr	r3, [r7, #12]
 80464d2:	69db      	ldr	r3, [r3, #28]
 80464d4:	4618      	mov	r0, r3
 80464d6:	f7f9 ff0d 	bl	80402f4 <strlen>
 80464da:	4602      	mov	r2, r0
 80464dc:	68fb      	ldr	r3, [r7, #12]
 80464de:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80464e0:	1ad3      	subs	r3, r2, r3
 80464e2:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 80464e4:	68fb      	ldr	r3, [r7, #12]
 80464e6:	69da      	ldr	r2, [r3, #28]
 80464e8:	68bb      	ldr	r3, [r7, #8]
 80464ea:	3301      	adds	r3, #1
 80464ec:	18d0      	adds	r0, r2, r3
 80464ee:	68fb      	ldr	r3, [r7, #12]
 80464f0:	69da      	ldr	r2, [r3, #28]
 80464f2:	68bb      	ldr	r3, [r7, #8]
 80464f4:	18d1      	adds	r1, r2, r3
 80464f6:	68fb      	ldr	r3, [r7, #12]
 80464f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80464fa:	3301      	adds	r3, #1
 80464fc:	461a      	mov	r2, r3
 80464fe:	f023 f957 	bl	80697b0 <memmove>

    ++impl->cmdSize;
 8046502:	68fb      	ldr	r3, [r7, #12]
 8046504:	8c1b      	ldrh	r3, [r3, #32]
 8046506:	3301      	adds	r3, #1
 8046508:	b29a      	uxth	r2, r3
 804650a:	68fb      	ldr	r3, [r7, #12]
 804650c:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 804650e:	68fb      	ldr	r3, [r7, #12]
 8046510:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8046512:	3301      	adds	r3, #1
 8046514:	b29a      	uxth	r2, r3
 8046516:	68fb      	ldr	r3, [r7, #12]
 8046518:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 804651a:	68fb      	ldr	r3, [r7, #12]
 804651c:	69da      	ldr	r2, [r3, #28]
 804651e:	68bb      	ldr	r3, [r7, #8]
 8046520:	4413      	add	r3, r2
 8046522:	78fa      	ldrb	r2, [r7, #3]
 8046524:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8046526:	68fb      	ldr	r3, [r7, #12]
 8046528:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 804652a:	2b00      	cmp	r3, #0
 804652c:	d005      	beq.n	804653a <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 804652e:	4b08      	ldr	r3, [pc, #32]	@ (8046550 <onCharInput+0xa0>)
 8046530:	681b      	ldr	r3, [r3, #0]
 8046532:	4619      	mov	r1, r3
 8046534:	6878      	ldr	r0, [r7, #4]
 8046536:	f000 fbd2 	bl	8046cde <writeToOutput>

    cli->writeChar(cli, c);
 804653a:	687b      	ldr	r3, [r7, #4]
 804653c:	681b      	ldr	r3, [r3, #0]
 804653e:	78fa      	ldrb	r2, [r7, #3]
 8046540:	4611      	mov	r1, r2
 8046542:	6878      	ldr	r0, [r7, #4]
 8046544:	4798      	blx	r3
 8046546:	e000      	b.n	804654a <onCharInput+0x9a>
        return;
 8046548:	bf00      	nop
}
 804654a:	3710      	adds	r7, #16
 804654c:	46bd      	mov	sp, r7
 804654e:	bd80      	pop	{r7, pc}
 8046550:	240148d0 	.word	0x240148d0

08046554 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8046554:	b580      	push	{r7, lr}
 8046556:	b084      	sub	sp, #16
 8046558:	af00      	add	r7, sp, #0
 804655a:	6078      	str	r0, [r7, #4]
 804655c:	460b      	mov	r3, r1
 804655e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8046560:	687b      	ldr	r3, [r7, #4]
 8046562:	68db      	ldr	r3, [r3, #12]
 8046564:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8046566:	68fb      	ldr	r3, [r7, #12]
 8046568:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 804656c:	2b0d      	cmp	r3, #13
 804656e:	d102      	bne.n	8046576 <onControlInput+0x22>
 8046570:	78fb      	ldrb	r3, [r7, #3]
 8046572:	2b0a      	cmp	r3, #10
 8046574:	d078      	beq.n	8046668 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 8046576:	68fb      	ldr	r3, [r7, #12]
 8046578:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 804657c:	2b0a      	cmp	r3, #10
 804657e:	d102      	bne.n	8046586 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8046580:	78fb      	ldrb	r3, [r7, #3]
 8046582:	2b0d      	cmp	r3, #13
 8046584:	d070      	beq.n	8046668 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 8046586:	78fb      	ldrb	r3, [r7, #3]
 8046588:	2b0d      	cmp	r3, #13
 804658a:	d002      	beq.n	8046592 <onControlInput+0x3e>
 804658c:	78fb      	ldrb	r3, [r7, #3]
 804658e:	2b0a      	cmp	r3, #10
 8046590:	d129      	bne.n	80465e6 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8046592:	6878      	ldr	r0, [r7, #4]
 8046594:	f000 fadc 	bl	8046b50 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8046598:	4b35      	ldr	r3, [pc, #212]	@ (8046670 <onControlInput+0x11c>)
 804659a:	681b      	ldr	r3, [r3, #0]
 804659c:	4619      	mov	r1, r3
 804659e:	6878      	ldr	r0, [r7, #4]
 80465a0:	f000 fb9d 	bl	8046cde <writeToOutput>

        if (impl->cmdSize > 0)
 80465a4:	68fb      	ldr	r3, [r7, #12]
 80465a6:	8c1b      	ldrh	r3, [r3, #32]
 80465a8:	2b00      	cmp	r3, #0
 80465aa:	d002      	beq.n	80465b2 <onControlInput+0x5e>
            parseCommand(cli);
 80465ac:	6878      	ldr	r0, [r7, #4]
 80465ae:	f000 f865 	bl	804667c <parseCommand>
        impl->cmdSize = 0;
 80465b2:	68fb      	ldr	r3, [r7, #12]
 80465b4:	2200      	movs	r2, #0
 80465b6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80465b8:	68fb      	ldr	r3, [r7, #12]
 80465ba:	69db      	ldr	r3, [r3, #28]
 80465bc:	68fa      	ldr	r2, [r7, #12]
 80465be:	8c12      	ldrh	r2, [r2, #32]
 80465c0:	4413      	add	r3, r2
 80465c2:	2200      	movs	r2, #0
 80465c4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80465c6:	68fb      	ldr	r3, [r7, #12]
 80465c8:	2200      	movs	r2, #0
 80465ca:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 80465cc:	68fb      	ldr	r3, [r7, #12]
 80465ce:	2200      	movs	r2, #0
 80465d0:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 80465d2:	68fb      	ldr	r3, [r7, #12]
 80465d4:	2200      	movs	r2, #0
 80465d6:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 80465d8:	68fb      	ldr	r3, [r7, #12]
 80465da:	681b      	ldr	r3, [r3, #0]
 80465dc:	4619      	mov	r1, r3
 80465de:	6878      	ldr	r0, [r7, #4]
 80465e0:	f000 fb7d 	bl	8046cde <writeToOutput>
 80465e4:	e041      	b.n	804666a <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80465e6:	78fb      	ldrb	r3, [r7, #3]
 80465e8:	2b08      	cmp	r3, #8
 80465ea:	d002      	beq.n	80465f2 <onControlInput+0x9e>
 80465ec:	78fb      	ldrb	r3, [r7, #3]
 80465ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80465f0:	d133      	bne.n	804665a <onControlInput+0x106>
 80465f2:	68fb      	ldr	r3, [r7, #12]
 80465f4:	8c1b      	ldrh	r3, [r3, #32]
 80465f6:	461a      	mov	r2, r3
 80465f8:	68fb      	ldr	r3, [r7, #12]
 80465fa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80465fc:	1ad3      	subs	r3, r2, r3
 80465fe:	2b00      	cmp	r3, #0
 8046600:	dd2b      	ble.n	804665a <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8046602:	4b1c      	ldr	r3, [pc, #112]	@ (8046674 <onControlInput+0x120>)
 8046604:	681b      	ldr	r3, [r3, #0]
 8046606:	4619      	mov	r1, r3
 8046608:	6878      	ldr	r0, [r7, #4]
 804660a:	f000 fb68 	bl	8046cde <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 804660e:	4b1a      	ldr	r3, [pc, #104]	@ (8046678 <onControlInput+0x124>)
 8046610:	681b      	ldr	r3, [r3, #0]
 8046612:	4619      	mov	r1, r3
 8046614:	6878      	ldr	r0, [r7, #4]
 8046616:	f000 fb62 	bl	8046cde <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 804661a:	68fb      	ldr	r3, [r7, #12]
 804661c:	69db      	ldr	r3, [r3, #28]
 804661e:	4618      	mov	r0, r3
 8046620:	f7f9 fe68 	bl	80402f4 <strlen>
 8046624:	4602      	mov	r2, r0
 8046626:	68fb      	ldr	r3, [r7, #12]
 8046628:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 804662a:	1ad3      	subs	r3, r2, r3
 804662c:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 804662e:	68fb      	ldr	r3, [r7, #12]
 8046630:	69da      	ldr	r2, [r3, #28]
 8046632:	68bb      	ldr	r3, [r7, #8]
 8046634:	3b01      	subs	r3, #1
 8046636:	18d0      	adds	r0, r2, r3
 8046638:	68fb      	ldr	r3, [r7, #12]
 804663a:	69da      	ldr	r2, [r3, #28]
 804663c:	68bb      	ldr	r3, [r7, #8]
 804663e:	18d1      	adds	r1, r2, r3
 8046640:	68fb      	ldr	r3, [r7, #12]
 8046642:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8046644:	3301      	adds	r3, #1
 8046646:	461a      	mov	r2, r3
 8046648:	f023 f8b2 	bl	80697b0 <memmove>
        --impl->cmdSize;
 804664c:	68fb      	ldr	r3, [r7, #12]
 804664e:	8c1b      	ldrh	r3, [r3, #32]
 8046650:	3b01      	subs	r3, #1
 8046652:	b29a      	uxth	r2, r3
 8046654:	68fb      	ldr	r3, [r7, #12]
 8046656:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8046658:	e007      	b.n	804666a <onControlInput+0x116>
    } else if (c == '\t') {
 804665a:	78fb      	ldrb	r3, [r7, #3]
 804665c:	2b09      	cmp	r3, #9
 804665e:	d104      	bne.n	804666a <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8046660:	6878      	ldr	r0, [r7, #4]
 8046662:	f000 fa75 	bl	8046b50 <onAutocompleteRequest>
 8046666:	e000      	b.n	804666a <onControlInput+0x116>
        return;
 8046668:	bf00      	nop
    }

}
 804666a:	3710      	adds	r7, #16
 804666c:	46bd      	mov	sp, r7
 804666e:	bd80      	pop	{r7, pc}
 8046670:	240148bc 	.word	0x240148bc
 8046674:	240148c4 	.word	0x240148c4
 8046678:	240148d4 	.word	0x240148d4

0804667c <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 804667c:	b590      	push	{r4, r7, lr}
 804667e:	b08f      	sub	sp, #60	@ 0x3c
 8046680:	af00      	add	r7, sp, #0
 8046682:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8046684:	687b      	ldr	r3, [r7, #4]
 8046686:	68db      	ldr	r3, [r3, #12]
 8046688:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 804668a:	2301      	movs	r3, #1
 804668c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8046690:	2300      	movs	r3, #0
 8046692:	633b      	str	r3, [r7, #48]	@ 0x30
 8046694:	e00d      	b.n	80466b2 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8046696:	69bb      	ldr	r3, [r7, #24]
 8046698:	69da      	ldr	r2, [r3, #28]
 804669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804669c:	4413      	add	r3, r2
 804669e:	781b      	ldrb	r3, [r3, #0]
 80466a0:	2b20      	cmp	r3, #32
 80466a2:	d003      	beq.n	80466ac <parseCommand+0x30>
            isEmpty = false;
 80466a4:	2300      	movs	r3, #0
 80466a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80466aa:	e008      	b.n	80466be <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 80466ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80466ae:	3301      	adds	r3, #1
 80466b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80466b2:	69bb      	ldr	r3, [r7, #24]
 80466b4:	8c1b      	ldrh	r3, [r3, #32]
 80466b6:	461a      	mov	r2, r3
 80466b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80466ba:	4293      	cmp	r3, r2
 80466bc:	dbeb      	blt.n	8046696 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80466be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80466c2:	2b00      	cmp	r3, #0
 80466c4:	f040 80fa 	bne.w	80468bc <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80466c8:	69bb      	ldr	r3, [r7, #24]
 80466ca:	1d1a      	adds	r2, r3, #4
 80466cc:	69bb      	ldr	r3, [r7, #24]
 80466ce:	69db      	ldr	r3, [r3, #28]
 80466d0:	4619      	mov	r1, r3
 80466d2:	4610      	mov	r0, r2
 80466d4:	f000 fc04 	bl	8046ee0 <historyPut>

    char *cmdName = NULL;
 80466d8:	2300      	movs	r3, #0
 80466da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80466dc:	2300      	movs	r3, #0
 80466de:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80466e0:	2300      	movs	r3, #0
 80466e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80466e6:	2300      	movs	r3, #0
 80466e8:	623b      	str	r3, [r7, #32]
 80466ea:	e030      	b.n	804674e <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80466ec:	69bb      	ldr	r3, [r7, #24]
 80466ee:	69da      	ldr	r2, [r3, #28]
 80466f0:	6a3b      	ldr	r3, [r7, #32]
 80466f2:	4413      	add	r3, r2
 80466f4:	781b      	ldrb	r3, [r3, #0]
 80466f6:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80466f8:	7dfb      	ldrb	r3, [r7, #23]
 80466fa:	2b20      	cmp	r3, #32
 80466fc:	d10f      	bne.n	804671e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80466fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046700:	2b00      	cmp	r3, #0
 8046702:	d105      	bne.n	8046710 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8046704:	69bb      	ldr	r3, [r7, #24]
 8046706:	69da      	ldr	r2, [r3, #28]
 8046708:	6a3b      	ldr	r3, [r7, #32]
 804670a:	4413      	add	r3, r2
 804670c:	2200      	movs	r2, #0
 804670e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8046710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046712:	2b00      	cmp	r3, #0
 8046714:	d018      	beq.n	8046748 <parseCommand+0xcc>
                nameFinished = true;
 8046716:	2301      	movs	r3, #1
 8046718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 804671c:	e014      	b.n	8046748 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 804671e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046720:	2b00      	cmp	r3, #0
 8046722:	d105      	bne.n	8046730 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8046724:	69bb      	ldr	r3, [r7, #24]
 8046726:	69da      	ldr	r2, [r3, #28]
 8046728:	6a3b      	ldr	r3, [r7, #32]
 804672a:	4413      	add	r3, r2
 804672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 804672e:	e00b      	b.n	8046748 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8046730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046732:	2b00      	cmp	r3, #0
 8046734:	d108      	bne.n	8046748 <parseCommand+0xcc>
 8046736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804673a:	2b00      	cmp	r3, #0
 804673c:	d004      	beq.n	8046748 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 804673e:	69bb      	ldr	r3, [r7, #24]
 8046740:	69da      	ldr	r2, [r3, #28]
 8046742:	6a3b      	ldr	r3, [r7, #32]
 8046744:	4413      	add	r3, r2
 8046746:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8046748:	6a3b      	ldr	r3, [r7, #32]
 804674a:	3301      	adds	r3, #1
 804674c:	623b      	str	r3, [r7, #32]
 804674e:	69bb      	ldr	r3, [r7, #24]
 8046750:	8c1b      	ldrh	r3, [r3, #32]
 8046752:	461a      	mov	r2, r3
 8046754:	6a3b      	ldr	r3, [r7, #32]
 8046756:	4293      	cmp	r3, r2
 8046758:	dbc8      	blt.n	80466ec <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 804675a:	69bb      	ldr	r3, [r7, #24]
 804675c:	69da      	ldr	r2, [r3, #28]
 804675e:	69bb      	ldr	r3, [r7, #24]
 8046760:	8c1b      	ldrh	r3, [r3, #32]
 8046762:	3301      	adds	r3, #1
 8046764:	4413      	add	r3, r2
 8046766:	2200      	movs	r2, #0
 8046768:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 804676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804676c:	2b00      	cmp	r3, #0
 804676e:	f000 80a7 	beq.w	80468c0 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046772:	2300      	movs	r3, #0
 8046774:	61fb      	str	r3, [r7, #28]
 8046776:	e072      	b.n	804685e <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8046778:	69bb      	ldr	r3, [r7, #24]
 804677a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804677c:	69fa      	ldr	r2, [r7, #28]
 804677e:	4613      	mov	r3, r2
 8046780:	005b      	lsls	r3, r3, #1
 8046782:	4413      	add	r3, r2
 8046784:	00db      	lsls	r3, r3, #3
 8046786:	440b      	add	r3, r1
 8046788:	685b      	ldr	r3, [r3, #4]
 804678a:	4619      	mov	r1, r3
 804678c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 804678e:	f7f9 fda7 	bl	80402e0 <strcmp>
 8046792:	4603      	mov	r3, r0
 8046794:	2b00      	cmp	r3, #0
 8046796:	d15f      	bne.n	8046858 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 8046798:	69bb      	ldr	r3, [r7, #24]
 804679a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804679c:	69fa      	ldr	r2, [r7, #28]
 804679e:	4613      	mov	r3, r2
 80467a0:	005b      	lsls	r3, r3, #1
 80467a2:	4413      	add	r3, r2
 80467a4:	00db      	lsls	r3, r3, #3
 80467a6:	440b      	add	r3, r1
 80467a8:	695b      	ldr	r3, [r3, #20]
 80467aa:	2b00      	cmp	r3, #0
 80467ac:	d05e      	beq.n	804686c <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 80467ae:	69bb      	ldr	r3, [r7, #24]
 80467b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80467b2:	69fa      	ldr	r2, [r7, #28]
 80467b4:	4613      	mov	r3, r2
 80467b6:	005b      	lsls	r3, r3, #1
 80467b8:	4413      	add	r3, r2
 80467ba:	00db      	lsls	r3, r3, #3
 80467bc:	440b      	add	r3, r1
 80467be:	7b1b      	ldrb	r3, [r3, #12]
 80467c0:	2b00      	cmp	r3, #0
 80467c2:	d002      	beq.n	80467ca <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 80467c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80467c6:	f7ff fcc9 	bl	804615c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80467ca:	69bb      	ldr	r3, [r7, #24]
 80467cc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80467d0:	f043 0310 	orr.w	r3, r3, #16
 80467d4:	b2da      	uxtb	r2, r3
 80467d6:	69bb      	ldr	r3, [r7, #24]
 80467d8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 80467dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80467de:	2b00      	cmp	r3, #0
 80467e0:	d01a      	beq.n	8046818 <parseCommand+0x19c>
 80467e2:	4939      	ldr	r1, [pc, #228]	@ (80468c8 <parseCommand+0x24c>)
 80467e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80467e6:	f7f9 fd7b 	bl	80402e0 <strcmp>
 80467ea:	4603      	mov	r3, r0
 80467ec:	2b00      	cmp	r3, #0
 80467ee:	d006      	beq.n	80467fe <parseCommand+0x182>
 80467f0:	4936      	ldr	r1, [pc, #216]	@ (80468cc <parseCommand+0x250>)
 80467f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80467f4:	f7f9 fd74 	bl	80402e0 <strcmp>
 80467f8:	4603      	mov	r3, r0
 80467fa:	2b00      	cmp	r3, #0
 80467fc:	d10c      	bne.n	8046818 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 80467fe:	69bb      	ldr	r3, [r7, #24]
 8046800:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8046802:	69fa      	ldr	r2, [r7, #28]
 8046804:	4613      	mov	r3, r2
 8046806:	005b      	lsls	r3, r3, #1
 8046808:	4413      	add	r3, r2
 804680a:	00db      	lsls	r3, r3, #3
 804680c:	440b      	add	r3, r1
 804680e:	4619      	mov	r1, r3
 8046810:	6878      	ldr	r0, [r7, #4]
 8046812:	f000 f85d 	bl	80468d0 <printBindingHelp>
 8046816:	e015      	b.n	8046844 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8046818:	69bb      	ldr	r3, [r7, #24]
 804681a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804681c:	69fa      	ldr	r2, [r7, #28]
 804681e:	4613      	mov	r3, r2
 8046820:	005b      	lsls	r3, r3, #1
 8046822:	4413      	add	r3, r2
 8046824:	00db      	lsls	r3, r3, #3
 8046826:	440b      	add	r3, r1
 8046828:	695c      	ldr	r4, [r3, #20]
 804682a:	69bb      	ldr	r3, [r7, #24]
 804682c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804682e:	69fa      	ldr	r2, [r7, #28]
 8046830:	4613      	mov	r3, r2
 8046832:	005b      	lsls	r3, r3, #1
 8046834:	4413      	add	r3, r2
 8046836:	00db      	lsls	r3, r3, #3
 8046838:	440b      	add	r3, r1
 804683a:	691b      	ldr	r3, [r3, #16]
 804683c:	461a      	mov	r2, r3
 804683e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8046840:	6878      	ldr	r0, [r7, #4]
 8046842:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8046844:	69bb      	ldr	r3, [r7, #24]
 8046846:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 804684a:	f023 0310 	bic.w	r3, r3, #16
 804684e:	b2da      	uxtb	r2, r3
 8046850:	69bb      	ldr	r3, [r7, #24]
 8046852:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8046856:	e034      	b.n	80468c2 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046858:	69fb      	ldr	r3, [r7, #28]
 804685a:	3301      	adds	r3, #1
 804685c:	61fb      	str	r3, [r7, #28]
 804685e:	69bb      	ldr	r3, [r7, #24]
 8046860:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8046862:	461a      	mov	r2, r3
 8046864:	69fb      	ldr	r3, [r7, #28]
 8046866:	4293      	cmp	r3, r2
 8046868:	db86      	blt.n	8046778 <parseCommand+0xfc>
 804686a:	e000      	b.n	804686e <parseCommand+0x1f2>
                break;
 804686c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 804686e:	687b      	ldr	r3, [r7, #4]
 8046870:	685b      	ldr	r3, [r3, #4]
 8046872:	2b00      	cmp	r3, #0
 8046874:	d01d      	beq.n	80468b2 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 8046876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046878:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 804687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804687c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 804687e:	69bb      	ldr	r3, [r7, #24]
 8046880:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046884:	f043 0310 	orr.w	r3, r3, #16
 8046888:	b2da      	uxtb	r2, r3
 804688a:	69bb      	ldr	r3, [r7, #24]
 804688c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8046890:	687b      	ldr	r3, [r7, #4]
 8046892:	685b      	ldr	r3, [r3, #4]
 8046894:	f107 020c 	add.w	r2, r7, #12
 8046898:	4611      	mov	r1, r2
 804689a:	6878      	ldr	r0, [r7, #4]
 804689c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 804689e:	69bb      	ldr	r3, [r7, #24]
 80468a0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80468a4:	f023 0310 	bic.w	r3, r3, #16
 80468a8:	b2da      	uxtb	r2, r3
 80468aa:	69bb      	ldr	r3, [r7, #24]
 80468ac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80468b0:	e007      	b.n	80468c2 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 80468b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80468b4:	6878      	ldr	r0, [r7, #4]
 80468b6:	f001 f845 	bl	8047944 <onUnknownCommand>
 80468ba:	e002      	b.n	80468c2 <parseCommand+0x246>
        return;
 80468bc:	bf00      	nop
 80468be:	e000      	b.n	80468c2 <parseCommand+0x246>
        return;
 80468c0:	bf00      	nop
    }
}
 80468c2:	373c      	adds	r7, #60	@ 0x3c
 80468c4:	46bd      	mov	sp, r7
 80468c6:	bd90      	pop	{r4, r7, pc}
 80468c8:	0806d114 	.word	0x0806d114
 80468cc:	0806d118 	.word	0x0806d118

080468d0 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 80468d0:	b580      	push	{r7, lr}
 80468d2:	b082      	sub	sp, #8
 80468d4:	af00      	add	r7, sp, #0
 80468d6:	6078      	str	r0, [r7, #4]
 80468d8:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 80468da:	683b      	ldr	r3, [r7, #0]
 80468dc:	689b      	ldr	r3, [r3, #8]
 80468de:	2b00      	cmp	r3, #0
 80468e0:	d010      	beq.n	8046904 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 80468e2:	687b      	ldr	r3, [r7, #4]
 80468e4:	681b      	ldr	r3, [r3, #0]
 80468e6:	2109      	movs	r1, #9
 80468e8:	6878      	ldr	r0, [r7, #4]
 80468ea:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 80468ec:	683b      	ldr	r3, [r7, #0]
 80468ee:	689b      	ldr	r3, [r3, #8]
 80468f0:	4619      	mov	r1, r3
 80468f2:	6878      	ldr	r0, [r7, #4]
 80468f4:	f000 f9f3 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 80468f8:	4b04      	ldr	r3, [pc, #16]	@ (804690c <printBindingHelp+0x3c>)
 80468fa:	681b      	ldr	r3, [r3, #0]
 80468fc:	4619      	mov	r1, r3
 80468fe:	6878      	ldr	r0, [r7, #4]
 8046900:	f000 f9ed 	bl	8046cde <writeToOutput>
    }
}
 8046904:	bf00      	nop
 8046906:	3708      	adds	r7, #8
 8046908:	46bd      	mov	sp, r7
 804690a:	bd80      	pop	{r7, pc}
 804690c:	240148bc 	.word	0x240148bc

08046910 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8046910:	b580      	push	{r7, lr}
 8046912:	b08e      	sub	sp, #56	@ 0x38
 8046914:	af00      	add	r7, sp, #0
 8046916:	60f8      	str	r0, [r7, #12]
 8046918:	60b9      	str	r1, [r7, #8]
 804691a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 804691c:	2300      	movs	r3, #0
 804691e:	613b      	str	r3, [r7, #16]
 8046920:	2300      	movs	r3, #0
 8046922:	82bb      	strh	r3, [r7, #20]
 8046924:	2300      	movs	r3, #0
 8046926:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8046928:	6878      	ldr	r0, [r7, #4]
 804692a:	f7f9 fce3 	bl	80402f4 <strlen>
 804692e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8046930:	68bb      	ldr	r3, [r7, #8]
 8046932:	68db      	ldr	r3, [r3, #12]
 8046934:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8046936:	6a3b      	ldr	r3, [r7, #32]
 8046938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 804693a:	2b00      	cmp	r3, #0
 804693c:	d002      	beq.n	8046944 <getAutocompletedCommand+0x34>
 804693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046940:	2b00      	cmp	r3, #0
 8046942:	d108      	bne.n	8046956 <getAutocompletedCommand+0x46>
        return cmd;
 8046944:	68fb      	ldr	r3, [r7, #12]
 8046946:	461a      	mov	r2, r3
 8046948:	f107 0310 	add.w	r3, r7, #16
 804694c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8046950:	e882 0003 	stmia.w	r2, {r0, r1}
 8046954:	e095      	b.n	8046a82 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046956:	2300      	movs	r3, #0
 8046958:	637b      	str	r3, [r7, #52]	@ 0x34
 804695a:	e083      	b.n	8046a64 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 804695c:	6a3b      	ldr	r3, [r7, #32]
 804695e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8046960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8046962:	4613      	mov	r3, r2
 8046964:	005b      	lsls	r3, r3, #1
 8046966:	4413      	add	r3, r2
 8046968:	00db      	lsls	r3, r3, #3
 804696a:	440b      	add	r3, r1
 804696c:	685b      	ldr	r3, [r3, #4]
 804696e:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8046970:	69f8      	ldr	r0, [r7, #28]
 8046972:	f7f9 fcbf 	bl	80402f4 <strlen>
 8046976:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8046978:	6a3b      	ldr	r3, [r7, #32]
 804697a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 804697c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804697e:	4413      	add	r3, r2
 8046980:	781a      	ldrb	r2, [r3, #0]
 8046982:	6a3b      	ldr	r3, [r7, #32]
 8046984:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8046986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046988:	440b      	add	r3, r1
 804698a:	f022 0201 	bic.w	r2, r2, #1
 804698e:	b2d2      	uxtb	r2, r2
 8046990:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8046992:	69ba      	ldr	r2, [r7, #24]
 8046994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046996:	429a      	cmp	r2, r3
 8046998:	d35e      	bcc.n	8046a58 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 804699a:	2301      	movs	r3, #1
 804699c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80469a0:	2300      	movs	r3, #0
 80469a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80469a4:	e010      	b.n	80469c8 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80469a6:	687a      	ldr	r2, [r7, #4]
 80469a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80469aa:	4413      	add	r3, r2
 80469ac:	781a      	ldrb	r2, [r3, #0]
 80469ae:	69f9      	ldr	r1, [r7, #28]
 80469b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80469b2:	440b      	add	r3, r1
 80469b4:	781b      	ldrb	r3, [r3, #0]
 80469b6:	429a      	cmp	r2, r3
 80469b8:	d003      	beq.n	80469c2 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80469ba:	2300      	movs	r3, #0
 80469bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80469c0:	e006      	b.n	80469d0 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80469c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80469c4:	3301      	adds	r3, #1
 80469c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80469c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80469ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80469cc:	429a      	cmp	r2, r3
 80469ce:	d3ea      	bcc.n	80469a6 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80469d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80469d4:	f083 0301 	eor.w	r3, r3, #1
 80469d8:	b2db      	uxtb	r3, r3
 80469da:	2b00      	cmp	r3, #0
 80469dc:	d13e      	bne.n	8046a5c <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 80469de:	6a3b      	ldr	r3, [r7, #32]
 80469e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80469e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80469e4:	4413      	add	r3, r2
 80469e6:	781a      	ldrb	r2, [r3, #0]
 80469e8:	6a3b      	ldr	r3, [r7, #32]
 80469ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80469ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80469ee:	440b      	add	r3, r1
 80469f0:	f042 0201 	orr.w	r2, r2, #1
 80469f4:	b2d2      	uxtb	r2, r2
 80469f6:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80469f8:	8afb      	ldrh	r3, [r7, #22]
 80469fa:	2b00      	cmp	r3, #0
 80469fc:	d004      	beq.n	8046a08 <getAutocompletedCommand+0xf8>
 80469fe:	8abb      	ldrh	r3, [r7, #20]
 8046a00:	461a      	mov	r2, r3
 8046a02:	69bb      	ldr	r3, [r7, #24]
 8046a04:	4293      	cmp	r3, r2
 8046a06:	d202      	bcs.n	8046a0e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8046a08:	69bb      	ldr	r3, [r7, #24]
 8046a0a:	b29b      	uxth	r3, r3
 8046a0c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8046a0e:	8afb      	ldrh	r3, [r7, #22]
 8046a10:	3301      	adds	r3, #1
 8046a12:	b29b      	uxth	r3, r3
 8046a14:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8046a16:	8afb      	ldrh	r3, [r7, #22]
 8046a18:	2b01      	cmp	r3, #1
 8046a1a:	d102      	bne.n	8046a22 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8046a1c:	69fb      	ldr	r3, [r7, #28]
 8046a1e:	613b      	str	r3, [r7, #16]
            continue;
 8046a20:	e01d      	b.n	8046a5e <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8046a22:	6a3b      	ldr	r3, [r7, #32]
 8046a24:	8c1b      	ldrh	r3, [r3, #32]
 8046a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8046a28:	e010      	b.n	8046a4c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8046a2a:	693a      	ldr	r2, [r7, #16]
 8046a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a2e:	4413      	add	r3, r2
 8046a30:	781a      	ldrb	r2, [r3, #0]
 8046a32:	69f9      	ldr	r1, [r7, #28]
 8046a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a36:	440b      	add	r3, r1
 8046a38:	781b      	ldrb	r3, [r3, #0]
 8046a3a:	429a      	cmp	r2, r3
 8046a3c:	d003      	beq.n	8046a46 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8046a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a40:	b29b      	uxth	r3, r3
 8046a42:	82bb      	strh	r3, [r7, #20]
                break;
 8046a44:	e00b      	b.n	8046a5e <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8046a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a48:	3301      	adds	r3, #1
 8046a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8046a4c:	8abb      	ldrh	r3, [r7, #20]
 8046a4e:	461a      	mov	r2, r3
 8046a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a52:	4293      	cmp	r3, r2
 8046a54:	d3e9      	bcc.n	8046a2a <getAutocompletedCommand+0x11a>
 8046a56:	e002      	b.n	8046a5e <getAutocompletedCommand+0x14e>
            continue;
 8046a58:	bf00      	nop
 8046a5a:	e000      	b.n	8046a5e <getAutocompletedCommand+0x14e>
            continue;
 8046a5c:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046a60:	3301      	adds	r3, #1
 8046a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8046a64:	6a3b      	ldr	r3, [r7, #32]
 8046a66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8046a68:	461a      	mov	r2, r3
 8046a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046a6c:	4293      	cmp	r3, r2
 8046a6e:	f6ff af75 	blt.w	804695c <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8046a72:	68fb      	ldr	r3, [r7, #12]
 8046a74:	461a      	mov	r2, r3
 8046a76:	f107 0310 	add.w	r3, r7, #16
 8046a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8046a7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8046a82:	68f8      	ldr	r0, [r7, #12]
 8046a84:	3738      	adds	r7, #56	@ 0x38
 8046a86:	46bd      	mov	sp, r7
 8046a88:	bd80      	pop	{r7, pc}
	...

08046a8c <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8046a8c:	b580      	push	{r7, lr}
 8046a8e:	b088      	sub	sp, #32
 8046a90:	af00      	add	r7, sp, #0
 8046a92:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8046a94:	687b      	ldr	r3, [r7, #4]
 8046a96:	68db      	ldr	r3, [r3, #12]
 8046a98:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8046a9a:	697b      	ldr	r3, [r7, #20]
 8046a9c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8046aa0:	f003 0320 	and.w	r3, r3, #32
 8046aa4:	2b00      	cmp	r3, #0
 8046aa6:	d04a      	beq.n	8046b3e <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8046aa8:	697b      	ldr	r3, [r7, #20]
 8046aaa:	69da      	ldr	r2, [r3, #28]
 8046aac:	f107 030c 	add.w	r3, r7, #12
 8046ab0:	6879      	ldr	r1, [r7, #4]
 8046ab2:	4618      	mov	r0, r3
 8046ab4:	f7ff ff2c 	bl	8046910 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8046ab8:	8a7b      	ldrh	r3, [r7, #18]
 8046aba:	2b00      	cmp	r3, #0
 8046abc:	d102      	bne.n	8046ac4 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8046abe:	697b      	ldr	r3, [r7, #20]
 8046ac0:	8c1b      	ldrh	r3, [r3, #32]
 8046ac2:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8046ac4:	4b20      	ldr	r3, [pc, #128]	@ (8046b48 <printLiveAutocompletion+0xbc>)
 8046ac6:	681b      	ldr	r3, [r3, #0]
 8046ac8:	4619      	mov	r1, r3
 8046aca:	6878      	ldr	r0, [r7, #4]
 8046acc:	f000 f907 	bl	8046cde <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8046ad0:	697b      	ldr	r3, [r7, #20]
 8046ad2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8046ad4:	2201      	movs	r2, #1
 8046ad6:	4619      	mov	r1, r3
 8046ad8:	6878      	ldr	r0, [r7, #4]
 8046ada:	f000 f921 	bl	8046d20 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8046ade:	697b      	ldr	r3, [r7, #20]
 8046ae0:	8c1b      	ldrh	r3, [r3, #32]
 8046ae2:	61fb      	str	r3, [r7, #28]
 8046ae4:	e00b      	b.n	8046afe <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8046ae6:	687b      	ldr	r3, [r7, #4]
 8046ae8:	681b      	ldr	r3, [r3, #0]
 8046aea:	68f9      	ldr	r1, [r7, #12]
 8046aec:	69fa      	ldr	r2, [r7, #28]
 8046aee:	440a      	add	r2, r1
 8046af0:	7812      	ldrb	r2, [r2, #0]
 8046af2:	4611      	mov	r1, r2
 8046af4:	6878      	ldr	r0, [r7, #4]
 8046af6:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8046af8:	69fb      	ldr	r3, [r7, #28]
 8046afa:	3301      	adds	r3, #1
 8046afc:	61fb      	str	r3, [r7, #28]
 8046afe:	8a3b      	ldrh	r3, [r7, #16]
 8046b00:	461a      	mov	r2, r3
 8046b02:	69fb      	ldr	r3, [r7, #28]
 8046b04:	4293      	cmp	r3, r2
 8046b06:	d3ee      	bcc.n	8046ae6 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8046b08:	8a3b      	ldrh	r3, [r7, #16]
 8046b0a:	61bb      	str	r3, [r7, #24]
 8046b0c:	e007      	b.n	8046b1e <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 8046b0e:	687b      	ldr	r3, [r7, #4]
 8046b10:	681b      	ldr	r3, [r3, #0]
 8046b12:	2120      	movs	r1, #32
 8046b14:	6878      	ldr	r0, [r7, #4]
 8046b16:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8046b18:	69bb      	ldr	r3, [r7, #24]
 8046b1a:	3301      	adds	r3, #1
 8046b1c:	61bb      	str	r3, [r7, #24]
 8046b1e:	697b      	ldr	r3, [r7, #20]
 8046b20:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8046b22:	461a      	mov	r2, r3
 8046b24:	69bb      	ldr	r3, [r7, #24]
 8046b26:	4293      	cmp	r3, r2
 8046b28:	d3f1      	bcc.n	8046b0e <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8046b2a:	8a3a      	ldrh	r2, [r7, #16]
 8046b2c:	697b      	ldr	r3, [r7, #20]
 8046b2e:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8046b30:	4b06      	ldr	r3, [pc, #24]	@ (8046b4c <printLiveAutocompletion+0xc0>)
 8046b32:	681b      	ldr	r3, [r3, #0]
 8046b34:	4619      	mov	r1, r3
 8046b36:	6878      	ldr	r0, [r7, #4]
 8046b38:	f000 f8d1 	bl	8046cde <writeToOutput>
 8046b3c:	e000      	b.n	8046b40 <printLiveAutocompletion+0xb4>
        return;
 8046b3e:	bf00      	nop
}
 8046b40:	3720      	adds	r7, #32
 8046b42:	46bd      	mov	sp, r7
 8046b44:	bd80      	pop	{r7, pc}
 8046b46:	bf00      	nop
 8046b48:	240148c8 	.word	0x240148c8
 8046b4c:	240148cc 	.word	0x240148cc

08046b50 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8046b50:	b580      	push	{r7, lr}
 8046b52:	b088      	sub	sp, #32
 8046b54:	af00      	add	r7, sp, #0
 8046b56:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8046b58:	687b      	ldr	r3, [r7, #4]
 8046b5a:	68db      	ldr	r3, [r3, #12]
 8046b5c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8046b5e:	69bb      	ldr	r3, [r7, #24]
 8046b60:	69da      	ldr	r2, [r3, #28]
 8046b62:	f107 030c 	add.w	r3, r7, #12
 8046b66:	6879      	ldr	r1, [r7, #4]
 8046b68:	4618      	mov	r0, r3
 8046b6a:	f7ff fed1 	bl	8046910 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8046b6e:	8a7b      	ldrh	r3, [r7, #18]
 8046b70:	2b00      	cmp	r3, #0
 8046b72:	d078      	beq.n	8046c66 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8046b74:	8a7b      	ldrh	r3, [r7, #18]
 8046b76:	2b01      	cmp	r3, #1
 8046b78:	d004      	beq.n	8046b84 <onAutocompleteRequest+0x34>
 8046b7a:	8a3a      	ldrh	r2, [r7, #16]
 8046b7c:	69bb      	ldr	r3, [r7, #24]
 8046b7e:	8c1b      	ldrh	r3, [r3, #32]
 8046b80:	429a      	cmp	r2, r3
 8046b82:	d931      	bls.n	8046be8 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8046b84:	69bb      	ldr	r3, [r7, #24]
 8046b86:	69db      	ldr	r3, [r3, #28]
 8046b88:	68f9      	ldr	r1, [r7, #12]
 8046b8a:	8a3a      	ldrh	r2, [r7, #16]
 8046b8c:	4618      	mov	r0, r3
 8046b8e:	f022 fed4 	bl	806993a <memcpy>
        if (cmd.candidateCount == 1) {
 8046b92:	8a7b      	ldrh	r3, [r7, #18]
 8046b94:	2b01      	cmp	r3, #1
 8046b96:	d109      	bne.n	8046bac <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8046b98:	69bb      	ldr	r3, [r7, #24]
 8046b9a:	69db      	ldr	r3, [r3, #28]
 8046b9c:	8a3a      	ldrh	r2, [r7, #16]
 8046b9e:	4413      	add	r3, r2
 8046ba0:	2220      	movs	r2, #32
 8046ba2:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8046ba4:	8a3b      	ldrh	r3, [r7, #16]
 8046ba6:	3301      	adds	r3, #1
 8046ba8:	b29b      	uxth	r3, r3
 8046baa:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8046bac:	69bb      	ldr	r3, [r7, #24]
 8046bae:	69db      	ldr	r3, [r3, #28]
 8046bb0:	8a3a      	ldrh	r2, [r7, #16]
 8046bb2:	4413      	add	r3, r2
 8046bb4:	2200      	movs	r2, #0
 8046bb6:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8046bb8:	69bb      	ldr	r3, [r7, #24]
 8046bba:	69db      	ldr	r3, [r3, #28]
 8046bbc:	69ba      	ldr	r2, [r7, #24]
 8046bbe:	8c12      	ldrh	r2, [r2, #32]
 8046bc0:	4611      	mov	r1, r2
 8046bc2:	69ba      	ldr	r2, [r7, #24]
 8046bc4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8046bc6:	1a8a      	subs	r2, r1, r2
 8046bc8:	4413      	add	r3, r2
 8046bca:	4619      	mov	r1, r3
 8046bcc:	6878      	ldr	r0, [r7, #4]
 8046bce:	f000 f886 	bl	8046cde <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8046bd2:	8a3a      	ldrh	r2, [r7, #16]
 8046bd4:	69bb      	ldr	r3, [r7, #24]
 8046bd6:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8046bd8:	69bb      	ldr	r3, [r7, #24]
 8046bda:	8c1a      	ldrh	r2, [r3, #32]
 8046bdc:	69bb      	ldr	r3, [r7, #24]
 8046bde:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8046be0:	69bb      	ldr	r3, [r7, #24]
 8046be2:	2200      	movs	r2, #0
 8046be4:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8046be6:	e03f      	b.n	8046c68 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8046be8:	6878      	ldr	r0, [r7, #4]
 8046bea:	f000 f843 	bl	8046c74 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046bee:	2300      	movs	r3, #0
 8046bf0:	61fb      	str	r3, [r7, #28]
 8046bf2:	e021      	b.n	8046c38 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8046bf4:	69bb      	ldr	r3, [r7, #24]
 8046bf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8046bf8:	69fb      	ldr	r3, [r7, #28]
 8046bfa:	4413      	add	r3, r2
 8046bfc:	781b      	ldrb	r3, [r3, #0]
 8046bfe:	f003 0301 	and.w	r3, r3, #1
 8046c02:	2b00      	cmp	r3, #0
 8046c04:	d014      	beq.n	8046c30 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 8046c06:	69bb      	ldr	r3, [r7, #24]
 8046c08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8046c0a:	69fa      	ldr	r2, [r7, #28]
 8046c0c:	4613      	mov	r3, r2
 8046c0e:	005b      	lsls	r3, r3, #1
 8046c10:	4413      	add	r3, r2
 8046c12:	00db      	lsls	r3, r3, #3
 8046c14:	440b      	add	r3, r1
 8046c16:	685b      	ldr	r3, [r3, #4]
 8046c18:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8046c1a:	6979      	ldr	r1, [r7, #20]
 8046c1c:	6878      	ldr	r0, [r7, #4]
 8046c1e:	f000 f85e 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 8046c22:	4b13      	ldr	r3, [pc, #76]	@ (8046c70 <onAutocompleteRequest+0x120>)
 8046c24:	681b      	ldr	r3, [r3, #0]
 8046c26:	4619      	mov	r1, r3
 8046c28:	6878      	ldr	r0, [r7, #4]
 8046c2a:	f000 f858 	bl	8046cde <writeToOutput>
 8046c2e:	e000      	b.n	8046c32 <onAutocompleteRequest+0xe2>
            continue;
 8046c30:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8046c32:	69fb      	ldr	r3, [r7, #28]
 8046c34:	3301      	adds	r3, #1
 8046c36:	61fb      	str	r3, [r7, #28]
 8046c38:	69bb      	ldr	r3, [r7, #24]
 8046c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8046c3c:	461a      	mov	r2, r3
 8046c3e:	69fb      	ldr	r3, [r7, #28]
 8046c40:	4293      	cmp	r3, r2
 8046c42:	dbd7      	blt.n	8046bf4 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8046c44:	69bb      	ldr	r3, [r7, #24]
 8046c46:	681b      	ldr	r3, [r3, #0]
 8046c48:	4619      	mov	r1, r3
 8046c4a:	6878      	ldr	r0, [r7, #4]
 8046c4c:	f000 f847 	bl	8046cde <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8046c50:	69bb      	ldr	r3, [r7, #24]
 8046c52:	69db      	ldr	r3, [r3, #28]
 8046c54:	4619      	mov	r1, r3
 8046c56:	6878      	ldr	r0, [r7, #4]
 8046c58:	f000 f841 	bl	8046cde <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8046c5c:	69bb      	ldr	r3, [r7, #24]
 8046c5e:	8c1a      	ldrh	r2, [r3, #32]
 8046c60:	69bb      	ldr	r3, [r7, #24]
 8046c62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8046c64:	e000      	b.n	8046c68 <onAutocompleteRequest+0x118>
        return;
 8046c66:	bf00      	nop
}
 8046c68:	3720      	adds	r7, #32
 8046c6a:	46bd      	mov	sp, r7
 8046c6c:	bd80      	pop	{r7, pc}
 8046c6e:	bf00      	nop
 8046c70:	240148bc 	.word	0x240148bc

08046c74 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8046c74:	b590      	push	{r4, r7, lr}
 8046c76:	b087      	sub	sp, #28
 8046c78:	af00      	add	r7, sp, #0
 8046c7a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8046c7c:	687b      	ldr	r3, [r7, #4]
 8046c7e:	68db      	ldr	r3, [r3, #12]
 8046c80:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8046c82:	693b      	ldr	r3, [r7, #16]
 8046c84:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8046c86:	461c      	mov	r4, r3
 8046c88:	693b      	ldr	r3, [r7, #16]
 8046c8a:	681b      	ldr	r3, [r3, #0]
 8046c8c:	4618      	mov	r0, r3
 8046c8e:	f7f9 fb31 	bl	80402f4 <strlen>
 8046c92:	4603      	mov	r3, r0
 8046c94:	4423      	add	r3, r4
 8046c96:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8046c98:	687b      	ldr	r3, [r7, #4]
 8046c9a:	681b      	ldr	r3, [r3, #0]
 8046c9c:	210d      	movs	r1, #13
 8046c9e:	6878      	ldr	r0, [r7, #4]
 8046ca0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8046ca2:	2300      	movs	r3, #0
 8046ca4:	617b      	str	r3, [r7, #20]
 8046ca6:	e007      	b.n	8046cb8 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8046ca8:	687b      	ldr	r3, [r7, #4]
 8046caa:	681b      	ldr	r3, [r3, #0]
 8046cac:	2120      	movs	r1, #32
 8046cae:	6878      	ldr	r0, [r7, #4]
 8046cb0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8046cb2:	697b      	ldr	r3, [r7, #20]
 8046cb4:	3301      	adds	r3, #1
 8046cb6:	617b      	str	r3, [r7, #20]
 8046cb8:	697a      	ldr	r2, [r7, #20]
 8046cba:	68fb      	ldr	r3, [r7, #12]
 8046cbc:	429a      	cmp	r2, r3
 8046cbe:	d3f3      	bcc.n	8046ca8 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8046cc0:	687b      	ldr	r3, [r7, #4]
 8046cc2:	681b      	ldr	r3, [r3, #0]
 8046cc4:	210d      	movs	r1, #13
 8046cc6:	6878      	ldr	r0, [r7, #4]
 8046cc8:	4798      	blx	r3
    impl->inputLineLength = 0;
 8046cca:	693b      	ldr	r3, [r7, #16]
 8046ccc:	2200      	movs	r2, #0
 8046cce:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8046cd0:	693b      	ldr	r3, [r7, #16]
 8046cd2:	2200      	movs	r2, #0
 8046cd4:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8046cd6:	bf00      	nop
 8046cd8:	371c      	adds	r7, #28
 8046cda:	46bd      	mov	sp, r7
 8046cdc:	bd90      	pop	{r4, r7, pc}

08046cde <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8046cde:	b580      	push	{r7, lr}
 8046ce0:	b084      	sub	sp, #16
 8046ce2:	af00      	add	r7, sp, #0
 8046ce4:	6078      	str	r0, [r7, #4]
 8046ce6:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8046ce8:	6838      	ldr	r0, [r7, #0]
 8046cea:	f7f9 fb03 	bl	80402f4 <strlen>
 8046cee:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8046cf0:	2300      	movs	r3, #0
 8046cf2:	60fb      	str	r3, [r7, #12]
 8046cf4:	e00b      	b.n	8046d0e <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8046cf6:	687b      	ldr	r3, [r7, #4]
 8046cf8:	681b      	ldr	r3, [r3, #0]
 8046cfa:	6839      	ldr	r1, [r7, #0]
 8046cfc:	68fa      	ldr	r2, [r7, #12]
 8046cfe:	440a      	add	r2, r1
 8046d00:	7812      	ldrb	r2, [r2, #0]
 8046d02:	4611      	mov	r1, r2
 8046d04:	6878      	ldr	r0, [r7, #4]
 8046d06:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8046d08:	68fb      	ldr	r3, [r7, #12]
 8046d0a:	3301      	adds	r3, #1
 8046d0c:	60fb      	str	r3, [r7, #12]
 8046d0e:	68fa      	ldr	r2, [r7, #12]
 8046d10:	68bb      	ldr	r3, [r7, #8]
 8046d12:	429a      	cmp	r2, r3
 8046d14:	d3ef      	bcc.n	8046cf6 <writeToOutput+0x18>
    }
}
 8046d16:	bf00      	nop
 8046d18:	bf00      	nop
 8046d1a:	3710      	adds	r7, #16
 8046d1c:	46bd      	mov	sp, r7
 8046d1e:	bd80      	pop	{r7, pc}

08046d20 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8046d20:	b580      	push	{r7, lr}
 8046d22:	b086      	sub	sp, #24
 8046d24:	af00      	add	r7, sp, #0
 8046d26:	6078      	str	r0, [r7, #4]
 8046d28:	460b      	mov	r3, r1
 8046d2a:	807b      	strh	r3, [r7, #2]
 8046d2c:	4613      	mov	r3, r2
 8046d2e:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8046d30:	887b      	ldrh	r3, [r7, #2]
 8046d32:	2b00      	cmp	r3, #0
 8046d34:	d020      	beq.n	8046d78 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 8046d36:	f107 030c 	add.w	r3, r7, #12
 8046d3a:	2200      	movs	r2, #0
 8046d3c:	601a      	str	r2, [r3, #0]
 8046d3e:	605a      	str	r2, [r3, #4]
 8046d40:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8046d42:	787b      	ldrb	r3, [r7, #1]
 8046d44:	2b00      	cmp	r3, #0
 8046d46:	d004      	beq.n	8046d52 <moveCursor+0x32>
 8046d48:	4b0d      	ldr	r3, [pc, #52]	@ (8046d80 <moveCursor+0x60>)
 8046d4a:	681b      	ldr	r3, [r3, #0]
 8046d4c:	3302      	adds	r3, #2
 8046d4e:	781b      	ldrb	r3, [r3, #0]
 8046d50:	e003      	b.n	8046d5a <moveCursor+0x3a>
 8046d52:	4b0c      	ldr	r3, [pc, #48]	@ (8046d84 <moveCursor+0x64>)
 8046d54:	681b      	ldr	r3, [r3, #0]
 8046d56:	3302      	adds	r3, #2
 8046d58:	781b      	ldrb	r3, [r3, #0]
 8046d5a:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 8046d5c:	887a      	ldrh	r2, [r7, #2]
 8046d5e:	7dfb      	ldrb	r3, [r7, #23]
 8046d60:	f107 000c 	add.w	r0, r7, #12
 8046d64:	4908      	ldr	r1, [pc, #32]	@ (8046d88 <moveCursor+0x68>)
 8046d66:	f022 fc71 	bl	806964c <siprintf>
    writeToOutput(cli, escBuffer);
 8046d6a:	f107 030c 	add.w	r3, r7, #12
 8046d6e:	4619      	mov	r1, r3
 8046d70:	6878      	ldr	r0, [r7, #4]
 8046d72:	f7ff ffb4 	bl	8046cde <writeToOutput>
 8046d76:	e000      	b.n	8046d7a <moveCursor+0x5a>
        return;
 8046d78:	bf00      	nop
}
 8046d7a:	3718      	adds	r7, #24
 8046d7c:	46bd      	mov	sp, r7
 8046d7e:	bd80      	pop	{r7, pc}
 8046d80:	240148c0 	.word	0x240148c0
 8046d84:	240148c4 	.word	0x240148c4
 8046d88:	0806d120 	.word	0x0806d120

08046d8c <isControlChar>:

static bool isControlChar(char c) {
 8046d8c:	b480      	push	{r7}
 8046d8e:	b083      	sub	sp, #12
 8046d90:	af00      	add	r7, sp, #0
 8046d92:	4603      	mov	r3, r0
 8046d94:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8046d96:	79fb      	ldrb	r3, [r7, #7]
 8046d98:	2b0d      	cmp	r3, #13
 8046d9a:	d00b      	beq.n	8046db4 <isControlChar+0x28>
 8046d9c:	79fb      	ldrb	r3, [r7, #7]
 8046d9e:	2b0a      	cmp	r3, #10
 8046da0:	d008      	beq.n	8046db4 <isControlChar+0x28>
 8046da2:	79fb      	ldrb	r3, [r7, #7]
 8046da4:	2b08      	cmp	r3, #8
 8046da6:	d005      	beq.n	8046db4 <isControlChar+0x28>
 8046da8:	79fb      	ldrb	r3, [r7, #7]
 8046daa:	2b09      	cmp	r3, #9
 8046dac:	d002      	beq.n	8046db4 <isControlChar+0x28>
 8046dae:	79fb      	ldrb	r3, [r7, #7]
 8046db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8046db2:	d101      	bne.n	8046db8 <isControlChar+0x2c>
 8046db4:	2301      	movs	r3, #1
 8046db6:	e000      	b.n	8046dba <isControlChar+0x2e>
 8046db8:	2300      	movs	r3, #0
 8046dba:	f003 0301 	and.w	r3, r3, #1
 8046dbe:	b2db      	uxtb	r3, r3
}
 8046dc0:	4618      	mov	r0, r3
 8046dc2:	370c      	adds	r7, #12
 8046dc4:	46bd      	mov	sp, r7
 8046dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046dca:	4770      	bx	lr

08046dcc <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8046dcc:	b480      	push	{r7}
 8046dce:	b083      	sub	sp, #12
 8046dd0:	af00      	add	r7, sp, #0
 8046dd2:	4603      	mov	r3, r0
 8046dd4:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8046dd6:	79fb      	ldrb	r3, [r7, #7]
 8046dd8:	2b1f      	cmp	r3, #31
 8046dda:	d904      	bls.n	8046de6 <isDisplayableChar+0x1a>
 8046ddc:	79fb      	ldrb	r3, [r7, #7]
 8046dde:	2b7e      	cmp	r3, #126	@ 0x7e
 8046de0:	d801      	bhi.n	8046de6 <isDisplayableChar+0x1a>
 8046de2:	2301      	movs	r3, #1
 8046de4:	e000      	b.n	8046de8 <isDisplayableChar+0x1c>
 8046de6:	2300      	movs	r3, #0
 8046de8:	f003 0301 	and.w	r3, r3, #1
 8046dec:	b2db      	uxtb	r3, r3
}
 8046dee:	4618      	mov	r0, r3
 8046df0:	370c      	adds	r7, #12
 8046df2:	46bd      	mov	sp, r7
 8046df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046df8:	4770      	bx	lr

08046dfa <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8046dfa:	b480      	push	{r7}
 8046dfc:	b083      	sub	sp, #12
 8046dfe:	af00      	add	r7, sp, #0
 8046e00:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8046e02:	687b      	ldr	r3, [r7, #4]
 8046e04:	88da      	ldrh	r2, [r3, #6]
 8046e06:	687b      	ldr	r3, [r7, #4]
 8046e08:	889b      	ldrh	r3, [r3, #4]
 8046e0a:	429a      	cmp	r2, r3
 8046e0c:	d306      	bcc.n	8046e1c <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8046e0e:	687b      	ldr	r3, [r7, #4]
 8046e10:	88da      	ldrh	r2, [r3, #6]
 8046e12:	687b      	ldr	r3, [r7, #4]
 8046e14:	889b      	ldrh	r3, [r3, #4]
 8046e16:	1ad3      	subs	r3, r2, r3
 8046e18:	b29b      	uxth	r3, r3
 8046e1a:	e009      	b.n	8046e30 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8046e1c:	687b      	ldr	r3, [r7, #4]
 8046e1e:	891a      	ldrh	r2, [r3, #8]
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	889b      	ldrh	r3, [r3, #4]
 8046e24:	1ad3      	subs	r3, r2, r3
 8046e26:	b29a      	uxth	r2, r3
 8046e28:	687b      	ldr	r3, [r7, #4]
 8046e2a:	88db      	ldrh	r3, [r3, #6]
 8046e2c:	4413      	add	r3, r2
 8046e2e:	b29b      	uxth	r3, r3
}
 8046e30:	4618      	mov	r0, r3
 8046e32:	370c      	adds	r7, #12
 8046e34:	46bd      	mov	sp, r7
 8046e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e3a:	4770      	bx	lr

08046e3c <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8046e3c:	b480      	push	{r7}
 8046e3e:	b085      	sub	sp, #20
 8046e40:	af00      	add	r7, sp, #0
 8046e42:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8046e44:	2300      	movs	r3, #0
 8046e46:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8046e48:	687b      	ldr	r3, [r7, #4]
 8046e4a:	889a      	ldrh	r2, [r3, #4]
 8046e4c:	687b      	ldr	r3, [r7, #4]
 8046e4e:	88db      	ldrh	r3, [r3, #6]
 8046e50:	429a      	cmp	r2, r3
 8046e52:	d014      	beq.n	8046e7e <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8046e54:	687b      	ldr	r3, [r7, #4]
 8046e56:	681b      	ldr	r3, [r3, #0]
 8046e58:	687a      	ldr	r2, [r7, #4]
 8046e5a:	8892      	ldrh	r2, [r2, #4]
 8046e5c:	4413      	add	r3, r2
 8046e5e:	781b      	ldrb	r3, [r3, #0]
 8046e60:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8046e62:	687b      	ldr	r3, [r7, #4]
 8046e64:	889b      	ldrh	r3, [r3, #4]
 8046e66:	3301      	adds	r3, #1
 8046e68:	b29b      	uxth	r3, r3
 8046e6a:	687a      	ldr	r2, [r7, #4]
 8046e6c:	8912      	ldrh	r2, [r2, #8]
 8046e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8046e72:	fb01 f202 	mul.w	r2, r1, r2
 8046e76:	1a9b      	subs	r3, r3, r2
 8046e78:	b29a      	uxth	r2, r3
 8046e7a:	687b      	ldr	r3, [r7, #4]
 8046e7c:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8046e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8046e80:	4618      	mov	r0, r3
 8046e82:	3714      	adds	r7, #20
 8046e84:	46bd      	mov	sp, r7
 8046e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e8a:	4770      	bx	lr

08046e8c <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8046e8c:	b480      	push	{r7}
 8046e8e:	b085      	sub	sp, #20
 8046e90:	af00      	add	r7, sp, #0
 8046e92:	6078      	str	r0, [r7, #4]
 8046e94:	460b      	mov	r3, r1
 8046e96:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8046e98:	687b      	ldr	r3, [r7, #4]
 8046e9a:	88db      	ldrh	r3, [r3, #6]
 8046e9c:	3301      	adds	r3, #1
 8046e9e:	b29b      	uxth	r3, r3
 8046ea0:	687a      	ldr	r2, [r7, #4]
 8046ea2:	8912      	ldrh	r2, [r2, #8]
 8046ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8046ea8:	fb01 f202 	mul.w	r2, r1, r2
 8046eac:	1a9b      	subs	r3, r3, r2
 8046eae:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8046eb0:	687b      	ldr	r3, [r7, #4]
 8046eb2:	889b      	ldrh	r3, [r3, #4]
 8046eb4:	89fa      	ldrh	r2, [r7, #14]
 8046eb6:	429a      	cmp	r2, r3
 8046eb8:	d00b      	beq.n	8046ed2 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8046eba:	687b      	ldr	r3, [r7, #4]
 8046ebc:	681b      	ldr	r3, [r3, #0]
 8046ebe:	687a      	ldr	r2, [r7, #4]
 8046ec0:	88d2      	ldrh	r2, [r2, #6]
 8046ec2:	4413      	add	r3, r2
 8046ec4:	78fa      	ldrb	r2, [r7, #3]
 8046ec6:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8046ec8:	687b      	ldr	r3, [r7, #4]
 8046eca:	89fa      	ldrh	r2, [r7, #14]
 8046ecc:	80da      	strh	r2, [r3, #6]
        return true;
 8046ece:	2301      	movs	r3, #1
 8046ed0:	e000      	b.n	8046ed4 <fifoBufPush+0x48>
    }
    return false;
 8046ed2:	2300      	movs	r3, #0
}
 8046ed4:	4618      	mov	r0, r3
 8046ed6:	3714      	adds	r7, #20
 8046ed8:	46bd      	mov	sp, r7
 8046eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ede:	4770      	bx	lr

08046ee0 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8046ee0:	b580      	push	{r7, lr}
 8046ee2:	b088      	sub	sp, #32
 8046ee4:	af00      	add	r7, sp, #0
 8046ee6:	6078      	str	r0, [r7, #4]
 8046ee8:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8046eea:	6838      	ldr	r0, [r7, #0]
 8046eec:	f7f9 fa02 	bl	80402f4 <strlen>
 8046ef0:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8046ef2:	687b      	ldr	r3, [r7, #4]
 8046ef4:	889b      	ldrh	r3, [r3, #4]
 8046ef6:	461a      	mov	r2, r3
 8046ef8:	69bb      	ldr	r3, [r7, #24]
 8046efa:	3301      	adds	r3, #1
 8046efc:	429a      	cmp	r2, r3
 8046efe:	d201      	bcs.n	8046f04 <historyPut+0x24>
        return false;
 8046f00:	2300      	movs	r3, #0
 8046f02:	e04d      	b.n	8046fa0 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8046f04:	6839      	ldr	r1, [r7, #0]
 8046f06:	6878      	ldr	r0, [r7, #4]
 8046f08:	f000 f86a 	bl	8046fe0 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8046f0c:	e024      	b.n	8046f58 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8046f0e:	687b      	ldr	r3, [r7, #4]
 8046f10:	891b      	ldrh	r3, [r3, #8]
 8046f12:	4619      	mov	r1, r3
 8046f14:	6878      	ldr	r0, [r7, #4]
 8046f16:	f000 f847 	bl	8046fa8 <historyGet>
 8046f1a:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8046f1c:	6978      	ldr	r0, [r7, #20]
 8046f1e:	f7f9 f9e9 	bl	80402f4 <strlen>
 8046f22:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8046f24:	687b      	ldr	r3, [r7, #4]
 8046f26:	681b      	ldr	r3, [r3, #0]
 8046f28:	697a      	ldr	r2, [r7, #20]
 8046f2a:	1ad3      	subs	r3, r2, r3
 8046f2c:	461a      	mov	r2, r3
 8046f2e:	693b      	ldr	r3, [r7, #16]
 8046f30:	4413      	add	r3, r2
 8046f32:	3301      	adds	r3, #1
 8046f34:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8046f36:	687b      	ldr	r3, [r7, #4]
 8046f38:	889b      	ldrh	r3, [r3, #4]
 8046f3a:	461a      	mov	r2, r3
 8046f3c:	69fb      	ldr	r3, [r7, #28]
 8046f3e:	1ad3      	subs	r3, r2, r3
 8046f40:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8046f42:	69bb      	ldr	r3, [r7, #24]
 8046f44:	3301      	adds	r3, #1
 8046f46:	68fa      	ldr	r2, [r7, #12]
 8046f48:	429a      	cmp	r2, r3
 8046f4a:	d20a      	bcs.n	8046f62 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8046f4c:	687b      	ldr	r3, [r7, #4]
 8046f4e:	891b      	ldrh	r3, [r3, #8]
 8046f50:	3b01      	subs	r3, #1
 8046f52:	b29a      	uxth	r2, r3
 8046f54:	687b      	ldr	r3, [r7, #4]
 8046f56:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8046f58:	687b      	ldr	r3, [r7, #4]
 8046f5a:	891b      	ldrh	r3, [r3, #8]
 8046f5c:	2b00      	cmp	r3, #0
 8046f5e:	d1d6      	bne.n	8046f0e <historyPut+0x2e>
 8046f60:	e000      	b.n	8046f64 <historyPut+0x84>
            break;
 8046f62:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8046f64:	687b      	ldr	r3, [r7, #4]
 8046f66:	891b      	ldrh	r3, [r3, #8]
 8046f68:	2b00      	cmp	r3, #0
 8046f6a:	d00a      	beq.n	8046f82 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8046f6c:	687b      	ldr	r3, [r7, #4]
 8046f6e:	681a      	ldr	r2, [r3, #0]
 8046f70:	69bb      	ldr	r3, [r7, #24]
 8046f72:	3301      	adds	r3, #1
 8046f74:	18d0      	adds	r0, r2, r3
 8046f76:	687b      	ldr	r3, [r7, #4]
 8046f78:	681b      	ldr	r3, [r3, #0]
 8046f7a:	69fa      	ldr	r2, [r7, #28]
 8046f7c:	4619      	mov	r1, r3
 8046f7e:	f022 fc17 	bl	80697b0 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8046f82:	687b      	ldr	r3, [r7, #4]
 8046f84:	6818      	ldr	r0, [r3, #0]
 8046f86:	69bb      	ldr	r3, [r7, #24]
 8046f88:	3301      	adds	r3, #1
 8046f8a:	461a      	mov	r2, r3
 8046f8c:	6839      	ldr	r1, [r7, #0]
 8046f8e:	f022 fcd4 	bl	806993a <memcpy>
    ++history->itemsCount;
 8046f92:	687b      	ldr	r3, [r7, #4]
 8046f94:	891b      	ldrh	r3, [r3, #8]
 8046f96:	3301      	adds	r3, #1
 8046f98:	b29a      	uxth	r2, r3
 8046f9a:	687b      	ldr	r3, [r7, #4]
 8046f9c:	811a      	strh	r2, [r3, #8]

    return true;
 8046f9e:	2301      	movs	r3, #1
}
 8046fa0:	4618      	mov	r0, r3
 8046fa2:	3720      	adds	r7, #32
 8046fa4:	46bd      	mov	sp, r7
 8046fa6:	bd80      	pop	{r7, pc}

08046fa8 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8046fa8:	b580      	push	{r7, lr}
 8046faa:	b082      	sub	sp, #8
 8046fac:	af00      	add	r7, sp, #0
 8046fae:	6078      	str	r0, [r7, #4]
 8046fb0:	460b      	mov	r3, r1
 8046fb2:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8046fb4:	887b      	ldrh	r3, [r7, #2]
 8046fb6:	2b00      	cmp	r3, #0
 8046fb8:	d004      	beq.n	8046fc4 <historyGet+0x1c>
 8046fba:	687b      	ldr	r3, [r7, #4]
 8046fbc:	891b      	ldrh	r3, [r3, #8]
 8046fbe:	887a      	ldrh	r2, [r7, #2]
 8046fc0:	429a      	cmp	r2, r3
 8046fc2:	d901      	bls.n	8046fc8 <historyGet+0x20>
        return NULL;
 8046fc4:	2300      	movs	r3, #0
 8046fc6:	e007      	b.n	8046fd8 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8046fc8:	687b      	ldr	r3, [r7, #4]
 8046fca:	681b      	ldr	r3, [r3, #0]
 8046fcc:	887a      	ldrh	r2, [r7, #2]
 8046fce:	4611      	mov	r1, r2
 8046fd0:	4618      	mov	r0, r3
 8046fd2:	f7ff f937 	bl	8046244 <embeddedCliGetToken>
 8046fd6:	4603      	mov	r3, r0
}
 8046fd8:	4618      	mov	r0, r3
 8046fda:	3708      	adds	r7, #8
 8046fdc:	46bd      	mov	sp, r7
 8046fde:	bd80      	pop	{r7, pc}

08046fe0 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8046fe0:	b580      	push	{r7, lr}
 8046fe2:	b086      	sub	sp, #24
 8046fe4:	af00      	add	r7, sp, #0
 8046fe6:	6078      	str	r0, [r7, #4]
 8046fe8:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8046fea:	683b      	ldr	r3, [r7, #0]
 8046fec:	2b00      	cmp	r3, #0
 8046fee:	d04c      	beq.n	804708a <historyRemove+0xaa>
 8046ff0:	687b      	ldr	r3, [r7, #4]
 8046ff2:	891b      	ldrh	r3, [r3, #8]
 8046ff4:	2b00      	cmp	r3, #0
 8046ff6:	d048      	beq.n	804708a <historyRemove+0xaa>
        return;
    char *item = NULL;
 8046ff8:	2300      	movs	r3, #0
 8046ffa:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8046ffc:	2301      	movs	r3, #1
 8046ffe:	827b      	strh	r3, [r7, #18]
 8047000:	e013      	b.n	804702a <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8047002:	687b      	ldr	r3, [r7, #4]
 8047004:	681b      	ldr	r3, [r3, #0]
 8047006:	8a7a      	ldrh	r2, [r7, #18]
 8047008:	4611      	mov	r1, r2
 804700a:	4618      	mov	r0, r3
 804700c:	f7ff f935 	bl	804627a <embeddedCliGetTokenVariable>
 8047010:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8047012:	6839      	ldr	r1, [r7, #0]
 8047014:	6978      	ldr	r0, [r7, #20]
 8047016:	f7f9 f963 	bl	80402e0 <strcmp>
 804701a:	4603      	mov	r3, r0
 804701c:	2b00      	cmp	r3, #0
 804701e:	d00a      	beq.n	8047036 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8047020:	2300      	movs	r3, #0
 8047022:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8047024:	8a7b      	ldrh	r3, [r7, #18]
 8047026:	3301      	adds	r3, #1
 8047028:	827b      	strh	r3, [r7, #18]
 804702a:	687b      	ldr	r3, [r7, #4]
 804702c:	891b      	ldrh	r3, [r3, #8]
 804702e:	8a7a      	ldrh	r2, [r7, #18]
 8047030:	429a      	cmp	r2, r3
 8047032:	d9e6      	bls.n	8047002 <historyRemove+0x22>
 8047034:	e000      	b.n	8047038 <historyRemove+0x58>
            break;
 8047036:	bf00      	nop
    }
    if (item == NULL)
 8047038:	697b      	ldr	r3, [r7, #20]
 804703a:	2b00      	cmp	r3, #0
 804703c:	d027      	beq.n	804708e <historyRemove+0xae>
        return;

    --history->itemsCount;
 804703e:	687b      	ldr	r3, [r7, #4]
 8047040:	891b      	ldrh	r3, [r3, #8]
 8047042:	3b01      	subs	r3, #1
 8047044:	b29a      	uxth	r2, r3
 8047046:	687b      	ldr	r3, [r7, #4]
 8047048:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 804704a:	8a7a      	ldrh	r2, [r7, #18]
 804704c:	687b      	ldr	r3, [r7, #4]
 804704e:	891b      	ldrh	r3, [r3, #8]
 8047050:	3301      	adds	r3, #1
 8047052:	429a      	cmp	r2, r3
 8047054:	d01d      	beq.n	8047092 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8047056:	6978      	ldr	r0, [r7, #20]
 8047058:	f7f9 f94c 	bl	80402f4 <strlen>
 804705c:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 804705e:	687b      	ldr	r3, [r7, #4]
 8047060:	889b      	ldrh	r3, [r3, #4]
 8047062:	4619      	mov	r1, r3
 8047064:	68fb      	ldr	r3, [r7, #12]
 8047066:	3301      	adds	r3, #1
 8047068:	697a      	ldr	r2, [r7, #20]
 804706a:	441a      	add	r2, r3
 804706c:	687b      	ldr	r3, [r7, #4]
 804706e:	681b      	ldr	r3, [r3, #0]
 8047070:	1ad3      	subs	r3, r2, r3
 8047072:	1acb      	subs	r3, r1, r3
 8047074:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8047076:	68fb      	ldr	r3, [r7, #12]
 8047078:	3301      	adds	r3, #1
 804707a:	697a      	ldr	r2, [r7, #20]
 804707c:	4413      	add	r3, r2
 804707e:	68ba      	ldr	r2, [r7, #8]
 8047080:	4619      	mov	r1, r3
 8047082:	6978      	ldr	r0, [r7, #20]
 8047084:	f022 fb94 	bl	80697b0 <memmove>
 8047088:	e004      	b.n	8047094 <historyRemove+0xb4>
        return;
 804708a:	bf00      	nop
 804708c:	e002      	b.n	8047094 <historyRemove+0xb4>
        return;
 804708e:	bf00      	nop
 8047090:	e000      	b.n	8047094 <historyRemove+0xb4>
        return;
 8047092:	bf00      	nop
}
 8047094:	3718      	adds	r7, #24
 8047096:	46bd      	mov	sp, r7
 8047098:	bd80      	pop	{r7, pc}

0804709a <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 804709a:	b480      	push	{r7}
 804709c:	b085      	sub	sp, #20
 804709e:	af00      	add	r7, sp, #0
 80470a0:	6078      	str	r0, [r7, #4]
 80470a2:	460b      	mov	r3, r1
 80470a4:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80470a6:	687b      	ldr	r3, [r7, #4]
 80470a8:	2b00      	cmp	r3, #0
 80470aa:	d002      	beq.n	80470b2 <getTokenPosition+0x18>
 80470ac:	887b      	ldrh	r3, [r7, #2]
 80470ae:	2b00      	cmp	r3, #0
 80470b0:	d102      	bne.n	80470b8 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80470b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80470b6:	e028      	b.n	804710a <getTokenPosition+0x70>
    uint16_t i = 0;
 80470b8:	2300      	movs	r3, #0
 80470ba:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80470bc:	2301      	movs	r3, #1
 80470be:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80470c0:	89ba      	ldrh	r2, [r7, #12]
 80470c2:	887b      	ldrh	r3, [r7, #2]
 80470c4:	429a      	cmp	r2, r3
 80470c6:	d013      	beq.n	80470f0 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80470c8:	89fb      	ldrh	r3, [r7, #14]
 80470ca:	687a      	ldr	r2, [r7, #4]
 80470cc:	4413      	add	r3, r2
 80470ce:	781b      	ldrb	r3, [r3, #0]
 80470d0:	2b00      	cmp	r3, #0
 80470d2:	d109      	bne.n	80470e8 <getTokenPosition+0x4e>
            ++tokenCount;
 80470d4:	89bb      	ldrh	r3, [r7, #12]
 80470d6:	3301      	adds	r3, #1
 80470d8:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80470da:	89fb      	ldrh	r3, [r7, #14]
 80470dc:	3301      	adds	r3, #1
 80470de:	687a      	ldr	r2, [r7, #4]
 80470e0:	4413      	add	r3, r2
 80470e2:	781b      	ldrb	r3, [r3, #0]
 80470e4:	2b00      	cmp	r3, #0
 80470e6:	d005      	beq.n	80470f4 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80470e8:	89fb      	ldrh	r3, [r7, #14]
 80470ea:	3301      	adds	r3, #1
 80470ec:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80470ee:	e7e7      	b.n	80470c0 <getTokenPosition+0x26>
            break;
 80470f0:	bf00      	nop
 80470f2:	e000      	b.n	80470f6 <getTokenPosition+0x5c>
                break;
 80470f4:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80470f6:	89fb      	ldrh	r3, [r7, #14]
 80470f8:	687a      	ldr	r2, [r7, #4]
 80470fa:	4413      	add	r3, r2
 80470fc:	781b      	ldrb	r3, [r3, #0]
 80470fe:	2b00      	cmp	r3, #0
 8047100:	d001      	beq.n	8047106 <getTokenPosition+0x6c>
        return i;
 8047102:	89fb      	ldrh	r3, [r7, #14]
 8047104:	e001      	b.n	804710a <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8047106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 804710a:	4618      	mov	r0, r3
 804710c:	3714      	adds	r7, #20
 804710e:	46bd      	mov	sp, r7
 8047110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047114:	4770      	bx	lr

08047116 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8047116:	b580      	push	{r7, lr}
 8047118:	b086      	sub	sp, #24
 804711a:	af00      	add	r7, sp, #0
 804711c:	60f8      	str	r0, [r7, #12]
 804711e:	60b9      	str	r1, [r7, #8]
 8047120:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8047122:	2300      	movs	r3, #0
 8047124:	617b      	str	r3, [r7, #20]
 8047126:	e010      	b.n	804714a <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8047128:	697b      	ldr	r3, [r7, #20]
 804712a:	009b      	lsls	r3, r3, #2
 804712c:	68ba      	ldr	r2, [r7, #8]
 804712e:	4413      	add	r3, r2
 8047130:	681b      	ldr	r3, [r3, #0]
 8047132:	4619      	mov	r1, r3
 8047134:	68f8      	ldr	r0, [r7, #12]
 8047136:	f7f9 f8d3 	bl	80402e0 <strcmp>
 804713a:	4603      	mov	r3, r0
 804713c:	2b00      	cmp	r3, #0
 804713e:	d101      	bne.n	8047144 <findCategoryIndex+0x2e>
            return i;
 8047140:	697b      	ldr	r3, [r7, #20]
 8047142:	e008      	b.n	8047156 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8047144:	697b      	ldr	r3, [r7, #20]
 8047146:	3301      	adds	r3, #1
 8047148:	617b      	str	r3, [r7, #20]
 804714a:	697a      	ldr	r2, [r7, #20]
 804714c:	687b      	ldr	r3, [r7, #4]
 804714e:	429a      	cmp	r2, r3
 8047150:	dbea      	blt.n	8047128 <findCategoryIndex+0x12>
        }
    }
    return -1;
 8047152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8047156:	4618      	mov	r0, r3
 8047158:	3718      	adds	r7, #24
 804715a:	46bd      	mov	sp, r7
 804715c:	bd80      	pop	{r7, pc}
	...

08047160 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8047160:	b580      	push	{r7, lr}
 8047162:	b086      	sub	sp, #24
 8047164:	af00      	add	r7, sp, #0
 8047166:	60f8      	str	r0, [r7, #12]
 8047168:	60b9      	str	r1, [r7, #8]
 804716a:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 804716c:	68b8      	ldr	r0, [r7, #8]
 804716e:	f7f9 f8c1 	bl	80402f4 <strlen>
 8047172:	4603      	mov	r3, r0
 8047174:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8047176:	68b9      	ldr	r1, [r7, #8]
 8047178:	68f8      	ldr	r0, [r7, #12]
 804717a:	f7ff fdb0 	bl	8046cde <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 804717e:	2300      	movs	r3, #0
 8047180:	617b      	str	r3, [r7, #20]
 8047182:	e006      	b.n	8047192 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8047184:	4908      	ldr	r1, [pc, #32]	@ (80471a8 <printAlignedColumn+0x48>)
 8047186:	68f8      	ldr	r0, [r7, #12]
 8047188:	f7ff fda9 	bl	8046cde <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 804718c:	697b      	ldr	r3, [r7, #20]
 804718e:	3301      	adds	r3, #1
 8047190:	617b      	str	r3, [r7, #20]
 8047192:	687a      	ldr	r2, [r7, #4]
 8047194:	693b      	ldr	r3, [r7, #16]
 8047196:	1ad3      	subs	r3, r2, r3
 8047198:	697a      	ldr	r2, [r7, #20]
 804719a:	429a      	cmp	r2, r3
 804719c:	dbf2      	blt.n	8047184 <printAlignedColumn+0x24>
    }
}
 804719e:	bf00      	nop
 80471a0:	bf00      	nop
 80471a2:	3718      	adds	r7, #24
 80471a4:	46bd      	mov	sp, r7
 80471a6:	bd80      	pop	{r7, pc}
 80471a8:	0806d10c 	.word	0x0806d10c

080471ac <CMD_Help>:

void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 80471ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80471b0:	b095      	sub	sp, #84	@ 0x54
 80471b2:	af00      	add	r7, sp, #0
 80471b4:	60f8      	str	r0, [r7, #12]
 80471b6:	60b9      	str	r1, [r7, #8]
 80471b8:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 80471ba:	68fb      	ldr	r3, [r7, #12]
 80471bc:	68db      	ldr	r3, [r3, #12]
 80471be:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 80471c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80471c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80471c4:	2b00      	cmp	r3, #0
 80471c6:	d10a      	bne.n	80471de <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 80471c8:	4982      	ldr	r1, [pc, #520]	@ (80473d4 <CMD_Help+0x228>)
 80471ca:	68f8      	ldr	r0, [r7, #12]
 80471cc:	f7ff fd87 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 80471d0:	4b81      	ldr	r3, [pc, #516]	@ (80473d8 <CMD_Help+0x22c>)
 80471d2:	681b      	ldr	r3, [r3, #0]
 80471d4:	4619      	mov	r1, r3
 80471d6:	68f8      	ldr	r0, [r7, #12]
 80471d8:	f7ff fd81 	bl	8046cde <writeToOutput>
        return;
 80471dc:	e1a3      	b.n	8047526 <CMD_Help+0x37a>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 80471de:	68b8      	ldr	r0, [r7, #8]
 80471e0:	f7ff f866 	bl	80462b0 <embeddedCliGetTokenCount>
 80471e4:	4603      	mov	r3, r0
 80471e6:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 80471e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80471ea:	2b00      	cmp	r3, #0
 80471ec:	f040 80e2 	bne.w	80473b4 <CMD_Help+0x208>
 80471f0:	466b      	mov	r3, sp
 80471f2:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 80471f4:	2320      	movs	r3, #32
 80471f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 80471f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80471fa:	3b01      	subs	r3, #1
 80471fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80471fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047200:	2200      	movs	r2, #0
 8047202:	4698      	mov	r8, r3
 8047204:	4691      	mov	r9, r2
 8047206:	f04f 0200 	mov.w	r2, #0
 804720a:	f04f 0300 	mov.w	r3, #0
 804720e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8047212:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8047216:	ea4f 1248 	mov.w	r2, r8, lsl #5
 804721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804721c:	2200      	movs	r2, #0
 804721e:	461c      	mov	r4, r3
 8047220:	4615      	mov	r5, r2
 8047222:	f04f 0200 	mov.w	r2, #0
 8047226:	f04f 0300 	mov.w	r3, #0
 804722a:	016b      	lsls	r3, r5, #5
 804722c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8047230:	0162      	lsls	r2, r4, #5
 8047232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047234:	009b      	lsls	r3, r3, #2
 8047236:	3307      	adds	r3, #7
 8047238:	08db      	lsrs	r3, r3, #3
 804723a:	00db      	lsls	r3, r3, #3
 804723c:	ebad 0d03 	sub.w	sp, sp, r3
 8047240:	466b      	mov	r3, sp
 8047242:	3303      	adds	r3, #3
 8047244:	089b      	lsrs	r3, r3, #2
 8047246:	009b      	lsls	r3, r3, #2
 8047248:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 804724a:	2300      	movs	r3, #0
 804724c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 804724e:	2300      	movs	r3, #0
 8047250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8047252:	e023      	b.n	804729c <CMD_Help+0xf0>
            const char* cat = impl->bindings[i].category;
 8047254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8047256:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 804725a:	4613      	mov	r3, r2
 804725c:	005b      	lsls	r3, r3, #1
 804725e:	4413      	add	r3, r2
 8047260:	00db      	lsls	r3, r3, #3
 8047262:	440b      	add	r3, r1
 8047264:	681b      	ldr	r3, [r3, #0]
 8047266:	61bb      	str	r3, [r7, #24]
            if (cat != NULL) {
 8047268:	69bb      	ldr	r3, [r7, #24]
 804726a:	2b00      	cmp	r3, #0
 804726c:	d013      	beq.n	8047296 <CMD_Help+0xea>
                int idx = findCategoryIndex(cat, categories, catCount);
 804726e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8047270:	6a39      	ldr	r1, [r7, #32]
 8047272:	69b8      	ldr	r0, [r7, #24]
 8047274:	f7ff ff4f 	bl	8047116 <findCategoryIndex>
 8047278:	6178      	str	r0, [r7, #20]
                if (idx < 0 && catCount < MAX_CAT) {
 804727a:	697b      	ldr	r3, [r7, #20]
 804727c:	2b00      	cmp	r3, #0
 804727e:	da0a      	bge.n	8047296 <CMD_Help+0xea>
 8047280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8047282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8047284:	429a      	cmp	r2, r3
 8047286:	da06      	bge.n	8047296 <CMD_Help+0xea>
                    categories[catCount++] = cat;
 8047288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804728a:	1c5a      	adds	r2, r3, #1
 804728c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 804728e:	6a3a      	ldr	r2, [r7, #32]
 8047290:	69b9      	ldr	r1, [r7, #24]
 8047292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8047296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8047298:	3301      	adds	r3, #1
 804729a:	64bb      	str	r3, [r7, #72]	@ 0x48
 804729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804729e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80472a0:	461a      	mov	r2, r3
 80472a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80472a4:	4293      	cmp	r3, r2
 80472a6:	dbd5      	blt.n	8047254 <CMD_Help+0xa8>
                }
            }
        }

        for (int c = 0; c < catCount; c++) {
 80472a8:	2300      	movs	r3, #0
 80472aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80472ac:	e07b      	b.n	80473a6 <CMD_Help+0x1fa>
            writeToOutput(cli, "[");
 80472ae:	494b      	ldr	r1, [pc, #300]	@ (80473dc <CMD_Help+0x230>)
 80472b0:	68f8      	ldr	r0, [r7, #12]
 80472b2:	f7ff fd14 	bl	8046cde <writeToOutput>
            writeToOutput(cli, categories[c]);
 80472b6:	6a3b      	ldr	r3, [r7, #32]
 80472b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80472ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80472be:	4619      	mov	r1, r3
 80472c0:	68f8      	ldr	r0, [r7, #12]
 80472c2:	f7ff fd0c 	bl	8046cde <writeToOutput>
            writeToOutput(cli, "]");
 80472c6:	4946      	ldr	r1, [pc, #280]	@ (80473e0 <CMD_Help+0x234>)
 80472c8:	68f8      	ldr	r0, [r7, #12]
 80472ca:	f7ff fd08 	bl	8046cde <writeToOutput>
            writeToOutput(cli, lineBreak);
 80472ce:	4b42      	ldr	r3, [pc, #264]	@ (80473d8 <CMD_Help+0x22c>)
 80472d0:	681b      	ldr	r3, [r3, #0]
 80472d2:	4619      	mov	r1, r3
 80472d4:	68f8      	ldr	r0, [r7, #12]
 80472d6:	f7ff fd02 	bl	8046cde <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 80472da:	2300      	movs	r3, #0
 80472dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80472de:	e053      	b.n	8047388 <CMD_Help+0x1dc>
                const char* cmdCat = impl->bindings[i].category;
 80472e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80472e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80472e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80472e6:	4613      	mov	r3, r2
 80472e8:	005b      	lsls	r3, r3, #1
 80472ea:	4413      	add	r3, r2
 80472ec:	00db      	lsls	r3, r3, #3
 80472ee:	440b      	add	r3, r1
 80472f0:	681b      	ldr	r3, [r3, #0]
 80472f2:	61fb      	str	r3, [r7, #28]
                if (cmdCat != NULL && strcmp(cmdCat, categories[c]) == 0) {
 80472f4:	69fb      	ldr	r3, [r7, #28]
 80472f6:	2b00      	cmp	r3, #0
 80472f8:	d043      	beq.n	8047382 <CMD_Help+0x1d6>
 80472fa:	6a3b      	ldr	r3, [r7, #32]
 80472fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80472fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047302:	4619      	mov	r1, r3
 8047304:	69f8      	ldr	r0, [r7, #28]
 8047306:	f7f8 ffeb 	bl	80402e0 <strcmp>
 804730a:	4603      	mov	r3, r0
 804730c:	2b00      	cmp	r3, #0
 804730e:	d138      	bne.n	8047382 <CMD_Help+0x1d6>
                    writeToOutput(cli, "    ");
 8047310:	4934      	ldr	r1, [pc, #208]	@ (80473e4 <CMD_Help+0x238>)
 8047312:	68f8      	ldr	r0, [r7, #12]
 8047314:	f7ff fce3 	bl	8046cde <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8047318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804731a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804731c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 804731e:	4613      	mov	r3, r2
 8047320:	005b      	lsls	r3, r3, #1
 8047322:	4413      	add	r3, r2
 8047324:	00db      	lsls	r3, r3, #3
 8047326:	440b      	add	r3, r1
 8047328:	685b      	ldr	r3, [r3, #4]
 804732a:	2210      	movs	r2, #16
 804732c:	4619      	mov	r1, r3
 804732e:	68f8      	ldr	r0, [r7, #12]
 8047330:	f7ff ff16 	bl	8047160 <printAlignedColumn>
                    writeToOutput(cli, "| ");
 8047334:	492c      	ldr	r1, [pc, #176]	@ (80473e8 <CMD_Help+0x23c>)
 8047336:	68f8      	ldr	r0, [r7, #12]
 8047338:	f7ff fcd1 	bl	8046cde <writeToOutput>
                    if (impl->bindings[i].help) {
 804733c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804733e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047340:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8047342:	4613      	mov	r3, r2
 8047344:	005b      	lsls	r3, r3, #1
 8047346:	4413      	add	r3, r2
 8047348:	00db      	lsls	r3, r3, #3
 804734a:	440b      	add	r3, r1
 804734c:	689b      	ldr	r3, [r3, #8]
 804734e:	2b00      	cmp	r3, #0
 8047350:	d00d      	beq.n	804736e <CMD_Help+0x1c2>
                        writeToOutput(cli, impl->bindings[i].help);
 8047352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8047354:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8047358:	4613      	mov	r3, r2
 804735a:	005b      	lsls	r3, r3, #1
 804735c:	4413      	add	r3, r2
 804735e:	00db      	lsls	r3, r3, #3
 8047360:	440b      	add	r3, r1
 8047362:	689b      	ldr	r3, [r3, #8]
 8047364:	4619      	mov	r1, r3
 8047366:	68f8      	ldr	r0, [r7, #12]
 8047368:	f7ff fcb9 	bl	8046cde <writeToOutput>
 804736c:	e003      	b.n	8047376 <CMD_Help+0x1ca>
                    } else {
                        writeToOutput(cli, "(no help)");
 804736e:	491f      	ldr	r1, [pc, #124]	@ (80473ec <CMD_Help+0x240>)
 8047370:	68f8      	ldr	r0, [r7, #12]
 8047372:	f7ff fcb4 	bl	8046cde <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8047376:	4b18      	ldr	r3, [pc, #96]	@ (80473d8 <CMD_Help+0x22c>)
 8047378:	681b      	ldr	r3, [r3, #0]
 804737a:	4619      	mov	r1, r3
 804737c:	68f8      	ldr	r0, [r7, #12]
 804737e:	f7ff fcae 	bl	8046cde <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8047382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8047384:	3301      	adds	r3, #1
 8047386:	643b      	str	r3, [r7, #64]	@ 0x40
 8047388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804738a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 804738c:	461a      	mov	r2, r3
 804738e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8047390:	4293      	cmp	r3, r2
 8047392:	dba5      	blt.n	80472e0 <CMD_Help+0x134>
                }
            }
            writeToOutput(cli, lineBreak);
 8047394:	4b10      	ldr	r3, [pc, #64]	@ (80473d8 <CMD_Help+0x22c>)
 8047396:	681b      	ldr	r3, [r3, #0]
 8047398:	4619      	mov	r1, r3
 804739a:	68f8      	ldr	r0, [r7, #12]
 804739c:	f7ff fc9f 	bl	8046cde <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 80473a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80473a2:	3301      	adds	r3, #1
 80473a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80473a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80473a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80473aa:	429a      	cmp	r2, r3
 80473ac:	f6ff af7f 	blt.w	80472ae <CMD_Help+0x102>
 80473b0:	46b5      	mov	sp, r6
 80473b2:	e0b8      	b.n	8047526 <CMD_Help+0x37a>
        }
    } else if (tokenCount == 1) {
 80473b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80473b6:	2b01      	cmp	r3, #1
 80473b8:	f040 80ab 	bne.w	8047512 <CMD_Help+0x366>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80473bc:	2101      	movs	r1, #1
 80473be:	68b8      	ldr	r0, [r7, #8]
 80473c0:	f7fe ff40 	bl	8046244 <embeddedCliGetToken>
 80473c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 80473c6:	2300      	movs	r3, #0
 80473c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80473cc:	2300      	movs	r3, #0
 80473ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80473d0:	e08c      	b.n	80474ec <CMD_Help+0x340>
 80473d2:	bf00      	nop
 80473d4:	0806d128 	.word	0x0806d128
 80473d8:	240148bc 	.word	0x240148bc
 80473dc:	0806d140 	.word	0x0806d140
 80473e0:	0806d144 	.word	0x0806d144
 80473e4:	0806d148 	.word	0x0806d148
 80473e8:	0806d150 	.word	0x0806d150
 80473ec:	0806d154 	.word	0x0806d154
            if (impl->bindings[i].category == NULL) continue;
 80473f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80473f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80473f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80473f6:	4613      	mov	r3, r2
 80473f8:	005b      	lsls	r3, r3, #1
 80473fa:	4413      	add	r3, r2
 80473fc:	00db      	lsls	r3, r3, #3
 80473fe:	440b      	add	r3, r1
 8047400:	681b      	ldr	r3, [r3, #0]
 8047402:	2b00      	cmp	r3, #0
 8047404:	d06e      	beq.n	80474e4 <CMD_Help+0x338>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8047406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8047408:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804740a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804740c:	4613      	mov	r3, r2
 804740e:	005b      	lsls	r3, r3, #1
 8047410:	4413      	add	r3, r2
 8047412:	00db      	lsls	r3, r3, #3
 8047414:	440b      	add	r3, r1
 8047416:	685b      	ldr	r3, [r3, #4]
 8047418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804741a:	4618      	mov	r0, r3
 804741c:	f7f8 ff60 	bl	80402e0 <strcmp>
 8047420:	4603      	mov	r3, r0
 8047422:	2b00      	cmp	r3, #0
 8047424:	d15f      	bne.n	80474e6 <CMD_Help+0x33a>
                found = true;
 8047426:	2301      	movs	r3, #1
 8047428:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 804742c:	4940      	ldr	r1, [pc, #256]	@ (8047530 <CMD_Help+0x384>)
 804742e:	68f8      	ldr	r0, [r7, #12]
 8047430:	f7ff fc55 	bl	8046cde <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8047434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8047436:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804743a:	4613      	mov	r3, r2
 804743c:	005b      	lsls	r3, r3, #1
 804743e:	4413      	add	r3, r2
 8047440:	00db      	lsls	r3, r3, #3
 8047442:	440b      	add	r3, r1
 8047444:	685b      	ldr	r3, [r3, #4]
 8047446:	4619      	mov	r1, r3
 8047448:	68f8      	ldr	r0, [r7, #12]
 804744a:	f7ff fc48 	bl	8046cde <writeToOutput>
                writeToOutput(cli, lineBreak);
 804744e:	4b39      	ldr	r3, [pc, #228]	@ (8047534 <CMD_Help+0x388>)
 8047450:	681b      	ldr	r3, [r3, #0]
 8047452:	4619      	mov	r1, r3
 8047454:	68f8      	ldr	r0, [r7, #12]
 8047456:	f7ff fc42 	bl	8046cde <writeToOutput>

                writeToOutput(cli, "Category: ");
 804745a:	4937      	ldr	r1, [pc, #220]	@ (8047538 <CMD_Help+0x38c>)
 804745c:	68f8      	ldr	r0, [r7, #12]
 804745e:	f7ff fc3e 	bl	8046cde <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category);
 8047462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8047464:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047466:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8047468:	4613      	mov	r3, r2
 804746a:	005b      	lsls	r3, r3, #1
 804746c:	4413      	add	r3, r2
 804746e:	00db      	lsls	r3, r3, #3
 8047470:	440b      	add	r3, r1
 8047472:	681b      	ldr	r3, [r3, #0]
 8047474:	4619      	mov	r1, r3
 8047476:	68f8      	ldr	r0, [r7, #12]
 8047478:	f7ff fc31 	bl	8046cde <writeToOutput>
                writeToOutput(cli, lineBreak);
 804747c:	4b2d      	ldr	r3, [pc, #180]	@ (8047534 <CMD_Help+0x388>)
 804747e:	681b      	ldr	r3, [r3, #0]
 8047480:	4619      	mov	r1, r3
 8047482:	68f8      	ldr	r0, [r7, #12]
 8047484:	f7ff fc2b 	bl	8046cde <writeToOutput>

                if (impl->bindings[i].help) {
 8047488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804748a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804748c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804748e:	4613      	mov	r3, r2
 8047490:	005b      	lsls	r3, r3, #1
 8047492:	4413      	add	r3, r2
 8047494:	00db      	lsls	r3, r3, #3
 8047496:	440b      	add	r3, r1
 8047498:	689b      	ldr	r3, [r3, #8]
 804749a:	2b00      	cmp	r3, #0
 804749c:	d017      	beq.n	80474ce <CMD_Help+0x322>
                    writeToOutput(cli, "Help: ");
 804749e:	4927      	ldr	r1, [pc, #156]	@ (804753c <CMD_Help+0x390>)
 80474a0:	68f8      	ldr	r0, [r7, #12]
 80474a2:	f7ff fc1c 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 80474a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80474a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80474aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80474ac:	4613      	mov	r3, r2
 80474ae:	005b      	lsls	r3, r3, #1
 80474b0:	4413      	add	r3, r2
 80474b2:	00db      	lsls	r3, r3, #3
 80474b4:	440b      	add	r3, r1
 80474b6:	689b      	ldr	r3, [r3, #8]
 80474b8:	4619      	mov	r1, r3
 80474ba:	68f8      	ldr	r0, [r7, #12]
 80474bc:	f7ff fc0f 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80474c0:	4b1c      	ldr	r3, [pc, #112]	@ (8047534 <CMD_Help+0x388>)
 80474c2:	681b      	ldr	r3, [r3, #0]
 80474c4:	4619      	mov	r1, r3
 80474c6:	68f8      	ldr	r0, [r7, #12]
 80474c8:	f7ff fc09 	bl	8046cde <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 80474cc:	e015      	b.n	80474fa <CMD_Help+0x34e>
                    writeToOutput(cli, "(no help)");
 80474ce:	491c      	ldr	r1, [pc, #112]	@ (8047540 <CMD_Help+0x394>)
 80474d0:	68f8      	ldr	r0, [r7, #12]
 80474d2:	f7ff fc04 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80474d6:	4b17      	ldr	r3, [pc, #92]	@ (8047534 <CMD_Help+0x388>)
 80474d8:	681b      	ldr	r3, [r3, #0]
 80474da:	4619      	mov	r1, r3
 80474dc:	68f8      	ldr	r0, [r7, #12]
 80474de:	f7ff fbfe 	bl	8046cde <writeToOutput>
                break;
 80474e2:	e00a      	b.n	80474fa <CMD_Help+0x34e>
            if (impl->bindings[i].category == NULL) continue;
 80474e4:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80474e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80474e8:	3301      	adds	r3, #1
 80474ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80474ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80474ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80474f0:	461a      	mov	r2, r3
 80474f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80474f4:	4293      	cmp	r3, r2
 80474f6:	f6ff af7b 	blt.w	80473f0 <CMD_Help+0x244>
            }
        }
        if (!found) {
 80474fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80474fe:	f083 0301 	eor.w	r3, r3, #1
 8047502:	b2db      	uxtb	r3, r3
 8047504:	2b00      	cmp	r3, #0
 8047506:	d00e      	beq.n	8047526 <CMD_Help+0x37a>
            onUnknownCommand(cli, cmdName);
 8047508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804750a:	68f8      	ldr	r0, [r7, #12]
 804750c:	f000 fa1a 	bl	8047944 <onUnknownCommand>
 8047510:	e009      	b.n	8047526 <CMD_Help+0x37a>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8047512:	490c      	ldr	r1, [pc, #48]	@ (8047544 <CMD_Help+0x398>)
 8047514:	68f8      	ldr	r0, [r7, #12]
 8047516:	f7ff fbe2 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 804751a:	4b06      	ldr	r3, [pc, #24]	@ (8047534 <CMD_Help+0x388>)
 804751c:	681b      	ldr	r3, [r3, #0]
 804751e:	4619      	mov	r1, r3
 8047520:	68f8      	ldr	r0, [r7, #12]
 8047522:	f7ff fbdc 	bl	8046cde <writeToOutput>
    }
}
 8047526:	3754      	adds	r7, #84	@ 0x54
 8047528:	46bd      	mov	sp, r7
 804752a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804752e:	bf00      	nop
 8047530:	0806d160 	.word	0x0806d160
 8047534:	240148bc 	.word	0x240148bc
 8047538:	0806d16c 	.word	0x0806d16c
 804753c:	0806d178 	.word	0x0806d178
 8047540:	0806d154 	.word	0x0806d154
 8047544:	0806d180 	.word	0x0806d180

08047548 <CMD_Dev>:

void CMD_Dev(EmbeddedCli *cli, char *tokens, void *context) {
 8047548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804754c:	b097      	sub	sp, #92	@ 0x5c
 804754e:	af00      	add	r7, sp, #0
 8047550:	60f8      	str	r0, [r7, #12]
 8047552:	60b9      	str	r1, [r7, #8]
 8047554:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8047556:	68fb      	ldr	r3, [r7, #12]
 8047558:	68db      	ldr	r3, [r3, #12]
 804755a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (impl->bindingsCount == 0) {
 804755c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804755e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8047560:	2b00      	cmp	r3, #0
 8047562:	d10a      	bne.n	804757a <CMD_Dev+0x32>
        writeToOutput(cli, "No development commands available");
 8047564:	4993      	ldr	r1, [pc, #588]	@ (80477b4 <CMD_Dev+0x26c>)
 8047566:	68f8      	ldr	r0, [r7, #12]
 8047568:	f7ff fbb9 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 804756c:	4b92      	ldr	r3, [pc, #584]	@ (80477b8 <CMD_Dev+0x270>)
 804756e:	681b      	ldr	r3, [r3, #0]
 8047570:	4619      	mov	r1, r3
 8047572:	68f8      	ldr	r0, [r7, #12]
 8047574:	f7ff fbb3 	bl	8046cde <writeToOutput>
        return;
 8047578:	e1cf      	b.n	804791a <CMD_Dev+0x3d2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 804757a:	68b8      	ldr	r0, [r7, #8]
 804757c:	f7fe fe98 	bl	80462b0 <embeddedCliGetTokenCount>
 8047580:	4603      	mov	r3, r0
 8047582:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (tokenCount == 0) {
 8047584:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8047586:	2b00      	cmp	r3, #0
 8047588:	f040 8105 	bne.w	8047796 <CMD_Dev+0x24e>
 804758c:	466b      	mov	r3, sp
 804758e:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8047590:	2320      	movs	r3, #32
 8047592:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const char* categories[MAX_CAT];
 8047594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8047596:	3b01      	subs	r3, #1
 8047598:	62bb      	str	r3, [r7, #40]	@ 0x28
 804759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804759c:	2200      	movs	r2, #0
 804759e:	4698      	mov	r8, r3
 80475a0:	4691      	mov	r9, r2
 80475a2:	f04f 0200 	mov.w	r2, #0
 80475a6:	f04f 0300 	mov.w	r3, #0
 80475aa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80475ae:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80475b2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80475b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80475b8:	2200      	movs	r2, #0
 80475ba:	461c      	mov	r4, r3
 80475bc:	4615      	mov	r5, r2
 80475be:	f04f 0200 	mov.w	r2, #0
 80475c2:	f04f 0300 	mov.w	r3, #0
 80475c6:	016b      	lsls	r3, r5, #5
 80475c8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80475cc:	0162      	lsls	r2, r4, #5
 80475ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80475d0:	009b      	lsls	r3, r3, #2
 80475d2:	3307      	adds	r3, #7
 80475d4:	08db      	lsrs	r3, r3, #3
 80475d6:	00db      	lsls	r3, r3, #3
 80475d8:	ebad 0d03 	sub.w	sp, sp, r3
 80475dc:	466b      	mov	r3, sp
 80475de:	3303      	adds	r3, #3
 80475e0:	089b      	lsrs	r3, r3, #2
 80475e2:	009b      	lsls	r3, r3, #2
 80475e4:	627b      	str	r3, [r7, #36]	@ 0x24
        int catCount = 0;
 80475e6:	2300      	movs	r3, #0
 80475e8:	657b      	str	r3, [r7, #84]	@ 0x54

        for (int i = 0; i < impl->bindingsCount; i++) {
 80475ea:	2300      	movs	r3, #0
 80475ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80475ee:	e033      	b.n	8047658 <CMD_Dev+0x110>
            const char* cat = impl->bindings[i].category;
 80475f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80475f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80475f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80475f6:	4613      	mov	r3, r2
 80475f8:	005b      	lsls	r3, r3, #1
 80475fa:	4413      	add	r3, r2
 80475fc:	00db      	lsls	r3, r3, #3
 80475fe:	440b      	add	r3, r1
 8047600:	681b      	ldr	r3, [r3, #0]
 8047602:	61bb      	str	r3, [r7, #24]
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8047604:	69bb      	ldr	r3, [r7, #24]
 8047606:	2b00      	cmp	r3, #0
 8047608:	d006      	beq.n	8047618 <CMD_Dev+0xd0>
 804760a:	496c      	ldr	r1, [pc, #432]	@ (80477bc <CMD_Dev+0x274>)
 804760c:	69b8      	ldr	r0, [r7, #24]
 804760e:	f7f8 fe67 	bl	80402e0 <strcmp>
 8047612:	4603      	mov	r3, r0
 8047614:	2b00      	cmp	r3, #0
 8047616:	d11b      	bne.n	8047650 <CMD_Dev+0x108>
            const char* display_cat = (cat == NULL) ? "Deployment" : cat;
 8047618:	69bb      	ldr	r3, [r7, #24]
 804761a:	2b00      	cmp	r3, #0
 804761c:	d001      	beq.n	8047622 <CMD_Dev+0xda>
 804761e:	69bb      	ldr	r3, [r7, #24]
 8047620:	e000      	b.n	8047624 <CMD_Dev+0xdc>
 8047622:	4b67      	ldr	r3, [pc, #412]	@ (80477c0 <CMD_Dev+0x278>)
 8047624:	617b      	str	r3, [r7, #20]
            int idx = findCategoryIndex(display_cat, categories, catCount);
 8047626:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8047628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804762a:	6978      	ldr	r0, [r7, #20]
 804762c:	f7ff fd73 	bl	8047116 <findCategoryIndex>
 8047630:	6138      	str	r0, [r7, #16]
            if (idx < 0 && catCount < MAX_CAT) {
 8047632:	693b      	ldr	r3, [r7, #16]
 8047634:	2b00      	cmp	r3, #0
 8047636:	da0c      	bge.n	8047652 <CMD_Dev+0x10a>
 8047638:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 804763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804763c:	429a      	cmp	r2, r3
 804763e:	da08      	bge.n	8047652 <CMD_Dev+0x10a>
                categories[catCount++] = display_cat;
 8047640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8047642:	1c5a      	adds	r2, r3, #1
 8047644:	657a      	str	r2, [r7, #84]	@ 0x54
 8047646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8047648:	6979      	ldr	r1, [r7, #20]
 804764a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 804764e:	e000      	b.n	8047652 <CMD_Dev+0x10a>
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8047650:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; i++) {
 8047652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8047654:	3301      	adds	r3, #1
 8047656:	653b      	str	r3, [r7, #80]	@ 0x50
 8047658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804765a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 804765c:	461a      	mov	r2, r3
 804765e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8047660:	4293      	cmp	r3, r2
 8047662:	dbc5      	blt.n	80475f0 <CMD_Dev+0xa8>
            }
        }

        if (catCount == 0) {
 8047664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8047666:	2b00      	cmp	r3, #0
 8047668:	d10b      	bne.n	8047682 <CMD_Dev+0x13a>
            writeToOutput(cli, "No development commands available");
 804766a:	4952      	ldr	r1, [pc, #328]	@ (80477b4 <CMD_Dev+0x26c>)
 804766c:	68f8      	ldr	r0, [r7, #12]
 804766e:	f7ff fb36 	bl	8046cde <writeToOutput>
            writeToOutput(cli, lineBreak);
 8047672:	4b51      	ldr	r3, [pc, #324]	@ (80477b8 <CMD_Dev+0x270>)
 8047674:	681b      	ldr	r3, [r3, #0]
 8047676:	4619      	mov	r1, r3
 8047678:	68f8      	ldr	r0, [r7, #12]
 804767a:	f7ff fb30 	bl	8046cde <writeToOutput>
            return;
 804767e:	46b5      	mov	sp, r6
 8047680:	e14b      	b.n	804791a <CMD_Dev+0x3d2>
        }

        for (int c = 0; c < catCount; c++) {
 8047682:	2300      	movs	r3, #0
 8047684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8047686:	e07f      	b.n	8047788 <CMD_Dev+0x240>
            writeToOutput(cli, "[");
 8047688:	494e      	ldr	r1, [pc, #312]	@ (80477c4 <CMD_Dev+0x27c>)
 804768a:	68f8      	ldr	r0, [r7, #12]
 804768c:	f7ff fb27 	bl	8046cde <writeToOutput>
            writeToOutput(cli, categories[c]);
 8047690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047692:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8047694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047698:	4619      	mov	r1, r3
 804769a:	68f8      	ldr	r0, [r7, #12]
 804769c:	f7ff fb1f 	bl	8046cde <writeToOutput>
            writeToOutput(cli, "]");
 80476a0:	4949      	ldr	r1, [pc, #292]	@ (80477c8 <CMD_Dev+0x280>)
 80476a2:	68f8      	ldr	r0, [r7, #12]
 80476a4:	f7ff fb1b 	bl	8046cde <writeToOutput>
            writeToOutput(cli, lineBreak);
 80476a8:	4b43      	ldr	r3, [pc, #268]	@ (80477b8 <CMD_Dev+0x270>)
 80476aa:	681b      	ldr	r3, [r3, #0]
 80476ac:	4619      	mov	r1, r3
 80476ae:	68f8      	ldr	r0, [r7, #12]
 80476b0:	f7ff fb15 	bl	8046cde <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 80476b4:	2300      	movs	r3, #0
 80476b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80476b8:	e057      	b.n	804776a <CMD_Dev+0x222>
                const char* cmdCat = impl->bindings[i].category;
 80476ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80476bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80476be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80476c0:	4613      	mov	r3, r2
 80476c2:	005b      	lsls	r3, r3, #1
 80476c4:	4413      	add	r3, r2
 80476c6:	00db      	lsls	r3, r3, #3
 80476c8:	440b      	add	r3, r1
 80476ca:	681b      	ldr	r3, [r3, #0]
 80476cc:	623b      	str	r3, [r7, #32]
                const char* display_cmdCat = (cmdCat == NULL) ? "Deployment" : cmdCat;
 80476ce:	6a3b      	ldr	r3, [r7, #32]
 80476d0:	2b00      	cmp	r3, #0
 80476d2:	d001      	beq.n	80476d8 <CMD_Dev+0x190>
 80476d4:	6a3b      	ldr	r3, [r7, #32]
 80476d6:	e000      	b.n	80476da <CMD_Dev+0x192>
 80476d8:	4b39      	ldr	r3, [pc, #228]	@ (80477c0 <CMD_Dev+0x278>)
 80476da:	61fb      	str	r3, [r7, #28]
                if (strcmp(display_cmdCat, categories[c]) == 0) {
 80476dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80476de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80476e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80476e4:	4619      	mov	r1, r3
 80476e6:	69f8      	ldr	r0, [r7, #28]
 80476e8:	f7f8 fdfa 	bl	80402e0 <strcmp>
 80476ec:	4603      	mov	r3, r0
 80476ee:	2b00      	cmp	r3, #0
 80476f0:	d138      	bne.n	8047764 <CMD_Dev+0x21c>
                    writeToOutput(cli, "    ");
 80476f2:	4936      	ldr	r1, [pc, #216]	@ (80477cc <CMD_Dev+0x284>)
 80476f4:	68f8      	ldr	r0, [r7, #12]
 80476f6:	f7ff faf2 	bl	8046cde <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 80476fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80476fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80476fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8047700:	4613      	mov	r3, r2
 8047702:	005b      	lsls	r3, r3, #1
 8047704:	4413      	add	r3, r2
 8047706:	00db      	lsls	r3, r3, #3
 8047708:	440b      	add	r3, r1
 804770a:	685b      	ldr	r3, [r3, #4]
 804770c:	2210      	movs	r2, #16
 804770e:	4619      	mov	r1, r3
 8047710:	68f8      	ldr	r0, [r7, #12]
 8047712:	f7ff fd25 	bl	8047160 <printAlignedColumn>
                    writeToOutput(cli, "| ");
 8047716:	492e      	ldr	r1, [pc, #184]	@ (80477d0 <CMD_Dev+0x288>)
 8047718:	68f8      	ldr	r0, [r7, #12]
 804771a:	f7ff fae0 	bl	8046cde <writeToOutput>
                    if (impl->bindings[i].help) {
 804771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8047720:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8047724:	4613      	mov	r3, r2
 8047726:	005b      	lsls	r3, r3, #1
 8047728:	4413      	add	r3, r2
 804772a:	00db      	lsls	r3, r3, #3
 804772c:	440b      	add	r3, r1
 804772e:	689b      	ldr	r3, [r3, #8]
 8047730:	2b00      	cmp	r3, #0
 8047732:	d00d      	beq.n	8047750 <CMD_Dev+0x208>
                        writeToOutput(cli, impl->bindings[i].help);
 8047734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8047736:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 804773a:	4613      	mov	r3, r2
 804773c:	005b      	lsls	r3, r3, #1
 804773e:	4413      	add	r3, r2
 8047740:	00db      	lsls	r3, r3, #3
 8047742:	440b      	add	r3, r1
 8047744:	689b      	ldr	r3, [r3, #8]
 8047746:	4619      	mov	r1, r3
 8047748:	68f8      	ldr	r0, [r7, #12]
 804774a:	f7ff fac8 	bl	8046cde <writeToOutput>
 804774e:	e003      	b.n	8047758 <CMD_Dev+0x210>
                    } else {
                        writeToOutput(cli, "(no help)");
 8047750:	4920      	ldr	r1, [pc, #128]	@ (80477d4 <CMD_Dev+0x28c>)
 8047752:	68f8      	ldr	r0, [r7, #12]
 8047754:	f7ff fac3 	bl	8046cde <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8047758:	4b17      	ldr	r3, [pc, #92]	@ (80477b8 <CMD_Dev+0x270>)
 804775a:	681b      	ldr	r3, [r3, #0]
 804775c:	4619      	mov	r1, r3
 804775e:	68f8      	ldr	r0, [r7, #12]
 8047760:	f7ff fabd 	bl	8046cde <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8047764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8047766:	3301      	adds	r3, #1
 8047768:	64bb      	str	r3, [r7, #72]	@ 0x48
 804776a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804776c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 804776e:	461a      	mov	r2, r3
 8047770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8047772:	4293      	cmp	r3, r2
 8047774:	dba1      	blt.n	80476ba <CMD_Dev+0x172>
                }
            }
            writeToOutput(cli, lineBreak);
 8047776:	4b10      	ldr	r3, [pc, #64]	@ (80477b8 <CMD_Dev+0x270>)
 8047778:	681b      	ldr	r3, [r3, #0]
 804777a:	4619      	mov	r1, r3
 804777c:	68f8      	ldr	r0, [r7, #12]
 804777e:	f7ff faae 	bl	8046cde <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8047782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8047784:	3301      	adds	r3, #1
 8047786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8047788:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 804778a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 804778c:	429a      	cmp	r2, r3
 804778e:	f6ff af7b 	blt.w	8047688 <CMD_Dev+0x140>
 8047792:	46b5      	mov	sp, r6
 8047794:	e0c1      	b.n	804791a <CMD_Dev+0x3d2>
        }
    } else if (tokenCount == 1) {
 8047796:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8047798:	2b01      	cmp	r3, #1
 804779a:	f040 80b4 	bne.w	8047906 <CMD_Dev+0x3be>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 804779e:	2101      	movs	r1, #1
 80477a0:	68b8      	ldr	r0, [r7, #8]
 80477a2:	f7fe fd4f 	bl	8046244 <embeddedCliGetToken>
 80477a6:	6378      	str	r0, [r7, #52]	@ 0x34
        bool found = false;
 80477a8:	2300      	movs	r3, #0
 80477aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80477ae:	2300      	movs	r3, #0
 80477b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80477b2:	e095      	b.n	80478e0 <CMD_Dev+0x398>
 80477b4:	0806d1b0 	.word	0x0806d1b0
 80477b8:	240148bc 	.word	0x240148bc
 80477bc:	0806d1d4 	.word	0x0806d1d4
 80477c0:	0806d1d8 	.word	0x0806d1d8
 80477c4:	0806d140 	.word	0x0806d140
 80477c8:	0806d144 	.word	0x0806d144
 80477cc:	0806d148 	.word	0x0806d148
 80477d0:	0806d150 	.word	0x0806d150
 80477d4:	0806d154 	.word	0x0806d154
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80477d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80477da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80477dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80477de:	4613      	mov	r3, r2
 80477e0:	005b      	lsls	r3, r3, #1
 80477e2:	4413      	add	r3, r2
 80477e4:	00db      	lsls	r3, r3, #3
 80477e6:	440b      	add	r3, r1
 80477e8:	685b      	ldr	r3, [r3, #4]
 80477ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80477ec:	4618      	mov	r0, r3
 80477ee:	f7f8 fd77 	bl	80402e0 <strcmp>
 80477f2:	4603      	mov	r3, r0
 80477f4:	2b00      	cmp	r3, #0
 80477f6:	d170      	bne.n	80478da <CMD_Dev+0x392>
                const char* cat = impl->bindings[i].category;
 80477f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80477fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80477fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80477fe:	4613      	mov	r3, r2
 8047800:	005b      	lsls	r3, r3, #1
 8047802:	4413      	add	r3, r2
 8047804:	00db      	lsls	r3, r3, #3
 8047806:	440b      	add	r3, r1
 8047808:	681b      	ldr	r3, [r3, #0]
 804780a:	633b      	str	r3, [r7, #48]	@ 0x30
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 804780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804780e:	2b00      	cmp	r3, #0
 8047810:	d006      	beq.n	8047820 <CMD_Dev+0x2d8>
 8047812:	4944      	ldr	r1, [pc, #272]	@ (8047924 <CMD_Dev+0x3dc>)
 8047814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8047816:	f7f8 fd63 	bl	80402e0 <strcmp>
 804781a:	4603      	mov	r3, r0
 804781c:	2b00      	cmp	r3, #0
 804781e:	d15b      	bne.n	80478d8 <CMD_Dev+0x390>
                found = true;
 8047820:	2301      	movs	r3, #1
 8047822:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                writeToOutput(cli, "Command: ");
 8047826:	4940      	ldr	r1, [pc, #256]	@ (8047928 <CMD_Dev+0x3e0>)
 8047828:	68f8      	ldr	r0, [r7, #12]
 804782a:	f7ff fa58 	bl	8046cde <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 804782e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8047830:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8047834:	4613      	mov	r3, r2
 8047836:	005b      	lsls	r3, r3, #1
 8047838:	4413      	add	r3, r2
 804783a:	00db      	lsls	r3, r3, #3
 804783c:	440b      	add	r3, r1
 804783e:	685b      	ldr	r3, [r3, #4]
 8047840:	4619      	mov	r1, r3
 8047842:	68f8      	ldr	r0, [r7, #12]
 8047844:	f7ff fa4b 	bl	8046cde <writeToOutput>
                writeToOutput(cli, lineBreak);
 8047848:	4b38      	ldr	r3, [pc, #224]	@ (804792c <CMD_Dev+0x3e4>)
 804784a:	681b      	ldr	r3, [r3, #0]
 804784c:	4619      	mov	r1, r3
 804784e:	68f8      	ldr	r0, [r7, #12]
 8047850:	f7ff fa45 	bl	8046cde <writeToOutput>

                writeToOutput(cli, "Category: ");
 8047854:	4936      	ldr	r1, [pc, #216]	@ (8047930 <CMD_Dev+0x3e8>)
 8047856:	68f8      	ldr	r0, [r7, #12]
 8047858:	f7ff fa41 	bl	8046cde <writeToOutput>
                writeToOutput(cli, cat ? cat : "Deployment");
 804785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804785e:	2b00      	cmp	r3, #0
 8047860:	d001      	beq.n	8047866 <CMD_Dev+0x31e>
 8047862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8047864:	e000      	b.n	8047868 <CMD_Dev+0x320>
 8047866:	4b33      	ldr	r3, [pc, #204]	@ (8047934 <CMD_Dev+0x3ec>)
 8047868:	4619      	mov	r1, r3
 804786a:	68f8      	ldr	r0, [r7, #12]
 804786c:	f7ff fa37 	bl	8046cde <writeToOutput>
                writeToOutput(cli, lineBreak);
 8047870:	4b2e      	ldr	r3, [pc, #184]	@ (804792c <CMD_Dev+0x3e4>)
 8047872:	681b      	ldr	r3, [r3, #0]
 8047874:	4619      	mov	r1, r3
 8047876:	68f8      	ldr	r0, [r7, #12]
 8047878:	f7ff fa31 	bl	8046cde <writeToOutput>

                if (impl->bindings[i].help) {
 804787c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804787e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8047880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8047882:	4613      	mov	r3, r2
 8047884:	005b      	lsls	r3, r3, #1
 8047886:	4413      	add	r3, r2
 8047888:	00db      	lsls	r3, r3, #3
 804788a:	440b      	add	r3, r1
 804788c:	689b      	ldr	r3, [r3, #8]
 804788e:	2b00      	cmp	r3, #0
 8047890:	d017      	beq.n	80478c2 <CMD_Dev+0x37a>
                    writeToOutput(cli, "Help: ");
 8047892:	4929      	ldr	r1, [pc, #164]	@ (8047938 <CMD_Dev+0x3f0>)
 8047894:	68f8      	ldr	r0, [r7, #12]
 8047896:	f7ff fa22 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 804789a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804789c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 804789e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80478a0:	4613      	mov	r3, r2
 80478a2:	005b      	lsls	r3, r3, #1
 80478a4:	4413      	add	r3, r2
 80478a6:	00db      	lsls	r3, r3, #3
 80478a8:	440b      	add	r3, r1
 80478aa:	689b      	ldr	r3, [r3, #8]
 80478ac:	4619      	mov	r1, r3
 80478ae:	68f8      	ldr	r0, [r7, #12]
 80478b0:	f7ff fa15 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80478b4:	4b1d      	ldr	r3, [pc, #116]	@ (804792c <CMD_Dev+0x3e4>)
 80478b6:	681b      	ldr	r3, [r3, #0]
 80478b8:	4619      	mov	r1, r3
 80478ba:	68f8      	ldr	r0, [r7, #12]
 80478bc:	f7ff fa0f 	bl	8046cde <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 80478c0:	e015      	b.n	80478ee <CMD_Dev+0x3a6>
                    writeToOutput(cli, "(no help)");
 80478c2:	491e      	ldr	r1, [pc, #120]	@ (804793c <CMD_Dev+0x3f4>)
 80478c4:	68f8      	ldr	r0, [r7, #12]
 80478c6:	f7ff fa0a 	bl	8046cde <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80478ca:	4b18      	ldr	r3, [pc, #96]	@ (804792c <CMD_Dev+0x3e4>)
 80478cc:	681b      	ldr	r3, [r3, #0]
 80478ce:	4619      	mov	r1, r3
 80478d0:	68f8      	ldr	r0, [r7, #12]
 80478d2:	f7ff fa04 	bl	8046cde <writeToOutput>
                break;
 80478d6:	e00a      	b.n	80478ee <CMD_Dev+0x3a6>
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 80478d8:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80478da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80478dc:	3301      	adds	r3, #1
 80478de:	643b      	str	r3, [r7, #64]	@ 0x40
 80478e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80478e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80478e4:	461a      	mov	r2, r3
 80478e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80478e8:	4293      	cmp	r3, r2
 80478ea:	f6ff af75 	blt.w	80477d8 <CMD_Dev+0x290>
            }
        }
        if (!found) {
 80478ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80478f2:	f083 0301 	eor.w	r3, r3, #1
 80478f6:	b2db      	uxtb	r3, r3
 80478f8:	2b00      	cmp	r3, #0
 80478fa:	d00e      	beq.n	804791a <CMD_Dev+0x3d2>
            onUnknownCommand(cli, cmdName);
 80478fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80478fe:	68f8      	ldr	r0, [r7, #12]
 8047900:	f000 f820 	bl	8047944 <onUnknownCommand>
 8047904:	e009      	b.n	804791a <CMD_Dev+0x3d2>
        }
    } else {
        writeToOutput(cli, "Command \"dev\" receives one or zero arguments");
 8047906:	490e      	ldr	r1, [pc, #56]	@ (8047940 <CMD_Dev+0x3f8>)
 8047908:	68f8      	ldr	r0, [r7, #12]
 804790a:	f7ff f9e8 	bl	8046cde <writeToOutput>
        writeToOutput(cli, lineBreak);
 804790e:	4b07      	ldr	r3, [pc, #28]	@ (804792c <CMD_Dev+0x3e4>)
 8047910:	681b      	ldr	r3, [r3, #0]
 8047912:	4619      	mov	r1, r3
 8047914:	68f8      	ldr	r0, [r7, #12]
 8047916:	f7ff f9e2 	bl	8046cde <writeToOutput>
    }
}
 804791a:	375c      	adds	r7, #92	@ 0x5c
 804791c:	46bd      	mov	sp, r7
 804791e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8047922:	bf00      	nop
 8047924:	0806d1d4 	.word	0x0806d1d4
 8047928:	0806d160 	.word	0x0806d160
 804792c:	240148bc 	.word	0x240148bc
 8047930:	0806d16c 	.word	0x0806d16c
 8047934:	0806d1d8 	.word	0x0806d1d8
 8047938:	0806d178 	.word	0x0806d178
 804793c:	0806d154 	.word	0x0806d154
 8047940:	0806d1e4 	.word	0x0806d1e4

08047944 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8047944:	b580      	push	{r7, lr}
 8047946:	b082      	sub	sp, #8
 8047948:	af00      	add	r7, sp, #0
 804794a:	6078      	str	r0, [r7, #4]
 804794c:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 804794e:	490b      	ldr	r1, [pc, #44]	@ (804797c <onUnknownCommand+0x38>)
 8047950:	6878      	ldr	r0, [r7, #4]
 8047952:	f7ff f9c4 	bl	8046cde <writeToOutput>
    writeToOutput(cli, name);
 8047956:	6839      	ldr	r1, [r7, #0]
 8047958:	6878      	ldr	r0, [r7, #4]
 804795a:	f7ff f9c0 	bl	8046cde <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 804795e:	4908      	ldr	r1, [pc, #32]	@ (8047980 <onUnknownCommand+0x3c>)
 8047960:	6878      	ldr	r0, [r7, #4]
 8047962:	f7ff f9bc 	bl	8046cde <writeToOutput>
    writeToOutput(cli, lineBreak);
 8047966:	4b07      	ldr	r3, [pc, #28]	@ (8047984 <onUnknownCommand+0x40>)
 8047968:	681b      	ldr	r3, [r3, #0]
 804796a:	4619      	mov	r1, r3
 804796c:	6878      	ldr	r0, [r7, #4]
 804796e:	f7ff f9b6 	bl	8046cde <writeToOutput>
}
 8047972:	bf00      	nop
 8047974:	3708      	adds	r7, #8
 8047976:	46bd      	mov	sp, r7
 8047978:	bd80      	pop	{r7, pc}
 804797a:	bf00      	nop
 804797c:	0806d214 	.word	0x0806d214
 8047980:	0806d228 	.word	0x0806d228
 8047984:	240148bc 	.word	0x240148bc

08047988 <Dmesg_Init>:
static uint8_t *write_ptr = &_sdmesg_buffer;
static uint8_t *read_ptr = &_sdmesg_buffer;
static size_t log_count = 0;
static SemaphoreHandle_t dmesg_mutex = NULL;

void Dmesg_Init(void) {
 8047988:	b580      	push	{r7, lr}
 804798a:	af00      	add	r7, sp, #0
    write_ptr = &_sdmesg_buffer;
 804798c:	4b0b      	ldr	r3, [pc, #44]	@ (80479bc <Dmesg_Init+0x34>)
 804798e:	4a0c      	ldr	r2, [pc, #48]	@ (80479c0 <Dmesg_Init+0x38>)
 8047990:	601a      	str	r2, [r3, #0]
    read_ptr = &_sdmesg_buffer;
 8047992:	4b0c      	ldr	r3, [pc, #48]	@ (80479c4 <Dmesg_Init+0x3c>)
 8047994:	4a0a      	ldr	r2, [pc, #40]	@ (80479c0 <Dmesg_Init+0x38>)
 8047996:	601a      	str	r2, [r3, #0]
    log_count = 0;
 8047998:	4b0b      	ldr	r3, [pc, #44]	@ (80479c8 <Dmesg_Init+0x40>)
 804799a:	2200      	movs	r2, #0
 804799c:	601a      	str	r2, [r3, #0]
    dmesg_mutex = xSemaphoreCreateMutex();
 804799e:	2001      	movs	r0, #1
 80479a0:	f00d fc5d 	bl	805525e <xQueueCreateMutex>
 80479a4:	4603      	mov	r3, r0
 80479a6:	4a09      	ldr	r2, [pc, #36]	@ (80479cc <Dmesg_Init+0x44>)
 80479a8:	6013      	str	r3, [r2, #0]
    if (dmesg_mutex == NULL) {
 80479aa:	4b08      	ldr	r3, [pc, #32]	@ (80479cc <Dmesg_Init+0x44>)
 80479ac:	681b      	ldr	r3, [r3, #0]
 80479ae:	2b00      	cmp	r3, #0
 80479b0:	d101      	bne.n	80479b6 <Dmesg_Init+0x2e>
        while (1);
 80479b2:	bf00      	nop
 80479b4:	e7fd      	b.n	80479b2 <Dmesg_Init+0x2a>
    }
}
 80479b6:	bf00      	nop
 80479b8:	bd80      	pop	{r7, pc}
 80479ba:	bf00      	nop
 80479bc:	240148d8 	.word	0x240148d8
 80479c0:	20000000 	.word	0x20000000
 80479c4:	240148dc 	.word	0x240148dc
 80479c8:	2401e79c 	.word	0x2401e79c
 80479cc:	2401e7a0 	.word	0x2401e7a0

080479d0 <dmesg_write>:

static void dmesg_write(const char *msg, uint32_t len) {
 80479d0:	b480      	push	{r7}
 80479d2:	b087      	sub	sp, #28
 80479d4:	af00      	add	r7, sp, #0
 80479d6:	6078      	str	r0, [r7, #4]
 80479d8:	6039      	str	r1, [r7, #0]
    if (len > DMESG_MSG_MAX_LENGTH) len = DMESG_MSG_MAX_LENGTH;
 80479da:	683b      	ldr	r3, [r7, #0]
 80479dc:	2b80      	cmp	r3, #128	@ 0x80
 80479de:	d901      	bls.n	80479e4 <dmesg_write+0x14>
 80479e0:	2380      	movs	r3, #128	@ 0x80
 80479e2:	603b      	str	r3, [r7, #0]
    if (len > 255) len = 255;
 80479e4:	683b      	ldr	r3, [r7, #0]
 80479e6:	2bff      	cmp	r3, #255	@ 0xff
 80479e8:	d901      	bls.n	80479ee <dmesg_write+0x1e>
 80479ea:	23ff      	movs	r3, #255	@ 0xff
 80479ec:	603b      	str	r3, [r7, #0]

    uint32_t required_space = len + 1;
 80479ee:	683b      	ldr	r3, [r7, #0]
 80479f0:	3301      	adds	r3, #1
 80479f2:	60fb      	str	r3, [r7, #12]
    uint32_t space_left = (read_ptr <= write_ptr) ?
 80479f4:	4b42      	ldr	r3, [pc, #264]	@ (8047b00 <dmesg_write+0x130>)
 80479f6:	681a      	ldr	r2, [r3, #0]
 80479f8:	4b42      	ldr	r3, [pc, #264]	@ (8047b04 <dmesg_write+0x134>)
 80479fa:	681b      	ldr	r3, [r3, #0]
                          (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 80479fc:	429a      	cmp	r2, r3
 80479fe:	d807      	bhi.n	8047a10 <dmesg_write+0x40>
 8047a00:	4b40      	ldr	r3, [pc, #256]	@ (8047b04 <dmesg_write+0x134>)
 8047a02:	681a      	ldr	r2, [r3, #0]
 8047a04:	4b3e      	ldr	r3, [pc, #248]	@ (8047b00 <dmesg_write+0x130>)
 8047a06:	681b      	ldr	r3, [r3, #0]
 8047a08:	1ad3      	subs	r3, r2, r3
 8047a0a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8047a0e:	e004      	b.n	8047a1a <dmesg_write+0x4a>
                          (read_ptr - write_ptr);
 8047a10:	4b3b      	ldr	r3, [pc, #236]	@ (8047b00 <dmesg_write+0x130>)
 8047a12:	681a      	ldr	r2, [r3, #0]
 8047a14:	4b3b      	ldr	r3, [pc, #236]	@ (8047b04 <dmesg_write+0x134>)
 8047a16:	681b      	ldr	r3, [r3, #0]
 8047a18:	1ad3      	subs	r3, r2, r3
    uint32_t space_left = (read_ptr <= write_ptr) ?
 8047a1a:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8047a1c:	e031      	b.n	8047a82 <dmesg_write+0xb2>
        uint8_t old_len = *read_ptr;
 8047a1e:	4b38      	ldr	r3, [pc, #224]	@ (8047b00 <dmesg_write+0x130>)
 8047a20:	681b      	ldr	r3, [r3, #0]
 8047a22:	781b      	ldrb	r3, [r3, #0]
 8047a24:	72fb      	strb	r3, [r7, #11]
        read_ptr += old_len + 1;
 8047a26:	4b36      	ldr	r3, [pc, #216]	@ (8047b00 <dmesg_write+0x130>)
 8047a28:	681a      	ldr	r2, [r3, #0]
 8047a2a:	7afb      	ldrb	r3, [r7, #11]
 8047a2c:	3301      	adds	r3, #1
 8047a2e:	4413      	add	r3, r2
 8047a30:	4a33      	ldr	r2, [pc, #204]	@ (8047b00 <dmesg_write+0x130>)
 8047a32:	6013      	str	r3, [r2, #0]
        if (read_ptr >= &_edmesg_buffer) {
 8047a34:	4b32      	ldr	r3, [pc, #200]	@ (8047b00 <dmesg_write+0x130>)
 8047a36:	681b      	ldr	r3, [r3, #0]
 8047a38:	4a33      	ldr	r2, [pc, #204]	@ (8047b08 <dmesg_write+0x138>)
 8047a3a:	4293      	cmp	r3, r2
 8047a3c:	d308      	bcc.n	8047a50 <dmesg_write+0x80>
            read_ptr = &_sdmesg_buffer + (read_ptr - &_edmesg_buffer);
 8047a3e:	4b30      	ldr	r3, [pc, #192]	@ (8047b00 <dmesg_write+0x130>)
 8047a40:	681b      	ldr	r3, [r3, #0]
 8047a42:	4a31      	ldr	r2, [pc, #196]	@ (8047b08 <dmesg_write+0x138>)
 8047a44:	1a9b      	subs	r3, r3, r2
 8047a46:	461a      	mov	r2, r3
 8047a48:	4b30      	ldr	r3, [pc, #192]	@ (8047b0c <dmesg_write+0x13c>)
 8047a4a:	4413      	add	r3, r2
 8047a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8047b00 <dmesg_write+0x130>)
 8047a4e:	6013      	str	r3, [r2, #0]
        }
        log_count--;
 8047a50:	4b2f      	ldr	r3, [pc, #188]	@ (8047b10 <dmesg_write+0x140>)
 8047a52:	681b      	ldr	r3, [r3, #0]
 8047a54:	3b01      	subs	r3, #1
 8047a56:	4a2e      	ldr	r2, [pc, #184]	@ (8047b10 <dmesg_write+0x140>)
 8047a58:	6013      	str	r3, [r2, #0]
        space_left = (read_ptr <= write_ptr) ?
 8047a5a:	4b29      	ldr	r3, [pc, #164]	@ (8047b00 <dmesg_write+0x130>)
 8047a5c:	681a      	ldr	r2, [r3, #0]
 8047a5e:	4b29      	ldr	r3, [pc, #164]	@ (8047b04 <dmesg_write+0x134>)
 8047a60:	681b      	ldr	r3, [r3, #0]
                     (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 8047a62:	429a      	cmp	r2, r3
 8047a64:	d807      	bhi.n	8047a76 <dmesg_write+0xa6>
 8047a66:	4b27      	ldr	r3, [pc, #156]	@ (8047b04 <dmesg_write+0x134>)
 8047a68:	681a      	ldr	r2, [r3, #0]
 8047a6a:	4b25      	ldr	r3, [pc, #148]	@ (8047b00 <dmesg_write+0x130>)
 8047a6c:	681b      	ldr	r3, [r3, #0]
 8047a6e:	1ad3      	subs	r3, r2, r3
 8047a70:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8047a74:	e004      	b.n	8047a80 <dmesg_write+0xb0>
                     (read_ptr - write_ptr);
 8047a76:	4b22      	ldr	r3, [pc, #136]	@ (8047b00 <dmesg_write+0x130>)
 8047a78:	681a      	ldr	r2, [r3, #0]
 8047a7a:	4b22      	ldr	r3, [pc, #136]	@ (8047b04 <dmesg_write+0x134>)
 8047a7c:	681b      	ldr	r3, [r3, #0]
 8047a7e:	1ad3      	subs	r3, r2, r3
        space_left = (read_ptr <= write_ptr) ?
 8047a80:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8047a82:	697a      	ldr	r2, [r7, #20]
 8047a84:	68fb      	ldr	r3, [r7, #12]
 8047a86:	429a      	cmp	r2, r3
 8047a88:	d203      	bcs.n	8047a92 <dmesg_write+0xc2>
 8047a8a:	4b21      	ldr	r3, [pc, #132]	@ (8047b10 <dmesg_write+0x140>)
 8047a8c:	681b      	ldr	r3, [r3, #0]
 8047a8e:	2b00      	cmp	r3, #0
 8047a90:	d1c5      	bne.n	8047a1e <dmesg_write+0x4e>
    }

    *write_ptr++ = (uint8_t)len;
 8047a92:	4b1c      	ldr	r3, [pc, #112]	@ (8047b04 <dmesg_write+0x134>)
 8047a94:	681b      	ldr	r3, [r3, #0]
 8047a96:	1c5a      	adds	r2, r3, #1
 8047a98:	491a      	ldr	r1, [pc, #104]	@ (8047b04 <dmesg_write+0x134>)
 8047a9a:	600a      	str	r2, [r1, #0]
 8047a9c:	683a      	ldr	r2, [r7, #0]
 8047a9e:	b2d2      	uxtb	r2, r2
 8047aa0:	701a      	strb	r2, [r3, #0]
    if (write_ptr >= &_edmesg_buffer) {
 8047aa2:	4b18      	ldr	r3, [pc, #96]	@ (8047b04 <dmesg_write+0x134>)
 8047aa4:	681b      	ldr	r3, [r3, #0]
 8047aa6:	4a18      	ldr	r2, [pc, #96]	@ (8047b08 <dmesg_write+0x138>)
 8047aa8:	4293      	cmp	r3, r2
 8047aaa:	d302      	bcc.n	8047ab2 <dmesg_write+0xe2>
        write_ptr = &_sdmesg_buffer;
 8047aac:	4b15      	ldr	r3, [pc, #84]	@ (8047b04 <dmesg_write+0x134>)
 8047aae:	4a17      	ldr	r2, [pc, #92]	@ (8047b0c <dmesg_write+0x13c>)
 8047ab0:	601a      	str	r2, [r3, #0]
    }

    for (uint32_t i = 0; i < len; i++) {
 8047ab2:	2300      	movs	r3, #0
 8047ab4:	613b      	str	r3, [r7, #16]
 8047ab6:	e014      	b.n	8047ae2 <dmesg_write+0x112>
        *write_ptr++ = msg[i];
 8047ab8:	687a      	ldr	r2, [r7, #4]
 8047aba:	693b      	ldr	r3, [r7, #16]
 8047abc:	441a      	add	r2, r3
 8047abe:	4b11      	ldr	r3, [pc, #68]	@ (8047b04 <dmesg_write+0x134>)
 8047ac0:	681b      	ldr	r3, [r3, #0]
 8047ac2:	1c59      	adds	r1, r3, #1
 8047ac4:	480f      	ldr	r0, [pc, #60]	@ (8047b04 <dmesg_write+0x134>)
 8047ac6:	6001      	str	r1, [r0, #0]
 8047ac8:	7812      	ldrb	r2, [r2, #0]
 8047aca:	701a      	strb	r2, [r3, #0]
        if (write_ptr >= &_edmesg_buffer) {
 8047acc:	4b0d      	ldr	r3, [pc, #52]	@ (8047b04 <dmesg_write+0x134>)
 8047ace:	681b      	ldr	r3, [r3, #0]
 8047ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8047b08 <dmesg_write+0x138>)
 8047ad2:	4293      	cmp	r3, r2
 8047ad4:	d302      	bcc.n	8047adc <dmesg_write+0x10c>
            write_ptr = &_sdmesg_buffer;
 8047ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8047b04 <dmesg_write+0x134>)
 8047ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8047b0c <dmesg_write+0x13c>)
 8047ada:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++) {
 8047adc:	693b      	ldr	r3, [r7, #16]
 8047ade:	3301      	adds	r3, #1
 8047ae0:	613b      	str	r3, [r7, #16]
 8047ae2:	693a      	ldr	r2, [r7, #16]
 8047ae4:	683b      	ldr	r3, [r7, #0]
 8047ae6:	429a      	cmp	r2, r3
 8047ae8:	d3e6      	bcc.n	8047ab8 <dmesg_write+0xe8>
        }
    }
    log_count++;
 8047aea:	4b09      	ldr	r3, [pc, #36]	@ (8047b10 <dmesg_write+0x140>)
 8047aec:	681b      	ldr	r3, [r3, #0]
 8047aee:	3301      	adds	r3, #1
 8047af0:	4a07      	ldr	r2, [pc, #28]	@ (8047b10 <dmesg_write+0x140>)
 8047af2:	6013      	str	r3, [r2, #0]
}
 8047af4:	bf00      	nop
 8047af6:	371c      	adds	r7, #28
 8047af8:	46bd      	mov	sp, r7
 8047afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047afe:	4770      	bx	lr
 8047b00:	240148dc 	.word	0x240148dc
 8047b04:	240148d8 	.word	0x240148d8
 8047b08:	20008000 	.word	0x20008000
 8047b0c:	20000000 	.word	0x20000000
 8047b10:	2401e79c 	.word	0x2401e79c

08047b14 <Dmesg_HardWrite>:

void Dmesg_HardWrite(const char *msg) {
 8047b14:	b580      	push	{r7, lr}
 8047b16:	b084      	sub	sp, #16
 8047b18:	af00      	add	r7, sp, #0
 8047b1a:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(msg);
 8047b1c:	6878      	ldr	r0, [r7, #4]
 8047b1e:	f7f8 fbe9 	bl	80402f4 <strlen>
 8047b22:	60f8      	str	r0, [r7, #12]
    dmesg_write(msg, len);
 8047b24:	68f9      	ldr	r1, [r7, #12]
 8047b26:	6878      	ldr	r0, [r7, #4]
 8047b28:	f7ff ff52 	bl	80479d0 <dmesg_write>
}
 8047b2c:	bf00      	nop
 8047b2e:	3710      	adds	r7, #16
 8047b30:	46bd      	mov	sp, r7
 8047b32:	bd80      	pop	{r7, pc}

08047b34 <Dmesg_SafeWrite>:

void Dmesg_SafeWrite(const char *msg) {
 8047b34:	b580      	push	{r7, lr}
 8047b36:	b082      	sub	sp, #8
 8047b38:	af00      	add	r7, sp, #0
 8047b3a:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex != NULL && xSemaphoreTake(dmesg_mutex, portMAX_DELAY) == pdTRUE) {
 8047b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8047b74 <Dmesg_SafeWrite+0x40>)
 8047b3e:	681b      	ldr	r3, [r3, #0]
 8047b40:	2b00      	cmp	r3, #0
 8047b42:	d013      	beq.n	8047b6c <Dmesg_SafeWrite+0x38>
 8047b44:	4b0b      	ldr	r3, [pc, #44]	@ (8047b74 <Dmesg_SafeWrite+0x40>)
 8047b46:	681b      	ldr	r3, [r3, #0]
 8047b48:	f04f 31ff 	mov.w	r1, #4294967295
 8047b4c:	4618      	mov	r0, r3
 8047b4e:	f00d fe43 	bl	80557d8 <xQueueSemaphoreTake>
 8047b52:	4603      	mov	r3, r0
 8047b54:	2b01      	cmp	r3, #1
 8047b56:	d109      	bne.n	8047b6c <Dmesg_SafeWrite+0x38>
        Dmesg_HardWrite(msg);
 8047b58:	6878      	ldr	r0, [r7, #4]
 8047b5a:	f7ff ffdb 	bl	8047b14 <Dmesg_HardWrite>
        xSemaphoreGive(dmesg_mutex);
 8047b5e:	4b05      	ldr	r3, [pc, #20]	@ (8047b74 <Dmesg_SafeWrite+0x40>)
 8047b60:	6818      	ldr	r0, [r3, #0]
 8047b62:	2300      	movs	r3, #0
 8047b64:	2200      	movs	r2, #0
 8047b66:	2100      	movs	r1, #0
 8047b68:	f00d fb92 	bl	8055290 <xQueueGenericSend>
    }
}
 8047b6c:	bf00      	nop
 8047b6e:	3708      	adds	r7, #8
 8047b70:	46bd      	mov	sp, r7
 8047b72:	bd80      	pop	{r7, pc}
 8047b74:	2401e7a0 	.word	0x2401e7a0

08047b78 <dmesg_print_entry>:

static void dmesg_print_entry(uint8_t **ptr, EmbeddedCli *cli) {
 8047b78:	b580      	push	{r7, lr}
 8047b7a:	b0a6      	sub	sp, #152	@ 0x98
 8047b7c:	af00      	add	r7, sp, #0
 8047b7e:	6078      	str	r0, [r7, #4]
 8047b80:	6039      	str	r1, [r7, #0]
    uint8_t len = **ptr;
 8047b82:	687b      	ldr	r3, [r7, #4]
 8047b84:	681b      	ldr	r3, [r3, #0]
 8047b86:	781b      	ldrb	r3, [r3, #0]
 8047b88:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    (*ptr)++;
 8047b8c:	687b      	ldr	r3, [r7, #4]
 8047b8e:	681b      	ldr	r3, [r3, #0]
 8047b90:	1c5a      	adds	r2, r3, #1
 8047b92:	687b      	ldr	r3, [r7, #4]
 8047b94:	601a      	str	r2, [r3, #0]
    if (*ptr >= &_edmesg_buffer) {
 8047b96:	687b      	ldr	r3, [r7, #4]
 8047b98:	681b      	ldr	r3, [r3, #0]
 8047b9a:	4a23      	ldr	r2, [pc, #140]	@ (8047c28 <dmesg_print_entry+0xb0>)
 8047b9c:	4293      	cmp	r3, r2
 8047b9e:	d302      	bcc.n	8047ba6 <dmesg_print_entry+0x2e>
        *ptr = &_sdmesg_buffer;
 8047ba0:	687b      	ldr	r3, [r7, #4]
 8047ba2:	4a22      	ldr	r2, [pc, #136]	@ (8047c2c <dmesg_print_entry+0xb4>)
 8047ba4:	601a      	str	r2, [r3, #0]
    }
    char buffer[DMESG_MSG_MAX_LENGTH + 1];
    size_t copy_len = (len < sizeof(buffer) - 1) ? len : sizeof(buffer) - 1;
 8047ba6:	f997 3093 	ldrsb.w	r3, [r7, #147]	@ 0x93
 8047baa:	2b00      	cmp	r3, #0
 8047bac:	db02      	blt.n	8047bb4 <dmesg_print_entry+0x3c>
 8047bae:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8047bb2:	e000      	b.n	8047bb6 <dmesg_print_entry+0x3e>
 8047bb4:	2380      	movs	r3, #128	@ 0x80
 8047bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    for (size_t i = 0; i < copy_len; i++) {
 8047bba:	2300      	movs	r3, #0
 8047bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8047bc0:	e01b      	b.n	8047bfa <dmesg_print_entry+0x82>
        buffer[i] = **ptr;
 8047bc2:	687b      	ldr	r3, [r7, #4]
 8047bc4:	681b      	ldr	r3, [r3, #0]
 8047bc6:	7819      	ldrb	r1, [r3, #0]
 8047bc8:	f107 0208 	add.w	r2, r7, #8
 8047bcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8047bd0:	4413      	add	r3, r2
 8047bd2:	460a      	mov	r2, r1
 8047bd4:	701a      	strb	r2, [r3, #0]
        (*ptr)++;
 8047bd6:	687b      	ldr	r3, [r7, #4]
 8047bd8:	681b      	ldr	r3, [r3, #0]
 8047bda:	1c5a      	adds	r2, r3, #1
 8047bdc:	687b      	ldr	r3, [r7, #4]
 8047bde:	601a      	str	r2, [r3, #0]
        if (*ptr >= &_edmesg_buffer) {
 8047be0:	687b      	ldr	r3, [r7, #4]
 8047be2:	681b      	ldr	r3, [r3, #0]
 8047be4:	4a10      	ldr	r2, [pc, #64]	@ (8047c28 <dmesg_print_entry+0xb0>)
 8047be6:	4293      	cmp	r3, r2
 8047be8:	d302      	bcc.n	8047bf0 <dmesg_print_entry+0x78>
            *ptr = &_sdmesg_buffer;
 8047bea:	687b      	ldr	r3, [r7, #4]
 8047bec:	4a0f      	ldr	r2, [pc, #60]	@ (8047c2c <dmesg_print_entry+0xb4>)
 8047bee:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < copy_len; i++) {
 8047bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8047bf4:	3301      	adds	r3, #1
 8047bf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8047bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8047bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8047c02:	429a      	cmp	r2, r3
 8047c04:	d3dd      	bcc.n	8047bc2 <dmesg_print_entry+0x4a>
        }
    }
    buffer[copy_len] = '\0';
 8047c06:	f107 0208 	add.w	r2, r7, #8
 8047c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8047c0e:	4413      	add	r3, r2
 8047c10:	2200      	movs	r2, #0
 8047c12:	701a      	strb	r2, [r3, #0]
    embeddedCliPrint(cli, buffer);
 8047c14:	f107 0308 	add.w	r3, r7, #8
 8047c18:	4619      	mov	r1, r3
 8047c1a:	6838      	ldr	r0, [r7, #0]
 8047c1c:	f7fe fa50 	bl	80460c0 <embeddedCliPrint>
}
 8047c20:	bf00      	nop
 8047c22:	3798      	adds	r7, #152	@ 0x98
 8047c24:	46bd      	mov	sp, r7
 8047c26:	bd80      	pop	{r7, pc}
 8047c28:	20008000 	.word	0x20008000
 8047c2c:	20000000 	.word	0x20000000

08047c30 <Dmesg_GetLogs>:

void Dmesg_GetLogs(EmbeddedCli *cli) {
 8047c30:	b580      	push	{r7, lr}
 8047c32:	b084      	sub	sp, #16
 8047c34:	af00      	add	r7, sp, #0
 8047c36:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 8047c38:	4b14      	ldr	r3, [pc, #80]	@ (8047c8c <Dmesg_GetLogs+0x5c>)
 8047c3a:	681b      	ldr	r3, [r3, #0]
 8047c3c:	2b00      	cmp	r3, #0
 8047c3e:	d020      	beq.n	8047c82 <Dmesg_GetLogs+0x52>
 8047c40:	4b12      	ldr	r3, [pc, #72]	@ (8047c8c <Dmesg_GetLogs+0x5c>)
 8047c42:	681b      	ldr	r3, [r3, #0]
 8047c44:	f04f 31ff 	mov.w	r1, #4294967295
 8047c48:	4618      	mov	r0, r3
 8047c4a:	f00d fdc5 	bl	80557d8 <xQueueSemaphoreTake>
 8047c4e:	4603      	mov	r3, r0
 8047c50:	2b01      	cmp	r3, #1
 8047c52:	d116      	bne.n	8047c82 <Dmesg_GetLogs+0x52>
        return;
    }

    uint8_t *ptr = read_ptr;
 8047c54:	4b0e      	ldr	r3, [pc, #56]	@ (8047c90 <Dmesg_GetLogs+0x60>)
 8047c56:	681b      	ldr	r3, [r3, #0]
 8047c58:	60fb      	str	r3, [r7, #12]
    while (ptr != write_ptr) {
 8047c5a:	e005      	b.n	8047c68 <Dmesg_GetLogs+0x38>
        dmesg_print_entry(&ptr, cli);
 8047c5c:	f107 030c 	add.w	r3, r7, #12
 8047c60:	6879      	ldr	r1, [r7, #4]
 8047c62:	4618      	mov	r0, r3
 8047c64:	f7ff ff88 	bl	8047b78 <dmesg_print_entry>
    while (ptr != write_ptr) {
 8047c68:	68fa      	ldr	r2, [r7, #12]
 8047c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8047c94 <Dmesg_GetLogs+0x64>)
 8047c6c:	681b      	ldr	r3, [r3, #0]
 8047c6e:	429a      	cmp	r2, r3
 8047c70:	d1f4      	bne.n	8047c5c <Dmesg_GetLogs+0x2c>
    }
    xSemaphoreGive(dmesg_mutex);
 8047c72:	4b06      	ldr	r3, [pc, #24]	@ (8047c8c <Dmesg_GetLogs+0x5c>)
 8047c74:	6818      	ldr	r0, [r3, #0]
 8047c76:	2300      	movs	r3, #0
 8047c78:	2200      	movs	r2, #0
 8047c7a:	2100      	movs	r1, #0
 8047c7c:	f00d fb08 	bl	8055290 <xQueueGenericSend>
 8047c80:	e000      	b.n	8047c84 <Dmesg_GetLogs+0x54>
        return;
 8047c82:	bf00      	nop
}
 8047c84:	3710      	adds	r7, #16
 8047c86:	46bd      	mov	sp, r7
 8047c88:	bd80      	pop	{r7, pc}
 8047c8a:	bf00      	nop
 8047c8c:	2401e7a0 	.word	0x2401e7a0
 8047c90:	240148dc 	.word	0x240148dc
 8047c94:	240148d8 	.word	0x240148d8

08047c98 <Dmesg_GetLatestN>:

void Dmesg_GetLatestN(size_t N, EmbeddedCli *cli) {
 8047c98:	b580      	push	{r7, lr}
 8047c9a:	b088      	sub	sp, #32
 8047c9c:	af00      	add	r7, sp, #0
 8047c9e:	6078      	str	r0, [r7, #4]
 8047ca0:	6039      	str	r1, [r7, #0]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 8047ca2:	4b31      	ldr	r3, [pc, #196]	@ (8047d68 <Dmesg_GetLatestN+0xd0>)
 8047ca4:	681b      	ldr	r3, [r3, #0]
 8047ca6:	2b00      	cmp	r3, #0
 8047ca8:	d059      	beq.n	8047d5e <Dmesg_GetLatestN+0xc6>
 8047caa:	4b2f      	ldr	r3, [pc, #188]	@ (8047d68 <Dmesg_GetLatestN+0xd0>)
 8047cac:	681b      	ldr	r3, [r3, #0]
 8047cae:	f04f 31ff 	mov.w	r1, #4294967295
 8047cb2:	4618      	mov	r0, r3
 8047cb4:	f00d fd90 	bl	80557d8 <xQueueSemaphoreTake>
 8047cb8:	4603      	mov	r3, r0
 8047cba:	2b01      	cmp	r3, #1
 8047cbc:	d14f      	bne.n	8047d5e <Dmesg_GetLatestN+0xc6>
        return;
    }

    if (N > log_count) N = log_count;
 8047cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8047d6c <Dmesg_GetLatestN+0xd4>)
 8047cc0:	681b      	ldr	r3, [r3, #0]
 8047cc2:	687a      	ldr	r2, [r7, #4]
 8047cc4:	429a      	cmp	r2, r3
 8047cc6:	d902      	bls.n	8047cce <Dmesg_GetLatestN+0x36>
 8047cc8:	4b28      	ldr	r3, [pc, #160]	@ (8047d6c <Dmesg_GetLatestN+0xd4>)
 8047cca:	681b      	ldr	r3, [r3, #0]
 8047ccc:	607b      	str	r3, [r7, #4]
    if (N == 0) {
 8047cce:	687b      	ldr	r3, [r7, #4]
 8047cd0:	2b00      	cmp	r3, #0
 8047cd2:	d107      	bne.n	8047ce4 <Dmesg_GetLatestN+0x4c>
        xSemaphoreGive(dmesg_mutex);
 8047cd4:	4b24      	ldr	r3, [pc, #144]	@ (8047d68 <Dmesg_GetLatestN+0xd0>)
 8047cd6:	6818      	ldr	r0, [r3, #0]
 8047cd8:	2300      	movs	r3, #0
 8047cda:	2200      	movs	r2, #0
 8047cdc:	2100      	movs	r1, #0
 8047cde:	f00d fad7 	bl	8055290 <xQueueGenericSend>
        return;
 8047ce2:	e03d      	b.n	8047d60 <Dmesg_GetLatestN+0xc8>
    }

    size_t skip = log_count - N;
 8047ce4:	4b21      	ldr	r3, [pc, #132]	@ (8047d6c <Dmesg_GetLatestN+0xd4>)
 8047ce6:	681a      	ldr	r2, [r3, #0]
 8047ce8:	687b      	ldr	r3, [r7, #4]
 8047cea:	1ad3      	subs	r3, r2, r3
 8047cec:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = read_ptr;
 8047cee:	4b20      	ldr	r3, [pc, #128]	@ (8047d70 <Dmesg_GetLatestN+0xd8>)
 8047cf0:	681b      	ldr	r3, [r3, #0]
 8047cf2:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < skip; i++) {
 8047cf4:	2300      	movs	r3, #0
 8047cf6:	61fb      	str	r3, [r7, #28]
 8047cf8:	e015      	b.n	8047d26 <Dmesg_GetLatestN+0x8e>
        uint8_t len = *ptr;
 8047cfa:	68fb      	ldr	r3, [r7, #12]
 8047cfc:	781b      	ldrb	r3, [r3, #0]
 8047cfe:	74fb      	strb	r3, [r7, #19]
        ptr += (len + 1);
 8047d00:	68fa      	ldr	r2, [r7, #12]
 8047d02:	7cfb      	ldrb	r3, [r7, #19]
 8047d04:	3301      	adds	r3, #1
 8047d06:	4413      	add	r3, r2
 8047d08:	60fb      	str	r3, [r7, #12]
        if (ptr >= &_edmesg_buffer) {
 8047d0a:	68fb      	ldr	r3, [r7, #12]
 8047d0c:	4a19      	ldr	r2, [pc, #100]	@ (8047d74 <Dmesg_GetLatestN+0xdc>)
 8047d0e:	4293      	cmp	r3, r2
 8047d10:	d306      	bcc.n	8047d20 <Dmesg_GetLatestN+0x88>
            ptr = &_sdmesg_buffer + (ptr - &_edmesg_buffer);
 8047d12:	68fb      	ldr	r3, [r7, #12]
 8047d14:	4a17      	ldr	r2, [pc, #92]	@ (8047d74 <Dmesg_GetLatestN+0xdc>)
 8047d16:	1a9b      	subs	r3, r3, r2
 8047d18:	461a      	mov	r2, r3
 8047d1a:	4b17      	ldr	r3, [pc, #92]	@ (8047d78 <Dmesg_GetLatestN+0xe0>)
 8047d1c:	4413      	add	r3, r2
 8047d1e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < skip; i++) {
 8047d20:	69fb      	ldr	r3, [r7, #28]
 8047d22:	3301      	adds	r3, #1
 8047d24:	61fb      	str	r3, [r7, #28]
 8047d26:	69fa      	ldr	r2, [r7, #28]
 8047d28:	697b      	ldr	r3, [r7, #20]
 8047d2a:	429a      	cmp	r2, r3
 8047d2c:	d3e5      	bcc.n	8047cfa <Dmesg_GetLatestN+0x62>
        }
    }

    for (size_t i = 0; i < N; i++) {
 8047d2e:	2300      	movs	r3, #0
 8047d30:	61bb      	str	r3, [r7, #24]
 8047d32:	e008      	b.n	8047d46 <Dmesg_GetLatestN+0xae>
        dmesg_print_entry(&ptr, cli);
 8047d34:	f107 030c 	add.w	r3, r7, #12
 8047d38:	6839      	ldr	r1, [r7, #0]
 8047d3a:	4618      	mov	r0, r3
 8047d3c:	f7ff ff1c 	bl	8047b78 <dmesg_print_entry>
    for (size_t i = 0; i < N; i++) {
 8047d40:	69bb      	ldr	r3, [r7, #24]
 8047d42:	3301      	adds	r3, #1
 8047d44:	61bb      	str	r3, [r7, #24]
 8047d46:	69ba      	ldr	r2, [r7, #24]
 8047d48:	687b      	ldr	r3, [r7, #4]
 8047d4a:	429a      	cmp	r2, r3
 8047d4c:	d3f2      	bcc.n	8047d34 <Dmesg_GetLatestN+0x9c>
    }
    xSemaphoreGive(dmesg_mutex);
 8047d4e:	4b06      	ldr	r3, [pc, #24]	@ (8047d68 <Dmesg_GetLatestN+0xd0>)
 8047d50:	6818      	ldr	r0, [r3, #0]
 8047d52:	2300      	movs	r3, #0
 8047d54:	2200      	movs	r2, #0
 8047d56:	2100      	movs	r1, #0
 8047d58:	f00d fa9a 	bl	8055290 <xQueueGenericSend>
 8047d5c:	e000      	b.n	8047d60 <Dmesg_GetLatestN+0xc8>
        return;
 8047d5e:	bf00      	nop
}
 8047d60:	3720      	adds	r7, #32
 8047d62:	46bd      	mov	sp, r7
 8047d64:	bd80      	pop	{r7, pc}
 8047d66:	bf00      	nop
 8047d68:	2401e7a0 	.word	0x2401e7a0
 8047d6c:	2401e79c 	.word	0x2401e79c
 8047d70:	240148dc 	.word	0x240148dc
 8047d74:	20008000 	.word	0x20008000
 8047d78:	20000000 	.word	0x20000000

08047d7c <LL_GPIO_SetOutputPin>:
{
 8047d7c:	b480      	push	{r7}
 8047d7e:	b083      	sub	sp, #12
 8047d80:	af00      	add	r7, sp, #0
 8047d82:	6078      	str	r0, [r7, #4]
 8047d84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8047d86:	687b      	ldr	r3, [r7, #4]
 8047d88:	683a      	ldr	r2, [r7, #0]
 8047d8a:	619a      	str	r2, [r3, #24]
}
 8047d8c:	bf00      	nop
 8047d8e:	370c      	adds	r7, #12
 8047d90:	46bd      	mov	sp, r7
 8047d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d96:	4770      	bx	lr

08047d98 <LL_GPIO_ResetOutputPin>:
{
 8047d98:	b480      	push	{r7}
 8047d9a:	b083      	sub	sp, #12
 8047d9c:	af00      	add	r7, sp, #0
 8047d9e:	6078      	str	r0, [r7, #4]
 8047da0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8047da2:	683b      	ldr	r3, [r7, #0]
 8047da4:	041a      	lsls	r2, r3, #16
 8047da6:	687b      	ldr	r3, [r7, #4]
 8047da8:	619a      	str	r2, [r3, #24]
}
 8047daa:	bf00      	nop
 8047dac:	370c      	adds	r7, #12
 8047dae:	46bd      	mov	sp, r7
 8047db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047db4:	4770      	bx	lr
	...

08047db8 <FindFreeSlot>:
//__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[90640]; // 10 slot * 8240 bytes + 1 backup
__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[NUM_SLOTS * 64]; 			// 10 slot * 64 bytes = 640 bytes
__attribute__((section(".fs_buffer"))) static uint8_t fsDataBuffer[NUM_SLOTS][MAX_DATA_SIZE];   // 10 slot * 8KB = 80KB
static uint8_t slotInUse[NUM_SLOTS] = {0};

static int FindFreeSlot(void) {
 8047db8:	b480      	push	{r7}
 8047dba:	b083      	sub	sp, #12
 8047dbc:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SLOTS; i++) {
 8047dbe:	2300      	movs	r3, #0
 8047dc0:	607b      	str	r3, [r7, #4]
 8047dc2:	e00a      	b.n	8047dda <FindFreeSlot+0x22>
        if (slotInUse[i] == 0) return i;
 8047dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8047df0 <FindFreeSlot+0x38>)
 8047dc6:	687b      	ldr	r3, [r7, #4]
 8047dc8:	4413      	add	r3, r2
 8047dca:	781b      	ldrb	r3, [r3, #0]
 8047dcc:	2b00      	cmp	r3, #0
 8047dce:	d101      	bne.n	8047dd4 <FindFreeSlot+0x1c>
 8047dd0:	687b      	ldr	r3, [r7, #4]
 8047dd2:	e007      	b.n	8047de4 <FindFreeSlot+0x2c>
    for (int i = 0; i < NUM_SLOTS; i++) {
 8047dd4:	687b      	ldr	r3, [r7, #4]
 8047dd6:	3301      	adds	r3, #1
 8047dd8:	607b      	str	r3, [r7, #4]
 8047dda:	687b      	ldr	r3, [r7, #4]
 8047ddc:	2b09      	cmp	r3, #9
 8047dde:	ddf1      	ble.n	8047dc4 <FindFreeSlot+0xc>
    }
    return -1;
 8047de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8047de4:	4618      	mov	r0, r3
 8047de6:	370c      	adds	r7, #12
 8047de8:	46bd      	mov	sp, r7
 8047dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047dee:	4770      	bx	lr
 8047df0:	2401e804 	.word	0x2401e804

08047df4 <SD_Lockin>:
 *              Physical Status SDMMC            *
 *************************************************/
SDFS_StateTypedef SDFS_State = SDFS_READY;

void SD_Lockin(void)
{
 8047df4:	b580      	push	{r7, lr}
 8047df6:	af00      	add	r7, sp, #0
    GPIO_SetHigh(SD_InOut_Port, SD_InOut);
 8047df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8047dfc:	4804      	ldr	r0, [pc, #16]	@ (8047e10 <SD_Lockin+0x1c>)
 8047dfe:	f7ff ffbd 	bl	8047d7c <LL_GPIO_SetOutputPin>
    GPIO_SetHigh(SD_Detect_Port, SD_Detect);
 8047e02:	2110      	movs	r1, #16
 8047e04:	4803      	ldr	r0, [pc, #12]	@ (8047e14 <SD_Lockin+0x20>)
 8047e06:	f7ff ffb9 	bl	8047d7c <LL_GPIO_SetOutputPin>
}
 8047e0a:	bf00      	nop
 8047e0c:	bd80      	pop	{r7, pc}
 8047e0e:	bf00      	nop
 8047e10:	58021000 	.word	0x58021000
 8047e14:	58020c00 	.word	0x58020c00

08047e18 <SD_Release>:
void SD_Release(void)
{
 8047e18:	b580      	push	{r7, lr}
 8047e1a:	af00      	add	r7, sp, #0
    GPIO_SetLow(SD_InOut_Port, SD_InOut);
 8047e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8047e20:	4804      	ldr	r0, [pc, #16]	@ (8047e34 <SD_Release+0x1c>)
 8047e22:	f7ff ffb9 	bl	8047d98 <LL_GPIO_ResetOutputPin>
    GPIO_SetLow(SD_Detect_Port, SD_Detect);
 8047e26:	2110      	movs	r1, #16
 8047e28:	4803      	ldr	r0, [pc, #12]	@ (8047e38 <SD_Release+0x20>)
 8047e2a:	f7ff ffb5 	bl	8047d98 <LL_GPIO_ResetOutputPin>
}
 8047e2e:	bf00      	nop
 8047e30:	bd80      	pop	{r7, pc}
 8047e32:	bf00      	nop
 8047e34:	58021000 	.word	0x58021000
 8047e38:	58020c00 	.word	0x58020c00

08047e3c <FS_Init>:

/*************************************************
 *                 Queue implement               *
 *************************************************/
void FS_Init(void) {
 8047e3c:	b580      	push	{r7, lr}
 8047e3e:	b082      	sub	sp, #8
 8047e40:	af02      	add	r7, sp, #8
    fsMutex = xSemaphoreCreateMutex();
 8047e42:	2001      	movs	r0, #1
 8047e44:	f00d fa0b 	bl	805525e <xQueueCreateMutex>
 8047e48:	4603      	mov	r3, r0
 8047e4a:	4a16      	ldr	r2, [pc, #88]	@ (8047ea4 <FS_Init+0x68>)
 8047e4c:	6013      	str	r3, [r2, #0]
    fsSlotMutex = xSemaphoreCreateMutex();
 8047e4e:	2001      	movs	r0, #1
 8047e50:	f00d fa05 	bl	805525e <xQueueCreateMutex>
 8047e54:	4603      	mov	r3, r0
 8047e56:	4a14      	ldr	r2, [pc, #80]	@ (8047ea8 <FS_Init+0x6c>)
 8047e58:	6013      	str	r3, [r2, #0]
    if (fsMutex == NULL || fsSlotMutex == NULL) {
 8047e5a:	4b12      	ldr	r3, [pc, #72]	@ (8047ea4 <FS_Init+0x68>)
 8047e5c:	681b      	ldr	r3, [r3, #0]
 8047e5e:	2b00      	cmp	r3, #0
 8047e60:	d003      	beq.n	8047e6a <FS_Init+0x2e>
 8047e62:	4b11      	ldr	r3, [pc, #68]	@ (8047ea8 <FS_Init+0x6c>)
 8047e64:	681b      	ldr	r3, [r3, #0]
 8047e66:	2b00      	cmp	r3, #0
 8047e68:	d105      	bne.n	8047e76 <FS_Init+0x3a>
        SYSLOG_ERROR_POLL("Failed to create mutexes");
 8047e6a:	2201      	movs	r2, #1
 8047e6c:	490f      	ldr	r1, [pc, #60]	@ (8047eac <FS_Init+0x70>)
 8047e6e:	2004      	movs	r0, #4
 8047e70:	f003 fe9e 	bl	804bbb0 <syslog_log>
        return;
 8047e74:	e014      	b.n	8047ea0 <FS_Init+0x64>
    }

    fsWriteQueue = xQueueCreateStatic(NUM_SLOTS, sizeof(FS_WriteRequest_t), fsQueueBuffer, &fsWriteQueueStruct);
 8047e76:	2300      	movs	r3, #0
 8047e78:	9300      	str	r3, [sp, #0]
 8047e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8047eb0 <FS_Init+0x74>)
 8047e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8047eb4 <FS_Init+0x78>)
 8047e7e:	2130      	movs	r1, #48	@ 0x30
 8047e80:	200a      	movs	r0, #10
 8047e82:	f00d f8f3 	bl	805506c <xQueueGenericCreateStatic>
 8047e86:	4603      	mov	r3, r0
 8047e88:	4a0b      	ldr	r2, [pc, #44]	@ (8047eb8 <FS_Init+0x7c>)
 8047e8a:	6013      	str	r3, [r2, #0]
    if (fsWriteQueue == NULL) {
 8047e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8047eb8 <FS_Init+0x7c>)
 8047e8e:	681b      	ldr	r3, [r3, #0]
 8047e90:	2b00      	cmp	r3, #0
 8047e92:	d105      	bne.n	8047ea0 <FS_Init+0x64>
        SYSLOG_ERROR_POLL("Failed to create FS write queue");
 8047e94:	2201      	movs	r2, #1
 8047e96:	4909      	ldr	r1, [pc, #36]	@ (8047ebc <FS_Init+0x80>)
 8047e98:	2004      	movs	r0, #4
 8047e9a:	f003 fe89 	bl	804bbb0 <syslog_log>
        return;
 8047e9e:	bf00      	nop
    }
}
 8047ea0:	46bd      	mov	sp, r7
 8047ea2:	bd80      	pop	{r7, pc}
 8047ea4:	2401e7a4 	.word	0x2401e7a4
 8047ea8:	2401e7a8 	.word	0x2401e7a8
 8047eac:	0806d25c 	.word	0x0806d25c
 8047eb0:	2401e7b4 	.word	0x2401e7b4
 8047eb4:	240004a8 	.word	0x240004a8
 8047eb8:	2401e7b0 	.word	0x2401e7b0
 8047ebc:	0806d278 	.word	0x0806d278

08047ec0 <FS_Gatekeeper_Task>:

void FS_Gatekeeper_Task(void *pvParameters) {
 8047ec0:	b580      	push	{r7, lr}
 8047ec2:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 8047ec6:	af02      	add	r7, sp, #8
 8047ec8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8047ecc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8047ed0:	6018      	str	r0, [r3, #0]
    FS_WriteRequest_t request;

    for (;;) {
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 8047ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8047f84 <FS_Gatekeeper_Task+0xc4>)
 8047ed4:	681b      	ldr	r3, [r3, #0]
 8047ed6:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 8047eda:	f04f 32ff 	mov.w	r2, #4294967295
 8047ede:	4618      	mov	r0, r3
 8047ee0:	f00d fb92 	bl	8055608 <xQueueReceive>
 8047ee4:	4603      	mov	r3, r0
 8047ee6:	2b01      	cmp	r3, #1
 8047ee8:	d1f3      	bne.n	8047ed2 <FS_Gatekeeper_Task+0x12>
            Std_ReturnType result = E_ERROR;
 8047eea:	2301      	movs	r3, #1
 8047eec:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
            FIL file;
            FRESULT res;
            UINT byteswritten;

            if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8047ef0:	4b25      	ldr	r3, [pc, #148]	@ (8047f88 <FS_Gatekeeper_Task+0xc8>)
 8047ef2:	681b      	ldr	r3, [r3, #0]
 8047ef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8047ef8:	4618      	mov	r0, r3
 8047efa:	f00d fc6d 	bl	80557d8 <xQueueSemaphoreTake>
 8047efe:	4603      	mov	r3, r0
 8047f00:	2b01      	cmp	r3, #1
 8047f02:	d134      	bne.n	8047f6e <FS_Gatekeeper_Task+0xae>
                res = f_open(&file, request.filename, FA_OPEN_APPEND | FA_WRITE);
 8047f04:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 8047f08:	f107 0308 	add.w	r3, r7, #8
 8047f0c:	2232      	movs	r2, #50	@ 0x32
 8047f0e:	4618      	mov	r0, r3
 8047f10:	f00b f8ba 	bl	8053088 <f_open>
 8047f14:	4603      	mov	r3, r0
 8047f16:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                if (res == FR_OK) {
 8047f1a:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 8047f1e:	2b00      	cmp	r3, #0
 8047f20:	d11e      	bne.n	8047f60 <FS_Gatekeeper_Task+0xa0>
                    res = f_write(&file, request.data, request.size, &byteswritten);
 8047f22:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 8047f26:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8047f2a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8047f2e:	f107 0008 	add.w	r0, r7, #8
 8047f32:	f00b fdfa 	bl	8053b2a <f_write>
 8047f36:	4603      	mov	r3, r0
 8047f38:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                    f_close(&file);
 8047f3c:	f107 0308 	add.w	r3, r7, #8
 8047f40:	4618      	mov	r0, r3
 8047f42:	f00c f98b 	bl	805425c <f_close>
                    if (res == FR_OK && byteswritten == request.size) {
 8047f46:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 8047f4a:	2b00      	cmp	r3, #0
 8047f4c:	d108      	bne.n	8047f60 <FS_Gatekeeper_Task+0xa0>
 8047f4e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8047f52:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8047f56:	429a      	cmp	r2, r3
 8047f58:	d102      	bne.n	8047f60 <FS_Gatekeeper_Task+0xa0>
                        result = E_OK;
 8047f5a:	2300      	movs	r3, #0
 8047f5c:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
                    }
                }
                xSemaphoreGive(fsMutex);
 8047f60:	4b09      	ldr	r3, [pc, #36]	@ (8047f88 <FS_Gatekeeper_Task+0xc8>)
 8047f62:	6818      	ldr	r0, [r3, #0]
 8047f64:	2300      	movs	r3, #0
 8047f66:	2200      	movs	r2, #0
 8047f68:	2100      	movs	r1, #0
 8047f6a:	f00d f991 	bl	8055290 <xQueueGenericSend>
            }
            xTaskNotify(request.requester, result, eSetValueWithOverwrite);
 8047f6e:	f8d7 028c 	ldr.w	r0, [r7, #652]	@ 0x28c
 8047f72:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8047f76:	2300      	movs	r3, #0
 8047f78:	9300      	str	r3, [sp, #0]
 8047f7a:	2303      	movs	r3, #3
 8047f7c:	2100      	movs	r1, #0
 8047f7e:	f00f fe4d 	bl	8057c1c <xTaskGenericNotify>
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 8047f82:	e7a6      	b.n	8047ed2 <FS_Gatekeeper_Task+0x12>
 8047f84:	2401e7b0 	.word	0x2401e7b0
 8047f88:	2401e7a4 	.word	0x2401e7a4

08047f8c <FS_Request_Write>:
        }
    }
}

Std_ReturnType FS_Request_Write(const char* filename, uint8_t* buffer, uint32_t size) {
 8047f8c:	b580      	push	{r7, lr}
 8047f8e:	b094      	sub	sp, #80	@ 0x50
 8047f90:	af02      	add	r7, sp, #8
 8047f92:	60f8      	str	r0, [r7, #12]
 8047f94:	60b9      	str	r1, [r7, #8]
 8047f96:	607a      	str	r2, [r7, #4]
    if (size > MAX_DATA_SIZE) {
 8047f98:	687b      	ldr	r3, [r7, #4]
 8047f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8047f9e:	d901      	bls.n	8047fa4 <FS_Request_Write+0x18>
        return E_ERROR;
 8047fa0:	2301      	movs	r3, #1
 8047fa2:	e08f      	b.n	80480c4 <FS_Request_Write+0x138>
    }

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 8047fa4:	4b49      	ldr	r3, [pc, #292]	@ (80480cc <FS_Request_Write+0x140>)
 8047fa6:	681b      	ldr	r3, [r3, #0]
 8047fa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8047fac:	4618      	mov	r0, r3
 8047fae:	f00d fc13 	bl	80557d8 <xQueueSemaphoreTake>
 8047fb2:	4603      	mov	r3, r0
 8047fb4:	2b01      	cmp	r3, #1
 8047fb6:	d001      	beq.n	8047fbc <FS_Request_Write+0x30>
        return E_ERROR;
 8047fb8:	2301      	movs	r3, #1
 8047fba:	e083      	b.n	80480c4 <FS_Request_Write+0x138>
    }

    int slot = FindFreeSlot();
 8047fbc:	f7ff fefc 	bl	8047db8 <FindFreeSlot>
 8047fc0:	6478      	str	r0, [r7, #68]	@ 0x44
    if (slot == -1) {
 8047fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8047fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047fc8:	d108      	bne.n	8047fdc <FS_Request_Write+0x50>
        xSemaphoreGive(fsSlotMutex);
 8047fca:	4b40      	ldr	r3, [pc, #256]	@ (80480cc <FS_Request_Write+0x140>)
 8047fcc:	6818      	ldr	r0, [r3, #0]
 8047fce:	2300      	movs	r3, #0
 8047fd0:	2200      	movs	r2, #0
 8047fd2:	2100      	movs	r1, #0
 8047fd4:	f00d f95c 	bl	8055290 <xQueueGenericSend>
        return E_ERROR;
 8047fd8:	2301      	movs	r3, #1
 8047fda:	e073      	b.n	80480c4 <FS_Request_Write+0x138>
    }
    slotInUse[slot] = 1;
 8047fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80480d0 <FS_Request_Write+0x144>)
 8047fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8047fe0:	4413      	add	r3, r2
 8047fe2:	2201      	movs	r2, #1
 8047fe4:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(fsSlotMutex);
 8047fe6:	4b39      	ldr	r3, [pc, #228]	@ (80480cc <FS_Request_Write+0x140>)
 8047fe8:	6818      	ldr	r0, [r3, #0]
 8047fea:	2300      	movs	r3, #0
 8047fec:	2200      	movs	r2, #0
 8047fee:	2100      	movs	r1, #0
 8047ff0:	f00d f94e 	bl	8055290 <xQueueGenericSend>

    FS_WriteRequest_t req = {
 8047ff4:	f107 0314 	add.w	r3, r7, #20
 8047ff8:	2230      	movs	r2, #48	@ 0x30
 8047ffa:	2100      	movs	r1, #0
 8047ffc:	4618      	mov	r0, r3
 8047ffe:	f021 fbf1 	bl	80697e4 <memset>
        .data = fsDataBuffer[slot],
 8048002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8048004:	035b      	lsls	r3, r3, #13
 8048006:	4a33      	ldr	r2, [pc, #204]	@ (80480d4 <FS_Request_Write+0x148>)
 8048008:	4413      	add	r3, r2
    FS_WriteRequest_t req = {
 804800a:	637b      	str	r3, [r7, #52]	@ 0x34
 804800c:	687b      	ldr	r3, [r7, #4]
 804800e:	63bb      	str	r3, [r7, #56]	@ 0x38
        .size = size,
        .requester = xTaskGetCurrentTaskHandle()
 8048010:	f00f fb16 	bl	8057640 <xTaskGetCurrentTaskHandle>
 8048014:	4603      	mov	r3, r0
    FS_WriteRequest_t req = {
 8048016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    };
    strncpy(req.filename, filename, sizeof(req.filename) - 1);
 8048018:	f107 0314 	add.w	r3, r7, #20
 804801c:	221f      	movs	r2, #31
 804801e:	68f9      	ldr	r1, [r7, #12]
 8048020:	4618      	mov	r0, r3
 8048022:	f021 fc03 	bl	806982c <strncpy>
    memcpy(fsDataBuffer[slot], buffer, size);
 8048026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8048028:	035b      	lsls	r3, r3, #13
 804802a:	4a2a      	ldr	r2, [pc, #168]	@ (80480d4 <FS_Request_Write+0x148>)
 804802c:	4413      	add	r3, r2
 804802e:	687a      	ldr	r2, [r7, #4]
 8048030:	68b9      	ldr	r1, [r7, #8]
 8048032:	4618      	mov	r0, r3
 8048034:	f021 fc81 	bl	806993a <memcpy>

    if (xQueueSend(fsWriteQueue, &req, pdMS_TO_TICKS(1000)) != pdPASS) {
 8048038:	4b27      	ldr	r3, [pc, #156]	@ (80480d8 <FS_Request_Write+0x14c>)
 804803a:	6818      	ldr	r0, [r3, #0]
 804803c:	f107 0114 	add.w	r1, r7, #20
 8048040:	2300      	movs	r3, #0
 8048042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8048046:	f00d f923 	bl	8055290 <xQueueGenericSend>
 804804a:	4603      	mov	r3, r0
 804804c:	2b01      	cmp	r3, #1
 804804e:	d017      	beq.n	8048080 <FS_Request_Write+0xf4>
        if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048050:	4b1e      	ldr	r3, [pc, #120]	@ (80480cc <FS_Request_Write+0x140>)
 8048052:	681b      	ldr	r3, [r3, #0]
 8048054:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048058:	4618      	mov	r0, r3
 804805a:	f00d fbbd 	bl	80557d8 <xQueueSemaphoreTake>
 804805e:	4603      	mov	r3, r0
 8048060:	2b01      	cmp	r3, #1
 8048062:	d10b      	bne.n	804807c <FS_Request_Write+0xf0>
            slotInUse[slot] = 0;
 8048064:	4a1a      	ldr	r2, [pc, #104]	@ (80480d0 <FS_Request_Write+0x144>)
 8048066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8048068:	4413      	add	r3, r2
 804806a:	2200      	movs	r2, #0
 804806c:	701a      	strb	r2, [r3, #0]
            xSemaphoreGive(fsSlotMutex);
 804806e:	4b17      	ldr	r3, [pc, #92]	@ (80480cc <FS_Request_Write+0x140>)
 8048070:	6818      	ldr	r0, [r3, #0]
 8048072:	2300      	movs	r3, #0
 8048074:	2200      	movs	r2, #0
 8048076:	2100      	movs	r1, #0
 8048078:	f00d f90a 	bl	8055290 <xQueueGenericSend>
        }
        return E_ERROR;
 804807c:	2301      	movs	r3, #1
 804807e:	e021      	b.n	80480c4 <FS_Request_Write+0x138>
    }

    uint32_t result;
    xTaskNotifyWait(0, 0, &result, pdMS_TO_TICKS(5000));
 8048080:	f107 0310 	add.w	r3, r7, #16
 8048084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8048088:	9200      	str	r2, [sp, #0]
 804808a:	2200      	movs	r2, #0
 804808c:	2100      	movs	r1, #0
 804808e:	2000      	movs	r0, #0
 8048090:	f00f fd2a 	bl	8057ae8 <xTaskGenericNotifyWait>

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048094:	4b0d      	ldr	r3, [pc, #52]	@ (80480cc <FS_Request_Write+0x140>)
 8048096:	681b      	ldr	r3, [r3, #0]
 8048098:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 804809c:	4618      	mov	r0, r3
 804809e:	f00d fb9b 	bl	80557d8 <xQueueSemaphoreTake>
 80480a2:	4603      	mov	r3, r0
 80480a4:	2b01      	cmp	r3, #1
 80480a6:	d10b      	bne.n	80480c0 <FS_Request_Write+0x134>
        slotInUse[slot] = 0;
 80480a8:	4a09      	ldr	r2, [pc, #36]	@ (80480d0 <FS_Request_Write+0x144>)
 80480aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80480ac:	4413      	add	r3, r2
 80480ae:	2200      	movs	r2, #0
 80480b0:	701a      	strb	r2, [r3, #0]
        xSemaphoreGive(fsSlotMutex);
 80480b2:	4b06      	ldr	r3, [pc, #24]	@ (80480cc <FS_Request_Write+0x140>)
 80480b4:	6818      	ldr	r0, [r3, #0]
 80480b6:	2300      	movs	r3, #0
 80480b8:	2200      	movs	r2, #0
 80480ba:	2100      	movs	r1, #0
 80480bc:	f00d f8e8 	bl	8055290 <xQueueGenericSend>
    }

    return (Std_ReturnType)result;
 80480c0:	693b      	ldr	r3, [r7, #16]
 80480c2:	b2db      	uxtb	r3, r3
}
 80480c4:	4618      	mov	r0, r3
 80480c6:	3748      	adds	r7, #72	@ 0x48
 80480c8:	46bd      	mov	sp, r7
 80480ca:	bd80      	pop	{r7, pc}
 80480cc:	2401e7a8 	.word	0x2401e7a8
 80480d0:	2401e804 	.word	0x2401e804
 80480d4:	24000728 	.word	0x24000728
 80480d8:	2401e7b0 	.word	0x2401e7b0

080480dc <Link_SDFS_Driver>:

/*************************************************
 *                   Low layer API               *
 *************************************************/
Std_ReturnType Link_SDFS_Driver(void) {
 80480dc:	b580      	push	{r7, lr}
 80480de:	b082      	sub	sp, #8
 80480e0:	af00      	add	r7, sp, #0
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    const Diskio_drvTypeDef *mmc1_driver = MMC1_GetDriver();
 80480e2:	f00c fd19 	bl	8054b18 <MMC1_GetDriver>
 80480e6:	6078      	str	r0, [r7, #4]
    if (FATFS_LinkDriver(mmc1_driver, MMC1Path) == 0) {
 80480e8:	490b      	ldr	r1, [pc, #44]	@ (8048118 <Link_SDFS_Driver+0x3c>)
 80480ea:	6878      	ldr	r0, [r7, #4]
 80480ec:	f00c fb06 	bl	80546fc <FATFS_LinkDriver>
 80480f0:	4603      	mov	r3, r0
 80480f2:	2b00      	cmp	r3, #0
 80480f4:	d10b      	bne.n	804810e <Link_SDFS_Driver+0x32>
        int ret1 = f_mount(&MMC1FatFs, (TCHAR const*)MMC1Path, 1);
 80480f6:	2201      	movs	r2, #1
 80480f8:	4907      	ldr	r1, [pc, #28]	@ (8048118 <Link_SDFS_Driver+0x3c>)
 80480fa:	4808      	ldr	r0, [pc, #32]	@ (804811c <Link_SDFS_Driver+0x40>)
 80480fc:	f00a ff4e 	bl	8052f9c <f_mount>
 8048100:	4603      	mov	r3, r0
 8048102:	603b      	str	r3, [r7, #0]
        if (ret1 != FR_OK) {
 8048104:	683b      	ldr	r3, [r7, #0]
 8048106:	2b00      	cmp	r3, #0
 8048108:	d001      	beq.n	804810e <Link_SDFS_Driver+0x32>
            return E_ERROR;
 804810a:	2301      	movs	r3, #1
 804810c:	e000      	b.n	8048110 <Link_SDFS_Driver+0x34>
        if (ret2 != FR_OK) {
            return E_ERROR;
        }
    }
#endif
    return E_OK;
 804810e:	2300      	movs	r3, #0
}
 8048110:	4618      	mov	r0, r3
 8048112:	3708      	adds	r7, #8
 8048114:	46bd      	mov	sp, r7
 8048116:	bd80      	pop	{r7, pc}
 8048118:	2401e7ac 	.word	0x2401e7ac
 804811c:	24000000 	.word	0x24000000

08048120 <Cat_SDFS>:

int Cat_SDFS(EmbeddedCli *cli, const char *filename) {
 8048120:	b590      	push	{r4, r7, lr}
 8048122:	f5ad 7d5d 	sub.w	sp, sp, #884	@ 0x374
 8048126:	af02      	add	r7, sp, #8
 8048128:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 804812c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8048130:	6018      	str	r0, [r3, #0]
 8048132:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048136:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 804813a:	6019      	str	r1, [r3, #0]
 804813c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048140:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8048144:	331f      	adds	r3, #31
 8048146:	095b      	lsrs	r3, r3, #5
 8048148:	015c      	lsls	r4, r3, #5
    FRESULT res;
    ALIGN_32BYTES(uint8_t rtext[96]);
    UINT bytesread;
    char buffer[128];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 804814a:	4b5d      	ldr	r3, [pc, #372]	@ (80482c0 <Cat_SDFS+0x1a0>)
 804814c:	681b      	ldr	r3, [r3, #0]
 804814e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048152:	4618      	mov	r0, r3
 8048154:	f00d fb40 	bl	80557d8 <xQueueSemaphoreTake>
 8048158:	4603      	mov	r3, r0
 804815a:	2b01      	cmp	r3, #1
 804815c:	d00a      	beq.n	8048174 <Cat_SDFS+0x54>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 804815e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048162:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8048166:	4957      	ldr	r1, [pc, #348]	@ (80482c4 <Cat_SDFS+0x1a4>)
 8048168:	6818      	ldr	r0, [r3, #0]
 804816a:	f7fd ffa9 	bl	80460c0 <embeddedCliPrint>
        return -1;
 804816e:	f04f 33ff 	mov.w	r3, #4294967295
 8048172:	e0a0      	b.n	80482b6 <Cat_SDFS+0x196>
    }

    res = f_open(&file, filename, FA_READ);
 8048174:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048178:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 804817c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8048180:	2201      	movs	r2, #1
 8048182:	6819      	ldr	r1, [r3, #0]
 8048184:	f00a ff80 	bl	8053088 <f_open>
 8048188:	4603      	mov	r3, r0
 804818a:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
    if (res != FR_OK) {
 804818e:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8048192:	2b00      	cmp	r3, #0
 8048194:	d021      	beq.n	80481da <Cat_SDFS+0xba>
        snprintf(buffer, sizeof(buffer), "Failed to open file %s: %d", filename, res);
 8048196:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 804819a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 804819e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80481a2:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80481a6:	9200      	str	r2, [sp, #0]
 80481a8:	681b      	ldr	r3, [r3, #0]
 80481aa:	4a47      	ldr	r2, [pc, #284]	@ (80482c8 <Cat_SDFS+0x1a8>)
 80481ac:	2180      	movs	r1, #128	@ 0x80
 80481ae:	f021 fa17 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80481b2:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80481b6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80481ba:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80481be:	4611      	mov	r1, r2
 80481c0:	6818      	ldr	r0, [r3, #0]
 80481c2:	f7fd ff7d 	bl	80460c0 <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 80481c6:	4b3e      	ldr	r3, [pc, #248]	@ (80482c0 <Cat_SDFS+0x1a0>)
 80481c8:	6818      	ldr	r0, [r3, #0]
 80481ca:	2300      	movs	r3, #0
 80481cc:	2200      	movs	r2, #0
 80481ce:	2100      	movs	r1, #0
 80481d0:	f00d f85e 	bl	8055290 <xQueueGenericSend>
        return -1;
 80481d4:	f04f 33ff 	mov.w	r3, #4294967295
 80481d8:	e06d      	b.n	80482b6 <Cat_SDFS+0x196>
    }

    embeddedCliPrint(cli, "");
 80481da:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80481de:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80481e2:	493a      	ldr	r1, [pc, #232]	@ (80482cc <Cat_SDFS+0x1ac>)
 80481e4:	6818      	ldr	r0, [r3, #0]
 80481e6:	f7fd ff6b 	bl	80460c0 <embeddedCliPrint>
    do {
        memset(rtext, 0, sizeof(rtext));
 80481ea:	2260      	movs	r2, #96	@ 0x60
 80481ec:	2100      	movs	r1, #0
 80481ee:	4620      	mov	r0, r4
 80481f0:	f021 faf8 	bl	80697e4 <memset>
        res = f_read(&file, rtext, sizeof(rtext) - 1, &bytesread);
 80481f4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80481f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80481fc:	225f      	movs	r2, #95	@ 0x5f
 80481fe:	4621      	mov	r1, r4
 8048200:	f00b faec 	bl	80537dc <f_read>
 8048204:	4603      	mov	r3, r0
 8048206:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
        if (res != FR_OK) {
 804820a:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 804820e:	2b00      	cmp	r3, #0
 8048210:	d026      	beq.n	8048260 <Cat_SDFS+0x140>
            snprintf(buffer, sizeof(buffer), "Failed to read file %s: %d", filename, res);
 8048212:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 8048216:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 804821a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 804821e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8048222:	9200      	str	r2, [sp, #0]
 8048224:	681b      	ldr	r3, [r3, #0]
 8048226:	4a2a      	ldr	r2, [pc, #168]	@ (80482d0 <Cat_SDFS+0x1b0>)
 8048228:	2180      	movs	r1, #128	@ 0x80
 804822a:	f021 f9d9 	bl	80695e0 <sniprintf>
            embeddedCliPrint(cli, buffer);
 804822e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8048232:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048236:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 804823a:	4611      	mov	r1, r2
 804823c:	6818      	ldr	r0, [r3, #0]
 804823e:	f7fd ff3f 	bl	80460c0 <embeddedCliPrint>
            f_close(&file);
 8048242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8048246:	4618      	mov	r0, r3
 8048248:	f00c f808 	bl	805425c <f_close>
            xSemaphoreGive(fsMutex);
 804824c:	4b1c      	ldr	r3, [pc, #112]	@ (80482c0 <Cat_SDFS+0x1a0>)
 804824e:	6818      	ldr	r0, [r3, #0]
 8048250:	2300      	movs	r3, #0
 8048252:	2200      	movs	r2, #0
 8048254:	2100      	movs	r1, #0
 8048256:	f00d f81b 	bl	8055290 <xQueueGenericSend>
            return -1;
 804825a:	f04f 33ff 	mov.w	r3, #4294967295
 804825e:	e02a      	b.n	80482b6 <Cat_SDFS+0x196>
        }
        rtext[bytesread] = '\0';
 8048260:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048264:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8048268:	681b      	ldr	r3, [r3, #0]
 804826a:	2200      	movs	r2, #0
 804826c:	54e2      	strb	r2, [r4, r3]
        embeddedCliPrint(cli, (char *)rtext);
 804826e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048272:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8048276:	4621      	mov	r1, r4
 8048278:	6818      	ldr	r0, [r3, #0]
 804827a:	f7fd ff21 	bl	80460c0 <embeddedCliPrint>
    } while (bytesread > 0);
 804827e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048282:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8048286:	681b      	ldr	r3, [r3, #0]
 8048288:	2b00      	cmp	r3, #0
 804828a:	d1ae      	bne.n	80481ea <Cat_SDFS+0xca>

    embeddedCliPrint(cli, "");
 804828c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8048290:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8048294:	490d      	ldr	r1, [pc, #52]	@ (80482cc <Cat_SDFS+0x1ac>)
 8048296:	6818      	ldr	r0, [r3, #0]
 8048298:	f7fd ff12 	bl	80460c0 <embeddedCliPrint>
    f_close(&file);
 804829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80482a0:	4618      	mov	r0, r3
 80482a2:	f00b ffdb 	bl	805425c <f_close>
    xSemaphoreGive(fsMutex);
 80482a6:	4b06      	ldr	r3, [pc, #24]	@ (80482c0 <Cat_SDFS+0x1a0>)
 80482a8:	6818      	ldr	r0, [r3, #0]
 80482aa:	2300      	movs	r3, #0
 80482ac:	2200      	movs	r2, #0
 80482ae:	2100      	movs	r1, #0
 80482b0:	f00c ffee 	bl	8055290 <xQueueGenericSend>
    return 0;
 80482b4:	2300      	movs	r3, #0
}
 80482b6:	4618      	mov	r0, r3
 80482b8:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 80482bc:	46bd      	mov	sp, r7
 80482be:	bd90      	pop	{r4, r7, pc}
 80482c0:	2401e7a4 	.word	0x2401e7a4
 80482c4:	0806d298 	.word	0x0806d298
 80482c8:	0806d2b4 	.word	0x0806d2b4
 80482cc:	0806d2d0 	.word	0x0806d2d0
 80482d0:	0806d2d4 	.word	0x0806d2d4

080482d4 <Vim_SDFS>:

int Vim_SDFS(EmbeddedCli *cli, const char *filename, const char *content) {
 80482d4:	b590      	push	{r4, r7, lr}
 80482d6:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 80482da:	af02      	add	r7, sp, #8
 80482dc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80482e0:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80482e4:	6018      	str	r0, [r3, #0]
 80482e6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80482ea:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80482ee:	6019      	str	r1, [r3, #0]
 80482f0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80482f4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80482f8:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT res;
    char buffer[128];
    UINT byteswritten;

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80482fa:	4b67      	ldr	r3, [pc, #412]	@ (8048498 <Vim_SDFS+0x1c4>)
 80482fc:	681b      	ldr	r3, [r3, #0]
 80482fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048302:	4618      	mov	r0, r3
 8048304:	f00d fa68 	bl	80557d8 <xQueueSemaphoreTake>
 8048308:	4603      	mov	r3, r0
 804830a:	2b01      	cmp	r3, #1
 804830c:	d00a      	beq.n	8048324 <Vim_SDFS+0x50>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 804830e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048312:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8048316:	4961      	ldr	r1, [pc, #388]	@ (804849c <Vim_SDFS+0x1c8>)
 8048318:	6818      	ldr	r0, [r3, #0]
 804831a:	f7fd fed1 	bl	80460c0 <embeddedCliPrint>
        return -1;
 804831e:	f04f 33ff 	mov.w	r3, #4294967295
 8048322:	e0b4      	b.n	804848e <Vim_SDFS+0x1ba>
    }

    res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE);
 8048324:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048328:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 804832c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8048330:	2232      	movs	r2, #50	@ 0x32
 8048332:	6819      	ldr	r1, [r3, #0]
 8048334:	f00a fea8 	bl	8053088 <f_open>
 8048338:	4603      	mov	r3, r0
 804833a:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
    if (res != FR_OK) {
 804833e:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 8048342:	2b00      	cmp	r3, #0
 8048344:	d021      	beq.n	804838a <Vim_SDFS+0xb6>
        snprintf(buffer, sizeof(buffer), "Failed to open or create file %s: %d", filename, res);
 8048346:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 804834a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 804834e:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8048352:	f107 0018 	add.w	r0, r7, #24
 8048356:	9200      	str	r2, [sp, #0]
 8048358:	681b      	ldr	r3, [r3, #0]
 804835a:	4a51      	ldr	r2, [pc, #324]	@ (80484a0 <Vim_SDFS+0x1cc>)
 804835c:	2180      	movs	r1, #128	@ 0x80
 804835e:	f021 f93f 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8048362:	f107 0218 	add.w	r2, r7, #24
 8048366:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 804836a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 804836e:	4611      	mov	r1, r2
 8048370:	6818      	ldr	r0, [r3, #0]
 8048372:	f7fd fea5 	bl	80460c0 <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 8048376:	4b48      	ldr	r3, [pc, #288]	@ (8048498 <Vim_SDFS+0x1c4>)
 8048378:	6818      	ldr	r0, [r3, #0]
 804837a:	2300      	movs	r3, #0
 804837c:	2200      	movs	r2, #0
 804837e:	2100      	movs	r1, #0
 8048380:	f00c ff86 	bl	8055290 <xQueueGenericSend>
        return -1;
 8048384:	f04f 33ff 	mov.w	r3, #4294967295
 8048388:	e081      	b.n	804848e <Vim_SDFS+0x1ba>
    }

    if (content && strlen(content) > 0) {
 804838a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 804838e:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8048392:	681b      	ldr	r3, [r3, #0]
 8048394:	2b00      	cmp	r3, #0
 8048396:	d058      	beq.n	804844a <Vim_SDFS+0x176>
 8048398:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 804839c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80483a0:	681b      	ldr	r3, [r3, #0]
 80483a2:	781b      	ldrb	r3, [r3, #0]
 80483a4:	2b00      	cmp	r3, #0
 80483a6:	d050      	beq.n	804844a <Vim_SDFS+0x176>
        res = f_write(&file, content, strlen(content), &byteswritten);
 80483a8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80483ac:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80483b0:	6818      	ldr	r0, [r3, #0]
 80483b2:	f7f7 ff9f 	bl	80402f4 <strlen>
 80483b6:	4604      	mov	r4, r0
 80483b8:	f107 0314 	add.w	r3, r7, #20
 80483bc:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 80483c0:	f5a2 713d 	sub.w	r1, r2, #756	@ 0x2f4
 80483c4:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80483c8:	4622      	mov	r2, r4
 80483ca:	6809      	ldr	r1, [r1, #0]
 80483cc:	f00b fbad 	bl	8053b2a <f_write>
 80483d0:	4603      	mov	r3, r0
 80483d2:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
        if (res != FR_OK || byteswritten != strlen(content)) {
 80483d6:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 80483da:	2b00      	cmp	r3, #0
 80483dc:	d10e      	bne.n	80483fc <Vim_SDFS+0x128>
 80483de:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80483e2:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80483e6:	6818      	ldr	r0, [r3, #0]
 80483e8:	f7f7 ff84 	bl	80402f4 <strlen>
 80483ec:	4602      	mov	r2, r0
 80483ee:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80483f2:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80483f6:	681b      	ldr	r3, [r3, #0]
 80483f8:	429a      	cmp	r2, r3
 80483fa:	d026      	beq.n	804844a <Vim_SDFS+0x176>
            snprintf(buffer, sizeof(buffer), "Failed to write to file %s: %d", filename, res);
 80483fc:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 8048400:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048404:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8048408:	f107 0018 	add.w	r0, r7, #24
 804840c:	9200      	str	r2, [sp, #0]
 804840e:	681b      	ldr	r3, [r3, #0]
 8048410:	4a24      	ldr	r2, [pc, #144]	@ (80484a4 <Vim_SDFS+0x1d0>)
 8048412:	2180      	movs	r1, #128	@ 0x80
 8048414:	f021 f8e4 	bl	80695e0 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8048418:	f107 0218 	add.w	r2, r7, #24
 804841c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048420:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8048424:	4611      	mov	r1, r2
 8048426:	6818      	ldr	r0, [r3, #0]
 8048428:	f7fd fe4a 	bl	80460c0 <embeddedCliPrint>
            f_close(&file);
 804842c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8048430:	4618      	mov	r0, r3
 8048432:	f00b ff13 	bl	805425c <f_close>
            xSemaphoreGive(fsMutex);
 8048436:	4b18      	ldr	r3, [pc, #96]	@ (8048498 <Vim_SDFS+0x1c4>)
 8048438:	6818      	ldr	r0, [r3, #0]
 804843a:	2300      	movs	r3, #0
 804843c:	2200      	movs	r2, #0
 804843e:	2100      	movs	r1, #0
 8048440:	f00c ff26 	bl	8055290 <xQueueGenericSend>
            return -1;
 8048444:	f04f 33ff 	mov.w	r3, #4294967295
 8048448:	e021      	b.n	804848e <Vim_SDFS+0x1ba>
        }
    }

    f_close(&file);
 804844a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 804844e:	4618      	mov	r0, r3
 8048450:	f00b ff04 	bl	805425c <f_close>
    xSemaphoreGive(fsMutex);
 8048454:	4b10      	ldr	r3, [pc, #64]	@ (8048498 <Vim_SDFS+0x1c4>)
 8048456:	6818      	ldr	r0, [r3, #0]
 8048458:	2300      	movs	r3, #0
 804845a:	2200      	movs	r2, #0
 804845c:	2100      	movs	r1, #0
 804845e:	f00c ff17 	bl	8055290 <xQueueGenericSend>
    snprintf(buffer, sizeof(buffer), "Successfully wrote to %s", filename);
 8048462:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048466:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 804846a:	f107 0018 	add.w	r0, r7, #24
 804846e:	681b      	ldr	r3, [r3, #0]
 8048470:	4a0d      	ldr	r2, [pc, #52]	@ (80484a8 <Vim_SDFS+0x1d4>)
 8048472:	2180      	movs	r1, #128	@ 0x80
 8048474:	f021 f8b4 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8048478:	f107 0218 	add.w	r2, r7, #24
 804847c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8048480:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8048484:	4611      	mov	r1, r2
 8048486:	6818      	ldr	r0, [r3, #0]
 8048488:	f7fd fe1a 	bl	80460c0 <embeddedCliPrint>
    return 0;
 804848c:	2300      	movs	r3, #0
}
 804848e:	4618      	mov	r0, r3
 8048490:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 8048494:	46bd      	mov	sp, r7
 8048496:	bd90      	pop	{r4, r7, pc}
 8048498:	2401e7a4 	.word	0x2401e7a4
 804849c:	0806d298 	.word	0x0806d298
 80484a0:	0806d2f0 	.word	0x0806d2f0
 80484a4:	0806d318 	.word	0x0806d318
 80484a8:	0806d338 	.word	0x0806d338

080484ac <FS_ListFiles_path>:

void FS_ListFiles_path(EmbeddedCli *cli) {
 80484ac:	b580      	push	{r7, lr}
 80484ae:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 80484b2:	af02      	add	r7, sp, #8
 80484b4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80484b8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80484bc:	6018      	str	r0, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    char *path = MMC1Path;
 80484be:	4b57      	ldr	r3, [pc, #348]	@ (804861c <FS_ListFiles_path+0x170>)
 80484c0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    char buffer[384];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80484c4:	4b56      	ldr	r3, [pc, #344]	@ (8048620 <FS_ListFiles_path+0x174>)
 80484c6:	681b      	ldr	r3, [r3, #0]
 80484c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80484cc:	4618      	mov	r0, r3
 80484ce:	f00d f983 	bl	80557d8 <xQueueSemaphoreTake>
 80484d2:	4603      	mov	r3, r0
 80484d4:	2b01      	cmp	r3, #1
 80484d6:	d008      	beq.n	80484ea <FS_ListFiles_path+0x3e>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 80484d8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80484dc:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80484e0:	4950      	ldr	r1, [pc, #320]	@ (8048624 <FS_ListFiles_path+0x178>)
 80484e2:	6818      	ldr	r0, [r3, #0]
 80484e4:	f7fd fdec 	bl	80460c0 <embeddedCliPrint>
 80484e8:	e093      	b.n	8048612 <FS_ListFiles_path+0x166>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Listing files in %s...", path);
 80484ea:	f107 0008 	add.w	r0, r7, #8
 80484ee:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80484f2:	4a4d      	ldr	r2, [pc, #308]	@ (8048628 <FS_ListFiles_path+0x17c>)
 80484f4:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80484f8:	f021 f872 	bl	80695e0 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80484fc:	f107 0208 	add.w	r2, r7, #8
 8048500:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8048504:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8048508:	4611      	mov	r1, r2
 804850a:	6818      	ldr	r0, [r3, #0]
 804850c:	f7fd fdd8 	bl	80460c0 <embeddedCliPrint>

    res = f_opendir(&dir, path);
 8048510:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8048514:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 8048518:	4618      	mov	r0, r3
 804851a:	f00b fece 	bl	80542ba <f_opendir>
 804851e:	4603      	mov	r3, r0
 8048520:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
    if (res == FR_OK) {
 8048524:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8048528:	2b00      	cmp	r3, #0
 804852a:	d155      	bne.n	80485d8 <FS_ListFiles_path+0x12c>
        while (1) {
            res = f_readdir(&dir, &fno);
 804852c:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8048530:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8048534:	4611      	mov	r1, r2
 8048536:	4618      	mov	r0, r3
 8048538:	f00c f809 	bl	805454e <f_readdir>
 804853c:	4603      	mov	r3, r0
 804853e:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
            if (res != FR_OK || fno.fname[0] == 0) break;
 8048542:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8048546:	2b00      	cmp	r3, #0
 8048548:	d140      	bne.n	80485cc <FS_ListFiles_path+0x120>
 804854a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 804854e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8048552:	7e9b      	ldrb	r3, [r3, #26]
 8048554:	2b00      	cmp	r3, #0
 8048556:	d039      	beq.n	80485cc <FS_ListFiles_path+0x120>
            if (fno.fattrib & AM_DIR) {
 8048558:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 804855c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8048560:	7b1b      	ldrb	r3, [r3, #12]
 8048562:	f003 0310 	and.w	r3, r3, #16
 8048566:	2b00      	cmp	r3, #0
 8048568:	d014      	beq.n	8048594 <FS_ListFiles_path+0xe8>
                snprintf(buffer, sizeof(buffer), "  [DIR]  %s", fno.fname);
 804856a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 804856e:	331a      	adds	r3, #26
 8048570:	f107 0008 	add.w	r0, r7, #8
 8048574:	4a2d      	ldr	r2, [pc, #180]	@ (804862c <FS_ListFiles_path+0x180>)
 8048576:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 804857a:	f021 f831 	bl	80695e0 <sniprintf>
                embeddedCliPrint(cli, buffer);
 804857e:	f107 0208 	add.w	r2, r7, #8
 8048582:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8048586:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 804858a:	4611      	mov	r1, r2
 804858c:	6818      	ldr	r0, [r3, #0]
 804858e:	f7fd fd97 	bl	80460c0 <embeddedCliPrint>
 8048592:	e7cb      	b.n	804852c <FS_ListFiles_path+0x80>
            } else {
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
                         fno.fname, (unsigned long)fno.fsize);
 8048594:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8048598:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 804859c:	e9d3 2300 	ldrd	r2, r3, [r3]
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
 80485a0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80485a4:	331a      	adds	r3, #26
 80485a6:	f107 0008 	add.w	r0, r7, #8
 80485aa:	9200      	str	r2, [sp, #0]
 80485ac:	4a20      	ldr	r2, [pc, #128]	@ (8048630 <FS_ListFiles_path+0x184>)
 80485ae:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80485b2:	f021 f815 	bl	80695e0 <sniprintf>
                embeddedCliPrint(cli, buffer);
 80485b6:	f107 0208 	add.w	r2, r7, #8
 80485ba:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80485be:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80485c2:	4611      	mov	r1, r2
 80485c4:	6818      	ldr	r0, [r3, #0]
 80485c6:	f7fd fd7b 	bl	80460c0 <embeddedCliPrint>
            res = f_readdir(&dir, &fno);
 80485ca:	e7af      	b.n	804852c <FS_ListFiles_path+0x80>
            }
        }
        f_closedir(&dir);
 80485cc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80485d0:	4618      	mov	r0, r3
 80485d2:	f00b ff91 	bl	80544f8 <f_closedir>
 80485d6:	e015      	b.n	8048604 <FS_ListFiles_path+0x158>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to open directory %s: %d", path, res);
 80485d8:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 80485dc:	f107 0008 	add.w	r0, r7, #8
 80485e0:	9300      	str	r3, [sp, #0]
 80485e2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80485e6:	4a13      	ldr	r2, [pc, #76]	@ (8048634 <FS_ListFiles_path+0x188>)
 80485e8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80485ec:	f020 fff8 	bl	80695e0 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80485f0:	f107 0208 	add.w	r2, r7, #8
 80485f4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80485f8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80485fc:	4611      	mov	r1, r2
 80485fe:	6818      	ldr	r0, [r3, #0]
 8048600:	f7fd fd5e 	bl	80460c0 <embeddedCliPrint>
    }
    xSemaphoreGive(fsMutex);
 8048604:	4b06      	ldr	r3, [pc, #24]	@ (8048620 <FS_ListFiles_path+0x174>)
 8048606:	6818      	ldr	r0, [r3, #0]
 8048608:	2300      	movs	r3, #0
 804860a:	2200      	movs	r2, #0
 804860c:	2100      	movs	r1, #0
 804860e:	f00c fe3f 	bl	8055290 <xQueueGenericSend>
}
 8048612:	f507 7740 	add.w	r7, r7, #768	@ 0x300
 8048616:	46bd      	mov	sp, r7
 8048618:	bd80      	pop	{r7, pc}
 804861a:	bf00      	nop
 804861c:	2401e7ac 	.word	0x2401e7ac
 8048620:	2401e7a4 	.word	0x2401e7a4
 8048624:	0806d298 	.word	0x0806d298
 8048628:	0806d354 	.word	0x0806d354
 804862c:	0806d36c 	.word	0x0806d36c
 8048630:	0806d378 	.word	0x0806d378
 8048634:	0806d390 	.word	0x0806d390

08048638 <MIN_ResponseCallback>:
typedef struct {
    uint8_t cmdId;
    uint8_t expectedResponseId;
} CommandInfo_t;

void MIN_ResponseCallback(uint8_t min_id, const uint8_t *payload, uint8_t len) {
 8048638:	b580      	push	{r7, lr}
 804863a:	b084      	sub	sp, #16
 804863c:	af00      	add	r7, sp, #0
 804863e:	4603      	mov	r3, r0
 8048640:	6039      	str	r1, [r7, #0]
 8048642:	71fb      	strb	r3, [r7, #7]
 8048644:	4613      	mov	r3, r2
 8048646:	71bb      	strb	r3, [r7, #6]
    CommandInfo_t cmdInfo;
    if (xQueuePeek(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 8048648:	4b10      	ldr	r3, [pc, #64]	@ (804868c <MIN_ResponseCallback+0x54>)
 804864a:	681b      	ldr	r3, [r3, #0]
 804864c:	f107 010c 	add.w	r1, r7, #12
 8048650:	2200      	movs	r2, #0
 8048652:	4618      	mov	r0, r3
 8048654:	f00d f9c6 	bl	80559e4 <xQueuePeek>
 8048658:	4603      	mov	r3, r0
 804865a:	2b01      	cmp	r3, #1
 804865c:	d112      	bne.n	8048684 <MIN_ResponseCallback+0x4c>
        if (min_id == cmdInfo.expectedResponseId) {
 804865e:	7b7b      	ldrb	r3, [r7, #13]
 8048660:	79fa      	ldrb	r2, [r7, #7]
 8048662:	429a      	cmp	r2, r3
 8048664:	d10e      	bne.n	8048684 <MIN_ResponseCallback+0x4c>
            xQueueReceive(pendingCommandsQueue, &cmdInfo, 0);
 8048666:	4b09      	ldr	r3, [pc, #36]	@ (804868c <MIN_ResponseCallback+0x54>)
 8048668:	681b      	ldr	r3, [r3, #0]
 804866a:	f107 010c 	add.w	r1, r7, #12
 804866e:	2200      	movs	r2, #0
 8048670:	4618      	mov	r0, r3
 8048672:	f00c ffc9 	bl	8055608 <xQueueReceive>
            xSemaphoreGive(responseSemaphore);
 8048676:	4b06      	ldr	r3, [pc, #24]	@ (8048690 <MIN_ResponseCallback+0x58>)
 8048678:	6818      	ldr	r0, [r3, #0]
 804867a:	2300      	movs	r3, #0
 804867c:	2200      	movs	r2, #0
 804867e:	2100      	movs	r1, #0
 8048680:	f00c fe06 	bl	8055290 <xQueueGenericSend>
        }
    }
}
 8048684:	bf00      	nop
 8048686:	3710      	adds	r7, #16
 8048688:	46bd      	mov	sp, r7
 804868a:	bd80      	pop	{r7, pc}
 804868c:	2401ea24 	.word	0x2401ea24
 8048690:	2401ea20 	.word	0x2401ea20

08048694 <ClearPendingCommand>:

static void ClearPendingCommand(void) {
 8048694:	b580      	push	{r7, lr}
 8048696:	b09c      	sub	sp, #112	@ 0x70
 8048698:	af02      	add	r7, sp, #8
    CommandInfo_t cmdInfo;
    if (xQueueReceive(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 804869a:	4b10      	ldr	r3, [pc, #64]	@ (80486dc <ClearPendingCommand+0x48>)
 804869c:	681b      	ldr	r3, [r3, #0]
 804869e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80486a2:	2200      	movs	r2, #0
 80486a4:	4618      	mov	r0, r3
 80486a6:	f00c ffaf 	bl	8055608 <xQueueReceive>
 80486aa:	4603      	mov	r3, r0
 80486ac:	2b01      	cmp	r3, #1
 80486ae:	d110      	bne.n	80486d2 <ClearPendingCommand+0x3e>
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 80486b0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 80486b4:	461a      	mov	r2, r3
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 80486b6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 80486ba:	4638      	mov	r0, r7
 80486bc:	9300      	str	r3, [sp, #0]
 80486be:	4613      	mov	r3, r2
 80486c0:	4a07      	ldr	r2, [pc, #28]	@ (80486e0 <ClearPendingCommand+0x4c>)
 80486c2:	2164      	movs	r1, #100	@ 0x64
 80486c4:	f020 ff8c 	bl	80695e0 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 80486c8:	463b      	mov	r3, r7
 80486ca:	4619      	mov	r1, r3
 80486cc:	4805      	ldr	r0, [pc, #20]	@ (80486e4 <ClearPendingCommand+0x50>)
 80486ce:	f7fa f92f 	bl	8042930 <UART_Driver_SendString>
    }
}
 80486d2:	bf00      	nop
 80486d4:	3768      	adds	r7, #104	@ 0x68
 80486d6:	46bd      	mov	sp, r7
 80486d8:	bd80      	pop	{r7, pc}
 80486da:	bf00      	nop
 80486dc:	2401ea24 	.word	0x2401ea24
 80486e0:	0806d3b0 	.word	0x0806d3b0
 80486e4:	40004400 	.word	0x40004400

080486e8 <MIN_Timeout_Handler>:

void MIN_Timeout_Handler(MIN_Context_t *ctx) {
 80486e8:	b580      	push	{r7, lr}
 80486ea:	b082      	sub	sp, #8
 80486ec:	af00      	add	r7, sp, #0
 80486ee:	6078      	str	r0, [r7, #4]
    SYSLOG_ERROR_POLL("MIN-Timeout!");
 80486f0:	2201      	movs	r2, #1
 80486f2:	4904      	ldr	r1, [pc, #16]	@ (8048704 <MIN_Timeout_Handler+0x1c>)
 80486f4:	2004      	movs	r0, #4
 80486f6:	f003 fa5b 	bl	804bbb0 <syslog_log>
}
 80486fa:	bf00      	nop
 80486fc:	3708      	adds	r7, #8
 80486fe:	46bd      	mov	sp, r7
 8048700:	bd80      	pop	{r7, pc}
 8048702:	bf00      	nop
 8048704:	0806d3e8 	.word	0x0806d3e8

08048708 <MIN_Process_Init>:

void MIN_Process_Init(void){
 8048708:	b580      	push	{r7, lr}
 804870a:	af00      	add	r7, sp, #0
	MIN_Context_Init(&OBC_MinCtx, EXP_PORT);
 804870c:	2100      	movs	r1, #0
 804870e:	4811      	ldr	r0, [pc, #68]	@ (8048754 <MIN_Process_Init+0x4c>)
 8048710:	f011 fe5e 	bl	805a3d0 <MIN_Context_Init>
	MIN_RegisterTimeoutCallback(&OBC_MinCtx, MIN_Timeout_Handler);
 8048714:	4910      	ldr	r1, [pc, #64]	@ (8048758 <MIN_Process_Init+0x50>)
 8048716:	480f      	ldr	r0, [pc, #60]	@ (8048754 <MIN_Process_Init+0x4c>)
 8048718:	f011 fea7 	bl	805a46a <MIN_RegisterTimeoutCallback>

	responseSemaphore = xSemaphoreCreateBinary();
 804871c:	2203      	movs	r2, #3
 804871e:	2100      	movs	r1, #0
 8048720:	2001      	movs	r0, #1
 8048722:	f00c fd0a 	bl	805513a <xQueueGenericCreate>
 8048726:	4603      	mov	r3, r0
 8048728:	4a0c      	ldr	r2, [pc, #48]	@ (804875c <MIN_Process_Init+0x54>)
 804872a:	6013      	str	r3, [r2, #0]
	pendingCommandsQueue = xQueueCreate(10, sizeof(CommandInfo_t));
 804872c:	2200      	movs	r2, #0
 804872e:	2102      	movs	r1, #2
 8048730:	200a      	movs	r0, #10
 8048732:	f00c fd02 	bl	805513a <xQueueGenericCreate>
 8048736:	4603      	mov	r3, r0
 8048738:	4a09      	ldr	r2, [pc, #36]	@ (8048760 <MIN_Process_Init+0x58>)
 804873a:	6013      	str	r3, [r2, #0]

	MIN_Handler_Init();
 804873c:	f011 ff72 	bl	805a624 <MIN_Handler_Init>
	MIN_RegisterResponseHandler(MIN_ResponseCallback);
 8048740:	4808      	ldr	r0, [pc, #32]	@ (8048764 <MIN_Process_Init+0x5c>)
 8048742:	f011 ff11 	bl	805a568 <MIN_RegisterResponseHandler>

	Sys_Boardcast(E_OK, LOG_INFOR, "MIN Process Init!");
 8048746:	4a08      	ldr	r2, [pc, #32]	@ (8048768 <MIN_Process_Init+0x60>)
 8048748:	2100      	movs	r1, #0
 804874a:	2000      	movs	r0, #0
 804874c:	f003 f87e 	bl	804b84c <Sys_Boardcast>
}
 8048750:	bf00      	nop
 8048752:	bd80      	pop	{r7, pc}
 8048754:	2401e810 	.word	0x2401e810
 8048758:	080486e9 	.word	0x080486e9
 804875c:	2401ea20 	.word	0x2401ea20
 8048760:	2401ea24 	.word	0x2401ea24
 8048764:	08048639 	.word	0x08048639
 8048768:	0806d3f8 	.word	0x0806d3f8

0804876c <MIN_Processing>:

void MIN_Processing(void){
 804876c:	b580      	push	{r7, lr}
 804876e:	b082      	sub	sp, #8
 8048770:	af00      	add	r7, sp, #0
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8048772:	e00f      	b.n	8048794 <MIN_Processing+0x28>
        int data = UART_DMA_Driver_Read(UART_EXP);
 8048774:	480f      	ldr	r0, [pc, #60]	@ (80487b4 <MIN_Processing+0x48>)
 8048776:	f7fa f9df 	bl	8042b38 <UART_DMA_Driver_Read>
 804877a:	6078      	str	r0, [r7, #4]
        if (data >= 0) {
 804877c:	687b      	ldr	r3, [r7, #4]
 804877e:	2b00      	cmp	r3, #0
 8048780:	db08      	blt.n	8048794 <MIN_Processing+0x28>
            uint8_t byte = (uint8_t)data;
 8048782:	687b      	ldr	r3, [r7, #4]
 8048784:	b2db      	uxtb	r3, r3
 8048786:	70fb      	strb	r3, [r7, #3]
            MIN_App_Poll(&OBC_MinCtx, &byte, 1);
 8048788:	1cfb      	adds	r3, r7, #3
 804878a:	2201      	movs	r2, #1
 804878c:	4619      	mov	r1, r3
 804878e:	480a      	ldr	r0, [pc, #40]	@ (80487b8 <MIN_Processing+0x4c>)
 8048790:	f011 fe7a 	bl	805a488 <MIN_App_Poll>
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8048794:	4807      	ldr	r0, [pc, #28]	@ (80487b4 <MIN_Processing+0x48>)
 8048796:	f7fa f9f0 	bl	8042b7a <UART_DMA_Driver_IsDataAvailable>
 804879a:	4603      	mov	r3, r0
 804879c:	2b00      	cmp	r3, #0
 804879e:	d1e9      	bne.n	8048774 <MIN_Processing+0x8>
        }
    }
	MIN_App_Poll(&OBC_MinCtx, NULL, 0);
 80487a0:	2200      	movs	r2, #0
 80487a2:	2100      	movs	r1, #0
 80487a4:	4804      	ldr	r0, [pc, #16]	@ (80487b8 <MIN_Processing+0x4c>)
 80487a6:	f011 fe6f 	bl	805a488 <MIN_App_Poll>
}
 80487aa:	bf00      	nop
 80487ac:	3708      	adds	r7, #8
 80487ae:	46bd      	mov	sp, r7
 80487b0:	bd80      	pop	{r7, pc}
 80487b2:	bf00      	nop
 80487b4:	40007800 	.word	0x40007800
 80487b8:	2401e810 	.word	0x2401e810

080487bc <MIN_Send_PLEASE_RESET_CMD>:

// =================================================================
// Command Sending Functions
// =================================================================
void MIN_Send_PLEASE_RESET_CMD(void) {
 80487bc:	b580      	push	{r7, lr}
 80487be:	b082      	sub	sp, #8
 80487c0:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF};
 80487c2:	23ff      	movs	r3, #255	@ 0xff
 80487c4:	713b      	strb	r3, [r7, #4]

    MIN_Send(&OBC_MinCtx, PLEASE_RESET_CMD, payload, sizeof(payload));
 80487c6:	1d3a      	adds	r2, r7, #4
 80487c8:	2301      	movs	r3, #1
 80487ca:	2100      	movs	r1, #0
 80487cc:	4814      	ldr	r0, [pc, #80]	@ (8048820 <MIN_Send_PLEASE_RESET_CMD+0x64>)
 80487ce:	f011 fead 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {PLEASE_RESET_CMD, PLEASE_RESET_ACK};
 80487d2:	2300      	movs	r3, #0
 80487d4:	703b      	strb	r3, [r7, #0]
 80487d6:	2301      	movs	r3, #1
 80487d8:	707b      	strb	r3, [r7, #1]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 80487da:	4b12      	ldr	r3, [pc, #72]	@ (8048824 <MIN_Send_PLEASE_RESET_CMD+0x68>)
 80487dc:	6818      	ldr	r0, [r3, #0]
 80487de:	4639      	mov	r1, r7
 80487e0:	2300      	movs	r3, #0
 80487e2:	f04f 32ff 	mov.w	r2, #4294967295
 80487e6:	f00c fd53 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80487ea:	4b0f      	ldr	r3, [pc, #60]	@ (8048828 <MIN_Send_PLEASE_RESET_CMD+0x6c>)
 80487ec:	681b      	ldr	r3, [r3, #0]
 80487ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80487f2:	4618      	mov	r0, r3
 80487f4:	f00c fff0 	bl	80557d8 <xQueueSemaphoreTake>
 80487f8:	4603      	mov	r3, r0
 80487fa:	2b01      	cmp	r3, #1
 80487fc:	d105      	bne.n	804880a <MIN_Send_PLEASE_RESET_CMD+0x4e>
        SYSLOG_NOTICE("Response OK - PLEASE_RESET_CMD");
 80487fe:	2200      	movs	r2, #0
 8048800:	490a      	ldr	r1, [pc, #40]	@ (804882c <MIN_Send_PLEASE_RESET_CMD+0x70>)
 8048802:	2002      	movs	r0, #2
 8048804:	f003 f9d4 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout PLEASE_RESET_CMD");
        ClearPendingCommand();
    }
}
 8048808:	e006      	b.n	8048818 <MIN_Send_PLEASE_RESET_CMD+0x5c>
        SYSLOG_ERROR("Timeout PLEASE_RESET_CMD");
 804880a:	2200      	movs	r2, #0
 804880c:	4908      	ldr	r1, [pc, #32]	@ (8048830 <MIN_Send_PLEASE_RESET_CMD+0x74>)
 804880e:	2004      	movs	r0, #4
 8048810:	f003 f9ce 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048814:	f7ff ff3e 	bl	8048694 <ClearPendingCommand>
}
 8048818:	bf00      	nop
 804881a:	3708      	adds	r7, #8
 804881c:	46bd      	mov	sp, r7
 804881e:	bd80      	pop	{r7, pc}
 8048820:	2401e810 	.word	0x2401e810
 8048824:	2401ea24 	.word	0x2401ea24
 8048828:	2401ea20 	.word	0x2401ea20
 804882c:	0806d40c 	.word	0x0806d40c
 8048830:	0806d42c 	.word	0x0806d42c

08048834 <MIN_Send_TEST_CONNECTION_CMD>:

void MIN_Send_TEST_CONNECTION_CMD(uint32_t value) {
 8048834:	b580      	push	{r7, lr}
 8048836:	b084      	sub	sp, #16
 8048838:	af00      	add	r7, sp, #0
 804883a:	6078      	str	r0, [r7, #4]
    uint8_t payload[4] = {0};
 804883c:	2300      	movs	r3, #0
 804883e:	60fb      	str	r3, [r7, #12]
    // Big-endian packing [3210]
    payload[3] = (uint8_t)((value >> 24) & 0xFF);
 8048840:	687b      	ldr	r3, [r7, #4]
 8048842:	0e1b      	lsrs	r3, r3, #24
 8048844:	b2db      	uxtb	r3, r3
 8048846:	73fb      	strb	r3, [r7, #15]
    payload[2] = (uint8_t)((value >> 16) & 0xFF);
 8048848:	687b      	ldr	r3, [r7, #4]
 804884a:	0c1b      	lsrs	r3, r3, #16
 804884c:	b2db      	uxtb	r3, r3
 804884e:	73bb      	strb	r3, [r7, #14]
    payload[1] = (uint8_t)((value >> 8) & 0xFF);
 8048850:	687b      	ldr	r3, [r7, #4]
 8048852:	0a1b      	lsrs	r3, r3, #8
 8048854:	b2db      	uxtb	r3, r3
 8048856:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)((value & 0xFF));
 8048858:	687b      	ldr	r3, [r7, #4]
 804885a:	b2db      	uxtb	r3, r3
 804885c:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, TEST_CONNECTION_CMD, payload, sizeof(payload));
 804885e:	f107 020c 	add.w	r2, r7, #12
 8048862:	2304      	movs	r3, #4
 8048864:	2102      	movs	r1, #2
 8048866:	4815      	ldr	r0, [pc, #84]	@ (80488bc <MIN_Send_TEST_CONNECTION_CMD+0x88>)
 8048868:	f011 fe60 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {TEST_CONNECTION_CMD, TEST_CONNECTION_ACK};
 804886c:	4b14      	ldr	r3, [pc, #80]	@ (80488c0 <MIN_Send_TEST_CONNECTION_CMD+0x8c>)
 804886e:	881b      	ldrh	r3, [r3, #0]
 8048870:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048872:	4b14      	ldr	r3, [pc, #80]	@ (80488c4 <MIN_Send_TEST_CONNECTION_CMD+0x90>)
 8048874:	6818      	ldr	r0, [r3, #0]
 8048876:	f107 0108 	add.w	r1, r7, #8
 804887a:	2300      	movs	r3, #0
 804887c:	f04f 32ff 	mov.w	r2, #4294967295
 8048880:	f00c fd06 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048884:	4b10      	ldr	r3, [pc, #64]	@ (80488c8 <MIN_Send_TEST_CONNECTION_CMD+0x94>)
 8048886:	681b      	ldr	r3, [r3, #0]
 8048888:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 804888c:	4618      	mov	r0, r3
 804888e:	f00c ffa3 	bl	80557d8 <xQueueSemaphoreTake>
 8048892:	4603      	mov	r3, r0
 8048894:	2b01      	cmp	r3, #1
 8048896:	d105      	bne.n	80488a4 <MIN_Send_TEST_CONNECTION_CMD+0x70>
        SYSLOG_NOTICE("Response OK - TEST_CONNECTION_CMD");
 8048898:	2200      	movs	r2, #0
 804889a:	490c      	ldr	r1, [pc, #48]	@ (80488cc <MIN_Send_TEST_CONNECTION_CMD+0x98>)
 804889c:	2002      	movs	r0, #2
 804889e:	f003 f987 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout TEST_CONNECTION_CMD");
        ClearPendingCommand();
    }
}
 80488a2:	e006      	b.n	80488b2 <MIN_Send_TEST_CONNECTION_CMD+0x7e>
        SYSLOG_ERROR("Timeout TEST_CONNECTION_CMD");
 80488a4:	2200      	movs	r2, #0
 80488a6:	490a      	ldr	r1, [pc, #40]	@ (80488d0 <MIN_Send_TEST_CONNECTION_CMD+0x9c>)
 80488a8:	2004      	movs	r0, #4
 80488aa:	f003 f981 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 80488ae:	f7ff fef1 	bl	8048694 <ClearPendingCommand>
}
 80488b2:	bf00      	nop
 80488b4:	3710      	adds	r7, #16
 80488b6:	46bd      	mov	sp, r7
 80488b8:	bd80      	pop	{r7, pc}
 80488ba:	bf00      	nop
 80488bc:	2401e810 	.word	0x2401e810
 80488c0:	0806d488 	.word	0x0806d488
 80488c4:	2401ea24 	.word	0x2401ea24
 80488c8:	2401ea20 	.word	0x2401ea20
 80488cc:	0806d448 	.word	0x0806d448
 80488d0:	0806d46c 	.word	0x0806d46c

080488d4 <MIN_Send_SET_TEMP_PROFILE_CMD>:
void MIN_Send_SET_TEMP_PROFILE_CMD(uint8_t ntc_index,
                                   uint8_t tec_positions,
                                   uint8_t heater_positions,
                                   uint16_t tec_vol,
                                   uint8_t heater_duty_cycle,
                                   uint16_t target_temp) {
 80488d4:	b590      	push	{r4, r7, lr}
 80488d6:	b087      	sub	sp, #28
 80488d8:	af00      	add	r7, sp, #0
 80488da:	4604      	mov	r4, r0
 80488dc:	4608      	mov	r0, r1
 80488de:	4611      	mov	r1, r2
 80488e0:	461a      	mov	r2, r3
 80488e2:	4623      	mov	r3, r4
 80488e4:	71fb      	strb	r3, [r7, #7]
 80488e6:	4603      	mov	r3, r0
 80488e8:	71bb      	strb	r3, [r7, #6]
 80488ea:	460b      	mov	r3, r1
 80488ec:	717b      	strb	r3, [r7, #5]
 80488ee:	4613      	mov	r3, r2
 80488f0:	807b      	strh	r3, [r7, #2]
    uint8_t payload[9] = {0};
 80488f2:	f107 030c 	add.w	r3, r7, #12
 80488f6:	2200      	movs	r2, #0
 80488f8:	601a      	str	r2, [r3, #0]
 80488fa:	605a      	str	r2, [r3, #4]
 80488fc:	721a      	strb	r2, [r3, #8]

    payload[0] = ntc_index;
 80488fe:	79fb      	ldrb	r3, [r7, #7]
 8048900:	733b      	strb	r3, [r7, #12]
    payload[1] = tec_positions;
 8048902:	79bb      	ldrb	r3, [r7, #6]
 8048904:	737b      	strb	r3, [r7, #13]
    payload[2] = heater_positions;
 8048906:	797b      	ldrb	r3, [r7, #5]
 8048908:	73bb      	strb	r3, [r7, #14]
    payload[3] = (uint8_t)((tec_vol >> 8) & 0xFF);      // MSB of tec_vol
 804890a:	887b      	ldrh	r3, [r7, #2]
 804890c:	0a1b      	lsrs	r3, r3, #8
 804890e:	b29b      	uxth	r3, r3
 8048910:	b2db      	uxtb	r3, r3
 8048912:	73fb      	strb	r3, [r7, #15]
    payload[4] = (uint8_t)(tec_vol & 0xFF);             // LSB of tec_vol
 8048914:	887b      	ldrh	r3, [r7, #2]
 8048916:	b2db      	uxtb	r3, r3
 8048918:	743b      	strb	r3, [r7, #16]
    payload[5] = heater_duty_cycle;
 804891a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 804891e:	747b      	strb	r3, [r7, #17]
    payload[6] = (uint8_t)((target_temp >> 8) & 0xFF);  // MSB of target_temp
 8048920:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8048922:	0a1b      	lsrs	r3, r3, #8
 8048924:	b29b      	uxth	r3, r3
 8048926:	b2db      	uxtb	r3, r3
 8048928:	74bb      	strb	r3, [r7, #18]
    payload[7] = (uint8_t)(target_temp & 0xFF);         // LSB of target_temp
 804892a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 804892c:	b2db      	uxtb	r3, r3
 804892e:	74fb      	strb	r3, [r7, #19]
    payload[8] = 0xFF; // RESERVED
 8048930:	23ff      	movs	r3, #255	@ 0xff
 8048932:	753b      	strb	r3, [r7, #20]

    MIN_Send(&OBC_MinCtx, SET_TEMP_PROFILE_CMD, payload, sizeof(payload));
 8048934:	f107 020c 	add.w	r2, r7, #12
 8048938:	2309      	movs	r3, #9
 804893a:	210a      	movs	r1, #10
 804893c:	4814      	ldr	r0, [pc, #80]	@ (8048990 <MIN_Send_SET_TEMP_PROFILE_CMD+0xbc>)
 804893e:	f011 fdf5 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_TEMP_PROFILE_CMD, SET_TEMP_PROFILE_ACK};
 8048942:	4b14      	ldr	r3, [pc, #80]	@ (8048994 <MIN_Send_SET_TEMP_PROFILE_CMD+0xc0>)
 8048944:	881b      	ldrh	r3, [r3, #0]
 8048946:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048948:	4b13      	ldr	r3, [pc, #76]	@ (8048998 <MIN_Send_SET_TEMP_PROFILE_CMD+0xc4>)
 804894a:	6818      	ldr	r0, [r3, #0]
 804894c:	f107 0108 	add.w	r1, r7, #8
 8048950:	2300      	movs	r3, #0
 8048952:	f04f 32ff 	mov.w	r2, #4294967295
 8048956:	f00c fc9b 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 804895a:	4b10      	ldr	r3, [pc, #64]	@ (804899c <MIN_Send_SET_TEMP_PROFILE_CMD+0xc8>)
 804895c:	681b      	ldr	r3, [r3, #0]
 804895e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048962:	4618      	mov	r0, r3
 8048964:	f00c ff38 	bl	80557d8 <xQueueSemaphoreTake>
 8048968:	4603      	mov	r3, r0
 804896a:	2b01      	cmp	r3, #1
 804896c:	d105      	bne.n	804897a <MIN_Send_SET_TEMP_PROFILE_CMD+0xa6>
        SYSLOG_NOTICE("Response OK - SET_TEMP_PROFILE_CMD");
 804896e:	2200      	movs	r2, #0
 8048970:	490b      	ldr	r1, [pc, #44]	@ (80489a0 <MIN_Send_SET_TEMP_PROFILE_CMD+0xcc>)
 8048972:	2002      	movs	r0, #2
 8048974:	f003 f91c 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_TEMP_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048978:	e006      	b.n	8048988 <MIN_Send_SET_TEMP_PROFILE_CMD+0xb4>
        SYSLOG_ERROR("Timeout SET_TEMP_PROFILE_CMD");
 804897a:	2200      	movs	r2, #0
 804897c:	4909      	ldr	r1, [pc, #36]	@ (80489a4 <MIN_Send_SET_TEMP_PROFILE_CMD+0xd0>)
 804897e:	2004      	movs	r0, #4
 8048980:	f003 f916 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048984:	f7ff fe86 	bl	8048694 <ClearPendingCommand>
}
 8048988:	bf00      	nop
 804898a:	371c      	adds	r7, #28
 804898c:	46bd      	mov	sp, r7
 804898e:	bd90      	pop	{r4, r7, pc}
 8048990:	2401e810 	.word	0x2401e810
 8048994:	0806d4d0 	.word	0x0806d4d0
 8048998:	2401ea24 	.word	0x2401ea24
 804899c:	2401ea20 	.word	0x2401ea20
 80489a0:	0806d48c 	.word	0x0806d48c
 80489a4:	0806d4b0 	.word	0x0806d4b0

080489a8 <MIN_Send_START_TEMP_PROFILE_CMD>:

void MIN_Send_START_TEMP_PROFILE_CMD(void) {
 80489a8:	b580      	push	{r7, lr}
 80489aa:	b082      	sub	sp, #8
 80489ac:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 80489ae:	23ff      	movs	r3, #255	@ 0xff
 80489b0:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, START_TEMP_PROFILE_CMD, payload, sizeof(payload));
 80489b2:	1d3a      	adds	r2, r7, #4
 80489b4:	2301      	movs	r3, #1
 80489b6:	210c      	movs	r1, #12
 80489b8:	4814      	ldr	r0, [pc, #80]	@ (8048a0c <MIN_Send_START_TEMP_PROFILE_CMD+0x64>)
 80489ba:	f011 fdb7 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {START_TEMP_PROFILE_CMD, START_TEMP_PROFILE_ACK};
 80489be:	4b14      	ldr	r3, [pc, #80]	@ (8048a10 <MIN_Send_START_TEMP_PROFILE_CMD+0x68>)
 80489c0:	881b      	ldrh	r3, [r3, #0]
 80489c2:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 80489c4:	4b13      	ldr	r3, [pc, #76]	@ (8048a14 <MIN_Send_START_TEMP_PROFILE_CMD+0x6c>)
 80489c6:	6818      	ldr	r0, [r3, #0]
 80489c8:	4639      	mov	r1, r7
 80489ca:	2300      	movs	r3, #0
 80489cc:	f04f 32ff 	mov.w	r2, #4294967295
 80489d0:	f00c fc5e 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80489d4:	4b10      	ldr	r3, [pc, #64]	@ (8048a18 <MIN_Send_START_TEMP_PROFILE_CMD+0x70>)
 80489d6:	681b      	ldr	r3, [r3, #0]
 80489d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80489dc:	4618      	mov	r0, r3
 80489de:	f00c fefb 	bl	80557d8 <xQueueSemaphoreTake>
 80489e2:	4603      	mov	r3, r0
 80489e4:	2b01      	cmp	r3, #1
 80489e6:	d105      	bne.n	80489f4 <MIN_Send_START_TEMP_PROFILE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - START_TEMP_PROFILE_CMD");
 80489e8:	2200      	movs	r2, #0
 80489ea:	490c      	ldr	r1, [pc, #48]	@ (8048a1c <MIN_Send_START_TEMP_PROFILE_CMD+0x74>)
 80489ec:	2002      	movs	r0, #2
 80489ee:	f003 f8df 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout START_TEMP_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 80489f2:	e006      	b.n	8048a02 <MIN_Send_START_TEMP_PROFILE_CMD+0x5a>
        SYSLOG_ERROR("Timeout START_TEMP_PROFILE_CMD");
 80489f4:	2200      	movs	r2, #0
 80489f6:	490a      	ldr	r1, [pc, #40]	@ (8048a20 <MIN_Send_START_TEMP_PROFILE_CMD+0x78>)
 80489f8:	2004      	movs	r0, #4
 80489fa:	f003 f8d9 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 80489fe:	f7ff fe49 	bl	8048694 <ClearPendingCommand>
}
 8048a02:	bf00      	nop
 8048a04:	3708      	adds	r7, #8
 8048a06:	46bd      	mov	sp, r7
 8048a08:	bd80      	pop	{r7, pc}
 8048a0a:	bf00      	nop
 8048a0c:	2401e810 	.word	0x2401e810
 8048a10:	0806d51c 	.word	0x0806d51c
 8048a14:	2401ea24 	.word	0x2401ea24
 8048a18:	2401ea20 	.word	0x2401ea20
 8048a1c:	0806d4d4 	.word	0x0806d4d4
 8048a20:	0806d4fc 	.word	0x0806d4fc

08048a24 <MIN_Send_STOP_TEMP_PROFILE_CMD>:

void MIN_Send_STOP_TEMP_PROFILE_CMD(void) {
 8048a24:	b580      	push	{r7, lr}
 8048a26:	b082      	sub	sp, #8
 8048a28:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8048a2a:	23ff      	movs	r3, #255	@ 0xff
 8048a2c:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, STOP_TEMP_PROFILE_CMD, payload, sizeof(payload));
 8048a2e:	1d3a      	adds	r2, r7, #4
 8048a30:	2301      	movs	r3, #1
 8048a32:	210e      	movs	r1, #14
 8048a34:	4814      	ldr	r0, [pc, #80]	@ (8048a88 <MIN_Send_STOP_TEMP_PROFILE_CMD+0x64>)
 8048a36:	f011 fd79 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {STOP_TEMP_PROFILE_CMD, STOP_TEMP_PROFILE_ACK};
 8048a3a:	4b14      	ldr	r3, [pc, #80]	@ (8048a8c <MIN_Send_STOP_TEMP_PROFILE_CMD+0x68>)
 8048a3c:	881b      	ldrh	r3, [r3, #0]
 8048a3e:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048a40:	4b13      	ldr	r3, [pc, #76]	@ (8048a90 <MIN_Send_STOP_TEMP_PROFILE_CMD+0x6c>)
 8048a42:	6818      	ldr	r0, [r3, #0]
 8048a44:	4639      	mov	r1, r7
 8048a46:	2300      	movs	r3, #0
 8048a48:	f04f 32ff 	mov.w	r2, #4294967295
 8048a4c:	f00c fc20 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048a50:	4b10      	ldr	r3, [pc, #64]	@ (8048a94 <MIN_Send_STOP_TEMP_PROFILE_CMD+0x70>)
 8048a52:	681b      	ldr	r3, [r3, #0]
 8048a54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048a58:	4618      	mov	r0, r3
 8048a5a:	f00c febd 	bl	80557d8 <xQueueSemaphoreTake>
 8048a5e:	4603      	mov	r3, r0
 8048a60:	2b01      	cmp	r3, #1
 8048a62:	d105      	bne.n	8048a70 <MIN_Send_STOP_TEMP_PROFILE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - STOP_TEMP_PROFILE_CMD");
 8048a64:	2200      	movs	r2, #0
 8048a66:	490c      	ldr	r1, [pc, #48]	@ (8048a98 <MIN_Send_STOP_TEMP_PROFILE_CMD+0x74>)
 8048a68:	2002      	movs	r0, #2
 8048a6a:	f003 f8a1 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout STOP_TEMP_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048a6e:	e006      	b.n	8048a7e <MIN_Send_STOP_TEMP_PROFILE_CMD+0x5a>
        SYSLOG_ERROR("Timeout STOP_TEMP_PROFILE_CMD");
 8048a70:	2200      	movs	r2, #0
 8048a72:	490a      	ldr	r1, [pc, #40]	@ (8048a9c <MIN_Send_STOP_TEMP_PROFILE_CMD+0x78>)
 8048a74:	2004      	movs	r0, #4
 8048a76:	f003 f89b 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048a7a:	f7ff fe0b 	bl	8048694 <ClearPendingCommand>
}
 8048a7e:	bf00      	nop
 8048a80:	3708      	adds	r7, #8
 8048a82:	46bd      	mov	sp, r7
 8048a84:	bd80      	pop	{r7, pc}
 8048a86:	bf00      	nop
 8048a88:	2401e810 	.word	0x2401e810
 8048a8c:	0806d564 	.word	0x0806d564
 8048a90:	2401ea24 	.word	0x2401ea24
 8048a94:	2401ea20 	.word	0x2401ea20
 8048a98:	0806d520 	.word	0x0806d520
 8048a9c:	0806d544 	.word	0x0806d544

08048aa0 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD>:

void MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD(uint8_t ovr_tec_index, uint16_t ovr_tec_vol) {
 8048aa0:	b580      	push	{r7, lr}
 8048aa2:	b084      	sub	sp, #16
 8048aa4:	af00      	add	r7, sp, #0
 8048aa6:	4603      	mov	r3, r0
 8048aa8:	460a      	mov	r2, r1
 8048aaa:	71fb      	strb	r3, [r7, #7]
 8048aac:	4613      	mov	r3, r2
 8048aae:	80bb      	strh	r3, [r7, #4]
    uint8_t payload[4] = {0};
 8048ab0:	2300      	movs	r3, #0
 8048ab2:	60fb      	str	r3, [r7, #12]

    payload[0] = ovr_tec_index;
 8048ab4:	79fb      	ldrb	r3, [r7, #7]
 8048ab6:	733b      	strb	r3, [r7, #12]
    payload[1] = (uint8_t)((ovr_tec_vol >> 8) & 0xFF);  // MSB
 8048ab8:	88bb      	ldrh	r3, [r7, #4]
 8048aba:	0a1b      	lsrs	r3, r3, #8
 8048abc:	b29b      	uxth	r3, r3
 8048abe:	b2db      	uxtb	r3, r3
 8048ac0:	737b      	strb	r3, [r7, #13]
    payload[2] = (uint8_t)(ovr_tec_vol & 0xFF);         // LSB
 8048ac2:	88bb      	ldrh	r3, [r7, #4]
 8048ac4:	b2db      	uxtb	r3, r3
 8048ac6:	73bb      	strb	r3, [r7, #14]
    payload[3] = 0xFF; // RESERVED
 8048ac8:	23ff      	movs	r3, #255	@ 0xff
 8048aca:	73fb      	strb	r3, [r7, #15]

    MIN_Send(&OBC_MinCtx, SET_OVERRIDE_TEC_PROFILE_CMD, payload, sizeof(payload));
 8048acc:	f107 020c 	add.w	r2, r7, #12
 8048ad0:	2304      	movs	r3, #4
 8048ad2:	2110      	movs	r1, #16
 8048ad4:	4814      	ldr	r0, [pc, #80]	@ (8048b28 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x88>)
 8048ad6:	f011 fd29 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_OVERRIDE_TEC_PROFILE_CMD, SET_OVERRIDE_TEC_PROFILE_ACK};
 8048ada:	4b14      	ldr	r3, [pc, #80]	@ (8048b2c <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x8c>)
 8048adc:	881b      	ldrh	r3, [r3, #0]
 8048ade:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048ae0:	4b13      	ldr	r3, [pc, #76]	@ (8048b30 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x90>)
 8048ae2:	6818      	ldr	r0, [r3, #0]
 8048ae4:	f107 0108 	add.w	r1, r7, #8
 8048ae8:	2300      	movs	r3, #0
 8048aea:	f04f 32ff 	mov.w	r2, #4294967295
 8048aee:	f00c fbcf 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048af2:	4b10      	ldr	r3, [pc, #64]	@ (8048b34 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x94>)
 8048af4:	681b      	ldr	r3, [r3, #0]
 8048af6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048afa:	4618      	mov	r0, r3
 8048afc:	f00c fe6c 	bl	80557d8 <xQueueSemaphoreTake>
 8048b00:	4603      	mov	r3, r0
 8048b02:	2b01      	cmp	r3, #1
 8048b04:	d105      	bne.n	8048b12 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x72>
        SYSLOG_NOTICE("Response OK - SET_OVERRIDE_TEC_PROFILE_CMD");
 8048b06:	2200      	movs	r2, #0
 8048b08:	490b      	ldr	r1, [pc, #44]	@ (8048b38 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x98>)
 8048b0a:	2002      	movs	r0, #2
 8048b0c:	f003 f850 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_OVERRIDE_TEC_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048b10:	e006      	b.n	8048b20 <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x80>
        SYSLOG_ERROR("Timeout SET_OVERRIDE_TEC_PROFILE_CMD");
 8048b12:	2200      	movs	r2, #0
 8048b14:	4909      	ldr	r1, [pc, #36]	@ (8048b3c <MIN_Send_SET_OVERRIDE_TEC_PROFILE_CMD+0x9c>)
 8048b16:	2004      	movs	r0, #4
 8048b18:	f003 f84a 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048b1c:	f7ff fdba 	bl	8048694 <ClearPendingCommand>
}
 8048b20:	bf00      	nop
 8048b22:	3710      	adds	r7, #16
 8048b24:	46bd      	mov	sp, r7
 8048b26:	bd80      	pop	{r7, pc}
 8048b28:	2401e810 	.word	0x2401e810
 8048b2c:	0806d5bc 	.word	0x0806d5bc
 8048b30:	2401ea24 	.word	0x2401ea24
 8048b34:	2401ea20 	.word	0x2401ea20
 8048b38:	0806d568 	.word	0x0806d568
 8048b3c:	0806d594 	.word	0x0806d594

08048b40 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD>:

void MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD(void) {
 8048b40:	b580      	push	{r7, lr}
 8048b42:	b082      	sub	sp, #8
 8048b44:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8048b46:	23ff      	movs	r3, #255	@ 0xff
 8048b48:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, START_OVERRIDE_TEC_PROFILE_CMD, payload, sizeof(payload));
 8048b4a:	1d3a      	adds	r2, r7, #4
 8048b4c:	2301      	movs	r3, #1
 8048b4e:	2112      	movs	r1, #18
 8048b50:	4814      	ldr	r0, [pc, #80]	@ (8048ba4 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x64>)
 8048b52:	f011 fceb 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {START_OVERRIDE_TEC_PROFILE_CMD, START_OVERRIDE_TEC_PROFILE_ACK};
 8048b56:	4b14      	ldr	r3, [pc, #80]	@ (8048ba8 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x68>)
 8048b58:	881b      	ldrh	r3, [r3, #0]
 8048b5a:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048b5c:	4b13      	ldr	r3, [pc, #76]	@ (8048bac <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x6c>)
 8048b5e:	6818      	ldr	r0, [r3, #0]
 8048b60:	4639      	mov	r1, r7
 8048b62:	2300      	movs	r3, #0
 8048b64:	f04f 32ff 	mov.w	r2, #4294967295
 8048b68:	f00c fb92 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048b6c:	4b10      	ldr	r3, [pc, #64]	@ (8048bb0 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x70>)
 8048b6e:	681b      	ldr	r3, [r3, #0]
 8048b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048b74:	4618      	mov	r0, r3
 8048b76:	f00c fe2f 	bl	80557d8 <xQueueSemaphoreTake>
 8048b7a:	4603      	mov	r3, r0
 8048b7c:	2b01      	cmp	r3, #1
 8048b7e:	d105      	bne.n	8048b8c <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - START_OVERRIDE_TEC_PROFILE_CMD");
 8048b80:	2200      	movs	r2, #0
 8048b82:	490c      	ldr	r1, [pc, #48]	@ (8048bb4 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x74>)
 8048b84:	2002      	movs	r0, #2
 8048b86:	f003 f813 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout START_OVERRIDE_TEC_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048b8a:	e006      	b.n	8048b9a <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x5a>
        SYSLOG_ERROR("Timeout START_OVERRIDE_TEC_PROFILE_CMD");
 8048b8c:	2200      	movs	r2, #0
 8048b8e:	490a      	ldr	r1, [pc, #40]	@ (8048bb8 <MIN_Send_START_OVERRIDE_TEC_PROFILE_CMD+0x78>)
 8048b90:	2004      	movs	r0, #4
 8048b92:	f003 f80d 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048b96:	f7ff fd7d 	bl	8048694 <ClearPendingCommand>
}
 8048b9a:	bf00      	nop
 8048b9c:	3708      	adds	r7, #8
 8048b9e:	46bd      	mov	sp, r7
 8048ba0:	bd80      	pop	{r7, pc}
 8048ba2:	bf00      	nop
 8048ba4:	2401e810 	.word	0x2401e810
 8048ba8:	0806d618 	.word	0x0806d618
 8048bac:	2401ea24 	.word	0x2401ea24
 8048bb0:	2401ea20 	.word	0x2401ea20
 8048bb4:	0806d5c0 	.word	0x0806d5c0
 8048bb8:	0806d5f0 	.word	0x0806d5f0

08048bbc <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD>:

void MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD(void) {
 8048bbc:	b580      	push	{r7, lr}
 8048bbe:	b082      	sub	sp, #8
 8048bc0:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8048bc2:	23ff      	movs	r3, #255	@ 0xff
 8048bc4:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, STOP_OVERRIDE_TEC_PROFILE_CMD, payload, sizeof(payload));
 8048bc6:	1d3a      	adds	r2, r7, #4
 8048bc8:	2301      	movs	r3, #1
 8048bca:	2114      	movs	r1, #20
 8048bcc:	4814      	ldr	r0, [pc, #80]	@ (8048c20 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x64>)
 8048bce:	f011 fcad 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {STOP_OVERRIDE_TEC_PROFILE_CMD, STOP_OVERRIDE_TEC_PROFILE_ACK};
 8048bd2:	4b14      	ldr	r3, [pc, #80]	@ (8048c24 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x68>)
 8048bd4:	881b      	ldrh	r3, [r3, #0]
 8048bd6:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048bd8:	4b13      	ldr	r3, [pc, #76]	@ (8048c28 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x6c>)
 8048bda:	6818      	ldr	r0, [r3, #0]
 8048bdc:	4639      	mov	r1, r7
 8048bde:	2300      	movs	r3, #0
 8048be0:	f04f 32ff 	mov.w	r2, #4294967295
 8048be4:	f00c fb54 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048be8:	4b10      	ldr	r3, [pc, #64]	@ (8048c2c <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x70>)
 8048bea:	681b      	ldr	r3, [r3, #0]
 8048bec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048bf0:	4618      	mov	r0, r3
 8048bf2:	f00c fdf1 	bl	80557d8 <xQueueSemaphoreTake>
 8048bf6:	4603      	mov	r3, r0
 8048bf8:	2b01      	cmp	r3, #1
 8048bfa:	d105      	bne.n	8048c08 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - STOP_OVERRIDE_TEC_PROFILE_CMD");
 8048bfc:	2200      	movs	r2, #0
 8048bfe:	490c      	ldr	r1, [pc, #48]	@ (8048c30 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x74>)
 8048c00:	2002      	movs	r0, #2
 8048c02:	f002 ffd5 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout STOP_OVERRIDE_TEC_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048c06:	e006      	b.n	8048c16 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x5a>
        SYSLOG_ERROR("Timeout STOP_OVERRIDE_TEC_PROFILE_CMD");
 8048c08:	2200      	movs	r2, #0
 8048c0a:	490a      	ldr	r1, [pc, #40]	@ (8048c34 <MIN_Send_STOP_OVERRIDE_TEC_PROFILE_CMD+0x78>)
 8048c0c:	2004      	movs	r0, #4
 8048c0e:	f002 ffcf 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048c12:	f7ff fd3f 	bl	8048694 <ClearPendingCommand>
}
 8048c16:	bf00      	nop
 8048c18:	3708      	adds	r7, #8
 8048c1a:	46bd      	mov	sp, r7
 8048c1c:	bd80      	pop	{r7, pc}
 8048c1e:	bf00      	nop
 8048c20:	2401e810 	.word	0x2401e810
 8048c24:	0806d670 	.word	0x0806d670
 8048c28:	2401ea24 	.word	0x2401ea24
 8048c2c:	2401ea20 	.word	0x2401ea20
 8048c30:	0806d61c 	.word	0x0806d61c
 8048c34:	0806d648 	.word	0x0806d648

08048c38 <MIN_Send_SET_PDA_PROFILE_CMD>:

void MIN_Send_SET_PDA_PROFILE_CMD(uint32_t pre, uint32_t in, uint32_t post, uint16_t sample_rate) {
 8048c38:	b580      	push	{r7, lr}
 8048c3a:	b08a      	sub	sp, #40	@ 0x28
 8048c3c:	af00      	add	r7, sp, #0
 8048c3e:	60f8      	str	r0, [r7, #12]
 8048c40:	60b9      	str	r1, [r7, #8]
 8048c42:	607a      	str	r2, [r7, #4]
 8048c44:	807b      	strh	r3, [r7, #2]
    uint8_t payload[15] = {0};
 8048c46:	f107 0318 	add.w	r3, r7, #24
 8048c4a:	2200      	movs	r2, #0
 8048c4c:	601a      	str	r2, [r3, #0]
 8048c4e:	605a      	str	r2, [r3, #4]
 8048c50:	609a      	str	r2, [r3, #8]
 8048c52:	f8c3 200b 	str.w	r2, [r3, #11]

    // Big-endian packing for 32-bit values
    payload[0] = (uint8_t)((pre >> 24) & 0xFF);
 8048c56:	68fb      	ldr	r3, [r7, #12]
 8048c58:	0e1b      	lsrs	r3, r3, #24
 8048c5a:	b2db      	uxtb	r3, r3
 8048c5c:	763b      	strb	r3, [r7, #24]
    payload[1] = (uint8_t)((pre >> 16) & 0xFF);
 8048c5e:	68fb      	ldr	r3, [r7, #12]
 8048c60:	0c1b      	lsrs	r3, r3, #16
 8048c62:	b2db      	uxtb	r3, r3
 8048c64:	767b      	strb	r3, [r7, #25]
    payload[2] = (uint8_t)((pre >> 8) & 0xFF);
 8048c66:	68fb      	ldr	r3, [r7, #12]
 8048c68:	0a1b      	lsrs	r3, r3, #8
 8048c6a:	b2db      	uxtb	r3, r3
 8048c6c:	76bb      	strb	r3, [r7, #26]
    payload[3] = (uint8_t)(pre & 0xFF);
 8048c6e:	68fb      	ldr	r3, [r7, #12]
 8048c70:	b2db      	uxtb	r3, r3
 8048c72:	76fb      	strb	r3, [r7, #27]

    payload[4] = (uint8_t)((in >> 24) & 0xFF);
 8048c74:	68bb      	ldr	r3, [r7, #8]
 8048c76:	0e1b      	lsrs	r3, r3, #24
 8048c78:	b2db      	uxtb	r3, r3
 8048c7a:	773b      	strb	r3, [r7, #28]
    payload[5] = (uint8_t)((in >> 16) & 0xFF);
 8048c7c:	68bb      	ldr	r3, [r7, #8]
 8048c7e:	0c1b      	lsrs	r3, r3, #16
 8048c80:	b2db      	uxtb	r3, r3
 8048c82:	777b      	strb	r3, [r7, #29]
    payload[6] = (uint8_t)((in >> 8) & 0xFF);
 8048c84:	68bb      	ldr	r3, [r7, #8]
 8048c86:	0a1b      	lsrs	r3, r3, #8
 8048c88:	b2db      	uxtb	r3, r3
 8048c8a:	77bb      	strb	r3, [r7, #30]
    payload[7] = (uint8_t)(in & 0xFF);
 8048c8c:	68bb      	ldr	r3, [r7, #8]
 8048c8e:	b2db      	uxtb	r3, r3
 8048c90:	77fb      	strb	r3, [r7, #31]

    payload[8] = (uint8_t)((post >> 24) & 0xFF);
 8048c92:	687b      	ldr	r3, [r7, #4]
 8048c94:	0e1b      	lsrs	r3, r3, #24
 8048c96:	b2db      	uxtb	r3, r3
 8048c98:	f887 3020 	strb.w	r3, [r7, #32]
    payload[9] = (uint8_t)((post >> 16) & 0xFF);
 8048c9c:	687b      	ldr	r3, [r7, #4]
 8048c9e:	0c1b      	lsrs	r3, r3, #16
 8048ca0:	b2db      	uxtb	r3, r3
 8048ca2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    payload[10] = (uint8_t)((post >> 8) & 0xFF);
 8048ca6:	687b      	ldr	r3, [r7, #4]
 8048ca8:	0a1b      	lsrs	r3, r3, #8
 8048caa:	b2db      	uxtb	r3, r3
 8048cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    payload[11] = (uint8_t)(post & 0xFF);
 8048cb0:	687b      	ldr	r3, [r7, #4]
 8048cb2:	b2db      	uxtb	r3, r3
 8048cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Big-endian packing for 16-bit value
    payload[12] = (uint8_t)((sample_rate >> 8) & 0xFF);
 8048cb8:	887b      	ldrh	r3, [r7, #2]
 8048cba:	0a1b      	lsrs	r3, r3, #8
 8048cbc:	b29b      	uxth	r3, r3
 8048cbe:	b2db      	uxtb	r3, r3
 8048cc0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    payload[13] = (uint8_t)(sample_rate & 0xFF);
 8048cc4:	887b      	ldrh	r3, [r7, #2]
 8048cc6:	b2db      	uxtb	r3, r3
 8048cc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    payload[14] = 0xFF; // RESERVED
 8048ccc:	23ff      	movs	r3, #255	@ 0xff
 8048cce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    MIN_Send(&OBC_MinCtx, SET_PDA_PROFILE_CMD, payload, sizeof(payload));
 8048cd2:	f107 0218 	add.w	r2, r7, #24
 8048cd6:	230f      	movs	r3, #15
 8048cd8:	2116      	movs	r1, #22
 8048cda:	4815      	ldr	r0, [pc, #84]	@ (8048d30 <MIN_Send_SET_PDA_PROFILE_CMD+0xf8>)
 8048cdc:	f011 fc26 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_PDA_PROFILE_CMD, SET_PDA_PROFILE_ACK};
 8048ce0:	4b14      	ldr	r3, [pc, #80]	@ (8048d34 <MIN_Send_SET_PDA_PROFILE_CMD+0xfc>)
 8048ce2:	881b      	ldrh	r3, [r3, #0]
 8048ce4:	82bb      	strh	r3, [r7, #20]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048ce6:	4b14      	ldr	r3, [pc, #80]	@ (8048d38 <MIN_Send_SET_PDA_PROFILE_CMD+0x100>)
 8048ce8:	6818      	ldr	r0, [r3, #0]
 8048cea:	f107 0114 	add.w	r1, r7, #20
 8048cee:	2300      	movs	r3, #0
 8048cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8048cf4:	f00c facc 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048cf8:	4b10      	ldr	r3, [pc, #64]	@ (8048d3c <MIN_Send_SET_PDA_PROFILE_CMD+0x104>)
 8048cfa:	681b      	ldr	r3, [r3, #0]
 8048cfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048d00:	4618      	mov	r0, r3
 8048d02:	f00c fd69 	bl	80557d8 <xQueueSemaphoreTake>
 8048d06:	4603      	mov	r3, r0
 8048d08:	2b01      	cmp	r3, #1
 8048d0a:	d105      	bne.n	8048d18 <MIN_Send_SET_PDA_PROFILE_CMD+0xe0>
        SYSLOG_NOTICE("Response OK - SET_SAMPLING_PROFILE_CMD");
 8048d0c:	2200      	movs	r2, #0
 8048d0e:	490c      	ldr	r1, [pc, #48]	@ (8048d40 <MIN_Send_SET_PDA_PROFILE_CMD+0x108>)
 8048d10:	2002      	movs	r0, #2
 8048d12:	f002 ff4d 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_SAMPLING_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 8048d16:	e006      	b.n	8048d26 <MIN_Send_SET_PDA_PROFILE_CMD+0xee>
        SYSLOG_ERROR("Timeout SET_SAMPLING_PROFILE_CMD");
 8048d18:	2200      	movs	r2, #0
 8048d1a:	490a      	ldr	r1, [pc, #40]	@ (8048d44 <MIN_Send_SET_PDA_PROFILE_CMD+0x10c>)
 8048d1c:	2004      	movs	r0, #4
 8048d1e:	f002 ff47 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048d22:	f7ff fcb7 	bl	8048694 <ClearPendingCommand>
}
 8048d26:	bf00      	nop
 8048d28:	3728      	adds	r7, #40	@ 0x28
 8048d2a:	46bd      	mov	sp, r7
 8048d2c:	bd80      	pop	{r7, pc}
 8048d2e:	bf00      	nop
 8048d30:	2401e810 	.word	0x2401e810
 8048d34:	0806d6c0 	.word	0x0806d6c0
 8048d38:	2401ea24 	.word	0x2401ea24
 8048d3c:	2401ea20 	.word	0x2401ea20
 8048d40:	0806d674 	.word	0x0806d674
 8048d44:	0806d69c 	.word	0x0806d69c

08048d48 <MIN_Send_SET_LASER_INTENSITY_CMD>:

void MIN_Send_SET_LASER_INTENSITY_CMD(uint8_t intensity) {
 8048d48:	b580      	push	{r7, lr}
 8048d4a:	b084      	sub	sp, #16
 8048d4c:	af00      	add	r7, sp, #0
 8048d4e:	4603      	mov	r3, r0
 8048d50:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2] = {0};
 8048d52:	2300      	movs	r3, #0
 8048d54:	81bb      	strh	r3, [r7, #12]

    payload[0] = intensity;
 8048d56:	79fb      	ldrb	r3, [r7, #7]
 8048d58:	733b      	strb	r3, [r7, #12]
    payload[1] = 0xFF; // RESERVED
 8048d5a:	23ff      	movs	r3, #255	@ 0xff
 8048d5c:	737b      	strb	r3, [r7, #13]

    MIN_Send(&OBC_MinCtx, SET_LASER_INTENSITY_CMD, payload, sizeof(payload));
 8048d5e:	f107 020c 	add.w	r2, r7, #12
 8048d62:	2302      	movs	r3, #2
 8048d64:	2118      	movs	r1, #24
 8048d66:	4815      	ldr	r0, [pc, #84]	@ (8048dbc <MIN_Send_SET_LASER_INTENSITY_CMD+0x74>)
 8048d68:	f011 fbe0 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_LASER_INTENSITY_CMD, SET_LASER_INTENSITY_ACK};
 8048d6c:	4b14      	ldr	r3, [pc, #80]	@ (8048dc0 <MIN_Send_SET_LASER_INTENSITY_CMD+0x78>)
 8048d6e:	881b      	ldrh	r3, [r3, #0]
 8048d70:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048d72:	4b14      	ldr	r3, [pc, #80]	@ (8048dc4 <MIN_Send_SET_LASER_INTENSITY_CMD+0x7c>)
 8048d74:	6818      	ldr	r0, [r3, #0]
 8048d76:	f107 0108 	add.w	r1, r7, #8
 8048d7a:	2300      	movs	r3, #0
 8048d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8048d80:	f00c fa86 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048d84:	4b10      	ldr	r3, [pc, #64]	@ (8048dc8 <MIN_Send_SET_LASER_INTENSITY_CMD+0x80>)
 8048d86:	681b      	ldr	r3, [r3, #0]
 8048d88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048d8c:	4618      	mov	r0, r3
 8048d8e:	f00c fd23 	bl	80557d8 <xQueueSemaphoreTake>
 8048d92:	4603      	mov	r3, r0
 8048d94:	2b01      	cmp	r3, #1
 8048d96:	d105      	bne.n	8048da4 <MIN_Send_SET_LASER_INTENSITY_CMD+0x5c>
        SYSLOG_NOTICE("Response OK - SET_LASER_INTENSITY_CMD");
 8048d98:	2200      	movs	r2, #0
 8048d9a:	490c      	ldr	r1, [pc, #48]	@ (8048dcc <MIN_Send_SET_LASER_INTENSITY_CMD+0x84>)
 8048d9c:	2002      	movs	r0, #2
 8048d9e:	f002 ff07 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_LASER_INTENSITY_CMD");
        ClearPendingCommand();
    }
}
 8048da2:	e006      	b.n	8048db2 <MIN_Send_SET_LASER_INTENSITY_CMD+0x6a>
        SYSLOG_ERROR("Timeout SET_LASER_INTENSITY_CMD");
 8048da4:	2200      	movs	r2, #0
 8048da6:	490a      	ldr	r1, [pc, #40]	@ (8048dd0 <MIN_Send_SET_LASER_INTENSITY_CMD+0x88>)
 8048da8:	2004      	movs	r0, #4
 8048daa:	f002 ff01 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048dae:	f7ff fc71 	bl	8048694 <ClearPendingCommand>
}
 8048db2:	bf00      	nop
 8048db4:	3710      	adds	r7, #16
 8048db6:	46bd      	mov	sp, r7
 8048db8:	bd80      	pop	{r7, pc}
 8048dba:	bf00      	nop
 8048dbc:	2401e810 	.word	0x2401e810
 8048dc0:	0806d70c 	.word	0x0806d70c
 8048dc4:	2401ea24 	.word	0x2401ea24
 8048dc8:	2401ea20 	.word	0x2401ea20
 8048dcc:	0806d6c4 	.word	0x0806d6c4
 8048dd0:	0806d6ec 	.word	0x0806d6ec

08048dd4 <MIN_Send_SET_POSITION_CMD>:

void MIN_Send_SET_POSITION_CMD(uint8_t position) {
 8048dd4:	b580      	push	{r7, lr}
 8048dd6:	b084      	sub	sp, #16
 8048dd8:	af00      	add	r7, sp, #0
 8048dda:	4603      	mov	r3, r0
 8048ddc:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2] = {0};
 8048dde:	2300      	movs	r3, #0
 8048de0:	81bb      	strh	r3, [r7, #12]

    payload[0] = position;
 8048de2:	79fb      	ldrb	r3, [r7, #7]
 8048de4:	733b      	strb	r3, [r7, #12]
    payload[1] = 0xFF; // RESERVED
 8048de6:	23ff      	movs	r3, #255	@ 0xff
 8048de8:	737b      	strb	r3, [r7, #13]

    MIN_Send(&OBC_MinCtx, SET_POSITION_CMD, payload, sizeof(payload));
 8048dea:	f107 020c 	add.w	r2, r7, #12
 8048dee:	2302      	movs	r3, #2
 8048df0:	211a      	movs	r1, #26
 8048df2:	4815      	ldr	r0, [pc, #84]	@ (8048e48 <MIN_Send_SET_POSITION_CMD+0x74>)
 8048df4:	f011 fb9a 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_POSITION_CMD, SET_POSITION_ACK};
 8048df8:	4b14      	ldr	r3, [pc, #80]	@ (8048e4c <MIN_Send_SET_POSITION_CMD+0x78>)
 8048dfa:	881b      	ldrh	r3, [r3, #0]
 8048dfc:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048dfe:	4b14      	ldr	r3, [pc, #80]	@ (8048e50 <MIN_Send_SET_POSITION_CMD+0x7c>)
 8048e00:	6818      	ldr	r0, [r3, #0]
 8048e02:	f107 0108 	add.w	r1, r7, #8
 8048e06:	2300      	movs	r3, #0
 8048e08:	f04f 32ff 	mov.w	r2, #4294967295
 8048e0c:	f00c fa40 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048e10:	4b10      	ldr	r3, [pc, #64]	@ (8048e54 <MIN_Send_SET_POSITION_CMD+0x80>)
 8048e12:	681b      	ldr	r3, [r3, #0]
 8048e14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048e18:	4618      	mov	r0, r3
 8048e1a:	f00c fcdd 	bl	80557d8 <xQueueSemaphoreTake>
 8048e1e:	4603      	mov	r3, r0
 8048e20:	2b01      	cmp	r3, #1
 8048e22:	d105      	bne.n	8048e30 <MIN_Send_SET_POSITION_CMD+0x5c>
        SYSLOG_NOTICE("Response OK - SET_POSITION_CMD");
 8048e24:	2200      	movs	r2, #0
 8048e26:	490c      	ldr	r1, [pc, #48]	@ (8048e58 <MIN_Send_SET_POSITION_CMD+0x84>)
 8048e28:	2002      	movs	r0, #2
 8048e2a:	f002 fec1 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_POSITION_CMD");
        ClearPendingCommand();
    }
}
 8048e2e:	e006      	b.n	8048e3e <MIN_Send_SET_POSITION_CMD+0x6a>
        SYSLOG_ERROR("Timeout SET_POSITION_CMD");
 8048e30:	2200      	movs	r2, #0
 8048e32:	490a      	ldr	r1, [pc, #40]	@ (8048e5c <MIN_Send_SET_POSITION_CMD+0x88>)
 8048e34:	2004      	movs	r0, #4
 8048e36:	f002 febb 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048e3a:	f7ff fc2b 	bl	8048694 <ClearPendingCommand>
}
 8048e3e:	bf00      	nop
 8048e40:	3710      	adds	r7, #16
 8048e42:	46bd      	mov	sp, r7
 8048e44:	bd80      	pop	{r7, pc}
 8048e46:	bf00      	nop
 8048e48:	2401e810 	.word	0x2401e810
 8048e4c:	0806d74c 	.word	0x0806d74c
 8048e50:	2401ea24 	.word	0x2401ea24
 8048e54:	2401ea20 	.word	0x2401ea20
 8048e58:	0806d710 	.word	0x0806d710
 8048e5c:	0806d730 	.word	0x0806d730

08048e60 <MIN_Send_START_SAMPLE_CYCLE_CMD>:

void MIN_Send_START_SAMPLE_CYCLE_CMD(void) {
 8048e60:	b580      	push	{r7, lr}
 8048e62:	b082      	sub	sp, #8
 8048e64:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8048e66:	23ff      	movs	r3, #255	@ 0xff
 8048e68:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, START_SAMPLE_CYCLE_CMD, payload, sizeof(payload));
 8048e6a:	1d3a      	adds	r2, r7, #4
 8048e6c:	2301      	movs	r3, #1
 8048e6e:	211c      	movs	r1, #28
 8048e70:	4814      	ldr	r0, [pc, #80]	@ (8048ec4 <MIN_Send_START_SAMPLE_CYCLE_CMD+0x64>)
 8048e72:	f011 fb5b 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {START_SAMPLE_CYCLE_CMD, START_SAMPLE_CYCLE_ACK};
 8048e76:	4b14      	ldr	r3, [pc, #80]	@ (8048ec8 <MIN_Send_START_SAMPLE_CYCLE_CMD+0x68>)
 8048e78:	881b      	ldrh	r3, [r3, #0]
 8048e7a:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048e7c:	4b13      	ldr	r3, [pc, #76]	@ (8048ecc <MIN_Send_START_SAMPLE_CYCLE_CMD+0x6c>)
 8048e7e:	6818      	ldr	r0, [r3, #0]
 8048e80:	4639      	mov	r1, r7
 8048e82:	2300      	movs	r3, #0
 8048e84:	f04f 32ff 	mov.w	r2, #4294967295
 8048e88:	f00c fa02 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048e8c:	4b10      	ldr	r3, [pc, #64]	@ (8048ed0 <MIN_Send_START_SAMPLE_CYCLE_CMD+0x70>)
 8048e8e:	681b      	ldr	r3, [r3, #0]
 8048e90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048e94:	4618      	mov	r0, r3
 8048e96:	f00c fc9f 	bl	80557d8 <xQueueSemaphoreTake>
 8048e9a:	4603      	mov	r3, r0
 8048e9c:	2b01      	cmp	r3, #1
 8048e9e:	d105      	bne.n	8048eac <MIN_Send_START_SAMPLE_CYCLE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - START_SAMPLING_CYCLE_CMD");
 8048ea0:	2200      	movs	r2, #0
 8048ea2:	490c      	ldr	r1, [pc, #48]	@ (8048ed4 <MIN_Send_START_SAMPLE_CYCLE_CMD+0x74>)
 8048ea4:	2002      	movs	r0, #2
 8048ea6:	f002 fe83 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout START_SAMPLING_CYCLE_CMD");
        ClearPendingCommand();
    }
}
 8048eaa:	e006      	b.n	8048eba <MIN_Send_START_SAMPLE_CYCLE_CMD+0x5a>
        SYSLOG_ERROR("Timeout START_SAMPLING_CYCLE_CMD");
 8048eac:	2200      	movs	r2, #0
 8048eae:	490a      	ldr	r1, [pc, #40]	@ (8048ed8 <MIN_Send_START_SAMPLE_CYCLE_CMD+0x78>)
 8048eb0:	2004      	movs	r0, #4
 8048eb2:	f002 fe7d 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048eb6:	f7ff fbed 	bl	8048694 <ClearPendingCommand>
}
 8048eba:	bf00      	nop
 8048ebc:	3708      	adds	r7, #8
 8048ebe:	46bd      	mov	sp, r7
 8048ec0:	bd80      	pop	{r7, pc}
 8048ec2:	bf00      	nop
 8048ec4:	2401e810 	.word	0x2401e810
 8048ec8:	0806d79c 	.word	0x0806d79c
 8048ecc:	2401ea24 	.word	0x2401ea24
 8048ed0:	2401ea20 	.word	0x2401ea20
 8048ed4:	0806d750 	.word	0x0806d750
 8048ed8:	0806d778 	.word	0x0806d778

08048edc <MIN_Send_GET_INFO_SAMPLE_CMD>:

void MIN_Send_GET_INFO_SAMPLE_CMD(void) {
 8048edc:	b580      	push	{r7, lr}
 8048ede:	b082      	sub	sp, #8
 8048ee0:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8048ee2:	23ff      	movs	r3, #255	@ 0xff
 8048ee4:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, GET_INFO_SAMPLE_CMD, payload, sizeof(payload));
 8048ee6:	1d3a      	adds	r2, r7, #4
 8048ee8:	2301      	movs	r3, #1
 8048eea:	211e      	movs	r1, #30
 8048eec:	4814      	ldr	r0, [pc, #80]	@ (8048f40 <MIN_Send_GET_INFO_SAMPLE_CMD+0x64>)
 8048eee:	f011 fb1d 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {GET_INFO_SAMPLE_CMD, GET_INFO_SAMPLE_ACK};
 8048ef2:	4b14      	ldr	r3, [pc, #80]	@ (8048f44 <MIN_Send_GET_INFO_SAMPLE_CMD+0x68>)
 8048ef4:	881b      	ldrh	r3, [r3, #0]
 8048ef6:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048ef8:	4b13      	ldr	r3, [pc, #76]	@ (8048f48 <MIN_Send_GET_INFO_SAMPLE_CMD+0x6c>)
 8048efa:	6818      	ldr	r0, [r3, #0]
 8048efc:	4639      	mov	r1, r7
 8048efe:	2300      	movs	r3, #0
 8048f00:	f04f 32ff 	mov.w	r2, #4294967295
 8048f04:	f00c f9c4 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048f08:	4b10      	ldr	r3, [pc, #64]	@ (8048f4c <MIN_Send_GET_INFO_SAMPLE_CMD+0x70>)
 8048f0a:	681b      	ldr	r3, [r3, #0]
 8048f0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048f10:	4618      	mov	r0, r3
 8048f12:	f00c fc61 	bl	80557d8 <xQueueSemaphoreTake>
 8048f16:	4603      	mov	r3, r0
 8048f18:	2b01      	cmp	r3, #1
 8048f1a:	d105      	bne.n	8048f28 <MIN_Send_GET_INFO_SAMPLE_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - GET_INFO_SAMPLE_CMD");
 8048f1c:	2200      	movs	r2, #0
 8048f1e:	490c      	ldr	r1, [pc, #48]	@ (8048f50 <MIN_Send_GET_INFO_SAMPLE_CMD+0x74>)
 8048f20:	2002      	movs	r0, #2
 8048f22:	f002 fe45 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout GET_INFO_SAMPLE_CMD");
        ClearPendingCommand();
    }
}
 8048f26:	e006      	b.n	8048f36 <MIN_Send_GET_INFO_SAMPLE_CMD+0x5a>
        SYSLOG_ERROR("Timeout GET_INFO_SAMPLE_CMD");
 8048f28:	2200      	movs	r2, #0
 8048f2a:	490a      	ldr	r1, [pc, #40]	@ (8048f54 <MIN_Send_GET_INFO_SAMPLE_CMD+0x78>)
 8048f2c:	2004      	movs	r0, #4
 8048f2e:	f002 fe3f 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048f32:	f7ff fbaf 	bl	8048694 <ClearPendingCommand>
}
 8048f36:	bf00      	nop
 8048f38:	3708      	adds	r7, #8
 8048f3a:	46bd      	mov	sp, r7
 8048f3c:	bd80      	pop	{r7, pc}
 8048f3e:	bf00      	nop
 8048f40:	2401e810 	.word	0x2401e810
 8048f44:	0806d7e0 	.word	0x0806d7e0
 8048f48:	2401ea24 	.word	0x2401ea24
 8048f4c:	2401ea20 	.word	0x2401ea20
 8048f50:	0806d7a0 	.word	0x0806d7a0
 8048f54:	0806d7c4 	.word	0x0806d7c4

08048f58 <MIN_Send_GET_CHUNK_CMD>:

void MIN_Send_GET_CHUNK_CMD(uint8_t noChunk) {
 8048f58:	b580      	push	{r7, lr}
 8048f5a:	b084      	sub	sp, #16
 8048f5c:	af00      	add	r7, sp, #0
 8048f5e:	4603      	mov	r3, r0
 8048f60:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2] = {0};
 8048f62:	2300      	movs	r3, #0
 8048f64:	81bb      	strh	r3, [r7, #12]

    payload[0] = noChunk;
 8048f66:	79fb      	ldrb	r3, [r7, #7]
 8048f68:	733b      	strb	r3, [r7, #12]
    payload[1] = 0xFF; // RESERVED
 8048f6a:	23ff      	movs	r3, #255	@ 0xff
 8048f6c:	737b      	strb	r3, [r7, #13]

    MIN_Send(&OBC_MinCtx, GET_CHUNK_CMD, payload, sizeof(payload));
 8048f6e:	f107 020c 	add.w	r2, r7, #12
 8048f72:	2302      	movs	r3, #2
 8048f74:	2120      	movs	r1, #32
 8048f76:	4815      	ldr	r0, [pc, #84]	@ (8048fcc <MIN_Send_GET_CHUNK_CMD+0x74>)
 8048f78:	f011 fad8 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {GET_CHUNK_CMD, GET_CHUNK_ACK};
 8048f7c:	4b14      	ldr	r3, [pc, #80]	@ (8048fd0 <MIN_Send_GET_CHUNK_CMD+0x78>)
 8048f7e:	881b      	ldrh	r3, [r3, #0]
 8048f80:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8048f82:	4b14      	ldr	r3, [pc, #80]	@ (8048fd4 <MIN_Send_GET_CHUNK_CMD+0x7c>)
 8048f84:	6818      	ldr	r0, [r3, #0]
 8048f86:	f107 0108 	add.w	r1, r7, #8
 8048f8a:	2300      	movs	r3, #0
 8048f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8048f90:	f00c f97e 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8048f94:	4b10      	ldr	r3, [pc, #64]	@ (8048fd8 <MIN_Send_GET_CHUNK_CMD+0x80>)
 8048f96:	681b      	ldr	r3, [r3, #0]
 8048f98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8048f9c:	4618      	mov	r0, r3
 8048f9e:	f00c fc1b 	bl	80557d8 <xQueueSemaphoreTake>
 8048fa2:	4603      	mov	r3, r0
 8048fa4:	2b01      	cmp	r3, #1
 8048fa6:	d105      	bne.n	8048fb4 <MIN_Send_GET_CHUNK_CMD+0x5c>
        SYSLOG_NOTICE("Response OK - GET_CHUNK_CMD");
 8048fa8:	2200      	movs	r2, #0
 8048faa:	490c      	ldr	r1, [pc, #48]	@ (8048fdc <MIN_Send_GET_CHUNK_CMD+0x84>)
 8048fac:	2002      	movs	r0, #2
 8048fae:	f002 fdff 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout GET_CHUNK_CMD");
        ClearPendingCommand();
    }
}
 8048fb2:	e006      	b.n	8048fc2 <MIN_Send_GET_CHUNK_CMD+0x6a>
        SYSLOG_ERROR("Timeout GET_CHUNK_CMD");
 8048fb4:	2200      	movs	r2, #0
 8048fb6:	490a      	ldr	r1, [pc, #40]	@ (8048fe0 <MIN_Send_GET_CHUNK_CMD+0x88>)
 8048fb8:	2004      	movs	r0, #4
 8048fba:	f002 fdf9 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8048fbe:	f7ff fb69 	bl	8048694 <ClearPendingCommand>
}
 8048fc2:	bf00      	nop
 8048fc4:	3710      	adds	r7, #16
 8048fc6:	46bd      	mov	sp, r7
 8048fc8:	bd80      	pop	{r7, pc}
 8048fca:	bf00      	nop
 8048fcc:	2401e810 	.word	0x2401e810
 8048fd0:	0806d818 	.word	0x0806d818
 8048fd4:	2401ea24 	.word	0x2401ea24
 8048fd8:	2401ea20 	.word	0x2401ea20
 8048fdc:	0806d7e4 	.word	0x0806d7e4
 8048fe0:	0806d800 	.word	0x0806d800

08048fe4 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD>:

void MIN_Send_SET_EXT_LASER_INTENSITY_CMD(uint8_t intensity) {
 8048fe4:	b580      	push	{r7, lr}
 8048fe6:	b084      	sub	sp, #16
 8048fe8:	af00      	add	r7, sp, #0
 8048fea:	4603      	mov	r3, r0
 8048fec:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2] = {0};
 8048fee:	2300      	movs	r3, #0
 8048ff0:	81bb      	strh	r3, [r7, #12]

    payload[0] = intensity;
 8048ff2:	79fb      	ldrb	r3, [r7, #7]
 8048ff4:	733b      	strb	r3, [r7, #12]
    payload[1] = 0xFF; // RESERVED
 8048ff6:	23ff      	movs	r3, #255	@ 0xff
 8048ff8:	737b      	strb	r3, [r7, #13]

    MIN_Send(&OBC_MinCtx, SET_EXT_LASER_INTENSITY_CMD, payload, sizeof(payload));
 8048ffa:	f107 020c 	add.w	r2, r7, #12
 8048ffe:	2302      	movs	r3, #2
 8049000:	2128      	movs	r1, #40	@ 0x28
 8049002:	4815      	ldr	r0, [pc, #84]	@ (8049058 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x74>)
 8049004:	f011 fa92 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {SET_EXT_LASER_INTENSITY_CMD, SET_EXT_LASER_INTENSITY_ACK};
 8049008:	4b14      	ldr	r3, [pc, #80]	@ (804905c <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x78>)
 804900a:	881b      	ldrh	r3, [r3, #0]
 804900c:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 804900e:	4b14      	ldr	r3, [pc, #80]	@ (8049060 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x7c>)
 8049010:	6818      	ldr	r0, [r3, #0]
 8049012:	f107 0108 	add.w	r1, r7, #8
 8049016:	2300      	movs	r3, #0
 8049018:	f04f 32ff 	mov.w	r2, #4294967295
 804901c:	f00c f938 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8049020:	4b10      	ldr	r3, [pc, #64]	@ (8049064 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x80>)
 8049022:	681b      	ldr	r3, [r3, #0]
 8049024:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8049028:	4618      	mov	r0, r3
 804902a:	f00c fbd5 	bl	80557d8 <xQueueSemaphoreTake>
 804902e:	4603      	mov	r3, r0
 8049030:	2b01      	cmp	r3, #1
 8049032:	d105      	bne.n	8049040 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x5c>
        SYSLOG_NOTICE("Response OK - SET_EXT_LASER_PROFILE_CMD");
 8049034:	2200      	movs	r2, #0
 8049036:	490c      	ldr	r1, [pc, #48]	@ (8049068 <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x84>)
 8049038:	2002      	movs	r0, #2
 804903a:	f002 fdb9 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SET_EXT_LASER_PROFILE_CMD");
        ClearPendingCommand();
    }
}
 804903e:	e006      	b.n	804904e <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x6a>
        SYSLOG_ERROR("Timeout SET_EXT_LASER_PROFILE_CMD");
 8049040:	2200      	movs	r2, #0
 8049042:	490a      	ldr	r1, [pc, #40]	@ (804906c <MIN_Send_SET_EXT_LASER_INTENSITY_CMD+0x88>)
 8049044:	2004      	movs	r0, #4
 8049046:	f002 fdb3 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 804904a:	f7ff fb23 	bl	8048694 <ClearPendingCommand>
}
 804904e:	bf00      	nop
 8049050:	3710      	adds	r7, #16
 8049052:	46bd      	mov	sp, r7
 8049054:	bd80      	pop	{r7, pc}
 8049056:	bf00      	nop
 8049058:	2401e810 	.word	0x2401e810
 804905c:	0806d868 	.word	0x0806d868
 8049060:	2401ea24 	.word	0x2401ea24
 8049064:	2401ea20 	.word	0x2401ea20
 8049068:	0806d81c 	.word	0x0806d81c
 804906c:	0806d844 	.word	0x0806d844

08049070 <MIN_Send_TURN_ON_EXT_LASER_CMD>:

void MIN_Send_TURN_ON_EXT_LASER_CMD(uint8_t position) {
 8049070:	b580      	push	{r7, lr}
 8049072:	b084      	sub	sp, #16
 8049074:	af00      	add	r7, sp, #0
 8049076:	4603      	mov	r3, r0
 8049078:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2] = {0};
 804907a:	2300      	movs	r3, #0
 804907c:	81bb      	strh	r3, [r7, #12]

    payload[0] = position;
 804907e:	79fb      	ldrb	r3, [r7, #7]
 8049080:	733b      	strb	r3, [r7, #12]
    payload[1] = 0xFF; // RESERVED
 8049082:	23ff      	movs	r3, #255	@ 0xff
 8049084:	737b      	strb	r3, [r7, #13]

    MIN_Send(&OBC_MinCtx, TURN_ON_EXT_LASER_CMD, payload, sizeof(payload));
 8049086:	f107 020c 	add.w	r2, r7, #12
 804908a:	2302      	movs	r3, #2
 804908c:	212a      	movs	r1, #42	@ 0x2a
 804908e:	4815      	ldr	r0, [pc, #84]	@ (80490e4 <MIN_Send_TURN_ON_EXT_LASER_CMD+0x74>)
 8049090:	f011 fa4c 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {TURN_ON_EXT_LASER_CMD, TURN_ON_EXT_LASER_ACK};
 8049094:	4b14      	ldr	r3, [pc, #80]	@ (80490e8 <MIN_Send_TURN_ON_EXT_LASER_CMD+0x78>)
 8049096:	881b      	ldrh	r3, [r3, #0]
 8049098:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 804909a:	4b14      	ldr	r3, [pc, #80]	@ (80490ec <MIN_Send_TURN_ON_EXT_LASER_CMD+0x7c>)
 804909c:	6818      	ldr	r0, [r3, #0]
 804909e:	f107 0108 	add.w	r1, r7, #8
 80490a2:	2300      	movs	r3, #0
 80490a4:	f04f 32ff 	mov.w	r2, #4294967295
 80490a8:	f00c f8f2 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80490ac:	4b10      	ldr	r3, [pc, #64]	@ (80490f0 <MIN_Send_TURN_ON_EXT_LASER_CMD+0x80>)
 80490ae:	681b      	ldr	r3, [r3, #0]
 80490b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80490b4:	4618      	mov	r0, r3
 80490b6:	f00c fb8f 	bl	80557d8 <xQueueSemaphoreTake>
 80490ba:	4603      	mov	r3, r0
 80490bc:	2b01      	cmp	r3, #1
 80490be:	d105      	bne.n	80490cc <MIN_Send_TURN_ON_EXT_LASER_CMD+0x5c>
        SYSLOG_NOTICE("Response OK - TURN_ON_EXT_LASER_CMD");
 80490c0:	2200      	movs	r2, #0
 80490c2:	490c      	ldr	r1, [pc, #48]	@ (80490f4 <MIN_Send_TURN_ON_EXT_LASER_CMD+0x84>)
 80490c4:	2002      	movs	r0, #2
 80490c6:	f002 fd73 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout TURN_ON_EXT_LASER_CMD");
        ClearPendingCommand();
    }
}
 80490ca:	e006      	b.n	80490da <MIN_Send_TURN_ON_EXT_LASER_CMD+0x6a>
        SYSLOG_ERROR("Timeout TURN_ON_EXT_LASER_CMD");
 80490cc:	2200      	movs	r2, #0
 80490ce:	490a      	ldr	r1, [pc, #40]	@ (80490f8 <MIN_Send_TURN_ON_EXT_LASER_CMD+0x88>)
 80490d0:	2004      	movs	r0, #4
 80490d2:	f002 fd6d 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 80490d6:	f7ff fadd 	bl	8048694 <ClearPendingCommand>
}
 80490da:	bf00      	nop
 80490dc:	3710      	adds	r7, #16
 80490de:	46bd      	mov	sp, r7
 80490e0:	bd80      	pop	{r7, pc}
 80490e2:	bf00      	nop
 80490e4:	2401e810 	.word	0x2401e810
 80490e8:	0806d8b0 	.word	0x0806d8b0
 80490ec:	2401ea24 	.word	0x2401ea24
 80490f0:	2401ea20 	.word	0x2401ea20
 80490f4:	0806d86c 	.word	0x0806d86c
 80490f8:	0806d890 	.word	0x0806d890

080490fc <MIN_Send_TURN_OFF_EXT_LASER_CMD>:

void MIN_Send_TURN_OFF_EXT_LASER_CMD(void) { // all
 80490fc:	b580      	push	{r7, lr}
 80490fe:	b082      	sub	sp, #8
 8049100:	af00      	add	r7, sp, #0
    uint8_t payload[1] = {0xFF}; // RESERVED
 8049102:	23ff      	movs	r3, #255	@ 0xff
 8049104:	713b      	strb	r3, [r7, #4]
    MIN_Send(&OBC_MinCtx, TURN_OFF_EXT_LASER_CMD, payload, sizeof(payload));
 8049106:	1d3a      	adds	r2, r7, #4
 8049108:	2301      	movs	r3, #1
 804910a:	212c      	movs	r1, #44	@ 0x2c
 804910c:	4814      	ldr	r0, [pc, #80]	@ (8049160 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x64>)
 804910e:	f011 fa0d 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {TURN_OFF_EXT_LASER_CMD, TURN_OFF_EXT_LASER_ACK};
 8049112:	4b14      	ldr	r3, [pc, #80]	@ (8049164 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x68>)
 8049114:	881b      	ldrh	r3, [r3, #0]
 8049116:	803b      	strh	r3, [r7, #0]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8049118:	4b13      	ldr	r3, [pc, #76]	@ (8049168 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x6c>)
 804911a:	6818      	ldr	r0, [r3, #0]
 804911c:	4639      	mov	r1, r7
 804911e:	2300      	movs	r3, #0
 8049120:	f04f 32ff 	mov.w	r2, #4294967295
 8049124:	f00c f8b4 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8049128:	4b10      	ldr	r3, [pc, #64]	@ (804916c <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x70>)
 804912a:	681b      	ldr	r3, [r3, #0]
 804912c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8049130:	4618      	mov	r0, r3
 8049132:	f00c fb51 	bl	80557d8 <xQueueSemaphoreTake>
 8049136:	4603      	mov	r3, r0
 8049138:	2b01      	cmp	r3, #1
 804913a:	d105      	bne.n	8049148 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x4c>
        SYSLOG_NOTICE("Response OK - TURN_OFF_EXT_LASER_CMD");
 804913c:	2200      	movs	r2, #0
 804913e:	490c      	ldr	r1, [pc, #48]	@ (8049170 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x74>)
 8049140:	2002      	movs	r0, #2
 8049142:	f002 fd35 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout TURN_OFF_EXT_LASER_CMD");
        ClearPendingCommand();
    }
}
 8049146:	e006      	b.n	8049156 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x5a>
        SYSLOG_ERROR("Timeout TURN_OFF_EXT_LASER_CMD");
 8049148:	2200      	movs	r2, #0
 804914a:	490a      	ldr	r1, [pc, #40]	@ (8049174 <MIN_Send_TURN_OFF_EXT_LASER_CMD+0x78>)
 804914c:	2004      	movs	r0, #4
 804914e:	f002 fd2f 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 8049152:	f7ff fa9f 	bl	8048694 <ClearPendingCommand>
}
 8049156:	bf00      	nop
 8049158:	3708      	adds	r7, #8
 804915a:	46bd      	mov	sp, r7
 804915c:	bd80      	pop	{r7, pc}
 804915e:	bf00      	nop
 8049160:	2401e810 	.word	0x2401e810
 8049164:	0806d8fc 	.word	0x0806d8fc
 8049168:	2401ea24 	.word	0x2401ea24
 804916c:	2401ea20 	.word	0x2401ea20
 8049170:	0806d8b4 	.word	0x0806d8b4
 8049174:	0806d8dc 	.word	0x0806d8dc

08049178 <MIN_Send_CUSTOM_COMMAND_CMD>:

void MIN_Send_CUSTOM_COMMAND_CMD(const char *cmdStr, uint8_t len) {
 8049178:	b580      	push	{r7, lr}
 804917a:	b084      	sub	sp, #16
 804917c:	af00      	add	r7, sp, #0
 804917e:	6078      	str	r0, [r7, #4]
 8049180:	460b      	mov	r3, r1
 8049182:	70fb      	strb	r3, [r7, #3]
    MIN_Send(&OBC_MinCtx, CUSTOM_COMMAND_CMD, (const uint8_t *)cmdStr, len);
 8049184:	78fb      	ldrb	r3, [r7, #3]
 8049186:	687a      	ldr	r2, [r7, #4]
 8049188:	2136      	movs	r1, #54	@ 0x36
 804918a:	4815      	ldr	r0, [pc, #84]	@ (80491e0 <MIN_Send_CUSTOM_COMMAND_CMD+0x68>)
 804918c:	f011 f9ce 	bl	805a52c <MIN_Send>

    CommandInfo_t cmdInfo = {CUSTOM_COMMAND_CMD, CUSTOM_COMMAND_ACK};
 8049190:	4b14      	ldr	r3, [pc, #80]	@ (80491e4 <MIN_Send_CUSTOM_COMMAND_CMD+0x6c>)
 8049192:	881b      	ldrh	r3, [r3, #0]
 8049194:	81bb      	strh	r3, [r7, #12]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8049196:	4b14      	ldr	r3, [pc, #80]	@ (80491e8 <MIN_Send_CUSTOM_COMMAND_CMD+0x70>)
 8049198:	6818      	ldr	r0, [r3, #0]
 804919a:	f107 010c 	add.w	r1, r7, #12
 804919e:	2300      	movs	r3, #0
 80491a0:	f04f 32ff 	mov.w	r2, #4294967295
 80491a4:	f00c f874 	bl	8055290 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80491a8:	4b10      	ldr	r3, [pc, #64]	@ (80491ec <MIN_Send_CUSTOM_COMMAND_CMD+0x74>)
 80491aa:	681b      	ldr	r3, [r3, #0]
 80491ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80491b0:	4618      	mov	r0, r3
 80491b2:	f00c fb11 	bl	80557d8 <xQueueSemaphoreTake>
 80491b6:	4603      	mov	r3, r0
 80491b8:	2b01      	cmp	r3, #1
 80491ba:	d105      	bne.n	80491c8 <MIN_Send_CUSTOM_COMMAND_CMD+0x50>
        SYSLOG_NOTICE("Response OK - CUSTOM_COMMAND_CMD");
 80491bc:	2200      	movs	r2, #0
 80491be:	490c      	ldr	r1, [pc, #48]	@ (80491f0 <MIN_Send_CUSTOM_COMMAND_CMD+0x78>)
 80491c0:	2002      	movs	r0, #2
 80491c2:	f002 fcf5 	bl	804bbb0 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout CUSTOM_COMMAND_CMD");
        ClearPendingCommand();
    }
}
 80491c6:	e006      	b.n	80491d6 <MIN_Send_CUSTOM_COMMAND_CMD+0x5e>
        SYSLOG_ERROR("Timeout CUSTOM_COMMAND_CMD");
 80491c8:	2200      	movs	r2, #0
 80491ca:	490a      	ldr	r1, [pc, #40]	@ (80491f4 <MIN_Send_CUSTOM_COMMAND_CMD+0x7c>)
 80491cc:	2004      	movs	r0, #4
 80491ce:	f002 fcef 	bl	804bbb0 <syslog_log>
        ClearPendingCommand();
 80491d2:	f7ff fa5f 	bl	8048694 <ClearPendingCommand>
}
 80491d6:	bf00      	nop
 80491d8:	3710      	adds	r7, #16
 80491da:	46bd      	mov	sp, r7
 80491dc:	bd80      	pop	{r7, pc}
 80491de:	bf00      	nop
 80491e0:	2401e810 	.word	0x2401e810
 80491e4:	0806d940 	.word	0x0806d940
 80491e8:	2401ea24 	.word	0x2401ea24
 80491ec:	2401ea20 	.word	0x2401ea20
 80491f0:	0806d900 	.word	0x0806d900
 80491f4:	0806d924 	.word	0x0806d924

080491f8 <ScriptStorage_GetResultString>:
 * @brief Get storage result description string
 * @param result Storage result code
 * @return Human-readable description string
 */
static inline const char* ScriptStorage_GetResultString(ScriptStorageResult_t result)
{
 80491f8:	b480      	push	{r7}
 80491fa:	b083      	sub	sp, #12
 80491fc:	af00      	add	r7, sp, #0
 80491fe:	4603      	mov	r3, r0
 8049200:	71fb      	strb	r3, [r7, #7]
    switch (result) {
 8049202:	79fb      	ldrb	r3, [r7, #7]
 8049204:	2b09      	cmp	r3, #9
 8049206:	d82b      	bhi.n	8049260 <ScriptStorage_GetResultString+0x68>
 8049208:	a201      	add	r2, pc, #4	@ (adr r2, 8049210 <ScriptStorage_GetResultString+0x18>)
 804920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804920e:	bf00      	nop
 8049210:	08049239 	.word	0x08049239
 8049214:	0804923d 	.word	0x0804923d
 8049218:	08049241 	.word	0x08049241
 804921c:	08049245 	.word	0x08049245
 8049220:	08049249 	.word	0x08049249
 8049224:	0804924d 	.word	0x0804924d
 8049228:	08049251 	.word	0x08049251
 804922c:	08049255 	.word	0x08049255
 8049230:	08049259 	.word	0x08049259
 8049234:	0804925d 	.word	0x0804925d
        case STORAGE_SUCCESS:
            return "Success";
 8049238:	4b0d      	ldr	r3, [pc, #52]	@ (8049270 <ScriptStorage_GetResultString+0x78>)
 804923a:	e012      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_NOT_INITIALIZED:
            return "Storage not initialized";
 804923c:	4b0d      	ldr	r3, [pc, #52]	@ (8049274 <ScriptStorage_GetResultString+0x7c>)
 804923e:	e010      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_INVALID_PARAMS:
            return "Invalid parameters";
 8049240:	4b0d      	ldr	r3, [pc, #52]	@ (8049278 <ScriptStorage_GetResultString+0x80>)
 8049242:	e00e      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_INVALID_SIZE:
            return "Invalid script size";
 8049244:	4b0d      	ldr	r3, [pc, #52]	@ (804927c <ScriptStorage_GetResultString+0x84>)
 8049246:	e00c      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_INVALID_MAGIC:
            return "Invalid magic code";
 8049248:	4b0d      	ldr	r3, [pc, #52]	@ (8049280 <ScriptStorage_GetResultString+0x88>)
 804924a:	e00a      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_CRC_MISMATCH:
            return "CRC mismatch";
 804924c:	4b0d      	ldr	r3, [pc, #52]	@ (8049284 <ScriptStorage_GetResultString+0x8c>)
 804924e:	e008      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_FRAM_READ:
            return "FRAM read error";
 8049250:	4b0d      	ldr	r3, [pc, #52]	@ (8049288 <ScriptStorage_GetResultString+0x90>)
 8049252:	e006      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_FRAM_WRITE:
            return "FRAM write error";
 8049254:	4b0d      	ldr	r3, [pc, #52]	@ (804928c <ScriptStorage_GetResultString+0x94>)
 8049256:	e004      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_BUFFER_TOO_SMALL:
            return "Buffer too small";
 8049258:	4b0d      	ldr	r3, [pc, #52]	@ (8049290 <ScriptStorage_GetResultString+0x98>)
 804925a:	e002      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        case STORAGE_ERROR_SCRIPT_NOT_FOUND:
            return "Script not found";
 804925c:	4b0d      	ldr	r3, [pc, #52]	@ (8049294 <ScriptStorage_GetResultString+0x9c>)
 804925e:	e000      	b.n	8049262 <ScriptStorage_GetResultString+0x6a>
        default:
            return "Unknown error";
 8049260:	4b0d      	ldr	r3, [pc, #52]	@ (8049298 <ScriptStorage_GetResultString+0xa0>)
    }
}
 8049262:	4618      	mov	r0, r3
 8049264:	370c      	adds	r7, #12
 8049266:	46bd      	mov	sp, r7
 8049268:	f85d 7b04 	ldr.w	r7, [sp], #4
 804926c:	4770      	bx	lr
 804926e:	bf00      	nop
 8049270:	0806db54 	.word	0x0806db54
 8049274:	0806db5c 	.word	0x0806db5c
 8049278:	0806db74 	.word	0x0806db74
 804927c:	0806db88 	.word	0x0806db88
 8049280:	0806db9c 	.word	0x0806db9c
 8049284:	0806dbb0 	.word	0x0806dbb0
 8049288:	0806dbc0 	.word	0x0806dbc0
 804928c:	0806dbd0 	.word	0x0806dbd0
 8049290:	0806dbe4 	.word	0x0806dbe4
 8049294:	0806dbf8 	.word	0x0806dbf8
 8049298:	0806dc0c 	.word	0x0806dc0c

0804929c <ScriptManager_GetCurrentDailyTimeSeconds>:
/**
 * @brief Get current time in seconds since start of day (0-86399)
 * @return Current time in seconds from 00:00:00
 */
static uint32_t ScriptManager_GetCurrentDailyTimeSeconds(void)
{
 804929c:	b580      	push	{r7, lr}
 804929e:	b084      	sub	sp, #16
 80492a0:	af00      	add	r7, sp, #0
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 80492a2:	1d3b      	adds	r3, r7, #4
 80492a4:	4618      	mov	r0, r3
 80492a6:	f004 fc6b 	bl	804db80 <Utils_GetRTC>

    uint32_t daily_seconds = (rtc.hour * 3600) + (rtc.minute * 60) + rtc.second;
 80492aa:	79fb      	ldrb	r3, [r7, #7]
 80492ac:	461a      	mov	r2, r3
 80492ae:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80492b2:	fb03 f202 	mul.w	r2, r3, r2
 80492b6:	7a3b      	ldrb	r3, [r7, #8]
 80492b8:	4619      	mov	r1, r3
 80492ba:	460b      	mov	r3, r1
 80492bc:	011b      	lsls	r3, r3, #4
 80492be:	1a5b      	subs	r3, r3, r1
 80492c0:	009b      	lsls	r3, r3, #2
 80492c2:	4413      	add	r3, r2
 80492c4:	7a7a      	ldrb	r2, [r7, #9]
 80492c6:	4413      	add	r3, r2
 80492c8:	60fb      	str	r3, [r7, #12]
    return daily_seconds;
 80492ca:	68fb      	ldr	r3, [r7, #12]
}
 80492cc:	4618      	mov	r0, r3
 80492ce:	3710      	adds	r7, #16
 80492d0:	46bd      	mov	sp, r7
 80492d2:	bd80      	pop	{r7, pc}

080492d4 <ScriptManager_GetCurrentTimeSeconds>:
/**
 * @brief Get current soft time in seconds since system start (for logging only)
 * @return Current time in seconds
 */
static uint32_t ScriptManager_GetCurrentTimeSeconds(void)
{
 80492d4:	b580      	push	{r7, lr}
 80492d6:	b084      	sub	sp, #16
 80492d8:	af00      	add	r7, sp, #0
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 80492da:	1d3b      	adds	r3, r7, #4
 80492dc:	4618      	mov	r0, r3
 80492de:	f004 fc4f 	bl	804db80 <Utils_GetRTC>

    // Convert to total seconds (simplified calculation)
    // This provides a monotonic increasing value for logging only
    uint32_t total_seconds = (rtc.year * 365 * 24 * 3600) +
 80492e2:	79bb      	ldrb	r3, [r7, #6]
 80492e4:	461a      	mov	r2, r3
 80492e6:	4b12      	ldr	r3, [pc, #72]	@ (8049330 <ScriptManager_GetCurrentTimeSeconds+0x5c>)
 80492e8:	fb03 f202 	mul.w	r2, r3, r2
                            (rtc.month * 30 * 24 * 3600) +
 80492ec:	797b      	ldrb	r3, [r7, #5]
 80492ee:	4619      	mov	r1, r3
 80492f0:	4b10      	ldr	r3, [pc, #64]	@ (8049334 <ScriptManager_GetCurrentTimeSeconds+0x60>)
 80492f2:	fb01 f303 	mul.w	r3, r1, r3
    uint32_t total_seconds = (rtc.year * 365 * 24 * 3600) +
 80492f6:	441a      	add	r2, r3
                            (rtc.day * 24 * 3600) +
 80492f8:	793b      	ldrb	r3, [r7, #4]
 80492fa:	4619      	mov	r1, r3
 80492fc:	4b0e      	ldr	r3, [pc, #56]	@ (8049338 <ScriptManager_GetCurrentTimeSeconds+0x64>)
 80492fe:	fb01 f303 	mul.w	r3, r1, r3
                            (rtc.month * 30 * 24 * 3600) +
 8049302:	441a      	add	r2, r3
                            (rtc.hour * 3600) +
 8049304:	79fb      	ldrb	r3, [r7, #7]
 8049306:	4619      	mov	r1, r3
 8049308:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 804930c:	fb01 f303 	mul.w	r3, r1, r3
                            (rtc.day * 24 * 3600) +
 8049310:	441a      	add	r2, r3
                            (rtc.minute * 60) +
 8049312:	7a3b      	ldrb	r3, [r7, #8]
 8049314:	4619      	mov	r1, r3
 8049316:	460b      	mov	r3, r1
 8049318:	011b      	lsls	r3, r3, #4
 804931a:	1a5b      	subs	r3, r3, r1
 804931c:	009b      	lsls	r3, r3, #2
                            (rtc.hour * 3600) +
 804931e:	4413      	add	r3, r2
                            rtc.second;
 8049320:	7a7a      	ldrb	r2, [r7, #9]
                            (rtc.minute * 60) +
 8049322:	4413      	add	r3, r2
    uint32_t total_seconds = (rtc.year * 365 * 24 * 3600) +
 8049324:	60fb      	str	r3, [r7, #12]

    return total_seconds;
 8049326:	68fb      	ldr	r3, [r7, #12]
}
 8049328:	4618      	mov	r0, r3
 804932a:	3710      	adds	r7, #16
 804932c:	46bd      	mov	sp, r7
 804932e:	bd80      	pop	{r7, pc}
 8049330:	01e13380 	.word	0x01e13380
 8049334:	00278d00 	.word	0x00278d00
 8049338:	00015180 	.word	0x00015180

0804933c <ScriptManager_ParseStartTime>:
 * @brief Parse time from FF HH MM SS format and convert to daily time
 * @param time_value Time value in FF HH MM SS format
 * @return Daily time in seconds (0-86399)
 */
static uint32_t ScriptManager_ParseStartTime(uint32_t time_value)
{
 804933c:	b580      	push	{r7, lr}
 804933e:	b088      	sub	sp, #32
 8049340:	af02      	add	r7, sp, #8
 8049342:	6078      	str	r0, [r7, #4]
    if (time_value == 0xFFFFFFFF) {
 8049344:	687b      	ldr	r3, [r7, #4]
 8049346:	f1b3 3fff 	cmp.w	r3, #4294967295
 804934a:	d108      	bne.n	804935e <ScriptManager_ParseStartTime+0x22>
        // "now" - return current daily time
        uint32_t current_daily_time = ScriptManager_GetCurrentDailyTimeSeconds();
 804934c:	f7ff ffa6 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 8049350:	60f8      	str	r0, [r7, #12]
        BScript_Log("[ScriptManager] Start time = now (%u seconds from 00:00:00)", current_daily_time);
 8049352:	68f9      	ldr	r1, [r7, #12]
 8049354:	481d      	ldr	r0, [pc, #116]	@ (80493cc <ScriptManager_ParseStartTime+0x90>)
 8049356:	f004 fe19 	bl	804df8c <BScript_Log>
        return current_daily_time;
 804935a:	68fb      	ldr	r3, [r7, #12]
 804935c:	e032      	b.n	80493c4 <ScriptManager_ParseStartTime+0x88>
    }

    // Extract FF HH MM SS format (skip FF byte)
    uint8_t hours = (time_value >> 16) & 0xFF;
 804935e:	687b      	ldr	r3, [r7, #4]
 8049360:	0c1b      	lsrs	r3, r3, #16
 8049362:	75fb      	strb	r3, [r7, #23]
    uint8_t minutes = (time_value >> 8) & 0xFF;
 8049364:	687b      	ldr	r3, [r7, #4]
 8049366:	0a1b      	lsrs	r3, r3, #8
 8049368:	75bb      	strb	r3, [r7, #22]
    uint8_t seconds = time_value & 0xFF;
 804936a:	687b      	ldr	r3, [r7, #4]
 804936c:	757b      	strb	r3, [r7, #21]

    // Validate time components
    if (hours > 23 || minutes > 59 || seconds > 59) {
 804936e:	7dfb      	ldrb	r3, [r7, #23]
 8049370:	2b17      	cmp	r3, #23
 8049372:	d805      	bhi.n	8049380 <ScriptManager_ParseStartTime+0x44>
 8049374:	7dbb      	ldrb	r3, [r7, #22]
 8049376:	2b3b      	cmp	r3, #59	@ 0x3b
 8049378:	d802      	bhi.n	8049380 <ScriptManager_ParseStartTime+0x44>
 804937a:	7d7b      	ldrb	r3, [r7, #21]
 804937c:	2b3b      	cmp	r3, #59	@ 0x3b
 804937e:	d909      	bls.n	8049394 <ScriptManager_ParseStartTime+0x58>
        BScript_Log("[ScriptManager] Invalid time format: %02u:%02u:%02u, using now",
 8049380:	7df9      	ldrb	r1, [r7, #23]
 8049382:	7dba      	ldrb	r2, [r7, #22]
 8049384:	7d7b      	ldrb	r3, [r7, #21]
 8049386:	4812      	ldr	r0, [pc, #72]	@ (80493d0 <ScriptManager_ParseStartTime+0x94>)
 8049388:	f004 fe00 	bl	804df8c <BScript_Log>
                   hours, minutes, seconds);
        return ScriptManager_GetCurrentDailyTimeSeconds();
 804938c:	f7ff ff86 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 8049390:	4603      	mov	r3, r0
 8049392:	e017      	b.n	80493c4 <ScriptManager_ParseStartTime+0x88>
    }

    // Convert to daily seconds
    uint32_t daily_seconds = (hours * 3600) + (minutes * 60) + seconds;
 8049394:	7dfb      	ldrb	r3, [r7, #23]
 8049396:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 804939a:	fb02 f103 	mul.w	r1, r2, r3
 804939e:	7dba      	ldrb	r2, [r7, #22]
 80493a0:	4613      	mov	r3, r2
 80493a2:	011b      	lsls	r3, r3, #4
 80493a4:	1a9b      	subs	r3, r3, r2
 80493a6:	009b      	lsls	r3, r3, #2
 80493a8:	18ca      	adds	r2, r1, r3
 80493aa:	7d7b      	ldrb	r3, [r7, #21]
 80493ac:	4413      	add	r3, r2
 80493ae:	613b      	str	r3, [r7, #16]

    BScript_Log("[ScriptManager] Start time set to %02u:%02u:%02u (%u seconds from 00:00:00)",
 80493b0:	7df9      	ldrb	r1, [r7, #23]
 80493b2:	7dba      	ldrb	r2, [r7, #22]
 80493b4:	7d78      	ldrb	r0, [r7, #21]
 80493b6:	693b      	ldr	r3, [r7, #16]
 80493b8:	9300      	str	r3, [sp, #0]
 80493ba:	4603      	mov	r3, r0
 80493bc:	4805      	ldr	r0, [pc, #20]	@ (80493d4 <ScriptManager_ParseStartTime+0x98>)
 80493be:	f004 fde5 	bl	804df8c <BScript_Log>
               hours, minutes, seconds, daily_seconds);

    return daily_seconds;
 80493c2:	693b      	ldr	r3, [r7, #16]
}
 80493c4:	4618      	mov	r0, r3
 80493c6:	3718      	adds	r7, #24
 80493c8:	46bd      	mov	sp, r7
 80493ca:	bd80      	pop	{r7, pc}
 80493cc:	0806dc1c 	.word	0x0806dc1c
 80493d0:	0806dc58 	.word	0x0806dc58
 80493d4:	0806dc98 	.word	0x0806dc98

080493d8 <ScriptManager_TimeToHMS>:
 * @param hour Output hour (0-23)
 * @param minute Output minute (0-59)
 * @param second Output second (0-59)
 */
static void ScriptManager_TimeToHMS(uint32_t seconds_in_day, uint8_t* hour, uint8_t* minute, uint8_t* second)
{
 80493d8:	b480      	push	{r7}
 80493da:	b085      	sub	sp, #20
 80493dc:	af00      	add	r7, sp, #0
 80493de:	60f8      	str	r0, [r7, #12]
 80493e0:	60b9      	str	r1, [r7, #8]
 80493e2:	607a      	str	r2, [r7, #4]
 80493e4:	603b      	str	r3, [r7, #0]
    *hour = (seconds_in_day / 3600) % 24;
 80493e6:	68fb      	ldr	r3, [r7, #12]
 80493e8:	4a19      	ldr	r2, [pc, #100]	@ (8049450 <ScriptManager_TimeToHMS+0x78>)
 80493ea:	fba2 2303 	umull	r2, r3, r2, r3
 80493ee:	0ad9      	lsrs	r1, r3, #11
 80493f0:	4b18      	ldr	r3, [pc, #96]	@ (8049454 <ScriptManager_TimeToHMS+0x7c>)
 80493f2:	fba3 2301 	umull	r2, r3, r3, r1
 80493f6:	091a      	lsrs	r2, r3, #4
 80493f8:	4613      	mov	r3, r2
 80493fa:	005b      	lsls	r3, r3, #1
 80493fc:	4413      	add	r3, r2
 80493fe:	00db      	lsls	r3, r3, #3
 8049400:	1aca      	subs	r2, r1, r3
 8049402:	b2d2      	uxtb	r2, r2
 8049404:	68bb      	ldr	r3, [r7, #8]
 8049406:	701a      	strb	r2, [r3, #0]
    *minute = (seconds_in_day % 3600) / 60;
 8049408:	68fa      	ldr	r2, [r7, #12]
 804940a:	4b11      	ldr	r3, [pc, #68]	@ (8049450 <ScriptManager_TimeToHMS+0x78>)
 804940c:	fba3 1302 	umull	r1, r3, r3, r2
 8049410:	0adb      	lsrs	r3, r3, #11
 8049412:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8049416:	fb01 f303 	mul.w	r3, r1, r3
 804941a:	1ad3      	subs	r3, r2, r3
 804941c:	4a0e      	ldr	r2, [pc, #56]	@ (8049458 <ScriptManager_TimeToHMS+0x80>)
 804941e:	fba2 2303 	umull	r2, r3, r2, r3
 8049422:	095b      	lsrs	r3, r3, #5
 8049424:	b2da      	uxtb	r2, r3
 8049426:	687b      	ldr	r3, [r7, #4]
 8049428:	701a      	strb	r2, [r3, #0]
    *second = seconds_in_day % 60;
 804942a:	68f9      	ldr	r1, [r7, #12]
 804942c:	4b0a      	ldr	r3, [pc, #40]	@ (8049458 <ScriptManager_TimeToHMS+0x80>)
 804942e:	fba3 2301 	umull	r2, r3, r3, r1
 8049432:	095a      	lsrs	r2, r3, #5
 8049434:	4613      	mov	r3, r2
 8049436:	011b      	lsls	r3, r3, #4
 8049438:	1a9b      	subs	r3, r3, r2
 804943a:	009b      	lsls	r3, r3, #2
 804943c:	1aca      	subs	r2, r1, r3
 804943e:	b2d2      	uxtb	r2, r2
 8049440:	683b      	ldr	r3, [r7, #0]
 8049442:	701a      	strb	r2, [r3, #0]
}
 8049444:	bf00      	nop
 8049446:	3714      	adds	r7, #20
 8049448:	46bd      	mov	sp, r7
 804944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804944e:	4770      	bx	lr
 8049450:	91a2b3c5 	.word	0x91a2b3c5
 8049454:	aaaaaaab 	.word	0xaaaaaaab
 8049458:	88888889 	.word	0x88888889

0804945c <ScriptManager_GenerateTimePoints>:
 * @param start_daily_time Start time in daily seconds (0-86399)
 * @param interval_sec Interval in seconds
 * @return true if successful, false otherwise
 */
_Bool ScriptManager_GenerateTimePoints(TimePointSchedule_t* schedule, uint32_t start_daily_time, uint32_t interval_sec)
{
 804945c:	b590      	push	{r4, r7, lr}
 804945e:	b08d      	sub	sp, #52	@ 0x34
 8049460:	af02      	add	r7, sp, #8
 8049462:	60f8      	str	r0, [r7, #12]
 8049464:	60b9      	str	r1, [r7, #8]
 8049466:	607a      	str	r2, [r7, #4]
    if (!schedule || interval_sec < MIN_INTERVAL_SEC || interval_sec > MAX_INTERVAL_SEC) {
 8049468:	68fb      	ldr	r3, [r7, #12]
 804946a:	2b00      	cmp	r3, #0
 804946c:	d007      	beq.n	804947e <ScriptManager_GenerateTimePoints+0x22>
 804946e:	687b      	ldr	r3, [r7, #4]
 8049470:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8049474:	d303      	bcc.n	804947e <ScriptManager_GenerateTimePoints+0x22>
 8049476:	687b      	ldr	r3, [r7, #4]
 8049478:	4a5b      	ldr	r2, [pc, #364]	@ (80495e8 <ScriptManager_GenerateTimePoints+0x18c>)
 804947a:	4293      	cmp	r3, r2
 804947c:	d904      	bls.n	8049488 <ScriptManager_GenerateTimePoints+0x2c>
        BScript_Log("[ScriptManager] Invalid parameters for time point generation");
 804947e:	485b      	ldr	r0, [pc, #364]	@ (80495ec <ScriptManager_GenerateTimePoints+0x190>)
 8049480:	f004 fd84 	bl	804df8c <BScript_Log>
        return false;
 8049484:	2300      	movs	r3, #0
 8049486:	e0ab      	b.n	80495e0 <ScriptManager_GenerateTimePoints+0x184>
    }

    if (start_daily_time >= SECONDS_PER_DAY) {
 8049488:	68bb      	ldr	r3, [r7, #8]
 804948a:	4a59      	ldr	r2, [pc, #356]	@ (80495f0 <ScriptManager_GenerateTimePoints+0x194>)
 804948c:	4293      	cmp	r3, r2
 804948e:	d905      	bls.n	804949c <ScriptManager_GenerateTimePoints+0x40>
        BScript_Log("[ScriptManager] Invalid start_daily_time: %u (must be 0-86399)", start_daily_time);
 8049490:	68b9      	ldr	r1, [r7, #8]
 8049492:	4858      	ldr	r0, [pc, #352]	@ (80495f4 <ScriptManager_GenerateTimePoints+0x198>)
 8049494:	f004 fd7a 	bl	804df8c <BScript_Log>
        return false;
 8049498:	2300      	movs	r3, #0
 804949a:	e0a1      	b.n	80495e0 <ScriptManager_GenerateTimePoints+0x184>
//    // Store interval for future regeneration
//    uint32_t stored_interval = schedule->interval_sec;
//    _Bool was_configured = schedule->is_configured;

    // Clear existing schedule but preserve interval if this is a regeneration
    memset(schedule, 0, sizeof(TimePointSchedule_t));
 804949c:	f44f 6211 	mov.w	r2, #2320	@ 0x910
 80494a0:	2100      	movs	r1, #0
 80494a2:	68f8      	ldr	r0, [r7, #12]
 80494a4:	f020 f99e 	bl	80697e4 <memset>
    schedule->interval_sec = interval_sec;
 80494a8:	68fb      	ldr	r3, [r7, #12]
 80494aa:	687a      	ldr	r2, [r7, #4]
 80494ac:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904

    // Get current daily time for reference
    uint32_t current_daily_time = ScriptManager_GetCurrentDailyTimeSeconds();
 80494b0:	f7ff fef4 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 80494b4:	61b8      	str	r0, [r7, #24]

    BScript_Log("[ScriptManager] Generating time points:");
 80494b6:	4850      	ldr	r0, [pc, #320]	@ (80495f8 <ScriptManager_GenerateTimePoints+0x19c>)
 80494b8:	f004 fd68 	bl	804df8c <BScript_Log>
    BScript_Log("  - Start daily time: %u seconds", start_daily_time);
 80494bc:	68b9      	ldr	r1, [r7, #8]
 80494be:	484f      	ldr	r0, [pc, #316]	@ (80495fc <ScriptManager_GenerateTimePoints+0x1a0>)
 80494c0:	f004 fd64 	bl	804df8c <BScript_Log>
    BScript_Log("  - Interval: %u seconds", interval_sec);
 80494c4:	6879      	ldr	r1, [r7, #4]
 80494c6:	484e      	ldr	r0, [pc, #312]	@ (8049600 <ScriptManager_GenerateTimePoints+0x1a4>)
 80494c8:	f004 fd60 	bl	804df8c <BScript_Log>
    BScript_Log("  - Current daily time: %u seconds", current_daily_time);
 80494cc:	69b9      	ldr	r1, [r7, #24]
 80494ce:	484d      	ldr	r0, [pc, #308]	@ (8049604 <ScriptManager_GenerateTimePoints+0x1a8>)
 80494d0:	f004 fd5c 	bl	804df8c <BScript_Log>

    // Generate time points for the day
    uint32_t current_point = start_daily_time;
 80494d4:	68bb      	ldr	r3, [r7, #8]
 80494d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t point_count = 0;
 80494d8:	2300      	movs	r3, #0
 80494da:	847b      	strh	r3, [r7, #34]	@ 0x22

    while (point_count < MAX_TIME_POINTS) {
 80494dc:	e037      	b.n	804954e <ScriptManager_GenerateTimePoints+0xf2>
        // Check if we can fit another complete interval before end of day
        if (current_point + interval_sec > SECONDS_PER_DAY) {
 80494de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80494e0:	687b      	ldr	r3, [r7, #4]
 80494e2:	4413      	add	r3, r2
 80494e4:	4a40      	ldr	r2, [pc, #256]	@ (80495e8 <ScriptManager_GenerateTimePoints+0x18c>)
 80494e6:	4293      	cmp	r3, r2
 80494e8:	d906      	bls.n	80494f8 <ScriptManager_GenerateTimePoints+0x9c>
            BScript_Log("[ScriptManager] Cannot fit next interval (%u + %u > %u), stopping",
 80494ea:	4b3f      	ldr	r3, [pc, #252]	@ (80495e8 <ScriptManager_GenerateTimePoints+0x18c>)
 80494ec:	687a      	ldr	r2, [r7, #4]
 80494ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80494f0:	4845      	ldr	r0, [pc, #276]	@ (8049608 <ScriptManager_GenerateTimePoints+0x1ac>)
 80494f2:	f004 fd4b 	bl	804df8c <BScript_Log>
                       current_point, interval_sec, SECONDS_PER_DAY);
            break;
 80494f6:	e02e      	b.n	8049556 <ScriptManager_GenerateTimePoints+0xfa>
        }

        // Create time point
        TimePoint_t* point = &schedule->points[point_count];
 80494f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80494fa:	00db      	lsls	r3, r3, #3
 80494fc:	68fa      	ldr	r2, [r7, #12]
 80494fe:	4413      	add	r3, r2
 8049500:	617b      	str	r3, [r7, #20]
        point->daily_timestamp = current_point;
 8049502:	697b      	ldr	r3, [r7, #20]
 8049504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8049506:	601a      	str	r2, [r3, #0]
        ScriptManager_TimeToHMS(current_point, &point->hour, &point->minute, &point->second);
 8049508:	697b      	ldr	r3, [r7, #20]
 804950a:	1d19      	adds	r1, r3, #4
 804950c:	697b      	ldr	r3, [r7, #20]
 804950e:	1d5a      	adds	r2, r3, #5
 8049510:	697b      	ldr	r3, [r7, #20]
 8049512:	3306      	adds	r3, #6
 8049514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8049516:	f7ff ff5f 	bl	80493d8 <ScriptManager_TimeToHMS>

        BScript_Log("  - Point %u: %02u:%02u:%02u (daily_timestamp: %u)",
 804951a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
                   point_count, point->hour, point->minute, point->second, point->daily_timestamp);
 804951c:	697b      	ldr	r3, [r7, #20]
 804951e:	791b      	ldrb	r3, [r3, #4]
        BScript_Log("  - Point %u: %02u:%02u:%02u (daily_timestamp: %u)",
 8049520:	4618      	mov	r0, r3
                   point_count, point->hour, point->minute, point->second, point->daily_timestamp);
 8049522:	697b      	ldr	r3, [r7, #20]
 8049524:	795b      	ldrb	r3, [r3, #5]
        BScript_Log("  - Point %u: %02u:%02u:%02u (daily_timestamp: %u)",
 8049526:	461c      	mov	r4, r3
                   point_count, point->hour, point->minute, point->second, point->daily_timestamp);
 8049528:	697b      	ldr	r3, [r7, #20]
 804952a:	799b      	ldrb	r3, [r3, #6]
        BScript_Log("  - Point %u: %02u:%02u:%02u (daily_timestamp: %u)",
 804952c:	461a      	mov	r2, r3
 804952e:	697b      	ldr	r3, [r7, #20]
 8049530:	681b      	ldr	r3, [r3, #0]
 8049532:	9301      	str	r3, [sp, #4]
 8049534:	9200      	str	r2, [sp, #0]
 8049536:	4623      	mov	r3, r4
 8049538:	4602      	mov	r2, r0
 804953a:	4834      	ldr	r0, [pc, #208]	@ (804960c <ScriptManager_GenerateTimePoints+0x1b0>)
 804953c:	f004 fd26 	bl	804df8c <BScript_Log>

        point_count++;
 8049540:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8049542:	3301      	adds	r3, #1
 8049544:	847b      	strh	r3, [r7, #34]	@ 0x22
        current_point += interval_sec;
 8049546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8049548:	687b      	ldr	r3, [r7, #4]
 804954a:	4413      	add	r3, r2
 804954c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (point_count < MAX_TIME_POINTS) {
 804954e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8049550:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8049554:	d3c3      	bcc.n	80494de <ScriptManager_GenerateTimePoints+0x82>
    }

    schedule->count = point_count;
 8049556:	68fb      	ldr	r3, [r7, #12]
 8049558:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 804955a:	f8a3 2900 	strh.w	r2, [r3, #2304]	@ 0x900
    schedule->current_index = 0;
 804955e:	68fb      	ldr	r3, [r7, #12]
 8049560:	2200      	movs	r2, #0
 8049562:	f8a3 2902 	strh.w	r2, [r3, #2306]	@ 0x902
    schedule->is_configured = true;
 8049566:	68fb      	ldr	r3, [r7, #12]
 8049568:	2201      	movs	r2, #1
 804956a:	f883 290c 	strb.w	r2, [r3, #2316]	@ 0x90c

    BScript_Log("[ScriptManager] Generated %u time points", point_count);
 804956e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8049570:	4619      	mov	r1, r3
 8049572:	4827      	ldr	r0, [pc, #156]	@ (8049610 <ScriptManager_GenerateTimePoints+0x1b4>)
 8049574:	f004 fd0a 	bl	804df8c <BScript_Log>

    // Find the current or next time point index
    _Bool found_current = false;
 8049578:	2300      	movs	r3, #0
 804957a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    for (uint16_t i = 0; i < point_count; i++) {
 804957e:	2300      	movs	r3, #0
 8049580:	83fb      	strh	r3, [r7, #30]
 8049582:	e01a      	b.n	80495ba <ScriptManager_GenerateTimePoints+0x15e>
        if (schedule->points[i].daily_timestamp >= current_daily_time) {
 8049584:	8bfa      	ldrh	r2, [r7, #30]
 8049586:	68fb      	ldr	r3, [r7, #12]
 8049588:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 804958c:	69ba      	ldr	r2, [r7, #24]
 804958e:	429a      	cmp	r2, r3
 8049590:	d810      	bhi.n	80495b4 <ScriptManager_GenerateTimePoints+0x158>
            schedule->current_index = i;
 8049592:	68fb      	ldr	r3, [r7, #12]
 8049594:	8bfa      	ldrh	r2, [r7, #30]
 8049596:	f8a3 2902 	strh.w	r2, [r3, #2306]	@ 0x902
            found_current = true;
 804959a:	2301      	movs	r3, #1
 804959c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            BScript_Log("[ScriptManager] Next time point index: %u (daily_timestamp: %u)",
 80495a0:	8bf9      	ldrh	r1, [r7, #30]
 80495a2:	8bfa      	ldrh	r2, [r7, #30]
 80495a4:	68fb      	ldr	r3, [r7, #12]
 80495a6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80495aa:	461a      	mov	r2, r3
 80495ac:	4819      	ldr	r0, [pc, #100]	@ (8049614 <ScriptManager_GenerateTimePoints+0x1b8>)
 80495ae:	f004 fced 	bl	804df8c <BScript_Log>
                       i, schedule->points[i].daily_timestamp);
            break;
 80495b2:	e006      	b.n	80495c2 <ScriptManager_GenerateTimePoints+0x166>
    for (uint16_t i = 0; i < point_count; i++) {
 80495b4:	8bfb      	ldrh	r3, [r7, #30]
 80495b6:	3301      	adds	r3, #1
 80495b8:	83fb      	strh	r3, [r7, #30]
 80495ba:	8bfa      	ldrh	r2, [r7, #30]
 80495bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80495be:	429a      	cmp	r2, r3
 80495c0:	d3e0      	bcc.n	8049584 <ScriptManager_GenerateTimePoints+0x128>
        }
    }

    // If all points are in the past for today, start from first point (will run tomorrow at 00:00+ cycle)
    if (!found_current) {
 80495c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80495c6:	f083 0301 	eor.w	r3, r3, #1
 80495ca:	b2db      	uxtb	r3, r3
 80495cc:	2b00      	cmp	r3, #0
 80495ce:	d006      	beq.n	80495de <ScriptManager_GenerateTimePoints+0x182>
        BScript_Log("[ScriptManager] All time points are in the past for today, will start from first point tomorrow");
 80495d0:	4811      	ldr	r0, [pc, #68]	@ (8049618 <ScriptManager_GenerateTimePoints+0x1bc>)
 80495d2:	f004 fcdb 	bl	804df8c <BScript_Log>
        schedule->current_index = 0; // Will be triggered tomorrow when daily time resets
 80495d6:	68fb      	ldr	r3, [r7, #12]
 80495d8:	2200      	movs	r2, #0
 80495da:	f8a3 2902 	strh.w	r2, [r3, #2306]	@ 0x902
    }

    return true;
 80495de:	2301      	movs	r3, #1
}
 80495e0:	4618      	mov	r0, r3
 80495e2:	372c      	adds	r7, #44	@ 0x2c
 80495e4:	46bd      	mov	sp, r7
 80495e6:	bd90      	pop	{r4, r7, pc}
 80495e8:	00015180 	.word	0x00015180
 80495ec:	0806dd30 	.word	0x0806dd30
 80495f0:	0001517f 	.word	0x0001517f
 80495f4:	0806dd70 	.word	0x0806dd70
 80495f8:	0806ddb0 	.word	0x0806ddb0
 80495fc:	0806ddd8 	.word	0x0806ddd8
 8049600:	0806ddfc 	.word	0x0806ddfc
 8049604:	0806de18 	.word	0x0806de18
 8049608:	0806de3c 	.word	0x0806de3c
 804960c:	0806de80 	.word	0x0806de80
 8049610:	0806deb4 	.word	0x0806deb4
 8049614:	0806dee0 	.word	0x0806dee0
 8049618:	0806df20 	.word	0x0806df20

0804961c <ScriptManager_IsTimeToRunSchedule>:
 * @brief Check if it's time to run based on schedule
 * @param schedule Pointer to schedule structure
 * @return true if should run, false otherwise
 */
_Bool ScriptManager_IsTimeToRunSchedule(TimePointSchedule_t* schedule)
{
 804961c:	b580      	push	{r7, lr}
 804961e:	b086      	sub	sp, #24
 8049620:	af00      	add	r7, sp, #0
 8049622:	6078      	str	r0, [r7, #4]
    if (!schedule || !schedule->is_configured || schedule->count == 0) {
 8049624:	687b      	ldr	r3, [r7, #4]
 8049626:	2b00      	cmp	r3, #0
 8049628:	d00c      	beq.n	8049644 <ScriptManager_IsTimeToRunSchedule+0x28>
 804962a:	687b      	ldr	r3, [r7, #4]
 804962c:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 8049630:	f083 0301 	eor.w	r3, r3, #1
 8049634:	b2db      	uxtb	r3, r3
 8049636:	2b00      	cmp	r3, #0
 8049638:	d104      	bne.n	8049644 <ScriptManager_IsTimeToRunSchedule+0x28>
 804963a:	687b      	ldr	r3, [r7, #4]
 804963c:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 8049640:	2b00      	cmp	r3, #0
 8049642:	d101      	bne.n	8049648 <ScriptManager_IsTimeToRunSchedule+0x2c>
        return false;
 8049644:	2300      	movs	r3, #0
 8049646:	e032      	b.n	80496ae <ScriptManager_IsTimeToRunSchedule+0x92>
    }

    uint32_t current_daily_time = ScriptManager_GetCurrentDailyTimeSeconds();
 8049648:	f7ff fe28 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 804964c:	6178      	str	r0, [r7, #20]

    // Check if current time point is reached
    if (schedule->current_index < schedule->count) {
 804964e:	687b      	ldr	r3, [r7, #4]
 8049650:	f8b3 2902 	ldrh.w	r2, [r3, #2306]	@ 0x902
 8049654:	687b      	ldr	r3, [r7, #4]
 8049656:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804965a:	429a      	cmp	r2, r3
 804965c:	d20d      	bcs.n	804967a <ScriptManager_IsTimeToRunSchedule+0x5e>
        TimePoint_t* current_point = &schedule->points[schedule->current_index];
 804965e:	687b      	ldr	r3, [r7, #4]
 8049660:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049664:	00db      	lsls	r3, r3, #3
 8049666:	687a      	ldr	r2, [r7, #4]
 8049668:	4413      	add	r3, r2
 804966a:	613b      	str	r3, [r7, #16]

        if (current_daily_time >= current_point->daily_timestamp) {
 804966c:	693b      	ldr	r3, [r7, #16]
 804966e:	681b      	ldr	r3, [r3, #0]
 8049670:	697a      	ldr	r2, [r7, #20]
 8049672:	429a      	cmp	r2, r3
 8049674:	d301      	bcc.n	804967a <ScriptManager_IsTimeToRunSchedule+0x5e>
            return true;
 8049676:	2301      	movs	r3, #1
 8049678:	e019      	b.n	80496ae <ScriptManager_IsTimeToRunSchedule+0x92>
        }
    }

    // Handle day rollover case: if we're at index 0 and current time matches first point
    if (schedule->current_index == 0 && schedule->count > 0) {
 804967a:	687b      	ldr	r3, [r7, #4]
 804967c:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049680:	2b00      	cmp	r3, #0
 8049682:	d113      	bne.n	80496ac <ScriptManager_IsTimeToRunSchedule+0x90>
 8049684:	687b      	ldr	r3, [r7, #4]
 8049686:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804968a:	2b00      	cmp	r3, #0
 804968c:	d00e      	beq.n	80496ac <ScriptManager_IsTimeToRunSchedule+0x90>
        TimePoint_t* first_point = &schedule->points[0];
 804968e:	687b      	ldr	r3, [r7, #4]
 8049690:	60fb      	str	r3, [r7, #12]
        if (current_daily_time >= first_point->daily_timestamp &&
 8049692:	68fb      	ldr	r3, [r7, #12]
 8049694:	681b      	ldr	r3, [r3, #0]
 8049696:	697a      	ldr	r2, [r7, #20]
 8049698:	429a      	cmp	r2, r3
 804969a:	d307      	bcc.n	80496ac <ScriptManager_IsTimeToRunSchedule+0x90>
            current_daily_time <= (first_point->daily_timestamp + 60)) { // Within 1 minute window
 804969c:	68fb      	ldr	r3, [r7, #12]
 804969e:	681b      	ldr	r3, [r3, #0]
 80496a0:	333c      	adds	r3, #60	@ 0x3c
        if (current_daily_time >= first_point->daily_timestamp &&
 80496a2:	697a      	ldr	r2, [r7, #20]
 80496a4:	429a      	cmp	r2, r3
 80496a6:	d801      	bhi.n	80496ac <ScriptManager_IsTimeToRunSchedule+0x90>
            return true;
 80496a8:	2301      	movs	r3, #1
 80496aa:	e000      	b.n	80496ae <ScriptManager_IsTimeToRunSchedule+0x92>
        }
    }

    return false;
 80496ac:	2300      	movs	r3, #0
}
 80496ae:	4618      	mov	r0, r3
 80496b0:	3718      	adds	r7, #24
 80496b2:	46bd      	mov	sp, r7
 80496b4:	bd80      	pop	{r7, pc}
	...

080496b8 <ScriptManager_AdvanceSchedule>:
 * @brief Advance schedule to next time point
 * @param schedule Pointer to schedule structure
 * @param routine_name Name for logging
 */
void ScriptManager_AdvanceSchedule(TimePointSchedule_t* schedule, const char* routine_name)
{
 80496b8:	b590      	push	{r4, r7, lr}
 80496ba:	b089      	sub	sp, #36	@ 0x24
 80496bc:	af04      	add	r7, sp, #16
 80496be:	6078      	str	r0, [r7, #4]
 80496c0:	6039      	str	r1, [r7, #0]
    if (!schedule || !schedule->is_configured || schedule->count == 0) {
 80496c2:	687b      	ldr	r3, [r7, #4]
 80496c4:	2b00      	cmp	r3, #0
 80496c6:	d04b      	beq.n	8049760 <ScriptManager_AdvanceSchedule+0xa8>
 80496c8:	687b      	ldr	r3, [r7, #4]
 80496ca:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 80496ce:	f083 0301 	eor.w	r3, r3, #1
 80496d2:	b2db      	uxtb	r3, r3
 80496d4:	2b00      	cmp	r3, #0
 80496d6:	d143      	bne.n	8049760 <ScriptManager_AdvanceSchedule+0xa8>
 80496d8:	687b      	ldr	r3, [r7, #4]
 80496da:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 80496de:	2b00      	cmp	r3, #0
 80496e0:	d03e      	beq.n	8049760 <ScriptManager_AdvanceSchedule+0xa8>
        return;
    }

    if (schedule->current_index < schedule->count) {
 80496e2:	687b      	ldr	r3, [r7, #4]
 80496e4:	f8b3 2902 	ldrh.w	r2, [r3, #2306]	@ 0x902
 80496e8:	687b      	ldr	r3, [r7, #4]
 80496ea:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 80496ee:	429a      	cmp	r2, r3
 80496f0:	d237      	bcs.n	8049762 <ScriptManager_AdvanceSchedule+0xaa>
        TimePoint_t* current_point = &schedule->points[schedule->current_index];
 80496f2:	687b      	ldr	r3, [r7, #4]
 80496f4:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 80496f8:	00db      	lsls	r3, r3, #3
 80496fa:	687a      	ldr	r2, [r7, #4]
 80496fc:	4413      	add	r3, r2
 80496fe:	60fb      	str	r3, [r7, #12]

        BScript_Log("[ScriptManager] %s: Time point reached: %02u:%02u:%02u (daily_timestamp: %u, index %u)",
                   routine_name, current_point->hour, current_point->minute, current_point->second,
 8049700:	68fb      	ldr	r3, [r7, #12]
 8049702:	791b      	ldrb	r3, [r3, #4]
        BScript_Log("[ScriptManager] %s: Time point reached: %02u:%02u:%02u (daily_timestamp: %u, index %u)",
 8049704:	4618      	mov	r0, r3
                   routine_name, current_point->hour, current_point->minute, current_point->second,
 8049706:	68fb      	ldr	r3, [r7, #12]
 8049708:	795b      	ldrb	r3, [r3, #5]
        BScript_Log("[ScriptManager] %s: Time point reached: %02u:%02u:%02u (daily_timestamp: %u, index %u)",
 804970a:	461c      	mov	r4, r3
                   routine_name, current_point->hour, current_point->minute, current_point->second,
 804970c:	68fb      	ldr	r3, [r7, #12]
 804970e:	799b      	ldrb	r3, [r3, #6]
        BScript_Log("[ScriptManager] %s: Time point reached: %02u:%02u:%02u (daily_timestamp: %u, index %u)",
 8049710:	4619      	mov	r1, r3
 8049712:	68fb      	ldr	r3, [r7, #12]
 8049714:	681b      	ldr	r3, [r3, #0]
                   current_point->daily_timestamp, schedule->current_index);
 8049716:	687a      	ldr	r2, [r7, #4]
 8049718:	f8b2 2902 	ldrh.w	r2, [r2, #2306]	@ 0x902
        BScript_Log("[ScriptManager] %s: Time point reached: %02u:%02u:%02u (daily_timestamp: %u, index %u)",
 804971c:	9202      	str	r2, [sp, #8]
 804971e:	9301      	str	r3, [sp, #4]
 8049720:	9100      	str	r1, [sp, #0]
 8049722:	4623      	mov	r3, r4
 8049724:	4602      	mov	r2, r0
 8049726:	6839      	ldr	r1, [r7, #0]
 8049728:	480f      	ldr	r0, [pc, #60]	@ (8049768 <ScriptManager_AdvanceSchedule+0xb0>)
 804972a:	f004 fc2f 	bl	804df8c <BScript_Log>

        // Move to next time point
        schedule->current_index++;
 804972e:	687b      	ldr	r3, [r7, #4]
 8049730:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049734:	3301      	adds	r3, #1
 8049736:	b29a      	uxth	r2, r3
 8049738:	687b      	ldr	r3, [r7, #4]
 804973a:	f8a3 2902 	strh.w	r2, [r3, #2306]	@ 0x902

        // If we've completed all points for today, reset for tomorrow
        if (schedule->current_index >= schedule->count) {
 804973e:	687b      	ldr	r3, [r7, #4]
 8049740:	f8b3 2902 	ldrh.w	r2, [r3, #2306]	@ 0x902
 8049744:	687b      	ldr	r3, [r7, #4]
 8049746:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804974a:	429a      	cmp	r2, r3
 804974c:	d309      	bcc.n	8049762 <ScriptManager_AdvanceSchedule+0xaa>
            BScript_Log("[ScriptManager] %s: All time points completed for today, resetting for tomorrow", routine_name);
 804974e:	6839      	ldr	r1, [r7, #0]
 8049750:	4806      	ldr	r0, [pc, #24]	@ (804976c <ScriptManager_AdvanceSchedule+0xb4>)
 8049752:	f004 fc1b 	bl	804df8c <BScript_Log>
            schedule->current_index = 0; // Reset to first point for tomorrow
 8049756:	687b      	ldr	r3, [r7, #4]
 8049758:	2200      	movs	r2, #0
 804975a:	f8a3 2902 	strh.w	r2, [r3, #2306]	@ 0x902
 804975e:	e000      	b.n	8049762 <ScriptManager_AdvanceSchedule+0xaa>
        return;
 8049760:	bf00      	nop
        }
    }
}
 8049762:	3714      	adds	r7, #20
 8049764:	46bd      	mov	sp, r7
 8049766:	bd90      	pop	{r4, r7, pc}
 8049768:	0806df80 	.word	0x0806df80
 804976c:	0806dfd8 	.word	0x0806dfd8

08049770 <ScriptManager_PrintTimePoints>:
 * @brief Print time points for debugging
 * @param schedule Pointer to schedule structure
 * @param routine_name Name of the routine for logging
 */
void ScriptManager_PrintTimePoints(TimePointSchedule_t* schedule, const char* routine_name)
{
 8049770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8049772:	b091      	sub	sp, #68	@ 0x44
 8049774:	af04      	add	r7, sp, #16
 8049776:	6078      	str	r0, [r7, #4]
 8049778:	6039      	str	r1, [r7, #0]
    if (!schedule || !routine_name) return;
 804977a:	687b      	ldr	r3, [r7, #4]
 804977c:	2b00      	cmp	r3, #0
 804977e:	f000 80f7 	beq.w	8049970 <ScriptManager_PrintTimePoints+0x200>
 8049782:	683b      	ldr	r3, [r7, #0]
 8049784:	2b00      	cmp	r3, #0
 8049786:	f000 80f3 	beq.w	8049970 <ScriptManager_PrintTimePoints+0x200>

    uint32_t current_daily_time = ScriptManager_GetCurrentDailyTimeSeconds();
 804978a:	f7ff fd87 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 804978e:	6238      	str	r0, [r7, #32]
    s_DateTime current_rtc;
    Utils_GetRTC(&current_rtc);
 8049790:	f107 030c 	add.w	r3, r7, #12
 8049794:	4618      	mov	r0, r3
 8049796:	f004 f9f3 	bl	804db80 <Utils_GetRTC>

    BScript_Log("[ScriptManager] %s Time Points:", routine_name);
 804979a:	6839      	ldr	r1, [r7, #0]
 804979c:	4876      	ldr	r0, [pc, #472]	@ (8049978 <ScriptManager_PrintTimePoints+0x208>)
 804979e:	f004 fbf5 	bl	804df8c <BScript_Log>
    BScript_Log("  - Configured: %s", schedule->is_configured ? "YES" : "NO");
 80497a2:	687b      	ldr	r3, [r7, #4]
 80497a4:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 80497a8:	2b00      	cmp	r3, #0
 80497aa:	d001      	beq.n	80497b0 <ScriptManager_PrintTimePoints+0x40>
 80497ac:	4b73      	ldr	r3, [pc, #460]	@ (804997c <ScriptManager_PrintTimePoints+0x20c>)
 80497ae:	e000      	b.n	80497b2 <ScriptManager_PrintTimePoints+0x42>
 80497b0:	4b73      	ldr	r3, [pc, #460]	@ (8049980 <ScriptManager_PrintTimePoints+0x210>)
 80497b2:	4619      	mov	r1, r3
 80497b4:	4873      	ldr	r0, [pc, #460]	@ (8049984 <ScriptManager_PrintTimePoints+0x214>)
 80497b6:	f004 fbe9 	bl	804df8c <BScript_Log>
    BScript_Log("  - Interval: %u seconds (%u minutes)", schedule->interval_sec, schedule->interval_sec / 60);
 80497ba:	687b      	ldr	r3, [r7, #4]
 80497bc:	f8d3 1904 	ldr.w	r1, [r3, #2308]	@ 0x904
 80497c0:	687b      	ldr	r3, [r7, #4]
 80497c2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80497c6:	4a70      	ldr	r2, [pc, #448]	@ (8049988 <ScriptManager_PrintTimePoints+0x218>)
 80497c8:	fba2 2303 	umull	r2, r3, r2, r3
 80497cc:	095b      	lsrs	r3, r3, #5
 80497ce:	461a      	mov	r2, r3
 80497d0:	486e      	ldr	r0, [pc, #440]	@ (804998c <ScriptManager_PrintTimePoints+0x21c>)
 80497d2:	f004 fbdb 	bl	804df8c <BScript_Log>
    BScript_Log("  - Start daily time: %u seconds", schedule->start_daily_time);
 80497d6:	687b      	ldr	r3, [r7, #4]
 80497d8:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 80497dc:	4619      	mov	r1, r3
 80497de:	486c      	ldr	r0, [pc, #432]	@ (8049990 <ScriptManager_PrintTimePoints+0x220>)
 80497e0:	f004 fbd4 	bl	804df8c <BScript_Log>
    BScript_Log("  - Total points: %u", schedule->count);
 80497e4:	687b      	ldr	r3, [r7, #4]
 80497e6:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 80497ea:	4619      	mov	r1, r3
 80497ec:	4869      	ldr	r0, [pc, #420]	@ (8049994 <ScriptManager_PrintTimePoints+0x224>)
 80497ee:	f004 fbcd 	bl	804df8c <BScript_Log>
    BScript_Log("  - Current index: %u", schedule->current_index);
 80497f2:	687b      	ldr	r3, [r7, #4]
 80497f4:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 80497f8:	4619      	mov	r1, r3
 80497fa:	4867      	ldr	r0, [pc, #412]	@ (8049998 <ScriptManager_PrintTimePoints+0x228>)
 80497fc:	f004 fbc6 	bl	804df8c <BScript_Log>
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
               current_rtc.year, current_rtc.month, current_rtc.day,
 8049800:	7bbb      	ldrb	r3, [r7, #14]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 8049802:	461c      	mov	r4, r3
               current_rtc.year, current_rtc.month, current_rtc.day,
 8049804:	7b7b      	ldrb	r3, [r7, #13]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 8049806:	461d      	mov	r5, r3
               current_rtc.year, current_rtc.month, current_rtc.day,
 8049808:	7b3b      	ldrb	r3, [r7, #12]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 804980a:	461e      	mov	r6, r3
               current_rtc.hour, current_rtc.minute, current_rtc.second, current_daily_time);
 804980c:	7bfb      	ldrb	r3, [r7, #15]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 804980e:	461a      	mov	r2, r3
               current_rtc.hour, current_rtc.minute, current_rtc.second, current_daily_time);
 8049810:	7c3b      	ldrb	r3, [r7, #16]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 8049812:	4619      	mov	r1, r3
               current_rtc.hour, current_rtc.minute, current_rtc.second, current_daily_time);
 8049814:	7c7b      	ldrb	r3, [r7, #17]
    BScript_Log("  - Current system time: 20%02d-%02d-%02d %02d:%02d:%02d (daily: %u)",
 8049816:	4618      	mov	r0, r3
 8049818:	6a3b      	ldr	r3, [r7, #32]
 804981a:	9303      	str	r3, [sp, #12]
 804981c:	9002      	str	r0, [sp, #8]
 804981e:	9101      	str	r1, [sp, #4]
 8049820:	9200      	str	r2, [sp, #0]
 8049822:	4633      	mov	r3, r6
 8049824:	462a      	mov	r2, r5
 8049826:	4621      	mov	r1, r4
 8049828:	485c      	ldr	r0, [pc, #368]	@ (804999c <ScriptManager_PrintTimePoints+0x22c>)
 804982a:	f004 fbaf 	bl	804df8c <BScript_Log>

    int16_t start = (int16_t)schedule->current_index - 3;
 804982e:	687b      	ldr	r3, [r7, #4]
 8049830:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049834:	3b03      	subs	r3, #3
 8049836:	b29b      	uxth	r3, r3
 8049838:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    int16_t end = (int16_t)schedule->current_index + 3;
 804983a:	687b      	ldr	r3, [r7, #4]
 804983c:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049840:	3303      	adds	r3, #3
 8049842:	b29b      	uxth	r3, r3
 8049844:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if (start < 0) start = 0;
 8049846:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 804984a:	2b00      	cmp	r3, #0
 804984c:	da01      	bge.n	8049852 <ScriptManager_PrintTimePoints+0xe2>
 804984e:	2300      	movs	r3, #0
 8049850:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (end >= schedule->count) end = schedule->count - 1;
 8049852:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8049856:	687a      	ldr	r2, [r7, #4]
 8049858:	f8b2 2900 	ldrh.w	r2, [r2, #2304]	@ 0x900
 804985c:	4293      	cmp	r3, r2
 804985e:	db05      	blt.n	804986c <ScriptManager_PrintTimePoints+0xfc>
 8049860:	687b      	ldr	r3, [r7, #4]
 8049862:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 8049866:	3b01      	subs	r3, #1
 8049868:	b29b      	uxth	r3, r3
 804986a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    for (int16_t i = start; i <= end; i++) {
 804986c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 804986e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8049870:	e03e      	b.n	80498f0 <ScriptManager_PrintTimePoints+0x180>
        TimePoint_t* point = &schedule->points[i];
 8049872:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8049876:	00db      	lsls	r3, r3, #3
 8049878:	687a      	ldr	r2, [r7, #4]
 804987a:	4413      	add	r3, r2
 804987c:	617b      	str	r3, [r7, #20]
        const char* status = "";
 804987e:	4b48      	ldr	r3, [pc, #288]	@ (80499a0 <ScriptManager_PrintTimePoints+0x230>)
 8049880:	627b      	str	r3, [r7, #36]	@ 0x24

        if (i == schedule->current_index) {
 8049882:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8049886:	687a      	ldr	r2, [r7, #4]
 8049888:	f8b2 2902 	ldrh.w	r2, [r2, #2306]	@ 0x902
 804988c:	4293      	cmp	r3, r2
 804988e:	d102      	bne.n	8049896 <ScriptManager_PrintTimePoints+0x126>
            status = " <-- NEXT";
 8049890:	4b44      	ldr	r3, [pc, #272]	@ (80499a4 <ScriptManager_PrintTimePoints+0x234>)
 8049892:	627b      	str	r3, [r7, #36]	@ 0x24
 8049894:	e010      	b.n	80498b8 <ScriptManager_PrintTimePoints+0x148>
        } else if (i < schedule->current_index) {
 8049896:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 804989a:	687a      	ldr	r2, [r7, #4]
 804989c:	f8b2 2902 	ldrh.w	r2, [r2, #2306]	@ 0x902
 80498a0:	4293      	cmp	r3, r2
 80498a2:	da02      	bge.n	80498aa <ScriptManager_PrintTimePoints+0x13a>
            status = " (completed)";
 80498a4:	4b40      	ldr	r3, [pc, #256]	@ (80499a8 <ScriptManager_PrintTimePoints+0x238>)
 80498a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80498a8:	e006      	b.n	80498b8 <ScriptManager_PrintTimePoints+0x148>
        } else if (point->daily_timestamp <= current_daily_time) {
 80498aa:	697b      	ldr	r3, [r7, #20]
 80498ac:	681b      	ldr	r3, [r3, #0]
 80498ae:	6a3a      	ldr	r2, [r7, #32]
 80498b0:	429a      	cmp	r2, r3
 80498b2:	d301      	bcc.n	80498b8 <ScriptManager_PrintTimePoints+0x148>
            status = " (past due)";
 80498b4:	4b3d      	ldr	r3, [pc, #244]	@ (80499ac <ScriptManager_PrintTimePoints+0x23c>)
 80498b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        BScript_Log("    [%u] %02u:%02u:%02u (daily_timestamp: %u)%s",
 80498b8:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
                   i, point->hour, point->minute, point->second, point->daily_timestamp, status);
 80498bc:	697b      	ldr	r3, [r7, #20]
 80498be:	791b      	ldrb	r3, [r3, #4]
        BScript_Log("    [%u] %02u:%02u:%02u (daily_timestamp: %u)%s",
 80498c0:	461c      	mov	r4, r3
                   i, point->hour, point->minute, point->second, point->daily_timestamp, status);
 80498c2:	697b      	ldr	r3, [r7, #20]
 80498c4:	795b      	ldrb	r3, [r3, #5]
        BScript_Log("    [%u] %02u:%02u:%02u (daily_timestamp: %u)%s",
 80498c6:	461d      	mov	r5, r3
                   i, point->hour, point->minute, point->second, point->daily_timestamp, status);
 80498c8:	697b      	ldr	r3, [r7, #20]
 80498ca:	799b      	ldrb	r3, [r3, #6]
        BScript_Log("    [%u] %02u:%02u:%02u (daily_timestamp: %u)%s",
 80498cc:	4618      	mov	r0, r3
 80498ce:	697b      	ldr	r3, [r7, #20]
 80498d0:	681b      	ldr	r3, [r3, #0]
 80498d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80498d4:	9202      	str	r2, [sp, #8]
 80498d6:	9301      	str	r3, [sp, #4]
 80498d8:	9000      	str	r0, [sp, #0]
 80498da:	462b      	mov	r3, r5
 80498dc:	4622      	mov	r2, r4
 80498de:	4834      	ldr	r0, [pc, #208]	@ (80499b0 <ScriptManager_PrintTimePoints+0x240>)
 80498e0:	f004 fb54 	bl	804df8c <BScript_Log>
    for (int16_t i = start; i <= end; i++) {
 80498e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80498e8:	b29b      	uxth	r3, r3
 80498ea:	3301      	adds	r3, #1
 80498ec:	b29b      	uxth	r3, r3
 80498ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80498f0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80498f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80498f8:	429a      	cmp	r2, r3
 80498fa:	ddba      	ble.n	8049872 <ScriptManager_PrintTimePoints+0x102>
    }


    // Show next run time info
    if (schedule->current_index < schedule->count) {
 80498fc:	687b      	ldr	r3, [r7, #4]
 80498fe:	f8b3 2902 	ldrh.w	r2, [r3, #2306]	@ 0x902
 8049902:	687b      	ldr	r3, [r7, #4]
 8049904:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 8049908:	429a      	cmp	r2, r3
 804990a:	d22d      	bcs.n	8049968 <ScriptManager_PrintTimePoints+0x1f8>
        uint32_t next_run_daily = schedule->points[schedule->current_index].daily_timestamp;
 804990c:	687b      	ldr	r3, [r7, #4]
 804990e:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 8049912:	461a      	mov	r2, r3
 8049914:	687b      	ldr	r3, [r7, #4]
 8049916:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 804991a:	61fb      	str	r3, [r7, #28]
        uint32_t time_until = 0;
 804991c:	2300      	movs	r3, #0
 804991e:	61bb      	str	r3, [r7, #24]

        if (current_daily_time <= next_run_daily) {
 8049920:	6a3a      	ldr	r2, [r7, #32]
 8049922:	69fb      	ldr	r3, [r7, #28]
 8049924:	429a      	cmp	r2, r3
 8049926:	d80e      	bhi.n	8049946 <ScriptManager_PrintTimePoints+0x1d6>
            time_until = next_run_daily - current_daily_time;
 8049928:	69fa      	ldr	r2, [r7, #28]
 804992a:	6a3b      	ldr	r3, [r7, #32]
 804992c:	1ad3      	subs	r3, r2, r3
 804992e:	61bb      	str	r3, [r7, #24]
            BScript_Log("  - Next run in: %u seconds (%u minutes) - today", time_until, time_until / 60);
 8049930:	69bb      	ldr	r3, [r7, #24]
 8049932:	4a15      	ldr	r2, [pc, #84]	@ (8049988 <ScriptManager_PrintTimePoints+0x218>)
 8049934:	fba2 2303 	umull	r2, r3, r2, r3
 8049938:	095b      	lsrs	r3, r3, #5
 804993a:	461a      	mov	r2, r3
 804993c:	69b9      	ldr	r1, [r7, #24]
 804993e:	481d      	ldr	r0, [pc, #116]	@ (80499b4 <ScriptManager_PrintTimePoints+0x244>)
 8049940:	f004 fb24 	bl	804df8c <BScript_Log>
 8049944:	e015      	b.n	8049972 <ScriptManager_PrintTimePoints+0x202>
        } else {
            time_until = SECONDS_PER_DAY - current_daily_time + next_run_daily;
 8049946:	69fa      	ldr	r2, [r7, #28]
 8049948:	6a3b      	ldr	r3, [r7, #32]
 804994a:	1ad2      	subs	r2, r2, r3
 804994c:	4b1a      	ldr	r3, [pc, #104]	@ (80499b8 <ScriptManager_PrintTimePoints+0x248>)
 804994e:	4413      	add	r3, r2
 8049950:	61bb      	str	r3, [r7, #24]
            BScript_Log("  - Next run in: %u seconds (%u minutes) - tomorrow", time_until, time_until / 60);
 8049952:	69bb      	ldr	r3, [r7, #24]
 8049954:	4a0c      	ldr	r2, [pc, #48]	@ (8049988 <ScriptManager_PrintTimePoints+0x218>)
 8049956:	fba2 2303 	umull	r2, r3, r2, r3
 804995a:	095b      	lsrs	r3, r3, #5
 804995c:	461a      	mov	r2, r3
 804995e:	69b9      	ldr	r1, [r7, #24]
 8049960:	4816      	ldr	r0, [pc, #88]	@ (80499bc <ScriptManager_PrintTimePoints+0x24c>)
 8049962:	f004 fb13 	bl	804df8c <BScript_Log>
 8049966:	e004      	b.n	8049972 <ScriptManager_PrintTimePoints+0x202>
        }
    } else {
        BScript_Log("  - All points completed for today, will reset at midnight");
 8049968:	4815      	ldr	r0, [pc, #84]	@ (80499c0 <ScriptManager_PrintTimePoints+0x250>)
 804996a:	f004 fb0f 	bl	804df8c <BScript_Log>
 804996e:	e000      	b.n	8049972 <ScriptManager_PrintTimePoints+0x202>
    if (!schedule || !routine_name) return;
 8049970:	bf00      	nop
    }
}
 8049972:	3734      	adds	r7, #52	@ 0x34
 8049974:	46bd      	mov	sp, r7
 8049976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8049978:	0806e028 	.word	0x0806e028
 804997c:	0806e048 	.word	0x0806e048
 8049980:	0806e04c 	.word	0x0806e04c
 8049984:	0806e050 	.word	0x0806e050
 8049988:	88888889 	.word	0x88888889
 804998c:	0806e064 	.word	0x0806e064
 8049990:	0806ddd8 	.word	0x0806ddd8
 8049994:	0806e08c 	.word	0x0806e08c
 8049998:	0806e0a4 	.word	0x0806e0a4
 804999c:	0806e0bc 	.word	0x0806e0bc
 80499a0:	0806e104 	.word	0x0806e104
 80499a4:	0806e108 	.word	0x0806e108
 80499a8:	0806e114 	.word	0x0806e114
 80499ac:	0806e124 	.word	0x0806e124
 80499b0:	0806e130 	.word	0x0806e130
 80499b4:	0806e160 	.word	0x0806e160
 80499b8:	00015180 	.word	0x00015180
 80499bc:	0806e194 	.word	0x0806e194
 80499c0:	0806e1c8 	.word	0x0806e1c8

080499c4 <ScriptManager_ResetContext>:
/**
 * @brief Reset script execution context
 * @param type Script type to reset
 */
static void ScriptManager_ResetContext(ScriptType_t type)
{
 80499c4:	b480      	push	{r7}
 80499c6:	b085      	sub	sp, #20
 80499c8:	af00      	add	r7, sp, #0
 80499ca:	4603      	mov	r3, r0
 80499cc:	71fb      	strb	r3, [r7, #7]
    if (type >= SCRIPT_TYPE_COUNT) return;
 80499ce:	79fb      	ldrb	r3, [r7, #7]
 80499d0:	2b02      	cmp	r3, #2
 80499d2:	d815      	bhi.n	8049a00 <ScriptManager_ResetContext+0x3c>

    ScriptExecContext_t* context = &g_script_manager.contexts[type];
 80499d4:	79fa      	ldrb	r2, [r7, #7]
 80499d6:	f641 331c 	movw	r3, #6940	@ 0x1b1c
 80499da:	4413      	add	r3, r2
 80499dc:	00db      	lsls	r3, r3, #3
 80499de:	4a0b      	ldr	r2, [pc, #44]	@ (8049a0c <ScriptManager_ResetContext+0x48>)
 80499e0:	4413      	add	r3, r2
 80499e2:	3304      	adds	r3, #4
 80499e4:	60fb      	str	r3, [r7, #12]
    context->state = SCRIPT_EXEC_IDLE;
 80499e6:	68fb      	ldr	r3, [r7, #12]
 80499e8:	2200      	movs	r2, #0
 80499ea:	701a      	strb	r2, [r3, #0]
    context->current_step = 0;
 80499ec:	68fb      	ldr	r3, [r7, #12]
 80499ee:	2200      	movs	r2, #0
 80499f0:	805a      	strh	r2, [r3, #2]
    context->retry_count = 0;
 80499f2:	68fb      	ldr	r3, [r7, #12]
 80499f4:	2200      	movs	r2, #0
 80499f6:	711a      	strb	r2, [r3, #4]
    context->first_run = true;
 80499f8:	68fb      	ldr	r3, [r7, #12]
 80499fa:	2201      	movs	r2, #1
 80499fc:	719a      	strb	r2, [r3, #6]
 80499fe:	e000      	b.n	8049a02 <ScriptManager_ResetContext+0x3e>
    if (type >= SCRIPT_TYPE_COUNT) return;
 8049a00:	bf00      	nop
}
 8049a02:	3714      	adds	r7, #20
 8049a04:	46bd      	mov	sp, r7
 8049a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a0a:	4770      	bx	lr
 8049a0c:	2401ea2c 	.word	0x2401ea2c

08049a10 <ScriptManager_HandleStepResult>:
 * @brief Handle step execution result
 * @param type Script type
 * @param result Execution result
 */
static void ScriptManager_HandleStepResult(ScriptType_t type, StepExecResult result)
{
 8049a10:	b580      	push	{r7, lr}
 8049a12:	b086      	sub	sp, #24
 8049a14:	af02      	add	r7, sp, #8
 8049a16:	4603      	mov	r3, r0
 8049a18:	460a      	mov	r2, r1
 8049a1a:	71fb      	strb	r3, [r7, #7]
 8049a1c:	4613      	mov	r3, r2
 8049a1e:	71bb      	strb	r3, [r7, #6]
    if (type >= SCRIPT_TYPE_COUNT) return;
 8049a20:	79fb      	ldrb	r3, [r7, #7]
 8049a22:	2b02      	cmp	r3, #2
 8049a24:	d86d      	bhi.n	8049b02 <ScriptManager_HandleStepResult+0xf2>

    ScriptExecContext_t* context = &g_script_manager.contexts[type];
 8049a26:	79fa      	ldrb	r2, [r7, #7]
 8049a28:	f641 331c 	movw	r3, #6940	@ 0x1b1c
 8049a2c:	4413      	add	r3, r2
 8049a2e:	00db      	lsls	r3, r3, #3
 8049a30:	4a37      	ldr	r2, [pc, #220]	@ (8049b10 <ScriptManager_HandleStepResult+0x100>)
 8049a32:	4413      	add	r3, r2
 8049a34:	3304      	adds	r3, #4
 8049a36:	60fb      	str	r3, [r7, #12]

    switch (result) {
 8049a38:	79bb      	ldrb	r3, [r7, #6]
 8049a3a:	2b02      	cmp	r3, #2
 8049a3c:	d02e      	beq.n	8049a9c <ScriptManager_HandleStepResult+0x8c>
 8049a3e:	2b02      	cmp	r3, #2
 8049a40:	dc62      	bgt.n	8049b08 <ScriptManager_HandleStepResult+0xf8>
 8049a42:	2b00      	cmp	r3, #0
 8049a44:	d002      	beq.n	8049a4c <ScriptManager_HandleStepResult+0x3c>
 8049a46:	2b01      	cmp	r3, #1
 8049a48:	d057      	beq.n	8049afa <ScriptManager_HandleStepResult+0xea>
 8049a4a:	e05d      	b.n	8049b08 <ScriptManager_HandleStepResult+0xf8>
        case STEP_EXEC_SUCCESS:
            context->current_step++;
 8049a4c:	68fb      	ldr	r3, [r7, #12]
 8049a4e:	885b      	ldrh	r3, [r3, #2]
 8049a50:	3301      	adds	r3, #1
 8049a52:	b29a      	uxth	r2, r3
 8049a54:	68fb      	ldr	r3, [r7, #12]
 8049a56:	805a      	strh	r2, [r3, #2]
            context->retry_count = 0;
 8049a58:	68fb      	ldr	r3, [r7, #12]
 8049a5a:	2200      	movs	r2, #0
 8049a5c:	711a      	strb	r2, [r3, #4]

            // Check if INIT is completed
            if (type == SCRIPT_TYPE_INIT &&
 8049a5e:	79fb      	ldrb	r3, [r7, #7]
 8049a60:	2b00      	cmp	r3, #0
 8049a62:	d150      	bne.n	8049b06 <ScriptManager_HandleStepResult+0xf6>
                context->current_step >= g_script_manager.scripts[type].parsed_script.total_steps) {
 8049a64:	68fb      	ldr	r3, [r7, #12]
 8049a66:	885a      	ldrh	r2, [r3, #2]
 8049a68:	79fb      	ldrb	r3, [r7, #7]
 8049a6a:	4929      	ldr	r1, [pc, #164]	@ (8049b10 <ScriptManager_HandleStepResult+0x100>)
 8049a6c:	f644 004c 	movw	r0, #18508	@ 0x484c
 8049a70:	fb00 f303 	mul.w	r3, r0, r3
 8049a74:	4419      	add	r1, r3
 8049a76:	f241 030a 	movw	r3, #4106	@ 0x100a
 8049a7a:	440b      	add	r3, r1
 8049a7c:	881b      	ldrh	r3, [r3, #0]
            if (type == SCRIPT_TYPE_INIT &&
 8049a7e:	429a      	cmp	r2, r3
 8049a80:	d341      	bcc.n	8049b06 <ScriptManager_HandleStepResult+0xf6>
                g_script_manager.init_completed = true;
 8049a82:	4b23      	ldr	r3, [pc, #140]	@ (8049b10 <ScriptManager_HandleStepResult+0x100>)
 8049a84:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049a88:	2201      	movs	r2, #1
 8049a8a:	f883 2b28 	strb.w	r2, [r3, #2856]	@ 0xb28
                context->state = SCRIPT_EXEC_COMPLETED;
 8049a8e:	68fb      	ldr	r3, [r7, #12]
 8049a90:	2203      	movs	r2, #3
 8049a92:	701a      	strb	r2, [r3, #0]
                BScript_Log("[ScriptManager] INIT script completed, enabling routines");
 8049a94:	481f      	ldr	r0, [pc, #124]	@ (8049b14 <ScriptManager_HandleStepResult+0x104>)
 8049a96:	f004 fa79 	bl	804df8c <BScript_Log>
            }
            break;
 8049a9a:	e034      	b.n	8049b06 <ScriptManager_HandleStepResult+0xf6>

        case STEP_EXEC_ERROR:
            context->retry_count++;
 8049a9c:	68fb      	ldr	r3, [r7, #12]
 8049a9e:	791b      	ldrb	r3, [r3, #4]
 8049aa0:	3301      	adds	r3, #1
 8049aa2:	b2da      	uxtb	r2, r3
 8049aa4:	68fb      	ldr	r3, [r7, #12]
 8049aa6:	711a      	strb	r2, [r3, #4]
            if (context->retry_count >= context->max_retries) {
 8049aa8:	68fb      	ldr	r3, [r7, #12]
 8049aaa:	791a      	ldrb	r2, [r3, #4]
 8049aac:	68fb      	ldr	r3, [r7, #12]
 8049aae:	795b      	ldrb	r3, [r3, #5]
 8049ab0:	429a      	cmp	r2, r3
 8049ab2:	d313      	bcc.n	8049adc <ScriptManager_HandleStepResult+0xcc>
                context->state = SCRIPT_EXEC_FAILED_MAX_RETRIES;
 8049ab4:	68fb      	ldr	r3, [r7, #12]
 8049ab6:	2205      	movs	r2, #5
 8049ab8:	701a      	strb	r2, [r3, #0]
                g_script_manager.total_errors++;
 8049aba:	4b15      	ldr	r3, [pc, #84]	@ (8049b10 <ScriptManager_HandleStepResult+0x100>)
 8049abc:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049ac0:	f8d3 3b38 	ldr.w	r3, [r3, #2872]	@ 0xb38
 8049ac4:	3301      	adds	r3, #1
 8049ac6:	4a12      	ldr	r2, [pc, #72]	@ (8049b10 <ScriptManager_HandleStepResult+0x100>)
 8049ac8:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 8049acc:	f8c2 3b38 	str.w	r3, [r2, #2872]	@ 0xb38
                BScript_Log("[ScriptManager] Script type %d failed after max retries", type);
 8049ad0:	79fb      	ldrb	r3, [r7, #7]
 8049ad2:	4619      	mov	r1, r3
 8049ad4:	4810      	ldr	r0, [pc, #64]	@ (8049b18 <ScriptManager_HandleStepResult+0x108>)
 8049ad6:	f004 fa59 	bl	804df8c <BScript_Log>
            } else {
                BScript_Log("[ScriptManager] Script type %d retrying step %d (attempt %d/%d)",
                           type, context->current_step, context->retry_count, context->max_retries);
            }
            break;
 8049ada:	e015      	b.n	8049b08 <ScriptManager_HandleStepResult+0xf8>
                BScript_Log("[ScriptManager] Script type %d retrying step %d (attempt %d/%d)",
 8049adc:	79f9      	ldrb	r1, [r7, #7]
                           type, context->current_step, context->retry_count, context->max_retries);
 8049ade:	68fb      	ldr	r3, [r7, #12]
 8049ae0:	885b      	ldrh	r3, [r3, #2]
                BScript_Log("[ScriptManager] Script type %d retrying step %d (attempt %d/%d)",
 8049ae2:	461a      	mov	r2, r3
                           type, context->current_step, context->retry_count, context->max_retries);
 8049ae4:	68fb      	ldr	r3, [r7, #12]
 8049ae6:	791b      	ldrb	r3, [r3, #4]
                BScript_Log("[ScriptManager] Script type %d retrying step %d (attempt %d/%d)",
 8049ae8:	4618      	mov	r0, r3
                           type, context->current_step, context->retry_count, context->max_retries);
 8049aea:	68fb      	ldr	r3, [r7, #12]
 8049aec:	795b      	ldrb	r3, [r3, #5]
                BScript_Log("[ScriptManager] Script type %d retrying step %d (attempt %d/%d)",
 8049aee:	9300      	str	r3, [sp, #0]
 8049af0:	4603      	mov	r3, r0
 8049af2:	480a      	ldr	r0, [pc, #40]	@ (8049b1c <ScriptManager_HandleStepResult+0x10c>)
 8049af4:	f004 fa4a 	bl	804df8c <BScript_Log>
            break;
 8049af8:	e006      	b.n	8049b08 <ScriptManager_HandleStepResult+0xf8>

        case STEP_EXEC_WAIT:
            context->state = SCRIPT_EXEC_WAITING;
 8049afa:	68fb      	ldr	r3, [r7, #12]
 8049afc:	2202      	movs	r2, #2
 8049afe:	701a      	strb	r2, [r3, #0]
            break;
 8049b00:	e002      	b.n	8049b08 <ScriptManager_HandleStepResult+0xf8>
    if (type >= SCRIPT_TYPE_COUNT) return;
 8049b02:	bf00      	nop
 8049b04:	e000      	b.n	8049b08 <ScriptManager_HandleStepResult+0xf8>
            break;
 8049b06:	bf00      	nop
    }
}
 8049b08:	3710      	adds	r7, #16
 8049b0a:	46bd      	mov	sp, r7
 8049b0c:	bd80      	pop	{r7, pc}
 8049b0e:	bf00      	nop
 8049b10:	2401ea2c 	.word	0x2401ea2c
 8049b14:	0806e204 	.word	0x0806e204
 8049b18:	0806e240 	.word	0x0806e240
 8049b1c:	0806e278 	.word	0x0806e278

08049b20 <ScriptManager_Init>:

/**
 * @brief Initialize the Script Manager
 */
void ScriptManager_Init(void)
{
 8049b20:	b580      	push	{r7, lr}
 8049b22:	b082      	sub	sp, #8
 8049b24:	af00      	add	r7, sp, #0
    memset(&g_script_manager, 0, sizeof(ScriptManager_t));
 8049b26:	f64e 323c 	movw	r2, #60220	@ 0xeb3c
 8049b2a:	2100      	movs	r1, #0
 8049b2c:	4832      	ldr	r0, [pc, #200]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b2e:	f01f fe59 	bl	80697e4 <memset>

    // Create synchronization objects
    g_script_manager.execution_mutex = xSemaphoreCreateMutex();
 8049b32:	2001      	movs	r0, #1
 8049b34:	f00b fb93 	bl	805525e <xQueueCreateMutex>
 8049b38:	4603      	mov	r3, r0
 8049b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b3c:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 8049b40:	f8c2 3b1c 	str.w	r3, [r2, #2844]	@ 0xb1c
    g_script_manager.dls_semaphore = xSemaphoreCreateBinary();
 8049b44:	2203      	movs	r2, #3
 8049b46:	2100      	movs	r1, #0
 8049b48:	2001      	movs	r0, #1
 8049b4a:	f00b faf6 	bl	805513a <xQueueGenericCreate>
 8049b4e:	4603      	mov	r3, r0
 8049b50:	4a29      	ldr	r2, [pc, #164]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b52:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 8049b56:	f8c2 3b20 	str.w	r3, [r2, #2848]	@ 0xb20
    g_script_manager.cam_semaphore = xSemaphoreCreateBinary();
 8049b5a:	2203      	movs	r2, #3
 8049b5c:	2100      	movs	r1, #0
 8049b5e:	2001      	movs	r0, #1
 8049b60:	f00b faeb 	bl	805513a <xQueueGenericCreate>
 8049b64:	4603      	mov	r3, r0
 8049b66:	4a24      	ldr	r2, [pc, #144]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b68:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 8049b6c:	f8c2 3b24 	str.w	r3, [r2, #2852]	@ 0xb24

    if (!g_script_manager.execution_mutex ||
 8049b70:	4b21      	ldr	r3, [pc, #132]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b72:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049b76:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	@ 0xb1c
 8049b7a:	2b00      	cmp	r3, #0
 8049b7c:	d00d      	beq.n	8049b9a <ScriptManager_Init+0x7a>
        !g_script_manager.dls_semaphore ||
 8049b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b80:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049b84:	f8d3 3b20 	ldr.w	r3, [r3, #2848]	@ 0xb20
    if (!g_script_manager.execution_mutex ||
 8049b88:	2b00      	cmp	r3, #0
 8049b8a:	d006      	beq.n	8049b9a <ScriptManager_Init+0x7a>
        !g_script_manager.cam_semaphore) {
 8049b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049b8e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049b92:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
        !g_script_manager.dls_semaphore ||
 8049b96:	2b00      	cmp	r3, #0
 8049b98:	d103      	bne.n	8049ba2 <ScriptManager_Init+0x82>
        BScript_Log("[ScriptManager] Error: Failed to create synchronization objects");
 8049b9a:	4818      	ldr	r0, [pc, #96]	@ (8049bfc <ScriptManager_Init+0xdc>)
 8049b9c:	f004 f9f6 	bl	804df8c <BScript_Log>
        return;
 8049ba0:	e027      	b.n	8049bf2 <ScriptManager_Init+0xd2>
    }

    // Initialize contexts
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049ba2:	2300      	movs	r3, #0
 8049ba4:	607b      	str	r3, [r7, #4]
 8049ba6:	e010      	b.n	8049bca <ScriptManager_Init+0xaa>
        g_script_manager.contexts[i].max_retries = 3;
 8049ba8:	4913      	ldr	r1, [pc, #76]	@ (8049bf8 <ScriptManager_Init+0xd8>)
 8049baa:	687a      	ldr	r2, [r7, #4]
 8049bac:	f641 331c 	movw	r3, #6940	@ 0x1b1c
 8049bb0:	4413      	add	r3, r2
 8049bb2:	00db      	lsls	r3, r3, #3
 8049bb4:	440b      	add	r3, r1
 8049bb6:	2203      	movs	r2, #3
 8049bb8:	725a      	strb	r2, [r3, #9]
        ScriptManager_ResetContext((ScriptType_t)i);
 8049bba:	687b      	ldr	r3, [r7, #4]
 8049bbc:	b2db      	uxtb	r3, r3
 8049bbe:	4618      	mov	r0, r3
 8049bc0:	f7ff ff00 	bl	80499c4 <ScriptManager_ResetContext>
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049bc4:	687b      	ldr	r3, [r7, #4]
 8049bc6:	3301      	adds	r3, #1
 8049bc8:	607b      	str	r3, [r7, #4]
 8049bca:	687b      	ldr	r3, [r7, #4]
 8049bcc:	2b02      	cmp	r3, #2
 8049bce:	ddeb      	ble.n	8049ba8 <ScriptManager_Init+0x88>
    }

    if (!ScriptStorage_Init()) {
 8049bd0:	f004 fd4e 	bl	804e670 <ScriptStorage_Init>
 8049bd4:	4603      	mov	r3, r0
 8049bd6:	f083 0301 	eor.w	r3, r3, #1
 8049bda:	b2db      	uxtb	r3, r3
 8049bdc:	2b00      	cmp	r3, #0
 8049bde:	d003      	beq.n	8049be8 <ScriptManager_Init+0xc8>
        BScript_Log("[ScriptManager] Error: Failed to initialize script storage");
 8049be0:	4807      	ldr	r0, [pc, #28]	@ (8049c00 <ScriptManager_Init+0xe0>)
 8049be2:	f004 f9d3 	bl	804df8c <BScript_Log>
        return;
 8049be6:	e004      	b.n	8049bf2 <ScriptManager_Init+0xd2>
    }

    BScript_Log("[ScriptManager] Initialized successfully");
 8049be8:	4806      	ldr	r0, [pc, #24]	@ (8049c04 <ScriptManager_Init+0xe4>)
 8049bea:	f004 f9cf 	bl	804df8c <BScript_Log>

    ScriptManager_HandleAutoLoad();
 8049bee:	f000 f8f9 	bl	8049de4 <ScriptManager_HandleAutoLoad>
}
 8049bf2:	3708      	adds	r7, #8
 8049bf4:	46bd      	mov	sp, r7
 8049bf6:	bd80      	pop	{r7, pc}
 8049bf8:	2401ea2c 	.word	0x2401ea2c
 8049bfc:	0806e2b8 	.word	0x0806e2b8
 8049c00:	0806e2f8 	.word	0x0806e2f8
 8049c04:	0806e334 	.word	0x0806e334

08049c08 <ScriptManager_LoadScript>:
 * @param binary_data Binary data
 * @param size Data size
 * @return true if loaded successfully, false otherwise
 */
_Bool ScriptManager_LoadScript(ScriptType_t type, const uint8_t* binary_data, uint32_t size)
{
 8049c08:	b580      	push	{r7, lr}
 8049c0a:	b086      	sub	sp, #24
 8049c0c:	af00      	add	r7, sp, #0
 8049c0e:	4603      	mov	r3, r0
 8049c10:	60b9      	str	r1, [r7, #8]
 8049c12:	607a      	str	r2, [r7, #4]
 8049c14:	73fb      	strb	r3, [r7, #15]
    if (type >= SCRIPT_TYPE_COUNT || !binary_data || size == 0 ||
 8049c16:	7bfb      	ldrb	r3, [r7, #15]
 8049c18:	2b02      	cmp	r3, #2
 8049c1a:	d809      	bhi.n	8049c30 <ScriptManager_LoadScript+0x28>
 8049c1c:	68bb      	ldr	r3, [r7, #8]
 8049c1e:	2b00      	cmp	r3, #0
 8049c20:	d006      	beq.n	8049c30 <ScriptManager_LoadScript+0x28>
 8049c22:	687b      	ldr	r3, [r7, #4]
 8049c24:	2b00      	cmp	r3, #0
 8049c26:	d003      	beq.n	8049c30 <ScriptManager_LoadScript+0x28>
 8049c28:	687b      	ldr	r3, [r7, #4]
 8049c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8049c2e:	d904      	bls.n	8049c3a <ScriptManager_LoadScript+0x32>
        size > sizeof(g_script_manager.scripts[0].binary_data)) {
        BScript_Log("[ScriptManager] Error: Invalid parameters for script loading");
 8049c30:	4830      	ldr	r0, [pc, #192]	@ (8049cf4 <ScriptManager_LoadScript+0xec>)
 8049c32:	f004 f9ab 	bl	804df8c <BScript_Log>
        return false;
 8049c36:	2300      	movs	r3, #0
 8049c38:	e057      	b.n	8049cea <ScriptManager_LoadScript+0xe2>
    }

    ScriptStorage_t* storage = &g_script_manager.scripts[type];
 8049c3a:	7bfb      	ldrb	r3, [r7, #15]
 8049c3c:	f644 024c 	movw	r2, #18508	@ 0x484c
 8049c40:	fb02 f303 	mul.w	r3, r2, r3
 8049c44:	4a2c      	ldr	r2, [pc, #176]	@ (8049cf8 <ScriptManager_LoadScript+0xf0>)
 8049c46:	4413      	add	r3, r2
 8049c48:	617b      	str	r3, [r7, #20]

    // Copy binary data
    memcpy(storage->binary_data, binary_data, size);
 8049c4a:	697b      	ldr	r3, [r7, #20]
 8049c4c:	3308      	adds	r3, #8
 8049c4e:	687a      	ldr	r2, [r7, #4]
 8049c50:	68b9      	ldr	r1, [r7, #8]
 8049c52:	4618      	mov	r0, r3
 8049c54:	f01f fe71 	bl	806993a <memcpy>
    storage->binary_size = size;
 8049c58:	697b      	ldr	r3, [r7, #20]
 8049c5a:	687a      	ldr	r2, [r7, #4]
 8049c5c:	605a      	str	r2, [r3, #4]

    // Parse the script
    ScriptParseResult result = BScript_ParseScript(storage->binary_data, storage->binary_size, &storage->parsed_script);
 8049c5e:	697b      	ldr	r3, [r7, #20]
 8049c60:	f103 0008 	add.w	r0, r3, #8
 8049c64:	697b      	ldr	r3, [r7, #20]
 8049c66:	6859      	ldr	r1, [r3, #4]
 8049c68:	697a      	ldr	r2, [r7, #20]
 8049c6a:	f241 0308 	movw	r3, #4104	@ 0x1008
 8049c6e:	4413      	add	r3, r2
 8049c70:	461a      	mov	r2, r3
 8049c72:	f004 fafb 	bl	804e26c <BScript_ParseScript>
 8049c76:	4603      	mov	r3, r0
 8049c78:	74fb      	strb	r3, [r7, #19]
    if (result != PARSE_OK) {
 8049c7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8049c7e:	2b00      	cmp	r3, #0
 8049c80:	d00b      	beq.n	8049c9a <ScriptManager_LoadScript+0x92>
        BScript_Log("[ScriptManager] Error: Failed to parse script type %d, result: %d", type, result);
 8049c82:	7bfb      	ldrb	r3, [r7, #15]
 8049c84:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8049c88:	4619      	mov	r1, r3
 8049c8a:	481c      	ldr	r0, [pc, #112]	@ (8049cfc <ScriptManager_LoadScript+0xf4>)
 8049c8c:	f004 f97e 	bl	804df8c <BScript_Log>
        storage->is_loaded = false;
 8049c90:	697b      	ldr	r3, [r7, #20]
 8049c92:	2200      	movs	r2, #0
 8049c94:	701a      	strb	r2, [r3, #0]
        return false;
 8049c96:	2300      	movs	r3, #0
 8049c98:	e027      	b.n	8049cea <ScriptManager_LoadScript+0xe2>
    }

    storage->is_loaded = true;
 8049c9a:	697b      	ldr	r3, [r7, #20]
 8049c9c:	2201      	movs	r2, #1
 8049c9e:	701a      	strb	r2, [r3, #0]
    ScriptManager_ResetContext(type);
 8049ca0:	7bfb      	ldrb	r3, [r7, #15]
 8049ca2:	4618      	mov	r0, r3
 8049ca4:	f7ff fe8e 	bl	80499c4 <ScriptManager_ResetContext>

    BScript_Log("[ScriptManager] Successfully loaded script type %d with %d steps",
 8049ca8:	7bf9      	ldrb	r1, [r7, #15]
                type, storage->parsed_script.total_steps);
 8049caa:	697b      	ldr	r3, [r7, #20]
 8049cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8049cb0:	895b      	ldrh	r3, [r3, #10]
    BScript_Log("[ScriptManager] Successfully loaded script type %d with %d steps",
 8049cb2:	461a      	mov	r2, r3
 8049cb4:	4812      	ldr	r0, [pc, #72]	@ (8049d00 <ScriptManager_LoadScript+0xf8>)
 8049cb6:	f004 f969 	bl	804df8c <BScript_Log>

    // Save script to FRAM for persistence
    ScriptStorageResult_t save_result = ScriptStorage_SaveScript(type, binary_data, size);
 8049cba:	7bfb      	ldrb	r3, [r7, #15]
 8049cbc:	687a      	ldr	r2, [r7, #4]
 8049cbe:	68b9      	ldr	r1, [r7, #8]
 8049cc0:	4618      	mov	r0, r3
 8049cc2:	f004 fd2f 	bl	804e724 <ScriptStorage_SaveScript>
 8049cc6:	4603      	mov	r3, r0
 8049cc8:	74bb      	strb	r3, [r7, #18]
    if (save_result == STORAGE_SUCCESS) {
 8049cca:	7cbb      	ldrb	r3, [r7, #18]
 8049ccc:	2b00      	cmp	r3, #0
 8049cce:	d105      	bne.n	8049cdc <ScriptManager_LoadScript+0xd4>
        BScript_Log("[ScriptManager] Script type %d saved to FRAM successfully", type);
 8049cd0:	7bfb      	ldrb	r3, [r7, #15]
 8049cd2:	4619      	mov	r1, r3
 8049cd4:	480b      	ldr	r0, [pc, #44]	@ (8049d04 <ScriptManager_LoadScript+0xfc>)
 8049cd6:	f004 f959 	bl	804df8c <BScript_Log>
 8049cda:	e005      	b.n	8049ce8 <ScriptManager_LoadScript+0xe0>
    } else {
        BScript_Log("[ScriptManager] Warning: Failed to save script type %d to FRAM (result: %d)",
 8049cdc:	7bfb      	ldrb	r3, [r7, #15]
 8049cde:	7cba      	ldrb	r2, [r7, #18]
 8049ce0:	4619      	mov	r1, r3
 8049ce2:	4809      	ldr	r0, [pc, #36]	@ (8049d08 <ScriptManager_LoadScript+0x100>)
 8049ce4:	f004 f952 	bl	804df8c <BScript_Log>
                   type, save_result);
    }

    return true;
 8049ce8:	2301      	movs	r3, #1
}
 8049cea:	4618      	mov	r0, r3
 8049cec:	3718      	adds	r7, #24
 8049cee:	46bd      	mov	sp, r7
 8049cf0:	bd80      	pop	{r7, pc}
 8049cf2:	bf00      	nop
 8049cf4:	0806e360 	.word	0x0806e360
 8049cf8:	2401ea2c 	.word	0x2401ea2c
 8049cfc:	0806e3a0 	.word	0x0806e3a0
 8049d00:	0806e3e4 	.word	0x0806e3e4
 8049d04:	0806e428 	.word	0x0806e428
 8049d08:	0806e464 	.word	0x0806e464

08049d0c <ScriptManager_StartExecution>:

/**
 * @brief Start script execution
 */
void ScriptManager_StartExecution(void)
{
 8049d0c:	b580      	push	{r7, lr}
 8049d0e:	b082      	sub	sp, #8
 8049d10:	af00      	add	r7, sp, #0
    if (!g_script_manager.scripts[SCRIPT_TYPE_INIT].is_loaded) {
 8049d12:	4b18      	ldr	r3, [pc, #96]	@ (8049d74 <ScriptManager_StartExecution+0x68>)
 8049d14:	781b      	ldrb	r3, [r3, #0]
 8049d16:	f083 0301 	eor.w	r3, r3, #1
 8049d1a:	b2db      	uxtb	r3, r3
 8049d1c:	2b00      	cmp	r3, #0
 8049d1e:	d003      	beq.n	8049d28 <ScriptManager_StartExecution+0x1c>
        BScript_Log("[ScriptManager] Error: INIT script not loaded");
 8049d20:	4815      	ldr	r0, [pc, #84]	@ (8049d78 <ScriptManager_StartExecution+0x6c>)
 8049d22:	f004 f933 	bl	804df8c <BScript_Log>
        return;
 8049d26:	e022      	b.n	8049d6e <ScriptManager_StartExecution+0x62>
    }

    g_script_manager.manager_running = true;
 8049d28:	4b12      	ldr	r3, [pc, #72]	@ (8049d74 <ScriptManager_StartExecution+0x68>)
 8049d2a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049d2e:	2201      	movs	r2, #1
 8049d30:	f883 2b29 	strb.w	r2, [r3, #2857]	@ 0xb29
    g_script_manager.init_completed = false;
 8049d34:	4b0f      	ldr	r3, [pc, #60]	@ (8049d74 <ScriptManager_StartExecution+0x68>)
 8049d36:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049d3a:	2200      	movs	r2, #0
 8049d3c:	f883 2b28 	strb.w	r2, [r3, #2856]	@ 0xb28

    // Reset all contexts
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049d40:	2300      	movs	r3, #0
 8049d42:	607b      	str	r3, [r7, #4]
 8049d44:	e007      	b.n	8049d56 <ScriptManager_StartExecution+0x4a>
        ScriptManager_ResetContext((ScriptType_t)i);
 8049d46:	687b      	ldr	r3, [r7, #4]
 8049d48:	b2db      	uxtb	r3, r3
 8049d4a:	4618      	mov	r0, r3
 8049d4c:	f7ff fe3a 	bl	80499c4 <ScriptManager_ResetContext>
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049d50:	687b      	ldr	r3, [r7, #4]
 8049d52:	3301      	adds	r3, #1
 8049d54:	607b      	str	r3, [r7, #4]
 8049d56:	687b      	ldr	r3, [r7, #4]
 8049d58:	2b02      	cmp	r3, #2
 8049d5a:	ddf4      	ble.n	8049d46 <ScriptManager_StartExecution+0x3a>
    }

    // Start with INIT script
    g_script_manager.contexts[SCRIPT_TYPE_INIT].state = SCRIPT_EXEC_RUNNING;
 8049d5c:	4b05      	ldr	r3, [pc, #20]	@ (8049d74 <ScriptManager_StartExecution+0x68>)
 8049d5e:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8049d62:	2201      	movs	r2, #1
 8049d64:	f883 28e4 	strb.w	r2, [r3, #2276]	@ 0x8e4

    BScript_Log("[ScriptManager] Started execution");
 8049d68:	4804      	ldr	r0, [pc, #16]	@ (8049d7c <ScriptManager_StartExecution+0x70>)
 8049d6a:	f004 f90f 	bl	804df8c <BScript_Log>
}
 8049d6e:	3708      	adds	r7, #8
 8049d70:	46bd      	mov	sp, r7
 8049d72:	bd80      	pop	{r7, pc}
 8049d74:	2401ea2c 	.word	0x2401ea2c
 8049d78:	0806e4b0 	.word	0x0806e4b0
 8049d7c:	0806e4e0 	.word	0x0806e4e0

08049d80 <ScriptManager_StopExecution>:

/**
 * @brief Stop script execution
 */
void ScriptManager_StopExecution(void)
{
 8049d80:	b580      	push	{r7, lr}
 8049d82:	b082      	sub	sp, #8
 8049d84:	af00      	add	r7, sp, #0
    g_script_manager.manager_running = false;
 8049d86:	4b13      	ldr	r3, [pc, #76]	@ (8049dd4 <ScriptManager_StopExecution+0x54>)
 8049d88:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8049d8c:	2200      	movs	r2, #0
 8049d8e:	f883 2b29 	strb.w	r2, [r3, #2857]	@ 0xb29

    // Reset all contexts
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049d92:	2300      	movs	r3, #0
 8049d94:	607b      	str	r3, [r7, #4]
 8049d96:	e007      	b.n	8049da8 <ScriptManager_StopExecution+0x28>
        ScriptManager_ResetContext((ScriptType_t)i);
 8049d98:	687b      	ldr	r3, [r7, #4]
 8049d9a:	b2db      	uxtb	r3, r3
 8049d9c:	4618      	mov	r0, r3
 8049d9e:	f7ff fe11 	bl	80499c4 <ScriptManager_ResetContext>
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049da2:	687b      	ldr	r3, [r7, #4]
 8049da4:	3301      	adds	r3, #1
 8049da6:	607b      	str	r3, [r7, #4]
 8049da8:	687b      	ldr	r3, [r7, #4]
 8049daa:	2b02      	cmp	r3, #2
 8049dac:	ddf4      	ble.n	8049d98 <ScriptManager_StopExecution+0x18>
    }

    // Clear time point schedules
    memset(&g_script_manager.dls_schedule, 0, sizeof(TimePointSchedule_t));
 8049dae:	f44f 6211 	mov.w	r2, #2320	@ 0x910
 8049db2:	2100      	movs	r1, #0
 8049db4:	4808      	ldr	r0, [pc, #32]	@ (8049dd8 <ScriptManager_StopExecution+0x58>)
 8049db6:	f01f fd15 	bl	80697e4 <memset>
    memset(&g_script_manager.cam_schedule, 0, sizeof(TimePointSchedule_t));
 8049dba:	f44f 6211 	mov.w	r2, #2320	@ 0x910
 8049dbe:	2100      	movs	r1, #0
 8049dc0:	4806      	ldr	r0, [pc, #24]	@ (8049ddc <ScriptManager_StopExecution+0x5c>)
 8049dc2:	f01f fd0f 	bl	80697e4 <memset>

    BScript_Log("[ScriptManager] Stopped execution");
 8049dc6:	4806      	ldr	r0, [pc, #24]	@ (8049de0 <ScriptManager_StopExecution+0x60>)
 8049dc8:	f004 f8e0 	bl	804df8c <BScript_Log>
}
 8049dcc:	bf00      	nop
 8049dce:	3708      	adds	r7, #8
 8049dd0:	46bd      	mov	sp, r7
 8049dd2:	bd80      	pop	{r7, pc}
 8049dd4:	2401ea2c 	.word	0x2401ea2c
 8049dd8:	2402c328 	.word	0x2402c328
 8049ddc:	2402cc38 	.word	0x2402cc38
 8049de0:	0806e504 	.word	0x0806e504

08049de4 <ScriptManager_HandleAutoLoad>:
/**
 * @brief Handle auto-loading scripts from FRAM
 * @return true if auto-load was attempted, false otherwise
 */
static _Bool ScriptManager_HandleAutoLoad(void)
{
 8049de4:	b580      	push	{r7, lr}
 8049de6:	b08a      	sub	sp, #40	@ 0x28
 8049de8:	af00      	add	r7, sp, #0
    BScript_Log("[ScriptManager] Checking for auto-load conditions...");
 8049dea:	4828      	ldr	r0, [pc, #160]	@ (8049e8c <ScriptManager_HandleAutoLoad+0xa8>)
 8049dec:	f004 f8ce 	bl	804df8c <BScript_Log>

    // Check if any scripts exist in FRAM
    ScriptStorageStatus_t storage_status;
    ScriptStorage_GetStatus(&storage_status);
 8049df0:	1d3b      	adds	r3, r7, #4
 8049df2:	4618      	mov	r0, r3
 8049df4:	f005 f87e 	bl	804eef4 <ScriptStorage_GetStatus>

    _Bool any_script_exists = false;
 8049df8:	2300      	movs	r3, #0
 8049dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049dfe:	2300      	movs	r3, #0
 8049e00:	623b      	str	r3, [r7, #32]
 8049e02:	e00d      	b.n	8049e20 <ScriptManager_HandleAutoLoad+0x3c>
        if (storage_status.script_exists[i]) {
 8049e04:	f107 020c 	add.w	r2, r7, #12
 8049e08:	6a3b      	ldr	r3, [r7, #32]
 8049e0a:	4413      	add	r3, r2
 8049e0c:	781b      	ldrb	r3, [r3, #0]
 8049e0e:	2b00      	cmp	r3, #0
 8049e10:	d003      	beq.n	8049e1a <ScriptManager_HandleAutoLoad+0x36>
            any_script_exists = true;
 8049e12:	2301      	movs	r3, #1
 8049e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8049e18:	e005      	b.n	8049e26 <ScriptManager_HandleAutoLoad+0x42>
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 8049e1a:	6a3b      	ldr	r3, [r7, #32]
 8049e1c:	3301      	adds	r3, #1
 8049e1e:	623b      	str	r3, [r7, #32]
 8049e20:	6a3b      	ldr	r3, [r7, #32]
 8049e22:	2b02      	cmp	r3, #2
 8049e24:	ddee      	ble.n	8049e04 <ScriptManager_HandleAutoLoad+0x20>
        }
    }

    if (!any_script_exists) {
 8049e26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8049e2a:	f083 0301 	eor.w	r3, r3, #1
 8049e2e:	b2db      	uxtb	r3, r3
 8049e30:	2b00      	cmp	r3, #0
 8049e32:	d004      	beq.n	8049e3e <ScriptManager_HandleAutoLoad+0x5a>
        BScript_Log("[ScriptManager] No scripts found in FRAM, waiting for user input...");
 8049e34:	4816      	ldr	r0, [pc, #88]	@ (8049e90 <ScriptManager_HandleAutoLoad+0xac>)
 8049e36:	f004 f8a9 	bl	804df8c <BScript_Log>
        // Start a task to request scripts from master after timeout
        // TODO: Create a task that waits and then calls ScriptManager_RequestScriptsFromMaster()
        return false;
 8049e3a:	2300      	movs	r3, #0
 8049e3c:	e022      	b.n	8049e84 <ScriptManager_HandleAutoLoad+0xa0>
    }

    BScript_Log("[ScriptManager] Scripts found in FRAM, starting auto-load sequence...");
 8049e3e:	4815      	ldr	r0, [pc, #84]	@ (8049e94 <ScriptManager_HandleAutoLoad+0xb0>)
 8049e40:	f004 f8a4 	bl	804df8c <BScript_Log>

    // Start auto-load in a separate task to avoid blocking initialization
    // TODO: Create a task that calls ScriptStorage_AutoLoadScripts()
    // For now, we'll do it directly but this should be moved to a task
    uint8_t loaded_count = ScriptStorage_AutoLoadScripts(&g_script_manager);
 8049e44:	4814      	ldr	r0, [pc, #80]	@ (8049e98 <ScriptManager_HandleAutoLoad+0xb4>)
 8049e46:	f004 ff2f 	bl	804eca8 <ScriptStorage_AutoLoadScripts>
 8049e4a:	4603      	mov	r3, r0
 8049e4c:	77fb      	strb	r3, [r7, #31]

    if (loaded_count == SCRIPT_TYPE_COUNT) {
 8049e4e:	7ffb      	ldrb	r3, [r7, #31]
 8049e50:	2b03      	cmp	r3, #3
 8049e52:	d104      	bne.n	8049e5e <ScriptManager_HandleAutoLoad+0x7a>
        BScript_Log("[ScriptManager] All scripts auto-loaded successfully");
 8049e54:	4811      	ldr	r0, [pc, #68]	@ (8049e9c <ScriptManager_HandleAutoLoad+0xb8>)
 8049e56:	f004 f899 	bl	804df8c <BScript_Log>
        return true;
 8049e5a:	2301      	movs	r3, #1
 8049e5c:	e012      	b.n	8049e84 <ScriptManager_HandleAutoLoad+0xa0>
    } else if (loaded_count > 0) {
 8049e5e:	7ffb      	ldrb	r3, [r7, #31]
 8049e60:	2b00      	cmp	r3, #0
 8049e62:	d009      	beq.n	8049e78 <ScriptManager_HandleAutoLoad+0x94>
        BScript_Log("[ScriptManager] Partial auto-load completed (%d/%d scripts)",
 8049e64:	7ffb      	ldrb	r3, [r7, #31]
 8049e66:	2203      	movs	r2, #3
 8049e68:	4619      	mov	r1, r3
 8049e6a:	480d      	ldr	r0, [pc, #52]	@ (8049ea0 <ScriptManager_HandleAutoLoad+0xbc>)
 8049e6c:	f004 f88e 	bl	804df8c <BScript_Log>
                   loaded_count, SCRIPT_TYPE_COUNT);
        ScriptManager_RequestScriptsFromMaster();
 8049e70:	f000 f81a 	bl	8049ea8 <ScriptManager_RequestScriptsFromMaster>
        return true;
 8049e74:	2301      	movs	r3, #1
 8049e76:	e005      	b.n	8049e84 <ScriptManager_HandleAutoLoad+0xa0>
    } else {
        BScript_Log("[ScriptManager] Auto-load failed, requesting scripts from master");
 8049e78:	480a      	ldr	r0, [pc, #40]	@ (8049ea4 <ScriptManager_HandleAutoLoad+0xc0>)
 8049e7a:	f004 f887 	bl	804df8c <BScript_Log>
        ScriptManager_RequestScriptsFromMaster();
 8049e7e:	f000 f813 	bl	8049ea8 <ScriptManager_RequestScriptsFromMaster>
        return false;
 8049e82:	2300      	movs	r3, #0
    }
}
 8049e84:	4618      	mov	r0, r3
 8049e86:	3728      	adds	r7, #40	@ 0x28
 8049e88:	46bd      	mov	sp, r7
 8049e8a:	bd80      	pop	{r7, pc}
 8049e8c:	0806e528 	.word	0x0806e528
 8049e90:	0806e560 	.word	0x0806e560
 8049e94:	0806e5a4 	.word	0x0806e5a4
 8049e98:	2401ea2c 	.word	0x2401ea2c
 8049e9c:	0806e5ec 	.word	0x0806e5ec
 8049ea0:	0806e624 	.word	0x0806e624
 8049ea4:	0806e660 	.word	0x0806e660

08049ea8 <ScriptManager_RequestScriptsFromMaster>:

/**
 * @brief Request missing scripts from master
 */
static void ScriptManager_RequestScriptsFromMaster(void)
{
 8049ea8:	b580      	push	{r7, lr}
 8049eaa:	b088      	sub	sp, #32
 8049eac:	af00      	add	r7, sp, #0
    BScript_Log("[ScriptManager] Requesting scripts from master...");
 8049eae:	481e      	ldr	r0, [pc, #120]	@ (8049f28 <ScriptManager_RequestScriptsFromMaster+0x80>)
 8049eb0:	f004 f86c 	bl	804df8c <BScript_Log>

    // Check which scripts are missing
    ScriptStorageStatus_t storage_status;
    ScriptStorage_GetStatus(&storage_status);
 8049eb4:	463b      	mov	r3, r7
 8049eb6:	4618      	mov	r0, r3
 8049eb8:	f005 f81c 	bl	804eef4 <ScriptStorage_GetStatus>

    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 8049ebc:	2300      	movs	r3, #0
 8049ebe:	77fb      	strb	r3, [r7, #31]
 8049ec0:	e029      	b.n	8049f16 <ScriptManager_RequestScriptsFromMaster+0x6e>
        if (!g_script_manager.scripts[type].is_loaded) {
 8049ec2:	7ffb      	ldrb	r3, [r7, #31]
 8049ec4:	4a19      	ldr	r2, [pc, #100]	@ (8049f2c <ScriptManager_RequestScriptsFromMaster+0x84>)
 8049ec6:	f644 014c 	movw	r1, #18508	@ 0x484c
 8049eca:	fb01 f303 	mul.w	r3, r1, r3
 8049ece:	4413      	add	r3, r2
 8049ed0:	781b      	ldrb	r3, [r3, #0]
 8049ed2:	f083 0301 	eor.w	r3, r3, #1
 8049ed6:	b2db      	uxtb	r3, r3
 8049ed8:	2b00      	cmp	r3, #0
 8049eda:	d019      	beq.n	8049f10 <ScriptManager_RequestScriptsFromMaster+0x68>
            const char* type_name = "";
 8049edc:	4b14      	ldr	r3, [pc, #80]	@ (8049f30 <ScriptManager_RequestScriptsFromMaster+0x88>)
 8049ede:	61bb      	str	r3, [r7, #24]
            switch (type) {
 8049ee0:	7ffb      	ldrb	r3, [r7, #31]
 8049ee2:	2b02      	cmp	r3, #2
 8049ee4:	d00c      	beq.n	8049f00 <ScriptManager_RequestScriptsFromMaster+0x58>
 8049ee6:	2b02      	cmp	r3, #2
 8049ee8:	dc0d      	bgt.n	8049f06 <ScriptManager_RequestScriptsFromMaster+0x5e>
 8049eea:	2b00      	cmp	r3, #0
 8049eec:	d002      	beq.n	8049ef4 <ScriptManager_RequestScriptsFromMaster+0x4c>
 8049eee:	2b01      	cmp	r3, #1
 8049ef0:	d003      	beq.n	8049efa <ScriptManager_RequestScriptsFromMaster+0x52>
                case SCRIPT_TYPE_INIT: type_name = "INIT"; break;
                case SCRIPT_TYPE_DLS_ROUTINE: type_name = "DLS"; break;
                case SCRIPT_TYPE_CAM_ROUTINE: type_name = "CAM"; break;
                default: break;
 8049ef2:	e008      	b.n	8049f06 <ScriptManager_RequestScriptsFromMaster+0x5e>
                case SCRIPT_TYPE_INIT: type_name = "INIT"; break;
 8049ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8049f34 <ScriptManager_RequestScriptsFromMaster+0x8c>)
 8049ef6:	61bb      	str	r3, [r7, #24]
 8049ef8:	e006      	b.n	8049f08 <ScriptManager_RequestScriptsFromMaster+0x60>
                case SCRIPT_TYPE_DLS_ROUTINE: type_name = "DLS"; break;
 8049efa:	4b0f      	ldr	r3, [pc, #60]	@ (8049f38 <ScriptManager_RequestScriptsFromMaster+0x90>)
 8049efc:	61bb      	str	r3, [r7, #24]
 8049efe:	e003      	b.n	8049f08 <ScriptManager_RequestScriptsFromMaster+0x60>
                case SCRIPT_TYPE_CAM_ROUTINE: type_name = "CAM"; break;
 8049f00:	4b0e      	ldr	r3, [pc, #56]	@ (8049f3c <ScriptManager_RequestScriptsFromMaster+0x94>)
 8049f02:	61bb      	str	r3, [r7, #24]
 8049f04:	e000      	b.n	8049f08 <ScriptManager_RequestScriptsFromMaster+0x60>
                default: break;
 8049f06:	bf00      	nop
            }

            BScript_Log("[ScriptManager] Requesting %s script from master", type_name);
 8049f08:	69b9      	ldr	r1, [r7, #24]
 8049f0a:	480d      	ldr	r0, [pc, #52]	@ (8049f40 <ScriptManager_RequestScriptsFromMaster+0x98>)
 8049f0c:	f004 f83e 	bl	804df8c <BScript_Log>
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 8049f10:	7ffb      	ldrb	r3, [r7, #31]
 8049f12:	3301      	adds	r3, #1
 8049f14:	77fb      	strb	r3, [r7, #31]
 8049f16:	7ffb      	ldrb	r3, [r7, #31]
 8049f18:	2b02      	cmp	r3, #2
 8049f1a:	d9d2      	bls.n	8049ec2 <ScriptManager_RequestScriptsFromMaster+0x1a>
        }
    }

    // TODO: Set a timeout for master response
    // If no response within timeout, fall back to waiting for user input
}
 8049f1c:	bf00      	nop
 8049f1e:	bf00      	nop
 8049f20:	3720      	adds	r7, #32
 8049f22:	46bd      	mov	sp, r7
 8049f24:	bd80      	pop	{r7, pc}
 8049f26:	bf00      	nop
 8049f28:	0806e6a4 	.word	0x0806e6a4
 8049f2c:	2401ea2c 	.word	0x2401ea2c
 8049f30:	0806e104 	.word	0x0806e104
 8049f34:	0806e6d8 	.word	0x0806e6d8
 8049f38:	0806e6e0 	.word	0x0806e6e0
 8049f3c:	0806e6e4 	.word	0x0806e6e4
 8049f40:	0806e6e8 	.word	0x0806e6e8

08049f44 <ScriptManager_EraseAllScriptsFromFRAM>:
/**
 * @brief Erase all scripts from FRAM
 * @return true if all scripts erased successfully
 */
_Bool ScriptManager_EraseAllScriptsFromFRAM(void)
{
 8049f44:	b580      	push	{r7, lr}
 8049f46:	b084      	sub	sp, #16
 8049f48:	af00      	add	r7, sp, #0
    BScript_Log("[ScriptManager] Erasing all scripts from FRAM...");
 8049f4a:	4822      	ldr	r0, [pc, #136]	@ (8049fd4 <ScriptManager_EraseAllScriptsFromFRAM+0x90>)
 8049f4c:	f004 f81e 	bl	804df8c <BScript_Log>

    _Bool all_success = true;
 8049f50:	2301      	movs	r3, #1
 8049f52:	73fb      	strb	r3, [r7, #15]
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 8049f54:	2300      	movs	r3, #0
 8049f56:	73bb      	strb	r3, [r7, #14]
 8049f58:	e02d      	b.n	8049fb6 <ScriptManager_EraseAllScriptsFromFRAM+0x72>
        ScriptStorageResult_t result = ScriptStorage_EraseScript(type);
 8049f5a:	7bbb      	ldrb	r3, [r7, #14]
 8049f5c:	4618      	mov	r0, r3
 8049f5e:	f004 fe57 	bl	804ec10 <ScriptStorage_EraseScript>
 8049f62:	4603      	mov	r3, r0
 8049f64:	71fb      	strb	r3, [r7, #7]
        if (result != STORAGE_SUCCESS) {
 8049f66:	79fb      	ldrb	r3, [r7, #7]
 8049f68:	2b00      	cmp	r3, #0
 8049f6a:	d021      	beq.n	8049fb0 <ScriptManager_EraseAllScriptsFromFRAM+0x6c>
            const char* type_name = "";
 8049f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8049fd8 <ScriptManager_EraseAllScriptsFromFRAM+0x94>)
 8049f6e:	60bb      	str	r3, [r7, #8]
            switch (type) {
 8049f70:	7bbb      	ldrb	r3, [r7, #14]
 8049f72:	2b02      	cmp	r3, #2
 8049f74:	d00c      	beq.n	8049f90 <ScriptManager_EraseAllScriptsFromFRAM+0x4c>
 8049f76:	2b02      	cmp	r3, #2
 8049f78:	dc0d      	bgt.n	8049f96 <ScriptManager_EraseAllScriptsFromFRAM+0x52>
 8049f7a:	2b00      	cmp	r3, #0
 8049f7c:	d002      	beq.n	8049f84 <ScriptManager_EraseAllScriptsFromFRAM+0x40>
 8049f7e:	2b01      	cmp	r3, #1
 8049f80:	d003      	beq.n	8049f8a <ScriptManager_EraseAllScriptsFromFRAM+0x46>
                case SCRIPT_TYPE_INIT: type_name = "INIT"; break;
                case SCRIPT_TYPE_DLS_ROUTINE: type_name = "DLS"; break;
                case SCRIPT_TYPE_CAM_ROUTINE: type_name = "CAM"; break;
                default: break;
 8049f82:	e008      	b.n	8049f96 <ScriptManager_EraseAllScriptsFromFRAM+0x52>
                case SCRIPT_TYPE_INIT: type_name = "INIT"; break;
 8049f84:	4b15      	ldr	r3, [pc, #84]	@ (8049fdc <ScriptManager_EraseAllScriptsFromFRAM+0x98>)
 8049f86:	60bb      	str	r3, [r7, #8]
 8049f88:	e006      	b.n	8049f98 <ScriptManager_EraseAllScriptsFromFRAM+0x54>
                case SCRIPT_TYPE_DLS_ROUTINE: type_name = "DLS"; break;
 8049f8a:	4b15      	ldr	r3, [pc, #84]	@ (8049fe0 <ScriptManager_EraseAllScriptsFromFRAM+0x9c>)
 8049f8c:	60bb      	str	r3, [r7, #8]
 8049f8e:	e003      	b.n	8049f98 <ScriptManager_EraseAllScriptsFromFRAM+0x54>
                case SCRIPT_TYPE_CAM_ROUTINE: type_name = "CAM"; break;
 8049f90:	4b14      	ldr	r3, [pc, #80]	@ (8049fe4 <ScriptManager_EraseAllScriptsFromFRAM+0xa0>)
 8049f92:	60bb      	str	r3, [r7, #8]
 8049f94:	e000      	b.n	8049f98 <ScriptManager_EraseAllScriptsFromFRAM+0x54>
                default: break;
 8049f96:	bf00      	nop
            }
            BScript_Log("[ScriptManager] Failed to erase %s script: %s",
 8049f98:	79fb      	ldrb	r3, [r7, #7]
 8049f9a:	4618      	mov	r0, r3
 8049f9c:	f7ff f92c 	bl	80491f8 <ScriptStorage_GetResultString>
 8049fa0:	4603      	mov	r3, r0
 8049fa2:	461a      	mov	r2, r3
 8049fa4:	68b9      	ldr	r1, [r7, #8]
 8049fa6:	4810      	ldr	r0, [pc, #64]	@ (8049fe8 <ScriptManager_EraseAllScriptsFromFRAM+0xa4>)
 8049fa8:	f003 fff0 	bl	804df8c <BScript_Log>
                       type_name, ScriptStorage_GetResultString(result));
            all_success = false;
 8049fac:	2300      	movs	r3, #0
 8049fae:	73fb      	strb	r3, [r7, #15]
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 8049fb0:	7bbb      	ldrb	r3, [r7, #14]
 8049fb2:	3301      	adds	r3, #1
 8049fb4:	73bb      	strb	r3, [r7, #14]
 8049fb6:	7bbb      	ldrb	r3, [r7, #14]
 8049fb8:	2b02      	cmp	r3, #2
 8049fba:	d9ce      	bls.n	8049f5a <ScriptManager_EraseAllScriptsFromFRAM+0x16>
        }
    }

    if (all_success) {
 8049fbc:	7bfb      	ldrb	r3, [r7, #15]
 8049fbe:	2b00      	cmp	r3, #0
 8049fc0:	d002      	beq.n	8049fc8 <ScriptManager_EraseAllScriptsFromFRAM+0x84>
        BScript_Log("[ScriptManager] All scripts erased from FRAM successfully");
 8049fc2:	480a      	ldr	r0, [pc, #40]	@ (8049fec <ScriptManager_EraseAllScriptsFromFRAM+0xa8>)
 8049fc4:	f003 ffe2 	bl	804df8c <BScript_Log>
    }

    return all_success;
 8049fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8049fca:	4618      	mov	r0, r3
 8049fcc:	3710      	adds	r7, #16
 8049fce:	46bd      	mov	sp, r7
 8049fd0:	bd80      	pop	{r7, pc}
 8049fd2:	bf00      	nop
 8049fd4:	0806e748 	.word	0x0806e748
 8049fd8:	0806e104 	.word	0x0806e104
 8049fdc:	0806e6d8 	.word	0x0806e6d8
 8049fe0:	0806e6e0 	.word	0x0806e6e0
 8049fe4:	0806e6e4 	.word	0x0806e6e4
 8049fe8:	0806e77c 	.word	0x0806e77c
 8049fec:	0806e7ac 	.word	0x0806e7ac

08049ff0 <MODFSP_ApplicationHandler>:
 * @param id Frame ID
 * @param payload Payload data
 * @param len Payload length
 */
void MODFSP_ApplicationHandler(MODFSP_Data_t *ctx, uint8_t id, const uint8_t *payload, uint16_t len)
{
 8049ff0:	b580      	push	{r7, lr}
 8049ff2:	b084      	sub	sp, #16
 8049ff4:	af00      	add	r7, sp, #0
 8049ff6:	60f8      	str	r0, [r7, #12]
 8049ff8:	607a      	str	r2, [r7, #4]
 8049ffa:	461a      	mov	r2, r3
 8049ffc:	460b      	mov	r3, r1
 8049ffe:	72fb      	strb	r3, [r7, #11]
 804a000:	4613      	mov	r3, r2
 804a002:	813b      	strh	r3, [r7, #8]
    ScriptManager_HandleMODFSPFrame(id, payload, len);
 804a004:	893a      	ldrh	r2, [r7, #8]
 804a006:	7afb      	ldrb	r3, [r7, #11]
 804a008:	6879      	ldr	r1, [r7, #4]
 804a00a:	4618      	mov	r0, r3
 804a00c:	f000 f81c 	bl	804a048 <ScriptManager_HandleMODFSPFrame>
}
 804a010:	bf00      	nop
 804a012:	3710      	adds	r7, #16
 804a014:	46bd      	mov	sp, r7
 804a016:	bd80      	pop	{r7, pc}

0804a018 <UserActivityDetected>:
 * @param frame_id Frame ID
 * @param data Frame data
 * @param length Data length
 */

uint8_t UserActivityDetected(void){
 804a018:	b480      	push	{r7}
 804a01a:	af00      	add	r7, sp, #0
	return g_user_activity_detected;
 804a01c:	4b03      	ldr	r3, [pc, #12]	@ (804a02c <UserActivityDetected+0x14>)
 804a01e:	781b      	ldrb	r3, [r3, #0]
 804a020:	b2db      	uxtb	r3, r3
}
 804a022:	4618      	mov	r0, r3
 804a024:	46bd      	mov	sp, r7
 804a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a02a:	4770      	bx	lr
 804a02c:	2401ea28 	.word	0x2401ea28

0804a030 <UserActivityTrigger>:

void UserActivityTrigger(void){
 804a030:	b480      	push	{r7}
 804a032:	af00      	add	r7, sp, #0
	g_user_activity_detected = 1;
 804a034:	4b03      	ldr	r3, [pc, #12]	@ (804a044 <UserActivityTrigger+0x14>)
 804a036:	2201      	movs	r2, #1
 804a038:	701a      	strb	r2, [r3, #0]
}
 804a03a:	bf00      	nop
 804a03c:	46bd      	mov	sp, r7
 804a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a042:	4770      	bx	lr
 804a044:	2401ea28 	.word	0x2401ea28

0804a048 <ScriptManager_HandleMODFSPFrame>:


void ScriptManager_HandleMODFSPFrame(uint8_t frame_id, const uint8_t* data, uint32_t length)
{
 804a048:	b580      	push	{r7, lr}
 804a04a:	b084      	sub	sp, #16
 804a04c:	af00      	add	r7, sp, #0
 804a04e:	4603      	mov	r3, r0
 804a050:	60b9      	str	r1, [r7, #8]
 804a052:	607a      	str	r2, [r7, #4]
 804a054:	73fb      	strb	r3, [r7, #15]
	g_user_activity_detected = 1;
 804a056:	4b35      	ldr	r3, [pc, #212]	@ (804a12c <ScriptManager_HandleMODFSPFrame+0xe4>)
 804a058:	2201      	movs	r2, #1
 804a05a:	701a      	strb	r2, [r3, #0]

    switch (frame_id) {
 804a05c:	7bfb      	ldrb	r3, [r7, #15]
 804a05e:	2b04      	cmp	r3, #4
 804a060:	dc2c      	bgt.n	804a0bc <ScriptManager_HandleMODFSPFrame+0x74>
 804a062:	2b00      	cmp	r3, #0
 804a064:	dc1c      	bgt.n	804a0a0 <ScriptManager_HandleMODFSPFrame+0x58>
 804a066:	e056      	b.n	804a116 <ScriptManager_HandleMODFSPFrame+0xce>
 804a068:	3bf0      	subs	r3, #240	@ 0xf0
 804a06a:	2b0a      	cmp	r3, #10
 804a06c:	d853      	bhi.n	804a116 <ScriptManager_HandleMODFSPFrame+0xce>
 804a06e:	a201      	add	r2, pc, #4	@ (adr r2, 804a074 <ScriptManager_HandleMODFSPFrame+0x2c>)
 804a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a074:	0804a0c7 	.word	0x0804a0c7
 804a078:	0804a0d1 	.word	0x0804a0d1
 804a07c:	0804a0db 	.word	0x0804a0db
 804a080:	0804a117 	.word	0x0804a117
 804a084:	0804a117 	.word	0x0804a117
 804a088:	0804a117 	.word	0x0804a117
 804a08c:	0804a117 	.word	0x0804a117
 804a090:	0804a117 	.word	0x0804a117
 804a094:	0804a117 	.word	0x0804a117
 804a098:	0804a117 	.word	0x0804a117
 804a09c:	0804a0e5 	.word	0x0804a0e5
 804a0a0:	3b01      	subs	r3, #1
 804a0a2:	2b03      	cmp	r3, #3
 804a0a4:	d837      	bhi.n	804a116 <ScriptManager_HandleMODFSPFrame+0xce>
 804a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 804a0ac <ScriptManager_HandleMODFSPFrame+0x64>)
 804a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a0ac:	0804a0ef 	.word	0x0804a0ef
 804a0b0:	0804a0f9 	.word	0x0804a0f9
 804a0b4:	0804a103 	.word	0x0804a103
 804a0b8:	0804a10d 	.word	0x0804a10d
 804a0bc:	2bfa      	cmp	r3, #250	@ 0xfa
 804a0be:	dc2a      	bgt.n	804a116 <ScriptManager_HandleMODFSPFrame+0xce>
 804a0c0:	2bf0      	cmp	r3, #240	@ 0xf0
 804a0c2:	dad1      	bge.n	804a068 <ScriptManager_HandleMODFSPFrame+0x20>
 804a0c4:	e027      	b.n	804a116 <ScriptManager_HandleMODFSPFrame+0xce>
        case FRAME_ID_INIT:
            ScriptManager_HandleInitFrame(data, length);
 804a0c6:	6879      	ldr	r1, [r7, #4]
 804a0c8:	68b8      	ldr	r0, [r7, #8]
 804a0ca:	f000 f833 	bl	804a134 <ScriptManager_HandleInitFrame>
            break;
 804a0ce:	e028      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>
        case FRAME_ID_DLS_ROUTINE:
            ScriptManager_HandleDLSFrame(data, length);
 804a0d0:	6879      	ldr	r1, [r7, #4]
 804a0d2:	68b8      	ldr	r0, [r7, #8]
 804a0d4:	f000 f864 	bl	804a1a0 <ScriptManager_HandleDLSFrame>
            break;
 804a0d8:	e023      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>
        case FRAME_ID_CAM_ROUTINE:
            ScriptManager_HandleCAMFrame(data, length);
 804a0da:	6879      	ldr	r1, [r7, #4]
 804a0dc:	68b8      	ldr	r0, [r7, #8]
 804a0de:	f000 f895 	bl	804a20c <ScriptManager_HandleCAMFrame>
            break;
 804a0e2:	e01e      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>
        case FRAME_ID_HALT:
            ScriptManager_HandleHaltFrame(data, length);
 804a0e4:	6879      	ldr	r1, [r7, #4]
 804a0e6:	68b8      	ldr	r0, [r7, #8]
 804a0e8:	f000 f8c6 	bl	804a278 <ScriptManager_HandleHaltFrame>
            break;
 804a0ec:	e019      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>
        case SEND_TIME_CMD:
        	ScriptManager_HandleSyncTime(data, length);
 804a0ee:	6879      	ldr	r1, [r7, #4]
 804a0f0:	68b8      	ldr	r0, [r7, #8]
 804a0f2:	f000 f8df 	bl	804a2b4 <ScriptManager_HandleSyncTime>
        	break;
 804a0f6:	e014      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>
        case RUN_EXPERIMENT_CMD:
        	ScriptManager_HandleRunExperiment(data, length);
 804a0f8:	6879      	ldr	r1, [r7, #4]
 804a0fa:	68b8      	ldr	r0, [r7, #8]
 804a0fc:	f000 f924 	bl	804a348 <ScriptManager_HandleRunExperiment>
        	break;
 804a100:	e00f      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>

        case UPDATE_OBC_CMD:
        	ScriptManager_HandleUpdateOBC(data, length);
 804a102:	6879      	ldr	r1, [r7, #4]
 804a104:	68b8      	ldr	r0, [r7, #8]
 804a106:	f000 f947 	bl	804a398 <ScriptManager_HandleUpdateOBC>
        	break;
 804a10a:	e00a      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>

        case UPDATE_EXP_CMD:
        	ScriptManager_HandleUpdateEXP(data, length);
 804a10c:	6879      	ldr	r1, [r7, #4]
 804a10e:	68b8      	ldr	r0, [r7, #8]
 804a110:	f000 f95e 	bl	804a3d0 <ScriptManager_HandleUpdateEXP>
        	break;
 804a114:	e005      	b.n	804a122 <ScriptManager_HandleMODFSPFrame+0xda>


        default:
            BScript_Log("[ScriptManager] Warning: Unknown frame ID: 0x%02X", frame_id);
 804a116:	7bfb      	ldrb	r3, [r7, #15]
 804a118:	4619      	mov	r1, r3
 804a11a:	4805      	ldr	r0, [pc, #20]	@ (804a130 <ScriptManager_HandleMODFSPFrame+0xe8>)
 804a11c:	f003 ff36 	bl	804df8c <BScript_Log>
            break;
 804a120:	bf00      	nop
    }
}
 804a122:	bf00      	nop
 804a124:	3710      	adds	r7, #16
 804a126:	46bd      	mov	sp, r7
 804a128:	bd80      	pop	{r7, pc}
 804a12a:	bf00      	nop
 804a12c:	2401ea28 	.word	0x2401ea28
 804a130:	0806e7e8 	.word	0x0806e7e8

0804a134 <ScriptManager_HandleInitFrame>:

/**
 * @brief Handle INIT frame
 */
void ScriptManager_HandleInitFrame(const uint8_t* data, uint32_t length)
{
 804a134:	b580      	push	{r7, lr}
 804a136:	b082      	sub	sp, #8
 804a138:	af00      	add	r7, sp, #0
 804a13a:	6078      	str	r0, [r7, #4]
 804a13c:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, SCRIPT_ACK_INIT, NULL, 0);
 804a13e:	2300      	movs	r3, #0
 804a140:	2200      	movs	r2, #0
 804a142:	21a0      	movs	r1, #160	@ 0xa0
 804a144:	4812      	ldr	r0, [pc, #72]	@ (804a190 <ScriptManager_HandleInitFrame+0x5c>)
 804a146:	f012 fdb1 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received INIT frame, size: %u", length);
 804a14a:	6839      	ldr	r1, [r7, #0]
 804a14c:	4811      	ldr	r0, [pc, #68]	@ (804a194 <ScriptManager_HandleInitFrame+0x60>)
 804a14e:	f003 ff1d 	bl	804df8c <BScript_Log>
    if (ScriptManager_LoadScript(SCRIPT_TYPE_INIT, data, length)) {
 804a152:	683a      	ldr	r2, [r7, #0]
 804a154:	6879      	ldr	r1, [r7, #4]
 804a156:	2000      	movs	r0, #0
 804a158:	f7ff fd56 	bl	8049c08 <ScriptManager_LoadScript>
 804a15c:	4603      	mov	r3, r0
 804a15e:	2b00      	cmp	r3, #0
 804a160:	d012      	beq.n	804a188 <ScriptManager_HandleInitFrame+0x54>
        frames_received |= 0x01;  // Set bit 0
 804a162:	4b0d      	ldr	r3, [pc, #52]	@ (804a198 <ScriptManager_HandleInitFrame+0x64>)
 804a164:	781b      	ldrb	r3, [r3, #0]
 804a166:	f043 0301 	orr.w	r3, r3, #1
 804a16a:	b2da      	uxtb	r2, r3
 804a16c:	4b0a      	ldr	r3, [pc, #40]	@ (804a198 <ScriptManager_HandleInitFrame+0x64>)
 804a16e:	701a      	strb	r2, [r3, #0]
        BScript_Log("[ScriptManager] INIT script loaded successfully");
 804a170:	480a      	ldr	r0, [pc, #40]	@ (804a19c <ScriptManager_HandleInitFrame+0x68>)
 804a172:	f003 ff0b 	bl	804df8c <BScript_Log>

        // Check if all required frames received
        if (frames_received == 0x0F) {  // All 4 bits set (0x01 | 0x02 | 0x04 | 0x08)
 804a176:	4b08      	ldr	r3, [pc, #32]	@ (804a198 <ScriptManager_HandleInitFrame+0x64>)
 804a178:	781b      	ldrb	r3, [r3, #0]
 804a17a:	2b0f      	cmp	r3, #15
 804a17c:	d104      	bne.n	804a188 <ScriptManager_HandleInitFrame+0x54>
            ScriptManager_StartExecution();
 804a17e:	f7ff fdc5 	bl	8049d0c <ScriptManager_StartExecution>
            frames_received = 0;
 804a182:	4b05      	ldr	r3, [pc, #20]	@ (804a198 <ScriptManager_HandleInitFrame+0x64>)
 804a184:	2200      	movs	r2, #0
 804a186:	701a      	strb	r2, [r3, #0]
        }
    }
}
 804a188:	bf00      	nop
 804a18a:	3708      	adds	r7, #8
 804a18c:	46bd      	mov	sp, r7
 804a18e:	bd80      	pop	{r7, pc}
 804a190:	24014aec 	.word	0x24014aec
 804a194:	0806e81c 	.word	0x0806e81c
 804a198:	2401ea29 	.word	0x2401ea29
 804a19c:	0806e84c 	.word	0x0806e84c

0804a1a0 <ScriptManager_HandleDLSFrame>:

/**
 * @brief Handle DLS frame
 */
void ScriptManager_HandleDLSFrame(const uint8_t* data, uint32_t length)
{
 804a1a0:	b580      	push	{r7, lr}
 804a1a2:	b082      	sub	sp, #8
 804a1a4:	af00      	add	r7, sp, #0
 804a1a6:	6078      	str	r0, [r7, #4]
 804a1a8:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, SCRIPT_ACK_DLS, NULL, 0);
 804a1aa:	2300      	movs	r3, #0
 804a1ac:	2200      	movs	r2, #0
 804a1ae:	21a1      	movs	r1, #161	@ 0xa1
 804a1b0:	4812      	ldr	r0, [pc, #72]	@ (804a1fc <ScriptManager_HandleDLSFrame+0x5c>)
 804a1b2:	f012 fd7b 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received DLS frame, size: %u", length);
 804a1b6:	6839      	ldr	r1, [r7, #0]
 804a1b8:	4811      	ldr	r0, [pc, #68]	@ (804a200 <ScriptManager_HandleDLSFrame+0x60>)
 804a1ba:	f003 fee7 	bl	804df8c <BScript_Log>
    if (ScriptManager_LoadScript(SCRIPT_TYPE_DLS_ROUTINE, data, length)) {
 804a1be:	683a      	ldr	r2, [r7, #0]
 804a1c0:	6879      	ldr	r1, [r7, #4]
 804a1c2:	2001      	movs	r0, #1
 804a1c4:	f7ff fd20 	bl	8049c08 <ScriptManager_LoadScript>
 804a1c8:	4603      	mov	r3, r0
 804a1ca:	2b00      	cmp	r3, #0
 804a1cc:	d012      	beq.n	804a1f4 <ScriptManager_HandleDLSFrame+0x54>
        frames_received |= 0x02;  // Set bit 1
 804a1ce:	4b0d      	ldr	r3, [pc, #52]	@ (804a204 <ScriptManager_HandleDLSFrame+0x64>)
 804a1d0:	781b      	ldrb	r3, [r3, #0]
 804a1d2:	f043 0302 	orr.w	r3, r3, #2
 804a1d6:	b2da      	uxtb	r2, r3
 804a1d8:	4b0a      	ldr	r3, [pc, #40]	@ (804a204 <ScriptManager_HandleDLSFrame+0x64>)
 804a1da:	701a      	strb	r2, [r3, #0]
        BScript_Log("[ScriptManager] DLS script loaded successfully");
 804a1dc:	480a      	ldr	r0, [pc, #40]	@ (804a208 <ScriptManager_HandleDLSFrame+0x68>)
 804a1de:	f003 fed5 	bl	804df8c <BScript_Log>

        if (frames_received == 0x0F) {  // All 4 bits set (0x01 | 0x02 | 0x04 | 0x08)
 804a1e2:	4b08      	ldr	r3, [pc, #32]	@ (804a204 <ScriptManager_HandleDLSFrame+0x64>)
 804a1e4:	781b      	ldrb	r3, [r3, #0]
 804a1e6:	2b0f      	cmp	r3, #15
 804a1e8:	d104      	bne.n	804a1f4 <ScriptManager_HandleDLSFrame+0x54>
            ScriptManager_StartExecution();
 804a1ea:	f7ff fd8f 	bl	8049d0c <ScriptManager_StartExecution>
            frames_received = 0;
 804a1ee:	4b05      	ldr	r3, [pc, #20]	@ (804a204 <ScriptManager_HandleDLSFrame+0x64>)
 804a1f0:	2200      	movs	r2, #0
 804a1f2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 804a1f4:	bf00      	nop
 804a1f6:	3708      	adds	r7, #8
 804a1f8:	46bd      	mov	sp, r7
 804a1fa:	bd80      	pop	{r7, pc}
 804a1fc:	24014aec 	.word	0x24014aec
 804a200:	0806e87c 	.word	0x0806e87c
 804a204:	2401ea29 	.word	0x2401ea29
 804a208:	0806e8ac 	.word	0x0806e8ac

0804a20c <ScriptManager_HandleCAMFrame>:

/**
 * @brief Handle CAM frame
 */
void ScriptManager_HandleCAMFrame(const uint8_t* data, uint32_t length)
{
 804a20c:	b580      	push	{r7, lr}
 804a20e:	b082      	sub	sp, #8
 804a210:	af00      	add	r7, sp, #0
 804a212:	6078      	str	r0, [r7, #4]
 804a214:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, SCRIPT_ACK_CAM, NULL, 0);
 804a216:	2300      	movs	r3, #0
 804a218:	2200      	movs	r2, #0
 804a21a:	21a2      	movs	r1, #162	@ 0xa2
 804a21c:	4812      	ldr	r0, [pc, #72]	@ (804a268 <ScriptManager_HandleCAMFrame+0x5c>)
 804a21e:	f012 fd45 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received CAM frame, size: %u", length);
 804a222:	6839      	ldr	r1, [r7, #0]
 804a224:	4811      	ldr	r0, [pc, #68]	@ (804a26c <ScriptManager_HandleCAMFrame+0x60>)
 804a226:	f003 feb1 	bl	804df8c <BScript_Log>
    if (ScriptManager_LoadScript(SCRIPT_TYPE_CAM_ROUTINE, data, length)) {
 804a22a:	683a      	ldr	r2, [r7, #0]
 804a22c:	6879      	ldr	r1, [r7, #4]
 804a22e:	2002      	movs	r0, #2
 804a230:	f7ff fcea 	bl	8049c08 <ScriptManager_LoadScript>
 804a234:	4603      	mov	r3, r0
 804a236:	2b00      	cmp	r3, #0
 804a238:	d012      	beq.n	804a260 <ScriptManager_HandleCAMFrame+0x54>
        frames_received |= 0x04;  // Set bit 2
 804a23a:	4b0d      	ldr	r3, [pc, #52]	@ (804a270 <ScriptManager_HandleCAMFrame+0x64>)
 804a23c:	781b      	ldrb	r3, [r3, #0]
 804a23e:	f043 0304 	orr.w	r3, r3, #4
 804a242:	b2da      	uxtb	r2, r3
 804a244:	4b0a      	ldr	r3, [pc, #40]	@ (804a270 <ScriptManager_HandleCAMFrame+0x64>)
 804a246:	701a      	strb	r2, [r3, #0]
        BScript_Log("[ScriptManager] CAM script loaded successfully");
 804a248:	480a      	ldr	r0, [pc, #40]	@ (804a274 <ScriptManager_HandleCAMFrame+0x68>)
 804a24a:	f003 fe9f 	bl	804df8c <BScript_Log>

        if (frames_received == 0x0F) {  // All 4 bits set (0x01 | 0x02 | 0x04 | 0x08)
 804a24e:	4b08      	ldr	r3, [pc, #32]	@ (804a270 <ScriptManager_HandleCAMFrame+0x64>)
 804a250:	781b      	ldrb	r3, [r3, #0]
 804a252:	2b0f      	cmp	r3, #15
 804a254:	d104      	bne.n	804a260 <ScriptManager_HandleCAMFrame+0x54>
            ScriptManager_StartExecution();
 804a256:	f7ff fd59 	bl	8049d0c <ScriptManager_StartExecution>
            frames_received = 0;
 804a25a:	4b05      	ldr	r3, [pc, #20]	@ (804a270 <ScriptManager_HandleCAMFrame+0x64>)
 804a25c:	2200      	movs	r2, #0
 804a25e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 804a260:	bf00      	nop
 804a262:	3708      	adds	r7, #8
 804a264:	46bd      	mov	sp, r7
 804a266:	bd80      	pop	{r7, pc}
 804a268:	24014aec 	.word	0x24014aec
 804a26c:	0806e8dc 	.word	0x0806e8dc
 804a270:	2401ea29 	.word	0x2401ea29
 804a274:	0806e90c 	.word	0x0806e90c

0804a278 <ScriptManager_HandleHaltFrame>:

/**
 * @brief Handle HALT frame
 */
void ScriptManager_HandleHaltFrame(const uint8_t* data, uint32_t length)
{
 804a278:	b580      	push	{r7, lr}
 804a27a:	b082      	sub	sp, #8
 804a27c:	af00      	add	r7, sp, #0
 804a27e:	6078      	str	r0, [r7, #4]
 804a280:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, FRAME_HALT_ACK, NULL, 0);
 804a282:	2300      	movs	r3, #0
 804a284:	2200      	movs	r2, #0
 804a286:	21aa      	movs	r1, #170	@ 0xaa
 804a288:	4807      	ldr	r0, [pc, #28]	@ (804a2a8 <ScriptManager_HandleHaltFrame+0x30>)
 804a28a:	f012 fd0f 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received HALT frame");
 804a28e:	4807      	ldr	r0, [pc, #28]	@ (804a2ac <ScriptManager_HandleHaltFrame+0x34>)
 804a290:	f003 fe7c 	bl	804df8c <BScript_Log>
    frames_received = 0;
 804a294:	4b06      	ldr	r3, [pc, #24]	@ (804a2b0 <ScriptManager_HandleHaltFrame+0x38>)
 804a296:	2200      	movs	r2, #0
 804a298:	701a      	strb	r2, [r3, #0]
    ScriptManager_StopExecution();
 804a29a:	f7ff fd71 	bl	8049d80 <ScriptManager_StopExecution>
}
 804a29e:	bf00      	nop
 804a2a0:	3708      	adds	r7, #8
 804a2a2:	46bd      	mov	sp, r7
 804a2a4:	bd80      	pop	{r7, pc}
 804a2a6:	bf00      	nop
 804a2a8:	24014aec 	.word	0x24014aec
 804a2ac:	0806e93c 	.word	0x0806e93c
 804a2b0:	2401ea29 	.word	0x2401ea29

0804a2b4 <ScriptManager_HandleSyncTime>:

void ScriptManager_HandleSyncTime(const uint8_t* data, uint32_t length)
{
 804a2b4:	b5b0      	push	{r4, r5, r7, lr}
 804a2b6:	b08a      	sub	sp, #40	@ 0x28
 804a2b8:	af04      	add	r7, sp, #16
 804a2ba:	6078      	str	r0, [r7, #4]
 804a2bc:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, SEND_TIME_ACK, NULL, 0);
 804a2be:	2300      	movs	r3, #0
 804a2c0:	2200      	movs	r2, #0
 804a2c2:	2111      	movs	r1, #17
 804a2c4:	481e      	ldr	r0, [pc, #120]	@ (804a340 <ScriptManager_HandleSyncTime+0x8c>)
 804a2c6:	f012 fcf1 	bl	805ccac <MODFSP_Send>
	s_DateTime dt;
    dt.hour   = data[0];
 804a2ca:	687b      	ldr	r3, [r7, #4]
 804a2cc:	781b      	ldrb	r3, [r3, #0]
 804a2ce:	73fb      	strb	r3, [r7, #15]
    dt.minute = data[1];
 804a2d0:	687b      	ldr	r3, [r7, #4]
 804a2d2:	3301      	adds	r3, #1
 804a2d4:	781b      	ldrb	r3, [r3, #0]
 804a2d6:	743b      	strb	r3, [r7, #16]
    dt.second = data[2];
 804a2d8:	687b      	ldr	r3, [r7, #4]
 804a2da:	3302      	adds	r3, #2
 804a2dc:	781b      	ldrb	r3, [r3, #0]
 804a2de:	747b      	strb	r3, [r7, #17]
    dt.day    = data[3];
 804a2e0:	687b      	ldr	r3, [r7, #4]
 804a2e2:	3303      	adds	r3, #3
 804a2e4:	781b      	ldrb	r3, [r3, #0]
 804a2e6:	733b      	strb	r3, [r7, #12]
    dt.month  = data[4];
 804a2e8:	687b      	ldr	r3, [r7, #4]
 804a2ea:	3304      	adds	r3, #4
 804a2ec:	781b      	ldrb	r3, [r3, #0]
 804a2ee:	737b      	strb	r3, [r7, #13]
    dt.year   = data[5];
 804a2f0:	687b      	ldr	r3, [r7, #4]
 804a2f2:	3305      	adds	r3, #5
 804a2f4:	781b      	ldrb	r3, [r3, #0]
 804a2f6:	73bb      	strb	r3, [r7, #14]
	Utils_SetRTC(&dt);
 804a2f8:	f107 030c 	add.w	r3, r7, #12
 804a2fc:	4618      	mov	r0, r3
 804a2fe:	f003 fc55 	bl	804dbac <Utils_SetRTC>
	RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 804a302:	f001 ff97 	bl	804c234 <RV3129_GetHandle>
 804a306:	6178      	str	r0, [r7, #20]
	RV3129_SetTime(hrtc, &dt);
 804a308:	f107 030c 	add.w	r3, r7, #12
 804a30c:	4619      	mov	r1, r3
 804a30e:	6978      	ldr	r0, [r7, #20]
 804a310:	f001 ffe6 	bl	804c2e0 <RV3129_SetTime>
	BScript_Log("[ScriptManager] RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
	                             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804a314:	7bfb      	ldrb	r3, [r7, #15]
	BScript_Log("[ScriptManager] RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
 804a316:	4618      	mov	r0, r3
	                             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804a318:	7c3b      	ldrb	r3, [r7, #16]
	BScript_Log("[ScriptManager] RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
 804a31a:	461c      	mov	r4, r3
	                             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804a31c:	7c7b      	ldrb	r3, [r7, #17]
	BScript_Log("[ScriptManager] RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
 804a31e:	461d      	mov	r5, r3
	                             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 804a320:	7b3b      	ldrb	r3, [r7, #12]
 804a322:	7b7a      	ldrb	r2, [r7, #13]
 804a324:	7bb9      	ldrb	r1, [r7, #14]
	BScript_Log("[ScriptManager] RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
 804a326:	9102      	str	r1, [sp, #8]
 804a328:	9201      	str	r2, [sp, #4]
 804a32a:	9300      	str	r3, [sp, #0]
 804a32c:	462b      	mov	r3, r5
 804a32e:	4622      	mov	r2, r4
 804a330:	4601      	mov	r1, r0
 804a332:	4804      	ldr	r0, [pc, #16]	@ (804a344 <ScriptManager_HandleSyncTime+0x90>)
 804a334:	f003 fe2a 	bl	804df8c <BScript_Log>

}
 804a338:	bf00      	nop
 804a33a:	3718      	adds	r7, #24
 804a33c:	46bd      	mov	sp, r7
 804a33e:	bdb0      	pop	{r4, r5, r7, pc}
 804a340:	24014aec 	.word	0x24014aec
 804a344:	0806e960 	.word	0x0806e960

0804a348 <ScriptManager_HandleRunExperiment>:

void ScriptManager_HandleRunExperiment(const uint8_t* data, uint32_t length)
{
 804a348:	b580      	push	{r7, lr}
 804a34a:	b082      	sub	sp, #8
 804a34c:	af00      	add	r7, sp, #0
 804a34e:	6078      	str	r0, [r7, #4]
 804a350:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, RUN_EXPERIMENT_ACK, NULL, 0);
 804a352:	2300      	movs	r3, #0
 804a354:	2200      	movs	r2, #0
 804a356:	2112      	movs	r1, #18
 804a358:	480c      	ldr	r0, [pc, #48]	@ (804a38c <ScriptManager_HandleRunExperiment+0x44>)
 804a35a:	f012 fca7 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received RUN frame");
 804a35e:	480c      	ldr	r0, [pc, #48]	@ (804a390 <ScriptManager_HandleRunExperiment+0x48>)
 804a360:	f003 fe14 	bl	804df8c <BScript_Log>
    frames_received |= 0x08;  // Set bit 4
 804a364:	4b0b      	ldr	r3, [pc, #44]	@ (804a394 <ScriptManager_HandleRunExperiment+0x4c>)
 804a366:	781b      	ldrb	r3, [r3, #0]
 804a368:	f043 0308 	orr.w	r3, r3, #8
 804a36c:	b2da      	uxtb	r2, r3
 804a36e:	4b09      	ldr	r3, [pc, #36]	@ (804a394 <ScriptManager_HandleRunExperiment+0x4c>)
 804a370:	701a      	strb	r2, [r3, #0]
    if (frames_received == 0x0F) {  // All 4 bits set (0x01 | 0x02 | 0x04 | 0x08)
 804a372:	4b08      	ldr	r3, [pc, #32]	@ (804a394 <ScriptManager_HandleRunExperiment+0x4c>)
 804a374:	781b      	ldrb	r3, [r3, #0]
 804a376:	2b0f      	cmp	r3, #15
 804a378:	d104      	bne.n	804a384 <ScriptManager_HandleRunExperiment+0x3c>
        ScriptManager_StartExecution();
 804a37a:	f7ff fcc7 	bl	8049d0c <ScriptManager_StartExecution>
        frames_received = 0;
 804a37e:	4b05      	ldr	r3, [pc, #20]	@ (804a394 <ScriptManager_HandleRunExperiment+0x4c>)
 804a380:	2200      	movs	r2, #0
 804a382:	701a      	strb	r2, [r3, #0]
    }
}
 804a384:	bf00      	nop
 804a386:	3708      	adds	r7, #8
 804a388:	46bd      	mov	sp, r7
 804a38a:	bd80      	pop	{r7, pc}
 804a38c:	24014aec 	.word	0x24014aec
 804a390:	0806e99c 	.word	0x0806e99c
 804a394:	2401ea29 	.word	0x2401ea29

0804a398 <ScriptManager_HandleUpdateOBC>:

void ScriptManager_HandleUpdateOBC(const uint8_t* data, uint32_t length)
{
 804a398:	b580      	push	{r7, lr}
 804a39a:	b082      	sub	sp, #8
 804a39c:	af00      	add	r7, sp, #0
 804a39e:	6078      	str	r0, [r7, #4]
 804a3a0:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, UPDATE_OBC_ACK, NULL, 0);
 804a3a2:	2300      	movs	r3, #0
 804a3a4:	2200      	movs	r2, #0
 804a3a6:	2113      	movs	r1, #19
 804a3a8:	4807      	ldr	r0, [pc, #28]	@ (804a3c8 <ScriptManager_HandleUpdateOBC+0x30>)
 804a3aa:	f012 fc7f 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received UPDATE_OBC frame");
 804a3ae:	4807      	ldr	r0, [pc, #28]	@ (804a3cc <ScriptManager_HandleUpdateOBC+0x34>)
 804a3b0:	f003 fdec 	bl	804df8c <BScript_Log>
    vTaskDelay(200);
 804a3b4:	20c8      	movs	r0, #200	@ 0xc8
 804a3b6:	f00c f955 	bl	8056664 <vTaskDelay>
    System_On_Bootloader_Reset();
 804a3ba:	f001 feaf 	bl	804c11c <System_On_Bootloader_Reset>
    //NVIC_SystemReset();
}
 804a3be:	bf00      	nop
 804a3c0:	3708      	adds	r7, #8
 804a3c2:	46bd      	mov	sp, r7
 804a3c4:	bd80      	pop	{r7, pc}
 804a3c6:	bf00      	nop
 804a3c8:	24014aec 	.word	0x24014aec
 804a3cc:	0806e9c0 	.word	0x0806e9c0

0804a3d0 <ScriptManager_HandleUpdateEXP>:

void ScriptManager_HandleUpdateEXP(const uint8_t* data, uint32_t length)
{
 804a3d0:	b580      	push	{r7, lr}
 804a3d2:	b082      	sub	sp, #8
 804a3d4:	af00      	add	r7, sp, #0
 804a3d6:	6078      	str	r0, [r7, #4]
 804a3d8:	6039      	str	r1, [r7, #0]
	MODFSP_Send(&cm4_protocol, UPDATE_EXP_ACK, NULL, 0);
 804a3da:	2300      	movs	r3, #0
 804a3dc:	2200      	movs	r2, #0
 804a3de:	2114      	movs	r1, #20
 804a3e0:	4806      	ldr	r0, [pc, #24]	@ (804a3fc <ScriptManager_HandleUpdateEXP+0x2c>)
 804a3e2:	f012 fc63 	bl	805ccac <MODFSP_Send>
    BScript_Log("[ScriptManager] Received UPDATE_EXP frame");
 804a3e6:	4806      	ldr	r0, [pc, #24]	@ (804a400 <ScriptManager_HandleUpdateEXP+0x30>)
 804a3e8:	f003 fdd0 	bl	804df8c <BScript_Log>
    ExpMonitor_SetEnabled(1);
 804a3ec:	2001      	movs	r0, #1
 804a3ee:	f000 f809 	bl	804a404 <ExpMonitor_SetEnabled>
}
 804a3f2:	bf00      	nop
 804a3f4:	3708      	adds	r7, #8
 804a3f6:	46bd      	mov	sp, r7
 804a3f8:	bd80      	pop	{r7, pc}
 804a3fa:	bf00      	nop
 804a3fc:	24014aec 	.word	0x24014aec
 804a400:	0806e9ec 	.word	0x0806e9ec

0804a404 <ExpMonitor_SetEnabled>:

uint8_t ExpMonitor_SetEnabled(uint8_t enable) {
 804a404:	b480      	push	{r7}
 804a406:	b083      	sub	sp, #12
 804a408:	af00      	add	r7, sp, #0
 804a40a:	4603      	mov	r3, r0
 804a40c:	71fb      	strb	r3, [r7, #7]
    expMonitorFlag = (enable != 0) ? 1 : 0;
 804a40e:	79fb      	ldrb	r3, [r7, #7]
 804a410:	2b00      	cmp	r3, #0
 804a412:	bf14      	ite	ne
 804a414:	2301      	movne	r3, #1
 804a416:	2300      	moveq	r3, #0
 804a418:	b2db      	uxtb	r3, r3
 804a41a:	461a      	mov	r2, r3
 804a41c:	4b05      	ldr	r3, [pc, #20]	@ (804a434 <ExpMonitor_SetEnabled+0x30>)
 804a41e:	701a      	strb	r2, [r3, #0]
    return expMonitorFlag;
 804a420:	4b04      	ldr	r3, [pc, #16]	@ (804a434 <ExpMonitor_SetEnabled+0x30>)
 804a422:	781b      	ldrb	r3, [r3, #0]
 804a424:	b2db      	uxtb	r3, r3
}
 804a426:	4618      	mov	r0, r3
 804a428:	370c      	adds	r7, #12
 804a42a:	46bd      	mov	sp, r7
 804a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a430:	4770      	bx	lr
 804a432:	bf00      	nop
 804a434:	2402d568 	.word	0x2402d568

0804a438 <ExpMonitor_IsEnabled>:

uint8_t ExpMonitor_IsEnabled(void) {
 804a438:	b480      	push	{r7}
 804a43a:	af00      	add	r7, sp, #0
    return expMonitorFlag;
 804a43c:	4b03      	ldr	r3, [pc, #12]	@ (804a44c <ExpMonitor_IsEnabled+0x14>)
 804a43e:	781b      	ldrb	r3, [r3, #0]
 804a440:	b2db      	uxtb	r3, r3
}
 804a442:	4618      	mov	r0, r3
 804a444:	46bd      	mov	sp, r7
 804a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a44a:	4770      	bx	lr
 804a44c:	2402d568 	.word	0x2402d568

0804a450 <ScriptManager_Task>:
/**
 * @brief Main Script Manager Task
 * @param pvParameters Task parameters
 */
void ScriptManager_Task(void *pvParameters)
{
 804a450:	b580      	push	{r7, lr}
 804a452:	b088      	sub	sp, #32
 804a454:	af00      	add	r7, sp, #0
 804a456:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 804a458:	f00c fb66 	bl	8056b28 <xTaskGetTickCount>
 804a45c:	4603      	mov	r3, r0
 804a45e:	60bb      	str	r3, [r7, #8]

    while (1) {
        if (!g_script_manager.manager_running) {
 804a460:	4b6e      	ldr	r3, [pc, #440]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a462:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a466:	f893 3b29 	ldrb.w	r3, [r3, #2857]	@ 0xb29
 804a46a:	f083 0301 	eor.w	r3, r3, #1
 804a46e:	b2db      	uxtb	r3, r3
 804a470:	2b00      	cmp	r3, #0
 804a472:	d006      	beq.n	804a482 <ScriptManager_Task+0x32>
            vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 804a474:	f107 0308 	add.w	r3, r7, #8
 804a478:	2164      	movs	r1, #100	@ 0x64
 804a47a:	4618      	mov	r0, r3
 804a47c:	f00c f86a 	bl	8056554 <xTaskDelayUntil>
            continue;
 804a480:	e0ca      	b.n	804a618 <ScriptManager_Task+0x1c8>
        }

        // Take execution mutex
        if (xSemaphoreTake(g_script_manager.execution_mutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 804a482:	4b66      	ldr	r3, [pc, #408]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a484:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a488:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	@ 0xb1c
 804a48c:	210a      	movs	r1, #10
 804a48e:	4618      	mov	r0, r3
 804a490:	f00b f9a2 	bl	80557d8 <xQueueSemaphoreTake>
 804a494:	4603      	mov	r3, r0
 804a496:	2b01      	cmp	r3, #1
 804a498:	f040 80b8 	bne.w	804a60c <ScriptManager_Task+0x1bc>

            _Bool should_run_dls = false;
 804a49c:	2300      	movs	r3, #0
 804a49e:	77fb      	strb	r3, [r7, #31]
            _Bool should_run_cam = false;
 804a4a0:	2300      	movs	r3, #0
 804a4a2:	77bb      	strb	r3, [r7, #30]

            // Handle INIT script first
            if (!g_script_manager.init_completed &&
 804a4a4:	4b5d      	ldr	r3, [pc, #372]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a4a6:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a4aa:	f893 3b28 	ldrb.w	r3, [r3, #2856]	@ 0xb28
 804a4ae:	f083 0301 	eor.w	r3, r3, #1
 804a4b2:	b2db      	uxtb	r3, r3
 804a4b4:	2b00      	cmp	r3, #0
 804a4b6:	d02f      	beq.n	804a518 <ScriptManager_Task+0xc8>
                g_script_manager.contexts[SCRIPT_TYPE_INIT].state == SCRIPT_EXEC_RUNNING) {
 804a4b8:	4b58      	ldr	r3, [pc, #352]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a4ba:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 804a4be:	f893 38e4 	ldrb.w	r3, [r3, #2276]	@ 0x8e4
            if (!g_script_manager.init_completed &&
 804a4c2:	2b01      	cmp	r3, #1
 804a4c4:	d128      	bne.n	804a518 <ScriptManager_Task+0xc8>

                ScriptStorage_t* storage = &g_script_manager.scripts[SCRIPT_TYPE_INIT];
 804a4c6:	4b55      	ldr	r3, [pc, #340]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a4c8:	61bb      	str	r3, [r7, #24]
                ScriptExecContext_t* context = &g_script_manager.contexts[SCRIPT_TYPE_INIT];
 804a4ca:	4b55      	ldr	r3, [pc, #340]	@ (804a620 <ScriptManager_Task+0x1d0>)
 804a4cc:	617b      	str	r3, [r7, #20]

                if (storage->is_loaded && context->current_step < storage->parsed_script.total_steps) {
 804a4ce:	69bb      	ldr	r3, [r7, #24]
 804a4d0:	781b      	ldrb	r3, [r3, #0]
 804a4d2:	2b00      	cmp	r3, #0
 804a4d4:	d020      	beq.n	804a518 <ScriptManager_Task+0xc8>
 804a4d6:	697b      	ldr	r3, [r7, #20]
 804a4d8:	885a      	ldrh	r2, [r3, #2]
 804a4da:	69bb      	ldr	r3, [r7, #24]
 804a4dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804a4e0:	895b      	ldrh	r3, [r3, #10]
 804a4e2:	429a      	cmp	r2, r3
 804a4e4:	d218      	bcs.n	804a518 <ScriptManager_Task+0xc8>
                    Step* step = &storage->parsed_script.steps[context->current_step];
 804a4e6:	697b      	ldr	r3, [r7, #20]
 804a4e8:	885b      	ldrh	r3, [r3, #2]
 804a4ea:	461a      	mov	r2, r3
 804a4ec:	4613      	mov	r3, r2
 804a4ee:	00db      	lsls	r3, r3, #3
 804a4f0:	4413      	add	r3, r2
 804a4f2:	00db      	lsls	r3, r3, #3
 804a4f4:	f241 0208 	movw	r2, #4104	@ 0x1008
 804a4f8:	441a      	add	r2, r3
 804a4fa:	69bb      	ldr	r3, [r7, #24]
 804a4fc:	4413      	add	r3, r2
 804a4fe:	3304      	adds	r3, #4
 804a500:	613b      	str	r3, [r7, #16]
                    StepExecResult result = ScriptManager_ExecuteStep(SCRIPT_TYPE_INIT, step);
 804a502:	6939      	ldr	r1, [r7, #16]
 804a504:	2000      	movs	r0, #0
 804a506:	f000 fa2d 	bl	804a964 <ScriptManager_ExecuteStep>
 804a50a:	4603      	mov	r3, r0
 804a50c:	73fb      	strb	r3, [r7, #15]
                    ScriptManager_HandleStepResult(SCRIPT_TYPE_INIT, result);
 804a50e:	7bfb      	ldrb	r3, [r7, #15]
 804a510:	4619      	mov	r1, r3
 804a512:	2000      	movs	r0, #0
 804a514:	f7ff fa7c 	bl	8049a10 <ScriptManager_HandleStepResult>
                }
            }

            // Check if it's time to run routines (without modifying schedules yet)
            _Bool dls_time_reached = (g_script_manager.init_completed &&
 804a518:	4b40      	ldr	r3, [pc, #256]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a51a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a51e:	f893 3b28 	ldrb.w	r3, [r3, #2856]	@ 0xb28
                g_script_manager.scripts[SCRIPT_TYPE_DLS_ROUTINE].is_loaded &&
 804a522:	2b00      	cmp	r3, #0
 804a524:	d00e      	beq.n	804a544 <ScriptManager_Task+0xf4>
 804a526:	4b3d      	ldr	r3, [pc, #244]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a528:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 804a52c:	f893 384c 	ldrb.w	r3, [r3, #2124]	@ 0x84c
            _Bool dls_time_reached = (g_script_manager.init_completed &&
 804a530:	2b00      	cmp	r3, #0
 804a532:	d007      	beq.n	804a544 <ScriptManager_Task+0xf4>
                ScriptManager_IsTimeToRunSchedule(&g_script_manager.dls_schedule));
 804a534:	483b      	ldr	r0, [pc, #236]	@ (804a624 <ScriptManager_Task+0x1d4>)
 804a536:	f7ff f871 	bl	804961c <ScriptManager_IsTimeToRunSchedule>
 804a53a:	4603      	mov	r3, r0
                g_script_manager.scripts[SCRIPT_TYPE_DLS_ROUTINE].is_loaded &&
 804a53c:	2b00      	cmp	r3, #0
 804a53e:	d001      	beq.n	804a544 <ScriptManager_Task+0xf4>
 804a540:	2301      	movs	r3, #1
 804a542:	e000      	b.n	804a546 <ScriptManager_Task+0xf6>
 804a544:	2300      	movs	r3, #0
            _Bool dls_time_reached = (g_script_manager.init_completed &&
 804a546:	73bb      	strb	r3, [r7, #14]
 804a548:	7bbb      	ldrb	r3, [r7, #14]
 804a54a:	f003 0301 	and.w	r3, r3, #1
 804a54e:	73bb      	strb	r3, [r7, #14]

            _Bool cam_time_reached = (g_script_manager.init_completed &&
 804a550:	4b32      	ldr	r3, [pc, #200]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a552:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a556:	f893 3b28 	ldrb.w	r3, [r3, #2856]	@ 0xb28
                g_script_manager.scripts[SCRIPT_TYPE_CAM_ROUTINE].is_loaded &&
 804a55a:	2b00      	cmp	r3, #0
 804a55c:	d00e      	beq.n	804a57c <ScriptManager_Task+0x12c>
 804a55e:	4b2f      	ldr	r3, [pc, #188]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a560:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 804a564:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
            _Bool cam_time_reached = (g_script_manager.init_completed &&
 804a568:	2b00      	cmp	r3, #0
 804a56a:	d007      	beq.n	804a57c <ScriptManager_Task+0x12c>
                ScriptManager_IsTimeToRunSchedule(&g_script_manager.cam_schedule));
 804a56c:	482e      	ldr	r0, [pc, #184]	@ (804a628 <ScriptManager_Task+0x1d8>)
 804a56e:	f7ff f855 	bl	804961c <ScriptManager_IsTimeToRunSchedule>
 804a572:	4603      	mov	r3, r0
                g_script_manager.scripts[SCRIPT_TYPE_CAM_ROUTINE].is_loaded &&
 804a574:	2b00      	cmp	r3, #0
 804a576:	d001      	beq.n	804a57c <ScriptManager_Task+0x12c>
 804a578:	2301      	movs	r3, #1
 804a57a:	e000      	b.n	804a57e <ScriptManager_Task+0x12e>
 804a57c:	2300      	movs	r3, #0
            _Bool cam_time_reached = (g_script_manager.init_completed &&
 804a57e:	737b      	strb	r3, [r7, #13]
 804a580:	7b7b      	ldrb	r3, [r7, #13]
 804a582:	f003 0301 	and.w	r3, r3, #1
 804a586:	737b      	strb	r3, [r7, #13]

            // If any routine should run, advance schedules and set flags
            if (dls_time_reached || cam_time_reached) {
 804a588:	7bbb      	ldrb	r3, [r7, #14]
 804a58a:	2b00      	cmp	r3, #0
 804a58c:	d102      	bne.n	804a594 <ScriptManager_Task+0x144>
 804a58e:	7b7b      	ldrb	r3, [r7, #13]
 804a590:	2b00      	cmp	r3, #0
 804a592:	d011      	beq.n	804a5b8 <ScriptManager_Task+0x168>
                if (dls_time_reached) {
 804a594:	7bbb      	ldrb	r3, [r7, #14]
 804a596:	2b00      	cmp	r3, #0
 804a598:	d005      	beq.n	804a5a6 <ScriptManager_Task+0x156>
                    ScriptManager_AdvanceSchedule(&g_script_manager.dls_schedule, "DLS");
 804a59a:	4924      	ldr	r1, [pc, #144]	@ (804a62c <ScriptManager_Task+0x1dc>)
 804a59c:	4821      	ldr	r0, [pc, #132]	@ (804a624 <ScriptManager_Task+0x1d4>)
 804a59e:	f7ff f88b 	bl	80496b8 <ScriptManager_AdvanceSchedule>
                    should_run_dls = true;
 804a5a2:	2301      	movs	r3, #1
 804a5a4:	77fb      	strb	r3, [r7, #31]
                }

                if (cam_time_reached) {
 804a5a6:	7b7b      	ldrb	r3, [r7, #13]
 804a5a8:	2b00      	cmp	r3, #0
 804a5aa:	d005      	beq.n	804a5b8 <ScriptManager_Task+0x168>
                    ScriptManager_AdvanceSchedule(&g_script_manager.cam_schedule, "CAM");
 804a5ac:	4920      	ldr	r1, [pc, #128]	@ (804a630 <ScriptManager_Task+0x1e0>)
 804a5ae:	481e      	ldr	r0, [pc, #120]	@ (804a628 <ScriptManager_Task+0x1d8>)
 804a5b0:	f7ff f882 	bl	80496b8 <ScriptManager_AdvanceSchedule>
                    should_run_cam = true;
 804a5b4:	2301      	movs	r3, #1
 804a5b6:	77bb      	strb	r3, [r7, #30]
                }
            }

            // Release mutex BEFORE signaling semaphores to avoid deadlock
            xSemaphoreGive(g_script_manager.execution_mutex);
 804a5b8:	4b18      	ldr	r3, [pc, #96]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a5ba:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a5be:	f8d3 0b1c 	ldr.w	r0, [r3, #2844]	@ 0xb1c
 804a5c2:	2300      	movs	r3, #0
 804a5c4:	2200      	movs	r2, #0
 804a5c6:	2100      	movs	r1, #0
 804a5c8:	f00a fe62 	bl	8055290 <xQueueGenericSend>

            // Signal routines to run (now that mutex is released)
            if (should_run_dls) {
 804a5cc:	7ffb      	ldrb	r3, [r7, #31]
 804a5ce:	2b00      	cmp	r3, #0
 804a5d0:	d00c      	beq.n	804a5ec <ScriptManager_Task+0x19c>
                BScript_Log("[ScriptManager] Triggering DLS routine");
 804a5d2:	4818      	ldr	r0, [pc, #96]	@ (804a634 <ScriptManager_Task+0x1e4>)
 804a5d4:	f003 fcda 	bl	804df8c <BScript_Log>
                xSemaphoreGive(g_script_manager.dls_semaphore);
 804a5d8:	4b10      	ldr	r3, [pc, #64]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a5da:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a5de:	f8d3 0b20 	ldr.w	r0, [r3, #2848]	@ 0xb20
 804a5e2:	2300      	movs	r3, #0
 804a5e4:	2200      	movs	r2, #0
 804a5e6:	2100      	movs	r1, #0
 804a5e8:	f00a fe52 	bl	8055290 <xQueueGenericSend>
            }

            if (should_run_cam) {
 804a5ec:	7fbb      	ldrb	r3, [r7, #30]
 804a5ee:	2b00      	cmp	r3, #0
 804a5f0:	d00c      	beq.n	804a60c <ScriptManager_Task+0x1bc>
                BScript_Log("[ScriptManager] Triggering CAM routine");
 804a5f2:	4811      	ldr	r0, [pc, #68]	@ (804a638 <ScriptManager_Task+0x1e8>)
 804a5f4:	f003 fcca 	bl	804df8c <BScript_Log>
                xSemaphoreGive(g_script_manager.cam_semaphore);
 804a5f8:	4b08      	ldr	r3, [pc, #32]	@ (804a61c <ScriptManager_Task+0x1cc>)
 804a5fa:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a5fe:	f8d3 0b24 	ldr.w	r0, [r3, #2852]	@ 0xb24
 804a602:	2300      	movs	r3, #0
 804a604:	2200      	movs	r2, #0
 804a606:	2100      	movs	r1, #0
 804a608:	f00a fe42 	bl	8055290 <xQueueGenericSend>
//        else {
//            // Could not get mutex, continue to next iteration
//            BScript_Log("[ScriptManager] Could not acquire execution mutex, skipping iteration");
//        }

        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 804a60c:	f107 0308 	add.w	r3, r7, #8
 804a610:	2164      	movs	r1, #100	@ 0x64
 804a612:	4618      	mov	r0, r3
 804a614:	f00b ff9e 	bl	8056554 <xTaskDelayUntil>
        if (!g_script_manager.manager_running) {
 804a618:	e722      	b.n	804a460 <ScriptManager_Task+0x10>
 804a61a:	bf00      	nop
 804a61c:	2401ea2c 	.word	0x2401ea2c
 804a620:	2402c310 	.word	0x2402c310
 804a624:	2402c328 	.word	0x2402c328
 804a628:	2402cc38 	.word	0x2402cc38
 804a62c:	0806e6e0 	.word	0x0806e6e0
 804a630:	0806e6e4 	.word	0x0806e6e4
 804a634:	0806ea18 	.word	0x0806ea18
 804a638:	0806ea40 	.word	0x0806ea40

0804a63c <ScriptDLS_Task>:
/**
 * @brief DLS Routine Task
 * @param pvParameters Task parameters
 */
void ScriptDLS_Task(void *pvParameters)
{
 804a63c:	b580      	push	{r7, lr}
 804a63e:	b086      	sub	sp, #24
 804a640:	af00      	add	r7, sp, #0
 804a642:	6078      	str	r0, [r7, #4]
    while (1) {
        // Wait for semaphore signal
        if (xSemaphoreTake(g_script_manager.dls_semaphore, portMAX_DELAY) == pdTRUE) {
 804a644:	4b5b      	ldr	r3, [pc, #364]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a646:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a64a:	f8d3 3b20 	ldr.w	r3, [r3, #2848]	@ 0xb20
 804a64e:	f04f 31ff 	mov.w	r1, #4294967295
 804a652:	4618      	mov	r0, r3
 804a654:	f00b f8c0 	bl	80557d8 <xQueueSemaphoreTake>
 804a658:	4603      	mov	r3, r0
 804a65a:	2b01      	cmp	r3, #1
 804a65c:	d1f2      	bne.n	804a644 <ScriptDLS_Task+0x8>

            // Take execution mutex
            if (xSemaphoreTake(g_script_manager.execution_mutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 804a65e:	4b55      	ldr	r3, [pc, #340]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a660:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a664:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	@ 0xb1c
 804a668:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 804a66c:	4618      	mov	r0, r3
 804a66e:	f00b f8b3 	bl	80557d8 <xQueueSemaphoreTake>
 804a672:	4603      	mov	r3, r0
 804a674:	2b01      	cmp	r3, #1
 804a676:	d1e5      	bne.n	804a644 <ScriptDLS_Task+0x8>

                ScriptStorage_t* storage = &g_script_manager.scripts[SCRIPT_TYPE_DLS_ROUTINE];
 804a678:	4b4f      	ldr	r3, [pc, #316]	@ (804a7b8 <ScriptDLS_Task+0x17c>)
 804a67a:	617b      	str	r3, [r7, #20]
                ScriptExecContext_t* context = &g_script_manager.contexts[SCRIPT_TYPE_DLS_ROUTINE];
 804a67c:	4b4f      	ldr	r3, [pc, #316]	@ (804a7bc <ScriptDLS_Task+0x180>)
 804a67e:	613b      	str	r3, [r7, #16]

                BScript_Log("[ScriptDLS] Starting DLS routine execution");
 804a680:	484f      	ldr	r0, [pc, #316]	@ (804a7c0 <ScriptDLS_Task+0x184>)
 804a682:	f003 fc83 	bl	804df8c <BScript_Log>

                context->state = SCRIPT_EXEC_RUNNING;
 804a686:	693b      	ldr	r3, [r7, #16]
 804a688:	2201      	movs	r2, #1
 804a68a:	701a      	strb	r2, [r3, #0]
                context->current_step = 0;
 804a68c:	693b      	ldr	r3, [r7, #16]
 804a68e:	2200      	movs	r2, #0
 804a690:	805a      	strh	r2, [r3, #2]
                context->retry_count = 0;
 804a692:	693b      	ldr	r3, [r7, #16]
 804a694:	2200      	movs	r2, #0
 804a696:	711a      	strb	r2, [r3, #4]

                // Execute all steps in the DLS routine
                while (context->current_step < storage->parsed_script.total_steps &&
 804a698:	e053      	b.n	804a742 <ScriptDLS_Task+0x106>
                       context->state == SCRIPT_EXEC_RUNNING) {

                    Step* step = &storage->parsed_script.steps[context->current_step];
 804a69a:	693b      	ldr	r3, [r7, #16]
 804a69c:	885b      	ldrh	r3, [r3, #2]
 804a69e:	461a      	mov	r2, r3
 804a6a0:	4613      	mov	r3, r2
 804a6a2:	00db      	lsls	r3, r3, #3
 804a6a4:	4413      	add	r3, r2
 804a6a6:	00db      	lsls	r3, r3, #3
 804a6a8:	f241 0208 	movw	r2, #4104	@ 0x1008
 804a6ac:	441a      	add	r2, r3
 804a6ae:	697b      	ldr	r3, [r7, #20]
 804a6b0:	4413      	add	r3, r2
 804a6b2:	3304      	adds	r3, #4
 804a6b4:	60fb      	str	r3, [r7, #12]
                    StepExecResult result = ScriptManager_ExecuteStep(SCRIPT_TYPE_DLS_ROUTINE, step);
 804a6b6:	68f9      	ldr	r1, [r7, #12]
 804a6b8:	2001      	movs	r0, #1
 804a6ba:	f000 f953 	bl	804a964 <ScriptManager_ExecuteStep>
 804a6be:	4603      	mov	r3, r0
 804a6c0:	72fb      	strb	r3, [r7, #11]

                    if (result == STEP_EXEC_SUCCESS) {
 804a6c2:	7afb      	ldrb	r3, [r7, #11]
 804a6c4:	2b00      	cmp	r3, #0
 804a6c6:	d109      	bne.n	804a6dc <ScriptDLS_Task+0xa0>
                        context->current_step++;
 804a6c8:	693b      	ldr	r3, [r7, #16]
 804a6ca:	885b      	ldrh	r3, [r3, #2]
 804a6cc:	3301      	adds	r3, #1
 804a6ce:	b29a      	uxth	r2, r3
 804a6d0:	693b      	ldr	r3, [r7, #16]
 804a6d2:	805a      	strh	r2, [r3, #2]
                        context->retry_count = 0;
 804a6d4:	693b      	ldr	r3, [r7, #16]
 804a6d6:	2200      	movs	r2, #0
 804a6d8:	711a      	strb	r2, [r3, #4]
 804a6da:	e032      	b.n	804a742 <ScriptDLS_Task+0x106>
                    } else if (result == STEP_EXEC_ERROR) {
 804a6dc:	7afb      	ldrb	r3, [r7, #11]
 804a6de:	2b02      	cmp	r3, #2
 804a6e0:	d12c      	bne.n	804a73c <ScriptDLS_Task+0x100>
                        context->retry_count++;
 804a6e2:	693b      	ldr	r3, [r7, #16]
 804a6e4:	791b      	ldrb	r3, [r3, #4]
 804a6e6:	3301      	adds	r3, #1
 804a6e8:	b2da      	uxtb	r2, r3
 804a6ea:	693b      	ldr	r3, [r7, #16]
 804a6ec:	711a      	strb	r2, [r3, #4]
                        if (context->retry_count >= context->max_retries) {
 804a6ee:	693b      	ldr	r3, [r7, #16]
 804a6f0:	791a      	ldrb	r2, [r3, #4]
 804a6f2:	693b      	ldr	r3, [r7, #16]
 804a6f4:	795b      	ldrb	r3, [r3, #5]
 804a6f6:	429a      	cmp	r2, r3
 804a6f8:	d314      	bcc.n	804a724 <ScriptDLS_Task+0xe8>
//                            context->state = SCRIPT_EXEC_FAILED_MAX_RETRIES;

                            g_script_manager.total_errors++;
 804a6fa:	4b2e      	ldr	r3, [pc, #184]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a6fc:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a700:	f8d3 3b38 	ldr.w	r3, [r3, #2872]	@ 0xb38
 804a704:	3301      	adds	r3, #1
 804a706:	4a2b      	ldr	r2, [pc, #172]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a708:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 804a70c:	f8c2 3b38 	str.w	r3, [r2, #2872]	@ 0xb38
                            BScript_Log("[ScriptDLS] Max retries reached for step %d — skipping this run", context->current_step);
 804a710:	693b      	ldr	r3, [r7, #16]
 804a712:	885b      	ldrh	r3, [r3, #2]
 804a714:	4619      	mov	r1, r3
 804a716:	482b      	ldr	r0, [pc, #172]	@ (804a7c4 <ScriptDLS_Task+0x188>)
 804a718:	f003 fc38 	bl	804df8c <BScript_Log>
                            ScriptManager_ResetContext(SCRIPT_TYPE_DLS_ROUTINE);
 804a71c:	2001      	movs	r0, #1
 804a71e:	f7ff f951 	bl	80499c4 <ScriptManager_ResetContext>


                            break;
 804a722:	e01c      	b.n	804a75e <ScriptDLS_Task+0x122>
                        } else {
                            BScript_Log("[ScriptDLS] Retrying step %d (attempt %d/%d)",
                                       context->current_step, context->retry_count, context->max_retries);
 804a724:	693b      	ldr	r3, [r7, #16]
 804a726:	885b      	ldrh	r3, [r3, #2]
                            BScript_Log("[ScriptDLS] Retrying step %d (attempt %d/%d)",
 804a728:	4619      	mov	r1, r3
                                       context->current_step, context->retry_count, context->max_retries);
 804a72a:	693b      	ldr	r3, [r7, #16]
 804a72c:	791b      	ldrb	r3, [r3, #4]
                            BScript_Log("[ScriptDLS] Retrying step %d (attempt %d/%d)",
 804a72e:	461a      	mov	r2, r3
                                       context->current_step, context->retry_count, context->max_retries);
 804a730:	693b      	ldr	r3, [r7, #16]
 804a732:	795b      	ldrb	r3, [r3, #5]
                            BScript_Log("[ScriptDLS] Retrying step %d (attempt %d/%d)",
 804a734:	4824      	ldr	r0, [pc, #144]	@ (804a7c8 <ScriptDLS_Task+0x18c>)
 804a736:	f003 fc29 	bl	804df8c <BScript_Log>
 804a73a:	e002      	b.n	804a742 <ScriptDLS_Task+0x106>
                        }
                    } else if (result == STEP_EXEC_WAIT) {
 804a73c:	7afb      	ldrb	r3, [r7, #11]
 804a73e:	2b01      	cmp	r3, #1
 804a740:	d00c      	beq.n	804a75c <ScriptDLS_Task+0x120>
                while (context->current_step < storage->parsed_script.total_steps &&
 804a742:	693b      	ldr	r3, [r7, #16]
 804a744:	885a      	ldrh	r2, [r3, #2]
 804a746:	697b      	ldr	r3, [r7, #20]
 804a748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804a74c:	895b      	ldrh	r3, [r3, #10]
 804a74e:	429a      	cmp	r2, r3
 804a750:	d205      	bcs.n	804a75e <ScriptDLS_Task+0x122>
                       context->state == SCRIPT_EXEC_RUNNING) {
 804a752:	693b      	ldr	r3, [r7, #16]
 804a754:	781b      	ldrb	r3, [r3, #0]
                while (context->current_step < storage->parsed_script.total_steps &&
 804a756:	2b01      	cmp	r3, #1
 804a758:	d09f      	beq.n	804a69a <ScriptDLS_Task+0x5e>
 804a75a:	e000      	b.n	804a75e <ScriptDLS_Task+0x122>
                        // Step needs to wait, will be retried next time
                        break;
 804a75c:	bf00      	nop
                    }
                }

                if (context->current_step >= storage->parsed_script.total_steps) {
 804a75e:	693b      	ldr	r3, [r7, #16]
 804a760:	885a      	ldrh	r2, [r3, #2]
 804a762:	697b      	ldr	r3, [r7, #20]
 804a764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804a768:	895b      	ldrh	r3, [r3, #10]
 804a76a:	429a      	cmp	r2, r3
 804a76c:	d316      	bcc.n	804a79c <ScriptDLS_Task+0x160>
                    context->state = SCRIPT_EXEC_COMPLETED;
 804a76e:	693b      	ldr	r3, [r7, #16]
 804a770:	2203      	movs	r2, #3
 804a772:	701a      	strb	r2, [r3, #0]
                    g_script_manager.dls_run_count++;
 804a774:	4b0f      	ldr	r3, [pc, #60]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a776:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a77a:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	@ 0xb30
 804a77e:	3301      	adds	r3, #1
 804a780:	4a0c      	ldr	r2, [pc, #48]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a782:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 804a786:	f8c2 3b30 	str.w	r3, [r2, #2864]	@ 0xb30
                    BScript_Log("[ScriptDLS] Routine completed successfully (total runs: %u)",
 804a78a:	4b0a      	ldr	r3, [pc, #40]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a78c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a790:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	@ 0xb30
 804a794:	4619      	mov	r1, r3
 804a796:	480d      	ldr	r0, [pc, #52]	@ (804a7cc <ScriptDLS_Task+0x190>)
 804a798:	f003 fbf8 	bl	804df8c <BScript_Log>
                               g_script_manager.dls_run_count);
                }

                xSemaphoreGive(g_script_manager.execution_mutex);
 804a79c:	4b05      	ldr	r3, [pc, #20]	@ (804a7b4 <ScriptDLS_Task+0x178>)
 804a79e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a7a2:	f8d3 0b1c 	ldr.w	r0, [r3, #2844]	@ 0xb1c
 804a7a6:	2300      	movs	r3, #0
 804a7a8:	2200      	movs	r2, #0
 804a7aa:	2100      	movs	r1, #0
 804a7ac:	f00a fd70 	bl	8055290 <xQueueGenericSend>
        if (xSemaphoreTake(g_script_manager.dls_semaphore, portMAX_DELAY) == pdTRUE) {
 804a7b0:	e748      	b.n	804a644 <ScriptDLS_Task+0x8>
 804a7b2:	bf00      	nop
 804a7b4:	2401ea2c 	.word	0x2401ea2c
 804a7b8:	24023278 	.word	0x24023278
 804a7bc:	2402c318 	.word	0x2402c318
 804a7c0:	0806ea68 	.word	0x0806ea68
 804a7c4:	0806ea94 	.word	0x0806ea94
 804a7c8:	0806ead8 	.word	0x0806ead8
 804a7cc:	0806eb08 	.word	0x0806eb08

0804a7d0 <ScriptCAM_Task>:
/**
 * @brief CAM Routine Task
 * @param pvParameters Task parameters
 */
void ScriptCAM_Task(void *pvParameters)
{
 804a7d0:	b580      	push	{r7, lr}
 804a7d2:	b086      	sub	sp, #24
 804a7d4:	af00      	add	r7, sp, #0
 804a7d6:	6078      	str	r0, [r7, #4]
    while (1) {
        // Wait for semaphore signal
        if (xSemaphoreTake(g_script_manager.cam_semaphore, portMAX_DELAY) == pdTRUE) {
 804a7d8:	4b5b      	ldr	r3, [pc, #364]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a7da:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a7de:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
 804a7e2:	f04f 31ff 	mov.w	r1, #4294967295
 804a7e6:	4618      	mov	r0, r3
 804a7e8:	f00a fff6 	bl	80557d8 <xQueueSemaphoreTake>
 804a7ec:	4603      	mov	r3, r0
 804a7ee:	2b01      	cmp	r3, #1
 804a7f0:	d1f2      	bne.n	804a7d8 <ScriptCAM_Task+0x8>

            // Take execution mutex
            if (xSemaphoreTake(g_script_manager.execution_mutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 804a7f2:	4b55      	ldr	r3, [pc, #340]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a7f4:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a7f8:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	@ 0xb1c
 804a7fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 804a800:	4618      	mov	r0, r3
 804a802:	f00a ffe9 	bl	80557d8 <xQueueSemaphoreTake>
 804a806:	4603      	mov	r3, r0
 804a808:	2b01      	cmp	r3, #1
 804a80a:	d1e5      	bne.n	804a7d8 <ScriptCAM_Task+0x8>

                ScriptStorage_t* storage = &g_script_manager.scripts[SCRIPT_TYPE_CAM_ROUTINE];
 804a80c:	4b4f      	ldr	r3, [pc, #316]	@ (804a94c <ScriptCAM_Task+0x17c>)
 804a80e:	617b      	str	r3, [r7, #20]
                ScriptExecContext_t* context = &g_script_manager.contexts[SCRIPT_TYPE_CAM_ROUTINE];
 804a810:	4b4f      	ldr	r3, [pc, #316]	@ (804a950 <ScriptCAM_Task+0x180>)
 804a812:	613b      	str	r3, [r7, #16]

                BScript_Log("[ScriptCAM] Starting CAM routine execution");
 804a814:	484f      	ldr	r0, [pc, #316]	@ (804a954 <ScriptCAM_Task+0x184>)
 804a816:	f003 fbb9 	bl	804df8c <BScript_Log>

                context->state = SCRIPT_EXEC_RUNNING;
 804a81a:	693b      	ldr	r3, [r7, #16]
 804a81c:	2201      	movs	r2, #1
 804a81e:	701a      	strb	r2, [r3, #0]
                context->current_step = 0;
 804a820:	693b      	ldr	r3, [r7, #16]
 804a822:	2200      	movs	r2, #0
 804a824:	805a      	strh	r2, [r3, #2]
                context->retry_count = 0;
 804a826:	693b      	ldr	r3, [r7, #16]
 804a828:	2200      	movs	r2, #0
 804a82a:	711a      	strb	r2, [r3, #4]

                // Execute all steps in the CAM routine
                while (context->current_step < storage->parsed_script.total_steps &&
 804a82c:	e053      	b.n	804a8d6 <ScriptCAM_Task+0x106>
                       context->state == SCRIPT_EXEC_RUNNING) {

                    Step* step = &storage->parsed_script.steps[context->current_step];
 804a82e:	693b      	ldr	r3, [r7, #16]
 804a830:	885b      	ldrh	r3, [r3, #2]
 804a832:	461a      	mov	r2, r3
 804a834:	4613      	mov	r3, r2
 804a836:	00db      	lsls	r3, r3, #3
 804a838:	4413      	add	r3, r2
 804a83a:	00db      	lsls	r3, r3, #3
 804a83c:	f241 0208 	movw	r2, #4104	@ 0x1008
 804a840:	441a      	add	r2, r3
 804a842:	697b      	ldr	r3, [r7, #20]
 804a844:	4413      	add	r3, r2
 804a846:	3304      	adds	r3, #4
 804a848:	60fb      	str	r3, [r7, #12]
                    StepExecResult result = ScriptManager_ExecuteStep(SCRIPT_TYPE_CAM_ROUTINE, step);
 804a84a:	68f9      	ldr	r1, [r7, #12]
 804a84c:	2002      	movs	r0, #2
 804a84e:	f000 f889 	bl	804a964 <ScriptManager_ExecuteStep>
 804a852:	4603      	mov	r3, r0
 804a854:	72fb      	strb	r3, [r7, #11]

                    if (result == STEP_EXEC_SUCCESS) {
 804a856:	7afb      	ldrb	r3, [r7, #11]
 804a858:	2b00      	cmp	r3, #0
 804a85a:	d109      	bne.n	804a870 <ScriptCAM_Task+0xa0>
                        context->current_step++;
 804a85c:	693b      	ldr	r3, [r7, #16]
 804a85e:	885b      	ldrh	r3, [r3, #2]
 804a860:	3301      	adds	r3, #1
 804a862:	b29a      	uxth	r2, r3
 804a864:	693b      	ldr	r3, [r7, #16]
 804a866:	805a      	strh	r2, [r3, #2]
                        context->retry_count = 0;
 804a868:	693b      	ldr	r3, [r7, #16]
 804a86a:	2200      	movs	r2, #0
 804a86c:	711a      	strb	r2, [r3, #4]
 804a86e:	e032      	b.n	804a8d6 <ScriptCAM_Task+0x106>
                    } else if (result == STEP_EXEC_ERROR) {
 804a870:	7afb      	ldrb	r3, [r7, #11]
 804a872:	2b02      	cmp	r3, #2
 804a874:	d12c      	bne.n	804a8d0 <ScriptCAM_Task+0x100>
                        context->retry_count++;
 804a876:	693b      	ldr	r3, [r7, #16]
 804a878:	791b      	ldrb	r3, [r3, #4]
 804a87a:	3301      	adds	r3, #1
 804a87c:	b2da      	uxtb	r2, r3
 804a87e:	693b      	ldr	r3, [r7, #16]
 804a880:	711a      	strb	r2, [r3, #4]
                        if (context->retry_count >= context->max_retries) {
 804a882:	693b      	ldr	r3, [r7, #16]
 804a884:	791a      	ldrb	r2, [r3, #4]
 804a886:	693b      	ldr	r3, [r7, #16]
 804a888:	795b      	ldrb	r3, [r3, #5]
 804a88a:	429a      	cmp	r2, r3
 804a88c:	d314      	bcc.n	804a8b8 <ScriptCAM_Task+0xe8>
//                            context->state = SCRIPT_EXEC_FAILED_MAX_RETRIES;

                            g_script_manager.total_errors++;
 804a88e:	4b2e      	ldr	r3, [pc, #184]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a890:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a894:	f8d3 3b38 	ldr.w	r3, [r3, #2872]	@ 0xb38
 804a898:	3301      	adds	r3, #1
 804a89a:	4a2b      	ldr	r2, [pc, #172]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a89c:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 804a8a0:	f8c2 3b38 	str.w	r3, [r2, #2872]	@ 0xb38
                            BScript_Log("[ScriptCAM] Max retries reached for step %d — skipping this run", context->current_step);
 804a8a4:	693b      	ldr	r3, [r7, #16]
 804a8a6:	885b      	ldrh	r3, [r3, #2]
 804a8a8:	4619      	mov	r1, r3
 804a8aa:	482b      	ldr	r0, [pc, #172]	@ (804a958 <ScriptCAM_Task+0x188>)
 804a8ac:	f003 fb6e 	bl	804df8c <BScript_Log>
                            ScriptManager_ResetContext(SCRIPT_TYPE_CAM_ROUTINE);
 804a8b0:	2002      	movs	r0, #2
 804a8b2:	f7ff f887 	bl	80499c4 <ScriptManager_ResetContext>

                            break;
 804a8b6:	e01c      	b.n	804a8f2 <ScriptCAM_Task+0x122>
                        } else {
                            BScript_Log("[ScriptCAM] Retrying step %d (attempt %d/%d)",
                                       context->current_step, context->retry_count, context->max_retries);
 804a8b8:	693b      	ldr	r3, [r7, #16]
 804a8ba:	885b      	ldrh	r3, [r3, #2]
                            BScript_Log("[ScriptCAM] Retrying step %d (attempt %d/%d)",
 804a8bc:	4619      	mov	r1, r3
                                       context->current_step, context->retry_count, context->max_retries);
 804a8be:	693b      	ldr	r3, [r7, #16]
 804a8c0:	791b      	ldrb	r3, [r3, #4]
                            BScript_Log("[ScriptCAM] Retrying step %d (attempt %d/%d)",
 804a8c2:	461a      	mov	r2, r3
                                       context->current_step, context->retry_count, context->max_retries);
 804a8c4:	693b      	ldr	r3, [r7, #16]
 804a8c6:	795b      	ldrb	r3, [r3, #5]
                            BScript_Log("[ScriptCAM] Retrying step %d (attempt %d/%d)",
 804a8c8:	4824      	ldr	r0, [pc, #144]	@ (804a95c <ScriptCAM_Task+0x18c>)
 804a8ca:	f003 fb5f 	bl	804df8c <BScript_Log>
 804a8ce:	e002      	b.n	804a8d6 <ScriptCAM_Task+0x106>
                        }
                    } else if (result == STEP_EXEC_WAIT) {
 804a8d0:	7afb      	ldrb	r3, [r7, #11]
 804a8d2:	2b01      	cmp	r3, #1
 804a8d4:	d00c      	beq.n	804a8f0 <ScriptCAM_Task+0x120>
                while (context->current_step < storage->parsed_script.total_steps &&
 804a8d6:	693b      	ldr	r3, [r7, #16]
 804a8d8:	885a      	ldrh	r2, [r3, #2]
 804a8da:	697b      	ldr	r3, [r7, #20]
 804a8dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804a8e0:	895b      	ldrh	r3, [r3, #10]
 804a8e2:	429a      	cmp	r2, r3
 804a8e4:	d205      	bcs.n	804a8f2 <ScriptCAM_Task+0x122>
                       context->state == SCRIPT_EXEC_RUNNING) {
 804a8e6:	693b      	ldr	r3, [r7, #16]
 804a8e8:	781b      	ldrb	r3, [r3, #0]
                while (context->current_step < storage->parsed_script.total_steps &&
 804a8ea:	2b01      	cmp	r3, #1
 804a8ec:	d09f      	beq.n	804a82e <ScriptCAM_Task+0x5e>
 804a8ee:	e000      	b.n	804a8f2 <ScriptCAM_Task+0x122>
                        // Step needs to wait, will be retried next time
                        break;
 804a8f0:	bf00      	nop
                    }
                }

                if (context->current_step >= storage->parsed_script.total_steps) {
 804a8f2:	693b      	ldr	r3, [r7, #16]
 804a8f4:	885a      	ldrh	r2, [r3, #2]
 804a8f6:	697b      	ldr	r3, [r7, #20]
 804a8f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804a8fc:	895b      	ldrh	r3, [r3, #10]
 804a8fe:	429a      	cmp	r2, r3
 804a900:	d316      	bcc.n	804a930 <ScriptCAM_Task+0x160>
                    context->state = SCRIPT_EXEC_COMPLETED;
 804a902:	693b      	ldr	r3, [r7, #16]
 804a904:	2203      	movs	r2, #3
 804a906:	701a      	strb	r2, [r3, #0]
                    g_script_manager.cam_run_count++;
 804a908:	4b0f      	ldr	r3, [pc, #60]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a90a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a90e:	f8d3 3b34 	ldr.w	r3, [r3, #2868]	@ 0xb34
 804a912:	3301      	adds	r3, #1
 804a914:	4a0c      	ldr	r2, [pc, #48]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a916:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
 804a91a:	f8c2 3b34 	str.w	r3, [r2, #2868]	@ 0xb34
                    BScript_Log("[ScriptCAM] Routine completed successfully (total runs: %u)",
 804a91e:	4b0a      	ldr	r3, [pc, #40]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a920:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a924:	f8d3 3b34 	ldr.w	r3, [r3, #2868]	@ 0xb34
 804a928:	4619      	mov	r1, r3
 804a92a:	480d      	ldr	r0, [pc, #52]	@ (804a960 <ScriptCAM_Task+0x190>)
 804a92c:	f003 fb2e 	bl	804df8c <BScript_Log>
                               g_script_manager.cam_run_count);
                }

                xSemaphoreGive(g_script_manager.execution_mutex);
 804a930:	4b05      	ldr	r3, [pc, #20]	@ (804a948 <ScriptCAM_Task+0x178>)
 804a932:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804a936:	f8d3 0b1c 	ldr.w	r0, [r3, #2844]	@ 0xb1c
 804a93a:	2300      	movs	r3, #0
 804a93c:	2200      	movs	r2, #0
 804a93e:	2100      	movs	r1, #0
 804a940:	f00a fca6 	bl	8055290 <xQueueGenericSend>
        if (xSemaphoreTake(g_script_manager.cam_semaphore, portMAX_DELAY) == pdTRUE) {
 804a944:	e748      	b.n	804a7d8 <ScriptCAM_Task+0x8>
 804a946:	bf00      	nop
 804a948:	2401ea2c 	.word	0x2401ea2c
 804a94c:	24027ac4 	.word	0x24027ac4
 804a950:	2402c320 	.word	0x2402c320
 804a954:	0806eb44 	.word	0x0806eb44
 804a958:	0806eb70 	.word	0x0806eb70
 804a95c:	0806ebb4 	.word	0x0806ebb4
 804a960:	0806ebe4 	.word	0x0806ebe4

0804a964 <ScriptManager_ExecuteStep>:
 * @param script_type Script type
 * @param step Step to execute
 * @return Execution result
 */
static StepExecResult ScriptManager_ExecuteStep(ScriptType_t script_type, Step* step)
{
 804a964:	b580      	push	{r7, lr}
 804a966:	b082      	sub	sp, #8
 804a968:	af00      	add	r7, sp, #0
 804a96a:	4603      	mov	r3, r0
 804a96c:	6039      	str	r1, [r7, #0]
 804a96e:	71fb      	strb	r3, [r7, #7]
    switch (script_type) {
 804a970:	79fb      	ldrb	r3, [r7, #7]
 804a972:	2b02      	cmp	r3, #2
 804a974:	d010      	beq.n	804a998 <ScriptManager_ExecuteStep+0x34>
 804a976:	2b02      	cmp	r3, #2
 804a978:	dc13      	bgt.n	804a9a2 <ScriptManager_ExecuteStep+0x3e>
 804a97a:	2b00      	cmp	r3, #0
 804a97c:	d002      	beq.n	804a984 <ScriptManager_ExecuteStep+0x20>
 804a97e:	2b01      	cmp	r3, #1
 804a980:	d005      	beq.n	804a98e <ScriptManager_ExecuteStep+0x2a>
 804a982:	e00e      	b.n	804a9a2 <ScriptManager_ExecuteStep+0x3e>
        case SCRIPT_TYPE_INIT:
            return ScriptManager_ExecuteInitStep(step);
 804a984:	6838      	ldr	r0, [r7, #0]
 804a986:	f000 f811 	bl	804a9ac <ScriptManager_ExecuteInitStep>
 804a98a:	4603      	mov	r3, r0
 804a98c:	e00a      	b.n	804a9a4 <ScriptManager_ExecuteStep+0x40>
        case SCRIPT_TYPE_DLS_ROUTINE:
            return ScriptManager_ExecuteDLSStep(step);
 804a98e:	6838      	ldr	r0, [r7, #0]
 804a990:	f000 fb6a 	bl	804b068 <ScriptManager_ExecuteDLSStep>
 804a994:	4603      	mov	r3, r0
 804a996:	e005      	b.n	804a9a4 <ScriptManager_ExecuteStep+0x40>
        case SCRIPT_TYPE_CAM_ROUTINE:
            return ScriptManager_ExecuteCAMStep(step);
 804a998:	6838      	ldr	r0, [r7, #0]
 804a99a:	f000 fbe7 	bl	804b16c <ScriptManager_ExecuteCAMStep>
 804a99e:	4603      	mov	r3, r0
 804a9a0:	e000      	b.n	804a9a4 <ScriptManager_ExecuteStep+0x40>
        default:
            return STEP_EXEC_ERROR;
 804a9a2:	2302      	movs	r3, #2
    }
}
 804a9a4:	4618      	mov	r0, r3
 804a9a6:	3708      	adds	r7, #8
 804a9a8:	46bd      	mov	sp, r7
 804a9aa:	bd80      	pop	{r7, pc}

0804a9ac <ScriptManager_ExecuteInitStep>:
 * @brief Execute INIT script steps
 * @param step Step to execute
 * @return Execution result
 */
static StepExecResult ScriptManager_ExecuteInitStep(Step* step)
{
 804a9ac:	b580      	push	{r7, lr}
 804a9ae:	b09e      	sub	sp, #120	@ 0x78
 804a9b0:	af02      	add	r7, sp, #8
 804a9b2:	6078      	str	r0, [r7, #4]
    BScript_Log("[ScriptInit] Executing step %u: action_id = 0x%02X", step->step_id, step->action_id);
 804a9b4:	687b      	ldr	r3, [r7, #4]
 804a9b6:	889b      	ldrh	r3, [r3, #4]
 804a9b8:	4619      	mov	r1, r3
 804a9ba:	687b      	ldr	r3, [r7, #4]
 804a9bc:	799b      	ldrb	r3, [r3, #6]
 804a9be:	461a      	mov	r2, r3
 804a9c0:	48bd      	ldr	r0, [pc, #756]	@ (804acb8 <ScriptManager_ExecuteInitStep+0x30c>)
 804a9c2:	f003 fae3 	bl	804df8c <BScript_Log>

    switch (step->action_id) {
 804a9c6:	687b      	ldr	r3, [r7, #4]
 804a9c8:	799b      	ldrb	r3, [r3, #6]
 804a9ca:	2b0b      	cmp	r3, #11
 804a9cc:	dc20      	bgt.n	804aa10 <ScriptManager_ExecuteInitStep+0x64>
 804a9ce:	2b00      	cmp	r3, #0
 804a9d0:	f340 8320 	ble.w	804b014 <ScriptManager_ExecuteInitStep+0x668>
 804a9d4:	3b01      	subs	r3, #1
 804a9d6:	2b0a      	cmp	r3, #10
 804a9d8:	f200 831c 	bhi.w	804b014 <ScriptManager_ExecuteInitStep+0x668>
 804a9dc:	a201      	add	r2, pc, #4	@ (adr r2, 804a9e4 <ScriptManager_ExecuteInitStep+0x38>)
 804a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a9e2:	bf00      	nop
 804a9e4:	0804aa1f 	.word	0x0804aa1f
 804a9e8:	0804ab8f 	.word	0x0804ab8f
 804a9ec:	0804ac11 	.word	0x0804ac11
 804a9f0:	0804ad1d 	.word	0x0804ad1d
 804a9f4:	0804ae6f 	.word	0x0804ae6f
 804a9f8:	0804b015 	.word	0x0804b015
 804a9fc:	0804ae77 	.word	0x0804ae77
 804aa00:	0804aedb 	.word	0x0804aedb
 804aa04:	0804b015 	.word	0x0804b015
 804aa08:	0804aee3 	.word	0x0804aee3
 804aa0c:	0804af67 	.word	0x0804af67
 804aa10:	2bff      	cmp	r3, #255	@ 0xff
 804aa12:	f040 82ff 	bne.w	804b014 <ScriptManager_ExecuteInitStep+0x668>
        case CLEAR_PROFILE: {
            BScript_Log("[ScriptInit] ->CLEAR_PROFILE");
 804aa16:	48a9      	ldr	r0, [pc, #676]	@ (804acbc <ScriptManager_ExecuteInitStep+0x310>)
 804aa18:	f003 fab8 	bl	804df8c <BScript_Log>
            // TODO: Implement profile clearing
            break;
 804aa1c:	e302      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
        }

        case SET_SYSTEM: { // set_system with updated parameters
            uint32_t start, release_time, lockin_time, dls_interval, cam_interval;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &start) != PARSE_IDX_OK ||
 804aa1e:	687b      	ldr	r3, [r7, #4]
 804aa20:	f103 0008 	add.w	r0, r3, #8
 804aa24:	687b      	ldr	r3, [r7, #4]
 804aa26:	79d9      	ldrb	r1, [r3, #7]
 804aa28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 804aa2c:	2200      	movs	r2, #0
 804aa2e:	f003 fb4d 	bl	804e0cc <BScript_ParseParamByIndex>
 804aa32:	4603      	mov	r3, r0
 804aa34:	2b00      	cmp	r3, #0
 804aa36:	d133      	bne.n	804aaa0 <ScriptManager_ExecuteInitStep+0xf4>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &release_time) != PARSE_IDX_OK ||
 804aa38:	687b      	ldr	r3, [r7, #4]
 804aa3a:	f103 0008 	add.w	r0, r3, #8
 804aa3e:	687b      	ldr	r3, [r7, #4]
 804aa40:	79d9      	ldrb	r1, [r3, #7]
 804aa42:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 804aa46:	2201      	movs	r2, #1
 804aa48:	f003 fb40 	bl	804e0cc <BScript_ParseParamByIndex>
 804aa4c:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &start) != PARSE_IDX_OK ||
 804aa4e:	2b00      	cmp	r3, #0
 804aa50:	d126      	bne.n	804aaa0 <ScriptManager_ExecuteInitStep+0xf4>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &lockin_time) != PARSE_IDX_OK ||
 804aa52:	687b      	ldr	r3, [r7, #4]
 804aa54:	f103 0008 	add.w	r0, r3, #8
 804aa58:	687b      	ldr	r3, [r7, #4]
 804aa5a:	79d9      	ldrb	r1, [r3, #7]
 804aa5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 804aa60:	2202      	movs	r2, #2
 804aa62:	f003 fb33 	bl	804e0cc <BScript_ParseParamByIndex>
 804aa66:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &release_time) != PARSE_IDX_OK ||
 804aa68:	2b00      	cmp	r3, #0
 804aa6a:	d119      	bne.n	804aaa0 <ScriptManager_ExecuteInitStep+0xf4>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &dls_interval) != PARSE_IDX_OK ||
 804aa6c:	687b      	ldr	r3, [r7, #4]
 804aa6e:	f103 0008 	add.w	r0, r3, #8
 804aa72:	687b      	ldr	r3, [r7, #4]
 804aa74:	79d9      	ldrb	r1, [r3, #7]
 804aa76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804aa7a:	2203      	movs	r2, #3
 804aa7c:	f003 fb26 	bl	804e0cc <BScript_ParseParamByIndex>
 804aa80:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &lockin_time) != PARSE_IDX_OK ||
 804aa82:	2b00      	cmp	r3, #0
 804aa84:	d10c      	bne.n	804aaa0 <ScriptManager_ExecuteInitStep+0xf4>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 4, &cam_interval) != PARSE_IDX_OK) {
 804aa86:	687b      	ldr	r3, [r7, #4]
 804aa88:	f103 0008 	add.w	r0, r3, #8
 804aa8c:	687b      	ldr	r3, [r7, #4]
 804aa8e:	79d9      	ldrb	r1, [r3, #7]
 804aa90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 804aa94:	2204      	movs	r2, #4
 804aa96:	f003 fb19 	bl	804e0cc <BScript_ParseParamByIndex>
 804aa9a:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &dls_interval) != PARSE_IDX_OK ||
 804aa9c:	2b00      	cmp	r3, #0
 804aa9e:	d001      	beq.n	804aaa4 <ScriptManager_ExecuteInitStep+0xf8>
                return STEP_EXEC_ERROR;
 804aaa0:	2302      	movs	r3, #2
 804aaa2:	e2c0      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            // Parse start time and set as system reference (for logging only)
            uint32_t start_daily_time = ScriptManager_ParseStartTime(start);
 804aaa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 804aaa6:	4618      	mov	r0, r3
 804aaa8:	f7fe fc48 	bl	804933c <ScriptManager_ParseStartTime>
 804aaac:	6638      	str	r0, [r7, #96]	@ 0x60
            g_script_manager.system_start_daily_time = start_daily_time; // Now stores daily time
 804aaae:	4b84      	ldr	r3, [pc, #528]	@ (804acc0 <ScriptManager_ExecuteInitStep+0x314>)
 804aab0:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804aab4:	461a      	mov	r2, r3
 804aab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 804aab8:	f8c2 3b2c 	str.w	r3, [r2, #2860]	@ 0xb2c
            g_script_manager.system_time_configured = true;
 804aabc:	4b80      	ldr	r3, [pc, #512]	@ (804acc0 <ScriptManager_ExecuteInitStep+0x314>)
 804aabe:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804aac2:	2201      	movs	r2, #1
 804aac4:	f883 2b2a 	strb.w	r2, [r3, #2858]	@ 0xb2a

            // Parse release and lockin times (for logging only, not used in this application)
            uint8_t release_time_hh = (uint8_t)((release_time >> 16) & 0xFF);
 804aac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 804aaca:	0c1b      	lsrs	r3, r3, #16
 804aacc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            uint8_t release_time_mm = (uint8_t)((release_time >> 8) & 0xFF);
 804aad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 804aad2:	0a1b      	lsrs	r3, r3, #8
 804aad4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            uint8_t release_time_ss = (uint8_t)(release_time & 0xFF);
 804aad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 804aada:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

            uint8_t lockin_time_hh = (uint8_t)((lockin_time >> 16) & 0xFF);
 804aade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804aae0:	0c1b      	lsrs	r3, r3, #16
 804aae2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            uint8_t lockin_time_mm = (uint8_t)((lockin_time >> 8) & 0xFF);
 804aae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804aae8:	0a1b      	lsrs	r3, r3, #8
 804aaea:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            uint8_t lockin_time_ss = (uint8_t)(lockin_time & 0xFF);
 804aaee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 804aaf0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

            BScript_Log("[ScriptInit] ->SET_SYSTEM: System start daily time = %u seconds", start_daily_time);
 804aaf4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 804aaf6:	4873      	ldr	r0, [pc, #460]	@ (804acc4 <ScriptManager_ExecuteInitStep+0x318>)
 804aaf8:	f003 fa48 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptInit] ->SET_SYSTEM: Release Time = %02u:%02u:%02u (info only)",
 804aafc:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 804ab00:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 804ab04:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 804ab08:	486f      	ldr	r0, [pc, #444]	@ (804acc8 <ScriptManager_ExecuteInitStep+0x31c>)
 804ab0a:	f003 fa3f 	bl	804df8c <BScript_Log>
                       release_time_hh, release_time_mm, release_time_ss);
            BScript_Log("[ScriptInit] ->SET_SYSTEM: Lock-in Time = %02u:%02u:%02u (info only)",
 804ab0e:	f897 105c 	ldrb.w	r1, [r7, #92]	@ 0x5c
 804ab12:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 804ab16:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 804ab1a:	486c      	ldr	r0, [pc, #432]	@ (804accc <ScriptManager_ExecuteInitStep+0x320>)
 804ab1c:	f003 fa36 	bl	804df8c <BScript_Log>
                       lockin_time_hh, lockin_time_mm, lockin_time_ss);
            BScript_Log("[ScriptInit] ->SET_SYSTEM: DLS Interval = %u seconds", dls_interval);
 804ab20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 804ab22:	4619      	mov	r1, r3
 804ab24:	486a      	ldr	r0, [pc, #424]	@ (804acd0 <ScriptManager_ExecuteInitStep+0x324>)
 804ab26:	f003 fa31 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptInit] ->SET_SYSTEM: CAM Interval = %u seconds", cam_interval);
 804ab2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804ab2c:	4619      	mov	r1, r3
 804ab2e:	4869      	ldr	r0, [pc, #420]	@ (804acd4 <ScriptManager_ExecuteInitStep+0x328>)
 804ab30:	f003 fa2c 	bl	804df8c <BScript_Log>

            // Generate time points for DLS routine
            if (ScriptManager_GenerateTimePoints(&g_script_manager.dls_schedule, start_daily_time, dls_interval)) {
 804ab34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 804ab36:	461a      	mov	r2, r3
 804ab38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 804ab3a:	4867      	ldr	r0, [pc, #412]	@ (804acd8 <ScriptManager_ExecuteInitStep+0x32c>)
 804ab3c:	f7fe fc8e 	bl	804945c <ScriptManager_GenerateTimePoints>
 804ab40:	4603      	mov	r3, r0
 804ab42:	2b00      	cmp	r3, #0
 804ab44:	d011      	beq.n	804ab6a <ScriptManager_ExecuteInitStep+0x1be>
                BScript_Log("[ScriptInit] ->SET_SYSTEM: DLS time points generated successfully");
 804ab46:	4865      	ldr	r0, [pc, #404]	@ (804acdc <ScriptManager_ExecuteInitStep+0x330>)
 804ab48:	f003 fa20 	bl	804df8c <BScript_Log>
                ScriptManager_PrintTimePoints(&g_script_manager.dls_schedule, "DLS");
 804ab4c:	4964      	ldr	r1, [pc, #400]	@ (804ace0 <ScriptManager_ExecuteInitStep+0x334>)
 804ab4e:	4862      	ldr	r0, [pc, #392]	@ (804acd8 <ScriptManager_ExecuteInitStep+0x32c>)
 804ab50:	f7fe fe0e 	bl	8049770 <ScriptManager_PrintTimePoints>
                BScript_Log("[ScriptInit] ->SET_SYSTEM: Failed to generate DLS time points");
                return STEP_EXEC_ERROR;
            }

            // Generate time points for CAM routine
            if (ScriptManager_GenerateTimePoints(&g_script_manager.cam_schedule, start_daily_time + SCHED_OFFSET_SEC, cam_interval)) {
 804ab54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 804ab56:	3305      	adds	r3, #5
 804ab58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 804ab5a:	4619      	mov	r1, r3
 804ab5c:	4861      	ldr	r0, [pc, #388]	@ (804ace4 <ScriptManager_ExecuteInitStep+0x338>)
 804ab5e:	f7fe fc7d 	bl	804945c <ScriptManager_GenerateTimePoints>
 804ab62:	4603      	mov	r3, r0
 804ab64:	2b00      	cmp	r3, #0
 804ab66:	d00d      	beq.n	804ab84 <ScriptManager_ExecuteInitStep+0x1d8>
 804ab68:	e004      	b.n	804ab74 <ScriptManager_ExecuteInitStep+0x1c8>
                BScript_Log("[ScriptInit] ->SET_SYSTEM: Failed to generate DLS time points");
 804ab6a:	485f      	ldr	r0, [pc, #380]	@ (804ace8 <ScriptManager_ExecuteInitStep+0x33c>)
 804ab6c:	f003 fa0e 	bl	804df8c <BScript_Log>
                return STEP_EXEC_ERROR;
 804ab70:	2302      	movs	r3, #2
 804ab72:	e258      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
                BScript_Log("[ScriptInit] ->SET_SYSTEM: CAM time points generated successfully");
 804ab74:	485d      	ldr	r0, [pc, #372]	@ (804acec <ScriptManager_ExecuteInitStep+0x340>)
 804ab76:	f003 fa09 	bl	804df8c <BScript_Log>
                ScriptManager_PrintTimePoints(&g_script_manager.cam_schedule, "CAM");
 804ab7a:	495d      	ldr	r1, [pc, #372]	@ (804acf0 <ScriptManager_ExecuteInitStep+0x344>)
 804ab7c:	4859      	ldr	r0, [pc, #356]	@ (804ace4 <ScriptManager_ExecuteInitStep+0x338>)
 804ab7e:	f7fe fdf7 	bl	8049770 <ScriptManager_PrintTimePoints>
            } else {
                BScript_Log("[ScriptInit] ->SET_SYSTEM: Failed to generate CAM time points");
                return STEP_EXEC_ERROR;
            }

            break;
 804ab82:	e24f      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
                BScript_Log("[ScriptInit] ->SET_SYSTEM: Failed to generate CAM time points");
 804ab84:	485b      	ldr	r0, [pc, #364]	@ (804acf4 <ScriptManager_ExecuteInitStep+0x348>)
 804ab86:	f003 fa01 	bl	804df8c <BScript_Log>
                return STEP_EXEC_ERROR;
 804ab8a:	2302      	movs	r3, #2
 804ab8c:	e24b      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
        }

        case SET_RTC: { // set_rtc
            uint8_t source;
            uint32_t interval;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &source) != PARSE_IDX_OK ||
 804ab8e:	687b      	ldr	r3, [r7, #4]
 804ab90:	f103 0008 	add.w	r0, r3, #8
 804ab94:	687b      	ldr	r3, [r7, #4]
 804ab96:	79d9      	ldrb	r1, [r3, #7]
 804ab98:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 804ab9c:	2200      	movs	r2, #0
 804ab9e:	f003 fa95 	bl	804e0cc <BScript_ParseParamByIndex>
 804aba2:	4603      	mov	r3, r0
 804aba4:	2b00      	cmp	r3, #0
 804aba6:	d10c      	bne.n	804abc2 <ScriptManager_ExecuteInitStep+0x216>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &interval) != PARSE_IDX_OK) {
 804aba8:	687b      	ldr	r3, [r7, #4]
 804abaa:	f103 0008 	add.w	r0, r3, #8
 804abae:	687b      	ldr	r3, [r7, #4]
 804abb0:	79d9      	ldrb	r1, [r3, #7]
 804abb2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 804abb6:	2201      	movs	r2, #1
 804abb8:	f003 fa88 	bl	804e0cc <BScript_ParseParamByIndex>
 804abbc:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &source) != PARSE_IDX_OK ||
 804abbe:	2b00      	cmp	r3, #0
 804abc0:	d001      	beq.n	804abc6 <ScriptManager_ExecuteInitStep+0x21a>
                return STEP_EXEC_ERROR;
 804abc2:	2302      	movs	r3, #2
 804abc4:	e22f      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            if(source == 0){
 804abc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804abca:	2b00      	cmp	r3, #0
 804abcc:	d106      	bne.n	804abdc <ScriptManager_ExecuteInitStep+0x230>
            	BScript_Log("[ScriptInit] ->SET_RTC: Source type: %u - OBC-RTC", source);
 804abce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804abd2:	4619      	mov	r1, r3
 804abd4:	4848      	ldr	r0, [pc, #288]	@ (804acf8 <ScriptManager_ExecuteInitStep+0x34c>)
 804abd6:	f003 f9d9 	bl	804df8c <BScript_Log>
 804abda:	e010      	b.n	804abfe <ScriptManager_ExecuteInitStep+0x252>
            }else if (source == 1){
 804abdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804abe0:	2b01      	cmp	r3, #1
 804abe2:	d106      	bne.n	804abf2 <ScriptManager_ExecuteInitStep+0x246>
            	BScript_Log("[ScriptInit] ->SET_RTC: Source type: %u - Nanode-NTP", source);
 804abe4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804abe8:	4619      	mov	r1, r3
 804abea:	4844      	ldr	r0, [pc, #272]	@ (804acfc <ScriptManager_ExecuteInitStep+0x350>)
 804abec:	f003 f9ce 	bl	804df8c <BScript_Log>
 804abf0:	e005      	b.n	804abfe <ScriptManager_ExecuteInitStep+0x252>
            }else{
            	BScript_Log("[ScriptInit] ->SET_RTC: Unknown source type - %u", source);
 804abf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804abf6:	4619      	mov	r1, r3
 804abf8:	4841      	ldr	r0, [pc, #260]	@ (804ad00 <ScriptManager_ExecuteInitStep+0x354>)
 804abfa:	f003 f9c7 	bl	804df8c <BScript_Log>
            }

            BScript_Log("[ScriptInit] ->SET_RTC: Set RTC - source=%u, interval=%u", source, interval);
 804abfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804ac02:	4619      	mov	r1, r3
 804ac04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804ac06:	461a      	mov	r2, r3
 804ac08:	483e      	ldr	r0, [pc, #248]	@ (804ad04 <ScriptManager_ExecuteInitStep+0x358>)
 804ac0a:	f003 f9bf 	bl	804df8c <BScript_Log>
 804ac0e:	e209      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
            break;
        }

        case SET_NTC_CONTROL: { // set_ntc_control
        	uint8_t ntc_control_byte = 0;
 804ac10:	2300      	movs	r3, #0
 804ac12:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            uint8_t resp_info[5];
            uint8_t resp_len = 0;
 804ac16:	2300      	movs	r3, #0
 804ac18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            for (uint8_t i = 0; i < 8; ++i) {
 804ac1c:	2300      	movs	r3, #0
 804ac1e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 804ac22:	e043      	b.n	804acac <ScriptManager_ExecuteInitStep+0x300>
                uint8_t enable_flag;
                if (BScript_ParseParamByIndex(step->parameters, step->param_len, i, &enable_flag) != PARSE_IDX_OK) {
 804ac24:	687b      	ldr	r3, [r7, #4]
 804ac26:	f103 0008 	add.w	r0, r3, #8
 804ac2a:	687b      	ldr	r3, [r7, #4]
 804ac2c:	79d9      	ldrb	r1, [r3, #7]
 804ac2e:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 804ac32:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 804ac36:	f003 fa49 	bl	804e0cc <BScript_ParseParamByIndex>
 804ac3a:	4603      	mov	r3, r0
 804ac3c:	2b00      	cmp	r3, #0
 804ac3e:	d007      	beq.n	804ac50 <ScriptManager_ExecuteInitStep+0x2a4>
                    BScript_Log("[ScriptInit] ->SET_NTC_CONTROL: Failed to parse enable_index_%u", i);
 804ac40:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 804ac44:	4619      	mov	r1, r3
 804ac46:	4830      	ldr	r0, [pc, #192]	@ (804ad08 <ScriptManager_ExecuteInitStep+0x35c>)
 804ac48:	f003 f9a0 	bl	804df8c <BScript_Log>
                    return STEP_EXEC_ERROR;
 804ac4c:	2302      	movs	r3, #2
 804ac4e:	e1ea      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
                }

                if (enable_flag > 1) {
 804ac50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 804ac54:	2b01      	cmp	r3, #1
 804ac56:	d909      	bls.n	804ac6c <ScriptManager_ExecuteInitStep+0x2c0>
                    BScript_Log("[ScriptInit] ->SET_NTC_CONTROL: Invalid value at enable_index_%u: %u (must be 0 or 1)", i, enable_flag);
 804ac58:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 804ac5c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 804ac60:	4619      	mov	r1, r3
 804ac62:	482a      	ldr	r0, [pc, #168]	@ (804ad0c <ScriptManager_ExecuteInitStep+0x360>)
 804ac64:	f003 f992 	bl	804df8c <BScript_Log>
                    return STEP_EXEC_ERROR;
 804ac68:	2302      	movs	r3, #2
 804ac6a:	e1dc      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
                }

                BScript_Log("[ScriptInit] ->SET_NTC_CONTROL: NTC[%u] %s", i, enable_flag ? "ENABLED" : "DISABLED");
 804ac6c:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
 804ac70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 804ac74:	2b00      	cmp	r3, #0
 804ac76:	d001      	beq.n	804ac7c <ScriptManager_ExecuteInitStep+0x2d0>
 804ac78:	4b25      	ldr	r3, [pc, #148]	@ (804ad10 <ScriptManager_ExecuteInitStep+0x364>)
 804ac7a:	e000      	b.n	804ac7e <ScriptManager_ExecuteInitStep+0x2d2>
 804ac7c:	4b25      	ldr	r3, [pc, #148]	@ (804ad14 <ScriptManager_ExecuteInitStep+0x368>)
 804ac7e:	461a      	mov	r2, r3
 804ac80:	4825      	ldr	r0, [pc, #148]	@ (804ad18 <ScriptManager_ExecuteInitStep+0x36c>)
 804ac82:	f003 f983 	bl	804df8c <BScript_Log>

                ntc_control_byte |= (enable_flag << i);
 804ac86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 804ac8a:	461a      	mov	r2, r3
 804ac8c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 804ac90:	fa02 f303 	lsl.w	r3, r2, r3
 804ac94:	b25a      	sxtb	r2, r3
 804ac96:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 804ac9a:	4313      	orrs	r3, r2
 804ac9c:	b25b      	sxtb	r3, r3
 804ac9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            for (uint8_t i = 0; i < 8; ++i) {
 804aca2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 804aca6:	3301      	adds	r3, #1
 804aca8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 804acac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 804acb0:	2b07      	cmp	r3, #7
 804acb2:	d9b7      	bls.n	804ac24 <ScriptManager_ExecuteInitStep+0x278>
//            }else {
//                BScript_Log("[ScriptInit] Failed to SET_NTC_CONTROL");
//                return STEP_EXEC_ERROR;
//            }

            break;
 804acb4:	e1b6      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
 804acb6:	bf00      	nop
 804acb8:	0806ec20 	.word	0x0806ec20
 804acbc:	0806ec54 	.word	0x0806ec54
 804acc0:	2401ea2c 	.word	0x2401ea2c
 804acc4:	0806ec74 	.word	0x0806ec74
 804acc8:	0806ecb4 	.word	0x0806ecb4
 804accc:	0806ecfc 	.word	0x0806ecfc
 804acd0:	0806ed44 	.word	0x0806ed44
 804acd4:	0806ed7c 	.word	0x0806ed7c
 804acd8:	2402c328 	.word	0x2402c328
 804acdc:	0806edb4 	.word	0x0806edb4
 804ace0:	0806e6e0 	.word	0x0806e6e0
 804ace4:	2402cc38 	.word	0x2402cc38
 804ace8:	0806edf8 	.word	0x0806edf8
 804acec:	0806ee38 	.word	0x0806ee38
 804acf0:	0806e6e4 	.word	0x0806e6e4
 804acf4:	0806ee7c 	.word	0x0806ee7c
 804acf8:	0806eebc 	.word	0x0806eebc
 804acfc:	0806eef0 	.word	0x0806eef0
 804ad00:	0806ef28 	.word	0x0806ef28
 804ad04:	0806ef5c 	.word	0x0806ef5c
 804ad08:	0806ef98 	.word	0x0806ef98
 804ad0c:	0806efd8 	.word	0x0806efd8
 804ad10:	0806f030 	.word	0x0806f030
 804ad14:	0806f038 	.word	0x0806f038
 804ad18:	0806f044 	.word	0x0806f044

        case SET_TEMP_PROFILE: {
            uint16_t target_temp, min_temp, max_temp, tec_vol;
			uint8_t heater_duty, auto_recover, ntc_primary, ntc_secondary, tec_mask, heater_mask;

            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &target_temp) != PARSE_IDX_OK ||
 804ad1c:	687b      	ldr	r3, [r7, #4]
 804ad1e:	f103 0008 	add.w	r0, r3, #8
 804ad22:	687b      	ldr	r3, [r7, #4]
 804ad24:	79d9      	ldrb	r1, [r3, #7]
 804ad26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 804ad2a:	2200      	movs	r2, #0
 804ad2c:	f003 f9ce 	bl	804e0cc <BScript_ParseParamByIndex>
 804ad30:	4603      	mov	r3, r0
 804ad32:	2b00      	cmp	r3, #0
 804ad34:	d174      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &min_temp) != PARSE_IDX_OK ||
 804ad36:	687b      	ldr	r3, [r7, #4]
 804ad38:	f103 0008 	add.w	r0, r3, #8
 804ad3c:	687b      	ldr	r3, [r7, #4]
 804ad3e:	79d9      	ldrb	r1, [r3, #7]
 804ad40:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 804ad44:	2201      	movs	r2, #1
 804ad46:	f003 f9c1 	bl	804e0cc <BScript_ParseParamByIndex>
 804ad4a:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &target_temp) != PARSE_IDX_OK ||
 804ad4c:	2b00      	cmp	r3, #0
 804ad4e:	d167      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &max_temp) != PARSE_IDX_OK ||
 804ad50:	687b      	ldr	r3, [r7, #4]
 804ad52:	f103 0008 	add.w	r0, r3, #8
 804ad56:	687b      	ldr	r3, [r7, #4]
 804ad58:	79d9      	ldrb	r1, [r3, #7]
 804ad5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 804ad5e:	2202      	movs	r2, #2
 804ad60:	f003 f9b4 	bl	804e0cc <BScript_ParseParamByIndex>
 804ad64:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &min_temp) != PARSE_IDX_OK ||
 804ad66:	2b00      	cmp	r3, #0
 804ad68:	d15a      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &ntc_primary) != PARSE_IDX_OK ||
 804ad6a:	687b      	ldr	r3, [r7, #4]
 804ad6c:	f103 0008 	add.w	r0, r3, #8
 804ad70:	687b      	ldr	r3, [r7, #4]
 804ad72:	79d9      	ldrb	r1, [r3, #7]
 804ad74:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 804ad78:	2203      	movs	r2, #3
 804ad7a:	f003 f9a7 	bl	804e0cc <BScript_ParseParamByIndex>
 804ad7e:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &max_temp) != PARSE_IDX_OK ||
 804ad80:	2b00      	cmp	r3, #0
 804ad82:	d14d      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 4, &ntc_secondary) != PARSE_IDX_OK ||
 804ad84:	687b      	ldr	r3, [r7, #4]
 804ad86:	f103 0008 	add.w	r0, r3, #8
 804ad8a:	687b      	ldr	r3, [r7, #4]
 804ad8c:	79d9      	ldrb	r1, [r3, #7]
 804ad8e:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 804ad92:	2204      	movs	r2, #4
 804ad94:	f003 f99a 	bl	804e0cc <BScript_ParseParamByIndex>
 804ad98:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &ntc_primary) != PARSE_IDX_OK ||
 804ad9a:	2b00      	cmp	r3, #0
 804ad9c:	d140      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 5, &tec_mask) != PARSE_IDX_OK ||
 804ad9e:	687b      	ldr	r3, [r7, #4]
 804ada0:	f103 0008 	add.w	r0, r3, #8
 804ada4:	687b      	ldr	r3, [r7, #4]
 804ada6:	79d9      	ldrb	r1, [r3, #7]
 804ada8:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 804adac:	2205      	movs	r2, #5
 804adae:	f003 f98d 	bl	804e0cc <BScript_ParseParamByIndex>
 804adb2:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 4, &ntc_secondary) != PARSE_IDX_OK ||
 804adb4:	2b00      	cmp	r3, #0
 804adb6:	d133      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 6, &heater_mask) != PARSE_IDX_OK ||
 804adb8:	687b      	ldr	r3, [r7, #4]
 804adba:	f103 0008 	add.w	r0, r3, #8
 804adbe:	687b      	ldr	r3, [r7, #4]
 804adc0:	79d9      	ldrb	r1, [r3, #7]
 804adc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804adc6:	2206      	movs	r2, #6
 804adc8:	f003 f980 	bl	804e0cc <BScript_ParseParamByIndex>
 804adcc:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 5, &tec_mask) != PARSE_IDX_OK ||
 804adce:	2b00      	cmp	r3, #0
 804add0:	d126      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 7, &tec_vol) != PARSE_IDX_OK ||
 804add2:	687b      	ldr	r3, [r7, #4]
 804add4:	f103 0008 	add.w	r0, r3, #8
 804add8:	687b      	ldr	r3, [r7, #4]
 804adda:	79d9      	ldrb	r1, [r3, #7]
 804addc:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 804ade0:	2207      	movs	r2, #7
 804ade2:	f003 f973 	bl	804e0cc <BScript_ParseParamByIndex>
 804ade6:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 6, &heater_mask) != PARSE_IDX_OK ||
 804ade8:	2b00      	cmp	r3, #0
 804adea:	d119      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 8, &heater_duty) != PARSE_IDX_OK ||
 804adec:	687b      	ldr	r3, [r7, #4]
 804adee:	f103 0008 	add.w	r0, r3, #8
 804adf2:	687b      	ldr	r3, [r7, #4]
 804adf4:	79d9      	ldrb	r1, [r3, #7]
 804adf6:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 804adfa:	2208      	movs	r2, #8
 804adfc:	f003 f966 	bl	804e0cc <BScript_ParseParamByIndex>
 804ae00:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 7, &tec_vol) != PARSE_IDX_OK ||
 804ae02:	2b00      	cmp	r3, #0
 804ae04:	d10c      	bne.n	804ae20 <ScriptManager_ExecuteInitStep+0x474>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 9, &auto_recover) != PARSE_IDX_OK) {
 804ae06:	687b      	ldr	r3, [r7, #4]
 804ae08:	f103 0008 	add.w	r0, r3, #8
 804ae0c:	687b      	ldr	r3, [r7, #4]
 804ae0e:	79d9      	ldrb	r1, [r3, #7]
 804ae10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804ae14:	2209      	movs	r2, #9
 804ae16:	f003 f959 	bl	804e0cc <BScript_ParseParamByIndex>
 804ae1a:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 8, &heater_duty) != PARSE_IDX_OK ||
 804ae1c:	2b00      	cmp	r3, #0
 804ae1e:	d001      	beq.n	804ae24 <ScriptManager_ExecuteInitStep+0x478>
                return STEP_EXEC_ERROR;
 804ae20:	2302      	movs	r3, #2
 804ae22:	e100      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            BScript_Log("[ScriptInit] ->SET_TEMP_PROFILE: Target=%u, Min=%u, Max=%u", target_temp, min_temp, max_temp);
 804ae24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 804ae26:	4619      	mov	r1, r3
 804ae28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 804ae2a:	461a      	mov	r2, r3
 804ae2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 804ae2e:	4880      	ldr	r0, [pc, #512]	@ (804b030 <ScriptManager_ExecuteInitStep+0x684>)
 804ae30:	f003 f8ac 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptInit] Primary NTC=%u, Secondary NTC=%u", ntc_primary, ntc_secondary);
 804ae34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804ae38:	4619      	mov	r1, r3
 804ae3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 804ae3e:	461a      	mov	r2, r3
 804ae40:	487c      	ldr	r0, [pc, #496]	@ (804b034 <ScriptManager_ExecuteInitStep+0x688>)
 804ae42:	f003 f8a3 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptInit] TEC mask=0x%02X, Heater mask=0x%02X", tec_mask, heater_mask);
 804ae46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 804ae4a:	4619      	mov	r1, r3
 804ae4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 804ae50:	461a      	mov	r2, r3
 804ae52:	4879      	ldr	r0, [pc, #484]	@ (804b038 <ScriptManager_ExecuteInitStep+0x68c>)
 804ae54:	f003 f89a 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptInit] TEC voltage=%u mV, Heater duty=%u%%, Auto-recover=%u", tec_vol, heater_duty, auto_recover);
 804ae58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 804ae5a:	4619      	mov	r1, r3
 804ae5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 804ae60:	461a      	mov	r2, r3
 804ae62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 804ae66:	4875      	ldr	r0, [pc, #468]	@ (804b03c <ScriptManager_ExecuteInitStep+0x690>)
 804ae68:	f003 f890 	bl	804df8c <BScript_Log>
 804ae6c:	e0da      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
            // TODO: Apply temperature profile settings
            break;
        }

        case START_TEMP_PROFILE: {
            BScript_Log("[ScriptInit] ->START_TEMP_PROFILE");
 804ae6e:	4874      	ldr	r0, [pc, #464]	@ (804b040 <ScriptManager_ExecuteInitStep+0x694>)
 804ae70:	f003 f88c 	bl	804df8c <BScript_Log>
            // TODO: Start the configured temperature profile
            break;
 804ae74:	e0d6      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>

        case SET_OVERRIDE_TEC_PROFILE: {
            uint16_t interval, tec_vol;
            uint8_t tec_index;

            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &interval) != PARSE_IDX_OK ||
 804ae76:	687b      	ldr	r3, [r7, #4]
 804ae78:	f103 0008 	add.w	r0, r3, #8
 804ae7c:	687b      	ldr	r3, [r7, #4]
 804ae7e:	79d9      	ldrb	r1, [r3, #7]
 804ae80:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 804ae84:	2200      	movs	r2, #0
 804ae86:	f003 f921 	bl	804e0cc <BScript_ParseParamByIndex>
 804ae8a:	4603      	mov	r3, r0
 804ae8c:	2b00      	cmp	r3, #0
 804ae8e:	d119      	bne.n	804aec4 <ScriptManager_ExecuteInitStep+0x518>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &tec_index) != PARSE_IDX_OK ||
 804ae90:	687b      	ldr	r3, [r7, #4]
 804ae92:	f103 0008 	add.w	r0, r3, #8
 804ae96:	687b      	ldr	r3, [r7, #4]
 804ae98:	79d9      	ldrb	r1, [r3, #7]
 804ae9a:	f107 031f 	add.w	r3, r7, #31
 804ae9e:	2201      	movs	r2, #1
 804aea0:	f003 f914 	bl	804e0cc <BScript_ParseParamByIndex>
 804aea4:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &interval) != PARSE_IDX_OK ||
 804aea6:	2b00      	cmp	r3, #0
 804aea8:	d10c      	bne.n	804aec4 <ScriptManager_ExecuteInitStep+0x518>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &tec_vol) != PARSE_IDX_OK) {
 804aeaa:	687b      	ldr	r3, [r7, #4]
 804aeac:	f103 0008 	add.w	r0, r3, #8
 804aeb0:	687b      	ldr	r3, [r7, #4]
 804aeb2:	79d9      	ldrb	r1, [r3, #7]
 804aeb4:	f107 0320 	add.w	r3, r7, #32
 804aeb8:	2202      	movs	r2, #2
 804aeba:	f003 f907 	bl	804e0cc <BScript_ParseParamByIndex>
 804aebe:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &tec_index) != PARSE_IDX_OK ||
 804aec0:	2b00      	cmp	r3, #0
 804aec2:	d001      	beq.n	804aec8 <ScriptManager_ExecuteInitStep+0x51c>
                return STEP_EXEC_ERROR;
 804aec4:	2302      	movs	r3, #2
 804aec6:	e0ae      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            BScript_Log("[ScriptInit] ->SET_OVERRIDE_TEC_PROFILE: interval=%u sec, index=%u, voltage=%u mV",
 804aec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804aeca:	4619      	mov	r1, r3
 804aecc:	7ffb      	ldrb	r3, [r7, #31]
 804aece:	461a      	mov	r2, r3
 804aed0:	8c3b      	ldrh	r3, [r7, #32]
 804aed2:	485c      	ldr	r0, [pc, #368]	@ (804b044 <ScriptManager_ExecuteInitStep+0x698>)
 804aed4:	f003 f85a 	bl	804df8c <BScript_Log>
 804aed8:	e0a4      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
            // TODO: Apply override TEC profile settings
            break;
        }

        case START_OVERRIDE_TEC_PROFILE: {
            BScript_Log("[ScriptInit] ->START_OVERRIDE_TEC_PROFILE");
 804aeda:	485b      	ldr	r0, [pc, #364]	@ (804b048 <ScriptManager_ExecuteInitStep+0x69c>)
 804aedc:	f003 f856 	bl	804df8c <BScript_Log>
            // TODO: Activate TEC override profile
            break;
 804aee0:	e0a0      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>

        case SET_PDA_PROFILE: {
            uint32_t rate;
			uint16_t pre_laser, in_sample, pos_laser;

            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &rate) != PARSE_IDX_OK ||
 804aee2:	687b      	ldr	r3, [r7, #4]
 804aee4:	f103 0008 	add.w	r0, r3, #8
 804aee8:	687b      	ldr	r3, [r7, #4]
 804aeea:	79d9      	ldrb	r1, [r3, #7]
 804aeec:	f107 0318 	add.w	r3, r7, #24
 804aef0:	2200      	movs	r2, #0
 804aef2:	f003 f8eb 	bl	804e0cc <BScript_ParseParamByIndex>
 804aef6:	4603      	mov	r3, r0
 804aef8:	2b00      	cmp	r3, #0
 804aefa:	d126      	bne.n	804af4a <ScriptManager_ExecuteInitStep+0x59e>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &pre_laser) != PARSE_IDX_OK ||
 804aefc:	687b      	ldr	r3, [r7, #4]
 804aefe:	f103 0008 	add.w	r0, r3, #8
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	79d9      	ldrb	r1, [r3, #7]
 804af06:	f107 0316 	add.w	r3, r7, #22
 804af0a:	2201      	movs	r2, #1
 804af0c:	f003 f8de 	bl	804e0cc <BScript_ParseParamByIndex>
 804af10:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &rate) != PARSE_IDX_OK ||
 804af12:	2b00      	cmp	r3, #0
 804af14:	d119      	bne.n	804af4a <ScriptManager_ExecuteInitStep+0x59e>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &in_sample) != PARSE_IDX_OK ||
 804af16:	687b      	ldr	r3, [r7, #4]
 804af18:	f103 0008 	add.w	r0, r3, #8
 804af1c:	687b      	ldr	r3, [r7, #4]
 804af1e:	79d9      	ldrb	r1, [r3, #7]
 804af20:	f107 0314 	add.w	r3, r7, #20
 804af24:	2202      	movs	r2, #2
 804af26:	f003 f8d1 	bl	804e0cc <BScript_ParseParamByIndex>
 804af2a:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &pre_laser) != PARSE_IDX_OK ||
 804af2c:	2b00      	cmp	r3, #0
 804af2e:	d10c      	bne.n	804af4a <ScriptManager_ExecuteInitStep+0x59e>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &pos_laser) != PARSE_IDX_OK) {
 804af30:	687b      	ldr	r3, [r7, #4]
 804af32:	f103 0008 	add.w	r0, r3, #8
 804af36:	687b      	ldr	r3, [r7, #4]
 804af38:	79d9      	ldrb	r1, [r3, #7]
 804af3a:	f107 0312 	add.w	r3, r7, #18
 804af3e:	2203      	movs	r2, #3
 804af40:	f003 f8c4 	bl	804e0cc <BScript_ParseParamByIndex>
 804af44:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &in_sample) != PARSE_IDX_OK ||
 804af46:	2b00      	cmp	r3, #0
 804af48:	d001      	beq.n	804af4e <ScriptManager_ExecuteInitStep+0x5a2>
                return STEP_EXEC_ERROR;
 804af4a:	2302      	movs	r3, #2
 804af4c:	e06b      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            BScript_Log("[ScriptInit] ->SET_PDA_PROFILE: Rate=%u Hz, PreLaser=%u us, InSample=%u us, PostLaser=%u us",
 804af4e:	69b9      	ldr	r1, [r7, #24]
 804af50:	8afb      	ldrh	r3, [r7, #22]
 804af52:	461a      	mov	r2, r3
 804af54:	8abb      	ldrh	r3, [r7, #20]
 804af56:	4618      	mov	r0, r3
 804af58:	8a7b      	ldrh	r3, [r7, #18]
 804af5a:	9300      	str	r3, [sp, #0]
 804af5c:	4603      	mov	r3, r0
 804af5e:	483b      	ldr	r0, [pc, #236]	@ (804b04c <ScriptManager_ExecuteInitStep+0x6a0>)
 804af60:	f003 f814 	bl	804df8c <BScript_Log>
 804af64:	e05e      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>

        case SET_CAMERA_PROFILE: {
            uint8_t resolution, compress_enable;
            uint16_t exposure, gain;

            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &resolution) != PARSE_IDX_OK ||
 804af66:	687b      	ldr	r3, [r7, #4]
 804af68:	f103 0008 	add.w	r0, r3, #8
 804af6c:	687b      	ldr	r3, [r7, #4]
 804af6e:	79d9      	ldrb	r1, [r3, #7]
 804af70:	f107 0311 	add.w	r3, r7, #17
 804af74:	2200      	movs	r2, #0
 804af76:	f003 f8a9 	bl	804e0cc <BScript_ParseParamByIndex>
 804af7a:	4603      	mov	r3, r0
 804af7c:	2b00      	cmp	r3, #0
 804af7e:	d126      	bne.n	804afce <ScriptManager_ExecuteInitStep+0x622>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &compress_enable) != PARSE_IDX_OK ||
 804af80:	687b      	ldr	r3, [r7, #4]
 804af82:	f103 0008 	add.w	r0, r3, #8
 804af86:	687b      	ldr	r3, [r7, #4]
 804af88:	79d9      	ldrb	r1, [r3, #7]
 804af8a:	f107 0310 	add.w	r3, r7, #16
 804af8e:	2201      	movs	r2, #1
 804af90:	f003 f89c 	bl	804e0cc <BScript_ParseParamByIndex>
 804af94:	4603      	mov	r3, r0
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &resolution) != PARSE_IDX_OK ||
 804af96:	2b00      	cmp	r3, #0
 804af98:	d119      	bne.n	804afce <ScriptManager_ExecuteInitStep+0x622>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &exposure) != PARSE_IDX_OK ||
 804af9a:	687b      	ldr	r3, [r7, #4]
 804af9c:	f103 0008 	add.w	r0, r3, #8
 804afa0:	687b      	ldr	r3, [r7, #4]
 804afa2:	79d9      	ldrb	r1, [r3, #7]
 804afa4:	f107 030e 	add.w	r3, r7, #14
 804afa8:	2202      	movs	r2, #2
 804afaa:	f003 f88f 	bl	804e0cc <BScript_ParseParamByIndex>
 804afae:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 1, &compress_enable) != PARSE_IDX_OK ||
 804afb0:	2b00      	cmp	r3, #0
 804afb2:	d10c      	bne.n	804afce <ScriptManager_ExecuteInitStep+0x622>
                BScript_ParseParamByIndex(step->parameters, step->param_len, 3, &gain) != PARSE_IDX_OK) {
 804afb4:	687b      	ldr	r3, [r7, #4]
 804afb6:	f103 0008 	add.w	r0, r3, #8
 804afba:	687b      	ldr	r3, [r7, #4]
 804afbc:	79d9      	ldrb	r1, [r3, #7]
 804afbe:	f107 030c 	add.w	r3, r7, #12
 804afc2:	2203      	movs	r2, #3
 804afc4:	f003 f882 	bl	804e0cc <BScript_ParseParamByIndex>
 804afc8:	4603      	mov	r3, r0
                BScript_ParseParamByIndex(step->parameters, step->param_len, 2, &exposure) != PARSE_IDX_OK ||
 804afca:	2b00      	cmp	r3, #0
 804afcc:	d001      	beq.n	804afd2 <ScriptManager_ExecuteInitStep+0x626>
                return STEP_EXEC_ERROR;
 804afce:	2302      	movs	r3, #2
 804afd0:	e029      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
            }

            const char* resolution_str = "Unknown";
 804afd2:	4b1f      	ldr	r3, [pc, #124]	@ (804b050 <ScriptManager_ExecuteInitStep+0x6a4>)
 804afd4:	66bb      	str	r3, [r7, #104]	@ 0x68
            switch (resolution) {
 804afd6:	7c7b      	ldrb	r3, [r7, #17]
 804afd8:	2b02      	cmp	r3, #2
 804afda:	d00c      	beq.n	804aff6 <ScriptManager_ExecuteInitStep+0x64a>
 804afdc:	2b02      	cmp	r3, #2
 804afde:	dc0d      	bgt.n	804affc <ScriptManager_ExecuteInitStep+0x650>
 804afe0:	2b00      	cmp	r3, #0
 804afe2:	d002      	beq.n	804afea <ScriptManager_ExecuteInitStep+0x63e>
 804afe4:	2b01      	cmp	r3, #1
 804afe6:	d003      	beq.n	804aff0 <ScriptManager_ExecuteInitStep+0x644>
 804afe8:	e008      	b.n	804affc <ScriptManager_ExecuteInitStep+0x650>
                case 0: resolution_str = "Low"; break;
 804afea:	4b1a      	ldr	r3, [pc, #104]	@ (804b054 <ScriptManager_ExecuteInitStep+0x6a8>)
 804afec:	66bb      	str	r3, [r7, #104]	@ 0x68
 804afee:	e005      	b.n	804affc <ScriptManager_ExecuteInitStep+0x650>
                case 1: resolution_str = "Half"; break;
 804aff0:	4b19      	ldr	r3, [pc, #100]	@ (804b058 <ScriptManager_ExecuteInitStep+0x6ac>)
 804aff2:	66bb      	str	r3, [r7, #104]	@ 0x68
 804aff4:	e002      	b.n	804affc <ScriptManager_ExecuteInitStep+0x650>
                case 2: resolution_str = "Full"; break;
 804aff6:	4b19      	ldr	r3, [pc, #100]	@ (804b05c <ScriptManager_ExecuteInitStep+0x6b0>)
 804aff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 804affa:	bf00      	nop
            }

            BScript_Log("[ScriptInit] ->SET_CAMERA_PROFILE: Res=%s, Compress=%u, Exposure=%u, Gain=%u",
 804affc:	7c3b      	ldrb	r3, [r7, #16]
 804affe:	461a      	mov	r2, r3
 804b000:	89fb      	ldrh	r3, [r7, #14]
 804b002:	4619      	mov	r1, r3
 804b004:	89bb      	ldrh	r3, [r7, #12]
 804b006:	9300      	str	r3, [sp, #0]
 804b008:	460b      	mov	r3, r1
 804b00a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 804b00c:	4814      	ldr	r0, [pc, #80]	@ (804b060 <ScriptManager_ExecuteInitStep+0x6b4>)
 804b00e:	f002 ffbd 	bl	804df8c <BScript_Log>
 804b012:	e007      	b.n	804b024 <ScriptManager_ExecuteInitStep+0x678>
            // TODO: Apply camera settings
            break;
        }

        default:
            BScript_Log("[ScriptInit] Unknown action: 0x%02X", step->action_id);
 804b014:	687b      	ldr	r3, [r7, #4]
 804b016:	799b      	ldrb	r3, [r3, #6]
 804b018:	4619      	mov	r1, r3
 804b01a:	4812      	ldr	r0, [pc, #72]	@ (804b064 <ScriptManager_ExecuteInitStep+0x6b8>)
 804b01c:	f002 ffb6 	bl	804df8c <BScript_Log>
            return STEP_EXEC_ERROR;
 804b020:	2302      	movs	r3, #2
 804b022:	e000      	b.n	804b026 <ScriptManager_ExecuteInitStep+0x67a>
    }

    return STEP_EXEC_SUCCESS;
 804b024:	2300      	movs	r3, #0
}
 804b026:	4618      	mov	r0, r3
 804b028:	3770      	adds	r7, #112	@ 0x70
 804b02a:	46bd      	mov	sp, r7
 804b02c:	bd80      	pop	{r7, pc}
 804b02e:	bf00      	nop
 804b030:	0806f070 	.word	0x0806f070
 804b034:	0806f0ac 	.word	0x0806f0ac
 804b038:	0806f0dc 	.word	0x0806f0dc
 804b03c:	0806f110 	.word	0x0806f110
 804b040:	0806f154 	.word	0x0806f154
 804b044:	0806f178 	.word	0x0806f178
 804b048:	0806f1cc 	.word	0x0806f1cc
 804b04c:	0806f1f8 	.word	0x0806f1f8
 804b050:	0806f254 	.word	0x0806f254
 804b054:	0806f25c 	.word	0x0806f25c
 804b058:	0806f260 	.word	0x0806f260
 804b05c:	0806f268 	.word	0x0806f268
 804b060:	0806f270 	.word	0x0806f270
 804b064:	0806f2c0 	.word	0x0806f2c0

0804b068 <ScriptManager_ExecuteDLSStep>:
 * @brief Execute DLS routine steps
 * @param step Step to execute
 * @return Execution result
 */
static StepExecResult ScriptManager_ExecuteDLSStep(Step* step)
{
 804b068:	b580      	push	{r7, lr}
 804b06a:	b084      	sub	sp, #16
 804b06c:	af00      	add	r7, sp, #0
 804b06e:	6078      	str	r0, [r7, #4]
    BScript_Log("[ScriptDLS] Executing step %u: action_id = 0x%02X", step->step_id, step->action_id);
 804b070:	687b      	ldr	r3, [r7, #4]
 804b072:	889b      	ldrh	r3, [r3, #4]
 804b074:	4619      	mov	r1, r3
 804b076:	687b      	ldr	r3, [r7, #4]
 804b078:	799b      	ldrb	r3, [r3, #6]
 804b07a:	461a      	mov	r2, r3
 804b07c:	4834      	ldr	r0, [pc, #208]	@ (804b150 <ScriptManager_ExecuteDLSStep+0xe8>)
 804b07e:	f002 ff85 	bl	804df8c <BScript_Log>

    switch (step->action_id) {
 804b082:	687b      	ldr	r3, [r7, #4]
 804b084:	799b      	ldrb	r3, [r3, #6]
 804b086:	3b11      	subs	r3, #17
 804b088:	2b04      	cmp	r3, #4
 804b08a:	d854      	bhi.n	804b136 <ScriptManager_ExecuteDLSStep+0xce>
 804b08c:	a201      	add	r2, pc, #4	@ (adr r2, 804b094 <ScriptManager_ExecuteDLSStep+0x2c>)
 804b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b092:	bf00      	nop
 804b094:	0804b0a9 	.word	0x0804b0a9
 804b098:	0804b0d3 	.word	0x0804b0d3
 804b09c:	0804b0fd 	.word	0x0804b0fd
 804b0a0:	0804b127 	.word	0x0804b127
 804b0a4:	0804b12f 	.word	0x0804b12f
        case SET_DLS_INTERVAL: { // set_dls_interval (now only for logging)
            uint32_t interval;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &interval) != PARSE_IDX_OK) {
 804b0a8:	687b      	ldr	r3, [r7, #4]
 804b0aa:	f103 0008 	add.w	r0, r3, #8
 804b0ae:	687b      	ldr	r3, [r7, #4]
 804b0b0:	79d9      	ldrb	r1, [r3, #7]
 804b0b2:	f107 030c 	add.w	r3, r7, #12
 804b0b6:	2200      	movs	r2, #0
 804b0b8:	f003 f808 	bl	804e0cc <BScript_ParseParamByIndex>
 804b0bc:	4603      	mov	r3, r0
 804b0be:	2b00      	cmp	r3, #0
 804b0c0:	d001      	beq.n	804b0c6 <ScriptManager_ExecuteDLSStep+0x5e>
                return STEP_EXEC_ERROR;
 804b0c2:	2302      	movs	r3, #2
 804b0c4:	e040      	b.n	804b148 <ScriptManager_ExecuteDLSStep+0xe0>
            }

            BScript_Log("[ScriptDLS] ->SET_DLS_INTERVAL: Reached step with interval %u seconds (using time points instead)", interval);
 804b0c6:	68fb      	ldr	r3, [r7, #12]
 804b0c8:	4619      	mov	r1, r3
 804b0ca:	4822      	ldr	r0, [pc, #136]	@ (804b154 <ScriptManager_ExecuteDLSStep+0xec>)
 804b0cc:	f002 ff5e 	bl	804df8c <BScript_Log>
 804b0d0:	e039      	b.n	804b146 <ScriptManager_ExecuteDLSStep+0xde>
            break;
        }

        case SET_LASER_INTENSITY: { // set_laser_intensity
            uint8_t intensity;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &intensity) != PARSE_IDX_OK) {
 804b0d2:	687b      	ldr	r3, [r7, #4]
 804b0d4:	f103 0008 	add.w	r0, r3, #8
 804b0d8:	687b      	ldr	r3, [r7, #4]
 804b0da:	79d9      	ldrb	r1, [r3, #7]
 804b0dc:	f107 030b 	add.w	r3, r7, #11
 804b0e0:	2200      	movs	r2, #0
 804b0e2:	f002 fff3 	bl	804e0cc <BScript_ParseParamByIndex>
 804b0e6:	4603      	mov	r3, r0
 804b0e8:	2b00      	cmp	r3, #0
 804b0ea:	d001      	beq.n	804b0f0 <ScriptManager_ExecuteDLSStep+0x88>
                return STEP_EXEC_ERROR;
 804b0ec:	2302      	movs	r3, #2
 804b0ee:	e02b      	b.n	804b148 <ScriptManager_ExecuteDLSStep+0xe0>
            }
            BScript_Log("[ScriptDLS] ->SET_LASER_INTENSITY: Set laser intensity %u", intensity);
 804b0f0:	7afb      	ldrb	r3, [r7, #11]
 804b0f2:	4619      	mov	r1, r3
 804b0f4:	4818      	ldr	r0, [pc, #96]	@ (804b158 <ScriptManager_ExecuteDLSStep+0xf0>)
 804b0f6:	f002 ff49 	bl	804df8c <BScript_Log>
 804b0fa:	e024      	b.n	804b146 <ScriptManager_ExecuteDLSStep+0xde>
            break;
        }

        case SET_POSITION: { // set_position
            uint8_t position;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &position) != PARSE_IDX_OK) {
 804b0fc:	687b      	ldr	r3, [r7, #4]
 804b0fe:	f103 0008 	add.w	r0, r3, #8
 804b102:	687b      	ldr	r3, [r7, #4]
 804b104:	79d9      	ldrb	r1, [r3, #7]
 804b106:	f107 030a 	add.w	r3, r7, #10
 804b10a:	2200      	movs	r2, #0
 804b10c:	f002 ffde 	bl	804e0cc <BScript_ParseParamByIndex>
 804b110:	4603      	mov	r3, r0
 804b112:	2b00      	cmp	r3, #0
 804b114:	d001      	beq.n	804b11a <ScriptManager_ExecuteDLSStep+0xb2>
                return STEP_EXEC_ERROR;
 804b116:	2302      	movs	r3, #2
 804b118:	e016      	b.n	804b148 <ScriptManager_ExecuteDLSStep+0xe0>
            }
            BScript_Log("[ScriptDLS] ->SET_POSITION: Set position: %u", position);
 804b11a:	7abb      	ldrb	r3, [r7, #10]
 804b11c:	4619      	mov	r1, r3
 804b11e:	480f      	ldr	r0, [pc, #60]	@ (804b15c <ScriptManager_ExecuteDLSStep+0xf4>)
 804b120:	f002 ff34 	bl	804df8c <BScript_Log>
 804b124:	e00f      	b.n	804b146 <ScriptManager_ExecuteDLSStep+0xde>
            // TODO: Implement position control
            break;
        }

        case START_SAMPLING_CYCLE: { // start_sample_cycle
            BScript_Log("[ScriptDLS] ->START_SAMPLING_CYCLE: Start sample cycle");
 804b126:	480e      	ldr	r0, [pc, #56]	@ (804b160 <ScriptManager_ExecuteDLSStep+0xf8>)
 804b128:	f002 ff30 	bl	804df8c <BScript_Log>
            // TODO: Implement sample cycle start
            break;
 804b12c:	e00b      	b.n	804b146 <ScriptManager_ExecuteDLSStep+0xde>

        case GET_SAMPLE: { // obc_get_sample



            BScript_Log("[ScriptDLS] ->GET_SAMPLE: Get sample");
 804b12e:	480d      	ldr	r0, [pc, #52]	@ (804b164 <ScriptManager_ExecuteDLSStep+0xfc>)
 804b130:	f002 ff2c 	bl	804df8c <BScript_Log>
            // TODO: Implement sample retrieval
            break;
 804b134:	e007      	b.n	804b146 <ScriptManager_ExecuteDLSStep+0xde>
        }

        default:
            BScript_Log("[ScriptDLS] Unknown action: 0x%02X", step->action_id);
 804b136:	687b      	ldr	r3, [r7, #4]
 804b138:	799b      	ldrb	r3, [r3, #6]
 804b13a:	4619      	mov	r1, r3
 804b13c:	480a      	ldr	r0, [pc, #40]	@ (804b168 <ScriptManager_ExecuteDLSStep+0x100>)
 804b13e:	f002 ff25 	bl	804df8c <BScript_Log>
            return STEP_EXEC_ERROR;
 804b142:	2302      	movs	r3, #2
 804b144:	e000      	b.n	804b148 <ScriptManager_ExecuteDLSStep+0xe0>
    }

    return STEP_EXEC_SUCCESS;
 804b146:	2300      	movs	r3, #0
}
 804b148:	4618      	mov	r0, r3
 804b14a:	3710      	adds	r7, #16
 804b14c:	46bd      	mov	sp, r7
 804b14e:	bd80      	pop	{r7, pc}
 804b150:	0806f2e4 	.word	0x0806f2e4
 804b154:	0806f318 	.word	0x0806f318
 804b158:	0806f37c 	.word	0x0806f37c
 804b15c:	0806f3b8 	.word	0x0806f3b8
 804b160:	0806f3e8 	.word	0x0806f3e8
 804b164:	0806f420 	.word	0x0806f420
 804b168:	0806f448 	.word	0x0806f448

0804b16c <ScriptManager_ExecuteCAMStep>:
 * @brief Execute CAM routine steps
 * @param step Step to execute
 * @return Execution result
 */
static StepExecResult ScriptManager_ExecuteCAMStep(Step* step)
{
 804b16c:	b580      	push	{r7, lr}
 804b16e:	b086      	sub	sp, #24
 804b170:	af00      	add	r7, sp, #0
 804b172:	6078      	str	r0, [r7, #4]
    BScript_Log("[ScriptCAM] Executing step %u: action_id = 0x%02X", step->step_id, step->action_id);
 804b174:	687b      	ldr	r3, [r7, #4]
 804b176:	889b      	ldrh	r3, [r3, #4]
 804b178:	4619      	mov	r1, r3
 804b17a:	687b      	ldr	r3, [r7, #4]
 804b17c:	799b      	ldrb	r3, [r3, #6]
 804b17e:	461a      	mov	r2, r3
 804b180:	4854      	ldr	r0, [pc, #336]	@ (804b2d4 <ScriptManager_ExecuteCAMStep+0x168>)
 804b182:	f002 ff03 	bl	804df8c <BScript_Log>

    switch (step->action_id) {
 804b186:	687b      	ldr	r3, [r7, #4]
 804b188:	799b      	ldrb	r3, [r3, #6]
 804b18a:	2b26      	cmp	r3, #38	@ 0x26
 804b18c:	dc16      	bgt.n	804b1bc <ScriptManager_ExecuteCAMStep+0x50>
 804b18e:	2b21      	cmp	r3, #33	@ 0x21
 804b190:	f2c0 8092 	blt.w	804b2b8 <ScriptManager_ExecuteCAMStep+0x14c>
 804b194:	3b21      	subs	r3, #33	@ 0x21
 804b196:	2b05      	cmp	r3, #5
 804b198:	f200 808e 	bhi.w	804b2b8 <ScriptManager_ExecuteCAMStep+0x14c>
 804b19c:	a201      	add	r2, pc, #4	@ (adr r2, 804b1a4 <ScriptManager_ExecuteCAMStep+0x38>)
 804b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b1a2:	bf00      	nop
 804b1a4:	0804b1c3 	.word	0x0804b1c3
 804b1a8:	0804b1ed 	.word	0x0804b1ed
 804b1ac:	0804b217 	.word	0x0804b217
 804b1b0:	0804b241 	.word	0x0804b241
 804b1b4:	0804b26b 	.word	0x0804b26b
 804b1b8:	0804b2b1 	.word	0x0804b2b1
 804b1bc:	2bfb      	cmp	r3, #251	@ 0xfb
 804b1be:	d058      	beq.n	804b272 <ScriptManager_ExecuteCAMStep+0x106>
 804b1c0:	e07a      	b.n	804b2b8 <ScriptManager_ExecuteCAMStep+0x14c>
        case SET_CAMERA_INTERVAL: { // set_camera_interval (now only for logging)
            uint32_t interval;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &interval) != PARSE_IDX_OK) {
 804b1c2:	687b      	ldr	r3, [r7, #4]
 804b1c4:	f103 0008 	add.w	r0, r3, #8
 804b1c8:	687b      	ldr	r3, [r7, #4]
 804b1ca:	79d9      	ldrb	r1, [r3, #7]
 804b1cc:	f107 0314 	add.w	r3, r7, #20
 804b1d0:	2200      	movs	r2, #0
 804b1d2:	f002 ff7b 	bl	804e0cc <BScript_ParseParamByIndex>
 804b1d6:	4603      	mov	r3, r0
 804b1d8:	2b00      	cmp	r3, #0
 804b1da:	d001      	beq.n	804b1e0 <ScriptManager_ExecuteCAMStep+0x74>
                return STEP_EXEC_ERROR;
 804b1dc:	2302      	movs	r3, #2
 804b1de:	e074      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
            }

            BScript_Log("[ScriptCAM] ->SET_CAMERA_INTERVAL: Reached step with interval %u seconds (using time points instead)", interval);
 804b1e0:	697b      	ldr	r3, [r7, #20]
 804b1e2:	4619      	mov	r1, r3
 804b1e4:	483c      	ldr	r0, [pc, #240]	@ (804b2d8 <ScriptManager_ExecuteCAMStep+0x16c>)
 804b1e6:	f002 fed1 	bl	804df8c <BScript_Log>
 804b1ea:	e06d      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
            break;
        }

        case SET_EXT_LASER_INTENSITY: { // set_ext_laser_intensity
            uint8_t intensity;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &intensity) != PARSE_IDX_OK) {
 804b1ec:	687b      	ldr	r3, [r7, #4]
 804b1ee:	f103 0008 	add.w	r0, r3, #8
 804b1f2:	687b      	ldr	r3, [r7, #4]
 804b1f4:	79d9      	ldrb	r1, [r3, #7]
 804b1f6:	f107 0313 	add.w	r3, r7, #19
 804b1fa:	2200      	movs	r2, #0
 804b1fc:	f002 ff66 	bl	804e0cc <BScript_ParseParamByIndex>
 804b200:	4603      	mov	r3, r0
 804b202:	2b00      	cmp	r3, #0
 804b204:	d001      	beq.n	804b20a <ScriptManager_ExecuteCAMStep+0x9e>
                return STEP_EXEC_ERROR;
 804b206:	2302      	movs	r3, #2
 804b208:	e05f      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
            }
            BScript_Log("[ScriptCAM] ->SET_EXT_LASER_INTENSITY: Ext-laser intensity: %u", intensity);
 804b20a:	7cfb      	ldrb	r3, [r7, #19]
 804b20c:	4619      	mov	r1, r3
 804b20e:	4833      	ldr	r0, [pc, #204]	@ (804b2dc <ScriptManager_ExecuteCAMStep+0x170>)
 804b210:	f002 febc 	bl	804df8c <BScript_Log>
 804b214:	e058      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
            break;
        }

        case TURN_ON_EXT_LASER: {
            uint8_t position;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &position) != PARSE_IDX_OK) {
 804b216:	687b      	ldr	r3, [r7, #4]
 804b218:	f103 0008 	add.w	r0, r3, #8
 804b21c:	687b      	ldr	r3, [r7, #4]
 804b21e:	79d9      	ldrb	r1, [r3, #7]
 804b220:	f107 0312 	add.w	r3, r7, #18
 804b224:	2200      	movs	r2, #0
 804b226:	f002 ff51 	bl	804e0cc <BScript_ParseParamByIndex>
 804b22a:	4603      	mov	r3, r0
 804b22c:	2b00      	cmp	r3, #0
 804b22e:	d001      	beq.n	804b234 <ScriptManager_ExecuteCAMStep+0xc8>
                return STEP_EXEC_ERROR;
 804b230:	2302      	movs	r3, #2
 804b232:	e04a      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
            }
            BScript_Log("[ScriptCAM] ->TURN_ON_EXT_LASER: Turn on ext-laser %u", position);
 804b234:	7cbb      	ldrb	r3, [r7, #18]
 804b236:	4619      	mov	r1, r3
 804b238:	4829      	ldr	r0, [pc, #164]	@ (804b2e0 <ScriptManager_ExecuteCAMStep+0x174>)
 804b23a:	f002 fea7 	bl	804df8c <BScript_Log>
 804b23e:	e043      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
            break;
        }

        case SET_CAMERA_POSITION: {
            uint8_t camPosition;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &camPosition) != PARSE_IDX_OK) {
 804b240:	687b      	ldr	r3, [r7, #4]
 804b242:	f103 0008 	add.w	r0, r3, #8
 804b246:	687b      	ldr	r3, [r7, #4]
 804b248:	79d9      	ldrb	r1, [r3, #7]
 804b24a:	f107 0311 	add.w	r3, r7, #17
 804b24e:	2200      	movs	r2, #0
 804b250:	f002 ff3c 	bl	804e0cc <BScript_ParseParamByIndex>
 804b254:	4603      	mov	r3, r0
 804b256:	2b00      	cmp	r3, #0
 804b258:	d001      	beq.n	804b25e <ScriptManager_ExecuteCAMStep+0xf2>
                return STEP_EXEC_ERROR;
 804b25a:	2302      	movs	r3, #2
 804b25c:	e035      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
            }
            BScript_Log("[ScriptCAM] ->SET_CAMERA_POSITION: Set CIS-ID %u", camPosition);
 804b25e:	7c7b      	ldrb	r3, [r7, #17]
 804b260:	4619      	mov	r1, r3
 804b262:	4820      	ldr	r0, [pc, #128]	@ (804b2e4 <ScriptManager_ExecuteCAMStep+0x178>)
 804b264:	f002 fe92 	bl	804df8c <BScript_Log>
 804b268:	e02e      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
            // TODO: Implement external laser intensity control
            break;
        }

        case TAKE_IMG_WITH_TIMEOUT: { // take_img_with_timeout
            BScript_Log("[ScriptCAM] ->TAKE_IMG: Take image with timeout");
 804b26a:	481f      	ldr	r0, [pc, #124]	@ (804b2e8 <ScriptManager_ExecuteCAMStep+0x17c>)
 804b26c:	f002 fe8e 	bl	804df8c <BScript_Log>
            // TODO: Implement image capture
            break;
 804b270:	e02a      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
        }

        case SCRIPT_DELAY: {
            uint32_t delayDuration;
            if (BScript_ParseParamByIndex(step->parameters, step->param_len, 0, &delayDuration) != PARSE_IDX_OK) {
 804b272:	687b      	ldr	r3, [r7, #4]
 804b274:	f103 0008 	add.w	r0, r3, #8
 804b278:	687b      	ldr	r3, [r7, #4]
 804b27a:	79d9      	ldrb	r1, [r3, #7]
 804b27c:	f107 030c 	add.w	r3, r7, #12
 804b280:	2200      	movs	r2, #0
 804b282:	f002 ff23 	bl	804e0cc <BScript_ParseParamByIndex>
 804b286:	4603      	mov	r3, r0
 804b288:	2b00      	cmp	r3, #0
 804b28a:	d001      	beq.n	804b290 <ScriptManager_ExecuteCAMStep+0x124>
                return STEP_EXEC_ERROR;
 804b28c:	2302      	movs	r3, #2
 804b28e:	e01c      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
            }
            BScript_Log("[ScriptCAM] ->DELAY: Delay for camera %u ms",delayDuration);
 804b290:	68fb      	ldr	r3, [r7, #12]
 804b292:	4619      	mov	r1, r3
 804b294:	4815      	ldr	r0, [pc, #84]	@ (804b2ec <ScriptManager_ExecuteCAMStep+0x180>)
 804b296:	f002 fe79 	bl	804df8c <BScript_Log>
            BScript_Log("[ScriptCAM] ->DELAY: Delay start!");
 804b29a:	4815      	ldr	r0, [pc, #84]	@ (804b2f0 <ScriptManager_ExecuteCAMStep+0x184>)
 804b29c:	f002 fe76 	bl	804df8c <BScript_Log>
            BScript_Delayms(delayDuration);
 804b2a0:	68fb      	ldr	r3, [r7, #12]
 804b2a2:	4618      	mov	r0, r3
 804b2a4:	f003 f8fc 	bl	804e4a0 <BScript_Delayms>
            BScript_Log("[ScriptCAM] ->DELAY: Delay end!");
 804b2a8:	4812      	ldr	r0, [pc, #72]	@ (804b2f4 <ScriptManager_ExecuteCAMStep+0x188>)
 804b2aa:	f002 fe6f 	bl	804df8c <BScript_Log>
 804b2ae:	e00b      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
            break;
        }

        case TURN_OFF_EXT_LASER: {
            BScript_Log("[ScriptCAM] ->TURN_OFF_EXT_LASER: Turn all ext-laser off");
 804b2b0:	4811      	ldr	r0, [pc, #68]	@ (804b2f8 <ScriptManager_ExecuteCAMStep+0x18c>)
 804b2b2:	f002 fe6b 	bl	804df8c <BScript_Log>
            break;
 804b2b6:	e007      	b.n	804b2c8 <ScriptManager_ExecuteCAMStep+0x15c>
        }

        default:
            BScript_Log("[ScriptCAM] Unknown action: 0x%02X", step->action_id);
 804b2b8:	687b      	ldr	r3, [r7, #4]
 804b2ba:	799b      	ldrb	r3, [r3, #6]
 804b2bc:	4619      	mov	r1, r3
 804b2be:	480f      	ldr	r0, [pc, #60]	@ (804b2fc <ScriptManager_ExecuteCAMStep+0x190>)
 804b2c0:	f002 fe64 	bl	804df8c <BScript_Log>
            return STEP_EXEC_ERROR;
 804b2c4:	2302      	movs	r3, #2
 804b2c6:	e000      	b.n	804b2ca <ScriptManager_ExecuteCAMStep+0x15e>
    }

    return STEP_EXEC_SUCCESS;
 804b2c8:	2300      	movs	r3, #0
}
 804b2ca:	4618      	mov	r0, r3
 804b2cc:	3718      	adds	r7, #24
 804b2ce:	46bd      	mov	sp, r7
 804b2d0:	bd80      	pop	{r7, pc}
 804b2d2:	bf00      	nop
 804b2d4:	0806f46c 	.word	0x0806f46c
 804b2d8:	0806f4a0 	.word	0x0806f4a0
 804b2dc:	0806f508 	.word	0x0806f508
 804b2e0:	0806f548 	.word	0x0806f548
 804b2e4:	0806f580 	.word	0x0806f580
 804b2e8:	0806f5b4 	.word	0x0806f5b4
 804b2ec:	0806f5e4 	.word	0x0806f5e4
 804b2f0:	0806f610 	.word	0x0806f610
 804b2f4:	0806f634 	.word	0x0806f634
 804b2f8:	0806f654 	.word	0x0806f654
 804b2fc:	0806f690 	.word	0x0806f690

0804b300 <ScriptManager_GetNextRunTime>:
 * @brief Get next run time for a script (now based on daily time points)
 * @param type Script type
 * @return Next run daily time in seconds (0-86399), or 0 if not available
 */
uint32_t ScriptManager_GetNextRunTime(ScriptType_t type)
{
 804b300:	b480      	push	{r7}
 804b302:	b085      	sub	sp, #20
 804b304:	af00      	add	r7, sp, #0
 804b306:	4603      	mov	r3, r0
 804b308:	71fb      	strb	r3, [r7, #7]
    if (type >= SCRIPT_TYPE_COUNT) return 0;
 804b30a:	79fb      	ldrb	r3, [r7, #7]
 804b30c:	2b02      	cmp	r3, #2
 804b30e:	d901      	bls.n	804b314 <ScriptManager_GetNextRunTime+0x14>
 804b310:	2300      	movs	r3, #0
 804b312:	e028      	b.n	804b366 <ScriptManager_GetNextRunTime+0x66>

    TimePointSchedule_t* schedule = NULL;
 804b314:	2300      	movs	r3, #0
 804b316:	60fb      	str	r3, [r7, #12]

    switch (type) {
 804b318:	79fb      	ldrb	r3, [r7, #7]
 804b31a:	2b01      	cmp	r3, #1
 804b31c:	d002      	beq.n	804b324 <ScriptManager_GetNextRunTime+0x24>
 804b31e:	2b02      	cmp	r3, #2
 804b320:	d003      	beq.n	804b32a <ScriptManager_GetNextRunTime+0x2a>
 804b322:	e005      	b.n	804b330 <ScriptManager_GetNextRunTime+0x30>
        case SCRIPT_TYPE_DLS_ROUTINE:
            schedule = &g_script_manager.dls_schedule;
 804b324:	4b13      	ldr	r3, [pc, #76]	@ (804b374 <ScriptManager_GetNextRunTime+0x74>)
 804b326:	60fb      	str	r3, [r7, #12]
            break;
 804b328:	e004      	b.n	804b334 <ScriptManager_GetNextRunTime+0x34>
        case SCRIPT_TYPE_CAM_ROUTINE:
            schedule = &g_script_manager.cam_schedule;
 804b32a:	4b13      	ldr	r3, [pc, #76]	@ (804b378 <ScriptManager_GetNextRunTime+0x78>)
 804b32c:	60fb      	str	r3, [r7, #12]
            break;
 804b32e:	e001      	b.n	804b334 <ScriptManager_GetNextRunTime+0x34>
        default:
            return 0;
 804b330:	2300      	movs	r3, #0
 804b332:	e018      	b.n	804b366 <ScriptManager_GetNextRunTime+0x66>
    }

    if (!schedule->is_configured || schedule->current_index >= schedule->count) {
 804b334:	68fb      	ldr	r3, [r7, #12]
 804b336:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 804b33a:	f083 0301 	eor.w	r3, r3, #1
 804b33e:	b2db      	uxtb	r3, r3
 804b340:	2b00      	cmp	r3, #0
 804b342:	d107      	bne.n	804b354 <ScriptManager_GetNextRunTime+0x54>
 804b344:	68fb      	ldr	r3, [r7, #12]
 804b346:	f8b3 2902 	ldrh.w	r2, [r3, #2306]	@ 0x902
 804b34a:	68fb      	ldr	r3, [r7, #12]
 804b34c:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804b350:	429a      	cmp	r2, r3
 804b352:	d301      	bcc.n	804b358 <ScriptManager_GetNextRunTime+0x58>
        return 0;
 804b354:	2300      	movs	r3, #0
 804b356:	e006      	b.n	804b366 <ScriptManager_GetNextRunTime+0x66>
    }

    return schedule->points[schedule->current_index].daily_timestamp;
 804b358:	68fb      	ldr	r3, [r7, #12]
 804b35a:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 804b35e:	461a      	mov	r2, r3
 804b360:	68fb      	ldr	r3, [r7, #12]
 804b362:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
}
 804b366:	4618      	mov	r0, r3
 804b368:	3714      	adds	r7, #20
 804b36a:	46bd      	mov	sp, r7
 804b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b370:	4770      	bx	lr
 804b372:	bf00      	nop
 804b374:	2402c328 	.word	0x2402c328
 804b378:	2402cc38 	.word	0x2402cc38

0804b37c <ScriptManager_GetTimeUntilNextRun>:
 * @brief Get time until next run
 * @param type Script type
 * @return Time until next run in seconds
 */
uint32_t ScriptManager_GetTimeUntilNextRun(ScriptType_t type)
{
 804b37c:	b580      	push	{r7, lr}
 804b37e:	b084      	sub	sp, #16
 804b380:	af00      	add	r7, sp, #0
 804b382:	4603      	mov	r3, r0
 804b384:	71fb      	strb	r3, [r7, #7]
    uint32_t next_run_daily = ScriptManager_GetNextRunTime(type);
 804b386:	79fb      	ldrb	r3, [r7, #7]
 804b388:	4618      	mov	r0, r3
 804b38a:	f7ff ffb9 	bl	804b300 <ScriptManager_GetNextRunTime>
 804b38e:	60f8      	str	r0, [r7, #12]
    if (next_run_daily == 0) return 0;
 804b390:	68fb      	ldr	r3, [r7, #12]
 804b392:	2b00      	cmp	r3, #0
 804b394:	d101      	bne.n	804b39a <ScriptManager_GetTimeUntilNextRun+0x1e>
 804b396:	2300      	movs	r3, #0
 804b398:	e00f      	b.n	804b3ba <ScriptManager_GetTimeUntilNextRun+0x3e>

    uint32_t current_daily_time = ScriptManager_GetCurrentDailyTimeSeconds();
 804b39a:	f7fd ff7f 	bl	804929c <ScriptManager_GetCurrentDailyTimeSeconds>
 804b39e:	60b8      	str	r0, [r7, #8]

    // If next run is later today
    if (current_daily_time <= next_run_daily) {
 804b3a0:	68ba      	ldr	r2, [r7, #8]
 804b3a2:	68fb      	ldr	r3, [r7, #12]
 804b3a4:	429a      	cmp	r2, r3
 804b3a6:	d803      	bhi.n	804b3b0 <ScriptManager_GetTimeUntilNextRun+0x34>
        return (next_run_daily - current_daily_time);
 804b3a8:	68fa      	ldr	r2, [r7, #12]
 804b3aa:	68bb      	ldr	r3, [r7, #8]
 804b3ac:	1ad3      	subs	r3, r2, r3
 804b3ae:	e004      	b.n	804b3ba <ScriptManager_GetTimeUntilNextRun+0x3e>
    } else {
        // Next run is tomorrow
        return (SECONDS_PER_DAY - current_daily_time + next_run_daily);
 804b3b0:	68fa      	ldr	r2, [r7, #12]
 804b3b2:	68bb      	ldr	r3, [r7, #8]
 804b3b4:	1ad2      	subs	r2, r2, r3
 804b3b6:	4b03      	ldr	r3, [pc, #12]	@ (804b3c4 <ScriptManager_GetTimeUntilNextRun+0x48>)
 804b3b8:	4413      	add	r3, r2
    }
}
 804b3ba:	4618      	mov	r0, r3
 804b3bc:	3710      	adds	r7, #16
 804b3be:	46bd      	mov	sp, r7
 804b3c0:	bd80      	pop	{r7, pc}
 804b3c2:	bf00      	nop
 804b3c4:	00015180 	.word	0x00015180

0804b3c8 <ScriptManager_PrintStatus>:

/**
 * @brief Print detailed status report (UPDATED - includes FRAM info)
 */
void ScriptManager_PrintStatus(void)
{
 804b3c8:	b5b0      	push	{r4, r5, r7, lr}
 804b3ca:	b096      	sub	sp, #88	@ 0x58
 804b3cc:	af04      	add	r7, sp, #16
    const char* state_names[] = {
 804b3ce:	4b7d      	ldr	r3, [pc, #500]	@ (804b5c4 <ScriptManager_PrintStatus+0x1fc>)
 804b3d0:	f107 0418 	add.w	r4, r7, #24
 804b3d4:	461d      	mov	r5, r3
 804b3d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804b3d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804b3da:	e895 0003 	ldmia.w	r5, {r0, r1}
 804b3de:	e884 0003 	stmia.w	r4, {r0, r1}
        "IDLE", "RUNNING", "WAITING", "COMPLETED", "ERROR", "FAILED_MAX_RETRIES"
    };

    const char* script_names[] = {
 804b3e2:	4a79      	ldr	r2, [pc, #484]	@ (804b5c8 <ScriptManager_PrintStatus+0x200>)
 804b3e4:	f107 030c 	add.w	r3, r7, #12
 804b3e8:	ca07      	ldmia	r2, {r0, r1, r2}
 804b3ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        "INIT", "DLS", "CAM"
    };

    uint32_t current_time = ScriptManager_GetCurrentTimeSeconds();
 804b3ee:	f7fd ff71 	bl	80492d4 <ScriptManager_GetCurrentTimeSeconds>
 804b3f2:	6438      	str	r0, [r7, #64]	@ 0x40
    s_DateTime current_rtc;
    Utils_GetRTC(&current_rtc);
 804b3f4:	1d3b      	adds	r3, r7, #4
 804b3f6:	4618      	mov	r0, r3
 804b3f8:	f002 fbc2 	bl	804db80 <Utils_GetRTC>

    BScript_Log("[ScriptManager] === STATUS REPORT ===");
 804b3fc:	4873      	ldr	r0, [pc, #460]	@ (804b5cc <ScriptManager_PrintStatus+0x204>)
 804b3fe:	f002 fdc5 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptManager] Current RTC: 20%02d-%02d-%02d %02d:%02d:%02d",
               current_rtc.year, current_rtc.month, current_rtc.day,
 804b402:	79bb      	ldrb	r3, [r7, #6]
    BScript_Log("[ScriptManager] Current RTC: 20%02d-%02d-%02d %02d:%02d:%02d",
 804b404:	4618      	mov	r0, r3
               current_rtc.year, current_rtc.month, current_rtc.day,
 804b406:	797b      	ldrb	r3, [r7, #5]
    BScript_Log("[ScriptManager] Current RTC: 20%02d-%02d-%02d %02d:%02d:%02d",
 804b408:	461c      	mov	r4, r3
               current_rtc.year, current_rtc.month, current_rtc.day,
 804b40a:	793b      	ldrb	r3, [r7, #4]
    BScript_Log("[ScriptManager] Current RTC: 20%02d-%02d-%02d %02d:%02d:%02d",
 804b40c:	461d      	mov	r5, r3
               current_rtc.hour, current_rtc.minute, current_rtc.second);
 804b40e:	79fb      	ldrb	r3, [r7, #7]
 804b410:	7a3a      	ldrb	r2, [r7, #8]
 804b412:	7a79      	ldrb	r1, [r7, #9]
    BScript_Log("[ScriptManager] Current RTC: 20%02d-%02d-%02d %02d:%02d:%02d",
 804b414:	9102      	str	r1, [sp, #8]
 804b416:	9201      	str	r2, [sp, #4]
 804b418:	9300      	str	r3, [sp, #0]
 804b41a:	462b      	mov	r3, r5
 804b41c:	4622      	mov	r2, r4
 804b41e:	4601      	mov	r1, r0
 804b420:	486b      	ldr	r0, [pc, #428]	@ (804b5d0 <ScriptManager_PrintStatus+0x208>)
 804b422:	f002 fdb3 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptManager] System time: %u seconds", current_time);
 804b426:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 804b428:	486a      	ldr	r0, [pc, #424]	@ (804b5d4 <ScriptManager_PrintStatus+0x20c>)
 804b42a:	f002 fdaf 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptManager] Manager running: %s", g_script_manager.manager_running ? "YES" : "NO");
 804b42e:	4b6a      	ldr	r3, [pc, #424]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b430:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b434:	f893 3b29 	ldrb.w	r3, [r3, #2857]	@ 0xb29
 804b438:	2b00      	cmp	r3, #0
 804b43a:	d001      	beq.n	804b440 <ScriptManager_PrintStatus+0x78>
 804b43c:	4b67      	ldr	r3, [pc, #412]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b43e:	e000      	b.n	804b442 <ScriptManager_PrintStatus+0x7a>
 804b440:	4b67      	ldr	r3, [pc, #412]	@ (804b5e0 <ScriptManager_PrintStatus+0x218>)
 804b442:	4619      	mov	r1, r3
 804b444:	4867      	ldr	r0, [pc, #412]	@ (804b5e4 <ScriptManager_PrintStatus+0x21c>)
 804b446:	f002 fda1 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptManager] Init completed: %s", g_script_manager.init_completed ? "YES" : "NO");
 804b44a:	4b63      	ldr	r3, [pc, #396]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b44c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b450:	f893 3b28 	ldrb.w	r3, [r3, #2856]	@ 0xb28
 804b454:	2b00      	cmp	r3, #0
 804b456:	d001      	beq.n	804b45c <ScriptManager_PrintStatus+0x94>
 804b458:	4b60      	ldr	r3, [pc, #384]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b45a:	e000      	b.n	804b45e <ScriptManager_PrintStatus+0x96>
 804b45c:	4b60      	ldr	r3, [pc, #384]	@ (804b5e0 <ScriptManager_PrintStatus+0x218>)
 804b45e:	4619      	mov	r1, r3
 804b460:	4861      	ldr	r0, [pc, #388]	@ (804b5e8 <ScriptManager_PrintStatus+0x220>)
 804b462:	f002 fd93 	bl	804df8c <BScript_Log>

    if (g_script_manager.system_time_configured) {
 804b466:	4b5c      	ldr	r3, [pc, #368]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b468:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b46c:	f893 3b2a 	ldrb.w	r3, [r3, #2858]	@ 0xb2a
 804b470:	2b00      	cmp	r3, #0
 804b472:	d008      	beq.n	804b486 <ScriptManager_PrintStatus+0xbe>
        BScript_Log("[ScriptManager] System start daily time: %u seconds", g_script_manager.system_start_daily_time);
 804b474:	4b58      	ldr	r3, [pc, #352]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b476:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b47a:	f8d3 3b2c 	ldr.w	r3, [r3, #2860]	@ 0xb2c
 804b47e:	4619      	mov	r1, r3
 804b480:	485a      	ldr	r0, [pc, #360]	@ (804b5ec <ScriptManager_PrintStatus+0x224>)
 804b482:	f002 fd83 	bl	804df8c <BScript_Log>
    }

    // Script status
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 804b486:	2300      	movs	r3, #0
 804b488:	647b      	str	r3, [r7, #68]	@ 0x44
 804b48a:	e0fe      	b.n	804b68a <ScriptManager_PrintStatus+0x2c2>
        ScriptExecContext_t* ctx = &g_script_manager.contexts[i];
 804b48c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 804b48e:	f641 331c 	movw	r3, #6940	@ 0x1b1c
 804b492:	4413      	add	r3, r2
 804b494:	00db      	lsls	r3, r3, #3
 804b496:	4a50      	ldr	r2, [pc, #320]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b498:	4413      	add	r3, r2
 804b49a:	3304      	adds	r3, #4
 804b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        _Bool fram_exists = ScriptStorage_ScriptExists((ScriptType_t)i);
 804b49e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b4a0:	b2db      	uxtb	r3, r3
 804b4a2:	4618      	mov	r0, r3
 804b4a4:	f003 fb5e 	bl	804eb64 <ScriptStorage_ScriptExists>
 804b4a8:	4603      	mov	r3, r0
 804b4aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        BScript_Log("[ScriptManager] %s Script:", script_names[i]);
 804b4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b4b0:	009b      	lsls	r3, r3, #2
 804b4b2:	3348      	adds	r3, #72	@ 0x48
 804b4b4:	443b      	add	r3, r7
 804b4b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 804b4ba:	4619      	mov	r1, r3
 804b4bc:	484c      	ldr	r0, [pc, #304]	@ (804b5f0 <ScriptManager_PrintStatus+0x228>)
 804b4be:	f002 fd65 	bl	804df8c <BScript_Log>
        BScript_Log("  - Loaded in RAM: %s", g_script_manager.scripts[i].is_loaded ? "YES" : "NO");
 804b4c2:	4a45      	ldr	r2, [pc, #276]	@ (804b5d8 <ScriptManager_PrintStatus+0x210>)
 804b4c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b4c6:	f644 014c 	movw	r1, #18508	@ 0x484c
 804b4ca:	fb01 f303 	mul.w	r3, r1, r3
 804b4ce:	4413      	add	r3, r2
 804b4d0:	781b      	ldrb	r3, [r3, #0]
 804b4d2:	2b00      	cmp	r3, #0
 804b4d4:	d001      	beq.n	804b4da <ScriptManager_PrintStatus+0x112>
 804b4d6:	4b41      	ldr	r3, [pc, #260]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b4d8:	e000      	b.n	804b4dc <ScriptManager_PrintStatus+0x114>
 804b4da:	4b41      	ldr	r3, [pc, #260]	@ (804b5e0 <ScriptManager_PrintStatus+0x218>)
 804b4dc:	4619      	mov	r1, r3
 804b4de:	4845      	ldr	r0, [pc, #276]	@ (804b5f4 <ScriptManager_PrintStatus+0x22c>)
 804b4e0:	f002 fd54 	bl	804df8c <BScript_Log>
        BScript_Log("  - Exists in FRAM: %s", fram_exists ? "YES" : "NO");
 804b4e4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 804b4e8:	2b00      	cmp	r3, #0
 804b4ea:	d001      	beq.n	804b4f0 <ScriptManager_PrintStatus+0x128>
 804b4ec:	4b3b      	ldr	r3, [pc, #236]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b4ee:	e000      	b.n	804b4f2 <ScriptManager_PrintStatus+0x12a>
 804b4f0:	4b3b      	ldr	r3, [pc, #236]	@ (804b5e0 <ScriptManager_PrintStatus+0x218>)
 804b4f2:	4619      	mov	r1, r3
 804b4f4:	4840      	ldr	r0, [pc, #256]	@ (804b5f8 <ScriptManager_PrintStatus+0x230>)
 804b4f6:	f002 fd49 	bl	804df8c <BScript_Log>
        BScript_Log("  - State: %s", state_names[ctx->state]);
 804b4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804b4fc:	781b      	ldrb	r3, [r3, #0]
 804b4fe:	009b      	lsls	r3, r3, #2
 804b500:	3348      	adds	r3, #72	@ 0x48
 804b502:	443b      	add	r3, r7
 804b504:	f853 3c30 	ldr.w	r3, [r3, #-48]
 804b508:	4619      	mov	r1, r3
 804b50a:	483c      	ldr	r0, [pc, #240]	@ (804b5fc <ScriptManager_PrintStatus+0x234>)
 804b50c:	f002 fd3e 	bl	804df8c <BScript_Log>
        BScript_Log("  - Current step: %d", ctx->current_step);
 804b510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804b512:	885b      	ldrh	r3, [r3, #2]
 804b514:	4619      	mov	r1, r3
 804b516:	483a      	ldr	r0, [pc, #232]	@ (804b600 <ScriptManager_PrintStatus+0x238>)
 804b518:	f002 fd38 	bl	804df8c <BScript_Log>
        BScript_Log("  - Retry count: %d/%d", ctx->retry_count, ctx->max_retries);
 804b51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804b51e:	791b      	ldrb	r3, [r3, #4]
 804b520:	4619      	mov	r1, r3
 804b522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804b524:	795b      	ldrb	r3, [r3, #5]
 804b526:	461a      	mov	r2, r3
 804b528:	4836      	ldr	r0, [pc, #216]	@ (804b604 <ScriptManager_PrintStatus+0x23c>)
 804b52a:	f002 fd2f 	bl	804df8c <BScript_Log>

        // Show time point information for DLS and CAM
        if (i == SCRIPT_TYPE_DLS_ROUTINE) {
 804b52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b530:	2b01      	cmp	r3, #1
 804b532:	d13a      	bne.n	804b5aa <ScriptManager_PrintStatus+0x1e2>
            TimePointSchedule_t* schedule = &g_script_manager.dls_schedule;
 804b534:	4b34      	ldr	r3, [pc, #208]	@ (804b608 <ScriptManager_PrintStatus+0x240>)
 804b536:	633b      	str	r3, [r7, #48]	@ 0x30
            BScript_Log("  - Time points configured: %s", schedule->is_configured ? "YES" : "NO");
 804b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804b53a:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 804b53e:	2b00      	cmp	r3, #0
 804b540:	d001      	beq.n	804b546 <ScriptManager_PrintStatus+0x17e>
 804b542:	4b26      	ldr	r3, [pc, #152]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b544:	e000      	b.n	804b548 <ScriptManager_PrintStatus+0x180>
 804b546:	4b26      	ldr	r3, [pc, #152]	@ (804b5e0 <ScriptManager_PrintStatus+0x218>)
 804b548:	4619      	mov	r1, r3
 804b54a:	4830      	ldr	r0, [pc, #192]	@ (804b60c <ScriptManager_PrintStatus+0x244>)
 804b54c:	f002 fd1e 	bl	804df8c <BScript_Log>
            if (schedule->is_configured) {
 804b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804b552:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 804b556:	2b00      	cmp	r3, #0
 804b558:	f000 8094 	beq.w	804b684 <ScriptManager_PrintStatus+0x2bc>
                BScript_Log("  - Total points: %u", schedule->count);
 804b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804b55e:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804b562:	4619      	mov	r1, r3
 804b564:	482a      	ldr	r0, [pc, #168]	@ (804b610 <ScriptManager_PrintStatus+0x248>)
 804b566:	f002 fd11 	bl	804df8c <BScript_Log>
                BScript_Log("  - Current point: %u", schedule->current_index);
 804b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804b56c:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 804b570:	4619      	mov	r1, r3
 804b572:	4828      	ldr	r0, [pc, #160]	@ (804b614 <ScriptManager_PrintStatus+0x24c>)
 804b574:	f002 fd0a 	bl	804df8c <BScript_Log>
                BScript_Log("  - Interval: %u seconds", schedule->interval_sec);
 804b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804b57a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 804b57e:	4619      	mov	r1, r3
 804b580:	4825      	ldr	r0, [pc, #148]	@ (804b618 <ScriptManager_PrintStatus+0x250>)
 804b582:	f002 fd03 	bl	804df8c <BScript_Log>
                BScript_Log("  - Next run: %u (in %u seconds)",
 804b586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b588:	b2db      	uxtb	r3, r3
 804b58a:	4618      	mov	r0, r3
 804b58c:	f7ff feb8 	bl	804b300 <ScriptManager_GetNextRunTime>
 804b590:	4604      	mov	r4, r0
 804b592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b594:	b2db      	uxtb	r3, r3
 804b596:	4618      	mov	r0, r3
 804b598:	f7ff fef0 	bl	804b37c <ScriptManager_GetTimeUntilNextRun>
 804b59c:	4603      	mov	r3, r0
 804b59e:	461a      	mov	r2, r3
 804b5a0:	4621      	mov	r1, r4
 804b5a2:	481e      	ldr	r0, [pc, #120]	@ (804b61c <ScriptManager_PrintStatus+0x254>)
 804b5a4:	f002 fcf2 	bl	804df8c <BScript_Log>
 804b5a8:	e06c      	b.n	804b684 <ScriptManager_PrintStatus+0x2bc>
                           ScriptManager_GetNextRunTime((ScriptType_t)i),
                           ScriptManager_GetTimeUntilNextRun((ScriptType_t)i));
            }
        } else if (i == SCRIPT_TYPE_CAM_ROUTINE) {
 804b5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b5ac:	2b02      	cmp	r3, #2
 804b5ae:	d169      	bne.n	804b684 <ScriptManager_PrintStatus+0x2bc>
            TimePointSchedule_t* schedule = &g_script_manager.cam_schedule;
 804b5b0:	4b1b      	ldr	r3, [pc, #108]	@ (804b620 <ScriptManager_PrintStatus+0x258>)
 804b5b2:	637b      	str	r3, [r7, #52]	@ 0x34
            BScript_Log("  - Time points configured: %s", schedule->is_configured ? "YES" : "NO");
 804b5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804b5b6:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 804b5ba:	2b00      	cmp	r3, #0
 804b5bc:	d032      	beq.n	804b624 <ScriptManager_PrintStatus+0x25c>
 804b5be:	4b07      	ldr	r3, [pc, #28]	@ (804b5dc <ScriptManager_PrintStatus+0x214>)
 804b5c0:	e031      	b.n	804b626 <ScriptManager_PrintStatus+0x25e>
 804b5c2:	bf00      	nop
 804b5c4:	0806f9e4 	.word	0x0806f9e4
 804b5c8:	0806f9fc 	.word	0x0806f9fc
 804b5cc:	0806f6b4 	.word	0x0806f6b4
 804b5d0:	0806f6dc 	.word	0x0806f6dc
 804b5d4:	0806f71c 	.word	0x0806f71c
 804b5d8:	2401ea2c 	.word	0x2401ea2c
 804b5dc:	0806e048 	.word	0x0806e048
 804b5e0:	0806e04c 	.word	0x0806e04c
 804b5e4:	0806f744 	.word	0x0806f744
 804b5e8:	0806f768 	.word	0x0806f768
 804b5ec:	0806f78c 	.word	0x0806f78c
 804b5f0:	0806f7c0 	.word	0x0806f7c0
 804b5f4:	0806f7dc 	.word	0x0806f7dc
 804b5f8:	0806f7f4 	.word	0x0806f7f4
 804b5fc:	0806f80c 	.word	0x0806f80c
 804b600:	0806f81c 	.word	0x0806f81c
 804b604:	0806f834 	.word	0x0806f834
 804b608:	2402c328 	.word	0x2402c328
 804b60c:	0806f84c 	.word	0x0806f84c
 804b610:	0806e08c 	.word	0x0806e08c
 804b614:	0806f86c 	.word	0x0806f86c
 804b618:	0806ddfc 	.word	0x0806ddfc
 804b61c:	0806f884 	.word	0x0806f884
 804b620:	2402cc38 	.word	0x2402cc38
 804b624:	4b3e      	ldr	r3, [pc, #248]	@ (804b720 <ScriptManager_PrintStatus+0x358>)
 804b626:	4619      	mov	r1, r3
 804b628:	483e      	ldr	r0, [pc, #248]	@ (804b724 <ScriptManager_PrintStatus+0x35c>)
 804b62a:	f002 fcaf 	bl	804df8c <BScript_Log>
            if (schedule->is_configured) {
 804b62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804b630:	f893 390c 	ldrb.w	r3, [r3, #2316]	@ 0x90c
 804b634:	2b00      	cmp	r3, #0
 804b636:	d025      	beq.n	804b684 <ScriptManager_PrintStatus+0x2bc>
                BScript_Log("  - Total points: %u", schedule->count);
 804b638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804b63a:	f8b3 3900 	ldrh.w	r3, [r3, #2304]	@ 0x900
 804b63e:	4619      	mov	r1, r3
 804b640:	4839      	ldr	r0, [pc, #228]	@ (804b728 <ScriptManager_PrintStatus+0x360>)
 804b642:	f002 fca3 	bl	804df8c <BScript_Log>
                BScript_Log("  - Current point: %u", schedule->current_index);
 804b646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804b648:	f8b3 3902 	ldrh.w	r3, [r3, #2306]	@ 0x902
 804b64c:	4619      	mov	r1, r3
 804b64e:	4837      	ldr	r0, [pc, #220]	@ (804b72c <ScriptManager_PrintStatus+0x364>)
 804b650:	f002 fc9c 	bl	804df8c <BScript_Log>
                BScript_Log("  - Interval: %u seconds", schedule->interval_sec);
 804b654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804b656:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 804b65a:	4619      	mov	r1, r3
 804b65c:	4834      	ldr	r0, [pc, #208]	@ (804b730 <ScriptManager_PrintStatus+0x368>)
 804b65e:	f002 fc95 	bl	804df8c <BScript_Log>
                BScript_Log("  - Next run: %u (in %u seconds)",
 804b662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b664:	b2db      	uxtb	r3, r3
 804b666:	4618      	mov	r0, r3
 804b668:	f7ff fe4a 	bl	804b300 <ScriptManager_GetNextRunTime>
 804b66c:	4604      	mov	r4, r0
 804b66e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b670:	b2db      	uxtb	r3, r3
 804b672:	4618      	mov	r0, r3
 804b674:	f7ff fe82 	bl	804b37c <ScriptManager_GetTimeUntilNextRun>
 804b678:	4603      	mov	r3, r0
 804b67a:	461a      	mov	r2, r3
 804b67c:	4621      	mov	r1, r4
 804b67e:	482d      	ldr	r0, [pc, #180]	@ (804b734 <ScriptManager_PrintStatus+0x36c>)
 804b680:	f002 fc84 	bl	804df8c <BScript_Log>
    for (int i = 0; i < SCRIPT_TYPE_COUNT; i++) {
 804b684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b686:	3301      	adds	r3, #1
 804b688:	647b      	str	r3, [r7, #68]	@ 0x44
 804b68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804b68c:	2b02      	cmp	r3, #2
 804b68e:	f77f aefd 	ble.w	804b48c <ScriptManager_PrintStatus+0xc4>
                           ScriptManager_GetTimeUntilNextRun((ScriptType_t)i));
            }
        }
    }

    BScript_Log("[ScriptManager] Statistics:");
 804b692:	4829      	ldr	r0, [pc, #164]	@ (804b738 <ScriptManager_PrintStatus+0x370>)
 804b694:	f002 fc7a 	bl	804df8c <BScript_Log>
    BScript_Log("  - DLS runs: %u", g_script_manager.dls_run_count);
 804b698:	4b28      	ldr	r3, [pc, #160]	@ (804b73c <ScriptManager_PrintStatus+0x374>)
 804b69a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b69e:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	@ 0xb30
 804b6a2:	4619      	mov	r1, r3
 804b6a4:	4826      	ldr	r0, [pc, #152]	@ (804b740 <ScriptManager_PrintStatus+0x378>)
 804b6a6:	f002 fc71 	bl	804df8c <BScript_Log>
    BScript_Log("  - CAM runs: %u", g_script_manager.cam_run_count);
 804b6aa:	4b24      	ldr	r3, [pc, #144]	@ (804b73c <ScriptManager_PrintStatus+0x374>)
 804b6ac:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b6b0:	f8d3 3b34 	ldr.w	r3, [r3, #2868]	@ 0xb34
 804b6b4:	4619      	mov	r1, r3
 804b6b6:	4823      	ldr	r0, [pc, #140]	@ (804b744 <ScriptManager_PrintStatus+0x37c>)
 804b6b8:	f002 fc68 	bl	804df8c <BScript_Log>
    BScript_Log("  - Total errors: %u", g_script_manager.total_errors);
 804b6bc:	4b1f      	ldr	r3, [pc, #124]	@ (804b73c <ScriptManager_PrintStatus+0x374>)
 804b6be:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b6c2:	f8d3 3b38 	ldr.w	r3, [r3, #2872]	@ 0xb38
 804b6c6:	4619      	mov	r1, r3
 804b6c8:	481f      	ldr	r0, [pc, #124]	@ (804b748 <ScriptManager_PrintStatus+0x380>)
 804b6ca:	f002 fc5f 	bl	804df8c <BScript_Log>

    // Print FRAM storage status
    BScript_Log("[ScriptManager] === FRAM STORAGE STATUS ===");
 804b6ce:	481f      	ldr	r0, [pc, #124]	@ (804b74c <ScriptManager_PrintStatus+0x384>)
 804b6d0:	f002 fc5c 	bl	804df8c <BScript_Log>
    ScriptStorage_PrintStatus();
 804b6d4:	f003 fc4c 	bl	804ef70 <ScriptStorage_PrintStatus>

    // Print detailed time point schedules
    if (g_script_manager.dls_schedule.is_configured) {
 804b6d8:	4b18      	ldr	r3, [pc, #96]	@ (804b73c <ScriptManager_PrintStatus+0x374>)
 804b6da:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b6de:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 804b6e2:	2b00      	cmp	r3, #0
 804b6e4:	d006      	beq.n	804b6f4 <ScriptManager_PrintStatus+0x32c>
        BScript_Log("[ScriptManager] === DLS TIME POINTS ===");
 804b6e6:	481a      	ldr	r0, [pc, #104]	@ (804b750 <ScriptManager_PrintStatus+0x388>)
 804b6e8:	f002 fc50 	bl	804df8c <BScript_Log>
        ScriptManager_PrintTimePoints(&g_script_manager.dls_schedule, "DLS");
 804b6ec:	4919      	ldr	r1, [pc, #100]	@ (804b754 <ScriptManager_PrintStatus+0x38c>)
 804b6ee:	481a      	ldr	r0, [pc, #104]	@ (804b758 <ScriptManager_PrintStatus+0x390>)
 804b6f0:	f7fe f83e 	bl	8049770 <ScriptManager_PrintTimePoints>
    }

    if (g_script_manager.cam_schedule.is_configured) {
 804b6f4:	4b11      	ldr	r3, [pc, #68]	@ (804b73c <ScriptManager_PrintStatus+0x374>)
 804b6f6:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 804b6fa:	f893 3b18 	ldrb.w	r3, [r3, #2840]	@ 0xb18
 804b6fe:	2b00      	cmp	r3, #0
 804b700:	d006      	beq.n	804b710 <ScriptManager_PrintStatus+0x348>
        BScript_Log("[ScriptManager] === CAM TIME POINTS ===");
 804b702:	4816      	ldr	r0, [pc, #88]	@ (804b75c <ScriptManager_PrintStatus+0x394>)
 804b704:	f002 fc42 	bl	804df8c <BScript_Log>
        ScriptManager_PrintTimePoints(&g_script_manager.cam_schedule, "CAM");
 804b708:	4915      	ldr	r1, [pc, #84]	@ (804b760 <ScriptManager_PrintStatus+0x398>)
 804b70a:	4816      	ldr	r0, [pc, #88]	@ (804b764 <ScriptManager_PrintStatus+0x39c>)
 804b70c:	f7fe f830 	bl	8049770 <ScriptManager_PrintTimePoints>
    }

    BScript_Log("[ScriptManager] === END STATUS ===");
 804b710:	4815      	ldr	r0, [pc, #84]	@ (804b768 <ScriptManager_PrintStatus+0x3a0>)
 804b712:	f002 fc3b 	bl	804df8c <BScript_Log>
}
 804b716:	bf00      	nop
 804b718:	3748      	adds	r7, #72	@ 0x48
 804b71a:	46bd      	mov	sp, r7
 804b71c:	bdb0      	pop	{r4, r5, r7, pc}
 804b71e:	bf00      	nop
 804b720:	0806e04c 	.word	0x0806e04c
 804b724:	0806f84c 	.word	0x0806f84c
 804b728:	0806e08c 	.word	0x0806e08c
 804b72c:	0806f86c 	.word	0x0806f86c
 804b730:	0806ddfc 	.word	0x0806ddfc
 804b734:	0806f884 	.word	0x0806f884
 804b738:	0806f8a8 	.word	0x0806f8a8
 804b73c:	2401ea2c 	.word	0x2401ea2c
 804b740:	0806f8c4 	.word	0x0806f8c4
 804b744:	0806f8d8 	.word	0x0806f8d8
 804b748:	0806f8ec 	.word	0x0806f8ec
 804b74c:	0806f904 	.word	0x0806f904
 804b750:	0806f930 	.word	0x0806f930
 804b754:	0806e6e0 	.word	0x0806e6e0
 804b758:	2402c328 	.word	0x2402c328
 804b75c:	0806f958 	.word	0x0806f958
 804b760:	0806e6e4 	.word	0x0806e6e4
 804b764:	2402cc38 	.word	0x2402cc38
 804b768:	0806f980 	.word	0x0806f980

0804b76c <LL_USART_IsActiveFlag_TC>:
{
 804b76c:	b480      	push	{r7}
 804b76e:	b083      	sub	sp, #12
 804b770:	af00      	add	r7, sp, #0
 804b772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 804b774:	687b      	ldr	r3, [r7, #4]
 804b776:	69db      	ldr	r3, [r3, #28]
 804b778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804b77c:	2b40      	cmp	r3, #64	@ 0x40
 804b77e:	d101      	bne.n	804b784 <LL_USART_IsActiveFlag_TC+0x18>
 804b780:	2301      	movs	r3, #1
 804b782:	e000      	b.n	804b786 <LL_USART_IsActiveFlag_TC+0x1a>
 804b784:	2300      	movs	r3, #0
}
 804b786:	4618      	mov	r0, r3
 804b788:	370c      	adds	r7, #12
 804b78a:	46bd      	mov	sp, r7
 804b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b790:	4770      	bx	lr

0804b792 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 804b792:	b480      	push	{r7}
 804b794:	b083      	sub	sp, #12
 804b796:	af00      	add	r7, sp, #0
 804b798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 804b79a:	687b      	ldr	r3, [r7, #4]
 804b79c:	69db      	ldr	r3, [r3, #28]
 804b79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804b7a2:	2b80      	cmp	r3, #128	@ 0x80
 804b7a4:	d101      	bne.n	804b7aa <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 804b7a6:	2301      	movs	r3, #1
 804b7a8:	e000      	b.n	804b7ac <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 804b7aa:	2300      	movs	r3, #0
}
 804b7ac:	4618      	mov	r0, r3
 804b7ae:	370c      	adds	r7, #12
 804b7b0:	46bd      	mov	sp, r7
 804b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b7b6:	4770      	bx	lr

0804b7b8 <LL_USART_TransmitData8>:
{
 804b7b8:	b480      	push	{r7}
 804b7ba:	b083      	sub	sp, #12
 804b7bc:	af00      	add	r7, sp, #0
 804b7be:	6078      	str	r0, [r7, #4]
 804b7c0:	460b      	mov	r3, r1
 804b7c2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 804b7c4:	78fa      	ldrb	r2, [r7, #3]
 804b7c6:	687b      	ldr	r3, [r7, #4]
 804b7c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 804b7ca:	bf00      	nop
 804b7cc:	370c      	adds	r7, #12
 804b7ce:	46bd      	mov	sp, r7
 804b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b7d4:	4770      	bx	lr
	...

0804b7d8 <syslog_level_to_str>:
#include "Dmesg/dmesg.h"

static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;

static const char* syslog_level_to_str(syslog_level_t level)
{
 804b7d8:	b480      	push	{r7}
 804b7da:	b083      	sub	sp, #12
 804b7dc:	af00      	add	r7, sp, #0
 804b7de:	4603      	mov	r3, r0
 804b7e0:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 804b7e2:	79fb      	ldrb	r3, [r7, #7]
 804b7e4:	2b05      	cmp	r3, #5
 804b7e6:	d81b      	bhi.n	804b820 <syslog_level_to_str+0x48>
 804b7e8:	a201      	add	r2, pc, #4	@ (adr r2, 804b7f0 <syslog_level_to_str+0x18>)
 804b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b7ee:	bf00      	nop
 804b7f0:	0804b809 	.word	0x0804b809
 804b7f4:	0804b80d 	.word	0x0804b80d
 804b7f8:	0804b811 	.word	0x0804b811
 804b7fc:	0804b815 	.word	0x0804b815
 804b800:	0804b819 	.word	0x0804b819
 804b804:	0804b81d 	.word	0x0804b81d
        case LOG_INFOR:  return "[INFO]  ";
 804b808:	4b09      	ldr	r3, [pc, #36]	@ (804b830 <syslog_level_to_str+0x58>)
 804b80a:	e00a      	b.n	804b822 <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 804b80c:	4b09      	ldr	r3, [pc, #36]	@ (804b834 <syslog_level_to_str+0x5c>)
 804b80e:	e008      	b.n	804b822 <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 804b810:	4b09      	ldr	r3, [pc, #36]	@ (804b838 <syslog_level_to_str+0x60>)
 804b812:	e006      	b.n	804b822 <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 804b814:	4b09      	ldr	r3, [pc, #36]	@ (804b83c <syslog_level_to_str+0x64>)
 804b816:	e004      	b.n	804b822 <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 804b818:	4b09      	ldr	r3, [pc, #36]	@ (804b840 <syslog_level_to_str+0x68>)
 804b81a:	e002      	b.n	804b822 <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 804b81c:	4b09      	ldr	r3, [pc, #36]	@ (804b844 <syslog_level_to_str+0x6c>)
 804b81e:	e000      	b.n	804b822 <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 804b820:	4b09      	ldr	r3, [pc, #36]	@ (804b848 <syslog_level_to_str+0x70>)
    }
}
 804b822:	4618      	mov	r0, r3
 804b824:	370c      	adds	r7, #12
 804b826:	46bd      	mov	sp, r7
 804b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b82c:	4770      	bx	lr
 804b82e:	bf00      	nop
 804b830:	0806fa08 	.word	0x0806fa08
 804b834:	0806fa14 	.word	0x0806fa14
 804b838:	0806fa20 	.word	0x0806fa20
 804b83c:	0806fa2c 	.word	0x0806fa2c
 804b840:	0806fa38 	.word	0x0806fa38
 804b844:	0806fa44 	.word	0x0806fa44
 804b848:	0806fa50 	.word	0x0806fa50

0804b84c <Sys_Boardcast>:

void Sys_Boardcast(bool status, syslog_level_t level, const char *msg)
{
 804b84c:	b580      	push	{r7, lr}
 804b84e:	b0a8      	sub	sp, #160	@ 0xa0
 804b850:	af00      	add	r7, sp, #0
 804b852:	4603      	mov	r3, r0
 804b854:	603a      	str	r2, [r7, #0]
 804b856:	71fb      	strb	r3, [r7, #7]
 804b858:	460b      	mov	r3, r1
 804b85a:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 804b85c:	79bb      	ldrb	r3, [r7, #6]
 804b85e:	2b05      	cmp	r3, #5
 804b860:	f200 80ee 	bhi.w	804ba40 <Sys_Boardcast+0x1f4>
 804b864:	a201      	add	r2, pc, #4	@ (adr r2, 804b86c <Sys_Boardcast+0x20>)
 804b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b86a:	bf00      	nop
 804b86c:	0804b885 	.word	0x0804b885
 804b870:	0804b885 	.word	0x0804b885
 804b874:	0804b885 	.word	0x0804b885
 804b878:	0804b885 	.word	0x0804b885
 804b87c:	0804b885 	.word	0x0804b885
 804b880:	0804b885 	.word	0x0804b885
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 804b884:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 804b886:	2300      	movs	r3, #0
 804b888:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 804b88c:	79fb      	ldrb	r3, [r7, #7]
 804b88e:	2b00      	cmp	r3, #0
 804b890:	d001      	beq.n	804b896 <Sys_Boardcast+0x4a>
 804b892:	4b6d      	ldr	r3, [pc, #436]	@ (804ba48 <Sys_Boardcast+0x1fc>)
 804b894:	e000      	b.n	804b898 <Sys_Boardcast+0x4c>
 804b896:	4b6d      	ldr	r3, [pc, #436]	@ (804ba4c <Sys_Boardcast+0x200>)
 804b898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 804b89c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8a0:	f107 020c 	add.w	r2, r7, #12
 804b8a4:	18d0      	adds	r0, r2, r3
 804b8a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8aa:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b8ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804b8b2:	4a67      	ldr	r2, [pc, #412]	@ (804ba50 <Sys_Boardcast+0x204>)
 804b8b4:	f01d fe94 	bl	80695e0 <sniprintf>
 804b8b8:	4602      	mov	r2, r0
 804b8ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8be:	4413      	add	r3, r2
 804b8c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    const char* level_str = syslog_level_to_str(level);
 804b8c4:	79bb      	ldrb	r3, [r7, #6]
 804b8c6:	4618      	mov	r0, r3
 804b8c8:	f7ff ff86 	bl	804b7d8 <syslog_level_to_str>
 804b8cc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 804b8d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8d4:	f107 020c 	add.w	r2, r7, #12
 804b8d8:	18d0      	adds	r0, r2, r3
 804b8da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8de:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b8e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 804b8e6:	4a5b      	ldr	r2, [pc, #364]	@ (804ba54 <Sys_Boardcast+0x208>)
 804b8e8:	f01d fe7a 	bl	80695e0 <sniprintf>
 804b8ec:	4602      	mov	r2, r0
 804b8ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8f2:	4413      	add	r3, r2
 804b8f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 804b8f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b8fc:	f107 020c 	add.w	r2, r7, #12
 804b900:	18d0      	adds	r0, r2, r3
 804b902:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b906:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b90a:	683b      	ldr	r3, [r7, #0]
 804b90c:	4a52      	ldr	r2, [pc, #328]	@ (804ba58 <Sys_Boardcast+0x20c>)
 804b90e:	f01d fe67 	bl	80695e0 <sniprintf>
 804b912:	4602      	mov	r2, r0
 804b914:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b918:	4413      	add	r3, r2
 804b91a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804b91e:	2300      	movs	r3, #0
 804b920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 804b924:	e015      	b.n	804b952 <Sys_Boardcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 804b926:	bf00      	nop
 804b928:	484c      	ldr	r0, [pc, #304]	@ (804ba5c <Sys_Boardcast+0x210>)
 804b92a:	f7ff ff32 	bl	804b792 <LL_USART_IsActiveFlag_TXE_TXFNF>
 804b92e:	4603      	mov	r3, r0
 804b930:	2b00      	cmp	r3, #0
 804b932:	d0f9      	beq.n	804b928 <Sys_Boardcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 804b934:	f107 020c 	add.w	r2, r7, #12
 804b938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804b93c:	4413      	add	r3, r2
 804b93e:	781b      	ldrb	r3, [r3, #0]
 804b940:	4619      	mov	r1, r3
 804b942:	4846      	ldr	r0, [pc, #280]	@ (804ba5c <Sys_Boardcast+0x210>)
 804b944:	f7ff ff38 	bl	804b7b8 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804b948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804b94c:	3301      	adds	r3, #1
 804b94e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 804b952:	f107 020c 	add.w	r2, r7, #12
 804b956:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804b95a:	4413      	add	r3, r2
 804b95c:	781b      	ldrb	r3, [r3, #0]
 804b95e:	2b00      	cmp	r3, #0
 804b960:	d1e1      	bne.n	804b926 <Sys_Boardcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 804b962:	bf00      	nop
 804b964:	483d      	ldr	r0, [pc, #244]	@ (804ba5c <Sys_Boardcast+0x210>)
 804b966:	f7ff ff01 	bl	804b76c <LL_USART_IsActiveFlag_TC>
 804b96a:	4603      	mov	r3, r0
 804b96c:	2b00      	cmp	r3, #0
 804b96e:	d0f9      	beq.n	804b964 <Sys_Boardcast+0x118>

    offset = 0;
 804b970:	2300      	movs	r3, #0
 804b972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 804b976:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b97a:	f107 020c 	add.w	r2, r7, #12
 804b97e:	18d0      	adds	r0, r2, r3
 804b980:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b984:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b988:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804b98c:	4a30      	ldr	r2, [pc, #192]	@ (804ba50 <Sys_Boardcast+0x204>)
 804b98e:	f01d fe27 	bl	80695e0 <sniprintf>
 804b992:	4602      	mov	r2, r0
 804b994:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b998:	4413      	add	r3, r2
 804b99a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[USB-STM32] ", level_str);
 804b99e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9a2:	f107 020c 	add.w	r2, r7, #12
 804b9a6:	18d0      	adds	r0, r2, r3
 804b9a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9ac:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b9b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 804b9b4:	4a2a      	ldr	r2, [pc, #168]	@ (804ba60 <Sys_Boardcast+0x214>)
 804b9b6:	f01d fe13 	bl	80695e0 <sniprintf>
 804b9ba:	4602      	mov	r2, r0
 804b9bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9c0:	4413      	add	r3, r2
 804b9c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 804b9c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9ca:	f107 020c 	add.w	r2, r7, #12
 804b9ce:	18d0      	adds	r0, r2, r3
 804b9d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9d4:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804b9d8:	683b      	ldr	r3, [r7, #0]
 804b9da:	4a1f      	ldr	r2, [pc, #124]	@ (804ba58 <Sys_Boardcast+0x20c>)
 804b9dc:	f01d fe00 	bl	80695e0 <sniprintf>
 804b9e0:	4602      	mov	r2, r0
 804b9e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804b9e6:	4413      	add	r3, r2
 804b9e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804b9ec:	2300      	movs	r3, #0
 804b9ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 804b9f2:	e015      	b.n	804ba20 <Sys_Boardcast+0x1d4>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 804b9f4:	bf00      	nop
 804b9f6:	481b      	ldr	r0, [pc, #108]	@ (804ba64 <Sys_Boardcast+0x218>)
 804b9f8:	f7ff fecb 	bl	804b792 <LL_USART_IsActiveFlag_TXE_TXFNF>
 804b9fc:	4603      	mov	r3, r0
 804b9fe:	2b00      	cmp	r3, #0
 804ba00:	d0f9      	beq.n	804b9f6 <Sys_Boardcast+0x1aa>
        LL_USART_TransmitData8(UART_USB, (uint8_t)log_buffer[i]);
 804ba02:	f107 020c 	add.w	r2, r7, #12
 804ba06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 804ba0a:	4413      	add	r3, r2
 804ba0c:	781b      	ldrb	r3, [r3, #0]
 804ba0e:	4619      	mov	r1, r3
 804ba10:	4814      	ldr	r0, [pc, #80]	@ (804ba64 <Sys_Boardcast+0x218>)
 804ba12:	f7ff fed1 	bl	804b7b8 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804ba16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 804ba1a:	3301      	adds	r3, #1
 804ba1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 804ba20:	f107 020c 	add.w	r2, r7, #12
 804ba24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 804ba28:	4413      	add	r3, r2
 804ba2a:	781b      	ldrb	r3, [r3, #0]
 804ba2c:	2b00      	cmp	r3, #0
 804ba2e:	d1e1      	bne.n	804b9f4 <Sys_Boardcast+0x1a8>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_USB));
 804ba30:	bf00      	nop
 804ba32:	480c      	ldr	r0, [pc, #48]	@ (804ba64 <Sys_Boardcast+0x218>)
 804ba34:	f7ff fe9a 	bl	804b76c <LL_USART_IsActiveFlag_TC>
 804ba38:	4603      	mov	r3, r0
 804ba3a:	2b00      	cmp	r3, #0
 804ba3c:	d0f9      	beq.n	804ba32 <Sys_Boardcast+0x1e6>
 804ba3e:	e000      	b.n	804ba42 <Sys_Boardcast+0x1f6>
        default:         return; // unknown level
 804ba40:	bf00      	nop
}
 804ba42:	37a0      	adds	r7, #160	@ 0xa0
 804ba44:	46bd      	mov	sp, r7
 804ba46:	bd80      	pop	{r7, pc}
 804ba48:	0806fa5c 	.word	0x0806fa5c
 804ba4c:	0806fa64 	.word	0x0806fa64
 804ba50:	0806fa6c 	.word	0x0806fa6c
 804ba54:	0806fa70 	.word	0x0806fa70
 804ba58:	0806fa84 	.word	0x0806fa84
 804ba5c:	40004400 	.word	0x40004400
 804ba60:	0806fa8c 	.word	0x0806fa8c
 804ba64:	40011000 	.word	0x40011000

0804ba68 <Sys_Debugcast>:

void Sys_Debugcast(bool status, syslog_level_t level, const char *msg)
{
 804ba68:	b580      	push	{r7, lr}
 804ba6a:	b0a6      	sub	sp, #152	@ 0x98
 804ba6c:	af00      	add	r7, sp, #0
 804ba6e:	4603      	mov	r3, r0
 804ba70:	603a      	str	r2, [r7, #0]
 804ba72:	71fb      	strb	r3, [r7, #7]
 804ba74:	460b      	mov	r3, r1
 804ba76:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 804ba78:	79bb      	ldrb	r3, [r7, #6]
 804ba7a:	2b05      	cmp	r3, #5
 804ba7c:	f200 8087 	bhi.w	804bb8e <Sys_Debugcast+0x126>
 804ba80:	a201      	add	r2, pc, #4	@ (adr r2, 804ba88 <Sys_Debugcast+0x20>)
 804ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ba86:	bf00      	nop
 804ba88:	0804baa1 	.word	0x0804baa1
 804ba8c:	0804baa1 	.word	0x0804baa1
 804ba90:	0804baa1 	.word	0x0804baa1
 804ba94:	0804baa1 	.word	0x0804baa1
 804ba98:	0804baa1 	.word	0x0804baa1
 804ba9c:	0804baa1 	.word	0x0804baa1
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 804baa0:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 804baa2:	2300      	movs	r3, #0
 804baa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 804baa8:	79fb      	ldrb	r3, [r7, #7]
 804baaa:	2b00      	cmp	r3, #0
 804baac:	d001      	beq.n	804bab2 <Sys_Debugcast+0x4a>
 804baae:	4b3a      	ldr	r3, [pc, #232]	@ (804bb98 <Sys_Debugcast+0x130>)
 804bab0:	e000      	b.n	804bab4 <Sys_Debugcast+0x4c>
 804bab2:	4b3a      	ldr	r3, [pc, #232]	@ (804bb9c <Sys_Debugcast+0x134>)
 804bab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 804bab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804babc:	f107 0208 	add.w	r2, r7, #8
 804bac0:	18d0      	adds	r0, r2, r3
 804bac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bac6:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804baca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 804bace:	4a34      	ldr	r2, [pc, #208]	@ (804bba0 <Sys_Debugcast+0x138>)
 804bad0:	f01d fd86 	bl	80695e0 <sniprintf>
 804bad4:	4602      	mov	r2, r0
 804bad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bada:	4413      	add	r3, r2
 804badc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    const char* level_str = syslog_level_to_str(level);
 804bae0:	79bb      	ldrb	r3, [r7, #6]
 804bae2:	4618      	mov	r0, r3
 804bae4:	f7ff fe78 	bl	804b7d8 <syslog_level_to_str>
 804bae8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 804baec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804baf0:	f107 0208 	add.w	r2, r7, #8
 804baf4:	18d0      	adds	r0, r2, r3
 804baf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bafa:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804bafe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 804bb02:	4a28      	ldr	r2, [pc, #160]	@ (804bba4 <Sys_Debugcast+0x13c>)
 804bb04:	f01d fd6c 	bl	80695e0 <sniprintf>
 804bb08:	4602      	mov	r2, r0
 804bb0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bb0e:	4413      	add	r3, r2
 804bb10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 804bb14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bb18:	f107 0208 	add.w	r2, r7, #8
 804bb1c:	18d0      	adds	r0, r2, r3
 804bb1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bb22:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804bb26:	683b      	ldr	r3, [r7, #0]
 804bb28:	4a1f      	ldr	r2, [pc, #124]	@ (804bba8 <Sys_Debugcast+0x140>)
 804bb2a:	f01d fd59 	bl	80695e0 <sniprintf>
 804bb2e:	4602      	mov	r2, r0
 804bb30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 804bb34:	4413      	add	r3, r2
 804bb36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804bb3a:	2300      	movs	r3, #0
 804bb3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 804bb40:	e015      	b.n	804bb6e <Sys_Debugcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 804bb42:	bf00      	nop
 804bb44:	4819      	ldr	r0, [pc, #100]	@ (804bbac <Sys_Debugcast+0x144>)
 804bb46:	f7ff fe24 	bl	804b792 <LL_USART_IsActiveFlag_TXE_TXFNF>
 804bb4a:	4603      	mov	r3, r0
 804bb4c:	2b00      	cmp	r3, #0
 804bb4e:	d0f9      	beq.n	804bb44 <Sys_Debugcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 804bb50:	f107 0208 	add.w	r2, r7, #8
 804bb54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804bb58:	4413      	add	r3, r2
 804bb5a:	781b      	ldrb	r3, [r3, #0]
 804bb5c:	4619      	mov	r1, r3
 804bb5e:	4813      	ldr	r0, [pc, #76]	@ (804bbac <Sys_Debugcast+0x144>)
 804bb60:	f7ff fe2a 	bl	804b7b8 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 804bb64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804bb68:	3301      	adds	r3, #1
 804bb6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 804bb6e:	f107 0208 	add.w	r2, r7, #8
 804bb72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 804bb76:	4413      	add	r3, r2
 804bb78:	781b      	ldrb	r3, [r3, #0]
 804bb7a:	2b00      	cmp	r3, #0
 804bb7c:	d1e1      	bne.n	804bb42 <Sys_Debugcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 804bb7e:	bf00      	nop
 804bb80:	480a      	ldr	r0, [pc, #40]	@ (804bbac <Sys_Debugcast+0x144>)
 804bb82:	f7ff fdf3 	bl	804b76c <LL_USART_IsActiveFlag_TC>
 804bb86:	4603      	mov	r3, r0
 804bb88:	2b00      	cmp	r3, #0
 804bb8a:	d0f9      	beq.n	804bb80 <Sys_Debugcast+0x118>
 804bb8c:	e000      	b.n	804bb90 <Sys_Debugcast+0x128>
        default:         return; // unknown level
 804bb8e:	bf00      	nop
}
 804bb90:	3798      	adds	r7, #152	@ 0x98
 804bb92:	46bd      	mov	sp, r7
 804bb94:	bd80      	pop	{r7, pc}
 804bb96:	bf00      	nop
 804bb98:	0806fa5c 	.word	0x0806fa5c
 804bb9c:	0806fa64 	.word	0x0806fa64
 804bba0:	0806fa6c 	.word	0x0806fa6c
 804bba4:	0806fa70 	.word	0x0806fa70
 804bba8:	0806fa84 	.word	0x0806fa84
 804bbac:	40004400 	.word	0x40004400

0804bbb0 <syslog_log>:
 * - Finally, it appends the message content enclosed in quotes, followed by a newline.
 * Example output:
 *    2024-02-22 23:40:03 0:05:03 [NOTICE] [OBC-STM32] "Start up"
 */
void syslog_log(syslog_level_t level, const char *msg, int use_polling)
{
 804bbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 804bbb2:	b0af      	sub	sp, #188	@ 0xbc
 804bbb4:	af06      	add	r7, sp, #24
 804bbb6:	4603      	mov	r3, r0
 804bbb8:	60b9      	str	r1, [r7, #8]
 804bbba:	607a      	str	r2, [r7, #4]
 804bbbc:	73fb      	strb	r3, [r7, #15]
    char log_buffer[128];
    int offset = 0;
 804bbbe:	2300      	movs	r3, #0
 804bbc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

#if SYSLOG_USE_RTC
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 804bbc4:	f107 0314 	add.w	r3, r7, #20
 804bbc8:	4618      	mov	r0, r3
 804bbca:	f001 ffd9 	bl	804db80 <Utils_GetRTC>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bbce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bbd2:	f107 021c 	add.w	r2, r7, #28
 804bbd6:	18d0      	adds	r0, r2, r3
 804bbd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bbdc:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
                "20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 804bbe0:	7dbb      	ldrb	r3, [r7, #22]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bbe2:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 804bbe4:	7d7b      	ldrb	r3, [r7, #21]
 804bbe6:	7d3a      	ldrb	r2, [r7, #20]
 804bbe8:	7dfc      	ldrb	r4, [r7, #23]
 804bbea:	7e3d      	ldrb	r5, [r7, #24]
 804bbec:	7e7e      	ldrb	r6, [r7, #25]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bbee:	9604      	str	r6, [sp, #16]
 804bbf0:	9503      	str	r5, [sp, #12]
 804bbf2:	9402      	str	r4, [sp, #8]
 804bbf4:	9201      	str	r2, [sp, #4]
 804bbf6:	9300      	str	r3, [sp, #0]
 804bbf8:	4663      	mov	r3, ip
 804bbfa:	4a45      	ldr	r2, [pc, #276]	@ (804bd10 <syslog_log+0x160>)
 804bbfc:	f01d fcf0 	bl	80695e0 <sniprintf>
 804bc00:	4602      	mov	r2, r0
 804bc02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc06:	4413      	add	r3, r2
 804bc08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
#endif

#if SYSLOG_USE_WORKING_TIME
    uint8_t hours = 0, minutes = 0, seconds = 0;
 804bc0c:	2300      	movs	r3, #0
 804bc0e:	74fb      	strb	r3, [r7, #19]
 804bc10:	2300      	movs	r3, #0
 804bc12:	74bb      	strb	r3, [r7, #18]
 804bc14:	2300      	movs	r3, #0
 804bc16:	747b      	strb	r3, [r7, #17]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 804bc18:	f107 0311 	add.w	r3, r7, #17
 804bc1c:	f107 0212 	add.w	r2, r7, #18
 804bc20:	f107 0113 	add.w	r1, r7, #19
 804bc24:	2000      	movs	r0, #0
 804bc26:	f002 f805 	bl	804dc34 <Utils_GetWorkingTime>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bc2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc2e:	f107 021c 	add.w	r2, r7, #28
 804bc32:	18d0      	adds	r0, r2, r3
 804bc34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc38:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804bc3c:	7cfb      	ldrb	r3, [r7, #19]
 804bc3e:	461c      	mov	r4, r3
 804bc40:	7cbb      	ldrb	r3, [r7, #18]
 804bc42:	7c7a      	ldrb	r2, [r7, #17]
 804bc44:	9201      	str	r2, [sp, #4]
 804bc46:	9300      	str	r3, [sp, #0]
 804bc48:	4623      	mov	r3, r4
 804bc4a:	4a32      	ldr	r2, [pc, #200]	@ (804bd14 <syslog_log+0x164>)
 804bc4c:	f01d fcc8 	bl	80695e0 <sniprintf>
 804bc50:	4602      	mov	r2, r0
 804bc52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc56:	4413      	add	r3, r2
 804bc58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    "%02u:%02u:%02u ",
                    hours, minutes, seconds);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bc5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc60:	f107 021c 	add.w	r2, r7, #28
 804bc64:	18d4      	adds	r4, r2, r3
 804bc66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc6a:	f1c3 0580 	rsb	r5, r3, #128	@ 0x80
 804bc6e:	7bfb      	ldrb	r3, [r7, #15]
 804bc70:	4618      	mov	r0, r3
 804bc72:	f7ff fdb1 	bl	804b7d8 <syslog_level_to_str>
 804bc76:	4603      	mov	r3, r0
 804bc78:	4a27      	ldr	r2, [pc, #156]	@ (804bd18 <syslog_log+0x168>)
 804bc7a:	4629      	mov	r1, r5
 804bc7c:	4620      	mov	r0, r4
 804bc7e:	f01d fcaf 	bl	80695e0 <sniprintf>
 804bc82:	4602      	mov	r2, r0
 804bc84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc88:	4413      	add	r3, r2
 804bc8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "%s ", syslog_level_to_str(level));

#ifdef SYSLOG_SOURCE
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bc8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc92:	f107 021c 	add.w	r2, r7, #28
 804bc96:	18d0      	adds	r0, r2, r3
 804bc98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bc9c:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804bca0:	4b1e      	ldr	r3, [pc, #120]	@ (804bd1c <syslog_log+0x16c>)
 804bca2:	4a1f      	ldr	r2, [pc, #124]	@ (804bd20 <syslog_log+0x170>)
 804bca4:	f01d fc9c 	bl	80695e0 <sniprintf>
 804bca8:	4602      	mov	r2, r0
 804bcaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bcae:	4413      	add	r3, r2
 804bcb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "[%s] ", SYSLOG_SOURCE);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 804bcb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bcb8:	f107 021c 	add.w	r2, r7, #28
 804bcbc:	18d0      	adds	r0, r2, r3
 804bcbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bcc2:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 804bcc6:	68bb      	ldr	r3, [r7, #8]
 804bcc8:	4a16      	ldr	r2, [pc, #88]	@ (804bd24 <syslog_log+0x174>)
 804bcca:	f01d fc89 	bl	80695e0 <sniprintf>
 804bcce:	4602      	mov	r2, r0
 804bcd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 804bcd4:	4413      	add	r3, r2
 804bcd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "\"%s", msg);

#ifdef DEBUG_USE_UART
        if (use_polling) {
 804bcda:	687b      	ldr	r3, [r7, #4]
 804bcdc:	2b00      	cmp	r3, #0
 804bcde:	d00e      	beq.n	804bcfe <syslog_log+0x14e>
            UART_Driver_Polling_SendString(syslog_uarts[0], log_buffer);
 804bce0:	4b11      	ldr	r3, [pc, #68]	@ (804bd28 <syslog_log+0x178>)
 804bce2:	681b      	ldr	r3, [r3, #0]
 804bce4:	f107 021c 	add.w	r2, r7, #28
 804bce8:	4611      	mov	r1, r2
 804bcea:	4618      	mov	r0, r3
 804bcec:	f7f6 ff92 	bl	8042c14 <UART_Driver_Polling_SendString>
            UART_Driver_Polling_SendString(syslog_uarts[0], "\r\n");
 804bcf0:	4b0d      	ldr	r3, [pc, #52]	@ (804bd28 <syslog_log+0x178>)
 804bcf2:	681b      	ldr	r3, [r3, #0]
 804bcf4:	490d      	ldr	r1, [pc, #52]	@ (804bd2c <syslog_log+0x17c>)
 804bcf6:	4618      	mov	r0, r3
 804bcf8:	f7f6 ff8c 	bl	8042c14 <UART_Driver_Polling_SendString>
        } else {
            Dmesg_SafeWrite(log_buffer);
        }
#endif
}
 804bcfc:	e004      	b.n	804bd08 <syslog_log+0x158>
            Dmesg_SafeWrite(log_buffer);
 804bcfe:	f107 031c 	add.w	r3, r7, #28
 804bd02:	4618      	mov	r0, r3
 804bd04:	f7fb ff16 	bl	8047b34 <Dmesg_SafeWrite>
}
 804bd08:	bf00      	nop
 804bd0a:	37a4      	adds	r7, #164	@ 0xa4
 804bd0c:	46bd      	mov	sp, r7
 804bd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804bd10:	0806faa0 	.word	0x0806faa0
 804bd14:	0806fac4 	.word	0x0806fac4
 804bd18:	0806fad4 	.word	0x0806fad4
 804bd1c:	0806fad8 	.word	0x0806fad8
 804bd20:	0806fadc 	.word	0x0806fadc
 804bd24:	0806fae4 	.word	0x0806fae4
 804bd28:	240148e0 	.word	0x240148e0
 804bd2c:	0806fae8 	.word	0x0806fae8

0804bd30 <syslog_level_to_str>:

//static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;
//static const int syslog_uart_count = sizeof(syslog_uarts) / sizeof(syslog_uarts[0]);

static const char* syslog_level_to_str(syslog_level_t level)
{
 804bd30:	b480      	push	{r7}
 804bd32:	b083      	sub	sp, #12
 804bd34:	af00      	add	r7, sp, #0
 804bd36:	4603      	mov	r3, r0
 804bd38:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 804bd3a:	79fb      	ldrb	r3, [r7, #7]
 804bd3c:	2b05      	cmp	r3, #5
 804bd3e:	d81b      	bhi.n	804bd78 <syslog_level_to_str+0x48>
 804bd40:	a201      	add	r2, pc, #4	@ (adr r2, 804bd48 <syslog_level_to_str+0x18>)
 804bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804bd46:	bf00      	nop
 804bd48:	0804bd61 	.word	0x0804bd61
 804bd4c:	0804bd65 	.word	0x0804bd65
 804bd50:	0804bd69 	.word	0x0804bd69
 804bd54:	0804bd6d 	.word	0x0804bd6d
 804bd58:	0804bd71 	.word	0x0804bd71
 804bd5c:	0804bd75 	.word	0x0804bd75
        case LOG_INFOR:  return "[INFO]  ";
 804bd60:	4b09      	ldr	r3, [pc, #36]	@ (804bd88 <syslog_level_to_str+0x58>)
 804bd62:	e00a      	b.n	804bd7a <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 804bd64:	4b09      	ldr	r3, [pc, #36]	@ (804bd8c <syslog_level_to_str+0x5c>)
 804bd66:	e008      	b.n	804bd7a <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 804bd68:	4b09      	ldr	r3, [pc, #36]	@ (804bd90 <syslog_level_to_str+0x60>)
 804bd6a:	e006      	b.n	804bd7a <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 804bd6c:	4b09      	ldr	r3, [pc, #36]	@ (804bd94 <syslog_level_to_str+0x64>)
 804bd6e:	e004      	b.n	804bd7a <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 804bd70:	4b09      	ldr	r3, [pc, #36]	@ (804bd98 <syslog_level_to_str+0x68>)
 804bd72:	e002      	b.n	804bd7a <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 804bd74:	4b09      	ldr	r3, [pc, #36]	@ (804bd9c <syslog_level_to_str+0x6c>)
 804bd76:	e000      	b.n	804bd7a <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 804bd78:	4b09      	ldr	r3, [pc, #36]	@ (804bda0 <syslog_level_to_str+0x70>)
    }
}
 804bd7a:	4618      	mov	r0, r3
 804bd7c:	370c      	adds	r7, #12
 804bd7e:	46bd      	mov	sp, r7
 804bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd84:	4770      	bx	lr
 804bd86:	bf00      	nop
 804bd88:	0806faec 	.word	0x0806faec
 804bd8c:	0806faf8 	.word	0x0806faf8
 804bd90:	0806fb04 	.word	0x0806fb04
 804bd94:	0806fb10 	.word	0x0806fb10
 804bd98:	0806fb1c 	.word	0x0806fb1c
 804bd9c:	0806fb28 	.word	0x0806fb28
 804bda0:	0806fb34 	.word	0x0806fb34

0804bda4 <SysLogQueue_Init>:

void SysLogQueue_Init(void)
{
 804bda4:	b580      	push	{r7, lr}
 804bda6:	af00      	add	r7, sp, #0
    syslogQueue = xQueueCreate(SYSLOG_QUEUE_SLOT, sizeof(syslog_msg_t));
 804bda8:	2200      	movs	r2, #0
 804bdaa:	2141      	movs	r1, #65	@ 0x41
 804bdac:	2010      	movs	r0, #16
 804bdae:	f009 f9c4 	bl	805513a <xQueueGenericCreate>
 804bdb2:	4603      	mov	r3, r0
 804bdb4:	4a01      	ldr	r2, [pc, #4]	@ (804bdbc <SysLogQueue_Init+0x18>)
 804bdb6:	6013      	str	r3, [r2, #0]
}
 804bdb8:	bf00      	nop
 804bdba:	bd80      	pop	{r7, pc}
 804bdbc:	2402d56c 	.word	0x2402d56c

0804bdc0 <SysLog_Task>:
        xQueueSend(syslogQueue, &logMsg, 0);
    }
}

void SysLog_Task(void *parameters)
{
 804bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 804bdc2:	b0bf      	sub	sp, #252	@ 0xfc
 804bdc4:	af06      	add	r7, sp, #24
 804bdc6:	6078      	str	r0, [r7, #4]
    syslog_msg_t logMsg;
    char outputBuffer[SYSLOG_OUTPUT_BUFFER_SIZE];
    for(;;)
    {
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 804bdc8:	4b65      	ldr	r3, [pc, #404]	@ (804bf60 <SysLog_Task+0x1a0>)
 804bdca:	681b      	ldr	r3, [r3, #0]
 804bdcc:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 804bdd0:	f04f 32ff 	mov.w	r2, #4294967295
 804bdd4:	4618      	mov	r0, r3
 804bdd6:	f009 fc17 	bl	8055608 <xQueueReceive>
 804bdda:	4603      	mov	r3, r0
 804bddc:	2b01      	cmp	r3, #1
 804bdde:	d1f3      	bne.n	804bdc8 <SysLog_Task+0x8>
        {
            int offset = 0;
 804bde0:	2300      	movs	r3, #0
 804bde2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #if SYSLOG_USE_RTC
            s_DateTime rtc;
            Utils_GetRTC(&rtc);
 804bde6:	f107 0310 	add.w	r3, r7, #16
 804bdea:	4618      	mov	r0, r3
 804bdec:	f001 fec8 	bl	804db80 <Utils_GetRTC>
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804bdf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bdf4:	f107 0218 	add.w	r2, r7, #24
 804bdf8:	18d0      	adds	r0, r2, r3
 804bdfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bdfe:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804be02:	461e      	mov	r6, r3
                               "20%02d-%02d-%02d %02d:%02d:%02d ",
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 804be04:	7cbb      	ldrb	r3, [r7, #18]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804be06:	469c      	mov	ip, r3
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 804be08:	7c7b      	ldrb	r3, [r7, #17]
 804be0a:	7c3a      	ldrb	r2, [r7, #16]
 804be0c:	7cf9      	ldrb	r1, [r7, #19]
 804be0e:	7d3c      	ldrb	r4, [r7, #20]
 804be10:	7d7d      	ldrb	r5, [r7, #21]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804be12:	9504      	str	r5, [sp, #16]
 804be14:	9403      	str	r4, [sp, #12]
 804be16:	9102      	str	r1, [sp, #8]
 804be18:	9201      	str	r2, [sp, #4]
 804be1a:	9300      	str	r3, [sp, #0]
 804be1c:	4663      	mov	r3, ip
 804be1e:	4a51      	ldr	r2, [pc, #324]	@ (804bf64 <SysLog_Task+0x1a4>)
 804be20:	4631      	mov	r1, r6
 804be22:	f01d fbdd 	bl	80695e0 <sniprintf>
 804be26:	4602      	mov	r2, r0
 804be28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804be2c:	4413      	add	r3, r2
 804be2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #endif

  #if SYSLOG_USE_WORKING_TIME
            uint32_t days = 0;
 804be32:	2300      	movs	r3, #0
 804be34:	60fb      	str	r3, [r7, #12]
            uint8_t hours = 0, minutes = 0, seconds = 0;
 804be36:	2300      	movs	r3, #0
 804be38:	72fb      	strb	r3, [r7, #11]
 804be3a:	2300      	movs	r3, #0
 804be3c:	72bb      	strb	r3, [r7, #10]
 804be3e:	2300      	movs	r3, #0
 804be40:	727b      	strb	r3, [r7, #9]
            Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 804be42:	f107 0309 	add.w	r3, r7, #9
 804be46:	f107 020a 	add.w	r2, r7, #10
 804be4a:	f107 010b 	add.w	r1, r7, #11
 804be4e:	f107 000c 	add.w	r0, r7, #12
 804be52:	f001 feef 	bl	804dc34 <Utils_GetWorkingTime>
            if (days > 0)
 804be56:	68fb      	ldr	r3, [r7, #12]
 804be58:	2b00      	cmp	r3, #0
 804be5a:	d01b      	beq.n	804be94 <SysLog_Task+0xd4>
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804be5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804be60:	f107 0218 	add.w	r2, r7, #24
 804be64:	18d0      	adds	r0, r2, r3
 804be66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804be6a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804be6e:	461d      	mov	r5, r3
 804be70:	68fb      	ldr	r3, [r7, #12]
 804be72:	7afa      	ldrb	r2, [r7, #11]
 804be74:	7ab9      	ldrb	r1, [r7, #10]
 804be76:	7a7c      	ldrb	r4, [r7, #9]
 804be78:	9402      	str	r4, [sp, #8]
 804be7a:	9101      	str	r1, [sp, #4]
 804be7c:	9200      	str	r2, [sp, #0]
 804be7e:	4a3a      	ldr	r2, [pc, #232]	@ (804bf68 <SysLog_Task+0x1a8>)
 804be80:	4629      	mov	r1, r5
 804be82:	f01d fbad 	bl	80695e0 <sniprintf>
 804be86:	4602      	mov	r2, r0
 804be88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804be8c:	4413      	add	r3, r2
 804be8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 804be92:	e019      	b.n	804bec8 <SysLog_Task+0x108>
                                   "%lu+%02u:%02u:%02u ",
                                   days, hours, minutes, seconds);
            }
            else
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804be94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804be98:	f107 0218 	add.w	r2, r7, #24
 804be9c:	18d0      	adds	r0, r2, r3
 804be9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bea2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804bea6:	4619      	mov	r1, r3
 804bea8:	7afb      	ldrb	r3, [r7, #11]
 804beaa:	461c      	mov	r4, r3
 804beac:	7abb      	ldrb	r3, [r7, #10]
 804beae:	7a7a      	ldrb	r2, [r7, #9]
 804beb0:	9201      	str	r2, [sp, #4]
 804beb2:	9300      	str	r3, [sp, #0]
 804beb4:	4623      	mov	r3, r4
 804beb6:	4a2d      	ldr	r2, [pc, #180]	@ (804bf6c <SysLog_Task+0x1ac>)
 804beb8:	f01d fb92 	bl	80695e0 <sniprintf>
 804bebc:	4602      	mov	r2, r0
 804bebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bec2:	4413      	add	r3, r2
 804bec4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                                   "%02u:%02u:%02u ",
                                   hours, minutes, seconds);
            }
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804bec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804becc:	f107 0218 	add.w	r2, r7, #24
 804bed0:	18d4      	adds	r4, r2, r3
 804bed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bed6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804beda:	461d      	mov	r5, r3
 804bedc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 804bee0:	4618      	mov	r0, r3
 804bee2:	f7ff ff25 	bl	804bd30 <syslog_level_to_str>
 804bee6:	4603      	mov	r3, r0
 804bee8:	4a21      	ldr	r2, [pc, #132]	@ (804bf70 <SysLog_Task+0x1b0>)
 804beea:	4629      	mov	r1, r5
 804beec:	4620      	mov	r0, r4
 804beee:	f01d fb77 	bl	80695e0 <sniprintf>
 804bef2:	4602      	mov	r2, r0
 804bef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bef8:	4413      	add	r3, r2
 804befa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "%s ", syslog_level_to_str(logMsg.level));

  #ifdef SYSLOG_SOURCE
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804befe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf02:	f107 0218 	add.w	r2, r7, #24
 804bf06:	18d0      	adds	r0, r2, r3
 804bf08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf0c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804bf10:	4619      	mov	r1, r3
 804bf12:	4b18      	ldr	r3, [pc, #96]	@ (804bf74 <SysLog_Task+0x1b4>)
 804bf14:	4a18      	ldr	r2, [pc, #96]	@ (804bf78 <SysLog_Task+0x1b8>)
 804bf16:	f01d fb63 	bl	80695e0 <sniprintf>
 804bf1a:	4602      	mov	r2, r0
 804bf1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf20:	4413      	add	r3, r2
 804bf22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "[%s] ", SYSLOG_SOURCE);
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 804bf26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf2a:	f107 0218 	add.w	r2, r7, #24
 804bf2e:	18d0      	adds	r0, r2, r3
 804bf30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf34:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 804bf38:	4619      	mov	r1, r3
 804bf3a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 804bf3e:	3301      	adds	r3, #1
 804bf40:	4a0e      	ldr	r2, [pc, #56]	@ (804bf7c <SysLog_Task+0x1bc>)
 804bf42:	f01d fb4d 	bl	80695e0 <sniprintf>
 804bf46:	4602      	mov	r2, r0
 804bf48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 804bf4c:	4413      	add	r3, r2
 804bf4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "\"%s", logMsg.msg);

  #ifdef DEBUG_USE_UART
            Dmesg_SafeWrite(outputBuffer);
 804bf52:	f107 0318 	add.w	r3, r7, #24
 804bf56:	4618      	mov	r0, r3
 804bf58:	f7fb fdec 	bl	8047b34 <Dmesg_SafeWrite>
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 804bf5c:	e734      	b.n	804bdc8 <SysLog_Task+0x8>
 804bf5e:	bf00      	nop
 804bf60:	2402d56c 	.word	0x2402d56c
 804bf64:	0806fb40 	.word	0x0806fb40
 804bf68:	0806fb64 	.word	0x0806fb64
 804bf6c:	0806fb78 	.word	0x0806fb78
 804bf70:	0806fb88 	.word	0x0806fb88
 804bf74:	0806fb8c 	.word	0x0806fb8c
 804bf78:	0806fb90 	.word	0x0806fb90
 804bf7c:	0806fb98 	.word	0x0806fb98

0804bf80 <__NVIC_SystemReset>:
{
 804bf80:	b480      	push	{r7}
 804bf82:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 804bf84:	f3bf 8f4f 	dsb	sy
}
 804bf88:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804bf8a:	4b06      	ldr	r3, [pc, #24]	@ (804bfa4 <__NVIC_SystemReset+0x24>)
 804bf8c:	68db      	ldr	r3, [r3, #12]
 804bf8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804bf92:	4904      	ldr	r1, [pc, #16]	@ (804bfa4 <__NVIC_SystemReset+0x24>)
 804bf94:	4b04      	ldr	r3, [pc, #16]	@ (804bfa8 <__NVIC_SystemReset+0x28>)
 804bf96:	4313      	orrs	r3, r2
 804bf98:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 804bf9a:	f3bf 8f4f 	dsb	sy
}
 804bf9e:	bf00      	nop
    __NOP();
 804bfa0:	bf00      	nop
 804bfa2:	e7fd      	b.n	804bfa0 <__NVIC_SystemReset+0x20>
 804bfa4:	e000ed00 	.word	0xe000ed00
 804bfa8:	05fa0004 	.word	0x05fa0004

0804bfac <Flash_Write_Metadata>:
 * @param fw: Con trỏ tới thông tin firmware (s_firmware_info).
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu thành công, FLASH_PAYLOAD_WRITE_FAILED nếu lỗi hoặc đầu vào không hợp lệ.
 */
static uint8_t Flash_Write_Metadata(s_firmware_info* fw_info, uint8_t fw_number)
{
 804bfac:	b590      	push	{r4, r7, lr}
 804bfae:	b09b      	sub	sp, #108	@ 0x6c
 804bfb0:	af00      	add	r7, sp, #0
 804bfb2:	6078      	str	r0, [r7, #4]
 804bfb4:	460b      	mov	r3, r1
 804bfb6:	70fb      	strb	r3, [r7, #3]
 804bfb8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 804bfbc:	3b60      	subs	r3, #96	@ 0x60
 804bfbe:	331f      	adds	r3, #31
 804bfc0:	095b      	lsrs	r3, r3, #5
 804bfc2:	015c      	lsls	r4, r3, #5
	if((fw_info == NULL)||(fw_number < 1)||(fw_number > 2))	return FOTA_FAILED;
 804bfc4:	687b      	ldr	r3, [r7, #4]
 804bfc6:	2b00      	cmp	r3, #0
 804bfc8:	d005      	beq.n	804bfd6 <Flash_Write_Metadata+0x2a>
 804bfca:	78fb      	ldrb	r3, [r7, #3]
 804bfcc:	2b00      	cmp	r3, #0
 804bfce:	d002      	beq.n	804bfd6 <Flash_Write_Metadata+0x2a>
 804bfd0:	78fb      	ldrb	r3, [r7, #3]
 804bfd2:	2b02      	cmp	r3, #2
 804bfd4:	d901      	bls.n	804bfda <Flash_Write_Metadata+0x2e>
 804bfd6:	2301      	movs	r3, #1
 804bfd8:	e04e      	b.n	804c078 <Flash_Write_Metadata+0xcc>

	uint32_t metadata_addr = (fw_number == 1) ? METADATA_CORE1_MEM_BASE : METADATA_CORE2_MEM_BASE;
 804bfda:	78fb      	ldrb	r3, [r7, #3]
 804bfdc:	2b01      	cmp	r3, #1
 804bfde:	d101      	bne.n	804bfe4 <Flash_Write_Metadata+0x38>
 804bfe0:	4b27      	ldr	r3, [pc, #156]	@ (804c080 <Flash_Write_Metadata+0xd4>)
 804bfe2:	e000      	b.n	804bfe6 <Flash_Write_Metadata+0x3a>
 804bfe4:	4b27      	ldr	r3, [pc, #156]	@ (804c084 <Flash_Write_Metadata+0xd8>)
 804bfe6:	667b      	str	r3, [r7, #100]	@ 0x64
	uint32_t bank = (fw_number == 1) ? FLASH_BANK_1 : FLASH_BANK_2;
 804bfe8:	78fb      	ldrb	r3, [r7, #3]
 804bfea:	2b01      	cmp	r3, #1
 804bfec:	d101      	bne.n	804bff2 <Flash_Write_Metadata+0x46>
 804bfee:	2301      	movs	r3, #1
 804bff0:	e000      	b.n	804bff4 <Flash_Write_Metadata+0x48>
 804bff2:	2302      	movs	r3, #2
 804bff4:	663b      	str	r3, [r7, #96]	@ 0x60
    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 804bff6:	2314      	movs	r3, #20
 804bff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memset(data, 0xFF, sizeof(data));
 804bffa:	2220      	movs	r2, #32
 804bffc:	21ff      	movs	r1, #255	@ 0xff
 804bffe:	4620      	mov	r0, r4
 804c000:	f01d fbf0 	bl	80697e4 <memset>
    memcpy(data, fw_info, fw_info_size);
 804c004:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 804c006:	6879      	ldr	r1, [r7, #4]
 804c008:	4620      	mov	r0, r4
 804c00a:	f01d fc96 	bl	806993a <memcpy>

    HAL_FLASH_Unlock();
 804c00e:	f014 fc95 	bl	806093c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 804c012:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804c016:	2200      	movs	r2, #0
 804c018:	601a      	str	r2, [r3, #0]
 804c01a:	605a      	str	r2, [r3, #4]
 804c01c:	609a      	str	r2, [r3, #8]
 804c01e:	60da      	str	r2, [r3, #12]
 804c020:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 804c022:	2300      	movs	r3, #0
 804c024:	647b      	str	r3, [r7, #68]	@ 0x44
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 804c026:	2300      	movs	r3, #0
 804c028:	64bb      	str	r3, [r7, #72]	@ 0x48
	EraseInitStruct.Banks = bank;
 804c02a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 804c02c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	EraseInitStruct.Sector = 1; 						// Metadata ở Sector 1
 804c02e:	2301      	movs	r3, #1
 804c030:	653b      	str	r3, [r7, #80]	@ 0x50
	EraseInitStruct.NbSectors = 1;
 804c032:	2301      	movs	r3, #1
 804c034:	657b      	str	r3, [r7, #84]	@ 0x54
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 804c036:	2320      	movs	r3, #32
 804c038:	65bb      	str	r3, [r7, #88]	@ 0x58

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 804c03a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 804c03e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804c042:	4611      	mov	r1, r2
 804c044:	4618      	mov	r0, r3
 804c046:	f014 fd77 	bl	8060b38 <HAL_FLASHEx_Erase>
 804c04a:	4603      	mov	r3, r0
 804c04c:	2b00      	cmp	r3, #0
 804c04e:	d003      	beq.n	804c058 <Flash_Write_Metadata+0xac>
	{
		HAL_FLASH_Lock();
 804c050:	f014 fcae 	bl	80609b0 <HAL_FLASH_Lock>
		return FOTA_FAILED;
 804c054:	2301      	movs	r3, #1
 804c056:	e00f      	b.n	804c078 <Flash_Write_Metadata+0xcc>
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, metadata_addr, (uint32_t)data) != HAL_OK)
 804c058:	4623      	mov	r3, r4
 804c05a:	461a      	mov	r2, r3
 804c05c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 804c05e:	2001      	movs	r0, #1
 804c060:	f014 fbda 	bl	8060818 <HAL_FLASH_Program>
 804c064:	4603      	mov	r3, r0
 804c066:	2b00      	cmp	r3, #0
 804c068:	d003      	beq.n	804c072 <Flash_Write_Metadata+0xc6>
	{
		HAL_FLASH_Lock();
 804c06a:	f014 fca1 	bl	80609b0 <HAL_FLASH_Lock>
		return FOTA_FAILED;
 804c06e:	2301      	movs	r3, #1
 804c070:	e002      	b.n	804c078 <Flash_Write_Metadata+0xcc>
	}
    HAL_FLASH_Lock();
 804c072:	f014 fc9d 	bl	80609b0 <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 804c076:	2300      	movs	r3, #0
}
 804c078:	4618      	mov	r0, r3
 804c07a:	376c      	adds	r7, #108	@ 0x6c
 804c07c:	46bd      	mov	sp, r7
 804c07e:	bd90      	pop	{r4, r7, pc}
 804c080:	08020000 	.word	0x08020000
 804c084:	08120000 	.word	0x08120000

0804c088 <Flash_Read_Metadata>:
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu đọc thành công và metadata hợp lệ,
 *         FLASH_PAYLOAD_WRITE_FAILED nếu fw_number không hợp lệ hoặc metadata không hợp lệ.
 */
static uint8_t Flash_Read_Metadata(s_firmware_info* fw_info, uint8_t fw_number)
{
 804c088:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c08a:	b093      	sub	sp, #76	@ 0x4c
 804c08c:	af00      	add	r7, sp, #0
 804c08e:	6078      	str	r0, [r7, #4]
 804c090:	460b      	mov	r3, r1
 804c092:	70fb      	strb	r3, [r7, #3]
 804c094:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 804c098:	3b40      	subs	r3, #64	@ 0x40
 804c09a:	331f      	adds	r3, #31
 804c09c:	095b      	lsrs	r3, r3, #5
 804c09e:	015e      	lsls	r6, r3, #5
	if((fw_number < 1)||(fw_number > 2)) return FOTA_FAILED;
 804c0a0:	78fb      	ldrb	r3, [r7, #3]
 804c0a2:	2b00      	cmp	r3, #0
 804c0a4:	d002      	beq.n	804c0ac <Flash_Read_Metadata+0x24>
 804c0a6:	78fb      	ldrb	r3, [r7, #3]
 804c0a8:	2b02      	cmp	r3, #2
 804c0aa:	d901      	bls.n	804c0b0 <Flash_Read_Metadata+0x28>
 804c0ac:	2301      	movs	r3, #1
 804c0ae:	e02c      	b.n	804c10a <Flash_Read_Metadata+0x82>

	uint32_t metadata_addr = (fw_number == 1) ? METADATA_CORE1_MEM_BASE : METADATA_CORE2_MEM_BASE;
 804c0b0:	78fb      	ldrb	r3, [r7, #3]
 804c0b2:	2b01      	cmp	r3, #1
 804c0b4:	d101      	bne.n	804c0ba <Flash_Read_Metadata+0x32>
 804c0b6:	4b17      	ldr	r3, [pc, #92]	@ (804c114 <Flash_Read_Metadata+0x8c>)
 804c0b8:	e000      	b.n	804c0bc <Flash_Read_Metadata+0x34>
 804c0ba:	4b17      	ldr	r3, [pc, #92]	@ (804c118 <Flash_Read_Metadata+0x90>)
 804c0bc:	647b      	str	r3, [r7, #68]	@ 0x44

    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 804c0be:	2314      	movs	r3, #20
 804c0c0:	643b      	str	r3, [r7, #64]	@ 0x40

    memcpy(data, (void*)metadata_addr, sizeof(data));
 804c0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804c0c4:	4634      	mov	r4, r6
 804c0c6:	461d      	mov	r5, r3
 804c0c8:	6828      	ldr	r0, [r5, #0]
 804c0ca:	6869      	ldr	r1, [r5, #4]
 804c0cc:	68aa      	ldr	r2, [r5, #8]
 804c0ce:	68eb      	ldr	r3, [r5, #12]
 804c0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804c0d2:	6928      	ldr	r0, [r5, #16]
 804c0d4:	6969      	ldr	r1, [r5, #20]
 804c0d6:	69aa      	ldr	r2, [r5, #24]
 804c0d8:	69eb      	ldr	r3, [r5, #28]
 804c0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy(fw_info, data, fw_info_size);
 804c0dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 804c0de:	4631      	mov	r1, r6
 804c0e0:	6878      	ldr	r0, [r7, #4]
 804c0e2:	f01d fc2a 	bl	806993a <memcpy>

    if((fw_info->address == 0xffffffff)||
 804c0e6:	687b      	ldr	r3, [r7, #4]
 804c0e8:	685b      	ldr	r3, [r3, #4]
 804c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c0ee:	d009      	beq.n	804c104 <Flash_Read_Metadata+0x7c>
	(fw_info->length == 0xffffffff)||
 804c0f0:	687b      	ldr	r3, [r7, #4]
 804c0f2:	689b      	ldr	r3, [r3, #8]
    if((fw_info->address == 0xffffffff)||
 804c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c0f8:	d004      	beq.n	804c104 <Flash_Read_Metadata+0x7c>
	(fw_info->crc == 0xffffffff))
 804c0fa:	687b      	ldr	r3, [r7, #4]
 804c0fc:	68db      	ldr	r3, [r3, #12]
	(fw_info->length == 0xffffffff)||
 804c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c102:	d101      	bne.n	804c108 <Flash_Read_Metadata+0x80>
    	return FOTA_FAILED;
 804c104:	2301      	movs	r3, #1
 804c106:	e000      	b.n	804c10a <Flash_Read_Metadata+0x82>
    return FOTA_SUCCESS;
 804c108:	2300      	movs	r3, #0
}
 804c10a:	4618      	mov	r0, r3
 804c10c:	374c      	adds	r7, #76	@ 0x4c
 804c10e:	46bd      	mov	sp, r7
 804c110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804c112:	bf00      	nop
 804c114:	08020000 	.word	0x08020000
 804c118:	08120000 	.word	0x08120000

0804c11c <System_On_Bootloader_Reset>:

uint8_t System_On_Bootloader_Reset(void)
{
 804c11c:	b580      	push	{r7, lr}
 804c11e:	b086      	sub	sp, #24
 804c120:	af00      	add	r7, sp, #0
	s_firmware_info fw_info;
	if (Flash_Read_Metadata(&fw_info, 1) != FOTA_SUCCESS) return FOTA_FAILED;
 804c122:	1d3b      	adds	r3, r7, #4
 804c124:	2101      	movs	r1, #1
 804c126:	4618      	mov	r0, r3
 804c128:	f7ff ffae 	bl	804c088 <Flash_Read_Metadata>
 804c12c:	4603      	mov	r3, r0
 804c12e:	2b00      	cmp	r3, #0
 804c130:	d001      	beq.n	804c136 <System_On_Bootloader_Reset+0x1a>
 804c132:	2301      	movs	r3, #1
 804c134:	e019      	b.n	804c16a <System_On_Bootloader_Reset+0x4e>
	fw_info.fota_rqt = true;
 804c136:	2301      	movs	r3, #1
 804c138:	713b      	strb	r3, [r7, #4]
	if (Flash_Write_Metadata(&fw_info, 1) != FOTA_SUCCESS) return FOTA_FAILED;
 804c13a:	1d3b      	adds	r3, r7, #4
 804c13c:	2101      	movs	r1, #1
 804c13e:	4618      	mov	r0, r3
 804c140:	f7ff ff34 	bl	804bfac <Flash_Write_Metadata>
 804c144:	4603      	mov	r3, r0
 804c146:	2b00      	cmp	r3, #0
 804c148:	d001      	beq.n	804c14e <System_On_Bootloader_Reset+0x32>
 804c14a:	2301      	movs	r3, #1
 804c14c:	e00d      	b.n	804c16a <System_On_Bootloader_Reset+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 804c14e:	b672      	cpsid	i
}
 804c150:	bf00      	nop
    __disable_irq();
    __HAL_RCC_CLEAR_RESET_FLAGS();
 804c152:	4b08      	ldr	r3, [pc, #32]	@ (804c174 <System_On_Bootloader_Reset+0x58>)
 804c154:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 804c158:	4a06      	ldr	r2, [pc, #24]	@ (804c174 <System_On_Bootloader_Reset+0x58>)
 804c15a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804c15e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
    HAL_DeInit();
 804c162:	f014 f919 	bl	8060398 <HAL_DeInit>
    NVIC_SystemReset();
 804c166:	f7ff ff0b 	bl	804bf80 <__NVIC_SystemReset>

	return FOTA_SUCCESS;
}
 804c16a:	4618      	mov	r0, r3
 804c16c:	3718      	adds	r7, #24
 804c16e:	46bd      	mov	sp, r7
 804c170:	bd80      	pop	{r7, pc}
 804c172:	bf00      	nop
 804c174:	58024400 	.word	0x58024400

0804c178 <bcd2dec>:
/************************************************
 *                   Helper                     *
 ************************************************/

static inline uint8_t bcd2dec(uint8_t bcd)
{
 804c178:	b480      	push	{r7}
 804c17a:	b083      	sub	sp, #12
 804c17c:	af00      	add	r7, sp, #0
 804c17e:	4603      	mov	r3, r0
 804c180:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 804c182:	79fb      	ldrb	r3, [r7, #7]
 804c184:	091b      	lsrs	r3, r3, #4
 804c186:	b2db      	uxtb	r3, r3
 804c188:	461a      	mov	r2, r3
 804c18a:	0092      	lsls	r2, r2, #2
 804c18c:	4413      	add	r3, r2
 804c18e:	005b      	lsls	r3, r3, #1
 804c190:	b2da      	uxtb	r2, r3
 804c192:	79fb      	ldrb	r3, [r7, #7]
 804c194:	f003 030f 	and.w	r3, r3, #15
 804c198:	b2db      	uxtb	r3, r3
 804c19a:	4413      	add	r3, r2
 804c19c:	b2db      	uxtb	r3, r3
}
 804c19e:	4618      	mov	r0, r3
 804c1a0:	370c      	adds	r7, #12
 804c1a2:	46bd      	mov	sp, r7
 804c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c1a8:	4770      	bx	lr
	...

0804c1ac <dec2bcd>:

static inline uint8_t dec2bcd(uint8_t dec)
{
 804c1ac:	b480      	push	{r7}
 804c1ae:	b083      	sub	sp, #12
 804c1b0:	af00      	add	r7, sp, #0
 804c1b2:	4603      	mov	r3, r0
 804c1b4:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 804c1b6:	79fb      	ldrb	r3, [r7, #7]
 804c1b8:	4a0e      	ldr	r2, [pc, #56]	@ (804c1f4 <dec2bcd+0x48>)
 804c1ba:	fba2 2303 	umull	r2, r3, r2, r3
 804c1be:	08db      	lsrs	r3, r3, #3
 804c1c0:	b2db      	uxtb	r3, r3
 804c1c2:	b25b      	sxtb	r3, r3
 804c1c4:	011b      	lsls	r3, r3, #4
 804c1c6:	b258      	sxtb	r0, r3
 804c1c8:	79fa      	ldrb	r2, [r7, #7]
 804c1ca:	4b0a      	ldr	r3, [pc, #40]	@ (804c1f4 <dec2bcd+0x48>)
 804c1cc:	fba3 1302 	umull	r1, r3, r3, r2
 804c1d0:	08d9      	lsrs	r1, r3, #3
 804c1d2:	460b      	mov	r3, r1
 804c1d4:	009b      	lsls	r3, r3, #2
 804c1d6:	440b      	add	r3, r1
 804c1d8:	005b      	lsls	r3, r3, #1
 804c1da:	1ad3      	subs	r3, r2, r3
 804c1dc:	b2db      	uxtb	r3, r3
 804c1de:	b25b      	sxtb	r3, r3
 804c1e0:	4303      	orrs	r3, r0
 804c1e2:	b25b      	sxtb	r3, r3
 804c1e4:	b2db      	uxtb	r3, r3
}
 804c1e6:	4618      	mov	r0, r3
 804c1e8:	370c      	adds	r7, #12
 804c1ea:	46bd      	mov	sp, r7
 804c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c1f0:	4770      	bx	lr
 804c1f2:	bf00      	nop
 804c1f4:	cccccccd 	.word	0xcccccccd

0804c1f8 <RV3129_Driver_Init>:


RV3129_HandleTypeDef* RV3129_Driver_Init(I2C_TypeDef *i2c_instance)
{
 804c1f8:	b480      	push	{r7}
 804c1fa:	b083      	sub	sp, #12
 804c1fc:	af00      	add	r7, sp, #0
 804c1fe:	6078      	str	r0, [r7, #4]
    static LL_I2C_HandleTypeDef ll_i2c_handle;
    ll_i2c_handle.Instance = i2c_instance;
 804c200:	4a0a      	ldr	r2, [pc, #40]	@ (804c22c <RV3129_Driver_Init+0x34>)
 804c202:	687b      	ldr	r3, [r7, #4]
 804c204:	6013      	str	r3, [r2, #0]
    ll_i2c_handle.State = I2C_STATE_READY;
 804c206:	4b09      	ldr	r3, [pc, #36]	@ (804c22c <RV3129_Driver_Init+0x34>)
 804c208:	2201      	movs	r2, #1
 804c20a:	729a      	strb	r2, [r3, #10]
    ll_i2c_handle.Process = I2C_DONE;
 804c20c:	4b07      	ldr	r3, [pc, #28]	@ (804c22c <RV3129_Driver_Init+0x34>)
 804c20e:	2210      	movs	r2, #16
 804c210:	72da      	strb	r2, [r3, #11]

    hrtc_local.rtc_i2c = &ll_i2c_handle;
 804c212:	4b07      	ldr	r3, [pc, #28]	@ (804c230 <RV3129_Driver_Init+0x38>)
 804c214:	4a05      	ldr	r2, [pc, #20]	@ (804c22c <RV3129_Driver_Init+0x34>)
 804c216:	601a      	str	r2, [r3, #0]
    hrtc_local.address = RV3129_ADDR;
 804c218:	4b05      	ldr	r3, [pc, #20]	@ (804c230 <RV3129_Driver_Init+0x38>)
 804c21a:	2256      	movs	r2, #86	@ 0x56
 804c21c:	711a      	strb	r2, [r3, #4]

    return &hrtc_local;
 804c21e:	4b04      	ldr	r3, [pc, #16]	@ (804c230 <RV3129_Driver_Init+0x38>)
}
 804c220:	4618      	mov	r0, r3
 804c222:	370c      	adds	r7, #12
 804c224:	46bd      	mov	sp, r7
 804c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c22a:	4770      	bx	lr
 804c22c:	2402d578 	.word	0x2402d578
 804c230:	2402d570 	.word	0x2402d570

0804c234 <RV3129_GetHandle>:

RV3129_HandleTypeDef* RV3129_GetHandle(void)
{
 804c234:	b480      	push	{r7}
 804c236:	af00      	add	r7, sp, #0
    return &hrtc_local;
 804c238:	4b02      	ldr	r3, [pc, #8]	@ (804c244 <RV3129_GetHandle+0x10>)
}
 804c23a:	4618      	mov	r0, r3
 804c23c:	46bd      	mov	sp, r7
 804c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c242:	4770      	bx	lr
 804c244:	2402d570 	.word	0x2402d570

0804c248 <RV3129_GetTime>:

Std_ReturnType RV3129_GetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 804c248:	b580      	push	{r7, lr}
 804c24a:	b086      	sub	sp, #24
 804c24c:	af02      	add	r7, sp, #8
 804c24e:	6078      	str	r0, [r7, #4]
 804c250:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 804c252:	687b      	ldr	r3, [r7, #4]
 804c254:	6818      	ldr	r0, [r3, #0]
 804c256:	687b      	ldr	r3, [r7, #4]
 804c258:	7919      	ldrb	r1, [r3, #4]
 804c25a:	f107 0308 	add.w	r3, r7, #8
 804c25e:	2207      	movs	r2, #7
 804c260:	9200      	str	r2, [sp, #0]
 804c262:	2208      	movs	r2, #8
 804c264:	f7f5 fca4 	bl	8041bb0 <I2C_Read>
 804c268:	4603      	mov	r3, r0
 804c26a:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 804c26c:	7bfb      	ldrb	r3, [r7, #15]
 804c26e:	2b00      	cmp	r3, #0
 804c270:	d001      	beq.n	804c276 <RV3129_GetTime+0x2e>
    {
        return status;
 804c272:	7bfb      	ldrb	r3, [r7, #15]
 804c274:	e030      	b.n	804c2d8 <RV3129_GetTime+0x90>
    }

    datetime->second = bcd2dec(buffer[0]);
 804c276:	7a3b      	ldrb	r3, [r7, #8]
 804c278:	4618      	mov	r0, r3
 804c27a:	f7ff ff7d 	bl	804c178 <bcd2dec>
 804c27e:	4603      	mov	r3, r0
 804c280:	461a      	mov	r2, r3
 804c282:	683b      	ldr	r3, [r7, #0]
 804c284:	715a      	strb	r2, [r3, #5]
    datetime->minute = bcd2dec(buffer[1]);
 804c286:	7a7b      	ldrb	r3, [r7, #9]
 804c288:	4618      	mov	r0, r3
 804c28a:	f7ff ff75 	bl	804c178 <bcd2dec>
 804c28e:	4603      	mov	r3, r0
 804c290:	461a      	mov	r2, r3
 804c292:	683b      	ldr	r3, [r7, #0]
 804c294:	711a      	strb	r2, [r3, #4]
    datetime->hour   = bcd2dec(buffer[2]);
 804c296:	7abb      	ldrb	r3, [r7, #10]
 804c298:	4618      	mov	r0, r3
 804c29a:	f7ff ff6d 	bl	804c178 <bcd2dec>
 804c29e:	4603      	mov	r3, r0
 804c2a0:	461a      	mov	r2, r3
 804c2a2:	683b      	ldr	r3, [r7, #0]
 804c2a4:	70da      	strb	r2, [r3, #3]
    datetime->day    = bcd2dec(buffer[3]);
 804c2a6:	7afb      	ldrb	r3, [r7, #11]
 804c2a8:	4618      	mov	r0, r3
 804c2aa:	f7ff ff65 	bl	804c178 <bcd2dec>
 804c2ae:	4603      	mov	r3, r0
 804c2b0:	461a      	mov	r2, r3
 804c2b2:	683b      	ldr	r3, [r7, #0]
 804c2b4:	701a      	strb	r2, [r3, #0]
    datetime->month  = bcd2dec(buffer[5]);
 804c2b6:	7b7b      	ldrb	r3, [r7, #13]
 804c2b8:	4618      	mov	r0, r3
 804c2ba:	f7ff ff5d 	bl	804c178 <bcd2dec>
 804c2be:	4603      	mov	r3, r0
 804c2c0:	461a      	mov	r2, r3
 804c2c2:	683b      	ldr	r3, [r7, #0]
 804c2c4:	705a      	strb	r2, [r3, #1]
    datetime->year   = bcd2dec(buffer[6]);
 804c2c6:	7bbb      	ldrb	r3, [r7, #14]
 804c2c8:	4618      	mov	r0, r3
 804c2ca:	f7ff ff55 	bl	804c178 <bcd2dec>
 804c2ce:	4603      	mov	r3, r0
 804c2d0:	461a      	mov	r2, r3
 804c2d2:	683b      	ldr	r3, [r7, #0]
 804c2d4:	709a      	strb	r2, [r3, #2]

    return E_OK;
 804c2d6:	2300      	movs	r3, #0
}
 804c2d8:	4618      	mov	r0, r3
 804c2da:	3710      	adds	r7, #16
 804c2dc:	46bd      	mov	sp, r7
 804c2de:	bd80      	pop	{r7, pc}

0804c2e0 <RV3129_SetTime>:

Std_ReturnType RV3129_SetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 804c2e0:	b580      	push	{r7, lr}
 804c2e2:	b086      	sub	sp, #24
 804c2e4:	af02      	add	r7, sp, #8
 804c2e6:	6078      	str	r0, [r7, #4]
 804c2e8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];

    buffer[0] = dec2bcd(datetime->second);
 804c2ea:	683b      	ldr	r3, [r7, #0]
 804c2ec:	795b      	ldrb	r3, [r3, #5]
 804c2ee:	4618      	mov	r0, r3
 804c2f0:	f7ff ff5c 	bl	804c1ac <dec2bcd>
 804c2f4:	4603      	mov	r3, r0
 804c2f6:	723b      	strb	r3, [r7, #8]
    buffer[1] = dec2bcd(datetime->minute);
 804c2f8:	683b      	ldr	r3, [r7, #0]
 804c2fa:	791b      	ldrb	r3, [r3, #4]
 804c2fc:	4618      	mov	r0, r3
 804c2fe:	f7ff ff55 	bl	804c1ac <dec2bcd>
 804c302:	4603      	mov	r3, r0
 804c304:	727b      	strb	r3, [r7, #9]
    buffer[2] = dec2bcd(datetime->hour);
 804c306:	683b      	ldr	r3, [r7, #0]
 804c308:	78db      	ldrb	r3, [r3, #3]
 804c30a:	4618      	mov	r0, r3
 804c30c:	f7ff ff4e 	bl	804c1ac <dec2bcd>
 804c310:	4603      	mov	r3, r0
 804c312:	72bb      	strb	r3, [r7, #10]
    buffer[3] = dec2bcd(datetime->day);
 804c314:	683b      	ldr	r3, [r7, #0]
 804c316:	781b      	ldrb	r3, [r3, #0]
 804c318:	4618      	mov	r0, r3
 804c31a:	f7ff ff47 	bl	804c1ac <dec2bcd>
 804c31e:	4603      	mov	r3, r0
 804c320:	72fb      	strb	r3, [r7, #11]
    buffer[4] = dec2bcd(1);
 804c322:	2001      	movs	r0, #1
 804c324:	f7ff ff42 	bl	804c1ac <dec2bcd>
 804c328:	4603      	mov	r3, r0
 804c32a:	733b      	strb	r3, [r7, #12]
    buffer[5] = dec2bcd(datetime->month);
 804c32c:	683b      	ldr	r3, [r7, #0]
 804c32e:	785b      	ldrb	r3, [r3, #1]
 804c330:	4618      	mov	r0, r3
 804c332:	f7ff ff3b 	bl	804c1ac <dec2bcd>
 804c336:	4603      	mov	r3, r0
 804c338:	737b      	strb	r3, [r7, #13]
    buffer[6] = dec2bcd(datetime->year);
 804c33a:	683b      	ldr	r3, [r7, #0]
 804c33c:	789b      	ldrb	r3, [r3, #2]
 804c33e:	4618      	mov	r0, r3
 804c340:	f7ff ff34 	bl	804c1ac <dec2bcd>
 804c344:	4603      	mov	r3, r0
 804c346:	73bb      	strb	r3, [r7, #14]

    return I2C_Write(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 804c348:	687b      	ldr	r3, [r7, #4]
 804c34a:	6818      	ldr	r0, [r3, #0]
 804c34c:	687b      	ldr	r3, [r7, #4]
 804c34e:	7919      	ldrb	r1, [r3, #4]
 804c350:	f107 0308 	add.w	r3, r7, #8
 804c354:	2207      	movs	r2, #7
 804c356:	9200      	str	r2, [sp, #0]
 804c358:	2208      	movs	r2, #8
 804c35a:	f7f5 fb71 	bl	8041a40 <I2C_Write>
 804c35e:	4603      	mov	r3, r0
}
 804c360:	4618      	mov	r0, r3
 804c362:	3710      	adds	r7, #16
 804c364:	46bd      	mov	sp, r7
 804c366:	bd80      	pop	{r7, pc}

0804c368 <RV3129_GetTemp>:

Std_ReturnType RV3129_GetTemp(RV3129_HandleTypeDef *hrtc, int16_t *pTemp)
{
 804c368:	b580      	push	{r7, lr}
 804c36a:	b086      	sub	sp, #24
 804c36c:	af02      	add	r7, sp, #8
 804c36e:	6078      	str	r0, [r7, #4]
 804c370:	6039      	str	r1, [r7, #0]
    uint8_t temp;
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_TEMP, &temp, 1);
 804c372:	687b      	ldr	r3, [r7, #4]
 804c374:	6818      	ldr	r0, [r3, #0]
 804c376:	687b      	ldr	r3, [r7, #4]
 804c378:	7919      	ldrb	r1, [r3, #4]
 804c37a:	f107 030e 	add.w	r3, r7, #14
 804c37e:	2201      	movs	r2, #1
 804c380:	9200      	str	r2, [sp, #0]
 804c382:	2220      	movs	r2, #32
 804c384:	f7f5 fc14 	bl	8041bb0 <I2C_Read>
 804c388:	4603      	mov	r3, r0
 804c38a:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 804c38c:	7bfb      	ldrb	r3, [r7, #15]
 804c38e:	2b00      	cmp	r3, #0
 804c390:	d001      	beq.n	804c396 <RV3129_GetTemp+0x2e>
    {
        return status;
 804c392:	7bfb      	ldrb	r3, [r7, #15]
 804c394:	e007      	b.n	804c3a6 <RV3129_GetTemp+0x3e>
    }
    *pTemp = (int8_t)(temp - OFFSET_TEMP);
 804c396:	7bbb      	ldrb	r3, [r7, #14]
 804c398:	3b3c      	subs	r3, #60	@ 0x3c
 804c39a:	b2db      	uxtb	r3, r3
 804c39c:	b25b      	sxtb	r3, r3
 804c39e:	461a      	mov	r2, r3
 804c3a0:	683b      	ldr	r3, [r7, #0]
 804c3a2:	801a      	strh	r2, [r3, #0]
    return E_OK;
 804c3a4:	2300      	movs	r3, #0
}
 804c3a6:	4618      	mov	r0, r3
 804c3a8:	3710      	adds	r7, #16
 804c3aa:	46bd      	mov	sp, r7
 804c3ac:	bd80      	pop	{r7, pc}

0804c3ae <LL_GPIO_SetOutputPin>:
{
 804c3ae:	b480      	push	{r7}
 804c3b0:	b083      	sub	sp, #12
 804c3b2:	af00      	add	r7, sp, #0
 804c3b4:	6078      	str	r0, [r7, #4]
 804c3b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 804c3b8:	687b      	ldr	r3, [r7, #4]
 804c3ba:	683a      	ldr	r2, [r7, #0]
 804c3bc:	619a      	str	r2, [r3, #24]
}
 804c3be:	bf00      	nop
 804c3c0:	370c      	adds	r7, #12
 804c3c2:	46bd      	mov	sp, r7
 804c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c3c8:	4770      	bx	lr

0804c3ca <LL_GPIO_ResetOutputPin>:
{
 804c3ca:	b480      	push	{r7}
 804c3cc:	b083      	sub	sp, #12
 804c3ce:	af00      	add	r7, sp, #0
 804c3d0:	6078      	str	r0, [r7, #4]
 804c3d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 804c3d4:	683b      	ldr	r3, [r7, #0]
 804c3d6:	041a      	lsls	r2, r3, #16
 804c3d8:	687b      	ldr	r3, [r7, #4]
 804c3da:	619a      	str	r2, [r3, #24]
}
 804c3dc:	bf00      	nop
 804c3de:	370c      	adds	r7, #12
 804c3e0:	46bd      	mov	sp, r7
 804c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c3e6:	4770      	bx	lr

0804c3e8 <Watchdog_Device_Init>:
#include "wd_tpl5010.h"

static Watchdog_StateEnum currentState = WATCHDOG_STATE_LOW;

Std_ReturnType Watchdog_Device_Init(void)
{
 804c3e8:	b580      	push	{r7, lr}
 804c3ea:	af00      	add	r7, sp, #0
    currentState = WATCHDOG_STATE_LOW;
 804c3ec:	4b04      	ldr	r3, [pc, #16]	@ (804c400 <Watchdog_Device_Init+0x18>)
 804c3ee:	2200      	movs	r2, #0
 804c3f0:	701a      	strb	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 804c3f2:	2180      	movs	r1, #128	@ 0x80
 804c3f4:	4803      	ldr	r0, [pc, #12]	@ (804c404 <Watchdog_Device_Init+0x1c>)
 804c3f6:	f7ff ffe8 	bl	804c3ca <LL_GPIO_ResetOutputPin>
    return E_OK;
 804c3fa:	2300      	movs	r3, #0
}
 804c3fc:	4618      	mov	r0, r3
 804c3fe:	bd80      	pop	{r7, pc}
 804c400:	2402d588 	.word	0x2402d588
 804c404:	58020c00 	.word	0x58020c00

0804c408 <Watchdog_Device_Update>:

void Watchdog_Device_Update(void)
{
 804c408:	b580      	push	{r7, lr}
 804c40a:	af00      	add	r7, sp, #0
    if(currentState == WATCHDOG_STATE_LOW)
 804c40c:	4b0a      	ldr	r3, [pc, #40]	@ (804c438 <Watchdog_Device_Update+0x30>)
 804c40e:	781b      	ldrb	r3, [r3, #0]
 804c410:	2b00      	cmp	r3, #0
 804c412:	d107      	bne.n	804c424 <Watchdog_Device_Update+0x1c>
    {
        currentState = WATCHDOG_STATE_HIGH;
 804c414:	4b08      	ldr	r3, [pc, #32]	@ (804c438 <Watchdog_Device_Update+0x30>)
 804c416:	2201      	movs	r2, #1
 804c418:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(WD_Done_Port, WD_Done_Pin);
 804c41a:	2180      	movs	r1, #128	@ 0x80
 804c41c:	4807      	ldr	r0, [pc, #28]	@ (804c43c <Watchdog_Device_Update+0x34>)
 804c41e:	f7ff ffc6 	bl	804c3ae <LL_GPIO_SetOutputPin>
    else
    {
        currentState = WATCHDOG_STATE_LOW;
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
    }
}
 804c422:	e006      	b.n	804c432 <Watchdog_Device_Update+0x2a>
        currentState = WATCHDOG_STATE_LOW;
 804c424:	4b04      	ldr	r3, [pc, #16]	@ (804c438 <Watchdog_Device_Update+0x30>)
 804c426:	2200      	movs	r2, #0
 804c428:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 804c42a:	2180      	movs	r1, #128	@ 0x80
 804c42c:	4803      	ldr	r0, [pc, #12]	@ (804c43c <Watchdog_Device_Update+0x34>)
 804c42e:	f7ff ffcc 	bl	804c3ca <LL_GPIO_ResetOutputPin>
}
 804c432:	bf00      	nop
 804c434:	bd80      	pop	{r7, pc}
 804c436:	bf00      	nop
 804c438:	2402d588 	.word	0x2402d588
 804c43c:	58020c00 	.word	0x58020c00

0804c440 <Watchdog_Device_GetState>:

Watchdog_StateEnum Watchdog_Device_GetState(void)
{
 804c440:	b480      	push	{r7}
 804c442:	af00      	add	r7, sp, #0
    return currentState;
 804c444:	4b03      	ldr	r3, [pc, #12]	@ (804c454 <Watchdog_Device_GetState+0x14>)
 804c446:	781b      	ldrb	r3, [r3, #0]
}
 804c448:	4618      	mov	r0, r3
 804c44a:	46bd      	mov	sp, r7
 804c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c450:	4770      	bx	lr
 804c452:	bf00      	nop
 804c454:	2402d588 	.word	0x2402d588

0804c458 <LL_GPIO_SetOutputPin>:
{
 804c458:	b480      	push	{r7}
 804c45a:	b083      	sub	sp, #12
 804c45c:	af00      	add	r7, sp, #0
 804c45e:	6078      	str	r0, [r7, #4]
 804c460:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 804c462:	687b      	ldr	r3, [r7, #4]
 804c464:	683a      	ldr	r2, [r7, #0]
 804c466:	619a      	str	r2, [r3, #24]
}
 804c468:	bf00      	nop
 804c46a:	370c      	adds	r7, #12
 804c46c:	46bd      	mov	sp, r7
 804c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c472:	4770      	bx	lr

0804c474 <LL_GPIO_ResetOutputPin>:
{
 804c474:	b480      	push	{r7}
 804c476:	b083      	sub	sp, #12
 804c478:	af00      	add	r7, sp, #0
 804c47a:	6078      	str	r0, [r7, #4]
 804c47c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 804c47e:	683b      	ldr	r3, [r7, #0]
 804c480:	041a      	lsls	r2, r3, #16
 804c482:	687b      	ldr	r3, [r7, #4]
 804c484:	619a      	str	r2, [r3, #24]
}
 804c486:	bf00      	nop
 804c488:	370c      	adds	r7, #12
 804c48a:	46bd      	mov	sp, r7
 804c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c490:	4770      	bx	lr
	...

0804c494 <FRAM_SPI_GetHandle>:
#define FRAM_SLEEP  0xB9   // Sleep mode

static FRAM_SPI_HandleTypeDef hfram_instance;

FRAM_SPI_HandleTypeDef* FRAM_SPI_GetHandle(void)
{
 804c494:	b480      	push	{r7}
 804c496:	af00      	add	r7, sp, #0
    return &hfram_instance;
 804c498:	4b02      	ldr	r3, [pc, #8]	@ (804c4a4 <FRAM_SPI_GetHandle+0x10>)
}
 804c49a:	4618      	mov	r0, r3
 804c49c:	46bd      	mov	sp, r7
 804c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c4a2:	4770      	bx	lr
 804c4a4:	2402d58c 	.word	0x2402d58c

0804c4a8 <FRAM_SPI_Driver_Init>:

void FRAM_SPI_Driver_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 804c4a8:	b580      	push	{r7, lr}
 804c4aa:	b084      	sub	sp, #16
 804c4ac:	af00      	add	r7, sp, #0
 804c4ae:	60f8      	str	r0, [r7, #12]
 804c4b0:	60b9      	str	r1, [r7, #8]
 804c4b2:	4613      	mov	r3, r2
 804c4b4:	80fb      	strh	r3, [r7, #6]
    hfram_instance.SPIx = SPIx;
 804c4b6:	4a09      	ldr	r2, [pc, #36]	@ (804c4dc <FRAM_SPI_Driver_Init+0x34>)
 804c4b8:	68fb      	ldr	r3, [r7, #12]
 804c4ba:	6013      	str	r3, [r2, #0]
    hfram_instance.CS_Port = CS_Port;
 804c4bc:	4a07      	ldr	r2, [pc, #28]	@ (804c4dc <FRAM_SPI_Driver_Init+0x34>)
 804c4be:	68bb      	ldr	r3, [r7, #8]
 804c4c0:	6053      	str	r3, [r2, #4]
    hfram_instance.CS_Pin = CS_Pin;
 804c4c2:	4a06      	ldr	r2, [pc, #24]	@ (804c4dc <FRAM_SPI_Driver_Init+0x34>)
 804c4c4:	88fb      	ldrh	r3, [r7, #6]
 804c4c6:	8113      	strh	r3, [r2, #8]

    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 804c4c8:	88fb      	ldrh	r3, [r7, #6]
 804c4ca:	4619      	mov	r1, r3
 804c4cc:	68b8      	ldr	r0, [r7, #8]
 804c4ce:	f7ff ffc3 	bl	804c458 <LL_GPIO_SetOutputPin>
}
 804c4d2:	bf00      	nop
 804c4d4:	3710      	adds	r7, #16
 804c4d6:	46bd      	mov	sp, r7
 804c4d8:	bd80      	pop	{r7, pc}
 804c4da:	bf00      	nop
 804c4dc:	2402d58c 	.word	0x2402d58c

0804c4e0 <FRAM_SPI_WriteEnable>:

Std_ReturnType FRAM_SPI_WriteEnable(FRAM_SPI_HandleTypeDef *hfram)
{
 804c4e0:	b580      	push	{r7, lr}
 804c4e2:	b084      	sub	sp, #16
 804c4e4:	af00      	add	r7, sp, #0
 804c4e6:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c4e8:	687b      	ldr	r3, [r7, #4]
 804c4ea:	685a      	ldr	r2, [r3, #4]
 804c4ec:	687b      	ldr	r3, [r7, #4]
 804c4ee:	891b      	ldrh	r3, [r3, #8]
 804c4f0:	4619      	mov	r1, r3
 804c4f2:	4610      	mov	r0, r2
 804c4f4:	f7ff ffbe 	bl	804c474 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WREN);
 804c4f8:	687b      	ldr	r3, [r7, #4]
 804c4fa:	681b      	ldr	r3, [r3, #0]
 804c4fc:	2106      	movs	r1, #6
 804c4fe:	4618      	mov	r0, r3
 804c500:	f7f5 fd7c 	bl	8041ffc <SPI_Driver_Write>
 804c504:	4603      	mov	r3, r0
 804c506:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c508:	687b      	ldr	r3, [r7, #4]
 804c50a:	685a      	ldr	r2, [r3, #4]
 804c50c:	687b      	ldr	r3, [r7, #4]
 804c50e:	891b      	ldrh	r3, [r3, #8]
 804c510:	4619      	mov	r1, r3
 804c512:	4610      	mov	r0, r2
 804c514:	f7ff ffa0 	bl	804c458 <LL_GPIO_SetOutputPin>

    return status;
 804c518:	7bfb      	ldrb	r3, [r7, #15]
}
 804c51a:	4618      	mov	r0, r3
 804c51c:	3710      	adds	r7, #16
 804c51e:	46bd      	mov	sp, r7
 804c520:	bd80      	pop	{r7, pc}

0804c522 <FRAM_SPI_WriteDisable>:

Std_ReturnType FRAM_SPI_WriteDisable(FRAM_SPI_HandleTypeDef *hfram)
{
 804c522:	b580      	push	{r7, lr}
 804c524:	b084      	sub	sp, #16
 804c526:	af00      	add	r7, sp, #0
 804c528:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c52a:	687b      	ldr	r3, [r7, #4]
 804c52c:	685a      	ldr	r2, [r3, #4]
 804c52e:	687b      	ldr	r3, [r7, #4]
 804c530:	891b      	ldrh	r3, [r3, #8]
 804c532:	4619      	mov	r1, r3
 804c534:	4610      	mov	r0, r2
 804c536:	f7ff ff9d 	bl	804c474 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRDI);
 804c53a:	687b      	ldr	r3, [r7, #4]
 804c53c:	681b      	ldr	r3, [r3, #0]
 804c53e:	2104      	movs	r1, #4
 804c540:	4618      	mov	r0, r3
 804c542:	f7f5 fd5b 	bl	8041ffc <SPI_Driver_Write>
 804c546:	4603      	mov	r3, r0
 804c548:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c54a:	687b      	ldr	r3, [r7, #4]
 804c54c:	685a      	ldr	r2, [r3, #4]
 804c54e:	687b      	ldr	r3, [r7, #4]
 804c550:	891b      	ldrh	r3, [r3, #8]
 804c552:	4619      	mov	r1, r3
 804c554:	4610      	mov	r0, r2
 804c556:	f7ff ff7f 	bl	804c458 <LL_GPIO_SetOutputPin>

    return status;
 804c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 804c55c:	4618      	mov	r0, r3
 804c55e:	3710      	adds	r7, #16
 804c560:	46bd      	mov	sp, r7
 804c562:	bd80      	pop	{r7, pc}

0804c564 <FRAM_SPI_WriteMem>:

Std_ReturnType FRAM_SPI_WriteMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 804c564:	b580      	push	{r7, lr}
 804c566:	b088      	sub	sp, #32
 804c568:	af00      	add	r7, sp, #0
 804c56a:	60f8      	str	r0, [r7, #12]
 804c56c:	60b9      	str	r1, [r7, #8]
 804c56e:	607a      	str	r2, [r7, #4]
 804c570:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 804c572:	68bb      	ldr	r3, [r7, #8]
 804c574:	0c1b      	lsrs	r3, r3, #16
 804c576:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c578:	753b      	strb	r3, [r7, #20]
        (uint8_t)((addr >> 8) & 0xFF),
 804c57a:	68bb      	ldr	r3, [r7, #8]
 804c57c:	0a1b      	lsrs	r3, r3, #8
 804c57e:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c580:	757b      	strb	r3, [r7, #21]
        (uint8_t)(addr & 0xFF)
 804c582:	68bb      	ldr	r3, [r7, #8]
 804c584:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c586:	75bb      	strb	r3, [r7, #22]
    };

    status = FRAM_SPI_WriteEnable(hfram);
 804c588:	68f8      	ldr	r0, [r7, #12]
 804c58a:	f7ff ffa9 	bl	804c4e0 <FRAM_SPI_WriteEnable>
 804c58e:	4603      	mov	r3, r0
 804c590:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) return status;
 804c592:	7dfb      	ldrb	r3, [r7, #23]
 804c594:	2b00      	cmp	r3, #0
 804c596:	d001      	beq.n	804c59c <FRAM_SPI_WriteMem+0x38>
 804c598:	7dfb      	ldrb	r3, [r7, #23]
 804c59a:	e06e      	b.n	804c67a <FRAM_SPI_WriteMem+0x116>

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c59c:	68fb      	ldr	r3, [r7, #12]
 804c59e:	685a      	ldr	r2, [r3, #4]
 804c5a0:	68fb      	ldr	r3, [r7, #12]
 804c5a2:	891b      	ldrh	r3, [r3, #8]
 804c5a4:	4619      	mov	r1, r3
 804c5a6:	4610      	mov	r0, r2
 804c5a8:	f7ff ff64 	bl	804c474 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRITE);
 804c5ac:	68fb      	ldr	r3, [r7, #12]
 804c5ae:	681b      	ldr	r3, [r3, #0]
 804c5b0:	2102      	movs	r1, #2
 804c5b2:	4618      	mov	r0, r3
 804c5b4:	f7f5 fd22 	bl	8041ffc <SPI_Driver_Write>
 804c5b8:	4603      	mov	r3, r0
 804c5ba:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) {
 804c5bc:	7dfb      	ldrb	r3, [r7, #23]
 804c5be:	2b00      	cmp	r3, #0
 804c5c0:	d009      	beq.n	804c5d6 <FRAM_SPI_WriteMem+0x72>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c5c2:	68fb      	ldr	r3, [r7, #12]
 804c5c4:	685a      	ldr	r2, [r3, #4]
 804c5c6:	68fb      	ldr	r3, [r7, #12]
 804c5c8:	891b      	ldrh	r3, [r3, #8]
 804c5ca:	4619      	mov	r1, r3
 804c5cc:	4610      	mov	r0, r2
 804c5ce:	f7ff ff43 	bl	804c458 <LL_GPIO_SetOutputPin>
        return status;
 804c5d2:	7dfb      	ldrb	r3, [r7, #23]
 804c5d4:	e051      	b.n	804c67a <FRAM_SPI_WriteMem+0x116>
    }

    for (int i = 0; i < 3; i++)
 804c5d6:	2300      	movs	r3, #0
 804c5d8:	61fb      	str	r3, [r7, #28]
 804c5da:	e01b      	b.n	804c614 <FRAM_SPI_WriteMem+0xb0>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 804c5dc:	68fb      	ldr	r3, [r7, #12]
 804c5de:	6818      	ldr	r0, [r3, #0]
 804c5e0:	f107 0214 	add.w	r2, r7, #20
 804c5e4:	69fb      	ldr	r3, [r7, #28]
 804c5e6:	4413      	add	r3, r2
 804c5e8:	781b      	ldrb	r3, [r3, #0]
 804c5ea:	4619      	mov	r1, r3
 804c5ec:	f7f5 fd06 	bl	8041ffc <SPI_Driver_Write>
 804c5f0:	4603      	mov	r3, r0
 804c5f2:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 804c5f4:	7dfb      	ldrb	r3, [r7, #23]
 804c5f6:	2b00      	cmp	r3, #0
 804c5f8:	d009      	beq.n	804c60e <FRAM_SPI_WriteMem+0xaa>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c5fa:	68fb      	ldr	r3, [r7, #12]
 804c5fc:	685a      	ldr	r2, [r3, #4]
 804c5fe:	68fb      	ldr	r3, [r7, #12]
 804c600:	891b      	ldrh	r3, [r3, #8]
 804c602:	4619      	mov	r1, r3
 804c604:	4610      	mov	r0, r2
 804c606:	f7ff ff27 	bl	804c458 <LL_GPIO_SetOutputPin>
            return status;
 804c60a:	7dfb      	ldrb	r3, [r7, #23]
 804c60c:	e035      	b.n	804c67a <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < 3; i++)
 804c60e:	69fb      	ldr	r3, [r7, #28]
 804c610:	3301      	adds	r3, #1
 804c612:	61fb      	str	r3, [r7, #28]
 804c614:	69fb      	ldr	r3, [r7, #28]
 804c616:	2b02      	cmp	r3, #2
 804c618:	dde0      	ble.n	804c5dc <FRAM_SPI_WriteMem+0x78>
        }
    }

    for (int i = 0; i < len; i++)
 804c61a:	2300      	movs	r3, #0
 804c61c:	61bb      	str	r3, [r7, #24]
 804c61e:	e01a      	b.n	804c656 <FRAM_SPI_WriteMem+0xf2>
    {
        status = SPI_Driver_Write(hfram->SPIx, pData[i]);
 804c620:	68fb      	ldr	r3, [r7, #12]
 804c622:	6818      	ldr	r0, [r3, #0]
 804c624:	69bb      	ldr	r3, [r7, #24]
 804c626:	687a      	ldr	r2, [r7, #4]
 804c628:	4413      	add	r3, r2
 804c62a:	781b      	ldrb	r3, [r3, #0]
 804c62c:	4619      	mov	r1, r3
 804c62e:	f7f5 fce5 	bl	8041ffc <SPI_Driver_Write>
 804c632:	4603      	mov	r3, r0
 804c634:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 804c636:	7dfb      	ldrb	r3, [r7, #23]
 804c638:	2b00      	cmp	r3, #0
 804c63a:	d009      	beq.n	804c650 <FRAM_SPI_WriteMem+0xec>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c63c:	68fb      	ldr	r3, [r7, #12]
 804c63e:	685a      	ldr	r2, [r3, #4]
 804c640:	68fb      	ldr	r3, [r7, #12]
 804c642:	891b      	ldrh	r3, [r3, #8]
 804c644:	4619      	mov	r1, r3
 804c646:	4610      	mov	r0, r2
 804c648:	f7ff ff06 	bl	804c458 <LL_GPIO_SetOutputPin>
            return status;
 804c64c:	7dfb      	ldrb	r3, [r7, #23]
 804c64e:	e014      	b.n	804c67a <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < len; i++)
 804c650:	69bb      	ldr	r3, [r7, #24]
 804c652:	3301      	adds	r3, #1
 804c654:	61bb      	str	r3, [r7, #24]
 804c656:	887b      	ldrh	r3, [r7, #2]
 804c658:	69ba      	ldr	r2, [r7, #24]
 804c65a:	429a      	cmp	r2, r3
 804c65c:	dbe0      	blt.n	804c620 <FRAM_SPI_WriteMem+0xbc>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c65e:	68fb      	ldr	r3, [r7, #12]
 804c660:	685a      	ldr	r2, [r3, #4]
 804c662:	68fb      	ldr	r3, [r7, #12]
 804c664:	891b      	ldrh	r3, [r3, #8]
 804c666:	4619      	mov	r1, r3
 804c668:	4610      	mov	r0, r2
 804c66a:	f7ff fef5 	bl	804c458 <LL_GPIO_SetOutputPin>

    status = FRAM_SPI_WriteDisable(hfram);
 804c66e:	68f8      	ldr	r0, [r7, #12]
 804c670:	f7ff ff57 	bl	804c522 <FRAM_SPI_WriteDisable>
 804c674:	4603      	mov	r3, r0
 804c676:	75fb      	strb	r3, [r7, #23]

    return status;
 804c678:	7dfb      	ldrb	r3, [r7, #23]
}
 804c67a:	4618      	mov	r0, r3
 804c67c:	3720      	adds	r7, #32
 804c67e:	46bd      	mov	sp, r7
 804c680:	bd80      	pop	{r7, pc}

0804c682 <FRAM_SPI_ReadMem>:

Std_ReturnType FRAM_SPI_ReadMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 804c682:	b580      	push	{r7, lr}
 804c684:	b088      	sub	sp, #32
 804c686:	af00      	add	r7, sp, #0
 804c688:	60f8      	str	r0, [r7, #12]
 804c68a:	60b9      	str	r1, [r7, #8]
 804c68c:	607a      	str	r2, [r7, #4]
 804c68e:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 804c690:	68bb      	ldr	r3, [r7, #8]
 804c692:	0c1b      	lsrs	r3, r3, #16
 804c694:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c696:	743b      	strb	r3, [r7, #16]
        (uint8_t)((addr >> 8) & 0xFF),
 804c698:	68bb      	ldr	r3, [r7, #8]
 804c69a:	0a1b      	lsrs	r3, r3, #8
 804c69c:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c69e:	747b      	strb	r3, [r7, #17]
        (uint8_t)(addr & 0xFF)
 804c6a0:	68bb      	ldr	r3, [r7, #8]
 804c6a2:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 804c6a4:	74bb      	strb	r3, [r7, #18]
    };

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c6a6:	68fb      	ldr	r3, [r7, #12]
 804c6a8:	685a      	ldr	r2, [r3, #4]
 804c6aa:	68fb      	ldr	r3, [r7, #12]
 804c6ac:	891b      	ldrh	r3, [r3, #8]
 804c6ae:	4619      	mov	r1, r3
 804c6b0:	4610      	mov	r0, r2
 804c6b2:	f7ff fedf 	bl	804c474 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_READ);
 804c6b6:	68fb      	ldr	r3, [r7, #12]
 804c6b8:	681b      	ldr	r3, [r3, #0]
 804c6ba:	2103      	movs	r1, #3
 804c6bc:	4618      	mov	r0, r3
 804c6be:	f7f5 fc9d 	bl	8041ffc <SPI_Driver_Write>
 804c6c2:	4603      	mov	r3, r0
 804c6c4:	77fb      	strb	r3, [r7, #31]
    if(status != E_OK) {
 804c6c6:	7ffb      	ldrb	r3, [r7, #31]
 804c6c8:	2b00      	cmp	r3, #0
 804c6ca:	d009      	beq.n	804c6e0 <FRAM_SPI_ReadMem+0x5e>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c6cc:	68fb      	ldr	r3, [r7, #12]
 804c6ce:	685a      	ldr	r2, [r3, #4]
 804c6d0:	68fb      	ldr	r3, [r7, #12]
 804c6d2:	891b      	ldrh	r3, [r3, #8]
 804c6d4:	4619      	mov	r1, r3
 804c6d6:	4610      	mov	r0, r2
 804c6d8:	f7ff febe 	bl	804c458 <LL_GPIO_SetOutputPin>
        return status;
 804c6dc:	7ffb      	ldrb	r3, [r7, #31]
 804c6de:	e04c      	b.n	804c77a <FRAM_SPI_ReadMem+0xf8>
    }

    for (int i = 0; i < 3; i++)
 804c6e0:	2300      	movs	r3, #0
 804c6e2:	61bb      	str	r3, [r7, #24]
 804c6e4:	e01b      	b.n	804c71e <FRAM_SPI_ReadMem+0x9c>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 804c6e6:	68fb      	ldr	r3, [r7, #12]
 804c6e8:	6818      	ldr	r0, [r3, #0]
 804c6ea:	f107 0210 	add.w	r2, r7, #16
 804c6ee:	69bb      	ldr	r3, [r7, #24]
 804c6f0:	4413      	add	r3, r2
 804c6f2:	781b      	ldrb	r3, [r3, #0]
 804c6f4:	4619      	mov	r1, r3
 804c6f6:	f7f5 fc81 	bl	8041ffc <SPI_Driver_Write>
 804c6fa:	4603      	mov	r3, r0
 804c6fc:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 804c6fe:	7ffb      	ldrb	r3, [r7, #31]
 804c700:	2b00      	cmp	r3, #0
 804c702:	d009      	beq.n	804c718 <FRAM_SPI_ReadMem+0x96>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c704:	68fb      	ldr	r3, [r7, #12]
 804c706:	685a      	ldr	r2, [r3, #4]
 804c708:	68fb      	ldr	r3, [r7, #12]
 804c70a:	891b      	ldrh	r3, [r3, #8]
 804c70c:	4619      	mov	r1, r3
 804c70e:	4610      	mov	r0, r2
 804c710:	f7ff fea2 	bl	804c458 <LL_GPIO_SetOutputPin>
            return status;
 804c714:	7ffb      	ldrb	r3, [r7, #31]
 804c716:	e030      	b.n	804c77a <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < 3; i++)
 804c718:	69bb      	ldr	r3, [r7, #24]
 804c71a:	3301      	adds	r3, #1
 804c71c:	61bb      	str	r3, [r7, #24]
 804c71e:	69bb      	ldr	r3, [r7, #24]
 804c720:	2b02      	cmp	r3, #2
 804c722:	dde0      	ble.n	804c6e6 <FRAM_SPI_ReadMem+0x64>
        }
    }

    for (int i = 0; i < len; i++)
 804c724:	2300      	movs	r3, #0
 804c726:	617b      	str	r3, [r7, #20]
 804c728:	e01a      	b.n	804c760 <FRAM_SPI_ReadMem+0xde>
    {
        status = SPI_Driver_Transmit8(hfram->SPIx, 0x00, &pData[i]);
 804c72a:	68fb      	ldr	r3, [r7, #12]
 804c72c:	6818      	ldr	r0, [r3, #0]
 804c72e:	697b      	ldr	r3, [r7, #20]
 804c730:	687a      	ldr	r2, [r7, #4]
 804c732:	4413      	add	r3, r2
 804c734:	461a      	mov	r2, r3
 804c736:	2100      	movs	r1, #0
 804c738:	f7f5 fc17 	bl	8041f6a <SPI_Driver_Transmit8>
 804c73c:	4603      	mov	r3, r0
 804c73e:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 804c740:	7ffb      	ldrb	r3, [r7, #31]
 804c742:	2b00      	cmp	r3, #0
 804c744:	d009      	beq.n	804c75a <FRAM_SPI_ReadMem+0xd8>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c746:	68fb      	ldr	r3, [r7, #12]
 804c748:	685a      	ldr	r2, [r3, #4]
 804c74a:	68fb      	ldr	r3, [r7, #12]
 804c74c:	891b      	ldrh	r3, [r3, #8]
 804c74e:	4619      	mov	r1, r3
 804c750:	4610      	mov	r0, r2
 804c752:	f7ff fe81 	bl	804c458 <LL_GPIO_SetOutputPin>
            return status;
 804c756:	7ffb      	ldrb	r3, [r7, #31]
 804c758:	e00f      	b.n	804c77a <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < len; i++)
 804c75a:	697b      	ldr	r3, [r7, #20]
 804c75c:	3301      	adds	r3, #1
 804c75e:	617b      	str	r3, [r7, #20]
 804c760:	887b      	ldrh	r3, [r7, #2]
 804c762:	697a      	ldr	r2, [r7, #20]
 804c764:	429a      	cmp	r2, r3
 804c766:	dbe0      	blt.n	804c72a <FRAM_SPI_ReadMem+0xa8>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 804c768:	68fb      	ldr	r3, [r7, #12]
 804c76a:	685a      	ldr	r2, [r3, #4]
 804c76c:	68fb      	ldr	r3, [r7, #12]
 804c76e:	891b      	ldrh	r3, [r3, #8]
 804c770:	4619      	mov	r1, r3
 804c772:	4610      	mov	r0, r2
 804c774:	f7ff fe70 	bl	804c458 <LL_GPIO_SetOutputPin>

    return status;
 804c778:	7ffb      	ldrb	r3, [r7, #31]
}
 804c77a:	4618      	mov	r0, r3
 804c77c:	3720      	adds	r7, #32
 804c77e:	46bd      	mov	sp, r7
 804c780:	bd80      	pop	{r7, pc}

0804c782 <LL_SPI_Enable>:
{
 804c782:	b480      	push	{r7}
 804c784:	b083      	sub	sp, #12
 804c786:	af00      	add	r7, sp, #0
 804c788:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c78a:	687b      	ldr	r3, [r7, #4]
 804c78c:	681b      	ldr	r3, [r3, #0]
 804c78e:	f043 0201 	orr.w	r2, r3, #1
 804c792:	687b      	ldr	r3, [r7, #4]
 804c794:	601a      	str	r2, [r3, #0]
}
 804c796:	bf00      	nop
 804c798:	370c      	adds	r7, #12
 804c79a:	46bd      	mov	sp, r7
 804c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7a0:	4770      	bx	lr

0804c7a2 <LL_SPI_Disable>:
{
 804c7a2:	b480      	push	{r7}
 804c7a4:	b083      	sub	sp, #12
 804c7a6:	af00      	add	r7, sp, #0
 804c7a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 804c7aa:	687b      	ldr	r3, [r7, #4]
 804c7ac:	681b      	ldr	r3, [r3, #0]
 804c7ae:	f023 0201 	bic.w	r2, r3, #1
 804c7b2:	687b      	ldr	r3, [r7, #4]
 804c7b4:	601a      	str	r2, [r3, #0]
}
 804c7b6:	bf00      	nop
 804c7b8:	370c      	adds	r7, #12
 804c7ba:	46bd      	mov	sp, r7
 804c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7c0:	4770      	bx	lr

0804c7c2 <LL_SPI_StartMasterTransfer>:
{
 804c7c2:	b480      	push	{r7}
 804c7c4:	b083      	sub	sp, #12
 804c7c6:	af00      	add	r7, sp, #0
 804c7c8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 804c7ca:	687b      	ldr	r3, [r7, #4]
 804c7cc:	681b      	ldr	r3, [r3, #0]
 804c7ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 804c7d2:	687b      	ldr	r3, [r7, #4]
 804c7d4:	601a      	str	r2, [r3, #0]
}
 804c7d6:	bf00      	nop
 804c7d8:	370c      	adds	r7, #12
 804c7da:	46bd      	mov	sp, r7
 804c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7e0:	4770      	bx	lr

0804c7e2 <LL_SPI_EnableDMAReq_RX>:
{
 804c7e2:	b480      	push	{r7}
 804c7e4:	b083      	sub	sp, #12
 804c7e6:	af00      	add	r7, sp, #0
 804c7e8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 804c7ea:	687b      	ldr	r3, [r7, #4]
 804c7ec:	689b      	ldr	r3, [r3, #8]
 804c7ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 804c7f2:	687b      	ldr	r3, [r7, #4]
 804c7f4:	609a      	str	r2, [r3, #8]
}
 804c7f6:	bf00      	nop
 804c7f8:	370c      	adds	r7, #12
 804c7fa:	46bd      	mov	sp, r7
 804c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c800:	4770      	bx	lr

0804c802 <LL_SPI_DisableDMAReq_RX>:
{
 804c802:	b480      	push	{r7}
 804c804:	b083      	sub	sp, #12
 804c806:	af00      	add	r7, sp, #0
 804c808:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 804c80a:	687b      	ldr	r3, [r7, #4]
 804c80c:	689b      	ldr	r3, [r3, #8]
 804c80e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 804c812:	687b      	ldr	r3, [r7, #4]
 804c814:	609a      	str	r2, [r3, #8]
}
 804c816:	bf00      	nop
 804c818:	370c      	adds	r7, #12
 804c81a:	46bd      	mov	sp, r7
 804c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c820:	4770      	bx	lr

0804c822 <LL_SPI_EnableDMAReq_TX>:
{
 804c822:	b480      	push	{r7}
 804c824:	b083      	sub	sp, #12
 804c826:	af00      	add	r7, sp, #0
 804c828:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 804c82a:	687b      	ldr	r3, [r7, #4]
 804c82c:	689b      	ldr	r3, [r3, #8]
 804c82e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 804c832:	687b      	ldr	r3, [r7, #4]
 804c834:	609a      	str	r2, [r3, #8]
}
 804c836:	bf00      	nop
 804c838:	370c      	adds	r7, #12
 804c83a:	46bd      	mov	sp, r7
 804c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c840:	4770      	bx	lr

0804c842 <LL_SPI_DisableDMAReq_TX>:
{
 804c842:	b480      	push	{r7}
 804c844:	b083      	sub	sp, #12
 804c846:	af00      	add	r7, sp, #0
 804c848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 804c84a:	687b      	ldr	r3, [r7, #4]
 804c84c:	689b      	ldr	r3, [r3, #8]
 804c84e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 804c852:	687b      	ldr	r3, [r7, #4]
 804c854:	609a      	str	r2, [r3, #8]
}
 804c856:	bf00      	nop
 804c858:	370c      	adds	r7, #12
 804c85a:	46bd      	mov	sp, r7
 804c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c860:	4770      	bx	lr

0804c862 <LL_GPIO_SetOutputPin>:
{
 804c862:	b480      	push	{r7}
 804c864:	b083      	sub	sp, #12
 804c866:	af00      	add	r7, sp, #0
 804c868:	6078      	str	r0, [r7, #4]
 804c86a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 804c86c:	687b      	ldr	r3, [r7, #4]
 804c86e:	683a      	ldr	r2, [r7, #0]
 804c870:	619a      	str	r2, [r3, #24]
}
 804c872:	bf00      	nop
 804c874:	370c      	adds	r7, #12
 804c876:	46bd      	mov	sp, r7
 804c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c87c:	4770      	bx	lr

0804c87e <LL_GPIO_ResetOutputPin>:
{
 804c87e:	b480      	push	{r7}
 804c880:	b083      	sub	sp, #12
 804c882:	af00      	add	r7, sp, #0
 804c884:	6078      	str	r0, [r7, #4]
 804c886:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 804c888:	683b      	ldr	r3, [r7, #0]
 804c88a:	041a      	lsls	r2, r3, #16
 804c88c:	687b      	ldr	r3, [r7, #4]
 804c88e:	619a      	str	r2, [r3, #24]
}
 804c890:	bf00      	nop
 804c892:	370c      	adds	r7, #12
 804c894:	46bd      	mov	sp, r7
 804c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c89a:	4770      	bx	lr

0804c89c <LL_BDMA_EnableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 804c89c:	b480      	push	{r7}
 804c89e:	b085      	sub	sp, #20
 804c8a0:	af00      	add	r7, sp, #0
 804c8a2:	6078      	str	r0, [r7, #4]
 804c8a4:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804c8a6:	687b      	ldr	r3, [r7, #4]
 804c8a8:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 804c8aa:	4a0c      	ldr	r2, [pc, #48]	@ (804c8dc <LL_BDMA_EnableChannel+0x40>)
 804c8ac:	683b      	ldr	r3, [r7, #0]
 804c8ae:	4413      	add	r3, r2
 804c8b0:	781b      	ldrb	r3, [r3, #0]
 804c8b2:	461a      	mov	r2, r3
 804c8b4:	68fb      	ldr	r3, [r7, #12]
 804c8b6:	4413      	add	r3, r2
 804c8b8:	681b      	ldr	r3, [r3, #0]
 804c8ba:	4908      	ldr	r1, [pc, #32]	@ (804c8dc <LL_BDMA_EnableChannel+0x40>)
 804c8bc:	683a      	ldr	r2, [r7, #0]
 804c8be:	440a      	add	r2, r1
 804c8c0:	7812      	ldrb	r2, [r2, #0]
 804c8c2:	4611      	mov	r1, r2
 804c8c4:	68fa      	ldr	r2, [r7, #12]
 804c8c6:	440a      	add	r2, r1
 804c8c8:	f043 0301 	orr.w	r3, r3, #1
 804c8cc:	6013      	str	r3, [r2, #0]
}
 804c8ce:	bf00      	nop
 804c8d0:	3714      	adds	r7, #20
 804c8d2:	46bd      	mov	sp, r7
 804c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c8d8:	4770      	bx	lr
 804c8da:	bf00      	nop
 804c8dc:	08071dcc 	.word	0x08071dcc

0804c8e0 <LL_BDMA_DisableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_DisableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 804c8e0:	b480      	push	{r7}
 804c8e2:	b085      	sub	sp, #20
 804c8e4:	af00      	add	r7, sp, #0
 804c8e6:	6078      	str	r0, [r7, #4]
 804c8e8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804c8ea:	687b      	ldr	r3, [r7, #4]
 804c8ec:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 804c8ee:	4a0c      	ldr	r2, [pc, #48]	@ (804c920 <LL_BDMA_DisableChannel+0x40>)
 804c8f0:	683b      	ldr	r3, [r7, #0]
 804c8f2:	4413      	add	r3, r2
 804c8f4:	781b      	ldrb	r3, [r3, #0]
 804c8f6:	461a      	mov	r2, r3
 804c8f8:	68fb      	ldr	r3, [r7, #12]
 804c8fa:	4413      	add	r3, r2
 804c8fc:	681b      	ldr	r3, [r3, #0]
 804c8fe:	4908      	ldr	r1, [pc, #32]	@ (804c920 <LL_BDMA_DisableChannel+0x40>)
 804c900:	683a      	ldr	r2, [r7, #0]
 804c902:	440a      	add	r2, r1
 804c904:	7812      	ldrb	r2, [r2, #0]
 804c906:	4611      	mov	r1, r2
 804c908:	68fa      	ldr	r2, [r7, #12]
 804c90a:	440a      	add	r2, r1
 804c90c:	f023 0301 	bic.w	r3, r3, #1
 804c910:	6013      	str	r3, [r2, #0]
}
 804c912:	bf00      	nop
 804c914:	3714      	adds	r7, #20
 804c916:	46bd      	mov	sp, r7
 804c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c91c:	4770      	bx	lr
 804c91e:	bf00      	nop
 804c920:	08071dcc 	.word	0x08071dcc

0804c924 <LL_BDMA_GetDataTransferDirection>:
  *         @arg @ref LL_BDMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_BDMA_GetDataTransferDirection(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 804c924:	b480      	push	{r7}
 804c926:	b085      	sub	sp, #20
 804c928:	af00      	add	r7, sp, #0
 804c92a:	6078      	str	r0, [r7, #4]
 804c92c:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804c92e:	687b      	ldr	r3, [r7, #4]
 804c930:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 804c932:	4a08      	ldr	r2, [pc, #32]	@ (804c954 <LL_BDMA_GetDataTransferDirection+0x30>)
 804c934:	683b      	ldr	r3, [r7, #0]
 804c936:	4413      	add	r3, r2
 804c938:	781b      	ldrb	r3, [r3, #0]
 804c93a:	461a      	mov	r2, r3
 804c93c:	68fb      	ldr	r3, [r7, #12]
 804c93e:	4413      	add	r3, r2
 804c940:	681a      	ldr	r2, [r3, #0]
 804c942:	f244 0310 	movw	r3, #16400	@ 0x4010
 804c946:	4013      	ands	r3, r2
                   BDMA_CCR_DIR | BDMA_CCR_MEM2MEM));
}
 804c948:	4618      	mov	r0, r3
 804c94a:	3714      	adds	r7, #20
 804c94c:	46bd      	mov	sp, r7
 804c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c952:	4770      	bx	lr
 804c954:	08071dcc 	.word	0x08071dcc

0804c958 <LL_BDMA_SetDataLength>:
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetDataLength(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t NbData)
{
 804c958:	b480      	push	{r7}
 804c95a:	b087      	sub	sp, #28
 804c95c:	af00      	add	r7, sp, #0
 804c95e:	60f8      	str	r0, [r7, #12]
 804c960:	60b9      	str	r1, [r7, #8]
 804c962:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804c964:	68fb      	ldr	r3, [r7, #12]
 804c966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CNDTR,
 804c968:	4a0d      	ldr	r2, [pc, #52]	@ (804c9a0 <LL_BDMA_SetDataLength+0x48>)
 804c96a:	68bb      	ldr	r3, [r7, #8]
 804c96c:	4413      	add	r3, r2
 804c96e:	781b      	ldrb	r3, [r3, #0]
 804c970:	461a      	mov	r2, r3
 804c972:	697b      	ldr	r3, [r7, #20]
 804c974:	4413      	add	r3, r2
 804c976:	685a      	ldr	r2, [r3, #4]
 804c978:	4b0a      	ldr	r3, [pc, #40]	@ (804c9a4 <LL_BDMA_SetDataLength+0x4c>)
 804c97a:	4013      	ands	r3, r2
 804c97c:	4908      	ldr	r1, [pc, #32]	@ (804c9a0 <LL_BDMA_SetDataLength+0x48>)
 804c97e:	68ba      	ldr	r2, [r7, #8]
 804c980:	440a      	add	r2, r1
 804c982:	7812      	ldrb	r2, [r2, #0]
 804c984:	4611      	mov	r1, r2
 804c986:	697a      	ldr	r2, [r7, #20]
 804c988:	440a      	add	r2, r1
 804c98a:	4611      	mov	r1, r2
 804c98c:	687a      	ldr	r2, [r7, #4]
 804c98e:	4313      	orrs	r3, r2
 804c990:	604b      	str	r3, [r1, #4]
             BDMA_CNDTR_NDT, NbData);
}
 804c992:	bf00      	nop
 804c994:	371c      	adds	r7, #28
 804c996:	46bd      	mov	sp, r7
 804c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c99c:	4770      	bx	lr
 804c99e:	bf00      	nop
 804c9a0:	08071dcc 	.word	0x08071dcc
 804c9a4:	ffff0000 	.word	0xffff0000

0804c9a8 <LL_BDMA_ConfigAddresses>:
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ConfigAddresses(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t SrcAddress,
                                             uint32_t DstAddress, uint32_t Direction)
{
 804c9a8:	b480      	push	{r7}
 804c9aa:	b087      	sub	sp, #28
 804c9ac:	af00      	add	r7, sp, #0
 804c9ae:	60f8      	str	r0, [r7, #12]
 804c9b0:	60b9      	str	r1, [r7, #8]
 804c9b2:	607a      	str	r2, [r7, #4]
 804c9b4:	603b      	str	r3, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804c9b6:	68fb      	ldr	r3, [r7, #12]
 804c9b8:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_BDMA_DIRECTION_MEMORY_TO_PERIPH)
 804c9ba:	6a3b      	ldr	r3, [r7, #32]
 804c9bc:	2b10      	cmp	r3, #16
 804c9be:	d114      	bne.n	804c9ea <LL_BDMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, SrcAddress);
 804c9c0:	4a17      	ldr	r2, [pc, #92]	@ (804ca20 <LL_BDMA_ConfigAddresses+0x78>)
 804c9c2:	68bb      	ldr	r3, [r7, #8]
 804c9c4:	4413      	add	r3, r2
 804c9c6:	781b      	ldrb	r3, [r3, #0]
 804c9c8:	461a      	mov	r2, r3
 804c9ca:	697b      	ldr	r3, [r7, #20]
 804c9cc:	4413      	add	r3, r2
 804c9ce:	461a      	mov	r2, r3
 804c9d0:	687b      	ldr	r3, [r7, #4]
 804c9d2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 804c9d4:	4a12      	ldr	r2, [pc, #72]	@ (804ca20 <LL_BDMA_ConfigAddresses+0x78>)
 804c9d6:	68bb      	ldr	r3, [r7, #8]
 804c9d8:	4413      	add	r3, r2
 804c9da:	781b      	ldrb	r3, [r3, #0]
 804c9dc:	461a      	mov	r2, r3
 804c9de:	697b      	ldr	r3, [r7, #20]
 804c9e0:	4413      	add	r3, r2
 804c9e2:	461a      	mov	r2, r3
 804c9e4:	683b      	ldr	r3, [r7, #0]
 804c9e6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
  }
}
 804c9e8:	e013      	b.n	804ca12 <LL_BDMA_ConfigAddresses+0x6a>
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 804c9ea:	4a0d      	ldr	r2, [pc, #52]	@ (804ca20 <LL_BDMA_ConfigAddresses+0x78>)
 804c9ec:	68bb      	ldr	r3, [r7, #8]
 804c9ee:	4413      	add	r3, r2
 804c9f0:	781b      	ldrb	r3, [r3, #0]
 804c9f2:	461a      	mov	r2, r3
 804c9f4:	697b      	ldr	r3, [r7, #20]
 804c9f6:	4413      	add	r3, r2
 804c9f8:	461a      	mov	r2, r3
 804c9fa:	687b      	ldr	r3, [r7, #4]
 804c9fc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
 804c9fe:	4a08      	ldr	r2, [pc, #32]	@ (804ca20 <LL_BDMA_ConfigAddresses+0x78>)
 804ca00:	68bb      	ldr	r3, [r7, #8]
 804ca02:	4413      	add	r3, r2
 804ca04:	781b      	ldrb	r3, [r3, #0]
 804ca06:	461a      	mov	r2, r3
 804ca08:	697b      	ldr	r3, [r7, #20]
 804ca0a:	4413      	add	r3, r2
 804ca0c:	461a      	mov	r2, r3
 804ca0e:	683b      	ldr	r3, [r7, #0]
 804ca10:	60d3      	str	r3, [r2, #12]
}
 804ca12:	bf00      	nop
 804ca14:	371c      	adds	r7, #28
 804ca16:	46bd      	mov	sp, r7
 804ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ca1c:	4770      	bx	lr
 804ca1e:	bf00      	nop
 804ca20:	08071dcc 	.word	0x08071dcc

0804ca24 <LL_BDMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetPeriphRequest(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t Request)
{
 804ca24:	b480      	push	{r7}
 804ca26:	b085      	sub	sp, #20
 804ca28:	af00      	add	r7, sp, #0
 804ca2a:	60f8      	str	r0, [r7, #12]
 804ca2c:	60b9      	str	r1, [r7, #8]
 804ca2e:	607a      	str	r2, [r7, #4]
  UNUSED(BDMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 804ca30:	68ba      	ldr	r2, [r7, #8]
 804ca32:	4b0a      	ldr	r3, [pc, #40]	@ (804ca5c <LL_BDMA_SetPeriphRequest+0x38>)
 804ca34:	4413      	add	r3, r2
 804ca36:	009b      	lsls	r3, r3, #2
 804ca38:	681b      	ldr	r3, [r3, #0]
 804ca3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 804ca3e:	68b9      	ldr	r1, [r7, #8]
 804ca40:	4b06      	ldr	r3, [pc, #24]	@ (804ca5c <LL_BDMA_SetPeriphRequest+0x38>)
 804ca42:	440b      	add	r3, r1
 804ca44:	009b      	lsls	r3, r3, #2
 804ca46:	4619      	mov	r1, r3
 804ca48:	687b      	ldr	r3, [r7, #4]
 804ca4a:	4313      	orrs	r3, r2
 804ca4c:	600b      	str	r3, [r1, #0]
}
 804ca4e:	bf00      	nop
 804ca50:	3714      	adds	r7, #20
 804ca52:	46bd      	mov	sp, r7
 804ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ca58:	4770      	bx	lr
 804ca5a:	bf00      	nop
 804ca5c:	16009600 	.word	0x16009600

0804ca60 <LL_BDMA_IsActiveFlag_TC0>:
  * @rmtoll ISR          TCIF0         LL_BDMA_IsActiveFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TC0(const BDMA_TypeDef *BDMAx)
{
 804ca60:	b480      	push	{r7}
 804ca62:	b083      	sub	sp, #12
 804ca64:	af00      	add	r7, sp, #0
 804ca66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TCIF0) == (BDMA_ISR_TCIF0)) ? 1UL : 0UL);
 804ca68:	687b      	ldr	r3, [r7, #4]
 804ca6a:	681b      	ldr	r3, [r3, #0]
 804ca6c:	f003 0302 	and.w	r3, r3, #2
 804ca70:	2b02      	cmp	r3, #2
 804ca72:	d101      	bne.n	804ca78 <LL_BDMA_IsActiveFlag_TC0+0x18>
 804ca74:	2301      	movs	r3, #1
 804ca76:	e000      	b.n	804ca7a <LL_BDMA_IsActiveFlag_TC0+0x1a>
 804ca78:	2300      	movs	r3, #0
}
 804ca7a:	4618      	mov	r0, r3
 804ca7c:	370c      	adds	r7, #12
 804ca7e:	46bd      	mov	sp, r7
 804ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ca84:	4770      	bx	lr

0804ca86 <LL_BDMA_IsActiveFlag_TE0>:
  * @rmtoll ISR          TEIF0         LL_BDMA_IsActiveFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TE0(const BDMA_TypeDef *BDMAx)
{
 804ca86:	b480      	push	{r7}
 804ca88:	b083      	sub	sp, #12
 804ca8a:	af00      	add	r7, sp, #0
 804ca8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TEIF0) == (BDMA_ISR_TEIF0)) ? 1UL : 0UL);
 804ca8e:	687b      	ldr	r3, [r7, #4]
 804ca90:	681b      	ldr	r3, [r3, #0]
 804ca92:	f003 0308 	and.w	r3, r3, #8
 804ca96:	2b08      	cmp	r3, #8
 804ca98:	d101      	bne.n	804ca9e <LL_BDMA_IsActiveFlag_TE0+0x18>
 804ca9a:	2301      	movs	r3, #1
 804ca9c:	e000      	b.n	804caa0 <LL_BDMA_IsActiveFlag_TE0+0x1a>
 804ca9e:	2300      	movs	r3, #0
}
 804caa0:	4618      	mov	r0, r3
 804caa2:	370c      	adds	r7, #12
 804caa4:	46bd      	mov	sp, r7
 804caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804caaa:	4770      	bx	lr

0804caac <LL_BDMA_ClearFlag_TC0>:
  * @rmtoll IFCR         CTCIF0        LL_BDMA_ClearFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TC0(BDMA_TypeDef *BDMAx)
{
 804caac:	b480      	push	{r7}
 804caae:	b083      	sub	sp, #12
 804cab0:	af00      	add	r7, sp, #0
 804cab2:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTCIF0);
 804cab4:	687b      	ldr	r3, [r7, #4]
 804cab6:	2202      	movs	r2, #2
 804cab8:	605a      	str	r2, [r3, #4]
}
 804caba:	bf00      	nop
 804cabc:	370c      	adds	r7, #12
 804cabe:	46bd      	mov	sp, r7
 804cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cac4:	4770      	bx	lr

0804cac6 <LL_BDMA_ClearFlag_TE0>:
  * @rmtoll IFCR         CTEIF0        LL_BDMA_ClearFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TE0(BDMA_TypeDef *BDMAx)
{
 804cac6:	b480      	push	{r7}
 804cac8:	b083      	sub	sp, #12
 804caca:	af00      	add	r7, sp, #0
 804cacc:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTEIF0);
 804cace:	687b      	ldr	r3, [r7, #4]
 804cad0:	2208      	movs	r2, #8
 804cad2:	605a      	str	r2, [r3, #4]
}
 804cad4:	bf00      	nop
 804cad6:	370c      	adds	r7, #12
 804cad8:	46bd      	mov	sp, r7
 804cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cade:	4770      	bx	lr

0804cae0 <LL_BDMA_EnableIT_TC>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TC(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 804cae0:	b480      	push	{r7}
 804cae2:	b085      	sub	sp, #20
 804cae4:	af00      	add	r7, sp, #0
 804cae6:	6078      	str	r0, [r7, #4]
 804cae8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804caea:	687b      	ldr	r3, [r7, #4]
 804caec:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TCIE);
 804caee:	4a0c      	ldr	r2, [pc, #48]	@ (804cb20 <LL_BDMA_EnableIT_TC+0x40>)
 804caf0:	683b      	ldr	r3, [r7, #0]
 804caf2:	4413      	add	r3, r2
 804caf4:	781b      	ldrb	r3, [r3, #0]
 804caf6:	461a      	mov	r2, r3
 804caf8:	68fb      	ldr	r3, [r7, #12]
 804cafa:	4413      	add	r3, r2
 804cafc:	681b      	ldr	r3, [r3, #0]
 804cafe:	4908      	ldr	r1, [pc, #32]	@ (804cb20 <LL_BDMA_EnableIT_TC+0x40>)
 804cb00:	683a      	ldr	r2, [r7, #0]
 804cb02:	440a      	add	r2, r1
 804cb04:	7812      	ldrb	r2, [r2, #0]
 804cb06:	4611      	mov	r1, r2
 804cb08:	68fa      	ldr	r2, [r7, #12]
 804cb0a:	440a      	add	r2, r1
 804cb0c:	f043 0302 	orr.w	r3, r3, #2
 804cb10:	6013      	str	r3, [r2, #0]
}
 804cb12:	bf00      	nop
 804cb14:	3714      	adds	r7, #20
 804cb16:	46bd      	mov	sp, r7
 804cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cb1c:	4770      	bx	lr
 804cb1e:	bf00      	nop
 804cb20:	08071dcc 	.word	0x08071dcc

0804cb24 <LL_BDMA_EnableIT_TE>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TE(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 804cb24:	b480      	push	{r7}
 804cb26:	b085      	sub	sp, #20
 804cb28:	af00      	add	r7, sp, #0
 804cb2a:	6078      	str	r0, [r7, #4]
 804cb2c:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 804cb2e:	687b      	ldr	r3, [r7, #4]
 804cb30:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TEIE);
 804cb32:	4a0c      	ldr	r2, [pc, #48]	@ (804cb64 <LL_BDMA_EnableIT_TE+0x40>)
 804cb34:	683b      	ldr	r3, [r7, #0]
 804cb36:	4413      	add	r3, r2
 804cb38:	781b      	ldrb	r3, [r3, #0]
 804cb3a:	461a      	mov	r2, r3
 804cb3c:	68fb      	ldr	r3, [r7, #12]
 804cb3e:	4413      	add	r3, r2
 804cb40:	681b      	ldr	r3, [r3, #0]
 804cb42:	4908      	ldr	r1, [pc, #32]	@ (804cb64 <LL_BDMA_EnableIT_TE+0x40>)
 804cb44:	683a      	ldr	r2, [r7, #0]
 804cb46:	440a      	add	r2, r1
 804cb48:	7812      	ldrb	r2, [r2, #0]
 804cb4a:	4611      	mov	r1, r2
 804cb4c:	68fa      	ldr	r2, [r7, #12]
 804cb4e:	440a      	add	r2, r1
 804cb50:	f043 0308 	orr.w	r3, r3, #8
 804cb54:	6013      	str	r3, [r2, #0]
}
 804cb56:	bf00      	nop
 804cb58:	3714      	adds	r7, #20
 804cb5a:	46bd      	mov	sp, r7
 804cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cb60:	4770      	bx	lr
 804cb62:	bf00      	nop
 804cb64:	08071dcc 	.word	0x08071dcc

0804cb68 <SPI_MasterDevice_GetHandle>:
    .transfer_state = SPI_MASTER_TRANSFER_IDLE,
    .is_initialized = false,
};

SPI_MasterDevice_t* SPI_MasterDevice_GetHandle(void)
{
 804cb68:	b480      	push	{r7}
 804cb6a:	af00      	add	r7, sp, #0
    return &spi_master_instance;
 804cb6c:	4b02      	ldr	r3, [pc, #8]	@ (804cb78 <SPI_MasterDevice_GetHandle+0x10>)
}
 804cb6e:	4618      	mov	r0, r3
 804cb70:	46bd      	mov	sp, r7
 804cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cb76:	4770      	bx	lr
 804cb78:	2402d59c 	.word	0x2402d59c

0804cb7c <SPI_MasterDevice_Init>:

Std_ReturnType SPI_MasterDevice_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 804cb7c:	b580      	push	{r7, lr}
 804cb7e:	b084      	sub	sp, #16
 804cb80:	af00      	add	r7, sp, #0
 804cb82:	60f8      	str	r0, [r7, #12]
 804cb84:	60b9      	str	r1, [r7, #8]
 804cb86:	4613      	mov	r3, r2
 804cb88:	80fb      	strh	r3, [r7, #6]
    if (spi_master_instance.is_initialized) {
 804cb8a:	4b1a      	ldr	r3, [pc, #104]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cb8c:	7adb      	ldrb	r3, [r3, #11]
 804cb8e:	2b00      	cmp	r3, #0
 804cb90:	d001      	beq.n	804cb96 <SPI_MasterDevice_Init+0x1a>
        return E_OK;
 804cb92:	2300      	movs	r3, #0
 804cb94:	e02a      	b.n	804cbec <SPI_MasterDevice_Init+0x70>
    }

    spi_master_instance.SPIx = SPIx;
 804cb96:	4a17      	ldr	r2, [pc, #92]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cb98:	68fb      	ldr	r3, [r7, #12]
 804cb9a:	6013      	str	r3, [r2, #0]
    spi_master_instance.CS_Port = CS_Port;
 804cb9c:	4a15      	ldr	r2, [pc, #84]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cb9e:	68bb      	ldr	r3, [r7, #8]
 804cba0:	6053      	str	r3, [r2, #4]
    spi_master_instance.CS_Pin = CS_Pin;
 804cba2:	4a14      	ldr	r2, [pc, #80]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cba4:	88fb      	ldrh	r3, [r7, #6]
 804cba6:	8113      	strh	r3, [r2, #8]

    rxMaster_Semaphore = xSemaphoreCreateBinary();
 804cba8:	2203      	movs	r2, #3
 804cbaa:	2100      	movs	r1, #0
 804cbac:	2001      	movs	r0, #1
 804cbae:	f008 fac4 	bl	805513a <xQueueGenericCreate>
 804cbb2:	4603      	mov	r3, r0
 804cbb4:	4a10      	ldr	r2, [pc, #64]	@ (804cbf8 <SPI_MasterDevice_Init+0x7c>)
 804cbb6:	6013      	str	r3, [r2, #0]
    if (rxMaster_Semaphore == NULL) {
 804cbb8:	4b0f      	ldr	r3, [pc, #60]	@ (804cbf8 <SPI_MasterDevice_Init+0x7c>)
 804cbba:	681b      	ldr	r3, [r3, #0]
 804cbbc:	2b00      	cmp	r3, #0
 804cbbe:	d101      	bne.n	804cbc4 <SPI_MasterDevice_Init+0x48>
        return E_ERROR;
 804cbc0:	2301      	movs	r3, #1
 804cbc2:	e013      	b.n	804cbec <SPI_MasterDevice_Init+0x70>
    }

    LL_BDMA_EnableIT_TC(BDMA, LL_BDMA_CHANNEL_0);
 804cbc4:	2100      	movs	r1, #0
 804cbc6:	480d      	ldr	r0, [pc, #52]	@ (804cbfc <SPI_MasterDevice_Init+0x80>)
 804cbc8:	f7ff ff8a 	bl	804cae0 <LL_BDMA_EnableIT_TC>
    LL_BDMA_EnableIT_TE(BDMA, LL_BDMA_CHANNEL_0);
 804cbcc:	2100      	movs	r1, #0
 804cbce:	480b      	ldr	r0, [pc, #44]	@ (804cbfc <SPI_MasterDevice_Init+0x80>)
 804cbd0:	f7ff ffa8 	bl	804cb24 <LL_BDMA_EnableIT_TE>
//    LL_BDMA_SetPeriphAddress(BDMA, LL_BDMA_CHANNEL_0, (uint32_t)&SPIx->RXDR);
    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 804cbd4:	88fb      	ldrh	r3, [r7, #6]
 804cbd6:	4619      	mov	r1, r3
 804cbd8:	68b8      	ldr	r0, [r7, #8]
 804cbda:	f7ff fe42 	bl	804c862 <LL_GPIO_SetOutputPin>
//    LL_SPI_Enable(SPIx);

    spi_master_instance.is_initialized = true;
 804cbde:	4b05      	ldr	r3, [pc, #20]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cbe0:	2201      	movs	r2, #1
 804cbe2:	72da      	strb	r2, [r3, #11]
    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_IDLE;
 804cbe4:	4b03      	ldr	r3, [pc, #12]	@ (804cbf4 <SPI_MasterDevice_Init+0x78>)
 804cbe6:	2200      	movs	r2, #0
 804cbe8:	729a      	strb	r2, [r3, #10]
    return E_OK;
 804cbea:	2300      	movs	r3, #0
}
 804cbec:	4618      	mov	r0, r3
 804cbee:	3710      	adds	r7, #16
 804cbf0:	46bd      	mov	sp, r7
 804cbf2:	bd80      	pop	{r7, pc}
 804cbf4:	2402d59c 	.word	0x2402d59c
 804cbf8:	2402d598 	.word	0x2402d598
 804cbfc:	58025400 	.word	0x58025400

0804cc00 <SPI_MasterDevice_ReadDMA>:


Std_ReturnType SPI_MasterDevice_ReadDMA(uint32_t data_addr, uint32_t size)
{
 804cc00:	b580      	push	{r7, lr}
 804cc02:	b084      	sub	sp, #16
 804cc04:	af02      	add	r7, sp, #8
 804cc06:	6078      	str	r0, [r7, #4]
 804cc08:	6039      	str	r1, [r7, #0]
    if (!spi_master_instance.is_initialized) {
 804cc0a:	4b5f      	ldr	r3, [pc, #380]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cc0c:	7adb      	ldrb	r3, [r3, #11]
 804cc0e:	f083 0301 	eor.w	r3, r3, #1
 804cc12:	b2db      	uxtb	r3, r3
 804cc14:	2b00      	cmp	r3, #0
 804cc16:	d001      	beq.n	804cc1c <SPI_MasterDevice_ReadDMA+0x1c>
        return E_ERROR;
 804cc18:	2301      	movs	r3, #1
 804cc1a:	e0b0      	b.n	804cd7e <SPI_MasterDevice_ReadDMA+0x17e>

//    if (toCM4_GetState() != TOCM4_IDLE) {
//        return E_ERROR;
//    }

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 804cc1c:	683b      	ldr	r3, [r7, #0]
 804cc1e:	2b00      	cmp	r3, #0
 804cc20:	d003      	beq.n	804cc2a <SPI_MasterDevice_ReadDMA+0x2a>
 804cc22:	683b      	ldr	r3, [r7, #0]
 804cc24:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 804cc28:	d901      	bls.n	804cc2e <SPI_MasterDevice_ReadDMA+0x2e>
        return E_ERROR;
 804cc2a:	2301      	movs	r3, #1
 804cc2c:	e0a7      	b.n	804cd7e <SPI_MasterDevice_ReadDMA+0x17e>
    }

    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_BUSY;
 804cc2e:	4b56      	ldr	r3, [pc, #344]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cc30:	2201      	movs	r2, #1
 804cc32:	729a      	strb	r2, [r3, #10]

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_1,
 804cc34:	2101      	movs	r1, #1
 804cc36:	4855      	ldr	r0, [pc, #340]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc38:	f7ff fe74 	bl	804c924 <LL_BDMA_GetDataTransferDirection>
 804cc3c:	4603      	mov	r3, r0
 804cc3e:	9300      	str	r3, [sp, #0]
 804cc40:	4b53      	ldr	r3, [pc, #332]	@ (804cd90 <SPI_MasterDevice_ReadDMA+0x190>)
 804cc42:	4a54      	ldr	r2, [pc, #336]	@ (804cd94 <SPI_MasterDevice_ReadDMA+0x194>)
 804cc44:	2101      	movs	r1, #1
 804cc46:	4851      	ldr	r0, [pc, #324]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc48:	f7ff feae 	bl	804c9a8 <LL_BDMA_ConfigAddresses>
    						0x3800FFFF,(uint32_t) &(SPI6->TXDR),
						    LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_1, size);
 804cc4c:	683a      	ldr	r2, [r7, #0]
 804cc4e:	2101      	movs	r1, #1
 804cc50:	484e      	ldr	r0, [pc, #312]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc52:	f7ff fe81 	bl	804c958 <LL_BDMA_SetDataLength>

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_0,
 804cc56:	2100      	movs	r1, #0
 804cc58:	484c      	ldr	r0, [pc, #304]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc5a:	f7ff fe63 	bl	804c924 <LL_BDMA_GetDataTransferDirection>
 804cc5e:	4603      	mov	r3, r0
 804cc60:	9300      	str	r3, [sp, #0]
 804cc62:	687b      	ldr	r3, [r7, #4]
 804cc64:	4a4c      	ldr	r2, [pc, #304]	@ (804cd98 <SPI_MasterDevice_ReadDMA+0x198>)
 804cc66:	2100      	movs	r1, #0
 804cc68:	4848      	ldr	r0, [pc, #288]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc6a:	f7ff fe9d 	bl	804c9a8 <LL_BDMA_ConfigAddresses>
                           (uint32_t) &(SPI6->RXDR), data_addr,
						   LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_0, size);
 804cc6e:	683a      	ldr	r2, [r7, #0]
 804cc70:	2100      	movs	r1, #0
 804cc72:	4846      	ldr	r0, [pc, #280]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc74:	f7ff fe70 	bl	804c958 <LL_BDMA_SetDataLength>
    LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 804cc78:	220b      	movs	r2, #11
 804cc7a:	2100      	movs	r1, #0
 804cc7c:	4843      	ldr	r0, [pc, #268]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cc7e:	f7ff fed1 	bl	804ca24 <LL_BDMA_SetPeriphRequest>

    LL_GPIO_ResetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 804cc82:	4b41      	ldr	r3, [pc, #260]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cc84:	685b      	ldr	r3, [r3, #4]
 804cc86:	4a40      	ldr	r2, [pc, #256]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cc88:	8912      	ldrh	r2, [r2, #8]
 804cc8a:	4611      	mov	r1, r2
 804cc8c:	4618      	mov	r0, r3
 804cc8e:	f7ff fdf6 	bl	804c87e <LL_GPIO_ResetOutputPin>

    LL_SPI_EnableDMAReq_RX(spi_master_instance.SPIx);
 804cc92:	4b3d      	ldr	r3, [pc, #244]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cc94:	681b      	ldr	r3, [r3, #0]
 804cc96:	4618      	mov	r0, r3
 804cc98:	f7ff fda3 	bl	804c7e2 <LL_SPI_EnableDMAReq_RX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_0);
 804cc9c:	2100      	movs	r1, #0
 804cc9e:	483b      	ldr	r0, [pc, #236]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cca0:	f7ff fdfc 	bl	804c89c <LL_BDMA_EnableChannel>

    LL_SPI_EnableDMAReq_TX(spi_master_instance.SPIx);
 804cca4:	4b38      	ldr	r3, [pc, #224]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cca6:	681b      	ldr	r3, [r3, #0]
 804cca8:	4618      	mov	r0, r3
 804ccaa:	f7ff fdba 	bl	804c822 <LL_SPI_EnableDMAReq_TX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_1);
 804ccae:	2101      	movs	r1, #1
 804ccb0:	4836      	ldr	r0, [pc, #216]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804ccb2:	f7ff fdf3 	bl	804c89c <LL_BDMA_EnableChannel>
    LL_SPI_Enable(spi_master_instance.SPIx);
 804ccb6:	4b34      	ldr	r3, [pc, #208]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804ccb8:	681b      	ldr	r3, [r3, #0]
 804ccba:	4618      	mov	r0, r3
 804ccbc:	f7ff fd61 	bl	804c782 <LL_SPI_Enable>
    LL_SPI_StartMasterTransfer(spi_master_instance.SPIx);
 804ccc0:	4b31      	ldr	r3, [pc, #196]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804ccc2:	681b      	ldr	r3, [r3, #0]
 804ccc4:	4618      	mov	r0, r3
 804ccc6:	f7ff fd7c 	bl	804c7c2 <LL_SPI_StartMasterTransfer>

    if (xSemaphoreTake(rxMaster_Semaphore, pdMS_TO_TICKS(1000)) != pdTRUE) {
 804ccca:	4b34      	ldr	r3, [pc, #208]	@ (804cd9c <SPI_MasterDevice_ReadDMA+0x19c>)
 804cccc:	681b      	ldr	r3, [r3, #0]
 804ccce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 804ccd2:	4618      	mov	r0, r3
 804ccd4:	f008 fd80 	bl	80557d8 <xQueueSemaphoreTake>
 804ccd8:	4603      	mov	r3, r0
 804ccda:	2b01      	cmp	r3, #1
 804ccdc:	d023      	beq.n	804cd26 <SPI_MasterDevice_ReadDMA+0x126>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 804ccde:	2101      	movs	r1, #1
 804cce0:	482a      	ldr	r0, [pc, #168]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cce2:	f7ff fdfd 	bl	804c8e0 <LL_BDMA_DisableChannel>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 804cce6:	2100      	movs	r1, #0
 804cce8:	4828      	ldr	r0, [pc, #160]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804ccea:	f7ff fdf9 	bl	804c8e0 <LL_BDMA_DisableChannel>
        LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 804ccee:	4b26      	ldr	r3, [pc, #152]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804ccf0:	681b      	ldr	r3, [r3, #0]
 804ccf2:	4618      	mov	r0, r3
 804ccf4:	f7ff fd85 	bl	804c802 <LL_SPI_DisableDMAReq_RX>
        LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 804ccf8:	4b23      	ldr	r3, [pc, #140]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804ccfa:	681b      	ldr	r3, [r3, #0]
 804ccfc:	4618      	mov	r0, r3
 804ccfe:	f7ff fda0 	bl	804c842 <LL_SPI_DisableDMAReq_TX>
        LL_SPI_Disable(spi_master_instance.SPIx);
 804cd02:	4b21      	ldr	r3, [pc, #132]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd04:	681b      	ldr	r3, [r3, #0]
 804cd06:	4618      	mov	r0, r3
 804cd08:	f7ff fd4b 	bl	804c7a2 <LL_SPI_Disable>
        LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 804cd0c:	4b1e      	ldr	r3, [pc, #120]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd0e:	685b      	ldr	r3, [r3, #4]
 804cd10:	4a1d      	ldr	r2, [pc, #116]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd12:	8912      	ldrh	r2, [r2, #8]
 804cd14:	4611      	mov	r1, r2
 804cd16:	4618      	mov	r0, r3
 804cd18:	f7ff fda3 	bl	804c862 <LL_GPIO_SetOutputPin>
        toCM4_SetState(TOCM4_ERROR);
 804cd1c:	2000      	movs	r0, #0
 804cd1e:	f7f3 fe87 	bl	8040a30 <toCM4_SetState>
        return E_ERROR;
 804cd22:	2301      	movs	r3, #1
 804cd24:	e02b      	b.n	804cd7e <SPI_MasterDevice_ReadDMA+0x17e>
    }

    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 804cd26:	2101      	movs	r1, #1
 804cd28:	4818      	ldr	r0, [pc, #96]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cd2a:	f7ff fdd9 	bl	804c8e0 <LL_BDMA_DisableChannel>
    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 804cd2e:	2100      	movs	r1, #0
 804cd30:	4816      	ldr	r0, [pc, #88]	@ (804cd8c <SPI_MasterDevice_ReadDMA+0x18c>)
 804cd32:	f7ff fdd5 	bl	804c8e0 <LL_BDMA_DisableChannel>
    LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 804cd36:	4b14      	ldr	r3, [pc, #80]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd38:	681b      	ldr	r3, [r3, #0]
 804cd3a:	4618      	mov	r0, r3
 804cd3c:	f7ff fd61 	bl	804c802 <LL_SPI_DisableDMAReq_RX>
    LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 804cd40:	4b11      	ldr	r3, [pc, #68]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd42:	681b      	ldr	r3, [r3, #0]
 804cd44:	4618      	mov	r0, r3
 804cd46:	f7ff fd7c 	bl	804c842 <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(spi_master_instance.SPIx);
 804cd4a:	4b0f      	ldr	r3, [pc, #60]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd4c:	681b      	ldr	r3, [r3, #0]
 804cd4e:	4618      	mov	r0, r3
 804cd50:	f7ff fd27 	bl	804c7a2 <LL_SPI_Disable>
    LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 804cd54:	4b0c      	ldr	r3, [pc, #48]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd56:	685b      	ldr	r3, [r3, #4]
 804cd58:	4a0b      	ldr	r2, [pc, #44]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd5a:	8912      	ldrh	r2, [r2, #8]
 804cd5c:	4611      	mov	r1, r2
 804cd5e:	4618      	mov	r0, r3
 804cd60:	f7ff fd7f 	bl	804c862 <LL_GPIO_SetOutputPin>

    if (spi_master_instance.transfer_state == SPI_MASTER_TRANSFER_COMPLETE) {
 804cd64:	4b08      	ldr	r3, [pc, #32]	@ (804cd88 <SPI_MasterDevice_ReadDMA+0x188>)
 804cd66:	7a9b      	ldrb	r3, [r3, #10]
 804cd68:	2b02      	cmp	r3, #2
 804cd6a:	d104      	bne.n	804cd76 <SPI_MasterDevice_ReadDMA+0x176>
        toCM4_SetState(TOCM4_READYSEND);
 804cd6c:	2001      	movs	r0, #1
 804cd6e:	f7f3 fe5f 	bl	8040a30 <toCM4_SetState>
        return E_OK;
 804cd72:	2300      	movs	r3, #0
 804cd74:	e003      	b.n	804cd7e <SPI_MasterDevice_ReadDMA+0x17e>
    } else {
        toCM4_SetState(TOCM4_ERROR);
 804cd76:	2000      	movs	r0, #0
 804cd78:	f7f3 fe5a 	bl	8040a30 <toCM4_SetState>
        return E_ERROR;
 804cd7c:	2301      	movs	r3, #1
    }
}
 804cd7e:	4618      	mov	r0, r3
 804cd80:	3708      	adds	r7, #8
 804cd82:	46bd      	mov	sp, r7
 804cd84:	bd80      	pop	{r7, pc}
 804cd86:	bf00      	nop
 804cd88:	2402d59c 	.word	0x2402d59c
 804cd8c:	58025400 	.word	0x58025400
 804cd90:	58001420 	.word	0x58001420
 804cd94:	3800ffff 	.word	0x3800ffff
 804cd98:	58001430 	.word	0x58001430
 804cd9c:	2402d598 	.word	0x2402d598

0804cda0 <SPI_MasterDevice_SetTransferState>:
{
    return spi_master_instance.transfer_state;
}

void SPI_MasterDevice_SetTransferState(SPI_MasterTransferState_t state)
{
 804cda0:	b480      	push	{r7}
 804cda2:	b083      	sub	sp, #12
 804cda4:	af00      	add	r7, sp, #0
 804cda6:	4603      	mov	r3, r0
 804cda8:	71fb      	strb	r3, [r7, #7]
    spi_master_instance.transfer_state = state;
 804cdaa:	4a04      	ldr	r2, [pc, #16]	@ (804cdbc <SPI_MasterDevice_SetTransferState+0x1c>)
 804cdac:	79fb      	ldrb	r3, [r7, #7]
 804cdae:	7293      	strb	r3, [r2, #10]
}
 804cdb0:	bf00      	nop
 804cdb2:	370c      	adds	r7, #12
 804cdb4:	46bd      	mov	sp, r7
 804cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cdba:	4770      	bx	lr
 804cdbc:	2402d59c 	.word	0x2402d59c

0804cdc0 <SPIMaster_IRQHandler>:
{
    return toCM4_GetState();
}

void SPIMaster_IRQHandler(void)
{
 804cdc0:	b580      	push	{r7, lr}
 804cdc2:	b082      	sub	sp, #8
 804cdc4:	af00      	add	r7, sp, #0
    if (LL_BDMA_IsActiveFlag_TC0(BDMA)) {
 804cdc6:	4822      	ldr	r0, [pc, #136]	@ (804ce50 <SPIMaster_IRQHandler+0x90>)
 804cdc8:	f7ff fe4a 	bl	804ca60 <LL_BDMA_IsActiveFlag_TC0>
 804cdcc:	4603      	mov	r3, r0
 804cdce:	2b00      	cmp	r3, #0
 804cdd0:	d019      	beq.n	804ce06 <SPIMaster_IRQHandler+0x46>
        LL_BDMA_ClearFlag_TC0(BDMA);
 804cdd2:	481f      	ldr	r0, [pc, #124]	@ (804ce50 <SPIMaster_IRQHandler+0x90>)
 804cdd4:	f7ff fe6a 	bl	804caac <LL_BDMA_ClearFlag_TC0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_COMPLETE);
 804cdd8:	2002      	movs	r0, #2
 804cdda:	f7ff ffe1 	bl	804cda0 <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 804cdde:	2300      	movs	r3, #0
 804cde0:	607b      	str	r3, [r7, #4]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 804cde2:	4b1c      	ldr	r3, [pc, #112]	@ (804ce54 <SPIMaster_IRQHandler+0x94>)
 804cde4:	681b      	ldr	r3, [r3, #0]
 804cde6:	1d3a      	adds	r2, r7, #4
 804cde8:	4611      	mov	r1, r2
 804cdea:	4618      	mov	r0, r3
 804cdec:	f008 fb5a 	bl	80554a4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 804cdf0:	687b      	ldr	r3, [r7, #4]
 804cdf2:	2b00      	cmp	r3, #0
 804cdf4:	d007      	beq.n	804ce06 <SPIMaster_IRQHandler+0x46>
 804cdf6:	4b18      	ldr	r3, [pc, #96]	@ (804ce58 <SPIMaster_IRQHandler+0x98>)
 804cdf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 804cdfc:	601a      	str	r2, [r3, #0]
 804cdfe:	f3bf 8f4f 	dsb	sy
 804ce02:	f3bf 8f6f 	isb	sy
    }
    if (LL_BDMA_IsActiveFlag_TE0(BDMA)) {
 804ce06:	4812      	ldr	r0, [pc, #72]	@ (804ce50 <SPIMaster_IRQHandler+0x90>)
 804ce08:	f7ff fe3d 	bl	804ca86 <LL_BDMA_IsActiveFlag_TE0>
 804ce0c:	4603      	mov	r3, r0
 804ce0e:	2b00      	cmp	r3, #0
 804ce10:	d019      	beq.n	804ce46 <SPIMaster_IRQHandler+0x86>
        LL_BDMA_ClearFlag_TE0(BDMA);
 804ce12:	480f      	ldr	r0, [pc, #60]	@ (804ce50 <SPIMaster_IRQHandler+0x90>)
 804ce14:	f7ff fe57 	bl	804cac6 <LL_BDMA_ClearFlag_TE0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_ERROR);
 804ce18:	2003      	movs	r0, #3
 804ce1a:	f7ff ffc1 	bl	804cda0 <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 804ce1e:	2300      	movs	r3, #0
 804ce20:	603b      	str	r3, [r7, #0]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 804ce22:	4b0c      	ldr	r3, [pc, #48]	@ (804ce54 <SPIMaster_IRQHandler+0x94>)
 804ce24:	681b      	ldr	r3, [r3, #0]
 804ce26:	463a      	mov	r2, r7
 804ce28:	4611      	mov	r1, r2
 804ce2a:	4618      	mov	r0, r3
 804ce2c:	f008 fb3a 	bl	80554a4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 804ce30:	683b      	ldr	r3, [r7, #0]
 804ce32:	2b00      	cmp	r3, #0
 804ce34:	d007      	beq.n	804ce46 <SPIMaster_IRQHandler+0x86>
 804ce36:	4b08      	ldr	r3, [pc, #32]	@ (804ce58 <SPIMaster_IRQHandler+0x98>)
 804ce38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 804ce3c:	601a      	str	r2, [r3, #0]
 804ce3e:	f3bf 8f4f 	dsb	sy
 804ce42:	f3bf 8f6f 	isb	sy
    }
}
 804ce46:	bf00      	nop
 804ce48:	3708      	adds	r7, #8
 804ce4a:	46bd      	mov	sp, r7
 804ce4c:	bd80      	pop	{r7, pc}
 804ce4e:	bf00      	nop
 804ce50:	58025400 	.word	0x58025400
 804ce54:	2402d598 	.word	0x2402d598
 804ce58:	e000ed04 	.word	0xe000ed04

0804ce5c <LL_SPI_Enable>:
{
 804ce5c:	b480      	push	{r7}
 804ce5e:	b083      	sub	sp, #12
 804ce60:	af00      	add	r7, sp, #0
 804ce62:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 804ce64:	687b      	ldr	r3, [r7, #4]
 804ce66:	681b      	ldr	r3, [r3, #0]
 804ce68:	f043 0201 	orr.w	r2, r3, #1
 804ce6c:	687b      	ldr	r3, [r7, #4]
 804ce6e:	601a      	str	r2, [r3, #0]
}
 804ce70:	bf00      	nop
 804ce72:	370c      	adds	r7, #12
 804ce74:	46bd      	mov	sp, r7
 804ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce7a:	4770      	bx	lr

0804ce7c <LL_SPI_Disable>:
{
 804ce7c:	b480      	push	{r7}
 804ce7e:	b083      	sub	sp, #12
 804ce80:	af00      	add	r7, sp, #0
 804ce82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 804ce84:	687b      	ldr	r3, [r7, #4]
 804ce86:	681b      	ldr	r3, [r3, #0]
 804ce88:	f023 0201 	bic.w	r2, r3, #1
 804ce8c:	687b      	ldr	r3, [r7, #4]
 804ce8e:	601a      	str	r2, [r3, #0]
}
 804ce90:	bf00      	nop
 804ce92:	370c      	adds	r7, #12
 804ce94:	46bd      	mov	sp, r7
 804ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce9a:	4770      	bx	lr

0804ce9c <LL_SPI_EnableDMAReq_TX>:
{
 804ce9c:	b480      	push	{r7}
 804ce9e:	b083      	sub	sp, #12
 804cea0:	af00      	add	r7, sp, #0
 804cea2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 804cea4:	687b      	ldr	r3, [r7, #4]
 804cea6:	689b      	ldr	r3, [r3, #8]
 804cea8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 804ceac:	687b      	ldr	r3, [r7, #4]
 804ceae:	609a      	str	r2, [r3, #8]
}
 804ceb0:	bf00      	nop
 804ceb2:	370c      	adds	r7, #12
 804ceb4:	46bd      	mov	sp, r7
 804ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ceba:	4770      	bx	lr

0804cebc <LL_SPI_DisableDMAReq_TX>:
{
 804cebc:	b480      	push	{r7}
 804cebe:	b083      	sub	sp, #12
 804cec0:	af00      	add	r7, sp, #0
 804cec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 804cec4:	687b      	ldr	r3, [r7, #4]
 804cec6:	689b      	ldr	r3, [r3, #8]
 804cec8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 804cecc:	687b      	ldr	r3, [r7, #4]
 804cece:	609a      	str	r2, [r3, #8]
}
 804ced0:	bf00      	nop
 804ced2:	370c      	adds	r7, #12
 804ced4:	46bd      	mov	sp, r7
 804ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ceda:	4770      	bx	lr

0804cedc <LL_DMA_EnableStream>:
{
 804cedc:	b480      	push	{r7}
 804cede:	b085      	sub	sp, #20
 804cee0:	af00      	add	r7, sp, #0
 804cee2:	6078      	str	r0, [r7, #4]
 804cee4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804cee6:	687b      	ldr	r3, [r7, #4]
 804cee8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 804ceea:	4a0c      	ldr	r2, [pc, #48]	@ (804cf1c <LL_DMA_EnableStream+0x40>)
 804ceec:	683b      	ldr	r3, [r7, #0]
 804ceee:	4413      	add	r3, r2
 804cef0:	781b      	ldrb	r3, [r3, #0]
 804cef2:	461a      	mov	r2, r3
 804cef4:	68fb      	ldr	r3, [r7, #12]
 804cef6:	4413      	add	r3, r2
 804cef8:	681b      	ldr	r3, [r3, #0]
 804cefa:	4908      	ldr	r1, [pc, #32]	@ (804cf1c <LL_DMA_EnableStream+0x40>)
 804cefc:	683a      	ldr	r2, [r7, #0]
 804cefe:	440a      	add	r2, r1
 804cf00:	7812      	ldrb	r2, [r2, #0]
 804cf02:	4611      	mov	r1, r2
 804cf04:	68fa      	ldr	r2, [r7, #12]
 804cf06:	440a      	add	r2, r1
 804cf08:	f043 0301 	orr.w	r3, r3, #1
 804cf0c:	6013      	str	r3, [r2, #0]
}
 804cf0e:	bf00      	nop
 804cf10:	3714      	adds	r7, #20
 804cf12:	46bd      	mov	sp, r7
 804cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cf18:	4770      	bx	lr
 804cf1a:	bf00      	nop
 804cf1c:	08071dd4 	.word	0x08071dd4

0804cf20 <LL_DMA_DisableStream>:
{
 804cf20:	b480      	push	{r7}
 804cf22:	b085      	sub	sp, #20
 804cf24:	af00      	add	r7, sp, #0
 804cf26:	6078      	str	r0, [r7, #4]
 804cf28:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804cf2a:	687b      	ldr	r3, [r7, #4]
 804cf2c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 804cf2e:	4a0c      	ldr	r2, [pc, #48]	@ (804cf60 <LL_DMA_DisableStream+0x40>)
 804cf30:	683b      	ldr	r3, [r7, #0]
 804cf32:	4413      	add	r3, r2
 804cf34:	781b      	ldrb	r3, [r3, #0]
 804cf36:	461a      	mov	r2, r3
 804cf38:	68fb      	ldr	r3, [r7, #12]
 804cf3a:	4413      	add	r3, r2
 804cf3c:	681b      	ldr	r3, [r3, #0]
 804cf3e:	4908      	ldr	r1, [pc, #32]	@ (804cf60 <LL_DMA_DisableStream+0x40>)
 804cf40:	683a      	ldr	r2, [r7, #0]
 804cf42:	440a      	add	r2, r1
 804cf44:	7812      	ldrb	r2, [r2, #0]
 804cf46:	4611      	mov	r1, r2
 804cf48:	68fa      	ldr	r2, [r7, #12]
 804cf4a:	440a      	add	r2, r1
 804cf4c:	f023 0301 	bic.w	r3, r3, #1
 804cf50:	6013      	str	r3, [r2, #0]
}
 804cf52:	bf00      	nop
 804cf54:	3714      	adds	r7, #20
 804cf56:	46bd      	mov	sp, r7
 804cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cf5c:	4770      	bx	lr
 804cf5e:	bf00      	nop
 804cf60:	08071dd4 	.word	0x08071dd4

0804cf64 <LL_DMA_SetMemorySize>:
{
 804cf64:	b480      	push	{r7}
 804cf66:	b087      	sub	sp, #28
 804cf68:	af00      	add	r7, sp, #0
 804cf6a:	60f8      	str	r0, [r7, #12]
 804cf6c:	60b9      	str	r1, [r7, #8]
 804cf6e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804cf70:	68fb      	ldr	r3, [r7, #12]
 804cf72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 804cf74:	4a0d      	ldr	r2, [pc, #52]	@ (804cfac <LL_DMA_SetMemorySize+0x48>)
 804cf76:	68bb      	ldr	r3, [r7, #8]
 804cf78:	4413      	add	r3, r2
 804cf7a:	781b      	ldrb	r3, [r3, #0]
 804cf7c:	461a      	mov	r2, r3
 804cf7e:	697b      	ldr	r3, [r7, #20]
 804cf80:	4413      	add	r3, r2
 804cf82:	681b      	ldr	r3, [r3, #0]
 804cf84:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 804cf88:	4908      	ldr	r1, [pc, #32]	@ (804cfac <LL_DMA_SetMemorySize+0x48>)
 804cf8a:	68bb      	ldr	r3, [r7, #8]
 804cf8c:	440b      	add	r3, r1
 804cf8e:	781b      	ldrb	r3, [r3, #0]
 804cf90:	4619      	mov	r1, r3
 804cf92:	697b      	ldr	r3, [r7, #20]
 804cf94:	440b      	add	r3, r1
 804cf96:	4619      	mov	r1, r3
 804cf98:	687b      	ldr	r3, [r7, #4]
 804cf9a:	4313      	orrs	r3, r2
 804cf9c:	600b      	str	r3, [r1, #0]
}
 804cf9e:	bf00      	nop
 804cfa0:	371c      	adds	r7, #28
 804cfa2:	46bd      	mov	sp, r7
 804cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cfa8:	4770      	bx	lr
 804cfaa:	bf00      	nop
 804cfac:	08071dd4 	.word	0x08071dd4

0804cfb0 <LL_DMA_SetDataLength>:
{
 804cfb0:	b480      	push	{r7}
 804cfb2:	b087      	sub	sp, #28
 804cfb4:	af00      	add	r7, sp, #0
 804cfb6:	60f8      	str	r0, [r7, #12]
 804cfb8:	60b9      	str	r1, [r7, #8]
 804cfba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804cfbc:	68fb      	ldr	r3, [r7, #12]
 804cfbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 804cfc0:	4a0d      	ldr	r2, [pc, #52]	@ (804cff8 <LL_DMA_SetDataLength+0x48>)
 804cfc2:	68bb      	ldr	r3, [r7, #8]
 804cfc4:	4413      	add	r3, r2
 804cfc6:	781b      	ldrb	r3, [r3, #0]
 804cfc8:	461a      	mov	r2, r3
 804cfca:	697b      	ldr	r3, [r7, #20]
 804cfcc:	4413      	add	r3, r2
 804cfce:	685a      	ldr	r2, [r3, #4]
 804cfd0:	4b0a      	ldr	r3, [pc, #40]	@ (804cffc <LL_DMA_SetDataLength+0x4c>)
 804cfd2:	4013      	ands	r3, r2
 804cfd4:	4908      	ldr	r1, [pc, #32]	@ (804cff8 <LL_DMA_SetDataLength+0x48>)
 804cfd6:	68ba      	ldr	r2, [r7, #8]
 804cfd8:	440a      	add	r2, r1
 804cfda:	7812      	ldrb	r2, [r2, #0]
 804cfdc:	4611      	mov	r1, r2
 804cfde:	697a      	ldr	r2, [r7, #20]
 804cfe0:	440a      	add	r2, r1
 804cfe2:	4611      	mov	r1, r2
 804cfe4:	687a      	ldr	r2, [r7, #4]
 804cfe6:	4313      	orrs	r3, r2
 804cfe8:	604b      	str	r3, [r1, #4]
}
 804cfea:	bf00      	nop
 804cfec:	371c      	adds	r7, #28
 804cfee:	46bd      	mov	sp, r7
 804cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cff4:	4770      	bx	lr
 804cff6:	bf00      	nop
 804cff8:	08071dd4 	.word	0x08071dd4
 804cffc:	ffff0000 	.word	0xffff0000

0804d000 <LL_DMA_ConfigAddresses>:
{
 804d000:	b480      	push	{r7}
 804d002:	b087      	sub	sp, #28
 804d004:	af00      	add	r7, sp, #0
 804d006:	60f8      	str	r0, [r7, #12]
 804d008:	60b9      	str	r1, [r7, #8]
 804d00a:	607a      	str	r2, [r7, #4]
 804d00c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804d00e:	68fb      	ldr	r3, [r7, #12]
 804d010:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 804d012:	6a3b      	ldr	r3, [r7, #32]
 804d014:	2b40      	cmp	r3, #64	@ 0x40
 804d016:	d114      	bne.n	804d042 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, SrcAddress);
 804d018:	4a17      	ldr	r2, [pc, #92]	@ (804d078 <LL_DMA_ConfigAddresses+0x78>)
 804d01a:	68bb      	ldr	r3, [r7, #8]
 804d01c:	4413      	add	r3, r2
 804d01e:	781b      	ldrb	r3, [r3, #0]
 804d020:	461a      	mov	r2, r3
 804d022:	697b      	ldr	r3, [r7, #20]
 804d024:	4413      	add	r3, r2
 804d026:	461a      	mov	r2, r3
 804d028:	687b      	ldr	r3, [r7, #4]
 804d02a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, DstAddress);
 804d02c:	4a12      	ldr	r2, [pc, #72]	@ (804d078 <LL_DMA_ConfigAddresses+0x78>)
 804d02e:	68bb      	ldr	r3, [r7, #8]
 804d030:	4413      	add	r3, r2
 804d032:	781b      	ldrb	r3, [r3, #0]
 804d034:	461a      	mov	r2, r3
 804d036:	697b      	ldr	r3, [r7, #20]
 804d038:	4413      	add	r3, r2
 804d03a:	461a      	mov	r2, r3
 804d03c:	683b      	ldr	r3, [r7, #0]
 804d03e:	6093      	str	r3, [r2, #8]
}
 804d040:	e013      	b.n	804d06a <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, SrcAddress);
 804d042:	4a0d      	ldr	r2, [pc, #52]	@ (804d078 <LL_DMA_ConfigAddresses+0x78>)
 804d044:	68bb      	ldr	r3, [r7, #8]
 804d046:	4413      	add	r3, r2
 804d048:	781b      	ldrb	r3, [r3, #0]
 804d04a:	461a      	mov	r2, r3
 804d04c:	697b      	ldr	r3, [r7, #20]
 804d04e:	4413      	add	r3, r2
 804d050:	461a      	mov	r2, r3
 804d052:	687b      	ldr	r3, [r7, #4]
 804d054:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, DstAddress);
 804d056:	4a08      	ldr	r2, [pc, #32]	@ (804d078 <LL_DMA_ConfigAddresses+0x78>)
 804d058:	68bb      	ldr	r3, [r7, #8]
 804d05a:	4413      	add	r3, r2
 804d05c:	781b      	ldrb	r3, [r3, #0]
 804d05e:	461a      	mov	r2, r3
 804d060:	697b      	ldr	r3, [r7, #20]
 804d062:	4413      	add	r3, r2
 804d064:	461a      	mov	r2, r3
 804d066:	683b      	ldr	r3, [r7, #0]
 804d068:	60d3      	str	r3, [r2, #12]
}
 804d06a:	bf00      	nop
 804d06c:	371c      	adds	r7, #28
 804d06e:	46bd      	mov	sp, r7
 804d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d074:	4770      	bx	lr
 804d076:	bf00      	nop
 804d078:	08071dd4 	.word	0x08071dd4

0804d07c <LL_DMA_SetPeriphAddress>:
{
 804d07c:	b480      	push	{r7}
 804d07e:	b087      	sub	sp, #28
 804d080:	af00      	add	r7, sp, #0
 804d082:	60f8      	str	r0, [r7, #12]
 804d084:	60b9      	str	r1, [r7, #8]
 804d086:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804d088:	68fb      	ldr	r3, [r7, #12]
 804d08a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 804d08c:	4a07      	ldr	r2, [pc, #28]	@ (804d0ac <LL_DMA_SetPeriphAddress+0x30>)
 804d08e:	68bb      	ldr	r3, [r7, #8]
 804d090:	4413      	add	r3, r2
 804d092:	781b      	ldrb	r3, [r3, #0]
 804d094:	461a      	mov	r2, r3
 804d096:	697b      	ldr	r3, [r7, #20]
 804d098:	4413      	add	r3, r2
 804d09a:	461a      	mov	r2, r3
 804d09c:	687b      	ldr	r3, [r7, #4]
 804d09e:	6093      	str	r3, [r2, #8]
}
 804d0a0:	bf00      	nop
 804d0a2:	371c      	adds	r7, #28
 804d0a4:	46bd      	mov	sp, r7
 804d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d0aa:	4770      	bx	lr
 804d0ac:	08071dd4 	.word	0x08071dd4

0804d0b0 <LL_DMA_ClearFlag_TC7>:
{
 804d0b0:	b480      	push	{r7}
 804d0b2:	b083      	sub	sp, #12
 804d0b4:	af00      	add	r7, sp, #0
 804d0b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 804d0b8:	687b      	ldr	r3, [r7, #4]
 804d0ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 804d0be:	60da      	str	r2, [r3, #12]
}
 804d0c0:	bf00      	nop
 804d0c2:	370c      	adds	r7, #12
 804d0c4:	46bd      	mov	sp, r7
 804d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d0ca:	4770      	bx	lr

0804d0cc <LL_DMA_ClearFlag_TE7>:
{
 804d0cc:	b480      	push	{r7}
 804d0ce:	b083      	sub	sp, #12
 804d0d0:	af00      	add	r7, sp, #0
 804d0d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 804d0d4:	687b      	ldr	r3, [r7, #4]
 804d0d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 804d0da:	60da      	str	r2, [r3, #12]
}
 804d0dc:	bf00      	nop
 804d0de:	370c      	adds	r7, #12
 804d0e0:	46bd      	mov	sp, r7
 804d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d0e6:	4770      	bx	lr

0804d0e8 <LL_DMA_EnableIT_TE>:
{
 804d0e8:	b480      	push	{r7}
 804d0ea:	b085      	sub	sp, #20
 804d0ec:	af00      	add	r7, sp, #0
 804d0ee:	6078      	str	r0, [r7, #4]
 804d0f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804d0f2:	687b      	ldr	r3, [r7, #4]
 804d0f4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 804d0f6:	4a0c      	ldr	r2, [pc, #48]	@ (804d128 <LL_DMA_EnableIT_TE+0x40>)
 804d0f8:	683b      	ldr	r3, [r7, #0]
 804d0fa:	4413      	add	r3, r2
 804d0fc:	781b      	ldrb	r3, [r3, #0]
 804d0fe:	461a      	mov	r2, r3
 804d100:	68fb      	ldr	r3, [r7, #12]
 804d102:	4413      	add	r3, r2
 804d104:	681b      	ldr	r3, [r3, #0]
 804d106:	4908      	ldr	r1, [pc, #32]	@ (804d128 <LL_DMA_EnableIT_TE+0x40>)
 804d108:	683a      	ldr	r2, [r7, #0]
 804d10a:	440a      	add	r2, r1
 804d10c:	7812      	ldrb	r2, [r2, #0]
 804d10e:	4611      	mov	r1, r2
 804d110:	68fa      	ldr	r2, [r7, #12]
 804d112:	440a      	add	r2, r1
 804d114:	f043 0304 	orr.w	r3, r3, #4
 804d118:	6013      	str	r3, [r2, #0]
}
 804d11a:	bf00      	nop
 804d11c:	3714      	adds	r7, #20
 804d11e:	46bd      	mov	sp, r7
 804d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d124:	4770      	bx	lr
 804d126:	bf00      	nop
 804d128:	08071dd4 	.word	0x08071dd4

0804d12c <LL_DMA_EnableIT_TC>:
{
 804d12c:	b480      	push	{r7}
 804d12e:	b085      	sub	sp, #20
 804d130:	af00      	add	r7, sp, #0
 804d132:	6078      	str	r0, [r7, #4]
 804d134:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 804d136:	687b      	ldr	r3, [r7, #4]
 804d138:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 804d13a:	4a0c      	ldr	r2, [pc, #48]	@ (804d16c <LL_DMA_EnableIT_TC+0x40>)
 804d13c:	683b      	ldr	r3, [r7, #0]
 804d13e:	4413      	add	r3, r2
 804d140:	781b      	ldrb	r3, [r3, #0]
 804d142:	461a      	mov	r2, r3
 804d144:	68fb      	ldr	r3, [r7, #12]
 804d146:	4413      	add	r3, r2
 804d148:	681b      	ldr	r3, [r3, #0]
 804d14a:	4908      	ldr	r1, [pc, #32]	@ (804d16c <LL_DMA_EnableIT_TC+0x40>)
 804d14c:	683a      	ldr	r2, [r7, #0]
 804d14e:	440a      	add	r2, r1
 804d150:	7812      	ldrb	r2, [r2, #0]
 804d152:	4611      	mov	r1, r2
 804d154:	68fa      	ldr	r2, [r7, #12]
 804d156:	440a      	add	r2, r1
 804d158:	f043 0310 	orr.w	r3, r3, #16
 804d15c:	6013      	str	r3, [r2, #0]
}
 804d15e:	bf00      	nop
 804d160:	3714      	adds	r7, #20
 804d162:	46bd      	mov	sp, r7
 804d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d168:	4770      	bx	lr
 804d16a:	bf00      	nop
 804d16c:	08071dd4 	.word	0x08071dd4

0804d170 <UpdateCRC16_XMODEM>:
    .transfer_state = SPI_TRANSFER_WAIT,
    .data_context = {0},
    .is_initialized = false
};

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 804d170:	b480      	push	{r7}
 804d172:	b085      	sub	sp, #20
 804d174:	af00      	add	r7, sp, #0
 804d176:	4603      	mov	r3, r0
 804d178:	460a      	mov	r2, r1
 804d17a:	80fb      	strh	r3, [r7, #6]
 804d17c:	4613      	mov	r3, r2
 804d17e:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 804d180:	f241 0321 	movw	r3, #4129	@ 0x1021
 804d184:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 804d186:	797b      	ldrb	r3, [r7, #5]
 804d188:	b21b      	sxth	r3, r3
 804d18a:	021b      	lsls	r3, r3, #8
 804d18c:	b21a      	sxth	r2, r3
 804d18e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804d192:	4053      	eors	r3, r2
 804d194:	b21b      	sxth	r3, r3
 804d196:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 804d198:	2300      	movs	r3, #0
 804d19a:	73fb      	strb	r3, [r7, #15]
 804d19c:	e013      	b.n	804d1c6 <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 804d19e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804d1a2:	2b00      	cmp	r3, #0
 804d1a4:	da09      	bge.n	804d1ba <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 804d1a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804d1aa:	005b      	lsls	r3, r3, #1
 804d1ac:	b21a      	sxth	r2, r3
 804d1ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 804d1b2:	4053      	eors	r3, r2
 804d1b4:	b21b      	sxth	r3, r3
 804d1b6:	80fb      	strh	r3, [r7, #6]
 804d1b8:	e002      	b.n	804d1c0 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 804d1ba:	88fb      	ldrh	r3, [r7, #6]
 804d1bc:	005b      	lsls	r3, r3, #1
 804d1be:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 804d1c0:	7bfb      	ldrb	r3, [r7, #15]
 804d1c2:	3301      	adds	r3, #1
 804d1c4:	73fb      	strb	r3, [r7, #15]
 804d1c6:	7bfb      	ldrb	r3, [r7, #15]
 804d1c8:	2b07      	cmp	r3, #7
 804d1ca:	d9e8      	bls.n	804d19e <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 804d1cc:	88fb      	ldrh	r3, [r7, #6]
}
 804d1ce:	4618      	mov	r0, r3
 804d1d0:	3714      	adds	r7, #20
 804d1d2:	46bd      	mov	sp, r7
 804d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d1d8:	4770      	bx	lr
	...

0804d1dc <SPI_SlaveDevice_GetHandle>:

SPI_SlaveDevice_t* SPI_SlaveDevice_GetHandle(void)
{
 804d1dc:	b480      	push	{r7}
 804d1de:	af00      	add	r7, sp, #0
    return &spi_device_instance;
 804d1e0:	4b02      	ldr	r3, [pc, #8]	@ (804d1ec <SPI_SlaveDevice_GetHandle+0x10>)
}
 804d1e2:	4618      	mov	r0, r3
 804d1e4:	46bd      	mov	sp, r7
 804d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d1ea:	4770      	bx	lr
 804d1ec:	2402d5a8 	.word	0x2402d5a8

0804d1f0 <SPI_SlaveDevice_Init>:

Std_ReturnType SPI_SlaveDevice_Init(void)
{
 804d1f0:	b580      	push	{r7, lr}
 804d1f2:	af00      	add	r7, sp, #0
    if (spi_device_instance.is_initialized) {
 804d1f4:	4b12      	ldr	r3, [pc, #72]	@ (804d240 <SPI_SlaveDevice_Init+0x50>)
 804d1f6:	7d1b      	ldrb	r3, [r3, #20]
 804d1f8:	2b00      	cmp	r3, #0
 804d1fa:	d001      	beq.n	804d200 <SPI_SlaveDevice_Init+0x10>
        return E_OK;
 804d1fc:	2300      	movs	r3, #0
 804d1fe:	e01d      	b.n	804d23c <SPI_SlaveDevice_Init+0x4c>
    }

    LL_DMA_SetMemorySize(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 804d200:	2200      	movs	r2, #0
 804d202:	2107      	movs	r1, #7
 804d204:	480f      	ldr	r0, [pc, #60]	@ (804d244 <SPI_SlaveDevice_Init+0x54>)
 804d206:	f7ff fead 	bl	804cf64 <LL_DMA_SetMemorySize>
    LL_DMA_SetPeriphAddress(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR);
 804d20a:	4a0f      	ldr	r2, [pc, #60]	@ (804d248 <SPI_SlaveDevice_Init+0x58>)
 804d20c:	2107      	movs	r1, #7
 804d20e:	480d      	ldr	r0, [pc, #52]	@ (804d244 <SPI_SlaveDevice_Init+0x54>)
 804d210:	f7ff ff34 	bl	804d07c <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableIT_TC(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 804d214:	2107      	movs	r1, #7
 804d216:	480b      	ldr	r0, [pc, #44]	@ (804d244 <SPI_SlaveDevice_Init+0x54>)
 804d218:	f7ff ff88 	bl	804d12c <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 804d21c:	2107      	movs	r1, #7
 804d21e:	4809      	ldr	r0, [pc, #36]	@ (804d244 <SPI_SlaveDevice_Init+0x54>)
 804d220:	f7ff ff62 	bl	804d0e8 <LL_DMA_EnableIT_TE>

    toCM4_Init();
 804d224:	f7f3 fbfc 	bl	8040a20 <toCM4_Init>
    spi_device_instance.data_context.is_valid = false;
 804d228:	4b05      	ldr	r3, [pc, #20]	@ (804d240 <SPI_SlaveDevice_Init+0x50>)
 804d22a:	2200      	movs	r2, #0
 804d22c:	749a      	strb	r2, [r3, #18]
    spi_device_instance.is_initialized = true;
 804d22e:	4b04      	ldr	r3, [pc, #16]	@ (804d240 <SPI_SlaveDevice_Init+0x50>)
 804d230:	2201      	movs	r2, #1
 804d232:	751a      	strb	r2, [r3, #20]
    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 804d234:	4b02      	ldr	r3, [pc, #8]	@ (804d240 <SPI_SlaveDevice_Init+0x50>)
 804d236:	2200      	movs	r2, #0
 804d238:	701a      	strb	r2, [r3, #0]
    return E_OK;
 804d23a:	2300      	movs	r3, #0
}
 804d23c:	4618      	mov	r0, r3
 804d23e:	bd80      	pop	{r7, pc}
 804d240:	2402d5a8 	.word	0x2402d5a8
 804d244:	40020000 	.word	0x40020000
 804d248:	40015020 	.word	0x40015020

0804d24c <SPI_SlaveDevice_CollectData>:

Std_ReturnType SPI_SlaveDevice_CollectData(uint8_t type, uint32_t sample, uint32_t data_addr)
{
 804d24c:	b580      	push	{r7, lr}
 804d24e:	b088      	sub	sp, #32
 804d250:	af00      	add	r7, sp, #0
 804d252:	4603      	mov	r3, r0
 804d254:	60b9      	str	r1, [r7, #8]
 804d256:	607a      	str	r2, [r7, #4]
 804d258:	73fb      	strb	r3, [r7, #15]
    if (!spi_device_instance.is_initialized) {
 804d25a:	4b47      	ldr	r3, [pc, #284]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d25c:	7d1b      	ldrb	r3, [r3, #20]
 804d25e:	f083 0301 	eor.w	r3, r3, #1
 804d262:	b2db      	uxtb	r3, r3
 804d264:	2b00      	cmp	r3, #0
 804d266:	d001      	beq.n	804d26c <SPI_SlaveDevice_CollectData+0x20>
        return E_ERROR;
 804d268:	2301      	movs	r3, #1
 804d26a:	e080      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 804d26c:	f7f3 fbfc 	bl	8040a68 <toCM4_GetState>
 804d270:	4603      	mov	r3, r0
 804d272:	2b03      	cmp	r3, #3
 804d274:	d001      	beq.n	804d27a <SPI_SlaveDevice_CollectData+0x2e>
        return E_ERROR;
 804d276:	2301      	movs	r3, #1
 804d278:	e079      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (type > 3) {
 804d27a:	7bfb      	ldrb	r3, [r7, #15]
 804d27c:	2b03      	cmp	r3, #3
 804d27e:	d901      	bls.n	804d284 <SPI_SlaveDevice_CollectData+0x38>
        return E_ERROR;
 804d280:	2301      	movs	r3, #1
 804d282:	e074      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (sample < 1 || sample > 100000 || sample * 2 > RAM_D2_200KB_SIZE) {
 804d284:	68bb      	ldr	r3, [r7, #8]
 804d286:	2b00      	cmp	r3, #0
 804d288:	d008      	beq.n	804d29c <SPI_SlaveDevice_CollectData+0x50>
 804d28a:	68bb      	ldr	r3, [r7, #8]
 804d28c:	4a3b      	ldr	r2, [pc, #236]	@ (804d37c <SPI_SlaveDevice_CollectData+0x130>)
 804d28e:	4293      	cmp	r3, r2
 804d290:	d804      	bhi.n	804d29c <SPI_SlaveDevice_CollectData+0x50>
 804d292:	68bb      	ldr	r3, [r7, #8]
 804d294:	005b      	lsls	r3, r3, #1
 804d296:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 804d29a:	d901      	bls.n	804d2a0 <SPI_SlaveDevice_CollectData+0x54>
        return E_ERROR;
 804d29c:	2301      	movs	r3, #1
 804d29e:	e066      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
    }

    toCM4_SetState(TOCM4_BUSY);
 804d2a0:	2002      	movs	r0, #2
 804d2a2:	f7f3 fbc5 	bl	8040a30 <toCM4_SetState>
    spi_device_instance.data_context.is_valid = false;
 804d2a6:	4b34      	ldr	r3, [pc, #208]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d2a8:	2200      	movs	r2, #0
 804d2aa:	749a      	strb	r2, [r3, #18]

    if (type == 0) {
 804d2ac:	7bfb      	ldrb	r3, [r7, #15]
 804d2ae:	2b00      	cmp	r3, #0
 804d2b0:	d159      	bne.n	804d366 <SPI_SlaveDevice_CollectData+0x11a>
        uint16_t crc = 0x0000;
 804d2b2:	2300      	movs	r3, #0
 804d2b4:	83fb      	strh	r3, [r7, #30]
        uint16_t *data = (uint16_t *)data_addr;
 804d2b6:	687b      	ldr	r3, [r7, #4]
 804d2b8:	617b      	str	r3, [r7, #20]

        for (uint32_t i = 0; i < sample; i++) {
 804d2ba:	2300      	movs	r3, #0
 804d2bc:	61bb      	str	r3, [r7, #24]
 804d2be:	e02b      	b.n	804d318 <SPI_SlaveDevice_CollectData+0xcc>
            uint16_t value = (uint16_t)(i % 1001);
 804d2c0:	69bb      	ldr	r3, [r7, #24]
 804d2c2:	4a2f      	ldr	r2, [pc, #188]	@ (804d380 <SPI_SlaveDevice_CollectData+0x134>)
 804d2c4:	fba2 1203 	umull	r1, r2, r2, r3
 804d2c8:	1a99      	subs	r1, r3, r2
 804d2ca:	0849      	lsrs	r1, r1, #1
 804d2cc:	440a      	add	r2, r1
 804d2ce:	0a52      	lsrs	r2, r2, #9
 804d2d0:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 804d2d4:	fb01 f202 	mul.w	r2, r1, r2
 804d2d8:	1a9a      	subs	r2, r3, r2
 804d2da:	4613      	mov	r3, r2
 804d2dc:	827b      	strh	r3, [r7, #18]
            data[i] = value;
 804d2de:	69bb      	ldr	r3, [r7, #24]
 804d2e0:	005b      	lsls	r3, r3, #1
 804d2e2:	697a      	ldr	r2, [r7, #20]
 804d2e4:	4413      	add	r3, r2
 804d2e6:	8a7a      	ldrh	r2, [r7, #18]
 804d2e8:	801a      	strh	r2, [r3, #0]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)(value & 0xFF));
 804d2ea:	8a7b      	ldrh	r3, [r7, #18]
 804d2ec:	b2da      	uxtb	r2, r3
 804d2ee:	8bfb      	ldrh	r3, [r7, #30]
 804d2f0:	4611      	mov	r1, r2
 804d2f2:	4618      	mov	r0, r3
 804d2f4:	f7ff ff3c 	bl	804d170 <UpdateCRC16_XMODEM>
 804d2f8:	4603      	mov	r3, r0
 804d2fa:	83fb      	strh	r3, [r7, #30]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)((value >> 8) & 0xFF));
 804d2fc:	8a7b      	ldrh	r3, [r7, #18]
 804d2fe:	0a1b      	lsrs	r3, r3, #8
 804d300:	b29b      	uxth	r3, r3
 804d302:	b2da      	uxtb	r2, r3
 804d304:	8bfb      	ldrh	r3, [r7, #30]
 804d306:	4611      	mov	r1, r2
 804d308:	4618      	mov	r0, r3
 804d30a:	f7ff ff31 	bl	804d170 <UpdateCRC16_XMODEM>
 804d30e:	4603      	mov	r3, r0
 804d310:	83fb      	strh	r3, [r7, #30]
        for (uint32_t i = 0; i < sample; i++) {
 804d312:	69bb      	ldr	r3, [r7, #24]
 804d314:	3301      	adds	r3, #1
 804d316:	61bb      	str	r3, [r7, #24]
 804d318:	69ba      	ldr	r2, [r7, #24]
 804d31a:	68bb      	ldr	r3, [r7, #8]
 804d31c:	429a      	cmp	r2, r3
 804d31e:	d3cf      	bcc.n	804d2c0 <SPI_SlaveDevice_CollectData+0x74>
        }

        spi_device_instance.data_context.type = type;
 804d320:	4a15      	ldr	r2, [pc, #84]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d322:	7bfb      	ldrb	r3, [r7, #15]
 804d324:	7113      	strb	r3, [r2, #4]
        spi_device_instance.data_context.sample = sample;
 804d326:	4a14      	ldr	r2, [pc, #80]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d328:	68bb      	ldr	r3, [r7, #8]
 804d32a:	6093      	str	r3, [r2, #8]
        spi_device_instance.data_context.data_size = sample * 2;
 804d32c:	68bb      	ldr	r3, [r7, #8]
 804d32e:	005b      	lsls	r3, r3, #1
 804d330:	4a11      	ldr	r2, [pc, #68]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d332:	60d3      	str	r3, [r2, #12]
        spi_device_instance.data_context.crc = crc;
 804d334:	4a10      	ldr	r2, [pc, #64]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d336:	8bfb      	ldrh	r3, [r7, #30]
 804d338:	8213      	strh	r3, [r2, #16]
        spi_device_instance.data_context.is_valid = true;
 804d33a:	4b0f      	ldr	r3, [pc, #60]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d33c:	2201      	movs	r2, #1
 804d33e:	749a      	strb	r2, [r3, #18]

        if (SPI_SlaveDevice_ResetDMA(data_addr, spi_device_instance.data_context.data_size) != E_OK) {
 804d340:	4b0d      	ldr	r3, [pc, #52]	@ (804d378 <SPI_SlaveDevice_CollectData+0x12c>)
 804d342:	68db      	ldr	r3, [r3, #12]
 804d344:	4619      	mov	r1, r3
 804d346:	6878      	ldr	r0, [r7, #4]
 804d348:	f000 f840 	bl	804d3cc <SPI_SlaveDevice_ResetDMA>
 804d34c:	4603      	mov	r3, r0
 804d34e:	2b00      	cmp	r3, #0
 804d350:	d004      	beq.n	804d35c <SPI_SlaveDevice_CollectData+0x110>
            toCM4_SetState(TOCM4_ERROR);
 804d352:	2000      	movs	r0, #0
 804d354:	f7f3 fb6c 	bl	8040a30 <toCM4_SetState>
            return E_ERROR;
 804d358:	2301      	movs	r3, #1
 804d35a:	e008      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
        }

        toCM4_SetState(TOCM4_READYSEND);
 804d35c:	2001      	movs	r0, #1
 804d35e:	f7f3 fb67 	bl	8040a30 <toCM4_SetState>
    } else {
        toCM4_SetState(TOCM4_IDLE);
        return E_BUSY;
    }

    return E_OK;
 804d362:	2300      	movs	r3, #0
 804d364:	e003      	b.n	804d36e <SPI_SlaveDevice_CollectData+0x122>
        toCM4_SetState(TOCM4_IDLE);
 804d366:	2003      	movs	r0, #3
 804d368:	f7f3 fb62 	bl	8040a30 <toCM4_SetState>
        return E_BUSY;
 804d36c:	2302      	movs	r3, #2
}
 804d36e:	4618      	mov	r0, r3
 804d370:	3720      	adds	r7, #32
 804d372:	46bd      	mov	sp, r7
 804d374:	bd80      	pop	{r7, pc}
 804d376:	bf00      	nop
 804d378:	2402d5a8 	.word	0x2402d5a8
 804d37c:	000186a0 	.word	0x000186a0
 804d380:	05e1d27b 	.word	0x05e1d27b

0804d384 <SPI_SlaveDevice_GetDataInfo>:

Std_ReturnType SPI_SlaveDevice_GetDataInfo(DataProcessContext_t *context)
{
 804d384:	b490      	push	{r4, r7}
 804d386:	b082      	sub	sp, #8
 804d388:	af00      	add	r7, sp, #0
 804d38a:	6078      	str	r0, [r7, #4]
    if (!spi_device_instance.is_initialized || !spi_device_instance.data_context.is_valid) {
 804d38c:	4b0e      	ldr	r3, [pc, #56]	@ (804d3c8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 804d38e:	7d1b      	ldrb	r3, [r3, #20]
 804d390:	f083 0301 	eor.w	r3, r3, #1
 804d394:	b2db      	uxtb	r3, r3
 804d396:	2b00      	cmp	r3, #0
 804d398:	d106      	bne.n	804d3a8 <SPI_SlaveDevice_GetDataInfo+0x24>
 804d39a:	4b0b      	ldr	r3, [pc, #44]	@ (804d3c8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 804d39c:	7c9b      	ldrb	r3, [r3, #18]
 804d39e:	f083 0301 	eor.w	r3, r3, #1
 804d3a2:	b2db      	uxtb	r3, r3
 804d3a4:	2b00      	cmp	r3, #0
 804d3a6:	d001      	beq.n	804d3ac <SPI_SlaveDevice_GetDataInfo+0x28>
        return E_ERROR;
 804d3a8:	2301      	movs	r3, #1
 804d3aa:	e007      	b.n	804d3bc <SPI_SlaveDevice_GetDataInfo+0x38>
    }

    *context = spi_device_instance.data_context;
 804d3ac:	687a      	ldr	r2, [r7, #4]
 804d3ae:	4b06      	ldr	r3, [pc, #24]	@ (804d3c8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 804d3b0:	4614      	mov	r4, r2
 804d3b2:	3304      	adds	r3, #4
 804d3b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 804d3b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return E_OK;
 804d3ba:	2300      	movs	r3, #0
}
 804d3bc:	4618      	mov	r0, r3
 804d3be:	3708      	adds	r7, #8
 804d3c0:	46bd      	mov	sp, r7
 804d3c2:	bc90      	pop	{r4, r7}
 804d3c4:	4770      	bx	lr
 804d3c6:	bf00      	nop
 804d3c8:	2402d5a8 	.word	0x2402d5a8

0804d3cc <SPI_SlaveDevice_ResetDMA>:

Std_ReturnType SPI_SlaveDevice_ResetDMA(uint32_t data_addr, uint32_t data_size)
{
 804d3cc:	b580      	push	{r7, lr}
 804d3ce:	b084      	sub	sp, #16
 804d3d0:	af02      	add	r7, sp, #8
 804d3d2:	6078      	str	r0, [r7, #4]
 804d3d4:	6039      	str	r1, [r7, #0]
    if (!spi_device_instance.is_initialized) {
 804d3d6:	4b22      	ldr	r3, [pc, #136]	@ (804d460 <SPI_SlaveDevice_ResetDMA+0x94>)
 804d3d8:	7d1b      	ldrb	r3, [r3, #20]
 804d3da:	f083 0301 	eor.w	r3, r3, #1
 804d3de:	b2db      	uxtb	r3, r3
 804d3e0:	2b00      	cmp	r3, #0
 804d3e2:	d001      	beq.n	804d3e8 <SPI_SlaveDevice_ResetDMA+0x1c>
        return E_ERROR;
 804d3e4:	2301      	movs	r3, #1
 804d3e6:	e036      	b.n	804d456 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    if (toCM4_GetState() != TOCM4_BUSY && toCM4_GetState() != TOCM4_READYSEND) {
 804d3e8:	f7f3 fb3e 	bl	8040a68 <toCM4_GetState>
 804d3ec:	4603      	mov	r3, r0
 804d3ee:	2b02      	cmp	r3, #2
 804d3f0:	d006      	beq.n	804d400 <SPI_SlaveDevice_ResetDMA+0x34>
 804d3f2:	f7f3 fb39 	bl	8040a68 <toCM4_GetState>
 804d3f6:	4603      	mov	r3, r0
 804d3f8:	2b01      	cmp	r3, #1
 804d3fa:	d001      	beq.n	804d400 <SPI_SlaveDevice_ResetDMA+0x34>
        return E_ERROR;
 804d3fc:	2301      	movs	r3, #1
 804d3fe:	e02a      	b.n	804d456 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 804d400:	2107      	movs	r1, #7
 804d402:	4818      	ldr	r0, [pc, #96]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d404:	f7ff fd8c 	bl	804cf20 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 804d408:	4817      	ldr	r0, [pc, #92]	@ (804d468 <SPI_SlaveDevice_ResetDMA+0x9c>)
 804d40a:	f7ff fd57 	bl	804cebc <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(SPI_SLAVE_INSTANCE);
 804d40e:	4816      	ldr	r0, [pc, #88]	@ (804d468 <SPI_SlaveDevice_ResetDMA+0x9c>)
 804d410:	f7ff fd34 	bl	804ce7c <LL_SPI_Disable>

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 804d414:	4813      	ldr	r0, [pc, #76]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d416:	f7ff fe4b 	bl	804d0b0 <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 804d41a:	4812      	ldr	r0, [pc, #72]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d41c:	f7ff fe56 	bl	804d0cc <LL_DMA_ClearFlag_TE7>

    LL_DMA_ConfigAddresses(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM,
 804d420:	2340      	movs	r3, #64	@ 0x40
 804d422:	9300      	str	r3, [sp, #0]
 804d424:	4b11      	ldr	r3, [pc, #68]	@ (804d46c <SPI_SlaveDevice_ResetDMA+0xa0>)
 804d426:	687a      	ldr	r2, [r7, #4]
 804d428:	2107      	movs	r1, #7
 804d42a:	480e      	ldr	r0, [pc, #56]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d42c:	f7ff fde8 	bl	804d000 <LL_DMA_ConfigAddresses>
                           data_addr, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR,
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetDataLength(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, data_size);
 804d430:	683a      	ldr	r2, [r7, #0]
 804d432:	2107      	movs	r1, #7
 804d434:	480b      	ldr	r0, [pc, #44]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d436:	f7ff fdbb 	bl	804cfb0 <LL_DMA_SetDataLength>

    LL_SPI_Enable(SPI_SLAVE_INSTANCE);
 804d43a:	480b      	ldr	r0, [pc, #44]	@ (804d468 <SPI_SlaveDevice_ResetDMA+0x9c>)
 804d43c:	f7ff fd0e 	bl	804ce5c <LL_SPI_Enable>
    LL_SPI_EnableDMAReq_TX(SPI_SLAVE_INSTANCE);
 804d440:	4809      	ldr	r0, [pc, #36]	@ (804d468 <SPI_SlaveDevice_ResetDMA+0x9c>)
 804d442:	f7ff fd2b 	bl	804ce9c <LL_SPI_EnableDMAReq_TX>
    LL_DMA_EnableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 804d446:	2107      	movs	r1, #7
 804d448:	4806      	ldr	r0, [pc, #24]	@ (804d464 <SPI_SlaveDevice_ResetDMA+0x98>)
 804d44a:	f7ff fd47 	bl	804cedc <LL_DMA_EnableStream>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 804d44e:	4b04      	ldr	r3, [pc, #16]	@ (804d460 <SPI_SlaveDevice_ResetDMA+0x94>)
 804d450:	2200      	movs	r2, #0
 804d452:	701a      	strb	r2, [r3, #0]
    return E_OK;
 804d454:	2300      	movs	r3, #0
}
 804d456:	4618      	mov	r0, r3
 804d458:	3708      	adds	r7, #8
 804d45a:	46bd      	mov	sp, r7
 804d45c:	bd80      	pop	{r7, pc}
 804d45e:	bf00      	nop
 804d460:	2402d5a8 	.word	0x2402d5a8
 804d464:	40020000 	.word	0x40020000
 804d468:	40015000 	.word	0x40015000
 804d46c:	40015020 	.word	0x40015020

0804d470 <SPI_SlaveDevice_Disable>:

Std_ReturnType SPI_SlaveDevice_Disable(void)
{
 804d470:	b580      	push	{r7, lr}
 804d472:	af00      	add	r7, sp, #0
    if (!spi_device_instance.is_initialized) {
 804d474:	4b10      	ldr	r3, [pc, #64]	@ (804d4b8 <SPI_SlaveDevice_Disable+0x48>)
 804d476:	7d1b      	ldrb	r3, [r3, #20]
 804d478:	f083 0301 	eor.w	r3, r3, #1
 804d47c:	b2db      	uxtb	r3, r3
 804d47e:	2b00      	cmp	r3, #0
 804d480:	d001      	beq.n	804d486 <SPI_SlaveDevice_Disable+0x16>
        return E_ERROR;
 804d482:	2301      	movs	r3, #1
 804d484:	e016      	b.n	804d4b4 <SPI_SlaveDevice_Disable+0x44>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 804d486:	2107      	movs	r1, #7
 804d488:	480c      	ldr	r0, [pc, #48]	@ (804d4bc <SPI_SlaveDevice_Disable+0x4c>)
 804d48a:	f7ff fd49 	bl	804cf20 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 804d48e:	480c      	ldr	r0, [pc, #48]	@ (804d4c0 <SPI_SlaveDevice_Disable+0x50>)
 804d490:	f7ff fd14 	bl	804cebc <LL_SPI_DisableDMAReq_TX>
//    LL_SPI_Disable(SPI_SLAVE_INSTANCE);

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 804d494:	4809      	ldr	r0, [pc, #36]	@ (804d4bc <SPI_SlaveDevice_Disable+0x4c>)
 804d496:	f7ff fe0b 	bl	804d0b0 <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 804d49a:	4808      	ldr	r0, [pc, #32]	@ (804d4bc <SPI_SlaveDevice_Disable+0x4c>)
 804d49c:	f7ff fe16 	bl	804d0cc <LL_DMA_ClearFlag_TE7>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 804d4a0:	4b05      	ldr	r3, [pc, #20]	@ (804d4b8 <SPI_SlaveDevice_Disable+0x48>)
 804d4a2:	2200      	movs	r2, #0
 804d4a4:	701a      	strb	r2, [r3, #0]
    spi_device_instance.data_context.is_valid = false;
 804d4a6:	4b04      	ldr	r3, [pc, #16]	@ (804d4b8 <SPI_SlaveDevice_Disable+0x48>)
 804d4a8:	2200      	movs	r2, #0
 804d4aa:	749a      	strb	r2, [r3, #18]
    toCM4_SetState(TOCM4_IDLE);
 804d4ac:	2003      	movs	r0, #3
 804d4ae:	f7f3 fabf 	bl	8040a30 <toCM4_SetState>
    return E_OK;
 804d4b2:	2300      	movs	r3, #0
}
 804d4b4:	4618      	mov	r0, r3
 804d4b6:	bd80      	pop	{r7, pc}
 804d4b8:	2402d5a8 	.word	0x2402d5a8
 804d4bc:	40020000 	.word	0x40020000
 804d4c0:	40015000 	.word	0x40015000

0804d4c4 <SPI_SlaveDevice_SetTransferState>:
{
    return spi_device_instance.transfer_state;
}

void SPI_SlaveDevice_SetTransferState(SPI_TransferState_t state)
{
 804d4c4:	b480      	push	{r7}
 804d4c6:	b083      	sub	sp, #12
 804d4c8:	af00      	add	r7, sp, #0
 804d4ca:	4603      	mov	r3, r0
 804d4cc:	71fb      	strb	r3, [r7, #7]
    spi_device_instance.transfer_state = state;
 804d4ce:	4a04      	ldr	r2, [pc, #16]	@ (804d4e0 <SPI_SlaveDevice_SetTransferState+0x1c>)
 804d4d0:	79fb      	ldrb	r3, [r7, #7]
 804d4d2:	7013      	strb	r3, [r2, #0]
}
 804d4d4:	bf00      	nop
 804d4d6:	370c      	adds	r7, #12
 804d4d8:	46bd      	mov	sp, r7
 804d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d4de:	4770      	bx	lr
 804d4e0:	2402d5a8 	.word	0x2402d5a8

0804d4e4 <SPI_SlaveDevice_GetCM4State>:

toCM4_State_t SPI_SlaveDevice_GetCM4State(void)
{
 804d4e4:	b580      	push	{r7, lr}
 804d4e6:	af00      	add	r7, sp, #0
    return toCM4_GetState();
 804d4e8:	f7f3 fabe 	bl	8040a68 <toCM4_GetState>
 804d4ec:	4603      	mov	r3, r0
}
 804d4ee:	4618      	mov	r0, r3
 804d4f0:	bd80      	pop	{r7, pc}
	...

0804d4f4 <isLeapYear>:
    uint8_t minutes;
    uint8_t seconds;
} s_WorkingTimeClock_context = {0, 0, 0, 0};

static inline uint8_t isLeapYear(uint16_t fullYear)
{
 804d4f4:	b480      	push	{r7}
 804d4f6:	b083      	sub	sp, #12
 804d4f8:	af00      	add	r7, sp, #0
 804d4fa:	4603      	mov	r3, r0
 804d4fc:	80fb      	strh	r3, [r7, #6]
    return ((fullYear % 4 == 0) && ((fullYear % 100 != 0) || (fullYear % 400 == 0))) ? 1 : 0;
 804d4fe:	88fb      	ldrh	r3, [r7, #6]
 804d500:	f003 0303 	and.w	r3, r3, #3
 804d504:	b29b      	uxth	r3, r3
 804d506:	2b00      	cmp	r3, #0
 804d508:	d11a      	bne.n	804d540 <isLeapYear+0x4c>
 804d50a:	88fb      	ldrh	r3, [r7, #6]
 804d50c:	4a10      	ldr	r2, [pc, #64]	@ (804d550 <isLeapYear+0x5c>)
 804d50e:	fba2 1203 	umull	r1, r2, r2, r3
 804d512:	0952      	lsrs	r2, r2, #5
 804d514:	2164      	movs	r1, #100	@ 0x64
 804d516:	fb01 f202 	mul.w	r2, r1, r2
 804d51a:	1a9b      	subs	r3, r3, r2
 804d51c:	b29b      	uxth	r3, r3
 804d51e:	2b00      	cmp	r3, #0
 804d520:	d10c      	bne.n	804d53c <isLeapYear+0x48>
 804d522:	88fb      	ldrh	r3, [r7, #6]
 804d524:	4a0a      	ldr	r2, [pc, #40]	@ (804d550 <isLeapYear+0x5c>)
 804d526:	fba2 1203 	umull	r1, r2, r2, r3
 804d52a:	09d2      	lsrs	r2, r2, #7
 804d52c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 804d530:	fb01 f202 	mul.w	r2, r1, r2
 804d534:	1a9b      	subs	r3, r3, r2
 804d536:	b29b      	uxth	r3, r3
 804d538:	2b00      	cmp	r3, #0
 804d53a:	d101      	bne.n	804d540 <isLeapYear+0x4c>
 804d53c:	2301      	movs	r3, #1
 804d53e:	e000      	b.n	804d542 <isLeapYear+0x4e>
 804d540:	2300      	movs	r3, #0
 804d542:	b2db      	uxtb	r3, r3
}
 804d544:	4618      	mov	r0, r3
 804d546:	370c      	adds	r7, #12
 804d548:	46bd      	mov	sp, r7
 804d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d54e:	4770      	bx	lr
 804d550:	51eb851f 	.word	0x51eb851f

0804d554 <getMaxDays>:

static inline uint8_t getMaxDays(uint8_t month, uint16_t fullYear)
{
 804d554:	b580      	push	{r7, lr}
 804d556:	b082      	sub	sp, #8
 804d558:	af00      	add	r7, sp, #0
 804d55a:	4603      	mov	r3, r0
 804d55c:	460a      	mov	r2, r1
 804d55e:	71fb      	strb	r3, [r7, #7]
 804d560:	4613      	mov	r3, r2
 804d562:	80bb      	strh	r3, [r7, #4]
    static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (month == 2) {
 804d564:	79fb      	ldrb	r3, [r7, #7]
 804d566:	2b02      	cmp	r3, #2
 804d568:	d107      	bne.n	804d57a <getMaxDays+0x26>
        return 28 + isLeapYear(fullYear);
 804d56a:	88bb      	ldrh	r3, [r7, #4]
 804d56c:	4618      	mov	r0, r3
 804d56e:	f7ff ffc1 	bl	804d4f4 <isLeapYear>
 804d572:	4603      	mov	r3, r0
 804d574:	331c      	adds	r3, #28
 804d576:	b2db      	uxtb	r3, r3
 804d578:	e003      	b.n	804d582 <getMaxDays+0x2e>
    } else {
        return daysInMonth[month - 1];
 804d57a:	79fb      	ldrb	r3, [r7, #7]
 804d57c:	3b01      	subs	r3, #1
 804d57e:	4a03      	ldr	r2, [pc, #12]	@ (804d58c <getMaxDays+0x38>)
 804d580:	5cd3      	ldrb	r3, [r2, r3]
    }
}
 804d582:	4618      	mov	r0, r3
 804d584:	3708      	adds	r7, #8
 804d586:	46bd      	mov	sp, r7
 804d588:	bd80      	pop	{r7, pc}
 804d58a:	bf00      	nop
 804d58c:	08071ddc 	.word	0x08071ddc

0804d590 <DateTimeToEpoch>:

static uint32_t DateTimeToEpoch(const s_DateTime *dt)
{
 804d590:	b580      	push	{r7, lr}
 804d592:	b086      	sub	sp, #24
 804d594:	af00      	add	r7, sp, #0
 804d596:	6078      	str	r0, [r7, #4]
    uint32_t days = 0;
 804d598:	2300      	movs	r3, #0
 804d59a:	617b      	str	r3, [r7, #20]
    uint16_t fullYear = 2000 + dt->year;
 804d59c:	687b      	ldr	r3, [r7, #4]
 804d59e:	789b      	ldrb	r3, [r3, #2]
 804d5a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 804d5a4:	81fb      	strh	r3, [r7, #14]

    for (uint16_t year = 2000; year < fullYear; year++)
 804d5a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 804d5aa:	827b      	strh	r3, [r7, #18]
 804d5ac:	e00d      	b.n	804d5ca <DateTimeToEpoch+0x3a>
    {
        days += 365 + isLeapYear(year);
 804d5ae:	8a7b      	ldrh	r3, [r7, #18]
 804d5b0:	4618      	mov	r0, r3
 804d5b2:	f7ff ff9f 	bl	804d4f4 <isLeapYear>
 804d5b6:	4603      	mov	r3, r0
 804d5b8:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 804d5bc:	461a      	mov	r2, r3
 804d5be:	697b      	ldr	r3, [r7, #20]
 804d5c0:	4413      	add	r3, r2
 804d5c2:	617b      	str	r3, [r7, #20]
    for (uint16_t year = 2000; year < fullYear; year++)
 804d5c4:	8a7b      	ldrh	r3, [r7, #18]
 804d5c6:	3301      	adds	r3, #1
 804d5c8:	827b      	strh	r3, [r7, #18]
 804d5ca:	8a7a      	ldrh	r2, [r7, #18]
 804d5cc:	89fb      	ldrh	r3, [r7, #14]
 804d5ce:	429a      	cmp	r2, r3
 804d5d0:	d3ed      	bcc.n	804d5ae <DateTimeToEpoch+0x1e>
    }
    for (uint8_t m = 1; m < dt->month; m++)
 804d5d2:	2301      	movs	r3, #1
 804d5d4:	747b      	strb	r3, [r7, #17]
 804d5d6:	e00d      	b.n	804d5f4 <DateTimeToEpoch+0x64>
    {
        days += getMaxDays(m, fullYear);
 804d5d8:	89fa      	ldrh	r2, [r7, #14]
 804d5da:	7c7b      	ldrb	r3, [r7, #17]
 804d5dc:	4611      	mov	r1, r2
 804d5de:	4618      	mov	r0, r3
 804d5e0:	f7ff ffb8 	bl	804d554 <getMaxDays>
 804d5e4:	4603      	mov	r3, r0
 804d5e6:	461a      	mov	r2, r3
 804d5e8:	697b      	ldr	r3, [r7, #20]
 804d5ea:	4413      	add	r3, r2
 804d5ec:	617b      	str	r3, [r7, #20]
    for (uint8_t m = 1; m < dt->month; m++)
 804d5ee:	7c7b      	ldrb	r3, [r7, #17]
 804d5f0:	3301      	adds	r3, #1
 804d5f2:	747b      	strb	r3, [r7, #17]
 804d5f4:	687b      	ldr	r3, [r7, #4]
 804d5f6:	785b      	ldrb	r3, [r3, #1]
 804d5f8:	7c7a      	ldrb	r2, [r7, #17]
 804d5fa:	429a      	cmp	r2, r3
 804d5fc:	d3ec      	bcc.n	804d5d8 <DateTimeToEpoch+0x48>
    }
    days += dt->day - 1;
 804d5fe:	687b      	ldr	r3, [r7, #4]
 804d600:	781b      	ldrb	r3, [r3, #0]
 804d602:	461a      	mov	r2, r3
 804d604:	697b      	ldr	r3, [r7, #20]
 804d606:	4413      	add	r3, r2
 804d608:	3b01      	subs	r3, #1
 804d60a:	617b      	str	r3, [r7, #20]

    return days * 86400UL + dt->hour * 3600UL + dt->minute * 60UL + dt->second;
 804d60c:	697b      	ldr	r3, [r7, #20]
 804d60e:	4a0d      	ldr	r2, [pc, #52]	@ (804d644 <DateTimeToEpoch+0xb4>)
 804d610:	fb03 f202 	mul.w	r2, r3, r2
 804d614:	687b      	ldr	r3, [r7, #4]
 804d616:	78db      	ldrb	r3, [r3, #3]
 804d618:	4619      	mov	r1, r3
 804d61a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 804d61e:	fb01 f303 	mul.w	r3, r1, r3
 804d622:	441a      	add	r2, r3
 804d624:	687b      	ldr	r3, [r7, #4]
 804d626:	791b      	ldrb	r3, [r3, #4]
 804d628:	4619      	mov	r1, r3
 804d62a:	460b      	mov	r3, r1
 804d62c:	011b      	lsls	r3, r3, #4
 804d62e:	1a5b      	subs	r3, r3, r1
 804d630:	009b      	lsls	r3, r3, #2
 804d632:	4413      	add	r3, r2
 804d634:	687a      	ldr	r2, [r7, #4]
 804d636:	7952      	ldrb	r2, [r2, #5]
 804d638:	4413      	add	r3, r2
}
 804d63a:	4618      	mov	r0, r3
 804d63c:	3718      	adds	r7, #24
 804d63e:	46bd      	mov	sp, r7
 804d640:	bd80      	pop	{r7, pc}
 804d642:	bf00      	nop
 804d644:	00015180 	.word	0x00015180

0804d648 <EpochToDateTime>:

void EpochToDateTime(uint32_t epoch, s_DateTime *dt)
{
 804d648:	b580      	push	{r7, lr}
 804d64a:	b086      	sub	sp, #24
 804d64c:	af00      	add	r7, sp, #0
 804d64e:	6078      	str	r0, [r7, #4]
 804d650:	6039      	str	r1, [r7, #0]
    uint32_t days = epoch / 86400;
 804d652:	687b      	ldr	r3, [r7, #4]
 804d654:	4a3c      	ldr	r2, [pc, #240]	@ (804d748 <EpochToDateTime+0x100>)
 804d656:	fba2 2303 	umull	r2, r3, r2, r3
 804d65a:	0c1b      	lsrs	r3, r3, #16
 804d65c:	617b      	str	r3, [r7, #20]
    uint32_t remSeconds = epoch % 86400;
 804d65e:	687b      	ldr	r3, [r7, #4]
 804d660:	4a39      	ldr	r2, [pc, #228]	@ (804d748 <EpochToDateTime+0x100>)
 804d662:	fba2 1203 	umull	r1, r2, r2, r3
 804d666:	0c12      	lsrs	r2, r2, #16
 804d668:	4938      	ldr	r1, [pc, #224]	@ (804d74c <EpochToDateTime+0x104>)
 804d66a:	fb01 f202 	mul.w	r2, r1, r2
 804d66e:	1a9b      	subs	r3, r3, r2
 804d670:	60fb      	str	r3, [r7, #12]

    dt->hour   = remSeconds / 3600;
 804d672:	68fb      	ldr	r3, [r7, #12]
 804d674:	4a36      	ldr	r2, [pc, #216]	@ (804d750 <EpochToDateTime+0x108>)
 804d676:	fba2 2303 	umull	r2, r3, r2, r3
 804d67a:	0adb      	lsrs	r3, r3, #11
 804d67c:	b2da      	uxtb	r2, r3
 804d67e:	683b      	ldr	r3, [r7, #0]
 804d680:	70da      	strb	r2, [r3, #3]
    remSeconds %= 3600;
 804d682:	68fb      	ldr	r3, [r7, #12]
 804d684:	4a32      	ldr	r2, [pc, #200]	@ (804d750 <EpochToDateTime+0x108>)
 804d686:	fba2 1203 	umull	r1, r2, r2, r3
 804d68a:	0ad2      	lsrs	r2, r2, #11
 804d68c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 804d690:	fb01 f202 	mul.w	r2, r1, r2
 804d694:	1a9b      	subs	r3, r3, r2
 804d696:	60fb      	str	r3, [r7, #12]
    dt->minute = remSeconds / 60;
 804d698:	68fb      	ldr	r3, [r7, #12]
 804d69a:	4a2e      	ldr	r2, [pc, #184]	@ (804d754 <EpochToDateTime+0x10c>)
 804d69c:	fba2 2303 	umull	r2, r3, r2, r3
 804d6a0:	095b      	lsrs	r3, r3, #5
 804d6a2:	b2da      	uxtb	r2, r3
 804d6a4:	683b      	ldr	r3, [r7, #0]
 804d6a6:	711a      	strb	r2, [r3, #4]
    dt->second = remSeconds % 60;
 804d6a8:	68f9      	ldr	r1, [r7, #12]
 804d6aa:	4b2a      	ldr	r3, [pc, #168]	@ (804d754 <EpochToDateTime+0x10c>)
 804d6ac:	fba3 2301 	umull	r2, r3, r3, r1
 804d6b0:	095a      	lsrs	r2, r3, #5
 804d6b2:	4613      	mov	r3, r2
 804d6b4:	011b      	lsls	r3, r3, #4
 804d6b6:	1a9b      	subs	r3, r3, r2
 804d6b8:	009b      	lsls	r3, r3, #2
 804d6ba:	1aca      	subs	r2, r1, r3
 804d6bc:	b2d2      	uxtb	r2, r2
 804d6be:	683b      	ldr	r3, [r7, #0]
 804d6c0:	715a      	strb	r2, [r3, #5]

    uint16_t year = 2000;
 804d6c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 804d6c6:	827b      	strh	r3, [r7, #18]
    while (1)
    {
        uint16_t daysInYear = 365 + isLeapYear(year);
 804d6c8:	8a7b      	ldrh	r3, [r7, #18]
 804d6ca:	4618      	mov	r0, r3
 804d6cc:	f7ff ff12 	bl	804d4f4 <isLeapYear>
 804d6d0:	4603      	mov	r3, r0
 804d6d2:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 804d6d6:	817b      	strh	r3, [r7, #10]
        if (days >= daysInYear)
 804d6d8:	897b      	ldrh	r3, [r7, #10]
 804d6da:	697a      	ldr	r2, [r7, #20]
 804d6dc:	429a      	cmp	r2, r3
 804d6de:	d307      	bcc.n	804d6f0 <EpochToDateTime+0xa8>
        {
            days -= daysInYear;
 804d6e0:	897b      	ldrh	r3, [r7, #10]
 804d6e2:	697a      	ldr	r2, [r7, #20]
 804d6e4:	1ad3      	subs	r3, r2, r3
 804d6e6:	617b      	str	r3, [r7, #20]
            year++;
 804d6e8:	8a7b      	ldrh	r3, [r7, #18]
 804d6ea:	3301      	adds	r3, #1
 804d6ec:	827b      	strh	r3, [r7, #18]
    {
 804d6ee:	e7eb      	b.n	804d6c8 <EpochToDateTime+0x80>
        } else
        {
            break;
 804d6f0:	bf00      	nop
        }
    }
    dt->year = year - 2000;
 804d6f2:	8a7b      	ldrh	r3, [r7, #18]
 804d6f4:	b2db      	uxtb	r3, r3
 804d6f6:	3330      	adds	r3, #48	@ 0x30
 804d6f8:	b2da      	uxtb	r2, r3
 804d6fa:	683b      	ldr	r3, [r7, #0]
 804d6fc:	709a      	strb	r2, [r3, #2]

    uint8_t month = 1;
 804d6fe:	2301      	movs	r3, #1
 804d700:	747b      	strb	r3, [r7, #17]
    while (1)
    {
        uint8_t dim = getMaxDays(month, year);
 804d702:	8a7a      	ldrh	r2, [r7, #18]
 804d704:	7c7b      	ldrb	r3, [r7, #17]
 804d706:	4611      	mov	r1, r2
 804d708:	4618      	mov	r0, r3
 804d70a:	f7ff ff23 	bl	804d554 <getMaxDays>
 804d70e:	4603      	mov	r3, r0
 804d710:	727b      	strb	r3, [r7, #9]
        if (days >= dim)
 804d712:	7a7b      	ldrb	r3, [r7, #9]
 804d714:	697a      	ldr	r2, [r7, #20]
 804d716:	429a      	cmp	r2, r3
 804d718:	d307      	bcc.n	804d72a <EpochToDateTime+0xe2>
        {
            days -= dim;
 804d71a:	7a7b      	ldrb	r3, [r7, #9]
 804d71c:	697a      	ldr	r2, [r7, #20]
 804d71e:	1ad3      	subs	r3, r2, r3
 804d720:	617b      	str	r3, [r7, #20]
            month++;
 804d722:	7c7b      	ldrb	r3, [r7, #17]
 804d724:	3301      	adds	r3, #1
 804d726:	747b      	strb	r3, [r7, #17]
    {
 804d728:	e7eb      	b.n	804d702 <EpochToDateTime+0xba>
        }
        else
        {
            break;
 804d72a:	bf00      	nop
        }
    }
    dt->month = month;
 804d72c:	683b      	ldr	r3, [r7, #0]
 804d72e:	7c7a      	ldrb	r2, [r7, #17]
 804d730:	705a      	strb	r2, [r3, #1]
    dt->day = days + 1;
 804d732:	697b      	ldr	r3, [r7, #20]
 804d734:	b2db      	uxtb	r3, r3
 804d736:	3301      	adds	r3, #1
 804d738:	b2da      	uxtb	r2, r3
 804d73a:	683b      	ldr	r3, [r7, #0]
 804d73c:	701a      	strb	r2, [r3, #0]
}
 804d73e:	bf00      	nop
 804d740:	3718      	adds	r7, #24
 804d742:	46bd      	mov	sp, r7
 804d744:	bd80      	pop	{r7, pc}
 804d746:	bf00      	nop
 804d748:	c22e4507 	.word	0xc22e4507
 804d74c:	00015180 	.word	0x00015180
 804d750:	91a2b3c5 	.word	0x91a2b3c5
 804d754:	88888889 	.word	0x88888889

0804d758 <Utils_SoftTime_Update>:

void Utils_SoftTime_Update(void) {
 804d758:	b590      	push	{r4, r7, lr}
 804d75a:	b085      	sub	sp, #20
 804d75c:	af00      	add	r7, sp, #0
    // Update RTC
    if (++s_RealTimeClock_context.second >= 60) {
 804d75e:	4b94      	ldr	r3, [pc, #592]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d760:	795b      	ldrb	r3, [r3, #5]
 804d762:	3301      	adds	r3, #1
 804d764:	b2da      	uxtb	r2, r3
 804d766:	4b92      	ldr	r3, [pc, #584]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d768:	715a      	strb	r2, [r3, #5]
 804d76a:	4b91      	ldr	r3, [pc, #580]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d76c:	795b      	ldrb	r3, [r3, #5]
 804d76e:	2b3b      	cmp	r3, #59	@ 0x3b
 804d770:	d94c      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
        s_RealTimeClock_context.second = 0;
 804d772:	4b8f      	ldr	r3, [pc, #572]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d774:	2200      	movs	r2, #0
 804d776:	715a      	strb	r2, [r3, #5]
        if (++s_RealTimeClock_context.minute >= 60) {
 804d778:	4b8d      	ldr	r3, [pc, #564]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d77a:	791b      	ldrb	r3, [r3, #4]
 804d77c:	3301      	adds	r3, #1
 804d77e:	b2da      	uxtb	r2, r3
 804d780:	4b8b      	ldr	r3, [pc, #556]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d782:	711a      	strb	r2, [r3, #4]
 804d784:	4b8a      	ldr	r3, [pc, #552]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d786:	791b      	ldrb	r3, [r3, #4]
 804d788:	2b3b      	cmp	r3, #59	@ 0x3b
 804d78a:	d93f      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
            s_RealTimeClock_context.minute = 0;
 804d78c:	4b88      	ldr	r3, [pc, #544]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d78e:	2200      	movs	r2, #0
 804d790:	711a      	strb	r2, [r3, #4]
            if (++s_RealTimeClock_context.hour >= 24) {
 804d792:	4b87      	ldr	r3, [pc, #540]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d794:	78db      	ldrb	r3, [r3, #3]
 804d796:	3301      	adds	r3, #1
 804d798:	b2da      	uxtb	r2, r3
 804d79a:	4b85      	ldr	r3, [pc, #532]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d79c:	70da      	strb	r2, [r3, #3]
 804d79e:	4b84      	ldr	r3, [pc, #528]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7a0:	78db      	ldrb	r3, [r3, #3]
 804d7a2:	2b17      	cmp	r3, #23
 804d7a4:	d932      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
                s_RealTimeClock_context.hour = 0;
 804d7a6:	4b82      	ldr	r3, [pc, #520]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7a8:	2200      	movs	r2, #0
 804d7aa:	70da      	strb	r2, [r3, #3]
                if (++s_RealTimeClock_context.day > getMaxDays(s_RealTimeClock_context.month, s_RealTimeClock_context.year)) {
 804d7ac:	4b80      	ldr	r3, [pc, #512]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7ae:	781b      	ldrb	r3, [r3, #0]
 804d7b0:	3301      	adds	r3, #1
 804d7b2:	b2da      	uxtb	r2, r3
 804d7b4:	4b7e      	ldr	r3, [pc, #504]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7b6:	701a      	strb	r2, [r3, #0]
 804d7b8:	4b7d      	ldr	r3, [pc, #500]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7ba:	781c      	ldrb	r4, [r3, #0]
 804d7bc:	4b7c      	ldr	r3, [pc, #496]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7be:	785b      	ldrb	r3, [r3, #1]
 804d7c0:	4a7b      	ldr	r2, [pc, #492]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7c2:	7892      	ldrb	r2, [r2, #2]
 804d7c4:	4611      	mov	r1, r2
 804d7c6:	4618      	mov	r0, r3
 804d7c8:	f7ff fec4 	bl	804d554 <getMaxDays>
 804d7cc:	4603      	mov	r3, r0
 804d7ce:	429c      	cmp	r4, r3
 804d7d0:	d91c      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
                    s_RealTimeClock_context.day = 1;
 804d7d2:	4b77      	ldr	r3, [pc, #476]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7d4:	2201      	movs	r2, #1
 804d7d6:	701a      	strb	r2, [r3, #0]
                    if (++s_RealTimeClock_context.month > 12) {
 804d7d8:	4b75      	ldr	r3, [pc, #468]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7da:	785b      	ldrb	r3, [r3, #1]
 804d7dc:	3301      	adds	r3, #1
 804d7de:	b2da      	uxtb	r2, r3
 804d7e0:	4b73      	ldr	r3, [pc, #460]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7e2:	705a      	strb	r2, [r3, #1]
 804d7e4:	4b72      	ldr	r3, [pc, #456]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7e6:	785b      	ldrb	r3, [r3, #1]
 804d7e8:	2b0c      	cmp	r3, #12
 804d7ea:	d90f      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
                        s_RealTimeClock_context.month = 1;
 804d7ec:	4b70      	ldr	r3, [pc, #448]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7ee:	2201      	movs	r2, #1
 804d7f0:	705a      	strb	r2, [r3, #1]
                        if (++s_RealTimeClock_context.year > 99) {
 804d7f2:	4b6f      	ldr	r3, [pc, #444]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7f4:	789b      	ldrb	r3, [r3, #2]
 804d7f6:	3301      	adds	r3, #1
 804d7f8:	b2da      	uxtb	r2, r3
 804d7fa:	4b6d      	ldr	r3, [pc, #436]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d7fc:	709a      	strb	r2, [r3, #2]
 804d7fe:	4b6c      	ldr	r3, [pc, #432]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d800:	789b      	ldrb	r3, [r3, #2]
 804d802:	2b63      	cmp	r3, #99	@ 0x63
 804d804:	d902      	bls.n	804d80c <Utils_SoftTime_Update+0xb4>
                            s_RealTimeClock_context.year = 0;
 804d806:	4b6a      	ldr	r3, [pc, #424]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d808:	2200      	movs	r2, #0
 804d80a:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    if (++s_WorkingTimeClock_context.seconds >= 60) {
 804d80c:	4b69      	ldr	r3, [pc, #420]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d80e:	799b      	ldrb	r3, [r3, #6]
 804d810:	3301      	adds	r3, #1
 804d812:	b2da      	uxtb	r2, r3
 804d814:	4b67      	ldr	r3, [pc, #412]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d816:	719a      	strb	r2, [r3, #6]
 804d818:	4b66      	ldr	r3, [pc, #408]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d81a:	799b      	ldrb	r3, [r3, #6]
 804d81c:	2b3b      	cmp	r3, #59	@ 0x3b
 804d81e:	d921      	bls.n	804d864 <Utils_SoftTime_Update+0x10c>
        s_WorkingTimeClock_context.seconds = 0;
 804d820:	4b64      	ldr	r3, [pc, #400]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d822:	2200      	movs	r2, #0
 804d824:	719a      	strb	r2, [r3, #6]
        if (++s_WorkingTimeClock_context.minutes >= 60) {
 804d826:	4b63      	ldr	r3, [pc, #396]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d828:	795b      	ldrb	r3, [r3, #5]
 804d82a:	3301      	adds	r3, #1
 804d82c:	b2da      	uxtb	r2, r3
 804d82e:	4b61      	ldr	r3, [pc, #388]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d830:	715a      	strb	r2, [r3, #5]
 804d832:	4b60      	ldr	r3, [pc, #384]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d834:	795b      	ldrb	r3, [r3, #5]
 804d836:	2b3b      	cmp	r3, #59	@ 0x3b
 804d838:	d914      	bls.n	804d864 <Utils_SoftTime_Update+0x10c>
            s_WorkingTimeClock_context.minutes = 0;
 804d83a:	4b5e      	ldr	r3, [pc, #376]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d83c:	2200      	movs	r2, #0
 804d83e:	715a      	strb	r2, [r3, #5]
            if (++s_WorkingTimeClock_context.hours >= 24) {
 804d840:	4b5c      	ldr	r3, [pc, #368]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d842:	791b      	ldrb	r3, [r3, #4]
 804d844:	3301      	adds	r3, #1
 804d846:	b2da      	uxtb	r2, r3
 804d848:	4b5a      	ldr	r3, [pc, #360]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d84a:	711a      	strb	r2, [r3, #4]
 804d84c:	4b59      	ldr	r3, [pc, #356]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d84e:	791b      	ldrb	r3, [r3, #4]
 804d850:	2b17      	cmp	r3, #23
 804d852:	d907      	bls.n	804d864 <Utils_SoftTime_Update+0x10c>
                s_WorkingTimeClock_context.hours = 0;
 804d854:	4b57      	ldr	r3, [pc, #348]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d856:	2200      	movs	r2, #0
 804d858:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 804d85a:	4b56      	ldr	r3, [pc, #344]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d85c:	681b      	ldr	r3, [r3, #0]
 804d85e:	3301      	adds	r3, #1
 804d860:	4a54      	ldr	r2, [pc, #336]	@ (804d9b4 <Utils_SoftTime_Update+0x25c>)
 804d862:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Cronjob
    uint32_t current_epoch = Utils_GetEpoch();
 804d864:	f000 f9d8 	bl	804dc18 <Utils_GetEpoch>
 804d868:	60b8      	str	r0, [r7, #8]
    uint8_t second_changed = (last_second != s_RealTimeClock_context.second);
 804d86a:	4b51      	ldr	r3, [pc, #324]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d86c:	795a      	ldrb	r2, [r3, #5]
 804d86e:	4b52      	ldr	r3, [pc, #328]	@ (804d9b8 <Utils_SoftTime_Update+0x260>)
 804d870:	781b      	ldrb	r3, [r3, #0]
 804d872:	429a      	cmp	r2, r3
 804d874:	bf14      	ite	ne
 804d876:	2301      	movne	r3, #1
 804d878:	2300      	moveq	r3, #0
 804d87a:	b2db      	uxtb	r3, r3
 804d87c:	71fb      	strb	r3, [r7, #7]
    uint8_t minute_changed = (last_minute != s_RealTimeClock_context.minute);
 804d87e:	4b4c      	ldr	r3, [pc, #304]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d880:	791a      	ldrb	r2, [r3, #4]
 804d882:	4b4e      	ldr	r3, [pc, #312]	@ (804d9bc <Utils_SoftTime_Update+0x264>)
 804d884:	781b      	ldrb	r3, [r3, #0]
 804d886:	429a      	cmp	r2, r3
 804d888:	bf14      	ite	ne
 804d88a:	2301      	movne	r3, #1
 804d88c:	2300      	moveq	r3, #0
 804d88e:	b2db      	uxtb	r3, r3
 804d890:	71bb      	strb	r3, [r7, #6]
    uint8_t hour_changed = (last_hour != s_RealTimeClock_context.hour);
 804d892:	4b47      	ldr	r3, [pc, #284]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d894:	78da      	ldrb	r2, [r3, #3]
 804d896:	4b4a      	ldr	r3, [pc, #296]	@ (804d9c0 <Utils_SoftTime_Update+0x268>)
 804d898:	781b      	ldrb	r3, [r3, #0]
 804d89a:	429a      	cmp	r2, r3
 804d89c:	bf14      	ite	ne
 804d89e:	2301      	movne	r3, #1
 804d8a0:	2300      	moveq	r3, #0
 804d8a2:	b2db      	uxtb	r3, r3
 804d8a4:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 804d8a6:	2300      	movs	r3, #0
 804d8a8:	73fb      	strb	r3, [r7, #15]
 804d8aa:	e109      	b.n	804dac0 <Utils_SoftTime_Update+0x368>
        s_Cronjob *job = &s_Cronjob_List[i];
 804d8ac:	7bfa      	ldrb	r2, [r7, #15]
 804d8ae:	4613      	mov	r3, r2
 804d8b0:	00db      	lsls	r3, r3, #3
 804d8b2:	4413      	add	r3, r2
 804d8b4:	009b      	lsls	r3, r3, #2
 804d8b6:	4a43      	ldr	r2, [pc, #268]	@ (804d9c4 <Utils_SoftTime_Update+0x26c>)
 804d8b8:	4413      	add	r3, r2
 804d8ba:	603b      	str	r3, [r7, #0]
        if (!job->active || !job->callback) continue;
 804d8bc:	683b      	ldr	r3, [r7, #0]
 804d8be:	781b      	ldrb	r3, [r3, #0]
 804d8c0:	2b00      	cmp	r3, #0
 804d8c2:	f000 80f3 	beq.w	804daac <Utils_SoftTime_Update+0x354>
 804d8c6:	683b      	ldr	r3, [r7, #0]
 804d8c8:	69db      	ldr	r3, [r3, #28]
 804d8ca:	2b00      	cmp	r3, #0
 804d8cc:	f000 80ee 	beq.w	804daac <Utils_SoftTime_Update+0x354>

        switch (job->type) {
 804d8d0:	683b      	ldr	r3, [r7, #0]
 804d8d2:	785b      	ldrb	r3, [r3, #1]
 804d8d4:	2b02      	cmp	r3, #2
 804d8d6:	d05e      	beq.n	804d996 <Utils_SoftTime_Update+0x23e>
 804d8d8:	2b02      	cmp	r3, #2
 804d8da:	f300 80ee 	bgt.w	804daba <Utils_SoftTime_Update+0x362>
 804d8de:	2b00      	cmp	r3, #0
 804d8e0:	d002      	beq.n	804d8e8 <Utils_SoftTime_Update+0x190>
 804d8e2:	2b01      	cmp	r3, #1
 804d8e4:	d032      	beq.n	804d94c <Utils_SoftTime_Update+0x1f4>
 804d8e6:	e0e8      	b.n	804daba <Utils_SoftTime_Update+0x362>
            case CRON_TYPE_MOMENT:
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 804d8e8:	79fb      	ldrb	r3, [r7, #7]
 804d8ea:	2b00      	cmp	r3, #0
 804d8ec:	f000 80e0 	beq.w	804dab0 <Utils_SoftTime_Update+0x358>
 804d8f0:	4b2f      	ldr	r3, [pc, #188]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d8f2:	78da      	ldrb	r2, [r3, #3]
 804d8f4:	683b      	ldr	r3, [r7, #0]
 804d8f6:	789b      	ldrb	r3, [r3, #2]
 804d8f8:	429a      	cmp	r2, r3
 804d8fa:	f040 80d9 	bne.w	804dab0 <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.minute == job->minute &&
 804d8fe:	4b2c      	ldr	r3, [pc, #176]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d900:	791a      	ldrb	r2, [r3, #4]
 804d902:	683b      	ldr	r3, [r7, #0]
 804d904:	78db      	ldrb	r3, [r3, #3]
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 804d906:	429a      	cmp	r2, r3
 804d908:	f040 80d2 	bne.w	804dab0 <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.second == job->second) {
 804d90c:	4b28      	ldr	r3, [pc, #160]	@ (804d9b0 <Utils_SoftTime_Update+0x258>)
 804d90e:	795a      	ldrb	r2, [r3, #5]
 804d910:	683b      	ldr	r3, [r7, #0]
 804d912:	791b      	ldrb	r3, [r3, #4]
                    s_RealTimeClock_context.minute == job->minute &&
 804d914:	429a      	cmp	r2, r3
 804d916:	f040 80cb 	bne.w	804dab0 <Utils_SoftTime_Update+0x358>
                	job->callback(job->context);
 804d91a:	683b      	ldr	r3, [r7, #0]
 804d91c:	69db      	ldr	r3, [r3, #28]
 804d91e:	683a      	ldr	r2, [r7, #0]
 804d920:	6a12      	ldr	r2, [r2, #32]
 804d922:	4610      	mov	r0, r2
 804d924:	4798      	blx	r3
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 804d926:	683b      	ldr	r3, [r7, #0]
 804d928:	695b      	ldr	r3, [r3, #20]
 804d92a:	2b00      	cmp	r3, #0
 804d92c:	f000 80c0 	beq.w	804dab0 <Utils_SoftTime_Update+0x358>
 804d930:	683b      	ldr	r3, [r7, #0]
 804d932:	699b      	ldr	r3, [r3, #24]
 804d934:	1e5a      	subs	r2, r3, #1
 804d936:	683b      	ldr	r3, [r7, #0]
 804d938:	619a      	str	r2, [r3, #24]
 804d93a:	683b      	ldr	r3, [r7, #0]
 804d93c:	699b      	ldr	r3, [r3, #24]
 804d93e:	2b00      	cmp	r3, #0
 804d940:	f040 80b6 	bne.w	804dab0 <Utils_SoftTime_Update+0x358>
                        job->active = 0;
 804d944:	683b      	ldr	r3, [r7, #0]
 804d946:	2200      	movs	r2, #0
 804d948:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 804d94a:	e0b1      	b.n	804dab0 <Utils_SoftTime_Update+0x358>

            case CRON_TYPE_COUNTDOWN:
                if (current_epoch - job->last_trigger >= job->interval) {
 804d94c:	683b      	ldr	r3, [r7, #0]
 804d94e:	68db      	ldr	r3, [r3, #12]
 804d950:	68ba      	ldr	r2, [r7, #8]
 804d952:	1ad2      	subs	r2, r2, r3
 804d954:	683b      	ldr	r3, [r7, #0]
 804d956:	689b      	ldr	r3, [r3, #8]
 804d958:	429a      	cmp	r2, r3
 804d95a:	f0c0 80ab 	bcc.w	804dab4 <Utils_SoftTime_Update+0x35c>
                	job->callback(job->context);
 804d95e:	683b      	ldr	r3, [r7, #0]
 804d960:	69db      	ldr	r3, [r3, #28]
 804d962:	683a      	ldr	r2, [r7, #0]
 804d964:	6a12      	ldr	r2, [r2, #32]
 804d966:	4610      	mov	r0, r2
 804d968:	4798      	blx	r3
                    job->last_trigger = current_epoch;
 804d96a:	683b      	ldr	r3, [r7, #0]
 804d96c:	68ba      	ldr	r2, [r7, #8]
 804d96e:	60da      	str	r2, [r3, #12]
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 804d970:	683b      	ldr	r3, [r7, #0]
 804d972:	695b      	ldr	r3, [r3, #20]
 804d974:	2b00      	cmp	r3, #0
 804d976:	f000 809d 	beq.w	804dab4 <Utils_SoftTime_Update+0x35c>
 804d97a:	683b      	ldr	r3, [r7, #0]
 804d97c:	699b      	ldr	r3, [r3, #24]
 804d97e:	1e5a      	subs	r2, r3, #1
 804d980:	683b      	ldr	r3, [r7, #0]
 804d982:	619a      	str	r2, [r3, #24]
 804d984:	683b      	ldr	r3, [r7, #0]
 804d986:	699b      	ldr	r3, [r3, #24]
 804d988:	2b00      	cmp	r3, #0
 804d98a:	f040 8093 	bne.w	804dab4 <Utils_SoftTime_Update+0x35c>
                        job->active = 0;
 804d98e:	683b      	ldr	r3, [r7, #0]
 804d990:	2200      	movs	r2, #0
 804d992:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 804d994:	e08e      	b.n	804dab4 <Utils_SoftTime_Update+0x35c>

            case CRON_TYPE_EVERY:
                switch (job->every_unit) {
 804d996:	683b      	ldr	r3, [r7, #0]
 804d998:	7c1b      	ldrb	r3, [r3, #16]
 804d99a:	2b02      	cmp	r3, #2
 804d99c:	d05c      	beq.n	804da58 <Utils_SoftTime_Update+0x300>
 804d99e:	2b02      	cmp	r3, #2
 804d9a0:	f300 808a 	bgt.w	804dab8 <Utils_SoftTime_Update+0x360>
 804d9a4:	2b00      	cmp	r3, #0
 804d9a6:	d00f      	beq.n	804d9c8 <Utils_SoftTime_Update+0x270>
 804d9a8:	2b01      	cmp	r3, #1
 804d9aa:	d031      	beq.n	804da10 <Utils_SoftTime_Update+0x2b8>
                                job->active = 0;
                            }
                        }
                        break;
                }
                break;
 804d9ac:	e084      	b.n	804dab8 <Utils_SoftTime_Update+0x360>
 804d9ae:	bf00      	nop
 804d9b0:	240148e4 	.word	0x240148e4
 804d9b4:	2402d728 	.word	0x2402d728
 804d9b8:	240148ea 	.word	0x240148ea
 804d9bc:	240148eb 	.word	0x240148eb
 804d9c0:	240148ec 	.word	0x240148ec
 804d9c4:	2402d5c0 	.word	0x2402d5c0
                        if (hour_changed && s_RealTimeClock_context.hour == job->hour) {
 804d9c8:	797b      	ldrb	r3, [r7, #5]
 804d9ca:	2b00      	cmp	r3, #0
 804d9cc:	d068      	beq.n	804daa0 <Utils_SoftTime_Update+0x348>
 804d9ce:	4b46      	ldr	r3, [pc, #280]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804d9d0:	78da      	ldrb	r2, [r3, #3]
 804d9d2:	683b      	ldr	r3, [r7, #0]
 804d9d4:	789b      	ldrb	r3, [r3, #2]
 804d9d6:	429a      	cmp	r2, r3
 804d9d8:	d162      	bne.n	804daa0 <Utils_SoftTime_Update+0x348>
                        	job->callback(job->context);
 804d9da:	683b      	ldr	r3, [r7, #0]
 804d9dc:	69db      	ldr	r3, [r3, #28]
 804d9de:	683a      	ldr	r2, [r7, #0]
 804d9e0:	6a12      	ldr	r2, [r2, #32]
 804d9e2:	4610      	mov	r0, r2
 804d9e4:	4798      	blx	r3
                            job->last_triggered_unit = job->hour;
 804d9e6:	683b      	ldr	r3, [r7, #0]
 804d9e8:	789a      	ldrb	r2, [r3, #2]
 804d9ea:	683b      	ldr	r3, [r7, #0]
 804d9ec:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 804d9ee:	683b      	ldr	r3, [r7, #0]
 804d9f0:	695b      	ldr	r3, [r3, #20]
 804d9f2:	2b00      	cmp	r3, #0
 804d9f4:	d054      	beq.n	804daa0 <Utils_SoftTime_Update+0x348>
 804d9f6:	683b      	ldr	r3, [r7, #0]
 804d9f8:	699b      	ldr	r3, [r3, #24]
 804d9fa:	1e5a      	subs	r2, r3, #1
 804d9fc:	683b      	ldr	r3, [r7, #0]
 804d9fe:	619a      	str	r2, [r3, #24]
 804da00:	683b      	ldr	r3, [r7, #0]
 804da02:	699b      	ldr	r3, [r3, #24]
 804da04:	2b00      	cmp	r3, #0
 804da06:	d14b      	bne.n	804daa0 <Utils_SoftTime_Update+0x348>
                                job->active = 0;
 804da08:	683b      	ldr	r3, [r7, #0]
 804da0a:	2200      	movs	r2, #0
 804da0c:	701a      	strb	r2, [r3, #0]
                        break;
 804da0e:	e047      	b.n	804daa0 <Utils_SoftTime_Update+0x348>
                        if (minute_changed && s_RealTimeClock_context.minute == job->minute) {
 804da10:	79bb      	ldrb	r3, [r7, #6]
 804da12:	2b00      	cmp	r3, #0
 804da14:	d046      	beq.n	804daa4 <Utils_SoftTime_Update+0x34c>
 804da16:	4b34      	ldr	r3, [pc, #208]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804da18:	791a      	ldrb	r2, [r3, #4]
 804da1a:	683b      	ldr	r3, [r7, #0]
 804da1c:	78db      	ldrb	r3, [r3, #3]
 804da1e:	429a      	cmp	r2, r3
 804da20:	d140      	bne.n	804daa4 <Utils_SoftTime_Update+0x34c>
                        	job->callback(job->context);
 804da22:	683b      	ldr	r3, [r7, #0]
 804da24:	69db      	ldr	r3, [r3, #28]
 804da26:	683a      	ldr	r2, [r7, #0]
 804da28:	6a12      	ldr	r2, [r2, #32]
 804da2a:	4610      	mov	r0, r2
 804da2c:	4798      	blx	r3
                            job->last_triggered_unit = job->minute;
 804da2e:	683b      	ldr	r3, [r7, #0]
 804da30:	78da      	ldrb	r2, [r3, #3]
 804da32:	683b      	ldr	r3, [r7, #0]
 804da34:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 804da36:	683b      	ldr	r3, [r7, #0]
 804da38:	695b      	ldr	r3, [r3, #20]
 804da3a:	2b00      	cmp	r3, #0
 804da3c:	d032      	beq.n	804daa4 <Utils_SoftTime_Update+0x34c>
 804da3e:	683b      	ldr	r3, [r7, #0]
 804da40:	699b      	ldr	r3, [r3, #24]
 804da42:	1e5a      	subs	r2, r3, #1
 804da44:	683b      	ldr	r3, [r7, #0]
 804da46:	619a      	str	r2, [r3, #24]
 804da48:	683b      	ldr	r3, [r7, #0]
 804da4a:	699b      	ldr	r3, [r3, #24]
 804da4c:	2b00      	cmp	r3, #0
 804da4e:	d129      	bne.n	804daa4 <Utils_SoftTime_Update+0x34c>
                                job->active = 0;
 804da50:	683b      	ldr	r3, [r7, #0]
 804da52:	2200      	movs	r2, #0
 804da54:	701a      	strb	r2, [r3, #0]
                        break;
 804da56:	e025      	b.n	804daa4 <Utils_SoftTime_Update+0x34c>
                        if (second_changed && s_RealTimeClock_context.second == job->second) {
 804da58:	79fb      	ldrb	r3, [r7, #7]
 804da5a:	2b00      	cmp	r3, #0
 804da5c:	d024      	beq.n	804daa8 <Utils_SoftTime_Update+0x350>
 804da5e:	4b22      	ldr	r3, [pc, #136]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804da60:	795a      	ldrb	r2, [r3, #5]
 804da62:	683b      	ldr	r3, [r7, #0]
 804da64:	791b      	ldrb	r3, [r3, #4]
 804da66:	429a      	cmp	r2, r3
 804da68:	d11e      	bne.n	804daa8 <Utils_SoftTime_Update+0x350>
                        	job->callback(job->context);
 804da6a:	683b      	ldr	r3, [r7, #0]
 804da6c:	69db      	ldr	r3, [r3, #28]
 804da6e:	683a      	ldr	r2, [r7, #0]
 804da70:	6a12      	ldr	r2, [r2, #32]
 804da72:	4610      	mov	r0, r2
 804da74:	4798      	blx	r3
                            job->last_triggered_unit = job->second;
 804da76:	683b      	ldr	r3, [r7, #0]
 804da78:	791a      	ldrb	r2, [r3, #4]
 804da7a:	683b      	ldr	r3, [r7, #0]
 804da7c:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 804da7e:	683b      	ldr	r3, [r7, #0]
 804da80:	695b      	ldr	r3, [r3, #20]
 804da82:	2b00      	cmp	r3, #0
 804da84:	d010      	beq.n	804daa8 <Utils_SoftTime_Update+0x350>
 804da86:	683b      	ldr	r3, [r7, #0]
 804da88:	699b      	ldr	r3, [r3, #24]
 804da8a:	1e5a      	subs	r2, r3, #1
 804da8c:	683b      	ldr	r3, [r7, #0]
 804da8e:	619a      	str	r2, [r3, #24]
 804da90:	683b      	ldr	r3, [r7, #0]
 804da92:	699b      	ldr	r3, [r3, #24]
 804da94:	2b00      	cmp	r3, #0
 804da96:	d107      	bne.n	804daa8 <Utils_SoftTime_Update+0x350>
                                job->active = 0;
 804da98:	683b      	ldr	r3, [r7, #0]
 804da9a:	2200      	movs	r2, #0
 804da9c:	701a      	strb	r2, [r3, #0]
                        break;
 804da9e:	e003      	b.n	804daa8 <Utils_SoftTime_Update+0x350>
                        break;
 804daa0:	bf00      	nop
 804daa2:	e009      	b.n	804dab8 <Utils_SoftTime_Update+0x360>
                        break;
 804daa4:	bf00      	nop
 804daa6:	e007      	b.n	804dab8 <Utils_SoftTime_Update+0x360>
                        break;
 804daa8:	bf00      	nop
                break;
 804daaa:	e005      	b.n	804dab8 <Utils_SoftTime_Update+0x360>
        if (!job->active || !job->callback) continue;
 804daac:	bf00      	nop
 804daae:	e004      	b.n	804daba <Utils_SoftTime_Update+0x362>
                break;
 804dab0:	bf00      	nop
 804dab2:	e002      	b.n	804daba <Utils_SoftTime_Update+0x362>
                break;
 804dab4:	bf00      	nop
 804dab6:	e000      	b.n	804daba <Utils_SoftTime_Update+0x362>
                break;
 804dab8:	bf00      	nop
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 804daba:	7bfb      	ldrb	r3, [r7, #15]
 804dabc:	3301      	adds	r3, #1
 804dabe:	73fb      	strb	r3, [r7, #15]
 804dac0:	7bfb      	ldrb	r3, [r7, #15]
 804dac2:	2b09      	cmp	r3, #9
 804dac4:	f67f aef2 	bls.w	804d8ac <Utils_SoftTime_Update+0x154>
        }
    }

    last_second = s_RealTimeClock_context.second;
 804dac8:	4b07      	ldr	r3, [pc, #28]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804daca:	795a      	ldrb	r2, [r3, #5]
 804dacc:	4b07      	ldr	r3, [pc, #28]	@ (804daec <Utils_SoftTime_Update+0x394>)
 804dace:	701a      	strb	r2, [r3, #0]
    last_minute = s_RealTimeClock_context.minute;
 804dad0:	4b05      	ldr	r3, [pc, #20]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804dad2:	791a      	ldrb	r2, [r3, #4]
 804dad4:	4b06      	ldr	r3, [pc, #24]	@ (804daf0 <Utils_SoftTime_Update+0x398>)
 804dad6:	701a      	strb	r2, [r3, #0]
    last_hour = s_RealTimeClock_context.hour;
 804dad8:	4b03      	ldr	r3, [pc, #12]	@ (804dae8 <Utils_SoftTime_Update+0x390>)
 804dada:	78da      	ldrb	r2, [r3, #3]
 804dadc:	4b05      	ldr	r3, [pc, #20]	@ (804daf4 <Utils_SoftTime_Update+0x39c>)
 804dade:	701a      	strb	r2, [r3, #0]
}
 804dae0:	bf00      	nop
 804dae2:	3714      	adds	r7, #20
 804dae4:	46bd      	mov	sp, r7
 804dae6:	bd90      	pop	{r4, r7, pc}
 804dae8:	240148e4 	.word	0x240148e4
 804daec:	240148ea 	.word	0x240148ea
 804daf0:	240148eb 	.word	0x240148eb
 804daf4:	240148ec 	.word	0x240148ec

0804daf8 <Utils_SoftTime_Init>:

void Utils_SoftTime_Init(void)
{
 804daf8:	b580      	push	{r7, lr}
 804dafa:	b082      	sub	sp, #8
 804dafc:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 804dafe:	4b1d      	ldr	r3, [pc, #116]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db00:	2200      	movs	r2, #0
 804db02:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 804db04:	4b1b      	ldr	r3, [pc, #108]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db06:	2201      	movs	r2, #1
 804db08:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 804db0a:	4b1a      	ldr	r3, [pc, #104]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db0c:	2201      	movs	r2, #1
 804db0e:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 804db10:	4b18      	ldr	r3, [pc, #96]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db12:	2200      	movs	r2, #0
 804db14:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 804db16:	4b17      	ldr	r3, [pc, #92]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db18:	2200      	movs	r2, #0
 804db1a:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 804db1c:	4b15      	ldr	r3, [pc, #84]	@ (804db74 <Utils_SoftTime_Init+0x7c>)
 804db1e:	2200      	movs	r2, #0
 804db20:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 804db22:	4b15      	ldr	r3, [pc, #84]	@ (804db78 <Utils_SoftTime_Init+0x80>)
 804db24:	2200      	movs	r2, #0
 804db26:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 804db28:	4b13      	ldr	r3, [pc, #76]	@ (804db78 <Utils_SoftTime_Init+0x80>)
 804db2a:	2200      	movs	r2, #0
 804db2c:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 804db2e:	4b12      	ldr	r3, [pc, #72]	@ (804db78 <Utils_SoftTime_Init+0x80>)
 804db30:	2200      	movs	r2, #0
 804db32:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 804db34:	4b10      	ldr	r3, [pc, #64]	@ (804db78 <Utils_SoftTime_Init+0x80>)
 804db36:	2200      	movs	r2, #0
 804db38:	719a      	strb	r2, [r3, #6]

    memset(s_Cronjob_List, 0, sizeof(s_Cronjob_List));
 804db3a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 804db3e:	2100      	movs	r1, #0
 804db40:	480e      	ldr	r0, [pc, #56]	@ (804db7c <Utils_SoftTime_Init+0x84>)
 804db42:	f01b fe4f 	bl	80697e4 <memset>
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 804db46:	2300      	movs	r3, #0
 804db48:	71fb      	strb	r3, [r7, #7]
 804db4a:	e00b      	b.n	804db64 <Utils_SoftTime_Init+0x6c>
            s_Cronjob_List[i].active = 0;
 804db4c:	79fa      	ldrb	r2, [r7, #7]
 804db4e:	490b      	ldr	r1, [pc, #44]	@ (804db7c <Utils_SoftTime_Init+0x84>)
 804db50:	4613      	mov	r3, r2
 804db52:	00db      	lsls	r3, r3, #3
 804db54:	4413      	add	r3, r2
 804db56:	009b      	lsls	r3, r3, #2
 804db58:	440b      	add	r3, r1
 804db5a:	2200      	movs	r2, #0
 804db5c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 804db5e:	79fb      	ldrb	r3, [r7, #7]
 804db60:	3301      	adds	r3, #1
 804db62:	71fb      	strb	r3, [r7, #7]
 804db64:	79fb      	ldrb	r3, [r7, #7]
 804db66:	2b09      	cmp	r3, #9
 804db68:	d9f0      	bls.n	804db4c <Utils_SoftTime_Init+0x54>
    }
}
 804db6a:	bf00      	nop
 804db6c:	bf00      	nop
 804db6e:	3708      	adds	r7, #8
 804db70:	46bd      	mov	sp, r7
 804db72:	bd80      	pop	{r7, pc}
 804db74:	240148e4 	.word	0x240148e4
 804db78:	2402d728 	.word	0x2402d728
 804db7c:	2402d5c0 	.word	0x2402d5c0

0804db80 <Utils_GetRTC>:

// ================= Helper Functions =================
void Utils_GetRTC(s_DateTime *dateTime)
{
 804db80:	b480      	push	{r7}
 804db82:	b083      	sub	sp, #12
 804db84:	af00      	add	r7, sp, #0
 804db86:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 804db88:	687b      	ldr	r3, [r7, #4]
 804db8a:	2b00      	cmp	r3, #0
 804db8c:	d006      	beq.n	804db9c <Utils_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 804db8e:	687b      	ldr	r3, [r7, #4]
 804db90:	4a05      	ldr	r2, [pc, #20]	@ (804dba8 <Utils_GetRTC+0x28>)
 804db92:	6810      	ldr	r0, [r2, #0]
 804db94:	6018      	str	r0, [r3, #0]
 804db96:	8892      	ldrh	r2, [r2, #4]
 804db98:	809a      	strh	r2, [r3, #4]
 804db9a:	e000      	b.n	804db9e <Utils_GetRTC+0x1e>
    if (dateTime == NULL) return;
 804db9c:	bf00      	nop
}
 804db9e:	370c      	adds	r7, #12
 804dba0:	46bd      	mov	sp, r7
 804dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dba6:	4770      	bx	lr
 804dba8:	240148e4 	.word	0x240148e4

0804dbac <Utils_SetRTC>:

void Utils_SetRTC(const s_DateTime *dateTime)
{
 804dbac:	b480      	push	{r7}
 804dbae:	b083      	sub	sp, #12
 804dbb0:	af00      	add	r7, sp, #0
 804dbb2:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 804dbb4:	687b      	ldr	r3, [r7, #4]
 804dbb6:	2b00      	cmp	r3, #0
 804dbb8:	d006      	beq.n	804dbc8 <Utils_SetRTC+0x1c>
    s_RealTimeClock_context = *dateTime;
 804dbba:	4b06      	ldr	r3, [pc, #24]	@ (804dbd4 <Utils_SetRTC+0x28>)
 804dbbc:	687a      	ldr	r2, [r7, #4]
 804dbbe:	6810      	ldr	r0, [r2, #0]
 804dbc0:	6018      	str	r0, [r3, #0]
 804dbc2:	8892      	ldrh	r2, [r2, #4]
 804dbc4:	809a      	strh	r2, [r3, #4]
 804dbc6:	e000      	b.n	804dbca <Utils_SetRTC+0x1e>
    if (dateTime == NULL) return;
 804dbc8:	bf00      	nop
}
 804dbca:	370c      	adds	r7, #12
 804dbcc:	46bd      	mov	sp, r7
 804dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dbd2:	4770      	bx	lr
 804dbd4:	240148e4 	.word	0x240148e4

0804dbd8 <Utils_SetEpoch>:
 *  s_DateTime newTime = {15, 10, 23, 14, 30, 0}; // 15/10/2023 14:30:00
 *  DateTime_SetRTC(&newTime);
 */

void Utils_SetEpoch(uint32_t epoch)
{
 804dbd8:	b580      	push	{r7, lr}
 804dbda:	b084      	sub	sp, #16
 804dbdc:	af00      	add	r7, sp, #0
 804dbde:	6078      	str	r0, [r7, #4]
    s_DateTime dt;
    if (epoch < EPOCH_OFFSET_UNIX)
 804dbe0:	687b      	ldr	r3, [r7, #4]
 804dbe2:	4a0b      	ldr	r2, [pc, #44]	@ (804dc10 <Utils_SetEpoch+0x38>)
 804dbe4:	4293      	cmp	r3, r2
 804dbe6:	d90e      	bls.n	804dc06 <Utils_SetEpoch+0x2e>
    {
        return;
    }
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 804dbe8:	687a      	ldr	r2, [r7, #4]
 804dbea:	4b0a      	ldr	r3, [pc, #40]	@ (804dc14 <Utils_SetEpoch+0x3c>)
 804dbec:	4413      	add	r3, r2
 804dbee:	f107 0208 	add.w	r2, r7, #8
 804dbf2:	4611      	mov	r1, r2
 804dbf4:	4618      	mov	r0, r3
 804dbf6:	f7ff fd27 	bl	804d648 <EpochToDateTime>
    Utils_SetRTC(&dt);
 804dbfa:	f107 0308 	add.w	r3, r7, #8
 804dbfe:	4618      	mov	r0, r3
 804dc00:	f7ff ffd4 	bl	804dbac <Utils_SetRTC>
 804dc04:	e000      	b.n	804dc08 <Utils_SetEpoch+0x30>
        return;
 804dc06:	bf00      	nop
}
 804dc08:	3710      	adds	r7, #16
 804dc0a:	46bd      	mov	sp, r7
 804dc0c:	bd80      	pop	{r7, pc}
 804dc0e:	bf00      	nop
 804dc10:	386d437f 	.word	0x386d437f
 804dc14:	c792bc80 	.word	0xc792bc80

0804dc18 <Utils_GetEpoch>:

uint32_t Utils_GetEpoch(void)
{
 804dc18:	b580      	push	{r7, lr}
 804dc1a:	af00      	add	r7, sp, #0
    return DateTimeToEpoch(&s_RealTimeClock_context) + EPOCH_OFFSET_UNIX;
 804dc1c:	4803      	ldr	r0, [pc, #12]	@ (804dc2c <Utils_GetEpoch+0x14>)
 804dc1e:	f7ff fcb7 	bl	804d590 <DateTimeToEpoch>
 804dc22:	4602      	mov	r2, r0
 804dc24:	4b02      	ldr	r3, [pc, #8]	@ (804dc30 <Utils_GetEpoch+0x18>)
 804dc26:	4413      	add	r3, r2
}
 804dc28:	4618      	mov	r0, r3
 804dc2a:	bd80      	pop	{r7, pc}
 804dc2c:	240148e4 	.word	0x240148e4
 804dc30:	386d4380 	.word	0x386d4380

0804dc34 <Utils_GetWorkingTime>:

void Utils_GetWorkingTime(uint32_t *days, uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 804dc34:	b480      	push	{r7}
 804dc36:	b085      	sub	sp, #20
 804dc38:	af00      	add	r7, sp, #0
 804dc3a:	60f8      	str	r0, [r7, #12]
 804dc3c:	60b9      	str	r1, [r7, #8]
 804dc3e:	607a      	str	r2, [r7, #4]
 804dc40:	603b      	str	r3, [r7, #0]
    if (days) *days = s_WorkingTimeClock_context.days;
 804dc42:	68fb      	ldr	r3, [r7, #12]
 804dc44:	2b00      	cmp	r3, #0
 804dc46:	d003      	beq.n	804dc50 <Utils_GetWorkingTime+0x1c>
 804dc48:	4b0f      	ldr	r3, [pc, #60]	@ (804dc88 <Utils_GetWorkingTime+0x54>)
 804dc4a:	681a      	ldr	r2, [r3, #0]
 804dc4c:	68fb      	ldr	r3, [r7, #12]
 804dc4e:	601a      	str	r2, [r3, #0]
    if (hours) *hours = s_WorkingTimeClock_context.hours;
 804dc50:	68bb      	ldr	r3, [r7, #8]
 804dc52:	2b00      	cmp	r3, #0
 804dc54:	d003      	beq.n	804dc5e <Utils_GetWorkingTime+0x2a>
 804dc56:	4b0c      	ldr	r3, [pc, #48]	@ (804dc88 <Utils_GetWorkingTime+0x54>)
 804dc58:	791a      	ldrb	r2, [r3, #4]
 804dc5a:	68bb      	ldr	r3, [r7, #8]
 804dc5c:	701a      	strb	r2, [r3, #0]
    if (minutes) *minutes = s_WorkingTimeClock_context.minutes;
 804dc5e:	687b      	ldr	r3, [r7, #4]
 804dc60:	2b00      	cmp	r3, #0
 804dc62:	d003      	beq.n	804dc6c <Utils_GetWorkingTime+0x38>
 804dc64:	4b08      	ldr	r3, [pc, #32]	@ (804dc88 <Utils_GetWorkingTime+0x54>)
 804dc66:	795a      	ldrb	r2, [r3, #5]
 804dc68:	687b      	ldr	r3, [r7, #4]
 804dc6a:	701a      	strb	r2, [r3, #0]
    if (seconds) *seconds = s_WorkingTimeClock_context.seconds;
 804dc6c:	683b      	ldr	r3, [r7, #0]
 804dc6e:	2b00      	cmp	r3, #0
 804dc70:	d003      	beq.n	804dc7a <Utils_GetWorkingTime+0x46>
 804dc72:	4b05      	ldr	r3, [pc, #20]	@ (804dc88 <Utils_GetWorkingTime+0x54>)
 804dc74:	799a      	ldrb	r2, [r3, #6]
 804dc76:	683b      	ldr	r3, [r7, #0]
 804dc78:	701a      	strb	r2, [r3, #0]
}
 804dc7a:	bf00      	nop
 804dc7c:	3714      	adds	r7, #20
 804dc7e:	46bd      	mov	sp, r7
 804dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dc84:	4770      	bx	lr
 804dc86:	bf00      	nop
 804dc88:	2402d728 	.word	0x2402d728

0804dc8c <Utils_SoftTime_Sync>:
    return 0;
}

#if USE_EXTERNAL_RTC
Std_ReturnType Utils_SoftTime_Sync(void)
{
 804dc8c:	b580      	push	{r7, lr}
 804dc8e:	b084      	sub	sp, #16
 804dc90:	af00      	add	r7, sp, #0
	s_DateTime currentTime;
	RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 804dc92:	f7fe facf 	bl	804c234 <RV3129_GetHandle>
 804dc96:	60f8      	str	r0, [r7, #12]
	Std_ReturnType ret = E_ERROR;
 804dc98:	2301      	movs	r3, #1
 804dc9a:	72fb      	strb	r3, [r7, #11]
	ret = RV3129_GetTime(hrtc, &currentTime);
 804dc9c:	1d3b      	adds	r3, r7, #4
 804dc9e:	4619      	mov	r1, r3
 804dca0:	68f8      	ldr	r0, [r7, #12]
 804dca2:	f7fe fad1 	bl	804c248 <RV3129_GetTime>
 804dca6:	4603      	mov	r3, r0
 804dca8:	72fb      	strb	r3, [r7, #11]
    if(ret == E_OK)
 804dcaa:	7afb      	ldrb	r3, [r7, #11]
 804dcac:	2b00      	cmp	r3, #0
 804dcae:	d103      	bne.n	804dcb8 <Utils_SoftTime_Sync+0x2c>
    {
       Utils_SetRTC(&currentTime);
 804dcb0:	1d3b      	adds	r3, r7, #4
 804dcb2:	4618      	mov	r0, r3
 804dcb4:	f7ff ff7a 	bl	804dbac <Utils_SetRTC>
    }
    return ret;
 804dcb8:	7afb      	ldrb	r3, [r7, #11]
}
 804dcba:	4618      	mov	r0, r3
 804dcbc:	3710      	adds	r7, #16
 804dcbe:	46bd      	mov	sp, r7
 804dcc0:	bd80      	pop	{r7, pc}

0804dcc2 <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 804dcc2:	b580      	push	{r7, lr}
 804dcc4:	b088      	sub	sp, #32
 804dcc6:	af00      	add	r7, sp, #0
 804dcc8:	60f8      	str	r0, [r7, #12]
 804dcca:	60b9      	str	r1, [r7, #8]
 804dccc:	607a      	str	r2, [r7, #4]
 804dcce:	603b      	str	r3, [r7, #0]
    rb->id = id;
 804dcd0:	68fb      	ldr	r3, [r7, #12]
 804dcd2:	68ba      	ldr	r2, [r7, #8]
 804dcd4:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 804dcd6:	68fb      	ldr	r3, [r7, #12]
 804dcd8:	3304      	adds	r3, #4
 804dcda:	221f      	movs	r2, #31
 804dcdc:	6879      	ldr	r1, [r7, #4]
 804dcde:	4618      	mov	r0, r3
 804dce0:	f01b fda4 	bl	806982c <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 804dce4:	68fb      	ldr	r3, [r7, #12]
 804dce6:	2200      	movs	r2, #0
 804dce8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 804dcec:	68fb      	ldr	r3, [r7, #12]
 804dcee:	683a      	ldr	r2, [r7, #0]
 804dcf0:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 804dcf2:	68fb      	ldr	r3, [r7, #12]
 804dcf4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 804dcf6:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 804dcf8:	68fb      	ldr	r3, [r7, #12]
 804dcfa:	332a      	adds	r3, #42	@ 0x2a
 804dcfc:	61fb      	str	r3, [r7, #28]
 804dcfe:	2300      	movs	r3, #0
 804dd00:	82fb      	strh	r3, [r7, #22]
 804dd02:	8afa      	ldrh	r2, [r7, #22]
 804dd04:	69fb      	ldr	r3, [r7, #28]
 804dd06:	f3bf 8f5b 	dmb	ish
 804dd0a:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 804dd0c:	68fb      	ldr	r3, [r7, #12]
 804dd0e:	332c      	adds	r3, #44	@ 0x2c
 804dd10:	61bb      	str	r3, [r7, #24]
 804dd12:	2300      	movs	r3, #0
 804dd14:	82bb      	strh	r3, [r7, #20]
 804dd16:	8aba      	ldrh	r2, [r7, #20]
 804dd18:	69bb      	ldr	r3, [r7, #24]
 804dd1a:	f3bf 8f5b 	dmb	ish
 804dd1e:	801a      	strh	r2, [r3, #0]
}
 804dd20:	bf00      	nop
 804dd22:	3720      	adds	r7, #32
 804dd24:	46bd      	mov	sp, r7
 804dd26:	bd80      	pop	{r7, pc}

0804dd28 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 804dd28:	b480      	push	{r7}
 804dd2a:	b08b      	sub	sp, #44	@ 0x2c
 804dd2c:	af00      	add	r7, sp, #0
 804dd2e:	6078      	str	r0, [r7, #4]
 804dd30:	460b      	mov	r3, r1
 804dd32:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 804dd34:	687b      	ldr	r3, [r7, #4]
 804dd36:	332a      	adds	r3, #42	@ 0x2a
 804dd38:	623b      	str	r3, [r7, #32]
 804dd3a:	6a3b      	ldr	r3, [r7, #32]
 804dd3c:	881b      	ldrh	r3, [r3, #0]
 804dd3e:	b29b      	uxth	r3, r3
 804dd40:	81fb      	strh	r3, [r7, #14]
 804dd42:	89fb      	ldrh	r3, [r7, #14]
 804dd44:	3301      	adds	r3, #1
 804dd46:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 804dd48:	687b      	ldr	r3, [r7, #4]
 804dd4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 804dd4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 804dd4e:	429a      	cmp	r2, r3
 804dd50:	d101      	bne.n	804dd56 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 804dd52:	2300      	movs	r3, #0
 804dd54:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 804dd56:	687b      	ldr	r3, [r7, #4]
 804dd58:	332c      	adds	r3, #44	@ 0x2c
 804dd5a:	61fb      	str	r3, [r7, #28]
 804dd5c:	69fb      	ldr	r3, [r7, #28]
 804dd5e:	881b      	ldrh	r3, [r3, #0]
 804dd60:	f3bf 8f5b 	dmb	ish
 804dd64:	b29b      	uxth	r3, r3
 804dd66:	81bb      	strh	r3, [r7, #12]
 804dd68:	89bb      	ldrh	r3, [r7, #12]
 804dd6a:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 804dd6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 804dd6e:	8b7b      	ldrh	r3, [r7, #26]
 804dd70:	429a      	cmp	r2, r3
 804dd72:	d018      	beq.n	804dda6 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 804dd74:	687b      	ldr	r3, [r7, #4]
 804dd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804dd78:	687a      	ldr	r2, [r7, #4]
 804dd7a:	322a      	adds	r2, #42	@ 0x2a
 804dd7c:	617a      	str	r2, [r7, #20]
 804dd7e:	697a      	ldr	r2, [r7, #20]
 804dd80:	8812      	ldrh	r2, [r2, #0]
 804dd82:	b292      	uxth	r2, r2
 804dd84:	817a      	strh	r2, [r7, #10]
 804dd86:	897a      	ldrh	r2, [r7, #10]
 804dd88:	4413      	add	r3, r2
 804dd8a:	78fa      	ldrb	r2, [r7, #3]
 804dd8c:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 804dd8e:	687b      	ldr	r3, [r7, #4]
 804dd90:	332a      	adds	r3, #42	@ 0x2a
 804dd92:	613b      	str	r3, [r7, #16]
 804dd94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 804dd96:	813b      	strh	r3, [r7, #8]
 804dd98:	893a      	ldrh	r2, [r7, #8]
 804dd9a:	693b      	ldr	r3, [r7, #16]
 804dd9c:	f3bf 8f5b 	dmb	ish
 804dda0:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 804dda2:	2301      	movs	r3, #1
 804dda4:	e000      	b.n	804dda8 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 804dda6:	2300      	movs	r3, #0
    }
}
 804dda8:	4618      	mov	r0, r3
 804ddaa:	372c      	adds	r7, #44	@ 0x2c
 804ddac:	46bd      	mov	sp, r7
 804ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ddb2:	4770      	bx	lr

0804ddb4 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 804ddb4:	b480      	push	{r7}
 804ddb6:	b08b      	sub	sp, #44	@ 0x2c
 804ddb8:	af00      	add	r7, sp, #0
 804ddba:	6078      	str	r0, [r7, #4]
 804ddbc:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 804ddbe:	687b      	ldr	r3, [r7, #4]
 804ddc0:	332c      	adds	r3, #44	@ 0x2c
 804ddc2:	623b      	str	r3, [r7, #32]
 804ddc4:	6a3b      	ldr	r3, [r7, #32]
 804ddc6:	881b      	ldrh	r3, [r3, #0]
 804ddc8:	b29b      	uxth	r3, r3
 804ddca:	827b      	strh	r3, [r7, #18]
 804ddcc:	8a7b      	ldrh	r3, [r7, #18]
 804ddce:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 804ddd0:	687b      	ldr	r3, [r7, #4]
 804ddd2:	332a      	adds	r3, #42	@ 0x2a
 804ddd4:	61fb      	str	r3, [r7, #28]
 804ddd6:	69fb      	ldr	r3, [r7, #28]
 804ddd8:	881b      	ldrh	r3, [r3, #0]
 804ddda:	f3bf 8f5b 	dmb	ish
 804ddde:	b29b      	uxth	r3, r3
 804dde0:	823b      	strh	r3, [r7, #16]
 804dde2:	8a3b      	ldrh	r3, [r7, #16]
 804dde4:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 804dde6:	8b7a      	ldrh	r2, [r7, #26]
 804dde8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 804ddea:	429a      	cmp	r2, r3
 804ddec:	d01c      	beq.n	804de28 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 804ddee:	687b      	ldr	r3, [r7, #4]
 804ddf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 804ddf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 804ddf4:	4413      	add	r3, r2
 804ddf6:	781a      	ldrb	r2, [r3, #0]
 804ddf8:	683b      	ldr	r3, [r7, #0]
 804ddfa:	701a      	strb	r2, [r3, #0]
        ++tail;
 804ddfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 804ddfe:	3301      	adds	r3, #1
 804de00:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 804de02:	687b      	ldr	r3, [r7, #4]
 804de04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 804de06:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 804de08:	429a      	cmp	r2, r3
 804de0a:	d101      	bne.n	804de10 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 804de0c:	2300      	movs	r3, #0
 804de0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 804de10:	687b      	ldr	r3, [r7, #4]
 804de12:	332c      	adds	r3, #44	@ 0x2c
 804de14:	617b      	str	r3, [r7, #20]
 804de16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 804de18:	81fb      	strh	r3, [r7, #14]
 804de1a:	89fa      	ldrh	r2, [r7, #14]
 804de1c:	697b      	ldr	r3, [r7, #20]
 804de1e:	f3bf 8f5b 	dmb	ish
 804de22:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 804de24:	2301      	movs	r3, #1
 804de26:	e000      	b.n	804de2a <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 804de28:	2300      	movs	r3, #0
    }
}
 804de2a:	4618      	mov	r0, r3
 804de2c:	372c      	adds	r7, #44	@ 0x2c
 804de2e:	46bd      	mov	sp, r7
 804de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 804de34:	4770      	bx	lr

0804de36 <RingBuffer_NumFreeSlots>:

// Function to calculate the number of free slots in the ring buffer.
// Note: We always leave one empty slot to distinguish between an empty and a full buffer.
RingBufCtr RingBuffer_NumFreeSlots(s_RingBufferType * const rb)
{
 804de36:	b480      	push	{r7}
 804de38:	b089      	sub	sp, #36	@ 0x24
 804de3a:	af00      	add	r7, sp, #0
 804de3c:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 804de3e:	687b      	ldr	r3, [r7, #4]
 804de40:	332a      	adds	r3, #42	@ 0x2a
 804de42:	61fb      	str	r3, [r7, #28]
 804de44:	69fb      	ldr	r3, [r7, #28]
 804de46:	881b      	ldrh	r3, [r3, #0]
 804de48:	f3bf 8f5b 	dmb	ish
 804de4c:	b29b      	uxth	r3, r3
 804de4e:	823b      	strh	r3, [r7, #16]
 804de50:	8a3b      	ldrh	r3, [r7, #16]
 804de52:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 804de54:	687b      	ldr	r3, [r7, #4]
 804de56:	332c      	adds	r3, #44	@ 0x2c
 804de58:	617b      	str	r3, [r7, #20]
 804de5a:	697b      	ldr	r3, [r7, #20]
 804de5c:	881b      	ldrh	r3, [r3, #0]
 804de5e:	b29b      	uxth	r3, r3
 804de60:	81fb      	strh	r3, [r7, #14]
 804de62:	89fb      	ldrh	r3, [r7, #14]
 804de64:	827b      	strh	r3, [r7, #18]

    if (head == tail)
 804de66:	8b7a      	ldrh	r2, [r7, #26]
 804de68:	8a7b      	ldrh	r3, [r7, #18]
 804de6a:	429a      	cmp	r2, r3
 804de6c:	d104      	bne.n	804de78 <RingBuffer_NumFreeSlots+0x42>
    {
        return (RingBufCtr)(rb->max_size - 1U);
 804de6e:	687b      	ldr	r3, [r7, #4]
 804de70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 804de72:	3b01      	subs	r3, #1
 804de74:	b29b      	uxth	r3, r3
 804de76:	e014      	b.n	804dea2 <RingBuffer_NumFreeSlots+0x6c>
    }
    else if (head < tail)
 804de78:	8b7a      	ldrh	r2, [r7, #26]
 804de7a:	8a7b      	ldrh	r3, [r7, #18]
 804de7c:	429a      	cmp	r2, r3
 804de7e:	d206      	bcs.n	804de8e <RingBuffer_NumFreeSlots+0x58>
    {
        return (RingBufCtr)(tail - head - 1U);
 804de80:	8a7a      	ldrh	r2, [r7, #18]
 804de82:	8b7b      	ldrh	r3, [r7, #26]
 804de84:	1ad3      	subs	r3, r2, r3
 804de86:	b29b      	uxth	r3, r3
 804de88:	3b01      	subs	r3, #1
 804de8a:	b29b      	uxth	r3, r3
 804de8c:	e009      	b.n	804dea2 <RingBuffer_NumFreeSlots+0x6c>
    }
    else
    {
        return (RingBufCtr)(rb->max_size + tail - head - 1U);
 804de8e:	687b      	ldr	r3, [r7, #4]
 804de90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 804de92:	8a7b      	ldrh	r3, [r7, #18]
 804de94:	4413      	add	r3, r2
 804de96:	b29a      	uxth	r2, r3
 804de98:	8b7b      	ldrh	r3, [r7, #26]
 804de9a:	1ad3      	subs	r3, r2, r3
 804de9c:	b29b      	uxth	r3, r3
 804de9e:	3b01      	subs	r3, #1
 804dea0:	b29b      	uxth	r3, r3
    }
}
 804dea2:	4618      	mov	r0, r3
 804dea4:	3724      	adds	r7, #36	@ 0x24
 804dea6:	46bd      	mov	sp, r7
 804dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804deac:	4770      	bx	lr

0804deae <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 804deae:	b480      	push	{r7}
 804deb0:	b089      	sub	sp, #36	@ 0x24
 804deb2:	af00      	add	r7, sp, #0
 804deb4:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 804deb6:	687b      	ldr	r3, [r7, #4]
 804deb8:	332a      	adds	r3, #42	@ 0x2a
 804deba:	61fb      	str	r3, [r7, #28]
 804debc:	69fb      	ldr	r3, [r7, #28]
 804debe:	881b      	ldrh	r3, [r3, #0]
 804dec0:	f3bf 8f5b 	dmb	ish
 804dec4:	b29b      	uxth	r3, r3
 804dec6:	823b      	strh	r3, [r7, #16]
 804dec8:	8a3b      	ldrh	r3, [r7, #16]
 804deca:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 804decc:	687b      	ldr	r3, [r7, #4]
 804dece:	332c      	adds	r3, #44	@ 0x2c
 804ded0:	617b      	str	r3, [r7, #20]
 804ded2:	697b      	ldr	r3, [r7, #20]
 804ded4:	881b      	ldrh	r3, [r3, #0]
 804ded6:	b29b      	uxth	r3, r3
 804ded8:	81fb      	strh	r3, [r7, #14]
 804deda:	89fb      	ldrh	r3, [r7, #14]
 804dedc:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 804dede:	8b7a      	ldrh	r2, [r7, #26]
 804dee0:	8a7b      	ldrh	r3, [r7, #18]
 804dee2:	429a      	cmp	r2, r3
 804dee4:	bf14      	ite	ne
 804dee6:	2301      	movne	r3, #1
 804dee8:	2300      	moveq	r3, #0
 804deea:	b2db      	uxtb	r3, r3
}
 804deec:	4618      	mov	r0, r3
 804deee:	3724      	adds	r7, #36	@ 0x24
 804def0:	46bd      	mov	sp, r7
 804def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804def6:	4770      	bx	lr

0804def8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 804def8:	b480      	push	{r7}
 804defa:	b083      	sub	sp, #12
 804defc:	af00      	add	r7, sp, #0
 804defe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 804df00:	687b      	ldr	r3, [r7, #4]
 804df02:	f06f 0201 	mvn.w	r2, #1
 804df06:	611a      	str	r2, [r3, #16]
}
 804df08:	bf00      	nop
 804df0a:	370c      	adds	r7, #12
 804df0c:	46bd      	mov	sp, r7
 804df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804df12:	4770      	bx	lr

0804df14 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 804df14:	b480      	push	{r7}
 804df16:	b083      	sub	sp, #12
 804df18:	af00      	add	r7, sp, #0
 804df1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 804df1c:	687b      	ldr	r3, [r7, #4]
 804df1e:	691b      	ldr	r3, [r3, #16]
 804df20:	f003 0301 	and.w	r3, r3, #1
 804df24:	2b01      	cmp	r3, #1
 804df26:	d101      	bne.n	804df2c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 804df28:	2301      	movs	r3, #1
 804df2a:	e000      	b.n	804df2e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 804df2c:	2300      	movs	r3, #0
}
 804df2e:	4618      	mov	r0, r3
 804df30:	370c      	adds	r7, #12
 804df32:	46bd      	mov	sp, r7
 804df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 804df38:	4770      	bx	lr
	...

0804df3c <TickTimer_IRQHandler>:

extern ShieldInstance_t auth_usb;

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 804df3c:	b580      	push	{r7, lr}
 804df3e:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 804df40:	4809      	ldr	r0, [pc, #36]	@ (804df68 <TickTimer_IRQHandler+0x2c>)
 804df42:	f7ff ffe7 	bl	804df14 <LL_TIM_IsActiveFlag_UPDATE>
 804df46:	4603      	mov	r3, r0
 804df48:	2b00      	cmp	r3, #0
 804df4a:	d00a      	beq.n	804df62 <TickTimer_IRQHandler+0x26>
        LL_TIM_ClearFlag_UPDATE(TIM1);
 804df4c:	4806      	ldr	r0, [pc, #24]	@ (804df68 <TickTimer_IRQHandler+0x2c>)
 804df4e:	f7ff ffd3 	bl	804def8 <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 804df52:	4b06      	ldr	r3, [pc, #24]	@ (804df6c <TickTimer_IRQHandler+0x30>)
 804df54:	681b      	ldr	r3, [r3, #0]
 804df56:	3301      	adds	r3, #1
 804df58:	4a04      	ldr	r2, [pc, #16]	@ (804df6c <TickTimer_IRQHandler+0x30>)
 804df5a:	6013      	str	r3, [r2, #0]
        Shield_UpdateTimer(&auth_usb);
 804df5c:	4804      	ldr	r0, [pc, #16]	@ (804df70 <TickTimer_IRQHandler+0x34>)
 804df5e:	f7f5 f801 	bl	8042f64 <Shield_UpdateTimer>
    }
}
 804df62:	bf00      	nop
 804df64:	bd80      	pop	{r7, pc}
 804df66:	bf00      	nop
 804df68:	40010000 	.word	0x40010000
 804df6c:	2402d730 	.word	0x2402d730
 804df70:	24014a90 	.word	0x24014a90

0804df74 <Utils_GetTick>:

uint32_t Utils_GetTick(void) {
 804df74:	b480      	push	{r7}
 804df76:	af00      	add	r7, sp, #0
    return LL_Tick;
 804df78:	4b03      	ldr	r3, [pc, #12]	@ (804df88 <Utils_GetTick+0x14>)
 804df7a:	681b      	ldr	r3, [r3, #0]
}
 804df7c:	4618      	mov	r0, r3
 804df7e:	46bd      	mov	sp, r7
 804df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 804df84:	4770      	bx	lr
 804df86:	bf00      	nop
 804df88:	2402d730 	.word	0x2402d730

0804df8c <BScript_Log>:

}

#else

void BScript_Log(const char* fmt, ...) {
 804df8c:	b40f      	push	{r0, r1, r2, r3}
 804df8e:	b590      	push	{r4, r7, lr}
 804df90:	b0d1      	sub	sp, #324	@ 0x144
 804df92:	af04      	add	r7, sp, #16
    char log_buf[256];
    char time_prefix[32];

    uint32_t days;
    uint8_t hours, minutes, seconds;
    Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 804df94:	f107 0309 	add.w	r3, r7, #9
 804df98:	f107 020a 	add.w	r2, r7, #10
 804df9c:	f107 010b 	add.w	r1, r7, #11
 804dfa0:	f107 000c 	add.w	r0, r7, #12
 804dfa4:	f7ff fe46 	bl	804dc34 <Utils_GetWorkingTime>

    snprintf(time_prefix, sizeof(time_prefix), "[%lu-%02u:%02u:%02u] ", days, hours, minutes, seconds);
 804dfa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dfac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 804dfb0:	681a      	ldr	r2, [r3, #0]
 804dfb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dfb6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 804dfba:	781b      	ldrb	r3, [r3, #0]
 804dfbc:	4619      	mov	r1, r3
 804dfbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dfc2:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 804dfc6:	781b      	ldrb	r3, [r3, #0]
 804dfc8:	461c      	mov	r4, r3
 804dfca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dfce:	f2a3 1327 	subw	r3, r3, #295	@ 0x127
 804dfd2:	781b      	ldrb	r3, [r3, #0]
 804dfd4:	f107 0010 	add.w	r0, r7, #16
 804dfd8:	9302      	str	r3, [sp, #8]
 804dfda:	9401      	str	r4, [sp, #4]
 804dfdc:	9100      	str	r1, [sp, #0]
 804dfde:	4613      	mov	r3, r2
 804dfe0:	4a17      	ldr	r2, [pc, #92]	@ (804e040 <BScript_Log+0xb4>)
 804dfe2:	2120      	movs	r1, #32
 804dfe4:	f01b fafc 	bl	80695e0 <sniprintf>

    va_list args;
    va_start(args, fmt);
 804dfe8:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 804dfec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dff0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 804dff4:	601a      	str	r2, [r3, #0]
    vsnprintf(log_buf, sizeof(log_buf), fmt, args);
 804dff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 804dffa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 804dffe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 804e002:	681b      	ldr	r3, [r3, #0]
 804e004:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 804e008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 804e00c:	f01b fbb2 	bl	8069774 <vsniprintf>
    va_end(args);

    UART_Driver_SendString(BSCRIPT_LOG_UART, time_prefix);
 804e010:	f107 0310 	add.w	r3, r7, #16
 804e014:	4619      	mov	r1, r3
 804e016:	480b      	ldr	r0, [pc, #44]	@ (804e044 <BScript_Log+0xb8>)
 804e018:	f7f4 fc8a 	bl	8042930 <UART_Driver_SendString>
    UART_Driver_SendString(BSCRIPT_LOG_UART, log_buf);
 804e01c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 804e020:	4619      	mov	r1, r3
 804e022:	4808      	ldr	r0, [pc, #32]	@ (804e044 <BScript_Log+0xb8>)
 804e024:	f7f4 fc84 	bl	8042930 <UART_Driver_SendString>
    UART_Driver_SendString(BSCRIPT_LOG_UART, "\r\n");
 804e028:	4907      	ldr	r1, [pc, #28]	@ (804e048 <BScript_Log+0xbc>)
 804e02a:	4806      	ldr	r0, [pc, #24]	@ (804e044 <BScript_Log+0xb8>)
 804e02c:	f7f4 fc80 	bl	8042930 <UART_Driver_SendString>
}
 804e030:	bf00      	nop
 804e032:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 804e036:	46bd      	mov	sp, r7
 804e038:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 804e03c:	b004      	add	sp, #16
 804e03e:	4770      	bx	lr
 804e040:	0806fb9c 	.word	0x0806fb9c
 804e044:	40011000 	.word	0x40011000
 804e048:	0806fbb4 	.word	0x0806fbb4

0804e04c <crc16_xmodem>:
    uint16_t version;      
    uint16_t total_steps;
    uint16_t header_crc;    // CRC16_XMODEM of first 8 bytes
} ScriptFileHeader;

uint16_t crc16_xmodem(const uint8_t *data, uint32_t length) {
 804e04c:	b480      	push	{r7}
 804e04e:	b087      	sub	sp, #28
 804e050:	af00      	add	r7, sp, #0
 804e052:	6078      	str	r0, [r7, #4]
 804e054:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000;
 804e056:	2300      	movs	r3, #0
 804e058:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; ++i) {
 804e05a:	2300      	movs	r3, #0
 804e05c:	613b      	str	r3, [r7, #16]
 804e05e:	e029      	b.n	804e0b4 <crc16_xmodem+0x68>
        crc ^= (uint16_t)data[i] << 8;
 804e060:	687a      	ldr	r2, [r7, #4]
 804e062:	693b      	ldr	r3, [r7, #16]
 804e064:	4413      	add	r3, r2
 804e066:	781b      	ldrb	r3, [r3, #0]
 804e068:	b21b      	sxth	r3, r3
 804e06a:	021b      	lsls	r3, r3, #8
 804e06c:	b21a      	sxth	r2, r3
 804e06e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804e072:	4053      	eors	r3, r2
 804e074:	b21b      	sxth	r3, r3
 804e076:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; ++j) {
 804e078:	2300      	movs	r3, #0
 804e07a:	73fb      	strb	r3, [r7, #15]
 804e07c:	e014      	b.n	804e0a8 <crc16_xmodem+0x5c>
            crc = (crc & 0x8000) ? ((crc << 1) ^ 0x1021) : (crc << 1);
 804e07e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804e082:	2b00      	cmp	r3, #0
 804e084:	da09      	bge.n	804e09a <crc16_xmodem+0x4e>
 804e086:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804e08a:	005b      	lsls	r3, r3, #1
 804e08c:	b21a      	sxth	r2, r3
 804e08e:	f241 0321 	movw	r3, #4129	@ 0x1021
 804e092:	4053      	eors	r3, r2
 804e094:	b21b      	sxth	r3, r3
 804e096:	b29b      	uxth	r3, r3
 804e098:	e002      	b.n	804e0a0 <crc16_xmodem+0x54>
 804e09a:	8afb      	ldrh	r3, [r7, #22]
 804e09c:	005b      	lsls	r3, r3, #1
 804e09e:	b29b      	uxth	r3, r3
 804e0a0:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; ++j) {
 804e0a2:	7bfb      	ldrb	r3, [r7, #15]
 804e0a4:	3301      	adds	r3, #1
 804e0a6:	73fb      	strb	r3, [r7, #15]
 804e0a8:	7bfb      	ldrb	r3, [r7, #15]
 804e0aa:	2b07      	cmp	r3, #7
 804e0ac:	d9e7      	bls.n	804e07e <crc16_xmodem+0x32>
    for (uint32_t i = 0; i < length; ++i) {
 804e0ae:	693b      	ldr	r3, [r7, #16]
 804e0b0:	3301      	adds	r3, #1
 804e0b2:	613b      	str	r3, [r7, #16]
 804e0b4:	693a      	ldr	r2, [r7, #16]
 804e0b6:	683b      	ldr	r3, [r7, #0]
 804e0b8:	429a      	cmp	r2, r3
 804e0ba:	d3d1      	bcc.n	804e060 <crc16_xmodem+0x14>
        }
    }
    return crc;
 804e0bc:	8afb      	ldrh	r3, [r7, #22]
}
 804e0be:	4618      	mov	r0, r3
 804e0c0:	371c      	adds	r7, #28
 804e0c2:	46bd      	mov	sp, r7
 804e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e0c8:	4770      	bx	lr
	...

0804e0cc <BScript_ParseParamByIndex>:

ParseByIndexResult BScript_ParseParamByIndex(const uint8_t* buffer, uint8_t total_len, uint8_t index, void* out_value) {
 804e0cc:	b580      	push	{r7, lr}
 804e0ce:	b086      	sub	sp, #24
 804e0d0:	af00      	add	r7, sp, #0
 804e0d2:	60f8      	str	r0, [r7, #12]
 804e0d4:	607b      	str	r3, [r7, #4]
 804e0d6:	460b      	mov	r3, r1
 804e0d8:	72fb      	strb	r3, [r7, #11]
 804e0da:	4613      	mov	r3, r2
 804e0dc:	72bb      	strb	r3, [r7, #10]
    if (total_len < 1) return PARSE_IDX_INSUFFICIENT_DATA;
 804e0de:	7afb      	ldrb	r3, [r7, #11]
 804e0e0:	2b00      	cmp	r3, #0
 804e0e2:	d102      	bne.n	804e0ea <BScript_ParseParamByIndex+0x1e>
 804e0e4:	f06f 0301 	mvn.w	r3, #1
 804e0e8:	e0bc      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

    uint8_t num_fields = buffer[0];
 804e0ea:	68fb      	ldr	r3, [r7, #12]
 804e0ec:	781b      	ldrb	r3, [r3, #0]
 804e0ee:	757b      	strb	r3, [r7, #21]
    if (index >= num_fields) return PARSE_IDX_INVALID_INDEX;
 804e0f0:	7aba      	ldrb	r2, [r7, #10]
 804e0f2:	7d7b      	ldrb	r3, [r7, #21]
 804e0f4:	429a      	cmp	r2, r3
 804e0f6:	d302      	bcc.n	804e0fe <BScript_ParseParamByIndex+0x32>
 804e0f8:	f04f 33ff 	mov.w	r3, #4294967295
 804e0fc:	e0b2      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

    uint8_t offset = 1;
 804e0fe:	2301      	movs	r3, #1
 804e100:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < num_fields; ++i) {
 804e102:	2300      	movs	r3, #0
 804e104:	75bb      	strb	r3, [r7, #22]
 804e106:	e0a6      	b.n	804e256 <BScript_ParseParamByIndex+0x18a>
        if (offset + 2 > total_len) return PARSE_IDX_INSUFFICIENT_DATA;
 804e108:	7dfb      	ldrb	r3, [r7, #23]
 804e10a:	1c5a      	adds	r2, r3, #1
 804e10c:	7afb      	ldrb	r3, [r7, #11]
 804e10e:	429a      	cmp	r2, r3
 804e110:	db02      	blt.n	804e118 <BScript_ParseParamByIndex+0x4c>
 804e112:	f06f 0301 	mvn.w	r3, #1
 804e116:	e0a5      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

        uint8_t type = buffer[offset];
 804e118:	7dfb      	ldrb	r3, [r7, #23]
 804e11a:	68fa      	ldr	r2, [r7, #12]
 804e11c:	4413      	add	r3, r2
 804e11e:	781b      	ldrb	r3, [r3, #0]
 804e120:	753b      	strb	r3, [r7, #20]
        uint8_t length = buffer[offset + 1];
 804e122:	7dfb      	ldrb	r3, [r7, #23]
 804e124:	3301      	adds	r3, #1
 804e126:	68fa      	ldr	r2, [r7, #12]
 804e128:	4413      	add	r3, r2
 804e12a:	781b      	ldrb	r3, [r3, #0]
 804e12c:	74fb      	strb	r3, [r7, #19]
        offset += 2;
 804e12e:	7dfb      	ldrb	r3, [r7, #23]
 804e130:	3302      	adds	r3, #2
 804e132:	75fb      	strb	r3, [r7, #23]

        if (offset + length > total_len) return PARSE_IDX_INSUFFICIENT_DATA;
 804e134:	7dfa      	ldrb	r2, [r7, #23]
 804e136:	7cfb      	ldrb	r3, [r7, #19]
 804e138:	441a      	add	r2, r3
 804e13a:	7afb      	ldrb	r3, [r7, #11]
 804e13c:	429a      	cmp	r2, r3
 804e13e:	dd02      	ble.n	804e146 <BScript_ParseParamByIndex+0x7a>
 804e140:	f06f 0301 	mvn.w	r3, #1
 804e144:	e08e      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

        if (i == index) {
 804e146:	7dba      	ldrb	r2, [r7, #22]
 804e148:	7abb      	ldrb	r3, [r7, #10]
 804e14a:	429a      	cmp	r2, r3
 804e14c:	d17c      	bne.n	804e248 <BScript_ParseParamByIndex+0x17c>
            switch (type) {
 804e14e:	7d3b      	ldrb	r3, [r7, #20]
 804e150:	3b01      	subs	r3, #1
 804e152:	2b04      	cmp	r3, #4
 804e154:	d875      	bhi.n	804e242 <BScript_ParseParamByIndex+0x176>
 804e156:	a201      	add	r2, pc, #4	@ (adr r2, 804e15c <BScript_ParseParamByIndex+0x90>)
 804e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e15c:	0804e171 	.word	0x0804e171
 804e160:	0804e18d 	.word	0x0804e18d
 804e164:	0804e1c1 	.word	0x0804e1c1
 804e168:	0804e207 	.word	0x0804e207
 804e16c:	0804e225 	.word	0x0804e225
                case PARAM_TYPE_UINT8:
                    if (length != 1) return PARSE_IDX_LENGTH_MISMATCH;
 804e170:	7cfb      	ldrb	r3, [r7, #19]
 804e172:	2b01      	cmp	r3, #1
 804e174:	d002      	beq.n	804e17c <BScript_ParseParamByIndex+0xb0>
 804e176:	f06f 0302 	mvn.w	r3, #2
 804e17a:	e073      	b.n	804e264 <BScript_ParseParamByIndex+0x198>
                    *(uint8_t*)out_value = buffer[offset];
 804e17c:	7dfb      	ldrb	r3, [r7, #23]
 804e17e:	68fa      	ldr	r2, [r7, #12]
 804e180:	4413      	add	r3, r2
 804e182:	781a      	ldrb	r2, [r3, #0]
 804e184:	687b      	ldr	r3, [r7, #4]
 804e186:	701a      	strb	r2, [r3, #0]
                    return PARSE_IDX_OK;
 804e188:	2300      	movs	r3, #0
 804e18a:	e06b      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

                case PARAM_TYPE_UINT16:
                    if (length != 2) return PARSE_IDX_LENGTH_MISMATCH;
 804e18c:	7cfb      	ldrb	r3, [r7, #19]
 804e18e:	2b02      	cmp	r3, #2
 804e190:	d002      	beq.n	804e198 <BScript_ParseParamByIndex+0xcc>
 804e192:	f06f 0302 	mvn.w	r3, #2
 804e196:	e065      	b.n	804e264 <BScript_ParseParamByIndex+0x198>
                    *(uint16_t*)out_value = (buffer[offset + 1] << 8) | buffer[offset];
 804e198:	7dfb      	ldrb	r3, [r7, #23]
 804e19a:	3301      	adds	r3, #1
 804e19c:	68fa      	ldr	r2, [r7, #12]
 804e19e:	4413      	add	r3, r2
 804e1a0:	781b      	ldrb	r3, [r3, #0]
 804e1a2:	b21b      	sxth	r3, r3
 804e1a4:	021b      	lsls	r3, r3, #8
 804e1a6:	b21a      	sxth	r2, r3
 804e1a8:	7dfb      	ldrb	r3, [r7, #23]
 804e1aa:	68f9      	ldr	r1, [r7, #12]
 804e1ac:	440b      	add	r3, r1
 804e1ae:	781b      	ldrb	r3, [r3, #0]
 804e1b0:	b21b      	sxth	r3, r3
 804e1b2:	4313      	orrs	r3, r2
 804e1b4:	b21b      	sxth	r3, r3
 804e1b6:	b29a      	uxth	r2, r3
 804e1b8:	687b      	ldr	r3, [r7, #4]
 804e1ba:	801a      	strh	r2, [r3, #0]
                    return PARSE_IDX_OK;
 804e1bc:	2300      	movs	r3, #0
 804e1be:	e051      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

                case PARAM_TYPE_UINT32:
                    if (length != 4) return PARSE_IDX_LENGTH_MISMATCH;
 804e1c0:	7cfb      	ldrb	r3, [r7, #19]
 804e1c2:	2b04      	cmp	r3, #4
 804e1c4:	d002      	beq.n	804e1cc <BScript_ParseParamByIndex+0x100>
 804e1c6:	f06f 0302 	mvn.w	r3, #2
 804e1ca:	e04b      	b.n	804e264 <BScript_ParseParamByIndex+0x198>
                    *(uint32_t*)out_value = ((uint32_t)buffer[offset + 3] << 24) |
 804e1cc:	7dfb      	ldrb	r3, [r7, #23]
 804e1ce:	3303      	adds	r3, #3
 804e1d0:	68fa      	ldr	r2, [r7, #12]
 804e1d2:	4413      	add	r3, r2
 804e1d4:	781b      	ldrb	r3, [r3, #0]
 804e1d6:	061a      	lsls	r2, r3, #24
                                            ((uint32_t)buffer[offset + 2] << 16) |
 804e1d8:	7dfb      	ldrb	r3, [r7, #23]
 804e1da:	3302      	adds	r3, #2
 804e1dc:	68f9      	ldr	r1, [r7, #12]
 804e1de:	440b      	add	r3, r1
 804e1e0:	781b      	ldrb	r3, [r3, #0]
 804e1e2:	041b      	lsls	r3, r3, #16
                    *(uint32_t*)out_value = ((uint32_t)buffer[offset + 3] << 24) |
 804e1e4:	431a      	orrs	r2, r3
                                            ((uint32_t)buffer[offset + 1] << 8) |
 804e1e6:	7dfb      	ldrb	r3, [r7, #23]
 804e1e8:	3301      	adds	r3, #1
 804e1ea:	68f9      	ldr	r1, [r7, #12]
 804e1ec:	440b      	add	r3, r1
 804e1ee:	781b      	ldrb	r3, [r3, #0]
 804e1f0:	021b      	lsls	r3, r3, #8
                                            ((uint32_t)buffer[offset + 2] << 16) |
 804e1f2:	4313      	orrs	r3, r2
                                            buffer[offset];
 804e1f4:	7dfa      	ldrb	r2, [r7, #23]
 804e1f6:	68f9      	ldr	r1, [r7, #12]
 804e1f8:	440a      	add	r2, r1
 804e1fa:	7812      	ldrb	r2, [r2, #0]
                                            ((uint32_t)buffer[offset + 1] << 8) |
 804e1fc:	431a      	orrs	r2, r3
                    *(uint32_t*)out_value = ((uint32_t)buffer[offset + 3] << 24) |
 804e1fe:	687b      	ldr	r3, [r7, #4]
 804e200:	601a      	str	r2, [r3, #0]
                    return PARSE_IDX_OK;
 804e202:	2300      	movs	r3, #0
 804e204:	e02e      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

                case PARAM_TYPE_FLOAT:
                    if (length != 4) return PARSE_IDX_LENGTH_MISMATCH;
 804e206:	7cfb      	ldrb	r3, [r7, #19]
 804e208:	2b04      	cmp	r3, #4
 804e20a:	d002      	beq.n	804e212 <BScript_ParseParamByIndex+0x146>
 804e20c:	f06f 0302 	mvn.w	r3, #2
 804e210:	e028      	b.n	804e264 <BScript_ParseParamByIndex+0x198>
                    memcpy(out_value, &buffer[offset], 4);
 804e212:	7dfb      	ldrb	r3, [r7, #23]
 804e214:	68fa      	ldr	r2, [r7, #12]
 804e216:	4413      	add	r3, r2
 804e218:	681b      	ldr	r3, [r3, #0]
 804e21a:	461a      	mov	r2, r3
 804e21c:	687b      	ldr	r3, [r7, #4]
 804e21e:	601a      	str	r2, [r3, #0]
                    return PARSE_IDX_OK;
 804e220:	2300      	movs	r3, #0
 804e222:	e01f      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

                case PARAM_TYPE_STRING:
                    memcpy(out_value, &buffer[offset], length);
 804e224:	7dfb      	ldrb	r3, [r7, #23]
 804e226:	68fa      	ldr	r2, [r7, #12]
 804e228:	4413      	add	r3, r2
 804e22a:	7cfa      	ldrb	r2, [r7, #19]
 804e22c:	4619      	mov	r1, r3
 804e22e:	6878      	ldr	r0, [r7, #4]
 804e230:	f01b fb83 	bl	806993a <memcpy>
                    ((char*)out_value)[length] = '\0';
 804e234:	7cfb      	ldrb	r3, [r7, #19]
 804e236:	687a      	ldr	r2, [r7, #4]
 804e238:	4413      	add	r3, r2
 804e23a:	2200      	movs	r2, #0
 804e23c:	701a      	strb	r2, [r3, #0]
                    return PARSE_IDX_OK;
 804e23e:	2300      	movs	r3, #0
 804e240:	e010      	b.n	804e264 <BScript_ParseParamByIndex+0x198>

                default:
                    return PARSE_IDX_UNKNOWN_TYPE;
 804e242:	f06f 0303 	mvn.w	r3, #3
 804e246:	e00d      	b.n	804e264 <BScript_ParseParamByIndex+0x198>
            }
        }

        offset += length;
 804e248:	7dfa      	ldrb	r2, [r7, #23]
 804e24a:	7cfb      	ldrb	r3, [r7, #19]
 804e24c:	4413      	add	r3, r2
 804e24e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < num_fields; ++i) {
 804e250:	7dbb      	ldrb	r3, [r7, #22]
 804e252:	3301      	adds	r3, #1
 804e254:	75bb      	strb	r3, [r7, #22]
 804e256:	7dba      	ldrb	r2, [r7, #22]
 804e258:	7d7b      	ldrb	r3, [r7, #21]
 804e25a:	429a      	cmp	r2, r3
 804e25c:	f4ff af54 	bcc.w	804e108 <BScript_ParseParamByIndex+0x3c>
    }

    return PARSE_IDX_INVALID_INDEX;
 804e260:	f04f 33ff 	mov.w	r3, #4294967295
}
 804e264:	4618      	mov	r0, r3
 804e266:	3718      	adds	r7, #24
 804e268:	46bd      	mov	sp, r7
 804e26a:	bd80      	pop	{r7, pc}

0804e26c <BScript_ParseScript>:

ScriptParseResult BScript_ParseScript(const uint8_t* buffer, uint32_t buffer_size, Script* script) {
 804e26c:	b580      	push	{r7, lr}
 804e26e:	b08a      	sub	sp, #40	@ 0x28
 804e270:	af00      	add	r7, sp, #0
 804e272:	60f8      	str	r0, [r7, #12]
 804e274:	60b9      	str	r1, [r7, #8]
 804e276:	607a      	str	r2, [r7, #4]
    if (buffer_size < sizeof(ScriptFileHeader) + sizeof(uint16_t)) {
 804e278:	68bb      	ldr	r3, [r7, #8]
 804e27a:	2b0d      	cmp	r3, #13
 804e27c:	d805      	bhi.n	804e28a <BScript_ParseScript+0x1e>
        BScript_Log("[Parser] Error: File too small for header + CRC");
 804e27e:	487b      	ldr	r0, [pc, #492]	@ (804e46c <BScript_ParseScript+0x200>)
 804e280:	f7ff fe84 	bl	804df8c <BScript_Log>
        return PARSE_ERROR_SIZE;
 804e284:	f06f 0302 	mvn.w	r3, #2
 804e288:	e0ec      	b.n	804e464 <BScript_ParseScript+0x1f8>
    }

    const ScriptFileHeader* header = (const ScriptFileHeader*)buffer;
 804e28a:	68fb      	ldr	r3, [r7, #12]
 804e28c:	61fb      	str	r3, [r7, #28]

    if (header->hmagic != MAGIC_HEADER) {
 804e28e:	69fb      	ldr	r3, [r7, #28]
 804e290:	681b      	ldr	r3, [r3, #0]
 804e292:	4a77      	ldr	r2, [pc, #476]	@ (804e470 <BScript_ParseScript+0x204>)
 804e294:	4293      	cmp	r3, r2
 804e296:	d008      	beq.n	804e2aa <BScript_ParseScript+0x3e>
        BScript_Log("[Parser] Error: Invalid header magic: 0x%08X", header->hmagic);
 804e298:	69fb      	ldr	r3, [r7, #28]
 804e29a:	681b      	ldr	r3, [r3, #0]
 804e29c:	4619      	mov	r1, r3
 804e29e:	4875      	ldr	r0, [pc, #468]	@ (804e474 <BScript_ParseScript+0x208>)
 804e2a0:	f7ff fe74 	bl	804df8c <BScript_Log>
        return PARSE_ERROR_MAGIC;
 804e2a4:	f06f 0301 	mvn.w	r3, #1
 804e2a8:	e0dc      	b.n	804e464 <BScript_ParseScript+0x1f8>
    }

    if (header->total_steps > MAX_STEPS) {
 804e2aa:	69fb      	ldr	r3, [r7, #28]
 804e2ac:	88db      	ldrh	r3, [r3, #6]
 804e2ae:	2bc8      	cmp	r3, #200	@ 0xc8
 804e2b0:	d908      	bls.n	804e2c4 <BScript_ParseScript+0x58>
        BScript_Log("[Parser] Error: Too many steps: %u\n", header->total_steps);
 804e2b2:	69fb      	ldr	r3, [r7, #28]
 804e2b4:	88db      	ldrh	r3, [r3, #6]
 804e2b6:	4619      	mov	r1, r3
 804e2b8:	486f      	ldr	r0, [pc, #444]	@ (804e478 <BScript_ParseScript+0x20c>)
 804e2ba:	f7ff fe67 	bl	804df8c <BScript_Log>
        return PARSE_ERROR;
 804e2be:	f04f 33ff 	mov.w	r3, #4294967295
 804e2c2:	e0cf      	b.n	804e464 <BScript_ParseScript+0x1f8>
    }

    // === CRC Check ===
    // 1. Check header_crc (on first 8 bytes)
    uint16_t computed_header_crc = crc16_xmodem(buffer, 8);
 804e2c4:	2108      	movs	r1, #8
 804e2c6:	68f8      	ldr	r0, [r7, #12]
 804e2c8:	f7ff fec0 	bl	804e04c <crc16_xmodem>
 804e2cc:	4603      	mov	r3, r0
 804e2ce:	837b      	strh	r3, [r7, #26]
    if (computed_header_crc != header->header_crc) {
 804e2d0:	69fb      	ldr	r3, [r7, #28]
 804e2d2:	891b      	ldrh	r3, [r3, #8]
 804e2d4:	8b7a      	ldrh	r2, [r7, #26]
 804e2d6:	429a      	cmp	r2, r3
 804e2d8:	d00a      	beq.n	804e2f0 <BScript_ParseScript+0x84>
        BScript_Log("[Parser] Header CRC mismatch: expected 0x%04X, got 0x%04X",
               header->header_crc, computed_header_crc);
 804e2da:	69fb      	ldr	r3, [r7, #28]
 804e2dc:	891b      	ldrh	r3, [r3, #8]
        BScript_Log("[Parser] Header CRC mismatch: expected 0x%04X, got 0x%04X",
 804e2de:	4619      	mov	r1, r3
 804e2e0:	8b7b      	ldrh	r3, [r7, #26]
 804e2e2:	461a      	mov	r2, r3
 804e2e4:	4865      	ldr	r0, [pc, #404]	@ (804e47c <BScript_ParseScript+0x210>)
 804e2e6:	f7ff fe51 	bl	804df8c <BScript_Log>
        return PARSE_ERROR;
 804e2ea:	f04f 33ff 	mov.w	r3, #4294967295
 804e2ee:	e0b9      	b.n	804e464 <BScript_ParseScript+0x1f8>
    }

    // 2. Check total CRC (last 2 bytes of file)
    uint16_t file_total_crc = *(uint16_t*)(buffer + buffer_size - 2);
 804e2f0:	68bb      	ldr	r3, [r7, #8]
 804e2f2:	3b02      	subs	r3, #2
 804e2f4:	68fa      	ldr	r2, [r7, #12]
 804e2f6:	4413      	add	r3, r2
 804e2f8:	881b      	ldrh	r3, [r3, #0]
 804e2fa:	833b      	strh	r3, [r7, #24]
    uint16_t computed_total_crc = crc16_xmodem(buffer, buffer_size - 2);
 804e2fc:	68bb      	ldr	r3, [r7, #8]
 804e2fe:	3b02      	subs	r3, #2
 804e300:	4619      	mov	r1, r3
 804e302:	68f8      	ldr	r0, [r7, #12]
 804e304:	f7ff fea2 	bl	804e04c <crc16_xmodem>
 804e308:	4603      	mov	r3, r0
 804e30a:	82fb      	strh	r3, [r7, #22]
    if (file_total_crc != computed_total_crc) {
 804e30c:	8b3a      	ldrh	r2, [r7, #24]
 804e30e:	8afb      	ldrh	r3, [r7, #22]
 804e310:	429a      	cmp	r2, r3
 804e312:	d008      	beq.n	804e326 <BScript_ParseScript+0xba>
        BScript_Log("[Parser] Total CRC mismatch: expected 0x%04X, got 0x%04X",
 804e314:	8b3b      	ldrh	r3, [r7, #24]
 804e316:	8afa      	ldrh	r2, [r7, #22]
 804e318:	4619      	mov	r1, r3
 804e31a:	4859      	ldr	r0, [pc, #356]	@ (804e480 <BScript_ParseScript+0x214>)
 804e31c:	f7ff fe36 	bl	804df8c <BScript_Log>
               file_total_crc, computed_total_crc);
        return PARSE_ERROR;
 804e320:	f04f 33ff 	mov.w	r3, #4294967295
 804e324:	e09e      	b.n	804e464 <BScript_ParseScript+0x1f8>
    }

    // === Parse steps ===
    script->total_steps = header->total_steps;
 804e326:	69fb      	ldr	r3, [r7, #28]
 804e328:	88da      	ldrh	r2, [r3, #6]
 804e32a:	687b      	ldr	r3, [r7, #4]
 804e32c:	805a      	strh	r2, [r3, #2]

    uint32_t offset = sizeof(ScriptFileHeader);
 804e32e:	230c      	movs	r3, #12
 804e330:	627b      	str	r3, [r7, #36]	@ 0x24

    if(offset != 10){
 804e332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e334:	2b0a      	cmp	r3, #10
 804e336:	d004      	beq.n	804e342 <BScript_ParseScript+0xd6>
        offset = 10;
 804e338:	230a      	movs	r3, #10
 804e33a:	627b      	str	r3, [r7, #36]	@ 0x24
        BScript_Log("[Parser] Warning: offset struct != 10, we would change to offset 10");
 804e33c:	4851      	ldr	r0, [pc, #324]	@ (804e484 <BScript_ParseScript+0x218>)
 804e33e:	f7ff fe25 	bl	804df8c <BScript_Log>
    }


    for (uint16_t i = 0; i < script->total_steps; i++) {
 804e342:	2300      	movs	r3, #0
 804e344:	847b      	strh	r3, [r7, #34]	@ 0x22
 804e346:	e086      	b.n	804e456 <BScript_ParseScript+0x1ea>
        if (offset + 8 > buffer_size - 2) {
 804e348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e34a:	f103 0208 	add.w	r2, r3, #8
 804e34e:	68bb      	ldr	r3, [r7, #8]
 804e350:	3b02      	subs	r3, #2
 804e352:	429a      	cmp	r2, r3
 804e354:	d908      	bls.n	804e368 <BScript_ParseScript+0xfc>
            BScript_Log("[Parser] Error: Step %u header out of bounds", i + 1);
 804e356:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e358:	3301      	adds	r3, #1
 804e35a:	4619      	mov	r1, r3
 804e35c:	484a      	ldr	r0, [pc, #296]	@ (804e488 <BScript_ParseScript+0x21c>)
 804e35e:	f7ff fe15 	bl	804df8c <BScript_Log>
            return PARSE_ERROR_STEP_LENGTH;
 804e362:	f06f 0304 	mvn.w	r3, #4
 804e366:	e07d      	b.n	804e464 <BScript_ParseScript+0x1f8>
        }

        Step* step = &script->steps[i];
 804e368:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 804e36a:	4613      	mov	r3, r2
 804e36c:	00db      	lsls	r3, r3, #3
 804e36e:	4413      	add	r3, r2
 804e370:	00db      	lsls	r3, r3, #3
 804e372:	687a      	ldr	r2, [r7, #4]
 804e374:	4413      	add	r3, r2
 804e376:	3304      	adds	r3, #4
 804e378:	613b      	str	r3, [r7, #16]
        step->smagic = *(uint32_t*)(buffer + offset);
 804e37a:	68fa      	ldr	r2, [r7, #12]
 804e37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e37e:	4413      	add	r3, r2
 804e380:	681a      	ldr	r2, [r3, #0]
 804e382:	693b      	ldr	r3, [r7, #16]
 804e384:	601a      	str	r2, [r3, #0]
        step->step_id = *(uint16_t*)(buffer + offset + 4);
 804e386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e388:	3304      	adds	r3, #4
 804e38a:	68fa      	ldr	r2, [r7, #12]
 804e38c:	4413      	add	r3, r2
 804e38e:	881a      	ldrh	r2, [r3, #0]
 804e390:	693b      	ldr	r3, [r7, #16]
 804e392:	809a      	strh	r2, [r3, #4]
        step->action_id = *(uint8_t*)(buffer + offset + 6);
 804e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e396:	3306      	adds	r3, #6
 804e398:	68fa      	ldr	r2, [r7, #12]
 804e39a:	4413      	add	r3, r2
 804e39c:	781a      	ldrb	r2, [r3, #0]
 804e39e:	693b      	ldr	r3, [r7, #16]
 804e3a0:	719a      	strb	r2, [r3, #6]
        step->param_len = *(uint8_t*)(buffer + offset + 7);
 804e3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e3a4:	3307      	adds	r3, #7
 804e3a6:	68fa      	ldr	r2, [r7, #12]
 804e3a8:	4413      	add	r3, r2
 804e3aa:	781a      	ldrb	r2, [r3, #0]
 804e3ac:	693b      	ldr	r3, [r7, #16]
 804e3ae:	71da      	strb	r2, [r3, #7]

        offset += 8;
 804e3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e3b2:	3308      	adds	r3, #8
 804e3b4:	627b      	str	r3, [r7, #36]	@ 0x24

        if (step->smagic != MAGIC_STEP) {
 804e3b6:	693b      	ldr	r3, [r7, #16]
 804e3b8:	681b      	ldr	r3, [r3, #0]
 804e3ba:	4a34      	ldr	r2, [pc, #208]	@ (804e48c <BScript_ParseScript+0x220>)
 804e3bc:	4293      	cmp	r3, r2
 804e3be:	d00a      	beq.n	804e3d6 <BScript_ParseScript+0x16a>
            BScript_Log("[Parser] Error: Step %u invalid magic: 0x%08X", i + 1, step->smagic);
 804e3c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e3c2:	1c59      	adds	r1, r3, #1
 804e3c4:	693b      	ldr	r3, [r7, #16]
 804e3c6:	681b      	ldr	r3, [r3, #0]
 804e3c8:	461a      	mov	r2, r3
 804e3ca:	4831      	ldr	r0, [pc, #196]	@ (804e490 <BScript_ParseScript+0x224>)
 804e3cc:	f7ff fdde 	bl	804df8c <BScript_Log>
            return PARSE_ERROR_STEP_MAGIC;
 804e3d0:	f06f 0303 	mvn.w	r3, #3
 804e3d4:	e046      	b.n	804e464 <BScript_ParseScript+0x1f8>
        }

        if (step->param_len > sizeof(step->parameters)) {
 804e3d6:	693b      	ldr	r3, [r7, #16]
 804e3d8:	79db      	ldrb	r3, [r3, #7]
 804e3da:	2b40      	cmp	r3, #64	@ 0x40
 804e3dc:	d90a      	bls.n	804e3f4 <BScript_ParseScript+0x188>
            BScript_Log("[Parser] Error: Step %u parameter too long: %u", i + 1, step->param_len);
 804e3de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e3e0:	1c59      	adds	r1, r3, #1
 804e3e2:	693b      	ldr	r3, [r7, #16]
 804e3e4:	79db      	ldrb	r3, [r3, #7]
 804e3e6:	461a      	mov	r2, r3
 804e3e8:	482a      	ldr	r0, [pc, #168]	@ (804e494 <BScript_ParseScript+0x228>)
 804e3ea:	f7ff fdcf 	bl	804df8c <BScript_Log>
            return PARSE_ERROR_STEP_OVERFLOW;
 804e3ee:	f06f 0305 	mvn.w	r3, #5
 804e3f2:	e037      	b.n	804e464 <BScript_ParseScript+0x1f8>
        }

        if (offset + step->param_len > buffer_size - 2) {
 804e3f4:	693b      	ldr	r3, [r7, #16]
 804e3f6:	79db      	ldrb	r3, [r3, #7]
 804e3f8:	461a      	mov	r2, r3
 804e3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e3fc:	441a      	add	r2, r3
 804e3fe:	68bb      	ldr	r3, [r7, #8]
 804e400:	3b02      	subs	r3, #2
 804e402:	429a      	cmp	r2, r3
 804e404:	d908      	bls.n	804e418 <BScript_ParseScript+0x1ac>
            BScript_Log("[Parser] Error: Step %u parameter data out of bounds", i + 1);
 804e406:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e408:	3301      	adds	r3, #1
 804e40a:	4619      	mov	r1, r3
 804e40c:	4822      	ldr	r0, [pc, #136]	@ (804e498 <BScript_ParseScript+0x22c>)
 804e40e:	f7ff fdbd 	bl	804df8c <BScript_Log>
            return PARSE_ERROR_STEP_OVERFLOW;
 804e412:	f06f 0305 	mvn.w	r3, #5
 804e416:	e025      	b.n	804e464 <BScript_ParseScript+0x1f8>
        }

        memcpy(step->parameters, buffer + offset, step->param_len);
 804e418:	693b      	ldr	r3, [r7, #16]
 804e41a:	f103 0008 	add.w	r0, r3, #8
 804e41e:	68fa      	ldr	r2, [r7, #12]
 804e420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e422:	18d1      	adds	r1, r2, r3
 804e424:	693b      	ldr	r3, [r7, #16]
 804e426:	79db      	ldrb	r3, [r3, #7]
 804e428:	461a      	mov	r2, r3
 804e42a:	f01b fa86 	bl	806993a <memcpy>
        offset += step->param_len;
 804e42e:	693b      	ldr	r3, [r7, #16]
 804e430:	79db      	ldrb	r3, [r3, #7]
 804e432:	461a      	mov	r2, r3
 804e434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e436:	4413      	add	r3, r2
 804e438:	627b      	str	r3, [r7, #36]	@ 0x24

        BScript_Log("[Parser] Step %u: action_id=%u, param_len=%u", step->step_id, step->action_id, step->param_len);
 804e43a:	693b      	ldr	r3, [r7, #16]
 804e43c:	889b      	ldrh	r3, [r3, #4]
 804e43e:	4619      	mov	r1, r3
 804e440:	693b      	ldr	r3, [r7, #16]
 804e442:	799b      	ldrb	r3, [r3, #6]
 804e444:	461a      	mov	r2, r3
 804e446:	693b      	ldr	r3, [r7, #16]
 804e448:	79db      	ldrb	r3, [r3, #7]
 804e44a:	4814      	ldr	r0, [pc, #80]	@ (804e49c <BScript_ParseScript+0x230>)
 804e44c:	f7ff fd9e 	bl	804df8c <BScript_Log>
    for (uint16_t i = 0; i < script->total_steps; i++) {
 804e450:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e452:	3301      	adds	r3, #1
 804e454:	847b      	strh	r3, [r7, #34]	@ 0x22
 804e456:	687b      	ldr	r3, [r7, #4]
 804e458:	885b      	ldrh	r3, [r3, #2]
 804e45a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 804e45c:	429a      	cmp	r2, r3
 804e45e:	f4ff af73 	bcc.w	804e348 <BScript_ParseScript+0xdc>
    }

    return PARSE_OK;
 804e462:	2300      	movs	r3, #0
}
 804e464:	4618      	mov	r0, r3
 804e466:	3728      	adds	r7, #40	@ 0x28
 804e468:	46bd      	mov	sp, r7
 804e46a:	bd80      	pop	{r7, pc}
 804e46c:	0806fbb8 	.word	0x0806fbb8
 804e470:	c0dedead 	.word	0xc0dedead
 804e474:	0806fbe8 	.word	0x0806fbe8
 804e478:	0806fc18 	.word	0x0806fc18
 804e47c:	0806fc3c 	.word	0x0806fc3c
 804e480:	0806fc78 	.word	0x0806fc78
 804e484:	0806fcb4 	.word	0x0806fcb4
 804e488:	0806fcf8 	.word	0x0806fcf8
 804e48c:	deadbeef 	.word	0xdeadbeef
 804e490:	0806fd28 	.word	0x0806fd28
 804e494:	0806fd58 	.word	0x0806fd58
 804e498:	0806fd88 	.word	0x0806fd88
 804e49c:	0806fdc0 	.word	0x0806fdc0

0804e4a0 <BScript_Delayms>:

uint32_t BScript_GetTick(void) {
    return xTaskGetTickCount();
}

void BScript_Delayms(uint32_t ms) {
 804e4a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804e4a4:	b082      	sub	sp, #8
 804e4a6:	af00      	add	r7, sp, #0
 804e4a8:	6078      	str	r0, [r7, #4]
    vTaskDelay(pdMS_TO_TICKS(ms));
 804e4aa:	6879      	ldr	r1, [r7, #4]
 804e4ac:	2000      	movs	r0, #0
 804e4ae:	460c      	mov	r4, r1
 804e4b0:	4605      	mov	r5, r0
 804e4b2:	4620      	mov	r0, r4
 804e4b4:	4629      	mov	r1, r5
 804e4b6:	f04f 0a00 	mov.w	sl, #0
 804e4ba:	f04f 0b00 	mov.w	fp, #0
 804e4be:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 804e4c2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 804e4c6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 804e4ca:	4650      	mov	r0, sl
 804e4cc:	4659      	mov	r1, fp
 804e4ce:	1b02      	subs	r2, r0, r4
 804e4d0:	eb61 0305 	sbc.w	r3, r1, r5
 804e4d4:	f04f 0000 	mov.w	r0, #0
 804e4d8:	f04f 0100 	mov.w	r1, #0
 804e4dc:	0099      	lsls	r1, r3, #2
 804e4de:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 804e4e2:	0090      	lsls	r0, r2, #2
 804e4e4:	4602      	mov	r2, r0
 804e4e6:	460b      	mov	r3, r1
 804e4e8:	eb12 0804 	adds.w	r8, r2, r4
 804e4ec:	eb43 0905 	adc.w	r9, r3, r5
 804e4f0:	f04f 0200 	mov.w	r2, #0
 804e4f4:	f04f 0300 	mov.w	r3, #0
 804e4f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804e4fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804e500:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804e504:	4690      	mov	r8, r2
 804e506:	4699      	mov	r9, r3
 804e508:	4640      	mov	r0, r8
 804e50a:	4649      	mov	r1, r9
 804e50c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 804e510:	f04f 0300 	mov.w	r3, #0
 804e514:	f7f1 ff4c 	bl	80403b0 <__aeabi_uldivmod>
 804e518:	4602      	mov	r2, r0
 804e51a:	460b      	mov	r3, r1
 804e51c:	4613      	mov	r3, r2
 804e51e:	4618      	mov	r0, r3
 804e520:	f008 f8a0 	bl	8056664 <vTaskDelay>
}
 804e524:	bf00      	nop
 804e526:	3708      	adds	r7, #8
 804e528:	46bd      	mov	sp, r7
 804e52a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0804e52e <ScriptStorage_CalculateCRC16>:
 * @param data Pointer to data
 * @param length Data length
 * @return CRC16 value
 */
static uint16_t ScriptStorage_CalculateCRC16(const uint8_t* data, uint32_t length)
{
 804e52e:	b480      	push	{r7}
 804e530:	b087      	sub	sp, #28
 804e532:	af00      	add	r7, sp, #0
 804e534:	6078      	str	r0, [r7, #4]
 804e536:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000;  // X-Modem initial value
 804e538:	2300      	movs	r3, #0
 804e53a:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x1021;  // X-Modem polynomial
 804e53c:	f241 0321 	movw	r3, #4129	@ 0x1021
 804e540:	81bb      	strh	r3, [r7, #12]

    for (uint32_t i = 0; i < length; i++) {
 804e542:	2300      	movs	r3, #0
 804e544:	613b      	str	r3, [r7, #16]
 804e546:	e025      	b.n	804e594 <ScriptStorage_CalculateCRC16+0x66>
        crc ^= (uint16_t)(data[i] << 8);
 804e548:	687a      	ldr	r2, [r7, #4]
 804e54a:	693b      	ldr	r3, [r7, #16]
 804e54c:	4413      	add	r3, r2
 804e54e:	781b      	ldrb	r3, [r3, #0]
 804e550:	021b      	lsls	r3, r3, #8
 804e552:	b29a      	uxth	r2, r3
 804e554:	8afb      	ldrh	r3, [r7, #22]
 804e556:	4053      	eors	r3, r2
 804e558:	82fb      	strh	r3, [r7, #22]
        
        for (uint8_t bit = 0; bit < 8; bit++) {
 804e55a:	2300      	movs	r3, #0
 804e55c:	73fb      	strb	r3, [r7, #15]
 804e55e:	e013      	b.n	804e588 <ScriptStorage_CalculateCRC16+0x5a>
            if (crc & 0x8000) {
 804e560:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804e564:	2b00      	cmp	r3, #0
 804e566:	da09      	bge.n	804e57c <ScriptStorage_CalculateCRC16+0x4e>
                crc = (crc << 1) ^ polynomial;
 804e568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 804e56c:	005b      	lsls	r3, r3, #1
 804e56e:	b21a      	sxth	r2, r3
 804e570:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 804e574:	4053      	eors	r3, r2
 804e576:	b21b      	sxth	r3, r3
 804e578:	82fb      	strh	r3, [r7, #22]
 804e57a:	e002      	b.n	804e582 <ScriptStorage_CalculateCRC16+0x54>
            } else {
                crc <<= 1;
 804e57c:	8afb      	ldrh	r3, [r7, #22]
 804e57e:	005b      	lsls	r3, r3, #1
 804e580:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {
 804e582:	7bfb      	ldrb	r3, [r7, #15]
 804e584:	3301      	adds	r3, #1
 804e586:	73fb      	strb	r3, [r7, #15]
 804e588:	7bfb      	ldrb	r3, [r7, #15]
 804e58a:	2b07      	cmp	r3, #7
 804e58c:	d9e8      	bls.n	804e560 <ScriptStorage_CalculateCRC16+0x32>
    for (uint32_t i = 0; i < length; i++) {
 804e58e:	693b      	ldr	r3, [r7, #16]
 804e590:	3301      	adds	r3, #1
 804e592:	613b      	str	r3, [r7, #16]
 804e594:	693a      	ldr	r2, [r7, #16]
 804e596:	683b      	ldr	r3, [r7, #0]
 804e598:	429a      	cmp	r2, r3
 804e59a:	d3d5      	bcc.n	804e548 <ScriptStorage_CalculateCRC16+0x1a>
            }
        }
    }
    
    return crc;
 804e59c:	8afb      	ldrh	r3, [r7, #22]
}
 804e59e:	4618      	mov	r0, r3
 804e5a0:	371c      	adds	r7, #28
 804e5a2:	46bd      	mov	sp, r7
 804e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e5a8:	4770      	bx	lr

0804e5aa <ScriptStorage_GetFramAddress>:
 * @brief Get FRAM address for script type
 * @param type Script type
 * @return FRAM address or 0 if invalid
 */
static uint32_t ScriptStorage_GetFramAddress(ScriptType_t type)
{
 804e5aa:	b480      	push	{r7}
 804e5ac:	b083      	sub	sp, #12
 804e5ae:	af00      	add	r7, sp, #0
 804e5b0:	4603      	mov	r3, r0
 804e5b2:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 804e5b4:	79fb      	ldrb	r3, [r7, #7]
 804e5b6:	2b02      	cmp	r3, #2
 804e5b8:	d00c      	beq.n	804e5d4 <ScriptStorage_GetFramAddress+0x2a>
 804e5ba:	2b02      	cmp	r3, #2
 804e5bc:	dc0d      	bgt.n	804e5da <ScriptStorage_GetFramAddress+0x30>
 804e5be:	2b00      	cmp	r3, #0
 804e5c0:	d002      	beq.n	804e5c8 <ScriptStorage_GetFramAddress+0x1e>
 804e5c2:	2b01      	cmp	r3, #1
 804e5c4:	d003      	beq.n	804e5ce <ScriptStorage_GetFramAddress+0x24>
 804e5c6:	e008      	b.n	804e5da <ScriptStorage_GetFramAddress+0x30>
        case SCRIPT_TYPE_INIT:
            return FRAM_INIT_SCRIPT_ADDR;
 804e5c8:	f44f 3370 	mov.w	r3, #245760	@ 0x3c000
 804e5cc:	e006      	b.n	804e5dc <ScriptStorage_GetFramAddress+0x32>
        case SCRIPT_TYPE_DLS_ROUTINE:
            return FRAM_DLS_SCRIPT_ADDR;
 804e5ce:	f44f 3375 	mov.w	r3, #250880	@ 0x3d400
 804e5d2:	e003      	b.n	804e5dc <ScriptStorage_GetFramAddress+0x32>
        case SCRIPT_TYPE_CAM_ROUTINE:
            return FRAM_CAM_SCRIPT_ADDR;
 804e5d4:	f44f 337a 	mov.w	r3, #256000	@ 0x3e800
 804e5d8:	e000      	b.n	804e5dc <ScriptStorage_GetFramAddress+0x32>
        default:
            return 0;
 804e5da:	2300      	movs	r3, #0
    }
}
 804e5dc:	4618      	mov	r0, r3
 804e5de:	370c      	adds	r7, #12
 804e5e0:	46bd      	mov	sp, r7
 804e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e5e6:	4770      	bx	lr

0804e5e8 <ScriptStorage_GetMagicCode>:
 * @brief Get magic code for script type
 * @param type Script type
 * @return Magic code or 0 if invalid
 */
static uint16_t ScriptStorage_GetMagicCode(ScriptType_t type)
{
 804e5e8:	b480      	push	{r7}
 804e5ea:	b083      	sub	sp, #12
 804e5ec:	af00      	add	r7, sp, #0
 804e5ee:	4603      	mov	r3, r0
 804e5f0:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 804e5f2:	79fb      	ldrb	r3, [r7, #7]
 804e5f4:	2b02      	cmp	r3, #2
 804e5f6:	d00c      	beq.n	804e612 <ScriptStorage_GetMagicCode+0x2a>
 804e5f8:	2b02      	cmp	r3, #2
 804e5fa:	dc0d      	bgt.n	804e618 <ScriptStorage_GetMagicCode+0x30>
 804e5fc:	2b00      	cmp	r3, #0
 804e5fe:	d002      	beq.n	804e606 <ScriptStorage_GetMagicCode+0x1e>
 804e600:	2b01      	cmp	r3, #1
 804e602:	d003      	beq.n	804e60c <ScriptStorage_GetMagicCode+0x24>
 804e604:	e008      	b.n	804e618 <ScriptStorage_GetMagicCode+0x30>
        case SCRIPT_TYPE_INIT:
            return MAGIC_CODE_INIT;
 804e606:	f644 134e 	movw	r3, #18766	@ 0x494e
 804e60a:	e006      	b.n	804e61a <ScriptStorage_GetMagicCode+0x32>
        case SCRIPT_TYPE_DLS_ROUTINE:
            return MAGIC_CODE_DLS;
 804e60c:	f244 434c 	movw	r3, #17484	@ 0x444c
 804e610:	e003      	b.n	804e61a <ScriptStorage_GetMagicCode+0x32>
        case SCRIPT_TYPE_CAM_ROUTINE:
            return MAGIC_CODE_CAM;
 804e612:	f244 3341 	movw	r3, #17217	@ 0x4341
 804e616:	e000      	b.n	804e61a <ScriptStorage_GetMagicCode+0x32>
        default:
            return 0;
 804e618:	2300      	movs	r3, #0
    }
}
 804e61a:	4618      	mov	r0, r3
 804e61c:	370c      	adds	r7, #12
 804e61e:	46bd      	mov	sp, r7
 804e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e624:	4770      	bx	lr
	...

0804e628 <ScriptStorage_GetTypeName>:
 * @brief Get script type name for logging
 * @param type Script type
 * @return Script type name
 */
static const char* ScriptStorage_GetTypeName(ScriptType_t type)
{
 804e628:	b480      	push	{r7}
 804e62a:	b083      	sub	sp, #12
 804e62c:	af00      	add	r7, sp, #0
 804e62e:	4603      	mov	r3, r0
 804e630:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 804e632:	79fb      	ldrb	r3, [r7, #7]
 804e634:	2b02      	cmp	r3, #2
 804e636:	d00a      	beq.n	804e64e <ScriptStorage_GetTypeName+0x26>
 804e638:	2b02      	cmp	r3, #2
 804e63a:	dc0a      	bgt.n	804e652 <ScriptStorage_GetTypeName+0x2a>
 804e63c:	2b00      	cmp	r3, #0
 804e63e:	d002      	beq.n	804e646 <ScriptStorage_GetTypeName+0x1e>
 804e640:	2b01      	cmp	r3, #1
 804e642:	d002      	beq.n	804e64a <ScriptStorage_GetTypeName+0x22>
 804e644:	e005      	b.n	804e652 <ScriptStorage_GetTypeName+0x2a>
        case SCRIPT_TYPE_INIT:
            return "INIT";
 804e646:	4b06      	ldr	r3, [pc, #24]	@ (804e660 <ScriptStorage_GetTypeName+0x38>)
 804e648:	e004      	b.n	804e654 <ScriptStorage_GetTypeName+0x2c>
        case SCRIPT_TYPE_DLS_ROUTINE:
            return "DLS";
 804e64a:	4b06      	ldr	r3, [pc, #24]	@ (804e664 <ScriptStorage_GetTypeName+0x3c>)
 804e64c:	e002      	b.n	804e654 <ScriptStorage_GetTypeName+0x2c>
        case SCRIPT_TYPE_CAM_ROUTINE:
            return "CAM";
 804e64e:	4b06      	ldr	r3, [pc, #24]	@ (804e668 <ScriptStorage_GetTypeName+0x40>)
 804e650:	e000      	b.n	804e654 <ScriptStorage_GetTypeName+0x2c>
        default:
            return "UNKNOWN";
 804e652:	4b06      	ldr	r3, [pc, #24]	@ (804e66c <ScriptStorage_GetTypeName+0x44>)
    }
}
 804e654:	4618      	mov	r0, r3
 804e656:	370c      	adds	r7, #12
 804e658:	46bd      	mov	sp, r7
 804e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e65e:	4770      	bx	lr
 804e660:	0806fdf0 	.word	0x0806fdf0
 804e664:	0806fdf8 	.word	0x0806fdf8
 804e668:	0806fdfc 	.word	0x0806fdfc
 804e66c:	0806fe00 	.word	0x0806fe00

0804e670 <ScriptStorage_Init>:
/**
 * @brief Initialize script storage manager
 * @return true if successful, false otherwise
 */
_Bool ScriptStorage_Init(void)
{
 804e670:	b580      	push	{r7, lr}
 804e672:	af00      	add	r7, sp, #0
    memset(&g_storage_manager, 0, sizeof(ScriptStorageManager_t));
 804e674:	2210      	movs	r2, #16
 804e676:	2100      	movs	r1, #0
 804e678:	481f      	ldr	r0, [pc, #124]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e67a:	f01b f8b3 	bl	80697e4 <memset>
    
    // Get FRAM handle
    g_storage_manager.fram_handle = FRAM_SPI_GetHandle();
 804e67e:	f7fd ff09 	bl	804c494 <FRAM_SPI_GetHandle>
 804e682:	4603      	mov	r3, r0
 804e684:	4a1c      	ldr	r2, [pc, #112]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e686:	6053      	str	r3, [r2, #4]
    if (!g_storage_manager.fram_handle) {
 804e688:	4b1b      	ldr	r3, [pc, #108]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e68a:	685b      	ldr	r3, [r3, #4]
 804e68c:	2b00      	cmp	r3, #0
 804e68e:	d104      	bne.n	804e69a <ScriptStorage_Init+0x2a>
        BScript_Log("[ScriptStorage] Error: Failed to get FRAM handle");
 804e690:	481a      	ldr	r0, [pc, #104]	@ (804e6fc <ScriptStorage_Init+0x8c>)
 804e692:	f7ff fc7b 	bl	804df8c <BScript_Log>
        return false;
 804e696:	2300      	movs	r3, #0
 804e698:	e02c      	b.n	804e6f4 <ScriptStorage_Init+0x84>
    }
    
    g_storage_manager.is_initialized = true;
 804e69a:	4b17      	ldr	r3, [pc, #92]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e69c:	2201      	movs	r2, #1
 804e69e:	701a      	strb	r2, [r3, #0]
    g_storage_manager.auto_load_enabled = true;
 804e6a0:	4b15      	ldr	r3, [pc, #84]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e6a2:	2201      	movs	r2, #1
 804e6a4:	721a      	strb	r2, [r3, #8]
    g_storage_manager.auto_load_delay_sec = AUTO_LOAD_DELAY_SEC;
 804e6a6:	4b14      	ldr	r3, [pc, #80]	@ (804e6f8 <ScriptStorage_Init+0x88>)
 804e6a8:	2200      	movs	r2, #0
 804e6aa:	60da      	str	r2, [r3, #12]
    
    BScript_Log("[ScriptStorage] Initialized successfully");
 804e6ac:	4814      	ldr	r0, [pc, #80]	@ (804e700 <ScriptStorage_Init+0x90>)
 804e6ae:	f7ff fc6d 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] FRAM script storage:");
 804e6b2:	4814      	ldr	r0, [pc, #80]	@ (804e704 <ScriptStorage_Init+0x94>)
 804e6b4:	f7ff fc6a 	bl	804df8c <BScript_Log>
    BScript_Log("  - Base address: 0x%06X", FRAM_SCRIPT_BASE_ADDR);
 804e6b8:	f44f 3170 	mov.w	r1, #245760	@ 0x3c000
 804e6bc:	4812      	ldr	r0, [pc, #72]	@ (804e708 <ScriptStorage_Init+0x98>)
 804e6be:	f7ff fc65 	bl	804df8c <BScript_Log>
    BScript_Log("  - INIT slot: 0x%06X - 0x%06X (%d bytes)", 
 804e6c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 804e6c6:	4a11      	ldr	r2, [pc, #68]	@ (804e70c <ScriptStorage_Init+0x9c>)
 804e6c8:	f44f 3170 	mov.w	r1, #245760	@ 0x3c000
 804e6cc:	4810      	ldr	r0, [pc, #64]	@ (804e710 <ScriptStorage_Init+0xa0>)
 804e6ce:	f7ff fc5d 	bl	804df8c <BScript_Log>
               FRAM_INIT_SCRIPT_ADDR, FRAM_INIT_SCRIPT_ADDR + SCRIPT_SLOT_SIZE - 1, SCRIPT_SLOT_SIZE);
    BScript_Log("  - DLS slot:  0x%06X - 0x%06X (%d bytes)", 
 804e6d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 804e6d6:	4a0f      	ldr	r2, [pc, #60]	@ (804e714 <ScriptStorage_Init+0xa4>)
 804e6d8:	f44f 3175 	mov.w	r1, #250880	@ 0x3d400
 804e6dc:	480e      	ldr	r0, [pc, #56]	@ (804e718 <ScriptStorage_Init+0xa8>)
 804e6de:	f7ff fc55 	bl	804df8c <BScript_Log>
               FRAM_DLS_SCRIPT_ADDR, FRAM_DLS_SCRIPT_ADDR + SCRIPT_SLOT_SIZE - 1, SCRIPT_SLOT_SIZE);
    BScript_Log("  - CAM slot:  0x%06X - 0x%06X (%d bytes)", 
 804e6e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 804e6e6:	4a0d      	ldr	r2, [pc, #52]	@ (804e71c <ScriptStorage_Init+0xac>)
 804e6e8:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 804e6ec:	480c      	ldr	r0, [pc, #48]	@ (804e720 <ScriptStorage_Init+0xb0>)
 804e6ee:	f7ff fc4d 	bl	804df8c <BScript_Log>
               FRAM_CAM_SCRIPT_ADDR, FRAM_CAM_SCRIPT_ADDR + SCRIPT_SLOT_SIZE - 1, SCRIPT_SLOT_SIZE);
    
    return true;
 804e6f2:	2301      	movs	r3, #1
}
 804e6f4:	4618      	mov	r0, r3
 804e6f6:	bd80      	pop	{r7, pc}
 804e6f8:	2402d734 	.word	0x2402d734
 804e6fc:	0806fe08 	.word	0x0806fe08
 804e700:	0806fe3c 	.word	0x0806fe3c
 804e704:	0806fe68 	.word	0x0806fe68
 804e708:	0806fe90 	.word	0x0806fe90
 804e70c:	0003d3ff 	.word	0x0003d3ff
 804e710:	0806feac 	.word	0x0806feac
 804e714:	0003e7ff 	.word	0x0003e7ff
 804e718:	0806fed8 	.word	0x0806fed8
 804e71c:	0003fbff 	.word	0x0003fbff
 804e720:	0806ff04 	.word	0x0806ff04

0804e724 <ScriptStorage_SaveScript>:
 * @param binary_data Binary script data
 * @param size Data size
 * @return Storage result
 */
ScriptStorageResult_t ScriptStorage_SaveScript(ScriptType_t type, const uint8_t* binary_data, uint32_t size)
{
 804e724:	b580      	push	{r7, lr}
 804e726:	b08c      	sub	sp, #48	@ 0x30
 804e728:	af00      	add	r7, sp, #0
 804e72a:	4603      	mov	r3, r0
 804e72c:	60b9      	str	r1, [r7, #8]
 804e72e:	607a      	str	r2, [r7, #4]
 804e730:	73fb      	strb	r3, [r7, #15]
    if (!g_storage_manager.is_initialized) {
 804e732:	4b6a      	ldr	r3, [pc, #424]	@ (804e8dc <ScriptStorage_SaveScript+0x1b8>)
 804e734:	781b      	ldrb	r3, [r3, #0]
 804e736:	f083 0301 	eor.w	r3, r3, #1
 804e73a:	b2db      	uxtb	r3, r3
 804e73c:	2b00      	cmp	r3, #0
 804e73e:	d004      	beq.n	804e74a <ScriptStorage_SaveScript+0x26>
        BScript_Log("[ScriptStorage] Error: Storage not initialized");
 804e740:	4867      	ldr	r0, [pc, #412]	@ (804e8e0 <ScriptStorage_SaveScript+0x1bc>)
 804e742:	f7ff fc23 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_NOT_INITIALIZED;
 804e746:	2301      	movs	r3, #1
 804e748:	e0c4      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    if (type >= SCRIPT_TYPE_COUNT || !binary_data) {
 804e74a:	7bfb      	ldrb	r3, [r7, #15]
 804e74c:	2b02      	cmp	r3, #2
 804e74e:	d802      	bhi.n	804e756 <ScriptStorage_SaveScript+0x32>
 804e750:	68bb      	ldr	r3, [r7, #8]
 804e752:	2b00      	cmp	r3, #0
 804e754:	d104      	bne.n	804e760 <ScriptStorage_SaveScript+0x3c>
        BScript_Log("[ScriptStorage] Error: Invalid parameters");
 804e756:	4863      	ldr	r0, [pc, #396]	@ (804e8e4 <ScriptStorage_SaveScript+0x1c0>)
 804e758:	f7ff fc18 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_INVALID_PARAMS;
 804e75c:	2302      	movs	r3, #2
 804e75e:	e0b9      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    if (size < MIN_SCRIPT_SIZE || size > MAX_SCRIPT_DATA_SIZE) {
 804e760:	687b      	ldr	r3, [r7, #4]
 804e762:	2b09      	cmp	r3, #9
 804e764:	d904      	bls.n	804e770 <ScriptStorage_SaveScript+0x4c>
 804e766:	687b      	ldr	r3, [r7, #4]
 804e768:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 804e76c:	4293      	cmp	r3, r2
 804e76e:	d908      	bls.n	804e782 <ScriptStorage_SaveScript+0x5e>
        BScript_Log("[ScriptStorage] Error: Invalid script size %u (must be %d-%d bytes)", 
 804e770:	f241 33f8 	movw	r3, #5112	@ 0x13f8
 804e774:	220a      	movs	r2, #10
 804e776:	6879      	ldr	r1, [r7, #4]
 804e778:	485b      	ldr	r0, [pc, #364]	@ (804e8e8 <ScriptStorage_SaveScript+0x1c4>)
 804e77a:	f7ff fc07 	bl	804df8c <BScript_Log>
                   size, MIN_SCRIPT_SIZE, MAX_SCRIPT_DATA_SIZE);
        return STORAGE_ERROR_INVALID_SIZE;
 804e77e:	2303      	movs	r3, #3
 804e780:	e0a8      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    uint32_t fram_addr = ScriptStorage_GetFramAddress(type);
 804e782:	7bfb      	ldrb	r3, [r7, #15]
 804e784:	4618      	mov	r0, r3
 804e786:	f7ff ff10 	bl	804e5aa <ScriptStorage_GetFramAddress>
 804e78a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint16_t magic_code = ScriptStorage_GetMagicCode(type);
 804e78c:	7bfb      	ldrb	r3, [r7, #15]
 804e78e:	4618      	mov	r0, r3
 804e790:	f7ff ff2a 	bl	804e5e8 <ScriptStorage_GetMagicCode>
 804e794:	4603      	mov	r3, r0
 804e796:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char* type_name = ScriptStorage_GetTypeName(type);
 804e798:	7bfb      	ldrb	r3, [r7, #15]
 804e79a:	4618      	mov	r0, r3
 804e79c:	f7ff ff44 	bl	804e628 <ScriptStorage_GetTypeName>
 804e7a0:	6278      	str	r0, [r7, #36]	@ 0x24
    
    BScript_Log("[ScriptStorage] Saving %s script to FRAM (size: %u bytes)", type_name, size);
 804e7a2:	687a      	ldr	r2, [r7, #4]
 804e7a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804e7a6:	4851      	ldr	r0, [pc, #324]	@ (804e8ec <ScriptStorage_SaveScript+0x1c8>)
 804e7a8:	f7ff fbf0 	bl	804df8c <BScript_Log>
    
    // Prepare header: [Magic Code][Length][Data][CRC16]
    uint8_t header[HEADER_SIZE];
    header[0] = (magic_code >> 8) & 0xFF;  // Magic code high byte
 804e7ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 804e7ae:	0a1b      	lsrs	r3, r3, #8
 804e7b0:	b29b      	uxth	r3, r3
 804e7b2:	b2db      	uxtb	r3, r3
 804e7b4:	763b      	strb	r3, [r7, #24]
    header[1] = magic_code & 0xFF;         // Magic code low byte
 804e7b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 804e7b8:	b2db      	uxtb	r3, r3
 804e7ba:	767b      	strb	r3, [r7, #25]
    header[2] = (size >> 24) & 0xFF;       // Length byte 3 (MSB)
 804e7bc:	687b      	ldr	r3, [r7, #4]
 804e7be:	0e1b      	lsrs	r3, r3, #24
 804e7c0:	b2db      	uxtb	r3, r3
 804e7c2:	76bb      	strb	r3, [r7, #26]
    header[3] = (size >> 16) & 0xFF;       // Length byte 2
 804e7c4:	687b      	ldr	r3, [r7, #4]
 804e7c6:	0c1b      	lsrs	r3, r3, #16
 804e7c8:	b2db      	uxtb	r3, r3
 804e7ca:	76fb      	strb	r3, [r7, #27]
    header[4] = (size >> 8) & 0xFF;        // Length byte 1
 804e7cc:	687b      	ldr	r3, [r7, #4]
 804e7ce:	0a1b      	lsrs	r3, r3, #8
 804e7d0:	b2db      	uxtb	r3, r3
 804e7d2:	773b      	strb	r3, [r7, #28]
    header[5] = size & 0xFF;               // Length byte 0 (LSB)
 804e7d4:	687b      	ldr	r3, [r7, #4]
 804e7d6:	b2db      	uxtb	r3, r3
 804e7d8:	777b      	strb	r3, [r7, #29]
    
    // Calculate CRC for header + data
    uint16_t crc = ScriptStorage_CalculateCRC16(header, HEADER_SIZE);
 804e7da:	f107 0318 	add.w	r3, r7, #24
 804e7de:	2106      	movs	r1, #6
 804e7e0:	4618      	mov	r0, r3
 804e7e2:	f7ff fea4 	bl	804e52e <ScriptStorage_CalculateCRC16>
 804e7e6:	4603      	mov	r3, r0
 804e7e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    crc = ScriptStorage_CalculateCRC16(binary_data, size) ^ crc;  // XOR with data CRC
 804e7ea:	6879      	ldr	r1, [r7, #4]
 804e7ec:	68b8      	ldr	r0, [r7, #8]
 804e7ee:	f7ff fe9e 	bl	804e52e <ScriptStorage_CalculateCRC16>
 804e7f2:	4603      	mov	r3, r0
 804e7f4:	461a      	mov	r2, r3
 804e7f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e7f8:	4053      	eors	r3, r2
 804e7fa:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    uint8_t crc_bytes[CRC_SIZE];
    crc_bytes[0] = (crc >> 8) & 0xFF;  // CRC high byte
 804e7fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e7fe:	0a1b      	lsrs	r3, r3, #8
 804e800:	b29b      	uxth	r3, r3
 804e802:	b2db      	uxtb	r3, r3
 804e804:	753b      	strb	r3, [r7, #20]
    crc_bytes[1] = crc & 0xFF;         // CRC low byte
 804e806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e808:	b2db      	uxtb	r3, r3
 804e80a:	757b      	strb	r3, [r7, #21]
    
    BScript_Log("[ScriptStorage] %s script details:", type_name);
 804e80c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804e80e:	4838      	ldr	r0, [pc, #224]	@ (804e8f0 <ScriptStorage_SaveScript+0x1cc>)
 804e810:	f7ff fbbc 	bl	804df8c <BScript_Log>
    BScript_Log("  - FRAM address: 0x%06X", fram_addr);
 804e814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804e816:	4837      	ldr	r0, [pc, #220]	@ (804e8f4 <ScriptStorage_SaveScript+0x1d0>)
 804e818:	f7ff fbb8 	bl	804df8c <BScript_Log>
    BScript_Log("  - Magic code: 0x%04X", magic_code);
 804e81c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 804e81e:	4619      	mov	r1, r3
 804e820:	4835      	ldr	r0, [pc, #212]	@ (804e8f8 <ScriptStorage_SaveScript+0x1d4>)
 804e822:	f7ff fbb3 	bl	804df8c <BScript_Log>
    BScript_Log("  - Data size: %u bytes", size);
 804e826:	6879      	ldr	r1, [r7, #4]
 804e828:	4834      	ldr	r0, [pc, #208]	@ (804e8fc <ScriptStorage_SaveScript+0x1d8>)
 804e82a:	f7ff fbaf 	bl	804df8c <BScript_Log>
    BScript_Log("  - CRC16: 0x%04X", crc);
 804e82e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804e830:	4619      	mov	r1, r3
 804e832:	4833      	ldr	r0, [pc, #204]	@ (804e900 <ScriptStorage_SaveScript+0x1dc>)
 804e834:	f7ff fbaa 	bl	804df8c <BScript_Log>
    
    // Write to FRAM: Header
    Std_ReturnType status = FRAM_SPI_WriteMem(g_storage_manager.fram_handle, fram_addr, header, HEADER_SIZE);
 804e838:	4b28      	ldr	r3, [pc, #160]	@ (804e8dc <ScriptStorage_SaveScript+0x1b8>)
 804e83a:	6858      	ldr	r0, [r3, #4]
 804e83c:	f107 0218 	add.w	r2, r7, #24
 804e840:	2306      	movs	r3, #6
 804e842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804e844:	f7fd fe8e 	bl	804c564 <FRAM_SPI_WriteMem>
 804e848:	4603      	mov	r3, r0
 804e84a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if (status != E_OK) {
 804e84e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e852:	2b00      	cmp	r3, #0
 804e854:	d007      	beq.n	804e866 <ScriptStorage_SaveScript+0x142>
        BScript_Log("[ScriptStorage] Error: Failed to write header to FRAM (status: %d)", status);
 804e856:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e85a:	4619      	mov	r1, r3
 804e85c:	4829      	ldr	r0, [pc, #164]	@ (804e904 <ScriptStorage_SaveScript+0x1e0>)
 804e85e:	f7ff fb95 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_WRITE;
 804e862:	2307      	movs	r3, #7
 804e864:	e036      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    // Write to FRAM: Data
    status = FRAM_SPI_WriteMem(g_storage_manager.fram_handle, fram_addr + HEADER_DATA_OFFSET, 
 804e866:	4b1d      	ldr	r3, [pc, #116]	@ (804e8dc <ScriptStorage_SaveScript+0x1b8>)
 804e868:	6858      	ldr	r0, [r3, #4]
 804e86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804e86c:	1d99      	adds	r1, r3, #6
 804e86e:	687b      	ldr	r3, [r7, #4]
 804e870:	b29b      	uxth	r3, r3
 804e872:	68ba      	ldr	r2, [r7, #8]
 804e874:	f7fd fe76 	bl	804c564 <FRAM_SPI_WriteMem>
 804e878:	4603      	mov	r3, r0
 804e87a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                               (uint8_t*)binary_data, size);
    if (status != E_OK) {
 804e87e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e882:	2b00      	cmp	r3, #0
 804e884:	d007      	beq.n	804e896 <ScriptStorage_SaveScript+0x172>
        BScript_Log("[ScriptStorage] Error: Failed to write data to FRAM (status: %d)", status);
 804e886:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e88a:	4619      	mov	r1, r3
 804e88c:	481e      	ldr	r0, [pc, #120]	@ (804e908 <ScriptStorage_SaveScript+0x1e4>)
 804e88e:	f7ff fb7d 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_WRITE;
 804e892:	2307      	movs	r3, #7
 804e894:	e01e      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    // Write to FRAM: CRC
    status = FRAM_SPI_WriteMem(g_storage_manager.fram_handle, fram_addr + HEADER_DATA_OFFSET + size, 
 804e896:	4b11      	ldr	r3, [pc, #68]	@ (804e8dc <ScriptStorage_SaveScript+0x1b8>)
 804e898:	6858      	ldr	r0, [r3, #4]
 804e89a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804e89c:	687b      	ldr	r3, [r7, #4]
 804e89e:	4413      	add	r3, r2
 804e8a0:	1d99      	adds	r1, r3, #6
 804e8a2:	f107 0214 	add.w	r2, r7, #20
 804e8a6:	2302      	movs	r3, #2
 804e8a8:	f7fd fe5c 	bl	804c564 <FRAM_SPI_WriteMem>
 804e8ac:	4603      	mov	r3, r0
 804e8ae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                               crc_bytes, CRC_SIZE);
    if (status != E_OK) {
 804e8b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e8b6:	2b00      	cmp	r3, #0
 804e8b8:	d007      	beq.n	804e8ca <ScriptStorage_SaveScript+0x1a6>
        BScript_Log("[ScriptStorage] Error: Failed to write CRC to FRAM (status: %d)", status);
 804e8ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 804e8be:	4619      	mov	r1, r3
 804e8c0:	4812      	ldr	r0, [pc, #72]	@ (804e90c <ScriptStorage_SaveScript+0x1e8>)
 804e8c2:	f7ff fb63 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_WRITE;
 804e8c6:	2307      	movs	r3, #7
 804e8c8:	e004      	b.n	804e8d4 <ScriptStorage_SaveScript+0x1b0>
    }
    
    BScript_Log("[ScriptStorage] %s script saved successfully to FRAM", type_name);
 804e8ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804e8cc:	4810      	ldr	r0, [pc, #64]	@ (804e910 <ScriptStorage_SaveScript+0x1ec>)
 804e8ce:	f7ff fb5d 	bl	804df8c <BScript_Log>
    return STORAGE_SUCCESS;
 804e8d2:	2300      	movs	r3, #0
}
 804e8d4:	4618      	mov	r0, r3
 804e8d6:	3730      	adds	r7, #48	@ 0x30
 804e8d8:	46bd      	mov	sp, r7
 804e8da:	bd80      	pop	{r7, pc}
 804e8dc:	2402d734 	.word	0x2402d734
 804e8e0:	0806ff30 	.word	0x0806ff30
 804e8e4:	0806ff60 	.word	0x0806ff60
 804e8e8:	0806ff8c 	.word	0x0806ff8c
 804e8ec:	0806ffd0 	.word	0x0806ffd0
 804e8f0:	0807000c 	.word	0x0807000c
 804e8f4:	08070030 	.word	0x08070030
 804e8f8:	0807004c 	.word	0x0807004c
 804e8fc:	08070064 	.word	0x08070064
 804e900:	0807007c 	.word	0x0807007c
 804e904:	08070090 	.word	0x08070090
 804e908:	080700d4 	.word	0x080700d4
 804e90c:	08070118 	.word	0x08070118
 804e910:	08070158 	.word	0x08070158

0804e914 <ScriptStorage_LoadScript>:
 * @param actual_size Actual loaded size
 * @return Storage result
 */
ScriptStorageResult_t ScriptStorage_LoadScript(ScriptType_t type, uint8_t* binary_data, 
                                             uint32_t max_size, uint32_t* actual_size)
{
 804e914:	b580      	push	{r7, lr}
 804e916:	b090      	sub	sp, #64	@ 0x40
 804e918:	af02      	add	r7, sp, #8
 804e91a:	60b9      	str	r1, [r7, #8]
 804e91c:	607a      	str	r2, [r7, #4]
 804e91e:	603b      	str	r3, [r7, #0]
 804e920:	4603      	mov	r3, r0
 804e922:	73fb      	strb	r3, [r7, #15]
    if (!g_storage_manager.is_initialized) {
 804e924:	4b7f      	ldr	r3, [pc, #508]	@ (804eb24 <ScriptStorage_LoadScript+0x210>)
 804e926:	781b      	ldrb	r3, [r3, #0]
 804e928:	f083 0301 	eor.w	r3, r3, #1
 804e92c:	b2db      	uxtb	r3, r3
 804e92e:	2b00      	cmp	r3, #0
 804e930:	d004      	beq.n	804e93c <ScriptStorage_LoadScript+0x28>
        BScript_Log("[ScriptStorage] Error: Storage not initialized");
 804e932:	487d      	ldr	r0, [pc, #500]	@ (804eb28 <ScriptStorage_LoadScript+0x214>)
 804e934:	f7ff fb2a 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_NOT_INITIALIZED;
 804e938:	2301      	movs	r3, #1
 804e93a:	e0ee      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    if (type >= SCRIPT_TYPE_COUNT || !binary_data || !actual_size) {
 804e93c:	7bfb      	ldrb	r3, [r7, #15]
 804e93e:	2b02      	cmp	r3, #2
 804e940:	d805      	bhi.n	804e94e <ScriptStorage_LoadScript+0x3a>
 804e942:	68bb      	ldr	r3, [r7, #8]
 804e944:	2b00      	cmp	r3, #0
 804e946:	d002      	beq.n	804e94e <ScriptStorage_LoadScript+0x3a>
 804e948:	683b      	ldr	r3, [r7, #0]
 804e94a:	2b00      	cmp	r3, #0
 804e94c:	d104      	bne.n	804e958 <ScriptStorage_LoadScript+0x44>
        BScript_Log("[ScriptStorage] Error: Invalid parameters");
 804e94e:	4877      	ldr	r0, [pc, #476]	@ (804eb2c <ScriptStorage_LoadScript+0x218>)
 804e950:	f7ff fb1c 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_INVALID_PARAMS;
 804e954:	2302      	movs	r3, #2
 804e956:	e0e0      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    uint32_t fram_addr = ScriptStorage_GetFramAddress(type);
 804e958:	7bfb      	ldrb	r3, [r7, #15]
 804e95a:	4618      	mov	r0, r3
 804e95c:	f7ff fe25 	bl	804e5aa <ScriptStorage_GetFramAddress>
 804e960:	6378      	str	r0, [r7, #52]	@ 0x34
    uint16_t expected_magic = ScriptStorage_GetMagicCode(type);
 804e962:	7bfb      	ldrb	r3, [r7, #15]
 804e964:	4618      	mov	r0, r3
 804e966:	f7ff fe3f 	bl	804e5e8 <ScriptStorage_GetMagicCode>
 804e96a:	4603      	mov	r3, r0
 804e96c:	867b      	strh	r3, [r7, #50]	@ 0x32
    const char* type_name = ScriptStorage_GetTypeName(type);
 804e96e:	7bfb      	ldrb	r3, [r7, #15]
 804e970:	4618      	mov	r0, r3
 804e972:	f7ff fe59 	bl	804e628 <ScriptStorage_GetTypeName>
 804e976:	62f8      	str	r0, [r7, #44]	@ 0x2c
    
    BScript_Log("[ScriptStorage] Loading %s script from FRAM (address: 0x%06X)", type_name, fram_addr);
 804e978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 804e97a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804e97c:	486c      	ldr	r0, [pc, #432]	@ (804eb30 <ScriptStorage_LoadScript+0x21c>)
 804e97e:	f7ff fb05 	bl	804df8c <BScript_Log>
    
    // Read header
    uint8_t header[HEADER_SIZE];
    Std_ReturnType status = FRAM_SPI_ReadMem(g_storage_manager.fram_handle, fram_addr, header, HEADER_SIZE);
 804e982:	4b68      	ldr	r3, [pc, #416]	@ (804eb24 <ScriptStorage_LoadScript+0x210>)
 804e984:	6858      	ldr	r0, [r3, #4]
 804e986:	f107 0218 	add.w	r2, r7, #24
 804e98a:	2306      	movs	r3, #6
 804e98c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 804e98e:	f7fd fe78 	bl	804c682 <FRAM_SPI_ReadMem>
 804e992:	4603      	mov	r3, r0
 804e994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (status != E_OK) {
 804e998:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804e99c:	2b00      	cmp	r3, #0
 804e99e:	d007      	beq.n	804e9b0 <ScriptStorage_LoadScript+0x9c>
        BScript_Log("[ScriptStorage] Error: Failed to read header from FRAM (status: %d)", status);
 804e9a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804e9a4:	4619      	mov	r1, r3
 804e9a6:	4863      	ldr	r0, [pc, #396]	@ (804eb34 <ScriptStorage_LoadScript+0x220>)
 804e9a8:	f7ff faf0 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_READ;
 804e9ac:	2306      	movs	r3, #6
 804e9ae:	e0b4      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    // Validate magic code
    uint16_t stored_magic = (header[0] << 8) | header[1];
 804e9b0:	7e3b      	ldrb	r3, [r7, #24]
 804e9b2:	b21b      	sxth	r3, r3
 804e9b4:	021b      	lsls	r3, r3, #8
 804e9b6:	b21a      	sxth	r2, r3
 804e9b8:	7e7b      	ldrb	r3, [r7, #25]
 804e9ba:	b21b      	sxth	r3, r3
 804e9bc:	4313      	orrs	r3, r2
 804e9be:	b21b      	sxth	r3, r3
 804e9c0:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (stored_magic != expected_magic) {
 804e9c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 804e9c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 804e9c6:	429a      	cmp	r2, r3
 804e9c8:	d007      	beq.n	804e9da <ScriptStorage_LoadScript+0xc6>
        BScript_Log("[ScriptStorage] %s script: Invalid magic code 0x%04X (expected 0x%04X)", 
 804e9ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 804e9cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 804e9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804e9d0:	4859      	ldr	r0, [pc, #356]	@ (804eb38 <ScriptStorage_LoadScript+0x224>)
 804e9d2:	f7ff fadb 	bl	804df8c <BScript_Log>
                   type_name, stored_magic, expected_magic);
        return STORAGE_ERROR_INVALID_MAGIC;
 804e9d6:	2304      	movs	r3, #4
 804e9d8:	e09f      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    // Extract data size
    uint32_t data_size = (header[2] << 24) | (header[3] << 16) | (header[4] << 8) | header[5];
 804e9da:	7ebb      	ldrb	r3, [r7, #26]
 804e9dc:	061a      	lsls	r2, r3, #24
 804e9de:	7efb      	ldrb	r3, [r7, #27]
 804e9e0:	041b      	lsls	r3, r3, #16
 804e9e2:	431a      	orrs	r2, r3
 804e9e4:	7f3b      	ldrb	r3, [r7, #28]
 804e9e6:	021b      	lsls	r3, r3, #8
 804e9e8:	4313      	orrs	r3, r2
 804e9ea:	7f7a      	ldrb	r2, [r7, #29]
 804e9ec:	4313      	orrs	r3, r2
 804e9ee:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Validate data size
    if (data_size < MIN_SCRIPT_SIZE || data_size > MAX_SCRIPT_DATA_SIZE) {
 804e9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e9f2:	2b09      	cmp	r3, #9
 804e9f4:	d904      	bls.n	804ea00 <ScriptStorage_LoadScript+0xec>
 804e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804e9f8:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 804e9fc:	4293      	cmp	r3, r2
 804e9fe:	d90a      	bls.n	804ea16 <ScriptStorage_LoadScript+0x102>
        BScript_Log("[ScriptStorage] %s script: Invalid data size %u (must be %d-%d)", 
 804ea00:	f241 33f8 	movw	r3, #5112	@ 0x13f8
 804ea04:	9300      	str	r3, [sp, #0]
 804ea06:	230a      	movs	r3, #10
 804ea08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804ea0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804ea0c:	484b      	ldr	r0, [pc, #300]	@ (804eb3c <ScriptStorage_LoadScript+0x228>)
 804ea0e:	f7ff fabd 	bl	804df8c <BScript_Log>
                   type_name, data_size, MIN_SCRIPT_SIZE, MAX_SCRIPT_DATA_SIZE);
        return STORAGE_ERROR_INVALID_SIZE;
 804ea12:	2303      	movs	r3, #3
 804ea14:	e081      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    if (data_size > max_size) {
 804ea16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804ea18:	687b      	ldr	r3, [r7, #4]
 804ea1a:	429a      	cmp	r2, r3
 804ea1c:	d907      	bls.n	804ea2e <ScriptStorage_LoadScript+0x11a>
        BScript_Log("[ScriptStorage] %s script: Data size %u exceeds buffer size %u", 
 804ea1e:	687b      	ldr	r3, [r7, #4]
 804ea20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804ea22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804ea24:	4846      	ldr	r0, [pc, #280]	@ (804eb40 <ScriptStorage_LoadScript+0x22c>)
 804ea26:	f7ff fab1 	bl	804df8c <BScript_Log>
                   type_name, data_size, max_size);
        return STORAGE_ERROR_BUFFER_TOO_SMALL;
 804ea2a:	2308      	movs	r3, #8
 804ea2c:	e075      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    BScript_Log("[ScriptStorage] %s script header valid:", type_name);
 804ea2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804ea30:	4844      	ldr	r0, [pc, #272]	@ (804eb44 <ScriptStorage_LoadScript+0x230>)
 804ea32:	f7ff faab 	bl	804df8c <BScript_Log>
    BScript_Log("  - Magic code: 0x%04X", stored_magic);
 804ea36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 804ea38:	4619      	mov	r1, r3
 804ea3a:	4843      	ldr	r0, [pc, #268]	@ (804eb48 <ScriptStorage_LoadScript+0x234>)
 804ea3c:	f7ff faa6 	bl	804df8c <BScript_Log>
    BScript_Log("  - Data size: %u bytes", data_size);
 804ea40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804ea42:	4842      	ldr	r0, [pc, #264]	@ (804eb4c <ScriptStorage_LoadScript+0x238>)
 804ea44:	f7ff faa2 	bl	804df8c <BScript_Log>
    
    // Read script data
    status = FRAM_SPI_ReadMem(g_storage_manager.fram_handle, fram_addr + HEADER_DATA_OFFSET, 
 804ea48:	4b36      	ldr	r3, [pc, #216]	@ (804eb24 <ScriptStorage_LoadScript+0x210>)
 804ea4a:	6858      	ldr	r0, [r3, #4]
 804ea4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804ea4e:	1d99      	adds	r1, r3, #6
 804ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804ea52:	b29b      	uxth	r3, r3
 804ea54:	68ba      	ldr	r2, [r7, #8]
 804ea56:	f7fd fe14 	bl	804c682 <FRAM_SPI_ReadMem>
 804ea5a:	4603      	mov	r3, r0
 804ea5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                              binary_data, data_size);
    if (status != E_OK) {
 804ea60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804ea64:	2b00      	cmp	r3, #0
 804ea66:	d007      	beq.n	804ea78 <ScriptStorage_LoadScript+0x164>
        BScript_Log("[ScriptStorage] Error: Failed to read script data from FRAM (status: %d)", status);
 804ea68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804ea6c:	4619      	mov	r1, r3
 804ea6e:	4838      	ldr	r0, [pc, #224]	@ (804eb50 <ScriptStorage_LoadScript+0x23c>)
 804ea70:	f7ff fa8c 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_READ;
 804ea74:	2306      	movs	r3, #6
 804ea76:	e050      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    // Read stored CRC
    uint8_t crc_bytes[CRC_SIZE];
    status = FRAM_SPI_ReadMem(g_storage_manager.fram_handle, fram_addr + HEADER_DATA_OFFSET + data_size, 
 804ea78:	4b2a      	ldr	r3, [pc, #168]	@ (804eb24 <ScriptStorage_LoadScript+0x210>)
 804ea7a:	6858      	ldr	r0, [r3, #4]
 804ea7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 804ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804ea80:	4413      	add	r3, r2
 804ea82:	1d99      	adds	r1, r3, #6
 804ea84:	f107 0214 	add.w	r2, r7, #20
 804ea88:	2302      	movs	r3, #2
 804ea8a:	f7fd fdfa 	bl	804c682 <FRAM_SPI_ReadMem>
 804ea8e:	4603      	mov	r3, r0
 804ea90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                              crc_bytes, CRC_SIZE);
    if (status != E_OK) {
 804ea94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804ea98:	2b00      	cmp	r3, #0
 804ea9a:	d007      	beq.n	804eaac <ScriptStorage_LoadScript+0x198>
        BScript_Log("[ScriptStorage] Error: Failed to read CRC from FRAM (status: %d)", status);
 804ea9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 804eaa0:	4619      	mov	r1, r3
 804eaa2:	482c      	ldr	r0, [pc, #176]	@ (804eb54 <ScriptStorage_LoadScript+0x240>)
 804eaa4:	f7ff fa72 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_READ;
 804eaa8:	2306      	movs	r3, #6
 804eaaa:	e036      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    uint16_t stored_crc = (crc_bytes[0] << 8) | crc_bytes[1];
 804eaac:	7d3b      	ldrb	r3, [r7, #20]
 804eaae:	b21b      	sxth	r3, r3
 804eab0:	021b      	lsls	r3, r3, #8
 804eab2:	b21a      	sxth	r2, r3
 804eab4:	7d7b      	ldrb	r3, [r7, #21]
 804eab6:	b21b      	sxth	r3, r3
 804eab8:	4313      	orrs	r3, r2
 804eaba:	b21b      	sxth	r3, r3
 804eabc:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    // Calculate and verify CRC
    uint16_t calculated_crc = ScriptStorage_CalculateCRC16(header, HEADER_SIZE);
 804eabe:	f107 0318 	add.w	r3, r7, #24
 804eac2:	2106      	movs	r1, #6
 804eac4:	4618      	mov	r0, r3
 804eac6:	f7ff fd32 	bl	804e52e <ScriptStorage_CalculateCRC16>
 804eaca:	4603      	mov	r3, r0
 804eacc:	843b      	strh	r3, [r7, #32]
    calculated_crc = ScriptStorage_CalculateCRC16(binary_data, data_size) ^ calculated_crc;
 804eace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804ead0:	68b8      	ldr	r0, [r7, #8]
 804ead2:	f7ff fd2c 	bl	804e52e <ScriptStorage_CalculateCRC16>
 804ead6:	4603      	mov	r3, r0
 804ead8:	461a      	mov	r2, r3
 804eada:	8c3b      	ldrh	r3, [r7, #32]
 804eadc:	4053      	eors	r3, r2
 804eade:	843b      	strh	r3, [r7, #32]
    
    if (stored_crc != calculated_crc) {
 804eae0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 804eae2:	8c3b      	ldrh	r3, [r7, #32]
 804eae4:	429a      	cmp	r2, r3
 804eae6:	d007      	beq.n	804eaf8 <ScriptStorage_LoadScript+0x1e4>
        BScript_Log("[ScriptStorage] %s script: CRC mismatch! Stored: 0x%04X, Calculated: 0x%04X", 
 804eae8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 804eaea:	8c3b      	ldrh	r3, [r7, #32]
 804eaec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804eaee:	481a      	ldr	r0, [pc, #104]	@ (804eb58 <ScriptStorage_LoadScript+0x244>)
 804eaf0:	f7ff fa4c 	bl	804df8c <BScript_Log>
                   type_name, stored_crc, calculated_crc);
        return STORAGE_ERROR_CRC_MISMATCH;
 804eaf4:	2305      	movs	r3, #5
 804eaf6:	e010      	b.n	804eb1a <ScriptStorage_LoadScript+0x206>
    }
    
    *actual_size = data_size;
 804eaf8:	683b      	ldr	r3, [r7, #0]
 804eafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804eafc:	601a      	str	r2, [r3, #0]
    
    BScript_Log("[ScriptStorage] %s script loaded successfully:", type_name);
 804eafe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 804eb00:	4816      	ldr	r0, [pc, #88]	@ (804eb5c <ScriptStorage_LoadScript+0x248>)
 804eb02:	f7ff fa43 	bl	804df8c <BScript_Log>
    BScript_Log("  - Data size: %u bytes", data_size);
 804eb06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804eb08:	4810      	ldr	r0, [pc, #64]	@ (804eb4c <ScriptStorage_LoadScript+0x238>)
 804eb0a:	f7ff fa3f 	bl	804df8c <BScript_Log>
    BScript_Log("  - CRC16: 0x%04X (verified)", stored_crc);
 804eb0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 804eb10:	4619      	mov	r1, r3
 804eb12:	4813      	ldr	r0, [pc, #76]	@ (804eb60 <ScriptStorage_LoadScript+0x24c>)
 804eb14:	f7ff fa3a 	bl	804df8c <BScript_Log>
    
    return STORAGE_SUCCESS;
 804eb18:	2300      	movs	r3, #0
}
 804eb1a:	4618      	mov	r0, r3
 804eb1c:	3738      	adds	r7, #56	@ 0x38
 804eb1e:	46bd      	mov	sp, r7
 804eb20:	bd80      	pop	{r7, pc}
 804eb22:	bf00      	nop
 804eb24:	2402d734 	.word	0x2402d734
 804eb28:	0806ff30 	.word	0x0806ff30
 804eb2c:	0806ff60 	.word	0x0806ff60
 804eb30:	08070190 	.word	0x08070190
 804eb34:	080701d0 	.word	0x080701d0
 804eb38:	08070214 	.word	0x08070214
 804eb3c:	0807025c 	.word	0x0807025c
 804eb40:	0807029c 	.word	0x0807029c
 804eb44:	080702dc 	.word	0x080702dc
 804eb48:	0807004c 	.word	0x0807004c
 804eb4c:	08070064 	.word	0x08070064
 804eb50:	08070304 	.word	0x08070304
 804eb54:	08070350 	.word	0x08070350
 804eb58:	08070394 	.word	0x08070394
 804eb5c:	080703e0 	.word	0x080703e0
 804eb60:	08070410 	.word	0x08070410

0804eb64 <ScriptStorage_ScriptExists>:
 * @brief Check if script exists in FRAM
 * @param type Script type
 * @return true if script exists and is valid, false otherwise
 */
_Bool ScriptStorage_ScriptExists(ScriptType_t type)
{
 804eb64:	b580      	push	{r7, lr}
 804eb66:	b088      	sub	sp, #32
 804eb68:	af00      	add	r7, sp, #0
 804eb6a:	4603      	mov	r3, r0
 804eb6c:	71fb      	strb	r3, [r7, #7]
    if (!g_storage_manager.is_initialized || type >= SCRIPT_TYPE_COUNT) {
 804eb6e:	4b27      	ldr	r3, [pc, #156]	@ (804ec0c <ScriptStorage_ScriptExists+0xa8>)
 804eb70:	781b      	ldrb	r3, [r3, #0]
 804eb72:	f083 0301 	eor.w	r3, r3, #1
 804eb76:	b2db      	uxtb	r3, r3
 804eb78:	2b00      	cmp	r3, #0
 804eb7a:	d102      	bne.n	804eb82 <ScriptStorage_ScriptExists+0x1e>
 804eb7c:	79fb      	ldrb	r3, [r7, #7]
 804eb7e:	2b02      	cmp	r3, #2
 804eb80:	d901      	bls.n	804eb86 <ScriptStorage_ScriptExists+0x22>
        return false;
 804eb82:	2300      	movs	r3, #0
 804eb84:	e03e      	b.n	804ec04 <ScriptStorage_ScriptExists+0xa0>
    }
    
    uint32_t fram_addr = ScriptStorage_GetFramAddress(type);
 804eb86:	79fb      	ldrb	r3, [r7, #7]
 804eb88:	4618      	mov	r0, r3
 804eb8a:	f7ff fd0e 	bl	804e5aa <ScriptStorage_GetFramAddress>
 804eb8e:	61f8      	str	r0, [r7, #28]
    uint16_t expected_magic = ScriptStorage_GetMagicCode(type);
 804eb90:	79fb      	ldrb	r3, [r7, #7]
 804eb92:	4618      	mov	r0, r3
 804eb94:	f7ff fd28 	bl	804e5e8 <ScriptStorage_GetMagicCode>
 804eb98:	4603      	mov	r3, r0
 804eb9a:	837b      	strh	r3, [r7, #26]
    
    // Read header
    uint8_t header[HEADER_SIZE];
    Std_ReturnType status = FRAM_SPI_ReadMem(g_storage_manager.fram_handle, fram_addr, header, HEADER_SIZE);
 804eb9c:	4b1b      	ldr	r3, [pc, #108]	@ (804ec0c <ScriptStorage_ScriptExists+0xa8>)
 804eb9e:	6858      	ldr	r0, [r3, #4]
 804eba0:	f107 0208 	add.w	r2, r7, #8
 804eba4:	2306      	movs	r3, #6
 804eba6:	69f9      	ldr	r1, [r7, #28]
 804eba8:	f7fd fd6b 	bl	804c682 <FRAM_SPI_ReadMem>
 804ebac:	4603      	mov	r3, r0
 804ebae:	767b      	strb	r3, [r7, #25]
    if (status != E_OK) {
 804ebb0:	7e7b      	ldrb	r3, [r7, #25]
 804ebb2:	2b00      	cmp	r3, #0
 804ebb4:	d001      	beq.n	804ebba <ScriptStorage_ScriptExists+0x56>
        return false;
 804ebb6:	2300      	movs	r3, #0
 804ebb8:	e024      	b.n	804ec04 <ScriptStorage_ScriptExists+0xa0>
    }
    
    // Check magic code
    uint16_t stored_magic = (header[0] << 8) | header[1];
 804ebba:	7a3b      	ldrb	r3, [r7, #8]
 804ebbc:	b21b      	sxth	r3, r3
 804ebbe:	021b      	lsls	r3, r3, #8
 804ebc0:	b21a      	sxth	r2, r3
 804ebc2:	7a7b      	ldrb	r3, [r7, #9]
 804ebc4:	b21b      	sxth	r3, r3
 804ebc6:	4313      	orrs	r3, r2
 804ebc8:	b21b      	sxth	r3, r3
 804ebca:	82fb      	strh	r3, [r7, #22]
    if (stored_magic != expected_magic) {
 804ebcc:	8afa      	ldrh	r2, [r7, #22]
 804ebce:	8b7b      	ldrh	r3, [r7, #26]
 804ebd0:	429a      	cmp	r2, r3
 804ebd2:	d001      	beq.n	804ebd8 <ScriptStorage_ScriptExists+0x74>
        return false;
 804ebd4:	2300      	movs	r3, #0
 804ebd6:	e015      	b.n	804ec04 <ScriptStorage_ScriptExists+0xa0>
    }
    
    // Check data size
    uint32_t data_size = (header[2] << 24) | (header[3] << 16) | (header[4] << 8) | header[5];
 804ebd8:	7abb      	ldrb	r3, [r7, #10]
 804ebda:	061a      	lsls	r2, r3, #24
 804ebdc:	7afb      	ldrb	r3, [r7, #11]
 804ebde:	041b      	lsls	r3, r3, #16
 804ebe0:	431a      	orrs	r2, r3
 804ebe2:	7b3b      	ldrb	r3, [r7, #12]
 804ebe4:	021b      	lsls	r3, r3, #8
 804ebe6:	4313      	orrs	r3, r2
 804ebe8:	7b7a      	ldrb	r2, [r7, #13]
 804ebea:	4313      	orrs	r3, r2
 804ebec:	613b      	str	r3, [r7, #16]
    if (data_size < MIN_SCRIPT_SIZE || data_size > MAX_SCRIPT_DATA_SIZE) {
 804ebee:	693b      	ldr	r3, [r7, #16]
 804ebf0:	2b09      	cmp	r3, #9
 804ebf2:	d904      	bls.n	804ebfe <ScriptStorage_ScriptExists+0x9a>
 804ebf4:	693b      	ldr	r3, [r7, #16]
 804ebf6:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 804ebfa:	4293      	cmp	r3, r2
 804ebfc:	d901      	bls.n	804ec02 <ScriptStorage_ScriptExists+0x9e>
        return false;
 804ebfe:	2300      	movs	r3, #0
 804ec00:	e000      	b.n	804ec04 <ScriptStorage_ScriptExists+0xa0>
    }
    
    return true;
 804ec02:	2301      	movs	r3, #1
}
 804ec04:	4618      	mov	r0, r3
 804ec06:	3720      	adds	r7, #32
 804ec08:	46bd      	mov	sp, r7
 804ec0a:	bd80      	pop	{r7, pc}
 804ec0c:	2402d734 	.word	0x2402d734

0804ec10 <ScriptStorage_EraseScript>:
 * @brief Erase script from FRAM
 * @param type Script type
 * @return Storage result
 */
ScriptStorageResult_t ScriptStorage_EraseScript(ScriptType_t type)
{
 804ec10:	b580      	push	{r7, lr}
 804ec12:	b086      	sub	sp, #24
 804ec14:	af00      	add	r7, sp, #0
 804ec16:	4603      	mov	r3, r0
 804ec18:	71fb      	strb	r3, [r7, #7]
    if (!g_storage_manager.is_initialized) {
 804ec1a:	4b1f      	ldr	r3, [pc, #124]	@ (804ec98 <ScriptStorage_EraseScript+0x88>)
 804ec1c:	781b      	ldrb	r3, [r3, #0]
 804ec1e:	f083 0301 	eor.w	r3, r3, #1
 804ec22:	b2db      	uxtb	r3, r3
 804ec24:	2b00      	cmp	r3, #0
 804ec26:	d001      	beq.n	804ec2c <ScriptStorage_EraseScript+0x1c>
        return STORAGE_ERROR_NOT_INITIALIZED;
 804ec28:	2301      	movs	r3, #1
 804ec2a:	e030      	b.n	804ec8e <ScriptStorage_EraseScript+0x7e>
    }
    
    if (type >= SCRIPT_TYPE_COUNT) {
 804ec2c:	79fb      	ldrb	r3, [r7, #7]
 804ec2e:	2b02      	cmp	r3, #2
 804ec30:	d901      	bls.n	804ec36 <ScriptStorage_EraseScript+0x26>
        return STORAGE_ERROR_INVALID_PARAMS;
 804ec32:	2302      	movs	r3, #2
 804ec34:	e02b      	b.n	804ec8e <ScriptStorage_EraseScript+0x7e>
    }
    
    uint32_t fram_addr = ScriptStorage_GetFramAddress(type);
 804ec36:	79fb      	ldrb	r3, [r7, #7]
 804ec38:	4618      	mov	r0, r3
 804ec3a:	f7ff fcb6 	bl	804e5aa <ScriptStorage_GetFramAddress>
 804ec3e:	6178      	str	r0, [r7, #20]
    const char* type_name = ScriptStorage_GetTypeName(type);
 804ec40:	79fb      	ldrb	r3, [r7, #7]
 804ec42:	4618      	mov	r0, r3
 804ec44:	f7ff fcf0 	bl	804e628 <ScriptStorage_GetTypeName>
 804ec48:	6138      	str	r0, [r7, #16]
    
    BScript_Log("[ScriptStorage] Erasing %s script from FRAM", type_name);
 804ec4a:	6939      	ldr	r1, [r7, #16]
 804ec4c:	4813      	ldr	r0, [pc, #76]	@ (804ec9c <ScriptStorage_EraseScript+0x8c>)
 804ec4e:	f7ff f99d 	bl	804df8c <BScript_Log>
    
    // Write zeros to magic code to invalidate the script
    uint8_t zeros[HEADER_SIZE] = {0};
 804ec52:	f107 0308 	add.w	r3, r7, #8
 804ec56:	2200      	movs	r2, #0
 804ec58:	601a      	str	r2, [r3, #0]
 804ec5a:	809a      	strh	r2, [r3, #4]
    Std_ReturnType status = FRAM_SPI_WriteMem(g_storage_manager.fram_handle, fram_addr, zeros, HEADER_SIZE);
 804ec5c:	4b0e      	ldr	r3, [pc, #56]	@ (804ec98 <ScriptStorage_EraseScript+0x88>)
 804ec5e:	6858      	ldr	r0, [r3, #4]
 804ec60:	f107 0208 	add.w	r2, r7, #8
 804ec64:	2306      	movs	r3, #6
 804ec66:	6979      	ldr	r1, [r7, #20]
 804ec68:	f7fd fc7c 	bl	804c564 <FRAM_SPI_WriteMem>
 804ec6c:	4603      	mov	r3, r0
 804ec6e:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK) {
 804ec70:	7bfb      	ldrb	r3, [r7, #15]
 804ec72:	2b00      	cmp	r3, #0
 804ec74:	d006      	beq.n	804ec84 <ScriptStorage_EraseScript+0x74>
        BScript_Log("[ScriptStorage] Error: Failed to erase script header (status: %d)", status);
 804ec76:	7bfb      	ldrb	r3, [r7, #15]
 804ec78:	4619      	mov	r1, r3
 804ec7a:	4809      	ldr	r0, [pc, #36]	@ (804eca0 <ScriptStorage_EraseScript+0x90>)
 804ec7c:	f7ff f986 	bl	804df8c <BScript_Log>
        return STORAGE_ERROR_FRAM_WRITE;
 804ec80:	2307      	movs	r3, #7
 804ec82:	e004      	b.n	804ec8e <ScriptStorage_EraseScript+0x7e>
    }
    
    BScript_Log("[ScriptStorage] %s script erased successfully", type_name);
 804ec84:	6939      	ldr	r1, [r7, #16]
 804ec86:	4807      	ldr	r0, [pc, #28]	@ (804eca4 <ScriptStorage_EraseScript+0x94>)
 804ec88:	f7ff f980 	bl	804df8c <BScript_Log>
    return STORAGE_SUCCESS;
 804ec8c:	2300      	movs	r3, #0
}
 804ec8e:	4618      	mov	r0, r3
 804ec90:	3718      	adds	r7, #24
 804ec92:	46bd      	mov	sp, r7
 804ec94:	bd80      	pop	{r7, pc}
 804ec96:	bf00      	nop
 804ec98:	2402d734 	.word	0x2402d734
 804ec9c:	08070430 	.word	0x08070430
 804eca0:	0807045c 	.word	0x0807045c
 804eca4:	080704a0 	.word	0x080704a0

0804eca8 <ScriptStorage_AutoLoadScripts>:
 * @brief Auto-load all scripts from FRAM with delay
 * @param script_manager Pointer to script manager
 * @return Number of scripts successfully loaded
 */
uint8_t ScriptStorage_AutoLoadScripts(void* script_manager)
{
 804eca8:	b580      	push	{r7, lr}
 804ecaa:	f5ad 5da0 	sub.w	sp, sp, #5120	@ 0x1400
 804ecae:	b086      	sub	sp, #24
 804ecb0:	af00      	add	r7, sp, #0
 804ecb2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 804ecb6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 804ecba:	6018      	str	r0, [r3, #0]
    if (!g_storage_manager.is_initialized || !g_storage_manager.auto_load_enabled) {
 804ecbc:	4b7e      	ldr	r3, [pc, #504]	@ (804eeb8 <ScriptStorage_AutoLoadScripts+0x210>)
 804ecbe:	781b      	ldrb	r3, [r3, #0]
 804ecc0:	f083 0301 	eor.w	r3, r3, #1
 804ecc4:	b2db      	uxtb	r3, r3
 804ecc6:	2b00      	cmp	r3, #0
 804ecc8:	d106      	bne.n	804ecd8 <ScriptStorage_AutoLoadScripts+0x30>
 804ecca:	4b7b      	ldr	r3, [pc, #492]	@ (804eeb8 <ScriptStorage_AutoLoadScripts+0x210>)
 804eccc:	7a1b      	ldrb	r3, [r3, #8]
 804ecce:	f083 0301 	eor.w	r3, r3, #1
 804ecd2:	b2db      	uxtb	r3, r3
 804ecd4:	2b00      	cmp	r3, #0
 804ecd6:	d004      	beq.n	804ece2 <ScriptStorage_AutoLoadScripts+0x3a>
        BScript_Log("[ScriptStorage] Auto-load disabled or not initialized");
 804ecd8:	4878      	ldr	r0, [pc, #480]	@ (804eebc <ScriptStorage_AutoLoadScripts+0x214>)
 804ecda:	f7ff f957 	bl	804df8c <BScript_Log>
        return 0;
 804ecde:	2300      	movs	r3, #0
 804ece0:	e0e3      	b.n	804eeaa <ScriptStorage_AutoLoadScripts+0x202>
    }
    
    BScript_Log("[ScriptStorage] Starting auto-load sequence...");
 804ece2:	4877      	ldr	r0, [pc, #476]	@ (804eec0 <ScriptStorage_AutoLoadScripts+0x218>)
 804ece4:	f7ff f952 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Waiting %u seconds for user input...", g_storage_manager.auto_load_delay_sec);
 804ece8:	4b73      	ldr	r3, [pc, #460]	@ (804eeb8 <ScriptStorage_AutoLoadScripts+0x210>)
 804ecea:	68db      	ldr	r3, [r3, #12]
 804ecec:	4619      	mov	r1, r3
 804ecee:	4875      	ldr	r0, [pc, #468]	@ (804eec4 <ScriptStorage_AutoLoadScripts+0x21c>)
 804ecf0:	f7ff f94c 	bl	804df8c <BScript_Log>
    
    // Wait for specified delay (checking every second for user activity)
    for (uint32_t i = 0; i < g_storage_manager.auto_load_delay_sec; i++) {
 804ecf4:	2300      	movs	r3, #0
 804ecf6:	f241 4214 	movw	r2, #5140	@ 0x1414
 804ecfa:	443a      	add	r2, r7
 804ecfc:	6013      	str	r3, [r2, #0]
 804ecfe:	e016      	b.n	804ed2e <ScriptStorage_AutoLoadScripts+0x86>
        BScript_Delayms(1000);  // 1 second delay
 804ed00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 804ed04:	f7ff fbcc 	bl	804e4a0 <BScript_Delayms>
        if (UserActivityDetected()) {
 804ed08:	f7fb f986 	bl	804a018 <UserActivityDetected>
 804ed0c:	4603      	mov	r3, r0
 804ed0e:	2b00      	cmp	r3, #0
 804ed10:	d004      	beq.n	804ed1c <ScriptStorage_AutoLoadScripts+0x74>
            BScript_Log("[ScriptStorage] User activity detected, canceling auto-load");
 804ed12:	486d      	ldr	r0, [pc, #436]	@ (804eec8 <ScriptStorage_AutoLoadScripts+0x220>)
 804ed14:	f7ff f93a 	bl	804df8c <BScript_Log>
            return 0;
 804ed18:	2300      	movs	r3, #0
 804ed1a:	e0c6      	b.n	804eeaa <ScriptStorage_AutoLoadScripts+0x202>
    for (uint32_t i = 0; i < g_storage_manager.auto_load_delay_sec; i++) {
 804ed1c:	f241 4314 	movw	r3, #5140	@ 0x1414
 804ed20:	443b      	add	r3, r7
 804ed22:	681b      	ldr	r3, [r3, #0]
 804ed24:	3301      	adds	r3, #1
 804ed26:	f241 4214 	movw	r2, #5140	@ 0x1414
 804ed2a:	443a      	add	r2, r7
 804ed2c:	6013      	str	r3, [r2, #0]
 804ed2e:	4b62      	ldr	r3, [pc, #392]	@ (804eeb8 <ScriptStorage_AutoLoadScripts+0x210>)
 804ed30:	68db      	ldr	r3, [r3, #12]
 804ed32:	f241 4214 	movw	r2, #5140	@ 0x1414
 804ed36:	443a      	add	r2, r7
 804ed38:	6812      	ldr	r2, [r2, #0]
 804ed3a:	429a      	cmp	r2, r3
 804ed3c:	d3e0      	bcc.n	804ed00 <ScriptStorage_AutoLoadScripts+0x58>
        }
    }


    BScript_Log("[ScriptStorage] Auto-load delay completed, loading scripts from FRAM...");
 804ed3e:	4863      	ldr	r0, [pc, #396]	@ (804eecc <ScriptStorage_AutoLoadScripts+0x224>)
 804ed40:	f7ff f924 	bl	804df8c <BScript_Log>
    
    uint8_t loaded_count = 0;
 804ed44:	2300      	movs	r3, #0
 804ed46:	f241 4213 	movw	r2, #5139	@ 0x1413
 804ed4a:	443a      	add	r2, r7
 804ed4c:	7013      	strb	r3, [r2, #0]
    uint8_t buffer[MAX_SCRIPT_DATA_SIZE];
    
    // Try to load each script type
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804ed4e:	2300      	movs	r3, #0
 804ed50:	f241 4212 	movw	r2, #5138	@ 0x1412
 804ed54:	443a      	add	r2, r7
 804ed56:	7013      	strb	r3, [r2, #0]
 804ed58:	e07d      	b.n	804ee56 <ScriptStorage_AutoLoadScripts+0x1ae>
        const char* type_name = ScriptStorage_GetTypeName(type);
 804ed5a:	f241 4312 	movw	r3, #5138	@ 0x1412
 804ed5e:	443b      	add	r3, r7
 804ed60:	781b      	ldrb	r3, [r3, #0]
 804ed62:	4618      	mov	r0, r3
 804ed64:	f7ff fc60 	bl	804e628 <ScriptStorage_GetTypeName>
 804ed68:	f241 430c 	movw	r3, #5132	@ 0x140c
 804ed6c:	443b      	add	r3, r7
 804ed6e:	6018      	str	r0, [r3, #0]
        
        if (ScriptStorage_ScriptExists(type)) {
 804ed70:	f241 4312 	movw	r3, #5138	@ 0x1412
 804ed74:	443b      	add	r3, r7
 804ed76:	781b      	ldrb	r3, [r3, #0]
 804ed78:	4618      	mov	r0, r3
 804ed7a:	f7ff fef3 	bl	804eb64 <ScriptStorage_ScriptExists>
 804ed7e:	4603      	mov	r3, r0
 804ed80:	2b00      	cmp	r3, #0
 804ed82:	d058      	beq.n	804ee36 <ScriptStorage_AutoLoadScripts+0x18e>
            uint32_t actual_size;
            ScriptStorageResult_t result = ScriptStorage_LoadScript(type, buffer, sizeof(buffer), &actual_size);
 804ed84:	4b52      	ldr	r3, [pc, #328]	@ (804eed0 <ScriptStorage_AutoLoadScripts+0x228>)
 804ed86:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 804ed8a:	f103 0318 	add.w	r3, r3, #24
 804ed8e:	443b      	add	r3, r7
 804ed90:	4950      	ldr	r1, [pc, #320]	@ (804eed4 <ScriptStorage_AutoLoadScripts+0x22c>)
 804ed92:	f241 4218 	movw	r2, #5144	@ 0x1418
 804ed96:	440a      	add	r2, r1
 804ed98:	19d1      	adds	r1, r2, r7
 804ed9a:	f241 4212 	movw	r2, #5138	@ 0x1412
 804ed9e:	443a      	add	r2, r7
 804eda0:	7810      	ldrb	r0, [r2, #0]
 804eda2:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 804eda6:	f7ff fdb5 	bl	804e914 <ScriptStorage_LoadScript>
 804edaa:	4603      	mov	r3, r0
 804edac:	f241 420b 	movw	r2, #5131	@ 0x140b
 804edb0:	443a      	add	r2, r7
 804edb2:	7013      	strb	r3, [r2, #0]
            
            if (result == STORAGE_SUCCESS) {
 804edb4:	f241 430b 	movw	r3, #5131	@ 0x140b
 804edb8:	443b      	add	r3, r7
 804edba:	781b      	ldrb	r3, [r3, #0]
 804edbc:	2b00      	cmp	r3, #0
 804edbe:	d12d      	bne.n	804ee1c <ScriptStorage_AutoLoadScripts+0x174>
                // Load script into script manager
                if (ScriptManager_LoadScript(type, buffer, actual_size)) {
 804edc0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 804edc4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 804edc8:	681a      	ldr	r2, [r3, #0]
 804edca:	4b42      	ldr	r3, [pc, #264]	@ (804eed4 <ScriptStorage_AutoLoadScripts+0x22c>)
 804edcc:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 804edd0:	f103 0318 	add.w	r3, r3, #24
 804edd4:	443b      	add	r3, r7
 804edd6:	f241 4112 	movw	r1, #5138	@ 0x1412
 804edda:	4439      	add	r1, r7
 804eddc:	7808      	ldrb	r0, [r1, #0]
 804edde:	4619      	mov	r1, r3
 804ede0:	f7fa ff12 	bl	8049c08 <ScriptManager_LoadScript>
 804ede4:	4603      	mov	r3, r0
 804ede6:	2b00      	cmp	r3, #0
 804ede8:	d010      	beq.n	804ee0c <ScriptStorage_AutoLoadScripts+0x164>
                    loaded_count++;
 804edea:	f241 4313 	movw	r3, #5139	@ 0x1413
 804edee:	443b      	add	r3, r7
 804edf0:	781b      	ldrb	r3, [r3, #0]
 804edf2:	3301      	adds	r3, #1
 804edf4:	f241 4213 	movw	r2, #5139	@ 0x1413
 804edf8:	443a      	add	r2, r7
 804edfa:	7013      	strb	r3, [r2, #0]
                    BScript_Log("[ScriptStorage] Auto-loaded %s script successfully", type_name);
 804edfc:	f241 430c 	movw	r3, #5132	@ 0x140c
 804ee00:	443b      	add	r3, r7
 804ee02:	6819      	ldr	r1, [r3, #0]
 804ee04:	4834      	ldr	r0, [pc, #208]	@ (804eed8 <ScriptStorage_AutoLoadScripts+0x230>)
 804ee06:	f7ff f8c1 	bl	804df8c <BScript_Log>
 804ee0a:	e01b      	b.n	804ee44 <ScriptStorage_AutoLoadScripts+0x19c>
                } else {
                    BScript_Log("[ScriptStorage] Failed to load %s script into manager", type_name);
 804ee0c:	f241 430c 	movw	r3, #5132	@ 0x140c
 804ee10:	443b      	add	r3, r7
 804ee12:	6819      	ldr	r1, [r3, #0]
 804ee14:	4831      	ldr	r0, [pc, #196]	@ (804eedc <ScriptStorage_AutoLoadScripts+0x234>)
 804ee16:	f7ff f8b9 	bl	804df8c <BScript_Log>
 804ee1a:	e013      	b.n	804ee44 <ScriptStorage_AutoLoadScripts+0x19c>
                }
            } else {
                BScript_Log("[ScriptStorage] Failed to load %s script from FRAM (result: %d)", type_name, result);
 804ee1c:	f241 430b 	movw	r3, #5131	@ 0x140b
 804ee20:	443b      	add	r3, r7
 804ee22:	781b      	ldrb	r3, [r3, #0]
 804ee24:	461a      	mov	r2, r3
 804ee26:	f241 430c 	movw	r3, #5132	@ 0x140c
 804ee2a:	443b      	add	r3, r7
 804ee2c:	6819      	ldr	r1, [r3, #0]
 804ee2e:	482c      	ldr	r0, [pc, #176]	@ (804eee0 <ScriptStorage_AutoLoadScripts+0x238>)
 804ee30:	f7ff f8ac 	bl	804df8c <BScript_Log>
 804ee34:	e006      	b.n	804ee44 <ScriptStorage_AutoLoadScripts+0x19c>
            }
        } else {
            BScript_Log("[ScriptStorage] No valid %s script found in FRAM", type_name);
 804ee36:	f241 430c 	movw	r3, #5132	@ 0x140c
 804ee3a:	443b      	add	r3, r7
 804ee3c:	6819      	ldr	r1, [r3, #0]
 804ee3e:	4829      	ldr	r0, [pc, #164]	@ (804eee4 <ScriptStorage_AutoLoadScripts+0x23c>)
 804ee40:	f7ff f8a4 	bl	804df8c <BScript_Log>
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804ee44:	f241 4312 	movw	r3, #5138	@ 0x1412
 804ee48:	443b      	add	r3, r7
 804ee4a:	781b      	ldrb	r3, [r3, #0]
 804ee4c:	3301      	adds	r3, #1
 804ee4e:	f241 4212 	movw	r2, #5138	@ 0x1412
 804ee52:	443a      	add	r2, r7
 804ee54:	7013      	strb	r3, [r2, #0]
 804ee56:	f241 4312 	movw	r3, #5138	@ 0x1412
 804ee5a:	443b      	add	r3, r7
 804ee5c:	781b      	ldrb	r3, [r3, #0]
 804ee5e:	2b02      	cmp	r3, #2
 804ee60:	f67f af7b 	bls.w	804ed5a <ScriptStorage_AutoLoadScripts+0xb2>
        }
    }
    
    if (loaded_count == SCRIPT_TYPE_COUNT) {
 804ee64:	f241 4313 	movw	r3, #5139	@ 0x1413
 804ee68:	443b      	add	r3, r7
 804ee6a:	781b      	ldrb	r3, [r3, #0]
 804ee6c:	2b03      	cmp	r3, #3
 804ee6e:	d105      	bne.n	804ee7c <ScriptStorage_AutoLoadScripts+0x1d4>
        BScript_Log("[ScriptStorage] All scripts loaded successfully from FRAM, starting execution...");
 804ee70:	481d      	ldr	r0, [pc, #116]	@ (804eee8 <ScriptStorage_AutoLoadScripts+0x240>)
 804ee72:	f7ff f88b 	bl	804df8c <BScript_Log>
        // All scripts loaded, start execution
        ScriptManager_StartExecution();
 804ee76:	f7fa ff49 	bl	8049d0c <ScriptManager_StartExecution>
 804ee7a:	e012      	b.n	804eea2 <ScriptStorage_AutoLoadScripts+0x1fa>
    } else if (loaded_count > 0) {
 804ee7c:	f241 4313 	movw	r3, #5139	@ 0x1413
 804ee80:	443b      	add	r3, r7
 804ee82:	781b      	ldrb	r3, [r3, #0]
 804ee84:	2b00      	cmp	r3, #0
 804ee86:	d009      	beq.n	804ee9c <ScriptStorage_AutoLoadScripts+0x1f4>
        BScript_Log("[ScriptStorage] Partial scripts loaded (%u/%u), waiting for remaining scripts...", 
 804ee88:	f241 4313 	movw	r3, #5139	@ 0x1413
 804ee8c:	443b      	add	r3, r7
 804ee8e:	781b      	ldrb	r3, [r3, #0]
 804ee90:	2203      	movs	r2, #3
 804ee92:	4619      	mov	r1, r3
 804ee94:	4815      	ldr	r0, [pc, #84]	@ (804eeec <ScriptStorage_AutoLoadScripts+0x244>)
 804ee96:	f7ff f879 	bl	804df8c <BScript_Log>
 804ee9a:	e002      	b.n	804eea2 <ScriptStorage_AutoLoadScripts+0x1fa>
                   loaded_count, SCRIPT_TYPE_COUNT);
        // TODO: Request missing scripts from master
        // ScriptStorage_RequestMissingScripts();
    } else {
        BScript_Log("[ScriptStorage] No scripts loaded from FRAM, requesting all scripts from master...");
 804ee9c:	4814      	ldr	r0, [pc, #80]	@ (804eef0 <ScriptStorage_AutoLoadScripts+0x248>)
 804ee9e:	f7ff f875 	bl	804df8c <BScript_Log>
        // TODO: Request all scripts from master
        // ScriptStorage_RequestAllScripts();
    }
    
    return loaded_count;
 804eea2:	f241 4313 	movw	r3, #5139	@ 0x1413
 804eea6:	443b      	add	r3, r7
 804eea8:	781b      	ldrb	r3, [r3, #0]
}
 804eeaa:	4618      	mov	r0, r3
 804eeac:	f507 57a0 	add.w	r7, r7, #5120	@ 0x1400
 804eeb0:	3718      	adds	r7, #24
 804eeb2:	46bd      	mov	sp, r7
 804eeb4:	bd80      	pop	{r7, pc}
 804eeb6:	bf00      	nop
 804eeb8:	2402d734 	.word	0x2402d734
 804eebc:	080704d0 	.word	0x080704d0
 804eec0:	08070508 	.word	0x08070508
 804eec4:	08070538 	.word	0x08070538
 804eec8:	08070570 	.word	0x08070570
 804eecc:	080705ac 	.word	0x080705ac
 804eed0:	ffffebf4 	.word	0xffffebf4
 804eed4:	ffffebf8 	.word	0xffffebf8
 804eed8:	080705f4 	.word	0x080705f4
 804eedc:	08070628 	.word	0x08070628
 804eee0:	08070660 	.word	0x08070660
 804eee4:	080706a0 	.word	0x080706a0
 804eee8:	080706d4 	.word	0x080706d4
 804eeec:	08070728 	.word	0x08070728
 804eef0:	0807077c 	.word	0x0807077c

0804eef4 <ScriptStorage_GetStatus>:
/**
 * @brief Get storage status
 * @param status Pointer to status structure
 */
void ScriptStorage_GetStatus(ScriptStorageStatus_t* status)
{
 804eef4:	b590      	push	{r4, r7, lr}
 804eef6:	b085      	sub	sp, #20
 804eef8:	af00      	add	r7, sp, #0
 804eefa:	6078      	str	r0, [r7, #4]
    if (!status) return;
 804eefc:	687b      	ldr	r3, [r7, #4]
 804eefe:	2b00      	cmp	r3, #0
 804ef00:	d030      	beq.n	804ef64 <ScriptStorage_GetStatus+0x70>
    
    memset(status, 0, sizeof(ScriptStorageStatus_t));
 804ef02:	2218      	movs	r2, #24
 804ef04:	2100      	movs	r1, #0
 804ef06:	6878      	ldr	r0, [r7, #4]
 804ef08:	f01a fc6c 	bl	80697e4 <memset>
    status->is_initialized = g_storage_manager.is_initialized;
 804ef0c:	4b17      	ldr	r3, [pc, #92]	@ (804ef6c <ScriptStorage_GetStatus+0x78>)
 804ef0e:	781a      	ldrb	r2, [r3, #0]
 804ef10:	687b      	ldr	r3, [r7, #4]
 804ef12:	701a      	strb	r2, [r3, #0]
    status->auto_load_enabled = g_storage_manager.auto_load_enabled;
 804ef14:	4b15      	ldr	r3, [pc, #84]	@ (804ef6c <ScriptStorage_GetStatus+0x78>)
 804ef16:	7a1a      	ldrb	r2, [r3, #8]
 804ef18:	687b      	ldr	r3, [r7, #4]
 804ef1a:	705a      	strb	r2, [r3, #1]
    status->auto_load_delay_sec = g_storage_manager.auto_load_delay_sec;
 804ef1c:	4b13      	ldr	r3, [pc, #76]	@ (804ef6c <ScriptStorage_GetStatus+0x78>)
 804ef1e:	68da      	ldr	r2, [r3, #12]
 804ef20:	687b      	ldr	r3, [r7, #4]
 804ef22:	605a      	str	r2, [r3, #4]
    
    // Check which scripts exist
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804ef24:	2300      	movs	r3, #0
 804ef26:	73fb      	strb	r3, [r7, #15]
 804ef28:	e00c      	b.n	804ef44 <ScriptStorage_GetStatus+0x50>
        status->script_exists[type] = ScriptStorage_ScriptExists(type);
 804ef2a:	7bfc      	ldrb	r4, [r7, #15]
 804ef2c:	7bfb      	ldrb	r3, [r7, #15]
 804ef2e:	4618      	mov	r0, r3
 804ef30:	f7ff fe18 	bl	804eb64 <ScriptStorage_ScriptExists>
 804ef34:	4603      	mov	r3, r0
 804ef36:	461a      	mov	r2, r3
 804ef38:	687b      	ldr	r3, [r7, #4]
 804ef3a:	4423      	add	r3, r4
 804ef3c:	721a      	strb	r2, [r3, #8]
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804ef3e:	7bfb      	ldrb	r3, [r7, #15]
 804ef40:	3301      	adds	r3, #1
 804ef42:	73fb      	strb	r3, [r7, #15]
 804ef44:	7bfb      	ldrb	r3, [r7, #15]
 804ef46:	2b02      	cmp	r3, #2
 804ef48:	d9ef      	bls.n	804ef2a <ScriptStorage_GetStatus+0x36>
    }
    
    status->fram_base_address = FRAM_SCRIPT_BASE_ADDR;
 804ef4a:	687b      	ldr	r3, [r7, #4]
 804ef4c:	f44f 3270 	mov.w	r2, #245760	@ 0x3c000
 804ef50:	60da      	str	r2, [r3, #12]
    status->script_slot_size = SCRIPT_SLOT_SIZE;
 804ef52:	687b      	ldr	r3, [r7, #4]
 804ef54:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 804ef58:	611a      	str	r2, [r3, #16]
    status->max_script_size = MAX_SCRIPT_DATA_SIZE;
 804ef5a:	687b      	ldr	r3, [r7, #4]
 804ef5c:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 804ef60:	615a      	str	r2, [r3, #20]
 804ef62:	e000      	b.n	804ef66 <ScriptStorage_GetStatus+0x72>
    if (!status) return;
 804ef64:	bf00      	nop
}
 804ef66:	3714      	adds	r7, #20
 804ef68:	46bd      	mov	sp, r7
 804ef6a:	bd90      	pop	{r4, r7, pc}
 804ef6c:	2402d734 	.word	0x2402d734

0804ef70 <ScriptStorage_PrintStatus>:

/**
 * @brief Print storage status
 */
void ScriptStorage_PrintStatus(void)
{
 804ef70:	b580      	push	{r7, lr}
 804ef72:	b08a      	sub	sp, #40	@ 0x28
 804ef74:	af00      	add	r7, sp, #0
    ScriptStorageStatus_t status;
    ScriptStorage_GetStatus(&status);
 804ef76:	1d3b      	adds	r3, r7, #4
 804ef78:	4618      	mov	r0, r3
 804ef7a:	f7ff ffbb 	bl	804eef4 <ScriptStorage_GetStatus>
    
    BScript_Log("[ScriptStorage] === STORAGE STATUS ===");
 804ef7e:	482f      	ldr	r0, [pc, #188]	@ (804f03c <ScriptStorage_PrintStatus+0xcc>)
 804ef80:	f7ff f804 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Initialized: %s", status.is_initialized ? "YES" : "NO");
 804ef84:	793b      	ldrb	r3, [r7, #4]
 804ef86:	2b00      	cmp	r3, #0
 804ef88:	d001      	beq.n	804ef8e <ScriptStorage_PrintStatus+0x1e>
 804ef8a:	4b2d      	ldr	r3, [pc, #180]	@ (804f040 <ScriptStorage_PrintStatus+0xd0>)
 804ef8c:	e000      	b.n	804ef90 <ScriptStorage_PrintStatus+0x20>
 804ef8e:	4b2d      	ldr	r3, [pc, #180]	@ (804f044 <ScriptStorage_PrintStatus+0xd4>)
 804ef90:	4619      	mov	r1, r3
 804ef92:	482d      	ldr	r0, [pc, #180]	@ (804f048 <ScriptStorage_PrintStatus+0xd8>)
 804ef94:	f7fe fffa 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Auto-load enabled: %s", status.auto_load_enabled ? "YES" : "NO");
 804ef98:	797b      	ldrb	r3, [r7, #5]
 804ef9a:	2b00      	cmp	r3, #0
 804ef9c:	d001      	beq.n	804efa2 <ScriptStorage_PrintStatus+0x32>
 804ef9e:	4b28      	ldr	r3, [pc, #160]	@ (804f040 <ScriptStorage_PrintStatus+0xd0>)
 804efa0:	e000      	b.n	804efa4 <ScriptStorage_PrintStatus+0x34>
 804efa2:	4b28      	ldr	r3, [pc, #160]	@ (804f044 <ScriptStorage_PrintStatus+0xd4>)
 804efa4:	4619      	mov	r1, r3
 804efa6:	4829      	ldr	r0, [pc, #164]	@ (804f04c <ScriptStorage_PrintStatus+0xdc>)
 804efa8:	f7fe fff0 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Auto-load delay: %u seconds", status.auto_load_delay_sec);
 804efac:	68bb      	ldr	r3, [r7, #8]
 804efae:	4619      	mov	r1, r3
 804efb0:	4827      	ldr	r0, [pc, #156]	@ (804f050 <ScriptStorage_PrintStatus+0xe0>)
 804efb2:	f7fe ffeb 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] FRAM base address: 0x%06X", status.fram_base_address);
 804efb6:	693b      	ldr	r3, [r7, #16]
 804efb8:	4619      	mov	r1, r3
 804efba:	4826      	ldr	r0, [pc, #152]	@ (804f054 <ScriptStorage_PrintStatus+0xe4>)
 804efbc:	f7fe ffe6 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Script slot size: %u bytes", status.script_slot_size);
 804efc0:	697b      	ldr	r3, [r7, #20]
 804efc2:	4619      	mov	r1, r3
 804efc4:	4824      	ldr	r0, [pc, #144]	@ (804f058 <ScriptStorage_PrintStatus+0xe8>)
 804efc6:	f7fe ffe1 	bl	804df8c <BScript_Log>
    BScript_Log("[ScriptStorage] Max script size: %u bytes", status.max_script_size);
 804efca:	69bb      	ldr	r3, [r7, #24]
 804efcc:	4619      	mov	r1, r3
 804efce:	4823      	ldr	r0, [pc, #140]	@ (804f05c <ScriptStorage_PrintStatus+0xec>)
 804efd0:	f7fe ffdc 	bl	804df8c <BScript_Log>
    
    BScript_Log("[ScriptStorage] Script availability:");
 804efd4:	4822      	ldr	r0, [pc, #136]	@ (804f060 <ScriptStorage_PrintStatus+0xf0>)
 804efd6:	f7fe ffd9 	bl	804df8c <BScript_Log>
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804efda:	2300      	movs	r3, #0
 804efdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 804efe0:	e020      	b.n	804f024 <ScriptStorage_PrintStatus+0xb4>
        const char* type_name = ScriptStorage_GetTypeName(type);
 804efe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804efe6:	4618      	mov	r0, r3
 804efe8:	f7ff fb1e 	bl	804e628 <ScriptStorage_GetTypeName>
 804efec:	6238      	str	r0, [r7, #32]
        uint32_t addr = ScriptStorage_GetFramAddress(type);
 804efee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804eff2:	4618      	mov	r0, r3
 804eff4:	f7ff fad9 	bl	804e5aa <ScriptStorage_GetFramAddress>
 804eff8:	61f8      	str	r0, [r7, #28]
        BScript_Log("  - %s: %s (0x%06X)", type_name, 
                   status.script_exists[type] ? "EXISTS" : "NOT FOUND", addr);
 804effa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804effe:	3328      	adds	r3, #40	@ 0x28
 804f000:	443b      	add	r3, r7
 804f002:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
        BScript_Log("  - %s: %s (0x%06X)", type_name, 
 804f006:	2b00      	cmp	r3, #0
 804f008:	d001      	beq.n	804f00e <ScriptStorage_PrintStatus+0x9e>
 804f00a:	4a16      	ldr	r2, [pc, #88]	@ (804f064 <ScriptStorage_PrintStatus+0xf4>)
 804f00c:	e000      	b.n	804f010 <ScriptStorage_PrintStatus+0xa0>
 804f00e:	4a16      	ldr	r2, [pc, #88]	@ (804f068 <ScriptStorage_PrintStatus+0xf8>)
 804f010:	69fb      	ldr	r3, [r7, #28]
 804f012:	6a39      	ldr	r1, [r7, #32]
 804f014:	4815      	ldr	r0, [pc, #84]	@ (804f06c <ScriptStorage_PrintStatus+0xfc>)
 804f016:	f7fe ffb9 	bl	804df8c <BScript_Log>
    for (ScriptType_t type = SCRIPT_TYPE_INIT; type < SCRIPT_TYPE_COUNT; type++) {
 804f01a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804f01e:	3301      	adds	r3, #1
 804f020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 804f024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 804f028:	2b02      	cmp	r3, #2
 804f02a:	d9da      	bls.n	804efe2 <ScriptStorage_PrintStatus+0x72>
    }
    
    BScript_Log("[ScriptStorage] === END STATUS ===");
 804f02c:	4810      	ldr	r0, [pc, #64]	@ (804f070 <ScriptStorage_PrintStatus+0x100>)
 804f02e:	f7fe ffad 	bl	804df8c <BScript_Log>
}
 804f032:	bf00      	nop
 804f034:	3728      	adds	r7, #40	@ 0x28
 804f036:	46bd      	mov	sp, r7
 804f038:	bd80      	pop	{r7, pc}
 804f03a:	bf00      	nop
 804f03c:	080707d0 	.word	0x080707d0
 804f040:	080707f8 	.word	0x080707f8
 804f044:	080707fc 	.word	0x080707fc
 804f048:	08070800 	.word	0x08070800
 804f04c:	08070820 	.word	0x08070820
 804f050:	08070848 	.word	0x08070848
 804f054:	08070874 	.word	0x08070874
 804f058:	080708a0 	.word	0x080708a0
 804f05c:	080708cc 	.word	0x080708cc
 804f060:	080708f8 	.word	0x080708f8
 804f064:	08070920 	.word	0x08070920
 804f068:	08070928 	.word	0x08070928
 804f06c:	08070934 	.word	0x08070934
 804f070:	08070948 	.word	0x08070948

0804f074 <disk_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..) - Physical drive number to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (BYTE pdrv)
{
 804f074:	b580      	push	{r7, lr}
 804f076:	b084      	sub	sp, #16
 804f078:	af00      	add	r7, sp, #0
 804f07a:	4603      	mov	r3, r0
 804f07c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 804f07e:	f005 fae7 	bl	8054650 <FATFS_GetDisk>
 804f082:	60f8      	str	r0, [r7, #12]
  stat = disk->drv[pdrv]->disk_status(disk->lun[pdrv]);
 804f084:	79fb      	ldrb	r3, [r7, #7]
 804f086:	68fa      	ldr	r2, [r7, #12]
 804f088:	009b      	lsls	r3, r3, #2
 804f08a:	4413      	add	r3, r2
 804f08c:	685b      	ldr	r3, [r3, #4]
 804f08e:	685b      	ldr	r3, [r3, #4]
 804f090:	79fa      	ldrb	r2, [r7, #7]
 804f092:	68f9      	ldr	r1, [r7, #12]
 804f094:	440a      	add	r2, r1
 804f096:	7a12      	ldrb	r2, [r2, #8]
 804f098:	4610      	mov	r0, r2
 804f09a:	4798      	blx	r3
 804f09c:	4603      	mov	r3, r0
 804f09e:	72fb      	strb	r3, [r7, #11]
  return stat;
 804f0a0:	7afb      	ldrb	r3, [r7, #11]
}
 804f0a2:	4618      	mov	r0, r3
 804f0a4:	3710      	adds	r7, #16
 804f0a6:	46bd      	mov	sp, r7
 804f0a8:	bd80      	pop	{r7, pc}

0804f0aa <disk_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..) - Physical drive nmuber to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (BYTE pdrv)
{
 804f0aa:	b580      	push	{r7, lr}
 804f0ac:	b084      	sub	sp, #16
 804f0ae:	af00      	add	r7, sp, #0
 804f0b0:	4603      	mov	r3, r0
 804f0b2:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 804f0b4:	2300      	movs	r3, #0
 804f0b6:	73fb      	strb	r3, [r7, #15]
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 804f0b8:	f005 faca 	bl	8054650 <FATFS_GetDisk>
 804f0bc:	60b8      	str	r0, [r7, #8]
  if (disk->is_initialized[pdrv] == 0)
 804f0be:	79fb      	ldrb	r3, [r7, #7]
 804f0c0:	68ba      	ldr	r2, [r7, #8]
 804f0c2:	5cd3      	ldrb	r3, [r2, r3]
 804f0c4:	2b00      	cmp	r3, #0
 804f0c6:	d114      	bne.n	804f0f2 <disk_initialize+0x48>
  {
     stat = disk->drv[pdrv]->disk_initialize(disk->lun[pdrv]);
 804f0c8:	79fb      	ldrb	r3, [r7, #7]
 804f0ca:	68ba      	ldr	r2, [r7, #8]
 804f0cc:	009b      	lsls	r3, r3, #2
 804f0ce:	4413      	add	r3, r2
 804f0d0:	685b      	ldr	r3, [r3, #4]
 804f0d2:	681b      	ldr	r3, [r3, #0]
 804f0d4:	79fa      	ldrb	r2, [r7, #7]
 804f0d6:	68b9      	ldr	r1, [r7, #8]
 804f0d8:	440a      	add	r2, r1
 804f0da:	7a12      	ldrb	r2, [r2, #8]
 804f0dc:	4610      	mov	r0, r2
 804f0de:	4798      	blx	r3
 804f0e0:	4603      	mov	r3, r0
 804f0e2:	73fb      	strb	r3, [r7, #15]
     if (stat == RES_OK)
 804f0e4:	7bfb      	ldrb	r3, [r7, #15]
 804f0e6:	2b00      	cmp	r3, #0
 804f0e8:	d103      	bne.n	804f0f2 <disk_initialize+0x48>
     {
        disk->is_initialized[pdrv] = 1;
 804f0ea:	79fb      	ldrb	r3, [r7, #7]
 804f0ec:	68ba      	ldr	r2, [r7, #8]
 804f0ee:	2101      	movs	r1, #1
 804f0f0:	54d1      	strb	r1, [r2, r3]
     }
  }
  return stat;
 804f0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 804f0f4:	4618      	mov	r0, r3
 804f0f6:	3710      	adds	r7, #16
 804f0f8:	46bd      	mov	sp, r7
 804f0fa:	bd80      	pop	{r7, pc}

0804f0fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 804f0fc:	b590      	push	{r4, r7, lr}
 804f0fe:	b087      	sub	sp, #28
 804f100:	af00      	add	r7, sp, #0
 804f102:	60b9      	str	r1, [r7, #8]
 804f104:	607a      	str	r2, [r7, #4]
 804f106:	603b      	str	r3, [r7, #0]
 804f108:	4603      	mov	r3, r0
 804f10a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 804f10c:	f005 faa0 	bl	8054650 <FATFS_GetDisk>
 804f110:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_read(disk->lun[pdrv], buff, sector, count);
 804f112:	7bfb      	ldrb	r3, [r7, #15]
 804f114:	697a      	ldr	r2, [r7, #20]
 804f116:	009b      	lsls	r3, r3, #2
 804f118:	4413      	add	r3, r2
 804f11a:	685b      	ldr	r3, [r3, #4]
 804f11c:	689c      	ldr	r4, [r3, #8]
 804f11e:	7bfb      	ldrb	r3, [r7, #15]
 804f120:	697a      	ldr	r2, [r7, #20]
 804f122:	4413      	add	r3, r2
 804f124:	7a18      	ldrb	r0, [r3, #8]
 804f126:	683b      	ldr	r3, [r7, #0]
 804f128:	687a      	ldr	r2, [r7, #4]
 804f12a:	68b9      	ldr	r1, [r7, #8]
 804f12c:	47a0      	blx	r4
 804f12e:	4603      	mov	r3, r0
 804f130:	74fb      	strb	r3, [r7, #19]
  return res;
 804f132:	7cfb      	ldrb	r3, [r7, #19]
}
 804f134:	4618      	mov	r0, r3
 804f136:	371c      	adds	r7, #28
 804f138:	46bd      	mov	sp, r7
 804f13a:	bd90      	pop	{r4, r7, pc}

0804f13c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 804f13c:	b590      	push	{r4, r7, lr}
 804f13e:	b087      	sub	sp, #28
 804f140:	af00      	add	r7, sp, #0
 804f142:	60b9      	str	r1, [r7, #8]
 804f144:	607a      	str	r2, [r7, #4]
 804f146:	603b      	str	r3, [r7, #0]
 804f148:	4603      	mov	r3, r0
 804f14a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 804f14c:	f005 fa80 	bl	8054650 <FATFS_GetDisk>
 804f150:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_write(disk->lun[pdrv], buff, sector, count);
 804f152:	7bfb      	ldrb	r3, [r7, #15]
 804f154:	697a      	ldr	r2, [r7, #20]
 804f156:	009b      	lsls	r3, r3, #2
 804f158:	4413      	add	r3, r2
 804f15a:	685b      	ldr	r3, [r3, #4]
 804f15c:	68dc      	ldr	r4, [r3, #12]
 804f15e:	7bfb      	ldrb	r3, [r7, #15]
 804f160:	697a      	ldr	r2, [r7, #20]
 804f162:	4413      	add	r3, r2
 804f164:	7a18      	ldrb	r0, [r3, #8]
 804f166:	683b      	ldr	r3, [r7, #0]
 804f168:	687a      	ldr	r2, [r7, #4]
 804f16a:	68b9      	ldr	r1, [r7, #8]
 804f16c:	47a0      	blx	r4
 804f16e:	4603      	mov	r3, r0
 804f170:	74fb      	strb	r3, [r7, #19]
  return res;
 804f172:	7cfb      	ldrb	r3, [r7, #19]
}
 804f174:	4618      	mov	r0, r3
 804f176:	371c      	adds	r7, #28
 804f178:	46bd      	mov	sp, r7
 804f17a:	bd90      	pop	{r4, r7, pc}

0804f17c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 804f17c:	b580      	push	{r7, lr}
 804f17e:	b084      	sub	sp, #16
 804f180:	af00      	add	r7, sp, #0
 804f182:	4603      	mov	r3, r0
 804f184:	603a      	str	r2, [r7, #0]
 804f186:	71fb      	strb	r3, [r7, #7]
 804f188:	460b      	mov	r3, r1
 804f18a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 804f18c:	f005 fa60 	bl	8054650 <FATFS_GetDisk>
 804f190:	60f8      	str	r0, [r7, #12]
  res = disk->drv[pdrv]->disk_ioctl(disk->lun[pdrv], cmd, buff);
 804f192:	79fb      	ldrb	r3, [r7, #7]
 804f194:	68fa      	ldr	r2, [r7, #12]
 804f196:	009b      	lsls	r3, r3, #2
 804f198:	4413      	add	r3, r2
 804f19a:	685b      	ldr	r3, [r3, #4]
 804f19c:	691b      	ldr	r3, [r3, #16]
 804f19e:	79fa      	ldrb	r2, [r7, #7]
 804f1a0:	68f9      	ldr	r1, [r7, #12]
 804f1a2:	440a      	add	r2, r1
 804f1a4:	7a10      	ldrb	r0, [r2, #8]
 804f1a6:	79b9      	ldrb	r1, [r7, #6]
 804f1a8:	683a      	ldr	r2, [r7, #0]
 804f1aa:	4798      	blx	r3
 804f1ac:	4603      	mov	r3, r0
 804f1ae:	72fb      	strb	r3, [r7, #11]
  return res;
 804f1b0:	7afb      	ldrb	r3, [r7, #11]
}
 804f1b2:	4618      	mov	r0, r3
 804f1b4:	3710      	adds	r7, #16
 804f1b6:	46bd      	mov	sp, r7
 804f1b8:	bd80      	pop	{r7, pc}

0804f1ba <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 804f1ba:	b480      	push	{r7}
 804f1bc:	af00      	add	r7, sp, #0
  return 0;
 804f1be:	2300      	movs	r3, #0
}
 804f1c0:	4618      	mov	r0, r3
 804f1c2:	46bd      	mov	sp, r7
 804f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f1c8:	4770      	bx	lr

0804f1ca <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 804f1ca:	b480      	push	{r7}
 804f1cc:	b085      	sub	sp, #20
 804f1ce:	af00      	add	r7, sp, #0
 804f1d0:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 804f1d2:	687b      	ldr	r3, [r7, #4]
 804f1d4:	3301      	adds	r3, #1
 804f1d6:	781b      	ldrb	r3, [r3, #0]
 804f1d8:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 804f1da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 804f1de:	021b      	lsls	r3, r3, #8
 804f1e0:	b21a      	sxth	r2, r3
 804f1e2:	687b      	ldr	r3, [r7, #4]
 804f1e4:	781b      	ldrb	r3, [r3, #0]
 804f1e6:	b21b      	sxth	r3, r3
 804f1e8:	4313      	orrs	r3, r2
 804f1ea:	b21b      	sxth	r3, r3
 804f1ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 804f1ee:	89fb      	ldrh	r3, [r7, #14]
}
 804f1f0:	4618      	mov	r0, r3
 804f1f2:	3714      	adds	r7, #20
 804f1f4:	46bd      	mov	sp, r7
 804f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f1fa:	4770      	bx	lr

0804f1fc <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 804f1fc:	b480      	push	{r7}
 804f1fe:	b085      	sub	sp, #20
 804f200:	af00      	add	r7, sp, #0
 804f202:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 804f204:	687b      	ldr	r3, [r7, #4]
 804f206:	3303      	adds	r3, #3
 804f208:	781b      	ldrb	r3, [r3, #0]
 804f20a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 804f20c:	68fb      	ldr	r3, [r7, #12]
 804f20e:	021b      	lsls	r3, r3, #8
 804f210:	687a      	ldr	r2, [r7, #4]
 804f212:	3202      	adds	r2, #2
 804f214:	7812      	ldrb	r2, [r2, #0]
 804f216:	4313      	orrs	r3, r2
 804f218:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 804f21a:	68fb      	ldr	r3, [r7, #12]
 804f21c:	021b      	lsls	r3, r3, #8
 804f21e:	687a      	ldr	r2, [r7, #4]
 804f220:	3201      	adds	r2, #1
 804f222:	7812      	ldrb	r2, [r2, #0]
 804f224:	4313      	orrs	r3, r2
 804f226:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 804f228:	68fb      	ldr	r3, [r7, #12]
 804f22a:	021b      	lsls	r3, r3, #8
 804f22c:	687a      	ldr	r2, [r7, #4]
 804f22e:	7812      	ldrb	r2, [r2, #0]
 804f230:	4313      	orrs	r3, r2
 804f232:	60fb      	str	r3, [r7, #12]
	return rv;
 804f234:	68fb      	ldr	r3, [r7, #12]
}
 804f236:	4618      	mov	r0, r3
 804f238:	3714      	adds	r7, #20
 804f23a:	46bd      	mov	sp, r7
 804f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f240:	4770      	bx	lr

0804f242 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 804f242:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 804f246:	b09d      	sub	sp, #116	@ 0x74
 804f248:	af00      	add	r7, sp, #0
 804f24a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 804f24c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f24e:	3307      	adds	r3, #7
 804f250:	781b      	ldrb	r3, [r3, #0]
 804f252:	b2db      	uxtb	r3, r3
 804f254:	2200      	movs	r2, #0
 804f256:	469a      	mov	sl, r3
 804f258:	4693      	mov	fp, r2
 804f25a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 804f25e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 804f262:	f04f 0000 	mov.w	r0, #0
 804f266:	f04f 0100 	mov.w	r1, #0
 804f26a:	0219      	lsls	r1, r3, #8
 804f26c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 804f270:	0210      	lsls	r0, r2, #8
 804f272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f274:	3306      	adds	r3, #6
 804f276:	781b      	ldrb	r3, [r3, #0]
 804f278:	b2db      	uxtb	r3, r3
 804f27a:	2200      	movs	r2, #0
 804f27c:	461c      	mov	r4, r3
 804f27e:	4615      	mov	r5, r2
 804f280:	ea40 0804 	orr.w	r8, r0, r4
 804f284:	ea41 0905 	orr.w	r9, r1, r5
 804f288:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 804f28c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 804f290:	f04f 0000 	mov.w	r0, #0
 804f294:	f04f 0100 	mov.w	r1, #0
 804f298:	0219      	lsls	r1, r3, #8
 804f29a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 804f29e:	0210      	lsls	r0, r2, #8
 804f2a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f2a2:	3305      	adds	r3, #5
 804f2a4:	781b      	ldrb	r3, [r3, #0]
 804f2a6:	b2db      	uxtb	r3, r3
 804f2a8:	2200      	movs	r2, #0
 804f2aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 804f2ac:	65fa      	str	r2, [r7, #92]	@ 0x5c
 804f2ae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 804f2b2:	4623      	mov	r3, r4
 804f2b4:	4303      	orrs	r3, r0
 804f2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 804f2b8:	462b      	mov	r3, r5
 804f2ba:	430b      	orrs	r3, r1
 804f2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 804f2be:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 804f2c2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 804f2c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 804f2ca:	f04f 0000 	mov.w	r0, #0
 804f2ce:	f04f 0100 	mov.w	r1, #0
 804f2d2:	0219      	lsls	r1, r3, #8
 804f2d4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 804f2d8:	0210      	lsls	r0, r2, #8
 804f2da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f2dc:	3304      	adds	r3, #4
 804f2de:	781b      	ldrb	r3, [r3, #0]
 804f2e0:	b2db      	uxtb	r3, r3
 804f2e2:	2200      	movs	r2, #0
 804f2e4:	653b      	str	r3, [r7, #80]	@ 0x50
 804f2e6:	657a      	str	r2, [r7, #84]	@ 0x54
 804f2e8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 804f2ec:	4623      	mov	r3, r4
 804f2ee:	4303      	orrs	r3, r0
 804f2f0:	623b      	str	r3, [r7, #32]
 804f2f2:	462b      	mov	r3, r5
 804f2f4:	430b      	orrs	r3, r1
 804f2f6:	627b      	str	r3, [r7, #36]	@ 0x24
 804f2f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 804f2fc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 804f300:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 804f304:	f04f 0000 	mov.w	r0, #0
 804f308:	f04f 0100 	mov.w	r1, #0
 804f30c:	0219      	lsls	r1, r3, #8
 804f30e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 804f312:	0210      	lsls	r0, r2, #8
 804f314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f316:	3303      	adds	r3, #3
 804f318:	781b      	ldrb	r3, [r3, #0]
 804f31a:	b2db      	uxtb	r3, r3
 804f31c:	2200      	movs	r2, #0
 804f31e:	64bb      	str	r3, [r7, #72]	@ 0x48
 804f320:	64fa      	str	r2, [r7, #76]	@ 0x4c
 804f322:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 804f326:	4623      	mov	r3, r4
 804f328:	4303      	orrs	r3, r0
 804f32a:	61bb      	str	r3, [r7, #24]
 804f32c:	462b      	mov	r3, r5
 804f32e:	430b      	orrs	r3, r1
 804f330:	61fb      	str	r3, [r7, #28]
 804f332:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 804f336:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 804f33a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 804f33e:	f04f 0000 	mov.w	r0, #0
 804f342:	f04f 0100 	mov.w	r1, #0
 804f346:	0219      	lsls	r1, r3, #8
 804f348:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 804f34c:	0210      	lsls	r0, r2, #8
 804f34e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804f350:	3302      	adds	r3, #2
 804f352:	781b      	ldrb	r3, [r3, #0]
 804f354:	b2db      	uxtb	r3, r3
 804f356:	2200      	movs	r2, #0
 804f358:	643b      	str	r3, [r7, #64]	@ 0x40
 804f35a:	647a      	str	r2, [r7, #68]	@ 0x44
 804f35c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 804f360:	4623      	mov	r3, r4
 804f362:	4303      	orrs	r3, r0
 804f364:	613b      	str	r3, [r7, #16]
 804f366:	462b      	mov	r3, r5
 804f368:	430b      	orrs	r3, r1
 804f36a:	617b      	str	r3, [r7, #20]
 804f36c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 804f370:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 804f374:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 804f378:	f04f 0200 	mov.w	r2, #0
 804f37c:	f04f 0300 	mov.w	r3, #0
 804f380:	020b      	lsls	r3, r1, #8
 804f382:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 804f386:	0202      	lsls	r2, r0, #8
 804f388:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 804f38a:	3101      	adds	r1, #1
 804f38c:	7809      	ldrb	r1, [r1, #0]
 804f38e:	b2c9      	uxtb	r1, r1
 804f390:	2000      	movs	r0, #0
 804f392:	63b9      	str	r1, [r7, #56]	@ 0x38
 804f394:	63f8      	str	r0, [r7, #60]	@ 0x3c
 804f396:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 804f39a:	4621      	mov	r1, r4
 804f39c:	4311      	orrs	r1, r2
 804f39e:	60b9      	str	r1, [r7, #8]
 804f3a0:	4629      	mov	r1, r5
 804f3a2:	4319      	orrs	r1, r3
 804f3a4:	60f9      	str	r1, [r7, #12]
 804f3a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 804f3aa:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 804f3ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 804f3b2:	f04f 0200 	mov.w	r2, #0
 804f3b6:	f04f 0300 	mov.w	r3, #0
 804f3ba:	020b      	lsls	r3, r1, #8
 804f3bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 804f3c0:	0202      	lsls	r2, r0, #8
 804f3c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 804f3c4:	7809      	ldrb	r1, [r1, #0]
 804f3c6:	b2c9      	uxtb	r1, r1
 804f3c8:	2000      	movs	r0, #0
 804f3ca:	6339      	str	r1, [r7, #48]	@ 0x30
 804f3cc:	6378      	str	r0, [r7, #52]	@ 0x34
 804f3ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 804f3d2:	4621      	mov	r1, r4
 804f3d4:	4311      	orrs	r1, r2
 804f3d6:	6039      	str	r1, [r7, #0]
 804f3d8:	4629      	mov	r1, r5
 804f3da:	4319      	orrs	r1, r3
 804f3dc:	6079      	str	r1, [r7, #4]
 804f3de:	e9d7 3400 	ldrd	r3, r4, [r7]
 804f3e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 804f3e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 804f3ea:	4610      	mov	r0, r2
 804f3ec:	4619      	mov	r1, r3
 804f3ee:	3774      	adds	r7, #116	@ 0x74
 804f3f0:	46bd      	mov	sp, r7
 804f3f2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 804f3f6:	4770      	bx	lr

0804f3f8 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 804f3f8:	b480      	push	{r7}
 804f3fa:	b083      	sub	sp, #12
 804f3fc:	af00      	add	r7, sp, #0
 804f3fe:	6078      	str	r0, [r7, #4]
 804f400:	460b      	mov	r3, r1
 804f402:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 804f404:	687b      	ldr	r3, [r7, #4]
 804f406:	1c5a      	adds	r2, r3, #1
 804f408:	607a      	str	r2, [r7, #4]
 804f40a:	887a      	ldrh	r2, [r7, #2]
 804f40c:	b2d2      	uxtb	r2, r2
 804f40e:	701a      	strb	r2, [r3, #0]
 804f410:	887b      	ldrh	r3, [r7, #2]
 804f412:	0a1b      	lsrs	r3, r3, #8
 804f414:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 804f416:	687b      	ldr	r3, [r7, #4]
 804f418:	1c5a      	adds	r2, r3, #1
 804f41a:	607a      	str	r2, [r7, #4]
 804f41c:	887a      	ldrh	r2, [r7, #2]
 804f41e:	b2d2      	uxtb	r2, r2
 804f420:	701a      	strb	r2, [r3, #0]
}
 804f422:	bf00      	nop
 804f424:	370c      	adds	r7, #12
 804f426:	46bd      	mov	sp, r7
 804f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f42c:	4770      	bx	lr

0804f42e <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 804f42e:	b480      	push	{r7}
 804f430:	b083      	sub	sp, #12
 804f432:	af00      	add	r7, sp, #0
 804f434:	6078      	str	r0, [r7, #4]
 804f436:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 804f438:	687b      	ldr	r3, [r7, #4]
 804f43a:	1c5a      	adds	r2, r3, #1
 804f43c:	607a      	str	r2, [r7, #4]
 804f43e:	683a      	ldr	r2, [r7, #0]
 804f440:	b2d2      	uxtb	r2, r2
 804f442:	701a      	strb	r2, [r3, #0]
 804f444:	683b      	ldr	r3, [r7, #0]
 804f446:	0a1b      	lsrs	r3, r3, #8
 804f448:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 804f44a:	687b      	ldr	r3, [r7, #4]
 804f44c:	1c5a      	adds	r2, r3, #1
 804f44e:	607a      	str	r2, [r7, #4]
 804f450:	683a      	ldr	r2, [r7, #0]
 804f452:	b2d2      	uxtb	r2, r2
 804f454:	701a      	strb	r2, [r3, #0]
 804f456:	683b      	ldr	r3, [r7, #0]
 804f458:	0a1b      	lsrs	r3, r3, #8
 804f45a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 804f45c:	687b      	ldr	r3, [r7, #4]
 804f45e:	1c5a      	adds	r2, r3, #1
 804f460:	607a      	str	r2, [r7, #4]
 804f462:	683a      	ldr	r2, [r7, #0]
 804f464:	b2d2      	uxtb	r2, r2
 804f466:	701a      	strb	r2, [r3, #0]
 804f468:	683b      	ldr	r3, [r7, #0]
 804f46a:	0a1b      	lsrs	r3, r3, #8
 804f46c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 804f46e:	687b      	ldr	r3, [r7, #4]
 804f470:	1c5a      	adds	r2, r3, #1
 804f472:	607a      	str	r2, [r7, #4]
 804f474:	683a      	ldr	r2, [r7, #0]
 804f476:	b2d2      	uxtb	r2, r2
 804f478:	701a      	strb	r2, [r3, #0]
}
 804f47a:	bf00      	nop
 804f47c:	370c      	adds	r7, #12
 804f47e:	46bd      	mov	sp, r7
 804f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f484:	4770      	bx	lr

0804f486 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 804f486:	b480      	push	{r7}
 804f488:	b085      	sub	sp, #20
 804f48a:	af00      	add	r7, sp, #0
 804f48c:	60f8      	str	r0, [r7, #12]
 804f48e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f492:	68fb      	ldr	r3, [r7, #12]
 804f494:	1c5a      	adds	r2, r3, #1
 804f496:	60fa      	str	r2, [r7, #12]
 804f498:	783a      	ldrb	r2, [r7, #0]
 804f49a:	701a      	strb	r2, [r3, #0]
 804f49c:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f4a0:	f04f 0200 	mov.w	r2, #0
 804f4a4:	f04f 0300 	mov.w	r3, #0
 804f4a8:	0a02      	lsrs	r2, r0, #8
 804f4aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f4ae:	0a0b      	lsrs	r3, r1, #8
 804f4b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f4b4:	68fb      	ldr	r3, [r7, #12]
 804f4b6:	1c5a      	adds	r2, r3, #1
 804f4b8:	60fa      	str	r2, [r7, #12]
 804f4ba:	783a      	ldrb	r2, [r7, #0]
 804f4bc:	701a      	strb	r2, [r3, #0]
 804f4be:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f4c2:	f04f 0200 	mov.w	r2, #0
 804f4c6:	f04f 0300 	mov.w	r3, #0
 804f4ca:	0a02      	lsrs	r2, r0, #8
 804f4cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f4d0:	0a0b      	lsrs	r3, r1, #8
 804f4d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f4d6:	68fb      	ldr	r3, [r7, #12]
 804f4d8:	1c5a      	adds	r2, r3, #1
 804f4da:	60fa      	str	r2, [r7, #12]
 804f4dc:	783a      	ldrb	r2, [r7, #0]
 804f4de:	701a      	strb	r2, [r3, #0]
 804f4e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f4e4:	f04f 0200 	mov.w	r2, #0
 804f4e8:	f04f 0300 	mov.w	r3, #0
 804f4ec:	0a02      	lsrs	r2, r0, #8
 804f4ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f4f2:	0a0b      	lsrs	r3, r1, #8
 804f4f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f4f8:	68fb      	ldr	r3, [r7, #12]
 804f4fa:	1c5a      	adds	r2, r3, #1
 804f4fc:	60fa      	str	r2, [r7, #12]
 804f4fe:	783a      	ldrb	r2, [r7, #0]
 804f500:	701a      	strb	r2, [r3, #0]
 804f502:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f506:	f04f 0200 	mov.w	r2, #0
 804f50a:	f04f 0300 	mov.w	r3, #0
 804f50e:	0a02      	lsrs	r2, r0, #8
 804f510:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f514:	0a0b      	lsrs	r3, r1, #8
 804f516:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f51a:	68fb      	ldr	r3, [r7, #12]
 804f51c:	1c5a      	adds	r2, r3, #1
 804f51e:	60fa      	str	r2, [r7, #12]
 804f520:	783a      	ldrb	r2, [r7, #0]
 804f522:	701a      	strb	r2, [r3, #0]
 804f524:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f528:	f04f 0200 	mov.w	r2, #0
 804f52c:	f04f 0300 	mov.w	r3, #0
 804f530:	0a02      	lsrs	r2, r0, #8
 804f532:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f536:	0a0b      	lsrs	r3, r1, #8
 804f538:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f53c:	68fb      	ldr	r3, [r7, #12]
 804f53e:	1c5a      	adds	r2, r3, #1
 804f540:	60fa      	str	r2, [r7, #12]
 804f542:	783a      	ldrb	r2, [r7, #0]
 804f544:	701a      	strb	r2, [r3, #0]
 804f546:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f54a:	f04f 0200 	mov.w	r2, #0
 804f54e:	f04f 0300 	mov.w	r3, #0
 804f552:	0a02      	lsrs	r2, r0, #8
 804f554:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f558:	0a0b      	lsrs	r3, r1, #8
 804f55a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 804f55e:	68fb      	ldr	r3, [r7, #12]
 804f560:	1c5a      	adds	r2, r3, #1
 804f562:	60fa      	str	r2, [r7, #12]
 804f564:	783a      	ldrb	r2, [r7, #0]
 804f566:	701a      	strb	r2, [r3, #0]
 804f568:	e9d7 0100 	ldrd	r0, r1, [r7]
 804f56c:	f04f 0200 	mov.w	r2, #0
 804f570:	f04f 0300 	mov.w	r3, #0
 804f574:	0a02      	lsrs	r2, r0, #8
 804f576:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 804f57a:	0a0b      	lsrs	r3, r1, #8
 804f57c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 804f580:	68fb      	ldr	r3, [r7, #12]
 804f582:	1c5a      	adds	r2, r3, #1
 804f584:	60fa      	str	r2, [r7, #12]
 804f586:	783a      	ldrb	r2, [r7, #0]
 804f588:	701a      	strb	r2, [r3, #0]
}
 804f58a:	bf00      	nop
 804f58c:	3714      	adds	r7, #20
 804f58e:	46bd      	mov	sp, r7
 804f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f594:	4770      	bx	lr

0804f596 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 804f596:	b480      	push	{r7}
 804f598:	b083      	sub	sp, #12
 804f59a:	af00      	add	r7, sp, #0
 804f59c:	4603      	mov	r3, r0
 804f59e:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 804f5a0:	79fb      	ldrb	r3, [r7, #7]
 804f5a2:	2b00      	cmp	r3, #0
 804f5a4:	d001      	beq.n	804f5aa <dbc_1st+0x14>
 804f5a6:	2300      	movs	r3, #0
 804f5a8:	e000      	b.n	804f5ac <dbc_1st+0x16>
#endif
	return 0;
 804f5aa:	2300      	movs	r3, #0
}
 804f5ac:	4618      	mov	r0, r3
 804f5ae:	370c      	adds	r7, #12
 804f5b0:	46bd      	mov	sp, r7
 804f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f5b6:	4770      	bx	lr

0804f5b8 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 804f5b8:	b480      	push	{r7}
 804f5ba:	b083      	sub	sp, #12
 804f5bc:	af00      	add	r7, sp, #0
 804f5be:	4603      	mov	r3, r0
 804f5c0:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 804f5c2:	79fb      	ldrb	r3, [r7, #7]
 804f5c4:	2b00      	cmp	r3, #0
 804f5c6:	d001      	beq.n	804f5cc <dbc_2nd+0x14>
 804f5c8:	2300      	movs	r3, #0
 804f5ca:	e000      	b.n	804f5ce <dbc_2nd+0x16>
#endif
	return 0;
 804f5cc:	2300      	movs	r3, #0
}
 804f5ce:	4618      	mov	r0, r3
 804f5d0:	370c      	adds	r7, #12
 804f5d2:	46bd      	mov	sp, r7
 804f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f5d8:	4770      	bx	lr

0804f5da <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 804f5da:	b580      	push	{r7, lr}
 804f5dc:	b086      	sub	sp, #24
 804f5de:	af00      	add	r7, sp, #0
 804f5e0:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 804f5e2:	687b      	ldr	r3, [r7, #4]
 804f5e4:	681b      	ldr	r3, [r3, #0]
 804f5e6:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 804f5e8:	697b      	ldr	r3, [r7, #20]
 804f5ea:	1c5a      	adds	r2, r3, #1
 804f5ec:	617a      	str	r2, [r7, #20]
 804f5ee:	781b      	ldrb	r3, [r3, #0]
 804f5f0:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 804f5f2:	8a7b      	ldrh	r3, [r7, #18]
 804f5f4:	b2db      	uxtb	r3, r3
 804f5f6:	4618      	mov	r0, r3
 804f5f8:	f7ff ffcd 	bl	804f596 <dbc_1st>
 804f5fc:	4603      	mov	r3, r0
 804f5fe:	2b00      	cmp	r3, #0
 804f600:	d015      	beq.n	804f62e <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 804f602:	697b      	ldr	r3, [r7, #20]
 804f604:	1c5a      	adds	r2, r3, #1
 804f606:	617a      	str	r2, [r7, #20]
 804f608:	781b      	ldrb	r3, [r3, #0]
 804f60a:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 804f60c:	7c7b      	ldrb	r3, [r7, #17]
 804f60e:	4618      	mov	r0, r3
 804f610:	f7ff ffd2 	bl	804f5b8 <dbc_2nd>
 804f614:	4603      	mov	r3, r0
 804f616:	2b00      	cmp	r3, #0
 804f618:	d102      	bne.n	804f620 <tchar2uni+0x46>
 804f61a:	f04f 33ff 	mov.w	r3, #4294967295
 804f61e:	e01d      	b.n	804f65c <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 804f620:	8a7b      	ldrh	r3, [r7, #18]
 804f622:	021b      	lsls	r3, r3, #8
 804f624:	b29a      	uxth	r2, r3
 804f626:	7c7b      	ldrb	r3, [r7, #17]
 804f628:	b29b      	uxth	r3, r3
 804f62a:	4413      	add	r3, r2
 804f62c:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 804f62e:	8a7b      	ldrh	r3, [r7, #18]
 804f630:	2b00      	cmp	r3, #0
 804f632:	d00d      	beq.n	804f650 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 804f634:	8a7b      	ldrh	r3, [r7, #18]
 804f636:	f240 3152 	movw	r1, #850	@ 0x352
 804f63a:	4618      	mov	r0, r3
 804f63c:	f005 fab0 	bl	8054ba0 <ff_oem2uni>
 804f640:	4603      	mov	r3, r0
 804f642:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 804f644:	8a7b      	ldrh	r3, [r7, #18]
 804f646:	2b00      	cmp	r3, #0
 804f648:	d102      	bne.n	804f650 <tchar2uni+0x76>
 804f64a:	f04f 33ff 	mov.w	r3, #4294967295
 804f64e:	e005      	b.n	804f65c <tchar2uni+0x82>
	}
	uc = wc;
 804f650:	8a7b      	ldrh	r3, [r7, #18]
 804f652:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 804f654:	687b      	ldr	r3, [r7, #4]
 804f656:	697a      	ldr	r2, [r7, #20]
 804f658:	601a      	str	r2, [r3, #0]
	return uc;
 804f65a:	68fb      	ldr	r3, [r7, #12]
}
 804f65c:	4618      	mov	r0, r3
 804f65e:	3718      	adds	r7, #24
 804f660:	46bd      	mov	sp, r7
 804f662:	bd80      	pop	{r7, pc}

0804f664 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 804f664:	b580      	push	{r7, lr}
 804f666:	b086      	sub	sp, #24
 804f668:	af00      	add	r7, sp, #0
 804f66a:	60f8      	str	r0, [r7, #12]
 804f66c:	60b9      	str	r1, [r7, #8]
 804f66e:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 804f670:	f240 3152 	movw	r1, #850	@ 0x352
 804f674:	68f8      	ldr	r0, [r7, #12]
 804f676:	f005 fa59 	bl	8054b2c <ff_uni2oem>
 804f67a:	4603      	mov	r3, r0
 804f67c:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 804f67e:	8afb      	ldrh	r3, [r7, #22]
 804f680:	2bff      	cmp	r3, #255	@ 0xff
 804f682:	d914      	bls.n	804f6ae <put_utf+0x4a>
		if (szb < 2) return 0;
 804f684:	687b      	ldr	r3, [r7, #4]
 804f686:	2b01      	cmp	r3, #1
 804f688:	d801      	bhi.n	804f68e <put_utf+0x2a>
 804f68a:	2300      	movs	r3, #0
 804f68c:	e01e      	b.n	804f6cc <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 804f68e:	8afb      	ldrh	r3, [r7, #22]
 804f690:	0a1b      	lsrs	r3, r3, #8
 804f692:	b299      	uxth	r1, r3
 804f694:	68bb      	ldr	r3, [r7, #8]
 804f696:	1c5a      	adds	r2, r3, #1
 804f698:	60ba      	str	r2, [r7, #8]
 804f69a:	b2ca      	uxtb	r2, r1
 804f69c:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 804f69e:	68bb      	ldr	r3, [r7, #8]
 804f6a0:	1c5a      	adds	r2, r3, #1
 804f6a2:	60ba      	str	r2, [r7, #8]
 804f6a4:	8afa      	ldrh	r2, [r7, #22]
 804f6a6:	b2d2      	uxtb	r2, r2
 804f6a8:	701a      	strb	r2, [r3, #0]
		return 2;
 804f6aa:	2302      	movs	r3, #2
 804f6ac:	e00e      	b.n	804f6cc <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 804f6ae:	8afb      	ldrh	r3, [r7, #22]
 804f6b0:	2b00      	cmp	r3, #0
 804f6b2:	d002      	beq.n	804f6ba <put_utf+0x56>
 804f6b4:	687b      	ldr	r3, [r7, #4]
 804f6b6:	2b00      	cmp	r3, #0
 804f6b8:	d101      	bne.n	804f6be <put_utf+0x5a>
 804f6ba:	2300      	movs	r3, #0
 804f6bc:	e006      	b.n	804f6cc <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 804f6be:	68bb      	ldr	r3, [r7, #8]
 804f6c0:	1c5a      	adds	r2, r3, #1
 804f6c2:	60ba      	str	r2, [r7, #8]
 804f6c4:	8afa      	ldrh	r2, [r7, #22]
 804f6c6:	b2d2      	uxtb	r2, r2
 804f6c8:	701a      	strb	r2, [r3, #0]
	return 1;
 804f6ca:	2301      	movs	r3, #1
#endif
}
 804f6cc:	4618      	mov	r0, r3
 804f6ce:	3718      	adds	r7, #24
 804f6d0:	46bd      	mov	sp, r7
 804f6d2:	bd80      	pop	{r7, pc}

0804f6d4 <lock_volume>:

static int lock_volume (	/* 1:Ok, 0:timeout */
	FATFS* fs,				/* Filesystem object to lock */
	int syslock				/* System lock required */
)
{
 804f6d4:	b580      	push	{r7, lr}
 804f6d6:	b084      	sub	sp, #16
 804f6d8:	af00      	add	r7, sp, #0
 804f6da:	6078      	str	r0, [r7, #4]
 804f6dc:	6039      	str	r1, [r7, #0]
	int rv;


#if FF_FS_LOCK
	rv = ff_mutex_take(fs->ldrv);	/* Lock the volume */
 804f6de:	687b      	ldr	r3, [r7, #4]
 804f6e0:	789b      	ldrb	r3, [r3, #2]
 804f6e2:	4618      	mov	r0, r3
 804f6e4:	f005 fb4a 	bl	8054d7c <ff_mutex_take>
 804f6e8:	60f8      	str	r0, [r7, #12]
	if (rv && syslock) {			/* System lock reqiered? */
 804f6ea:	68fb      	ldr	r3, [r7, #12]
 804f6ec:	2b00      	cmp	r3, #0
 804f6ee:	d016      	beq.n	804f71e <lock_volume+0x4a>
 804f6f0:	683b      	ldr	r3, [r7, #0]
 804f6f2:	2b00      	cmp	r3, #0
 804f6f4:	d013      	beq.n	804f71e <lock_volume+0x4a>
		rv = ff_mutex_take(FF_VOLUMES);	/* Lock the system */
 804f6f6:	2001      	movs	r0, #1
 804f6f8:	f005 fb40 	bl	8054d7c <ff_mutex_take>
 804f6fc:	60f8      	str	r0, [r7, #12]
		if (rv) {
 804f6fe:	68fb      	ldr	r3, [r7, #12]
 804f700:	2b00      	cmp	r3, #0
 804f702:	d007      	beq.n	804f714 <lock_volume+0x40>
			SysLockVolume = fs->ldrv;
 804f704:	687b      	ldr	r3, [r7, #4]
 804f706:	789a      	ldrb	r2, [r3, #2]
 804f708:	4b07      	ldr	r3, [pc, #28]	@ (804f728 <lock_volume+0x54>)
 804f70a:	701a      	strb	r2, [r3, #0]
			SysLock = 2;				/* System lock succeeded */
 804f70c:	4b07      	ldr	r3, [pc, #28]	@ (804f72c <lock_volume+0x58>)
 804f70e:	2202      	movs	r2, #2
 804f710:	701a      	strb	r2, [r3, #0]
 804f712:	e004      	b.n	804f71e <lock_volume+0x4a>
		} else {
			ff_mutex_give(fs->ldrv);	/* Failed system lock */
 804f714:	687b      	ldr	r3, [r7, #4]
 804f716:	789b      	ldrb	r3, [r3, #2]
 804f718:	4618      	mov	r0, r3
 804f71a:	f005 fb49 	bl	8054db0 <ff_mutex_give>
		}
	}
#else
	rv = syslock ? ff_mutex_take(fs->ldrv) : ff_mutex_take(fs->ldrv);	/* Lock the volume (this is to prevent compiler warning) */
#endif
	return rv;
 804f71e:	68fb      	ldr	r3, [r7, #12]
}
 804f720:	4618      	mov	r0, r3
 804f722:	3710      	adds	r7, #16
 804f724:	46bd      	mov	sp, r7
 804f726:	bd80      	pop	{r7, pc}
 804f728:	2402d78d 	.word	0x2402d78d
 804f72c:	2402d78c 	.word	0x2402d78c

0804f730 <unlock_volume>:

static void unlock_volume (
	FATFS* fs,		/* Filesystem object */
	FRESULT res		/* Result code to be returned */
)
{
 804f730:	b580      	push	{r7, lr}
 804f732:	b082      	sub	sp, #8
 804f734:	af00      	add	r7, sp, #0
 804f736:	6078      	str	r0, [r7, #4]
 804f738:	460b      	mov	r3, r1
 804f73a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 804f73c:	687b      	ldr	r3, [r7, #4]
 804f73e:	2b00      	cmp	r3, #0
 804f740:	d01f      	beq.n	804f782 <unlock_volume+0x52>
 804f742:	78fb      	ldrb	r3, [r7, #3]
 804f744:	2b0c      	cmp	r3, #12
 804f746:	d01c      	beq.n	804f782 <unlock_volume+0x52>
 804f748:	78fb      	ldrb	r3, [r7, #3]
 804f74a:	2b0b      	cmp	r3, #11
 804f74c:	d019      	beq.n	804f782 <unlock_volume+0x52>
 804f74e:	78fb      	ldrb	r3, [r7, #3]
 804f750:	2b0f      	cmp	r3, #15
 804f752:	d016      	beq.n	804f782 <unlock_volume+0x52>
#if FF_FS_LOCK
		if (SysLock == 2 && SysLockVolume == fs->ldrv) {	/* Unlock system if it has been locked by this task */
 804f754:	4b0d      	ldr	r3, [pc, #52]	@ (804f78c <unlock_volume+0x5c>)
 804f756:	781b      	ldrb	r3, [r3, #0]
 804f758:	b2db      	uxtb	r3, r3
 804f75a:	2b02      	cmp	r3, #2
 804f75c:	d10c      	bne.n	804f778 <unlock_volume+0x48>
 804f75e:	687b      	ldr	r3, [r7, #4]
 804f760:	789a      	ldrb	r2, [r3, #2]
 804f762:	4b0b      	ldr	r3, [pc, #44]	@ (804f790 <unlock_volume+0x60>)
 804f764:	781b      	ldrb	r3, [r3, #0]
 804f766:	b2db      	uxtb	r3, r3
 804f768:	429a      	cmp	r2, r3
 804f76a:	d105      	bne.n	804f778 <unlock_volume+0x48>
			SysLock = 1;
 804f76c:	4b07      	ldr	r3, [pc, #28]	@ (804f78c <unlock_volume+0x5c>)
 804f76e:	2201      	movs	r2, #1
 804f770:	701a      	strb	r2, [r3, #0]
			ff_mutex_give(FF_VOLUMES);
 804f772:	2001      	movs	r0, #1
 804f774:	f005 fb1c 	bl	8054db0 <ff_mutex_give>
		}
#endif
		ff_mutex_give(fs->ldrv);	/* Unlock the volume */
 804f778:	687b      	ldr	r3, [r7, #4]
 804f77a:	789b      	ldrb	r3, [r3, #2]
 804f77c:	4618      	mov	r0, r3
 804f77e:	f005 fb17 	bl	8054db0 <ff_mutex_give>
	}
}
 804f782:	bf00      	nop
 804f784:	3708      	adds	r7, #8
 804f786:	46bd      	mov	sp, r7
 804f788:	bd80      	pop	{r7, pc}
 804f78a:	bf00      	nop
 804f78c:	2402d78c 	.word	0x2402d78c
 804f790:	2402d78d 	.word	0x2402d78d

0804f794 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 804f794:	b480      	push	{r7}
 804f796:	b085      	sub	sp, #20
 804f798:	af00      	add	r7, sp, #0
 804f79a:	6078      	str	r0, [r7, #4]
 804f79c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 804f79e:	2300      	movs	r3, #0
 804f7a0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 804f7a2:	2300      	movs	r3, #0
 804f7a4:	60fb      	str	r3, [r7, #12]
 804f7a6:	e029      	b.n	804f7fc <chk_share+0x68>
		if (Files[i].fs) {	/* Existing entry */
 804f7a8:	4a27      	ldr	r2, [pc, #156]	@ (804f848 <chk_share+0xb4>)
 804f7aa:	68fb      	ldr	r3, [r7, #12]
 804f7ac:	011b      	lsls	r3, r3, #4
 804f7ae:	4413      	add	r3, r2
 804f7b0:	681b      	ldr	r3, [r3, #0]
 804f7b2:	2b00      	cmp	r3, #0
 804f7b4:	d01d      	beq.n	804f7f2 <chk_share+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 804f7b6:	4a24      	ldr	r2, [pc, #144]	@ (804f848 <chk_share+0xb4>)
 804f7b8:	68fb      	ldr	r3, [r7, #12]
 804f7ba:	011b      	lsls	r3, r3, #4
 804f7bc:	4413      	add	r3, r2
 804f7be:	681a      	ldr	r2, [r3, #0]
 804f7c0:	687b      	ldr	r3, [r7, #4]
 804f7c2:	681b      	ldr	r3, [r3, #0]
 804f7c4:	429a      	cmp	r2, r3
 804f7c6:	d116      	bne.n	804f7f6 <chk_share+0x62>
				Files[i].clu == dp->obj.sclust &&
 804f7c8:	4a1f      	ldr	r2, [pc, #124]	@ (804f848 <chk_share+0xb4>)
 804f7ca:	68fb      	ldr	r3, [r7, #12]
 804f7cc:	011b      	lsls	r3, r3, #4
 804f7ce:	4413      	add	r3, r2
 804f7d0:	3304      	adds	r3, #4
 804f7d2:	681a      	ldr	r2, [r3, #0]
 804f7d4:	687b      	ldr	r3, [r7, #4]
 804f7d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 804f7d8:	429a      	cmp	r2, r3
 804f7da:	d10c      	bne.n	804f7f6 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 804f7dc:	4a1a      	ldr	r2, [pc, #104]	@ (804f848 <chk_share+0xb4>)
 804f7de:	68fb      	ldr	r3, [r7, #12]
 804f7e0:	011b      	lsls	r3, r3, #4
 804f7e2:	4413      	add	r3, r2
 804f7e4:	3308      	adds	r3, #8
 804f7e6:	681a      	ldr	r2, [r3, #0]
 804f7e8:	687b      	ldr	r3, [r7, #4]
 804f7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 804f7ec:	429a      	cmp	r2, r3
 804f7ee:	d102      	bne.n	804f7f6 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 804f7f0:	e007      	b.n	804f802 <chk_share+0x6e>
		} else {			/* Blank entry */
			be = 1;
 804f7f2:	2301      	movs	r3, #1
 804f7f4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 804f7f6:	68fb      	ldr	r3, [r7, #12]
 804f7f8:	3301      	adds	r3, #1
 804f7fa:	60fb      	str	r3, [r7, #12]
 804f7fc:	68fb      	ldr	r3, [r7, #12]
 804f7fe:	2b03      	cmp	r3, #3
 804f800:	d9d2      	bls.n	804f7a8 <chk_share+0x14>
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 804f802:	68fb      	ldr	r3, [r7, #12]
 804f804:	2b04      	cmp	r3, #4
 804f806:	d109      	bne.n	804f81c <chk_share+0x88>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 804f808:	68bb      	ldr	r3, [r7, #8]
 804f80a:	2b00      	cmp	r3, #0
 804f80c:	d104      	bne.n	804f818 <chk_share+0x84>
 804f80e:	683b      	ldr	r3, [r7, #0]
 804f810:	2b02      	cmp	r3, #2
 804f812:	d001      	beq.n	804f818 <chk_share+0x84>
 804f814:	2312      	movs	r3, #18
 804f816:	e010      	b.n	804f83a <chk_share+0xa6>
 804f818:	2300      	movs	r3, #0
 804f81a:	e00e      	b.n	804f83a <chk_share+0xa6>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 804f81c:	683b      	ldr	r3, [r7, #0]
 804f81e:	2b00      	cmp	r3, #0
 804f820:	d108      	bne.n	804f834 <chk_share+0xa0>
 804f822:	4a09      	ldr	r2, [pc, #36]	@ (804f848 <chk_share+0xb4>)
 804f824:	68fb      	ldr	r3, [r7, #12]
 804f826:	011b      	lsls	r3, r3, #4
 804f828:	4413      	add	r3, r2
 804f82a:	330c      	adds	r3, #12
 804f82c:	681b      	ldr	r3, [r3, #0]
 804f82e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804f832:	d101      	bne.n	804f838 <chk_share+0xa4>
 804f834:	2310      	movs	r3, #16
 804f836:	e000      	b.n	804f83a <chk_share+0xa6>
 804f838:	2300      	movs	r3, #0
}
 804f83a:	4618      	mov	r0, r3
 804f83c:	3714      	adds	r7, #20
 804f83e:	46bd      	mov	sp, r7
 804f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f844:	4770      	bx	lr
 804f846:	bf00      	nop
 804f848:	2402d74c 	.word	0x2402d74c

0804f84c <enq_share>:


static int enq_share (void)	/* Check if an entry is available for a new object */
{
 804f84c:	b480      	push	{r7}
 804f84e:	b083      	sub	sp, #12
 804f850:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 804f852:	2300      	movs	r3, #0
 804f854:	607b      	str	r3, [r7, #4]
 804f856:	e002      	b.n	804f85e <enq_share+0x12>
 804f858:	687b      	ldr	r3, [r7, #4]
 804f85a:	3301      	adds	r3, #1
 804f85c:	607b      	str	r3, [r7, #4]
 804f85e:	687b      	ldr	r3, [r7, #4]
 804f860:	2b03      	cmp	r3, #3
 804f862:	d806      	bhi.n	804f872 <enq_share+0x26>
 804f864:	4a09      	ldr	r2, [pc, #36]	@ (804f88c <enq_share+0x40>)
 804f866:	687b      	ldr	r3, [r7, #4]
 804f868:	011b      	lsls	r3, r3, #4
 804f86a:	4413      	add	r3, r2
 804f86c:	681b      	ldr	r3, [r3, #0]
 804f86e:	2b00      	cmp	r3, #0
 804f870:	d1f2      	bne.n	804f858 <enq_share+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 804f872:	687b      	ldr	r3, [r7, #4]
 804f874:	2b04      	cmp	r3, #4
 804f876:	bf14      	ite	ne
 804f878:	2301      	movne	r3, #1
 804f87a:	2300      	moveq	r3, #0
 804f87c:	b2db      	uxtb	r3, r3
}
 804f87e:	4618      	mov	r0, r3
 804f880:	370c      	adds	r7, #12
 804f882:	46bd      	mov	sp, r7
 804f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f888:	4770      	bx	lr
 804f88a:	bf00      	nop
 804f88c:	2402d74c 	.word	0x2402d74c

0804f890 <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 804f890:	b480      	push	{r7}
 804f892:	b085      	sub	sp, #20
 804f894:	af00      	add	r7, sp, #0
 804f896:	6078      	str	r0, [r7, #4]
 804f898:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 804f89a:	2300      	movs	r3, #0
 804f89c:	60fb      	str	r3, [r7, #12]
 804f89e:	e01f      	b.n	804f8e0 <inc_share+0x50>
		if (Files[i].fs == dp->obj.fs
 804f8a0:	4a41      	ldr	r2, [pc, #260]	@ (804f9a8 <inc_share+0x118>)
 804f8a2:	68fb      	ldr	r3, [r7, #12]
 804f8a4:	011b      	lsls	r3, r3, #4
 804f8a6:	4413      	add	r3, r2
 804f8a8:	681a      	ldr	r2, [r3, #0]
 804f8aa:	687b      	ldr	r3, [r7, #4]
 804f8ac:	681b      	ldr	r3, [r3, #0]
 804f8ae:	429a      	cmp	r2, r3
 804f8b0:	d113      	bne.n	804f8da <inc_share+0x4a>
		 && Files[i].clu == dp->obj.sclust
 804f8b2:	4a3d      	ldr	r2, [pc, #244]	@ (804f9a8 <inc_share+0x118>)
 804f8b4:	68fb      	ldr	r3, [r7, #12]
 804f8b6:	011b      	lsls	r3, r3, #4
 804f8b8:	4413      	add	r3, r2
 804f8ba:	3304      	adds	r3, #4
 804f8bc:	681a      	ldr	r2, [r3, #0]
 804f8be:	687b      	ldr	r3, [r7, #4]
 804f8c0:	689b      	ldr	r3, [r3, #8]
 804f8c2:	429a      	cmp	r2, r3
 804f8c4:	d109      	bne.n	804f8da <inc_share+0x4a>
		 && Files[i].ofs == dp->dptr) break;
 804f8c6:	4a38      	ldr	r2, [pc, #224]	@ (804f9a8 <inc_share+0x118>)
 804f8c8:	68fb      	ldr	r3, [r7, #12]
 804f8ca:	011b      	lsls	r3, r3, #4
 804f8cc:	4413      	add	r3, r2
 804f8ce:	3308      	adds	r3, #8
 804f8d0:	681a      	ldr	r2, [r3, #0]
 804f8d2:	687b      	ldr	r3, [r7, #4]
 804f8d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804f8d6:	429a      	cmp	r2, r3
 804f8d8:	d006      	beq.n	804f8e8 <inc_share+0x58>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 804f8da:	68fb      	ldr	r3, [r7, #12]
 804f8dc:	3301      	adds	r3, #1
 804f8de:	60fb      	str	r3, [r7, #12]
 804f8e0:	68fb      	ldr	r3, [r7, #12]
 804f8e2:	2b03      	cmp	r3, #3
 804f8e4:	d9dc      	bls.n	804f8a0 <inc_share+0x10>
 804f8e6:	e000      	b.n	804f8ea <inc_share+0x5a>
		 && Files[i].ofs == dp->dptr) break;
 804f8e8:	bf00      	nop
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 804f8ea:	68fb      	ldr	r3, [r7, #12]
 804f8ec:	2b04      	cmp	r3, #4
 804f8ee:	d132      	bne.n	804f956 <inc_share+0xc6>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 804f8f0:	2300      	movs	r3, #0
 804f8f2:	60fb      	str	r3, [r7, #12]
 804f8f4:	e002      	b.n	804f8fc <inc_share+0x6c>
 804f8f6:	68fb      	ldr	r3, [r7, #12]
 804f8f8:	3301      	adds	r3, #1
 804f8fa:	60fb      	str	r3, [r7, #12]
 804f8fc:	68fb      	ldr	r3, [r7, #12]
 804f8fe:	2b03      	cmp	r3, #3
 804f900:	d806      	bhi.n	804f910 <inc_share+0x80>
 804f902:	4a29      	ldr	r2, [pc, #164]	@ (804f9a8 <inc_share+0x118>)
 804f904:	68fb      	ldr	r3, [r7, #12]
 804f906:	011b      	lsls	r3, r3, #4
 804f908:	4413      	add	r3, r2
 804f90a:	681b      	ldr	r3, [r3, #0]
 804f90c:	2b00      	cmp	r3, #0
 804f90e:	d1f2      	bne.n	804f8f6 <inc_share+0x66>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 804f910:	68fb      	ldr	r3, [r7, #12]
 804f912:	2b04      	cmp	r3, #4
 804f914:	d101      	bne.n	804f91a <inc_share+0x8a>
 804f916:	2300      	movs	r3, #0
 804f918:	e03f      	b.n	804f99a <inc_share+0x10a>
		Files[i].fs = dp->obj.fs;
 804f91a:	687b      	ldr	r3, [r7, #4]
 804f91c:	681a      	ldr	r2, [r3, #0]
 804f91e:	4922      	ldr	r1, [pc, #136]	@ (804f9a8 <inc_share+0x118>)
 804f920:	68fb      	ldr	r3, [r7, #12]
 804f922:	011b      	lsls	r3, r3, #4
 804f924:	440b      	add	r3, r1
 804f926:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 804f928:	687b      	ldr	r3, [r7, #4]
 804f92a:	689a      	ldr	r2, [r3, #8]
 804f92c:	491e      	ldr	r1, [pc, #120]	@ (804f9a8 <inc_share+0x118>)
 804f92e:	68fb      	ldr	r3, [r7, #12]
 804f930:	011b      	lsls	r3, r3, #4
 804f932:	440b      	add	r3, r1
 804f934:	3304      	adds	r3, #4
 804f936:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 804f938:	687b      	ldr	r3, [r7, #4]
 804f93a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 804f93c:	491a      	ldr	r1, [pc, #104]	@ (804f9a8 <inc_share+0x118>)
 804f93e:	68fb      	ldr	r3, [r7, #12]
 804f940:	011b      	lsls	r3, r3, #4
 804f942:	440b      	add	r3, r1
 804f944:	3308      	adds	r3, #8
 804f946:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 804f948:	4a17      	ldr	r2, [pc, #92]	@ (804f9a8 <inc_share+0x118>)
 804f94a:	68fb      	ldr	r3, [r7, #12]
 804f94c:	011b      	lsls	r3, r3, #4
 804f94e:	4413      	add	r3, r2
 804f950:	330c      	adds	r3, #12
 804f952:	2200      	movs	r2, #0
 804f954:	601a      	str	r2, [r3, #0]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 804f956:	683b      	ldr	r3, [r7, #0]
 804f958:	2b00      	cmp	r3, #0
 804f95a:	dd09      	ble.n	804f970 <inc_share+0xe0>
 804f95c:	4a12      	ldr	r2, [pc, #72]	@ (804f9a8 <inc_share+0x118>)
 804f95e:	68fb      	ldr	r3, [r7, #12]
 804f960:	011b      	lsls	r3, r3, #4
 804f962:	4413      	add	r3, r2
 804f964:	330c      	adds	r3, #12
 804f966:	681b      	ldr	r3, [r3, #0]
 804f968:	2b00      	cmp	r3, #0
 804f96a:	d001      	beq.n	804f970 <inc_share+0xe0>
 804f96c:	2300      	movs	r3, #0
 804f96e:	e014      	b.n	804f99a <inc_share+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 804f970:	683b      	ldr	r3, [r7, #0]
 804f972:	2b00      	cmp	r3, #0
 804f974:	d107      	bne.n	804f986 <inc_share+0xf6>
 804f976:	4a0c      	ldr	r2, [pc, #48]	@ (804f9a8 <inc_share+0x118>)
 804f978:	68fb      	ldr	r3, [r7, #12]
 804f97a:	011b      	lsls	r3, r3, #4
 804f97c:	4413      	add	r3, r2
 804f97e:	330c      	adds	r3, #12
 804f980:	681b      	ldr	r3, [r3, #0]
 804f982:	3301      	adds	r3, #1
 804f984:	e001      	b.n	804f98a <inc_share+0xfa>
 804f986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 804f98a:	4907      	ldr	r1, [pc, #28]	@ (804f9a8 <inc_share+0x118>)
 804f98c:	68fa      	ldr	r2, [r7, #12]
 804f98e:	0112      	lsls	r2, r2, #4
 804f990:	440a      	add	r2, r1
 804f992:	320c      	adds	r2, #12
 804f994:	6013      	str	r3, [r2, #0]

	return i + 1;	/* Index number origin from 1 */
 804f996:	68fb      	ldr	r3, [r7, #12]
 804f998:	3301      	adds	r3, #1
}
 804f99a:	4618      	mov	r0, r3
 804f99c:	3714      	adds	r7, #20
 804f99e:	46bd      	mov	sp, r7
 804f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f9a4:	4770      	bx	lr
 804f9a6:	bf00      	nop
 804f9a8:	2402d74c 	.word	0x2402d74c

0804f9ac <dec_share>:


static FRESULT dec_share (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 804f9ac:	b480      	push	{r7}
 804f9ae:	b085      	sub	sp, #20
 804f9b0:	af00      	add	r7, sp, #0
 804f9b2:	6078      	str	r0, [r7, #4]
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 804f9b4:	687b      	ldr	r3, [r7, #4]
 804f9b6:	3b01      	subs	r3, #1
 804f9b8:	607b      	str	r3, [r7, #4]
 804f9ba:	687b      	ldr	r3, [r7, #4]
 804f9bc:	2b03      	cmp	r3, #3
 804f9be:	d825      	bhi.n	804fa0c <dec_share+0x60>
		n = Files[i].ctr;
 804f9c0:	4a17      	ldr	r2, [pc, #92]	@ (804fa20 <dec_share+0x74>)
 804f9c2:	687b      	ldr	r3, [r7, #4]
 804f9c4:	011b      	lsls	r3, r3, #4
 804f9c6:	4413      	add	r3, r2
 804f9c8:	330c      	adds	r3, #12
 804f9ca:	681b      	ldr	r3, [r3, #0]
 804f9cc:	60fb      	str	r3, [r7, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 804f9ce:	68fb      	ldr	r3, [r7, #12]
 804f9d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804f9d4:	d101      	bne.n	804f9da <dec_share+0x2e>
 804f9d6:	2300      	movs	r3, #0
 804f9d8:	60fb      	str	r3, [r7, #12]
		if (n > 0) n--;			/* Decrement read mode open count */
 804f9da:	68fb      	ldr	r3, [r7, #12]
 804f9dc:	2b00      	cmp	r3, #0
 804f9de:	d002      	beq.n	804f9e6 <dec_share+0x3a>
 804f9e0:	68fb      	ldr	r3, [r7, #12]
 804f9e2:	3b01      	subs	r3, #1
 804f9e4:	60fb      	str	r3, [r7, #12]
		Files[i].ctr = n;
 804f9e6:	4a0e      	ldr	r2, [pc, #56]	@ (804fa20 <dec_share+0x74>)
 804f9e8:	687b      	ldr	r3, [r7, #4]
 804f9ea:	011b      	lsls	r3, r3, #4
 804f9ec:	4413      	add	r3, r2
 804f9ee:	330c      	adds	r3, #12
 804f9f0:	68fa      	ldr	r2, [r7, #12]
 804f9f2:	601a      	str	r2, [r3, #0]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 804f9f4:	68fb      	ldr	r3, [r7, #12]
 804f9f6:	2b00      	cmp	r3, #0
 804f9f8:	d105      	bne.n	804fa06 <dec_share+0x5a>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 804f9fa:	4a09      	ldr	r2, [pc, #36]	@ (804fa20 <dec_share+0x74>)
 804f9fc:	687b      	ldr	r3, [r7, #4]
 804f9fe:	011b      	lsls	r3, r3, #4
 804fa00:	4413      	add	r3, r2
 804fa02:	2200      	movs	r2, #0
 804fa04:	601a      	str	r2, [r3, #0]
		}
		res = FR_OK;
 804fa06:	2300      	movs	r3, #0
 804fa08:	72fb      	strb	r3, [r7, #11]
 804fa0a:	e001      	b.n	804fa10 <dec_share+0x64>
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 804fa0c:	2302      	movs	r3, #2
 804fa0e:	72fb      	strb	r3, [r7, #11]
	}
	return res;
 804fa10:	7afb      	ldrb	r3, [r7, #11]
}
 804fa12:	4618      	mov	r0, r3
 804fa14:	3714      	adds	r7, #20
 804fa16:	46bd      	mov	sp, r7
 804fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fa1c:	4770      	bx	lr
 804fa1e:	bf00      	nop
 804fa20:	2402d74c 	.word	0x2402d74c

0804fa24 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 804fa24:	b480      	push	{r7}
 804fa26:	b085      	sub	sp, #20
 804fa28:	af00      	add	r7, sp, #0
 804fa2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 804fa2c:	2300      	movs	r3, #0
 804fa2e:	60fb      	str	r3, [r7, #12]
 804fa30:	e010      	b.n	804fa54 <clear_share+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 804fa32:	4a0d      	ldr	r2, [pc, #52]	@ (804fa68 <clear_share+0x44>)
 804fa34:	68fb      	ldr	r3, [r7, #12]
 804fa36:	011b      	lsls	r3, r3, #4
 804fa38:	4413      	add	r3, r2
 804fa3a:	681b      	ldr	r3, [r3, #0]
 804fa3c:	687a      	ldr	r2, [r7, #4]
 804fa3e:	429a      	cmp	r2, r3
 804fa40:	d105      	bne.n	804fa4e <clear_share+0x2a>
 804fa42:	4a09      	ldr	r2, [pc, #36]	@ (804fa68 <clear_share+0x44>)
 804fa44:	68fb      	ldr	r3, [r7, #12]
 804fa46:	011b      	lsls	r3, r3, #4
 804fa48:	4413      	add	r3, r2
 804fa4a:	2200      	movs	r2, #0
 804fa4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FF_FS_LOCK; i++) {
 804fa4e:	68fb      	ldr	r3, [r7, #12]
 804fa50:	3301      	adds	r3, #1
 804fa52:	60fb      	str	r3, [r7, #12]
 804fa54:	68fb      	ldr	r3, [r7, #12]
 804fa56:	2b03      	cmp	r3, #3
 804fa58:	d9eb      	bls.n	804fa32 <clear_share+0xe>
	}
}
 804fa5a:	bf00      	nop
 804fa5c:	bf00      	nop
 804fa5e:	3714      	adds	r7, #20
 804fa60:	46bd      	mov	sp, r7
 804fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fa66:	4770      	bx	lr
 804fa68:	2402d74c 	.word	0x2402d74c

0804fa6c <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 804fa6c:	b580      	push	{r7, lr}
 804fa6e:	b084      	sub	sp, #16
 804fa70:	af00      	add	r7, sp, #0
 804fa72:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 804fa74:	2300      	movs	r3, #0
 804fa76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 804fa78:	687b      	ldr	r3, [r7, #4]
 804fa7a:	791b      	ldrb	r3, [r3, #4]
 804fa7c:	2b00      	cmp	r3, #0
 804fa7e:	d02c      	beq.n	804fada <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 804fa80:	687b      	ldr	r3, [r7, #4]
 804fa82:	7858      	ldrb	r0, [r3, #1]
 804fa84:	687b      	ldr	r3, [r7, #4]
 804fa86:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 804fa8a:	687b      	ldr	r3, [r7, #4]
 804fa8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 804fa8e:	2301      	movs	r3, #1
 804fa90:	f7ff fb54 	bl	804f13c <disk_write>
 804fa94:	4603      	mov	r3, r0
 804fa96:	2b00      	cmp	r3, #0
 804fa98:	d11d      	bne.n	804fad6 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 804fa9a:	687b      	ldr	r3, [r7, #4]
 804fa9c:	2200      	movs	r2, #0
 804fa9e:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 804faa0:	687b      	ldr	r3, [r7, #4]
 804faa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 804faa4:	687b      	ldr	r3, [r7, #4]
 804faa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804faa8:	1ad2      	subs	r2, r2, r3
 804faaa:	687b      	ldr	r3, [r7, #4]
 804faac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804faae:	429a      	cmp	r2, r3
 804fab0:	d213      	bcs.n	804fada <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 804fab2:	687b      	ldr	r3, [r7, #4]
 804fab4:	78db      	ldrb	r3, [r3, #3]
 804fab6:	2b02      	cmp	r3, #2
 804fab8:	d10f      	bne.n	804fada <sync_window+0x6e>
 804faba:	687b      	ldr	r3, [r7, #4]
 804fabc:	7858      	ldrb	r0, [r3, #1]
 804fabe:	687b      	ldr	r3, [r7, #4]
 804fac0:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 804fac4:	687b      	ldr	r3, [r7, #4]
 804fac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 804fac8:	687b      	ldr	r3, [r7, #4]
 804faca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804facc:	441a      	add	r2, r3
 804face:	2301      	movs	r3, #1
 804fad0:	f7ff fb34 	bl	804f13c <disk_write>
 804fad4:	e001      	b.n	804fada <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 804fad6:	2301      	movs	r3, #1
 804fad8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 804fada:	7bfb      	ldrb	r3, [r7, #15]
}
 804fadc:	4618      	mov	r0, r3
 804fade:	3710      	adds	r7, #16
 804fae0:	46bd      	mov	sp, r7
 804fae2:	bd80      	pop	{r7, pc}

0804fae4 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 804fae4:	b580      	push	{r7, lr}
 804fae6:	b084      	sub	sp, #16
 804fae8:	af00      	add	r7, sp, #0
 804faea:	6078      	str	r0, [r7, #4]
 804faec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 804faee:	2300      	movs	r3, #0
 804faf0:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 804faf2:	687b      	ldr	r3, [r7, #4]
 804faf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804faf6:	683a      	ldr	r2, [r7, #0]
 804faf8:	429a      	cmp	r2, r3
 804fafa:	d01b      	beq.n	804fb34 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 804fafc:	6878      	ldr	r0, [r7, #4]
 804fafe:	f7ff ffb5 	bl	804fa6c <sync_window>
 804fb02:	4603      	mov	r3, r0
 804fb04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 804fb06:	7bfb      	ldrb	r3, [r7, #15]
 804fb08:	2b00      	cmp	r3, #0
 804fb0a:	d113      	bne.n	804fb34 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 804fb0c:	687b      	ldr	r3, [r7, #4]
 804fb0e:	7858      	ldrb	r0, [r3, #1]
 804fb10:	687b      	ldr	r3, [r7, #4]
 804fb12:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 804fb16:	2301      	movs	r3, #1
 804fb18:	683a      	ldr	r2, [r7, #0]
 804fb1a:	f7ff faef 	bl	804f0fc <disk_read>
 804fb1e:	4603      	mov	r3, r0
 804fb20:	2b00      	cmp	r3, #0
 804fb22:	d004      	beq.n	804fb2e <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 804fb24:	f04f 33ff 	mov.w	r3, #4294967295
 804fb28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 804fb2a:	2301      	movs	r3, #1
 804fb2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 804fb2e:	687b      	ldr	r3, [r7, #4]
 804fb30:	683a      	ldr	r2, [r7, #0]
 804fb32:	649a      	str	r2, [r3, #72]	@ 0x48
		}
	}
	return res;
 804fb34:	7bfb      	ldrb	r3, [r7, #15]
}
 804fb36:	4618      	mov	r0, r3
 804fb38:	3710      	adds	r7, #16
 804fb3a:	46bd      	mov	sp, r7
 804fb3c:	bd80      	pop	{r7, pc}
	...

0804fb40 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 804fb40:	b580      	push	{r7, lr}
 804fb42:	b084      	sub	sp, #16
 804fb44:	af00      	add	r7, sp, #0
 804fb46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 804fb48:	6878      	ldr	r0, [r7, #4]
 804fb4a:	f7ff ff8f 	bl	804fa6c <sync_window>
 804fb4e:	4603      	mov	r3, r0
 804fb50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 804fb52:	7bfb      	ldrb	r3, [r7, #15]
 804fb54:	2b00      	cmp	r3, #0
 804fb56:	d158      	bne.n	804fc0a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 804fb58:	687b      	ldr	r3, [r7, #4]
 804fb5a:	781b      	ldrb	r3, [r3, #0]
 804fb5c:	2b03      	cmp	r3, #3
 804fb5e:	d148      	bne.n	804fbf2 <sync_fs+0xb2>
 804fb60:	687b      	ldr	r3, [r7, #4]
 804fb62:	795b      	ldrb	r3, [r3, #5]
 804fb64:	2b01      	cmp	r3, #1
 804fb66:	d144      	bne.n	804fbf2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 804fb68:	687b      	ldr	r3, [r7, #4]
 804fb6a:	334c      	adds	r3, #76	@ 0x4c
 804fb6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 804fb70:	2100      	movs	r1, #0
 804fb72:	4618      	mov	r0, r3
 804fb74:	f019 fe36 	bl	80697e4 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 804fb78:	687b      	ldr	r3, [r7, #4]
 804fb7a:	334c      	adds	r3, #76	@ 0x4c
 804fb7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 804fb80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 804fb84:	4618      	mov	r0, r3
 804fb86:	f7ff fc37 	bl	804f3f8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 804fb8a:	687b      	ldr	r3, [r7, #4]
 804fb8c:	334c      	adds	r3, #76	@ 0x4c
 804fb8e:	4921      	ldr	r1, [pc, #132]	@ (804fc14 <sync_fs+0xd4>)
 804fb90:	4618      	mov	r0, r3
 804fb92:	f7ff fc4c 	bl	804f42e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 804fb96:	687b      	ldr	r3, [r7, #4]
 804fb98:	334c      	adds	r3, #76	@ 0x4c
 804fb9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 804fb9e:	491e      	ldr	r1, [pc, #120]	@ (804fc18 <sync_fs+0xd8>)
 804fba0:	4618      	mov	r0, r3
 804fba2:	f7ff fc44 	bl	804f42e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 804fba6:	687b      	ldr	r3, [r7, #4]
 804fba8:	334c      	adds	r3, #76	@ 0x4c
 804fbaa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 804fbae:	687b      	ldr	r3, [r7, #4]
 804fbb0:	699b      	ldr	r3, [r3, #24]
 804fbb2:	4619      	mov	r1, r3
 804fbb4:	4610      	mov	r0, r2
 804fbb6:	f7ff fc3a 	bl	804f42e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 804fbba:	687b      	ldr	r3, [r7, #4]
 804fbbc:	334c      	adds	r3, #76	@ 0x4c
 804fbbe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 804fbc2:	687b      	ldr	r3, [r7, #4]
 804fbc4:	695b      	ldr	r3, [r3, #20]
 804fbc6:	4619      	mov	r1, r3
 804fbc8:	4610      	mov	r0, r2
 804fbca:	f7ff fc30 	bl	804f42e <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 804fbce:	687b      	ldr	r3, [r7, #4]
 804fbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804fbd2:	1c5a      	adds	r2, r3, #1
 804fbd4:	687b      	ldr	r3, [r7, #4]
 804fbd6:	649a      	str	r2, [r3, #72]	@ 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 804fbd8:	687b      	ldr	r3, [r7, #4]
 804fbda:	7858      	ldrb	r0, [r3, #1]
 804fbdc:	687b      	ldr	r3, [r7, #4]
 804fbde:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 804fbe2:	687b      	ldr	r3, [r7, #4]
 804fbe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 804fbe6:	2301      	movs	r3, #1
 804fbe8:	f7ff faa8 	bl	804f13c <disk_write>
			fs->fsi_flag = 0;
 804fbec:	687b      	ldr	r3, [r7, #4]
 804fbee:	2200      	movs	r2, #0
 804fbf0:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 804fbf2:	687b      	ldr	r3, [r7, #4]
 804fbf4:	785b      	ldrb	r3, [r3, #1]
 804fbf6:	2200      	movs	r2, #0
 804fbf8:	2100      	movs	r1, #0
 804fbfa:	4618      	mov	r0, r3
 804fbfc:	f7ff fabe 	bl	804f17c <disk_ioctl>
 804fc00:	4603      	mov	r3, r0
 804fc02:	2b00      	cmp	r3, #0
 804fc04:	d001      	beq.n	804fc0a <sync_fs+0xca>
 804fc06:	2301      	movs	r3, #1
 804fc08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 804fc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 804fc0c:	4618      	mov	r0, r3
 804fc0e:	3710      	adds	r7, #16
 804fc10:	46bd      	mov	sp, r7
 804fc12:	bd80      	pop	{r7, pc}
 804fc14:	41615252 	.word	0x41615252
 804fc18:	61417272 	.word	0x61417272

0804fc1c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 804fc1c:	b480      	push	{r7}
 804fc1e:	b083      	sub	sp, #12
 804fc20:	af00      	add	r7, sp, #0
 804fc22:	6078      	str	r0, [r7, #4]
 804fc24:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 804fc26:	683b      	ldr	r3, [r7, #0]
 804fc28:	3b02      	subs	r3, #2
 804fc2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 804fc2c:	687b      	ldr	r3, [r7, #4]
 804fc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804fc30:	3b02      	subs	r3, #2
 804fc32:	683a      	ldr	r2, [r7, #0]
 804fc34:	429a      	cmp	r2, r3
 804fc36:	d301      	bcc.n	804fc3c <clst2sect+0x20>
 804fc38:	2300      	movs	r3, #0
 804fc3a:	e008      	b.n	804fc4e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 804fc3c:	687b      	ldr	r3, [r7, #4]
 804fc3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 804fc40:	687b      	ldr	r3, [r7, #4]
 804fc42:	895b      	ldrh	r3, [r3, #10]
 804fc44:	4619      	mov	r1, r3
 804fc46:	683b      	ldr	r3, [r7, #0]
 804fc48:	fb01 f303 	mul.w	r3, r1, r3
 804fc4c:	4413      	add	r3, r2
}
 804fc4e:	4618      	mov	r0, r3
 804fc50:	370c      	adds	r7, #12
 804fc52:	46bd      	mov	sp, r7
 804fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fc58:	4770      	bx	lr
	...

0804fc5c <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 804fc5c:	b580      	push	{r7, lr}
 804fc5e:	b088      	sub	sp, #32
 804fc60:	af00      	add	r7, sp, #0
 804fc62:	6078      	str	r0, [r7, #4]
 804fc64:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 804fc66:	6879      	ldr	r1, [r7, #4]
 804fc68:	6809      	ldr	r1, [r1, #0]
 804fc6a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 804fc6c:	6839      	ldr	r1, [r7, #0]
 804fc6e:	2901      	cmp	r1, #1
 804fc70:	d904      	bls.n	804fc7c <get_fat+0x20>
 804fc72:	69b9      	ldr	r1, [r7, #24]
 804fc74:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 804fc76:	6838      	ldr	r0, [r7, #0]
 804fc78:	4288      	cmp	r0, r1
 804fc7a:	d302      	bcc.n	804fc82 <get_fat+0x26>
		val = 1;	/* Internal error */
 804fc7c:	2301      	movs	r3, #1
 804fc7e:	61fb      	str	r3, [r7, #28]
 804fc80:	e10c      	b.n	804fe9c <get_fat+0x240>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 804fc82:	f04f 31ff 	mov.w	r1, #4294967295
 804fc86:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 804fc88:	69b9      	ldr	r1, [r7, #24]
 804fc8a:	7809      	ldrb	r1, [r1, #0]
 804fc8c:	3901      	subs	r1, #1
 804fc8e:	2903      	cmp	r1, #3
 804fc90:	f200 80f8 	bhi.w	804fe84 <get_fat+0x228>
 804fc94:	a001      	add	r0, pc, #4	@ (adr r0, 804fc9c <get_fat+0x40>)
 804fc96:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 804fc9a:	bf00      	nop
 804fc9c:	0804fcad 	.word	0x0804fcad
 804fca0:	0804fd33 	.word	0x0804fd33
 804fca4:	0804fd69 	.word	0x0804fd69
 804fca8:	0804fda3 	.word	0x0804fda3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 804fcac:	683b      	ldr	r3, [r7, #0]
 804fcae:	60fb      	str	r3, [r7, #12]
 804fcb0:	68fb      	ldr	r3, [r7, #12]
 804fcb2:	085b      	lsrs	r3, r3, #1
 804fcb4:	68fa      	ldr	r2, [r7, #12]
 804fcb6:	4413      	add	r3, r2
 804fcb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 804fcba:	69bb      	ldr	r3, [r7, #24]
 804fcbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fcbe:	68fb      	ldr	r3, [r7, #12]
 804fcc0:	0a5b      	lsrs	r3, r3, #9
 804fcc2:	4413      	add	r3, r2
 804fcc4:	4619      	mov	r1, r3
 804fcc6:	69b8      	ldr	r0, [r7, #24]
 804fcc8:	f7ff ff0c 	bl	804fae4 <move_window>
 804fccc:	4603      	mov	r3, r0
 804fcce:	2b00      	cmp	r3, #0
 804fcd0:	f040 80db 	bne.w	804fe8a <get_fat+0x22e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 804fcd4:	68fb      	ldr	r3, [r7, #12]
 804fcd6:	1c5a      	adds	r2, r3, #1
 804fcd8:	60fa      	str	r2, [r7, #12]
 804fcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804fcde:	69ba      	ldr	r2, [r7, #24]
 804fce0:	4413      	add	r3, r2
 804fce2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 804fce6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 804fce8:	69bb      	ldr	r3, [r7, #24]
 804fcea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fcec:	68fb      	ldr	r3, [r7, #12]
 804fcee:	0a5b      	lsrs	r3, r3, #9
 804fcf0:	4413      	add	r3, r2
 804fcf2:	4619      	mov	r1, r3
 804fcf4:	69b8      	ldr	r0, [r7, #24]
 804fcf6:	f7ff fef5 	bl	804fae4 <move_window>
 804fcfa:	4603      	mov	r3, r0
 804fcfc:	2b00      	cmp	r3, #0
 804fcfe:	f040 80c6 	bne.w	804fe8e <get_fat+0x232>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 804fd02:	68fb      	ldr	r3, [r7, #12]
 804fd04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804fd08:	69ba      	ldr	r2, [r7, #24]
 804fd0a:	4413      	add	r3, r2
 804fd0c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 804fd10:	021b      	lsls	r3, r3, #8
 804fd12:	68ba      	ldr	r2, [r7, #8]
 804fd14:	4313      	orrs	r3, r2
 804fd16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 804fd18:	683b      	ldr	r3, [r7, #0]
 804fd1a:	f003 0301 	and.w	r3, r3, #1
 804fd1e:	2b00      	cmp	r3, #0
 804fd20:	d002      	beq.n	804fd28 <get_fat+0xcc>
 804fd22:	68bb      	ldr	r3, [r7, #8]
 804fd24:	091b      	lsrs	r3, r3, #4
 804fd26:	e002      	b.n	804fd2e <get_fat+0xd2>
 804fd28:	68bb      	ldr	r3, [r7, #8]
 804fd2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804fd2e:	61fb      	str	r3, [r7, #28]
			break;
 804fd30:	e0b4      	b.n	804fe9c <get_fat+0x240>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 804fd32:	69bb      	ldr	r3, [r7, #24]
 804fd34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fd36:	683b      	ldr	r3, [r7, #0]
 804fd38:	0a1b      	lsrs	r3, r3, #8
 804fd3a:	4413      	add	r3, r2
 804fd3c:	4619      	mov	r1, r3
 804fd3e:	69b8      	ldr	r0, [r7, #24]
 804fd40:	f7ff fed0 	bl	804fae4 <move_window>
 804fd44:	4603      	mov	r3, r0
 804fd46:	2b00      	cmp	r3, #0
 804fd48:	f040 80a3 	bne.w	804fe92 <get_fat+0x236>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 804fd4c:	69bb      	ldr	r3, [r7, #24]
 804fd4e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804fd52:	683b      	ldr	r3, [r7, #0]
 804fd54:	005b      	lsls	r3, r3, #1
 804fd56:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 804fd5a:	4413      	add	r3, r2
 804fd5c:	4618      	mov	r0, r3
 804fd5e:	f7ff fa34 	bl	804f1ca <ld_word>
 804fd62:	4603      	mov	r3, r0
 804fd64:	61fb      	str	r3, [r7, #28]
			break;
 804fd66:	e099      	b.n	804fe9c <get_fat+0x240>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 804fd68:	69bb      	ldr	r3, [r7, #24]
 804fd6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fd6c:	683b      	ldr	r3, [r7, #0]
 804fd6e:	09db      	lsrs	r3, r3, #7
 804fd70:	4413      	add	r3, r2
 804fd72:	4619      	mov	r1, r3
 804fd74:	69b8      	ldr	r0, [r7, #24]
 804fd76:	f7ff feb5 	bl	804fae4 <move_window>
 804fd7a:	4603      	mov	r3, r0
 804fd7c:	2b00      	cmp	r3, #0
 804fd7e:	f040 808a 	bne.w	804fe96 <get_fat+0x23a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 804fd82:	69bb      	ldr	r3, [r7, #24]
 804fd84:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804fd88:	683b      	ldr	r3, [r7, #0]
 804fd8a:	009b      	lsls	r3, r3, #2
 804fd8c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 804fd90:	4413      	add	r3, r2
 804fd92:	4618      	mov	r0, r3
 804fd94:	f7ff fa32 	bl	804f1fc <ld_dword>
 804fd98:	4603      	mov	r3, r0
 804fd9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 804fd9e:	61fb      	str	r3, [r7, #28]
			break;
 804fda0:	e07c      	b.n	804fe9c <get_fat+0x240>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 804fda2:	6879      	ldr	r1, [r7, #4]
 804fda4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 804fda8:	4301      	orrs	r1, r0
 804fdaa:	d003      	beq.n	804fdb4 <get_fat+0x158>
 804fdac:	6879      	ldr	r1, [r7, #4]
 804fdae:	6889      	ldr	r1, [r1, #8]
 804fdb0:	2900      	cmp	r1, #0
 804fdb2:	d103      	bne.n	804fdbc <get_fat+0x160>
 804fdb4:	6879      	ldr	r1, [r7, #4]
 804fdb6:	79c9      	ldrb	r1, [r1, #7]
 804fdb8:	2900      	cmp	r1, #0
 804fdba:	d160      	bne.n	804fe7e <get_fat+0x222>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 804fdbc:	6879      	ldr	r1, [r7, #4]
 804fdbe:	6889      	ldr	r1, [r1, #8]
 804fdc0:	6838      	ldr	r0, [r7, #0]
 804fdc2:	1a41      	subs	r1, r0, r1
 804fdc4:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 804fdc6:	6879      	ldr	r1, [r7, #4]
 804fdc8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 804fdcc:	1e42      	subs	r2, r0, #1
 804fdce:	f141 33ff 	adc.w	r3, r1, #4294967295
 804fdd2:	f04f 0000 	mov.w	r0, #0
 804fdd6:	f04f 0100 	mov.w	r1, #0
 804fdda:	0a50      	lsrs	r0, r2, #9
 804fddc:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 804fde0:	0a59      	lsrs	r1, r3, #9
 804fde2:	4602      	mov	r2, r0
 804fde4:	69bb      	ldr	r3, [r7, #24]
 804fde6:	895b      	ldrh	r3, [r3, #10]
 804fde8:	fbb2 f3f3 	udiv	r3, r2, r3
 804fdec:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 804fdee:	687b      	ldr	r3, [r7, #4]
 804fdf0:	79db      	ldrb	r3, [r3, #7]
 804fdf2:	2b02      	cmp	r3, #2
 804fdf4:	d10e      	bne.n	804fe14 <get_fat+0x1b8>
 804fdf6:	697a      	ldr	r2, [r7, #20]
 804fdf8:	693b      	ldr	r3, [r7, #16]
 804fdfa:	429a      	cmp	r2, r3
 804fdfc:	d80a      	bhi.n	804fe14 <get_fat+0x1b8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 804fdfe:	697a      	ldr	r2, [r7, #20]
 804fe00:	693b      	ldr	r3, [r7, #16]
 804fe02:	429a      	cmp	r2, r3
 804fe04:	d002      	beq.n	804fe0c <get_fat+0x1b0>
 804fe06:	683b      	ldr	r3, [r7, #0]
 804fe08:	3301      	adds	r3, #1
 804fe0a:	e001      	b.n	804fe10 <get_fat+0x1b4>
 804fe0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 804fe10:	61fb      	str	r3, [r7, #28]
					break;
 804fe12:	e043      	b.n	804fe9c <get_fat+0x240>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 804fe14:	687b      	ldr	r3, [r7, #4]
 804fe16:	79db      	ldrb	r3, [r3, #7]
 804fe18:	2b03      	cmp	r3, #3
 804fe1a:	d108      	bne.n	804fe2e <get_fat+0x1d2>
 804fe1c:	687b      	ldr	r3, [r7, #4]
 804fe1e:	699b      	ldr	r3, [r3, #24]
 804fe20:	697a      	ldr	r2, [r7, #20]
 804fe22:	429a      	cmp	r2, r3
 804fe24:	d203      	bcs.n	804fe2e <get_fat+0x1d2>
					val = clst + 1; 	/* Generate the value */
 804fe26:	683b      	ldr	r3, [r7, #0]
 804fe28:	3301      	adds	r3, #1
 804fe2a:	61fb      	str	r3, [r7, #28]
					break;
 804fe2c:	e036      	b.n	804fe9c <get_fat+0x240>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 804fe2e:	687b      	ldr	r3, [r7, #4]
 804fe30:	79db      	ldrb	r3, [r3, #7]
 804fe32:	2b02      	cmp	r3, #2
 804fe34:	d023      	beq.n	804fe7e <get_fat+0x222>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 804fe36:	687b      	ldr	r3, [r7, #4]
 804fe38:	69db      	ldr	r3, [r3, #28]
 804fe3a:	2b00      	cmp	r3, #0
 804fe3c:	d003      	beq.n	804fe46 <get_fat+0x1ea>
						val = 0x7FFFFFFF;	/* Generate EOC */
 804fe3e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 804fe42:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 804fe44:	e02a      	b.n	804fe9c <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 804fe46:	69bb      	ldr	r3, [r7, #24]
 804fe48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fe4a:	683b      	ldr	r3, [r7, #0]
 804fe4c:	09db      	lsrs	r3, r3, #7
 804fe4e:	4413      	add	r3, r2
 804fe50:	4619      	mov	r1, r3
 804fe52:	69b8      	ldr	r0, [r7, #24]
 804fe54:	f7ff fe46 	bl	804fae4 <move_window>
 804fe58:	4603      	mov	r3, r0
 804fe5a:	2b00      	cmp	r3, #0
 804fe5c:	d11d      	bne.n	804fe9a <get_fat+0x23e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 804fe5e:	69bb      	ldr	r3, [r7, #24]
 804fe60:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804fe64:	683b      	ldr	r3, [r7, #0]
 804fe66:	009b      	lsls	r3, r3, #2
 804fe68:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 804fe6c:	4413      	add	r3, r2
 804fe6e:	4618      	mov	r0, r3
 804fe70:	f7ff f9c4 	bl	804f1fc <ld_dword>
 804fe74:	4603      	mov	r3, r0
 804fe76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 804fe7a:	61fb      	str	r3, [r7, #28]
					break;
 804fe7c:	e00e      	b.n	804fe9c <get_fat+0x240>
				}
			}
			val = 1;	/* Internal error */
 804fe7e:	2301      	movs	r3, #1
 804fe80:	61fb      	str	r3, [r7, #28]
			break;
 804fe82:	e00b      	b.n	804fe9c <get_fat+0x240>
#endif
		default:
			val = 1;	/* Internal error */
 804fe84:	2301      	movs	r3, #1
 804fe86:	61fb      	str	r3, [r7, #28]
 804fe88:	e008      	b.n	804fe9c <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 804fe8a:	bf00      	nop
 804fe8c:	e006      	b.n	804fe9c <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 804fe8e:	bf00      	nop
 804fe90:	e004      	b.n	804fe9c <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 804fe92:	bf00      	nop
 804fe94:	e002      	b.n	804fe9c <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 804fe96:	bf00      	nop
 804fe98:	e000      	b.n	804fe9c <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 804fe9a:	bf00      	nop
		}
	}

	return val;
 804fe9c:	69fb      	ldr	r3, [r7, #28]
}
 804fe9e:	4618      	mov	r0, r3
 804fea0:	3720      	adds	r7, #32
 804fea2:	46bd      	mov	sp, r7
 804fea4:	bd80      	pop	{r7, pc}
 804fea6:	bf00      	nop

0804fea8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 804fea8:	b590      	push	{r4, r7, lr}
 804feaa:	b089      	sub	sp, #36	@ 0x24
 804feac:	af00      	add	r7, sp, #0
 804feae:	60f8      	str	r0, [r7, #12]
 804feb0:	60b9      	str	r1, [r7, #8]
 804feb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 804feb4:	2302      	movs	r3, #2
 804feb6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 804feb8:	68bb      	ldr	r3, [r7, #8]
 804feba:	2b01      	cmp	r3, #1
 804febc:	f240 80dd 	bls.w	805007a <put_fat+0x1d2>
 804fec0:	68fb      	ldr	r3, [r7, #12]
 804fec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804fec4:	68ba      	ldr	r2, [r7, #8]
 804fec6:	429a      	cmp	r2, r3
 804fec8:	f080 80d7 	bcs.w	805007a <put_fat+0x1d2>
		switch (fs->fs_type) {
 804fecc:	68fb      	ldr	r3, [r7, #12]
 804fece:	781b      	ldrb	r3, [r3, #0]
 804fed0:	2b04      	cmp	r3, #4
 804fed2:	f300 80d2 	bgt.w	805007a <put_fat+0x1d2>
 804fed6:	2b03      	cmp	r3, #3
 804fed8:	f280 8093 	bge.w	8050002 <put_fat+0x15a>
 804fedc:	2b01      	cmp	r3, #1
 804fede:	d002      	beq.n	804fee6 <put_fat+0x3e>
 804fee0:	2b02      	cmp	r3, #2
 804fee2:	d06e      	beq.n	804ffc2 <put_fat+0x11a>
 804fee4:	e0c9      	b.n	805007a <put_fat+0x1d2>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 804fee6:	68bb      	ldr	r3, [r7, #8]
 804fee8:	61bb      	str	r3, [r7, #24]
 804feea:	69bb      	ldr	r3, [r7, #24]
 804feec:	085b      	lsrs	r3, r3, #1
 804feee:	69ba      	ldr	r2, [r7, #24]
 804fef0:	4413      	add	r3, r2
 804fef2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 804fef4:	68fb      	ldr	r3, [r7, #12]
 804fef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804fef8:	69bb      	ldr	r3, [r7, #24]
 804fefa:	0a5b      	lsrs	r3, r3, #9
 804fefc:	4413      	add	r3, r2
 804fefe:	4619      	mov	r1, r3
 804ff00:	68f8      	ldr	r0, [r7, #12]
 804ff02:	f7ff fdef 	bl	804fae4 <move_window>
 804ff06:	4603      	mov	r3, r0
 804ff08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 804ff0a:	7ffb      	ldrb	r3, [r7, #31]
 804ff0c:	2b00      	cmp	r3, #0
 804ff0e:	f040 80ad 	bne.w	805006c <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 804ff12:	68fb      	ldr	r3, [r7, #12]
 804ff14:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804ff18:	69bb      	ldr	r3, [r7, #24]
 804ff1a:	1c59      	adds	r1, r3, #1
 804ff1c:	61b9      	str	r1, [r7, #24]
 804ff1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804ff22:	4413      	add	r3, r2
 804ff24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 804ff26:	68bb      	ldr	r3, [r7, #8]
 804ff28:	f003 0301 	and.w	r3, r3, #1
 804ff2c:	2b00      	cmp	r3, #0
 804ff2e:	d00d      	beq.n	804ff4c <put_fat+0xa4>
 804ff30:	697b      	ldr	r3, [r7, #20]
 804ff32:	781b      	ldrb	r3, [r3, #0]
 804ff34:	b25b      	sxtb	r3, r3
 804ff36:	f003 030f 	and.w	r3, r3, #15
 804ff3a:	b25a      	sxtb	r2, r3
 804ff3c:	687b      	ldr	r3, [r7, #4]
 804ff3e:	b25b      	sxtb	r3, r3
 804ff40:	011b      	lsls	r3, r3, #4
 804ff42:	b25b      	sxtb	r3, r3
 804ff44:	4313      	orrs	r3, r2
 804ff46:	b25b      	sxtb	r3, r3
 804ff48:	b2db      	uxtb	r3, r3
 804ff4a:	e001      	b.n	804ff50 <put_fat+0xa8>
 804ff4c:	687b      	ldr	r3, [r7, #4]
 804ff4e:	b2db      	uxtb	r3, r3
 804ff50:	697a      	ldr	r2, [r7, #20]
 804ff52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 804ff54:	68fb      	ldr	r3, [r7, #12]
 804ff56:	2201      	movs	r2, #1
 804ff58:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 804ff5a:	68fb      	ldr	r3, [r7, #12]
 804ff5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804ff5e:	69bb      	ldr	r3, [r7, #24]
 804ff60:	0a5b      	lsrs	r3, r3, #9
 804ff62:	4413      	add	r3, r2
 804ff64:	4619      	mov	r1, r3
 804ff66:	68f8      	ldr	r0, [r7, #12]
 804ff68:	f7ff fdbc 	bl	804fae4 <move_window>
 804ff6c:	4603      	mov	r3, r0
 804ff6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 804ff70:	7ffb      	ldrb	r3, [r7, #31]
 804ff72:	2b00      	cmp	r3, #0
 804ff74:	d17c      	bne.n	8050070 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 804ff76:	68fb      	ldr	r3, [r7, #12]
 804ff78:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804ff7c:	69bb      	ldr	r3, [r7, #24]
 804ff7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804ff82:	4413      	add	r3, r2
 804ff84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 804ff86:	68bb      	ldr	r3, [r7, #8]
 804ff88:	f003 0301 	and.w	r3, r3, #1
 804ff8c:	2b00      	cmp	r3, #0
 804ff8e:	d003      	beq.n	804ff98 <put_fat+0xf0>
 804ff90:	687b      	ldr	r3, [r7, #4]
 804ff92:	091b      	lsrs	r3, r3, #4
 804ff94:	b2db      	uxtb	r3, r3
 804ff96:	e00e      	b.n	804ffb6 <put_fat+0x10e>
 804ff98:	697b      	ldr	r3, [r7, #20]
 804ff9a:	781b      	ldrb	r3, [r3, #0]
 804ff9c:	b25b      	sxtb	r3, r3
 804ff9e:	f023 030f 	bic.w	r3, r3, #15
 804ffa2:	b25a      	sxtb	r2, r3
 804ffa4:	687b      	ldr	r3, [r7, #4]
 804ffa6:	0a1b      	lsrs	r3, r3, #8
 804ffa8:	b25b      	sxtb	r3, r3
 804ffaa:	f003 030f 	and.w	r3, r3, #15
 804ffae:	b25b      	sxtb	r3, r3
 804ffb0:	4313      	orrs	r3, r2
 804ffb2:	b25b      	sxtb	r3, r3
 804ffb4:	b2db      	uxtb	r3, r3
 804ffb6:	697a      	ldr	r2, [r7, #20]
 804ffb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 804ffba:	68fb      	ldr	r3, [r7, #12]
 804ffbc:	2201      	movs	r2, #1
 804ffbe:	711a      	strb	r2, [r3, #4]
			break;
 804ffc0:	e05b      	b.n	805007a <put_fat+0x1d2>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 804ffc2:	68fb      	ldr	r3, [r7, #12]
 804ffc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804ffc6:	68bb      	ldr	r3, [r7, #8]
 804ffc8:	0a1b      	lsrs	r3, r3, #8
 804ffca:	4413      	add	r3, r2
 804ffcc:	4619      	mov	r1, r3
 804ffce:	68f8      	ldr	r0, [r7, #12]
 804ffd0:	f7ff fd88 	bl	804fae4 <move_window>
 804ffd4:	4603      	mov	r3, r0
 804ffd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 804ffd8:	7ffb      	ldrb	r3, [r7, #31]
 804ffda:	2b00      	cmp	r3, #0
 804ffdc:	d14a      	bne.n	8050074 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 804ffde:	68fb      	ldr	r3, [r7, #12]
 804ffe0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 804ffe4:	68bb      	ldr	r3, [r7, #8]
 804ffe6:	005b      	lsls	r3, r3, #1
 804ffe8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 804ffec:	4413      	add	r3, r2
 804ffee:	687a      	ldr	r2, [r7, #4]
 804fff0:	b292      	uxth	r2, r2
 804fff2:	4611      	mov	r1, r2
 804fff4:	4618      	mov	r0, r3
 804fff6:	f7ff f9ff 	bl	804f3f8 <st_word>
			fs->wflag = 1;
 804fffa:	68fb      	ldr	r3, [r7, #12]
 804fffc:	2201      	movs	r2, #1
 804fffe:	711a      	strb	r2, [r3, #4]
			break;
 8050000:	e03b      	b.n	805007a <put_fat+0x1d2>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8050002:	68fb      	ldr	r3, [r7, #12]
 8050004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8050006:	68bb      	ldr	r3, [r7, #8]
 8050008:	09db      	lsrs	r3, r3, #7
 805000a:	4413      	add	r3, r2
 805000c:	4619      	mov	r1, r3
 805000e:	68f8      	ldr	r0, [r7, #12]
 8050010:	f7ff fd68 	bl	804fae4 <move_window>
 8050014:	4603      	mov	r3, r0
 8050016:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8050018:	7ffb      	ldrb	r3, [r7, #31]
 805001a:	2b00      	cmp	r3, #0
 805001c:	d12c      	bne.n	8050078 <put_fat+0x1d0>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 805001e:	68fb      	ldr	r3, [r7, #12]
 8050020:	781b      	ldrb	r3, [r3, #0]
 8050022:	2b04      	cmp	r3, #4
 8050024:	d012      	beq.n	805004c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8050026:	687b      	ldr	r3, [r7, #4]
 8050028:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 805002c:	68fb      	ldr	r3, [r7, #12]
 805002e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8050032:	68bb      	ldr	r3, [r7, #8]
 8050034:	009b      	lsls	r3, r3, #2
 8050036:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 805003a:	4413      	add	r3, r2
 805003c:	4618      	mov	r0, r3
 805003e:	f7ff f8dd 	bl	804f1fc <ld_dword>
 8050042:	4603      	mov	r3, r0
 8050044:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8050048:	4323      	orrs	r3, r4
 805004a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 805004c:	68fb      	ldr	r3, [r7, #12]
 805004e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8050052:	68bb      	ldr	r3, [r7, #8]
 8050054:	009b      	lsls	r3, r3, #2
 8050056:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 805005a:	4413      	add	r3, r2
 805005c:	6879      	ldr	r1, [r7, #4]
 805005e:	4618      	mov	r0, r3
 8050060:	f7ff f9e5 	bl	804f42e <st_dword>
			fs->wflag = 1;
 8050064:	68fb      	ldr	r3, [r7, #12]
 8050066:	2201      	movs	r2, #1
 8050068:	711a      	strb	r2, [r3, #4]
			break;
 805006a:	e006      	b.n	805007a <put_fat+0x1d2>
			if (res != FR_OK) break;
 805006c:	bf00      	nop
 805006e:	e004      	b.n	805007a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8050070:	bf00      	nop
 8050072:	e002      	b.n	805007a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8050074:	bf00      	nop
 8050076:	e000      	b.n	805007a <put_fat+0x1d2>
			if (res != FR_OK) break;
 8050078:	bf00      	nop
		}
	}
	return res;
 805007a:	7ffb      	ldrb	r3, [r7, #31]
}
 805007c:	4618      	mov	r0, r3
 805007e:	3724      	adds	r7, #36	@ 0x24
 8050080:	46bd      	mov	sp, r7
 8050082:	bd90      	pop	{r4, r7, pc}

08050084 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8050084:	b580      	push	{r7, lr}
 8050086:	b08a      	sub	sp, #40	@ 0x28
 8050088:	af00      	add	r7, sp, #0
 805008a:	60f8      	str	r0, [r7, #12]
 805008c:	60b9      	str	r1, [r7, #8]
 805008e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8050090:	68bb      	ldr	r3, [r7, #8]
 8050092:	3b02      	subs	r3, #2
 8050094:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8050096:	68fb      	ldr	r3, [r7, #12]
 8050098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805009a:	3b02      	subs	r3, #2
 805009c:	68ba      	ldr	r2, [r7, #8]
 805009e:	429a      	cmp	r2, r3
 80500a0:	d301      	bcc.n	80500a6 <find_bitmap+0x22>
 80500a2:	2300      	movs	r3, #0
 80500a4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80500a6:	68bb      	ldr	r3, [r7, #8]
 80500a8:	61fb      	str	r3, [r7, #28]
 80500aa:	69fb      	ldr	r3, [r7, #28]
 80500ac:	61bb      	str	r3, [r7, #24]
 80500ae:	2300      	movs	r3, #0
 80500b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 80500b2:	68fb      	ldr	r3, [r7, #12]
 80500b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80500b6:	69fb      	ldr	r3, [r7, #28]
 80500b8:	0b1b      	lsrs	r3, r3, #12
 80500ba:	4413      	add	r3, r2
 80500bc:	4619      	mov	r1, r3
 80500be:	68f8      	ldr	r0, [r7, #12]
 80500c0:	f7ff fd10 	bl	804fae4 <move_window>
 80500c4:	4603      	mov	r3, r0
 80500c6:	2b00      	cmp	r3, #0
 80500c8:	d002      	beq.n	80500d0 <find_bitmap+0x4c>
 80500ca:	f04f 33ff 	mov.w	r3, #4294967295
 80500ce:	e051      	b.n	8050174 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80500d0:	69fb      	ldr	r3, [r7, #28]
 80500d2:	08db      	lsrs	r3, r3, #3
 80500d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80500d8:	623b      	str	r3, [r7, #32]
 80500da:	69fb      	ldr	r3, [r7, #28]
 80500dc:	f003 0307 	and.w	r3, r3, #7
 80500e0:	2201      	movs	r2, #1
 80500e2:	fa02 f303 	lsl.w	r3, r2, r3
 80500e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80500ea:	68fa      	ldr	r2, [r7, #12]
 80500ec:	6a3b      	ldr	r3, [r7, #32]
 80500ee:	4413      	add	r3, r2
 80500f0:	334c      	adds	r3, #76	@ 0x4c
 80500f2:	781a      	ldrb	r2, [r3, #0]
 80500f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80500f8:	4013      	ands	r3, r2
 80500fa:	74fb      	strb	r3, [r7, #19]
 80500fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8050100:	005b      	lsls	r3, r3, #1
 8050102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8050106:	69fb      	ldr	r3, [r7, #28]
 8050108:	3301      	adds	r3, #1
 805010a:	61fb      	str	r3, [r7, #28]
 805010c:	68fb      	ldr	r3, [r7, #12]
 805010e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8050110:	3b02      	subs	r3, #2
 8050112:	69fa      	ldr	r2, [r7, #28]
 8050114:	429a      	cmp	r2, r3
 8050116:	d307      	bcc.n	8050128 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8050118:	2300      	movs	r3, #0
 805011a:	61fb      	str	r3, [r7, #28]
 805011c:	2300      	movs	r3, #0
 805011e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8050122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8050126:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 8050128:	7cfb      	ldrb	r3, [r7, #19]
 805012a:	2b00      	cmp	r3, #0
 805012c:	d109      	bne.n	8050142 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 805012e:	697b      	ldr	r3, [r7, #20]
 8050130:	3301      	adds	r3, #1
 8050132:	617b      	str	r3, [r7, #20]
 8050134:	697a      	ldr	r2, [r7, #20]
 8050136:	687b      	ldr	r3, [r7, #4]
 8050138:	429a      	cmp	r2, r3
 805013a:	d106      	bne.n	805014a <find_bitmap+0xc6>
 805013c:	69bb      	ldr	r3, [r7, #24]
 805013e:	3302      	adds	r3, #2
 8050140:	e018      	b.n	8050174 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8050142:	69fb      	ldr	r3, [r7, #28]
 8050144:	61bb      	str	r3, [r7, #24]
 8050146:	2300      	movs	r3, #0
 8050148:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 805014a:	69fa      	ldr	r2, [r7, #28]
 805014c:	68bb      	ldr	r3, [r7, #8]
 805014e:	429a      	cmp	r2, r3
 8050150:	d101      	bne.n	8050156 <find_bitmap+0xd2>
 8050152:	2300      	movs	r3, #0
 8050154:	e00e      	b.n	8050174 <find_bitmap+0xf0>
			} while (bm != 0);
 8050156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 805015a:	2b00      	cmp	r3, #0
 805015c:	d1c5      	bne.n	80500ea <find_bitmap+0x66>
			bm = 1;
 805015e:	2301      	movs	r3, #1
 8050160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8050164:	6a3b      	ldr	r3, [r7, #32]
 8050166:	3301      	adds	r3, #1
 8050168:	623b      	str	r3, [r7, #32]
 805016a:	6a3b      	ldr	r3, [r7, #32]
 805016c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8050170:	d3bb      	bcc.n	80500ea <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8050172:	e79e      	b.n	80500b2 <find_bitmap+0x2e>
	}
}
 8050174:	4618      	mov	r0, r3
 8050176:	3728      	adds	r7, #40	@ 0x28
 8050178:	46bd      	mov	sp, r7
 805017a:	bd80      	pop	{r7, pc}

0805017c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 805017c:	b580      	push	{r7, lr}
 805017e:	b088      	sub	sp, #32
 8050180:	af00      	add	r7, sp, #0
 8050182:	60f8      	str	r0, [r7, #12]
 8050184:	60b9      	str	r1, [r7, #8]
 8050186:	607a      	str	r2, [r7, #4]
 8050188:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 805018a:	68bb      	ldr	r3, [r7, #8]
 805018c:	3b02      	subs	r3, #2
 805018e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8050190:	68fb      	ldr	r3, [r7, #12]
 8050192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8050194:	68bb      	ldr	r3, [r7, #8]
 8050196:	0b1b      	lsrs	r3, r3, #12
 8050198:	4413      	add	r3, r2
 805019a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 805019c:	68bb      	ldr	r3, [r7, #8]
 805019e:	08db      	lsrs	r3, r3, #3
 80501a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80501a4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 80501a6:	68bb      	ldr	r3, [r7, #8]
 80501a8:	f003 0307 	and.w	r3, r3, #7
 80501ac:	2201      	movs	r2, #1
 80501ae:	fa02 f303 	lsl.w	r3, r2, r3
 80501b2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80501b4:	697b      	ldr	r3, [r7, #20]
 80501b6:	1c5a      	adds	r2, r3, #1
 80501b8:	617a      	str	r2, [r7, #20]
 80501ba:	4619      	mov	r1, r3
 80501bc:	68f8      	ldr	r0, [r7, #12]
 80501be:	f7ff fc91 	bl	804fae4 <move_window>
 80501c2:	4603      	mov	r3, r0
 80501c4:	2b00      	cmp	r3, #0
 80501c6:	d001      	beq.n	80501cc <change_bitmap+0x50>
 80501c8:	2301      	movs	r3, #1
 80501ca:	e03d      	b.n	8050248 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80501cc:	68fa      	ldr	r2, [r7, #12]
 80501ce:	69bb      	ldr	r3, [r7, #24]
 80501d0:	4413      	add	r3, r2
 80501d2:	334c      	adds	r3, #76	@ 0x4c
 80501d4:	781a      	ldrb	r2, [r3, #0]
 80501d6:	7ffb      	ldrb	r3, [r7, #31]
 80501d8:	4013      	ands	r3, r2
 80501da:	b2db      	uxtb	r3, r3
 80501dc:	2b00      	cmp	r3, #0
 80501de:	bf14      	ite	ne
 80501e0:	2301      	movne	r3, #1
 80501e2:	2300      	moveq	r3, #0
 80501e4:	b2db      	uxtb	r3, r3
 80501e6:	461a      	mov	r2, r3
 80501e8:	683b      	ldr	r3, [r7, #0]
 80501ea:	4293      	cmp	r3, r2
 80501ec:	d101      	bne.n	80501f2 <change_bitmap+0x76>
 80501ee:	2302      	movs	r3, #2
 80501f0:	e02a      	b.n	8050248 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80501f2:	68fa      	ldr	r2, [r7, #12]
 80501f4:	69bb      	ldr	r3, [r7, #24]
 80501f6:	4413      	add	r3, r2
 80501f8:	334c      	adds	r3, #76	@ 0x4c
 80501fa:	781a      	ldrb	r2, [r3, #0]
 80501fc:	7ffb      	ldrb	r3, [r7, #31]
 80501fe:	4053      	eors	r3, r2
 8050200:	b2d9      	uxtb	r1, r3
 8050202:	68fa      	ldr	r2, [r7, #12]
 8050204:	69bb      	ldr	r3, [r7, #24]
 8050206:	4413      	add	r3, r2
 8050208:	334c      	adds	r3, #76	@ 0x4c
 805020a:	460a      	mov	r2, r1
 805020c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 805020e:	68fb      	ldr	r3, [r7, #12]
 8050210:	2201      	movs	r2, #1
 8050212:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8050214:	687b      	ldr	r3, [r7, #4]
 8050216:	3b01      	subs	r3, #1
 8050218:	607b      	str	r3, [r7, #4]
 805021a:	687b      	ldr	r3, [r7, #4]
 805021c:	2b00      	cmp	r3, #0
 805021e:	d101      	bne.n	8050224 <change_bitmap+0xa8>
 8050220:	2300      	movs	r3, #0
 8050222:	e011      	b.n	8050248 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8050224:	7ffb      	ldrb	r3, [r7, #31]
 8050226:	005b      	lsls	r3, r3, #1
 8050228:	77fb      	strb	r3, [r7, #31]
 805022a:	7ffb      	ldrb	r3, [r7, #31]
 805022c:	2b00      	cmp	r3, #0
 805022e:	d1cd      	bne.n	80501cc <change_bitmap+0x50>
			bm = 1;
 8050230:	2301      	movs	r3, #1
 8050232:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8050234:	69bb      	ldr	r3, [r7, #24]
 8050236:	3301      	adds	r3, #1
 8050238:	61bb      	str	r3, [r7, #24]
 805023a:	69bb      	ldr	r3, [r7, #24]
 805023c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8050240:	d3c4      	bcc.n	80501cc <change_bitmap+0x50>
		i = 0;
 8050242:	2300      	movs	r3, #0
 8050244:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8050246:	e7b5      	b.n	80501b4 <change_bitmap+0x38>
	}
}
 8050248:	4618      	mov	r0, r3
 805024a:	3720      	adds	r7, #32
 805024c:	46bd      	mov	sp, r7
 805024e:	bd80      	pop	{r7, pc}

08050250 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8050250:	b580      	push	{r7, lr}
 8050252:	b086      	sub	sp, #24
 8050254:	af00      	add	r7, sp, #0
 8050256:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8050258:	687b      	ldr	r3, [r7, #4]
 805025a:	79db      	ldrb	r3, [r3, #7]
 805025c:	2b03      	cmp	r3, #3
 805025e:	d121      	bne.n	80502a4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8050260:	687b      	ldr	r3, [r7, #4]
 8050262:	689b      	ldr	r3, [r3, #8]
 8050264:	617b      	str	r3, [r7, #20]
 8050266:	687b      	ldr	r3, [r7, #4]
 8050268:	699b      	ldr	r3, [r3, #24]
 805026a:	613b      	str	r3, [r7, #16]
 805026c:	e014      	b.n	8050298 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 805026e:	687b      	ldr	r3, [r7, #4]
 8050270:	6818      	ldr	r0, [r3, #0]
 8050272:	697b      	ldr	r3, [r7, #20]
 8050274:	3301      	adds	r3, #1
 8050276:	461a      	mov	r2, r3
 8050278:	6979      	ldr	r1, [r7, #20]
 805027a:	f7ff fe15 	bl	804fea8 <put_fat>
 805027e:	4603      	mov	r3, r0
 8050280:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8050282:	7bfb      	ldrb	r3, [r7, #15]
 8050284:	2b00      	cmp	r3, #0
 8050286:	d001      	beq.n	805028c <fill_first_frag+0x3c>
 8050288:	7bfb      	ldrb	r3, [r7, #15]
 805028a:	e00c      	b.n	80502a6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 805028c:	697b      	ldr	r3, [r7, #20]
 805028e:	3301      	adds	r3, #1
 8050290:	617b      	str	r3, [r7, #20]
 8050292:	693b      	ldr	r3, [r7, #16]
 8050294:	3b01      	subs	r3, #1
 8050296:	613b      	str	r3, [r7, #16]
 8050298:	693b      	ldr	r3, [r7, #16]
 805029a:	2b00      	cmp	r3, #0
 805029c:	d1e7      	bne.n	805026e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 805029e:	687b      	ldr	r3, [r7, #4]
 80502a0:	2200      	movs	r2, #0
 80502a2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80502a4:	2300      	movs	r3, #0
}
 80502a6:	4618      	mov	r0, r3
 80502a8:	3718      	adds	r7, #24
 80502aa:	46bd      	mov	sp, r7
 80502ac:	bd80      	pop	{r7, pc}

080502ae <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 80502ae:	b580      	push	{r7, lr}
 80502b0:	b086      	sub	sp, #24
 80502b2:	af00      	add	r7, sp, #0
 80502b4:	60f8      	str	r0, [r7, #12]
 80502b6:	60b9      	str	r1, [r7, #8]
 80502b8:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80502ba:	e020      	b.n	80502fe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80502bc:	68fb      	ldr	r3, [r7, #12]
 80502be:	6818      	ldr	r0, [r3, #0]
 80502c0:	68fb      	ldr	r3, [r7, #12]
 80502c2:	69db      	ldr	r3, [r3, #28]
 80502c4:	68ba      	ldr	r2, [r7, #8]
 80502c6:	1ad3      	subs	r3, r2, r3
 80502c8:	1c59      	adds	r1, r3, #1
 80502ca:	68fb      	ldr	r3, [r7, #12]
 80502cc:	69db      	ldr	r3, [r3, #28]
 80502ce:	2b01      	cmp	r3, #1
 80502d0:	d905      	bls.n	80502de <fill_last_frag+0x30>
 80502d2:	68fb      	ldr	r3, [r7, #12]
 80502d4:	69db      	ldr	r3, [r3, #28]
 80502d6:	68ba      	ldr	r2, [r7, #8]
 80502d8:	1ad3      	subs	r3, r2, r3
 80502da:	3302      	adds	r3, #2
 80502dc:	e000      	b.n	80502e0 <fill_last_frag+0x32>
 80502de:	687b      	ldr	r3, [r7, #4]
 80502e0:	461a      	mov	r2, r3
 80502e2:	f7ff fde1 	bl	804fea8 <put_fat>
 80502e6:	4603      	mov	r3, r0
 80502e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80502ea:	7dfb      	ldrb	r3, [r7, #23]
 80502ec:	2b00      	cmp	r3, #0
 80502ee:	d001      	beq.n	80502f4 <fill_last_frag+0x46>
 80502f0:	7dfb      	ldrb	r3, [r7, #23]
 80502f2:	e009      	b.n	8050308 <fill_last_frag+0x5a>
		obj->n_frag--;
 80502f4:	68fb      	ldr	r3, [r7, #12]
 80502f6:	69db      	ldr	r3, [r3, #28]
 80502f8:	1e5a      	subs	r2, r3, #1
 80502fa:	68fb      	ldr	r3, [r7, #12]
 80502fc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80502fe:	68fb      	ldr	r3, [r7, #12]
 8050300:	69db      	ldr	r3, [r3, #28]
 8050302:	2b00      	cmp	r3, #0
 8050304:	d1da      	bne.n	80502bc <fill_last_frag+0xe>
	}
	return FR_OK;
 8050306:	2300      	movs	r3, #0
}
 8050308:	4618      	mov	r0, r3
 805030a:	3718      	adds	r7, #24
 805030c:	46bd      	mov	sp, r7
 805030e:	bd80      	pop	{r7, pc}

08050310 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8050310:	b580      	push	{r7, lr}
 8050312:	b08a      	sub	sp, #40	@ 0x28
 8050314:	af00      	add	r7, sp, #0
 8050316:	60f8      	str	r0, [r7, #12]
 8050318:	60b9      	str	r1, [r7, #8]
 805031a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 805031c:	2300      	movs	r3, #0
 805031e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8050320:	68fb      	ldr	r3, [r7, #12]
 8050322:	681b      	ldr	r3, [r3, #0]
 8050324:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 8050326:	68bb      	ldr	r3, [r7, #8]
 8050328:	627b      	str	r3, [r7, #36]	@ 0x24
 805032a:	68bb      	ldr	r3, [r7, #8]
 805032c:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 805032e:	68bb      	ldr	r3, [r7, #8]
 8050330:	2b01      	cmp	r3, #1
 8050332:	d904      	bls.n	805033e <remove_chain+0x2e>
 8050334:	69bb      	ldr	r3, [r7, #24]
 8050336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8050338:	68ba      	ldr	r2, [r7, #8]
 805033a:	429a      	cmp	r2, r3
 805033c:	d301      	bcc.n	8050342 <remove_chain+0x32>
 805033e:	2302      	movs	r3, #2
 8050340:	e0c4      	b.n	80504cc <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8050342:	687b      	ldr	r3, [r7, #4]
 8050344:	2b00      	cmp	r3, #0
 8050346:	d014      	beq.n	8050372 <remove_chain+0x62>
 8050348:	69bb      	ldr	r3, [r7, #24]
 805034a:	781b      	ldrb	r3, [r3, #0]
 805034c:	2b04      	cmp	r3, #4
 805034e:	d103      	bne.n	8050358 <remove_chain+0x48>
 8050350:	68fb      	ldr	r3, [r7, #12]
 8050352:	79db      	ldrb	r3, [r3, #7]
 8050354:	2b02      	cmp	r3, #2
 8050356:	d00c      	beq.n	8050372 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8050358:	f04f 32ff 	mov.w	r2, #4294967295
 805035c:	6879      	ldr	r1, [r7, #4]
 805035e:	69b8      	ldr	r0, [r7, #24]
 8050360:	f7ff fda2 	bl	804fea8 <put_fat>
 8050364:	4603      	mov	r3, r0
 8050366:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8050368:	7ffb      	ldrb	r3, [r7, #31]
 805036a:	2b00      	cmp	r3, #0
 805036c:	d001      	beq.n	8050372 <remove_chain+0x62>
 805036e:	7ffb      	ldrb	r3, [r7, #31]
 8050370:	e0ac      	b.n	80504cc <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8050372:	68b9      	ldr	r1, [r7, #8]
 8050374:	68f8      	ldr	r0, [r7, #12]
 8050376:	f7ff fc71 	bl	804fc5c <get_fat>
 805037a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 805037c:	697b      	ldr	r3, [r7, #20]
 805037e:	2b00      	cmp	r3, #0
 8050380:	d055      	beq.n	805042e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8050382:	697b      	ldr	r3, [r7, #20]
 8050384:	2b01      	cmp	r3, #1
 8050386:	d101      	bne.n	805038c <remove_chain+0x7c>
 8050388:	2302      	movs	r3, #2
 805038a:	e09f      	b.n	80504cc <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 805038c:	697b      	ldr	r3, [r7, #20]
 805038e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050392:	d101      	bne.n	8050398 <remove_chain+0x88>
 8050394:	2301      	movs	r3, #1
 8050396:	e099      	b.n	80504cc <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8050398:	69bb      	ldr	r3, [r7, #24]
 805039a:	781b      	ldrb	r3, [r3, #0]
 805039c:	2b04      	cmp	r3, #4
 805039e:	d00b      	beq.n	80503b8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80503a0:	2200      	movs	r2, #0
 80503a2:	68b9      	ldr	r1, [r7, #8]
 80503a4:	69b8      	ldr	r0, [r7, #24]
 80503a6:	f7ff fd7f 	bl	804fea8 <put_fat>
 80503aa:	4603      	mov	r3, r0
 80503ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80503ae:	7ffb      	ldrb	r3, [r7, #31]
 80503b0:	2b00      	cmp	r3, #0
 80503b2:	d001      	beq.n	80503b8 <remove_chain+0xa8>
 80503b4:	7ffb      	ldrb	r3, [r7, #31]
 80503b6:	e089      	b.n	80504cc <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80503b8:	69bb      	ldr	r3, [r7, #24]
 80503ba:	699a      	ldr	r2, [r3, #24]
 80503bc:	69bb      	ldr	r3, [r7, #24]
 80503be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80503c0:	3b02      	subs	r3, #2
 80503c2:	429a      	cmp	r2, r3
 80503c4:	d20b      	bcs.n	80503de <remove_chain+0xce>
			fs->free_clst++;
 80503c6:	69bb      	ldr	r3, [r7, #24]
 80503c8:	699b      	ldr	r3, [r3, #24]
 80503ca:	1c5a      	adds	r2, r3, #1
 80503cc:	69bb      	ldr	r3, [r7, #24]
 80503ce:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80503d0:	69bb      	ldr	r3, [r7, #24]
 80503d2:	795b      	ldrb	r3, [r3, #5]
 80503d4:	f043 0301 	orr.w	r3, r3, #1
 80503d8:	b2da      	uxtb	r2, r3
 80503da:	69bb      	ldr	r3, [r7, #24]
 80503dc:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80503de:	6a3b      	ldr	r3, [r7, #32]
 80503e0:	3301      	adds	r3, #1
 80503e2:	697a      	ldr	r2, [r7, #20]
 80503e4:	429a      	cmp	r2, r3
 80503e6:	d102      	bne.n	80503ee <remove_chain+0xde>
			ecl = nxt;
 80503e8:	697b      	ldr	r3, [r7, #20]
 80503ea:	623b      	str	r3, [r7, #32]
 80503ec:	e017      	b.n	805041e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80503ee:	69bb      	ldr	r3, [r7, #24]
 80503f0:	781b      	ldrb	r3, [r3, #0]
 80503f2:	2b04      	cmp	r3, #4
 80503f4:	d10f      	bne.n	8050416 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80503f6:	6a3a      	ldr	r2, [r7, #32]
 80503f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80503fa:	1ad3      	subs	r3, r2, r3
 80503fc:	1c5a      	adds	r2, r3, #1
 80503fe:	2300      	movs	r3, #0
 8050400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8050402:	69b8      	ldr	r0, [r7, #24]
 8050404:	f7ff feba 	bl	805017c <change_bitmap>
 8050408:	4603      	mov	r3, r0
 805040a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 805040c:	7ffb      	ldrb	r3, [r7, #31]
 805040e:	2b00      	cmp	r3, #0
 8050410:	d001      	beq.n	8050416 <remove_chain+0x106>
 8050412:	7ffb      	ldrb	r3, [r7, #31]
 8050414:	e05a      	b.n	80504cc <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 8050416:	697b      	ldr	r3, [r7, #20]
 8050418:	623b      	str	r3, [r7, #32]
 805041a:	6a3b      	ldr	r3, [r7, #32]
 805041c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 805041e:	697b      	ldr	r3, [r7, #20]
 8050420:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8050422:	69bb      	ldr	r3, [r7, #24]
 8050424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8050426:	68ba      	ldr	r2, [r7, #8]
 8050428:	429a      	cmp	r2, r3
 805042a:	d3a2      	bcc.n	8050372 <remove_chain+0x62>
 805042c:	e000      	b.n	8050430 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 805042e:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 8050430:	69bb      	ldr	r3, [r7, #24]
 8050432:	781b      	ldrb	r3, [r3, #0]
 8050434:	2b04      	cmp	r3, #4
 8050436:	d148      	bne.n	80504ca <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8050438:	687b      	ldr	r3, [r7, #4]
 805043a:	2b00      	cmp	r3, #0
 805043c:	d103      	bne.n	8050446 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 805043e:	68fb      	ldr	r3, [r7, #12]
 8050440:	2200      	movs	r2, #0
 8050442:	71da      	strb	r2, [r3, #7]
 8050444:	e041      	b.n	80504ca <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8050446:	68fb      	ldr	r3, [r7, #12]
 8050448:	79db      	ldrb	r3, [r3, #7]
 805044a:	2b00      	cmp	r3, #0
 805044c:	d129      	bne.n	80504a2 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 805044e:	68fb      	ldr	r3, [r7, #12]
 8050450:	689b      	ldr	r3, [r3, #8]
 8050452:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8050454:	e017      	b.n	8050486 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8050456:	68b9      	ldr	r1, [r7, #8]
 8050458:	68f8      	ldr	r0, [r7, #12]
 805045a:	f7ff fbff 	bl	804fc5c <get_fat>
 805045e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8050460:	697b      	ldr	r3, [r7, #20]
 8050462:	2b01      	cmp	r3, #1
 8050464:	d801      	bhi.n	805046a <remove_chain+0x15a>
 8050466:	2302      	movs	r3, #2
 8050468:	e030      	b.n	80504cc <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 805046a:	697b      	ldr	r3, [r7, #20]
 805046c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050470:	d101      	bne.n	8050476 <remove_chain+0x166>
 8050472:	2301      	movs	r3, #1
 8050474:	e02a      	b.n	80504cc <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8050476:	68bb      	ldr	r3, [r7, #8]
 8050478:	3301      	adds	r3, #1
 805047a:	697a      	ldr	r2, [r7, #20]
 805047c:	429a      	cmp	r2, r3
 805047e:	d107      	bne.n	8050490 <remove_chain+0x180>
					clst++;
 8050480:	68bb      	ldr	r3, [r7, #8]
 8050482:	3301      	adds	r3, #1
 8050484:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8050486:	68ba      	ldr	r2, [r7, #8]
 8050488:	687b      	ldr	r3, [r7, #4]
 805048a:	429a      	cmp	r2, r3
 805048c:	d1e3      	bne.n	8050456 <remove_chain+0x146>
 805048e:	e000      	b.n	8050492 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8050490:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8050492:	68ba      	ldr	r2, [r7, #8]
 8050494:	687b      	ldr	r3, [r7, #4]
 8050496:	429a      	cmp	r2, r3
 8050498:	d117      	bne.n	80504ca <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 805049a:	68fb      	ldr	r3, [r7, #12]
 805049c:	2202      	movs	r2, #2
 805049e:	71da      	strb	r2, [r3, #7]
 80504a0:	e013      	b.n	80504ca <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 80504a2:	68fb      	ldr	r3, [r7, #12]
 80504a4:	79db      	ldrb	r3, [r3, #7]
 80504a6:	2b03      	cmp	r3, #3
 80504a8:	d10f      	bne.n	80504ca <remove_chain+0x1ba>
 80504aa:	68fb      	ldr	r3, [r7, #12]
 80504ac:	689b      	ldr	r3, [r3, #8]
 80504ae:	687a      	ldr	r2, [r7, #4]
 80504b0:	429a      	cmp	r2, r3
 80504b2:	d30a      	bcc.n	80504ca <remove_chain+0x1ba>
 80504b4:	68fb      	ldr	r3, [r7, #12]
 80504b6:	689a      	ldr	r2, [r3, #8]
 80504b8:	68fb      	ldr	r3, [r7, #12]
 80504ba:	699b      	ldr	r3, [r3, #24]
 80504bc:	4413      	add	r3, r2
 80504be:	687a      	ldr	r2, [r7, #4]
 80504c0:	429a      	cmp	r2, r3
 80504c2:	d802      	bhi.n	80504ca <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 80504c4:	68fb      	ldr	r3, [r7, #12]
 80504c6:	2202      	movs	r2, #2
 80504c8:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 80504ca:	2300      	movs	r3, #0
}
 80504cc:	4618      	mov	r0, r3
 80504ce:	3728      	adds	r7, #40	@ 0x28
 80504d0:	46bd      	mov	sp, r7
 80504d2:	bd80      	pop	{r7, pc}

080504d4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80504d4:	b580      	push	{r7, lr}
 80504d6:	b088      	sub	sp, #32
 80504d8:	af00      	add	r7, sp, #0
 80504da:	6078      	str	r0, [r7, #4]
 80504dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80504de:	687b      	ldr	r3, [r7, #4]
 80504e0:	681b      	ldr	r3, [r3, #0]
 80504e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80504e4:	683b      	ldr	r3, [r7, #0]
 80504e6:	2b00      	cmp	r3, #0
 80504e8:	d10d      	bne.n	8050506 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80504ea:	693b      	ldr	r3, [r7, #16]
 80504ec:	695b      	ldr	r3, [r3, #20]
 80504ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80504f0:	69bb      	ldr	r3, [r7, #24]
 80504f2:	2b00      	cmp	r3, #0
 80504f4:	d004      	beq.n	8050500 <create_chain+0x2c>
 80504f6:	693b      	ldr	r3, [r7, #16]
 80504f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80504fa:	69ba      	ldr	r2, [r7, #24]
 80504fc:	429a      	cmp	r2, r3
 80504fe:	d31b      	bcc.n	8050538 <create_chain+0x64>
 8050500:	2301      	movs	r3, #1
 8050502:	61bb      	str	r3, [r7, #24]
 8050504:	e018      	b.n	8050538 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8050506:	6839      	ldr	r1, [r7, #0]
 8050508:	6878      	ldr	r0, [r7, #4]
 805050a:	f7ff fba7 	bl	804fc5c <get_fat>
 805050e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8050510:	68fb      	ldr	r3, [r7, #12]
 8050512:	2b01      	cmp	r3, #1
 8050514:	d801      	bhi.n	805051a <create_chain+0x46>
 8050516:	2301      	movs	r3, #1
 8050518:	e113      	b.n	8050742 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 805051a:	68fb      	ldr	r3, [r7, #12]
 805051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050520:	d101      	bne.n	8050526 <create_chain+0x52>
 8050522:	68fb      	ldr	r3, [r7, #12]
 8050524:	e10d      	b.n	8050742 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8050526:	693b      	ldr	r3, [r7, #16]
 8050528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805052a:	68fa      	ldr	r2, [r7, #12]
 805052c:	429a      	cmp	r2, r3
 805052e:	d201      	bcs.n	8050534 <create_chain+0x60>
 8050530:	68fb      	ldr	r3, [r7, #12]
 8050532:	e106      	b.n	8050742 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 8050534:	683b      	ldr	r3, [r7, #0]
 8050536:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8050538:	693b      	ldr	r3, [r7, #16]
 805053a:	699b      	ldr	r3, [r3, #24]
 805053c:	2b00      	cmp	r3, #0
 805053e:	d101      	bne.n	8050544 <create_chain+0x70>
 8050540:	2300      	movs	r3, #0
 8050542:	e0fe      	b.n	8050742 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8050544:	693b      	ldr	r3, [r7, #16]
 8050546:	781b      	ldrb	r3, [r3, #0]
 8050548:	2b04      	cmp	r3, #4
 805054a:	d165      	bne.n	8050618 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 805054c:	2201      	movs	r2, #1
 805054e:	69b9      	ldr	r1, [r7, #24]
 8050550:	6938      	ldr	r0, [r7, #16]
 8050552:	f7ff fd97 	bl	8050084 <find_bitmap>
 8050556:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8050558:	69fb      	ldr	r3, [r7, #28]
 805055a:	2b00      	cmp	r3, #0
 805055c:	d003      	beq.n	8050566 <create_chain+0x92>
 805055e:	69fb      	ldr	r3, [r7, #28]
 8050560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050564:	d101      	bne.n	805056a <create_chain+0x96>
 8050566:	69fb      	ldr	r3, [r7, #28]
 8050568:	e0eb      	b.n	8050742 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 805056a:	2301      	movs	r3, #1
 805056c:	2201      	movs	r2, #1
 805056e:	69f9      	ldr	r1, [r7, #28]
 8050570:	6938      	ldr	r0, [r7, #16]
 8050572:	f7ff fe03 	bl	805017c <change_bitmap>
 8050576:	4603      	mov	r3, r0
 8050578:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 805057a:	7dfb      	ldrb	r3, [r7, #23]
 805057c:	2b02      	cmp	r3, #2
 805057e:	d101      	bne.n	8050584 <create_chain+0xb0>
 8050580:	2301      	movs	r3, #1
 8050582:	e0de      	b.n	8050742 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8050584:	7dfb      	ldrb	r3, [r7, #23]
 8050586:	2b01      	cmp	r3, #1
 8050588:	d102      	bne.n	8050590 <create_chain+0xbc>
 805058a:	f04f 33ff 	mov.w	r3, #4294967295
 805058e:	e0d8      	b.n	8050742 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8050590:	683b      	ldr	r3, [r7, #0]
 8050592:	2b00      	cmp	r3, #0
 8050594:	d103      	bne.n	805059e <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8050596:	687b      	ldr	r3, [r7, #4]
 8050598:	2202      	movs	r2, #2
 805059a:	71da      	strb	r2, [r3, #7]
 805059c:	e011      	b.n	80505c2 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 805059e:	687b      	ldr	r3, [r7, #4]
 80505a0:	79db      	ldrb	r3, [r3, #7]
 80505a2:	2b02      	cmp	r3, #2
 80505a4:	d10d      	bne.n	80505c2 <create_chain+0xee>
 80505a6:	69bb      	ldr	r3, [r7, #24]
 80505a8:	3301      	adds	r3, #1
 80505aa:	69fa      	ldr	r2, [r7, #28]
 80505ac:	429a      	cmp	r2, r3
 80505ae:	d008      	beq.n	80505c2 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80505b0:	687b      	ldr	r3, [r7, #4]
 80505b2:	689b      	ldr	r3, [r3, #8]
 80505b4:	69ba      	ldr	r2, [r7, #24]
 80505b6:	1ad2      	subs	r2, r2, r3
 80505b8:	687b      	ldr	r3, [r7, #4]
 80505ba:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80505bc:	687b      	ldr	r3, [r7, #4]
 80505be:	2203      	movs	r2, #3
 80505c0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80505c2:	687b      	ldr	r3, [r7, #4]
 80505c4:	79db      	ldrb	r3, [r3, #7]
 80505c6:	2b02      	cmp	r3, #2
 80505c8:	f000 8098 	beq.w	80506fc <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80505cc:	683b      	ldr	r3, [r7, #0]
 80505ce:	3301      	adds	r3, #1
 80505d0:	69fa      	ldr	r2, [r7, #28]
 80505d2:	429a      	cmp	r2, r3
 80505d4:	d10b      	bne.n	80505ee <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80505d6:	687b      	ldr	r3, [r7, #4]
 80505d8:	69db      	ldr	r3, [r3, #28]
 80505da:	2b00      	cmp	r3, #0
 80505dc:	d003      	beq.n	80505e6 <create_chain+0x112>
 80505de:	687b      	ldr	r3, [r7, #4]
 80505e0:	69db      	ldr	r3, [r3, #28]
 80505e2:	3301      	adds	r3, #1
 80505e4:	e000      	b.n	80505e8 <create_chain+0x114>
 80505e6:	2302      	movs	r3, #2
 80505e8:	687a      	ldr	r2, [r7, #4]
 80505ea:	61d3      	str	r3, [r2, #28]
 80505ec:	e086      	b.n	80506fc <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80505ee:	687b      	ldr	r3, [r7, #4]
 80505f0:	69db      	ldr	r3, [r3, #28]
 80505f2:	2b00      	cmp	r3, #0
 80505f4:	d102      	bne.n	80505fc <create_chain+0x128>
 80505f6:	687b      	ldr	r3, [r7, #4]
 80505f8:	2201      	movs	r2, #1
 80505fa:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80505fc:	69fa      	ldr	r2, [r7, #28]
 80505fe:	6839      	ldr	r1, [r7, #0]
 8050600:	6878      	ldr	r0, [r7, #4]
 8050602:	f7ff fe54 	bl	80502ae <fill_last_frag>
 8050606:	4603      	mov	r3, r0
 8050608:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 805060a:	7dfb      	ldrb	r3, [r7, #23]
 805060c:	2b00      	cmp	r3, #0
 805060e:	d175      	bne.n	80506fc <create_chain+0x228>
 8050610:	687b      	ldr	r3, [r7, #4]
 8050612:	2201      	movs	r2, #1
 8050614:	61da      	str	r2, [r3, #28]
 8050616:	e071      	b.n	80506fc <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8050618:	2300      	movs	r3, #0
 805061a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 805061c:	69ba      	ldr	r2, [r7, #24]
 805061e:	683b      	ldr	r3, [r7, #0]
 8050620:	429a      	cmp	r2, r3
 8050622:	d129      	bne.n	8050678 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8050624:	69bb      	ldr	r3, [r7, #24]
 8050626:	3301      	adds	r3, #1
 8050628:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 805062a:	693b      	ldr	r3, [r7, #16]
 805062c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805062e:	69fa      	ldr	r2, [r7, #28]
 8050630:	429a      	cmp	r2, r3
 8050632:	d301      	bcc.n	8050638 <create_chain+0x164>
 8050634:	2302      	movs	r3, #2
 8050636:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8050638:	69f9      	ldr	r1, [r7, #28]
 805063a:	6878      	ldr	r0, [r7, #4]
 805063c:	f7ff fb0e 	bl	804fc5c <get_fat>
 8050640:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8050642:	68fb      	ldr	r3, [r7, #12]
 8050644:	2b01      	cmp	r3, #1
 8050646:	d003      	beq.n	8050650 <create_chain+0x17c>
 8050648:	68fb      	ldr	r3, [r7, #12]
 805064a:	f1b3 3fff 	cmp.w	r3, #4294967295
 805064e:	d101      	bne.n	8050654 <create_chain+0x180>
 8050650:	68fb      	ldr	r3, [r7, #12]
 8050652:	e076      	b.n	8050742 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 8050654:	68fb      	ldr	r3, [r7, #12]
 8050656:	2b00      	cmp	r3, #0
 8050658:	d00e      	beq.n	8050678 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 805065a:	693b      	ldr	r3, [r7, #16]
 805065c:	695b      	ldr	r3, [r3, #20]
 805065e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8050660:	68fb      	ldr	r3, [r7, #12]
 8050662:	2b01      	cmp	r3, #1
 8050664:	d906      	bls.n	8050674 <create_chain+0x1a0>
 8050666:	693b      	ldr	r3, [r7, #16]
 8050668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805066a:	68fa      	ldr	r2, [r7, #12]
 805066c:	429a      	cmp	r2, r3
 805066e:	d201      	bcs.n	8050674 <create_chain+0x1a0>
 8050670:	68fb      	ldr	r3, [r7, #12]
 8050672:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8050674:	2300      	movs	r3, #0
 8050676:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8050678:	69fb      	ldr	r3, [r7, #28]
 805067a:	2b00      	cmp	r3, #0
 805067c:	d129      	bne.n	80506d2 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 805067e:	69bb      	ldr	r3, [r7, #24]
 8050680:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8050682:	69fb      	ldr	r3, [r7, #28]
 8050684:	3301      	adds	r3, #1
 8050686:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8050688:	693b      	ldr	r3, [r7, #16]
 805068a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805068c:	69fa      	ldr	r2, [r7, #28]
 805068e:	429a      	cmp	r2, r3
 8050690:	d307      	bcc.n	80506a2 <create_chain+0x1ce>
					ncl = 2;
 8050692:	2302      	movs	r3, #2
 8050694:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8050696:	69fa      	ldr	r2, [r7, #28]
 8050698:	69bb      	ldr	r3, [r7, #24]
 805069a:	429a      	cmp	r2, r3
 805069c:	d901      	bls.n	80506a2 <create_chain+0x1ce>
 805069e:	2300      	movs	r3, #0
 80506a0:	e04f      	b.n	8050742 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80506a2:	69f9      	ldr	r1, [r7, #28]
 80506a4:	6878      	ldr	r0, [r7, #4]
 80506a6:	f7ff fad9 	bl	804fc5c <get_fat>
 80506aa:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80506ac:	68fb      	ldr	r3, [r7, #12]
 80506ae:	2b00      	cmp	r3, #0
 80506b0:	d00e      	beq.n	80506d0 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80506b2:	68fb      	ldr	r3, [r7, #12]
 80506b4:	2b01      	cmp	r3, #1
 80506b6:	d003      	beq.n	80506c0 <create_chain+0x1ec>
 80506b8:	68fb      	ldr	r3, [r7, #12]
 80506ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80506be:	d101      	bne.n	80506c4 <create_chain+0x1f0>
 80506c0:	68fb      	ldr	r3, [r7, #12]
 80506c2:	e03e      	b.n	8050742 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80506c4:	69fa      	ldr	r2, [r7, #28]
 80506c6:	69bb      	ldr	r3, [r7, #24]
 80506c8:	429a      	cmp	r2, r3
 80506ca:	d1da      	bne.n	8050682 <create_chain+0x1ae>
 80506cc:	2300      	movs	r3, #0
 80506ce:	e038      	b.n	8050742 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 80506d0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80506d2:	f04f 32ff 	mov.w	r2, #4294967295
 80506d6:	69f9      	ldr	r1, [r7, #28]
 80506d8:	6938      	ldr	r0, [r7, #16]
 80506da:	f7ff fbe5 	bl	804fea8 <put_fat>
 80506de:	4603      	mov	r3, r0
 80506e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80506e2:	7dfb      	ldrb	r3, [r7, #23]
 80506e4:	2b00      	cmp	r3, #0
 80506e6:	d109      	bne.n	80506fc <create_chain+0x228>
 80506e8:	683b      	ldr	r3, [r7, #0]
 80506ea:	2b00      	cmp	r3, #0
 80506ec:	d006      	beq.n	80506fc <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80506ee:	69fa      	ldr	r2, [r7, #28]
 80506f0:	6839      	ldr	r1, [r7, #0]
 80506f2:	6938      	ldr	r0, [r7, #16]
 80506f4:	f7ff fbd8 	bl	804fea8 <put_fat>
 80506f8:	4603      	mov	r3, r0
 80506fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80506fc:	7dfb      	ldrb	r3, [r7, #23]
 80506fe:	2b00      	cmp	r3, #0
 8050700:	d116      	bne.n	8050730 <create_chain+0x25c>
		fs->last_clst = ncl;
 8050702:	693b      	ldr	r3, [r7, #16]
 8050704:	69fa      	ldr	r2, [r7, #28]
 8050706:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8050708:	693b      	ldr	r3, [r7, #16]
 805070a:	699a      	ldr	r2, [r3, #24]
 805070c:	693b      	ldr	r3, [r7, #16]
 805070e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8050710:	3b02      	subs	r3, #2
 8050712:	429a      	cmp	r2, r3
 8050714:	d804      	bhi.n	8050720 <create_chain+0x24c>
 8050716:	693b      	ldr	r3, [r7, #16]
 8050718:	699b      	ldr	r3, [r3, #24]
 805071a:	1e5a      	subs	r2, r3, #1
 805071c:	693b      	ldr	r3, [r7, #16]
 805071e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8050720:	693b      	ldr	r3, [r7, #16]
 8050722:	795b      	ldrb	r3, [r3, #5]
 8050724:	f043 0301 	orr.w	r3, r3, #1
 8050728:	b2da      	uxtb	r2, r3
 805072a:	693b      	ldr	r3, [r7, #16]
 805072c:	715a      	strb	r2, [r3, #5]
 805072e:	e007      	b.n	8050740 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8050730:	7dfb      	ldrb	r3, [r7, #23]
 8050732:	2b01      	cmp	r3, #1
 8050734:	d102      	bne.n	805073c <create_chain+0x268>
 8050736:	f04f 33ff 	mov.w	r3, #4294967295
 805073a:	e000      	b.n	805073e <create_chain+0x26a>
 805073c:	2301      	movs	r3, #1
 805073e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8050740:	69fb      	ldr	r3, [r7, #28]
}
 8050742:	4618      	mov	r0, r3
 8050744:	3720      	adds	r7, #32
 8050746:	46bd      	mov	sp, r7
 8050748:	bd80      	pop	{r7, pc}

0805074a <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 805074a:	b5b0      	push	{r4, r5, r7, lr}
 805074c:	b088      	sub	sp, #32
 805074e:	af00      	add	r7, sp, #0
 8050750:	60f8      	str	r0, [r7, #12]
 8050752:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl;
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;
 8050756:	68fb      	ldr	r3, [r7, #12]
 8050758:	681b      	ldr	r3, [r3, #0]
 805075a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 805075c:	68fb      	ldr	r3, [r7, #12]
 805075e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8050760:	3304      	adds	r3, #4
 8050762:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8050764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8050768:	f04f 0000 	mov.w	r0, #0
 805076c:	f04f 0100 	mov.w	r1, #0
 8050770:	0a50      	lsrs	r0, r2, #9
 8050772:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8050776:	0a59      	lsrs	r1, r3, #9
 8050778:	697b      	ldr	r3, [r7, #20]
 805077a:	895b      	ldrh	r3, [r3, #10]
 805077c:	b29b      	uxth	r3, r3
 805077e:	2200      	movs	r2, #0
 8050780:	461c      	mov	r4, r3
 8050782:	4615      	mov	r5, r2
 8050784:	4622      	mov	r2, r4
 8050786:	462b      	mov	r3, r5
 8050788:	f7ef fe12 	bl	80403b0 <__aeabi_uldivmod>
 805078c:	4602      	mov	r2, r0
 805078e:	460b      	mov	r3, r1
 8050790:	4613      	mov	r3, r2
 8050792:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8050794:	69bb      	ldr	r3, [r7, #24]
 8050796:	1d1a      	adds	r2, r3, #4
 8050798:	61ba      	str	r2, [r7, #24]
 805079a:	681b      	ldr	r3, [r3, #0]
 805079c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 805079e:	693b      	ldr	r3, [r7, #16]
 80507a0:	2b00      	cmp	r3, #0
 80507a2:	d101      	bne.n	80507a8 <clmt_clust+0x5e>
 80507a4:	2300      	movs	r3, #0
 80507a6:	e010      	b.n	80507ca <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 80507a8:	69fa      	ldr	r2, [r7, #28]
 80507aa:	693b      	ldr	r3, [r7, #16]
 80507ac:	429a      	cmp	r2, r3
 80507ae:	d307      	bcc.n	80507c0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80507b0:	69fa      	ldr	r2, [r7, #28]
 80507b2:	693b      	ldr	r3, [r7, #16]
 80507b4:	1ad3      	subs	r3, r2, r3
 80507b6:	61fb      	str	r3, [r7, #28]
 80507b8:	69bb      	ldr	r3, [r7, #24]
 80507ba:	3304      	adds	r3, #4
 80507bc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80507be:	e7e9      	b.n	8050794 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 80507c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80507c2:	69bb      	ldr	r3, [r7, #24]
 80507c4:	681a      	ldr	r2, [r3, #0]
 80507c6:	69fb      	ldr	r3, [r7, #28]
 80507c8:	4413      	add	r3, r2
}
 80507ca:	4618      	mov	r0, r3
 80507cc:	3720      	adds	r7, #32
 80507ce:	46bd      	mov	sp, r7
 80507d0:	bdb0      	pop	{r4, r5, r7, pc}

080507d2 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80507d2:	b580      	push	{r7, lr}
 80507d4:	b086      	sub	sp, #24
 80507d6:	af00      	add	r7, sp, #0
 80507d8:	6078      	str	r0, [r7, #4]
 80507da:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80507dc:	6878      	ldr	r0, [r7, #4]
 80507de:	f7ff f945 	bl	804fa6c <sync_window>
 80507e2:	4603      	mov	r3, r0
 80507e4:	2b00      	cmp	r3, #0
 80507e6:	d001      	beq.n	80507ec <dir_clear+0x1a>
 80507e8:	2301      	movs	r3, #1
 80507ea:	e036      	b.n	805085a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80507ec:	6839      	ldr	r1, [r7, #0]
 80507ee:	6878      	ldr	r0, [r7, #4]
 80507f0:	f7ff fa14 	bl	804fc1c <clst2sect>
 80507f4:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80507f6:	687b      	ldr	r3, [r7, #4]
 80507f8:	693a      	ldr	r2, [r7, #16]
 80507fa:	649a      	str	r2, [r3, #72]	@ 0x48
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80507fc:	687b      	ldr	r3, [r7, #4]
 80507fe:	334c      	adds	r3, #76	@ 0x4c
 8050800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8050804:	2100      	movs	r1, #0
 8050806:	4618      	mov	r0, r3
 8050808:	f018 ffec 	bl	80697e4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 805080c:	687b      	ldr	r3, [r7, #4]
 805080e:	334c      	adds	r3, #76	@ 0x4c
 8050810:	60fb      	str	r3, [r7, #12]
 8050812:	2301      	movs	r3, #1
 8050814:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8050816:	2300      	movs	r3, #0
 8050818:	617b      	str	r3, [r7, #20]
 805081a:	e003      	b.n	8050824 <dir_clear+0x52>
 805081c:	697a      	ldr	r2, [r7, #20]
 805081e:	68bb      	ldr	r3, [r7, #8]
 8050820:	4413      	add	r3, r2
 8050822:	617b      	str	r3, [r7, #20]
 8050824:	687b      	ldr	r3, [r7, #4]
 8050826:	895b      	ldrh	r3, [r3, #10]
 8050828:	461a      	mov	r2, r3
 805082a:	697b      	ldr	r3, [r7, #20]
 805082c:	4293      	cmp	r3, r2
 805082e:	d20b      	bcs.n	8050848 <dir_clear+0x76>
 8050830:	687b      	ldr	r3, [r7, #4]
 8050832:	7858      	ldrb	r0, [r3, #1]
 8050834:	693a      	ldr	r2, [r7, #16]
 8050836:	697b      	ldr	r3, [r7, #20]
 8050838:	441a      	add	r2, r3
 805083a:	68bb      	ldr	r3, [r7, #8]
 805083c:	68f9      	ldr	r1, [r7, #12]
 805083e:	f7fe fc7d 	bl	804f13c <disk_write>
 8050842:	4603      	mov	r3, r0
 8050844:	2b00      	cmp	r3, #0
 8050846:	d0e9      	beq.n	805081c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8050848:	687b      	ldr	r3, [r7, #4]
 805084a:	895b      	ldrh	r3, [r3, #10]
 805084c:	461a      	mov	r2, r3
 805084e:	697b      	ldr	r3, [r7, #20]
 8050850:	4293      	cmp	r3, r2
 8050852:	bf14      	ite	ne
 8050854:	2301      	movne	r3, #1
 8050856:	2300      	moveq	r3, #0
 8050858:	b2db      	uxtb	r3, r3
}
 805085a:	4618      	mov	r0, r3
 805085c:	3718      	adds	r7, #24
 805085e:	46bd      	mov	sp, r7
 8050860:	bd80      	pop	{r7, pc}

08050862 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8050862:	b580      	push	{r7, lr}
 8050864:	b086      	sub	sp, #24
 8050866:	af00      	add	r7, sp, #0
 8050868:	6078      	str	r0, [r7, #4]
 805086a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 805086c:	687b      	ldr	r3, [r7, #4]
 805086e:	681b      	ldr	r3, [r3, #0]
 8050870:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8050872:	693b      	ldr	r3, [r7, #16]
 8050874:	781b      	ldrb	r3, [r3, #0]
 8050876:	2b04      	cmp	r3, #4
 8050878:	d102      	bne.n	8050880 <dir_sdi+0x1e>
 805087a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 805087e:	e001      	b.n	8050884 <dir_sdi+0x22>
 8050880:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8050884:	683b      	ldr	r3, [r7, #0]
 8050886:	429a      	cmp	r2, r3
 8050888:	d904      	bls.n	8050894 <dir_sdi+0x32>
 805088a:	683b      	ldr	r3, [r7, #0]
 805088c:	f003 031f 	and.w	r3, r3, #31
 8050890:	2b00      	cmp	r3, #0
 8050892:	d001      	beq.n	8050898 <dir_sdi+0x36>
		return FR_INT_ERR;
 8050894:	2302      	movs	r3, #2
 8050896:	e066      	b.n	8050966 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8050898:	687b      	ldr	r3, [r7, #4]
 805089a:	683a      	ldr	r2, [r7, #0]
 805089c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 805089e:	687b      	ldr	r3, [r7, #4]
 80508a0:	689b      	ldr	r3, [r3, #8]
 80508a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80508a4:	697b      	ldr	r3, [r7, #20]
 80508a6:	2b00      	cmp	r3, #0
 80508a8:	d109      	bne.n	80508be <dir_sdi+0x5c>
 80508aa:	693b      	ldr	r3, [r7, #16]
 80508ac:	781b      	ldrb	r3, [r3, #0]
 80508ae:	2b02      	cmp	r3, #2
 80508b0:	d905      	bls.n	80508be <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 80508b2:	693b      	ldr	r3, [r7, #16]
 80508b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80508b6:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80508b8:	687b      	ldr	r3, [r7, #4]
 80508ba:	2200      	movs	r2, #0
 80508bc:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80508be:	697b      	ldr	r3, [r7, #20]
 80508c0:	2b00      	cmp	r3, #0
 80508c2:	d10c      	bne.n	80508de <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80508c4:	683b      	ldr	r3, [r7, #0]
 80508c6:	095b      	lsrs	r3, r3, #5
 80508c8:	693a      	ldr	r2, [r7, #16]
 80508ca:	8912      	ldrh	r2, [r2, #8]
 80508cc:	4293      	cmp	r3, r2
 80508ce:	d301      	bcc.n	80508d4 <dir_sdi+0x72>
 80508d0:	2302      	movs	r3, #2
 80508d2:	e048      	b.n	8050966 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 80508d4:	693b      	ldr	r3, [r7, #16]
 80508d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80508d8:	687b      	ldr	r3, [r7, #4]
 80508da:	639a      	str	r2, [r3, #56]	@ 0x38
 80508dc:	e029      	b.n	8050932 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80508de:	693b      	ldr	r3, [r7, #16]
 80508e0:	895b      	ldrh	r3, [r3, #10]
 80508e2:	025b      	lsls	r3, r3, #9
 80508e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80508e6:	e019      	b.n	805091c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80508e8:	687b      	ldr	r3, [r7, #4]
 80508ea:	6979      	ldr	r1, [r7, #20]
 80508ec:	4618      	mov	r0, r3
 80508ee:	f7ff f9b5 	bl	804fc5c <get_fat>
 80508f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80508f4:	697b      	ldr	r3, [r7, #20]
 80508f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80508fa:	d101      	bne.n	8050900 <dir_sdi+0x9e>
 80508fc:	2301      	movs	r3, #1
 80508fe:	e032      	b.n	8050966 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8050900:	697b      	ldr	r3, [r7, #20]
 8050902:	2b01      	cmp	r3, #1
 8050904:	d904      	bls.n	8050910 <dir_sdi+0xae>
 8050906:	693b      	ldr	r3, [r7, #16]
 8050908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805090a:	697a      	ldr	r2, [r7, #20]
 805090c:	429a      	cmp	r2, r3
 805090e:	d301      	bcc.n	8050914 <dir_sdi+0xb2>
 8050910:	2302      	movs	r3, #2
 8050912:	e028      	b.n	8050966 <dir_sdi+0x104>
			ofs -= csz;
 8050914:	683a      	ldr	r2, [r7, #0]
 8050916:	68fb      	ldr	r3, [r7, #12]
 8050918:	1ad3      	subs	r3, r2, r3
 805091a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 805091c:	683a      	ldr	r2, [r7, #0]
 805091e:	68fb      	ldr	r3, [r7, #12]
 8050920:	429a      	cmp	r2, r3
 8050922:	d2e1      	bcs.n	80508e8 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 8050924:	6979      	ldr	r1, [r7, #20]
 8050926:	6938      	ldr	r0, [r7, #16]
 8050928:	f7ff f978 	bl	804fc1c <clst2sect>
 805092c:	4602      	mov	r2, r0
 805092e:	687b      	ldr	r3, [r7, #4]
 8050930:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8050932:	687b      	ldr	r3, [r7, #4]
 8050934:	697a      	ldr	r2, [r7, #20]
 8050936:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8050938:	687b      	ldr	r3, [r7, #4]
 805093a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 805093c:	2b00      	cmp	r3, #0
 805093e:	d101      	bne.n	8050944 <dir_sdi+0xe2>
 8050940:	2302      	movs	r3, #2
 8050942:	e010      	b.n	8050966 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8050944:	687b      	ldr	r3, [r7, #4]
 8050946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8050948:	683b      	ldr	r3, [r7, #0]
 805094a:	0a5b      	lsrs	r3, r3, #9
 805094c:	441a      	add	r2, r3
 805094e:	687b      	ldr	r3, [r7, #4]
 8050950:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8050952:	693b      	ldr	r3, [r7, #16]
 8050954:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8050958:	683b      	ldr	r3, [r7, #0]
 805095a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 805095e:	441a      	add	r2, r3
 8050960:	687b      	ldr	r3, [r7, #4]
 8050962:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8050964:	2300      	movs	r3, #0
}
 8050966:	4618      	mov	r0, r3
 8050968:	3718      	adds	r7, #24
 805096a:	46bd      	mov	sp, r7
 805096c:	bd80      	pop	{r7, pc}

0805096e <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 805096e:	b580      	push	{r7, lr}
 8050970:	b086      	sub	sp, #24
 8050972:	af00      	add	r7, sp, #0
 8050974:	6078      	str	r0, [r7, #4]
 8050976:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8050978:	687b      	ldr	r3, [r7, #4]
 805097a:	681b      	ldr	r3, [r3, #0]
 805097c:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 805097e:	687b      	ldr	r3, [r7, #4]
 8050980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8050982:	3320      	adds	r3, #32
 8050984:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8050986:	693b      	ldr	r3, [r7, #16]
 8050988:	781b      	ldrb	r3, [r3, #0]
 805098a:	2b04      	cmp	r3, #4
 805098c:	d102      	bne.n	8050994 <dir_next+0x26>
 805098e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8050992:	e001      	b.n	8050998 <dir_next+0x2a>
 8050994:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8050998:	68fb      	ldr	r3, [r7, #12]
 805099a:	429a      	cmp	r2, r3
 805099c:	d802      	bhi.n	80509a4 <dir_next+0x36>
 805099e:	687b      	ldr	r3, [r7, #4]
 80509a0:	2200      	movs	r2, #0
 80509a2:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80509a4:	687b      	ldr	r3, [r7, #4]
 80509a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80509a8:	2b00      	cmp	r3, #0
 80509aa:	d101      	bne.n	80509b0 <dir_next+0x42>
 80509ac:	2304      	movs	r3, #4
 80509ae:	e07f      	b.n	8050ab0 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80509b0:	68fb      	ldr	r3, [r7, #12]
 80509b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80509b6:	2b00      	cmp	r3, #0
 80509b8:	d16d      	bne.n	8050a96 <dir_next+0x128>
		dp->sect++;				/* Next sector */
 80509ba:	687b      	ldr	r3, [r7, #4]
 80509bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80509be:	1c5a      	adds	r2, r3, #1
 80509c0:	687b      	ldr	r3, [r7, #4]
 80509c2:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 80509c4:	687b      	ldr	r3, [r7, #4]
 80509c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80509c8:	2b00      	cmp	r3, #0
 80509ca:	d10a      	bne.n	80509e2 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80509cc:	68fb      	ldr	r3, [r7, #12]
 80509ce:	095b      	lsrs	r3, r3, #5
 80509d0:	693a      	ldr	r2, [r7, #16]
 80509d2:	8912      	ldrh	r2, [r2, #8]
 80509d4:	4293      	cmp	r3, r2
 80509d6:	d35e      	bcc.n	8050a96 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 80509d8:	687b      	ldr	r3, [r7, #4]
 80509da:	2200      	movs	r2, #0
 80509dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80509de:	2304      	movs	r3, #4
 80509e0:	e066      	b.n	8050ab0 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80509e2:	68fb      	ldr	r3, [r7, #12]
 80509e4:	0a5b      	lsrs	r3, r3, #9
 80509e6:	693a      	ldr	r2, [r7, #16]
 80509e8:	8952      	ldrh	r2, [r2, #10]
 80509ea:	3a01      	subs	r2, #1
 80509ec:	4013      	ands	r3, r2
 80509ee:	2b00      	cmp	r3, #0
 80509f0:	d151      	bne.n	8050a96 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80509f2:	687a      	ldr	r2, [r7, #4]
 80509f4:	687b      	ldr	r3, [r7, #4]
 80509f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80509f8:	4619      	mov	r1, r3
 80509fa:	4610      	mov	r0, r2
 80509fc:	f7ff f92e 	bl	804fc5c <get_fat>
 8050a00:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8050a02:	697b      	ldr	r3, [r7, #20]
 8050a04:	2b01      	cmp	r3, #1
 8050a06:	d801      	bhi.n	8050a0c <dir_next+0x9e>
 8050a08:	2302      	movs	r3, #2
 8050a0a:	e051      	b.n	8050ab0 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8050a0c:	697b      	ldr	r3, [r7, #20]
 8050a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050a12:	d101      	bne.n	8050a18 <dir_next+0xaa>
 8050a14:	2301      	movs	r3, #1
 8050a16:	e04b      	b.n	8050ab0 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8050a18:	693b      	ldr	r3, [r7, #16]
 8050a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8050a1c:	697a      	ldr	r2, [r7, #20]
 8050a1e:	429a      	cmp	r2, r3
 8050a20:	d32f      	bcc.n	8050a82 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8050a22:	683b      	ldr	r3, [r7, #0]
 8050a24:	2b00      	cmp	r3, #0
 8050a26:	d104      	bne.n	8050a32 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8050a28:	687b      	ldr	r3, [r7, #4]
 8050a2a:	2200      	movs	r2, #0
 8050a2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8050a2e:	2304      	movs	r3, #4
 8050a30:	e03e      	b.n	8050ab0 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8050a32:	687a      	ldr	r2, [r7, #4]
 8050a34:	687b      	ldr	r3, [r7, #4]
 8050a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8050a38:	4619      	mov	r1, r3
 8050a3a:	4610      	mov	r0, r2
 8050a3c:	f7ff fd4a 	bl	80504d4 <create_chain>
 8050a40:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8050a42:	697b      	ldr	r3, [r7, #20]
 8050a44:	2b00      	cmp	r3, #0
 8050a46:	d101      	bne.n	8050a4c <dir_next+0xde>
 8050a48:	2307      	movs	r3, #7
 8050a4a:	e031      	b.n	8050ab0 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8050a4c:	697b      	ldr	r3, [r7, #20]
 8050a4e:	2b01      	cmp	r3, #1
 8050a50:	d101      	bne.n	8050a56 <dir_next+0xe8>
 8050a52:	2302      	movs	r3, #2
 8050a54:	e02c      	b.n	8050ab0 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8050a56:	697b      	ldr	r3, [r7, #20]
 8050a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8050a5c:	d101      	bne.n	8050a62 <dir_next+0xf4>
 8050a5e:	2301      	movs	r3, #1
 8050a60:	e026      	b.n	8050ab0 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8050a62:	6979      	ldr	r1, [r7, #20]
 8050a64:	6938      	ldr	r0, [r7, #16]
 8050a66:	f7ff feb4 	bl	80507d2 <dir_clear>
 8050a6a:	4603      	mov	r3, r0
 8050a6c:	2b00      	cmp	r3, #0
 8050a6e:	d001      	beq.n	8050a74 <dir_next+0x106>
 8050a70:	2301      	movs	r3, #1
 8050a72:	e01d      	b.n	8050ab0 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8050a74:	687b      	ldr	r3, [r7, #4]
 8050a76:	79db      	ldrb	r3, [r3, #7]
 8050a78:	f043 0304 	orr.w	r3, r3, #4
 8050a7c:	b2da      	uxtb	r2, r3
 8050a7e:	687b      	ldr	r3, [r7, #4]
 8050a80:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8050a82:	687b      	ldr	r3, [r7, #4]
 8050a84:	697a      	ldr	r2, [r7, #20]
 8050a86:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8050a88:	6979      	ldr	r1, [r7, #20]
 8050a8a:	6938      	ldr	r0, [r7, #16]
 8050a8c:	f7ff f8c6 	bl	804fc1c <clst2sect>
 8050a90:	4602      	mov	r2, r0
 8050a92:	687b      	ldr	r3, [r7, #4]
 8050a94:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8050a96:	687b      	ldr	r3, [r7, #4]
 8050a98:	68fa      	ldr	r2, [r7, #12]
 8050a9a:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8050a9c:	693b      	ldr	r3, [r7, #16]
 8050a9e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8050aa2:	68fb      	ldr	r3, [r7, #12]
 8050aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8050aa8:	441a      	add	r2, r3
 8050aaa:	687b      	ldr	r3, [r7, #4]
 8050aac:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8050aae:	2300      	movs	r3, #0
}
 8050ab0:	4618      	mov	r0, r3
 8050ab2:	3718      	adds	r7, #24
 8050ab4:	46bd      	mov	sp, r7
 8050ab6:	bd80      	pop	{r7, pc}

08050ab8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8050ab8:	b580      	push	{r7, lr}
 8050aba:	b086      	sub	sp, #24
 8050abc:	af00      	add	r7, sp, #0
 8050abe:	6078      	str	r0, [r7, #4]
 8050ac0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8050ac2:	687b      	ldr	r3, [r7, #4]
 8050ac4:	681b      	ldr	r3, [r3, #0]
 8050ac6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8050ac8:	2100      	movs	r1, #0
 8050aca:	6878      	ldr	r0, [r7, #4]
 8050acc:	f7ff fec9 	bl	8050862 <dir_sdi>
 8050ad0:	4603      	mov	r3, r0
 8050ad2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8050ad4:	7dfb      	ldrb	r3, [r7, #23]
 8050ad6:	2b00      	cmp	r3, #0
 8050ad8:	d140      	bne.n	8050b5c <dir_alloc+0xa4>
		n = 0;
 8050ada:	2300      	movs	r3, #0
 8050adc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8050ade:	687b      	ldr	r3, [r7, #4]
 8050ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8050ae2:	4619      	mov	r1, r3
 8050ae4:	68f8      	ldr	r0, [r7, #12]
 8050ae6:	f7fe fffd 	bl	804fae4 <move_window>
 8050aea:	4603      	mov	r3, r0
 8050aec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8050aee:	7dfb      	ldrb	r3, [r7, #23]
 8050af0:	2b00      	cmp	r3, #0
 8050af2:	d132      	bne.n	8050b5a <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8050af4:	68fb      	ldr	r3, [r7, #12]
 8050af6:	781b      	ldrb	r3, [r3, #0]
 8050af8:	2b04      	cmp	r3, #4
 8050afa:	d108      	bne.n	8050b0e <dir_alloc+0x56>
 8050afc:	687b      	ldr	r3, [r7, #4]
 8050afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8050b00:	781b      	ldrb	r3, [r3, #0]
 8050b02:	b25b      	sxtb	r3, r3
 8050b04:	43db      	mvns	r3, r3
 8050b06:	b2db      	uxtb	r3, r3
 8050b08:	09db      	lsrs	r3, r3, #7
 8050b0a:	b2db      	uxtb	r3, r3
 8050b0c:	e00f      	b.n	8050b2e <dir_alloc+0x76>
 8050b0e:	687b      	ldr	r3, [r7, #4]
 8050b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8050b12:	781b      	ldrb	r3, [r3, #0]
 8050b14:	2be5      	cmp	r3, #229	@ 0xe5
 8050b16:	d004      	beq.n	8050b22 <dir_alloc+0x6a>
 8050b18:	687b      	ldr	r3, [r7, #4]
 8050b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8050b1c:	781b      	ldrb	r3, [r3, #0]
 8050b1e:	2b00      	cmp	r3, #0
 8050b20:	d101      	bne.n	8050b26 <dir_alloc+0x6e>
 8050b22:	2301      	movs	r3, #1
 8050b24:	e000      	b.n	8050b28 <dir_alloc+0x70>
 8050b26:	2300      	movs	r3, #0
 8050b28:	f003 0301 	and.w	r3, r3, #1
 8050b2c:	b2db      	uxtb	r3, r3
 8050b2e:	2b00      	cmp	r3, #0
 8050b30:	d007      	beq.n	8050b42 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8050b32:	693b      	ldr	r3, [r7, #16]
 8050b34:	3301      	adds	r3, #1
 8050b36:	613b      	str	r3, [r7, #16]
 8050b38:	693a      	ldr	r2, [r7, #16]
 8050b3a:	683b      	ldr	r3, [r7, #0]
 8050b3c:	429a      	cmp	r2, r3
 8050b3e:	d102      	bne.n	8050b46 <dir_alloc+0x8e>
 8050b40:	e00c      	b.n	8050b5c <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8050b42:	2300      	movs	r3, #0
 8050b44:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8050b46:	2101      	movs	r1, #1
 8050b48:	6878      	ldr	r0, [r7, #4]
 8050b4a:	f7ff ff10 	bl	805096e <dir_next>
 8050b4e:	4603      	mov	r3, r0
 8050b50:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8050b52:	7dfb      	ldrb	r3, [r7, #23]
 8050b54:	2b00      	cmp	r3, #0
 8050b56:	d0c2      	beq.n	8050ade <dir_alloc+0x26>
 8050b58:	e000      	b.n	8050b5c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8050b5a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8050b5c:	7dfb      	ldrb	r3, [r7, #23]
 8050b5e:	2b04      	cmp	r3, #4
 8050b60:	d101      	bne.n	8050b66 <dir_alloc+0xae>
 8050b62:	2307      	movs	r3, #7
 8050b64:	75fb      	strb	r3, [r7, #23]
	return res;
 8050b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8050b68:	4618      	mov	r0, r3
 8050b6a:	3718      	adds	r7, #24
 8050b6c:	46bd      	mov	sp, r7
 8050b6e:	bd80      	pop	{r7, pc}

08050b70 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8050b70:	b580      	push	{r7, lr}
 8050b72:	b084      	sub	sp, #16
 8050b74:	af00      	add	r7, sp, #0
 8050b76:	6078      	str	r0, [r7, #4]
 8050b78:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8050b7a:	683b      	ldr	r3, [r7, #0]
 8050b7c:	331a      	adds	r3, #26
 8050b7e:	4618      	mov	r0, r3
 8050b80:	f7fe fb23 	bl	804f1ca <ld_word>
 8050b84:	4603      	mov	r3, r0
 8050b86:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8050b88:	687b      	ldr	r3, [r7, #4]
 8050b8a:	781b      	ldrb	r3, [r3, #0]
 8050b8c:	2b03      	cmp	r3, #3
 8050b8e:	d109      	bne.n	8050ba4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8050b90:	683b      	ldr	r3, [r7, #0]
 8050b92:	3314      	adds	r3, #20
 8050b94:	4618      	mov	r0, r3
 8050b96:	f7fe fb18 	bl	804f1ca <ld_word>
 8050b9a:	4603      	mov	r3, r0
 8050b9c:	041b      	lsls	r3, r3, #16
 8050b9e:	68fa      	ldr	r2, [r7, #12]
 8050ba0:	4313      	orrs	r3, r2
 8050ba2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8050ba4:	68fb      	ldr	r3, [r7, #12]
}
 8050ba6:	4618      	mov	r0, r3
 8050ba8:	3710      	adds	r7, #16
 8050baa:	46bd      	mov	sp, r7
 8050bac:	bd80      	pop	{r7, pc}

08050bae <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8050bae:	b580      	push	{r7, lr}
 8050bb0:	b084      	sub	sp, #16
 8050bb2:	af00      	add	r7, sp, #0
 8050bb4:	60f8      	str	r0, [r7, #12]
 8050bb6:	60b9      	str	r1, [r7, #8]
 8050bb8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8050bba:	68bb      	ldr	r3, [r7, #8]
 8050bbc:	331a      	adds	r3, #26
 8050bbe:	687a      	ldr	r2, [r7, #4]
 8050bc0:	b292      	uxth	r2, r2
 8050bc2:	4611      	mov	r1, r2
 8050bc4:	4618      	mov	r0, r3
 8050bc6:	f7fe fc17 	bl	804f3f8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8050bca:	68fb      	ldr	r3, [r7, #12]
 8050bcc:	781b      	ldrb	r3, [r3, #0]
 8050bce:	2b03      	cmp	r3, #3
 8050bd0:	d109      	bne.n	8050be6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8050bd2:	68bb      	ldr	r3, [r7, #8]
 8050bd4:	f103 0214 	add.w	r2, r3, #20
 8050bd8:	687b      	ldr	r3, [r7, #4]
 8050bda:	0c1b      	lsrs	r3, r3, #16
 8050bdc:	b29b      	uxth	r3, r3
 8050bde:	4619      	mov	r1, r3
 8050be0:	4610      	mov	r0, r2
 8050be2:	f7fe fc09 	bl	804f3f8 <st_word>
	}
}
 8050be6:	bf00      	nop
 8050be8:	3710      	adds	r7, #16
 8050bea:	46bd      	mov	sp, r7
 8050bec:	bd80      	pop	{r7, pc}
	...

08050bf0 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8050bf0:	b590      	push	{r4, r7, lr}
 8050bf2:	b087      	sub	sp, #28
 8050bf4:	af00      	add	r7, sp, #0
 8050bf6:	6078      	str	r0, [r7, #4]
 8050bf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8050bfa:	683b      	ldr	r3, [r7, #0]
 8050bfc:	331a      	adds	r3, #26
 8050bfe:	4618      	mov	r0, r3
 8050c00:	f7fe fae3 	bl	804f1ca <ld_word>
 8050c04:	4603      	mov	r3, r0
 8050c06:	2b00      	cmp	r3, #0
 8050c08:	d001      	beq.n	8050c0e <cmp_lfn+0x1e>
 8050c0a:	2300      	movs	r3, #0
 8050c0c:	e058      	b.n	8050cc0 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8050c0e:	683b      	ldr	r3, [r7, #0]
 8050c10:	781b      	ldrb	r3, [r3, #0]
 8050c12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8050c16:	1e5a      	subs	r2, r3, #1
 8050c18:	4613      	mov	r3, r2
 8050c1a:	005b      	lsls	r3, r3, #1
 8050c1c:	4413      	add	r3, r2
 8050c1e:	009b      	lsls	r3, r3, #2
 8050c20:	4413      	add	r3, r2
 8050c22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8050c24:	2301      	movs	r3, #1
 8050c26:	81fb      	strh	r3, [r7, #14]
 8050c28:	2300      	movs	r3, #0
 8050c2a:	613b      	str	r3, [r7, #16]
 8050c2c:	e032      	b.n	8050c94 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8050c2e:	4a26      	ldr	r2, [pc, #152]	@ (8050cc8 <cmp_lfn+0xd8>)
 8050c30:	693b      	ldr	r3, [r7, #16]
 8050c32:	4413      	add	r3, r2
 8050c34:	781b      	ldrb	r3, [r3, #0]
 8050c36:	461a      	mov	r2, r3
 8050c38:	683b      	ldr	r3, [r7, #0]
 8050c3a:	4413      	add	r3, r2
 8050c3c:	4618      	mov	r0, r3
 8050c3e:	f7fe fac4 	bl	804f1ca <ld_word>
 8050c42:	4603      	mov	r3, r0
 8050c44:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8050c46:	89fb      	ldrh	r3, [r7, #14]
 8050c48:	2b00      	cmp	r3, #0
 8050c4a:	d019      	beq.n	8050c80 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8050c4c:	697b      	ldr	r3, [r7, #20]
 8050c4e:	2bff      	cmp	r3, #255	@ 0xff
 8050c50:	d811      	bhi.n	8050c76 <cmp_lfn+0x86>
 8050c52:	89bb      	ldrh	r3, [r7, #12]
 8050c54:	4618      	mov	r0, r3
 8050c56:	f003 ffd1 	bl	8054bfc <ff_wtoupper>
 8050c5a:	4604      	mov	r4, r0
 8050c5c:	697b      	ldr	r3, [r7, #20]
 8050c5e:	1c5a      	adds	r2, r3, #1
 8050c60:	617a      	str	r2, [r7, #20]
 8050c62:	005b      	lsls	r3, r3, #1
 8050c64:	687a      	ldr	r2, [r7, #4]
 8050c66:	4413      	add	r3, r2
 8050c68:	881b      	ldrh	r3, [r3, #0]
 8050c6a:	4618      	mov	r0, r3
 8050c6c:	f003 ffc6 	bl	8054bfc <ff_wtoupper>
 8050c70:	4603      	mov	r3, r0
 8050c72:	429c      	cmp	r4, r3
 8050c74:	d001      	beq.n	8050c7a <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8050c76:	2300      	movs	r3, #0
 8050c78:	e022      	b.n	8050cc0 <cmp_lfn+0xd0>
			}
			wc = uc;
 8050c7a:	89bb      	ldrh	r3, [r7, #12]
 8050c7c:	81fb      	strh	r3, [r7, #14]
 8050c7e:	e006      	b.n	8050c8e <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8050c80:	89bb      	ldrh	r3, [r7, #12]
 8050c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8050c86:	4293      	cmp	r3, r2
 8050c88:	d001      	beq.n	8050c8e <cmp_lfn+0x9e>
 8050c8a:	2300      	movs	r3, #0
 8050c8c:	e018      	b.n	8050cc0 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8050c8e:	693b      	ldr	r3, [r7, #16]
 8050c90:	3301      	adds	r3, #1
 8050c92:	613b      	str	r3, [r7, #16]
 8050c94:	693b      	ldr	r3, [r7, #16]
 8050c96:	2b0c      	cmp	r3, #12
 8050c98:	d9c9      	bls.n	8050c2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8050c9a:	683b      	ldr	r3, [r7, #0]
 8050c9c:	781b      	ldrb	r3, [r3, #0]
 8050c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8050ca2:	2b00      	cmp	r3, #0
 8050ca4:	d00b      	beq.n	8050cbe <cmp_lfn+0xce>
 8050ca6:	89fb      	ldrh	r3, [r7, #14]
 8050ca8:	2b00      	cmp	r3, #0
 8050caa:	d008      	beq.n	8050cbe <cmp_lfn+0xce>
 8050cac:	697b      	ldr	r3, [r7, #20]
 8050cae:	005b      	lsls	r3, r3, #1
 8050cb0:	687a      	ldr	r2, [r7, #4]
 8050cb2:	4413      	add	r3, r2
 8050cb4:	881b      	ldrh	r3, [r3, #0]
 8050cb6:	2b00      	cmp	r3, #0
 8050cb8:	d001      	beq.n	8050cbe <cmp_lfn+0xce>
 8050cba:	2300      	movs	r3, #0
 8050cbc:	e000      	b.n	8050cc0 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8050cbe:	2301      	movs	r3, #1
}
 8050cc0:	4618      	mov	r0, r3
 8050cc2:	371c      	adds	r7, #28
 8050cc4:	46bd      	mov	sp, r7
 8050cc6:	bd90      	pop	{r4, r7, pc}
 8050cc8:	08071de8 	.word	0x08071de8

08050ccc <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8050ccc:	b580      	push	{r7, lr}
 8050cce:	b086      	sub	sp, #24
 8050cd0:	af00      	add	r7, sp, #0
 8050cd2:	6078      	str	r0, [r7, #4]
 8050cd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8050cd6:	683b      	ldr	r3, [r7, #0]
 8050cd8:	331a      	adds	r3, #26
 8050cda:	4618      	mov	r0, r3
 8050cdc:	f7fe fa75 	bl	804f1ca <ld_word>
 8050ce0:	4603      	mov	r3, r0
 8050ce2:	2b00      	cmp	r3, #0
 8050ce4:	d001      	beq.n	8050cea <pick_lfn+0x1e>
 8050ce6:	2300      	movs	r3, #0
 8050ce8:	e050      	b.n	8050d8c <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8050cea:	683b      	ldr	r3, [r7, #0]
 8050cec:	781b      	ldrb	r3, [r3, #0]
 8050cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8050cf2:	1e5a      	subs	r2, r3, #1
 8050cf4:	4613      	mov	r3, r2
 8050cf6:	005b      	lsls	r3, r3, #1
 8050cf8:	4413      	add	r3, r2
 8050cfa:	009b      	lsls	r3, r3, #2
 8050cfc:	4413      	add	r3, r2
 8050cfe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8050d00:	2301      	movs	r3, #1
 8050d02:	81fb      	strh	r3, [r7, #14]
 8050d04:	2300      	movs	r3, #0
 8050d06:	613b      	str	r3, [r7, #16]
 8050d08:	e028      	b.n	8050d5c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8050d0a:	4a22      	ldr	r2, [pc, #136]	@ (8050d94 <pick_lfn+0xc8>)
 8050d0c:	693b      	ldr	r3, [r7, #16]
 8050d0e:	4413      	add	r3, r2
 8050d10:	781b      	ldrb	r3, [r3, #0]
 8050d12:	461a      	mov	r2, r3
 8050d14:	683b      	ldr	r3, [r7, #0]
 8050d16:	4413      	add	r3, r2
 8050d18:	4618      	mov	r0, r3
 8050d1a:	f7fe fa56 	bl	804f1ca <ld_word>
 8050d1e:	4603      	mov	r3, r0
 8050d20:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8050d22:	89fb      	ldrh	r3, [r7, #14]
 8050d24:	2b00      	cmp	r3, #0
 8050d26:	d00f      	beq.n	8050d48 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8050d28:	697b      	ldr	r3, [r7, #20]
 8050d2a:	2bff      	cmp	r3, #255	@ 0xff
 8050d2c:	d901      	bls.n	8050d32 <pick_lfn+0x66>
 8050d2e:	2300      	movs	r3, #0
 8050d30:	e02c      	b.n	8050d8c <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8050d32:	89bb      	ldrh	r3, [r7, #12]
 8050d34:	81fb      	strh	r3, [r7, #14]
 8050d36:	697b      	ldr	r3, [r7, #20]
 8050d38:	1c5a      	adds	r2, r3, #1
 8050d3a:	617a      	str	r2, [r7, #20]
 8050d3c:	005b      	lsls	r3, r3, #1
 8050d3e:	687a      	ldr	r2, [r7, #4]
 8050d40:	4413      	add	r3, r2
 8050d42:	89fa      	ldrh	r2, [r7, #14]
 8050d44:	801a      	strh	r2, [r3, #0]
 8050d46:	e006      	b.n	8050d56 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8050d48:	89bb      	ldrh	r3, [r7, #12]
 8050d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8050d4e:	4293      	cmp	r3, r2
 8050d50:	d001      	beq.n	8050d56 <pick_lfn+0x8a>
 8050d52:	2300      	movs	r3, #0
 8050d54:	e01a      	b.n	8050d8c <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8050d56:	693b      	ldr	r3, [r7, #16]
 8050d58:	3301      	adds	r3, #1
 8050d5a:	613b      	str	r3, [r7, #16]
 8050d5c:	693b      	ldr	r3, [r7, #16]
 8050d5e:	2b0c      	cmp	r3, #12
 8050d60:	d9d3      	bls.n	8050d0a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8050d62:	683b      	ldr	r3, [r7, #0]
 8050d64:	781b      	ldrb	r3, [r3, #0]
 8050d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8050d6a:	2b00      	cmp	r3, #0
 8050d6c:	d00d      	beq.n	8050d8a <pick_lfn+0xbe>
 8050d6e:	89fb      	ldrh	r3, [r7, #14]
 8050d70:	2b00      	cmp	r3, #0
 8050d72:	d00a      	beq.n	8050d8a <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8050d74:	697b      	ldr	r3, [r7, #20]
 8050d76:	2bff      	cmp	r3, #255	@ 0xff
 8050d78:	d901      	bls.n	8050d7e <pick_lfn+0xb2>
 8050d7a:	2300      	movs	r3, #0
 8050d7c:	e006      	b.n	8050d8c <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 8050d7e:	697b      	ldr	r3, [r7, #20]
 8050d80:	005b      	lsls	r3, r3, #1
 8050d82:	687a      	ldr	r2, [r7, #4]
 8050d84:	4413      	add	r3, r2
 8050d86:	2200      	movs	r2, #0
 8050d88:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8050d8a:	2301      	movs	r3, #1
}
 8050d8c:	4618      	mov	r0, r3
 8050d8e:	3718      	adds	r7, #24
 8050d90:	46bd      	mov	sp, r7
 8050d92:	bd80      	pop	{r7, pc}
 8050d94:	08071de8 	.word	0x08071de8

08050d98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8050d98:	b580      	push	{r7, lr}
 8050d9a:	b088      	sub	sp, #32
 8050d9c:	af00      	add	r7, sp, #0
 8050d9e:	60f8      	str	r0, [r7, #12]
 8050da0:	60b9      	str	r1, [r7, #8]
 8050da2:	4611      	mov	r1, r2
 8050da4:	461a      	mov	r2, r3
 8050da6:	460b      	mov	r3, r1
 8050da8:	71fb      	strb	r3, [r7, #7]
 8050daa:	4613      	mov	r3, r2
 8050dac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8050dae:	68bb      	ldr	r3, [r7, #8]
 8050db0:	330d      	adds	r3, #13
 8050db2:	79ba      	ldrb	r2, [r7, #6]
 8050db4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8050db6:	68bb      	ldr	r3, [r7, #8]
 8050db8:	330b      	adds	r3, #11
 8050dba:	220f      	movs	r2, #15
 8050dbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8050dbe:	68bb      	ldr	r3, [r7, #8]
 8050dc0:	330c      	adds	r3, #12
 8050dc2:	2200      	movs	r2, #0
 8050dc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8050dc6:	68bb      	ldr	r3, [r7, #8]
 8050dc8:	331a      	adds	r3, #26
 8050dca:	2100      	movs	r1, #0
 8050dcc:	4618      	mov	r0, r3
 8050dce:	f7fe fb13 	bl	804f3f8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8050dd2:	79fb      	ldrb	r3, [r7, #7]
 8050dd4:	1e5a      	subs	r2, r3, #1
 8050dd6:	4613      	mov	r3, r2
 8050dd8:	005b      	lsls	r3, r3, #1
 8050dda:	4413      	add	r3, r2
 8050ddc:	009b      	lsls	r3, r3, #2
 8050dde:	4413      	add	r3, r2
 8050de0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8050de2:	2300      	movs	r3, #0
 8050de4:	82fb      	strh	r3, [r7, #22]
 8050de6:	2300      	movs	r3, #0
 8050de8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8050dea:	8afb      	ldrh	r3, [r7, #22]
 8050dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8050df0:	4293      	cmp	r3, r2
 8050df2:	d007      	beq.n	8050e04 <put_lfn+0x6c>
 8050df4:	69fb      	ldr	r3, [r7, #28]
 8050df6:	1c5a      	adds	r2, r3, #1
 8050df8:	61fa      	str	r2, [r7, #28]
 8050dfa:	005b      	lsls	r3, r3, #1
 8050dfc:	68fa      	ldr	r2, [r7, #12]
 8050dfe:	4413      	add	r3, r2
 8050e00:	881b      	ldrh	r3, [r3, #0]
 8050e02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8050e04:	4a17      	ldr	r2, [pc, #92]	@ (8050e64 <put_lfn+0xcc>)
 8050e06:	69bb      	ldr	r3, [r7, #24]
 8050e08:	4413      	add	r3, r2
 8050e0a:	781b      	ldrb	r3, [r3, #0]
 8050e0c:	461a      	mov	r2, r3
 8050e0e:	68bb      	ldr	r3, [r7, #8]
 8050e10:	4413      	add	r3, r2
 8050e12:	8afa      	ldrh	r2, [r7, #22]
 8050e14:	4611      	mov	r1, r2
 8050e16:	4618      	mov	r0, r3
 8050e18:	f7fe faee 	bl	804f3f8 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 8050e1c:	8afb      	ldrh	r3, [r7, #22]
 8050e1e:	2b00      	cmp	r3, #0
 8050e20:	d102      	bne.n	8050e28 <put_lfn+0x90>
 8050e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8050e26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8050e28:	69bb      	ldr	r3, [r7, #24]
 8050e2a:	3301      	adds	r3, #1
 8050e2c:	61bb      	str	r3, [r7, #24]
 8050e2e:	69bb      	ldr	r3, [r7, #24]
 8050e30:	2b0c      	cmp	r3, #12
 8050e32:	d9da      	bls.n	8050dea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8050e34:	8afb      	ldrh	r3, [r7, #22]
 8050e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8050e3a:	4293      	cmp	r3, r2
 8050e3c:	d006      	beq.n	8050e4c <put_lfn+0xb4>
 8050e3e:	69fb      	ldr	r3, [r7, #28]
 8050e40:	005b      	lsls	r3, r3, #1
 8050e42:	68fa      	ldr	r2, [r7, #12]
 8050e44:	4413      	add	r3, r2
 8050e46:	881b      	ldrh	r3, [r3, #0]
 8050e48:	2b00      	cmp	r3, #0
 8050e4a:	d103      	bne.n	8050e54 <put_lfn+0xbc>
 8050e4c:	79fb      	ldrb	r3, [r7, #7]
 8050e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8050e52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8050e54:	68bb      	ldr	r3, [r7, #8]
 8050e56:	79fa      	ldrb	r2, [r7, #7]
 8050e58:	701a      	strb	r2, [r3, #0]
}
 8050e5a:	bf00      	nop
 8050e5c:	3720      	adds	r7, #32
 8050e5e:	46bd      	mov	sp, r7
 8050e60:	bd80      	pop	{r7, pc}
 8050e62:	bf00      	nop
 8050e64:	08071de8 	.word	0x08071de8

08050e68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8050e68:	b580      	push	{r7, lr}
 8050e6a:	b08c      	sub	sp, #48	@ 0x30
 8050e6c:	af00      	add	r7, sp, #0
 8050e6e:	60f8      	str	r0, [r7, #12]
 8050e70:	60b9      	str	r1, [r7, #8]
 8050e72:	607a      	str	r2, [r7, #4]
 8050e74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8050e76:	220b      	movs	r2, #11
 8050e78:	68b9      	ldr	r1, [r7, #8]
 8050e7a:	68f8      	ldr	r0, [r7, #12]
 8050e7c:	f018 fd5d 	bl	806993a <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8050e80:	683b      	ldr	r3, [r7, #0]
 8050e82:	2b05      	cmp	r3, #5
 8050e84:	d929      	bls.n	8050eda <gen_numname+0x72>
		sreg = seq;
 8050e86:	683b      	ldr	r3, [r7, #0]
 8050e88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8050e8a:	e020      	b.n	8050ece <gen_numname+0x66>
			wc = *lfn++;
 8050e8c:	687b      	ldr	r3, [r7, #4]
 8050e8e:	1c9a      	adds	r2, r3, #2
 8050e90:	607a      	str	r2, [r7, #4]
 8050e92:	881b      	ldrh	r3, [r3, #0]
 8050e94:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8050e96:	2300      	movs	r3, #0
 8050e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8050e9a:	e015      	b.n	8050ec8 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 8050e9c:	69fb      	ldr	r3, [r7, #28]
 8050e9e:	005a      	lsls	r2, r3, #1
 8050ea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8050ea2:	f003 0301 	and.w	r3, r3, #1
 8050ea6:	4413      	add	r3, r2
 8050ea8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8050eaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8050eac:	085b      	lsrs	r3, r3, #1
 8050eae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8050eb0:	69fb      	ldr	r3, [r7, #28]
 8050eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8050eb6:	2b00      	cmp	r3, #0
 8050eb8:	d003      	beq.n	8050ec2 <gen_numname+0x5a>
 8050eba:	69fa      	ldr	r2, [r7, #28]
 8050ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8050fb0 <gen_numname+0x148>)
 8050ebe:	4053      	eors	r3, r2
 8050ec0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8050ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050ec4:	3301      	adds	r3, #1
 8050ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8050ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050eca:	2b0f      	cmp	r3, #15
 8050ecc:	d9e6      	bls.n	8050e9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8050ece:	687b      	ldr	r3, [r7, #4]
 8050ed0:	881b      	ldrh	r3, [r3, #0]
 8050ed2:	2b00      	cmp	r3, #0
 8050ed4:	d1da      	bne.n	8050e8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 8050ed6:	69fb      	ldr	r3, [r7, #28]
 8050ed8:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 8050eda:	2307      	movs	r3, #7
 8050edc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8050ede:	683b      	ldr	r3, [r7, #0]
 8050ee0:	b2db      	uxtb	r3, r3
 8050ee2:	f003 030f 	and.w	r3, r3, #15
 8050ee6:	b2db      	uxtb	r3, r3
 8050ee8:	3330      	adds	r3, #48	@ 0x30
 8050eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8050eee:	683b      	ldr	r3, [r7, #0]
 8050ef0:	091b      	lsrs	r3, r3, #4
 8050ef2:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 8050ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8050ef8:	2b39      	cmp	r3, #57	@ 0x39
 8050efa:	d904      	bls.n	8050f06 <gen_numname+0x9e>
 8050efc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8050f00:	3307      	adds	r3, #7
 8050f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8050f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f08:	1e5a      	subs	r2, r3, #1
 8050f0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8050f0c:	3330      	adds	r3, #48	@ 0x30
 8050f0e:	443b      	add	r3, r7
 8050f10:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8050f14:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8050f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f1a:	2b00      	cmp	r3, #0
 8050f1c:	d002      	beq.n	8050f24 <gen_numname+0xbc>
 8050f1e:	683b      	ldr	r3, [r7, #0]
 8050f20:	2b00      	cmp	r3, #0
 8050f22:	d1dc      	bne.n	8050ede <gen_numname+0x76>
	ns[i] = '~';
 8050f24:	f107 0214 	add.w	r2, r7, #20
 8050f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f2a:	4413      	add	r3, r2
 8050f2c:	227e      	movs	r2, #126	@ 0x7e
 8050f2e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8050f30:	2300      	movs	r3, #0
 8050f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8050f34:	e014      	b.n	8050f60 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8050f36:	68fa      	ldr	r2, [r7, #12]
 8050f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050f3a:	4413      	add	r3, r2
 8050f3c:	781b      	ldrb	r3, [r3, #0]
 8050f3e:	4618      	mov	r0, r3
 8050f40:	f7fe fb29 	bl	804f596 <dbc_1st>
 8050f44:	4603      	mov	r3, r0
 8050f46:	2b00      	cmp	r3, #0
 8050f48:	d007      	beq.n	8050f5a <gen_numname+0xf2>
			if (j == i - 1) break;
 8050f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f4c:	3b01      	subs	r3, #1
 8050f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8050f50:	429a      	cmp	r2, r3
 8050f52:	d010      	beq.n	8050f76 <gen_numname+0x10e>
			j++;
 8050f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050f56:	3301      	adds	r3, #1
 8050f58:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8050f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050f5c:	3301      	adds	r3, #1
 8050f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8050f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8050f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f64:	429a      	cmp	r2, r3
 8050f66:	d207      	bcs.n	8050f78 <gen_numname+0x110>
 8050f68:	68fa      	ldr	r2, [r7, #12]
 8050f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050f6c:	4413      	add	r3, r2
 8050f6e:	781b      	ldrb	r3, [r3, #0]
 8050f70:	2b20      	cmp	r3, #32
 8050f72:	d1e0      	bne.n	8050f36 <gen_numname+0xce>
 8050f74:	e000      	b.n	8050f78 <gen_numname+0x110>
			if (j == i - 1) break;
 8050f76:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8050f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f7a:	2b07      	cmp	r3, #7
 8050f7c:	d807      	bhi.n	8050f8e <gen_numname+0x126>
 8050f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8050f80:	1c5a      	adds	r2, r3, #1
 8050f82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8050f84:	3330      	adds	r3, #48	@ 0x30
 8050f86:	443b      	add	r3, r7
 8050f88:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8050f8c:	e000      	b.n	8050f90 <gen_numname+0x128>
 8050f8e:	2120      	movs	r1, #32
 8050f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050f92:	1c5a      	adds	r2, r3, #1
 8050f94:	627a      	str	r2, [r7, #36]	@ 0x24
 8050f96:	68fa      	ldr	r2, [r7, #12]
 8050f98:	4413      	add	r3, r2
 8050f9a:	460a      	mov	r2, r1
 8050f9c:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8050f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8050fa0:	2b07      	cmp	r3, #7
 8050fa2:	d9e9      	bls.n	8050f78 <gen_numname+0x110>
}
 8050fa4:	bf00      	nop
 8050fa6:	bf00      	nop
 8050fa8:	3730      	adds	r7, #48	@ 0x30
 8050faa:	46bd      	mov	sp, r7
 8050fac:	bd80      	pop	{r7, pc}
 8050fae:	bf00      	nop
 8050fb0:	00011021 	.word	0x00011021

08050fb4 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8050fb4:	b480      	push	{r7}
 8050fb6:	b085      	sub	sp, #20
 8050fb8:	af00      	add	r7, sp, #0
 8050fba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8050fbc:	2300      	movs	r3, #0
 8050fbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8050fc0:	230b      	movs	r3, #11
 8050fc2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8050fc4:	7bfb      	ldrb	r3, [r7, #15]
 8050fc6:	b2da      	uxtb	r2, r3
 8050fc8:	0852      	lsrs	r2, r2, #1
 8050fca:	01db      	lsls	r3, r3, #7
 8050fcc:	4313      	orrs	r3, r2
 8050fce:	b2da      	uxtb	r2, r3
 8050fd0:	687b      	ldr	r3, [r7, #4]
 8050fd2:	1c59      	adds	r1, r3, #1
 8050fd4:	6079      	str	r1, [r7, #4]
 8050fd6:	781b      	ldrb	r3, [r3, #0]
 8050fd8:	4413      	add	r3, r2
 8050fda:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8050fdc:	68bb      	ldr	r3, [r7, #8]
 8050fde:	3b01      	subs	r3, #1
 8050fe0:	60bb      	str	r3, [r7, #8]
 8050fe2:	68bb      	ldr	r3, [r7, #8]
 8050fe4:	2b00      	cmp	r3, #0
 8050fe6:	d1ed      	bne.n	8050fc4 <sum_sfn+0x10>
	return sum;
 8050fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8050fea:	4618      	mov	r0, r3
 8050fec:	3714      	adds	r7, #20
 8050fee:	46bd      	mov	sp, r7
 8050ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050ff4:	4770      	bx	lr

08050ff6 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8050ff6:	b480      	push	{r7}
 8050ff8:	b087      	sub	sp, #28
 8050ffa:	af00      	add	r7, sp, #0
 8050ffc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8050ffe:	687b      	ldr	r3, [r7, #4]
 8051000:	3301      	adds	r3, #1
 8051002:	781b      	ldrb	r3, [r3, #0]
 8051004:	3301      	adds	r3, #1
 8051006:	015b      	lsls	r3, r3, #5
 8051008:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 805100a:	2300      	movs	r3, #0
 805100c:	827b      	strh	r3, [r7, #18]
 805100e:	2300      	movs	r3, #0
 8051010:	617b      	str	r3, [r7, #20]
 8051012:	e015      	b.n	8051040 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8051014:	697b      	ldr	r3, [r7, #20]
 8051016:	2b02      	cmp	r3, #2
 8051018:	d103      	bne.n	8051022 <xdir_sum+0x2c>
			i++;
 805101a:	697b      	ldr	r3, [r7, #20]
 805101c:	3301      	adds	r3, #1
 805101e:	617b      	str	r3, [r7, #20]
 8051020:	e00b      	b.n	805103a <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8051022:	8a7b      	ldrh	r3, [r7, #18]
 8051024:	b29a      	uxth	r2, r3
 8051026:	0852      	lsrs	r2, r2, #1
 8051028:	03db      	lsls	r3, r3, #15
 805102a:	4313      	orrs	r3, r2
 805102c:	b29b      	uxth	r3, r3
 805102e:	6879      	ldr	r1, [r7, #4]
 8051030:	697a      	ldr	r2, [r7, #20]
 8051032:	440a      	add	r2, r1
 8051034:	7812      	ldrb	r2, [r2, #0]
 8051036:	4413      	add	r3, r2
 8051038:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 805103a:	697b      	ldr	r3, [r7, #20]
 805103c:	3301      	adds	r3, #1
 805103e:	617b      	str	r3, [r7, #20]
 8051040:	697a      	ldr	r2, [r7, #20]
 8051042:	68fb      	ldr	r3, [r7, #12]
 8051044:	429a      	cmp	r2, r3
 8051046:	d3e5      	bcc.n	8051014 <xdir_sum+0x1e>
		}
	}
	return sum;
 8051048:	8a7b      	ldrh	r3, [r7, #18]
}
 805104a:	4618      	mov	r0, r3
 805104c:	371c      	adds	r7, #28
 805104e:	46bd      	mov	sp, r7
 8051050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051054:	4770      	bx	lr

08051056 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8051056:	b580      	push	{r7, lr}
 8051058:	b084      	sub	sp, #16
 805105a:	af00      	add	r7, sp, #0
 805105c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 805105e:	2300      	movs	r3, #0
 8051060:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8051062:	e01b      	b.n	805109c <xname_sum+0x46>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8051064:	89bb      	ldrh	r3, [r7, #12]
 8051066:	4618      	mov	r0, r3
 8051068:	f003 fdc8 	bl	8054bfc <ff_wtoupper>
 805106c:	4603      	mov	r3, r0
 805106e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8051070:	89fb      	ldrh	r3, [r7, #14]
 8051072:	b29a      	uxth	r2, r3
 8051074:	0852      	lsrs	r2, r2, #1
 8051076:	03db      	lsls	r3, r3, #15
 8051078:	4313      	orrs	r3, r2
 805107a:	b29a      	uxth	r2, r3
 805107c:	89bb      	ldrh	r3, [r7, #12]
 805107e:	b2db      	uxtb	r3, r3
 8051080:	b29b      	uxth	r3, r3
 8051082:	4413      	add	r3, r2
 8051084:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8051086:	89fb      	ldrh	r3, [r7, #14]
 8051088:	b29a      	uxth	r2, r3
 805108a:	0852      	lsrs	r2, r2, #1
 805108c:	03db      	lsls	r3, r3, #15
 805108e:	4313      	orrs	r3, r2
 8051090:	b29a      	uxth	r2, r3
 8051092:	89bb      	ldrh	r3, [r7, #12]
 8051094:	0a1b      	lsrs	r3, r3, #8
 8051096:	b29b      	uxth	r3, r3
 8051098:	4413      	add	r3, r2
 805109a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 805109c:	687b      	ldr	r3, [r7, #4]
 805109e:	1c9a      	adds	r2, r3, #2
 80510a0:	607a      	str	r2, [r7, #4]
 80510a2:	881b      	ldrh	r3, [r3, #0]
 80510a4:	81bb      	strh	r3, [r7, #12]
 80510a6:	89bb      	ldrh	r3, [r7, #12]
 80510a8:	2b00      	cmp	r3, #0
 80510aa:	d1db      	bne.n	8051064 <xname_sum+0xe>
	}
	return sum;
 80510ac:	89fb      	ldrh	r3, [r7, #14]
}
 80510ae:	4618      	mov	r0, r3
 80510b0:	3710      	adds	r7, #16
 80510b2:	46bd      	mov	sp, r7
 80510b4:	bd80      	pop	{r7, pc}
	...

080510b8 <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 80510b8:	b590      	push	{r4, r7, lr}
 80510ba:	b087      	sub	sp, #28
 80510bc:	af00      	add	r7, sp, #0
 80510be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80510c0:	687b      	ldr	r3, [r7, #4]
 80510c2:	681b      	ldr	r3, [r3, #0]
 80510c4:	691b      	ldr	r3, [r3, #16]
 80510c6:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 80510c8:	687b      	ldr	r3, [r7, #4]
 80510ca:	681a      	ldr	r2, [r3, #0]
 80510cc:	687b      	ldr	r3, [r7, #4]
 80510ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80510d0:	4619      	mov	r1, r3
 80510d2:	4610      	mov	r0, r2
 80510d4:	f7fe fd06 	bl	804fae4 <move_window>
 80510d8:	4603      	mov	r3, r0
 80510da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80510dc:	7dfb      	ldrb	r3, [r7, #23]
 80510de:	2b00      	cmp	r3, #0
 80510e0:	d001      	beq.n	80510e6 <load_xdir+0x2e>
 80510e2:	7dfb      	ldrb	r3, [r7, #23]
 80510e4:	e0a9      	b.n	805123a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 80510e6:	687b      	ldr	r3, [r7, #4]
 80510e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80510ea:	781b      	ldrb	r3, [r3, #0]
 80510ec:	2b85      	cmp	r3, #133	@ 0x85
 80510ee:	d001      	beq.n	80510f4 <load_xdir+0x3c>
 80510f0:	2302      	movs	r3, #2
 80510f2:	e0a2      	b.n	805123a <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80510f4:	687b      	ldr	r3, [r7, #4]
 80510f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80510f8:	2220      	movs	r2, #32
 80510fa:	4619      	mov	r1, r3
 80510fc:	68f8      	ldr	r0, [r7, #12]
 80510fe:	f018 fc1c 	bl	806993a <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8051102:	68fb      	ldr	r3, [r7, #12]
 8051104:	3301      	adds	r3, #1
 8051106:	781b      	ldrb	r3, [r3, #0]
 8051108:	3301      	adds	r3, #1
 805110a:	015b      	lsls	r3, r3, #5
 805110c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 805110e:	68bb      	ldr	r3, [r7, #8]
 8051110:	2b5f      	cmp	r3, #95	@ 0x5f
 8051112:	d903      	bls.n	805111c <load_xdir+0x64>
 8051114:	68bb      	ldr	r3, [r7, #8]
 8051116:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 805111a:	d901      	bls.n	8051120 <load_xdir+0x68>
 805111c:	2302      	movs	r3, #2
 805111e:	e08c      	b.n	805123a <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 8051120:	2100      	movs	r1, #0
 8051122:	6878      	ldr	r0, [r7, #4]
 8051124:	f7ff fc23 	bl	805096e <dir_next>
 8051128:	4603      	mov	r3, r0
 805112a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 805112c:	7dfb      	ldrb	r3, [r7, #23]
 805112e:	2b04      	cmp	r3, #4
 8051130:	d101      	bne.n	8051136 <load_xdir+0x7e>
 8051132:	2302      	movs	r3, #2
 8051134:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8051136:	7dfb      	ldrb	r3, [r7, #23]
 8051138:	2b00      	cmp	r3, #0
 805113a:	d001      	beq.n	8051140 <load_xdir+0x88>
 805113c:	7dfb      	ldrb	r3, [r7, #23]
 805113e:	e07c      	b.n	805123a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8051140:	687b      	ldr	r3, [r7, #4]
 8051142:	681a      	ldr	r2, [r3, #0]
 8051144:	687b      	ldr	r3, [r7, #4]
 8051146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051148:	4619      	mov	r1, r3
 805114a:	4610      	mov	r0, r2
 805114c:	f7fe fcca 	bl	804fae4 <move_window>
 8051150:	4603      	mov	r3, r0
 8051152:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8051154:	7dfb      	ldrb	r3, [r7, #23]
 8051156:	2b00      	cmp	r3, #0
 8051158:	d001      	beq.n	805115e <load_xdir+0xa6>
 805115a:	7dfb      	ldrb	r3, [r7, #23]
 805115c:	e06d      	b.n	805123a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 805115e:	687b      	ldr	r3, [r7, #4]
 8051160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051162:	781b      	ldrb	r3, [r3, #0]
 8051164:	2bc0      	cmp	r3, #192	@ 0xc0
 8051166:	d001      	beq.n	805116c <load_xdir+0xb4>
 8051168:	2302      	movs	r3, #2
 805116a:	e066      	b.n	805123a <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 805116c:	68fb      	ldr	r3, [r7, #12]
 805116e:	f103 0020 	add.w	r0, r3, #32
 8051172:	687b      	ldr	r3, [r7, #4]
 8051174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051176:	2220      	movs	r2, #32
 8051178:	4619      	mov	r1, r3
 805117a:	f018 fbde 	bl	806993a <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 805117e:	68fb      	ldr	r3, [r7, #12]
 8051180:	3323      	adds	r3, #35	@ 0x23
 8051182:	781b      	ldrb	r3, [r3, #0]
 8051184:	332c      	adds	r3, #44	@ 0x2c
 8051186:	4a2f      	ldr	r2, [pc, #188]	@ (8051244 <load_xdir+0x18c>)
 8051188:	fba2 2303 	umull	r2, r3, r2, r3
 805118c:	08db      	lsrs	r3, r3, #3
 805118e:	015b      	lsls	r3, r3, #5
 8051190:	68ba      	ldr	r2, [r7, #8]
 8051192:	429a      	cmp	r2, r3
 8051194:	d201      	bcs.n	805119a <load_xdir+0xe2>
 8051196:	2302      	movs	r3, #2
 8051198:	e04f      	b.n	805123a <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 805119a:	2340      	movs	r3, #64	@ 0x40
 805119c:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 805119e:	2100      	movs	r1, #0
 80511a0:	6878      	ldr	r0, [r7, #4]
 80511a2:	f7ff fbe4 	bl	805096e <dir_next>
 80511a6:	4603      	mov	r3, r0
 80511a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80511aa:	7dfb      	ldrb	r3, [r7, #23]
 80511ac:	2b04      	cmp	r3, #4
 80511ae:	d101      	bne.n	80511b4 <load_xdir+0xfc>
 80511b0:	2302      	movs	r3, #2
 80511b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80511b4:	7dfb      	ldrb	r3, [r7, #23]
 80511b6:	2b00      	cmp	r3, #0
 80511b8:	d001      	beq.n	80511be <load_xdir+0x106>
 80511ba:	7dfb      	ldrb	r3, [r7, #23]
 80511bc:	e03d      	b.n	805123a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 80511be:	687b      	ldr	r3, [r7, #4]
 80511c0:	681a      	ldr	r2, [r3, #0]
 80511c2:	687b      	ldr	r3, [r7, #4]
 80511c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80511c6:	4619      	mov	r1, r3
 80511c8:	4610      	mov	r0, r2
 80511ca:	f7fe fc8b 	bl	804fae4 <move_window>
 80511ce:	4603      	mov	r3, r0
 80511d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80511d2:	7dfb      	ldrb	r3, [r7, #23]
 80511d4:	2b00      	cmp	r3, #0
 80511d6:	d001      	beq.n	80511dc <load_xdir+0x124>
 80511d8:	7dfb      	ldrb	r3, [r7, #23]
 80511da:	e02e      	b.n	805123a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 80511dc:	687b      	ldr	r3, [r7, #4]
 80511de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80511e0:	781b      	ldrb	r3, [r3, #0]
 80511e2:	2bc1      	cmp	r3, #193	@ 0xc1
 80511e4:	d001      	beq.n	80511ea <load_xdir+0x132>
 80511e6:	2302      	movs	r3, #2
 80511e8:	e027      	b.n	805123a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 80511ea:	693b      	ldr	r3, [r7, #16]
 80511ec:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80511f0:	d208      	bcs.n	8051204 <load_xdir+0x14c>
 80511f2:	68fa      	ldr	r2, [r7, #12]
 80511f4:	693b      	ldr	r3, [r7, #16]
 80511f6:	18d0      	adds	r0, r2, r3
 80511f8:	687b      	ldr	r3, [r7, #4]
 80511fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80511fc:	2220      	movs	r2, #32
 80511fe:	4619      	mov	r1, r3
 8051200:	f018 fb9b 	bl	806993a <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 8051204:	693b      	ldr	r3, [r7, #16]
 8051206:	3320      	adds	r3, #32
 8051208:	613b      	str	r3, [r7, #16]
 805120a:	693a      	ldr	r2, [r7, #16]
 805120c:	68bb      	ldr	r3, [r7, #8]
 805120e:	429a      	cmp	r2, r3
 8051210:	d3c5      	bcc.n	805119e <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8051212:	693b      	ldr	r3, [r7, #16]
 8051214:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8051218:	d80e      	bhi.n	8051238 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 805121a:	68f8      	ldr	r0, [r7, #12]
 805121c:	f7ff feeb 	bl	8050ff6 <xdir_sum>
 8051220:	4603      	mov	r3, r0
 8051222:	461c      	mov	r4, r3
 8051224:	68fb      	ldr	r3, [r7, #12]
 8051226:	3302      	adds	r3, #2
 8051228:	4618      	mov	r0, r3
 805122a:	f7fd ffce 	bl	804f1ca <ld_word>
 805122e:	4603      	mov	r3, r0
 8051230:	429c      	cmp	r4, r3
 8051232:	d001      	beq.n	8051238 <load_xdir+0x180>
 8051234:	2302      	movs	r3, #2
 8051236:	e000      	b.n	805123a <load_xdir+0x182>
	}
	return FR_OK;
 8051238:	2300      	movs	r3, #0
}
 805123a:	4618      	mov	r0, r3
 805123c:	371c      	adds	r7, #28
 805123e:	46bd      	mov	sp, r7
 8051240:	bd90      	pop	{r4, r7, pc}
 8051242:	bf00      	nop
 8051244:	88888889 	.word	0x88888889

08051248 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8051248:	b580      	push	{r7, lr}
 805124a:	b082      	sub	sp, #8
 805124c:	af00      	add	r7, sp, #0
 805124e:	6078      	str	r0, [r7, #4]
 8051250:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8051252:	687b      	ldr	r3, [r7, #4]
 8051254:	691b      	ldr	r3, [r3, #16]
 8051256:	3334      	adds	r3, #52	@ 0x34
 8051258:	4618      	mov	r0, r3
 805125a:	f7fd ffcf 	bl	804f1fc <ld_dword>
 805125e:	4602      	mov	r2, r0
 8051260:	683b      	ldr	r3, [r7, #0]
 8051262:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8051264:	687b      	ldr	r3, [r7, #4]
 8051266:	691b      	ldr	r3, [r3, #16]
 8051268:	3338      	adds	r3, #56	@ 0x38
 805126a:	4618      	mov	r0, r3
 805126c:	f7fd ffe9 	bl	804f242 <ld_qword>
 8051270:	4602      	mov	r2, r0
 8051272:	460b      	mov	r3, r1
 8051274:	6839      	ldr	r1, [r7, #0]
 8051276:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 805127a:	687b      	ldr	r3, [r7, #4]
 805127c:	691b      	ldr	r3, [r3, #16]
 805127e:	3321      	adds	r3, #33	@ 0x21
 8051280:	781b      	ldrb	r3, [r3, #0]
 8051282:	f003 0302 	and.w	r3, r3, #2
 8051286:	b2da      	uxtb	r2, r3
 8051288:	683b      	ldr	r3, [r7, #0]
 805128a:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 805128c:	683b      	ldr	r3, [r7, #0]
 805128e:	2200      	movs	r2, #0
 8051290:	61da      	str	r2, [r3, #28]
}
 8051292:	bf00      	nop
 8051294:	3708      	adds	r7, #8
 8051296:	46bd      	mov	sp, r7
 8051298:	bd80      	pop	{r7, pc}

0805129a <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 805129a:	b5b0      	push	{r4, r5, r7, lr}
 805129c:	b084      	sub	sp, #16
 805129e:	af00      	add	r7, sp, #0
 80512a0:	6078      	str	r0, [r7, #4]
 80512a2:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80512a4:	6839      	ldr	r1, [r7, #0]
 80512a6:	6808      	ldr	r0, [r1, #0]
 80512a8:	6879      	ldr	r1, [r7, #4]
 80512aa:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80512ac:	6839      	ldr	r1, [r7, #0]
 80512ae:	6a08      	ldr	r0, [r1, #32]
 80512b0:	6879      	ldr	r1, [r7, #4]
 80512b2:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80512b4:	6839      	ldr	r1, [r7, #0]
 80512b6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80512b8:	b2c8      	uxtb	r0, r1
 80512ba:	6879      	ldr	r1, [r7, #4]
 80512bc:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80512be:	6839      	ldr	r1, [r7, #0]
 80512c0:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80512c2:	2000      	movs	r0, #0
 80512c4:	460c      	mov	r4, r1
 80512c6:	4605      	mov	r5, r0
 80512c8:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 80512cc:	2300      	movs	r3, #0
 80512ce:	6879      	ldr	r1, [r7, #4]
 80512d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 80512d4:	687b      	ldr	r3, [r7, #4]
 80512d6:	2200      	movs	r2, #0
 80512d8:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 80512da:	683b      	ldr	r3, [r7, #0]
 80512dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80512de:	687b      	ldr	r3, [r7, #4]
 80512e0:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80512e2:	687b      	ldr	r3, [r7, #4]
 80512e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80512e6:	4619      	mov	r1, r3
 80512e8:	6878      	ldr	r0, [r7, #4]
 80512ea:	f7ff faba 	bl	8050862 <dir_sdi>
 80512ee:	4603      	mov	r3, r0
 80512f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80512f2:	7bfb      	ldrb	r3, [r7, #15]
 80512f4:	2b00      	cmp	r3, #0
 80512f6:	d104      	bne.n	8051302 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 80512f8:	6878      	ldr	r0, [r7, #4]
 80512fa:	f7ff fedd 	bl	80510b8 <load_xdir>
 80512fe:	4603      	mov	r3, r0
 8051300:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8051302:	7bfb      	ldrb	r3, [r7, #15]
}
 8051304:	4618      	mov	r0, r3
 8051306:	3710      	adds	r7, #16
 8051308:	46bd      	mov	sp, r7
 805130a:	bdb0      	pop	{r4, r5, r7, pc}

0805130c <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 805130c:	b590      	push	{r4, r7, lr}
 805130e:	b087      	sub	sp, #28
 8051310:	af00      	add	r7, sp, #0
 8051312:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 8051314:	687b      	ldr	r3, [r7, #4]
 8051316:	681b      	ldr	r3, [r3, #0]
 8051318:	691b      	ldr	r3, [r3, #16]
 805131a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 805131c:	68fb      	ldr	r3, [r7, #12]
 805131e:	1c9c      	adds	r4, r3, #2
 8051320:	68f8      	ldr	r0, [r7, #12]
 8051322:	f7ff fe68 	bl	8050ff6 <xdir_sum>
 8051326:	4603      	mov	r3, r0
 8051328:	4619      	mov	r1, r3
 805132a:	4620      	mov	r0, r4
 805132c:	f7fe f864 	bl	804f3f8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8051330:	68fb      	ldr	r3, [r7, #12]
 8051332:	3301      	adds	r3, #1
 8051334:	781b      	ldrb	r3, [r3, #0]
 8051336:	3301      	adds	r3, #1
 8051338:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 805133a:	687b      	ldr	r3, [r7, #4]
 805133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 805133e:	4619      	mov	r1, r3
 8051340:	6878      	ldr	r0, [r7, #4]
 8051342:	f7ff fa8e 	bl	8050862 <dir_sdi>
 8051346:	4603      	mov	r3, r0
 8051348:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 805134a:	e026      	b.n	805139a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 805134c:	687b      	ldr	r3, [r7, #4]
 805134e:	681a      	ldr	r2, [r3, #0]
 8051350:	687b      	ldr	r3, [r7, #4]
 8051352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051354:	4619      	mov	r1, r3
 8051356:	4610      	mov	r0, r2
 8051358:	f7fe fbc4 	bl	804fae4 <move_window>
 805135c:	4603      	mov	r3, r0
 805135e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8051360:	7dfb      	ldrb	r3, [r7, #23]
 8051362:	2b00      	cmp	r3, #0
 8051364:	d11d      	bne.n	80513a2 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 8051366:	687b      	ldr	r3, [r7, #4]
 8051368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 805136a:	2220      	movs	r2, #32
 805136c:	68f9      	ldr	r1, [r7, #12]
 805136e:	4618      	mov	r0, r3
 8051370:	f018 fae3 	bl	806993a <memcpy>
		dp->obj.fs->wflag = 1;
 8051374:	687b      	ldr	r3, [r7, #4]
 8051376:	681b      	ldr	r3, [r3, #0]
 8051378:	2201      	movs	r2, #1
 805137a:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 805137c:	693b      	ldr	r3, [r7, #16]
 805137e:	3b01      	subs	r3, #1
 8051380:	613b      	str	r3, [r7, #16]
 8051382:	693b      	ldr	r3, [r7, #16]
 8051384:	2b00      	cmp	r3, #0
 8051386:	d00e      	beq.n	80513a6 <store_xdir+0x9a>
		dirb += SZDIRE;
 8051388:	68fb      	ldr	r3, [r7, #12]
 805138a:	3320      	adds	r3, #32
 805138c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 805138e:	2100      	movs	r1, #0
 8051390:	6878      	ldr	r0, [r7, #4]
 8051392:	f7ff faec 	bl	805096e <dir_next>
 8051396:	4603      	mov	r3, r0
 8051398:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 805139a:	7dfb      	ldrb	r3, [r7, #23]
 805139c:	2b00      	cmp	r3, #0
 805139e:	d0d5      	beq.n	805134c <store_xdir+0x40>
 80513a0:	e002      	b.n	80513a8 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80513a2:	bf00      	nop
 80513a4:	e000      	b.n	80513a8 <store_xdir+0x9c>
		if (--nent == 0) break;
 80513a6:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80513a8:	7dfb      	ldrb	r3, [r7, #23]
 80513aa:	2b00      	cmp	r3, #0
 80513ac:	d002      	beq.n	80513b4 <store_xdir+0xa8>
 80513ae:	7dfb      	ldrb	r3, [r7, #23]
 80513b0:	2b01      	cmp	r3, #1
 80513b2:	d101      	bne.n	80513b8 <store_xdir+0xac>
 80513b4:	7dfb      	ldrb	r3, [r7, #23]
 80513b6:	e000      	b.n	80513ba <store_xdir+0xae>
 80513b8:	2302      	movs	r3, #2
}
 80513ba:	4618      	mov	r0, r3
 80513bc:	371c      	adds	r7, #28
 80513be:	46bd      	mov	sp, r7
 80513c0:	bd90      	pop	{r4, r7, pc}

080513c2 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 80513c2:	b590      	push	{r4, r7, lr}
 80513c4:	b085      	sub	sp, #20
 80513c6:	af00      	add	r7, sp, #0
 80513c8:	6078      	str	r0, [r7, #4]
 80513ca:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 80513cc:	2240      	movs	r2, #64	@ 0x40
 80513ce:	2100      	movs	r1, #0
 80513d0:	6878      	ldr	r0, [r7, #4]
 80513d2:	f018 fa07 	bl	80697e4 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80513d6:	687b      	ldr	r3, [r7, #4]
 80513d8:	2285      	movs	r2, #133	@ 0x85
 80513da:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80513dc:	687b      	ldr	r3, [r7, #4]
 80513de:	3320      	adds	r3, #32
 80513e0:	22c0      	movs	r2, #192	@ 0xc0
 80513e2:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 80513e4:	2340      	movs	r3, #64	@ 0x40
 80513e6:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 80513e8:	2300      	movs	r3, #0
 80513ea:	72fb      	strb	r3, [r7, #11]
 80513ec:	7afb      	ldrb	r3, [r7, #11]
 80513ee:	72bb      	strb	r3, [r7, #10]
 80513f0:	2301      	movs	r3, #1
 80513f2:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 80513f4:	68fb      	ldr	r3, [r7, #12]
 80513f6:	1c5a      	adds	r2, r3, #1
 80513f8:	60fa      	str	r2, [r7, #12]
 80513fa:	687a      	ldr	r2, [r7, #4]
 80513fc:	4413      	add	r3, r2
 80513fe:	22c1      	movs	r2, #193	@ 0xc1
 8051400:	701a      	strb	r2, [r3, #0]
 8051402:	68fb      	ldr	r3, [r7, #12]
 8051404:	1c5a      	adds	r2, r3, #1
 8051406:	60fa      	str	r2, [r7, #12]
 8051408:	687a      	ldr	r2, [r7, #4]
 805140a:	4413      	add	r3, r2
 805140c:	2200      	movs	r2, #0
 805140e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8051410:	893b      	ldrh	r3, [r7, #8]
 8051412:	2b00      	cmp	r3, #0
 8051414:	d00b      	beq.n	805142e <create_xdir+0x6c>
 8051416:	7abb      	ldrb	r3, [r7, #10]
 8051418:	005b      	lsls	r3, r3, #1
 805141a:	683a      	ldr	r2, [r7, #0]
 805141c:	4413      	add	r3, r2
 805141e:	881b      	ldrh	r3, [r3, #0]
 8051420:	813b      	strh	r3, [r7, #8]
 8051422:	893b      	ldrh	r3, [r7, #8]
 8051424:	2b00      	cmp	r3, #0
 8051426:	d002      	beq.n	805142e <create_xdir+0x6c>
 8051428:	7abb      	ldrb	r3, [r7, #10]
 805142a:	3301      	adds	r3, #1
 805142c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 805142e:	687a      	ldr	r2, [r7, #4]
 8051430:	68fb      	ldr	r3, [r7, #12]
 8051432:	4413      	add	r3, r2
 8051434:	893a      	ldrh	r2, [r7, #8]
 8051436:	4611      	mov	r1, r2
 8051438:	4618      	mov	r0, r3
 805143a:	f7fd ffdd 	bl	804f3f8 <st_word>
			i += 2;
 805143e:	68fb      	ldr	r3, [r7, #12]
 8051440:	3302      	adds	r3, #2
 8051442:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8051444:	68fb      	ldr	r3, [r7, #12]
 8051446:	f003 031f 	and.w	r3, r3, #31
 805144a:	2b00      	cmp	r3, #0
 805144c:	d1e0      	bne.n	8051410 <create_xdir+0x4e>
		nc1++;
 805144e:	7afb      	ldrb	r3, [r7, #11]
 8051450:	3301      	adds	r3, #1
 8051452:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8051454:	7abb      	ldrb	r3, [r7, #10]
 8051456:	005b      	lsls	r3, r3, #1
 8051458:	683a      	ldr	r2, [r7, #0]
 805145a:	4413      	add	r3, r2
 805145c:	881b      	ldrh	r3, [r3, #0]
 805145e:	2b00      	cmp	r3, #0
 8051460:	d1c8      	bne.n	80513f4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8051462:	687b      	ldr	r3, [r7, #4]
 8051464:	3323      	adds	r3, #35	@ 0x23
 8051466:	7aba      	ldrb	r2, [r7, #10]
 8051468:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 805146a:	687b      	ldr	r3, [r7, #4]
 805146c:	3301      	adds	r3, #1
 805146e:	7afa      	ldrb	r2, [r7, #11]
 8051470:	3201      	adds	r2, #1
 8051472:	b2d2      	uxtb	r2, r2
 8051474:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8051476:	687b      	ldr	r3, [r7, #4]
 8051478:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 805147c:	6838      	ldr	r0, [r7, #0]
 805147e:	f7ff fdea 	bl	8051056 <xname_sum>
 8051482:	4603      	mov	r3, r0
 8051484:	4619      	mov	r1, r3
 8051486:	4620      	mov	r0, r4
 8051488:	f7fd ffb6 	bl	804f3f8 <st_word>
}
 805148c:	bf00      	nop
 805148e:	3714      	adds	r7, #20
 8051490:	46bd      	mov	sp, r7
 8051492:	bd90      	pop	{r4, r7, pc}

08051494 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8051494:	b580      	push	{r7, lr}
 8051496:	b086      	sub	sp, #24
 8051498:	af00      	add	r7, sp, #0
 805149a:	6078      	str	r0, [r7, #4]
 805149c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 805149e:	2304      	movs	r3, #4
 80514a0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80514a2:	687b      	ldr	r3, [r7, #4]
 80514a4:	681b      	ldr	r3, [r3, #0]
 80514a6:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80514a8:	23ff      	movs	r3, #255	@ 0xff
 80514aa:	757b      	strb	r3, [r7, #21]
 80514ac:	23ff      	movs	r3, #255	@ 0xff
 80514ae:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80514b0:	e0a6      	b.n	8051600 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 80514b2:	687b      	ldr	r3, [r7, #4]
 80514b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80514b6:	4619      	mov	r1, r3
 80514b8:	6938      	ldr	r0, [r7, #16]
 80514ba:	f7fe fb13 	bl	804fae4 <move_window>
 80514be:	4603      	mov	r3, r0
 80514c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80514c2:	7dfb      	ldrb	r3, [r7, #23]
 80514c4:	2b00      	cmp	r3, #0
 80514c6:	f040 80a1 	bne.w	805160c <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 80514ca:	687b      	ldr	r3, [r7, #4]
 80514cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80514ce:	781b      	ldrb	r3, [r3, #0]
 80514d0:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 80514d2:	7dbb      	ldrb	r3, [r7, #22]
 80514d4:	2b00      	cmp	r3, #0
 80514d6:	d102      	bne.n	80514de <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80514d8:	2304      	movs	r3, #4
 80514da:	75fb      	strb	r3, [r7, #23]
 80514dc:	e09d      	b.n	805161a <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80514de:	693b      	ldr	r3, [r7, #16]
 80514e0:	781b      	ldrb	r3, [r3, #0]
 80514e2:	2b04      	cmp	r3, #4
 80514e4:	d11f      	bne.n	8051526 <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 80514e6:	683b      	ldr	r3, [r7, #0]
 80514e8:	2b00      	cmp	r3, #0
 80514ea:	d003      	beq.n	80514f4 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 80514ec:	7dbb      	ldrb	r3, [r7, #22]
 80514ee:	2b83      	cmp	r3, #131	@ 0x83
 80514f0:	d17d      	bne.n	80515ee <dir_read+0x15a>
 80514f2:	e092      	b.n	805161a <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 80514f4:	7dbb      	ldrb	r3, [r7, #22]
 80514f6:	2b85      	cmp	r3, #133	@ 0x85
 80514f8:	d179      	bne.n	80515ee <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80514fa:	687b      	ldr	r3, [r7, #4]
 80514fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80514fe:	687b      	ldr	r3, [r7, #4]
 8051500:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8051502:	6878      	ldr	r0, [r7, #4]
 8051504:	f7ff fdd8 	bl	80510b8 <load_xdir>
 8051508:	4603      	mov	r3, r0
 805150a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 805150c:	7dfb      	ldrb	r3, [r7, #23]
 805150e:	2b00      	cmp	r3, #0
 8051510:	d17e      	bne.n	8051610 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8051512:	693b      	ldr	r3, [r7, #16]
 8051514:	691b      	ldr	r3, [r3, #16]
 8051516:	3304      	adds	r3, #4
 8051518:	781b      	ldrb	r3, [r3, #0]
 805151a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 805151e:	b2da      	uxtb	r2, r3
 8051520:	687b      	ldr	r3, [r7, #4]
 8051522:	719a      	strb	r2, [r3, #6]
					}
					break;
 8051524:	e074      	b.n	8051610 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8051526:	687b      	ldr	r3, [r7, #4]
 8051528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 805152a:	330b      	adds	r3, #11
 805152c:	781b      	ldrb	r3, [r3, #0]
 805152e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8051532:	73fb      	strb	r3, [r7, #15]
 8051534:	687b      	ldr	r3, [r7, #4]
 8051536:	7bfa      	ldrb	r2, [r7, #15]
 8051538:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 805153a:	7dbb      	ldrb	r3, [r7, #22]
 805153c:	2be5      	cmp	r3, #229	@ 0xe5
 805153e:	d00e      	beq.n	805155e <dir_read+0xca>
 8051540:	7dbb      	ldrb	r3, [r7, #22]
 8051542:	2b2e      	cmp	r3, #46	@ 0x2e
 8051544:	d00b      	beq.n	805155e <dir_read+0xca>
 8051546:	7bfb      	ldrb	r3, [r7, #15]
 8051548:	f023 0320 	bic.w	r3, r3, #32
 805154c:	2b08      	cmp	r3, #8
 805154e:	bf0c      	ite	eq
 8051550:	2301      	moveq	r3, #1
 8051552:	2300      	movne	r3, #0
 8051554:	b2db      	uxtb	r3, r3
 8051556:	461a      	mov	r2, r3
 8051558:	683b      	ldr	r3, [r7, #0]
 805155a:	4293      	cmp	r3, r2
 805155c:	d002      	beq.n	8051564 <dir_read+0xd0>
				ord = 0xFF;
 805155e:	23ff      	movs	r3, #255	@ 0xff
 8051560:	757b      	strb	r3, [r7, #21]
 8051562:	e044      	b.n	80515ee <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8051564:	7bfb      	ldrb	r3, [r7, #15]
 8051566:	2b0f      	cmp	r3, #15
 8051568:	d12f      	bne.n	80515ca <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 805156a:	7dbb      	ldrb	r3, [r7, #22]
 805156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8051570:	2b00      	cmp	r3, #0
 8051572:	d00d      	beq.n	8051590 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 8051574:	687b      	ldr	r3, [r7, #4]
 8051576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051578:	7b5b      	ldrb	r3, [r3, #13]
 805157a:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 805157c:	7dbb      	ldrb	r3, [r7, #22]
 805157e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8051582:	75bb      	strb	r3, [r7, #22]
 8051584:	7dbb      	ldrb	r3, [r7, #22]
 8051586:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8051588:	687b      	ldr	r3, [r7, #4]
 805158a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 805158c:	687b      	ldr	r3, [r7, #4]
 805158e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8051590:	7dba      	ldrb	r2, [r7, #22]
 8051592:	7d7b      	ldrb	r3, [r7, #21]
 8051594:	429a      	cmp	r2, r3
 8051596:	d115      	bne.n	80515c4 <dir_read+0x130>
 8051598:	687b      	ldr	r3, [r7, #4]
 805159a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 805159c:	330d      	adds	r3, #13
 805159e:	781b      	ldrb	r3, [r3, #0]
 80515a0:	7d3a      	ldrb	r2, [r7, #20]
 80515a2:	429a      	cmp	r2, r3
 80515a4:	d10e      	bne.n	80515c4 <dir_read+0x130>
 80515a6:	693b      	ldr	r3, [r7, #16]
 80515a8:	68da      	ldr	r2, [r3, #12]
 80515aa:	687b      	ldr	r3, [r7, #4]
 80515ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80515ae:	4619      	mov	r1, r3
 80515b0:	4610      	mov	r0, r2
 80515b2:	f7ff fb8b 	bl	8050ccc <pick_lfn>
 80515b6:	4603      	mov	r3, r0
 80515b8:	2b00      	cmp	r3, #0
 80515ba:	d003      	beq.n	80515c4 <dir_read+0x130>
 80515bc:	7d7b      	ldrb	r3, [r7, #21]
 80515be:	3b01      	subs	r3, #1
 80515c0:	b2db      	uxtb	r3, r3
 80515c2:	e000      	b.n	80515c6 <dir_read+0x132>
 80515c4:	23ff      	movs	r3, #255	@ 0xff
 80515c6:	757b      	strb	r3, [r7, #21]
 80515c8:	e011      	b.n	80515ee <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80515ca:	7d7b      	ldrb	r3, [r7, #21]
 80515cc:	2b00      	cmp	r3, #0
 80515ce:	d109      	bne.n	80515e4 <dir_read+0x150>
 80515d0:	687b      	ldr	r3, [r7, #4]
 80515d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80515d4:	4618      	mov	r0, r3
 80515d6:	f7ff fced 	bl	8050fb4 <sum_sfn>
 80515da:	4603      	mov	r3, r0
 80515dc:	461a      	mov	r2, r3
 80515de:	7d3b      	ldrb	r3, [r7, #20]
 80515e0:	4293      	cmp	r3, r2
 80515e2:	d017      	beq.n	8051614 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 80515e4:	687b      	ldr	r3, [r7, #4]
 80515e6:	f04f 32ff 	mov.w	r2, #4294967295
 80515ea:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80515ec:	e012      	b.n	8051614 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80515ee:	2100      	movs	r1, #0
 80515f0:	6878      	ldr	r0, [r7, #4]
 80515f2:	f7ff f9bc 	bl	805096e <dir_next>
 80515f6:	4603      	mov	r3, r0
 80515f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80515fa:	7dfb      	ldrb	r3, [r7, #23]
 80515fc:	2b00      	cmp	r3, #0
 80515fe:	d10b      	bne.n	8051618 <dir_read+0x184>
	while (dp->sect) {
 8051600:	687b      	ldr	r3, [r7, #4]
 8051602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051604:	2b00      	cmp	r3, #0
 8051606:	f47f af54 	bne.w	80514b2 <dir_read+0x1e>
 805160a:	e006      	b.n	805161a <dir_read+0x186>
		if (res != FR_OK) break;
 805160c:	bf00      	nop
 805160e:	e004      	b.n	805161a <dir_read+0x186>
					break;
 8051610:	bf00      	nop
 8051612:	e002      	b.n	805161a <dir_read+0x186>
					break;
 8051614:	bf00      	nop
 8051616:	e000      	b.n	805161a <dir_read+0x186>
		if (res != FR_OK) break;
 8051618:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 805161a:	7dfb      	ldrb	r3, [r7, #23]
 805161c:	2b00      	cmp	r3, #0
 805161e:	d002      	beq.n	8051626 <dir_read+0x192>
 8051620:	687b      	ldr	r3, [r7, #4]
 8051622:	2200      	movs	r2, #0
 8051624:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8051626:	7dfb      	ldrb	r3, [r7, #23]
}
 8051628:	4618      	mov	r0, r3
 805162a:	3718      	adds	r7, #24
 805162c:	46bd      	mov	sp, r7
 805162e:	bd80      	pop	{r7, pc}

08051630 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8051630:	b590      	push	{r4, r7, lr}
 8051632:	b089      	sub	sp, #36	@ 0x24
 8051634:	af00      	add	r7, sp, #0
 8051636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8051638:	687b      	ldr	r3, [r7, #4]
 805163a:	681b      	ldr	r3, [r3, #0]
 805163c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 805163e:	2100      	movs	r1, #0
 8051640:	6878      	ldr	r0, [r7, #4]
 8051642:	f7ff f90e 	bl	8050862 <dir_sdi>
 8051646:	4603      	mov	r3, r0
 8051648:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 805164a:	7ffb      	ldrb	r3, [r7, #31]
 805164c:	2b00      	cmp	r3, #0
 805164e:	d001      	beq.n	8051654 <dir_find+0x24>
 8051650:	7ffb      	ldrb	r3, [r7, #31]
 8051652:	e112      	b.n	805187a <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8051654:	68fb      	ldr	r3, [r7, #12]
 8051656:	781b      	ldrb	r3, [r3, #0]
 8051658:	2b04      	cmp	r3, #4
 805165a:	d164      	bne.n	8051726 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 805165c:	68fb      	ldr	r3, [r7, #12]
 805165e:	68db      	ldr	r3, [r3, #12]
 8051660:	4618      	mov	r0, r3
 8051662:	f7ff fcf8 	bl	8051056 <xname_sum>
 8051666:	4603      	mov	r3, r0
 8051668:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 805166a:	e04f      	b.n	805170c <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 805166c:	68fb      	ldr	r3, [r7, #12]
 805166e:	691b      	ldr	r3, [r3, #16]
 8051670:	3324      	adds	r3, #36	@ 0x24
 8051672:	4618      	mov	r0, r3
 8051674:	f7fd fda9 	bl	804f1ca <ld_word>
 8051678:	4603      	mov	r3, r0
 805167a:	461a      	mov	r2, r3
 805167c:	893b      	ldrh	r3, [r7, #8]
 805167e:	4293      	cmp	r3, r2
 8051680:	d143      	bne.n	805170a <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8051682:	68fb      	ldr	r3, [r7, #12]
 8051684:	691b      	ldr	r3, [r3, #16]
 8051686:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 805168a:	76fb      	strb	r3, [r7, #27]
 805168c:	2340      	movs	r3, #64	@ 0x40
 805168e:	617b      	str	r3, [r7, #20]
 8051690:	2300      	movs	r3, #0
 8051692:	613b      	str	r3, [r7, #16]
 8051694:	e028      	b.n	80516e8 <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 8051696:	697b      	ldr	r3, [r7, #20]
 8051698:	f003 031f 	and.w	r3, r3, #31
 805169c:	2b00      	cmp	r3, #0
 805169e:	d102      	bne.n	80516a6 <dir_find+0x76>
 80516a0:	697b      	ldr	r3, [r7, #20]
 80516a2:	3302      	adds	r3, #2
 80516a4:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80516a6:	68fb      	ldr	r3, [r7, #12]
 80516a8:	691a      	ldr	r2, [r3, #16]
 80516aa:	697b      	ldr	r3, [r7, #20]
 80516ac:	4413      	add	r3, r2
 80516ae:	4618      	mov	r0, r3
 80516b0:	f7fd fd8b 	bl	804f1ca <ld_word>
 80516b4:	4603      	mov	r3, r0
 80516b6:	4618      	mov	r0, r3
 80516b8:	f003 faa0 	bl	8054bfc <ff_wtoupper>
 80516bc:	4604      	mov	r4, r0
 80516be:	68fb      	ldr	r3, [r7, #12]
 80516c0:	68da      	ldr	r2, [r3, #12]
 80516c2:	693b      	ldr	r3, [r7, #16]
 80516c4:	005b      	lsls	r3, r3, #1
 80516c6:	4413      	add	r3, r2
 80516c8:	881b      	ldrh	r3, [r3, #0]
 80516ca:	4618      	mov	r0, r3
 80516cc:	f003 fa96 	bl	8054bfc <ff_wtoupper>
 80516d0:	4603      	mov	r3, r0
 80516d2:	429c      	cmp	r4, r3
 80516d4:	d10c      	bne.n	80516f0 <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80516d6:	7efb      	ldrb	r3, [r7, #27]
 80516d8:	3b01      	subs	r3, #1
 80516da:	76fb      	strb	r3, [r7, #27]
 80516dc:	697b      	ldr	r3, [r7, #20]
 80516de:	3302      	adds	r3, #2
 80516e0:	617b      	str	r3, [r7, #20]
 80516e2:	693b      	ldr	r3, [r7, #16]
 80516e4:	3301      	adds	r3, #1
 80516e6:	613b      	str	r3, [r7, #16]
 80516e8:	7efb      	ldrb	r3, [r7, #27]
 80516ea:	2b00      	cmp	r3, #0
 80516ec:	d1d3      	bne.n	8051696 <dir_find+0x66>
 80516ee:	e000      	b.n	80516f2 <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80516f0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80516f2:	7efb      	ldrb	r3, [r7, #27]
 80516f4:	2b00      	cmp	r3, #0
 80516f6:	d109      	bne.n	805170c <dir_find+0xdc>
 80516f8:	68fb      	ldr	r3, [r7, #12]
 80516fa:	68da      	ldr	r2, [r3, #12]
 80516fc:	693b      	ldr	r3, [r7, #16]
 80516fe:	005b      	lsls	r3, r3, #1
 8051700:	4413      	add	r3, r2
 8051702:	881b      	ldrh	r3, [r3, #0]
 8051704:	2b00      	cmp	r3, #0
 8051706:	d00b      	beq.n	8051720 <dir_find+0xf0>
 8051708:	e000      	b.n	805170c <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 805170a:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 805170c:	2100      	movs	r1, #0
 805170e:	6878      	ldr	r0, [r7, #4]
 8051710:	f7ff fec0 	bl	8051494 <dir_read>
 8051714:	4603      	mov	r3, r0
 8051716:	77fb      	strb	r3, [r7, #31]
 8051718:	7ffb      	ldrb	r3, [r7, #31]
 805171a:	2b00      	cmp	r3, #0
 805171c:	d0a6      	beq.n	805166c <dir_find+0x3c>
 805171e:	e000      	b.n	8051722 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8051720:	bf00      	nop
		}
		return res;
 8051722:	7ffb      	ldrb	r3, [r7, #31]
 8051724:	e0a9      	b.n	805187a <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8051726:	23ff      	movs	r3, #255	@ 0xff
 8051728:	773b      	strb	r3, [r7, #28]
 805172a:	7f3b      	ldrb	r3, [r7, #28]
 805172c:	777b      	strb	r3, [r7, #29]
 805172e:	687b      	ldr	r3, [r7, #4]
 8051730:	f04f 32ff 	mov.w	r2, #4294967295
 8051734:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8051736:	687b      	ldr	r3, [r7, #4]
 8051738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 805173a:	4619      	mov	r1, r3
 805173c:	68f8      	ldr	r0, [r7, #12]
 805173e:	f7fe f9d1 	bl	804fae4 <move_window>
 8051742:	4603      	mov	r3, r0
 8051744:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8051746:	7ffb      	ldrb	r3, [r7, #31]
 8051748:	2b00      	cmp	r3, #0
 805174a:	f040 8090 	bne.w	805186e <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 805174e:	687b      	ldr	r3, [r7, #4]
 8051750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051752:	781b      	ldrb	r3, [r3, #0]
 8051754:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8051756:	7fbb      	ldrb	r3, [r7, #30]
 8051758:	2b00      	cmp	r3, #0
 805175a:	d102      	bne.n	8051762 <dir_find+0x132>
 805175c:	2304      	movs	r3, #4
 805175e:	77fb      	strb	r3, [r7, #31]
 8051760:	e08a      	b.n	8051878 <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8051762:	687b      	ldr	r3, [r7, #4]
 8051764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051766:	330b      	adds	r3, #11
 8051768:	781b      	ldrb	r3, [r3, #0]
 805176a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 805176e:	72fb      	strb	r3, [r7, #11]
 8051770:	687b      	ldr	r3, [r7, #4]
 8051772:	7afa      	ldrb	r2, [r7, #11]
 8051774:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8051776:	7fbb      	ldrb	r3, [r7, #30]
 8051778:	2be5      	cmp	r3, #229	@ 0xe5
 805177a:	d007      	beq.n	805178c <dir_find+0x15c>
 805177c:	7afb      	ldrb	r3, [r7, #11]
 805177e:	f003 0308 	and.w	r3, r3, #8
 8051782:	2b00      	cmp	r3, #0
 8051784:	d009      	beq.n	805179a <dir_find+0x16a>
 8051786:	7afb      	ldrb	r3, [r7, #11]
 8051788:	2b0f      	cmp	r3, #15
 805178a:	d006      	beq.n	805179a <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 805178c:	23ff      	movs	r3, #255	@ 0xff
 805178e:	777b      	strb	r3, [r7, #29]
 8051790:	687b      	ldr	r3, [r7, #4]
 8051792:	f04f 32ff 	mov.w	r2, #4294967295
 8051796:	64da      	str	r2, [r3, #76]	@ 0x4c
 8051798:	e05e      	b.n	8051858 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 805179a:	7afb      	ldrb	r3, [r7, #11]
 805179c:	2b0f      	cmp	r3, #15
 805179e:	d136      	bne.n	805180e <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80517a0:	687b      	ldr	r3, [r7, #4]
 80517a2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80517a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80517aa:	2b00      	cmp	r3, #0
 80517ac:	d154      	bne.n	8051858 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80517ae:	7fbb      	ldrb	r3, [r7, #30]
 80517b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80517b4:	2b00      	cmp	r3, #0
 80517b6:	d00d      	beq.n	80517d4 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 80517b8:	687b      	ldr	r3, [r7, #4]
 80517ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80517bc:	7b5b      	ldrb	r3, [r3, #13]
 80517be:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80517c0:	7fbb      	ldrb	r3, [r7, #30]
 80517c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80517c6:	77bb      	strb	r3, [r7, #30]
 80517c8:	7fbb      	ldrb	r3, [r7, #30]
 80517ca:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80517cc:	687b      	ldr	r3, [r7, #4]
 80517ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80517d0:	687b      	ldr	r3, [r7, #4]
 80517d2:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80517d4:	7fba      	ldrb	r2, [r7, #30]
 80517d6:	7f7b      	ldrb	r3, [r7, #29]
 80517d8:	429a      	cmp	r2, r3
 80517da:	d115      	bne.n	8051808 <dir_find+0x1d8>
 80517dc:	687b      	ldr	r3, [r7, #4]
 80517de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80517e0:	330d      	adds	r3, #13
 80517e2:	781b      	ldrb	r3, [r3, #0]
 80517e4:	7f3a      	ldrb	r2, [r7, #28]
 80517e6:	429a      	cmp	r2, r3
 80517e8:	d10e      	bne.n	8051808 <dir_find+0x1d8>
 80517ea:	68fb      	ldr	r3, [r7, #12]
 80517ec:	68da      	ldr	r2, [r3, #12]
 80517ee:	687b      	ldr	r3, [r7, #4]
 80517f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80517f2:	4619      	mov	r1, r3
 80517f4:	4610      	mov	r0, r2
 80517f6:	f7ff f9fb 	bl	8050bf0 <cmp_lfn>
 80517fa:	4603      	mov	r3, r0
 80517fc:	2b00      	cmp	r3, #0
 80517fe:	d003      	beq.n	8051808 <dir_find+0x1d8>
 8051800:	7f7b      	ldrb	r3, [r7, #29]
 8051802:	3b01      	subs	r3, #1
 8051804:	b2db      	uxtb	r3, r3
 8051806:	e000      	b.n	805180a <dir_find+0x1da>
 8051808:	23ff      	movs	r3, #255	@ 0xff
 805180a:	777b      	strb	r3, [r7, #29]
 805180c:	e024      	b.n	8051858 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 805180e:	7f7b      	ldrb	r3, [r7, #29]
 8051810:	2b00      	cmp	r3, #0
 8051812:	d109      	bne.n	8051828 <dir_find+0x1f8>
 8051814:	687b      	ldr	r3, [r7, #4]
 8051816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051818:	4618      	mov	r0, r3
 805181a:	f7ff fbcb 	bl	8050fb4 <sum_sfn>
 805181e:	4603      	mov	r3, r0
 8051820:	461a      	mov	r2, r3
 8051822:	7f3b      	ldrb	r3, [r7, #28]
 8051824:	4293      	cmp	r3, r2
 8051826:	d024      	beq.n	8051872 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8051828:	687b      	ldr	r3, [r7, #4]
 805182a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 805182e:	f003 0301 	and.w	r3, r3, #1
 8051832:	2b00      	cmp	r3, #0
 8051834:	d10a      	bne.n	805184c <dir_find+0x21c>
 8051836:	687b      	ldr	r3, [r7, #4]
 8051838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 805183a:	687b      	ldr	r3, [r7, #4]
 805183c:	3340      	adds	r3, #64	@ 0x40
 805183e:	220b      	movs	r2, #11
 8051840:	4619      	mov	r1, r3
 8051842:	f017 ffa5 	bl	8069790 <memcmp>
 8051846:	4603      	mov	r3, r0
 8051848:	2b00      	cmp	r3, #0
 805184a:	d014      	beq.n	8051876 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 805184c:	23ff      	movs	r3, #255	@ 0xff
 805184e:	777b      	strb	r3, [r7, #29]
 8051850:	687b      	ldr	r3, [r7, #4]
 8051852:	f04f 32ff 	mov.w	r2, #4294967295
 8051856:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8051858:	2100      	movs	r1, #0
 805185a:	6878      	ldr	r0, [r7, #4]
 805185c:	f7ff f887 	bl	805096e <dir_next>
 8051860:	4603      	mov	r3, r0
 8051862:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8051864:	7ffb      	ldrb	r3, [r7, #31]
 8051866:	2b00      	cmp	r3, #0
 8051868:	f43f af65 	beq.w	8051736 <dir_find+0x106>
 805186c:	e004      	b.n	8051878 <dir_find+0x248>
		if (res != FR_OK) break;
 805186e:	bf00      	nop
 8051870:	e002      	b.n	8051878 <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8051872:	bf00      	nop
 8051874:	e000      	b.n	8051878 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8051876:	bf00      	nop

	return res;
 8051878:	7ffb      	ldrb	r3, [r7, #31]
}
 805187a:	4618      	mov	r0, r3
 805187c:	3724      	adds	r7, #36	@ 0x24
 805187e:	46bd      	mov	sp, r7
 8051880:	bd90      	pop	{r4, r7, pc}
	...

08051884 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8051884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8051888:	b0a0      	sub	sp, #128	@ 0x80
 805188a:	af00      	add	r7, sp, #0
 805188c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 805188e:	687b      	ldr	r3, [r7, #4]
 8051890:	681b      	ldr	r3, [r3, #0]
 8051892:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8051894:	687b      	ldr	r3, [r7, #4]
 8051896:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 805189a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 805189e:	2b00      	cmp	r3, #0
 80518a0:	d001      	beq.n	80518a6 <dir_register+0x22>
 80518a2:	2306      	movs	r3, #6
 80518a4:	e194      	b.n	8051bd0 <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80518a6:	2300      	movs	r3, #0
 80518a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80518aa:	e002      	b.n	80518b2 <dir_register+0x2e>
 80518ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80518ae:	3301      	adds	r3, #1
 80518b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80518b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80518b4:	68da      	ldr	r2, [r3, #12]
 80518b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80518b8:	005b      	lsls	r3, r3, #1
 80518ba:	4413      	add	r3, r2
 80518bc:	881b      	ldrh	r3, [r3, #0]
 80518be:	2b00      	cmp	r3, #0
 80518c0:	d1f4      	bne.n	80518ac <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80518c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80518c4:	781b      	ldrb	r3, [r3, #0]
 80518c6:	2b04      	cmp	r3, #4
 80518c8:	f040 80a6 	bne.w	8051a18 <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80518cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80518ce:	330e      	adds	r3, #14
 80518d0:	4aa5      	ldr	r2, [pc, #660]	@ (8051b68 <dir_register+0x2e4>)
 80518d2:	fba2 2303 	umull	r2, r3, r2, r3
 80518d6:	08db      	lsrs	r3, r3, #3
 80518d8:	3302      	adds	r3, #2
 80518da:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 80518dc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80518de:	6878      	ldr	r0, [r7, #4]
 80518e0:	f7ff f8ea 	bl	8050ab8 <dir_alloc>
 80518e4:	4603      	mov	r3, r0
 80518e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 80518ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80518ee:	2b00      	cmp	r3, #0
 80518f0:	d002      	beq.n	80518f8 <dir_register+0x74>
 80518f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80518f6:	e16b      	b.n	8051bd0 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 80518f8:	687b      	ldr	r3, [r7, #4]
 80518fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80518fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80518fe:	3b01      	subs	r3, #1
 8051900:	015b      	lsls	r3, r3, #5
 8051902:	1ad2      	subs	r2, r2, r3
 8051904:	687b      	ldr	r3, [r7, #4]
 8051906:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8051908:	687b      	ldr	r3, [r7, #4]
 805190a:	79db      	ldrb	r3, [r3, #7]
 805190c:	f003 0304 	and.w	r3, r3, #4
 8051910:	2b00      	cmp	r3, #0
 8051912:	d077      	beq.n	8051a04 <dir_register+0x180>
			dp->obj.stat &= ~4;
 8051914:	687b      	ldr	r3, [r7, #4]
 8051916:	79db      	ldrb	r3, [r3, #7]
 8051918:	f023 0304 	bic.w	r3, r3, #4
 805191c:	b2da      	uxtb	r2, r3
 805191e:	687b      	ldr	r3, [r7, #4]
 8051920:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8051922:	687b      	ldr	r3, [r7, #4]
 8051924:	4618      	mov	r0, r3
 8051926:	f7fe fc93 	bl	8050250 <fill_first_frag>
 805192a:	4603      	mov	r3, r0
 805192c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8051930:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051934:	2b00      	cmp	r3, #0
 8051936:	d002      	beq.n	805193e <dir_register+0xba>
 8051938:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 805193c:	e148      	b.n	8051bd0 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 805193e:	6878      	ldr	r0, [r7, #4]
 8051940:	687b      	ldr	r3, [r7, #4]
 8051942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8051944:	f04f 32ff 	mov.w	r2, #4294967295
 8051948:	4619      	mov	r1, r3
 805194a:	f7fe fcb0 	bl	80502ae <fill_last_frag>
 805194e:	4603      	mov	r3, r0
 8051950:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8051954:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051958:	2b00      	cmp	r3, #0
 805195a:	d002      	beq.n	8051962 <dir_register+0xde>
 805195c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051960:	e136      	b.n	8051bd0 <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8051962:	687b      	ldr	r3, [r7, #4]
 8051964:	689b      	ldr	r3, [r3, #8]
 8051966:	2b00      	cmp	r3, #0
 8051968:	d04c      	beq.n	8051a04 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 805196a:	687a      	ldr	r2, [r7, #4]
 805196c:	f107 0308 	add.w	r3, r7, #8
 8051970:	4611      	mov	r1, r2
 8051972:	4618      	mov	r0, r3
 8051974:	f7ff fc91 	bl	805129a <load_obj_xdir>
 8051978:	4603      	mov	r3, r0
 805197a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 805197e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051982:	2b00      	cmp	r3, #0
 8051984:	d002      	beq.n	805198c <dir_register+0x108>
 8051986:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 805198a:	e121      	b.n	8051bd0 <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 805198c:	687b      	ldr	r3, [r7, #4]
 805198e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8051992:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8051994:	8949      	ldrh	r1, [r1, #10]
 8051996:	0249      	lsls	r1, r1, #9
 8051998:	2000      	movs	r0, #0
 805199a:	460c      	mov	r4, r1
 805199c:	4605      	mov	r5, r0
 805199e:	eb12 0804 	adds.w	r8, r2, r4
 80519a2:	eb43 0905 	adc.w	r9, r3, r5
 80519a6:	687b      	ldr	r3, [r7, #4]
 80519a8:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80519ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80519ae:	691b      	ldr	r3, [r3, #16]
 80519b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80519b4:	687b      	ldr	r3, [r7, #4]
 80519b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80519ba:	4608      	mov	r0, r1
 80519bc:	f7fd fd63 	bl	804f486 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80519c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80519c2:	691b      	ldr	r3, [r3, #16]
 80519c4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80519c8:	687b      	ldr	r3, [r7, #4]
 80519ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80519ce:	4608      	mov	r0, r1
 80519d0:	f7fd fd59 	bl	804f486 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 80519d4:	687b      	ldr	r3, [r7, #4]
 80519d6:	79da      	ldrb	r2, [r3, #7]
 80519d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80519da:	691b      	ldr	r3, [r3, #16]
 80519dc:	3321      	adds	r3, #33	@ 0x21
 80519de:	f042 0201 	orr.w	r2, r2, #1
 80519e2:	b2d2      	uxtb	r2, r2
 80519e4:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 80519e6:	f107 0308 	add.w	r3, r7, #8
 80519ea:	4618      	mov	r0, r3
 80519ec:	f7ff fc8e 	bl	805130c <store_xdir>
 80519f0:	4603      	mov	r3, r0
 80519f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 80519f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80519fa:	2b00      	cmp	r3, #0
 80519fc:	d002      	beq.n	8051a04 <dir_register+0x180>
 80519fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051a02:	e0e5      	b.n	8051bd0 <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8051a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051a06:	691a      	ldr	r2, [r3, #16]
 8051a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051a0a:	68db      	ldr	r3, [r3, #12]
 8051a0c:	4619      	mov	r1, r3
 8051a0e:	4610      	mov	r0, r2
 8051a10:	f7ff fcd7 	bl	80513c2 <create_xdir>
		return FR_OK;
 8051a14:	2300      	movs	r3, #0
 8051a16:	e0db      	b.n	8051bd0 <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8051a18:	687b      	ldr	r3, [r7, #4]
 8051a1a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8051a1e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8051a22:	6810      	ldr	r0, [r2, #0]
 8051a24:	6851      	ldr	r1, [r2, #4]
 8051a26:	6892      	ldr	r2, [r2, #8]
 8051a28:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8051a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8051a2e:	f003 0301 	and.w	r3, r3, #1
 8051a32:	2b00      	cmp	r3, #0
 8051a34:	d033      	beq.n	8051a9e <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8051a36:	687b      	ldr	r3, [r7, #4]
 8051a38:	2240      	movs	r2, #64	@ 0x40
 8051a3a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8051a3e:	2301      	movs	r3, #1
 8051a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8051a42:	e016      	b.n	8051a72 <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8051a44:	687b      	ldr	r3, [r7, #4]
 8051a46:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8051a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051a4c:	68da      	ldr	r2, [r3, #12]
 8051a4e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8051a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8051a54:	f7ff fa08 	bl	8050e68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8051a58:	6878      	ldr	r0, [r7, #4]
 8051a5a:	f7ff fde9 	bl	8051630 <dir_find>
 8051a5e:	4603      	mov	r3, r0
 8051a60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8051a64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051a68:	2b00      	cmp	r3, #0
 8051a6a:	d106      	bne.n	8051a7a <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 8051a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8051a6e:	3301      	adds	r3, #1
 8051a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8051a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8051a74:	2b63      	cmp	r3, #99	@ 0x63
 8051a76:	d9e5      	bls.n	8051a44 <dir_register+0x1c0>
 8051a78:	e000      	b.n	8051a7c <dir_register+0x1f8>
			if (res != FR_OK) break;
 8051a7a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8051a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8051a7e:	2b64      	cmp	r3, #100	@ 0x64
 8051a80:	d101      	bne.n	8051a86 <dir_register+0x202>
 8051a82:	2307      	movs	r3, #7
 8051a84:	e0a4      	b.n	8051bd0 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8051a86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051a8a:	2b04      	cmp	r3, #4
 8051a8c:	d002      	beq.n	8051a94 <dir_register+0x210>
 8051a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051a92:	e09d      	b.n	8051bd0 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8051a94:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8051a98:	687b      	ldr	r3, [r7, #4]
 8051a9a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8051a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8051aa2:	f003 0302 	and.w	r3, r3, #2
 8051aa6:	2b00      	cmp	r3, #0
 8051aa8:	d007      	beq.n	8051aba <dir_register+0x236>
 8051aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8051aac:	330c      	adds	r3, #12
 8051aae:	4a2f      	ldr	r2, [pc, #188]	@ (8051b6c <dir_register+0x2e8>)
 8051ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8051ab4:	089b      	lsrs	r3, r3, #2
 8051ab6:	3301      	adds	r3, #1
 8051ab8:	e000      	b.n	8051abc <dir_register+0x238>
 8051aba:	2301      	movs	r3, #1
 8051abc:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8051abe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8051ac0:	6878      	ldr	r0, [r7, #4]
 8051ac2:	f7fe fff9 	bl	8050ab8 <dir_alloc>
 8051ac6:	4603      	mov	r3, r0
 8051ac8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8051acc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051ad0:	2b00      	cmp	r3, #0
 8051ad2:	d14e      	bne.n	8051b72 <dir_register+0x2ee>
 8051ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051ad6:	3b01      	subs	r3, #1
 8051ad8:	673b      	str	r3, [r7, #112]	@ 0x70
 8051ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051adc:	2b00      	cmp	r3, #0
 8051ade:	d048      	beq.n	8051b72 <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8051ae0:	687b      	ldr	r3, [r7, #4]
 8051ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8051ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051ae6:	015b      	lsls	r3, r3, #5
 8051ae8:	1ad3      	subs	r3, r2, r3
 8051aea:	4619      	mov	r1, r3
 8051aec:	6878      	ldr	r0, [r7, #4]
 8051aee:	f7fe feb8 	bl	8050862 <dir_sdi>
 8051af2:	4603      	mov	r3, r0
 8051af4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8051af8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051afc:	2b00      	cmp	r3, #0
 8051afe:	d138      	bne.n	8051b72 <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8051b00:	687b      	ldr	r3, [r7, #4]
 8051b02:	3340      	adds	r3, #64	@ 0x40
 8051b04:	4618      	mov	r0, r3
 8051b06:	f7ff fa55 	bl	8050fb4 <sum_sfn>
 8051b0a:	4603      	mov	r3, r0
 8051b0c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8051b10:	687b      	ldr	r3, [r7, #4]
 8051b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051b14:	4619      	mov	r1, r3
 8051b16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8051b18:	f7fd ffe4 	bl	804fae4 <move_window>
 8051b1c:	4603      	mov	r3, r0
 8051b1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8051b22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051b26:	2b00      	cmp	r3, #0
 8051b28:	d122      	bne.n	8051b70 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8051b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051b2c:	68d8      	ldr	r0, [r3, #12]
 8051b2e:	687b      	ldr	r3, [r7, #4]
 8051b30:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8051b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051b34:	b2da      	uxtb	r2, r3
 8051b36:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8051b3a:	f7ff f92d 	bl	8050d98 <put_lfn>
				fs->wflag = 1;
 8051b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051b40:	2201      	movs	r2, #1
 8051b42:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8051b44:	2100      	movs	r1, #0
 8051b46:	6878      	ldr	r0, [r7, #4]
 8051b48:	f7fe ff11 	bl	805096e <dir_next>
 8051b4c:	4603      	mov	r3, r0
 8051b4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 8051b52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051b56:	2b00      	cmp	r3, #0
 8051b58:	d10b      	bne.n	8051b72 <dir_register+0x2ee>
 8051b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051b5c:	3b01      	subs	r3, #1
 8051b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8051b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8051b62:	2b00      	cmp	r3, #0
 8051b64:	d1d4      	bne.n	8051b10 <dir_register+0x28c>
 8051b66:	e004      	b.n	8051b72 <dir_register+0x2ee>
 8051b68:	88888889 	.word	0x88888889
 8051b6c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8051b70:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8051b72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051b76:	2b00      	cmp	r3, #0
 8051b78:	d128      	bne.n	8051bcc <dir_register+0x348>
		res = move_window(fs, dp->sect);
 8051b7a:	687b      	ldr	r3, [r7, #4]
 8051b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051b7e:	4619      	mov	r1, r3
 8051b80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8051b82:	f7fd ffaf 	bl	804fae4 <move_window>
 8051b86:	4603      	mov	r3, r0
 8051b88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8051b8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8051b90:	2b00      	cmp	r3, #0
 8051b92:	d11b      	bne.n	8051bcc <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8051b94:	687b      	ldr	r3, [r7, #4]
 8051b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051b98:	2220      	movs	r2, #32
 8051b9a:	2100      	movs	r1, #0
 8051b9c:	4618      	mov	r0, r3
 8051b9e:	f017 fe21 	bl	80697e4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8051ba2:	687b      	ldr	r3, [r7, #4]
 8051ba4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8051ba6:	687b      	ldr	r3, [r7, #4]
 8051ba8:	3340      	adds	r3, #64	@ 0x40
 8051baa:	220b      	movs	r2, #11
 8051bac:	4619      	mov	r1, r3
 8051bae:	f017 fec4 	bl	806993a <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8051bb2:	687b      	ldr	r3, [r7, #4]
 8051bb4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8051bb8:	687b      	ldr	r3, [r7, #4]
 8051bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051bbc:	330c      	adds	r3, #12
 8051bbe:	f002 0218 	and.w	r2, r2, #24
 8051bc2:	b2d2      	uxtb	r2, r2
 8051bc4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8051bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8051bc8:	2201      	movs	r2, #1
 8051bca:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8051bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8051bd0:	4618      	mov	r0, r3
 8051bd2:	3780      	adds	r7, #128	@ 0x80
 8051bd4:	46bd      	mov	sp, r7
 8051bd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8051bda:	bf00      	nop

08051bdc <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8051bdc:	b5b0      	push	{r4, r5, r7, lr}
 8051bde:	b08a      	sub	sp, #40	@ 0x28
 8051be0:	af00      	add	r7, sp, #0
 8051be2:	6078      	str	r0, [r7, #4]
 8051be4:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 8051be6:	687b      	ldr	r3, [r7, #4]
 8051be8:	681b      	ldr	r3, [r3, #0]
 8051bea:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8051bec:	683b      	ldr	r3, [r7, #0]
 8051bee:	2200      	movs	r2, #0
 8051bf0:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8051bf2:	687b      	ldr	r3, [r7, #4]
 8051bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8051bf6:	2b00      	cmp	r3, #0
 8051bf8:	f000 81b6 	beq.w	8051f68 <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 8051bfc:	693b      	ldr	r3, [r7, #16]
 8051bfe:	781b      	ldrb	r3, [r3, #0]
 8051c00:	2b04      	cmp	r3, #4
 8051c02:	f040 80a6 	bne.w	8051d52 <get_fileinfo+0x176>
		UINT nc = 0;
 8051c06:	2300      	movs	r3, #0
 8051c08:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 8051c0a:	2340      	movs	r3, #64	@ 0x40
 8051c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8051c0e:	2300      	movs	r3, #0
 8051c10:	623b      	str	r3, [r7, #32]
		hs = 0;
 8051c12:	2300      	movs	r3, #0
 8051c14:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8051c16:	e048      	b.n	8051caa <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 8051c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051c1a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8051c1e:	d302      	bcc.n	8051c26 <get_fileinfo+0x4a>
				di = 0; break;
 8051c20:	2300      	movs	r3, #0
 8051c22:	623b      	str	r3, [r7, #32]
 8051c24:	e049      	b.n	8051cba <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 8051c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051c28:	f003 031f 	and.w	r3, r3, #31
 8051c2c:	2b00      	cmp	r3, #0
 8051c2e:	d102      	bne.n	8051c36 <get_fileinfo+0x5a>
 8051c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051c32:	3302      	adds	r3, #2
 8051c34:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 8051c36:	693b      	ldr	r3, [r7, #16]
 8051c38:	691a      	ldr	r2, [r3, #16]
 8051c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051c3c:	4413      	add	r3, r2
 8051c3e:	4618      	mov	r0, r3
 8051c40:	f7fd fac3 	bl	804f1ca <ld_word>
 8051c44:	4603      	mov	r3, r0
 8051c46:	83bb      	strh	r3, [r7, #28]
 8051c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051c4a:	3302      	adds	r3, #2
 8051c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8051c4e:	697b      	ldr	r3, [r7, #20]
 8051c50:	3301      	adds	r3, #1
 8051c52:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8051c54:	8b7b      	ldrh	r3, [r7, #26]
 8051c56:	2b00      	cmp	r3, #0
 8051c58:	d10a      	bne.n	8051c70 <get_fileinfo+0x94>
 8051c5a:	8bbb      	ldrh	r3, [r7, #28]
 8051c5c:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8051c60:	d306      	bcc.n	8051c70 <get_fileinfo+0x94>
 8051c62:	8bbb      	ldrh	r3, [r7, #28]
 8051c64:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8051c68:	d202      	bcs.n	8051c70 <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 8051c6a:	8bbb      	ldrh	r3, [r7, #28]
 8051c6c:	837b      	strh	r3, [r7, #26]
 8051c6e:	e01c      	b.n	8051caa <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8051c70:	8b7b      	ldrh	r3, [r7, #26]
 8051c72:	041a      	lsls	r2, r3, #16
 8051c74:	8bbb      	ldrh	r3, [r7, #28]
 8051c76:	ea42 0003 	orr.w	r0, r2, r3
 8051c7a:	6a3b      	ldr	r3, [r7, #32]
 8051c7c:	3318      	adds	r3, #24
 8051c7e:	683a      	ldr	r2, [r7, #0]
 8051c80:	4413      	add	r3, r2
 8051c82:	1c99      	adds	r1, r3, #2
 8051c84:	6a3b      	ldr	r3, [r7, #32]
 8051c86:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8051c8a:	461a      	mov	r2, r3
 8051c8c:	f7fd fcea 	bl	804f664 <put_utf>
 8051c90:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 8051c92:	68fb      	ldr	r3, [r7, #12]
 8051c94:	2b00      	cmp	r3, #0
 8051c96:	d102      	bne.n	8051c9e <get_fileinfo+0xc2>
				di = 0; break;
 8051c98:	2300      	movs	r3, #0
 8051c9a:	623b      	str	r3, [r7, #32]
 8051c9c:	e00d      	b.n	8051cba <get_fileinfo+0xde>
			}
			di += nw;
 8051c9e:	6a3a      	ldr	r2, [r7, #32]
 8051ca0:	68fb      	ldr	r3, [r7, #12]
 8051ca2:	4413      	add	r3, r2
 8051ca4:	623b      	str	r3, [r7, #32]
			hs = 0;
 8051ca6:	2300      	movs	r3, #0
 8051ca8:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8051caa:	693b      	ldr	r3, [r7, #16]
 8051cac:	691b      	ldr	r3, [r3, #16]
 8051cae:	3323      	adds	r3, #35	@ 0x23
 8051cb0:	781b      	ldrb	r3, [r3, #0]
 8051cb2:	461a      	mov	r2, r3
 8051cb4:	697b      	ldr	r3, [r7, #20]
 8051cb6:	4293      	cmp	r3, r2
 8051cb8:	d3ae      	bcc.n	8051c18 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8051cba:	8b7b      	ldrh	r3, [r7, #26]
 8051cbc:	2b00      	cmp	r3, #0
 8051cbe:	d001      	beq.n	8051cc4 <get_fileinfo+0xe8>
 8051cc0:	2300      	movs	r3, #0
 8051cc2:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 8051cc4:	6a3b      	ldr	r3, [r7, #32]
 8051cc6:	2b00      	cmp	r3, #0
 8051cc8:	d106      	bne.n	8051cd8 <get_fileinfo+0xfc>
 8051cca:	6a3b      	ldr	r3, [r7, #32]
 8051ccc:	1c5a      	adds	r2, r3, #1
 8051cce:	623a      	str	r2, [r7, #32]
 8051cd0:	683a      	ldr	r2, [r7, #0]
 8051cd2:	4413      	add	r3, r2
 8051cd4:	223f      	movs	r2, #63	@ 0x3f
 8051cd6:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 8051cd8:	683a      	ldr	r2, [r7, #0]
 8051cda:	6a3b      	ldr	r3, [r7, #32]
 8051cdc:	4413      	add	r3, r2
 8051cde:	331a      	adds	r3, #26
 8051ce0:	2200      	movs	r2, #0
 8051ce2:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 8051ce4:	683b      	ldr	r3, [r7, #0]
 8051ce6:	2200      	movs	r2, #0
 8051ce8:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 8051cea:	693b      	ldr	r3, [r7, #16]
 8051cec:	691b      	ldr	r3, [r3, #16]
 8051cee:	3304      	adds	r3, #4
 8051cf0:	781b      	ldrb	r3, [r3, #0]
 8051cf2:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8051cf6:	b2da      	uxtb	r2, r3
 8051cf8:	683b      	ldr	r3, [r7, #0]
 8051cfa:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8051cfc:	683b      	ldr	r3, [r7, #0]
 8051cfe:	7b1b      	ldrb	r3, [r3, #12]
 8051d00:	f003 0310 	and.w	r3, r3, #16
 8051d04:	2b00      	cmp	r3, #0
 8051d06:	d108      	bne.n	8051d1a <get_fileinfo+0x13e>
 8051d08:	693b      	ldr	r3, [r7, #16]
 8051d0a:	691b      	ldr	r3, [r3, #16]
 8051d0c:	3338      	adds	r3, #56	@ 0x38
 8051d0e:	4618      	mov	r0, r3
 8051d10:	f7fd fa97 	bl	804f242 <ld_qword>
 8051d14:	4602      	mov	r2, r0
 8051d16:	460b      	mov	r3, r1
 8051d18:	e003      	b.n	8051d22 <get_fileinfo+0x146>
 8051d1a:	f04f 0200 	mov.w	r2, #0
 8051d1e:	f04f 0300 	mov.w	r3, #0
 8051d22:	6839      	ldr	r1, [r7, #0]
 8051d24:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 8051d28:	693b      	ldr	r3, [r7, #16]
 8051d2a:	691b      	ldr	r3, [r3, #16]
 8051d2c:	330c      	adds	r3, #12
 8051d2e:	4618      	mov	r0, r3
 8051d30:	f7fd fa4b 	bl	804f1ca <ld_word>
 8051d34:	4603      	mov	r3, r0
 8051d36:	461a      	mov	r2, r3
 8051d38:	683b      	ldr	r3, [r7, #0]
 8051d3a:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 8051d3c:	693b      	ldr	r3, [r7, #16]
 8051d3e:	691b      	ldr	r3, [r3, #16]
 8051d40:	330e      	adds	r3, #14
 8051d42:	4618      	mov	r0, r3
 8051d44:	f7fd fa41 	bl	804f1ca <ld_word>
 8051d48:	4603      	mov	r3, r0
 8051d4a:	461a      	mov	r2, r3
 8051d4c:	683b      	ldr	r3, [r7, #0]
 8051d4e:	811a      	strh	r2, [r3, #8]
		return;
 8051d50:	e10b      	b.n	8051f6a <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8051d52:	687b      	ldr	r3, [r7, #4]
 8051d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8051d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8051d5a:	d04d      	beq.n	8051df8 <get_fileinfo+0x21c>
			si = di = 0;
 8051d5c:	2300      	movs	r3, #0
 8051d5e:	623b      	str	r3, [r7, #32]
 8051d60:	6a3b      	ldr	r3, [r7, #32]
 8051d62:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 8051d64:	2300      	movs	r3, #0
 8051d66:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8051d68:	e033      	b.n	8051dd2 <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 8051d6a:	693b      	ldr	r3, [r7, #16]
 8051d6c:	68da      	ldr	r2, [r3, #12]
 8051d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051d70:	1c59      	adds	r1, r3, #1
 8051d72:	6279      	str	r1, [r7, #36]	@ 0x24
 8051d74:	005b      	lsls	r3, r3, #1
 8051d76:	4413      	add	r3, r2
 8051d78:	881b      	ldrh	r3, [r3, #0]
 8051d7a:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8051d7c:	8b7b      	ldrh	r3, [r7, #26]
 8051d7e:	2b00      	cmp	r3, #0
 8051d80:	d10a      	bne.n	8051d98 <get_fileinfo+0x1bc>
 8051d82:	8bbb      	ldrh	r3, [r7, #28]
 8051d84:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8051d88:	d306      	bcc.n	8051d98 <get_fileinfo+0x1bc>
 8051d8a:	8bbb      	ldrh	r3, [r7, #28]
 8051d8c:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8051d90:	d202      	bcs.n	8051d98 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 8051d92:	8bbb      	ldrh	r3, [r7, #28]
 8051d94:	837b      	strh	r3, [r7, #26]
 8051d96:	e01c      	b.n	8051dd2 <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8051d98:	8b7b      	ldrh	r3, [r7, #26]
 8051d9a:	041a      	lsls	r2, r3, #16
 8051d9c:	8bbb      	ldrh	r3, [r7, #28]
 8051d9e:	ea42 0003 	orr.w	r0, r2, r3
 8051da2:	6a3b      	ldr	r3, [r7, #32]
 8051da4:	3318      	adds	r3, #24
 8051da6:	683a      	ldr	r2, [r7, #0]
 8051da8:	4413      	add	r3, r2
 8051daa:	1c99      	adds	r1, r3, #2
 8051dac:	6a3b      	ldr	r3, [r7, #32]
 8051dae:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8051db2:	461a      	mov	r2, r3
 8051db4:	f7fd fc56 	bl	804f664 <put_utf>
 8051db8:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 8051dba:	68fb      	ldr	r3, [r7, #12]
 8051dbc:	2b00      	cmp	r3, #0
 8051dbe:	d102      	bne.n	8051dc6 <get_fileinfo+0x1ea>
					di = 0; break;
 8051dc0:	2300      	movs	r3, #0
 8051dc2:	623b      	str	r3, [r7, #32]
 8051dc4:	e00d      	b.n	8051de2 <get_fileinfo+0x206>
				}
				di += nw;
 8051dc6:	6a3a      	ldr	r2, [r7, #32]
 8051dc8:	68fb      	ldr	r3, [r7, #12]
 8051dca:	4413      	add	r3, r2
 8051dcc:	623b      	str	r3, [r7, #32]
				hs = 0;
 8051dce:	2300      	movs	r3, #0
 8051dd0:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8051dd2:	693b      	ldr	r3, [r7, #16]
 8051dd4:	68da      	ldr	r2, [r3, #12]
 8051dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051dd8:	005b      	lsls	r3, r3, #1
 8051dda:	4413      	add	r3, r2
 8051ddc:	881b      	ldrh	r3, [r3, #0]
 8051dde:	2b00      	cmp	r3, #0
 8051de0:	d1c3      	bne.n	8051d6a <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8051de2:	8b7b      	ldrh	r3, [r7, #26]
 8051de4:	2b00      	cmp	r3, #0
 8051de6:	d001      	beq.n	8051dec <get_fileinfo+0x210>
 8051de8:	2300      	movs	r3, #0
 8051dea:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8051dec:	683a      	ldr	r2, [r7, #0]
 8051dee:	6a3b      	ldr	r3, [r7, #32]
 8051df0:	4413      	add	r3, r2
 8051df2:	331a      	adds	r3, #26
 8051df4:	2200      	movs	r2, #0
 8051df6:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8051df8:	2300      	movs	r3, #0
 8051dfa:	623b      	str	r3, [r7, #32]
 8051dfc:	6a3b      	ldr	r3, [r7, #32]
 8051dfe:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 8051e00:	e027      	b.n	8051e52 <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 8051e02:	687b      	ldr	r3, [r7, #4]
 8051e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8051e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051e08:	1c59      	adds	r1, r3, #1
 8051e0a:	6279      	str	r1, [r7, #36]	@ 0x24
 8051e0c:	4413      	add	r3, r2
 8051e0e:	781b      	ldrb	r3, [r3, #0]
 8051e10:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8051e12:	8bbb      	ldrh	r3, [r7, #28]
 8051e14:	2b20      	cmp	r3, #32
 8051e16:	d01b      	beq.n	8051e50 <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8051e18:	8bbb      	ldrh	r3, [r7, #28]
 8051e1a:	2b05      	cmp	r3, #5
 8051e1c:	d101      	bne.n	8051e22 <get_fileinfo+0x246>
 8051e1e:	23e5      	movs	r3, #229	@ 0xe5
 8051e20:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8051e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051e24:	2b09      	cmp	r3, #9
 8051e26:	d109      	bne.n	8051e3c <get_fileinfo+0x260>
 8051e28:	6a3b      	ldr	r3, [r7, #32]
 8051e2a:	2b0b      	cmp	r3, #11
 8051e2c:	d806      	bhi.n	8051e3c <get_fileinfo+0x260>
 8051e2e:	6a3b      	ldr	r3, [r7, #32]
 8051e30:	1c5a      	adds	r2, r3, #1
 8051e32:	623a      	str	r2, [r7, #32]
 8051e34:	683a      	ldr	r2, [r7, #0]
 8051e36:	4413      	add	r3, r2
 8051e38:	222e      	movs	r2, #46	@ 0x2e
 8051e3a:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8051e3c:	6a3b      	ldr	r3, [r7, #32]
 8051e3e:	1c5a      	adds	r2, r3, #1
 8051e40:	623a      	str	r2, [r7, #32]
 8051e42:	8bba      	ldrh	r2, [r7, #28]
 8051e44:	b2d1      	uxtb	r1, r2
 8051e46:	683a      	ldr	r2, [r7, #0]
 8051e48:	4413      	add	r3, r2
 8051e4a:	460a      	mov	r2, r1
 8051e4c:	735a      	strb	r2, [r3, #13]
 8051e4e:	e000      	b.n	8051e52 <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 8051e50:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 8051e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051e54:	2b0a      	cmp	r3, #10
 8051e56:	d9d4      	bls.n	8051e02 <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8051e58:	683a      	ldr	r2, [r7, #0]
 8051e5a:	6a3b      	ldr	r3, [r7, #32]
 8051e5c:	4413      	add	r3, r2
 8051e5e:	330d      	adds	r3, #13
 8051e60:	2200      	movs	r2, #0
 8051e62:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8051e64:	683b      	ldr	r3, [r7, #0]
 8051e66:	7e9b      	ldrb	r3, [r3, #26]
 8051e68:	2b00      	cmp	r3, #0
 8051e6a:	d152      	bne.n	8051f12 <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 8051e6c:	6a3b      	ldr	r3, [r7, #32]
 8051e6e:	2b00      	cmp	r3, #0
 8051e70:	d107      	bne.n	8051e82 <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 8051e72:	6a3b      	ldr	r3, [r7, #32]
 8051e74:	1c5a      	adds	r2, r3, #1
 8051e76:	623a      	str	r2, [r7, #32]
 8051e78:	683a      	ldr	r2, [r7, #0]
 8051e7a:	4413      	add	r3, r2
 8051e7c:	223f      	movs	r2, #63	@ 0x3f
 8051e7e:	769a      	strb	r2, [r3, #26]
 8051e80:	e038      	b.n	8051ef4 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8051e82:	2300      	movs	r3, #0
 8051e84:	623b      	str	r3, [r7, #32]
 8051e86:	6a3b      	ldr	r3, [r7, #32]
 8051e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8051e8a:	2308      	movs	r3, #8
 8051e8c:	77fb      	strb	r3, [r7, #31]
 8051e8e:	e02a      	b.n	8051ee6 <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 8051e90:	683a      	ldr	r2, [r7, #0]
 8051e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051e94:	4413      	add	r3, r2
 8051e96:	330d      	adds	r3, #13
 8051e98:	781b      	ldrb	r3, [r3, #0]
 8051e9a:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 8051e9c:	8bbb      	ldrh	r3, [r7, #28]
 8051e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8051ea0:	d101      	bne.n	8051ea6 <get_fileinfo+0x2ca>
 8051ea2:	2310      	movs	r3, #16
 8051ea4:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 8051ea6:	8bbb      	ldrh	r3, [r7, #28]
 8051ea8:	2b40      	cmp	r3, #64	@ 0x40
 8051eaa:	d90e      	bls.n	8051eca <get_fileinfo+0x2ee>
 8051eac:	8bbb      	ldrh	r3, [r7, #28]
 8051eae:	2b5a      	cmp	r3, #90	@ 0x5a
 8051eb0:	d80b      	bhi.n	8051eca <get_fileinfo+0x2ee>
 8051eb2:	687b      	ldr	r3, [r7, #4]
 8051eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051eb6:	330c      	adds	r3, #12
 8051eb8:	781a      	ldrb	r2, [r3, #0]
 8051eba:	7ffb      	ldrb	r3, [r7, #31]
 8051ebc:	4013      	ands	r3, r2
 8051ebe:	b2db      	uxtb	r3, r3
 8051ec0:	2b00      	cmp	r3, #0
 8051ec2:	d002      	beq.n	8051eca <get_fileinfo+0x2ee>
 8051ec4:	8bbb      	ldrh	r3, [r7, #28]
 8051ec6:	3320      	adds	r3, #32
 8051ec8:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 8051eca:	8bbb      	ldrh	r3, [r7, #28]
 8051ecc:	b2d9      	uxtb	r1, r3
 8051ece:	683a      	ldr	r2, [r7, #0]
 8051ed0:	6a3b      	ldr	r3, [r7, #32]
 8051ed2:	4413      	add	r3, r2
 8051ed4:	331a      	adds	r3, #26
 8051ed6:	460a      	mov	r2, r1
 8051ed8:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8051eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051edc:	3301      	adds	r3, #1
 8051ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8051ee0:	6a3b      	ldr	r3, [r7, #32]
 8051ee2:	3301      	adds	r3, #1
 8051ee4:	623b      	str	r3, [r7, #32]
 8051ee6:	683a      	ldr	r2, [r7, #0]
 8051ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8051eea:	4413      	add	r3, r2
 8051eec:	330d      	adds	r3, #13
 8051eee:	781b      	ldrb	r3, [r3, #0]
 8051ef0:	2b00      	cmp	r3, #0
 8051ef2:	d1cd      	bne.n	8051e90 <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8051ef4:	683a      	ldr	r2, [r7, #0]
 8051ef6:	6a3b      	ldr	r3, [r7, #32]
 8051ef8:	4413      	add	r3, r2
 8051efa:	331a      	adds	r3, #26
 8051efc:	2200      	movs	r2, #0
 8051efe:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8051f00:	687b      	ldr	r3, [r7, #4]
 8051f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051f04:	330c      	adds	r3, #12
 8051f06:	781b      	ldrb	r3, [r3, #0]
 8051f08:	2b00      	cmp	r3, #0
 8051f0a:	d102      	bne.n	8051f12 <get_fileinfo+0x336>
 8051f0c:	683b      	ldr	r3, [r7, #0]
 8051f0e:	2200      	movs	r2, #0
 8051f10:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8051f12:	687b      	ldr	r3, [r7, #4]
 8051f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051f16:	330b      	adds	r3, #11
 8051f18:	781b      	ldrb	r3, [r3, #0]
 8051f1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8051f1e:	b2da      	uxtb	r2, r3
 8051f20:	683b      	ldr	r3, [r7, #0]
 8051f22:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8051f24:	687b      	ldr	r3, [r7, #4]
 8051f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051f28:	331c      	adds	r3, #28
 8051f2a:	4618      	mov	r0, r3
 8051f2c:	f7fd f966 	bl	804f1fc <ld_dword>
 8051f30:	4603      	mov	r3, r0
 8051f32:	2200      	movs	r2, #0
 8051f34:	461c      	mov	r4, r3
 8051f36:	4615      	mov	r5, r2
 8051f38:	683b      	ldr	r3, [r7, #0]
 8051f3a:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8051f3e:	687b      	ldr	r3, [r7, #4]
 8051f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051f42:	3316      	adds	r3, #22
 8051f44:	4618      	mov	r0, r3
 8051f46:	f7fd f940 	bl	804f1ca <ld_word>
 8051f4a:	4603      	mov	r3, r0
 8051f4c:	461a      	mov	r2, r3
 8051f4e:	683b      	ldr	r3, [r7, #0]
 8051f50:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8051f52:	687b      	ldr	r3, [r7, #4]
 8051f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8051f56:	3318      	adds	r3, #24
 8051f58:	4618      	mov	r0, r3
 8051f5a:	f7fd f936 	bl	804f1ca <ld_word>
 8051f5e:	4603      	mov	r3, r0
 8051f60:	461a      	mov	r2, r3
 8051f62:	683b      	ldr	r3, [r7, #0]
 8051f64:	811a      	strh	r2, [r3, #8]
 8051f66:	e000      	b.n	8051f6a <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8051f68:	bf00      	nop
}
 8051f6a:	3728      	adds	r7, #40	@ 0x28
 8051f6c:	46bd      	mov	sp, r7
 8051f6e:	bdb0      	pop	{r4, r5, r7, pc}

08051f70 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8051f70:	b580      	push	{r7, lr}
 8051f72:	b08a      	sub	sp, #40	@ 0x28
 8051f74:	af00      	add	r7, sp, #0
 8051f76:	6078      	str	r0, [r7, #4]
 8051f78:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8051f7a:	683b      	ldr	r3, [r7, #0]
 8051f7c:	681b      	ldr	r3, [r3, #0]
 8051f7e:	60bb      	str	r3, [r7, #8]
 8051f80:	687b      	ldr	r3, [r7, #4]
 8051f82:	681b      	ldr	r3, [r3, #0]
 8051f84:	68db      	ldr	r3, [r3, #12]
 8051f86:	613b      	str	r3, [r7, #16]
 8051f88:	2300      	movs	r3, #0
 8051f8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8051f8c:	f107 0308 	add.w	r3, r7, #8
 8051f90:	4618      	mov	r0, r3
 8051f92:	f7fd fb22 	bl	804f5da <tchar2uni>
 8051f96:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8051f98:	68fb      	ldr	r3, [r7, #12]
 8051f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8051f9e:	d101      	bne.n	8051fa4 <create_name+0x34>
 8051fa0:	2306      	movs	r3, #6
 8051fa2:	e209      	b.n	80523b8 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8051fa4:	68fb      	ldr	r3, [r7, #12]
 8051fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8051faa:	d309      	bcc.n	8051fc0 <create_name+0x50>
 8051fac:	68fb      	ldr	r3, [r7, #12]
 8051fae:	0c19      	lsrs	r1, r3, #16
 8051fb0:	697b      	ldr	r3, [r7, #20]
 8051fb2:	1c5a      	adds	r2, r3, #1
 8051fb4:	617a      	str	r2, [r7, #20]
 8051fb6:	005b      	lsls	r3, r3, #1
 8051fb8:	693a      	ldr	r2, [r7, #16]
 8051fba:	4413      	add	r3, r2
 8051fbc:	b28a      	uxth	r2, r1
 8051fbe:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8051fc0:	68fb      	ldr	r3, [r7, #12]
 8051fc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8051fc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8051fc6:	2b1f      	cmp	r3, #31
 8051fc8:	d920      	bls.n	805200c <create_name+0x9c>
 8051fca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8051fcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8051fce:	d01d      	beq.n	805200c <create_name+0x9c>
 8051fd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8051fd2:	2b5c      	cmp	r3, #92	@ 0x5c
 8051fd4:	d01a      	beq.n	805200c <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8051fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8051fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8051fda:	d809      	bhi.n	8051ff0 <create_name+0x80>
 8051fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8051fde:	4619      	mov	r1, r3
 8051fe0:	4894      	ldr	r0, [pc, #592]	@ (8052234 <create_name+0x2c4>)
 8051fe2:	f017 fc16 	bl	8069812 <strchr>
 8051fe6:	4603      	mov	r3, r0
 8051fe8:	2b00      	cmp	r3, #0
 8051fea:	d001      	beq.n	8051ff0 <create_name+0x80>
 8051fec:	2306      	movs	r3, #6
 8051fee:	e1e3      	b.n	80523b8 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8051ff0:	697b      	ldr	r3, [r7, #20]
 8051ff2:	2bfe      	cmp	r3, #254	@ 0xfe
 8051ff4:	d901      	bls.n	8051ffa <create_name+0x8a>
 8051ff6:	2306      	movs	r3, #6
 8051ff8:	e1de      	b.n	80523b8 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 8051ffa:	697b      	ldr	r3, [r7, #20]
 8051ffc:	1c5a      	adds	r2, r3, #1
 8051ffe:	617a      	str	r2, [r7, #20]
 8052000:	005b      	lsls	r3, r3, #1
 8052002:	693a      	ldr	r2, [r7, #16]
 8052004:	4413      	add	r3, r2
 8052006:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8052008:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 805200a:	e7bf      	b.n	8051f8c <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 805200c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 805200e:	2b1f      	cmp	r3, #31
 8052010:	d806      	bhi.n	8052020 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8052012:	2304      	movs	r3, #4
 8052014:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8052018:	e014      	b.n	8052044 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 805201a:	68bb      	ldr	r3, [r7, #8]
 805201c:	3301      	adds	r3, #1
 805201e:	60bb      	str	r3, [r7, #8]
 8052020:	68bb      	ldr	r3, [r7, #8]
 8052022:	781b      	ldrb	r3, [r3, #0]
 8052024:	2b2f      	cmp	r3, #47	@ 0x2f
 8052026:	d0f8      	beq.n	805201a <create_name+0xaa>
 8052028:	68bb      	ldr	r3, [r7, #8]
 805202a:	781b      	ldrb	r3, [r3, #0]
 805202c:	2b5c      	cmp	r3, #92	@ 0x5c
 805202e:	d0f4      	beq.n	805201a <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8052030:	2300      	movs	r3, #0
 8052032:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8052036:	68bb      	ldr	r3, [r7, #8]
 8052038:	781b      	ldrb	r3, [r3, #0]
 805203a:	2b1f      	cmp	r3, #31
 805203c:	d802      	bhi.n	8052044 <create_name+0xd4>
 805203e:	2304      	movs	r3, #4
 8052040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8052044:	68ba      	ldr	r2, [r7, #8]
 8052046:	683b      	ldr	r3, [r7, #0]
 8052048:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 805204a:	697b      	ldr	r3, [r7, #20]
 805204c:	2b01      	cmp	r3, #1
 805204e:	d109      	bne.n	8052064 <create_name+0xf4>
 8052050:	697a      	ldr	r2, [r7, #20]
 8052052:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8052056:	4413      	add	r3, r2
 8052058:	005b      	lsls	r3, r3, #1
 805205a:	693a      	ldr	r2, [r7, #16]
 805205c:	4413      	add	r3, r2
 805205e:	881b      	ldrh	r3, [r3, #0]
 8052060:	2b2e      	cmp	r3, #46	@ 0x2e
 8052062:	d015      	beq.n	8052090 <create_name+0x120>
 8052064:	697b      	ldr	r3, [r7, #20]
 8052066:	2b02      	cmp	r3, #2
 8052068:	d14d      	bne.n	8052106 <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 805206a:	697a      	ldr	r2, [r7, #20]
 805206c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8052070:	4413      	add	r3, r2
 8052072:	005b      	lsls	r3, r3, #1
 8052074:	693a      	ldr	r2, [r7, #16]
 8052076:	4413      	add	r3, r2
 8052078:	881b      	ldrh	r3, [r3, #0]
 805207a:	2b2e      	cmp	r3, #46	@ 0x2e
 805207c:	d143      	bne.n	8052106 <create_name+0x196>
 805207e:	697a      	ldr	r2, [r7, #20]
 8052080:	4b6d      	ldr	r3, [pc, #436]	@ (8052238 <create_name+0x2c8>)
 8052082:	4413      	add	r3, r2
 8052084:	005b      	lsls	r3, r3, #1
 8052086:	693a      	ldr	r2, [r7, #16]
 8052088:	4413      	add	r3, r2
 805208a:	881b      	ldrh	r3, [r3, #0]
 805208c:	2b2e      	cmp	r3, #46	@ 0x2e
 805208e:	d13a      	bne.n	8052106 <create_name+0x196>
		lfn[di] = 0;
 8052090:	697b      	ldr	r3, [r7, #20]
 8052092:	005b      	lsls	r3, r3, #1
 8052094:	693a      	ldr	r2, [r7, #16]
 8052096:	4413      	add	r3, r2
 8052098:	2200      	movs	r2, #0
 805209a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 805209c:	2300      	movs	r3, #0
 805209e:	623b      	str	r3, [r7, #32]
 80520a0:	e00f      	b.n	80520c2 <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80520a2:	6a3a      	ldr	r2, [r7, #32]
 80520a4:	697b      	ldr	r3, [r7, #20]
 80520a6:	429a      	cmp	r2, r3
 80520a8:	d201      	bcs.n	80520ae <create_name+0x13e>
 80520aa:	212e      	movs	r1, #46	@ 0x2e
 80520ac:	e000      	b.n	80520b0 <create_name+0x140>
 80520ae:	2120      	movs	r1, #32
 80520b0:	687a      	ldr	r2, [r7, #4]
 80520b2:	6a3b      	ldr	r3, [r7, #32]
 80520b4:	4413      	add	r3, r2
 80520b6:	3340      	adds	r3, #64	@ 0x40
 80520b8:	460a      	mov	r2, r1
 80520ba:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 80520bc:	6a3b      	ldr	r3, [r7, #32]
 80520be:	3301      	adds	r3, #1
 80520c0:	623b      	str	r3, [r7, #32]
 80520c2:	6a3b      	ldr	r3, [r7, #32]
 80520c4:	2b0a      	cmp	r3, #10
 80520c6:	d9ec      	bls.n	80520a2 <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 80520c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80520cc:	f043 0320 	orr.w	r3, r3, #32
 80520d0:	b2d9      	uxtb	r1, r3
 80520d2:	687a      	ldr	r2, [r7, #4]
 80520d4:	6a3b      	ldr	r3, [r7, #32]
 80520d6:	4413      	add	r3, r2
 80520d8:	3340      	adds	r3, #64	@ 0x40
 80520da:	460a      	mov	r2, r1
 80520dc:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80520de:	2300      	movs	r3, #0
 80520e0:	e16a      	b.n	80523b8 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 80520e2:	697a      	ldr	r2, [r7, #20]
 80520e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80520e8:	4413      	add	r3, r2
 80520ea:	005b      	lsls	r3, r3, #1
 80520ec:	693a      	ldr	r2, [r7, #16]
 80520ee:	4413      	add	r3, r2
 80520f0:	881b      	ldrh	r3, [r3, #0]
 80520f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 80520f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80520f6:	2b20      	cmp	r3, #32
 80520f8:	d002      	beq.n	8052100 <create_name+0x190>
 80520fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80520fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80520fe:	d106      	bne.n	805210e <create_name+0x19e>
		di--;
 8052100:	697b      	ldr	r3, [r7, #20]
 8052102:	3b01      	subs	r3, #1
 8052104:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8052106:	697b      	ldr	r3, [r7, #20]
 8052108:	2b00      	cmp	r3, #0
 805210a:	d1ea      	bne.n	80520e2 <create_name+0x172>
 805210c:	e000      	b.n	8052110 <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 805210e:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8052110:	697b      	ldr	r3, [r7, #20]
 8052112:	005b      	lsls	r3, r3, #1
 8052114:	693a      	ldr	r2, [r7, #16]
 8052116:	4413      	add	r3, r2
 8052118:	2200      	movs	r2, #0
 805211a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 805211c:	697b      	ldr	r3, [r7, #20]
 805211e:	2b00      	cmp	r3, #0
 8052120:	d101      	bne.n	8052126 <create_name+0x1b6>
 8052122:	2306      	movs	r3, #6
 8052124:	e148      	b.n	80523b8 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8052126:	2300      	movs	r3, #0
 8052128:	61bb      	str	r3, [r7, #24]
 805212a:	e002      	b.n	8052132 <create_name+0x1c2>
 805212c:	69bb      	ldr	r3, [r7, #24]
 805212e:	3301      	adds	r3, #1
 8052130:	61bb      	str	r3, [r7, #24]
 8052132:	69bb      	ldr	r3, [r7, #24]
 8052134:	005b      	lsls	r3, r3, #1
 8052136:	693a      	ldr	r2, [r7, #16]
 8052138:	4413      	add	r3, r2
 805213a:	881b      	ldrh	r3, [r3, #0]
 805213c:	2b20      	cmp	r3, #32
 805213e:	d0f5      	beq.n	805212c <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8052140:	69bb      	ldr	r3, [r7, #24]
 8052142:	2b00      	cmp	r3, #0
 8052144:	d106      	bne.n	8052154 <create_name+0x1e4>
 8052146:	69bb      	ldr	r3, [r7, #24]
 8052148:	005b      	lsls	r3, r3, #1
 805214a:	693a      	ldr	r2, [r7, #16]
 805214c:	4413      	add	r3, r2
 805214e:	881b      	ldrh	r3, [r3, #0]
 8052150:	2b2e      	cmp	r3, #46	@ 0x2e
 8052152:	d109      	bne.n	8052168 <create_name+0x1f8>
 8052154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052158:	f043 0303 	orr.w	r3, r3, #3
 805215c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8052160:	e002      	b.n	8052168 <create_name+0x1f8>
 8052162:	697b      	ldr	r3, [r7, #20]
 8052164:	3b01      	subs	r3, #1
 8052166:	617b      	str	r3, [r7, #20]
 8052168:	697b      	ldr	r3, [r7, #20]
 805216a:	2b00      	cmp	r3, #0
 805216c:	d009      	beq.n	8052182 <create_name+0x212>
 805216e:	697a      	ldr	r2, [r7, #20]
 8052170:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8052174:	4413      	add	r3, r2
 8052176:	005b      	lsls	r3, r3, #1
 8052178:	693a      	ldr	r2, [r7, #16]
 805217a:	4413      	add	r3, r2
 805217c:	881b      	ldrh	r3, [r3, #0]
 805217e:	2b2e      	cmp	r3, #46	@ 0x2e
 8052180:	d1ef      	bne.n	8052162 <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 8052182:	687b      	ldr	r3, [r7, #4]
 8052184:	3340      	adds	r3, #64	@ 0x40
 8052186:	220b      	movs	r2, #11
 8052188:	2120      	movs	r1, #32
 805218a:	4618      	mov	r0, r3
 805218c:	f017 fb2a 	bl	80697e4 <memset>
	i = b = 0; ni = 8;
 8052190:	2300      	movs	r3, #0
 8052192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8052196:	2300      	movs	r3, #0
 8052198:	623b      	str	r3, [r7, #32]
 805219a:	2308      	movs	r3, #8
 805219c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 805219e:	69bb      	ldr	r3, [r7, #24]
 80521a0:	1c5a      	adds	r2, r3, #1
 80521a2:	61ba      	str	r2, [r7, #24]
 80521a4:	005b      	lsls	r3, r3, #1
 80521a6:	693a      	ldr	r2, [r7, #16]
 80521a8:	4413      	add	r3, r2
 80521aa:	881b      	ldrh	r3, [r3, #0]
 80521ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 80521ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80521b0:	2b00      	cmp	r3, #0
 80521b2:	f000 80b7 	beq.w	8052324 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 80521b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80521b8:	2b20      	cmp	r3, #32
 80521ba:	d006      	beq.n	80521ca <create_name+0x25a>
 80521bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80521be:	2b2e      	cmp	r3, #46	@ 0x2e
 80521c0:	d10a      	bne.n	80521d8 <create_name+0x268>
 80521c2:	69ba      	ldr	r2, [r7, #24]
 80521c4:	697b      	ldr	r3, [r7, #20]
 80521c6:	429a      	cmp	r2, r3
 80521c8:	d006      	beq.n	80521d8 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 80521ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80521ce:	f043 0303 	orr.w	r3, r3, #3
 80521d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 80521d6:	e0a4      	b.n	8052322 <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 80521d8:	6a3a      	ldr	r2, [r7, #32]
 80521da:	69fb      	ldr	r3, [r7, #28]
 80521dc:	429a      	cmp	r2, r3
 80521de:	d203      	bcs.n	80521e8 <create_name+0x278>
 80521e0:	69ba      	ldr	r2, [r7, #24]
 80521e2:	697b      	ldr	r3, [r7, #20]
 80521e4:	429a      	cmp	r2, r3
 80521e6:	d129      	bne.n	805223c <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 80521e8:	69fb      	ldr	r3, [r7, #28]
 80521ea:	2b0b      	cmp	r3, #11
 80521ec:	d106      	bne.n	80521fc <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 80521ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80521f2:	f043 0303 	orr.w	r3, r3, #3
 80521f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 80521fa:	e096      	b.n	805232a <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 80521fc:	69ba      	ldr	r2, [r7, #24]
 80521fe:	697b      	ldr	r3, [r7, #20]
 8052200:	429a      	cmp	r2, r3
 8052202:	d005      	beq.n	8052210 <create_name+0x2a0>
 8052204:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052208:	f043 0303 	orr.w	r3, r3, #3
 805220c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 8052210:	69ba      	ldr	r2, [r7, #24]
 8052212:	697b      	ldr	r3, [r7, #20]
 8052214:	429a      	cmp	r2, r3
 8052216:	f200 8087 	bhi.w	8052328 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 805221a:	697b      	ldr	r3, [r7, #20]
 805221c:	61bb      	str	r3, [r7, #24]
 805221e:	2308      	movs	r3, #8
 8052220:	623b      	str	r3, [r7, #32]
 8052222:	230b      	movs	r3, #11
 8052224:	61fb      	str	r3, [r7, #28]
 8052226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 805222a:	009b      	lsls	r3, r3, #2
 805222c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 8052230:	e077      	b.n	8052322 <create_name+0x3b2>
 8052232:	bf00      	nop
 8052234:	080709d4 	.word	0x080709d4
 8052238:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 805223c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 805223e:	2b7f      	cmp	r3, #127	@ 0x7f
 8052240:	d918      	bls.n	8052274 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8052242:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052246:	f043 0302 	orr.w	r3, r3, #2
 805224a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 805224e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8052250:	f240 3152 	movw	r1, #850	@ 0x352
 8052254:	4618      	mov	r0, r3
 8052256:	f002 fc69 	bl	8054b2c <ff_uni2oem>
 805225a:	4603      	mov	r3, r0
 805225c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 805225e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8052260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8052264:	2b00      	cmp	r3, #0
 8052266:	d005      	beq.n	8052274 <create_name+0x304>
 8052268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 805226a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 805226e:	4a54      	ldr	r2, [pc, #336]	@ (80523c0 <create_name+0x450>)
 8052270:	5cd3      	ldrb	r3, [r2, r3]
 8052272:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8052274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8052276:	2bff      	cmp	r3, #255	@ 0xff
 8052278:	d91a      	bls.n	80522b0 <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 805227a:	69fb      	ldr	r3, [r7, #28]
 805227c:	3b01      	subs	r3, #1
 805227e:	6a3a      	ldr	r2, [r7, #32]
 8052280:	429a      	cmp	r2, r3
 8052282:	d308      	bcc.n	8052296 <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 8052284:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052288:	f043 0303 	orr.w	r3, r3, #3
 805228c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 8052290:	69fb      	ldr	r3, [r7, #28]
 8052292:	623b      	str	r3, [r7, #32]
 8052294:	e045      	b.n	8052322 <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8052296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8052298:	0a1b      	lsrs	r3, r3, #8
 805229a:	b299      	uxth	r1, r3
 805229c:	6a3b      	ldr	r3, [r7, #32]
 805229e:	1c5a      	adds	r2, r3, #1
 80522a0:	623a      	str	r2, [r7, #32]
 80522a2:	b2c9      	uxtb	r1, r1
 80522a4:	687a      	ldr	r2, [r7, #4]
 80522a6:	4413      	add	r3, r2
 80522a8:	460a      	mov	r2, r1
 80522aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80522ae:	e02e      	b.n	805230e <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 80522b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522b2:	2b00      	cmp	r3, #0
 80522b4:	d007      	beq.n	80522c6 <create_name+0x356>
 80522b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522b8:	4619      	mov	r1, r3
 80522ba:	4842      	ldr	r0, [pc, #264]	@ (80523c4 <create_name+0x454>)
 80522bc:	f017 faa9 	bl	8069812 <strchr>
 80522c0:	4603      	mov	r3, r0
 80522c2:	2b00      	cmp	r3, #0
 80522c4:	d008      	beq.n	80522d8 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80522c6:	235f      	movs	r3, #95	@ 0x5f
 80522c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80522ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80522ce:	f043 0303 	orr.w	r3, r3, #3
 80522d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80522d6:	e01a      	b.n	805230e <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 80522d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522da:	2b40      	cmp	r3, #64	@ 0x40
 80522dc:	d908      	bls.n	80522f0 <create_name+0x380>
 80522de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522e0:	2b5a      	cmp	r3, #90	@ 0x5a
 80522e2:	d805      	bhi.n	80522f0 <create_name+0x380>
					b |= 2;
 80522e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80522e8:	f043 0302 	orr.w	r3, r3, #2
 80522ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 80522f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522f2:	2b60      	cmp	r3, #96	@ 0x60
 80522f4:	d90b      	bls.n	805230e <create_name+0x39e>
 80522f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80522f8:	2b7a      	cmp	r3, #122	@ 0x7a
 80522fa:	d808      	bhi.n	805230e <create_name+0x39e>
					b |= 1; wc -= 0x20;
 80522fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8052300:	f043 0301 	orr.w	r3, r3, #1
 8052304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8052308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 805230a:	3b20      	subs	r3, #32
 805230c:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 805230e:	6a3b      	ldr	r3, [r7, #32]
 8052310:	1c5a      	adds	r2, r3, #1
 8052312:	623a      	str	r2, [r7, #32]
 8052314:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8052316:	b2d1      	uxtb	r1, r2
 8052318:	687a      	ldr	r2, [r7, #4]
 805231a:	4413      	add	r3, r2
 805231c:	460a      	mov	r2, r1
 805231e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8052322:	e73c      	b.n	805219e <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8052324:	bf00      	nop
 8052326:	e000      	b.n	805232a <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 8052328:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 805232a:	687b      	ldr	r3, [r7, #4]
 805232c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8052330:	2be5      	cmp	r3, #229	@ 0xe5
 8052332:	d103      	bne.n	805233c <create_name+0x3cc>
 8052334:	687b      	ldr	r3, [r7, #4]
 8052336:	2205      	movs	r2, #5
 8052338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 805233c:	69fb      	ldr	r3, [r7, #28]
 805233e:	2b08      	cmp	r3, #8
 8052340:	d104      	bne.n	805234c <create_name+0x3dc>
 8052342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8052346:	009b      	lsls	r3, r3, #2
 8052348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 805234c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8052350:	f003 030c 	and.w	r3, r3, #12
 8052354:	2b0c      	cmp	r3, #12
 8052356:	d005      	beq.n	8052364 <create_name+0x3f4>
 8052358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 805235c:	f003 0303 	and.w	r3, r3, #3
 8052360:	2b03      	cmp	r3, #3
 8052362:	d105      	bne.n	8052370 <create_name+0x400>
 8052364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052368:	f043 0302 	orr.w	r3, r3, #2
 805236c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8052370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8052374:	f003 0302 	and.w	r3, r3, #2
 8052378:	2b00      	cmp	r3, #0
 805237a:	d117      	bne.n	80523ac <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 805237c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8052380:	f003 0301 	and.w	r3, r3, #1
 8052384:	2b00      	cmp	r3, #0
 8052386:	d005      	beq.n	8052394 <create_name+0x424>
 8052388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 805238c:	f043 0310 	orr.w	r3, r3, #16
 8052390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8052394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8052398:	f003 0304 	and.w	r3, r3, #4
 805239c:	2b00      	cmp	r3, #0
 805239e:	d005      	beq.n	80523ac <create_name+0x43c>
 80523a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80523a4:	f043 0308 	orr.w	r3, r3, #8
 80523a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80523ac:	687b      	ldr	r3, [r7, #4]
 80523ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80523b2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 80523b6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 80523b8:	4618      	mov	r0, r3
 80523ba:	3728      	adds	r7, #40	@ 0x28
 80523bc:	46bd      	mov	sp, r7
 80523be:	bd80      	pop	{r7, pc}
 80523c0:	08071df8 	.word	0x08071df8
 80523c4:	080709e0 	.word	0x080709e0

080523c8 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80523c8:	b5b0      	push	{r4, r5, r7, lr}
 80523ca:	b09a      	sub	sp, #104	@ 0x68
 80523cc:	af00      	add	r7, sp, #0
 80523ce:	6078      	str	r0, [r7, #4]
 80523d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80523d2:	687b      	ldr	r3, [r7, #4]
 80523d4:	681b      	ldr	r3, [r3, #0]
 80523d6:	663b      	str	r3, [r7, #96]	@ 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 80523d8:	683b      	ldr	r3, [r7, #0]
 80523da:	781b      	ldrb	r3, [r3, #0]
 80523dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80523de:	d00b      	beq.n	80523f8 <follow_path+0x30>
 80523e0:	683b      	ldr	r3, [r7, #0]
 80523e2:	781b      	ldrb	r3, [r3, #0]
 80523e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80523e6:	d007      	beq.n	80523f8 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 80523e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80523ea:	69da      	ldr	r2, [r3, #28]
 80523ec:	687b      	ldr	r3, [r7, #4]
 80523ee:	609a      	str	r2, [r3, #8]
 80523f0:	e00d      	b.n	805240e <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80523f2:	683b      	ldr	r3, [r7, #0]
 80523f4:	3301      	adds	r3, #1
 80523f6:	603b      	str	r3, [r7, #0]
 80523f8:	683b      	ldr	r3, [r7, #0]
 80523fa:	781b      	ldrb	r3, [r3, #0]
 80523fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80523fe:	d0f8      	beq.n	80523f2 <follow_path+0x2a>
 8052400:	683b      	ldr	r3, [r7, #0]
 8052402:	781b      	ldrb	r3, [r3, #0]
 8052404:	2b5c      	cmp	r3, #92	@ 0x5c
 8052406:	d0f4      	beq.n	80523f2 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8052408:	687b      	ldr	r3, [r7, #4]
 805240a:	2200      	movs	r2, #0
 805240c:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 805240e:	687b      	ldr	r3, [r7, #4]
 8052410:	2200      	movs	r2, #0
 8052412:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 8052414:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052416:	781b      	ldrb	r3, [r3, #0]
 8052418:	2b04      	cmp	r3, #4
 805241a:	d136      	bne.n	805248a <follow_path+0xc2>
 805241c:	687b      	ldr	r3, [r7, #4]
 805241e:	689b      	ldr	r3, [r3, #8]
 8052420:	2b00      	cmp	r3, #0
 8052422:	d032      	beq.n	805248a <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 8052424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052426:	6a1a      	ldr	r2, [r3, #32]
 8052428:	687b      	ldr	r3, [r7, #4]
 805242a:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 805242c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 805242e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8052430:	687b      	ldr	r3, [r7, #4]
 8052432:	625a      	str	r2, [r3, #36]	@ 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 8052434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8052438:	687b      	ldr	r3, [r7, #4]
 805243a:	629a      	str	r2, [r3, #40]	@ 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 805243c:	687a      	ldr	r2, [r7, #4]
 805243e:	f107 0308 	add.w	r3, r7, #8
 8052442:	4611      	mov	r1, r2
 8052444:	4618      	mov	r0, r3
 8052446:	f7fe ff28 	bl	805129a <load_obj_xdir>
 805244a:	4603      	mov	r3, r0
 805244c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		if (res != FR_OK) return res;
 8052450:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8052454:	2b00      	cmp	r3, #0
 8052456:	d002      	beq.n	805245e <follow_path+0x96>
 8052458:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 805245c:	e0a8      	b.n	80525b0 <follow_path+0x1e8>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 805245e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052460:	691b      	ldr	r3, [r3, #16]
 8052462:	3338      	adds	r3, #56	@ 0x38
 8052464:	4618      	mov	r0, r3
 8052466:	f7fc fec9 	bl	804f1fc <ld_dword>
 805246a:	4603      	mov	r3, r0
 805246c:	2200      	movs	r2, #0
 805246e:	461c      	mov	r4, r3
 8052470:	4615      	mov	r5, r2
 8052472:	687b      	ldr	r3, [r7, #4]
 8052474:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8052478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 805247a:	691b      	ldr	r3, [r3, #16]
 805247c:	3321      	adds	r3, #33	@ 0x21
 805247e:	781b      	ldrb	r3, [r3, #0]
 8052480:	f003 0302 	and.w	r3, r3, #2
 8052484:	b2da      	uxtb	r2, r3
 8052486:	687b      	ldr	r3, [r7, #4]
 8052488:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 805248a:	683b      	ldr	r3, [r7, #0]
 805248c:	781b      	ldrb	r3, [r3, #0]
 805248e:	2b1f      	cmp	r3, #31
 8052490:	d80b      	bhi.n	80524aa <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 8052492:	687b      	ldr	r3, [r7, #4]
 8052494:	2280      	movs	r2, #128	@ 0x80
 8052496:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 805249a:	2100      	movs	r1, #0
 805249c:	6878      	ldr	r0, [r7, #4]
 805249e:	f7fe f9e0 	bl	8050862 <dir_sdi>
 80524a2:	4603      	mov	r3, r0
 80524a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80524a8:	e080      	b.n	80525ac <follow_path+0x1e4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80524aa:	463b      	mov	r3, r7
 80524ac:	4619      	mov	r1, r3
 80524ae:	6878      	ldr	r0, [r7, #4]
 80524b0:	f7ff fd5e 	bl	8051f70 <create_name>
 80524b4:	4603      	mov	r3, r0
 80524b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			if (res != FR_OK) break;
 80524ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80524be:	2b00      	cmp	r3, #0
 80524c0:	d16f      	bne.n	80525a2 <follow_path+0x1da>
			res = dir_find(dp);				/* Find an object with the segment name */
 80524c2:	6878      	ldr	r0, [r7, #4]
 80524c4:	f7ff f8b4 	bl	8051630 <dir_find>
 80524c8:	4603      	mov	r3, r0
 80524ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			ns = dp->fn[NSFLAG];
 80524ce:	687b      	ldr	r3, [r7, #4]
 80524d0:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80524d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 80524d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80524dc:	2b00      	cmp	r3, #0
 80524de:	d021      	beq.n	8052524 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80524e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80524e4:	2b04      	cmp	r3, #4
 80524e6:	d15e      	bne.n	80525a6 <follow_path+0x1de>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80524e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80524ec:	f003 0320 	and.w	r3, r3, #32
 80524f0:	2b00      	cmp	r3, #0
 80524f2:	d00d      	beq.n	8052510 <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80524f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80524f8:	f003 0304 	and.w	r3, r3, #4
 80524fc:	2b00      	cmp	r3, #0
 80524fe:	d04e      	beq.n	805259e <follow_path+0x1d6>
						dp->fn[NSFLAG] = NS_NONAME;
 8052500:	687b      	ldr	r3, [r7, #4]
 8052502:	2280      	movs	r2, #128	@ 0x80
 8052504:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
						res = FR_OK;
 8052508:	2300      	movs	r3, #0
 805250a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 805250e:	e04a      	b.n	80525a6 <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8052510:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8052514:	f003 0304 	and.w	r3, r3, #4
 8052518:	2b00      	cmp	r3, #0
 805251a:	d144      	bne.n	80525a6 <follow_path+0x1de>
 805251c:	2305      	movs	r3, #5
 805251e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				break;
 8052522:	e040      	b.n	80525a6 <follow_path+0x1de>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8052524:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8052528:	f003 0304 	and.w	r3, r3, #4
 805252c:	2b00      	cmp	r3, #0
 805252e:	d13c      	bne.n	80525aa <follow_path+0x1e2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8052530:	687b      	ldr	r3, [r7, #4]
 8052532:	799b      	ldrb	r3, [r3, #6]
 8052534:	f003 0310 	and.w	r3, r3, #16
 8052538:	2b00      	cmp	r3, #0
 805253a:	d103      	bne.n	8052544 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 805253c:	2305      	movs	r3, #5
 805253e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8052542:	e033      	b.n	80525ac <follow_path+0x1e4>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8052544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052546:	781b      	ldrb	r3, [r3, #0]
 8052548:	2b04      	cmp	r3, #4
 805254a:	d118      	bne.n	805257e <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 805254c:	687b      	ldr	r3, [r7, #4]
 805254e:	689a      	ldr	r2, [r3, #8]
 8052550:	687b      	ldr	r3, [r7, #4]
 8052552:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8052554:	687b      	ldr	r3, [r7, #4]
 8052556:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 805255a:	4613      	mov	r3, r2
 805255c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8052560:	687a      	ldr	r2, [r7, #4]
 8052562:	79d2      	ldrb	r2, [r2, #7]
 8052564:	431a      	orrs	r2, r3
 8052566:	687b      	ldr	r3, [r7, #4]
 8052568:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 805256a:	687b      	ldr	r3, [r7, #4]
 805256c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 805256e:	687b      	ldr	r3, [r7, #4]
 8052570:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8052572:	687b      	ldr	r3, [r7, #4]
 8052574:	4619      	mov	r1, r3
 8052576:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8052578:	f7fe fe66 	bl	8051248 <init_alloc_info>
 805257c:	e795      	b.n	80524aa <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 805257e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052580:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8052584:	687b      	ldr	r3, [r7, #4]
 8052586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8052588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 805258c:	4413      	add	r3, r2
 805258e:	4619      	mov	r1, r3
 8052590:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8052592:	f7fe faed 	bl	8050b70 <ld_clust>
 8052596:	4602      	mov	r2, r0
 8052598:	687b      	ldr	r3, [r7, #4]
 805259a:	609a      	str	r2, [r3, #8]
 805259c:	e785      	b.n	80524aa <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 805259e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80525a0:	e783      	b.n	80524aa <follow_path+0xe2>
			if (res != FR_OK) break;
 80525a2:	bf00      	nop
 80525a4:	e002      	b.n	80525ac <follow_path+0x1e4>
				break;
 80525a6:	bf00      	nop
 80525a8:	e000      	b.n	80525ac <follow_path+0x1e4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80525aa:	bf00      	nop
			}
		}
	}

	return res;
 80525ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80525b0:	4618      	mov	r0, r3
 80525b2:	3768      	adds	r7, #104	@ 0x68
 80525b4:	46bd      	mov	sp, r7
 80525b6:	bdb0      	pop	{r4, r5, r7, pc}

080525b8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80525b8:	b480      	push	{r7}
 80525ba:	b089      	sub	sp, #36	@ 0x24
 80525bc:	af00      	add	r7, sp, #0
 80525be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80525c0:	f04f 33ff 	mov.w	r3, #4294967295
 80525c4:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80525c6:	687b      	ldr	r3, [r7, #4]
 80525c8:	681b      	ldr	r3, [r3, #0]
 80525ca:	613b      	str	r3, [r7, #16]
 80525cc:	693b      	ldr	r3, [r7, #16]
 80525ce:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80525d0:	693b      	ldr	r3, [r7, #16]
 80525d2:	2b00      	cmp	r3, #0
 80525d4:	d101      	bne.n	80525da <get_ldnumber+0x22>
 80525d6:	697b      	ldr	r3, [r7, #20]
 80525d8:	e02e      	b.n	8052638 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80525da:	69fb      	ldr	r3, [r7, #28]
 80525dc:	1c5a      	adds	r2, r3, #1
 80525de:	61fa      	str	r2, [r7, #28]
 80525e0:	781b      	ldrb	r3, [r3, #0]
 80525e2:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 80525e4:	7bfb      	ldrb	r3, [r7, #15]
 80525e6:	2b1f      	cmp	r3, #31
 80525e8:	d902      	bls.n	80525f0 <get_ldnumber+0x38>
 80525ea:	7bfb      	ldrb	r3, [r7, #15]
 80525ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80525ee:	d1f4      	bne.n	80525da <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80525f0:	7bfb      	ldrb	r3, [r7, #15]
 80525f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80525f4:	d11c      	bne.n	8052630 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80525f6:	2301      	movs	r3, #1
 80525f8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80525fa:	693b      	ldr	r3, [r7, #16]
 80525fc:	781b      	ldrb	r3, [r3, #0]
 80525fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8052600:	d90c      	bls.n	805261c <get_ldnumber+0x64>
 8052602:	693b      	ldr	r3, [r7, #16]
 8052604:	781b      	ldrb	r3, [r3, #0]
 8052606:	2b39      	cmp	r3, #57	@ 0x39
 8052608:	d808      	bhi.n	805261c <get_ldnumber+0x64>
 805260a:	693b      	ldr	r3, [r7, #16]
 805260c:	3302      	adds	r3, #2
 805260e:	69fa      	ldr	r2, [r7, #28]
 8052610:	429a      	cmp	r2, r3
 8052612:	d103      	bne.n	805261c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8052614:	693b      	ldr	r3, [r7, #16]
 8052616:	781b      	ldrb	r3, [r3, #0]
 8052618:	3b30      	subs	r3, #48	@ 0x30
 805261a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 805261c:	69bb      	ldr	r3, [r7, #24]
 805261e:	2b00      	cmp	r3, #0
 8052620:	dc04      	bgt.n	805262c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8052622:	69bb      	ldr	r3, [r7, #24]
 8052624:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8052626:	687b      	ldr	r3, [r7, #4]
 8052628:	69fa      	ldr	r2, [r7, #28]
 805262a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 805262c:	697b      	ldr	r3, [r7, #20]
 805262e:	e003      	b.n	8052638 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8052630:	4b04      	ldr	r3, [pc, #16]	@ (8052644 <get_ldnumber+0x8c>)
 8052632:	781b      	ldrb	r3, [r3, #0]
 8052634:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8052636:	697b      	ldr	r3, [r7, #20]
}
 8052638:	4618      	mov	r0, r3
 805263a:	3724      	adds	r7, #36	@ 0x24
 805263c:	46bd      	mov	sp, r7
 805263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8052642:	4770      	bx	lr
 8052644:	2402d74a 	.word	0x2402d74a

08052648 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8052648:	b580      	push	{r7, lr}
 805264a:	b084      	sub	sp, #16
 805264c:	af00      	add	r7, sp, #0
 805264e:	6078      	str	r0, [r7, #4]
 8052650:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8052652:	687b      	ldr	r3, [r7, #4]
 8052654:	2200      	movs	r2, #0
 8052656:	711a      	strb	r2, [r3, #4]
 8052658:	687b      	ldr	r3, [r7, #4]
 805265a:	f04f 32ff 	mov.w	r2, #4294967295
 805265e:	649a      	str	r2, [r3, #72]	@ 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8052660:	6839      	ldr	r1, [r7, #0]
 8052662:	6878      	ldr	r0, [r7, #4]
 8052664:	f7fd fa3e 	bl	804fae4 <move_window>
 8052668:	4603      	mov	r3, r0
 805266a:	2b00      	cmp	r3, #0
 805266c:	d001      	beq.n	8052672 <check_fs+0x2a>
 805266e:	2304      	movs	r3, #4
 8052670:	e099      	b.n	80527a6 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 8052672:	687b      	ldr	r3, [r7, #4]
 8052674:	334c      	adds	r3, #76	@ 0x4c
 8052676:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 805267a:	4618      	mov	r0, r3
 805267c:	f7fc fda5 	bl	804f1ca <ld_word>
 8052680:	4603      	mov	r3, r0
 8052682:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8052684:	89fb      	ldrh	r3, [r7, #14]
 8052686:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 805268a:	4293      	cmp	r3, r2
 805268c:	d10b      	bne.n	80526a6 <check_fs+0x5e>
 805268e:	687b      	ldr	r3, [r7, #4]
 8052690:	334c      	adds	r3, #76	@ 0x4c
 8052692:	220b      	movs	r2, #11
 8052694:	4946      	ldr	r1, [pc, #280]	@ (80527b0 <check_fs+0x168>)
 8052696:	4618      	mov	r0, r3
 8052698:	f017 f87a 	bl	8069790 <memcmp>
 805269c:	4603      	mov	r3, r0
 805269e:	2b00      	cmp	r3, #0
 80526a0:	d101      	bne.n	80526a6 <check_fs+0x5e>
 80526a2:	2301      	movs	r3, #1
 80526a4:	e07f      	b.n	80527a6 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 80526a6:	687b      	ldr	r3, [r7, #4]
 80526a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80526ac:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80526ae:	7b7b      	ldrb	r3, [r7, #13]
 80526b0:	2beb      	cmp	r3, #235	@ 0xeb
 80526b2:	d005      	beq.n	80526c0 <check_fs+0x78>
 80526b4:	7b7b      	ldrb	r3, [r7, #13]
 80526b6:	2be9      	cmp	r3, #233	@ 0xe9
 80526b8:	d002      	beq.n	80526c0 <check_fs+0x78>
 80526ba:	7b7b      	ldrb	r3, [r7, #13]
 80526bc:	2be8      	cmp	r3, #232	@ 0xe8
 80526be:	d16a      	bne.n	8052796 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80526c0:	89fb      	ldrh	r3, [r7, #14]
 80526c2:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80526c6:	4293      	cmp	r3, r2
 80526c8:	d10c      	bne.n	80526e4 <check_fs+0x9c>
 80526ca:	687b      	ldr	r3, [r7, #4]
 80526cc:	334c      	adds	r3, #76	@ 0x4c
 80526ce:	3352      	adds	r3, #82	@ 0x52
 80526d0:	2208      	movs	r2, #8
 80526d2:	4938      	ldr	r1, [pc, #224]	@ (80527b4 <check_fs+0x16c>)
 80526d4:	4618      	mov	r0, r3
 80526d6:	f017 f85b 	bl	8069790 <memcmp>
 80526da:	4603      	mov	r3, r0
 80526dc:	2b00      	cmp	r3, #0
 80526de:	d101      	bne.n	80526e4 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 80526e0:	2300      	movs	r3, #0
 80526e2:	e060      	b.n	80527a6 <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80526e4:	687b      	ldr	r3, [r7, #4]
 80526e6:	334c      	adds	r3, #76	@ 0x4c
 80526e8:	330b      	adds	r3, #11
 80526ea:	4618      	mov	r0, r3
 80526ec:	f7fc fd6d 	bl	804f1ca <ld_word>
 80526f0:	4603      	mov	r3, r0
 80526f2:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80526f4:	687b      	ldr	r3, [r7, #4]
 80526f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80526fa:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80526fc:	897a      	ldrh	r2, [r7, #10]
 80526fe:	897b      	ldrh	r3, [r7, #10]
 8052700:	3b01      	subs	r3, #1
 8052702:	4013      	ands	r3, r2
 8052704:	2b00      	cmp	r3, #0
 8052706:	d146      	bne.n	8052796 <check_fs+0x14e>
 8052708:	897b      	ldrh	r3, [r7, #10]
 805270a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 805270e:	d342      	bcc.n	8052796 <check_fs+0x14e>
 8052710:	897b      	ldrh	r3, [r7, #10]
 8052712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8052716:	d83e      	bhi.n	8052796 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8052718:	7b7b      	ldrb	r3, [r7, #13]
 805271a:	2b00      	cmp	r3, #0
 805271c:	d03b      	beq.n	8052796 <check_fs+0x14e>
 805271e:	7b7a      	ldrb	r2, [r7, #13]
 8052720:	7b7b      	ldrb	r3, [r7, #13]
 8052722:	3b01      	subs	r3, #1
 8052724:	4013      	ands	r3, r2
 8052726:	2b00      	cmp	r3, #0
 8052728:	d135      	bne.n	8052796 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 805272a:	687b      	ldr	r3, [r7, #4]
 805272c:	334c      	adds	r3, #76	@ 0x4c
 805272e:	330e      	adds	r3, #14
 8052730:	4618      	mov	r0, r3
 8052732:	f7fc fd4a 	bl	804f1ca <ld_word>
 8052736:	4603      	mov	r3, r0
 8052738:	2b00      	cmp	r3, #0
 805273a:	d02c      	beq.n	8052796 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 805273c:	687b      	ldr	r3, [r7, #4]
 805273e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8052742:	3b01      	subs	r3, #1
 8052744:	2b01      	cmp	r3, #1
 8052746:	d826      	bhi.n	8052796 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8052748:	687b      	ldr	r3, [r7, #4]
 805274a:	334c      	adds	r3, #76	@ 0x4c
 805274c:	3311      	adds	r3, #17
 805274e:	4618      	mov	r0, r3
 8052750:	f7fc fd3b 	bl	804f1ca <ld_word>
 8052754:	4603      	mov	r3, r0
 8052756:	2b00      	cmp	r3, #0
 8052758:	d01d      	beq.n	8052796 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 805275a:	687b      	ldr	r3, [r7, #4]
 805275c:	334c      	adds	r3, #76	@ 0x4c
 805275e:	3313      	adds	r3, #19
 8052760:	4618      	mov	r0, r3
 8052762:	f7fc fd32 	bl	804f1ca <ld_word>
 8052766:	4603      	mov	r3, r0
 8052768:	2b7f      	cmp	r3, #127	@ 0x7f
 805276a:	d809      	bhi.n	8052780 <check_fs+0x138>
 805276c:	687b      	ldr	r3, [r7, #4]
 805276e:	334c      	adds	r3, #76	@ 0x4c
 8052770:	3320      	adds	r3, #32
 8052772:	4618      	mov	r0, r3
 8052774:	f7fc fd42 	bl	804f1fc <ld_dword>
 8052778:	4603      	mov	r3, r0
 805277a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 805277e:	d30a      	bcc.n	8052796 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8052780:	687b      	ldr	r3, [r7, #4]
 8052782:	334c      	adds	r3, #76	@ 0x4c
 8052784:	3316      	adds	r3, #22
 8052786:	4618      	mov	r0, r3
 8052788:	f7fc fd1f 	bl	804f1ca <ld_word>
 805278c:	4603      	mov	r3, r0
 805278e:	2b00      	cmp	r3, #0
 8052790:	d001      	beq.n	8052796 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 8052792:	2300      	movs	r3, #0
 8052794:	e007      	b.n	80527a6 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8052796:	89fb      	ldrh	r3, [r7, #14]
 8052798:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 805279c:	4293      	cmp	r3, r2
 805279e:	d101      	bne.n	80527a4 <check_fs+0x15c>
 80527a0:	2302      	movs	r3, #2
 80527a2:	e000      	b.n	80527a6 <check_fs+0x15e>
 80527a4:	2303      	movs	r3, #3
}
 80527a6:	4618      	mov	r0, r3
 80527a8:	3710      	adds	r7, #16
 80527aa:	46bd      	mov	sp, r7
 80527ac:	bd80      	pop	{r7, pc}
 80527ae:	bf00      	nop
 80527b0:	080709e8 	.word	0x080709e8
 80527b4:	080709f4 	.word	0x080709f4

080527b8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80527b8:	b580      	push	{r7, lr}
 80527ba:	b088      	sub	sp, #32
 80527bc:	af00      	add	r7, sp, #0
 80527be:	6078      	str	r0, [r7, #4]
 80527c0:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80527c2:	2100      	movs	r1, #0
 80527c4:	6878      	ldr	r0, [r7, #4]
 80527c6:	f7ff ff3f 	bl	8052648 <check_fs>
 80527ca:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80527cc:	69bb      	ldr	r3, [r7, #24]
 80527ce:	2b02      	cmp	r3, #2
 80527d0:	d007      	beq.n	80527e2 <find_volume+0x2a>
 80527d2:	69bb      	ldr	r3, [r7, #24]
 80527d4:	2b02      	cmp	r3, #2
 80527d6:	d802      	bhi.n	80527de <find_volume+0x26>
 80527d8:	683b      	ldr	r3, [r7, #0]
 80527da:	2b00      	cmp	r3, #0
 80527dc:	d101      	bne.n	80527e2 <find_volume+0x2a>
 80527de:	69bb      	ldr	r3, [r7, #24]
 80527e0:	e045      	b.n	805286e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80527e2:	2300      	movs	r3, #0
 80527e4:	61fb      	str	r3, [r7, #28]
 80527e6:	e014      	b.n	8052812 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80527e8:	687b      	ldr	r3, [r7, #4]
 80527ea:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80527ee:	69fb      	ldr	r3, [r7, #28]
 80527f0:	011b      	lsls	r3, r3, #4
 80527f2:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 80527f6:	4413      	add	r3, r2
 80527f8:	4618      	mov	r0, r3
 80527fa:	f7fc fcff 	bl	804f1fc <ld_dword>
 80527fe:	4602      	mov	r2, r0
 8052800:	69fb      	ldr	r3, [r7, #28]
 8052802:	009b      	lsls	r3, r3, #2
 8052804:	3320      	adds	r3, #32
 8052806:	443b      	add	r3, r7
 8052808:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 805280c:	69fb      	ldr	r3, [r7, #28]
 805280e:	3301      	adds	r3, #1
 8052810:	61fb      	str	r3, [r7, #28]
 8052812:	69fb      	ldr	r3, [r7, #28]
 8052814:	2b03      	cmp	r3, #3
 8052816:	d9e7      	bls.n	80527e8 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8052818:	683b      	ldr	r3, [r7, #0]
 805281a:	2b00      	cmp	r3, #0
 805281c:	d002      	beq.n	8052824 <find_volume+0x6c>
 805281e:	683b      	ldr	r3, [r7, #0]
 8052820:	3b01      	subs	r3, #1
 8052822:	e000      	b.n	8052826 <find_volume+0x6e>
 8052824:	2300      	movs	r3, #0
 8052826:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8052828:	69fb      	ldr	r3, [r7, #28]
 805282a:	009b      	lsls	r3, r3, #2
 805282c:	3320      	adds	r3, #32
 805282e:	443b      	add	r3, r7
 8052830:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8052834:	2b00      	cmp	r3, #0
 8052836:	d00b      	beq.n	8052850 <find_volume+0x98>
 8052838:	69fb      	ldr	r3, [r7, #28]
 805283a:	009b      	lsls	r3, r3, #2
 805283c:	3320      	adds	r3, #32
 805283e:	443b      	add	r3, r7
 8052840:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8052844:	4619      	mov	r1, r3
 8052846:	6878      	ldr	r0, [r7, #4]
 8052848:	f7ff fefe 	bl	8052648 <check_fs>
 805284c:	4603      	mov	r3, r0
 805284e:	e000      	b.n	8052852 <find_volume+0x9a>
 8052850:	2303      	movs	r3, #3
 8052852:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8052854:	683b      	ldr	r3, [r7, #0]
 8052856:	2b00      	cmp	r3, #0
 8052858:	d108      	bne.n	805286c <find_volume+0xb4>
 805285a:	69bb      	ldr	r3, [r7, #24]
 805285c:	2b01      	cmp	r3, #1
 805285e:	d905      	bls.n	805286c <find_volume+0xb4>
 8052860:	69fb      	ldr	r3, [r7, #28]
 8052862:	3301      	adds	r3, #1
 8052864:	61fb      	str	r3, [r7, #28]
 8052866:	69fb      	ldr	r3, [r7, #28]
 8052868:	2b03      	cmp	r3, #3
 805286a:	d9dd      	bls.n	8052828 <find_volume+0x70>
	return fmt;
 805286c:	69bb      	ldr	r3, [r7, #24]
}
 805286e:	4618      	mov	r0, r3
 8052870:	3720      	adds	r7, #32
 8052872:	46bd      	mov	sp, r7
 8052874:	bd80      	pop	{r7, pc}
	...

08052878 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8052878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 805287c:	b09a      	sub	sp, #104	@ 0x68
 805287e:	af00      	add	r7, sp, #0
 8052880:	61f8      	str	r0, [r7, #28]
 8052882:	61b9      	str	r1, [r7, #24]
 8052884:	4613      	mov	r3, r2
 8052886:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8052888:	69bb      	ldr	r3, [r7, #24]
 805288a:	2200      	movs	r2, #0
 805288c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 805288e:	69f8      	ldr	r0, [r7, #28]
 8052890:	f7ff fe92 	bl	80525b8 <get_ldnumber>
 8052894:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 8052896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8052898:	2b00      	cmp	r3, #0
 805289a:	da01      	bge.n	80528a0 <mount_volume+0x28>
 805289c:	230b      	movs	r3, #11
 805289e:	e327      	b.n	8052ef0 <mount_volume+0x678>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80528a0:	4aa0      	ldr	r2, [pc, #640]	@ (8052b24 <mount_volume+0x2ac>)
 80528a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80528a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80528a8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80528aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80528ac:	2b00      	cmp	r3, #0
 80528ae:	d101      	bne.n	80528b4 <mount_volume+0x3c>
 80528b0:	230c      	movs	r3, #12
 80528b2:	e31d      	b.n	8052ef0 <mount_volume+0x678>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
 80528b4:	2101      	movs	r1, #1
 80528b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80528b8:	f7fc ff0c 	bl	804f6d4 <lock_volume>
 80528bc:	4603      	mov	r3, r0
 80528be:	2b00      	cmp	r3, #0
 80528c0:	d101      	bne.n	80528c6 <mount_volume+0x4e>
 80528c2:	230f      	movs	r3, #15
 80528c4:	e314      	b.n	8052ef0 <mount_volume+0x678>
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80528c6:	69bb      	ldr	r3, [r7, #24]
 80528c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80528ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80528cc:	7dfb      	ldrb	r3, [r7, #23]
 80528ce:	f023 0301 	bic.w	r3, r3, #1
 80528d2:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80528d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80528d6:	781b      	ldrb	r3, [r3, #0]
 80528d8:	2b00      	cmp	r3, #0
 80528da:	d01a      	beq.n	8052912 <mount_volume+0x9a>
		stat = disk_status(fs->pdrv);
 80528dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80528de:	785b      	ldrb	r3, [r3, #1]
 80528e0:	4618      	mov	r0, r3
 80528e2:	f7fc fbc7 	bl	804f074 <disk_status>
 80528e6:	4603      	mov	r3, r0
 80528e8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80528ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80528f0:	f003 0301 	and.w	r3, r3, #1
 80528f4:	2b00      	cmp	r3, #0
 80528f6:	d10c      	bne.n	8052912 <mount_volume+0x9a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80528f8:	7dfb      	ldrb	r3, [r7, #23]
 80528fa:	2b00      	cmp	r3, #0
 80528fc:	d007      	beq.n	805290e <mount_volume+0x96>
 80528fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8052902:	f003 0304 	and.w	r3, r3, #4
 8052906:	2b00      	cmp	r3, #0
 8052908:	d001      	beq.n	805290e <mount_volume+0x96>
				return FR_WRITE_PROTECTED;
 805290a:	230a      	movs	r3, #10
 805290c:	e2f0      	b.n	8052ef0 <mount_volume+0x678>
			}
			return FR_OK;				/* The filesystem object is already valid */
 805290e:	2300      	movs	r3, #0
 8052910:	e2ee      	b.n	8052ef0 <mount_volume+0x678>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8052912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052914:	2200      	movs	r2, #0
 8052916:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8052918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 805291a:	785b      	ldrb	r3, [r3, #1]
 805291c:	4618      	mov	r0, r3
 805291e:	f7fc fbc4 	bl	804f0aa <disk_initialize>
 8052922:	4603      	mov	r3, r0
 8052924:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8052928:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 805292c:	f003 0301 	and.w	r3, r3, #1
 8052930:	2b00      	cmp	r3, #0
 8052932:	d001      	beq.n	8052938 <mount_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8052934:	2303      	movs	r3, #3
 8052936:	e2db      	b.n	8052ef0 <mount_volume+0x678>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8052938:	7dfb      	ldrb	r3, [r7, #23]
 805293a:	2b00      	cmp	r3, #0
 805293c:	d007      	beq.n	805294e <mount_volume+0xd6>
 805293e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8052942:	f003 0304 	and.w	r3, r3, #4
 8052946:	2b00      	cmp	r3, #0
 8052948:	d001      	beq.n	805294e <mount_volume+0xd6>
		return FR_WRITE_PROTECTED;
 805294a:	230a      	movs	r3, #10
 805294c:	e2d0      	b.n	8052ef0 <mount_volume+0x678>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 805294e:	2100      	movs	r1, #0
 8052950:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052952:	f7ff ff31 	bl	80527b8 <find_volume>
 8052956:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8052958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 805295a:	2b04      	cmp	r3, #4
 805295c:	d101      	bne.n	8052962 <mount_volume+0xea>
 805295e:	2301      	movs	r3, #1
 8052960:	e2c6      	b.n	8052ef0 <mount_volume+0x678>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8052962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052964:	2b01      	cmp	r3, #1
 8052966:	d901      	bls.n	805296c <mount_volume+0xf4>
 8052968:	230d      	movs	r3, #13
 805296a:	e2c1      	b.n	8052ef0 <mount_volume+0x678>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 805296c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 805296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8052970:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8052972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052974:	2b01      	cmp	r3, #1
 8052976:	f040 813d 	bne.w	8052bf4 <mount_volume+0x37c>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 805297a:	230b      	movs	r3, #11
 805297c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 805297e:	e002      	b.n	8052986 <mount_volume+0x10e>
 8052980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052982:	3301      	adds	r3, #1
 8052984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8052986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052988:	2b3f      	cmp	r3, #63	@ 0x3f
 805298a:	d806      	bhi.n	805299a <mount_volume+0x122>
 805298c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 805298e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052990:	4413      	add	r3, r2
 8052992:	334c      	adds	r3, #76	@ 0x4c
 8052994:	781b      	ldrb	r3, [r3, #0]
 8052996:	2b00      	cmp	r3, #0
 8052998:	d0f2      	beq.n	8052980 <mount_volume+0x108>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 805299a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 805299c:	2b3f      	cmp	r3, #63	@ 0x3f
 805299e:	d801      	bhi.n	80529a4 <mount_volume+0x12c>
 80529a0:	230d      	movs	r3, #13
 80529a2:	e2a5      	b.n	8052ef0 <mount_volume+0x678>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80529a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80529a6:	334c      	adds	r3, #76	@ 0x4c
 80529a8:	3368      	adds	r3, #104	@ 0x68
 80529aa:	4618      	mov	r0, r3
 80529ac:	f7fc fc0d 	bl	804f1ca <ld_word>
 80529b0:	4603      	mov	r3, r0
 80529b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80529b6:	d001      	beq.n	80529bc <mount_volume+0x144>
 80529b8:	230d      	movs	r3, #13
 80529ba:	e299      	b.n	8052ef0 <mount_volume+0x678>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80529bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80529be:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80529c2:	2b09      	cmp	r3, #9
 80529c4:	d001      	beq.n	80529ca <mount_volume+0x152>
			return FR_NO_FILESYSTEM;
 80529c6:	230d      	movs	r3, #13
 80529c8:	e292      	b.n	8052ef0 <mount_volume+0x678>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 80529ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80529cc:	334c      	adds	r3, #76	@ 0x4c
 80529ce:	3348      	adds	r3, #72	@ 0x48
 80529d0:	4618      	mov	r0, r3
 80529d2:	f7fc fc36 	bl	804f242 <ld_qword>
 80529d6:	4602      	mov	r2, r0
 80529d8:	460b      	mov	r3, r1
 80529da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80529dc:	2000      	movs	r0, #0
 80529de:	60b9      	str	r1, [r7, #8]
 80529e0:	60f8      	str	r0, [r7, #12]
 80529e2:	68b9      	ldr	r1, [r7, #8]
 80529e4:	1851      	adds	r1, r2, r1
 80529e6:	6039      	str	r1, [r7, #0]
 80529e8:	68f9      	ldr	r1, [r7, #12]
 80529ea:	eb43 0101 	adc.w	r1, r3, r1
 80529ee:	6079      	str	r1, [r7, #4]
 80529f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80529f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 80529f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80529fc:	2b01      	cmp	r3, #1
 80529fe:	d301      	bcc.n	8052a04 <mount_volume+0x18c>
 8052a00:	230d      	movs	r3, #13
 8052a02:	e275      	b.n	8052ef0 <mount_volume+0x678>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8052a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a06:	334c      	adds	r3, #76	@ 0x4c
 8052a08:	3354      	adds	r3, #84	@ 0x54
 8052a0a:	4618      	mov	r0, r3
 8052a0c:	f7fc fbf6 	bl	804f1fc <ld_dword>
 8052a10:	4602      	mov	r2, r0
 8052a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a14:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8052a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a18:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 8052a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a1e:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8052a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a22:	78db      	ldrb	r3, [r3, #3]
 8052a24:	2b01      	cmp	r3, #1
 8052a26:	d001      	beq.n	8052a2c <mount_volume+0x1b4>
 8052a28:	230d      	movs	r3, #13
 8052a2a:	e261      	b.n	8052ef0 <mount_volume+0x678>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8052a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8052a32:	461a      	mov	r2, r3
 8052a34:	2301      	movs	r3, #1
 8052a36:	4093      	lsls	r3, r2
 8052a38:	b29a      	uxth	r2, r3
 8052a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8052a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a40:	895b      	ldrh	r3, [r3, #10]
 8052a42:	2b00      	cmp	r3, #0
 8052a44:	d101      	bne.n	8052a4a <mount_volume+0x1d2>
 8052a46:	230d      	movs	r3, #13
 8052a48:	e252      	b.n	8052ef0 <mount_volume+0x678>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8052a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a4c:	334c      	adds	r3, #76	@ 0x4c
 8052a4e:	335c      	adds	r3, #92	@ 0x5c
 8052a50:	4618      	mov	r0, r3
 8052a52:	f7fc fbd3 	bl	804f1fc <ld_dword>
 8052a56:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8052a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052a5a:	4a33      	ldr	r2, [pc, #204]	@ (8052b28 <mount_volume+0x2b0>)
 8052a5c:	4293      	cmp	r3, r2
 8052a5e:	d901      	bls.n	8052a64 <mount_volume+0x1ec>
 8052a60:	230d      	movs	r3, #13
 8052a62:	e245      	b.n	8052ef0 <mount_volume+0x678>
		fs->n_fatent = nclst + 2;
 8052a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052a66:	1c9a      	adds	r2, r3, #2
 8052a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8052a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8052a70:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8052a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a74:	334c      	adds	r3, #76	@ 0x4c
 8052a76:	3358      	adds	r3, #88	@ 0x58
 8052a78:	4618      	mov	r0, r3
 8052a7a:	f7fc fbbf 	bl	804f1fc <ld_dword>
 8052a7e:	4602      	mov	r2, r0
 8052a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8052a82:	441a      	add	r2, r3
 8052a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a86:	641a      	str	r2, [r3, #64]	@ 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8052a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a8a:	334c      	adds	r3, #76	@ 0x4c
 8052a8c:	3350      	adds	r3, #80	@ 0x50
 8052a8e:	4618      	mov	r0, r3
 8052a90:	f7fc fbb4 	bl	804f1fc <ld_dword>
 8052a94:	4602      	mov	r2, r0
 8052a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8052a98:	441a      	add	r2, r3
 8052a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052a9c:	639a      	str	r2, [r3, #56]	@ 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8052a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8052aa2:	2200      	movs	r2, #0
 8052aa4:	469a      	mov	sl, r3
 8052aa6:	4693      	mov	fp, r2
 8052aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052aaa:	895b      	ldrh	r3, [r3, #10]
 8052aac:	461a      	mov	r2, r3
 8052aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052ab0:	fb02 f303 	mul.w	r3, r2, r3
 8052ab4:	2200      	movs	r2, #0
 8052ab6:	4698      	mov	r8, r3
 8052ab8:	4691      	mov	r9, r2
 8052aba:	eb1a 0408 	adds.w	r4, sl, r8
 8052abe:	eb4b 0509 	adc.w	r5, fp, r9
 8052ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8052ac6:	42a2      	cmp	r2, r4
 8052ac8:	41ab      	sbcs	r3, r5
 8052aca:	d201      	bcs.n	8052ad0 <mount_volume+0x258>
 8052acc:	230d      	movs	r3, #13
 8052ace:	e20f      	b.n	8052ef0 <mount_volume+0x678>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8052ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ad2:	334c      	adds	r3, #76	@ 0x4c
 8052ad4:	3360      	adds	r3, #96	@ 0x60
 8052ad6:	4618      	mov	r0, r3
 8052ad8:	f7fc fb90 	bl	804f1fc <ld_dword>
 8052adc:	4602      	mov	r2, r0
 8052ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 8052ae2:	2300      	movs	r3, #0
 8052ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8052ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052ae8:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 8052aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052aec:	2b00      	cmp	r3, #0
 8052aee:	d120      	bne.n	8052b32 <mount_volume+0x2ba>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8052af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052af2:	895b      	ldrh	r3, [r3, #10]
 8052af4:	461a      	mov	r2, r3
 8052af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8052af8:	4293      	cmp	r3, r2
 8052afa:	d301      	bcc.n	8052b00 <mount_volume+0x288>
 8052afc:	230d      	movs	r3, #13
 8052afe:	e1f7      	b.n	8052ef0 <mount_volume+0x678>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8052b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8052b04:	4619      	mov	r1, r3
 8052b06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052b08:	f7fd f888 	bl	804fc1c <clst2sect>
 8052b0c:	4602      	mov	r2, r0
 8052b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8052b10:	4413      	add	r3, r2
 8052b12:	4619      	mov	r1, r3
 8052b14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052b16:	f7fc ffe5 	bl	804fae4 <move_window>
 8052b1a:	4603      	mov	r3, r0
 8052b1c:	2b00      	cmp	r3, #0
 8052b1e:	d005      	beq.n	8052b2c <mount_volume+0x2b4>
 8052b20:	2301      	movs	r3, #1
 8052b22:	e1e5      	b.n	8052ef0 <mount_volume+0x678>
 8052b24:	2402d744 	.word	0x2402d744
 8052b28:	7ffffffd 	.word	0x7ffffffd
				so++;
 8052b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8052b2e:	3301      	adds	r3, #1
 8052b30:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8052b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8052b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052b36:	4413      	add	r3, r2
 8052b38:	334c      	adds	r3, #76	@ 0x4c
 8052b3a:	781b      	ldrb	r3, [r3, #0]
 8052b3c:	2b81      	cmp	r3, #129	@ 0x81
 8052b3e:	d005      	beq.n	8052b4c <mount_volume+0x2d4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8052b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052b42:	3320      	adds	r3, #32
 8052b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8052b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 8052b4a:	e7ce      	b.n	8052aea <mount_volume+0x272>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8052b4c:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8052b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b50:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8052b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8052b56:	3314      	adds	r3, #20
 8052b58:	4413      	add	r3, r2
 8052b5a:	4618      	mov	r0, r3
 8052b5c:	f7fc fb4e 	bl	804f1fc <ld_dword>
 8052b60:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8052b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8052b64:	2b01      	cmp	r3, #1
 8052b66:	d904      	bls.n	8052b72 <mount_volume+0x2fa>
 8052b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8052b6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8052b6e:	429a      	cmp	r2, r3
 8052b70:	d301      	bcc.n	8052b76 <mount_volume+0x2fe>
 8052b72:	230d      	movs	r3, #13
 8052b74:	e1bc      	b.n	8052ef0 <mount_volume+0x678>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8052b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8052b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b7c:	895b      	ldrh	r3, [r3, #10]
 8052b7e:	4619      	mov	r1, r3
 8052b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8052b82:	3b02      	subs	r3, #2
 8052b84:	fb01 f303 	mul.w	r3, r1, r3
 8052b88:	441a      	add	r2, r3
 8052b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b8c:	645a      	str	r2, [r3, #68]	@ 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8052b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8052b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8052b94:	09db      	lsrs	r3, r3, #7
 8052b96:	4413      	add	r3, r2
 8052b98:	4619      	mov	r1, r3
 8052b9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052b9c:	f7fc ffa2 	bl	804fae4 <move_window>
 8052ba0:	4603      	mov	r3, r0
 8052ba2:	2b00      	cmp	r3, #0
 8052ba4:	d001      	beq.n	8052baa <mount_volume+0x332>
 8052ba6:	2301      	movs	r3, #1
 8052ba8:	e1a2      	b.n	8052ef0 <mount_volume+0x678>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8052baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052bac:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8052bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8052bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8052bb6:	009b      	lsls	r3, r3, #2
 8052bb8:	4413      	add	r3, r2
 8052bba:	4618      	mov	r0, r3
 8052bbc:	f7fc fb1e 	bl	804f1fc <ld_dword>
 8052bc0:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8052bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8052bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8052bc8:	d008      	beq.n	8052bdc <mount_volume+0x364>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8052bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8052bcc:	3301      	adds	r3, #1
 8052bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8052bd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8052bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8052bd4:	429a      	cmp	r2, r3
 8052bd6:	d0da      	beq.n	8052b8e <mount_volume+0x316>
 8052bd8:	230d      	movs	r3, #13
 8052bda:	e189      	b.n	8052ef0 <mount_volume+0x678>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8052bdc:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8052bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052be0:	f04f 32ff 	mov.w	r2, #4294967295
 8052be4:	619a      	str	r2, [r3, #24]
 8052be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052be8:	699a      	ldr	r2, [r3, #24]
 8052bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052bec:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8052bee:	2304      	movs	r3, #4
 8052bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8052bf2:	e168      	b.n	8052ec6 <mount_volume+0x64e>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8052bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052bf6:	334c      	adds	r3, #76	@ 0x4c
 8052bf8:	330b      	adds	r3, #11
 8052bfa:	4618      	mov	r0, r3
 8052bfc:	f7fc fae5 	bl	804f1ca <ld_word>
 8052c00:	4603      	mov	r3, r0
 8052c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8052c06:	d001      	beq.n	8052c0c <mount_volume+0x394>
 8052c08:	230d      	movs	r3, #13
 8052c0a:	e171      	b.n	8052ef0 <mount_volume+0x678>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8052c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c0e:	334c      	adds	r3, #76	@ 0x4c
 8052c10:	3316      	adds	r3, #22
 8052c12:	4618      	mov	r0, r3
 8052c14:	f7fc fad9 	bl	804f1ca <ld_word>
 8052c18:	4603      	mov	r3, r0
 8052c1a:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8052c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052c1e:	2b00      	cmp	r3, #0
 8052c20:	d106      	bne.n	8052c30 <mount_volume+0x3b8>
 8052c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c24:	334c      	adds	r3, #76	@ 0x4c
 8052c26:	3324      	adds	r3, #36	@ 0x24
 8052c28:	4618      	mov	r0, r3
 8052c2a:	f7fc fae7 	bl	804f1fc <ld_dword>
 8052c2e:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 8052c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8052c34:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8052c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c38:	f893 205c 	ldrb.w	r2, [r3, #92]	@ 0x5c
 8052c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c3e:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8052c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c42:	78db      	ldrb	r3, [r3, #3]
 8052c44:	2b01      	cmp	r3, #1
 8052c46:	d005      	beq.n	8052c54 <mount_volume+0x3dc>
 8052c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c4a:	78db      	ldrb	r3, [r3, #3]
 8052c4c:	2b02      	cmp	r3, #2
 8052c4e:	d001      	beq.n	8052c54 <mount_volume+0x3dc>
 8052c50:	230d      	movs	r3, #13
 8052c52:	e14d      	b.n	8052ef0 <mount_volume+0x678>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8052c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c56:	78db      	ldrb	r3, [r3, #3]
 8052c58:	461a      	mov	r2, r3
 8052c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052c5c:	fb02 f303 	mul.w	r3, r2, r3
 8052c60:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8052c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8052c68:	461a      	mov	r2, r3
 8052c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8052c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c70:	895b      	ldrh	r3, [r3, #10]
 8052c72:	2b00      	cmp	r3, #0
 8052c74:	d008      	beq.n	8052c88 <mount_volume+0x410>
 8052c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c78:	895b      	ldrh	r3, [r3, #10]
 8052c7a:	461a      	mov	r2, r3
 8052c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c7e:	895b      	ldrh	r3, [r3, #10]
 8052c80:	3b01      	subs	r3, #1
 8052c82:	4013      	ands	r3, r2
 8052c84:	2b00      	cmp	r3, #0
 8052c86:	d001      	beq.n	8052c8c <mount_volume+0x414>
 8052c88:	230d      	movs	r3, #13
 8052c8a:	e131      	b.n	8052ef0 <mount_volume+0x678>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8052c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c8e:	334c      	adds	r3, #76	@ 0x4c
 8052c90:	3311      	adds	r3, #17
 8052c92:	4618      	mov	r0, r3
 8052c94:	f7fc fa99 	bl	804f1ca <ld_word>
 8052c98:	4603      	mov	r3, r0
 8052c9a:	461a      	mov	r2, r3
 8052c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052c9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8052ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ca2:	891b      	ldrh	r3, [r3, #8]
 8052ca4:	f003 030f 	and.w	r3, r3, #15
 8052ca8:	b29b      	uxth	r3, r3
 8052caa:	2b00      	cmp	r3, #0
 8052cac:	d001      	beq.n	8052cb2 <mount_volume+0x43a>
 8052cae:	230d      	movs	r3, #13
 8052cb0:	e11e      	b.n	8052ef0 <mount_volume+0x678>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8052cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052cb4:	334c      	adds	r3, #76	@ 0x4c
 8052cb6:	3313      	adds	r3, #19
 8052cb8:	4618      	mov	r0, r3
 8052cba:	f7fc fa86 	bl	804f1ca <ld_word>
 8052cbe:	4603      	mov	r3, r0
 8052cc0:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8052cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8052cc4:	2b00      	cmp	r3, #0
 8052cc6:	d106      	bne.n	8052cd6 <mount_volume+0x45e>
 8052cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052cca:	334c      	adds	r3, #76	@ 0x4c
 8052ccc:	3320      	adds	r3, #32
 8052cce:	4618      	mov	r0, r3
 8052cd0:	f7fc fa94 	bl	804f1fc <ld_dword>
 8052cd4:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8052cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052cd8:	334c      	adds	r3, #76	@ 0x4c
 8052cda:	330e      	adds	r3, #14
 8052cdc:	4618      	mov	r0, r3
 8052cde:	f7fc fa74 	bl	804f1ca <ld_word>
 8052ce2:	4603      	mov	r3, r0
 8052ce4:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8052ce6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8052ce8:	2b00      	cmp	r3, #0
 8052cea:	d101      	bne.n	8052cf0 <mount_volume+0x478>
 8052cec:	230d      	movs	r3, #13
 8052cee:	e0ff      	b.n	8052ef0 <mount_volume+0x678>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8052cf0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8052cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052cf4:	4413      	add	r3, r2
 8052cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8052cf8:	8912      	ldrh	r2, [r2, #8]
 8052cfa:	0912      	lsrs	r2, r2, #4
 8052cfc:	b292      	uxth	r2, r2
 8052cfe:	4413      	add	r3, r2
 8052d00:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8052d02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8052d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8052d06:	429a      	cmp	r2, r3
 8052d08:	d201      	bcs.n	8052d0e <mount_volume+0x496>
 8052d0a:	230d      	movs	r3, #13
 8052d0c:	e0f0      	b.n	8052ef0 <mount_volume+0x678>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8052d0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8052d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8052d12:	1ad3      	subs	r3, r2, r3
 8052d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8052d16:	8952      	ldrh	r2, [r2, #10]
 8052d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8052d1c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8052d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052d20:	2b00      	cmp	r3, #0
 8052d22:	d101      	bne.n	8052d28 <mount_volume+0x4b0>
 8052d24:	230d      	movs	r3, #13
 8052d26:	e0e3      	b.n	8052ef0 <mount_volume+0x678>
		fmt = 0;
 8052d28:	2300      	movs	r3, #0
 8052d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8052d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052d2e:	4a73      	ldr	r2, [pc, #460]	@ (8052efc <mount_volume+0x684>)
 8052d30:	4293      	cmp	r3, r2
 8052d32:	d801      	bhi.n	8052d38 <mount_volume+0x4c0>
 8052d34:	2303      	movs	r3, #3
 8052d36:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8052d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052d3a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8052d3e:	4293      	cmp	r3, r2
 8052d40:	d801      	bhi.n	8052d46 <mount_volume+0x4ce>
 8052d42:	2302      	movs	r3, #2
 8052d44:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8052d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052d48:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8052d4c:	4293      	cmp	r3, r2
 8052d4e:	d801      	bhi.n	8052d54 <mount_volume+0x4dc>
 8052d50:	2301      	movs	r3, #1
 8052d52:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8052d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052d56:	2b00      	cmp	r3, #0
 8052d58:	d101      	bne.n	8052d5e <mount_volume+0x4e6>
 8052d5a:	230d      	movs	r3, #13
 8052d5c:	e0c8      	b.n	8052ef0 <mount_volume+0x678>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8052d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8052d60:	1c9a      	adds	r2, r3, #2
 8052d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d64:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8052d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8052d6a:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8052d6c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8052d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8052d70:	441a      	add	r2, r3
 8052d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d74:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8052d76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8052d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8052d7a:	441a      	add	r2, r3
 8052d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d7e:	641a      	str	r2, [r3, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 8052d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052d82:	2b03      	cmp	r3, #3
 8052d84:	d11e      	bne.n	8052dc4 <mount_volume+0x54c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8052d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d88:	334c      	adds	r3, #76	@ 0x4c
 8052d8a:	332a      	adds	r3, #42	@ 0x2a
 8052d8c:	4618      	mov	r0, r3
 8052d8e:	f7fc fa1c 	bl	804f1ca <ld_word>
 8052d92:	4603      	mov	r3, r0
 8052d94:	2b00      	cmp	r3, #0
 8052d96:	d001      	beq.n	8052d9c <mount_volume+0x524>
 8052d98:	230d      	movs	r3, #13
 8052d9a:	e0a9      	b.n	8052ef0 <mount_volume+0x678>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8052d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052d9e:	891b      	ldrh	r3, [r3, #8]
 8052da0:	2b00      	cmp	r3, #0
 8052da2:	d001      	beq.n	8052da8 <mount_volume+0x530>
 8052da4:	230d      	movs	r3, #13
 8052da6:	e0a3      	b.n	8052ef0 <mount_volume+0x678>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8052da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052daa:	334c      	adds	r3, #76	@ 0x4c
 8052dac:	332c      	adds	r3, #44	@ 0x2c
 8052dae:	4618      	mov	r0, r3
 8052db0:	f7fc fa24 	bl	804f1fc <ld_dword>
 8052db4:	4602      	mov	r2, r0
 8052db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052db8:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8052dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8052dbe:	009b      	lsls	r3, r3, #2
 8052dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8052dc2:	e01e      	b.n	8052e02 <mount_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8052dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052dc6:	891b      	ldrh	r3, [r3, #8]
 8052dc8:	2b00      	cmp	r3, #0
 8052dca:	d101      	bne.n	8052dd0 <mount_volume+0x558>
 8052dcc:	230d      	movs	r3, #13
 8052dce:	e08f      	b.n	8052ef0 <mount_volume+0x678>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8052dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8052dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8052dd6:	441a      	add	r2, r3
 8052dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052dda:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8052ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052dde:	2b02      	cmp	r3, #2
 8052de0:	d103      	bne.n	8052dea <mount_volume+0x572>
 8052de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8052de6:	005b      	lsls	r3, r3, #1
 8052de8:	e00a      	b.n	8052e00 <mount_volume+0x588>
 8052dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8052dee:	4613      	mov	r3, r2
 8052df0:	005b      	lsls	r3, r3, #1
 8052df2:	4413      	add	r3, r2
 8052df4:	085a      	lsrs	r2, r3, #1
 8052df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8052dfa:	f003 0301 	and.w	r3, r3, #1
 8052dfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8052e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8052e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8052e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8052e08:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8052e0c:	0a5b      	lsrs	r3, r3, #9
 8052e0e:	429a      	cmp	r2, r3
 8052e10:	d201      	bcs.n	8052e16 <mount_volume+0x59e>
 8052e12:	230d      	movs	r3, #13
 8052e14:	e06c      	b.n	8052ef0 <mount_volume+0x678>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8052e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e18:	f04f 32ff 	mov.w	r2, #4294967295
 8052e1c:	619a      	str	r2, [r3, #24]
 8052e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e20:	699a      	ldr	r2, [r3, #24]
 8052e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8052e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e28:	2280      	movs	r2, #128	@ 0x80
 8052e2a:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8052e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052e2e:	2b03      	cmp	r3, #3
 8052e30:	d149      	bne.n	8052ec6 <mount_volume+0x64e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8052e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e34:	334c      	adds	r3, #76	@ 0x4c
 8052e36:	3330      	adds	r3, #48	@ 0x30
 8052e38:	4618      	mov	r0, r3
 8052e3a:	f7fc f9c6 	bl	804f1ca <ld_word>
 8052e3e:	4603      	mov	r3, r0
 8052e40:	2b01      	cmp	r3, #1
 8052e42:	d140      	bne.n	8052ec6 <mount_volume+0x64e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8052e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8052e46:	3301      	adds	r3, #1
 8052e48:	4619      	mov	r1, r3
 8052e4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052e4c:	f7fc fe4a 	bl	804fae4 <move_window>
 8052e50:	4603      	mov	r3, r0
 8052e52:	2b00      	cmp	r3, #0
 8052e54:	d137      	bne.n	8052ec6 <mount_volume+0x64e>
		{
			fs->fsi_flag = 0;
 8052e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e58:	2200      	movs	r2, #0
 8052e5a:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8052e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e5e:	334c      	adds	r3, #76	@ 0x4c
 8052e60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8052e64:	4618      	mov	r0, r3
 8052e66:	f7fc f9b0 	bl	804f1ca <ld_word>
 8052e6a:	4603      	mov	r3, r0
 8052e6c:	461a      	mov	r2, r3
 8052e6e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8052e72:	429a      	cmp	r2, r3
 8052e74:	d127      	bne.n	8052ec6 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8052e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e78:	334c      	adds	r3, #76	@ 0x4c
 8052e7a:	4618      	mov	r0, r3
 8052e7c:	f7fc f9be 	bl	804f1fc <ld_dword>
 8052e80:	4603      	mov	r3, r0
 8052e82:	4a1f      	ldr	r2, [pc, #124]	@ (8052f00 <mount_volume+0x688>)
 8052e84:	4293      	cmp	r3, r2
 8052e86:	d11e      	bne.n	8052ec6 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8052e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052e8a:	334c      	adds	r3, #76	@ 0x4c
 8052e8c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8052e90:	4618      	mov	r0, r3
 8052e92:	f7fc f9b3 	bl	804f1fc <ld_dword>
 8052e96:	4603      	mov	r3, r0
 8052e98:	4a1a      	ldr	r2, [pc, #104]	@ (8052f04 <mount_volume+0x68c>)
 8052e9a:	4293      	cmp	r3, r2
 8052e9c:	d113      	bne.n	8052ec6 <mount_volume+0x64e>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8052e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ea0:	334c      	adds	r3, #76	@ 0x4c
 8052ea2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8052ea6:	4618      	mov	r0, r3
 8052ea8:	f7fc f9a8 	bl	804f1fc <ld_dword>
 8052eac:	4602      	mov	r2, r0
 8052eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052eb0:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8052eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052eb4:	334c      	adds	r3, #76	@ 0x4c
 8052eb6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8052eba:	4618      	mov	r0, r3
 8052ebc:	f7fc f99e 	bl	804f1fc <ld_dword>
 8052ec0:	4602      	mov	r2, r0
 8052ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ec4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8052ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8052ec8:	b2da      	uxtb	r2, r3
 8052eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ecc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8052ece:	4b0e      	ldr	r3, [pc, #56]	@ (8052f08 <mount_volume+0x690>)
 8052ed0:	881b      	ldrh	r3, [r3, #0]
 8052ed2:	3301      	adds	r3, #1
 8052ed4:	b29a      	uxth	r2, r3
 8052ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8052f08 <mount_volume+0x690>)
 8052ed8:	801a      	strh	r2, [r3, #0]
 8052eda:	4b0b      	ldr	r3, [pc, #44]	@ (8052f08 <mount_volume+0x690>)
 8052edc:	881a      	ldrh	r2, [r3, #0]
 8052ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ee0:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8052ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8052ee4:	2200      	movs	r2, #0
 8052ee6:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
 8052ee8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8052eea:	f7fc fd9b 	bl	804fa24 <clear_share>
#endif
	return FR_OK;
 8052eee:	2300      	movs	r3, #0
}
 8052ef0:	4618      	mov	r0, r3
 8052ef2:	3768      	adds	r7, #104	@ 0x68
 8052ef4:	46bd      	mov	sp, r7
 8052ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8052efa:	bf00      	nop
 8052efc:	0ffffff5 	.word	0x0ffffff5
 8052f00:	41615252 	.word	0x41615252
 8052f04:	61417272 	.word	0x61417272
 8052f08:	2402d748 	.word	0x2402d748

08052f0c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8052f0c:	b580      	push	{r7, lr}
 8052f0e:	b084      	sub	sp, #16
 8052f10:	af00      	add	r7, sp, #0
 8052f12:	6078      	str	r0, [r7, #4]
 8052f14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8052f16:	2309      	movs	r3, #9
 8052f18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8052f1a:	687b      	ldr	r3, [r7, #4]
 8052f1c:	2b00      	cmp	r3, #0
 8052f1e:	d02f      	beq.n	8052f80 <validate+0x74>
 8052f20:	687b      	ldr	r3, [r7, #4]
 8052f22:	681b      	ldr	r3, [r3, #0]
 8052f24:	2b00      	cmp	r3, #0
 8052f26:	d02b      	beq.n	8052f80 <validate+0x74>
 8052f28:	687b      	ldr	r3, [r7, #4]
 8052f2a:	681b      	ldr	r3, [r3, #0]
 8052f2c:	781b      	ldrb	r3, [r3, #0]
 8052f2e:	2b00      	cmp	r3, #0
 8052f30:	d026      	beq.n	8052f80 <validate+0x74>
 8052f32:	687b      	ldr	r3, [r7, #4]
 8052f34:	889a      	ldrh	r2, [r3, #4]
 8052f36:	687b      	ldr	r3, [r7, #4]
 8052f38:	681b      	ldr	r3, [r3, #0]
 8052f3a:	88db      	ldrh	r3, [r3, #6]
 8052f3c:	429a      	cmp	r2, r3
 8052f3e:	d11f      	bne.n	8052f80 <validate+0x74>
#if FF_FS_REENTRANT
		if (lock_volume(obj->fs, 0)) {	/* Take a grant to access the volume */
 8052f40:	687b      	ldr	r3, [r7, #4]
 8052f42:	681b      	ldr	r3, [r3, #0]
 8052f44:	2100      	movs	r1, #0
 8052f46:	4618      	mov	r0, r3
 8052f48:	f7fc fbc4 	bl	804f6d4 <lock_volume>
 8052f4c:	4603      	mov	r3, r0
 8052f4e:	2b00      	cmp	r3, #0
 8052f50:	d014      	beq.n	8052f7c <validate+0x70>
			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8052f52:	687b      	ldr	r3, [r7, #4]
 8052f54:	681b      	ldr	r3, [r3, #0]
 8052f56:	785b      	ldrb	r3, [r3, #1]
 8052f58:	4618      	mov	r0, r3
 8052f5a:	f7fc f88b 	bl	804f074 <disk_status>
 8052f5e:	4603      	mov	r3, r0
 8052f60:	f003 0301 	and.w	r3, r3, #1
 8052f64:	2b00      	cmp	r3, #0
 8052f66:	d102      	bne.n	8052f6e <validate+0x62>
				res = FR_OK;
 8052f68:	2300      	movs	r3, #0
 8052f6a:	73fb      	strb	r3, [r7, #15]
 8052f6c:	e008      	b.n	8052f80 <validate+0x74>
			} else {
				unlock_volume(obj->fs, FR_OK);	/* Invalidated volume, abort to access */
 8052f6e:	687b      	ldr	r3, [r7, #4]
 8052f70:	681b      	ldr	r3, [r3, #0]
 8052f72:	2100      	movs	r1, #0
 8052f74:	4618      	mov	r0, r3
 8052f76:	f7fc fbdb 	bl	804f730 <unlock_volume>
 8052f7a:	e001      	b.n	8052f80 <validate+0x74>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
 8052f7c:	230f      	movs	r3, #15
 8052f7e:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8052f80:	7bfb      	ldrb	r3, [r7, #15]
 8052f82:	2b00      	cmp	r3, #0
 8052f84:	d102      	bne.n	8052f8c <validate+0x80>
 8052f86:	687b      	ldr	r3, [r7, #4]
 8052f88:	681b      	ldr	r3, [r3, #0]
 8052f8a:	e000      	b.n	8052f8e <validate+0x82>
 8052f8c:	2300      	movs	r3, #0
 8052f8e:	683a      	ldr	r2, [r7, #0]
 8052f90:	6013      	str	r3, [r2, #0]
	return res;
 8052f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8052f94:	4618      	mov	r0, r3
 8052f96:	3710      	adds	r7, #16
 8052f98:	46bd      	mov	sp, r7
 8052f9a:	bd80      	pop	{r7, pc}

08052f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8052f9c:	b580      	push	{r7, lr}
 8052f9e:	b088      	sub	sp, #32
 8052fa0:	af00      	add	r7, sp, #0
 8052fa2:	60f8      	str	r0, [r7, #12]
 8052fa4:	60b9      	str	r1, [r7, #8]
 8052fa6:	4613      	mov	r3, r2
 8052fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8052faa:	68bb      	ldr	r3, [r7, #8]
 8052fac:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8052fae:	f107 0310 	add.w	r3, r7, #16
 8052fb2:	4618      	mov	r0, r3
 8052fb4:	f7ff fb00 	bl	80525b8 <get_ldnumber>
 8052fb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8052fba:	69fb      	ldr	r3, [r7, #28]
 8052fbc:	2b00      	cmp	r3, #0
 8052fbe:	da01      	bge.n	8052fc4 <f_mount+0x28>
 8052fc0:	230b      	movs	r3, #11
 8052fc2:	e059      	b.n	8053078 <f_mount+0xdc>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8052fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8053080 <f_mount+0xe4>)
 8052fc6:	69fb      	ldr	r3, [r7, #28]
 8052fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8052fcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8052fce:	69bb      	ldr	r3, [r7, #24]
 8052fd0:	2b00      	cmp	r3, #0
 8052fd2:	d00d      	beq.n	8052ff0 <f_mount+0x54>
		FatFs[vol] = 0;
 8052fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8053080 <f_mount+0xe4>)
 8052fd6:	69fb      	ldr	r3, [r7, #28]
 8052fd8:	2100      	movs	r1, #0
 8052fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 8052fde:	69b8      	ldr	r0, [r7, #24]
 8052fe0:	f7fc fd20 	bl	804fa24 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
 8052fe4:	69f8      	ldr	r0, [r7, #28]
 8052fe6:	f001 feb7 	bl	8054d58 <ff_mutex_delete>
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8052fea:	69bb      	ldr	r3, [r7, #24]
 8052fec:	2200      	movs	r2, #0
 8052fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8052ff0:	68fb      	ldr	r3, [r7, #12]
 8052ff2:	2b00      	cmp	r3, #0
 8052ff4:	d02a      	beq.n	805304c <f_mount+0xb0>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8052ff6:	68fb      	ldr	r3, [r7, #12]
 8052ff8:	69fa      	ldr	r2, [r7, #28]
 8052ffa:	b2d2      	uxtb	r2, r2
 8052ffc:	705a      	strb	r2, [r3, #1]
#if FF_FS_REENTRANT				/* Create a volume mutex */
		fs->ldrv = (BYTE)vol;	/* Owner volume ID */
 8052ffe:	68fb      	ldr	r3, [r7, #12]
 8053000:	69fa      	ldr	r2, [r7, #28]
 8053002:	b2d2      	uxtb	r2, r2
 8053004:	709a      	strb	r2, [r3, #2]
		if (!ff_mutex_create(vol)) return FR_INT_ERR;
 8053006:	69f8      	ldr	r0, [r7, #28]
 8053008:	f001 fe8a 	bl	8054d20 <ff_mutex_create>
 805300c:	4603      	mov	r3, r0
 805300e:	2b00      	cmp	r3, #0
 8053010:	d101      	bne.n	8053016 <f_mount+0x7a>
 8053012:	2302      	movs	r3, #2
 8053014:	e030      	b.n	8053078 <f_mount+0xdc>
#if FF_FS_LOCK
		if (SysLock == 0) {		/* Create a system mutex if needed */
 8053016:	4b1b      	ldr	r3, [pc, #108]	@ (8053084 <f_mount+0xe8>)
 8053018:	781b      	ldrb	r3, [r3, #0]
 805301a:	b2db      	uxtb	r3, r3
 805301c:	2b00      	cmp	r3, #0
 805301e:	d10d      	bne.n	805303c <f_mount+0xa0>
			if (!ff_mutex_create(FF_VOLUMES)) {
 8053020:	2001      	movs	r0, #1
 8053022:	f001 fe7d 	bl	8054d20 <ff_mutex_create>
 8053026:	4603      	mov	r3, r0
 8053028:	2b00      	cmp	r3, #0
 805302a:	d104      	bne.n	8053036 <f_mount+0x9a>
				ff_mutex_delete(vol);
 805302c:	69f8      	ldr	r0, [r7, #28]
 805302e:	f001 fe93 	bl	8054d58 <ff_mutex_delete>
				return FR_INT_ERR;
 8053032:	2302      	movs	r3, #2
 8053034:	e020      	b.n	8053078 <f_mount+0xdc>
			}
			SysLock = 1;		/* System mutex is ready */
 8053036:	4b13      	ldr	r3, [pc, #76]	@ (8053084 <f_mount+0xe8>)
 8053038:	2201      	movs	r2, #1
 805303a:	701a      	strb	r2, [r3, #0]
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 805303c:	68fb      	ldr	r3, [r7, #12]
 805303e:	2200      	movs	r2, #0
 8053040:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8053042:	68fa      	ldr	r2, [r7, #12]
 8053044:	490e      	ldr	r1, [pc, #56]	@ (8053080 <f_mount+0xe4>)
 8053046:	69fb      	ldr	r3, [r7, #28]
 8053048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 805304c:	79fb      	ldrb	r3, [r7, #7]
 805304e:	2b00      	cmp	r3, #0
 8053050:	d101      	bne.n	8053056 <f_mount+0xba>
 8053052:	2300      	movs	r3, #0
 8053054:	e010      	b.n	8053078 <f_mount+0xdc>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8053056:	f107 010c 	add.w	r1, r7, #12
 805305a:	f107 0308 	add.w	r3, r7, #8
 805305e:	2200      	movs	r2, #0
 8053060:	4618      	mov	r0, r3
 8053062:	f7ff fc09 	bl	8052878 <mount_volume>
 8053066:	4603      	mov	r3, r0
 8053068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 805306a:	68fb      	ldr	r3, [r7, #12]
 805306c:	7dfa      	ldrb	r2, [r7, #23]
 805306e:	4611      	mov	r1, r2
 8053070:	4618      	mov	r0, r3
 8053072:	f7fc fb5d 	bl	804f730 <unlock_volume>
 8053076:	7dfb      	ldrb	r3, [r7, #23]
}
 8053078:	4618      	mov	r0, r3
 805307a:	3720      	adds	r7, #32
 805307c:	46bd      	mov	sp, r7
 805307e:	bd80      	pop	{r7, pc}
 8053080:	2402d744 	.word	0x2402d744
 8053084:	2402d78c 	.word	0x2402d78c

08053088 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8053088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805308c:	f2ad 4dfc 	subw	sp, sp, #1276	@ 0x4fc
 8053090:	af00      	add	r7, sp, #0
 8053092:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053096:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805309a:	6018      	str	r0, [r3, #0]
 805309c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80530a0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 80530a4:	6019      	str	r1, [r3, #0]
 80530a6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80530aa:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80530ae:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80530b0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80530b4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80530b8:	681b      	ldr	r3, [r3, #0]
 80530ba:	2b00      	cmp	r3, #0
 80530bc:	d101      	bne.n	80530c2 <f_open+0x3a>
 80530be:	2309      	movs	r3, #9
 80530c0:	e386      	b.n	80537d0 <f_open+0x748>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80530c2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80530c6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80530ca:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 80530ce:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 80530d2:	7812      	ldrb	r2, [r2, #0]
 80530d4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80530d8:	701a      	strb	r2, [r3, #0]
	res = mount_volume(&path, &fs, mode);
 80530da:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80530de:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80530e2:	781a      	ldrb	r2, [r3, #0]
 80530e4:	f207 4184 	addw	r1, r7, #1156	@ 0x484
 80530e8:	f107 0318 	add.w	r3, r7, #24
 80530ec:	4618      	mov	r0, r3
 80530ee:	f7ff fbc3 	bl	8052878 <mount_volume>
 80530f2:	4603      	mov	r3, r0
 80530f4:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	if (res == FR_OK) {
 80530f8:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80530fc:	2b00      	cmp	r3, #0
 80530fe:	f040 8352 	bne.w	80537a6 <f_open+0x71e>
		dj.obj.fs = fs;
 8053102:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053106:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
		INIT_NAMBUF(fs);
 805310a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 805310e:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8053112:	60da      	str	r2, [r3, #12]
 8053114:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053118:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 805311c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 805311e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053122:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8053126:	681a      	ldr	r2, [r3, #0]
 8053128:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 805312c:	4611      	mov	r1, r2
 805312e:	4618      	mov	r0, r3
 8053130:	f7ff f94a 	bl	80523c8 <follow_path>
 8053134:	4603      	mov	r3, r0
 8053136:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 805313a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 805313e:	2b00      	cmp	r3, #0
 8053140:	d11c      	bne.n	805317c <f_open+0xf4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8053142:	f897 34d3 	ldrb.w	r3, [r7, #1235]	@ 0x4d3
 8053146:	b25b      	sxtb	r3, r3
 8053148:	2b00      	cmp	r3, #0
 805314a:	da03      	bge.n	8053154 <f_open+0xcc>
				res = FR_INVALID_NAME;
 805314c:	2306      	movs	r3, #6
 805314e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 8053152:	e013      	b.n	805317c <f_open+0xf4>
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8053154:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053158:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 805315c:	781b      	ldrb	r3, [r3, #0]
 805315e:	2b01      	cmp	r3, #1
 8053160:	bf8c      	ite	hi
 8053162:	2301      	movhi	r3, #1
 8053164:	2300      	movls	r3, #0
 8053166:	b2db      	uxtb	r3, r3
 8053168:	461a      	mov	r2, r3
 805316a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 805316e:	4611      	mov	r1, r2
 8053170:	4618      	mov	r0, r3
 8053172:	f7fc fb0f 	bl	804f794 <chk_share>
 8053176:	4603      	mov	r3, r0
 8053178:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 805317c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053180:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8053184:	781b      	ldrb	r3, [r3, #0]
 8053186:	f003 031c 	and.w	r3, r3, #28
 805318a:	2b00      	cmp	r3, #0
 805318c:	f000 811d 	beq.w	80533ca <f_open+0x342>
			if (res != FR_OK) {					/* No file, create new */
 8053190:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 8053194:	2b00      	cmp	r3, #0
 8053196:	d01f      	beq.n	80531d8 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8053198:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 805319c:	2b04      	cmp	r3, #4
 805319e:	d10e      	bne.n	80531be <f_open+0x136>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80531a0:	f7fc fb54 	bl	804f84c <enq_share>
 80531a4:	4603      	mov	r3, r0
 80531a6:	2b00      	cmp	r3, #0
 80531a8:	d006      	beq.n	80531b8 <f_open+0x130>
 80531aa:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80531ae:	4618      	mov	r0, r3
 80531b0:	f7fe fb68 	bl	8051884 <dir_register>
 80531b4:	4603      	mov	r3, r0
 80531b6:	e000      	b.n	80531ba <f_open+0x132>
 80531b8:	2312      	movs	r3, #18
 80531ba:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80531be:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80531c2:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80531c6:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 80531ca:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 80531ce:	7812      	ldrb	r2, [r2, #0]
 80531d0:	f042 0208 	orr.w	r2, r2, #8
 80531d4:	701a      	strb	r2, [r3, #0]
 80531d6:	e015      	b.n	8053204 <f_open+0x17c>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80531d8:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 80531dc:	f003 0311 	and.w	r3, r3, #17
 80531e0:	2b00      	cmp	r3, #0
 80531e2:	d003      	beq.n	80531ec <f_open+0x164>
					res = FR_DENIED;
 80531e4:	2307      	movs	r3, #7
 80531e6:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 80531ea:	e00b      	b.n	8053204 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80531ec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80531f0:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80531f4:	781b      	ldrb	r3, [r3, #0]
 80531f6:	f003 0304 	and.w	r3, r3, #4
 80531fa:	2b00      	cmp	r3, #0
 80531fc:	d002      	beq.n	8053204 <f_open+0x17c>
 80531fe:	2308      	movs	r3, #8
 8053200:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8053204:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 8053208:	2b00      	cmp	r3, #0
 805320a:	f040 80fe 	bne.w	805340a <f_open+0x382>
 805320e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053212:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8053216:	781b      	ldrb	r3, [r3, #0]
 8053218:	f003 0308 	and.w	r3, r3, #8
 805321c:	2b00      	cmp	r3, #0
 805321e:	f000 80f4 	beq.w	805340a <f_open+0x382>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8053222:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053226:	781b      	ldrb	r3, [r3, #0]
 8053228:	2b04      	cmp	r3, #4
 805322a:	d16f      	bne.n	805330c <f_open+0x284>
					/* Get current allocation info */
					fp->obj.fs = fs;
 805322c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 8053230:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053234:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053238:	681b      	ldr	r3, [r3, #0]
 805323a:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 805323c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 8053240:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053244:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053248:	681b      	ldr	r3, [r3, #0]
 805324a:	4619      	mov	r1, r3
 805324c:	4610      	mov	r0, r2
 805324e:	f7fd fffb 	bl	8051248 <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8053252:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053256:	691b      	ldr	r3, [r3, #16]
 8053258:	3302      	adds	r3, #2
 805325a:	221e      	movs	r2, #30
 805325c:	2100      	movs	r1, #0
 805325e:	4618      	mov	r0, r3
 8053260:	f016 fac0 	bl	80697e4 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8053264:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053268:	691b      	ldr	r3, [r3, #16]
 805326a:	3326      	adds	r3, #38	@ 0x26
 805326c:	221a      	movs	r2, #26
 805326e:	2100      	movs	r1, #0
 8053270:	4618      	mov	r0, r3
 8053272:	f016 fab7 	bl	80697e4 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8053276:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 805327a:	691b      	ldr	r3, [r3, #16]
 805327c:	3304      	adds	r3, #4
 805327e:	2220      	movs	r2, #32
 8053280:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8053282:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053286:	691b      	ldr	r3, [r3, #16]
 8053288:	f103 0408 	add.w	r4, r3, #8
 805328c:	f7fb ff95 	bl	804f1ba <get_fattime>
 8053290:	4603      	mov	r3, r0
 8053292:	4619      	mov	r1, r3
 8053294:	4620      	mov	r0, r4
 8053296:	f7fc f8ca 	bl	804f42e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 805329a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 805329e:	691b      	ldr	r3, [r3, #16]
 80532a0:	3321      	adds	r3, #33	@ 0x21
 80532a2:	2201      	movs	r2, #1
 80532a4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80532a6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80532aa:	4618      	mov	r0, r3
 80532ac:	f7fe f82e 	bl	805130c <store_xdir>
 80532b0:	4603      	mov	r3, r0
 80532b2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 80532b6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80532ba:	2b00      	cmp	r3, #0
 80532bc:	f040 80a5 	bne.w	805340a <f_open+0x382>
 80532c0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80532c4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80532c8:	681b      	ldr	r3, [r3, #0]
 80532ca:	689b      	ldr	r3, [r3, #8]
 80532cc:	2b00      	cmp	r3, #0
 80532ce:	f000 809c 	beq.w	805340a <f_open+0x382>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80532d2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80532d6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80532da:	6818      	ldr	r0, [r3, #0]
 80532dc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80532e0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80532e4:	681b      	ldr	r3, [r3, #0]
 80532e6:	689b      	ldr	r3, [r3, #8]
 80532e8:	2200      	movs	r2, #0
 80532ea:	4619      	mov	r1, r3
 80532ec:	f7fd f810 	bl	8050310 <remove_chain>
 80532f0:	4603      	mov	r3, r0
 80532f2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80532f6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80532fa:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80532fe:	681b      	ldr	r3, [r3, #0]
 8053300:	689a      	ldr	r2, [r3, #8]
 8053302:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053306:	3a01      	subs	r2, #1
 8053308:	615a      	str	r2, [r3, #20]
 805330a:	e07e      	b.n	805340a <f_open+0x382>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 805330c:	f7fb ff55 	bl	804f1ba <get_fattime>
 8053310:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
					st_dword(dj.dir + DIR_CrtTime, tm);
 8053314:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8053318:	330e      	adds	r3, #14
 805331a:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 805331e:	4618      	mov	r0, r3
 8053320:	f7fc f885 	bl	804f42e <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8053324:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8053328:	3316      	adds	r3, #22
 805332a:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 805332e:	4618      	mov	r0, r3
 8053330:	f7fc f87d 	bl	804f42e <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8053334:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053338:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 805333c:	4611      	mov	r1, r2
 805333e:	4618      	mov	r0, r3
 8053340:	f7fd fc16 	bl	8050b70 <ld_clust>
 8053344:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8053348:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 805334c:	330b      	adds	r3, #11
 805334e:	2220      	movs	r2, #32
 8053350:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8053352:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053356:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 805335a:	2200      	movs	r2, #0
 805335c:	4618      	mov	r0, r3
 805335e:	f7fd fc26 	bl	8050bae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8053362:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8053366:	331c      	adds	r3, #28
 8053368:	2100      	movs	r1, #0
 805336a:	4618      	mov	r0, r3
 805336c:	f7fc f85f 	bl	804f42e <st_dword>
					fs->wflag = 1;
 8053370:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053374:	2201      	movs	r2, #1
 8053376:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8053378:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 805337c:	2b00      	cmp	r3, #0
 805337e:	d044      	beq.n	805340a <f_open+0x382>
						sc = fs->winsect;
 8053380:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8053386:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
						res = remove_chain(&dj.obj, cl, 0);
 805338a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 805338e:	2200      	movs	r2, #0
 8053390:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 8053394:	4618      	mov	r0, r3
 8053396:	f7fc ffbb 	bl	8050310 <remove_chain>
 805339a:	4603      	mov	r3, r0
 805339c:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						if (res == FR_OK) {
 80533a0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80533a4:	2b00      	cmp	r3, #0
 80533a6:	d130      	bne.n	805340a <f_open+0x382>
							res = move_window(fs, sc);
 80533a8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80533ac:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 80533b0:	4618      	mov	r0, r3
 80533b2:	f7fc fb97 	bl	804fae4 <move_window>
 80533b6:	4603      	mov	r3, r0
 80533b8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80533bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80533c0:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 80533c4:	3a01      	subs	r2, #1
 80533c6:	615a      	str	r2, [r3, #20]
 80533c8:	e01f      	b.n	805340a <f_open+0x382>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80533ca:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80533ce:	2b00      	cmp	r3, #0
 80533d0:	d11b      	bne.n	805340a <f_open+0x382>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80533d2:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 80533d6:	f003 0310 	and.w	r3, r3, #16
 80533da:	2b00      	cmp	r3, #0
 80533dc:	d003      	beq.n	80533e6 <f_open+0x35e>
					res = FR_NO_FILE;
 80533de:	2304      	movs	r3, #4
 80533e0:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 80533e4:	e011      	b.n	805340a <f_open+0x382>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80533e6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80533ea:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80533ee:	781b      	ldrb	r3, [r3, #0]
 80533f0:	f003 0302 	and.w	r3, r3, #2
 80533f4:	2b00      	cmp	r3, #0
 80533f6:	d008      	beq.n	805340a <f_open+0x382>
 80533f8:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 80533fc:	f003 0301 	and.w	r3, r3, #1
 8053400:	2b00      	cmp	r3, #0
 8053402:	d002      	beq.n	805340a <f_open+0x382>
						res = FR_DENIED;
 8053404:	2307      	movs	r3, #7
 8053406:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					}
				}
			}
		}
		if (res == FR_OK) {
 805340a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 805340e:	2b00      	cmp	r3, #0
 8053410:	d148      	bne.n	80534a4 <f_open+0x41c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8053412:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053416:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 805341a:	781b      	ldrb	r3, [r3, #0]
 805341c:	f003 0308 	and.w	r3, r3, #8
 8053420:	2b00      	cmp	r3, #0
 8053422:	d00b      	beq.n	805343c <f_open+0x3b4>
 8053424:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053428:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 805342c:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8053430:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 8053434:	7812      	ldrb	r2, [r2, #0]
 8053436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 805343a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 805343c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053440:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8053442:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053446:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805344a:	681b      	ldr	r3, [r3, #0]
 805344c:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 805344e:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8053452:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053456:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805345a:	681b      	ldr	r3, [r3, #0]
 805345c:	64da      	str	r2, [r3, #76]	@ 0x4c
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 805345e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053462:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8053466:	781b      	ldrb	r3, [r3, #0]
 8053468:	2b01      	cmp	r3, #1
 805346a:	bf8c      	ite	hi
 805346c:	2301      	movhi	r3, #1
 805346e:	2300      	movls	r3, #0
 8053470:	b2db      	uxtb	r3, r3
 8053472:	461a      	mov	r2, r3
 8053474:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8053478:	4611      	mov	r1, r2
 805347a:	4618      	mov	r0, r3
 805347c:	f7fc fa08 	bl	804f890 <inc_share>
 8053480:	4602      	mov	r2, r0
 8053482:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053486:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805348a:	681b      	ldr	r3, [r3, #0]
 805348c:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 805348e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053492:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053496:	681b      	ldr	r3, [r3, #0]
 8053498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805349a:	2b00      	cmp	r3, #0
 805349c:	d102      	bne.n	80534a4 <f_open+0x41c>
 805349e:	2302      	movs	r3, #2
 80534a0:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80534a4:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80534a8:	2b00      	cmp	r3, #0
 80534aa:	f040 817c 	bne.w	80537a6 <f_open+0x71e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80534ae:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80534b2:	781b      	ldrb	r3, [r3, #0]
 80534b4:	2b04      	cmp	r3, #4
 80534b6:	d12b      	bne.n	8053510 <f_open+0x488>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80534b8:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 80534bc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80534c0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80534c4:	681b      	ldr	r3, [r3, #0]
 80534c6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80534c8:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80534cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80534d0:	4613      	mov	r3, r2
 80534d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80534d6:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 80534da:	431a      	orrs	r2, r3
 80534dc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80534e0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80534e4:	681b      	ldr	r3, [r3, #0]
 80534e6:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80534e8:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 80534ec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80534f0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80534f4:	681b      	ldr	r3, [r3, #0]
 80534f6:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80534f8:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 80534fc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053500:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053504:	681b      	ldr	r3, [r3, #0]
 8053506:	4619      	mov	r1, r3
 8053508:	4610      	mov	r0, r2
 805350a:	f7fd fe9d 	bl	8051248 <init_alloc_info>
 805350e:	e021      	b.n	8053554 <f_open+0x4cc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8053510:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053514:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8053518:	4611      	mov	r1, r2
 805351a:	4618      	mov	r0, r3
 805351c:	f7fd fb28 	bl	8050b70 <ld_clust>
 8053520:	4602      	mov	r2, r0
 8053522:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053526:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805352a:	681b      	ldr	r3, [r3, #0]
 805352c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 805352e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8053532:	331c      	adds	r3, #28
 8053534:	4618      	mov	r0, r3
 8053536:	f7fb fe61 	bl	804f1fc <ld_dword>
 805353a:	4603      	mov	r3, r0
 805353c:	2200      	movs	r2, #0
 805353e:	60bb      	str	r3, [r7, #8]
 8053540:	60fa      	str	r2, [r7, #12]
 8053542:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053546:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805354a:	681b      	ldr	r3, [r3, #0]
 805354c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8053550:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 8053554:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053558:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805355c:	681b      	ldr	r3, [r3, #0]
 805355e:	2200      	movs	r2, #0
 8053560:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8053562:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 8053566:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 805356a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805356e:	681b      	ldr	r3, [r3, #0]
 8053570:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8053572:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053576:	88da      	ldrh	r2, [r3, #6]
 8053578:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 805357c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053580:	681b      	ldr	r3, [r3, #0]
 8053582:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8053584:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053588:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805358c:	681b      	ldr	r3, [r3, #0]
 805358e:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8053592:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 8053596:	7812      	ldrb	r2, [r2, #0]
 8053598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 805359c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80535a0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80535a4:	681b      	ldr	r3, [r3, #0]
 80535a6:	2200      	movs	r2, #0
 80535a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 80535ac:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80535b0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80535b4:	681b      	ldr	r3, [r3, #0]
 80535b6:	2200      	movs	r2, #0
 80535b8:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 80535ba:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80535be:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80535c2:	6819      	ldr	r1, [r3, #0]
 80535c4:	f04f 0200 	mov.w	r2, #0
 80535c8:	f04f 0300 	mov.w	r3, #0
 80535cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80535d0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80535d4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80535d8:	681b      	ldr	r3, [r3, #0]
 80535da:	3354      	adds	r3, #84	@ 0x54
 80535dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80535e0:	2100      	movs	r1, #0
 80535e2:	4618      	mov	r0, r3
 80535e4:	f016 f8fe 	bl	80697e4 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80535e8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80535ec:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80535f0:	781b      	ldrb	r3, [r3, #0]
 80535f2:	f003 0320 	and.w	r3, r3, #32
 80535f6:	2b00      	cmp	r3, #0
 80535f8:	f000 80d5 	beq.w	80537a6 <f_open+0x71e>
 80535fc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053600:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053604:	681b      	ldr	r3, [r3, #0]
 8053606:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 805360a:	4313      	orrs	r3, r2
 805360c:	f000 80cb 	beq.w	80537a6 <f_open+0x71e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8053610:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053614:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053618:	681b      	ldr	r3, [r3, #0]
 805361a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 805361e:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 8053622:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8053626:	6809      	ldr	r1, [r1, #0]
 8053628:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 805362c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053630:	895b      	ldrh	r3, [r3, #10]
 8053632:	025b      	lsls	r3, r3, #9
 8053634:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8053638:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 805363c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053640:	681b      	ldr	r3, [r3, #0]
 8053642:	689b      	ldr	r3, [r3, #8]
 8053644:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8053648:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 805364c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053650:	681b      	ldr	r3, [r3, #0]
 8053652:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8053656:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 805365a:	e9c1 2300 	strd	r2, r3, [r1]
 805365e:	e02e      	b.n	80536be <f_open+0x636>
					clst = get_fat(&fp->obj, clst);
 8053660:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053664:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053668:	681b      	ldr	r3, [r3, #0]
 805366a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 805366e:	4618      	mov	r0, r3
 8053670:	f7fc faf4 	bl	804fc5c <get_fat>
 8053674:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
					if (clst <= 1) res = FR_INT_ERR;
 8053678:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 805367c:	2b01      	cmp	r3, #1
 805367e:	d802      	bhi.n	8053686 <f_open+0x5fe>
 8053680:	2302      	movs	r3, #2
 8053682:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8053686:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 805368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 805368e:	d102      	bne.n	8053696 <f_open+0x60e>
 8053690:	2301      	movs	r3, #1
 8053692:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8053696:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 805369a:	2200      	movs	r2, #0
 805369c:	461d      	mov	r5, r3
 805369e:	4616      	mov	r6, r2
 80536a0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80536a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80536a8:	1b51      	subs	r1, r2, r5
 80536aa:	6039      	str	r1, [r7, #0]
 80536ac:	eb63 0306 	sbc.w	r3, r3, r6
 80536b0:	607b      	str	r3, [r7, #4]
 80536b2:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80536b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80536ba:	e9c2 3400 	strd	r3, r4, [r2]
 80536be:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80536c2:	2b00      	cmp	r3, #0
 80536c4:	d10c      	bne.n	80536e0 <f_open+0x658>
 80536c6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 80536ca:	2200      	movs	r2, #0
 80536cc:	469a      	mov	sl, r3
 80536ce:	4693      	mov	fp, r2
 80536d0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80536d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80536d8:	4592      	cmp	sl, r2
 80536da:	eb7b 0303 	sbcs.w	r3, fp, r3
 80536de:	d3bf      	bcc.n	8053660 <f_open+0x5d8>
				}
				fp->clust = clst;
 80536e0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80536e4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80536e8:	681b      	ldr	r3, [r3, #0]
 80536ea:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	@ 0x4f0
 80536ee:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80536f0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80536f4:	2b00      	cmp	r3, #0
 80536f6:	d149      	bne.n	805378c <f_open+0x704>
 80536f8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80536fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8053700:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8053704:	f04f 0900 	mov.w	r9, #0
 8053708:	ea58 0309 	orrs.w	r3, r8, r9
 805370c:	d03e      	beq.n	805378c <f_open+0x704>
					sc = clst2sect(fs, clst);
 805370e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8053712:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 8053716:	4618      	mov	r0, r3
 8053718:	f7fc fa80 	bl	804fc1c <clst2sect>
 805371c:	f8c7 04dc 	str.w	r0, [r7, #1244]	@ 0x4dc
					if (sc == 0) {
 8053720:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8053724:	2b00      	cmp	r3, #0
 8053726:	d103      	bne.n	8053730 <f_open+0x6a8>
						res = FR_INT_ERR;
 8053728:	2302      	movs	r3, #2
 805372a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 805372e:	e02d      	b.n	805378c <f_open+0x704>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8053730:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8053734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8053738:	f04f 0200 	mov.w	r2, #0
 805373c:	f04f 0300 	mov.w	r3, #0
 8053740:	0a42      	lsrs	r2, r0, #9
 8053742:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8053746:	0a4b      	lsrs	r3, r1, #9
 8053748:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 805374c:	441a      	add	r2, r3
 805374e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053752:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053756:	681b      	ldr	r3, [r3, #0]
 8053758:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 805375a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 805375e:	7858      	ldrb	r0, [r3, #1]
 8053760:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053764:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053768:	681b      	ldr	r3, [r3, #0]
 805376a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 805376e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053772:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8053776:	681b      	ldr	r3, [r3, #0]
 8053778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 805377a:	2301      	movs	r3, #1
 805377c:	f7fb fcbe 	bl	804f0fc <disk_read>
 8053780:	4603      	mov	r3, r0
 8053782:	2b00      	cmp	r3, #0
 8053784:	d002      	beq.n	805378c <f_open+0x704>
 8053786:	2301      	movs	r3, #1
 8053788:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#endif
					}
				}
#if FF_FS_LOCK
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 805378c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 8053790:	2b00      	cmp	r3, #0
 8053792:	d008      	beq.n	80537a6 <f_open+0x71e>
 8053794:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8053798:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 805379c:	681b      	ldr	r3, [r3, #0]
 805379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80537a0:	4618      	mov	r0, r3
 80537a2:	f7fc f903 	bl	804f9ac <dec_share>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80537a6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 80537aa:	2b00      	cmp	r3, #0
 80537ac:	d006      	beq.n	80537bc <f_open+0x734>
 80537ae:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80537b2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80537b6:	681b      	ldr	r3, [r3, #0]
 80537b8:	2200      	movs	r2, #0
 80537ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80537bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80537c0:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 80537c4:	4611      	mov	r1, r2
 80537c6:	4618      	mov	r0, r3
 80537c8:	f7fb ffb2 	bl	804f730 <unlock_volume>
 80537cc:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
}
 80537d0:	4618      	mov	r0, r3
 80537d2:	f207 47fc 	addw	r7, r7, #1276	@ 0x4fc
 80537d6:	46bd      	mov	sp, r7
 80537d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080537dc <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 80537dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80537e0:	b095      	sub	sp, #84	@ 0x54
 80537e2:	af00      	add	r7, sp, #0
 80537e4:	61f8      	str	r0, [r7, #28]
 80537e6:	61b9      	str	r1, [r7, #24]
 80537e8:	617a      	str	r2, [r7, #20]
 80537ea:	613b      	str	r3, [r7, #16]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80537ec:	69bb      	ldr	r3, [r7, #24]
 80537ee:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 80537f0:	693b      	ldr	r3, [r7, #16]
 80537f2:	2200      	movs	r2, #0
 80537f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80537f6:	69fb      	ldr	r3, [r7, #28]
 80537f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80537fc:	4611      	mov	r1, r2
 80537fe:	4618      	mov	r0, r3
 8053800:	f7ff fb84 	bl	8052f0c <validate>
 8053804:	4603      	mov	r3, r0
 8053806:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 805380a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 805380e:	2b00      	cmp	r3, #0
 8053810:	d108      	bne.n	8053824 <f_read+0x48>
 8053812:	69fb      	ldr	r3, [r7, #28]
 8053814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8053818:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 805381c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8053820:	2b00      	cmp	r3, #0
 8053822:	d009      	beq.n	8053838 <f_read+0x5c>
 8053824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053826:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 805382a:	4611      	mov	r1, r2
 805382c:	4618      	mov	r0, r3
 805382e:	f7fb ff7f 	bl	804f730 <unlock_volume>
 8053832:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8053836:	e173      	b.n	8053b20 <f_read+0x344>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8053838:	69fb      	ldr	r3, [r7, #28]
 805383a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 805383e:	f003 0301 	and.w	r3, r3, #1
 8053842:	2b00      	cmp	r3, #0
 8053844:	d106      	bne.n	8053854 <f_read+0x78>
 8053846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053848:	2107      	movs	r1, #7
 805384a:	4618      	mov	r0, r3
 805384c:	f7fb ff70 	bl	804f730 <unlock_volume>
 8053850:	2307      	movs	r3, #7
 8053852:	e165      	b.n	8053b20 <f_read+0x344>
	remain = fp->obj.objsize - fp->fptr;
 8053854:	69fb      	ldr	r3, [r7, #28]
 8053856:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 805385a:	69fb      	ldr	r3, [r7, #28]
 805385c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053860:	1a86      	subs	r6, r0, r2
 8053862:	603e      	str	r6, [r7, #0]
 8053864:	eb61 0303 	sbc.w	r3, r1, r3
 8053868:	607b      	str	r3, [r7, #4]
 805386a:	e9d7 2300 	ldrd	r2, r3, [r7]
 805386e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8053872:	697b      	ldr	r3, [r7, #20]
 8053874:	2200      	movs	r2, #0
 8053876:	469a      	mov	sl, r3
 8053878:	4693      	mov	fp, r2
 805387a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 805387e:	4552      	cmp	r2, sl
 8053880:	eb73 030b 	sbcs.w	r3, r3, fp
 8053884:	f080 8142 	bcs.w	8053b0c <f_read+0x330>
 8053888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805388a:	617b      	str	r3, [r7, #20]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 805388c:	e13e      	b.n	8053b0c <f_read+0x330>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 805388e:	69fb      	ldr	r3, [r7, #28]
 8053890:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053894:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8053898:	2500      	movs	r5, #0
 805389a:	ea54 0305 	orrs.w	r3, r4, r5
 805389e:	f040 80f7 	bne.w	8053a90 <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80538a2:	69fb      	ldr	r3, [r7, #28]
 80538a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80538a8:	f04f 0200 	mov.w	r2, #0
 80538ac:	f04f 0300 	mov.w	r3, #0
 80538b0:	0a42      	lsrs	r2, r0, #9
 80538b2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80538b6:	0a4b      	lsrs	r3, r1, #9
 80538b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80538ba:	895b      	ldrh	r3, [r3, #10]
 80538bc:	3b01      	subs	r3, #1
 80538be:	4013      	ands	r3, r2
 80538c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 80538c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80538c4:	2b00      	cmp	r3, #0
 80538c6:	d13c      	bne.n	8053942 <f_read+0x166>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80538c8:	69fb      	ldr	r3, [r7, #28]
 80538ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80538ce:	4313      	orrs	r3, r2
 80538d0:	d103      	bne.n	80538da <f_read+0xfe>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80538d2:	69fb      	ldr	r3, [r7, #28]
 80538d4:	689b      	ldr	r3, [r3, #8]
 80538d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80538d8:	e013      	b.n	8053902 <f_read+0x126>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 80538da:	69fb      	ldr	r3, [r7, #28]
 80538dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80538de:	2b00      	cmp	r3, #0
 80538e0:	d007      	beq.n	80538f2 <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80538e2:	69fb      	ldr	r3, [r7, #28]
 80538e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80538e8:	69f8      	ldr	r0, [r7, #28]
 80538ea:	f7fc ff2e 	bl	805074a <clmt_clust>
 80538ee:	64b8      	str	r0, [r7, #72]	@ 0x48
 80538f0:	e007      	b.n	8053902 <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80538f2:	69fa      	ldr	r2, [r7, #28]
 80538f4:	69fb      	ldr	r3, [r7, #28]
 80538f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80538f8:	4619      	mov	r1, r3
 80538fa:	4610      	mov	r0, r2
 80538fc:	f7fc f9ae 	bl	804fc5c <get_fat>
 8053900:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8053902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8053904:	2b01      	cmp	r3, #1
 8053906:	d80a      	bhi.n	805391e <f_read+0x142>
 8053908:	69fb      	ldr	r3, [r7, #28]
 805390a:	2202      	movs	r2, #2
 805390c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053912:	2102      	movs	r1, #2
 8053914:	4618      	mov	r0, r3
 8053916:	f7fb ff0b 	bl	804f730 <unlock_volume>
 805391a:	2302      	movs	r3, #2
 805391c:	e100      	b.n	8053b20 <f_read+0x344>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 805391e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8053920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8053924:	d10a      	bne.n	805393c <f_read+0x160>
 8053926:	69fb      	ldr	r3, [r7, #28]
 8053928:	2201      	movs	r2, #1
 805392a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 805392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053930:	2101      	movs	r1, #1
 8053932:	4618      	mov	r0, r3
 8053934:	f7fb fefc 	bl	804f730 <unlock_volume>
 8053938:	2301      	movs	r3, #1
 805393a:	e0f1      	b.n	8053b20 <f_read+0x344>
				fp->clust = clst;				/* Update current cluster */
 805393c:	69fb      	ldr	r3, [r7, #28]
 805393e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8053940:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8053942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8053944:	69fb      	ldr	r3, [r7, #28]
 8053946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8053948:	4619      	mov	r1, r3
 805394a:	4610      	mov	r0, r2
 805394c:	f7fc f966 	bl	804fc1c <clst2sect>
 8053950:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8053952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8053954:	2b00      	cmp	r3, #0
 8053956:	d10a      	bne.n	805396e <f_read+0x192>
 8053958:	69fb      	ldr	r3, [r7, #28]
 805395a:	2202      	movs	r2, #2
 805395c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053962:	2102      	movs	r1, #2
 8053964:	4618      	mov	r0, r3
 8053966:	f7fb fee3 	bl	804f730 <unlock_volume>
 805396a:	2302      	movs	r3, #2
 805396c:	e0d8      	b.n	8053b20 <f_read+0x344>
			sect += csect;
 805396e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8053972:	4413      	add	r3, r2
 8053974:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8053976:	697b      	ldr	r3, [r7, #20]
 8053978:	0a5b      	lsrs	r3, r3, #9
 805397a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 805397c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 805397e:	2b00      	cmp	r3, #0
 8053980:	d040      	beq.n	8053a04 <f_read+0x228>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8053982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8053984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8053986:	4413      	add	r3, r2
 8053988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 805398a:	8952      	ldrh	r2, [r2, #10]
 805398c:	4293      	cmp	r3, r2
 805398e:	d905      	bls.n	805399c <f_read+0x1c0>
					cc = fs->csize - csect;
 8053990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053992:	895b      	ldrh	r3, [r3, #10]
 8053994:	461a      	mov	r2, r3
 8053996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8053998:	1ad3      	subs	r3, r2, r3
 805399a:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 805399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805399e:	7858      	ldrb	r0, [r3, #1]
 80539a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80539a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80539a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80539a6:	f7fb fba9 	bl	804f0fc <disk_read>
 80539aa:	4603      	mov	r3, r0
 80539ac:	2b00      	cmp	r3, #0
 80539ae:	d00a      	beq.n	80539c6 <f_read+0x1ea>
 80539b0:	69fb      	ldr	r3, [r7, #28]
 80539b2:	2201      	movs	r2, #1
 80539b4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80539b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80539ba:	2101      	movs	r1, #1
 80539bc:	4618      	mov	r0, r3
 80539be:	f7fb feb7 	bl	804f730 <unlock_volume>
 80539c2:	2301      	movs	r3, #1
 80539c4:	e0ac      	b.n	8053b20 <f_read+0x344>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80539c6:	69fb      	ldr	r3, [r7, #28]
 80539c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80539cc:	b25b      	sxtb	r3, r3
 80539ce:	2b00      	cmp	r3, #0
 80539d0:	da14      	bge.n	80539fc <f_read+0x220>
 80539d2:	69fb      	ldr	r3, [r7, #28]
 80539d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80539d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80539d8:	1ad3      	subs	r3, r2, r3
 80539da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80539dc:	429a      	cmp	r2, r3
 80539de:	d90d      	bls.n	80539fc <f_read+0x220>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80539e0:	69fb      	ldr	r3, [r7, #28]
 80539e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80539e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80539e6:	1ad3      	subs	r3, r2, r3
 80539e8:	025b      	lsls	r3, r3, #9
 80539ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80539ec:	18d0      	adds	r0, r2, r3
 80539ee:	69fb      	ldr	r3, [r7, #28]
 80539f0:	3354      	adds	r3, #84	@ 0x54
 80539f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80539f6:	4619      	mov	r1, r3
 80539f8:	f015 ff9f 	bl	806993a <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80539fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80539fe:	025b      	lsls	r3, r3, #9
 8053a00:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 8053a02:	e063      	b.n	8053acc <f_read+0x2f0>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8053a04:	69fb      	ldr	r3, [r7, #28]
 8053a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8053a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053a0a:	429a      	cmp	r2, r3
 8053a0c:	d03d      	beq.n	8053a8a <f_read+0x2ae>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8053a0e:	69fb      	ldr	r3, [r7, #28]
 8053a10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053a14:	b25b      	sxtb	r3, r3
 8053a16:	2b00      	cmp	r3, #0
 8053a18:	da20      	bge.n	8053a5c <f_read+0x280>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8053a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053a1c:	7858      	ldrb	r0, [r3, #1]
 8053a1e:	69fb      	ldr	r3, [r7, #28]
 8053a20:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053a24:	69fb      	ldr	r3, [r7, #28]
 8053a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8053a28:	2301      	movs	r3, #1
 8053a2a:	f7fb fb87 	bl	804f13c <disk_write>
 8053a2e:	4603      	mov	r3, r0
 8053a30:	2b00      	cmp	r3, #0
 8053a32:	d00a      	beq.n	8053a4a <f_read+0x26e>
 8053a34:	69fb      	ldr	r3, [r7, #28]
 8053a36:	2201      	movs	r2, #1
 8053a38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053a3e:	2101      	movs	r1, #1
 8053a40:	4618      	mov	r0, r3
 8053a42:	f7fb fe75 	bl	804f730 <unlock_volume>
 8053a46:	2301      	movs	r3, #1
 8053a48:	e06a      	b.n	8053b20 <f_read+0x344>
					fp->flag &= (BYTE)~FA_DIRTY;
 8053a4a:	69fb      	ldr	r3, [r7, #28]
 8053a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8053a54:	b2da      	uxtb	r2, r3
 8053a56:	69fb      	ldr	r3, [r7, #28]
 8053a58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8053a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053a5e:	7858      	ldrb	r0, [r3, #1]
 8053a60:	69fb      	ldr	r3, [r7, #28]
 8053a62:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053a66:	2301      	movs	r3, #1
 8053a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053a6a:	f7fb fb47 	bl	804f0fc <disk_read>
 8053a6e:	4603      	mov	r3, r0
 8053a70:	2b00      	cmp	r3, #0
 8053a72:	d00a      	beq.n	8053a8a <f_read+0x2ae>
 8053a74:	69fb      	ldr	r3, [r7, #28]
 8053a76:	2201      	movs	r2, #1
 8053a78:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053a7e:	2101      	movs	r1, #1
 8053a80:	4618      	mov	r0, r3
 8053a82:	f7fb fe55 	bl	804f730 <unlock_volume>
 8053a86:	2301      	movs	r3, #1
 8053a88:	e04a      	b.n	8053b20 <f_read+0x344>
			}
#endif
			fp->sect = sect;
 8053a8a:	69fb      	ldr	r3, [r7, #28]
 8053a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053a8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8053a90:	69fb      	ldr	r3, [r7, #28]
 8053a92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053a96:	4613      	mov	r3, r2
 8053a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8053a9c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8053aa0:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8053aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8053aa4:	697b      	ldr	r3, [r7, #20]
 8053aa6:	429a      	cmp	r2, r3
 8053aa8:	d901      	bls.n	8053aae <f_read+0x2d2>
 8053aaa:	697b      	ldr	r3, [r7, #20]
 8053aac:	647b      	str	r3, [r7, #68]	@ 0x44
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8053aae:	69fb      	ldr	r3, [r7, #28]
 8053ab0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053ab4:	69fb      	ldr	r3, [r7, #28]
 8053ab6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053aba:	4613      	mov	r3, r2
 8053abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8053ac0:	440b      	add	r3, r1
 8053ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8053ac4:	4619      	mov	r1, r3
 8053ac6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8053ac8:	f015 ff37 	bl	806993a <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8053acc:	697a      	ldr	r2, [r7, #20]
 8053ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8053ad0:	1ad3      	subs	r3, r2, r3
 8053ad2:	617b      	str	r3, [r7, #20]
 8053ad4:	693b      	ldr	r3, [r7, #16]
 8053ad6:	681a      	ldr	r2, [r3, #0]
 8053ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8053ada:	441a      	add	r2, r3
 8053adc:	693b      	ldr	r3, [r7, #16]
 8053ade:	601a      	str	r2, [r3, #0]
 8053ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8053ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8053ae4:	4413      	add	r3, r2
 8053ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8053ae8:	69fb      	ldr	r3, [r7, #28]
 8053aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053aee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8053af0:	2000      	movs	r0, #0
 8053af2:	4688      	mov	r8, r1
 8053af4:	4681      	mov	r9, r0
 8053af6:	eb12 0108 	adds.w	r1, r2, r8
 8053afa:	60b9      	str	r1, [r7, #8]
 8053afc:	eb43 0309 	adc.w	r3, r3, r9
 8053b00:	60fb      	str	r3, [r7, #12]
 8053b02:	69fb      	ldr	r3, [r7, #28]
 8053b04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8053b08:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 8053b0c:	697b      	ldr	r3, [r7, #20]
 8053b0e:	2b00      	cmp	r3, #0
 8053b10:	f47f aebd 	bne.w	805388e <f_read+0xb2>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8053b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053b16:	2100      	movs	r1, #0
 8053b18:	4618      	mov	r0, r3
 8053b1a:	f7fb fe09 	bl	804f730 <unlock_volume>
 8053b1e:	2300      	movs	r3, #0
}
 8053b20:	4618      	mov	r0, r3
 8053b22:	3754      	adds	r7, #84	@ 0x54
 8053b24:	46bd      	mov	sp, r7
 8053b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08053b2a <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8053b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8053b2e:	b08d      	sub	sp, #52	@ 0x34
 8053b30:	af00      	add	r7, sp, #0
 8053b32:	60f8      	str	r0, [r7, #12]
 8053b34:	60b9      	str	r1, [r7, #8]
 8053b36:	607a      	str	r2, [r7, #4]
 8053b38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8053b3a:	68bb      	ldr	r3, [r7, #8]
 8053b3c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8053b3e:	683b      	ldr	r3, [r7, #0]
 8053b40:	2200      	movs	r2, #0
 8053b42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8053b44:	68fb      	ldr	r3, [r7, #12]
 8053b46:	f107 0210 	add.w	r2, r7, #16
 8053b4a:	4611      	mov	r1, r2
 8053b4c:	4618      	mov	r0, r3
 8053b4e:	f7ff f9dd 	bl	8052f0c <validate>
 8053b52:	4603      	mov	r3, r0
 8053b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8053b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8053b5c:	2b00      	cmp	r3, #0
 8053b5e:	d108      	bne.n	8053b72 <f_write+0x48>
 8053b60:	68fb      	ldr	r3, [r7, #12]
 8053b62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8053b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8053b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8053b6e:	2b00      	cmp	r3, #0
 8053b70:	d009      	beq.n	8053b86 <f_write+0x5c>
 8053b72:	693b      	ldr	r3, [r7, #16]
 8053b74:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8053b78:	4611      	mov	r1, r2
 8053b7a:	4618      	mov	r0, r3
 8053b7c:	f7fb fdd8 	bl	804f730 <unlock_volume>
 8053b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8053b84:	e1af      	b.n	8053ee6 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8053b86:	68fb      	ldr	r3, [r7, #12]
 8053b88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053b8c:	f003 0302 	and.w	r3, r3, #2
 8053b90:	2b00      	cmp	r3, #0
 8053b92:	d106      	bne.n	8053ba2 <f_write+0x78>
 8053b94:	693b      	ldr	r3, [r7, #16]
 8053b96:	2107      	movs	r1, #7
 8053b98:	4618      	mov	r0, r3
 8053b9a:	f7fb fdc9 	bl	804f730 <unlock_volume>
 8053b9e:	2307      	movs	r3, #7
 8053ba0:	e1a1      	b.n	8053ee6 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8053ba2:	693b      	ldr	r3, [r7, #16]
 8053ba4:	781b      	ldrb	r3, [r3, #0]
 8053ba6:	2b04      	cmp	r3, #4
 8053ba8:	f000 8188 	beq.w	8053ebc <f_write+0x392>
 8053bac:	68fb      	ldr	r3, [r7, #12]
 8053bae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053bb2:	687b      	ldr	r3, [r7, #4]
 8053bb4:	18d1      	adds	r1, r2, r3
 8053bb6:	68fb      	ldr	r3, [r7, #12]
 8053bb8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053bbc:	4613      	mov	r3, r2
 8053bbe:	4299      	cmp	r1, r3
 8053bc0:	f080 817c 	bcs.w	8053ebc <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8053bc4:	68fb      	ldr	r3, [r7, #12]
 8053bc6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053bca:	4613      	mov	r3, r2
 8053bcc:	43db      	mvns	r3, r3
 8053bce:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8053bd0:	e174      	b.n	8053ebc <f_write+0x392>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8053bd2:	68fb      	ldr	r3, [r7, #12]
 8053bd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053bd8:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8053bdc:	2500      	movs	r5, #0
 8053bde:	ea54 0305 	orrs.w	r3, r4, r5
 8053be2:	f040 8119 	bne.w	8053e18 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8053be6:	68fb      	ldr	r3, [r7, #12]
 8053be8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8053bec:	f04f 0200 	mov.w	r2, #0
 8053bf0:	f04f 0300 	mov.w	r3, #0
 8053bf4:	0a42      	lsrs	r2, r0, #9
 8053bf6:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8053bfa:	0a4b      	lsrs	r3, r1, #9
 8053bfc:	693b      	ldr	r3, [r7, #16]
 8053bfe:	895b      	ldrh	r3, [r3, #10]
 8053c00:	3b01      	subs	r3, #1
 8053c02:	4013      	ands	r3, r2
 8053c04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8053c06:	69bb      	ldr	r3, [r7, #24]
 8053c08:	2b00      	cmp	r3, #0
 8053c0a:	d150      	bne.n	8053cae <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8053c0c:	68fb      	ldr	r3, [r7, #12]
 8053c0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053c12:	4313      	orrs	r3, r2
 8053c14:	d10c      	bne.n	8053c30 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8053c16:	68fb      	ldr	r3, [r7, #12]
 8053c18:	689b      	ldr	r3, [r3, #8]
 8053c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8053c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8053c1e:	2b00      	cmp	r3, #0
 8053c20:	d11a      	bne.n	8053c58 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8053c22:	68fb      	ldr	r3, [r7, #12]
 8053c24:	2100      	movs	r1, #0
 8053c26:	4618      	mov	r0, r3
 8053c28:	f7fc fc54 	bl	80504d4 <create_chain>
 8053c2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8053c2e:	e013      	b.n	8053c58 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 8053c30:	68fb      	ldr	r3, [r7, #12]
 8053c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8053c34:	2b00      	cmp	r3, #0
 8053c36:	d007      	beq.n	8053c48 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8053c38:	68fb      	ldr	r3, [r7, #12]
 8053c3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053c3e:	68f8      	ldr	r0, [r7, #12]
 8053c40:	f7fc fd83 	bl	805074a <clmt_clust>
 8053c44:	62b8      	str	r0, [r7, #40]	@ 0x28
 8053c46:	e007      	b.n	8053c58 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8053c48:	68fa      	ldr	r2, [r7, #12]
 8053c4a:	68fb      	ldr	r3, [r7, #12]
 8053c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8053c4e:	4619      	mov	r1, r3
 8053c50:	4610      	mov	r0, r2
 8053c52:	f7fc fc3f 	bl	80504d4 <create_chain>
 8053c56:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8053c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8053c5a:	2b00      	cmp	r3, #0
 8053c5c:	f000 8133 	beq.w	8053ec6 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8053c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8053c62:	2b01      	cmp	r3, #1
 8053c64:	d10a      	bne.n	8053c7c <f_write+0x152>
 8053c66:	68fb      	ldr	r3, [r7, #12]
 8053c68:	2202      	movs	r2, #2
 8053c6a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053c6e:	693b      	ldr	r3, [r7, #16]
 8053c70:	2102      	movs	r1, #2
 8053c72:	4618      	mov	r0, r3
 8053c74:	f7fb fd5c 	bl	804f730 <unlock_volume>
 8053c78:	2302      	movs	r3, #2
 8053c7a:	e134      	b.n	8053ee6 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8053c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8053c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8053c82:	d10a      	bne.n	8053c9a <f_write+0x170>
 8053c84:	68fb      	ldr	r3, [r7, #12]
 8053c86:	2201      	movs	r2, #1
 8053c88:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053c8c:	693b      	ldr	r3, [r7, #16]
 8053c8e:	2101      	movs	r1, #1
 8053c90:	4618      	mov	r0, r3
 8053c92:	f7fb fd4d 	bl	804f730 <unlock_volume>
 8053c96:	2301      	movs	r3, #1
 8053c98:	e125      	b.n	8053ee6 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 8053c9a:	68fb      	ldr	r3, [r7, #12]
 8053c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053c9e:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8053ca0:	68fb      	ldr	r3, [r7, #12]
 8053ca2:	689b      	ldr	r3, [r3, #8]
 8053ca4:	2b00      	cmp	r3, #0
 8053ca6:	d102      	bne.n	8053cae <f_write+0x184>
 8053ca8:	68fb      	ldr	r3, [r7, #12]
 8053caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8053cac:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8053cae:	68fb      	ldr	r3, [r7, #12]
 8053cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053cb4:	b25b      	sxtb	r3, r3
 8053cb6:	2b00      	cmp	r3, #0
 8053cb8:	da20      	bge.n	8053cfc <f_write+0x1d2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8053cba:	693b      	ldr	r3, [r7, #16]
 8053cbc:	7858      	ldrb	r0, [r3, #1]
 8053cbe:	68fb      	ldr	r3, [r7, #12]
 8053cc0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053cc4:	68fb      	ldr	r3, [r7, #12]
 8053cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8053cc8:	2301      	movs	r3, #1
 8053cca:	f7fb fa37 	bl	804f13c <disk_write>
 8053cce:	4603      	mov	r3, r0
 8053cd0:	2b00      	cmp	r3, #0
 8053cd2:	d00a      	beq.n	8053cea <f_write+0x1c0>
 8053cd4:	68fb      	ldr	r3, [r7, #12]
 8053cd6:	2201      	movs	r2, #1
 8053cd8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053cdc:	693b      	ldr	r3, [r7, #16]
 8053cde:	2101      	movs	r1, #1
 8053ce0:	4618      	mov	r0, r3
 8053ce2:	f7fb fd25 	bl	804f730 <unlock_volume>
 8053ce6:	2301      	movs	r3, #1
 8053ce8:	e0fd      	b.n	8053ee6 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8053cea:	68fb      	ldr	r3, [r7, #12]
 8053cec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8053cf4:	b2da      	uxtb	r2, r3
 8053cf6:	68fb      	ldr	r3, [r7, #12]
 8053cf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8053cfc:	693a      	ldr	r2, [r7, #16]
 8053cfe:	68fb      	ldr	r3, [r7, #12]
 8053d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8053d02:	4619      	mov	r1, r3
 8053d04:	4610      	mov	r0, r2
 8053d06:	f7fb ff89 	bl	804fc1c <clst2sect>
 8053d0a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8053d0c:	697b      	ldr	r3, [r7, #20]
 8053d0e:	2b00      	cmp	r3, #0
 8053d10:	d10a      	bne.n	8053d28 <f_write+0x1fe>
 8053d12:	68fb      	ldr	r3, [r7, #12]
 8053d14:	2202      	movs	r2, #2
 8053d16:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053d1a:	693b      	ldr	r3, [r7, #16]
 8053d1c:	2102      	movs	r1, #2
 8053d1e:	4618      	mov	r0, r3
 8053d20:	f7fb fd06 	bl	804f730 <unlock_volume>
 8053d24:	2302      	movs	r3, #2
 8053d26:	e0de      	b.n	8053ee6 <f_write+0x3bc>
			sect += csect;
 8053d28:	697a      	ldr	r2, [r7, #20]
 8053d2a:	69bb      	ldr	r3, [r7, #24]
 8053d2c:	4413      	add	r3, r2
 8053d2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8053d30:	687b      	ldr	r3, [r7, #4]
 8053d32:	0a5b      	lsrs	r3, r3, #9
 8053d34:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8053d36:	6a3b      	ldr	r3, [r7, #32]
 8053d38:	2b00      	cmp	r3, #0
 8053d3a:	d044      	beq.n	8053dc6 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8053d3c:	69ba      	ldr	r2, [r7, #24]
 8053d3e:	6a3b      	ldr	r3, [r7, #32]
 8053d40:	4413      	add	r3, r2
 8053d42:	693a      	ldr	r2, [r7, #16]
 8053d44:	8952      	ldrh	r2, [r2, #10]
 8053d46:	4293      	cmp	r3, r2
 8053d48:	d905      	bls.n	8053d56 <f_write+0x22c>
					cc = fs->csize - csect;
 8053d4a:	693b      	ldr	r3, [r7, #16]
 8053d4c:	895b      	ldrh	r3, [r3, #10]
 8053d4e:	461a      	mov	r2, r3
 8053d50:	69bb      	ldr	r3, [r7, #24]
 8053d52:	1ad3      	subs	r3, r2, r3
 8053d54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8053d56:	693b      	ldr	r3, [r7, #16]
 8053d58:	7858      	ldrb	r0, [r3, #1]
 8053d5a:	6a3b      	ldr	r3, [r7, #32]
 8053d5c:	697a      	ldr	r2, [r7, #20]
 8053d5e:	69f9      	ldr	r1, [r7, #28]
 8053d60:	f7fb f9ec 	bl	804f13c <disk_write>
 8053d64:	4603      	mov	r3, r0
 8053d66:	2b00      	cmp	r3, #0
 8053d68:	d00a      	beq.n	8053d80 <f_write+0x256>
 8053d6a:	68fb      	ldr	r3, [r7, #12]
 8053d6c:	2201      	movs	r2, #1
 8053d6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053d72:	693b      	ldr	r3, [r7, #16]
 8053d74:	2101      	movs	r1, #1
 8053d76:	4618      	mov	r0, r3
 8053d78:	f7fb fcda 	bl	804f730 <unlock_volume>
 8053d7c:	2301      	movs	r3, #1
 8053d7e:	e0b2      	b.n	8053ee6 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8053d80:	68fb      	ldr	r3, [r7, #12]
 8053d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8053d84:	697b      	ldr	r3, [r7, #20]
 8053d86:	1ad3      	subs	r3, r2, r3
 8053d88:	6a3a      	ldr	r2, [r7, #32]
 8053d8a:	429a      	cmp	r2, r3
 8053d8c:	d917      	bls.n	8053dbe <f_write+0x294>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8053d8e:	68fb      	ldr	r3, [r7, #12]
 8053d90:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8053d94:	68fb      	ldr	r3, [r7, #12]
 8053d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8053d98:	697b      	ldr	r3, [r7, #20]
 8053d9a:	1ad3      	subs	r3, r2, r3
 8053d9c:	025b      	lsls	r3, r3, #9
 8053d9e:	69fa      	ldr	r2, [r7, #28]
 8053da0:	4413      	add	r3, r2
 8053da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8053da6:	4619      	mov	r1, r3
 8053da8:	f015 fdc7 	bl	806993a <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8053dac:	68fb      	ldr	r3, [r7, #12]
 8053dae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8053db6:	b2da      	uxtb	r2, r3
 8053db8:	68fb      	ldr	r3, [r7, #12]
 8053dba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8053dbe:	6a3b      	ldr	r3, [r7, #32]
 8053dc0:	025b      	lsls	r3, r3, #9
 8053dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8053dc4:	e04f      	b.n	8053e66 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8053dc6:	68fb      	ldr	r3, [r7, #12]
 8053dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8053dca:	697a      	ldr	r2, [r7, #20]
 8053dcc:	429a      	cmp	r2, r3
 8053dce:	d020      	beq.n	8053e12 <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 8053dd0:	68fb      	ldr	r3, [r7, #12]
 8053dd2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8053dd6:	68fb      	ldr	r3, [r7, #12]
 8053dd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8053ddc:	4290      	cmp	r0, r2
 8053dde:	eb71 0303 	sbcs.w	r3, r1, r3
 8053de2:	d216      	bcs.n	8053e12 <f_write+0x2e8>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8053de4:	693b      	ldr	r3, [r7, #16]
 8053de6:	7858      	ldrb	r0, [r3, #1]
 8053de8:	68fb      	ldr	r3, [r7, #12]
 8053dea:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053dee:	2301      	movs	r3, #1
 8053df0:	697a      	ldr	r2, [r7, #20]
 8053df2:	f7fb f983 	bl	804f0fc <disk_read>
 8053df6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8053df8:	2b00      	cmp	r3, #0
 8053dfa:	d00a      	beq.n	8053e12 <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8053dfc:	68fb      	ldr	r3, [r7, #12]
 8053dfe:	2201      	movs	r2, #1
 8053e00:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8053e04:	693b      	ldr	r3, [r7, #16]
 8053e06:	2101      	movs	r1, #1
 8053e08:	4618      	mov	r0, r3
 8053e0a:	f7fb fc91 	bl	804f730 <unlock_volume>
 8053e0e:	2301      	movs	r3, #1
 8053e10:	e069      	b.n	8053ee6 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 8053e12:	68fb      	ldr	r3, [r7, #12]
 8053e14:	697a      	ldr	r2, [r7, #20]
 8053e16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8053e18:	68fb      	ldr	r3, [r7, #12]
 8053e1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053e1e:	4613      	mov	r3, r2
 8053e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8053e24:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8053e28:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8053e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8053e2c:	687b      	ldr	r3, [r7, #4]
 8053e2e:	429a      	cmp	r2, r3
 8053e30:	d901      	bls.n	8053e36 <f_write+0x30c>
 8053e32:	687b      	ldr	r3, [r7, #4]
 8053e34:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8053e36:	68fb      	ldr	r3, [r7, #12]
 8053e38:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053e3c:	68fb      	ldr	r3, [r7, #12]
 8053e3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053e42:	4613      	mov	r3, r2
 8053e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8053e48:	440b      	add	r3, r1
 8053e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8053e4c:	69f9      	ldr	r1, [r7, #28]
 8053e4e:	4618      	mov	r0, r3
 8053e50:	f015 fd73 	bl	806993a <memcpy>
		fp->flag |= FA_DIRTY;
 8053e54:	68fb      	ldr	r3, [r7, #12]
 8053e56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053e5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8053e5e:	b2da      	uxtb	r2, r3
 8053e60:	68fb      	ldr	r3, [r7, #12]
 8053e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8053e66:	687a      	ldr	r2, [r7, #4]
 8053e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053e6a:	1ad3      	subs	r3, r2, r3
 8053e6c:	607b      	str	r3, [r7, #4]
 8053e6e:	683b      	ldr	r3, [r7, #0]
 8053e70:	681a      	ldr	r2, [r3, #0]
 8053e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053e74:	441a      	add	r2, r3
 8053e76:	683b      	ldr	r3, [r7, #0]
 8053e78:	601a      	str	r2, [r3, #0]
 8053e7a:	69fa      	ldr	r2, [r7, #28]
 8053e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8053e7e:	4413      	add	r3, r2
 8053e80:	61fb      	str	r3, [r7, #28]
 8053e82:	68fb      	ldr	r3, [r7, #12]
 8053e84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8053e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8053e8a:	2000      	movs	r0, #0
 8053e8c:	4688      	mov	r8, r1
 8053e8e:	4681      	mov	r9, r0
 8053e90:	eb12 0a08 	adds.w	sl, r2, r8
 8053e94:	eb43 0b09 	adc.w	fp, r3, r9
 8053e98:	68fb      	ldr	r3, [r7, #12]
 8053e9a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8053e9e:	68fb      	ldr	r3, [r7, #12]
 8053ea0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8053ea4:	68f9      	ldr	r1, [r7, #12]
 8053ea6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8053eaa:	4282      	cmp	r2, r0
 8053eac:	eb73 0601 	sbcs.w	r6, r3, r1
 8053eb0:	d201      	bcs.n	8053eb6 <f_write+0x38c>
 8053eb2:	4602      	mov	r2, r0
 8053eb4:	460b      	mov	r3, r1
 8053eb6:	68f9      	ldr	r1, [r7, #12]
 8053eb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8053ebc:	687b      	ldr	r3, [r7, #4]
 8053ebe:	2b00      	cmp	r3, #0
 8053ec0:	f47f ae87 	bne.w	8053bd2 <f_write+0xa8>
 8053ec4:	e000      	b.n	8053ec8 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8053ec6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8053ec8:	68fb      	ldr	r3, [r7, #12]
 8053eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8053ed2:	b2da      	uxtb	r2, r3
 8053ed4:	68fb      	ldr	r3, [r7, #12]
 8053ed6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8053eda:	693b      	ldr	r3, [r7, #16]
 8053edc:	2100      	movs	r1, #0
 8053ede:	4618      	mov	r0, r3
 8053ee0:	f7fb fc26 	bl	804f730 <unlock_volume>
 8053ee4:	2300      	movs	r3, #0
}
 8053ee6:	4618      	mov	r0, r3
 8053ee8:	3734      	adds	r7, #52	@ 0x34
 8053eea:	46bd      	mov	sp, r7
 8053eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08053ef0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8053ef0:	b580      	push	{r7, lr}
 8053ef2:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 8053ef6:	af00      	add	r7, sp, #0
 8053ef8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053efc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f00:	6018      	str	r0, [r3, #0]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8053f02:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f06:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f0a:	681b      	ldr	r3, [r3, #0]
 8053f0c:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8053f10:	4611      	mov	r1, r2
 8053f12:	4618      	mov	r0, r3
 8053f14:	f7fe fffa 	bl	8052f0c <validate>
 8053f18:	4603      	mov	r3, r0
 8053f1a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 8053f1e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8053f22:	2b00      	cmp	r3, #0
 8053f24:	f040 818b 	bne.w	805423e <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8053f28:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f2c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f30:	681b      	ldr	r3, [r3, #0]
 8053f32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8053f3a:	2b00      	cmp	r3, #0
 8053f3c:	f000 817f 	beq.w	805423e <f_sync+0x34e>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8053f40:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f44:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f48:	681b      	ldr	r3, [r3, #0]
 8053f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053f4e:	b25b      	sxtb	r3, r3
 8053f50:	2b00      	cmp	r3, #0
 8053f52:	da2e      	bge.n	8053fb2 <f_sync+0xc2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8053f54:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8053f58:	7858      	ldrb	r0, [r3, #1]
 8053f5a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f5e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f62:	681b      	ldr	r3, [r3, #0]
 8053f64:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8053f68:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f6c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f70:	681b      	ldr	r3, [r3, #0]
 8053f72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8053f74:	2301      	movs	r3, #1
 8053f76:	f7fb f8e1 	bl	804f13c <disk_write>
 8053f7a:	4603      	mov	r3, r0
 8053f7c:	2b00      	cmp	r3, #0
 8053f7e:	d007      	beq.n	8053f90 <f_sync+0xa0>
 8053f80:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8053f84:	2101      	movs	r1, #1
 8053f86:	4618      	mov	r0, r3
 8053f88:	f7fb fbd2 	bl	804f730 <unlock_volume>
 8053f8c:	2301      	movs	r3, #1
 8053f8e:	e160      	b.n	8054252 <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 8053f90:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053f94:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053f98:	681b      	ldr	r3, [r3, #0]
 8053f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8053f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8053fa2:	b2da      	uxtb	r2, r3
 8053fa4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053fa8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053fac:	681b      	ldr	r3, [r3, #0]
 8053fae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8053fb2:	f7fb f902 	bl	804f1ba <get_fattime>
 8053fb6:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8053fba:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8053fbe:	781b      	ldrb	r3, [r3, #0]
 8053fc0:	2b04      	cmp	r3, #4
 8053fc2:	f040 80ca 	bne.w	805415a <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8053fc6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053fca:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053fce:	681b      	ldr	r3, [r3, #0]
 8053fd0:	4618      	mov	r0, r3
 8053fd2:	f7fc f93d 	bl	8050250 <fill_first_frag>
 8053fd6:	4603      	mov	r3, r0
 8053fd8:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 8053fdc:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8053fe0:	2b00      	cmp	r3, #0
 8053fe2:	d112      	bne.n	805400a <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8053fe4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053fe8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053fec:	6818      	ldr	r0, [r3, #0]
 8053fee:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8053ff2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8053ff6:	681b      	ldr	r3, [r3, #0]
 8053ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8053ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8053ffe:	4619      	mov	r1, r3
 8054000:	f7fc f955 	bl	80502ae <fill_last_frag>
 8054004:	4603      	mov	r3, r0
 8054006:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 805400a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 805400e:	2b00      	cmp	r3, #0
 8054010:	f040 8115 	bne.w	805423e <f_sync+0x34e>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 8054014:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054018:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 805401c:	60da      	str	r2, [r3, #12]
 805401e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054022:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8054026:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 8054028:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 805402c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054030:	681a      	ldr	r2, [r3, #0]
 8054032:	f107 0308 	add.w	r3, r7, #8
 8054036:	4611      	mov	r1, r2
 8054038:	4618      	mov	r0, r3
 805403a:	f7fd f92e 	bl	805129a <load_obj_xdir>
 805403e:	4603      	mov	r3, r0
 8054040:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 8054044:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8054048:	2b00      	cmp	r3, #0
 805404a:	f040 80f8 	bne.w	805423e <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 805404e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054052:	691b      	ldr	r3, [r3, #16]
 8054054:	3304      	adds	r3, #4
 8054056:	781a      	ldrb	r2, [r3, #0]
 8054058:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 805405c:	691b      	ldr	r3, [r3, #16]
 805405e:	3304      	adds	r3, #4
 8054060:	f042 0220 	orr.w	r2, r2, #32
 8054064:	b2d2      	uxtb	r2, r2
 8054066:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8054068:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 805406c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054070:	681b      	ldr	r3, [r3, #0]
 8054072:	79da      	ldrb	r2, [r3, #7]
 8054074:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054078:	691b      	ldr	r3, [r3, #16]
 805407a:	3321      	adds	r3, #33	@ 0x21
 805407c:	f042 0201 	orr.w	r2, r2, #1
 8054080:	b2d2      	uxtb	r2, r2
 8054082:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 8054084:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054088:	691b      	ldr	r3, [r3, #16]
 805408a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 805408e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8054092:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054096:	681b      	ldr	r3, [r3, #0]
 8054098:	689b      	ldr	r3, [r3, #8]
 805409a:	4619      	mov	r1, r3
 805409c:	4610      	mov	r0, r2
 805409e:	f7fb f9c6 	bl	804f42e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 80540a2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80540a6:	691b      	ldr	r3, [r3, #16]
 80540a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80540ac:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80540b0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80540b4:	681b      	ldr	r3, [r3, #0]
 80540b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80540ba:	4608      	mov	r0, r1
 80540bc:	f7fb f9e3 	bl	804f486 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 80540c0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80540c4:	691b      	ldr	r3, [r3, #16]
 80540c6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80540ca:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80540ce:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80540d2:	681b      	ldr	r3, [r3, #0]
 80540d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80540d8:	4608      	mov	r0, r1
 80540da:	f7fb f9d4 	bl	804f486 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80540de:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80540e2:	691b      	ldr	r3, [r3, #16]
 80540e4:	330c      	adds	r3, #12
 80540e6:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80540ea:	4618      	mov	r0, r3
 80540ec:	f7fb f99f 	bl	804f42e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80540f0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80540f4:	691b      	ldr	r3, [r3, #16]
 80540f6:	3315      	adds	r3, #21
 80540f8:	2200      	movs	r2, #0
 80540fa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80540fc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054100:	691b      	ldr	r3, [r3, #16]
 8054102:	3310      	adds	r3, #16
 8054104:	2100      	movs	r1, #0
 8054106:	4618      	mov	r0, r3
 8054108:	f7fb f991 	bl	804f42e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 805410c:	f107 0308 	add.w	r3, r7, #8
 8054110:	4618      	mov	r0, r3
 8054112:	f7fd f8fb 	bl	805130c <store_xdir>
 8054116:	4603      	mov	r3, r0
 8054118:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 805411c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8054120:	2b00      	cmp	r3, #0
 8054122:	f040 808c 	bne.w	805423e <f_sync+0x34e>
							res = sync_fs(fs);
 8054126:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 805412a:	4618      	mov	r0, r3
 805412c:	f7fb fd08 	bl	804fb40 <sync_fs>
 8054130:	4603      	mov	r3, r0
 8054132:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 8054136:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 805413a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 805413e:	681b      	ldr	r3, [r3, #0]
 8054140:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8054144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8054148:	b2da      	uxtb	r2, r3
 805414a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 805414e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054152:	681b      	ldr	r3, [r3, #0]
 8054154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8054158:	e071      	b.n	805423e <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 805415a:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 805415e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8054162:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054166:	681b      	ldr	r3, [r3, #0]
 8054168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 805416a:	4619      	mov	r1, r3
 805416c:	4610      	mov	r0, r2
 805416e:	f7fb fcb9 	bl	804fae4 <move_window>
 8054172:	4603      	mov	r3, r0
 8054174:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 8054178:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 805417c:	2b00      	cmp	r3, #0
 805417e:	d15e      	bne.n	805423e <f_sync+0x34e>
					dir = fp->dir_ptr;
 8054180:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8054184:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054188:	681b      	ldr	r3, [r3, #0]
 805418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 805418c:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8054190:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8054194:	330b      	adds	r3, #11
 8054196:	781a      	ldrb	r2, [r3, #0]
 8054198:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 805419c:	330b      	adds	r3, #11
 805419e:	f042 0220 	orr.w	r2, r2, #32
 80541a2:	b2d2      	uxtb	r2, r2
 80541a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80541a6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80541aa:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80541ae:	681b      	ldr	r3, [r3, #0]
 80541b0:	6818      	ldr	r0, [r3, #0]
 80541b2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80541b6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80541ba:	681b      	ldr	r3, [r3, #0]
 80541bc:	689b      	ldr	r3, [r3, #8]
 80541be:	461a      	mov	r2, r3
 80541c0:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 80541c4:	f7fc fcf3 	bl	8050bae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80541c8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80541cc:	f103 001c 	add.w	r0, r3, #28
 80541d0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80541d4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80541d8:	681b      	ldr	r3, [r3, #0]
 80541da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80541de:	4613      	mov	r3, r2
 80541e0:	4619      	mov	r1, r3
 80541e2:	f7fb f924 	bl	804f42e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80541e6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80541ea:	3316      	adds	r3, #22
 80541ec:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80541f0:	4618      	mov	r0, r3
 80541f2:	f7fb f91c 	bl	804f42e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80541f6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80541fa:	3312      	adds	r3, #18
 80541fc:	2100      	movs	r1, #0
 80541fe:	4618      	mov	r0, r3
 8054200:	f7fb f8fa 	bl	804f3f8 <st_word>
					fs->wflag = 1;
 8054204:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054208:	2201      	movs	r2, #1
 805420a:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 805420c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054210:	4618      	mov	r0, r3
 8054212:	f7fb fc95 	bl	804fb40 <sync_fs>
 8054216:	4603      	mov	r3, r0
 8054218:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 805421c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8054220:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054224:	681b      	ldr	r3, [r3, #0]
 8054226:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 805422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 805422e:	b2da      	uxtb	r2, r3
 8054230:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8054234:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8054238:	681b      	ldr	r3, [r3, #0]
 805423a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 805423e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8054242:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 8054246:	4611      	mov	r1, r2
 8054248:	4618      	mov	r0, r3
 805424a:	f7fb fa71 	bl	804f730 <unlock_volume>
 805424e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 8054252:	4618      	mov	r0, r3
 8054254:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 8054258:	46bd      	mov	sp, r7
 805425a:	bd80      	pop	{r7, pc}

0805425c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 805425c:	b580      	push	{r7, lr}
 805425e:	b084      	sub	sp, #16
 8054260:	af00      	add	r7, sp, #0
 8054262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8054264:	6878      	ldr	r0, [r7, #4]
 8054266:	f7ff fe43 	bl	8053ef0 <f_sync>
 805426a:	4603      	mov	r3, r0
 805426c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 805426e:	7bfb      	ldrb	r3, [r7, #15]
 8054270:	2b00      	cmp	r3, #0
 8054272:	d11d      	bne.n	80542b0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8054274:	687b      	ldr	r3, [r7, #4]
 8054276:	f107 0208 	add.w	r2, r7, #8
 805427a:	4611      	mov	r1, r2
 805427c:	4618      	mov	r0, r3
 805427e:	f7fe fe45 	bl	8052f0c <validate>
 8054282:	4603      	mov	r3, r0
 8054284:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8054286:	7bfb      	ldrb	r3, [r7, #15]
 8054288:	2b00      	cmp	r3, #0
 805428a:	d111      	bne.n	80542b0 <f_close+0x54>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 805428c:	687b      	ldr	r3, [r7, #4]
 805428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8054290:	4618      	mov	r0, r3
 8054292:	f7fb fb8b 	bl	804f9ac <dec_share>
 8054296:	4603      	mov	r3, r0
 8054298:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 805429a:	7bfb      	ldrb	r3, [r7, #15]
 805429c:	2b00      	cmp	r3, #0
 805429e:	d102      	bne.n	80542a6 <f_close+0x4a>
 80542a0:	687b      	ldr	r3, [r7, #4]
 80542a2:	2200      	movs	r2, #0
 80542a4:	601a      	str	r2, [r3, #0]
#else
			fp->obj.fs = 0;	/* Invalidate file object */
#endif
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
 80542a6:	68bb      	ldr	r3, [r7, #8]
 80542a8:	2100      	movs	r1, #0
 80542aa:	4618      	mov	r0, r3
 80542ac:	f7fb fa40 	bl	804f730 <unlock_volume>
#endif
		}
	}
	return res;
 80542b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80542b2:	4618      	mov	r0, r3
 80542b4:	3710      	adds	r7, #16
 80542b6:	46bd      	mov	sp, r7
 80542b8:	bd80      	pop	{r7, pc}

080542ba <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80542ba:	b580      	push	{r7, lr}
 80542bc:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 80542c0:	af00      	add	r7, sp, #0
 80542c2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80542c6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80542ca:	6018      	str	r0, [r3, #0]
 80542cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80542d0:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80542d4:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80542d6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80542da:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80542de:	681b      	ldr	r3, [r3, #0]
 80542e0:	2b00      	cmp	r3, #0
 80542e2:	d101      	bne.n	80542e8 <f_opendir+0x2e>
 80542e4:	2309      	movs	r3, #9
 80542e6:	e102      	b.n	80544ee <f_opendir+0x234>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 80542e8:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 80542ec:	463b      	mov	r3, r7
 80542ee:	2200      	movs	r2, #0
 80542f0:	4618      	mov	r0, r3
 80542f2:	f7fe fac1 	bl	8052878 <mount_volume>
 80542f6:	4603      	mov	r3, r0
 80542f8:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 80542fc:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8054300:	2b00      	cmp	r3, #0
 8054302:	f040 80df 	bne.w	80544c4 <f_opendir+0x20a>
		dp->obj.fs = fs;
 8054306:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 805430a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805430e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054312:	681b      	ldr	r3, [r3, #0]
 8054314:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8054316:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 805431a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 805431e:	60da      	str	r2, [r3, #12]
 8054320:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8054324:	f107 0208 	add.w	r2, r7, #8
 8054328:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 805432a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805432e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8054332:	681a      	ldr	r2, [r3, #0]
 8054334:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054338:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805433c:	4611      	mov	r1, r2
 805433e:	6818      	ldr	r0, [r3, #0]
 8054340:	f7fe f842 	bl	80523c8 <follow_path>
 8054344:	4603      	mov	r3, r0
 8054346:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
		if (res == FR_OK) {						/* Follow completed */
 805434a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 805434e:	2b00      	cmp	r3, #0
 8054350:	f040 80b1 	bne.w	80544b6 <f_opendir+0x1fc>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8054354:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054358:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805435c:	681b      	ldr	r3, [r3, #0]
 805435e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8054362:	b25b      	sxtb	r3, r3
 8054364:	2b00      	cmp	r3, #0
 8054366:	db60      	blt.n	805442a <f_opendir+0x170>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8054368:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805436c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054370:	681b      	ldr	r3, [r3, #0]
 8054372:	799b      	ldrb	r3, [r3, #6]
 8054374:	f003 0310 	and.w	r3, r3, #16
 8054378:	2b00      	cmp	r3, #0
 805437a:	d053      	beq.n	8054424 <f_opendir+0x16a>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 805437c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8054380:	781b      	ldrb	r3, [r3, #0]
 8054382:	2b04      	cmp	r3, #4
 8054384:	d13a      	bne.n	80543fc <f_opendir+0x142>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory inforamation */
 8054386:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805438a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805438e:	681b      	ldr	r3, [r3, #0]
 8054390:	689a      	ldr	r2, [r3, #8]
 8054392:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054396:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805439a:	681b      	ldr	r3, [r3, #0]
 805439c:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 805439e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80543a2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80543a6:	681b      	ldr	r3, [r3, #0]
 80543a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80543ac:	4613      	mov	r3, r2
 80543ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80543b2:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 80543b6:	f2a2 426c 	subw	r2, r2, #1132	@ 0x46c
 80543ba:	6812      	ldr	r2, [r2, #0]
 80543bc:	79d2      	ldrb	r2, [r2, #7]
 80543be:	431a      	orrs	r2, r3
 80543c0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80543c4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80543c8:	681b      	ldr	r3, [r3, #0]
 80543ca:	625a      	str	r2, [r3, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 80543cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80543d0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80543d4:	681b      	ldr	r3, [r3, #0]
 80543d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80543d8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80543dc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80543e0:	681b      	ldr	r3, [r3, #0]
 80543e2:	629a      	str	r2, [r3, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80543e4:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 80543e8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80543ec:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80543f0:	681b      	ldr	r3, [r3, #0]
 80543f2:	4619      	mov	r1, r3
 80543f4:	4610      	mov	r0, r2
 80543f6:	f7fc ff27 	bl	8051248 <init_alloc_info>
 80543fa:	e016      	b.n	805442a <f_opendir+0x170>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80543fc:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 8054400:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054404:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054408:	681b      	ldr	r3, [r3, #0]
 805440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 805440c:	4619      	mov	r1, r3
 805440e:	4610      	mov	r0, r2
 8054410:	f7fc fbae 	bl	8050b70 <ld_clust>
 8054414:	4602      	mov	r2, r0
 8054416:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805441a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805441e:	681b      	ldr	r3, [r3, #0]
 8054420:	609a      	str	r2, [r3, #8]
 8054422:	e002      	b.n	805442a <f_opendir+0x170>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8054424:	2305      	movs	r3, #5
 8054426:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				}
			}
			if (res == FR_OK) {
 805442a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 805442e:	2b00      	cmp	r3, #0
 8054430:	d141      	bne.n	80544b6 <f_opendir+0x1fc>
				dp->obj.id = fs->id;
 8054432:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8054436:	88da      	ldrh	r2, [r3, #6]
 8054438:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805443c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054440:	681b      	ldr	r3, [r3, #0]
 8054442:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8054444:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054448:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805444c:	2100      	movs	r1, #0
 805444e:	6818      	ldr	r0, [r3, #0]
 8054450:	f7fc fa07 	bl	8050862 <dir_sdi>
 8054454:	4603      	mov	r3, r0
 8054456:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
#if FF_FS_LOCK
				if (res == FR_OK) {
 805445a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 805445e:	2b00      	cmp	r3, #0
 8054460:	d129      	bne.n	80544b6 <f_opendir+0x1fc>
					if (dp->obj.sclust != 0) {
 8054462:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054466:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805446a:	681b      	ldr	r3, [r3, #0]
 805446c:	689b      	ldr	r3, [r3, #8]
 805446e:	2b00      	cmp	r3, #0
 8054470:	d01a      	beq.n	80544a8 <f_opendir+0x1ee>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 8054472:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054476:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805447a:	2100      	movs	r1, #0
 805447c:	6818      	ldr	r0, [r3, #0]
 805447e:	f7fb fa07 	bl	804f890 <inc_share>
 8054482:	4602      	mov	r2, r0
 8054484:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054488:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805448c:	681b      	ldr	r3, [r3, #0]
 805448e:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8054490:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054494:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054498:	681b      	ldr	r3, [r3, #0]
 805449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805449c:	2b00      	cmp	r3, #0
 805449e:	d10a      	bne.n	80544b6 <f_opendir+0x1fc>
 80544a0:	2312      	movs	r3, #18
 80544a2:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 80544a6:	e006      	b.n	80544b6 <f_opendir+0x1fc>
					} else {
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 80544a8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80544ac:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80544b0:	681b      	ldr	r3, [r3, #0]
 80544b2:	2200      	movs	r2, #0
 80544b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80544b6:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80544ba:	2b04      	cmp	r3, #4
 80544bc:	d102      	bne.n	80544c4 <f_opendir+0x20a>
 80544be:	2305      	movs	r3, #5
 80544c0:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 80544c4:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80544c8:	2b00      	cmp	r3, #0
 80544ca:	d006      	beq.n	80544da <f_opendir+0x220>
 80544cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80544d0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80544d4:	681b      	ldr	r3, [r3, #0]
 80544d6:	2200      	movs	r2, #0
 80544d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80544da:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80544de:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 80544e2:	4611      	mov	r1, r2
 80544e4:	4618      	mov	r0, r3
 80544e6:	f7fb f923 	bl	804f730 <unlock_volume>
 80544ea:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 80544ee:	4618      	mov	r0, r3
 80544f0:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 80544f4:	46bd      	mov	sp, r7
 80544f6:	bd80      	pop	{r7, pc}

080544f8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80544f8:	b580      	push	{r7, lr}
 80544fa:	b084      	sub	sp, #16
 80544fc:	af00      	add	r7, sp, #0
 80544fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8054500:	687b      	ldr	r3, [r7, #4]
 8054502:	f107 0208 	add.w	r2, r7, #8
 8054506:	4611      	mov	r1, r2
 8054508:	4618      	mov	r0, r3
 805450a:	f7fe fcff 	bl	8052f0c <validate>
 805450e:	4603      	mov	r3, r0
 8054510:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8054512:	7bfb      	ldrb	r3, [r7, #15]
 8054514:	2b00      	cmp	r3, #0
 8054516:	d115      	bne.n	8054544 <f_closedir+0x4c>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8054518:	687b      	ldr	r3, [r7, #4]
 805451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805451c:	2b00      	cmp	r3, #0
 805451e:	d006      	beq.n	805452e <f_closedir+0x36>
 8054520:	687b      	ldr	r3, [r7, #4]
 8054522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8054524:	4618      	mov	r0, r3
 8054526:	f7fb fa41 	bl	804f9ac <dec_share>
 805452a:	4603      	mov	r3, r0
 805452c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 805452e:	7bfb      	ldrb	r3, [r7, #15]
 8054530:	2b00      	cmp	r3, #0
 8054532:	d102      	bne.n	805453a <f_closedir+0x42>
 8054534:	687b      	ldr	r3, [r7, #4]
 8054536:	2200      	movs	r2, #0
 8054538:	601a      	str	r2, [r3, #0]
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
 805453a:	68bb      	ldr	r3, [r7, #8]
 805453c:	2100      	movs	r1, #0
 805453e:	4618      	mov	r0, r3
 8054540:	f7fb f8f6 	bl	804f730 <unlock_volume>
#endif
	}
	return res;
 8054544:	7bfb      	ldrb	r3, [r7, #15]
}
 8054546:	4618      	mov	r0, r3
 8054548:	3710      	adds	r7, #16
 805454a:	46bd      	mov	sp, r7
 805454c:	bd80      	pop	{r7, pc}

0805454e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 805454e:	b580      	push	{r7, lr}
 8054550:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 8054554:	af00      	add	r7, sp, #0
 8054556:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805455a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 805455e:	6018      	str	r0, [r3, #0]
 8054560:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054564:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8054568:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 805456a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 805456e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054572:	681b      	ldr	r3, [r3, #0]
 8054574:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8054578:	4611      	mov	r1, r2
 805457a:	4618      	mov	r0, r3
 805457c:	f7fe fcc6 	bl	8052f0c <validate>
 8054580:	4603      	mov	r3, r0
 8054582:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 8054586:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 805458a:	2b00      	cmp	r3, #0
 805458c:	d150      	bne.n	8054630 <f_readdir+0xe2>
		if (!fno) {
 805458e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054592:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8054596:	681b      	ldr	r3, [r3, #0]
 8054598:	2b00      	cmp	r3, #0
 805459a:	d10b      	bne.n	80545b4 <f_readdir+0x66>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 805459c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80545a0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80545a4:	2100      	movs	r1, #0
 80545a6:	6818      	ldr	r0, [r3, #0]
 80545a8:	f7fc f95b 	bl	8050862 <dir_sdi>
 80545ac:	4603      	mov	r3, r0
 80545ae:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 80545b2:	e03d      	b.n	8054630 <f_readdir+0xe2>
		} else {
			INIT_NAMBUF(fs);
 80545b4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80545b8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80545bc:	60da      	str	r2, [r3, #12]
 80545be:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80545c2:	f107 0208 	add.w	r2, r7, #8
 80545c6:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 80545c8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80545cc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80545d0:	2100      	movs	r1, #0
 80545d2:	6818      	ldr	r0, [r3, #0]
 80545d4:	f7fc ff5e 	bl	8051494 <dir_read>
 80545d8:	4603      	mov	r3, r0
 80545da:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80545de:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80545e2:	2b04      	cmp	r3, #4
 80545e4:	d102      	bne.n	80545ec <f_readdir+0x9e>
 80545e6:	2300      	movs	r3, #0
 80545e8:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 80545ec:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80545f0:	2b00      	cmp	r3, #0
 80545f2:	d11d      	bne.n	8054630 <f_readdir+0xe2>
				get_fileinfo(dp, fno);		/* Get the object information */
 80545f4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80545f8:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 80545fc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054600:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054604:	6811      	ldr	r1, [r2, #0]
 8054606:	6818      	ldr	r0, [r3, #0]
 8054608:	f7fd fae8 	bl	8051bdc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 805460c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8054610:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8054614:	2100      	movs	r1, #0
 8054616:	6818      	ldr	r0, [r3, #0]
 8054618:	f7fc f9a9 	bl	805096e <dir_next>
 805461c:	4603      	mov	r3, r0
 805461e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8054622:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8054626:	2b04      	cmp	r3, #4
 8054628:	d102      	bne.n	8054630 <f_readdir+0xe2>
 805462a:	2300      	movs	r3, #0
 805462c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8054630:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8054634:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 8054638:	4611      	mov	r1, r2
 805463a:	4618      	mov	r0, r3
 805463c:	f7fb f878 	bl	804f730 <unlock_volume>
 8054640:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 8054644:	4618      	mov	r0, r3
 8054646:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 805464a:	46bd      	mov	sp, r7
 805464c:	bd80      	pop	{r7, pc}
	...

08054650 <FATFS_GetDisk>:
/**
 * @brief  Returns a pointer to the disk structure.
 * @retval Pointer to Disk_drvTypeDef
 */
Disk_drvTypeDef* FATFS_GetDisk(void)
{
 8054650:	b480      	push	{r7}
 8054652:	af00      	add	r7, sp, #0
    return &disk;
 8054654:	4b02      	ldr	r3, [pc, #8]	@ (8054660 <FATFS_GetDisk+0x10>)
}
 8054656:	4618      	mov	r0, r3
 8054658:	46bd      	mov	sp, r7
 805465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805465e:	4770      	bx	lr
 8054660:	2402d790 	.word	0x2402d790

08054664 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8054664:	b480      	push	{r7}
 8054666:	b087      	sub	sp, #28
 8054668:	af00      	add	r7, sp, #0
 805466a:	60f8      	str	r0, [r7, #12]
 805466c:	60b9      	str	r1, [r7, #8]
 805466e:	4613      	mov	r3, r2
 8054670:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8054672:	2301      	movs	r3, #1
 8054674:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8054676:	2300      	movs	r3, #0
 8054678:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 805467a:	4b1f      	ldr	r3, [pc, #124]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 805467c:	7a5b      	ldrb	r3, [r3, #9]
 805467e:	b2db      	uxtb	r3, r3
 8054680:	2b00      	cmp	r3, #0
 8054682:	d131      	bne.n	80546e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8054684:	4b1c      	ldr	r3, [pc, #112]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 8054686:	7a5b      	ldrb	r3, [r3, #9]
 8054688:	b2db      	uxtb	r3, r3
 805468a:	461a      	mov	r2, r3
 805468c:	4b1a      	ldr	r3, [pc, #104]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 805468e:	2100      	movs	r1, #0
 8054690:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8054692:	4b19      	ldr	r3, [pc, #100]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 8054694:	7a5b      	ldrb	r3, [r3, #9]
 8054696:	b2db      	uxtb	r3, r3
 8054698:	4a17      	ldr	r2, [pc, #92]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 805469a:	009b      	lsls	r3, r3, #2
 805469c:	4413      	add	r3, r2
 805469e:	68fa      	ldr	r2, [r7, #12]
 80546a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80546a2:	4b15      	ldr	r3, [pc, #84]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 80546a4:	7a5b      	ldrb	r3, [r3, #9]
 80546a6:	b2db      	uxtb	r3, r3
 80546a8:	461a      	mov	r2, r3
 80546aa:	4b13      	ldr	r3, [pc, #76]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 80546ac:	4413      	add	r3, r2
 80546ae:	79fa      	ldrb	r2, [r7, #7]
 80546b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80546b2:	4b11      	ldr	r3, [pc, #68]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 80546b4:	7a5b      	ldrb	r3, [r3, #9]
 80546b6:	b2db      	uxtb	r3, r3
 80546b8:	1c5a      	adds	r2, r3, #1
 80546ba:	b2d1      	uxtb	r1, r2
 80546bc:	4a0e      	ldr	r2, [pc, #56]	@ (80546f8 <FATFS_LinkDriverEx+0x94>)
 80546be:	7251      	strb	r1, [r2, #9]
 80546c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80546c2:	7dbb      	ldrb	r3, [r7, #22]
 80546c4:	3330      	adds	r3, #48	@ 0x30
 80546c6:	b2da      	uxtb	r2, r3
 80546c8:	68bb      	ldr	r3, [r7, #8]
 80546ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80546cc:	68bb      	ldr	r3, [r7, #8]
 80546ce:	3301      	adds	r3, #1
 80546d0:	223a      	movs	r2, #58	@ 0x3a
 80546d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80546d4:	68bb      	ldr	r3, [r7, #8]
 80546d6:	3302      	adds	r3, #2
 80546d8:	222f      	movs	r2, #47	@ 0x2f
 80546da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80546dc:	68bb      	ldr	r3, [r7, #8]
 80546de:	3303      	adds	r3, #3
 80546e0:	2200      	movs	r2, #0
 80546e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80546e4:	2300      	movs	r3, #0
 80546e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80546e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80546ea:	4618      	mov	r0, r3
 80546ec:	371c      	adds	r7, #28
 80546ee:	46bd      	mov	sp, r7
 80546f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80546f4:	4770      	bx	lr
 80546f6:	bf00      	nop
 80546f8:	2402d790 	.word	0x2402d790

080546fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80546fc:	b580      	push	{r7, lr}
 80546fe:	b082      	sub	sp, #8
 8054700:	af00      	add	r7, sp, #0
 8054702:	6078      	str	r0, [r7, #4]
 8054704:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8054706:	2200      	movs	r2, #0
 8054708:	6839      	ldr	r1, [r7, #0]
 805470a:	6878      	ldr	r0, [r7, #4]
 805470c:	f7ff ffaa 	bl	8054664 <FATFS_LinkDriverEx>
 8054710:	4603      	mov	r3, r0
}
 8054712:	4618      	mov	r0, r3
 8054714:	3708      	adds	r7, #8
 8054716:	46bd      	mov	sp, r7
 8054718:	bd80      	pop	{r7, pc}
	...

0805471c <MMC_CheckStatus>:
#else
static volatile UINT WriteStatus = 0, ReadStatus = 0;
#endif

/* Generic MMC driver implementation */
static DSTATUS MMC_CheckStatus(MMC_HandleTypeDef *hmmc) {
 805471c:	b580      	push	{r7, lr}
 805471e:	b082      	sub	sp, #8
 8054720:	af00      	add	r7, sp, #0
 8054722:	6078      	str	r0, [r7, #4]
    Stat = STA_NOINIT;
 8054724:	4b0b      	ldr	r3, [pc, #44]	@ (8054754 <MMC_CheckStatus+0x38>)
 8054726:	2201      	movs	r2, #1
 8054728:	701a      	strb	r2, [r3, #0]
    if (BSP_MMC_GetCardState(hmmc) == BSP_ERROR_NONE) {
 805472a:	6878      	ldr	r0, [r7, #4]
 805472c:	f7ed fb7c 	bl	8041e28 <BSP_MMC_GetCardState>
 8054730:	4603      	mov	r3, r0
 8054732:	2b00      	cmp	r3, #0
 8054734:	d107      	bne.n	8054746 <MMC_CheckStatus+0x2a>
        Stat &= ~STA_NOINIT;
 8054736:	4b07      	ldr	r3, [pc, #28]	@ (8054754 <MMC_CheckStatus+0x38>)
 8054738:	781b      	ldrb	r3, [r3, #0]
 805473a:	b2db      	uxtb	r3, r3
 805473c:	f023 0301 	bic.w	r3, r3, #1
 8054740:	b2da      	uxtb	r2, r3
 8054742:	4b04      	ldr	r3, [pc, #16]	@ (8054754 <MMC_CheckStatus+0x38>)
 8054744:	701a      	strb	r2, [r3, #0]
    }
    return Stat;
 8054746:	4b03      	ldr	r3, [pc, #12]	@ (8054754 <MMC_CheckStatus+0x38>)
 8054748:	781b      	ldrb	r3, [r3, #0]
 805474a:	b2db      	uxtb	r3, r3
}
 805474c:	4618      	mov	r0, r3
 805474e:	3708      	adds	r7, #8
 8054750:	46bd      	mov	sp, r7
 8054752:	bd80      	pop	{r7, pc}
 8054754:	240148ed 	.word	0x240148ed

08054758 <MMC_Initialize>:

static DSTATUS MMC_Initialize(MMC_HandleTypeDef *hmmc, BYTE lun) {
 8054758:	b580      	push	{r7, lr}
 805475a:	b082      	sub	sp, #8
 805475c:	af00      	add	r7, sp, #0
 805475e:	6078      	str	r0, [r7, #4]
 8054760:	460b      	mov	r3, r1
 8054762:	70fb      	strb	r3, [r7, #3]
#ifdef USE_FREERTOS
    /* Ensure FreeRTOS kernel is running before using RTOS APIs */
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8054764:	f002 ff7c 	bl	8057660 <xTaskGetSchedulerState>
 8054768:	4603      	mov	r3, r0
 805476a:	2b01      	cmp	r3, #1
 805476c:	d028      	beq.n	80547c0 <MMC_Initialize+0x68>
#ifndef DISABLE_MMC_INIT
        if (BSP_MMC_Init(hmmc) == BSP_ERROR_NONE) {
 805476e:	6878      	ldr	r0, [r7, #4]
 8054770:	f7ed fafa 	bl	8041d68 <BSP_MMC_Init>
 8054774:	4603      	mov	r3, r0
 8054776:	2b00      	cmp	r3, #0
 8054778:	d106      	bne.n	8054788 <MMC_Initialize+0x30>
            Stat = MMC_CheckStatus(hmmc);
 805477a:	6878      	ldr	r0, [r7, #4]
 805477c:	f7ff ffce 	bl	805471c <MMC_CheckStatus>
 8054780:	4603      	mov	r3, r0
 8054782:	461a      	mov	r2, r3
 8054784:	4b12      	ldr	r3, [pc, #72]	@ (80547d0 <MMC_Initialize+0x78>)
 8054786:	701a      	strb	r2, [r3, #0]
        }
#else
        Stat = MMC_CheckStatus(hmmc);
#endif
        /* Create semaphore for DMA synchronization if MMC is initialized */
        if (Stat != STA_NOINIT) {
 8054788:	4b11      	ldr	r3, [pc, #68]	@ (80547d0 <MMC_Initialize+0x78>)
 805478a:	781b      	ldrb	r3, [r3, #0]
 805478c:	b2db      	uxtb	r3, r3
 805478e:	2b01      	cmp	r3, #1
 8054790:	d016      	beq.n	80547c0 <MMC_Initialize+0x68>
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
            if (hmmc == &hmmc1 && MMC1Semaphore == NULL) {
 8054792:	687b      	ldr	r3, [r7, #4]
 8054794:	4a0f      	ldr	r2, [pc, #60]	@ (80547d4 <MMC_Initialize+0x7c>)
 8054796:	4293      	cmp	r3, r2
 8054798:	d112      	bne.n	80547c0 <MMC_Initialize+0x68>
 805479a:	4b0f      	ldr	r3, [pc, #60]	@ (80547d8 <MMC_Initialize+0x80>)
 805479c:	681b      	ldr	r3, [r3, #0]
 805479e:	2b00      	cmp	r3, #0
 80547a0:	d10e      	bne.n	80547c0 <MMC_Initialize+0x68>
                MMC1Semaphore = xSemaphoreCreateBinary();
 80547a2:	2203      	movs	r2, #3
 80547a4:	2100      	movs	r1, #0
 80547a6:	2001      	movs	r0, #1
 80547a8:	f000 fcc7 	bl	805513a <xQueueGenericCreate>
 80547ac:	4603      	mov	r3, r0
 80547ae:	4a0a      	ldr	r2, [pc, #40]	@ (80547d8 <MMC_Initialize+0x80>)
 80547b0:	6013      	str	r3, [r2, #0]
                if (MMC1Semaphore == NULL) {
 80547b2:	4b09      	ldr	r3, [pc, #36]	@ (80547d8 <MMC_Initialize+0x80>)
 80547b4:	681b      	ldr	r3, [r3, #0]
 80547b6:	2b00      	cmp	r3, #0
 80547b8:	d102      	bne.n	80547c0 <MMC_Initialize+0x68>
                    Stat = STA_NOINIT;  /* Failed to create semaphore */
 80547ba:	4b05      	ldr	r3, [pc, #20]	@ (80547d0 <MMC_Initialize+0x78>)
 80547bc:	2201      	movs	r2, #1
 80547be:	701a      	strb	r2, [r3, #0]
    }
#else
    return MMC_CheckStatus(hmmc);
#endif
#endif
    return Stat;
 80547c0:	4b03      	ldr	r3, [pc, #12]	@ (80547d0 <MMC_Initialize+0x78>)
 80547c2:	781b      	ldrb	r3, [r3, #0]
 80547c4:	b2db      	uxtb	r3, r3
}
 80547c6:	4618      	mov	r0, r3
 80547c8:	3708      	adds	r7, #8
 80547ca:	46bd      	mov	sp, r7
 80547cc:	bd80      	pop	{r7, pc}
 80547ce:	bf00      	nop
 80547d0:	240148ed 	.word	0x240148ed
 80547d4:	2406e634 	.word	0x2406e634
 80547d8:	2402d79c 	.word	0x2402d79c

080547dc <MMC_Read>:

static DRESULT MMC_Read(MMC_HandleTypeDef *hmmc, BYTE *buff, DWORD sector, UINT count) {
 80547dc:	b580      	push	{r7, lr}
 80547de:	b088      	sub	sp, #32
 80547e0:	af00      	add	r7, sp, #0
 80547e2:	60f8      	str	r0, [r7, #12]
 80547e4:	60b9      	str	r1, [r7, #8]
 80547e6:	607a      	str	r2, [r7, #4]
 80547e8:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 80547ea:	2301      	movs	r3, #1
 80547ec:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 80547ee:	68fb      	ldr	r3, [r7, #12]
 80547f0:	4a1b      	ldr	r2, [pc, #108]	@ (8054860 <MMC_Read+0x84>)
 80547f2:	4293      	cmp	r3, r2
 80547f4:	d102      	bne.n	80547fc <MMC_Read+0x20>
 80547f6:	4b1b      	ldr	r3, [pc, #108]	@ (8054864 <MMC_Read+0x88>)
 80547f8:	681b      	ldr	r3, [r3, #0]
 80547fa:	e000      	b.n	80547fe <MMC_Read+0x22>
 80547fc:	2300      	movs	r3, #0
 80547fe:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_ReadBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 8054800:	683b      	ldr	r3, [r7, #0]
 8054802:	687a      	ldr	r2, [r7, #4]
 8054804:	68b9      	ldr	r1, [r7, #8]
 8054806:	68f8      	ldr	r0, [r7, #12]
 8054808:	f7ed fad8 	bl	8041dbc <BSP_MMC_ReadBlocks_DMA>
 805480c:	4603      	mov	r3, r0
 805480e:	2b00      	cmp	r3, #0
 8054810:	d121      	bne.n	8054856 <MMC_Read+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 8054812:	f247 5130 	movw	r1, #30000	@ 0x7530
 8054816:	69b8      	ldr	r0, [r7, #24]
 8054818:	f000 ffde 	bl	80557d8 <xQueueSemaphoreTake>
 805481c:	4603      	mov	r3, r0
 805481e:	2b01      	cmp	r3, #1
 8054820:	d119      	bne.n	8054856 <MMC_Read+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 8054822:	f002 f981 	bl	8056b28 <xTaskGetTickCount>
 8054826:	4602      	mov	r2, r0
 8054828:	f247 5330 	movw	r3, #30000	@ 0x7530
 805482c:	4413      	add	r3, r2
 805482e:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 8054830:	e00b      	b.n	805484a <MMC_Read+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 8054832:	68f8      	ldr	r0, [r7, #12]
 8054834:	f7ed faf8 	bl	8041e28 <BSP_MMC_GetCardState>
 8054838:	4603      	mov	r3, r0
 805483a:	2b00      	cmp	r3, #0
 805483c:	d102      	bne.n	8054844 <MMC_Read+0x68>
                    res = RES_OK;
 805483e:	2300      	movs	r3, #0
 8054840:	77fb      	strb	r3, [r7, #31]
                    break;
 8054842:	e008      	b.n	8054856 <MMC_Read+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 8054844:	2001      	movs	r0, #1
 8054846:	f001 ff0d 	bl	8056664 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 805484a:	f002 f96d 	bl	8056b28 <xTaskGetTickCount>
 805484e:	4602      	mov	r2, r0
 8054850:	697b      	ldr	r3, [r7, #20]
 8054852:	4293      	cmp	r3, r2
 8054854:	d8ed      	bhi.n	8054832 <MMC_Read+0x56>
                }
            }
        }
    }
#endif
    return res;
 8054856:	7ffb      	ldrb	r3, [r7, #31]
}
 8054858:	4618      	mov	r0, r3
 805485a:	3720      	adds	r7, #32
 805485c:	46bd      	mov	sp, r7
 805485e:	bd80      	pop	{r7, pc}
 8054860:	2406e634 	.word	0x2406e634
 8054864:	2402d79c 	.word	0x2402d79c

08054868 <MMC_Write>:

#if _USE_WRITE == 1
static DRESULT MMC_Write(MMC_HandleTypeDef *hmmc, const BYTE *buff, DWORD sector, UINT count) {
 8054868:	b580      	push	{r7, lr}
 805486a:	b088      	sub	sp, #32
 805486c:	af00      	add	r7, sp, #0
 805486e:	60f8      	str	r0, [r7, #12]
 8054870:	60b9      	str	r1, [r7, #8]
 8054872:	607a      	str	r2, [r7, #4]
 8054874:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 8054876:	2301      	movs	r3, #1
 8054878:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 805487a:	68fb      	ldr	r3, [r7, #12]
 805487c:	4a1b      	ldr	r2, [pc, #108]	@ (80548ec <MMC_Write+0x84>)
 805487e:	4293      	cmp	r3, r2
 8054880:	d102      	bne.n	8054888 <MMC_Write+0x20>
 8054882:	4b1b      	ldr	r3, [pc, #108]	@ (80548f0 <MMC_Write+0x88>)
 8054884:	681b      	ldr	r3, [r3, #0]
 8054886:	e000      	b.n	805488a <MMC_Write+0x22>
 8054888:	2300      	movs	r3, #0
 805488a:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_WriteBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 805488c:	683b      	ldr	r3, [r7, #0]
 805488e:	687a      	ldr	r2, [r7, #4]
 8054890:	68b9      	ldr	r1, [r7, #8]
 8054892:	68f8      	ldr	r0, [r7, #12]
 8054894:	f7ed faad 	bl	8041df2 <BSP_MMC_WriteBlocks_DMA>
 8054898:	4603      	mov	r3, r0
 805489a:	2b00      	cmp	r3, #0
 805489c:	d121      	bne.n	80548e2 <MMC_Write+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 805489e:	f247 5130 	movw	r1, #30000	@ 0x7530
 80548a2:	69b8      	ldr	r0, [r7, #24]
 80548a4:	f000 ff98 	bl	80557d8 <xQueueSemaphoreTake>
 80548a8:	4603      	mov	r3, r0
 80548aa:	2b01      	cmp	r3, #1
 80548ac:	d119      	bne.n	80548e2 <MMC_Write+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 80548ae:	f002 f93b 	bl	8056b28 <xTaskGetTickCount>
 80548b2:	4602      	mov	r2, r0
 80548b4:	f247 5330 	movw	r3, #30000	@ 0x7530
 80548b8:	4413      	add	r3, r2
 80548ba:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 80548bc:	e00b      	b.n	80548d6 <MMC_Write+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 80548be:	68f8      	ldr	r0, [r7, #12]
 80548c0:	f7ed fab2 	bl	8041e28 <BSP_MMC_GetCardState>
 80548c4:	4603      	mov	r3, r0
 80548c6:	2b00      	cmp	r3, #0
 80548c8:	d102      	bne.n	80548d0 <MMC_Write+0x68>
                    res = RES_OK;
 80548ca:	2300      	movs	r3, #0
 80548cc:	77fb      	strb	r3, [r7, #31]
                    break;
 80548ce:	e008      	b.n	80548e2 <MMC_Write+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 80548d0:	2001      	movs	r0, #1
 80548d2:	f001 fec7 	bl	8056664 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 80548d6:	f002 f927 	bl	8056b28 <xTaskGetTickCount>
 80548da:	4602      	mov	r2, r0
 80548dc:	697b      	ldr	r3, [r7, #20]
 80548de:	4293      	cmp	r3, r2
 80548e0:	d8ed      	bhi.n	80548be <MMC_Write+0x56>
                }
            }
        }
    }
#endif
    return res;
 80548e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80548e4:	4618      	mov	r0, r3
 80548e6:	3720      	adds	r7, #32
 80548e8:	46bd      	mov	sp, r7
 80548ea:	bd80      	pop	{r7, pc}
 80548ec:	2406e634 	.word	0x2406e634
 80548f0:	2402d79c 	.word	0x2402d79c

080548f4 <MMC_Ioctl>:
#endif

#if _USE_IOCTL == 1
static DRESULT MMC_Ioctl(MMC_HandleTypeDef *hmmc, BYTE cmd, void *buff) {
 80548f4:	b580      	push	{r7, lr}
 80548f6:	b08c      	sub	sp, #48	@ 0x30
 80548f8:	af00      	add	r7, sp, #0
 80548fa:	60f8      	str	r0, [r7, #12]
 80548fc:	460b      	mov	r3, r1
 80548fe:	607a      	str	r2, [r7, #4]
 8054900:	72fb      	strb	r3, [r7, #11]
    DRESULT res = RES_ERROR;
 8054902:	2301      	movs	r3, #1
 8054904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BSP_MMC_CardInfo CardInfo;

    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8054908:	4b26      	ldr	r3, [pc, #152]	@ (80549a4 <MMC_Ioctl+0xb0>)
 805490a:	781b      	ldrb	r3, [r3, #0]
 805490c:	b2db      	uxtb	r3, r3
 805490e:	f003 0301 	and.w	r3, r3, #1
 8054912:	2b00      	cmp	r3, #0
 8054914:	d001      	beq.n	805491a <MMC_Ioctl+0x26>
 8054916:	2303      	movs	r3, #3
 8054918:	e040      	b.n	805499c <MMC_Ioctl+0xa8>

    switch (cmd) {
 805491a:	7afb      	ldrb	r3, [r7, #11]
 805491c:	2b03      	cmp	r3, #3
 805491e:	d838      	bhi.n	8054992 <MMC_Ioctl+0x9e>
 8054920:	a201      	add	r2, pc, #4	@ (adr r2, 8054928 <MMC_Ioctl+0x34>)
 8054922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8054926:	bf00      	nop
 8054928:	08054939 	.word	0x08054939
 805492c:	08054941 	.word	0x08054941
 8054930:	0805495b 	.word	0x0805495b
 8054934:	08054977 	.word	0x08054977
        case CTRL_SYNC:
            res = RES_OK;
 8054938:	2300      	movs	r3, #0
 805493a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 805493e:	e02b      	b.n	8054998 <MMC_Ioctl+0xa4>
        case GET_SECTOR_COUNT:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 8054940:	f107 0310 	add.w	r3, r7, #16
 8054944:	4619      	mov	r1, r3
 8054946:	68f8      	ldr	r0, [r7, #12]
 8054948:	f7ed fa7f 	bl	8041e4a <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockNbr;
 805494c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 805494e:	687b      	ldr	r3, [r7, #4]
 8054950:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8054952:	2300      	movs	r3, #0
 8054954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8054958:	e01e      	b.n	8054998 <MMC_Ioctl+0xa4>
        case GET_SECTOR_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 805495a:	f107 0310 	add.w	r3, r7, #16
 805495e:	4619      	mov	r1, r3
 8054960:	68f8      	ldr	r0, [r7, #12]
 8054962:	f7ed fa72 	bl	8041e4a <BSP_MMC_GetCardInfo>
            *(WORD*)buff = CardInfo.LogBlockSize;
 8054966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8054968:	b29a      	uxth	r2, r3
 805496a:	687b      	ldr	r3, [r7, #4]
 805496c:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 805496e:	2300      	movs	r3, #0
 8054970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8054974:	e010      	b.n	8054998 <MMC_Ioctl+0xa4>
        case GET_BLOCK_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 8054976:	f107 0310 	add.w	r3, r7, #16
 805497a:	4619      	mov	r1, r3
 805497c:	68f8      	ldr	r0, [r7, #12]
 805497e:	f7ed fa64 	bl	8041e4a <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockSize / MMC_DEFAULT_BLOCK_SIZE;
 8054982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8054984:	0a5a      	lsrs	r2, r3, #9
 8054986:	687b      	ldr	r3, [r7, #4]
 8054988:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 805498a:	2300      	movs	r3, #0
 805498c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8054990:	e002      	b.n	8054998 <MMC_Ioctl+0xa4>
        default:
            res = RES_PARERR;
 8054992:	2304      	movs	r3, #4
 8054994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    return res;
 8054998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 805499c:	4618      	mov	r0, r3
 805499e:	3730      	adds	r7, #48	@ 0x30
 80549a0:	46bd      	mov	sp, r7
 80549a2:	bd80      	pop	{r7, pc}
 80549a4:	240148ed 	.word	0x240148ed

080549a8 <BSP_MMC_WriteCpltCallback>:
#endif

/* Callback functions */
void BSP_MMC_WriteCpltCallback(MMC_HandleTypeDef *hmmc) {
 80549a8:	b580      	push	{r7, lr}
 80549aa:	b084      	sub	sp, #16
 80549ac:	af00      	add	r7, sp, #0
 80549ae:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 80549b0:	687b      	ldr	r3, [r7, #4]
 80549b2:	4a0f      	ldr	r2, [pc, #60]	@ (80549f0 <BSP_MMC_WriteCpltCallback+0x48>)
 80549b4:	4293      	cmp	r3, r2
 80549b6:	d102      	bne.n	80549be <BSP_MMC_WriteCpltCallback+0x16>
 80549b8:	4b0e      	ldr	r3, [pc, #56]	@ (80549f4 <BSP_MMC_WriteCpltCallback+0x4c>)
 80549ba:	681b      	ldr	r3, [r3, #0]
 80549bc:	e000      	b.n	80549c0 <BSP_MMC_WriteCpltCallback+0x18>
 80549be:	2300      	movs	r3, #0
 80549c0:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80549c2:	2300      	movs	r3, #0
 80549c4:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 80549c6:	f107 0308 	add.w	r3, r7, #8
 80549ca:	4619      	mov	r1, r3
 80549cc:	68f8      	ldr	r0, [r7, #12]
 80549ce:	f000 fd69 	bl	80554a4 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80549d2:	68bb      	ldr	r3, [r7, #8]
 80549d4:	2b00      	cmp	r3, #0
 80549d6:	d007      	beq.n	80549e8 <BSP_MMC_WriteCpltCallback+0x40>
 80549d8:	4b07      	ldr	r3, [pc, #28]	@ (80549f8 <BSP_MMC_WriteCpltCallback+0x50>)
 80549da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80549de:	601a      	str	r2, [r3, #0]
 80549e0:	f3bf 8f4f 	dsb	sy
 80549e4:	f3bf 8f6f 	isb	sy
#else
    WriteStatus = 1;
#endif
}
 80549e8:	bf00      	nop
 80549ea:	3710      	adds	r7, #16
 80549ec:	46bd      	mov	sp, r7
 80549ee:	bd80      	pop	{r7, pc}
 80549f0:	2406e634 	.word	0x2406e634
 80549f4:	2402d79c 	.word	0x2402d79c
 80549f8:	e000ed04 	.word	0xe000ed04

080549fc <BSP_MMC_ReadCpltCallback>:

void BSP_MMC_ReadCpltCallback(MMC_HandleTypeDef *hmmc) {
 80549fc:	b580      	push	{r7, lr}
 80549fe:	b084      	sub	sp, #16
 8054a00:	af00      	add	r7, sp, #0
 8054a02:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 8054a04:	687b      	ldr	r3, [r7, #4]
 8054a06:	4a0f      	ldr	r2, [pc, #60]	@ (8054a44 <BSP_MMC_ReadCpltCallback+0x48>)
 8054a08:	4293      	cmp	r3, r2
 8054a0a:	d102      	bne.n	8054a12 <BSP_MMC_ReadCpltCallback+0x16>
 8054a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8054a48 <BSP_MMC_ReadCpltCallback+0x4c>)
 8054a0e:	681b      	ldr	r3, [r3, #0]
 8054a10:	e000      	b.n	8054a14 <BSP_MMC_ReadCpltCallback+0x18>
 8054a12:	2300      	movs	r3, #0
 8054a14:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8054a16:	2300      	movs	r3, #0
 8054a18:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 8054a1a:	f107 0308 	add.w	r3, r7, #8
 8054a1e:	4619      	mov	r1, r3
 8054a20:	68f8      	ldr	r0, [r7, #12]
 8054a22:	f000 fd3f 	bl	80554a4 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8054a26:	68bb      	ldr	r3, [r7, #8]
 8054a28:	2b00      	cmp	r3, #0
 8054a2a:	d007      	beq.n	8054a3c <BSP_MMC_ReadCpltCallback+0x40>
 8054a2c:	4b07      	ldr	r3, [pc, #28]	@ (8054a4c <BSP_MMC_ReadCpltCallback+0x50>)
 8054a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8054a32:	601a      	str	r2, [r3, #0]
 8054a34:	f3bf 8f4f 	dsb	sy
 8054a38:	f3bf 8f6f 	isb	sy
#else
    ReadStatus = 1;
#endif
}
 8054a3c:	bf00      	nop
 8054a3e:	3710      	adds	r7, #16
 8054a40:	46bd      	mov	sp, r7
 8054a42:	bd80      	pop	{r7, pc}
 8054a44:	2406e634 	.word	0x2406e634
 8054a48:	2402d79c 	.word	0x2402d79c
 8054a4c:	e000ed04 	.word	0xe000ed04

08054a50 <MMC1_initialize>:

/* MMC1 Driver */
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
static DSTATUS MMC1_initialize(BYTE lun) { return MMC_Initialize(&hmmc1, lun); }
 8054a50:	b580      	push	{r7, lr}
 8054a52:	b082      	sub	sp, #8
 8054a54:	af00      	add	r7, sp, #0
 8054a56:	4603      	mov	r3, r0
 8054a58:	71fb      	strb	r3, [r7, #7]
 8054a5a:	79fb      	ldrb	r3, [r7, #7]
 8054a5c:	4619      	mov	r1, r3
 8054a5e:	4804      	ldr	r0, [pc, #16]	@ (8054a70 <MMC1_initialize+0x20>)
 8054a60:	f7ff fe7a 	bl	8054758 <MMC_Initialize>
 8054a64:	4603      	mov	r3, r0
 8054a66:	4618      	mov	r0, r3
 8054a68:	3708      	adds	r7, #8
 8054a6a:	46bd      	mov	sp, r7
 8054a6c:	bd80      	pop	{r7, pc}
 8054a6e:	bf00      	nop
 8054a70:	2406e634 	.word	0x2406e634

08054a74 <MMC1_status>:
static DSTATUS MMC1_status(BYTE lun) { return MMC_CheckStatus(&hmmc1); }
 8054a74:	b580      	push	{r7, lr}
 8054a76:	b082      	sub	sp, #8
 8054a78:	af00      	add	r7, sp, #0
 8054a7a:	4603      	mov	r3, r0
 8054a7c:	71fb      	strb	r3, [r7, #7]
 8054a7e:	4804      	ldr	r0, [pc, #16]	@ (8054a90 <MMC1_status+0x1c>)
 8054a80:	f7ff fe4c 	bl	805471c <MMC_CheckStatus>
 8054a84:	4603      	mov	r3, r0
 8054a86:	4618      	mov	r0, r3
 8054a88:	3708      	adds	r7, #8
 8054a8a:	46bd      	mov	sp, r7
 8054a8c:	bd80      	pop	{r7, pc}
 8054a8e:	bf00      	nop
 8054a90:	2406e634 	.word	0x2406e634

08054a94 <MMC1_read>:
static DRESULT MMC1_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) { return MMC_Read(&hmmc1, buff, sector, count); }
 8054a94:	b580      	push	{r7, lr}
 8054a96:	b084      	sub	sp, #16
 8054a98:	af00      	add	r7, sp, #0
 8054a9a:	60b9      	str	r1, [r7, #8]
 8054a9c:	607a      	str	r2, [r7, #4]
 8054a9e:	603b      	str	r3, [r7, #0]
 8054aa0:	4603      	mov	r3, r0
 8054aa2:	73fb      	strb	r3, [r7, #15]
 8054aa4:	683b      	ldr	r3, [r7, #0]
 8054aa6:	687a      	ldr	r2, [r7, #4]
 8054aa8:	68b9      	ldr	r1, [r7, #8]
 8054aaa:	4804      	ldr	r0, [pc, #16]	@ (8054abc <MMC1_read+0x28>)
 8054aac:	f7ff fe96 	bl	80547dc <MMC_Read>
 8054ab0:	4603      	mov	r3, r0
 8054ab2:	4618      	mov	r0, r3
 8054ab4:	3710      	adds	r7, #16
 8054ab6:	46bd      	mov	sp, r7
 8054ab8:	bd80      	pop	{r7, pc}
 8054aba:	bf00      	nop
 8054abc:	2406e634 	.word	0x2406e634

08054ac0 <MMC1_write>:
#if _USE_WRITE == 1
static DRESULT MMC1_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) { return MMC_Write(&hmmc1, buff, sector, count); }
 8054ac0:	b580      	push	{r7, lr}
 8054ac2:	b084      	sub	sp, #16
 8054ac4:	af00      	add	r7, sp, #0
 8054ac6:	60b9      	str	r1, [r7, #8]
 8054ac8:	607a      	str	r2, [r7, #4]
 8054aca:	603b      	str	r3, [r7, #0]
 8054acc:	4603      	mov	r3, r0
 8054ace:	73fb      	strb	r3, [r7, #15]
 8054ad0:	683b      	ldr	r3, [r7, #0]
 8054ad2:	687a      	ldr	r2, [r7, #4]
 8054ad4:	68b9      	ldr	r1, [r7, #8]
 8054ad6:	4804      	ldr	r0, [pc, #16]	@ (8054ae8 <MMC1_write+0x28>)
 8054ad8:	f7ff fec6 	bl	8054868 <MMC_Write>
 8054adc:	4603      	mov	r3, r0
 8054ade:	4618      	mov	r0, r3
 8054ae0:	3710      	adds	r7, #16
 8054ae2:	46bd      	mov	sp, r7
 8054ae4:	bd80      	pop	{r7, pc}
 8054ae6:	bf00      	nop
 8054ae8:	2406e634 	.word	0x2406e634

08054aec <MMC1_ioctl>:
#endif
#if _USE_IOCTL == 1
static DRESULT MMC1_ioctl(BYTE lun, BYTE cmd, void *buff) { return MMC_Ioctl(&hmmc1, cmd, buff); }
 8054aec:	b580      	push	{r7, lr}
 8054aee:	b082      	sub	sp, #8
 8054af0:	af00      	add	r7, sp, #0
 8054af2:	4603      	mov	r3, r0
 8054af4:	603a      	str	r2, [r7, #0]
 8054af6:	71fb      	strb	r3, [r7, #7]
 8054af8:	460b      	mov	r3, r1
 8054afa:	71bb      	strb	r3, [r7, #6]
 8054afc:	79bb      	ldrb	r3, [r7, #6]
 8054afe:	683a      	ldr	r2, [r7, #0]
 8054b00:	4619      	mov	r1, r3
 8054b02:	4804      	ldr	r0, [pc, #16]	@ (8054b14 <MMC1_ioctl+0x28>)
 8054b04:	f7ff fef6 	bl	80548f4 <MMC_Ioctl>
 8054b08:	4603      	mov	r3, r0
 8054b0a:	4618      	mov	r0, r3
 8054b0c:	3708      	adds	r7, #8
 8054b0e:	46bd      	mov	sp, r7
 8054b10:	bd80      	pop	{r7, pc}
 8054b12:	bf00      	nop
 8054b14:	2406e634 	.word	0x2406e634

08054b18 <MMC1_GetDriver>:
#if _USE_IOCTL == 1
    MMC1_ioctl,
#endif
};

const Diskio_drvTypeDef* MMC1_GetDriver(void) {
 8054b18:	b480      	push	{r7}
 8054b1a:	af00      	add	r7, sp, #0
    return &MMC1_Driver;
 8054b1c:	4b02      	ldr	r3, [pc, #8]	@ (8054b28 <MMC1_GetDriver+0x10>)
}
 8054b1e:	4618      	mov	r0, r3
 8054b20:	46bd      	mov	sp, r7
 8054b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054b26:	4770      	bx	lr
 8054b28:	08071e78 	.word	0x08071e78

08054b2c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8054b2c:	b480      	push	{r7}
 8054b2e:	b085      	sub	sp, #20
 8054b30:	af00      	add	r7, sp, #0
 8054b32:	6078      	str	r0, [r7, #4]
 8054b34:	460b      	mov	r3, r1
 8054b36:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8054b38:	2300      	movs	r3, #0
 8054b3a:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8054b3c:	4b17      	ldr	r3, [pc, #92]	@ (8054b9c <ff_uni2oem+0x70>)
 8054b3e:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8054b40:	687b      	ldr	r3, [r7, #4]
 8054b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8054b44:	d802      	bhi.n	8054b4c <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8054b46:	687b      	ldr	r3, [r7, #4]
 8054b48:	81fb      	strh	r3, [r7, #14]
 8054b4a:	e01f      	b.n	8054b8c <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8054b4c:	687b      	ldr	r3, [r7, #4]
 8054b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8054b52:	d21b      	bcs.n	8054b8c <ff_uni2oem+0x60>
 8054b54:	887b      	ldrh	r3, [r7, #2]
 8054b56:	f240 3252 	movw	r2, #850	@ 0x352
 8054b5a:	4293      	cmp	r3, r2
 8054b5c:	d116      	bne.n	8054b8c <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8054b5e:	2300      	movs	r3, #0
 8054b60:	81fb      	strh	r3, [r7, #14]
 8054b62:	e002      	b.n	8054b6a <ff_uni2oem+0x3e>
 8054b64:	89fb      	ldrh	r3, [r7, #14]
 8054b66:	3301      	adds	r3, #1
 8054b68:	81fb      	strh	r3, [r7, #14]
 8054b6a:	89fb      	ldrh	r3, [r7, #14]
 8054b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8054b6e:	d808      	bhi.n	8054b82 <ff_uni2oem+0x56>
 8054b70:	89fb      	ldrh	r3, [r7, #14]
 8054b72:	005b      	lsls	r3, r3, #1
 8054b74:	68ba      	ldr	r2, [r7, #8]
 8054b76:	4413      	add	r3, r2
 8054b78:	881b      	ldrh	r3, [r3, #0]
 8054b7a:	461a      	mov	r2, r3
 8054b7c:	687b      	ldr	r3, [r7, #4]
 8054b7e:	4293      	cmp	r3, r2
 8054b80:	d1f0      	bne.n	8054b64 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 8054b82:	89fb      	ldrh	r3, [r7, #14]
 8054b84:	3380      	adds	r3, #128	@ 0x80
 8054b86:	b29b      	uxth	r3, r3
 8054b88:	b2db      	uxtb	r3, r3
 8054b8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8054b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8054b8e:	4618      	mov	r0, r3
 8054b90:	3714      	adds	r7, #20
 8054b92:	46bd      	mov	sp, r7
 8054b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054b98:	4770      	bx	lr
 8054b9a:	bf00      	nop
 8054b9c:	08071e8c 	.word	0x08071e8c

08054ba0 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8054ba0:	b480      	push	{r7}
 8054ba2:	b085      	sub	sp, #20
 8054ba4:	af00      	add	r7, sp, #0
 8054ba6:	4603      	mov	r3, r0
 8054ba8:	460a      	mov	r2, r1
 8054baa:	80fb      	strh	r3, [r7, #6]
 8054bac:	4613      	mov	r3, r2
 8054bae:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8054bb0:	2300      	movs	r3, #0
 8054bb2:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8054bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8054bf4 <ff_oem2uni+0x54>)
 8054bb6:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8054bb8:	88fb      	ldrh	r3, [r7, #6]
 8054bba:	2b7f      	cmp	r3, #127	@ 0x7f
 8054bbc:	d802      	bhi.n	8054bc4 <ff_oem2uni+0x24>
		c = oem;
 8054bbe:	88fb      	ldrh	r3, [r7, #6]
 8054bc0:	81fb      	strh	r3, [r7, #14]
 8054bc2:	e00f      	b.n	8054be4 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8054bc4:	88bb      	ldrh	r3, [r7, #4]
 8054bc6:	f240 3252 	movw	r2, #850	@ 0x352
 8054bca:	4293      	cmp	r3, r2
 8054bcc:	d10a      	bne.n	8054be4 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 8054bce:	88fb      	ldrh	r3, [r7, #6]
 8054bd0:	2bff      	cmp	r3, #255	@ 0xff
 8054bd2:	d807      	bhi.n	8054be4 <ff_oem2uni+0x44>
 8054bd4:	88fa      	ldrh	r2, [r7, #6]
 8054bd6:	4b08      	ldr	r3, [pc, #32]	@ (8054bf8 <ff_oem2uni+0x58>)
 8054bd8:	4413      	add	r3, r2
 8054bda:	005b      	lsls	r3, r3, #1
 8054bdc:	68ba      	ldr	r2, [r7, #8]
 8054bde:	4413      	add	r3, r2
 8054be0:	881b      	ldrh	r3, [r3, #0]
 8054be2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8054be4:	89fb      	ldrh	r3, [r7, #14]
}
 8054be6:	4618      	mov	r0, r3
 8054be8:	3714      	adds	r7, #20
 8054bea:	46bd      	mov	sp, r7
 8054bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054bf0:	4770      	bx	lr
 8054bf2:	bf00      	nop
 8054bf4:	08071e8c 	.word	0x08071e8c
 8054bf8:	7fffff80 	.word	0x7fffff80

08054bfc <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8054bfc:	b480      	push	{r7}
 8054bfe:	b087      	sub	sp, #28
 8054c00:	af00      	add	r7, sp, #0
 8054c02:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8054c04:	687b      	ldr	r3, [r7, #4]
 8054c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8054c0a:	d27d      	bcs.n	8054d08 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8054c0c:	687b      	ldr	r3, [r7, #4]
 8054c0e:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8054c10:	8a7b      	ldrh	r3, [r7, #18]
 8054c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8054c16:	d201      	bcs.n	8054c1c <ff_wtoupper+0x20>
 8054c18:	4b3f      	ldr	r3, [pc, #252]	@ (8054d18 <ff_wtoupper+0x11c>)
 8054c1a:	e000      	b.n	8054c1e <ff_wtoupper+0x22>
 8054c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8054d1c <ff_wtoupper+0x120>)
 8054c1e:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8054c20:	697b      	ldr	r3, [r7, #20]
 8054c22:	1c9a      	adds	r2, r3, #2
 8054c24:	617a      	str	r2, [r7, #20]
 8054c26:	881b      	ldrh	r3, [r3, #0]
 8054c28:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8054c2a:	8a3b      	ldrh	r3, [r7, #16]
 8054c2c:	2b00      	cmp	r3, #0
 8054c2e:	d069      	beq.n	8054d04 <ff_wtoupper+0x108>
 8054c30:	8a7a      	ldrh	r2, [r7, #18]
 8054c32:	8a3b      	ldrh	r3, [r7, #16]
 8054c34:	429a      	cmp	r2, r3
 8054c36:	d365      	bcc.n	8054d04 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8054c38:	697b      	ldr	r3, [r7, #20]
 8054c3a:	1c9a      	adds	r2, r3, #2
 8054c3c:	617a      	str	r2, [r7, #20]
 8054c3e:	881b      	ldrh	r3, [r3, #0]
 8054c40:	81fb      	strh	r3, [r7, #14]
 8054c42:	89fb      	ldrh	r3, [r7, #14]
 8054c44:	0a1b      	lsrs	r3, r3, #8
 8054c46:	81bb      	strh	r3, [r7, #12]
 8054c48:	89fb      	ldrh	r3, [r7, #14]
 8054c4a:	b2db      	uxtb	r3, r3
 8054c4c:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8054c4e:	8a7a      	ldrh	r2, [r7, #18]
 8054c50:	8a39      	ldrh	r1, [r7, #16]
 8054c52:	89fb      	ldrh	r3, [r7, #14]
 8054c54:	440b      	add	r3, r1
 8054c56:	429a      	cmp	r2, r3
 8054c58:	da4a      	bge.n	8054cf0 <ff_wtoupper+0xf4>
				switch (cmd) {
 8054c5a:	89bb      	ldrh	r3, [r7, #12]
 8054c5c:	2b08      	cmp	r3, #8
 8054c5e:	d850      	bhi.n	8054d02 <ff_wtoupper+0x106>
 8054c60:	a201      	add	r2, pc, #4	@ (adr r2, 8054c68 <ff_wtoupper+0x6c>)
 8054c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8054c66:	bf00      	nop
 8054c68:	08054c8d 	.word	0x08054c8d
 8054c6c:	08054c9f 	.word	0x08054c9f
 8054c70:	08054cb5 	.word	0x08054cb5
 8054c74:	08054cbd 	.word	0x08054cbd
 8054c78:	08054cc5 	.word	0x08054cc5
 8054c7c:	08054ccd 	.word	0x08054ccd
 8054c80:	08054cd5 	.word	0x08054cd5
 8054c84:	08054cdd 	.word	0x08054cdd
 8054c88:	08054ce5 	.word	0x08054ce5
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8054c8c:	8a7a      	ldrh	r2, [r7, #18]
 8054c8e:	8a3b      	ldrh	r3, [r7, #16]
 8054c90:	1ad3      	subs	r3, r2, r3
 8054c92:	005b      	lsls	r3, r3, #1
 8054c94:	697a      	ldr	r2, [r7, #20]
 8054c96:	4413      	add	r3, r2
 8054c98:	881b      	ldrh	r3, [r3, #0]
 8054c9a:	827b      	strh	r3, [r7, #18]
 8054c9c:	e027      	b.n	8054cee <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8054c9e:	8a7a      	ldrh	r2, [r7, #18]
 8054ca0:	8a3b      	ldrh	r3, [r7, #16]
 8054ca2:	1ad3      	subs	r3, r2, r3
 8054ca4:	b29b      	uxth	r3, r3
 8054ca6:	f003 0301 	and.w	r3, r3, #1
 8054caa:	b29b      	uxth	r3, r3
 8054cac:	8a7a      	ldrh	r2, [r7, #18]
 8054cae:	1ad3      	subs	r3, r2, r3
 8054cb0:	827b      	strh	r3, [r7, #18]
 8054cb2:	e01c      	b.n	8054cee <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8054cb4:	8a7b      	ldrh	r3, [r7, #18]
 8054cb6:	3b10      	subs	r3, #16
 8054cb8:	827b      	strh	r3, [r7, #18]
 8054cba:	e018      	b.n	8054cee <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8054cbc:	8a7b      	ldrh	r3, [r7, #18]
 8054cbe:	3b20      	subs	r3, #32
 8054cc0:	827b      	strh	r3, [r7, #18]
 8054cc2:	e014      	b.n	8054cee <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8054cc4:	8a7b      	ldrh	r3, [r7, #18]
 8054cc6:	3b30      	subs	r3, #48	@ 0x30
 8054cc8:	827b      	strh	r3, [r7, #18]
 8054cca:	e010      	b.n	8054cee <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8054ccc:	8a7b      	ldrh	r3, [r7, #18]
 8054cce:	3b1a      	subs	r3, #26
 8054cd0:	827b      	strh	r3, [r7, #18]
 8054cd2:	e00c      	b.n	8054cee <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8054cd4:	8a7b      	ldrh	r3, [r7, #18]
 8054cd6:	3308      	adds	r3, #8
 8054cd8:	827b      	strh	r3, [r7, #18]
 8054cda:	e008      	b.n	8054cee <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8054cdc:	8a7b      	ldrh	r3, [r7, #18]
 8054cde:	3b50      	subs	r3, #80	@ 0x50
 8054ce0:	827b      	strh	r3, [r7, #18]
 8054ce2:	e004      	b.n	8054cee <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8054ce4:	8a7b      	ldrh	r3, [r7, #18]
 8054ce6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8054cea:	827b      	strh	r3, [r7, #18]
 8054cec:	bf00      	nop
				}
				break;
 8054cee:	e008      	b.n	8054d02 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8054cf0:	89bb      	ldrh	r3, [r7, #12]
 8054cf2:	2b00      	cmp	r3, #0
 8054cf4:	d194      	bne.n	8054c20 <ff_wtoupper+0x24>
 8054cf6:	89fb      	ldrh	r3, [r7, #14]
 8054cf8:	005b      	lsls	r3, r3, #1
 8054cfa:	697a      	ldr	r2, [r7, #20]
 8054cfc:	4413      	add	r3, r2
 8054cfe:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8054d00:	e78e      	b.n	8054c20 <ff_wtoupper+0x24>
				break;
 8054d02:	bf00      	nop
		}
		uni = uc;
 8054d04:	8a7b      	ldrh	r3, [r7, #18]
 8054d06:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8054d08:	687b      	ldr	r3, [r7, #4]
}
 8054d0a:	4618      	mov	r0, r3
 8054d0c:	371c      	adds	r7, #28
 8054d0e:	46bd      	mov	sp, r7
 8054d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054d14:	4770      	bx	lr
 8054d16:	bf00      	nop
 8054d18:	08071f8c 	.word	0x08071f8c
 8054d1c:	08072180 	.word	0x08072180

08054d20 <ff_mutex_create>:
*/

int ff_mutex_create (	/* Returns 1:Function succeeded or 0:Could not create the mutex */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8054d20:	b580      	push	{r7, lr}
 8054d22:	b082      	sub	sp, #8
 8054d24:	af00      	add	r7, sp, #0
 8054d26:	6078      	str	r0, [r7, #4]

	Mutex[vol] = OSMutexCreate(0, &err);
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	Mutex[vol] = xSemaphoreCreateMutex();
 8054d28:	2001      	movs	r0, #1
 8054d2a:	f000 fa98 	bl	805525e <xQueueCreateMutex>
 8054d2e:	4602      	mov	r2, r0
 8054d30:	4908      	ldr	r1, [pc, #32]	@ (8054d54 <ff_mutex_create+0x34>)
 8054d32:	687b      	ldr	r3, [r7, #4]
 8054d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return (int)(Mutex[vol] != NULL);
 8054d38:	4a06      	ldr	r2, [pc, #24]	@ (8054d54 <ff_mutex_create+0x34>)
 8054d3a:	687b      	ldr	r3, [r7, #4]
 8054d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8054d40:	2b00      	cmp	r3, #0
 8054d42:	bf14      	ite	ne
 8054d44:	2301      	movne	r3, #1
 8054d46:	2300      	moveq	r3, #0
 8054d48:	b2db      	uxtb	r3, r3

	Mutex[vol] = osMutexCreate(osMutex(cmsis_os_mutex));
	return (int)(Mutex[vol] != NULL);

#endif
}
 8054d4a:	4618      	mov	r0, r3
 8054d4c:	3708      	adds	r7, #8
 8054d4e:	46bd      	mov	sp, r7
 8054d50:	bd80      	pop	{r7, pc}
 8054d52:	bf00      	nop
 8054d54:	2402d7a0 	.word	0x2402d7a0

08054d58 <ff_mutex_delete>:
*/

void ff_mutex_delete (	/* Returns 1:Function succeeded or 0:Could not delete due to an error */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8054d58:	b580      	push	{r7, lr}
 8054d5a:	b082      	sub	sp, #8
 8054d5c:	af00      	add	r7, sp, #0
 8054d5e:	6078      	str	r0, [r7, #4]
	OS_ERR err;

	OSMutexDel(Mutex[vol], OS_DEL_ALWAYS, &err);

#elif OS_TYPE == 3	/* FreeRTOS */
	vSemaphoreDelete(Mutex[vol]);
 8054d60:	4a05      	ldr	r2, [pc, #20]	@ (8054d78 <ff_mutex_delete+0x20>)
 8054d62:	687b      	ldr	r3, [r7, #4]
 8054d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8054d68:	4618      	mov	r0, r3
 8054d6a:	f000 ff25 	bl	8055bb8 <vQueueDelete>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexDelete(Mutex[vol]);

#endif
}
 8054d6e:	bf00      	nop
 8054d70:	3708      	adds	r7, #8
 8054d72:	46bd      	mov	sp, r7
 8054d74:	bd80      	pop	{r7, pc}
 8054d76:	bf00      	nop
 8054d78:	2402d7a0 	.word	0x2402d7a0

08054d7c <ff_mutex_take>:
*/

int ff_mutex_take (	/* Returns 1:Succeeded or 0:Timeout */
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8054d7c:	b580      	push	{r7, lr}
 8054d7e:	b082      	sub	sp, #8
 8054d80:	af00      	add	r7, sp, #0
 8054d82:	6078      	str	r0, [r7, #4]

	OSMutexPend(Mutex[vol], FF_FS_TIMEOUT, &err));
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	return (int)(xSemaphoreTake(Mutex[vol], FF_FS_TIMEOUT) == pdTRUE);
 8054d84:	4a09      	ldr	r2, [pc, #36]	@ (8054dac <ff_mutex_take+0x30>)
 8054d86:	687b      	ldr	r3, [r7, #4]
 8054d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8054d8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8054d90:	4618      	mov	r0, r3
 8054d92:	f000 fd21 	bl	80557d8 <xQueueSemaphoreTake>
 8054d96:	4603      	mov	r3, r0
 8054d98:	2b01      	cmp	r3, #1
 8054d9a:	bf0c      	ite	eq
 8054d9c:	2301      	moveq	r3, #1
 8054d9e:	2300      	movne	r3, #0
 8054da0:	b2db      	uxtb	r3, r3

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	return (int)(osMutexWait(Mutex[vol], FF_FS_TIMEOUT) == osOK);

#endif
}
 8054da2:	4618      	mov	r0, r3
 8054da4:	3708      	adds	r7, #8
 8054da6:	46bd      	mov	sp, r7
 8054da8:	bd80      	pop	{r7, pc}
 8054daa:	bf00      	nop
 8054dac:	2402d7a0 	.word	0x2402d7a0

08054db0 <ff_mutex_give>:
*/

void ff_mutex_give (
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8054db0:	b580      	push	{r7, lr}
 8054db2:	b082      	sub	sp, #8
 8054db4:	af00      	add	r7, sp, #0
 8054db6:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 2	/* uC/OS-II */
	OSMutexPost(Mutex[vol]);

#elif OS_TYPE == 3	/* FreeRTOS */
	xSemaphoreGive(Mutex[vol]);
 8054db8:	4a06      	ldr	r2, [pc, #24]	@ (8054dd4 <ff_mutex_give+0x24>)
 8054dba:	687b      	ldr	r3, [r7, #4]
 8054dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8054dc0:	2300      	movs	r3, #0
 8054dc2:	2200      	movs	r2, #0
 8054dc4:	2100      	movs	r1, #0
 8054dc6:	f000 fa63 	bl	8055290 <xQueueGenericSend>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexRelease(Mutex[vol]);

#endif
}
 8054dca:	bf00      	nop
 8054dcc:	3708      	adds	r7, #8
 8054dce:	46bd      	mov	sp, r7
 8054dd0:	bd80      	pop	{r7, pc}
 8054dd2:	bf00      	nop
 8054dd4:	2402d7a0 	.word	0x2402d7a0

08054dd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8054dd8:	b480      	push	{r7}
 8054dda:	b083      	sub	sp, #12
 8054ddc:	af00      	add	r7, sp, #0
 8054dde:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8054de0:	687b      	ldr	r3, [r7, #4]
 8054de2:	f103 0208 	add.w	r2, r3, #8
 8054de6:	687b      	ldr	r3, [r7, #4]
 8054de8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8054dea:	687b      	ldr	r3, [r7, #4]
 8054dec:	f04f 32ff 	mov.w	r2, #4294967295
 8054df0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8054df2:	687b      	ldr	r3, [r7, #4]
 8054df4:	f103 0208 	add.w	r2, r3, #8
 8054df8:	687b      	ldr	r3, [r7, #4]
 8054dfa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8054dfc:	687b      	ldr	r3, [r7, #4]
 8054dfe:	f103 0208 	add.w	r2, r3, #8
 8054e02:	687b      	ldr	r3, [r7, #4]
 8054e04:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8054e06:	687b      	ldr	r3, [r7, #4]
 8054e08:	2200      	movs	r2, #0
 8054e0a:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8054e0c:	bf00      	nop
 8054e0e:	370c      	adds	r7, #12
 8054e10:	46bd      	mov	sp, r7
 8054e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054e16:	4770      	bx	lr

08054e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8054e18:	b480      	push	{r7}
 8054e1a:	b083      	sub	sp, #12
 8054e1c:	af00      	add	r7, sp, #0
 8054e1e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8054e20:	687b      	ldr	r3, [r7, #4]
 8054e22:	2200      	movs	r2, #0
 8054e24:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8054e26:	bf00      	nop
 8054e28:	370c      	adds	r7, #12
 8054e2a:	46bd      	mov	sp, r7
 8054e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054e30:	4770      	bx	lr

08054e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8054e32:	b480      	push	{r7}
 8054e34:	b085      	sub	sp, #20
 8054e36:	af00      	add	r7, sp, #0
 8054e38:	6078      	str	r0, [r7, #4]
 8054e3a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8054e3c:	687b      	ldr	r3, [r7, #4]
 8054e3e:	685b      	ldr	r3, [r3, #4]
 8054e40:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8054e42:	683b      	ldr	r3, [r7, #0]
 8054e44:	68fa      	ldr	r2, [r7, #12]
 8054e46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8054e48:	68fb      	ldr	r3, [r7, #12]
 8054e4a:	689a      	ldr	r2, [r3, #8]
 8054e4c:	683b      	ldr	r3, [r7, #0]
 8054e4e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8054e50:	68fb      	ldr	r3, [r7, #12]
 8054e52:	689b      	ldr	r3, [r3, #8]
 8054e54:	683a      	ldr	r2, [r7, #0]
 8054e56:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8054e58:	68fb      	ldr	r3, [r7, #12]
 8054e5a:	683a      	ldr	r2, [r7, #0]
 8054e5c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8054e5e:	683b      	ldr	r3, [r7, #0]
 8054e60:	687a      	ldr	r2, [r7, #4]
 8054e62:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8054e64:	687b      	ldr	r3, [r7, #4]
 8054e66:	681b      	ldr	r3, [r3, #0]
 8054e68:	1c5a      	adds	r2, r3, #1
 8054e6a:	687b      	ldr	r3, [r7, #4]
 8054e6c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8054e6e:	bf00      	nop
 8054e70:	3714      	adds	r7, #20
 8054e72:	46bd      	mov	sp, r7
 8054e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054e78:	4770      	bx	lr

08054e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8054e7a:	b480      	push	{r7}
 8054e7c:	b085      	sub	sp, #20
 8054e7e:	af00      	add	r7, sp, #0
 8054e80:	6078      	str	r0, [r7, #4]
 8054e82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8054e84:	683b      	ldr	r3, [r7, #0]
 8054e86:	681b      	ldr	r3, [r3, #0]
 8054e88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8054e8a:	68bb      	ldr	r3, [r7, #8]
 8054e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8054e90:	d103      	bne.n	8054e9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8054e92:	687b      	ldr	r3, [r7, #4]
 8054e94:	691b      	ldr	r3, [r3, #16]
 8054e96:	60fb      	str	r3, [r7, #12]
 8054e98:	e00c      	b.n	8054eb4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8054e9a:	687b      	ldr	r3, [r7, #4]
 8054e9c:	3308      	adds	r3, #8
 8054e9e:	60fb      	str	r3, [r7, #12]
 8054ea0:	e002      	b.n	8054ea8 <vListInsert+0x2e>
 8054ea2:	68fb      	ldr	r3, [r7, #12]
 8054ea4:	685b      	ldr	r3, [r3, #4]
 8054ea6:	60fb      	str	r3, [r7, #12]
 8054ea8:	68fb      	ldr	r3, [r7, #12]
 8054eaa:	685b      	ldr	r3, [r3, #4]
 8054eac:	681b      	ldr	r3, [r3, #0]
 8054eae:	68ba      	ldr	r2, [r7, #8]
 8054eb0:	429a      	cmp	r2, r3
 8054eb2:	d2f6      	bcs.n	8054ea2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8054eb4:	68fb      	ldr	r3, [r7, #12]
 8054eb6:	685a      	ldr	r2, [r3, #4]
 8054eb8:	683b      	ldr	r3, [r7, #0]
 8054eba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8054ebc:	683b      	ldr	r3, [r7, #0]
 8054ebe:	685b      	ldr	r3, [r3, #4]
 8054ec0:	683a      	ldr	r2, [r7, #0]
 8054ec2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8054ec4:	683b      	ldr	r3, [r7, #0]
 8054ec6:	68fa      	ldr	r2, [r7, #12]
 8054ec8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8054eca:	68fb      	ldr	r3, [r7, #12]
 8054ecc:	683a      	ldr	r2, [r7, #0]
 8054ece:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8054ed0:	683b      	ldr	r3, [r7, #0]
 8054ed2:	687a      	ldr	r2, [r7, #4]
 8054ed4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8054ed6:	687b      	ldr	r3, [r7, #4]
 8054ed8:	681b      	ldr	r3, [r3, #0]
 8054eda:	1c5a      	adds	r2, r3, #1
 8054edc:	687b      	ldr	r3, [r7, #4]
 8054ede:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8054ee0:	bf00      	nop
 8054ee2:	3714      	adds	r7, #20
 8054ee4:	46bd      	mov	sp, r7
 8054ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054eea:	4770      	bx	lr

08054eec <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8054eec:	b480      	push	{r7}
 8054eee:	b085      	sub	sp, #20
 8054ef0:	af00      	add	r7, sp, #0
 8054ef2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8054ef4:	687b      	ldr	r3, [r7, #4]
 8054ef6:	691b      	ldr	r3, [r3, #16]
 8054ef8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8054efa:	687b      	ldr	r3, [r7, #4]
 8054efc:	685b      	ldr	r3, [r3, #4]
 8054efe:	687a      	ldr	r2, [r7, #4]
 8054f00:	6892      	ldr	r2, [r2, #8]
 8054f02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8054f04:	687b      	ldr	r3, [r7, #4]
 8054f06:	689b      	ldr	r3, [r3, #8]
 8054f08:	687a      	ldr	r2, [r7, #4]
 8054f0a:	6852      	ldr	r2, [r2, #4]
 8054f0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8054f0e:	68fb      	ldr	r3, [r7, #12]
 8054f10:	685b      	ldr	r3, [r3, #4]
 8054f12:	687a      	ldr	r2, [r7, #4]
 8054f14:	429a      	cmp	r2, r3
 8054f16:	d103      	bne.n	8054f20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8054f18:	687b      	ldr	r3, [r7, #4]
 8054f1a:	689a      	ldr	r2, [r3, #8]
 8054f1c:	68fb      	ldr	r3, [r7, #12]
 8054f1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8054f20:	687b      	ldr	r3, [r7, #4]
 8054f22:	2200      	movs	r2, #0
 8054f24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8054f26:	68fb      	ldr	r3, [r7, #12]
 8054f28:	681b      	ldr	r3, [r3, #0]
 8054f2a:	1e5a      	subs	r2, r3, #1
 8054f2c:	68fb      	ldr	r3, [r7, #12]
 8054f2e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8054f30:	68fb      	ldr	r3, [r7, #12]
 8054f32:	681b      	ldr	r3, [r3, #0]
}
 8054f34:	4618      	mov	r0, r3
 8054f36:	3714      	adds	r7, #20
 8054f38:	46bd      	mov	sp, r7
 8054f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054f3e:	4770      	bx	lr

08054f40 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8054f40:	b580      	push	{r7, lr}
 8054f42:	b086      	sub	sp, #24
 8054f44:	af00      	add	r7, sp, #0
 8054f46:	6078      	str	r0, [r7, #4]
 8054f48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8054f4a:	2301      	movs	r3, #1
 8054f4c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8054f4e:	687b      	ldr	r3, [r7, #4]
 8054f50:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8054f52:	693b      	ldr	r3, [r7, #16]
 8054f54:	2b00      	cmp	r3, #0
 8054f56:	d10d      	bne.n	8054f74 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8054f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8054f5c:	b672      	cpsid	i
 8054f5e:	f383 8811 	msr	BASEPRI, r3
 8054f62:	f3bf 8f6f 	isb	sy
 8054f66:	f3bf 8f4f 	dsb	sy
 8054f6a:	b662      	cpsie	i
 8054f6c:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8054f6e:	bf00      	nop
 8054f70:	bf00      	nop
 8054f72:	e7fd      	b.n	8054f70 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8054f74:	693b      	ldr	r3, [r7, #16]
 8054f76:	2b00      	cmp	r3, #0
 8054f78:	d05d      	beq.n	8055036 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8054f7a:	693b      	ldr	r3, [r7, #16]
 8054f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8054f7e:	2b00      	cmp	r3, #0
 8054f80:	d059      	beq.n	8055036 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8054f82:	693b      	ldr	r3, [r7, #16]
 8054f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8054f86:	693b      	ldr	r3, [r7, #16]
 8054f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8054f8a:	2100      	movs	r1, #0
 8054f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8054f90:	2b00      	cmp	r3, #0
 8054f92:	d000      	beq.n	8054f96 <xQueueGenericReset+0x56>
 8054f94:	2101      	movs	r1, #1
 8054f96:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8054f98:	2b00      	cmp	r3, #0
 8054f9a:	d14c      	bne.n	8055036 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8054f9c:	f003 fcca 	bl	8058934 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8054fa0:	693b      	ldr	r3, [r7, #16]
 8054fa2:	681a      	ldr	r2, [r3, #0]
 8054fa4:	693b      	ldr	r3, [r7, #16]
 8054fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8054fa8:	6939      	ldr	r1, [r7, #16]
 8054faa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8054fac:	fb01 f303 	mul.w	r3, r1, r3
 8054fb0:	441a      	add	r2, r3
 8054fb2:	693b      	ldr	r3, [r7, #16]
 8054fb4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8054fb6:	693b      	ldr	r3, [r7, #16]
 8054fb8:	2200      	movs	r2, #0
 8054fba:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8054fbc:	693b      	ldr	r3, [r7, #16]
 8054fbe:	681a      	ldr	r2, [r3, #0]
 8054fc0:	693b      	ldr	r3, [r7, #16]
 8054fc2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8054fc4:	693b      	ldr	r3, [r7, #16]
 8054fc6:	681a      	ldr	r2, [r3, #0]
 8054fc8:	693b      	ldr	r3, [r7, #16]
 8054fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8054fcc:	3b01      	subs	r3, #1
 8054fce:	6939      	ldr	r1, [r7, #16]
 8054fd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8054fd2:	fb01 f303 	mul.w	r3, r1, r3
 8054fd6:	441a      	add	r2, r3
 8054fd8:	693b      	ldr	r3, [r7, #16]
 8054fda:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8054fdc:	693b      	ldr	r3, [r7, #16]
 8054fde:	22ff      	movs	r2, #255	@ 0xff
 8054fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8054fe4:	693b      	ldr	r3, [r7, #16]
 8054fe6:	22ff      	movs	r2, #255	@ 0xff
 8054fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8054fec:	683b      	ldr	r3, [r7, #0]
 8054fee:	2b00      	cmp	r3, #0
 8054ff0:	d114      	bne.n	805501c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8054ff2:	693b      	ldr	r3, [r7, #16]
 8054ff4:	691b      	ldr	r3, [r3, #16]
 8054ff6:	2b00      	cmp	r3, #0
 8054ff8:	d01a      	beq.n	8055030 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8054ffa:	693b      	ldr	r3, [r7, #16]
 8054ffc:	3310      	adds	r3, #16
 8054ffe:	4618      	mov	r0, r3
 8055000:	f002 f83a 	bl	8057078 <xTaskRemoveFromEventList>
 8055004:	4603      	mov	r3, r0
 8055006:	2b00      	cmp	r3, #0
 8055008:	d012      	beq.n	8055030 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 805500a:	4b17      	ldr	r3, [pc, #92]	@ (8055068 <xQueueGenericReset+0x128>)
 805500c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8055010:	601a      	str	r2, [r3, #0]
 8055012:	f3bf 8f4f 	dsb	sy
 8055016:	f3bf 8f6f 	isb	sy
 805501a:	e009      	b.n	8055030 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 805501c:	693b      	ldr	r3, [r7, #16]
 805501e:	3310      	adds	r3, #16
 8055020:	4618      	mov	r0, r3
 8055022:	f7ff fed9 	bl	8054dd8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8055026:	693b      	ldr	r3, [r7, #16]
 8055028:	3324      	adds	r3, #36	@ 0x24
 805502a:	4618      	mov	r0, r3
 805502c:	f7ff fed4 	bl	8054dd8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8055030:	f003 fcb6 	bl	80589a0 <vPortExitCritical>
 8055034:	e001      	b.n	805503a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8055036:	2300      	movs	r3, #0
 8055038:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 805503a:	697b      	ldr	r3, [r7, #20]
 805503c:	2b00      	cmp	r3, #0
 805503e:	d10d      	bne.n	805505c <xQueueGenericReset+0x11c>
    __asm volatile
 8055040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055044:	b672      	cpsid	i
 8055046:	f383 8811 	msr	BASEPRI, r3
 805504a:	f3bf 8f6f 	isb	sy
 805504e:	f3bf 8f4f 	dsb	sy
 8055052:	b662      	cpsie	i
 8055054:	60bb      	str	r3, [r7, #8]
}
 8055056:	bf00      	nop
 8055058:	bf00      	nop
 805505a:	e7fd      	b.n	8055058 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 805505c:	697b      	ldr	r3, [r7, #20]
}
 805505e:	4618      	mov	r0, r3
 8055060:	3718      	adds	r7, #24
 8055062:	46bd      	mov	sp, r7
 8055064:	bd80      	pop	{r7, pc}
 8055066:	bf00      	nop
 8055068:	e000ed04 	.word	0xe000ed04

0805506c <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 805506c:	b580      	push	{r7, lr}
 805506e:	b08c      	sub	sp, #48	@ 0x30
 8055070:	af02      	add	r7, sp, #8
 8055072:	60f8      	str	r0, [r7, #12]
 8055074:	60b9      	str	r1, [r7, #8]
 8055076:	607a      	str	r2, [r7, #4]
 8055078:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 805507a:	2300      	movs	r3, #0
 805507c:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 805507e:	683b      	ldr	r3, [r7, #0]
 8055080:	2b00      	cmp	r3, #0
 8055082:	d10d      	bne.n	80550a0 <xQueueGenericCreateStatic+0x34>
    __asm volatile
 8055084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055088:	b672      	cpsid	i
 805508a:	f383 8811 	msr	BASEPRI, r3
 805508e:	f3bf 8f6f 	isb	sy
 8055092:	f3bf 8f4f 	dsb	sy
 8055096:	b662      	cpsie	i
 8055098:	623b      	str	r3, [r7, #32]
}
 805509a:	bf00      	nop
 805509c:	bf00      	nop
 805509e:	e7fd      	b.n	805509c <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80550a0:	68fb      	ldr	r3, [r7, #12]
 80550a2:	2b00      	cmp	r3, #0
 80550a4:	d033      	beq.n	805510e <xQueueGenericCreateStatic+0xa2>
 80550a6:	683b      	ldr	r3, [r7, #0]
 80550a8:	2b00      	cmp	r3, #0
 80550aa:	d030      	beq.n	805510e <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 80550ac:	687b      	ldr	r3, [r7, #4]
 80550ae:	2b00      	cmp	r3, #0
 80550b0:	d002      	beq.n	80550b8 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80550b2:	68bb      	ldr	r3, [r7, #8]
 80550b4:	2b00      	cmp	r3, #0
 80550b6:	d02a      	beq.n	805510e <xQueueGenericCreateStatic+0xa2>
 80550b8:	687b      	ldr	r3, [r7, #4]
 80550ba:	2b00      	cmp	r3, #0
 80550bc:	d102      	bne.n	80550c4 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80550be:	68bb      	ldr	r3, [r7, #8]
 80550c0:	2b00      	cmp	r3, #0
 80550c2:	d124      	bne.n	805510e <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80550c4:	2350      	movs	r3, #80	@ 0x50
 80550c6:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80550c8:	697b      	ldr	r3, [r7, #20]
 80550ca:	2b50      	cmp	r3, #80	@ 0x50
 80550cc:	d00d      	beq.n	80550ea <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 80550ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80550d2:	b672      	cpsid	i
 80550d4:	f383 8811 	msr	BASEPRI, r3
 80550d8:	f3bf 8f6f 	isb	sy
 80550dc:	f3bf 8f4f 	dsb	sy
 80550e0:	b662      	cpsie	i
 80550e2:	61fb      	str	r3, [r7, #28]
}
 80550e4:	bf00      	nop
 80550e6:	bf00      	nop
 80550e8:	e7fd      	b.n	80550e6 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80550ea:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80550ec:	683b      	ldr	r3, [r7, #0]
 80550ee:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80550f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80550f2:	2201      	movs	r2, #1
 80550f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80550f8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80550fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80550fe:	9300      	str	r3, [sp, #0]
 8055100:	4613      	mov	r3, r2
 8055102:	687a      	ldr	r2, [r7, #4]
 8055104:	68b9      	ldr	r1, [r7, #8]
 8055106:	68f8      	ldr	r0, [r7, #12]
 8055108:	f000 f86c 	bl	80551e4 <prvInitialiseNewQueue>
 805510c:	e010      	b.n	8055130 <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 805510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055110:	2b00      	cmp	r3, #0
 8055112:	d10d      	bne.n	8055130 <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8055114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055118:	b672      	cpsid	i
 805511a:	f383 8811 	msr	BASEPRI, r3
 805511e:	f3bf 8f6f 	isb	sy
 8055122:	f3bf 8f4f 	dsb	sy
 8055126:	b662      	cpsie	i
 8055128:	61bb      	str	r3, [r7, #24]
}
 805512a:	bf00      	nop
 805512c:	bf00      	nop
 805512e:	e7fd      	b.n	805512c <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8055130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8055132:	4618      	mov	r0, r3
 8055134:	3728      	adds	r7, #40	@ 0x28
 8055136:	46bd      	mov	sp, r7
 8055138:	bd80      	pop	{r7, pc}

0805513a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 805513a:	b580      	push	{r7, lr}
 805513c:	b08a      	sub	sp, #40	@ 0x28
 805513e:	af02      	add	r7, sp, #8
 8055140:	60f8      	str	r0, [r7, #12]
 8055142:	60b9      	str	r1, [r7, #8]
 8055144:	4613      	mov	r3, r2
 8055146:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8055148:	2300      	movs	r3, #0
 805514a:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 805514c:	68fb      	ldr	r3, [r7, #12]
 805514e:	2b00      	cmp	r3, #0
 8055150:	d032      	beq.n	80551b8 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8055152:	2100      	movs	r1, #0
 8055154:	68ba      	ldr	r2, [r7, #8]
 8055156:	68fb      	ldr	r3, [r7, #12]
 8055158:	fba3 2302 	umull	r2, r3, r3, r2
 805515c:	2b00      	cmp	r3, #0
 805515e:	d000      	beq.n	8055162 <xQueueGenericCreate+0x28>
 8055160:	2101      	movs	r1, #1
 8055162:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8055164:	2b00      	cmp	r3, #0
 8055166:	d127      	bne.n	80551b8 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8055168:	68fb      	ldr	r3, [r7, #12]
 805516a:	68ba      	ldr	r2, [r7, #8]
 805516c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8055170:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8055174:	d820      	bhi.n	80551b8 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8055176:	68fb      	ldr	r3, [r7, #12]
 8055178:	68ba      	ldr	r2, [r7, #8]
 805517a:	fb02 f303 	mul.w	r3, r2, r3
 805517e:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8055180:	69bb      	ldr	r3, [r7, #24]
 8055182:	3350      	adds	r3, #80	@ 0x50
 8055184:	4618      	mov	r0, r3
 8055186:	f003 fd09 	bl	8058b9c <pvPortMalloc>
 805518a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 805518c:	69fb      	ldr	r3, [r7, #28]
 805518e:	2b00      	cmp	r3, #0
 8055190:	d023      	beq.n	80551da <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8055192:	69fb      	ldr	r3, [r7, #28]
 8055194:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8055196:	697b      	ldr	r3, [r7, #20]
 8055198:	3350      	adds	r3, #80	@ 0x50
 805519a:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 805519c:	69fb      	ldr	r3, [r7, #28]
 805519e:	2200      	movs	r2, #0
 80551a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80551a4:	79fa      	ldrb	r2, [r7, #7]
 80551a6:	69fb      	ldr	r3, [r7, #28]
 80551a8:	9300      	str	r3, [sp, #0]
 80551aa:	4613      	mov	r3, r2
 80551ac:	697a      	ldr	r2, [r7, #20]
 80551ae:	68b9      	ldr	r1, [r7, #8]
 80551b0:	68f8      	ldr	r0, [r7, #12]
 80551b2:	f000 f817 	bl	80551e4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80551b6:	e010      	b.n	80551da <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80551b8:	69fb      	ldr	r3, [r7, #28]
 80551ba:	2b00      	cmp	r3, #0
 80551bc:	d10d      	bne.n	80551da <xQueueGenericCreate+0xa0>
    __asm volatile
 80551be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80551c2:	b672      	cpsid	i
 80551c4:	f383 8811 	msr	BASEPRI, r3
 80551c8:	f3bf 8f6f 	isb	sy
 80551cc:	f3bf 8f4f 	dsb	sy
 80551d0:	b662      	cpsie	i
 80551d2:	613b      	str	r3, [r7, #16]
}
 80551d4:	bf00      	nop
 80551d6:	bf00      	nop
 80551d8:	e7fd      	b.n	80551d6 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80551da:	69fb      	ldr	r3, [r7, #28]
    }
 80551dc:	4618      	mov	r0, r3
 80551de:	3720      	adds	r7, #32
 80551e0:	46bd      	mov	sp, r7
 80551e2:	bd80      	pop	{r7, pc}

080551e4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80551e4:	b580      	push	{r7, lr}
 80551e6:	b084      	sub	sp, #16
 80551e8:	af00      	add	r7, sp, #0
 80551ea:	60f8      	str	r0, [r7, #12]
 80551ec:	60b9      	str	r1, [r7, #8]
 80551ee:	607a      	str	r2, [r7, #4]
 80551f0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80551f2:	68bb      	ldr	r3, [r7, #8]
 80551f4:	2b00      	cmp	r3, #0
 80551f6:	d103      	bne.n	8055200 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80551f8:	69bb      	ldr	r3, [r7, #24]
 80551fa:	69ba      	ldr	r2, [r7, #24]
 80551fc:	601a      	str	r2, [r3, #0]
 80551fe:	e002      	b.n	8055206 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8055200:	69bb      	ldr	r3, [r7, #24]
 8055202:	687a      	ldr	r2, [r7, #4]
 8055204:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8055206:	69bb      	ldr	r3, [r7, #24]
 8055208:	68fa      	ldr	r2, [r7, #12]
 805520a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 805520c:	69bb      	ldr	r3, [r7, #24]
 805520e:	68ba      	ldr	r2, [r7, #8]
 8055210:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8055212:	2101      	movs	r1, #1
 8055214:	69b8      	ldr	r0, [r7, #24]
 8055216:	f7ff fe93 	bl	8054f40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 805521a:	69bb      	ldr	r3, [r7, #24]
 805521c:	78fa      	ldrb	r2, [r7, #3]
 805521e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8055222:	bf00      	nop
 8055224:	3710      	adds	r7, #16
 8055226:	46bd      	mov	sp, r7
 8055228:	bd80      	pop	{r7, pc}

0805522a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 805522a:	b580      	push	{r7, lr}
 805522c:	b082      	sub	sp, #8
 805522e:	af00      	add	r7, sp, #0
 8055230:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8055232:	687b      	ldr	r3, [r7, #4]
 8055234:	2b00      	cmp	r3, #0
 8055236:	d00e      	beq.n	8055256 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8055238:	687b      	ldr	r3, [r7, #4]
 805523a:	2200      	movs	r2, #0
 805523c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 805523e:	687b      	ldr	r3, [r7, #4]
 8055240:	2200      	movs	r2, #0
 8055242:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8055244:	687b      	ldr	r3, [r7, #4]
 8055246:	2200      	movs	r2, #0
 8055248:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 805524a:	2300      	movs	r3, #0
 805524c:	2200      	movs	r2, #0
 805524e:	2100      	movs	r1, #0
 8055250:	6878      	ldr	r0, [r7, #4]
 8055252:	f000 f81d 	bl	8055290 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8055256:	bf00      	nop
 8055258:	3708      	adds	r7, #8
 805525a:	46bd      	mov	sp, r7
 805525c:	bd80      	pop	{r7, pc}

0805525e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 805525e:	b580      	push	{r7, lr}
 8055260:	b086      	sub	sp, #24
 8055262:	af00      	add	r7, sp, #0
 8055264:	4603      	mov	r3, r0
 8055266:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8055268:	2301      	movs	r3, #1
 805526a:	617b      	str	r3, [r7, #20]
 805526c:	2300      	movs	r3, #0
 805526e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8055270:	79fb      	ldrb	r3, [r7, #7]
 8055272:	461a      	mov	r2, r3
 8055274:	6939      	ldr	r1, [r7, #16]
 8055276:	6978      	ldr	r0, [r7, #20]
 8055278:	f7ff ff5f 	bl	805513a <xQueueGenericCreate>
 805527c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 805527e:	68f8      	ldr	r0, [r7, #12]
 8055280:	f7ff ffd3 	bl	805522a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8055284:	68fb      	ldr	r3, [r7, #12]
    }
 8055286:	4618      	mov	r0, r3
 8055288:	3718      	adds	r7, #24
 805528a:	46bd      	mov	sp, r7
 805528c:	bd80      	pop	{r7, pc}
	...

08055290 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8055290:	b580      	push	{r7, lr}
 8055292:	b08e      	sub	sp, #56	@ 0x38
 8055294:	af00      	add	r7, sp, #0
 8055296:	60f8      	str	r0, [r7, #12]
 8055298:	60b9      	str	r1, [r7, #8]
 805529a:	607a      	str	r2, [r7, #4]
 805529c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 805529e:	2300      	movs	r3, #0
 80552a0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80552a2:	68fb      	ldr	r3, [r7, #12]
 80552a4:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80552a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80552a8:	2b00      	cmp	r3, #0
 80552aa:	d10d      	bne.n	80552c8 <xQueueGenericSend+0x38>
    __asm volatile
 80552ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80552b0:	b672      	cpsid	i
 80552b2:	f383 8811 	msr	BASEPRI, r3
 80552b6:	f3bf 8f6f 	isb	sy
 80552ba:	f3bf 8f4f 	dsb	sy
 80552be:	b662      	cpsie	i
 80552c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80552c2:	bf00      	nop
 80552c4:	bf00      	nop
 80552c6:	e7fd      	b.n	80552c4 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80552c8:	68bb      	ldr	r3, [r7, #8]
 80552ca:	2b00      	cmp	r3, #0
 80552cc:	d103      	bne.n	80552d6 <xQueueGenericSend+0x46>
 80552ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80552d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80552d2:	2b00      	cmp	r3, #0
 80552d4:	d101      	bne.n	80552da <xQueueGenericSend+0x4a>
 80552d6:	2301      	movs	r3, #1
 80552d8:	e000      	b.n	80552dc <xQueueGenericSend+0x4c>
 80552da:	2300      	movs	r3, #0
 80552dc:	2b00      	cmp	r3, #0
 80552de:	d10d      	bne.n	80552fc <xQueueGenericSend+0x6c>
    __asm volatile
 80552e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80552e4:	b672      	cpsid	i
 80552e6:	f383 8811 	msr	BASEPRI, r3
 80552ea:	f3bf 8f6f 	isb	sy
 80552ee:	f3bf 8f4f 	dsb	sy
 80552f2:	b662      	cpsie	i
 80552f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80552f6:	bf00      	nop
 80552f8:	bf00      	nop
 80552fa:	e7fd      	b.n	80552f8 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80552fc:	683b      	ldr	r3, [r7, #0]
 80552fe:	2b02      	cmp	r3, #2
 8055300:	d103      	bne.n	805530a <xQueueGenericSend+0x7a>
 8055302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8055306:	2b01      	cmp	r3, #1
 8055308:	d101      	bne.n	805530e <xQueueGenericSend+0x7e>
 805530a:	2301      	movs	r3, #1
 805530c:	e000      	b.n	8055310 <xQueueGenericSend+0x80>
 805530e:	2300      	movs	r3, #0
 8055310:	2b00      	cmp	r3, #0
 8055312:	d10d      	bne.n	8055330 <xQueueGenericSend+0xa0>
    __asm volatile
 8055314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055318:	b672      	cpsid	i
 805531a:	f383 8811 	msr	BASEPRI, r3
 805531e:	f3bf 8f6f 	isb	sy
 8055322:	f3bf 8f4f 	dsb	sy
 8055326:	b662      	cpsie	i
 8055328:	623b      	str	r3, [r7, #32]
}
 805532a:	bf00      	nop
 805532c:	bf00      	nop
 805532e:	e7fd      	b.n	805532c <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8055330:	f002 f996 	bl	8057660 <xTaskGetSchedulerState>
 8055334:	4603      	mov	r3, r0
 8055336:	2b00      	cmp	r3, #0
 8055338:	d102      	bne.n	8055340 <xQueueGenericSend+0xb0>
 805533a:	687b      	ldr	r3, [r7, #4]
 805533c:	2b00      	cmp	r3, #0
 805533e:	d101      	bne.n	8055344 <xQueueGenericSend+0xb4>
 8055340:	2301      	movs	r3, #1
 8055342:	e000      	b.n	8055346 <xQueueGenericSend+0xb6>
 8055344:	2300      	movs	r3, #0
 8055346:	2b00      	cmp	r3, #0
 8055348:	d10d      	bne.n	8055366 <xQueueGenericSend+0xd6>
    __asm volatile
 805534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805534e:	b672      	cpsid	i
 8055350:	f383 8811 	msr	BASEPRI, r3
 8055354:	f3bf 8f6f 	isb	sy
 8055358:	f3bf 8f4f 	dsb	sy
 805535c:	b662      	cpsie	i
 805535e:	61fb      	str	r3, [r7, #28]
}
 8055360:	bf00      	nop
 8055362:	bf00      	nop
 8055364:	e7fd      	b.n	8055362 <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8055366:	f003 fae5 	bl	8058934 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805536c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 805536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8055372:	429a      	cmp	r2, r3
 8055374:	d302      	bcc.n	805537c <xQueueGenericSend+0xec>
 8055376:	683b      	ldr	r3, [r7, #0]
 8055378:	2b02      	cmp	r3, #2
 805537a:	d129      	bne.n	80553d0 <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805537c:	683a      	ldr	r2, [r7, #0]
 805537e:	68b9      	ldr	r1, [r7, #8]
 8055380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055382:	f000 fc57 	bl	8055c34 <prvCopyDataToQueue>
 8055386:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8055388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 805538c:	2b00      	cmp	r3, #0
 805538e:	d010      	beq.n	80553b2 <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8055390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055392:	3324      	adds	r3, #36	@ 0x24
 8055394:	4618      	mov	r0, r3
 8055396:	f001 fe6f 	bl	8057078 <xTaskRemoveFromEventList>
 805539a:	4603      	mov	r3, r0
 805539c:	2b00      	cmp	r3, #0
 805539e:	d013      	beq.n	80553c8 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80553a0:	4b3f      	ldr	r3, [pc, #252]	@ (80554a0 <xQueueGenericSend+0x210>)
 80553a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80553a6:	601a      	str	r2, [r3, #0]
 80553a8:	f3bf 8f4f 	dsb	sy
 80553ac:	f3bf 8f6f 	isb	sy
 80553b0:	e00a      	b.n	80553c8 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80553b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80553b4:	2b00      	cmp	r3, #0
 80553b6:	d007      	beq.n	80553c8 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80553b8:	4b39      	ldr	r3, [pc, #228]	@ (80554a0 <xQueueGenericSend+0x210>)
 80553ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80553be:	601a      	str	r2, [r3, #0]
 80553c0:	f3bf 8f4f 	dsb	sy
 80553c4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80553c8:	f003 faea 	bl	80589a0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80553cc:	2301      	movs	r3, #1
 80553ce:	e063      	b.n	8055498 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80553d0:	687b      	ldr	r3, [r7, #4]
 80553d2:	2b00      	cmp	r3, #0
 80553d4:	d103      	bne.n	80553de <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80553d6:	f003 fae3 	bl	80589a0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80553da:	2300      	movs	r3, #0
 80553dc:	e05c      	b.n	8055498 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 80553de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80553e0:	2b00      	cmp	r3, #0
 80553e2:	d106      	bne.n	80553f2 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80553e4:	f107 0314 	add.w	r3, r7, #20
 80553e8:	4618      	mov	r0, r3
 80553ea:	f001 ff21 	bl	8057230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80553ee:	2301      	movs	r3, #1
 80553f0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80553f2:	f003 fad5 	bl	80589a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80553f6:	f001 fa7f 	bl	80568f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80553fa:	f003 fa9b 	bl	8058934 <vPortEnterCritical>
 80553fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8055404:	b25b      	sxtb	r3, r3
 8055406:	f1b3 3fff 	cmp.w	r3, #4294967295
 805540a:	d103      	bne.n	8055414 <xQueueGenericSend+0x184>
 805540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805540e:	2200      	movs	r2, #0
 8055410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8055414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 805541a:	b25b      	sxtb	r3, r3
 805541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055420:	d103      	bne.n	805542a <xQueueGenericSend+0x19a>
 8055422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055424:	2200      	movs	r2, #0
 8055426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 805542a:	f003 fab9 	bl	80589a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805542e:	1d3a      	adds	r2, r7, #4
 8055430:	f107 0314 	add.w	r3, r7, #20
 8055434:	4611      	mov	r1, r2
 8055436:	4618      	mov	r0, r3
 8055438:	f001 ff10 	bl	805725c <xTaskCheckForTimeOut>
 805543c:	4603      	mov	r3, r0
 805543e:	2b00      	cmp	r3, #0
 8055440:	d124      	bne.n	805548c <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8055442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055444:	f000 fcee 	bl	8055e24 <prvIsQueueFull>
 8055448:	4603      	mov	r3, r0
 805544a:	2b00      	cmp	r3, #0
 805544c:	d018      	beq.n	8055480 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 805544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055450:	3310      	adds	r3, #16
 8055452:	687a      	ldr	r2, [r7, #4]
 8055454:	4611      	mov	r1, r2
 8055456:	4618      	mov	r0, r3
 8055458:	f001 fd9e 	bl	8056f98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 805545c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 805545e:	f000 fc79 	bl	8055d54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8055462:	f001 fa57 	bl	8056914 <xTaskResumeAll>
 8055466:	4603      	mov	r3, r0
 8055468:	2b00      	cmp	r3, #0
 805546a:	f47f af7c 	bne.w	8055366 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 805546e:	4b0c      	ldr	r3, [pc, #48]	@ (80554a0 <xQueueGenericSend+0x210>)
 8055470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8055474:	601a      	str	r2, [r3, #0]
 8055476:	f3bf 8f4f 	dsb	sy
 805547a:	f3bf 8f6f 	isb	sy
 805547e:	e772      	b.n	8055366 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8055480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055482:	f000 fc67 	bl	8055d54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8055486:	f001 fa45 	bl	8056914 <xTaskResumeAll>
 805548a:	e76c      	b.n	8055366 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 805548c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 805548e:	f000 fc61 	bl	8055d54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8055492:	f001 fa3f 	bl	8056914 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8055496:	2300      	movs	r3, #0
        }
    }
}
 8055498:	4618      	mov	r0, r3
 805549a:	3738      	adds	r7, #56	@ 0x38
 805549c:	46bd      	mov	sp, r7
 805549e:	bd80      	pop	{r7, pc}
 80554a0:	e000ed04 	.word	0xe000ed04

080554a4 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80554a4:	b580      	push	{r7, lr}
 80554a6:	b090      	sub	sp, #64	@ 0x40
 80554a8:	af00      	add	r7, sp, #0
 80554aa:	6078      	str	r0, [r7, #4]
 80554ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80554ae:	687b      	ldr	r3, [r7, #4]
 80554b0:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80554b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80554b4:	2b00      	cmp	r3, #0
 80554b6:	d10d      	bne.n	80554d4 <xQueueGiveFromISR+0x30>
    __asm volatile
 80554b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80554bc:	b672      	cpsid	i
 80554be:	f383 8811 	msr	BASEPRI, r3
 80554c2:	f3bf 8f6f 	isb	sy
 80554c6:	f3bf 8f4f 	dsb	sy
 80554ca:	b662      	cpsie	i
 80554cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80554ce:	bf00      	nop
 80554d0:	bf00      	nop
 80554d2:	e7fd      	b.n	80554d0 <xQueueGiveFromISR+0x2c>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80554d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80554d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80554d8:	2b00      	cmp	r3, #0
 80554da:	d00d      	beq.n	80554f8 <xQueueGiveFromISR+0x54>
    __asm volatile
 80554dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80554e0:	b672      	cpsid	i
 80554e2:	f383 8811 	msr	BASEPRI, r3
 80554e6:	f3bf 8f6f 	isb	sy
 80554ea:	f3bf 8f4f 	dsb	sy
 80554ee:	b662      	cpsie	i
 80554f0:	623b      	str	r3, [r7, #32]
}
 80554f2:	bf00      	nop
 80554f4:	bf00      	nop
 80554f6:	e7fd      	b.n	80554f4 <xQueueGiveFromISR+0x50>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80554f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80554fa:	681b      	ldr	r3, [r3, #0]
 80554fc:	2b00      	cmp	r3, #0
 80554fe:	d103      	bne.n	8055508 <xQueueGiveFromISR+0x64>
 8055500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055502:	689b      	ldr	r3, [r3, #8]
 8055504:	2b00      	cmp	r3, #0
 8055506:	d101      	bne.n	805550c <xQueueGiveFromISR+0x68>
 8055508:	2301      	movs	r3, #1
 805550a:	e000      	b.n	805550e <xQueueGiveFromISR+0x6a>
 805550c:	2300      	movs	r3, #0
 805550e:	2b00      	cmp	r3, #0
 8055510:	d10d      	bne.n	805552e <xQueueGiveFromISR+0x8a>
    __asm volatile
 8055512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055516:	b672      	cpsid	i
 8055518:	f383 8811 	msr	BASEPRI, r3
 805551c:	f3bf 8f6f 	isb	sy
 8055520:	f3bf 8f4f 	dsb	sy
 8055524:	b662      	cpsie	i
 8055526:	61fb      	str	r3, [r7, #28]
}
 8055528:	bf00      	nop
 805552a:	bf00      	nop
 805552c:	e7fd      	b.n	805552a <xQueueGiveFromISR+0x86>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805552e:	f003 faef 	bl	8058b10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8055532:	f3ef 8211 	mrs	r2, BASEPRI
 8055536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805553a:	b672      	cpsid	i
 805553c:	f383 8811 	msr	BASEPRI, r3
 8055540:	f3bf 8f6f 	isb	sy
 8055544:	f3bf 8f4f 	dsb	sy
 8055548:	b662      	cpsie	i
 805554a:	61ba      	str	r2, [r7, #24]
 805554c:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 805554e:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8055550:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8055552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055556:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8055558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 805555a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 805555c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 805555e:	429a      	cmp	r2, r3
 8055560:	d245      	bcs.n	80555ee <xQueueGiveFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8055562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8055568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805556e:	1c5a      	adds	r2, r3, #1
 8055570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055572:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8055574:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8055578:	f1b3 3fff 	cmp.w	r3, #4294967295
 805557c:	d112      	bne.n	80555a4 <xQueueGiveFromISR+0x100>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8055582:	2b00      	cmp	r3, #0
 8055584:	d030      	beq.n	80555e8 <xQueueGiveFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8055586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8055588:	3324      	adds	r3, #36	@ 0x24
 805558a:	4618      	mov	r0, r3
 805558c:	f001 fd74 	bl	8057078 <xTaskRemoveFromEventList>
 8055590:	4603      	mov	r3, r0
 8055592:	2b00      	cmp	r3, #0
 8055594:	d028      	beq.n	80555e8 <xQueueGiveFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8055596:	683b      	ldr	r3, [r7, #0]
 8055598:	2b00      	cmp	r3, #0
 805559a:	d025      	beq.n	80555e8 <xQueueGiveFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 805559c:	683b      	ldr	r3, [r7, #0]
 805559e:	2201      	movs	r2, #1
 80555a0:	601a      	str	r2, [r3, #0]
 80555a2:	e021      	b.n	80555e8 <xQueueGiveFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80555a4:	f001 fad0 	bl	8056b48 <uxTaskGetNumberOfTasks>
 80555a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80555aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80555ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80555b0:	429a      	cmp	r2, r3
 80555b2:	d919      	bls.n	80555e8 <xQueueGiveFromISR+0x144>
 80555b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80555b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80555ba:	d10d      	bne.n	80555d8 <xQueueGiveFromISR+0x134>
    __asm volatile
 80555bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80555c0:	b672      	cpsid	i
 80555c2:	f383 8811 	msr	BASEPRI, r3
 80555c6:	f3bf 8f6f 	isb	sy
 80555ca:	f3bf 8f4f 	dsb	sy
 80555ce:	b662      	cpsie	i
 80555d0:	613b      	str	r3, [r7, #16]
}
 80555d2:	bf00      	nop
 80555d4:	bf00      	nop
 80555d6:	e7fd      	b.n	80555d4 <xQueueGiveFromISR+0x130>
 80555d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80555dc:	3301      	adds	r3, #1
 80555de:	b2db      	uxtb	r3, r3
 80555e0:	b25a      	sxtb	r2, r3
 80555e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80555e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80555e8:	2301      	movs	r3, #1
 80555ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80555ec:	e001      	b.n	80555f2 <xQueueGiveFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80555ee:	2300      	movs	r3, #0
 80555f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80555f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80555f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80555f6:	68fb      	ldr	r3, [r7, #12]
 80555f8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80555fc:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 80555fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8055600:	4618      	mov	r0, r3
 8055602:	3740      	adds	r7, #64	@ 0x40
 8055604:	46bd      	mov	sp, r7
 8055606:	bd80      	pop	{r7, pc}

08055608 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8055608:	b580      	push	{r7, lr}
 805560a:	b08c      	sub	sp, #48	@ 0x30
 805560c:	af00      	add	r7, sp, #0
 805560e:	60f8      	str	r0, [r7, #12]
 8055610:	60b9      	str	r1, [r7, #8]
 8055612:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8055614:	2300      	movs	r3, #0
 8055616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8055618:	68fb      	ldr	r3, [r7, #12]
 805561a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 805561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805561e:	2b00      	cmp	r3, #0
 8055620:	d10d      	bne.n	805563e <xQueueReceive+0x36>
    __asm volatile
 8055622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055626:	b672      	cpsid	i
 8055628:	f383 8811 	msr	BASEPRI, r3
 805562c:	f3bf 8f6f 	isb	sy
 8055630:	f3bf 8f4f 	dsb	sy
 8055634:	b662      	cpsie	i
 8055636:	623b      	str	r3, [r7, #32]
}
 8055638:	bf00      	nop
 805563a:	bf00      	nop
 805563c:	e7fd      	b.n	805563a <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805563e:	68bb      	ldr	r3, [r7, #8]
 8055640:	2b00      	cmp	r3, #0
 8055642:	d103      	bne.n	805564c <xQueueReceive+0x44>
 8055644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8055646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055648:	2b00      	cmp	r3, #0
 805564a:	d101      	bne.n	8055650 <xQueueReceive+0x48>
 805564c:	2301      	movs	r3, #1
 805564e:	e000      	b.n	8055652 <xQueueReceive+0x4a>
 8055650:	2300      	movs	r3, #0
 8055652:	2b00      	cmp	r3, #0
 8055654:	d10d      	bne.n	8055672 <xQueueReceive+0x6a>
    __asm volatile
 8055656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805565a:	b672      	cpsid	i
 805565c:	f383 8811 	msr	BASEPRI, r3
 8055660:	f3bf 8f6f 	isb	sy
 8055664:	f3bf 8f4f 	dsb	sy
 8055668:	b662      	cpsie	i
 805566a:	61fb      	str	r3, [r7, #28]
}
 805566c:	bf00      	nop
 805566e:	bf00      	nop
 8055670:	e7fd      	b.n	805566e <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8055672:	f001 fff5 	bl	8057660 <xTaskGetSchedulerState>
 8055676:	4603      	mov	r3, r0
 8055678:	2b00      	cmp	r3, #0
 805567a:	d102      	bne.n	8055682 <xQueueReceive+0x7a>
 805567c:	687b      	ldr	r3, [r7, #4]
 805567e:	2b00      	cmp	r3, #0
 8055680:	d101      	bne.n	8055686 <xQueueReceive+0x7e>
 8055682:	2301      	movs	r3, #1
 8055684:	e000      	b.n	8055688 <xQueueReceive+0x80>
 8055686:	2300      	movs	r3, #0
 8055688:	2b00      	cmp	r3, #0
 805568a:	d10d      	bne.n	80556a8 <xQueueReceive+0xa0>
    __asm volatile
 805568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055690:	b672      	cpsid	i
 8055692:	f383 8811 	msr	BASEPRI, r3
 8055696:	f3bf 8f6f 	isb	sy
 805569a:	f3bf 8f4f 	dsb	sy
 805569e:	b662      	cpsie	i
 80556a0:	61bb      	str	r3, [r7, #24]
}
 80556a2:	bf00      	nop
 80556a4:	bf00      	nop
 80556a6:	e7fd      	b.n	80556a4 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80556a8:	f003 f944 	bl	8058934 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80556ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80556ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80556b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80556b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80556b4:	2b00      	cmp	r3, #0
 80556b6:	d01f      	beq.n	80556f8 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80556b8:	68b9      	ldr	r1, [r7, #8]
 80556ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80556bc:	f000 fb24 	bl	8055d08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80556c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80556c2:	1e5a      	subs	r2, r3, #1
 80556c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80556c6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80556c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80556ca:	691b      	ldr	r3, [r3, #16]
 80556cc:	2b00      	cmp	r3, #0
 80556ce:	d00f      	beq.n	80556f0 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80556d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80556d2:	3310      	adds	r3, #16
 80556d4:	4618      	mov	r0, r3
 80556d6:	f001 fccf 	bl	8057078 <xTaskRemoveFromEventList>
 80556da:	4603      	mov	r3, r0
 80556dc:	2b00      	cmp	r3, #0
 80556de:	d007      	beq.n	80556f0 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80556e0:	4b3c      	ldr	r3, [pc, #240]	@ (80557d4 <xQueueReceive+0x1cc>)
 80556e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80556e6:	601a      	str	r2, [r3, #0]
 80556e8:	f3bf 8f4f 	dsb	sy
 80556ec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80556f0:	f003 f956 	bl	80589a0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80556f4:	2301      	movs	r3, #1
 80556f6:	e069      	b.n	80557cc <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80556f8:	687b      	ldr	r3, [r7, #4]
 80556fa:	2b00      	cmp	r3, #0
 80556fc:	d103      	bne.n	8055706 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80556fe:	f003 f94f 	bl	80589a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8055702:	2300      	movs	r3, #0
 8055704:	e062      	b.n	80557cc <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8055706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8055708:	2b00      	cmp	r3, #0
 805570a:	d106      	bne.n	805571a <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 805570c:	f107 0310 	add.w	r3, r7, #16
 8055710:	4618      	mov	r0, r3
 8055712:	f001 fd8d 	bl	8057230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8055716:	2301      	movs	r3, #1
 8055718:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 805571a:	f003 f941 	bl	80589a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 805571e:	f001 f8eb 	bl	80568f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8055722:	f003 f907 	bl	8058934 <vPortEnterCritical>
 8055726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8055728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 805572c:	b25b      	sxtb	r3, r3
 805572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055732:	d103      	bne.n	805573c <xQueueReceive+0x134>
 8055734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8055736:	2200      	movs	r2, #0
 8055738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 805573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805573e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8055742:	b25b      	sxtb	r3, r3
 8055744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055748:	d103      	bne.n	8055752 <xQueueReceive+0x14a>
 805574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805574c:	2200      	movs	r2, #0
 805574e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8055752:	f003 f925 	bl	80589a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8055756:	1d3a      	adds	r2, r7, #4
 8055758:	f107 0310 	add.w	r3, r7, #16
 805575c:	4611      	mov	r1, r2
 805575e:	4618      	mov	r0, r3
 8055760:	f001 fd7c 	bl	805725c <xTaskCheckForTimeOut>
 8055764:	4603      	mov	r3, r0
 8055766:	2b00      	cmp	r3, #0
 8055768:	d123      	bne.n	80557b2 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805576a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 805576c:	f000 fb44 	bl	8055df8 <prvIsQueueEmpty>
 8055770:	4603      	mov	r3, r0
 8055772:	2b00      	cmp	r3, #0
 8055774:	d017      	beq.n	80557a6 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8055776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8055778:	3324      	adds	r3, #36	@ 0x24
 805577a:	687a      	ldr	r2, [r7, #4]
 805577c:	4611      	mov	r1, r2
 805577e:	4618      	mov	r0, r3
 8055780:	f001 fc0a 	bl	8056f98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8055784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8055786:	f000 fae5 	bl	8055d54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 805578a:	f001 f8c3 	bl	8056914 <xTaskResumeAll>
 805578e:	4603      	mov	r3, r0
 8055790:	2b00      	cmp	r3, #0
 8055792:	d189      	bne.n	80556a8 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8055794:	4b0f      	ldr	r3, [pc, #60]	@ (80557d4 <xQueueReceive+0x1cc>)
 8055796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 805579a:	601a      	str	r2, [r3, #0]
 805579c:	f3bf 8f4f 	dsb	sy
 80557a0:	f3bf 8f6f 	isb	sy
 80557a4:	e780      	b.n	80556a8 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80557a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80557a8:	f000 fad4 	bl	8055d54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80557ac:	f001 f8b2 	bl	8056914 <xTaskResumeAll>
 80557b0:	e77a      	b.n	80556a8 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80557b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80557b4:	f000 face 	bl	8055d54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80557b8:	f001 f8ac 	bl	8056914 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80557bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80557be:	f000 fb1b 	bl	8055df8 <prvIsQueueEmpty>
 80557c2:	4603      	mov	r3, r0
 80557c4:	2b00      	cmp	r3, #0
 80557c6:	f43f af6f 	beq.w	80556a8 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80557ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80557cc:	4618      	mov	r0, r3
 80557ce:	3730      	adds	r7, #48	@ 0x30
 80557d0:	46bd      	mov	sp, r7
 80557d2:	bd80      	pop	{r7, pc}
 80557d4:	e000ed04 	.word	0xe000ed04

080557d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80557d8:	b580      	push	{r7, lr}
 80557da:	b08c      	sub	sp, #48	@ 0x30
 80557dc:	af00      	add	r7, sp, #0
 80557de:	6078      	str	r0, [r7, #4]
 80557e0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80557e2:	2300      	movs	r3, #0
 80557e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80557e6:	687b      	ldr	r3, [r7, #4]
 80557e8:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80557ea:	2300      	movs	r3, #0
 80557ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80557ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80557f0:	2b00      	cmp	r3, #0
 80557f2:	d10d      	bne.n	8055810 <xQueueSemaphoreTake+0x38>
    __asm volatile
 80557f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80557f8:	b672      	cpsid	i
 80557fa:	f383 8811 	msr	BASEPRI, r3
 80557fe:	f3bf 8f6f 	isb	sy
 8055802:	f3bf 8f4f 	dsb	sy
 8055806:	b662      	cpsie	i
 8055808:	61bb      	str	r3, [r7, #24]
}
 805580a:	bf00      	nop
 805580c:	bf00      	nop
 805580e:	e7fd      	b.n	805580c <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8055810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055814:	2b00      	cmp	r3, #0
 8055816:	d00d      	beq.n	8055834 <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8055818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805581c:	b672      	cpsid	i
 805581e:	f383 8811 	msr	BASEPRI, r3
 8055822:	f3bf 8f6f 	isb	sy
 8055826:	f3bf 8f4f 	dsb	sy
 805582a:	b662      	cpsie	i
 805582c:	617b      	str	r3, [r7, #20]
}
 805582e:	bf00      	nop
 8055830:	bf00      	nop
 8055832:	e7fd      	b.n	8055830 <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8055834:	f001 ff14 	bl	8057660 <xTaskGetSchedulerState>
 8055838:	4603      	mov	r3, r0
 805583a:	2b00      	cmp	r3, #0
 805583c:	d102      	bne.n	8055844 <xQueueSemaphoreTake+0x6c>
 805583e:	683b      	ldr	r3, [r7, #0]
 8055840:	2b00      	cmp	r3, #0
 8055842:	d101      	bne.n	8055848 <xQueueSemaphoreTake+0x70>
 8055844:	2301      	movs	r3, #1
 8055846:	e000      	b.n	805584a <xQueueSemaphoreTake+0x72>
 8055848:	2300      	movs	r3, #0
 805584a:	2b00      	cmp	r3, #0
 805584c:	d10d      	bne.n	805586a <xQueueSemaphoreTake+0x92>
    __asm volatile
 805584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055852:	b672      	cpsid	i
 8055854:	f383 8811 	msr	BASEPRI, r3
 8055858:	f3bf 8f6f 	isb	sy
 805585c:	f3bf 8f4f 	dsb	sy
 8055860:	b662      	cpsie	i
 8055862:	613b      	str	r3, [r7, #16]
}
 8055864:	bf00      	nop
 8055866:	bf00      	nop
 8055868:	e7fd      	b.n	8055866 <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 805586a:	f003 f863 	bl	8058934 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 805586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055872:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8055874:	6a3b      	ldr	r3, [r7, #32]
 8055876:	2b00      	cmp	r3, #0
 8055878:	d024      	beq.n	80558c4 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 805587a:	6a3b      	ldr	r3, [r7, #32]
 805587c:	1e5a      	subs	r2, r3, #1
 805587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055880:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8055882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055884:	681b      	ldr	r3, [r3, #0]
 8055886:	2b00      	cmp	r3, #0
 8055888:	d104      	bne.n	8055894 <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 805588a:	f002 f915 	bl	8057ab8 <pvTaskIncrementMutexHeldCount>
 805588e:	4602      	mov	r2, r0
 8055890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055892:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8055894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055896:	691b      	ldr	r3, [r3, #16]
 8055898:	2b00      	cmp	r3, #0
 805589a:	d00f      	beq.n	80558bc <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805589e:	3310      	adds	r3, #16
 80558a0:	4618      	mov	r0, r3
 80558a2:	f001 fbe9 	bl	8057078 <xTaskRemoveFromEventList>
 80558a6:	4603      	mov	r3, r0
 80558a8:	2b00      	cmp	r3, #0
 80558aa:	d007      	beq.n	80558bc <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80558ac:	4b4c      	ldr	r3, [pc, #304]	@ (80559e0 <xQueueSemaphoreTake+0x208>)
 80558ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80558b2:	601a      	str	r2, [r3, #0]
 80558b4:	f3bf 8f4f 	dsb	sy
 80558b8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80558bc:	f003 f870 	bl	80589a0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80558c0:	2301      	movs	r3, #1
 80558c2:	e089      	b.n	80559d8 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80558c4:	683b      	ldr	r3, [r7, #0]
 80558c6:	2b00      	cmp	r3, #0
 80558c8:	d103      	bne.n	80558d2 <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80558ca:	f003 f869 	bl	80589a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80558ce:	2300      	movs	r3, #0
 80558d0:	e082      	b.n	80559d8 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 80558d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80558d4:	2b00      	cmp	r3, #0
 80558d6:	d106      	bne.n	80558e6 <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80558d8:	f107 0308 	add.w	r3, r7, #8
 80558dc:	4618      	mov	r0, r3
 80558de:	f001 fca7 	bl	8057230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80558e2:	2301      	movs	r3, #1
 80558e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80558e6:	f003 f85b 	bl	80589a0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80558ea:	f001 f805 	bl	80568f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80558ee:	f003 f821 	bl	8058934 <vPortEnterCritical>
 80558f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80558f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80558f8:	b25b      	sxtb	r3, r3
 80558fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80558fe:	d103      	bne.n	8055908 <xQueueSemaphoreTake+0x130>
 8055900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055902:	2200      	movs	r2, #0
 8055904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8055908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805590a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 805590e:	b25b      	sxtb	r3, r3
 8055910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055914:	d103      	bne.n	805591e <xQueueSemaphoreTake+0x146>
 8055916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055918:	2200      	movs	r2, #0
 805591a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 805591e:	f003 f83f 	bl	80589a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8055922:	463a      	mov	r2, r7
 8055924:	f107 0308 	add.w	r3, r7, #8
 8055928:	4611      	mov	r1, r2
 805592a:	4618      	mov	r0, r3
 805592c:	f001 fc96 	bl	805725c <xTaskCheckForTimeOut>
 8055930:	4603      	mov	r3, r0
 8055932:	2b00      	cmp	r3, #0
 8055934:	d132      	bne.n	805599c <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8055936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8055938:	f000 fa5e 	bl	8055df8 <prvIsQueueEmpty>
 805593c:	4603      	mov	r3, r0
 805593e:	2b00      	cmp	r3, #0
 8055940:	d026      	beq.n	8055990 <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8055942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055944:	681b      	ldr	r3, [r3, #0]
 8055946:	2b00      	cmp	r3, #0
 8055948:	d109      	bne.n	805595e <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 805594a:	f002 fff3 	bl	8058934 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 805594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055950:	689b      	ldr	r3, [r3, #8]
 8055952:	4618      	mov	r0, r3
 8055954:	f001 fea2 	bl	805769c <xTaskPriorityInherit>
 8055958:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 805595a:	f003 f821 	bl	80589a0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8055960:	3324      	adds	r3, #36	@ 0x24
 8055962:	683a      	ldr	r2, [r7, #0]
 8055964:	4611      	mov	r1, r2
 8055966:	4618      	mov	r0, r3
 8055968:	f001 fb16 	bl	8056f98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 805596c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 805596e:	f000 f9f1 	bl	8055d54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8055972:	f000 ffcf 	bl	8056914 <xTaskResumeAll>
 8055976:	4603      	mov	r3, r0
 8055978:	2b00      	cmp	r3, #0
 805597a:	f47f af76 	bne.w	805586a <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 805597e:	4b18      	ldr	r3, [pc, #96]	@ (80559e0 <xQueueSemaphoreTake+0x208>)
 8055980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8055984:	601a      	str	r2, [r3, #0]
 8055986:	f3bf 8f4f 	dsb	sy
 805598a:	f3bf 8f6f 	isb	sy
 805598e:	e76c      	b.n	805586a <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8055990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8055992:	f000 f9df 	bl	8055d54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8055996:	f000 ffbd 	bl	8056914 <xTaskResumeAll>
 805599a:	e766      	b.n	805586a <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 805599c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 805599e:	f000 f9d9 	bl	8055d54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80559a2:	f000 ffb7 	bl	8056914 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80559a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80559a8:	f000 fa26 	bl	8055df8 <prvIsQueueEmpty>
 80559ac:	4603      	mov	r3, r0
 80559ae:	2b00      	cmp	r3, #0
 80559b0:	f43f af5b 	beq.w	805586a <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80559b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80559b6:	2b00      	cmp	r3, #0
 80559b8:	d00d      	beq.n	80559d6 <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 80559ba:	f002 ffbb 	bl	8058934 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80559be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80559c0:	f000 f920 	bl	8055c04 <prvGetDisinheritPriorityAfterTimeout>
 80559c4:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80559c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80559c8:	689b      	ldr	r3, [r3, #8]
 80559ca:	69f9      	ldr	r1, [r7, #28]
 80559cc:	4618      	mov	r0, r3
 80559ce:	f001 ffb1 	bl	8057934 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80559d2:	f002 ffe5 	bl	80589a0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80559d6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80559d8:	4618      	mov	r0, r3
 80559da:	3730      	adds	r7, #48	@ 0x30
 80559dc:	46bd      	mov	sp, r7
 80559de:	bd80      	pop	{r7, pc}
 80559e0:	e000ed04 	.word	0xe000ed04

080559e4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 80559e4:	b580      	push	{r7, lr}
 80559e6:	b08e      	sub	sp, #56	@ 0x38
 80559e8:	af00      	add	r7, sp, #0
 80559ea:	60f8      	str	r0, [r7, #12]
 80559ec:	60b9      	str	r1, [r7, #8]
 80559ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80559f0:	2300      	movs	r3, #0
 80559f2:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 80559f4:	68fb      	ldr	r3, [r7, #12]
 80559f6:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80559f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80559fa:	2b00      	cmp	r3, #0
 80559fc:	d10d      	bne.n	8055a1a <xQueuePeek+0x36>
    __asm volatile
 80559fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055a02:	b672      	cpsid	i
 8055a04:	f383 8811 	msr	BASEPRI, r3
 8055a08:	f3bf 8f6f 	isb	sy
 8055a0c:	f3bf 8f4f 	dsb	sy
 8055a10:	b662      	cpsie	i
 8055a12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8055a14:	bf00      	nop
 8055a16:	bf00      	nop
 8055a18:	e7fd      	b.n	8055a16 <xQueuePeek+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8055a1a:	68bb      	ldr	r3, [r7, #8]
 8055a1c:	2b00      	cmp	r3, #0
 8055a1e:	d103      	bne.n	8055a28 <xQueuePeek+0x44>
 8055a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055a24:	2b00      	cmp	r3, #0
 8055a26:	d101      	bne.n	8055a2c <xQueuePeek+0x48>
 8055a28:	2301      	movs	r3, #1
 8055a2a:	e000      	b.n	8055a2e <xQueuePeek+0x4a>
 8055a2c:	2300      	movs	r3, #0
 8055a2e:	2b00      	cmp	r3, #0
 8055a30:	d10d      	bne.n	8055a4e <xQueuePeek+0x6a>
    __asm volatile
 8055a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055a36:	b672      	cpsid	i
 8055a38:	f383 8811 	msr	BASEPRI, r3
 8055a3c:	f3bf 8f6f 	isb	sy
 8055a40:	f3bf 8f4f 	dsb	sy
 8055a44:	b662      	cpsie	i
 8055a46:	623b      	str	r3, [r7, #32]
}
 8055a48:	bf00      	nop
 8055a4a:	bf00      	nop
 8055a4c:	e7fd      	b.n	8055a4a <xQueuePeek+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8055a4e:	f001 fe07 	bl	8057660 <xTaskGetSchedulerState>
 8055a52:	4603      	mov	r3, r0
 8055a54:	2b00      	cmp	r3, #0
 8055a56:	d102      	bne.n	8055a5e <xQueuePeek+0x7a>
 8055a58:	687b      	ldr	r3, [r7, #4]
 8055a5a:	2b00      	cmp	r3, #0
 8055a5c:	d101      	bne.n	8055a62 <xQueuePeek+0x7e>
 8055a5e:	2301      	movs	r3, #1
 8055a60:	e000      	b.n	8055a64 <xQueuePeek+0x80>
 8055a62:	2300      	movs	r3, #0
 8055a64:	2b00      	cmp	r3, #0
 8055a66:	d10d      	bne.n	8055a84 <xQueuePeek+0xa0>
    __asm volatile
 8055a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055a6c:	b672      	cpsid	i
 8055a6e:	f383 8811 	msr	BASEPRI, r3
 8055a72:	f3bf 8f6f 	isb	sy
 8055a76:	f3bf 8f4f 	dsb	sy
 8055a7a:	b662      	cpsie	i
 8055a7c:	61fb      	str	r3, [r7, #28]
}
 8055a7e:	bf00      	nop
 8055a80:	bf00      	nop
 8055a82:	e7fd      	b.n	8055a80 <xQueuePeek+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8055a84:	f002 ff56 	bl	8058934 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8055a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8055a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8055a90:	2b00      	cmp	r3, #0
 8055a92:	d021      	beq.n	8055ad8 <xQueuePeek+0xf4>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8055a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055a96:	68db      	ldr	r3, [r3, #12]
 8055a98:	62bb      	str	r3, [r7, #40]	@ 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8055a9a:	68b9      	ldr	r1, [r7, #8]
 8055a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055a9e:	f000 f933 	bl	8055d08 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8055aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8055aa6:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8055aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8055aac:	2b00      	cmp	r3, #0
 8055aae:	d00f      	beq.n	8055ad0 <xQueuePeek+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8055ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055ab2:	3324      	adds	r3, #36	@ 0x24
 8055ab4:	4618      	mov	r0, r3
 8055ab6:	f001 fadf 	bl	8057078 <xTaskRemoveFromEventList>
 8055aba:	4603      	mov	r3, r0
 8055abc:	2b00      	cmp	r3, #0
 8055abe:	d007      	beq.n	8055ad0 <xQueuePeek+0xec>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8055ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8055bb4 <xQueuePeek+0x1d0>)
 8055ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8055ac6:	601a      	str	r2, [r3, #0]
 8055ac8:	f3bf 8f4f 	dsb	sy
 8055acc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8055ad0:	f002 ff66 	bl	80589a0 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 8055ad4:	2301      	movs	r3, #1
 8055ad6:	e069      	b.n	8055bac <xQueuePeek+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8055ad8:	687b      	ldr	r3, [r7, #4]
 8055ada:	2b00      	cmp	r3, #0
 8055adc:	d103      	bne.n	8055ae6 <xQueuePeek+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8055ade:	f002 ff5f 	bl	80589a0 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8055ae2:	2300      	movs	r3, #0
 8055ae4:	e062      	b.n	8055bac <xQueuePeek+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8055ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8055ae8:	2b00      	cmp	r3, #0
 8055aea:	d106      	bne.n	8055afa <xQueuePeek+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8055aec:	f107 0314 	add.w	r3, r7, #20
 8055af0:	4618      	mov	r0, r3
 8055af2:	f001 fb9d 	bl	8057230 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8055af6:	2301      	movs	r3, #1
 8055af8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8055afa:	f002 ff51 	bl	80589a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8055afe:	f000 fefb 	bl	80568f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8055b02:	f002 ff17 	bl	8058934 <vPortEnterCritical>
 8055b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8055b0c:	b25b      	sxtb	r3, r3
 8055b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055b12:	d103      	bne.n	8055b1c <xQueuePeek+0x138>
 8055b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055b16:	2200      	movs	r2, #0
 8055b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8055b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8055b22:	b25b      	sxtb	r3, r3
 8055b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055b28:	d103      	bne.n	8055b32 <xQueuePeek+0x14e>
 8055b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055b2c:	2200      	movs	r2, #0
 8055b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8055b32:	f002 ff35 	bl	80589a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8055b36:	1d3a      	adds	r2, r7, #4
 8055b38:	f107 0314 	add.w	r3, r7, #20
 8055b3c:	4611      	mov	r1, r2
 8055b3e:	4618      	mov	r0, r3
 8055b40:	f001 fb8c 	bl	805725c <xTaskCheckForTimeOut>
 8055b44:	4603      	mov	r3, r0
 8055b46:	2b00      	cmp	r3, #0
 8055b48:	d123      	bne.n	8055b92 <xQueuePeek+0x1ae>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8055b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055b4c:	f000 f954 	bl	8055df8 <prvIsQueueEmpty>
 8055b50:	4603      	mov	r3, r0
 8055b52:	2b00      	cmp	r3, #0
 8055b54:	d017      	beq.n	8055b86 <xQueuePeek+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8055b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8055b58:	3324      	adds	r3, #36	@ 0x24
 8055b5a:	687a      	ldr	r2, [r7, #4]
 8055b5c:	4611      	mov	r1, r2
 8055b5e:	4618      	mov	r0, r3
 8055b60:	f001 fa1a 	bl	8056f98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8055b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055b66:	f000 f8f5 	bl	8055d54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8055b6a:	f000 fed3 	bl	8056914 <xTaskResumeAll>
 8055b6e:	4603      	mov	r3, r0
 8055b70:	2b00      	cmp	r3, #0
 8055b72:	d187      	bne.n	8055a84 <xQueuePeek+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8055b74:	4b0f      	ldr	r3, [pc, #60]	@ (8055bb4 <xQueuePeek+0x1d0>)
 8055b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8055b7a:	601a      	str	r2, [r3, #0]
 8055b7c:	f3bf 8f4f 	dsb	sy
 8055b80:	f3bf 8f6f 	isb	sy
 8055b84:	e77e      	b.n	8055a84 <xQueuePeek+0xa0>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8055b86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055b88:	f000 f8e4 	bl	8055d54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8055b8c:	f000 fec2 	bl	8056914 <xTaskResumeAll>
 8055b90:	e778      	b.n	8055a84 <xQueuePeek+0xa0>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8055b92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055b94:	f000 f8de 	bl	8055d54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8055b98:	f000 febc 	bl	8056914 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8055b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8055b9e:	f000 f92b 	bl	8055df8 <prvIsQueueEmpty>
 8055ba2:	4603      	mov	r3, r0
 8055ba4:	2b00      	cmp	r3, #0
 8055ba6:	f43f af6d 	beq.w	8055a84 <xQueuePeek+0xa0>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8055baa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8055bac:	4618      	mov	r0, r3
 8055bae:	3738      	adds	r7, #56	@ 0x38
 8055bb0:	46bd      	mov	sp, r7
 8055bb2:	bd80      	pop	{r7, pc}
 8055bb4:	e000ed04 	.word	0xe000ed04

08055bb8 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8055bb8:	b580      	push	{r7, lr}
 8055bba:	b084      	sub	sp, #16
 8055bbc:	af00      	add	r7, sp, #0
 8055bbe:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8055bc0:	687b      	ldr	r3, [r7, #4]
 8055bc2:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8055bc4:	68fb      	ldr	r3, [r7, #12]
 8055bc6:	2b00      	cmp	r3, #0
 8055bc8:	d10d      	bne.n	8055be6 <vQueueDelete+0x2e>
    __asm volatile
 8055bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055bce:	b672      	cpsid	i
 8055bd0:	f383 8811 	msr	BASEPRI, r3
 8055bd4:	f3bf 8f6f 	isb	sy
 8055bd8:	f3bf 8f4f 	dsb	sy
 8055bdc:	b662      	cpsie	i
 8055bde:	60bb      	str	r3, [r7, #8]
}
 8055be0:	bf00      	nop
 8055be2:	bf00      	nop
 8055be4:	e7fd      	b.n	8055be2 <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8055be6:	68f8      	ldr	r0, [r7, #12]
 8055be8:	f000 f986 	bl	8055ef8 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8055bec:	68fb      	ldr	r3, [r7, #12]
 8055bee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8055bf2:	2b00      	cmp	r3, #0
 8055bf4:	d102      	bne.n	8055bfc <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 8055bf6:	68f8      	ldr	r0, [r7, #12]
 8055bf8:	f003 f914 	bl	8058e24 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8055bfc:	bf00      	nop
 8055bfe:	3710      	adds	r7, #16
 8055c00:	46bd      	mov	sp, r7
 8055c02:	bd80      	pop	{r7, pc}

08055c04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8055c04:	b480      	push	{r7}
 8055c06:	b085      	sub	sp, #20
 8055c08:	af00      	add	r7, sp, #0
 8055c0a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8055c0c:	687b      	ldr	r3, [r7, #4]
 8055c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8055c10:	2b00      	cmp	r3, #0
 8055c12:	d006      	beq.n	8055c22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8055c14:	687b      	ldr	r3, [r7, #4]
 8055c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8055c18:	681b      	ldr	r3, [r3, #0]
 8055c1a:	f1c3 0307 	rsb	r3, r3, #7
 8055c1e:	60fb      	str	r3, [r7, #12]
 8055c20:	e001      	b.n	8055c26 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8055c22:	2300      	movs	r3, #0
 8055c24:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8055c26:	68fb      	ldr	r3, [r7, #12]
    }
 8055c28:	4618      	mov	r0, r3
 8055c2a:	3714      	adds	r7, #20
 8055c2c:	46bd      	mov	sp, r7
 8055c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055c32:	4770      	bx	lr

08055c34 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8055c34:	b580      	push	{r7, lr}
 8055c36:	b086      	sub	sp, #24
 8055c38:	af00      	add	r7, sp, #0
 8055c3a:	60f8      	str	r0, [r7, #12]
 8055c3c:	60b9      	str	r1, [r7, #8]
 8055c3e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8055c40:	2300      	movs	r3, #0
 8055c42:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8055c44:	68fb      	ldr	r3, [r7, #12]
 8055c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055c48:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8055c4a:	68fb      	ldr	r3, [r7, #12]
 8055c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055c4e:	2b00      	cmp	r3, #0
 8055c50:	d10d      	bne.n	8055c6e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8055c52:	68fb      	ldr	r3, [r7, #12]
 8055c54:	681b      	ldr	r3, [r3, #0]
 8055c56:	2b00      	cmp	r3, #0
 8055c58:	d14d      	bne.n	8055cf6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8055c5a:	68fb      	ldr	r3, [r7, #12]
 8055c5c:	689b      	ldr	r3, [r3, #8]
 8055c5e:	4618      	mov	r0, r3
 8055c60:	f001 fdbc 	bl	80577dc <xTaskPriorityDisinherit>
 8055c64:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8055c66:	68fb      	ldr	r3, [r7, #12]
 8055c68:	2200      	movs	r2, #0
 8055c6a:	609a      	str	r2, [r3, #8]
 8055c6c:	e043      	b.n	8055cf6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8055c6e:	687b      	ldr	r3, [r7, #4]
 8055c70:	2b00      	cmp	r3, #0
 8055c72:	d119      	bne.n	8055ca8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8055c74:	68fb      	ldr	r3, [r7, #12]
 8055c76:	6858      	ldr	r0, [r3, #4]
 8055c78:	68fb      	ldr	r3, [r7, #12]
 8055c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055c7c:	461a      	mov	r2, r3
 8055c7e:	68b9      	ldr	r1, [r7, #8]
 8055c80:	f013 fe5b 	bl	806993a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8055c84:	68fb      	ldr	r3, [r7, #12]
 8055c86:	685a      	ldr	r2, [r3, #4]
 8055c88:	68fb      	ldr	r3, [r7, #12]
 8055c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055c8c:	441a      	add	r2, r3
 8055c8e:	68fb      	ldr	r3, [r7, #12]
 8055c90:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8055c92:	68fb      	ldr	r3, [r7, #12]
 8055c94:	685a      	ldr	r2, [r3, #4]
 8055c96:	68fb      	ldr	r3, [r7, #12]
 8055c98:	689b      	ldr	r3, [r3, #8]
 8055c9a:	429a      	cmp	r2, r3
 8055c9c:	d32b      	bcc.n	8055cf6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8055c9e:	68fb      	ldr	r3, [r7, #12]
 8055ca0:	681a      	ldr	r2, [r3, #0]
 8055ca2:	68fb      	ldr	r3, [r7, #12]
 8055ca4:	605a      	str	r2, [r3, #4]
 8055ca6:	e026      	b.n	8055cf6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8055ca8:	68fb      	ldr	r3, [r7, #12]
 8055caa:	68d8      	ldr	r0, [r3, #12]
 8055cac:	68fb      	ldr	r3, [r7, #12]
 8055cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055cb0:	461a      	mov	r2, r3
 8055cb2:	68b9      	ldr	r1, [r7, #8]
 8055cb4:	f013 fe41 	bl	806993a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8055cb8:	68fb      	ldr	r3, [r7, #12]
 8055cba:	68da      	ldr	r2, [r3, #12]
 8055cbc:	68fb      	ldr	r3, [r7, #12]
 8055cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055cc0:	425b      	negs	r3, r3
 8055cc2:	441a      	add	r2, r3
 8055cc4:	68fb      	ldr	r3, [r7, #12]
 8055cc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8055cc8:	68fb      	ldr	r3, [r7, #12]
 8055cca:	68da      	ldr	r2, [r3, #12]
 8055ccc:	68fb      	ldr	r3, [r7, #12]
 8055cce:	681b      	ldr	r3, [r3, #0]
 8055cd0:	429a      	cmp	r2, r3
 8055cd2:	d207      	bcs.n	8055ce4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8055cd4:	68fb      	ldr	r3, [r7, #12]
 8055cd6:	689a      	ldr	r2, [r3, #8]
 8055cd8:	68fb      	ldr	r3, [r7, #12]
 8055cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055cdc:	425b      	negs	r3, r3
 8055cde:	441a      	add	r2, r3
 8055ce0:	68fb      	ldr	r3, [r7, #12]
 8055ce2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8055ce4:	687b      	ldr	r3, [r7, #4]
 8055ce6:	2b02      	cmp	r3, #2
 8055ce8:	d105      	bne.n	8055cf6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8055cea:	693b      	ldr	r3, [r7, #16]
 8055cec:	2b00      	cmp	r3, #0
 8055cee:	d002      	beq.n	8055cf6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8055cf0:	693b      	ldr	r3, [r7, #16]
 8055cf2:	3b01      	subs	r3, #1
 8055cf4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8055cf6:	693b      	ldr	r3, [r7, #16]
 8055cf8:	1c5a      	adds	r2, r3, #1
 8055cfa:	68fb      	ldr	r3, [r7, #12]
 8055cfc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8055cfe:	697b      	ldr	r3, [r7, #20]
}
 8055d00:	4618      	mov	r0, r3
 8055d02:	3718      	adds	r7, #24
 8055d04:	46bd      	mov	sp, r7
 8055d06:	bd80      	pop	{r7, pc}

08055d08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8055d08:	b580      	push	{r7, lr}
 8055d0a:	b082      	sub	sp, #8
 8055d0c:	af00      	add	r7, sp, #0
 8055d0e:	6078      	str	r0, [r7, #4]
 8055d10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8055d12:	687b      	ldr	r3, [r7, #4]
 8055d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055d16:	2b00      	cmp	r3, #0
 8055d18:	d018      	beq.n	8055d4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8055d1a:	687b      	ldr	r3, [r7, #4]
 8055d1c:	68da      	ldr	r2, [r3, #12]
 8055d1e:	687b      	ldr	r3, [r7, #4]
 8055d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055d22:	441a      	add	r2, r3
 8055d24:	687b      	ldr	r3, [r7, #4]
 8055d26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8055d28:	687b      	ldr	r3, [r7, #4]
 8055d2a:	68da      	ldr	r2, [r3, #12]
 8055d2c:	687b      	ldr	r3, [r7, #4]
 8055d2e:	689b      	ldr	r3, [r3, #8]
 8055d30:	429a      	cmp	r2, r3
 8055d32:	d303      	bcc.n	8055d3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8055d34:	687b      	ldr	r3, [r7, #4]
 8055d36:	681a      	ldr	r2, [r3, #0]
 8055d38:	687b      	ldr	r3, [r7, #4]
 8055d3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8055d3c:	687b      	ldr	r3, [r7, #4]
 8055d3e:	68d9      	ldr	r1, [r3, #12]
 8055d40:	687b      	ldr	r3, [r7, #4]
 8055d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8055d44:	461a      	mov	r2, r3
 8055d46:	6838      	ldr	r0, [r7, #0]
 8055d48:	f013 fdf7 	bl	806993a <memcpy>
    }
}
 8055d4c:	bf00      	nop
 8055d4e:	3708      	adds	r7, #8
 8055d50:	46bd      	mov	sp, r7
 8055d52:	bd80      	pop	{r7, pc}

08055d54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8055d54:	b580      	push	{r7, lr}
 8055d56:	b084      	sub	sp, #16
 8055d58:	af00      	add	r7, sp, #0
 8055d5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8055d5c:	f002 fdea 	bl	8058934 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8055d60:	687b      	ldr	r3, [r7, #4]
 8055d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8055d66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8055d68:	e011      	b.n	8055d8e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8055d6a:	687b      	ldr	r3, [r7, #4]
 8055d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8055d6e:	2b00      	cmp	r3, #0
 8055d70:	d012      	beq.n	8055d98 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8055d72:	687b      	ldr	r3, [r7, #4]
 8055d74:	3324      	adds	r3, #36	@ 0x24
 8055d76:	4618      	mov	r0, r3
 8055d78:	f001 f97e 	bl	8057078 <xTaskRemoveFromEventList>
 8055d7c:	4603      	mov	r3, r0
 8055d7e:	2b00      	cmp	r3, #0
 8055d80:	d001      	beq.n	8055d86 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8055d82:	f001 facf 	bl	8057324 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8055d86:	7bfb      	ldrb	r3, [r7, #15]
 8055d88:	3b01      	subs	r3, #1
 8055d8a:	b2db      	uxtb	r3, r3
 8055d8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8055d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8055d92:	2b00      	cmp	r3, #0
 8055d94:	dce9      	bgt.n	8055d6a <prvUnlockQueue+0x16>
 8055d96:	e000      	b.n	8055d9a <prvUnlockQueue+0x46>
                    break;
 8055d98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8055d9a:	687b      	ldr	r3, [r7, #4]
 8055d9c:	22ff      	movs	r2, #255	@ 0xff
 8055d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8055da2:	f002 fdfd 	bl	80589a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8055da6:	f002 fdc5 	bl	8058934 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8055daa:	687b      	ldr	r3, [r7, #4]
 8055dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8055db0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8055db2:	e011      	b.n	8055dd8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8055db4:	687b      	ldr	r3, [r7, #4]
 8055db6:	691b      	ldr	r3, [r3, #16]
 8055db8:	2b00      	cmp	r3, #0
 8055dba:	d012      	beq.n	8055de2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8055dbc:	687b      	ldr	r3, [r7, #4]
 8055dbe:	3310      	adds	r3, #16
 8055dc0:	4618      	mov	r0, r3
 8055dc2:	f001 f959 	bl	8057078 <xTaskRemoveFromEventList>
 8055dc6:	4603      	mov	r3, r0
 8055dc8:	2b00      	cmp	r3, #0
 8055dca:	d001      	beq.n	8055dd0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8055dcc:	f001 faaa 	bl	8057324 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8055dd0:	7bbb      	ldrb	r3, [r7, #14]
 8055dd2:	3b01      	subs	r3, #1
 8055dd4:	b2db      	uxtb	r3, r3
 8055dd6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8055dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8055ddc:	2b00      	cmp	r3, #0
 8055dde:	dce9      	bgt.n	8055db4 <prvUnlockQueue+0x60>
 8055de0:	e000      	b.n	8055de4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8055de2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8055de4:	687b      	ldr	r3, [r7, #4]
 8055de6:	22ff      	movs	r2, #255	@ 0xff
 8055de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8055dec:	f002 fdd8 	bl	80589a0 <vPortExitCritical>
}
 8055df0:	bf00      	nop
 8055df2:	3710      	adds	r7, #16
 8055df4:	46bd      	mov	sp, r7
 8055df6:	bd80      	pop	{r7, pc}

08055df8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8055df8:	b580      	push	{r7, lr}
 8055dfa:	b084      	sub	sp, #16
 8055dfc:	af00      	add	r7, sp, #0
 8055dfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8055e00:	f002 fd98 	bl	8058934 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8055e04:	687b      	ldr	r3, [r7, #4]
 8055e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055e08:	2b00      	cmp	r3, #0
 8055e0a:	d102      	bne.n	8055e12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8055e0c:	2301      	movs	r3, #1
 8055e0e:	60fb      	str	r3, [r7, #12]
 8055e10:	e001      	b.n	8055e16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8055e12:	2300      	movs	r3, #0
 8055e14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8055e16:	f002 fdc3 	bl	80589a0 <vPortExitCritical>

    return xReturn;
 8055e1a:	68fb      	ldr	r3, [r7, #12]
}
 8055e1c:	4618      	mov	r0, r3
 8055e1e:	3710      	adds	r7, #16
 8055e20:	46bd      	mov	sp, r7
 8055e22:	bd80      	pop	{r7, pc}

08055e24 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8055e24:	b580      	push	{r7, lr}
 8055e26:	b084      	sub	sp, #16
 8055e28:	af00      	add	r7, sp, #0
 8055e2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8055e2c:	f002 fd82 	bl	8058934 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8055e30:	687b      	ldr	r3, [r7, #4]
 8055e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8055e34:	687b      	ldr	r3, [r7, #4]
 8055e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8055e38:	429a      	cmp	r2, r3
 8055e3a:	d102      	bne.n	8055e42 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8055e3c:	2301      	movs	r3, #1
 8055e3e:	60fb      	str	r3, [r7, #12]
 8055e40:	e001      	b.n	8055e46 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8055e42:	2300      	movs	r3, #0
 8055e44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8055e46:	f002 fdab 	bl	80589a0 <vPortExitCritical>

    return xReturn;
 8055e4a:	68fb      	ldr	r3, [r7, #12]
}
 8055e4c:	4618      	mov	r0, r3
 8055e4e:	3710      	adds	r7, #16
 8055e50:	46bd      	mov	sp, r7
 8055e52:	bd80      	pop	{r7, pc}

08055e54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8055e54:	b480      	push	{r7}
 8055e56:	b087      	sub	sp, #28
 8055e58:	af00      	add	r7, sp, #0
 8055e5a:	6078      	str	r0, [r7, #4]
 8055e5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8055e5e:	2300      	movs	r3, #0
 8055e60:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8055e62:	687b      	ldr	r3, [r7, #4]
 8055e64:	2b00      	cmp	r3, #0
 8055e66:	d10d      	bne.n	8055e84 <vQueueAddToRegistry+0x30>
    __asm volatile
 8055e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055e6c:	b672      	cpsid	i
 8055e6e:	f383 8811 	msr	BASEPRI, r3
 8055e72:	f3bf 8f6f 	isb	sy
 8055e76:	f3bf 8f4f 	dsb	sy
 8055e7a:	b662      	cpsie	i
 8055e7c:	60fb      	str	r3, [r7, #12]
}
 8055e7e:	bf00      	nop
 8055e80:	bf00      	nop
 8055e82:	e7fd      	b.n	8055e80 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8055e84:	683b      	ldr	r3, [r7, #0]
 8055e86:	2b00      	cmp	r3, #0
 8055e88:	d024      	beq.n	8055ed4 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8055e8a:	2300      	movs	r3, #0
 8055e8c:	617b      	str	r3, [r7, #20]
 8055e8e:	e01e      	b.n	8055ece <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8055e90:	4a18      	ldr	r2, [pc, #96]	@ (8055ef4 <vQueueAddToRegistry+0xa0>)
 8055e92:	697b      	ldr	r3, [r7, #20]
 8055e94:	00db      	lsls	r3, r3, #3
 8055e96:	4413      	add	r3, r2
 8055e98:	685b      	ldr	r3, [r3, #4]
 8055e9a:	687a      	ldr	r2, [r7, #4]
 8055e9c:	429a      	cmp	r2, r3
 8055e9e:	d105      	bne.n	8055eac <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8055ea0:	697b      	ldr	r3, [r7, #20]
 8055ea2:	00db      	lsls	r3, r3, #3
 8055ea4:	4a13      	ldr	r2, [pc, #76]	@ (8055ef4 <vQueueAddToRegistry+0xa0>)
 8055ea6:	4413      	add	r3, r2
 8055ea8:	613b      	str	r3, [r7, #16]
                    break;
 8055eaa:	e013      	b.n	8055ed4 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8055eac:	693b      	ldr	r3, [r7, #16]
 8055eae:	2b00      	cmp	r3, #0
 8055eb0:	d10a      	bne.n	8055ec8 <vQueueAddToRegistry+0x74>
 8055eb2:	4a10      	ldr	r2, [pc, #64]	@ (8055ef4 <vQueueAddToRegistry+0xa0>)
 8055eb4:	697b      	ldr	r3, [r7, #20]
 8055eb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8055eba:	2b00      	cmp	r3, #0
 8055ebc:	d104      	bne.n	8055ec8 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8055ebe:	697b      	ldr	r3, [r7, #20]
 8055ec0:	00db      	lsls	r3, r3, #3
 8055ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8055ef4 <vQueueAddToRegistry+0xa0>)
 8055ec4:	4413      	add	r3, r2
 8055ec6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8055ec8:	697b      	ldr	r3, [r7, #20]
 8055eca:	3301      	adds	r3, #1
 8055ecc:	617b      	str	r3, [r7, #20]
 8055ece:	697b      	ldr	r3, [r7, #20]
 8055ed0:	2b07      	cmp	r3, #7
 8055ed2:	d9dd      	bls.n	8055e90 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8055ed4:	693b      	ldr	r3, [r7, #16]
 8055ed6:	2b00      	cmp	r3, #0
 8055ed8:	d005      	beq.n	8055ee6 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8055eda:	693b      	ldr	r3, [r7, #16]
 8055edc:	683a      	ldr	r2, [r7, #0]
 8055ede:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8055ee0:	693b      	ldr	r3, [r7, #16]
 8055ee2:	687a      	ldr	r2, [r7, #4]
 8055ee4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8055ee6:	bf00      	nop
 8055ee8:	371c      	adds	r7, #28
 8055eea:	46bd      	mov	sp, r7
 8055eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055ef0:	4770      	bx	lr
 8055ef2:	bf00      	nop
 8055ef4:	2402d7a8 	.word	0x2402d7a8

08055ef8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8055ef8:	b480      	push	{r7}
 8055efa:	b085      	sub	sp, #20
 8055efc:	af00      	add	r7, sp, #0
 8055efe:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8055f00:	687b      	ldr	r3, [r7, #4]
 8055f02:	2b00      	cmp	r3, #0
 8055f04:	d10d      	bne.n	8055f22 <vQueueUnregisterQueue+0x2a>
    __asm volatile
 8055f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055f0a:	b672      	cpsid	i
 8055f0c:	f383 8811 	msr	BASEPRI, r3
 8055f10:	f3bf 8f6f 	isb	sy
 8055f14:	f3bf 8f4f 	dsb	sy
 8055f18:	b662      	cpsie	i
 8055f1a:	60bb      	str	r3, [r7, #8]
}
 8055f1c:	bf00      	nop
 8055f1e:	bf00      	nop
 8055f20:	e7fd      	b.n	8055f1e <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8055f22:	2300      	movs	r3, #0
 8055f24:	60fb      	str	r3, [r7, #12]
 8055f26:	e016      	b.n	8055f56 <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8055f28:	4a10      	ldr	r2, [pc, #64]	@ (8055f6c <vQueueUnregisterQueue+0x74>)
 8055f2a:	68fb      	ldr	r3, [r7, #12]
 8055f2c:	00db      	lsls	r3, r3, #3
 8055f2e:	4413      	add	r3, r2
 8055f30:	685b      	ldr	r3, [r3, #4]
 8055f32:	687a      	ldr	r2, [r7, #4]
 8055f34:	429a      	cmp	r2, r3
 8055f36:	d10b      	bne.n	8055f50 <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8055f38:	4a0c      	ldr	r2, [pc, #48]	@ (8055f6c <vQueueUnregisterQueue+0x74>)
 8055f3a:	68fb      	ldr	r3, [r7, #12]
 8055f3c:	2100      	movs	r1, #0
 8055f3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8055f42:	4a0a      	ldr	r2, [pc, #40]	@ (8055f6c <vQueueUnregisterQueue+0x74>)
 8055f44:	68fb      	ldr	r3, [r7, #12]
 8055f46:	00db      	lsls	r3, r3, #3
 8055f48:	4413      	add	r3, r2
 8055f4a:	2200      	movs	r2, #0
 8055f4c:	605a      	str	r2, [r3, #4]
                break;
 8055f4e:	e006      	b.n	8055f5e <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8055f50:	68fb      	ldr	r3, [r7, #12]
 8055f52:	3301      	adds	r3, #1
 8055f54:	60fb      	str	r3, [r7, #12]
 8055f56:	68fb      	ldr	r3, [r7, #12]
 8055f58:	2b07      	cmp	r3, #7
 8055f5a:	d9e5      	bls.n	8055f28 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8055f5c:	bf00      	nop
 8055f5e:	bf00      	nop
 8055f60:	3714      	adds	r7, #20
 8055f62:	46bd      	mov	sp, r7
 8055f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055f68:	4770      	bx	lr
 8055f6a:	bf00      	nop
 8055f6c:	2402d7a8 	.word	0x2402d7a8

08055f70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8055f70:	b580      	push	{r7, lr}
 8055f72:	b086      	sub	sp, #24
 8055f74:	af00      	add	r7, sp, #0
 8055f76:	60f8      	str	r0, [r7, #12]
 8055f78:	60b9      	str	r1, [r7, #8]
 8055f7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8055f7c:	68fb      	ldr	r3, [r7, #12]
 8055f7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8055f80:	f002 fcd8 	bl	8058934 <vPortEnterCritical>
 8055f84:	697b      	ldr	r3, [r7, #20]
 8055f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8055f8a:	b25b      	sxtb	r3, r3
 8055f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055f90:	d103      	bne.n	8055f9a <vQueueWaitForMessageRestricted+0x2a>
 8055f92:	697b      	ldr	r3, [r7, #20]
 8055f94:	2200      	movs	r2, #0
 8055f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8055f9a:	697b      	ldr	r3, [r7, #20]
 8055f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8055fa0:	b25b      	sxtb	r3, r3
 8055fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8055fa6:	d103      	bne.n	8055fb0 <vQueueWaitForMessageRestricted+0x40>
 8055fa8:	697b      	ldr	r3, [r7, #20]
 8055faa:	2200      	movs	r2, #0
 8055fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8055fb0:	f002 fcf6 	bl	80589a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8055fb4:	697b      	ldr	r3, [r7, #20]
 8055fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8055fb8:	2b00      	cmp	r3, #0
 8055fba:	d106      	bne.n	8055fca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8055fbc:	697b      	ldr	r3, [r7, #20]
 8055fbe:	3324      	adds	r3, #36	@ 0x24
 8055fc0:	687a      	ldr	r2, [r7, #4]
 8055fc2:	68b9      	ldr	r1, [r7, #8]
 8055fc4:	4618      	mov	r0, r3
 8055fc6:	f001 f80f 	bl	8056fe8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8055fca:	6978      	ldr	r0, [r7, #20]
 8055fcc:	f7ff fec2 	bl	8055d54 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8055fd0:	bf00      	nop
 8055fd2:	3718      	adds	r7, #24
 8055fd4:	46bd      	mov	sp, r7
 8055fd6:	bd80      	pop	{r7, pc}

08055fd8 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8055fd8:	b580      	push	{r7, lr}
 8055fda:	b08e      	sub	sp, #56	@ 0x38
 8055fdc:	af04      	add	r7, sp, #16
 8055fde:	60f8      	str	r0, [r7, #12]
 8055fe0:	60b9      	str	r1, [r7, #8]
 8055fe2:	607a      	str	r2, [r7, #4]
 8055fe4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8055fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8055fe8:	2b00      	cmp	r3, #0
 8055fea:	d10d      	bne.n	8056008 <prvCreateStaticTask+0x30>
    __asm volatile
 8055fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8055ff0:	b672      	cpsid	i
 8055ff2:	f383 8811 	msr	BASEPRI, r3
 8055ff6:	f3bf 8f6f 	isb	sy
 8055ffa:	f3bf 8f4f 	dsb	sy
 8055ffe:	b662      	cpsie	i
 8056000:	623b      	str	r3, [r7, #32]
}
 8056002:	bf00      	nop
 8056004:	bf00      	nop
 8056006:	e7fd      	b.n	8056004 <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 8056008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 805600a:	2b00      	cmp	r3, #0
 805600c:	d10d      	bne.n	805602a <prvCreateStaticTask+0x52>
    __asm volatile
 805600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056012:	b672      	cpsid	i
 8056014:	f383 8811 	msr	BASEPRI, r3
 8056018:	f3bf 8f6f 	isb	sy
 805601c:	f3bf 8f4f 	dsb	sy
 8056020:	b662      	cpsie	i
 8056022:	61fb      	str	r3, [r7, #28]
}
 8056024:	bf00      	nop
 8056026:	bf00      	nop
 8056028:	e7fd      	b.n	8056026 <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 805602a:	235c      	movs	r3, #92	@ 0x5c
 805602c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 805602e:	697b      	ldr	r3, [r7, #20]
 8056030:	2b5c      	cmp	r3, #92	@ 0x5c
 8056032:	d00d      	beq.n	8056050 <prvCreateStaticTask+0x78>
    __asm volatile
 8056034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056038:	b672      	cpsid	i
 805603a:	f383 8811 	msr	BASEPRI, r3
 805603e:	f3bf 8f6f 	isb	sy
 8056042:	f3bf 8f4f 	dsb	sy
 8056046:	b662      	cpsie	i
 8056048:	61bb      	str	r3, [r7, #24]
}
 805604a:	bf00      	nop
 805604c:	bf00      	nop
 805604e:	e7fd      	b.n	805604c <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8056050:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8056052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8056054:	2b00      	cmp	r3, #0
 8056056:	d01f      	beq.n	8056098 <prvCreateStaticTask+0xc0>
 8056058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 805605a:	2b00      	cmp	r3, #0
 805605c:	d01c      	beq.n	8056098 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 805605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8056060:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8056062:	225c      	movs	r2, #92	@ 0x5c
 8056064:	2100      	movs	r1, #0
 8056066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8056068:	f013 fbbc 	bl	80697e4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 805606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805606e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8056070:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8056072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8056074:	2202      	movs	r2, #2
 8056076:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 805607a:	2300      	movs	r3, #0
 805607c:	9303      	str	r3, [sp, #12]
 805607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8056080:	9302      	str	r3, [sp, #8]
 8056082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8056084:	9301      	str	r3, [sp, #4]
 8056086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8056088:	9300      	str	r3, [sp, #0]
 805608a:	683b      	ldr	r3, [r7, #0]
 805608c:	687a      	ldr	r2, [r7, #4]
 805608e:	68b9      	ldr	r1, [r7, #8]
 8056090:	68f8      	ldr	r0, [r7, #12]
 8056092:	f000 f88f 	bl	80561b4 <prvInitialiseNewTask>
 8056096:	e001      	b.n	805609c <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 8056098:	2300      	movs	r3, #0
 805609a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 805609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 805609e:	4618      	mov	r0, r3
 80560a0:	3728      	adds	r7, #40	@ 0x28
 80560a2:	46bd      	mov	sp, r7
 80560a4:	bd80      	pop	{r7, pc}

080560a6 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80560a6:	b580      	push	{r7, lr}
 80560a8:	b08a      	sub	sp, #40	@ 0x28
 80560aa:	af04      	add	r7, sp, #16
 80560ac:	60f8      	str	r0, [r7, #12]
 80560ae:	60b9      	str	r1, [r7, #8]
 80560b0:	607a      	str	r2, [r7, #4]
 80560b2:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80560b4:	2300      	movs	r3, #0
 80560b6:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80560b8:	f107 0310 	add.w	r3, r7, #16
 80560bc:	9303      	str	r3, [sp, #12]
 80560be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80560c0:	9302      	str	r3, [sp, #8]
 80560c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80560c4:	9301      	str	r3, [sp, #4]
 80560c6:	6a3b      	ldr	r3, [r7, #32]
 80560c8:	9300      	str	r3, [sp, #0]
 80560ca:	683b      	ldr	r3, [r7, #0]
 80560cc:	687a      	ldr	r2, [r7, #4]
 80560ce:	68b9      	ldr	r1, [r7, #8]
 80560d0:	68f8      	ldr	r0, [r7, #12]
 80560d2:	f7ff ff81 	bl	8055fd8 <prvCreateStaticTask>
 80560d6:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80560d8:	697b      	ldr	r3, [r7, #20]
 80560da:	2b00      	cmp	r3, #0
 80560dc:	d002      	beq.n	80560e4 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80560de:	6978      	ldr	r0, [r7, #20]
 80560e0:	f000 f8fc 	bl	80562dc <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 80560e4:	693b      	ldr	r3, [r7, #16]
    }
 80560e6:	4618      	mov	r0, r3
 80560e8:	3718      	adds	r7, #24
 80560ea:	46bd      	mov	sp, r7
 80560ec:	bd80      	pop	{r7, pc}

080560ee <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80560ee:	b580      	push	{r7, lr}
 80560f0:	b08a      	sub	sp, #40	@ 0x28
 80560f2:	af04      	add	r7, sp, #16
 80560f4:	60f8      	str	r0, [r7, #12]
 80560f6:	60b9      	str	r1, [r7, #8]
 80560f8:	607a      	str	r2, [r7, #4]
 80560fa:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80560fc:	687b      	ldr	r3, [r7, #4]
 80560fe:	009b      	lsls	r3, r3, #2
 8056100:	4618      	mov	r0, r3
 8056102:	f002 fd4b 	bl	8058b9c <pvPortMalloc>
 8056106:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8056108:	693b      	ldr	r3, [r7, #16]
 805610a:	2b00      	cmp	r3, #0
 805610c:	d013      	beq.n	8056136 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 805610e:	205c      	movs	r0, #92	@ 0x5c
 8056110:	f002 fd44 	bl	8058b9c <pvPortMalloc>
 8056114:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8056116:	697b      	ldr	r3, [r7, #20]
 8056118:	2b00      	cmp	r3, #0
 805611a:	d008      	beq.n	805612e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 805611c:	225c      	movs	r2, #92	@ 0x5c
 805611e:	2100      	movs	r1, #0
 8056120:	6978      	ldr	r0, [r7, #20]
 8056122:	f013 fb5f 	bl	80697e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8056126:	697b      	ldr	r3, [r7, #20]
 8056128:	693a      	ldr	r2, [r7, #16]
 805612a:	631a      	str	r2, [r3, #48]	@ 0x30
 805612c:	e005      	b.n	805613a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 805612e:	6938      	ldr	r0, [r7, #16]
 8056130:	f002 fe78 	bl	8058e24 <vPortFree>
 8056134:	e001      	b.n	805613a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8056136:	2300      	movs	r3, #0
 8056138:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 805613a:	697b      	ldr	r3, [r7, #20]
 805613c:	2b00      	cmp	r3, #0
 805613e:	d011      	beq.n	8056164 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8056140:	697b      	ldr	r3, [r7, #20]
 8056142:	2200      	movs	r2, #0
 8056144:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8056148:	2300      	movs	r3, #0
 805614a:	9303      	str	r3, [sp, #12]
 805614c:	697b      	ldr	r3, [r7, #20]
 805614e:	9302      	str	r3, [sp, #8]
 8056150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8056152:	9301      	str	r3, [sp, #4]
 8056154:	6a3b      	ldr	r3, [r7, #32]
 8056156:	9300      	str	r3, [sp, #0]
 8056158:	683b      	ldr	r3, [r7, #0]
 805615a:	687a      	ldr	r2, [r7, #4]
 805615c:	68b9      	ldr	r1, [r7, #8]
 805615e:	68f8      	ldr	r0, [r7, #12]
 8056160:	f000 f828 	bl	80561b4 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8056164:	697b      	ldr	r3, [r7, #20]
    }
 8056166:	4618      	mov	r0, r3
 8056168:	3718      	adds	r7, #24
 805616a:	46bd      	mov	sp, r7
 805616c:	bd80      	pop	{r7, pc}

0805616e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 805616e:	b580      	push	{r7, lr}
 8056170:	b088      	sub	sp, #32
 8056172:	af02      	add	r7, sp, #8
 8056174:	60f8      	str	r0, [r7, #12]
 8056176:	60b9      	str	r1, [r7, #8]
 8056178:	607a      	str	r2, [r7, #4]
 805617a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 805617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805617e:	9301      	str	r3, [sp, #4]
 8056180:	6a3b      	ldr	r3, [r7, #32]
 8056182:	9300      	str	r3, [sp, #0]
 8056184:	683b      	ldr	r3, [r7, #0]
 8056186:	687a      	ldr	r2, [r7, #4]
 8056188:	68b9      	ldr	r1, [r7, #8]
 805618a:	68f8      	ldr	r0, [r7, #12]
 805618c:	f7ff ffaf 	bl	80560ee <prvCreateTask>
 8056190:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8056192:	693b      	ldr	r3, [r7, #16]
 8056194:	2b00      	cmp	r3, #0
 8056196:	d005      	beq.n	80561a4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8056198:	6938      	ldr	r0, [r7, #16]
 805619a:	f000 f89f 	bl	80562dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 805619e:	2301      	movs	r3, #1
 80561a0:	617b      	str	r3, [r7, #20]
 80561a2:	e002      	b.n	80561aa <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80561a4:	f04f 33ff 	mov.w	r3, #4294967295
 80561a8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80561aa:	697b      	ldr	r3, [r7, #20]
    }
 80561ac:	4618      	mov	r0, r3
 80561ae:	3718      	adds	r7, #24
 80561b0:	46bd      	mov	sp, r7
 80561b2:	bd80      	pop	{r7, pc}

080561b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80561b4:	b580      	push	{r7, lr}
 80561b6:	b088      	sub	sp, #32
 80561b8:	af00      	add	r7, sp, #0
 80561ba:	60f8      	str	r0, [r7, #12]
 80561bc:	60b9      	str	r1, [r7, #8]
 80561be:	607a      	str	r2, [r7, #4]
 80561c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80561c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80561c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80561c6:	687b      	ldr	r3, [r7, #4]
 80561c8:	009b      	lsls	r3, r3, #2
 80561ca:	461a      	mov	r2, r3
 80561cc:	21a5      	movs	r1, #165	@ 0xa5
 80561ce:	f013 fb09 	bl	80697e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80561d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80561d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80561d6:	6879      	ldr	r1, [r7, #4]
 80561d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80561dc:	440b      	add	r3, r1
 80561de:	009b      	lsls	r3, r3, #2
 80561e0:	4413      	add	r3, r2
 80561e2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80561e4:	69bb      	ldr	r3, [r7, #24]
 80561e6:	f023 0307 	bic.w	r3, r3, #7
 80561ea:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80561ec:	69bb      	ldr	r3, [r7, #24]
 80561ee:	f003 0307 	and.w	r3, r3, #7
 80561f2:	2b00      	cmp	r3, #0
 80561f4:	d00d      	beq.n	8056212 <prvInitialiseNewTask+0x5e>
    __asm volatile
 80561f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80561fa:	b672      	cpsid	i
 80561fc:	f383 8811 	msr	BASEPRI, r3
 8056200:	f3bf 8f6f 	isb	sy
 8056204:	f3bf 8f4f 	dsb	sy
 8056208:	b662      	cpsie	i
 805620a:	617b      	str	r3, [r7, #20]
}
 805620c:	bf00      	nop
 805620e:	bf00      	nop
 8056210:	e7fd      	b.n	805620e <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8056212:	68bb      	ldr	r3, [r7, #8]
 8056214:	2b00      	cmp	r3, #0
 8056216:	d01e      	beq.n	8056256 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8056218:	2300      	movs	r3, #0
 805621a:	61fb      	str	r3, [r7, #28]
 805621c:	e012      	b.n	8056244 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 805621e:	68ba      	ldr	r2, [r7, #8]
 8056220:	69fb      	ldr	r3, [r7, #28]
 8056222:	4413      	add	r3, r2
 8056224:	7819      	ldrb	r1, [r3, #0]
 8056226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8056228:	69fb      	ldr	r3, [r7, #28]
 805622a:	4413      	add	r3, r2
 805622c:	3334      	adds	r3, #52	@ 0x34
 805622e:	460a      	mov	r2, r1
 8056230:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8056232:	68ba      	ldr	r2, [r7, #8]
 8056234:	69fb      	ldr	r3, [r7, #28]
 8056236:	4413      	add	r3, r2
 8056238:	781b      	ldrb	r3, [r3, #0]
 805623a:	2b00      	cmp	r3, #0
 805623c:	d006      	beq.n	805624c <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 805623e:	69fb      	ldr	r3, [r7, #28]
 8056240:	3301      	adds	r3, #1
 8056242:	61fb      	str	r3, [r7, #28]
 8056244:	69fb      	ldr	r3, [r7, #28]
 8056246:	2b0f      	cmp	r3, #15
 8056248:	d9e9      	bls.n	805621e <prvInitialiseNewTask+0x6a>
 805624a:	e000      	b.n	805624e <prvInitialiseNewTask+0x9a>
            {
                break;
 805624c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 805624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8056250:	2200      	movs	r2, #0
 8056252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8056256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8056258:	2b06      	cmp	r3, #6
 805625a:	d90d      	bls.n	8056278 <prvInitialiseNewTask+0xc4>
    __asm volatile
 805625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056260:	b672      	cpsid	i
 8056262:	f383 8811 	msr	BASEPRI, r3
 8056266:	f3bf 8f6f 	isb	sy
 805626a:	f3bf 8f4f 	dsb	sy
 805626e:	b662      	cpsie	i
 8056270:	613b      	str	r3, [r7, #16]
}
 8056272:	bf00      	nop
 8056274:	bf00      	nop
 8056276:	e7fd      	b.n	8056274 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8056278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805627a:	2b06      	cmp	r3, #6
 805627c:	d901      	bls.n	8056282 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 805627e:	2306      	movs	r3, #6
 8056280:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8056282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8056284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8056286:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8056288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805628a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 805628c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 805628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8056290:	3304      	adds	r3, #4
 8056292:	4618      	mov	r0, r3
 8056294:	f7fe fdc0 	bl	8054e18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8056298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 805629a:	3318      	adds	r3, #24
 805629c:	4618      	mov	r0, r3
 805629e:	f7fe fdbb 	bl	8054e18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80562a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80562a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80562a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80562a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80562aa:	f1c3 0207 	rsb	r2, r3, #7
 80562ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80562b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80562b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80562b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80562b6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80562b8:	683a      	ldr	r2, [r7, #0]
 80562ba:	68f9      	ldr	r1, [r7, #12]
 80562bc:	69b8      	ldr	r0, [r7, #24]
 80562be:	f002 f9d9 	bl	8058674 <pxPortInitialiseStack>
 80562c2:	4602      	mov	r2, r0
 80562c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80562c6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80562c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80562ca:	2b00      	cmp	r3, #0
 80562cc:	d002      	beq.n	80562d4 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80562ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80562d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80562d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80562d4:	bf00      	nop
 80562d6:	3720      	adds	r7, #32
 80562d8:	46bd      	mov	sp, r7
 80562da:	bd80      	pop	{r7, pc}

080562dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80562dc:	b580      	push	{r7, lr}
 80562de:	b084      	sub	sp, #16
 80562e0:	af00      	add	r7, sp, #0
 80562e2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80562e4:	f002 fb26 	bl	8058934 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80562e8:	4b41      	ldr	r3, [pc, #260]	@ (80563f0 <prvAddNewTaskToReadyList+0x114>)
 80562ea:	681b      	ldr	r3, [r3, #0]
 80562ec:	3301      	adds	r3, #1
 80562ee:	4a40      	ldr	r2, [pc, #256]	@ (80563f0 <prvAddNewTaskToReadyList+0x114>)
 80562f0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80562f2:	4b40      	ldr	r3, [pc, #256]	@ (80563f4 <prvAddNewTaskToReadyList+0x118>)
 80562f4:	681b      	ldr	r3, [r3, #0]
 80562f6:	2b00      	cmp	r3, #0
 80562f8:	d109      	bne.n	805630e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80562fa:	4a3e      	ldr	r2, [pc, #248]	@ (80563f4 <prvAddNewTaskToReadyList+0x118>)
 80562fc:	687b      	ldr	r3, [r7, #4]
 80562fe:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8056300:	4b3b      	ldr	r3, [pc, #236]	@ (80563f0 <prvAddNewTaskToReadyList+0x114>)
 8056302:	681b      	ldr	r3, [r3, #0]
 8056304:	2b01      	cmp	r3, #1
 8056306:	d110      	bne.n	805632a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8056308:	f001 f830 	bl	805736c <prvInitialiseTaskLists>
 805630c:	e00d      	b.n	805632a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 805630e:	4b3a      	ldr	r3, [pc, #232]	@ (80563f8 <prvAddNewTaskToReadyList+0x11c>)
 8056310:	681b      	ldr	r3, [r3, #0]
 8056312:	2b00      	cmp	r3, #0
 8056314:	d109      	bne.n	805632a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8056316:	4b37      	ldr	r3, [pc, #220]	@ (80563f4 <prvAddNewTaskToReadyList+0x118>)
 8056318:	681b      	ldr	r3, [r3, #0]
 805631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805631c:	687b      	ldr	r3, [r7, #4]
 805631e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056320:	429a      	cmp	r2, r3
 8056322:	d802      	bhi.n	805632a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8056324:	4a33      	ldr	r2, [pc, #204]	@ (80563f4 <prvAddNewTaskToReadyList+0x118>)
 8056326:	687b      	ldr	r3, [r7, #4]
 8056328:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 805632a:	4b34      	ldr	r3, [pc, #208]	@ (80563fc <prvAddNewTaskToReadyList+0x120>)
 805632c:	681b      	ldr	r3, [r3, #0]
 805632e:	3301      	adds	r3, #1
 8056330:	4a32      	ldr	r2, [pc, #200]	@ (80563fc <prvAddNewTaskToReadyList+0x120>)
 8056332:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8056334:	4b31      	ldr	r3, [pc, #196]	@ (80563fc <prvAddNewTaskToReadyList+0x120>)
 8056336:	681a      	ldr	r2, [r3, #0]
 8056338:	687b      	ldr	r3, [r7, #4]
 805633a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 805633c:	687b      	ldr	r3, [r7, #4]
 805633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056340:	2201      	movs	r2, #1
 8056342:	409a      	lsls	r2, r3
 8056344:	4b2e      	ldr	r3, [pc, #184]	@ (8056400 <prvAddNewTaskToReadyList+0x124>)
 8056346:	681b      	ldr	r3, [r3, #0]
 8056348:	4313      	orrs	r3, r2
 805634a:	4a2d      	ldr	r2, [pc, #180]	@ (8056400 <prvAddNewTaskToReadyList+0x124>)
 805634c:	6013      	str	r3, [r2, #0]
 805634e:	687b      	ldr	r3, [r7, #4]
 8056350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056352:	492c      	ldr	r1, [pc, #176]	@ (8056404 <prvAddNewTaskToReadyList+0x128>)
 8056354:	4613      	mov	r3, r2
 8056356:	009b      	lsls	r3, r3, #2
 8056358:	4413      	add	r3, r2
 805635a:	009b      	lsls	r3, r3, #2
 805635c:	440b      	add	r3, r1
 805635e:	3304      	adds	r3, #4
 8056360:	681b      	ldr	r3, [r3, #0]
 8056362:	60fb      	str	r3, [r7, #12]
 8056364:	687b      	ldr	r3, [r7, #4]
 8056366:	68fa      	ldr	r2, [r7, #12]
 8056368:	609a      	str	r2, [r3, #8]
 805636a:	68fb      	ldr	r3, [r7, #12]
 805636c:	689a      	ldr	r2, [r3, #8]
 805636e:	687b      	ldr	r3, [r7, #4]
 8056370:	60da      	str	r2, [r3, #12]
 8056372:	68fb      	ldr	r3, [r7, #12]
 8056374:	689b      	ldr	r3, [r3, #8]
 8056376:	687a      	ldr	r2, [r7, #4]
 8056378:	3204      	adds	r2, #4
 805637a:	605a      	str	r2, [r3, #4]
 805637c:	687b      	ldr	r3, [r7, #4]
 805637e:	1d1a      	adds	r2, r3, #4
 8056380:	68fb      	ldr	r3, [r7, #12]
 8056382:	609a      	str	r2, [r3, #8]
 8056384:	687b      	ldr	r3, [r7, #4]
 8056386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056388:	4613      	mov	r3, r2
 805638a:	009b      	lsls	r3, r3, #2
 805638c:	4413      	add	r3, r2
 805638e:	009b      	lsls	r3, r3, #2
 8056390:	4a1c      	ldr	r2, [pc, #112]	@ (8056404 <prvAddNewTaskToReadyList+0x128>)
 8056392:	441a      	add	r2, r3
 8056394:	687b      	ldr	r3, [r7, #4]
 8056396:	615a      	str	r2, [r3, #20]
 8056398:	687b      	ldr	r3, [r7, #4]
 805639a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805639c:	4919      	ldr	r1, [pc, #100]	@ (8056404 <prvAddNewTaskToReadyList+0x128>)
 805639e:	4613      	mov	r3, r2
 80563a0:	009b      	lsls	r3, r3, #2
 80563a2:	4413      	add	r3, r2
 80563a4:	009b      	lsls	r3, r3, #2
 80563a6:	440b      	add	r3, r1
 80563a8:	681b      	ldr	r3, [r3, #0]
 80563aa:	687a      	ldr	r2, [r7, #4]
 80563ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80563ae:	1c59      	adds	r1, r3, #1
 80563b0:	4814      	ldr	r0, [pc, #80]	@ (8056404 <prvAddNewTaskToReadyList+0x128>)
 80563b2:	4613      	mov	r3, r2
 80563b4:	009b      	lsls	r3, r3, #2
 80563b6:	4413      	add	r3, r2
 80563b8:	009b      	lsls	r3, r3, #2
 80563ba:	4403      	add	r3, r0
 80563bc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80563be:	f002 faef 	bl	80589a0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80563c2:	4b0d      	ldr	r3, [pc, #52]	@ (80563f8 <prvAddNewTaskToReadyList+0x11c>)
 80563c4:	681b      	ldr	r3, [r3, #0]
 80563c6:	2b00      	cmp	r3, #0
 80563c8:	d00e      	beq.n	80563e8 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80563ca:	4b0a      	ldr	r3, [pc, #40]	@ (80563f4 <prvAddNewTaskToReadyList+0x118>)
 80563cc:	681b      	ldr	r3, [r3, #0]
 80563ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80563d0:	687b      	ldr	r3, [r7, #4]
 80563d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80563d4:	429a      	cmp	r2, r3
 80563d6:	d207      	bcs.n	80563e8 <prvAddNewTaskToReadyList+0x10c>
 80563d8:	4b0b      	ldr	r3, [pc, #44]	@ (8056408 <prvAddNewTaskToReadyList+0x12c>)
 80563da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80563de:	601a      	str	r2, [r3, #0]
 80563e0:	f3bf 8f4f 	dsb	sy
 80563e4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80563e8:	bf00      	nop
 80563ea:	3710      	adds	r7, #16
 80563ec:	46bd      	mov	sp, r7
 80563ee:	bd80      	pop	{r7, pc}
 80563f0:	2402d8d4 	.word	0x2402d8d4
 80563f4:	2402d7e8 	.word	0x2402d7e8
 80563f8:	2402d8e0 	.word	0x2402d8e0
 80563fc:	2402d8f0 	.word	0x2402d8f0
 8056400:	2402d8dc 	.word	0x2402d8dc
 8056404:	2402d7ec 	.word	0x2402d7ec
 8056408:	e000ed04 	.word	0xe000ed04

0805640c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 805640c:	b580      	push	{r7, lr}
 805640e:	b086      	sub	sp, #24
 8056410:	af00      	add	r7, sp, #0
 8056412:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8056414:	2300      	movs	r3, #0
 8056416:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8056418:	f002 fa8c 	bl	8058934 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 805641c:	687b      	ldr	r3, [r7, #4]
 805641e:	2b00      	cmp	r3, #0
 8056420:	d102      	bne.n	8056428 <vTaskDelete+0x1c>
 8056422:	4b42      	ldr	r3, [pc, #264]	@ (805652c <vTaskDelete+0x120>)
 8056424:	681b      	ldr	r3, [r3, #0]
 8056426:	e000      	b.n	805642a <vTaskDelete+0x1e>
 8056428:	687b      	ldr	r3, [r7, #4]
 805642a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805642c:	693b      	ldr	r3, [r7, #16]
 805642e:	3304      	adds	r3, #4
 8056430:	4618      	mov	r0, r3
 8056432:	f7fe fd5b 	bl	8054eec <uxListRemove>
 8056436:	4603      	mov	r3, r0
 8056438:	2b00      	cmp	r3, #0
 805643a:	d115      	bne.n	8056468 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 805643c:	693b      	ldr	r3, [r7, #16]
 805643e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056440:	493b      	ldr	r1, [pc, #236]	@ (8056530 <vTaskDelete+0x124>)
 8056442:	4613      	mov	r3, r2
 8056444:	009b      	lsls	r3, r3, #2
 8056446:	4413      	add	r3, r2
 8056448:	009b      	lsls	r3, r3, #2
 805644a:	440b      	add	r3, r1
 805644c:	681b      	ldr	r3, [r3, #0]
 805644e:	2b00      	cmp	r3, #0
 8056450:	d10a      	bne.n	8056468 <vTaskDelete+0x5c>
 8056452:	693b      	ldr	r3, [r7, #16]
 8056454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056456:	2201      	movs	r2, #1
 8056458:	fa02 f303 	lsl.w	r3, r2, r3
 805645c:	43da      	mvns	r2, r3
 805645e:	4b35      	ldr	r3, [pc, #212]	@ (8056534 <vTaskDelete+0x128>)
 8056460:	681b      	ldr	r3, [r3, #0]
 8056462:	4013      	ands	r3, r2
 8056464:	4a33      	ldr	r2, [pc, #204]	@ (8056534 <vTaskDelete+0x128>)
 8056466:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8056468:	693b      	ldr	r3, [r7, #16]
 805646a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 805646c:	2b00      	cmp	r3, #0
 805646e:	d004      	beq.n	805647a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8056470:	693b      	ldr	r3, [r7, #16]
 8056472:	3318      	adds	r3, #24
 8056474:	4618      	mov	r0, r3
 8056476:	f7fe fd39 	bl	8054eec <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 805647a:	4b2f      	ldr	r3, [pc, #188]	@ (8056538 <vTaskDelete+0x12c>)
 805647c:	681b      	ldr	r3, [r3, #0]
 805647e:	3301      	adds	r3, #1
 8056480:	4a2d      	ldr	r2, [pc, #180]	@ (8056538 <vTaskDelete+0x12c>)
 8056482:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8056484:	4b29      	ldr	r3, [pc, #164]	@ (805652c <vTaskDelete+0x120>)
 8056486:	681b      	ldr	r3, [r3, #0]
 8056488:	693a      	ldr	r2, [r7, #16]
 805648a:	429a      	cmp	r2, r3
 805648c:	d101      	bne.n	8056492 <vTaskDelete+0x86>
 805648e:	2301      	movs	r3, #1
 8056490:	e000      	b.n	8056494 <vTaskDelete+0x88>
 8056492:	2300      	movs	r3, #0
 8056494:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8056496:	4b29      	ldr	r3, [pc, #164]	@ (805653c <vTaskDelete+0x130>)
 8056498:	681b      	ldr	r3, [r3, #0]
 805649a:	2b00      	cmp	r3, #0
 805649c:	d010      	beq.n	80564c0 <vTaskDelete+0xb4>
 805649e:	68fb      	ldr	r3, [r7, #12]
 80564a0:	2b00      	cmp	r3, #0
 80564a2:	d00d      	beq.n	80564c0 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80564a4:	693b      	ldr	r3, [r7, #16]
 80564a6:	3304      	adds	r3, #4
 80564a8:	4619      	mov	r1, r3
 80564aa:	4825      	ldr	r0, [pc, #148]	@ (8056540 <vTaskDelete+0x134>)
 80564ac:	f7fe fcc1 	bl	8054e32 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80564b0:	4b24      	ldr	r3, [pc, #144]	@ (8056544 <vTaskDelete+0x138>)
 80564b2:	681b      	ldr	r3, [r3, #0]
 80564b4:	3301      	adds	r3, #1
 80564b6:	4a23      	ldr	r2, [pc, #140]	@ (8056544 <vTaskDelete+0x138>)
 80564b8:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80564ba:	2301      	movs	r3, #1
 80564bc:	617b      	str	r3, [r7, #20]
 80564be:	e006      	b.n	80564ce <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80564c0:	4b21      	ldr	r3, [pc, #132]	@ (8056548 <vTaskDelete+0x13c>)
 80564c2:	681b      	ldr	r3, [r3, #0]
 80564c4:	3b01      	subs	r3, #1
 80564c6:	4a20      	ldr	r2, [pc, #128]	@ (8056548 <vTaskDelete+0x13c>)
 80564c8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80564ca:	f001 f89d 	bl	8057608 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80564ce:	f002 fa67 	bl	80589a0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80564d2:	697b      	ldr	r3, [r7, #20]
 80564d4:	2b01      	cmp	r3, #1
 80564d6:	d002      	beq.n	80564de <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80564d8:	6938      	ldr	r0, [r7, #16]
 80564da:	f001 f863 	bl	80575a4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80564de:	4b17      	ldr	r3, [pc, #92]	@ (805653c <vTaskDelete+0x130>)
 80564e0:	681b      	ldr	r3, [r3, #0]
 80564e2:	2b00      	cmp	r3, #0
 80564e4:	d01e      	beq.n	8056524 <vTaskDelete+0x118>
            {
                if( pxTCB == pxCurrentTCB )
 80564e6:	4b11      	ldr	r3, [pc, #68]	@ (805652c <vTaskDelete+0x120>)
 80564e8:	681b      	ldr	r3, [r3, #0]
 80564ea:	693a      	ldr	r2, [r7, #16]
 80564ec:	429a      	cmp	r2, r3
 80564ee:	d119      	bne.n	8056524 <vTaskDelete+0x118>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80564f0:	4b16      	ldr	r3, [pc, #88]	@ (805654c <vTaskDelete+0x140>)
 80564f2:	681b      	ldr	r3, [r3, #0]
 80564f4:	2b00      	cmp	r3, #0
 80564f6:	d00d      	beq.n	8056514 <vTaskDelete+0x108>
    __asm volatile
 80564f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80564fc:	b672      	cpsid	i
 80564fe:	f383 8811 	msr	BASEPRI, r3
 8056502:	f3bf 8f6f 	isb	sy
 8056506:	f3bf 8f4f 	dsb	sy
 805650a:	b662      	cpsie	i
 805650c:	60bb      	str	r3, [r7, #8]
}
 805650e:	bf00      	nop
 8056510:	bf00      	nop
 8056512:	e7fd      	b.n	8056510 <vTaskDelete+0x104>
                    taskYIELD_WITHIN_API();
 8056514:	4b0e      	ldr	r3, [pc, #56]	@ (8056550 <vTaskDelete+0x144>)
 8056516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 805651a:	601a      	str	r2, [r3, #0]
 805651c:	f3bf 8f4f 	dsb	sy
 8056520:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8056524:	bf00      	nop
 8056526:	3718      	adds	r7, #24
 8056528:	46bd      	mov	sp, r7
 805652a:	bd80      	pop	{r7, pc}
 805652c:	2402d7e8 	.word	0x2402d7e8
 8056530:	2402d7ec 	.word	0x2402d7ec
 8056534:	2402d8dc 	.word	0x2402d8dc
 8056538:	2402d8f0 	.word	0x2402d8f0
 805653c:	2402d8e0 	.word	0x2402d8e0
 8056540:	2402d8bc 	.word	0x2402d8bc
 8056544:	2402d8d0 	.word	0x2402d8d0
 8056548:	2402d8d4 	.word	0x2402d8d4
 805654c:	2402d8fc 	.word	0x2402d8fc
 8056550:	e000ed04 	.word	0xe000ed04

08056554 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8056554:	b580      	push	{r7, lr}
 8056556:	b08a      	sub	sp, #40	@ 0x28
 8056558:	af00      	add	r7, sp, #0
 805655a:	6078      	str	r0, [r7, #4]
 805655c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 805655e:	2300      	movs	r3, #0
 8056560:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8056562:	687b      	ldr	r3, [r7, #4]
 8056564:	2b00      	cmp	r3, #0
 8056566:	d10d      	bne.n	8056584 <xTaskDelayUntil+0x30>
    __asm volatile
 8056568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805656c:	b672      	cpsid	i
 805656e:	f383 8811 	msr	BASEPRI, r3
 8056572:	f3bf 8f6f 	isb	sy
 8056576:	f3bf 8f4f 	dsb	sy
 805657a:	b662      	cpsie	i
 805657c:	617b      	str	r3, [r7, #20]
}
 805657e:	bf00      	nop
 8056580:	bf00      	nop
 8056582:	e7fd      	b.n	8056580 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8056584:	683b      	ldr	r3, [r7, #0]
 8056586:	2b00      	cmp	r3, #0
 8056588:	d10d      	bne.n	80565a6 <xTaskDelayUntil+0x52>
    __asm volatile
 805658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805658e:	b672      	cpsid	i
 8056590:	f383 8811 	msr	BASEPRI, r3
 8056594:	f3bf 8f6f 	isb	sy
 8056598:	f3bf 8f4f 	dsb	sy
 805659c:	b662      	cpsie	i
 805659e:	613b      	str	r3, [r7, #16]
}
 80565a0:	bf00      	nop
 80565a2:	bf00      	nop
 80565a4:	e7fd      	b.n	80565a2 <xTaskDelayUntil+0x4e>

        vTaskSuspendAll();
 80565a6:	f000 f9a7 	bl	80568f8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80565aa:	4b2b      	ldr	r3, [pc, #172]	@ (8056658 <xTaskDelayUntil+0x104>)
 80565ac:	681b      	ldr	r3, [r3, #0]
 80565ae:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 80565b0:	4b2a      	ldr	r3, [pc, #168]	@ (805665c <xTaskDelayUntil+0x108>)
 80565b2:	681b      	ldr	r3, [r3, #0]
 80565b4:	2b01      	cmp	r3, #1
 80565b6:	d00d      	beq.n	80565d4 <xTaskDelayUntil+0x80>
    __asm volatile
 80565b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80565bc:	b672      	cpsid	i
 80565be:	f383 8811 	msr	BASEPRI, r3
 80565c2:	f3bf 8f6f 	isb	sy
 80565c6:	f3bf 8f4f 	dsb	sy
 80565ca:	b662      	cpsie	i
 80565cc:	60fb      	str	r3, [r7, #12]
}
 80565ce:	bf00      	nop
 80565d0:	bf00      	nop
 80565d2:	e7fd      	b.n	80565d0 <xTaskDelayUntil+0x7c>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80565d4:	687b      	ldr	r3, [r7, #4]
 80565d6:	681b      	ldr	r3, [r3, #0]
 80565d8:	683a      	ldr	r2, [r7, #0]
 80565da:	4413      	add	r3, r2
 80565dc:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80565de:	687b      	ldr	r3, [r7, #4]
 80565e0:	681b      	ldr	r3, [r3, #0]
 80565e2:	6a3a      	ldr	r2, [r7, #32]
 80565e4:	429a      	cmp	r2, r3
 80565e6:	d20b      	bcs.n	8056600 <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80565e8:	687b      	ldr	r3, [r7, #4]
 80565ea:	681b      	ldr	r3, [r3, #0]
 80565ec:	69fa      	ldr	r2, [r7, #28]
 80565ee:	429a      	cmp	r2, r3
 80565f0:	d211      	bcs.n	8056616 <xTaskDelayUntil+0xc2>
 80565f2:	69fa      	ldr	r2, [r7, #28]
 80565f4:	6a3b      	ldr	r3, [r7, #32]
 80565f6:	429a      	cmp	r2, r3
 80565f8:	d90d      	bls.n	8056616 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 80565fa:	2301      	movs	r3, #1
 80565fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80565fe:	e00a      	b.n	8056616 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8056600:	687b      	ldr	r3, [r7, #4]
 8056602:	681b      	ldr	r3, [r3, #0]
 8056604:	69fa      	ldr	r2, [r7, #28]
 8056606:	429a      	cmp	r2, r3
 8056608:	d303      	bcc.n	8056612 <xTaskDelayUntil+0xbe>
 805660a:	69fa      	ldr	r2, [r7, #28]
 805660c:	6a3b      	ldr	r3, [r7, #32]
 805660e:	429a      	cmp	r2, r3
 8056610:	d901      	bls.n	8056616 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8056612:	2301      	movs	r3, #1
 8056614:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8056616:	687b      	ldr	r3, [r7, #4]
 8056618:	69fa      	ldr	r2, [r7, #28]
 805661a:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 805661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 805661e:	2b00      	cmp	r3, #0
 8056620:	d006      	beq.n	8056630 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8056622:	69fa      	ldr	r2, [r7, #28]
 8056624:	6a3b      	ldr	r3, [r7, #32]
 8056626:	1ad3      	subs	r3, r2, r3
 8056628:	2100      	movs	r1, #0
 805662a:	4618      	mov	r0, r3
 805662c:	f001 fc2e 	bl	8057e8c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8056630:	f000 f970 	bl	8056914 <xTaskResumeAll>
 8056634:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8056636:	69bb      	ldr	r3, [r7, #24]
 8056638:	2b00      	cmp	r3, #0
 805663a:	d107      	bne.n	805664c <xTaskDelayUntil+0xf8>
        {
            taskYIELD_WITHIN_API();
 805663c:	4b08      	ldr	r3, [pc, #32]	@ (8056660 <xTaskDelayUntil+0x10c>)
 805663e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8056642:	601a      	str	r2, [r3, #0]
 8056644:	f3bf 8f4f 	dsb	sy
 8056648:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
 805664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 805664e:	4618      	mov	r0, r3
 8056650:	3728      	adds	r7, #40	@ 0x28
 8056652:	46bd      	mov	sp, r7
 8056654:	bd80      	pop	{r7, pc}
 8056656:	bf00      	nop
 8056658:	2402d8d8 	.word	0x2402d8d8
 805665c:	2402d8fc 	.word	0x2402d8fc
 8056660:	e000ed04 	.word	0xe000ed04

08056664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8056664:	b580      	push	{r7, lr}
 8056666:	b084      	sub	sp, #16
 8056668:	af00      	add	r7, sp, #0
 805666a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 805666c:	2300      	movs	r3, #0
 805666e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8056670:	687b      	ldr	r3, [r7, #4]
 8056672:	2b00      	cmp	r3, #0
 8056674:	d01a      	beq.n	80566ac <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8056676:	f000 f93f 	bl	80568f8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 805667a:	4b14      	ldr	r3, [pc, #80]	@ (80566cc <vTaskDelay+0x68>)
 805667c:	681b      	ldr	r3, [r3, #0]
 805667e:	2b01      	cmp	r3, #1
 8056680:	d00d      	beq.n	805669e <vTaskDelay+0x3a>
    __asm volatile
 8056682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056686:	b672      	cpsid	i
 8056688:	f383 8811 	msr	BASEPRI, r3
 805668c:	f3bf 8f6f 	isb	sy
 8056690:	f3bf 8f4f 	dsb	sy
 8056694:	b662      	cpsie	i
 8056696:	60bb      	str	r3, [r7, #8]
}
 8056698:	bf00      	nop
 805669a:	bf00      	nop
 805669c:	e7fd      	b.n	805669a <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 805669e:	2100      	movs	r1, #0
 80566a0:	6878      	ldr	r0, [r7, #4]
 80566a2:	f001 fbf3 	bl	8057e8c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80566a6:	f000 f935 	bl	8056914 <xTaskResumeAll>
 80566aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80566ac:	68fb      	ldr	r3, [r7, #12]
 80566ae:	2b00      	cmp	r3, #0
 80566b0:	d107      	bne.n	80566c2 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 80566b2:	4b07      	ldr	r3, [pc, #28]	@ (80566d0 <vTaskDelay+0x6c>)
 80566b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80566b8:	601a      	str	r2, [r3, #0]
 80566ba:	f3bf 8f4f 	dsb	sy
 80566be:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80566c2:	bf00      	nop
 80566c4:	3710      	adds	r7, #16
 80566c6:	46bd      	mov	sp, r7
 80566c8:	bd80      	pop	{r7, pc}
 80566ca:	bf00      	nop
 80566cc:	2402d8fc 	.word	0x2402d8fc
 80566d0:	e000ed04 	.word	0xe000ed04

080566d4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 80566d4:	b580      	push	{r7, lr}
 80566d6:	b08a      	sub	sp, #40	@ 0x28
 80566d8:	af00      	add	r7, sp, #0
 80566da:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 80566dc:	687b      	ldr	r3, [r7, #4]
 80566de:	623b      	str	r3, [r7, #32]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 80566e0:	6a3b      	ldr	r3, [r7, #32]
 80566e2:	2b00      	cmp	r3, #0
 80566e4:	d10d      	bne.n	8056702 <eTaskGetState+0x2e>
    __asm volatile
 80566e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80566ea:	b672      	cpsid	i
 80566ec:	f383 8811 	msr	BASEPRI, r3
 80566f0:	f3bf 8f6f 	isb	sy
 80566f4:	f3bf 8f4f 	dsb	sy
 80566f8:	b662      	cpsie	i
 80566fa:	60fb      	str	r3, [r7, #12]
}
 80566fc:	bf00      	nop
 80566fe:	bf00      	nop
 8056700:	e7fd      	b.n	80566fe <eTaskGetState+0x2a>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8056702:	4b20      	ldr	r3, [pc, #128]	@ (8056784 <eTaskGetState+0xb0>)
 8056704:	681b      	ldr	r3, [r3, #0]
 8056706:	6a3a      	ldr	r2, [r7, #32]
 8056708:	429a      	cmp	r2, r3
 805670a:	d103      	bne.n	8056714 <eTaskGetState+0x40>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 805670c:	2300      	movs	r3, #0
 805670e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8056712:	e031      	b.n	8056778 <eTaskGetState+0xa4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8056714:	f002 f90e 	bl	8058934 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8056718:	6a3b      	ldr	r3, [r7, #32]
 805671a:	695b      	ldr	r3, [r3, #20]
 805671c:	61fb      	str	r3, [r7, #28]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 805671e:	6a3b      	ldr	r3, [r7, #32]
 8056720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8056722:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8056724:	4b18      	ldr	r3, [pc, #96]	@ (8056788 <eTaskGetState+0xb4>)
 8056726:	681b      	ldr	r3, [r3, #0]
 8056728:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 805672a:	4b18      	ldr	r3, [pc, #96]	@ (805678c <eTaskGetState+0xb8>)
 805672c:	681b      	ldr	r3, [r3, #0]
 805672e:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8056730:	f002 f936 	bl	80589a0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8056734:	69bb      	ldr	r3, [r7, #24]
 8056736:	4a16      	ldr	r2, [pc, #88]	@ (8056790 <eTaskGetState+0xbc>)
 8056738:	4293      	cmp	r3, r2
 805673a:	d103      	bne.n	8056744 <eTaskGetState+0x70>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 805673c:	2301      	movs	r3, #1
 805673e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8056742:	e019      	b.n	8056778 <eTaskGetState+0xa4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8056744:	69fa      	ldr	r2, [r7, #28]
 8056746:	697b      	ldr	r3, [r7, #20]
 8056748:	429a      	cmp	r2, r3
 805674a:	d003      	beq.n	8056754 <eTaskGetState+0x80>
 805674c:	69fa      	ldr	r2, [r7, #28]
 805674e:	693b      	ldr	r3, [r7, #16]
 8056750:	429a      	cmp	r2, r3
 8056752:	d103      	bne.n	805675c <eTaskGetState+0x88>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8056754:	2302      	movs	r3, #2
 8056756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 805675a:	e00d      	b.n	8056778 <eTaskGetState+0xa4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 805675c:	69fb      	ldr	r3, [r7, #28]
 805675e:	4a0d      	ldr	r2, [pc, #52]	@ (8056794 <eTaskGetState+0xc0>)
 8056760:	4293      	cmp	r3, r2
 8056762:	d002      	beq.n	805676a <eTaskGetState+0x96>
 8056764:	69fb      	ldr	r3, [r7, #28]
 8056766:	2b00      	cmp	r3, #0
 8056768:	d103      	bne.n	8056772 <eTaskGetState+0x9e>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 805676a:	2304      	movs	r3, #4
 805676c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8056770:	e002      	b.n	8056778 <eTaskGetState+0xa4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 8056772:	2301      	movs	r3, #1
 8056774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 8056778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 805677c:	4618      	mov	r0, r3
 805677e:	3728      	adds	r7, #40	@ 0x28
 8056780:	46bd      	mov	sp, r7
 8056782:	bd80      	pop	{r7, pc}
 8056784:	2402d7e8 	.word	0x2402d7e8
 8056788:	2402d8a0 	.word	0x2402d8a0
 805678c:	2402d8a4 	.word	0x2402d8a4
 8056790:	2402d8a8 	.word	0x2402d8a8
 8056794:	2402d8bc 	.word	0x2402d8bc

08056798 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8056798:	b580      	push	{r7, lr}
 805679a:	b090      	sub	sp, #64	@ 0x40
 805679c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 805679e:	2301      	movs	r3, #1
 80567a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80567a2:	2300      	movs	r3, #0
 80567a4:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80567a6:	2300      	movs	r3, #0
 80567a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80567aa:	e013      	b.n	80567d4 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80567ac:	4a2b      	ldr	r2, [pc, #172]	@ (805685c <prvCreateIdleTasks+0xc4>)
 80567ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80567b0:	4413      	add	r3, r2
 80567b2:	7819      	ldrb	r1, [r3, #0]
 80567b4:	f107 0210 	add.w	r2, r7, #16
 80567b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80567ba:	4413      	add	r3, r2
 80567bc:	460a      	mov	r2, r1
 80567be:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80567c0:	f107 0210 	add.w	r2, r7, #16
 80567c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80567c6:	4413      	add	r3, r2
 80567c8:	781b      	ldrb	r3, [r3, #0]
 80567ca:	2b00      	cmp	r3, #0
 80567cc:	d006      	beq.n	80567dc <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80567ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80567d0:	3301      	adds	r3, #1
 80567d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80567d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80567d6:	2b0f      	cmp	r3, #15
 80567d8:	dde8      	ble.n	80567ac <prvCreateIdleTasks+0x14>
 80567da:	e000      	b.n	80567de <prvCreateIdleTasks+0x46>
        {
            break;
 80567dc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80567de:	2300      	movs	r3, #0
 80567e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80567e2:	e031      	b.n	8056848 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80567e4:	4b1e      	ldr	r3, [pc, #120]	@ (8056860 <prvCreateIdleTasks+0xc8>)
 80567e6:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80567e8:	2300      	movs	r3, #0
 80567ea:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80567ec:	2300      	movs	r3, #0
 80567ee:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80567f0:	1d3a      	adds	r2, r7, #4
 80567f2:	f107 0108 	add.w	r1, r7, #8
 80567f6:	f107 030c 	add.w	r3, r7, #12
 80567fa:	4618      	mov	r0, r3
 80567fc:	f001 fb9c 	bl	8057f38 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8056800:	6878      	ldr	r0, [r7, #4]
 8056802:	68bb      	ldr	r3, [r7, #8]
 8056804:	68fa      	ldr	r2, [r7, #12]
 8056806:	f107 0110 	add.w	r1, r7, #16
 805680a:	9202      	str	r2, [sp, #8]
 805680c:	9301      	str	r3, [sp, #4]
 805680e:	2300      	movs	r3, #0
 8056810:	9300      	str	r3, [sp, #0]
 8056812:	2300      	movs	r3, #0
 8056814:	4602      	mov	r2, r0
 8056816:	6a38      	ldr	r0, [r7, #32]
 8056818:	f7ff fc45 	bl	80560a6 <xTaskCreateStatic>
 805681c:	4602      	mov	r2, r0
 805681e:	4911      	ldr	r1, [pc, #68]	@ (8056864 <prvCreateIdleTasks+0xcc>)
 8056820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8056822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8056826:	4a0f      	ldr	r2, [pc, #60]	@ (8056864 <prvCreateIdleTasks+0xcc>)
 8056828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805682a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 805682e:	2b00      	cmp	r3, #0
 8056830:	d002      	beq.n	8056838 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8056832:	2301      	movs	r3, #1
 8056834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8056836:	e001      	b.n	805683c <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8056838:	2300      	movs	r3, #0
 805683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 805683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 805683e:	2b00      	cmp	r3, #0
 8056840:	d006      	beq.n	8056850 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8056842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8056844:	3301      	adds	r3, #1
 8056846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8056848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805684a:	2b00      	cmp	r3, #0
 805684c:	ddca      	ble.n	80567e4 <prvCreateIdleTasks+0x4c>
 805684e:	e000      	b.n	8056852 <prvCreateIdleTasks+0xba>
        {
            break;
 8056850:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8056852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8056854:	4618      	mov	r0, r3
 8056856:	3730      	adds	r7, #48	@ 0x30
 8056858:	46bd      	mov	sp, r7
 805685a:	bd80      	pop	{r7, pc}
 805685c:	08070a40 	.word	0x08070a40
 8056860:	0805733d 	.word	0x0805733d
 8056864:	2402d8f8 	.word	0x2402d8f8

08056868 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8056868:	b580      	push	{r7, lr}
 805686a:	b084      	sub	sp, #16
 805686c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 805686e:	f7ff ff93 	bl	8056798 <prvCreateIdleTasks>
 8056872:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8056874:	68fb      	ldr	r3, [r7, #12]
 8056876:	2b01      	cmp	r3, #1
 8056878:	d102      	bne.n	8056880 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 805687a:	f001 fb91 	bl	8057fa0 <xTimerCreateTimerTask>
 805687e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8056880:	68fb      	ldr	r3, [r7, #12]
 8056882:	2b01      	cmp	r3, #1
 8056884:	d118      	bne.n	80568b8 <vTaskStartScheduler+0x50>
    __asm volatile
 8056886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805688a:	b672      	cpsid	i
 805688c:	f383 8811 	msr	BASEPRI, r3
 8056890:	f3bf 8f6f 	isb	sy
 8056894:	f3bf 8f4f 	dsb	sy
 8056898:	b662      	cpsie	i
 805689a:	60bb      	str	r3, [r7, #8]
}
 805689c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 805689e:	4b12      	ldr	r3, [pc, #72]	@ (80568e8 <vTaskStartScheduler+0x80>)
 80568a0:	f04f 32ff 	mov.w	r2, #4294967295
 80568a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80568a6:	4b11      	ldr	r3, [pc, #68]	@ (80568ec <vTaskStartScheduler+0x84>)
 80568a8:	2201      	movs	r2, #1
 80568aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80568ac:	4b10      	ldr	r3, [pc, #64]	@ (80568f0 <vTaskStartScheduler+0x88>)
 80568ae:	2200      	movs	r2, #0
 80568b0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80568b2:	f001 ff6f 	bl	8058794 <xPortStartScheduler>
 80568b6:	e011      	b.n	80568dc <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80568b8:	68fb      	ldr	r3, [r7, #12]
 80568ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80568be:	d10d      	bne.n	80568dc <vTaskStartScheduler+0x74>
    __asm volatile
 80568c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80568c4:	b672      	cpsid	i
 80568c6:	f383 8811 	msr	BASEPRI, r3
 80568ca:	f3bf 8f6f 	isb	sy
 80568ce:	f3bf 8f4f 	dsb	sy
 80568d2:	b662      	cpsie	i
 80568d4:	607b      	str	r3, [r7, #4]
}
 80568d6:	bf00      	nop
 80568d8:	bf00      	nop
 80568da:	e7fd      	b.n	80568d8 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80568dc:	4b05      	ldr	r3, [pc, #20]	@ (80568f4 <vTaskStartScheduler+0x8c>)
 80568de:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80568e0:	bf00      	nop
 80568e2:	3710      	adds	r7, #16
 80568e4:	46bd      	mov	sp, r7
 80568e6:	bd80      	pop	{r7, pc}
 80568e8:	2402d8f4 	.word	0x2402d8f4
 80568ec:	2402d8e0 	.word	0x2402d8e0
 80568f0:	2402d8d8 	.word	0x2402d8d8
 80568f4:	0807223c 	.word	0x0807223c

080568f8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80568f8:	b480      	push	{r7}
 80568fa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80568fc:	4b04      	ldr	r3, [pc, #16]	@ (8056910 <vTaskSuspendAll+0x18>)
 80568fe:	681b      	ldr	r3, [r3, #0]
 8056900:	3301      	adds	r3, #1
 8056902:	4a03      	ldr	r2, [pc, #12]	@ (8056910 <vTaskSuspendAll+0x18>)
 8056904:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8056906:	bf00      	nop
 8056908:	46bd      	mov	sp, r7
 805690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805690e:	4770      	bx	lr
 8056910:	2402d8fc 	.word	0x2402d8fc

08056914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8056914:	b580      	push	{r7, lr}
 8056916:	b088      	sub	sp, #32
 8056918:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 805691a:	2300      	movs	r3, #0
 805691c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 805691e:	2300      	movs	r3, #0
 8056920:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8056922:	f002 f807 	bl	8058934 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8056926:	2300      	movs	r3, #0
 8056928:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 805692a:	4b76      	ldr	r3, [pc, #472]	@ (8056b04 <xTaskResumeAll+0x1f0>)
 805692c:	681b      	ldr	r3, [r3, #0]
 805692e:	2b00      	cmp	r3, #0
 8056930:	d10d      	bne.n	805694e <xTaskResumeAll+0x3a>
    __asm volatile
 8056932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056936:	b672      	cpsid	i
 8056938:	f383 8811 	msr	BASEPRI, r3
 805693c:	f3bf 8f6f 	isb	sy
 8056940:	f3bf 8f4f 	dsb	sy
 8056944:	b662      	cpsie	i
 8056946:	603b      	str	r3, [r7, #0]
}
 8056948:	bf00      	nop
 805694a:	bf00      	nop
 805694c:	e7fd      	b.n	805694a <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 805694e:	4b6d      	ldr	r3, [pc, #436]	@ (8056b04 <xTaskResumeAll+0x1f0>)
 8056950:	681b      	ldr	r3, [r3, #0]
 8056952:	3b01      	subs	r3, #1
 8056954:	4a6b      	ldr	r2, [pc, #428]	@ (8056b04 <xTaskResumeAll+0x1f0>)
 8056956:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056958:	4b6a      	ldr	r3, [pc, #424]	@ (8056b04 <xTaskResumeAll+0x1f0>)
 805695a:	681b      	ldr	r3, [r3, #0]
 805695c:	2b00      	cmp	r3, #0
 805695e:	f040 80ca 	bne.w	8056af6 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8056962:	4b69      	ldr	r3, [pc, #420]	@ (8056b08 <xTaskResumeAll+0x1f4>)
 8056964:	681b      	ldr	r3, [r3, #0]
 8056966:	2b00      	cmp	r3, #0
 8056968:	f000 80c5 	beq.w	8056af6 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 805696c:	e08e      	b.n	8056a8c <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 805696e:	4b67      	ldr	r3, [pc, #412]	@ (8056b0c <xTaskResumeAll+0x1f8>)
 8056970:	68db      	ldr	r3, [r3, #12]
 8056972:	68db      	ldr	r3, [r3, #12]
 8056974:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8056976:	69fb      	ldr	r3, [r7, #28]
 8056978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 805697a:	60fb      	str	r3, [r7, #12]
 805697c:	69fb      	ldr	r3, [r7, #28]
 805697e:	69db      	ldr	r3, [r3, #28]
 8056980:	69fa      	ldr	r2, [r7, #28]
 8056982:	6a12      	ldr	r2, [r2, #32]
 8056984:	609a      	str	r2, [r3, #8]
 8056986:	69fb      	ldr	r3, [r7, #28]
 8056988:	6a1b      	ldr	r3, [r3, #32]
 805698a:	69fa      	ldr	r2, [r7, #28]
 805698c:	69d2      	ldr	r2, [r2, #28]
 805698e:	605a      	str	r2, [r3, #4]
 8056990:	68fb      	ldr	r3, [r7, #12]
 8056992:	685a      	ldr	r2, [r3, #4]
 8056994:	69fb      	ldr	r3, [r7, #28]
 8056996:	3318      	adds	r3, #24
 8056998:	429a      	cmp	r2, r3
 805699a:	d103      	bne.n	80569a4 <xTaskResumeAll+0x90>
 805699c:	69fb      	ldr	r3, [r7, #28]
 805699e:	6a1a      	ldr	r2, [r3, #32]
 80569a0:	68fb      	ldr	r3, [r7, #12]
 80569a2:	605a      	str	r2, [r3, #4]
 80569a4:	69fb      	ldr	r3, [r7, #28]
 80569a6:	2200      	movs	r2, #0
 80569a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80569aa:	68fb      	ldr	r3, [r7, #12]
 80569ac:	681b      	ldr	r3, [r3, #0]
 80569ae:	1e5a      	subs	r2, r3, #1
 80569b0:	68fb      	ldr	r3, [r7, #12]
 80569b2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80569b4:	69fb      	ldr	r3, [r7, #28]
 80569b6:	695b      	ldr	r3, [r3, #20]
 80569b8:	60bb      	str	r3, [r7, #8]
 80569ba:	69fb      	ldr	r3, [r7, #28]
 80569bc:	689b      	ldr	r3, [r3, #8]
 80569be:	69fa      	ldr	r2, [r7, #28]
 80569c0:	68d2      	ldr	r2, [r2, #12]
 80569c2:	609a      	str	r2, [r3, #8]
 80569c4:	69fb      	ldr	r3, [r7, #28]
 80569c6:	68db      	ldr	r3, [r3, #12]
 80569c8:	69fa      	ldr	r2, [r7, #28]
 80569ca:	6892      	ldr	r2, [r2, #8]
 80569cc:	605a      	str	r2, [r3, #4]
 80569ce:	68bb      	ldr	r3, [r7, #8]
 80569d0:	685a      	ldr	r2, [r3, #4]
 80569d2:	69fb      	ldr	r3, [r7, #28]
 80569d4:	3304      	adds	r3, #4
 80569d6:	429a      	cmp	r2, r3
 80569d8:	d103      	bne.n	80569e2 <xTaskResumeAll+0xce>
 80569da:	69fb      	ldr	r3, [r7, #28]
 80569dc:	68da      	ldr	r2, [r3, #12]
 80569de:	68bb      	ldr	r3, [r7, #8]
 80569e0:	605a      	str	r2, [r3, #4]
 80569e2:	69fb      	ldr	r3, [r7, #28]
 80569e4:	2200      	movs	r2, #0
 80569e6:	615a      	str	r2, [r3, #20]
 80569e8:	68bb      	ldr	r3, [r7, #8]
 80569ea:	681b      	ldr	r3, [r3, #0]
 80569ec:	1e5a      	subs	r2, r3, #1
 80569ee:	68bb      	ldr	r3, [r7, #8]
 80569f0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80569f2:	69fb      	ldr	r3, [r7, #28]
 80569f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80569f6:	2201      	movs	r2, #1
 80569f8:	409a      	lsls	r2, r3
 80569fa:	4b45      	ldr	r3, [pc, #276]	@ (8056b10 <xTaskResumeAll+0x1fc>)
 80569fc:	681b      	ldr	r3, [r3, #0]
 80569fe:	4313      	orrs	r3, r2
 8056a00:	4a43      	ldr	r2, [pc, #268]	@ (8056b10 <xTaskResumeAll+0x1fc>)
 8056a02:	6013      	str	r3, [r2, #0]
 8056a04:	69fb      	ldr	r3, [r7, #28]
 8056a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056a08:	4942      	ldr	r1, [pc, #264]	@ (8056b14 <xTaskResumeAll+0x200>)
 8056a0a:	4613      	mov	r3, r2
 8056a0c:	009b      	lsls	r3, r3, #2
 8056a0e:	4413      	add	r3, r2
 8056a10:	009b      	lsls	r3, r3, #2
 8056a12:	440b      	add	r3, r1
 8056a14:	3304      	adds	r3, #4
 8056a16:	681b      	ldr	r3, [r3, #0]
 8056a18:	607b      	str	r3, [r7, #4]
 8056a1a:	69fb      	ldr	r3, [r7, #28]
 8056a1c:	687a      	ldr	r2, [r7, #4]
 8056a1e:	609a      	str	r2, [r3, #8]
 8056a20:	687b      	ldr	r3, [r7, #4]
 8056a22:	689a      	ldr	r2, [r3, #8]
 8056a24:	69fb      	ldr	r3, [r7, #28]
 8056a26:	60da      	str	r2, [r3, #12]
 8056a28:	687b      	ldr	r3, [r7, #4]
 8056a2a:	689b      	ldr	r3, [r3, #8]
 8056a2c:	69fa      	ldr	r2, [r7, #28]
 8056a2e:	3204      	adds	r2, #4
 8056a30:	605a      	str	r2, [r3, #4]
 8056a32:	69fb      	ldr	r3, [r7, #28]
 8056a34:	1d1a      	adds	r2, r3, #4
 8056a36:	687b      	ldr	r3, [r7, #4]
 8056a38:	609a      	str	r2, [r3, #8]
 8056a3a:	69fb      	ldr	r3, [r7, #28]
 8056a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056a3e:	4613      	mov	r3, r2
 8056a40:	009b      	lsls	r3, r3, #2
 8056a42:	4413      	add	r3, r2
 8056a44:	009b      	lsls	r3, r3, #2
 8056a46:	4a33      	ldr	r2, [pc, #204]	@ (8056b14 <xTaskResumeAll+0x200>)
 8056a48:	441a      	add	r2, r3
 8056a4a:	69fb      	ldr	r3, [r7, #28]
 8056a4c:	615a      	str	r2, [r3, #20]
 8056a4e:	69fb      	ldr	r3, [r7, #28]
 8056a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056a52:	4930      	ldr	r1, [pc, #192]	@ (8056b14 <xTaskResumeAll+0x200>)
 8056a54:	4613      	mov	r3, r2
 8056a56:	009b      	lsls	r3, r3, #2
 8056a58:	4413      	add	r3, r2
 8056a5a:	009b      	lsls	r3, r3, #2
 8056a5c:	440b      	add	r3, r1
 8056a5e:	681b      	ldr	r3, [r3, #0]
 8056a60:	69fa      	ldr	r2, [r7, #28]
 8056a62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8056a64:	1c59      	adds	r1, r3, #1
 8056a66:	482b      	ldr	r0, [pc, #172]	@ (8056b14 <xTaskResumeAll+0x200>)
 8056a68:	4613      	mov	r3, r2
 8056a6a:	009b      	lsls	r3, r3, #2
 8056a6c:	4413      	add	r3, r2
 8056a6e:	009b      	lsls	r3, r3, #2
 8056a70:	4403      	add	r3, r0
 8056a72:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056a74:	69fb      	ldr	r3, [r7, #28]
 8056a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056a78:	4b27      	ldr	r3, [pc, #156]	@ (8056b18 <xTaskResumeAll+0x204>)
 8056a7a:	681b      	ldr	r3, [r3, #0]
 8056a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056a7e:	429a      	cmp	r2, r3
 8056a80:	d904      	bls.n	8056a8c <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8056a82:	4a26      	ldr	r2, [pc, #152]	@ (8056b1c <xTaskResumeAll+0x208>)
 8056a84:	693b      	ldr	r3, [r7, #16]
 8056a86:	2101      	movs	r1, #1
 8056a88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8056a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8056b0c <xTaskResumeAll+0x1f8>)
 8056a8e:	681b      	ldr	r3, [r3, #0]
 8056a90:	2b00      	cmp	r3, #0
 8056a92:	f47f af6c 	bne.w	805696e <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8056a96:	69fb      	ldr	r3, [r7, #28]
 8056a98:	2b00      	cmp	r3, #0
 8056a9a:	d001      	beq.n	8056aa0 <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8056a9c:	f000 fdb4 	bl	8057608 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8056aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8056b20 <xTaskResumeAll+0x20c>)
 8056aa2:	681b      	ldr	r3, [r3, #0]
 8056aa4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8056aa6:	697b      	ldr	r3, [r7, #20]
 8056aa8:	2b00      	cmp	r3, #0
 8056aaa:	d012      	beq.n	8056ad2 <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8056aac:	f000 f8d2 	bl	8056c54 <xTaskIncrementTick>
 8056ab0:	4603      	mov	r3, r0
 8056ab2:	2b00      	cmp	r3, #0
 8056ab4:	d004      	beq.n	8056ac0 <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8056ab6:	4a19      	ldr	r2, [pc, #100]	@ (8056b1c <xTaskResumeAll+0x208>)
 8056ab8:	693b      	ldr	r3, [r7, #16]
 8056aba:	2101      	movs	r1, #1
 8056abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8056ac0:	697b      	ldr	r3, [r7, #20]
 8056ac2:	3b01      	subs	r3, #1
 8056ac4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8056ac6:	697b      	ldr	r3, [r7, #20]
 8056ac8:	2b00      	cmp	r3, #0
 8056aca:	d1ef      	bne.n	8056aac <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8056acc:	4b14      	ldr	r3, [pc, #80]	@ (8056b20 <xTaskResumeAll+0x20c>)
 8056ace:	2200      	movs	r2, #0
 8056ad0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8056ad2:	4a12      	ldr	r2, [pc, #72]	@ (8056b1c <xTaskResumeAll+0x208>)
 8056ad4:	693b      	ldr	r3, [r7, #16]
 8056ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8056ada:	2b00      	cmp	r3, #0
 8056adc:	d00b      	beq.n	8056af6 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8056ade:	2301      	movs	r3, #1
 8056ae0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8056ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8056b18 <xTaskResumeAll+0x204>)
 8056ae4:	681b      	ldr	r3, [r3, #0]
 8056ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8056b24 <xTaskResumeAll+0x210>)
 8056ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8056aec:	601a      	str	r2, [r3, #0]
 8056aee:	f3bf 8f4f 	dsb	sy
 8056af2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8056af6:	f001 ff53 	bl	80589a0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8056afa:	69bb      	ldr	r3, [r7, #24]
}
 8056afc:	4618      	mov	r0, r3
 8056afe:	3720      	adds	r7, #32
 8056b00:	46bd      	mov	sp, r7
 8056b02:	bd80      	pop	{r7, pc}
 8056b04:	2402d8fc 	.word	0x2402d8fc
 8056b08:	2402d8d4 	.word	0x2402d8d4
 8056b0c:	2402d8a8 	.word	0x2402d8a8
 8056b10:	2402d8dc 	.word	0x2402d8dc
 8056b14:	2402d7ec 	.word	0x2402d7ec
 8056b18:	2402d7e8 	.word	0x2402d7e8
 8056b1c:	2402d8e8 	.word	0x2402d8e8
 8056b20:	2402d8e4 	.word	0x2402d8e4
 8056b24:	e000ed04 	.word	0xe000ed04

08056b28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8056b28:	b480      	push	{r7}
 8056b2a:	b083      	sub	sp, #12
 8056b2c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8056b2e:	4b05      	ldr	r3, [pc, #20]	@ (8056b44 <xTaskGetTickCount+0x1c>)
 8056b30:	681b      	ldr	r3, [r3, #0]
 8056b32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8056b34:	687b      	ldr	r3, [r7, #4]
}
 8056b36:	4618      	mov	r0, r3
 8056b38:	370c      	adds	r7, #12
 8056b3a:	46bd      	mov	sp, r7
 8056b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056b40:	4770      	bx	lr
 8056b42:	bf00      	nop
 8056b44:	2402d8d8 	.word	0x2402d8d8

08056b48 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8056b48:	b480      	push	{r7}
 8056b4a:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8056b4c:	4b03      	ldr	r3, [pc, #12]	@ (8056b5c <uxTaskGetNumberOfTasks+0x14>)
 8056b4e:	681b      	ldr	r3, [r3, #0]
}
 8056b50:	4618      	mov	r0, r3
 8056b52:	46bd      	mov	sp, r7
 8056b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056b58:	4770      	bx	lr
 8056b5a:	bf00      	nop
 8056b5c:	2402d8d4 	.word	0x2402d8d4

08056b60 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 8056b60:	b580      	push	{r7, lr}
 8056b62:	b086      	sub	sp, #24
 8056b64:	af00      	add	r7, sp, #0
 8056b66:	60f8      	str	r0, [r7, #12]
 8056b68:	60b9      	str	r1, [r7, #8]
 8056b6a:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8056b6c:	2300      	movs	r3, #0
 8056b6e:	617b      	str	r3, [r7, #20]
 8056b70:	2307      	movs	r3, #7
 8056b72:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 8056b74:	f7ff fec0 	bl	80568f8 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 8056b78:	4b31      	ldr	r3, [pc, #196]	@ (8056c40 <uxTaskGetSystemState+0xe0>)
 8056b7a:	681b      	ldr	r3, [r3, #0]
 8056b7c:	68ba      	ldr	r2, [r7, #8]
 8056b7e:	429a      	cmp	r2, r3
 8056b80:	d357      	bcc.n	8056c32 <uxTaskGetSystemState+0xd2>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 8056b82:	693b      	ldr	r3, [r7, #16]
 8056b84:	3b01      	subs	r3, #1
 8056b86:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8056b88:	697a      	ldr	r2, [r7, #20]
 8056b8a:	4613      	mov	r3, r2
 8056b8c:	00db      	lsls	r3, r3, #3
 8056b8e:	4413      	add	r3, r2
 8056b90:	009b      	lsls	r3, r3, #2
 8056b92:	461a      	mov	r2, r3
 8056b94:	68fb      	ldr	r3, [r7, #12]
 8056b96:	1898      	adds	r0, r3, r2
 8056b98:	693a      	ldr	r2, [r7, #16]
 8056b9a:	4613      	mov	r3, r2
 8056b9c:	009b      	lsls	r3, r3, #2
 8056b9e:	4413      	add	r3, r2
 8056ba0:	009b      	lsls	r3, r3, #2
 8056ba2:	4a28      	ldr	r2, [pc, #160]	@ (8056c44 <uxTaskGetSystemState+0xe4>)
 8056ba4:	4413      	add	r3, r2
 8056ba6:	2201      	movs	r2, #1
 8056ba8:	4619      	mov	r1, r3
 8056baa:	f000 fcab 	bl	8057504 <prvListTasksWithinSingleList>
 8056bae:	4602      	mov	r2, r0
 8056bb0:	697b      	ldr	r3, [r7, #20]
 8056bb2:	4413      	add	r3, r2
 8056bb4:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 8056bb6:	693b      	ldr	r3, [r7, #16]
 8056bb8:	2b00      	cmp	r3, #0
 8056bba:	d1e2      	bne.n	8056b82 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8056bbc:	697a      	ldr	r2, [r7, #20]
 8056bbe:	4613      	mov	r3, r2
 8056bc0:	00db      	lsls	r3, r3, #3
 8056bc2:	4413      	add	r3, r2
 8056bc4:	009b      	lsls	r3, r3, #2
 8056bc6:	461a      	mov	r2, r3
 8056bc8:	68fb      	ldr	r3, [r7, #12]
 8056bca:	4413      	add	r3, r2
 8056bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8056c48 <uxTaskGetSystemState+0xe8>)
 8056bce:	6811      	ldr	r1, [r2, #0]
 8056bd0:	2202      	movs	r2, #2
 8056bd2:	4618      	mov	r0, r3
 8056bd4:	f000 fc96 	bl	8057504 <prvListTasksWithinSingleList>
 8056bd8:	4602      	mov	r2, r0
 8056bda:	697b      	ldr	r3, [r7, #20]
 8056bdc:	4413      	add	r3, r2
 8056bde:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8056be0:	697a      	ldr	r2, [r7, #20]
 8056be2:	4613      	mov	r3, r2
 8056be4:	00db      	lsls	r3, r3, #3
 8056be6:	4413      	add	r3, r2
 8056be8:	009b      	lsls	r3, r3, #2
 8056bea:	461a      	mov	r2, r3
 8056bec:	68fb      	ldr	r3, [r7, #12]
 8056bee:	4413      	add	r3, r2
 8056bf0:	4a16      	ldr	r2, [pc, #88]	@ (8056c4c <uxTaskGetSystemState+0xec>)
 8056bf2:	6811      	ldr	r1, [r2, #0]
 8056bf4:	2202      	movs	r2, #2
 8056bf6:	4618      	mov	r0, r3
 8056bf8:	f000 fc84 	bl	8057504 <prvListTasksWithinSingleList>
 8056bfc:	4602      	mov	r2, r0
 8056bfe:	697b      	ldr	r3, [r7, #20]
 8056c00:	4413      	add	r3, r2
 8056c02:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8056c04:	697a      	ldr	r2, [r7, #20]
 8056c06:	4613      	mov	r3, r2
 8056c08:	00db      	lsls	r3, r3, #3
 8056c0a:	4413      	add	r3, r2
 8056c0c:	009b      	lsls	r3, r3, #2
 8056c0e:	461a      	mov	r2, r3
 8056c10:	68fb      	ldr	r3, [r7, #12]
 8056c12:	4413      	add	r3, r2
 8056c14:	2204      	movs	r2, #4
 8056c16:	490e      	ldr	r1, [pc, #56]	@ (8056c50 <uxTaskGetSystemState+0xf0>)
 8056c18:	4618      	mov	r0, r3
 8056c1a:	f000 fc73 	bl	8057504 <prvListTasksWithinSingleList>
 8056c1e:	4602      	mov	r2, r0
 8056c20:	697b      	ldr	r3, [r7, #20]
 8056c22:	4413      	add	r3, r2
 8056c24:	617b      	str	r3, [r7, #20]
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
 8056c26:	687b      	ldr	r3, [r7, #4]
 8056c28:	2b00      	cmp	r3, #0
 8056c2a:	d002      	beq.n	8056c32 <uxTaskGetSystemState+0xd2>
                    {
                        *pulTotalRunTime = 0;
 8056c2c:	687b      	ldr	r3, [r7, #4]
 8056c2e:	2200      	movs	r2, #0
 8056c30:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8056c32:	f7ff fe6f 	bl	8056914 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 8056c36:	697b      	ldr	r3, [r7, #20]
    }
 8056c38:	4618      	mov	r0, r3
 8056c3a:	3718      	adds	r7, #24
 8056c3c:	46bd      	mov	sp, r7
 8056c3e:	bd80      	pop	{r7, pc}
 8056c40:	2402d8d4 	.word	0x2402d8d4
 8056c44:	2402d7ec 	.word	0x2402d7ec
 8056c48:	2402d8a0 	.word	0x2402d8a0
 8056c4c:	2402d8a4 	.word	0x2402d8a4
 8056c50:	2402d8bc 	.word	0x2402d8bc

08056c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8056c54:	b580      	push	{r7, lr}
 8056c56:	b08a      	sub	sp, #40	@ 0x28
 8056c58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8056c5a:	2300      	movs	r3, #0
 8056c5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056c5e:	4b80      	ldr	r3, [pc, #512]	@ (8056e60 <xTaskIncrementTick+0x20c>)
 8056c60:	681b      	ldr	r3, [r3, #0]
 8056c62:	2b00      	cmp	r3, #0
 8056c64:	f040 80f1 	bne.w	8056e4a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8056c68:	4b7e      	ldr	r3, [pc, #504]	@ (8056e64 <xTaskIncrementTick+0x210>)
 8056c6a:	681b      	ldr	r3, [r3, #0]
 8056c6c:	3301      	adds	r3, #1
 8056c6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8056c70:	4a7c      	ldr	r2, [pc, #496]	@ (8056e64 <xTaskIncrementTick+0x210>)
 8056c72:	6a3b      	ldr	r3, [r7, #32]
 8056c74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8056c76:	6a3b      	ldr	r3, [r7, #32]
 8056c78:	2b00      	cmp	r3, #0
 8056c7a:	d123      	bne.n	8056cc4 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8056c7c:	4b7a      	ldr	r3, [pc, #488]	@ (8056e68 <xTaskIncrementTick+0x214>)
 8056c7e:	681b      	ldr	r3, [r3, #0]
 8056c80:	681b      	ldr	r3, [r3, #0]
 8056c82:	2b00      	cmp	r3, #0
 8056c84:	d00d      	beq.n	8056ca2 <xTaskIncrementTick+0x4e>
    __asm volatile
 8056c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056c8a:	b672      	cpsid	i
 8056c8c:	f383 8811 	msr	BASEPRI, r3
 8056c90:	f3bf 8f6f 	isb	sy
 8056c94:	f3bf 8f4f 	dsb	sy
 8056c98:	b662      	cpsie	i
 8056c9a:	607b      	str	r3, [r7, #4]
}
 8056c9c:	bf00      	nop
 8056c9e:	bf00      	nop
 8056ca0:	e7fd      	b.n	8056c9e <xTaskIncrementTick+0x4a>
 8056ca2:	4b71      	ldr	r3, [pc, #452]	@ (8056e68 <xTaskIncrementTick+0x214>)
 8056ca4:	681b      	ldr	r3, [r3, #0]
 8056ca6:	61fb      	str	r3, [r7, #28]
 8056ca8:	4b70      	ldr	r3, [pc, #448]	@ (8056e6c <xTaskIncrementTick+0x218>)
 8056caa:	681b      	ldr	r3, [r3, #0]
 8056cac:	4a6e      	ldr	r2, [pc, #440]	@ (8056e68 <xTaskIncrementTick+0x214>)
 8056cae:	6013      	str	r3, [r2, #0]
 8056cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8056e6c <xTaskIncrementTick+0x218>)
 8056cb2:	69fb      	ldr	r3, [r7, #28]
 8056cb4:	6013      	str	r3, [r2, #0]
 8056cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8056e70 <xTaskIncrementTick+0x21c>)
 8056cb8:	681b      	ldr	r3, [r3, #0]
 8056cba:	3301      	adds	r3, #1
 8056cbc:	4a6c      	ldr	r2, [pc, #432]	@ (8056e70 <xTaskIncrementTick+0x21c>)
 8056cbe:	6013      	str	r3, [r2, #0]
 8056cc0:	f000 fca2 	bl	8057608 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8056cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8056e74 <xTaskIncrementTick+0x220>)
 8056cc6:	681b      	ldr	r3, [r3, #0]
 8056cc8:	6a3a      	ldr	r2, [r7, #32]
 8056cca:	429a      	cmp	r2, r3
 8056ccc:	f0c0 80a8 	bcc.w	8056e20 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8056cd0:	4b65      	ldr	r3, [pc, #404]	@ (8056e68 <xTaskIncrementTick+0x214>)
 8056cd2:	681b      	ldr	r3, [r3, #0]
 8056cd4:	681b      	ldr	r3, [r3, #0]
 8056cd6:	2b00      	cmp	r3, #0
 8056cd8:	d104      	bne.n	8056ce4 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8056cda:	4b66      	ldr	r3, [pc, #408]	@ (8056e74 <xTaskIncrementTick+0x220>)
 8056cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8056ce0:	601a      	str	r2, [r3, #0]
                    break;
 8056ce2:	e09d      	b.n	8056e20 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8056ce4:	4b60      	ldr	r3, [pc, #384]	@ (8056e68 <xTaskIncrementTick+0x214>)
 8056ce6:	681b      	ldr	r3, [r3, #0]
 8056ce8:	68db      	ldr	r3, [r3, #12]
 8056cea:	68db      	ldr	r3, [r3, #12]
 8056cec:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8056cee:	69bb      	ldr	r3, [r7, #24]
 8056cf0:	685b      	ldr	r3, [r3, #4]
 8056cf2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8056cf4:	6a3a      	ldr	r2, [r7, #32]
 8056cf6:	697b      	ldr	r3, [r7, #20]
 8056cf8:	429a      	cmp	r2, r3
 8056cfa:	d203      	bcs.n	8056d04 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8056cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8056e74 <xTaskIncrementTick+0x220>)
 8056cfe:	697b      	ldr	r3, [r7, #20]
 8056d00:	6013      	str	r3, [r2, #0]
                        break;
 8056d02:	e08d      	b.n	8056e20 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8056d04:	69bb      	ldr	r3, [r7, #24]
 8056d06:	695b      	ldr	r3, [r3, #20]
 8056d08:	613b      	str	r3, [r7, #16]
 8056d0a:	69bb      	ldr	r3, [r7, #24]
 8056d0c:	689b      	ldr	r3, [r3, #8]
 8056d0e:	69ba      	ldr	r2, [r7, #24]
 8056d10:	68d2      	ldr	r2, [r2, #12]
 8056d12:	609a      	str	r2, [r3, #8]
 8056d14:	69bb      	ldr	r3, [r7, #24]
 8056d16:	68db      	ldr	r3, [r3, #12]
 8056d18:	69ba      	ldr	r2, [r7, #24]
 8056d1a:	6892      	ldr	r2, [r2, #8]
 8056d1c:	605a      	str	r2, [r3, #4]
 8056d1e:	693b      	ldr	r3, [r7, #16]
 8056d20:	685a      	ldr	r2, [r3, #4]
 8056d22:	69bb      	ldr	r3, [r7, #24]
 8056d24:	3304      	adds	r3, #4
 8056d26:	429a      	cmp	r2, r3
 8056d28:	d103      	bne.n	8056d32 <xTaskIncrementTick+0xde>
 8056d2a:	69bb      	ldr	r3, [r7, #24]
 8056d2c:	68da      	ldr	r2, [r3, #12]
 8056d2e:	693b      	ldr	r3, [r7, #16]
 8056d30:	605a      	str	r2, [r3, #4]
 8056d32:	69bb      	ldr	r3, [r7, #24]
 8056d34:	2200      	movs	r2, #0
 8056d36:	615a      	str	r2, [r3, #20]
 8056d38:	693b      	ldr	r3, [r7, #16]
 8056d3a:	681b      	ldr	r3, [r3, #0]
 8056d3c:	1e5a      	subs	r2, r3, #1
 8056d3e:	693b      	ldr	r3, [r7, #16]
 8056d40:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8056d42:	69bb      	ldr	r3, [r7, #24]
 8056d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8056d46:	2b00      	cmp	r3, #0
 8056d48:	d01e      	beq.n	8056d88 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8056d4a:	69bb      	ldr	r3, [r7, #24]
 8056d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8056d4e:	60fb      	str	r3, [r7, #12]
 8056d50:	69bb      	ldr	r3, [r7, #24]
 8056d52:	69db      	ldr	r3, [r3, #28]
 8056d54:	69ba      	ldr	r2, [r7, #24]
 8056d56:	6a12      	ldr	r2, [r2, #32]
 8056d58:	609a      	str	r2, [r3, #8]
 8056d5a:	69bb      	ldr	r3, [r7, #24]
 8056d5c:	6a1b      	ldr	r3, [r3, #32]
 8056d5e:	69ba      	ldr	r2, [r7, #24]
 8056d60:	69d2      	ldr	r2, [r2, #28]
 8056d62:	605a      	str	r2, [r3, #4]
 8056d64:	68fb      	ldr	r3, [r7, #12]
 8056d66:	685a      	ldr	r2, [r3, #4]
 8056d68:	69bb      	ldr	r3, [r7, #24]
 8056d6a:	3318      	adds	r3, #24
 8056d6c:	429a      	cmp	r2, r3
 8056d6e:	d103      	bne.n	8056d78 <xTaskIncrementTick+0x124>
 8056d70:	69bb      	ldr	r3, [r7, #24]
 8056d72:	6a1a      	ldr	r2, [r3, #32]
 8056d74:	68fb      	ldr	r3, [r7, #12]
 8056d76:	605a      	str	r2, [r3, #4]
 8056d78:	69bb      	ldr	r3, [r7, #24]
 8056d7a:	2200      	movs	r2, #0
 8056d7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8056d7e:	68fb      	ldr	r3, [r7, #12]
 8056d80:	681b      	ldr	r3, [r3, #0]
 8056d82:	1e5a      	subs	r2, r3, #1
 8056d84:	68fb      	ldr	r3, [r7, #12]
 8056d86:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8056d88:	69bb      	ldr	r3, [r7, #24]
 8056d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056d8c:	2201      	movs	r2, #1
 8056d8e:	409a      	lsls	r2, r3
 8056d90:	4b39      	ldr	r3, [pc, #228]	@ (8056e78 <xTaskIncrementTick+0x224>)
 8056d92:	681b      	ldr	r3, [r3, #0]
 8056d94:	4313      	orrs	r3, r2
 8056d96:	4a38      	ldr	r2, [pc, #224]	@ (8056e78 <xTaskIncrementTick+0x224>)
 8056d98:	6013      	str	r3, [r2, #0]
 8056d9a:	69bb      	ldr	r3, [r7, #24]
 8056d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056d9e:	4937      	ldr	r1, [pc, #220]	@ (8056e7c <xTaskIncrementTick+0x228>)
 8056da0:	4613      	mov	r3, r2
 8056da2:	009b      	lsls	r3, r3, #2
 8056da4:	4413      	add	r3, r2
 8056da6:	009b      	lsls	r3, r3, #2
 8056da8:	440b      	add	r3, r1
 8056daa:	3304      	adds	r3, #4
 8056dac:	681b      	ldr	r3, [r3, #0]
 8056dae:	60bb      	str	r3, [r7, #8]
 8056db0:	69bb      	ldr	r3, [r7, #24]
 8056db2:	68ba      	ldr	r2, [r7, #8]
 8056db4:	609a      	str	r2, [r3, #8]
 8056db6:	68bb      	ldr	r3, [r7, #8]
 8056db8:	689a      	ldr	r2, [r3, #8]
 8056dba:	69bb      	ldr	r3, [r7, #24]
 8056dbc:	60da      	str	r2, [r3, #12]
 8056dbe:	68bb      	ldr	r3, [r7, #8]
 8056dc0:	689b      	ldr	r3, [r3, #8]
 8056dc2:	69ba      	ldr	r2, [r7, #24]
 8056dc4:	3204      	adds	r2, #4
 8056dc6:	605a      	str	r2, [r3, #4]
 8056dc8:	69bb      	ldr	r3, [r7, #24]
 8056dca:	1d1a      	adds	r2, r3, #4
 8056dcc:	68bb      	ldr	r3, [r7, #8]
 8056dce:	609a      	str	r2, [r3, #8]
 8056dd0:	69bb      	ldr	r3, [r7, #24]
 8056dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056dd4:	4613      	mov	r3, r2
 8056dd6:	009b      	lsls	r3, r3, #2
 8056dd8:	4413      	add	r3, r2
 8056dda:	009b      	lsls	r3, r3, #2
 8056ddc:	4a27      	ldr	r2, [pc, #156]	@ (8056e7c <xTaskIncrementTick+0x228>)
 8056dde:	441a      	add	r2, r3
 8056de0:	69bb      	ldr	r3, [r7, #24]
 8056de2:	615a      	str	r2, [r3, #20]
 8056de4:	69bb      	ldr	r3, [r7, #24]
 8056de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056de8:	4924      	ldr	r1, [pc, #144]	@ (8056e7c <xTaskIncrementTick+0x228>)
 8056dea:	4613      	mov	r3, r2
 8056dec:	009b      	lsls	r3, r3, #2
 8056dee:	4413      	add	r3, r2
 8056df0:	009b      	lsls	r3, r3, #2
 8056df2:	440b      	add	r3, r1
 8056df4:	681b      	ldr	r3, [r3, #0]
 8056df6:	69ba      	ldr	r2, [r7, #24]
 8056df8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8056dfa:	1c59      	adds	r1, r3, #1
 8056dfc:	481f      	ldr	r0, [pc, #124]	@ (8056e7c <xTaskIncrementTick+0x228>)
 8056dfe:	4613      	mov	r3, r2
 8056e00:	009b      	lsls	r3, r3, #2
 8056e02:	4413      	add	r3, r2
 8056e04:	009b      	lsls	r3, r3, #2
 8056e06:	4403      	add	r3, r0
 8056e08:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056e0a:	69bb      	ldr	r3, [r7, #24]
 8056e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8056e80 <xTaskIncrementTick+0x22c>)
 8056e10:	681b      	ldr	r3, [r3, #0]
 8056e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8056e14:	429a      	cmp	r2, r3
 8056e16:	f67f af5b 	bls.w	8056cd0 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8056e1a:	2301      	movs	r3, #1
 8056e1c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8056e1e:	e757      	b.n	8056cd0 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8056e20:	4b17      	ldr	r3, [pc, #92]	@ (8056e80 <xTaskIncrementTick+0x22c>)
 8056e22:	681b      	ldr	r3, [r3, #0]
 8056e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8056e26:	4915      	ldr	r1, [pc, #84]	@ (8056e7c <xTaskIncrementTick+0x228>)
 8056e28:	4613      	mov	r3, r2
 8056e2a:	009b      	lsls	r3, r3, #2
 8056e2c:	4413      	add	r3, r2
 8056e2e:	009b      	lsls	r3, r3, #2
 8056e30:	440b      	add	r3, r1
 8056e32:	681b      	ldr	r3, [r3, #0]
 8056e34:	2b01      	cmp	r3, #1
 8056e36:	d901      	bls.n	8056e3c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8056e38:	2301      	movs	r3, #1
 8056e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8056e3c:	4b11      	ldr	r3, [pc, #68]	@ (8056e84 <xTaskIncrementTick+0x230>)
 8056e3e:	681b      	ldr	r3, [r3, #0]
 8056e40:	2b00      	cmp	r3, #0
 8056e42:	d007      	beq.n	8056e54 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8056e44:	2301      	movs	r3, #1
 8056e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8056e48:	e004      	b.n	8056e54 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8056e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8056e88 <xTaskIncrementTick+0x234>)
 8056e4c:	681b      	ldr	r3, [r3, #0]
 8056e4e:	3301      	adds	r3, #1
 8056e50:	4a0d      	ldr	r2, [pc, #52]	@ (8056e88 <xTaskIncrementTick+0x234>)
 8056e52:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8056e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8056e56:	4618      	mov	r0, r3
 8056e58:	3728      	adds	r7, #40	@ 0x28
 8056e5a:	46bd      	mov	sp, r7
 8056e5c:	bd80      	pop	{r7, pc}
 8056e5e:	bf00      	nop
 8056e60:	2402d8fc 	.word	0x2402d8fc
 8056e64:	2402d8d8 	.word	0x2402d8d8
 8056e68:	2402d8a0 	.word	0x2402d8a0
 8056e6c:	2402d8a4 	.word	0x2402d8a4
 8056e70:	2402d8ec 	.word	0x2402d8ec
 8056e74:	2402d8f4 	.word	0x2402d8f4
 8056e78:	2402d8dc 	.word	0x2402d8dc
 8056e7c:	2402d7ec 	.word	0x2402d7ec
 8056e80:	2402d7e8 	.word	0x2402d7e8
 8056e84:	2402d8e8 	.word	0x2402d8e8
 8056e88:	2402d8e4 	.word	0x2402d8e4

08056e8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8056e8c:	b580      	push	{r7, lr}
 8056e8e:	b088      	sub	sp, #32
 8056e90:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8056e92:	4b3c      	ldr	r3, [pc, #240]	@ (8056f84 <vTaskSwitchContext+0xf8>)
 8056e94:	681b      	ldr	r3, [r3, #0]
 8056e96:	2b00      	cmp	r3, #0
 8056e98:	d003      	beq.n	8056ea2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8056e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8056f88 <vTaskSwitchContext+0xfc>)
 8056e9c:	2201      	movs	r2, #1
 8056e9e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8056ea0:	e06b      	b.n	8056f7a <vTaskSwitchContext+0xee>
            xYieldPendings[ 0 ] = pdFALSE;
 8056ea2:	4b39      	ldr	r3, [pc, #228]	@ (8056f88 <vTaskSwitchContext+0xfc>)
 8056ea4:	2200      	movs	r2, #0
 8056ea6:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8056ea8:	4b38      	ldr	r3, [pc, #224]	@ (8056f8c <vTaskSwitchContext+0x100>)
 8056eaa:	681b      	ldr	r3, [r3, #0]
 8056eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8056eae:	61fb      	str	r3, [r7, #28]
 8056eb0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8056eb4:	61bb      	str	r3, [r7, #24]
 8056eb6:	69fb      	ldr	r3, [r7, #28]
 8056eb8:	681b      	ldr	r3, [r3, #0]
 8056eba:	69ba      	ldr	r2, [r7, #24]
 8056ebc:	429a      	cmp	r2, r3
 8056ebe:	d111      	bne.n	8056ee4 <vTaskSwitchContext+0x58>
 8056ec0:	69fb      	ldr	r3, [r7, #28]
 8056ec2:	3304      	adds	r3, #4
 8056ec4:	681b      	ldr	r3, [r3, #0]
 8056ec6:	69ba      	ldr	r2, [r7, #24]
 8056ec8:	429a      	cmp	r2, r3
 8056eca:	d10b      	bne.n	8056ee4 <vTaskSwitchContext+0x58>
 8056ecc:	69fb      	ldr	r3, [r7, #28]
 8056ece:	3308      	adds	r3, #8
 8056ed0:	681b      	ldr	r3, [r3, #0]
 8056ed2:	69ba      	ldr	r2, [r7, #24]
 8056ed4:	429a      	cmp	r2, r3
 8056ed6:	d105      	bne.n	8056ee4 <vTaskSwitchContext+0x58>
 8056ed8:	69fb      	ldr	r3, [r7, #28]
 8056eda:	330c      	adds	r3, #12
 8056edc:	681b      	ldr	r3, [r3, #0]
 8056ede:	69ba      	ldr	r2, [r7, #24]
 8056ee0:	429a      	cmp	r2, r3
 8056ee2:	d009      	beq.n	8056ef8 <vTaskSwitchContext+0x6c>
 8056ee4:	4b29      	ldr	r3, [pc, #164]	@ (8056f8c <vTaskSwitchContext+0x100>)
 8056ee6:	681b      	ldr	r3, [r3, #0]
 8056ee8:	3334      	adds	r3, #52	@ 0x34
 8056eea:	617b      	str	r3, [r7, #20]
 8056eec:	4b27      	ldr	r3, [pc, #156]	@ (8056f8c <vTaskSwitchContext+0x100>)
 8056eee:	681b      	ldr	r3, [r3, #0]
 8056ef0:	6979      	ldr	r1, [r7, #20]
 8056ef2:	4618      	mov	r0, r3
 8056ef4:	f7e9 fd54 	bl	80409a0 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8056ef8:	4b25      	ldr	r3, [pc, #148]	@ (8056f90 <vTaskSwitchContext+0x104>)
 8056efa:	681b      	ldr	r3, [r3, #0]
 8056efc:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8056efe:	68bb      	ldr	r3, [r7, #8]
 8056f00:	fab3 f383 	clz	r3, r3
 8056f04:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 8056f06:	79fb      	ldrb	r3, [r7, #7]
 8056f08:	f1c3 031f 	rsb	r3, r3, #31
 8056f0c:	613b      	str	r3, [r7, #16]
 8056f0e:	4921      	ldr	r1, [pc, #132]	@ (8056f94 <vTaskSwitchContext+0x108>)
 8056f10:	693a      	ldr	r2, [r7, #16]
 8056f12:	4613      	mov	r3, r2
 8056f14:	009b      	lsls	r3, r3, #2
 8056f16:	4413      	add	r3, r2
 8056f18:	009b      	lsls	r3, r3, #2
 8056f1a:	440b      	add	r3, r1
 8056f1c:	681b      	ldr	r3, [r3, #0]
 8056f1e:	2b00      	cmp	r3, #0
 8056f20:	d10d      	bne.n	8056f3e <vTaskSwitchContext+0xb2>
    __asm volatile
 8056f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056f26:	b672      	cpsid	i
 8056f28:	f383 8811 	msr	BASEPRI, r3
 8056f2c:	f3bf 8f6f 	isb	sy
 8056f30:	f3bf 8f4f 	dsb	sy
 8056f34:	b662      	cpsie	i
 8056f36:	603b      	str	r3, [r7, #0]
}
 8056f38:	bf00      	nop
 8056f3a:	bf00      	nop
 8056f3c:	e7fd      	b.n	8056f3a <vTaskSwitchContext+0xae>
 8056f3e:	693a      	ldr	r2, [r7, #16]
 8056f40:	4613      	mov	r3, r2
 8056f42:	009b      	lsls	r3, r3, #2
 8056f44:	4413      	add	r3, r2
 8056f46:	009b      	lsls	r3, r3, #2
 8056f48:	4a12      	ldr	r2, [pc, #72]	@ (8056f94 <vTaskSwitchContext+0x108>)
 8056f4a:	4413      	add	r3, r2
 8056f4c:	60fb      	str	r3, [r7, #12]
 8056f4e:	68fb      	ldr	r3, [r7, #12]
 8056f50:	685b      	ldr	r3, [r3, #4]
 8056f52:	685a      	ldr	r2, [r3, #4]
 8056f54:	68fb      	ldr	r3, [r7, #12]
 8056f56:	605a      	str	r2, [r3, #4]
 8056f58:	68fb      	ldr	r3, [r7, #12]
 8056f5a:	685a      	ldr	r2, [r3, #4]
 8056f5c:	68fb      	ldr	r3, [r7, #12]
 8056f5e:	3308      	adds	r3, #8
 8056f60:	429a      	cmp	r2, r3
 8056f62:	d103      	bne.n	8056f6c <vTaskSwitchContext+0xe0>
 8056f64:	68fb      	ldr	r3, [r7, #12]
 8056f66:	68da      	ldr	r2, [r3, #12]
 8056f68:	68fb      	ldr	r3, [r7, #12]
 8056f6a:	605a      	str	r2, [r3, #4]
 8056f6c:	68fb      	ldr	r3, [r7, #12]
 8056f6e:	685b      	ldr	r3, [r3, #4]
 8056f70:	68db      	ldr	r3, [r3, #12]
 8056f72:	4a06      	ldr	r2, [pc, #24]	@ (8056f8c <vTaskSwitchContext+0x100>)
 8056f74:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8056f76:	4b05      	ldr	r3, [pc, #20]	@ (8056f8c <vTaskSwitchContext+0x100>)
 8056f78:	681b      	ldr	r3, [r3, #0]
    }
 8056f7a:	bf00      	nop
 8056f7c:	3720      	adds	r7, #32
 8056f7e:	46bd      	mov	sp, r7
 8056f80:	bd80      	pop	{r7, pc}
 8056f82:	bf00      	nop
 8056f84:	2402d8fc 	.word	0x2402d8fc
 8056f88:	2402d8e8 	.word	0x2402d8e8
 8056f8c:	2402d7e8 	.word	0x2402d7e8
 8056f90:	2402d8dc 	.word	0x2402d8dc
 8056f94:	2402d7ec 	.word	0x2402d7ec

08056f98 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8056f98:	b580      	push	{r7, lr}
 8056f9a:	b084      	sub	sp, #16
 8056f9c:	af00      	add	r7, sp, #0
 8056f9e:	6078      	str	r0, [r7, #4]
 8056fa0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8056fa2:	687b      	ldr	r3, [r7, #4]
 8056fa4:	2b00      	cmp	r3, #0
 8056fa6:	d10d      	bne.n	8056fc4 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8056fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056fac:	b672      	cpsid	i
 8056fae:	f383 8811 	msr	BASEPRI, r3
 8056fb2:	f3bf 8f6f 	isb	sy
 8056fb6:	f3bf 8f4f 	dsb	sy
 8056fba:	b662      	cpsie	i
 8056fbc:	60fb      	str	r3, [r7, #12]
}
 8056fbe:	bf00      	nop
 8056fc0:	bf00      	nop
 8056fc2:	e7fd      	b.n	8056fc0 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056fc4:	4b07      	ldr	r3, [pc, #28]	@ (8056fe4 <vTaskPlaceOnEventList+0x4c>)
 8056fc6:	681b      	ldr	r3, [r3, #0]
 8056fc8:	3318      	adds	r3, #24
 8056fca:	4619      	mov	r1, r3
 8056fcc:	6878      	ldr	r0, [r7, #4]
 8056fce:	f7fd ff54 	bl	8054e7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8056fd2:	2101      	movs	r1, #1
 8056fd4:	6838      	ldr	r0, [r7, #0]
 8056fd6:	f000 ff59 	bl	8057e8c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8056fda:	bf00      	nop
 8056fdc:	3710      	adds	r7, #16
 8056fde:	46bd      	mov	sp, r7
 8056fe0:	bd80      	pop	{r7, pc}
 8056fe2:	bf00      	nop
 8056fe4:	2402d7e8 	.word	0x2402d7e8

08056fe8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8056fe8:	b580      	push	{r7, lr}
 8056fea:	b086      	sub	sp, #24
 8056fec:	af00      	add	r7, sp, #0
 8056fee:	60f8      	str	r0, [r7, #12]
 8056ff0:	60b9      	str	r1, [r7, #8]
 8056ff2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8056ff4:	68fb      	ldr	r3, [r7, #12]
 8056ff6:	2b00      	cmp	r3, #0
 8056ff8:	d10d      	bne.n	8057016 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8056ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8056ffe:	b672      	cpsid	i
 8057000:	f383 8811 	msr	BASEPRI, r3
 8057004:	f3bf 8f6f 	isb	sy
 8057008:	f3bf 8f4f 	dsb	sy
 805700c:	b662      	cpsie	i
 805700e:	613b      	str	r3, [r7, #16]
}
 8057010:	bf00      	nop
 8057012:	bf00      	nop
 8057014:	e7fd      	b.n	8057012 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8057016:	68fb      	ldr	r3, [r7, #12]
 8057018:	685b      	ldr	r3, [r3, #4]
 805701a:	617b      	str	r3, [r7, #20]
 805701c:	4b15      	ldr	r3, [pc, #84]	@ (8057074 <vTaskPlaceOnEventListRestricted+0x8c>)
 805701e:	681b      	ldr	r3, [r3, #0]
 8057020:	697a      	ldr	r2, [r7, #20]
 8057022:	61da      	str	r2, [r3, #28]
 8057024:	4b13      	ldr	r3, [pc, #76]	@ (8057074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8057026:	681b      	ldr	r3, [r3, #0]
 8057028:	697a      	ldr	r2, [r7, #20]
 805702a:	6892      	ldr	r2, [r2, #8]
 805702c:	621a      	str	r2, [r3, #32]
 805702e:	4b11      	ldr	r3, [pc, #68]	@ (8057074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8057030:	681a      	ldr	r2, [r3, #0]
 8057032:	697b      	ldr	r3, [r7, #20]
 8057034:	689b      	ldr	r3, [r3, #8]
 8057036:	3218      	adds	r2, #24
 8057038:	605a      	str	r2, [r3, #4]
 805703a:	4b0e      	ldr	r3, [pc, #56]	@ (8057074 <vTaskPlaceOnEventListRestricted+0x8c>)
 805703c:	681b      	ldr	r3, [r3, #0]
 805703e:	f103 0218 	add.w	r2, r3, #24
 8057042:	697b      	ldr	r3, [r7, #20]
 8057044:	609a      	str	r2, [r3, #8]
 8057046:	4b0b      	ldr	r3, [pc, #44]	@ (8057074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8057048:	681b      	ldr	r3, [r3, #0]
 805704a:	68fa      	ldr	r2, [r7, #12]
 805704c:	629a      	str	r2, [r3, #40]	@ 0x28
 805704e:	68fb      	ldr	r3, [r7, #12]
 8057050:	681b      	ldr	r3, [r3, #0]
 8057052:	1c5a      	adds	r2, r3, #1
 8057054:	68fb      	ldr	r3, [r7, #12]
 8057056:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8057058:	687b      	ldr	r3, [r7, #4]
 805705a:	2b00      	cmp	r3, #0
 805705c:	d002      	beq.n	8057064 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 805705e:	f04f 33ff 	mov.w	r3, #4294967295
 8057062:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8057064:	6879      	ldr	r1, [r7, #4]
 8057066:	68b8      	ldr	r0, [r7, #8]
 8057068:	f000 ff10 	bl	8057e8c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 805706c:	bf00      	nop
 805706e:	3718      	adds	r7, #24
 8057070:	46bd      	mov	sp, r7
 8057072:	bd80      	pop	{r7, pc}
 8057074:	2402d7e8 	.word	0x2402d7e8

08057078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8057078:	b480      	push	{r7}
 805707a:	b08b      	sub	sp, #44	@ 0x2c
 805707c:	af00      	add	r7, sp, #0
 805707e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8057080:	687b      	ldr	r3, [r7, #4]
 8057082:	68db      	ldr	r3, [r3, #12]
 8057084:	68db      	ldr	r3, [r3, #12]
 8057086:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8057088:	6a3b      	ldr	r3, [r7, #32]
 805708a:	2b00      	cmp	r3, #0
 805708c:	d10d      	bne.n	80570aa <xTaskRemoveFromEventList+0x32>
    __asm volatile
 805708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057092:	b672      	cpsid	i
 8057094:	f383 8811 	msr	BASEPRI, r3
 8057098:	f3bf 8f6f 	isb	sy
 805709c:	f3bf 8f4f 	dsb	sy
 80570a0:	b662      	cpsie	i
 80570a2:	60fb      	str	r3, [r7, #12]
}
 80570a4:	bf00      	nop
 80570a6:	bf00      	nop
 80570a8:	e7fd      	b.n	80570a6 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80570aa:	6a3b      	ldr	r3, [r7, #32]
 80570ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80570ae:	61fb      	str	r3, [r7, #28]
 80570b0:	6a3b      	ldr	r3, [r7, #32]
 80570b2:	69db      	ldr	r3, [r3, #28]
 80570b4:	6a3a      	ldr	r2, [r7, #32]
 80570b6:	6a12      	ldr	r2, [r2, #32]
 80570b8:	609a      	str	r2, [r3, #8]
 80570ba:	6a3b      	ldr	r3, [r7, #32]
 80570bc:	6a1b      	ldr	r3, [r3, #32]
 80570be:	6a3a      	ldr	r2, [r7, #32]
 80570c0:	69d2      	ldr	r2, [r2, #28]
 80570c2:	605a      	str	r2, [r3, #4]
 80570c4:	69fb      	ldr	r3, [r7, #28]
 80570c6:	685a      	ldr	r2, [r3, #4]
 80570c8:	6a3b      	ldr	r3, [r7, #32]
 80570ca:	3318      	adds	r3, #24
 80570cc:	429a      	cmp	r2, r3
 80570ce:	d103      	bne.n	80570d8 <xTaskRemoveFromEventList+0x60>
 80570d0:	6a3b      	ldr	r3, [r7, #32]
 80570d2:	6a1a      	ldr	r2, [r3, #32]
 80570d4:	69fb      	ldr	r3, [r7, #28]
 80570d6:	605a      	str	r2, [r3, #4]
 80570d8:	6a3b      	ldr	r3, [r7, #32]
 80570da:	2200      	movs	r2, #0
 80570dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80570de:	69fb      	ldr	r3, [r7, #28]
 80570e0:	681b      	ldr	r3, [r3, #0]
 80570e2:	1e5a      	subs	r2, r3, #1
 80570e4:	69fb      	ldr	r3, [r7, #28]
 80570e6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80570e8:	4b4b      	ldr	r3, [pc, #300]	@ (8057218 <xTaskRemoveFromEventList+0x1a0>)
 80570ea:	681b      	ldr	r3, [r3, #0]
 80570ec:	2b00      	cmp	r3, #0
 80570ee:	d160      	bne.n	80571b2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80570f0:	6a3b      	ldr	r3, [r7, #32]
 80570f2:	695b      	ldr	r3, [r3, #20]
 80570f4:	617b      	str	r3, [r7, #20]
 80570f6:	6a3b      	ldr	r3, [r7, #32]
 80570f8:	689b      	ldr	r3, [r3, #8]
 80570fa:	6a3a      	ldr	r2, [r7, #32]
 80570fc:	68d2      	ldr	r2, [r2, #12]
 80570fe:	609a      	str	r2, [r3, #8]
 8057100:	6a3b      	ldr	r3, [r7, #32]
 8057102:	68db      	ldr	r3, [r3, #12]
 8057104:	6a3a      	ldr	r2, [r7, #32]
 8057106:	6892      	ldr	r2, [r2, #8]
 8057108:	605a      	str	r2, [r3, #4]
 805710a:	697b      	ldr	r3, [r7, #20]
 805710c:	685a      	ldr	r2, [r3, #4]
 805710e:	6a3b      	ldr	r3, [r7, #32]
 8057110:	3304      	adds	r3, #4
 8057112:	429a      	cmp	r2, r3
 8057114:	d103      	bne.n	805711e <xTaskRemoveFromEventList+0xa6>
 8057116:	6a3b      	ldr	r3, [r7, #32]
 8057118:	68da      	ldr	r2, [r3, #12]
 805711a:	697b      	ldr	r3, [r7, #20]
 805711c:	605a      	str	r2, [r3, #4]
 805711e:	6a3b      	ldr	r3, [r7, #32]
 8057120:	2200      	movs	r2, #0
 8057122:	615a      	str	r2, [r3, #20]
 8057124:	697b      	ldr	r3, [r7, #20]
 8057126:	681b      	ldr	r3, [r3, #0]
 8057128:	1e5a      	subs	r2, r3, #1
 805712a:	697b      	ldr	r3, [r7, #20]
 805712c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 805712e:	6a3b      	ldr	r3, [r7, #32]
 8057130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057132:	2201      	movs	r2, #1
 8057134:	409a      	lsls	r2, r3
 8057136:	4b39      	ldr	r3, [pc, #228]	@ (805721c <xTaskRemoveFromEventList+0x1a4>)
 8057138:	681b      	ldr	r3, [r3, #0]
 805713a:	4313      	orrs	r3, r2
 805713c:	4a37      	ldr	r2, [pc, #220]	@ (805721c <xTaskRemoveFromEventList+0x1a4>)
 805713e:	6013      	str	r3, [r2, #0]
 8057140:	6a3b      	ldr	r3, [r7, #32]
 8057142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057144:	4936      	ldr	r1, [pc, #216]	@ (8057220 <xTaskRemoveFromEventList+0x1a8>)
 8057146:	4613      	mov	r3, r2
 8057148:	009b      	lsls	r3, r3, #2
 805714a:	4413      	add	r3, r2
 805714c:	009b      	lsls	r3, r3, #2
 805714e:	440b      	add	r3, r1
 8057150:	3304      	adds	r3, #4
 8057152:	681b      	ldr	r3, [r3, #0]
 8057154:	613b      	str	r3, [r7, #16]
 8057156:	6a3b      	ldr	r3, [r7, #32]
 8057158:	693a      	ldr	r2, [r7, #16]
 805715a:	609a      	str	r2, [r3, #8]
 805715c:	693b      	ldr	r3, [r7, #16]
 805715e:	689a      	ldr	r2, [r3, #8]
 8057160:	6a3b      	ldr	r3, [r7, #32]
 8057162:	60da      	str	r2, [r3, #12]
 8057164:	693b      	ldr	r3, [r7, #16]
 8057166:	689b      	ldr	r3, [r3, #8]
 8057168:	6a3a      	ldr	r2, [r7, #32]
 805716a:	3204      	adds	r2, #4
 805716c:	605a      	str	r2, [r3, #4]
 805716e:	6a3b      	ldr	r3, [r7, #32]
 8057170:	1d1a      	adds	r2, r3, #4
 8057172:	693b      	ldr	r3, [r7, #16]
 8057174:	609a      	str	r2, [r3, #8]
 8057176:	6a3b      	ldr	r3, [r7, #32]
 8057178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805717a:	4613      	mov	r3, r2
 805717c:	009b      	lsls	r3, r3, #2
 805717e:	4413      	add	r3, r2
 8057180:	009b      	lsls	r3, r3, #2
 8057182:	4a27      	ldr	r2, [pc, #156]	@ (8057220 <xTaskRemoveFromEventList+0x1a8>)
 8057184:	441a      	add	r2, r3
 8057186:	6a3b      	ldr	r3, [r7, #32]
 8057188:	615a      	str	r2, [r3, #20]
 805718a:	6a3b      	ldr	r3, [r7, #32]
 805718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805718e:	4924      	ldr	r1, [pc, #144]	@ (8057220 <xTaskRemoveFromEventList+0x1a8>)
 8057190:	4613      	mov	r3, r2
 8057192:	009b      	lsls	r3, r3, #2
 8057194:	4413      	add	r3, r2
 8057196:	009b      	lsls	r3, r3, #2
 8057198:	440b      	add	r3, r1
 805719a:	681b      	ldr	r3, [r3, #0]
 805719c:	6a3a      	ldr	r2, [r7, #32]
 805719e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80571a0:	1c59      	adds	r1, r3, #1
 80571a2:	481f      	ldr	r0, [pc, #124]	@ (8057220 <xTaskRemoveFromEventList+0x1a8>)
 80571a4:	4613      	mov	r3, r2
 80571a6:	009b      	lsls	r3, r3, #2
 80571a8:	4413      	add	r3, r2
 80571aa:	009b      	lsls	r3, r3, #2
 80571ac:	4403      	add	r3, r0
 80571ae:	6019      	str	r1, [r3, #0]
 80571b0:	e01b      	b.n	80571ea <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80571b2:	4b1c      	ldr	r3, [pc, #112]	@ (8057224 <xTaskRemoveFromEventList+0x1ac>)
 80571b4:	685b      	ldr	r3, [r3, #4]
 80571b6:	61bb      	str	r3, [r7, #24]
 80571b8:	6a3b      	ldr	r3, [r7, #32]
 80571ba:	69ba      	ldr	r2, [r7, #24]
 80571bc:	61da      	str	r2, [r3, #28]
 80571be:	69bb      	ldr	r3, [r7, #24]
 80571c0:	689a      	ldr	r2, [r3, #8]
 80571c2:	6a3b      	ldr	r3, [r7, #32]
 80571c4:	621a      	str	r2, [r3, #32]
 80571c6:	69bb      	ldr	r3, [r7, #24]
 80571c8:	689b      	ldr	r3, [r3, #8]
 80571ca:	6a3a      	ldr	r2, [r7, #32]
 80571cc:	3218      	adds	r2, #24
 80571ce:	605a      	str	r2, [r3, #4]
 80571d0:	6a3b      	ldr	r3, [r7, #32]
 80571d2:	f103 0218 	add.w	r2, r3, #24
 80571d6:	69bb      	ldr	r3, [r7, #24]
 80571d8:	609a      	str	r2, [r3, #8]
 80571da:	6a3b      	ldr	r3, [r7, #32]
 80571dc:	4a11      	ldr	r2, [pc, #68]	@ (8057224 <xTaskRemoveFromEventList+0x1ac>)
 80571de:	629a      	str	r2, [r3, #40]	@ 0x28
 80571e0:	4b10      	ldr	r3, [pc, #64]	@ (8057224 <xTaskRemoveFromEventList+0x1ac>)
 80571e2:	681b      	ldr	r3, [r3, #0]
 80571e4:	3301      	adds	r3, #1
 80571e6:	4a0f      	ldr	r2, [pc, #60]	@ (8057224 <xTaskRemoveFromEventList+0x1ac>)
 80571e8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80571ea:	6a3b      	ldr	r3, [r7, #32]
 80571ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80571ee:	4b0e      	ldr	r3, [pc, #56]	@ (8057228 <xTaskRemoveFromEventList+0x1b0>)
 80571f0:	681b      	ldr	r3, [r3, #0]
 80571f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80571f4:	429a      	cmp	r2, r3
 80571f6:	d905      	bls.n	8057204 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80571f8:	2301      	movs	r3, #1
 80571fa:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80571fc:	4b0b      	ldr	r3, [pc, #44]	@ (805722c <xTaskRemoveFromEventList+0x1b4>)
 80571fe:	2201      	movs	r2, #1
 8057200:	601a      	str	r2, [r3, #0]
 8057202:	e001      	b.n	8057208 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8057204:	2300      	movs	r3, #0
 8057206:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8057208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 805720a:	4618      	mov	r0, r3
 805720c:	372c      	adds	r7, #44	@ 0x2c
 805720e:	46bd      	mov	sp, r7
 8057210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057214:	4770      	bx	lr
 8057216:	bf00      	nop
 8057218:	2402d8fc 	.word	0x2402d8fc
 805721c:	2402d8dc 	.word	0x2402d8dc
 8057220:	2402d7ec 	.word	0x2402d7ec
 8057224:	2402d8a8 	.word	0x2402d8a8
 8057228:	2402d7e8 	.word	0x2402d7e8
 805722c:	2402d8e8 	.word	0x2402d8e8

08057230 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8057230:	b480      	push	{r7}
 8057232:	b083      	sub	sp, #12
 8057234:	af00      	add	r7, sp, #0
 8057236:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8057238:	4b06      	ldr	r3, [pc, #24]	@ (8057254 <vTaskInternalSetTimeOutState+0x24>)
 805723a:	681a      	ldr	r2, [r3, #0]
 805723c:	687b      	ldr	r3, [r7, #4]
 805723e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8057240:	4b05      	ldr	r3, [pc, #20]	@ (8057258 <vTaskInternalSetTimeOutState+0x28>)
 8057242:	681a      	ldr	r2, [r3, #0]
 8057244:	687b      	ldr	r3, [r7, #4]
 8057246:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8057248:	bf00      	nop
 805724a:	370c      	adds	r7, #12
 805724c:	46bd      	mov	sp, r7
 805724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057252:	4770      	bx	lr
 8057254:	2402d8ec 	.word	0x2402d8ec
 8057258:	2402d8d8 	.word	0x2402d8d8

0805725c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 805725c:	b580      	push	{r7, lr}
 805725e:	b088      	sub	sp, #32
 8057260:	af00      	add	r7, sp, #0
 8057262:	6078      	str	r0, [r7, #4]
 8057264:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8057266:	687b      	ldr	r3, [r7, #4]
 8057268:	2b00      	cmp	r3, #0
 805726a:	d10d      	bne.n	8057288 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 805726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057270:	b672      	cpsid	i
 8057272:	f383 8811 	msr	BASEPRI, r3
 8057276:	f3bf 8f6f 	isb	sy
 805727a:	f3bf 8f4f 	dsb	sy
 805727e:	b662      	cpsie	i
 8057280:	613b      	str	r3, [r7, #16]
}
 8057282:	bf00      	nop
 8057284:	bf00      	nop
 8057286:	e7fd      	b.n	8057284 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8057288:	683b      	ldr	r3, [r7, #0]
 805728a:	2b00      	cmp	r3, #0
 805728c:	d10d      	bne.n	80572aa <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 805728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057292:	b672      	cpsid	i
 8057294:	f383 8811 	msr	BASEPRI, r3
 8057298:	f3bf 8f6f 	isb	sy
 805729c:	f3bf 8f4f 	dsb	sy
 80572a0:	b662      	cpsie	i
 80572a2:	60fb      	str	r3, [r7, #12]
}
 80572a4:	bf00      	nop
 80572a6:	bf00      	nop
 80572a8:	e7fd      	b.n	80572a6 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80572aa:	f001 fb43 	bl	8058934 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80572ae:	4b1b      	ldr	r3, [pc, #108]	@ (805731c <xTaskCheckForTimeOut+0xc0>)
 80572b0:	681b      	ldr	r3, [r3, #0]
 80572b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80572b4:	687b      	ldr	r3, [r7, #4]
 80572b6:	685b      	ldr	r3, [r3, #4]
 80572b8:	69ba      	ldr	r2, [r7, #24]
 80572ba:	1ad3      	subs	r3, r2, r3
 80572bc:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80572be:	687b      	ldr	r3, [r7, #4]
 80572c0:	681a      	ldr	r2, [r3, #0]
 80572c2:	4b17      	ldr	r3, [pc, #92]	@ (8057320 <xTaskCheckForTimeOut+0xc4>)
 80572c4:	681b      	ldr	r3, [r3, #0]
 80572c6:	429a      	cmp	r2, r3
 80572c8:	d00a      	beq.n	80572e0 <xTaskCheckForTimeOut+0x84>
 80572ca:	687b      	ldr	r3, [r7, #4]
 80572cc:	685b      	ldr	r3, [r3, #4]
 80572ce:	69ba      	ldr	r2, [r7, #24]
 80572d0:	429a      	cmp	r2, r3
 80572d2:	d305      	bcc.n	80572e0 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80572d4:	2301      	movs	r3, #1
 80572d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80572d8:	683b      	ldr	r3, [r7, #0]
 80572da:	2200      	movs	r2, #0
 80572dc:	601a      	str	r2, [r3, #0]
 80572de:	e015      	b.n	805730c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80572e0:	683b      	ldr	r3, [r7, #0]
 80572e2:	681b      	ldr	r3, [r3, #0]
 80572e4:	697a      	ldr	r2, [r7, #20]
 80572e6:	429a      	cmp	r2, r3
 80572e8:	d20b      	bcs.n	8057302 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80572ea:	683b      	ldr	r3, [r7, #0]
 80572ec:	681a      	ldr	r2, [r3, #0]
 80572ee:	697b      	ldr	r3, [r7, #20]
 80572f0:	1ad2      	subs	r2, r2, r3
 80572f2:	683b      	ldr	r3, [r7, #0]
 80572f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80572f6:	6878      	ldr	r0, [r7, #4]
 80572f8:	f7ff ff9a 	bl	8057230 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80572fc:	2300      	movs	r3, #0
 80572fe:	61fb      	str	r3, [r7, #28]
 8057300:	e004      	b.n	805730c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8057302:	683b      	ldr	r3, [r7, #0]
 8057304:	2200      	movs	r2, #0
 8057306:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8057308:	2301      	movs	r3, #1
 805730a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 805730c:	f001 fb48 	bl	80589a0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8057310:	69fb      	ldr	r3, [r7, #28]
}
 8057312:	4618      	mov	r0, r3
 8057314:	3720      	adds	r7, #32
 8057316:	46bd      	mov	sp, r7
 8057318:	bd80      	pop	{r7, pc}
 805731a:	bf00      	nop
 805731c:	2402d8d8 	.word	0x2402d8d8
 8057320:	2402d8ec 	.word	0x2402d8ec

08057324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8057324:	b480      	push	{r7}
 8057326:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8057328:	4b03      	ldr	r3, [pc, #12]	@ (8057338 <vTaskMissedYield+0x14>)
 805732a:	2201      	movs	r2, #1
 805732c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 805732e:	bf00      	nop
 8057330:	46bd      	mov	sp, r7
 8057332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057336:	4770      	bx	lr
 8057338:	2402d8e8 	.word	0x2402d8e8

0805733c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 805733c:	b580      	push	{r7, lr}
 805733e:	b082      	sub	sp, #8
 8057340:	af00      	add	r7, sp, #0
 8057342:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8057344:	f000 f84c 	bl	80573e0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8057348:	4b06      	ldr	r3, [pc, #24]	@ (8057364 <prvIdleTask+0x28>)
 805734a:	681b      	ldr	r3, [r3, #0]
 805734c:	2b01      	cmp	r3, #1
 805734e:	d9f9      	bls.n	8057344 <prvIdleTask+0x8>
            {
                taskYIELD();
 8057350:	4b05      	ldr	r3, [pc, #20]	@ (8057368 <prvIdleTask+0x2c>)
 8057352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8057356:	601a      	str	r2, [r3, #0]
 8057358:	f3bf 8f4f 	dsb	sy
 805735c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8057360:	e7f0      	b.n	8057344 <prvIdleTask+0x8>
 8057362:	bf00      	nop
 8057364:	2402d7ec 	.word	0x2402d7ec
 8057368:	e000ed04 	.word	0xe000ed04

0805736c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 805736c:	b580      	push	{r7, lr}
 805736e:	b082      	sub	sp, #8
 8057370:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8057372:	2300      	movs	r3, #0
 8057374:	607b      	str	r3, [r7, #4]
 8057376:	e00c      	b.n	8057392 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8057378:	687a      	ldr	r2, [r7, #4]
 805737a:	4613      	mov	r3, r2
 805737c:	009b      	lsls	r3, r3, #2
 805737e:	4413      	add	r3, r2
 8057380:	009b      	lsls	r3, r3, #2
 8057382:	4a10      	ldr	r2, [pc, #64]	@ (80573c4 <prvInitialiseTaskLists+0x58>)
 8057384:	4413      	add	r3, r2
 8057386:	4618      	mov	r0, r3
 8057388:	f7fd fd26 	bl	8054dd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 805738c:	687b      	ldr	r3, [r7, #4]
 805738e:	3301      	adds	r3, #1
 8057390:	607b      	str	r3, [r7, #4]
 8057392:	687b      	ldr	r3, [r7, #4]
 8057394:	2b06      	cmp	r3, #6
 8057396:	d9ef      	bls.n	8057378 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8057398:	480b      	ldr	r0, [pc, #44]	@ (80573c8 <prvInitialiseTaskLists+0x5c>)
 805739a:	f7fd fd1d 	bl	8054dd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 805739e:	480b      	ldr	r0, [pc, #44]	@ (80573cc <prvInitialiseTaskLists+0x60>)
 80573a0:	f7fd fd1a 	bl	8054dd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80573a4:	480a      	ldr	r0, [pc, #40]	@ (80573d0 <prvInitialiseTaskLists+0x64>)
 80573a6:	f7fd fd17 	bl	8054dd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80573aa:	480a      	ldr	r0, [pc, #40]	@ (80573d4 <prvInitialiseTaskLists+0x68>)
 80573ac:	f7fd fd14 	bl	8054dd8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80573b0:	4b09      	ldr	r3, [pc, #36]	@ (80573d8 <prvInitialiseTaskLists+0x6c>)
 80573b2:	4a05      	ldr	r2, [pc, #20]	@ (80573c8 <prvInitialiseTaskLists+0x5c>)
 80573b4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80573b6:	4b09      	ldr	r3, [pc, #36]	@ (80573dc <prvInitialiseTaskLists+0x70>)
 80573b8:	4a04      	ldr	r2, [pc, #16]	@ (80573cc <prvInitialiseTaskLists+0x60>)
 80573ba:	601a      	str	r2, [r3, #0]
}
 80573bc:	bf00      	nop
 80573be:	3708      	adds	r7, #8
 80573c0:	46bd      	mov	sp, r7
 80573c2:	bd80      	pop	{r7, pc}
 80573c4:	2402d7ec 	.word	0x2402d7ec
 80573c8:	2402d878 	.word	0x2402d878
 80573cc:	2402d88c 	.word	0x2402d88c
 80573d0:	2402d8a8 	.word	0x2402d8a8
 80573d4:	2402d8bc 	.word	0x2402d8bc
 80573d8:	2402d8a0 	.word	0x2402d8a0
 80573dc:	2402d8a4 	.word	0x2402d8a4

080573e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80573e0:	b580      	push	{r7, lr}
 80573e2:	b082      	sub	sp, #8
 80573e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80573e6:	e019      	b.n	805741c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80573e8:	f001 faa4 	bl	8058934 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80573ec:	4b10      	ldr	r3, [pc, #64]	@ (8057430 <prvCheckTasksWaitingTermination+0x50>)
 80573ee:	68db      	ldr	r3, [r3, #12]
 80573f0:	68db      	ldr	r3, [r3, #12]
 80573f2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80573f4:	687b      	ldr	r3, [r7, #4]
 80573f6:	3304      	adds	r3, #4
 80573f8:	4618      	mov	r0, r3
 80573fa:	f7fd fd77 	bl	8054eec <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80573fe:	4b0d      	ldr	r3, [pc, #52]	@ (8057434 <prvCheckTasksWaitingTermination+0x54>)
 8057400:	681b      	ldr	r3, [r3, #0]
 8057402:	3b01      	subs	r3, #1
 8057404:	4a0b      	ldr	r2, [pc, #44]	@ (8057434 <prvCheckTasksWaitingTermination+0x54>)
 8057406:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8057408:	4b0b      	ldr	r3, [pc, #44]	@ (8057438 <prvCheckTasksWaitingTermination+0x58>)
 805740a:	681b      	ldr	r3, [r3, #0]
 805740c:	3b01      	subs	r3, #1
 805740e:	4a0a      	ldr	r2, [pc, #40]	@ (8057438 <prvCheckTasksWaitingTermination+0x58>)
 8057410:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8057412:	f001 fac5 	bl	80589a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8057416:	6878      	ldr	r0, [r7, #4]
 8057418:	f000 f8c4 	bl	80575a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 805741c:	4b06      	ldr	r3, [pc, #24]	@ (8057438 <prvCheckTasksWaitingTermination+0x58>)
 805741e:	681b      	ldr	r3, [r3, #0]
 8057420:	2b00      	cmp	r3, #0
 8057422:	d1e1      	bne.n	80573e8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8057424:	bf00      	nop
 8057426:	bf00      	nop
 8057428:	3708      	adds	r7, #8
 805742a:	46bd      	mov	sp, r7
 805742c:	bd80      	pop	{r7, pc}
 805742e:	bf00      	nop
 8057430:	2402d8bc 	.word	0x2402d8bc
 8057434:	2402d8d4 	.word	0x2402d8d4
 8057438:	2402d8d0 	.word	0x2402d8d0

0805743c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 805743c:	b580      	push	{r7, lr}
 805743e:	b086      	sub	sp, #24
 8057440:	af00      	add	r7, sp, #0
 8057442:	60f8      	str	r0, [r7, #12]
 8057444:	60b9      	str	r1, [r7, #8]
 8057446:	607a      	str	r2, [r7, #4]
 8057448:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 805744a:	68fb      	ldr	r3, [r7, #12]
 805744c:	2b00      	cmp	r3, #0
 805744e:	d102      	bne.n	8057456 <vTaskGetInfo+0x1a>
 8057450:	4b2a      	ldr	r3, [pc, #168]	@ (80574fc <vTaskGetInfo+0xc0>)
 8057452:	681b      	ldr	r3, [r3, #0]
 8057454:	e000      	b.n	8057458 <vTaskGetInfo+0x1c>
 8057456:	68fb      	ldr	r3, [r7, #12]
 8057458:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = pxTCB;
 805745a:	68bb      	ldr	r3, [r7, #8]
 805745c:	697a      	ldr	r2, [r7, #20]
 805745e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8057460:	697b      	ldr	r3, [r7, #20]
 8057462:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8057466:	68bb      	ldr	r3, [r7, #8]
 8057468:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 805746a:	697b      	ldr	r3, [r7, #20]
 805746c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805746e:	68bb      	ldr	r3, [r7, #8]
 8057470:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8057472:	697b      	ldr	r3, [r7, #20]
 8057474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8057476:	68bb      	ldr	r3, [r7, #8]
 8057478:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 805747a:	697b      	ldr	r3, [r7, #20]
 805747c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 805747e:	68bb      	ldr	r3, [r7, #8]
 8057480:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8057482:	697b      	ldr	r3, [r7, #20]
 8057484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8057486:	68bb      	ldr	r3, [r7, #8]
 8057488:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 805748a:	68bb      	ldr	r3, [r7, #8]
 805748c:	2200      	movs	r2, #0
 805748e:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8057490:	78fb      	ldrb	r3, [r7, #3]
 8057492:	2b05      	cmp	r3, #5
 8057494:	d018      	beq.n	80574c8 <vTaskGetInfo+0x8c>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8057496:	4b19      	ldr	r3, [pc, #100]	@ (80574fc <vTaskGetInfo+0xc0>)
 8057498:	681b      	ldr	r3, [r3, #0]
 805749a:	697a      	ldr	r2, [r7, #20]
 805749c:	429a      	cmp	r2, r3
 805749e:	d103      	bne.n	80574a8 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80574a0:	68bb      	ldr	r3, [r7, #8]
 80574a2:	2200      	movs	r2, #0
 80574a4:	731a      	strb	r2, [r3, #12]
 80574a6:	e016      	b.n	80574d6 <vTaskGetInfo+0x9a>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80574a8:	68bb      	ldr	r3, [r7, #8]
 80574aa:	78fa      	ldrb	r2, [r7, #3]
 80574ac:	731a      	strb	r2, [r3, #12]
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 80574ae:	f001 fa41 	bl	8058934 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80574b2:	697b      	ldr	r3, [r7, #20]
 80574b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80574b6:	4a12      	ldr	r2, [pc, #72]	@ (8057500 <vTaskGetInfo+0xc4>)
 80574b8:	4293      	cmp	r3, r2
 80574ba:	d102      	bne.n	80574c2 <vTaskGetInfo+0x86>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 80574bc:	68bb      	ldr	r3, [r7, #8]
 80574be:	2201      	movs	r2, #1
 80574c0:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 80574c2:	f001 fa6d 	bl	80589a0 <vPortExitCritical>
 80574c6:	e006      	b.n	80574d6 <vTaskGetInfo+0x9a>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80574c8:	6978      	ldr	r0, [r7, #20]
 80574ca:	f7ff f903 	bl	80566d4 <eTaskGetState>
 80574ce:	4603      	mov	r3, r0
 80574d0:	461a      	mov	r2, r3
 80574d2:	68bb      	ldr	r3, [r7, #8]
 80574d4:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 80574d6:	687b      	ldr	r3, [r7, #4]
 80574d8:	2b00      	cmp	r3, #0
 80574da:	d008      	beq.n	80574ee <vTaskGetInfo+0xb2>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80574dc:	697b      	ldr	r3, [r7, #20]
 80574de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80574e0:	4618      	mov	r0, r3
 80574e2:	f000 f844 	bl	805756e <prvTaskCheckFreeStackSpace>
 80574e6:	4602      	mov	r2, r0
 80574e8:	68bb      	ldr	r3, [r7, #8]
 80574ea:	621a      	str	r2, [r3, #32]
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 80574ec:	e002      	b.n	80574f4 <vTaskGetInfo+0xb8>
            pxTaskStatus->usStackHighWaterMark = 0;
 80574ee:	68bb      	ldr	r3, [r7, #8]
 80574f0:	2200      	movs	r2, #0
 80574f2:	621a      	str	r2, [r3, #32]
    }
 80574f4:	bf00      	nop
 80574f6:	3718      	adds	r7, #24
 80574f8:	46bd      	mov	sp, r7
 80574fa:	bd80      	pop	{r7, pc}
 80574fc:	2402d7e8 	.word	0x2402d7e8
 8057500:	2402d8a8 	.word	0x2402d8a8

08057504 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8057504:	b580      	push	{r7, lr}
 8057506:	b088      	sub	sp, #32
 8057508:	af00      	add	r7, sp, #0
 805750a:	60f8      	str	r0, [r7, #12]
 805750c:	60b9      	str	r1, [r7, #8]
 805750e:	4613      	mov	r3, r2
 8057510:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8057512:	2300      	movs	r3, #0
 8057514:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 8057516:	68bb      	ldr	r3, [r7, #8]
 8057518:	3308      	adds	r3, #8
 805751a:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 805751c:	2300      	movs	r3, #0
 805751e:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8057520:	68bb      	ldr	r3, [r7, #8]
 8057522:	681b      	ldr	r3, [r3, #0]
 8057524:	2b00      	cmp	r3, #0
 8057526:	d01d      	beq.n	8057564 <prvListTasksWithinSingleList+0x60>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8057528:	68bb      	ldr	r3, [r7, #8]
 805752a:	68db      	ldr	r3, [r3, #12]
 805752c:	61bb      	str	r3, [r7, #24]
 805752e:	e015      	b.n	805755c <prvListTasksWithinSingleList+0x58>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8057530:	69bb      	ldr	r3, [r7, #24]
 8057532:	68db      	ldr	r3, [r3, #12]
 8057534:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8057536:	69fa      	ldr	r2, [r7, #28]
 8057538:	4613      	mov	r3, r2
 805753a:	00db      	lsls	r3, r3, #3
 805753c:	4413      	add	r3, r2
 805753e:	009b      	lsls	r3, r3, #2
 8057540:	461a      	mov	r2, r3
 8057542:	68fb      	ldr	r3, [r7, #12]
 8057544:	1899      	adds	r1, r3, r2
 8057546:	79fb      	ldrb	r3, [r7, #7]
 8057548:	2201      	movs	r2, #1
 805754a:	6938      	ldr	r0, [r7, #16]
 805754c:	f7ff ff76 	bl	805743c <vTaskGetInfo>
                uxTask++;
 8057550:	69fb      	ldr	r3, [r7, #28]
 8057552:	3301      	adds	r3, #1
 8057554:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8057556:	69bb      	ldr	r3, [r7, #24]
 8057558:	685b      	ldr	r3, [r3, #4]
 805755a:	61bb      	str	r3, [r7, #24]
 805755c:	69ba      	ldr	r2, [r7, #24]
 805755e:	697b      	ldr	r3, [r7, #20]
 8057560:	429a      	cmp	r2, r3
 8057562:	d1e5      	bne.n	8057530 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8057564:	69fb      	ldr	r3, [r7, #28]
    }
 8057566:	4618      	mov	r0, r3
 8057568:	3720      	adds	r7, #32
 805756a:	46bd      	mov	sp, r7
 805756c:	bd80      	pop	{r7, pc}

0805756e <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 805756e:	b480      	push	{r7}
 8057570:	b085      	sub	sp, #20
 8057572:	af00      	add	r7, sp, #0
 8057574:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8057576:	2300      	movs	r3, #0
 8057578:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 805757a:	e005      	b.n	8057588 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 805757c:	687b      	ldr	r3, [r7, #4]
 805757e:	3301      	adds	r3, #1
 8057580:	607b      	str	r3, [r7, #4]
            uxCount++;
 8057582:	68fb      	ldr	r3, [r7, #12]
 8057584:	3301      	adds	r3, #1
 8057586:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057588:	687b      	ldr	r3, [r7, #4]
 805758a:	781b      	ldrb	r3, [r3, #0]
 805758c:	2ba5      	cmp	r3, #165	@ 0xa5
 805758e:	d0f5      	beq.n	805757c <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8057590:	68fb      	ldr	r3, [r7, #12]
 8057592:	089b      	lsrs	r3, r3, #2
 8057594:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8057596:	68fb      	ldr	r3, [r7, #12]
    }
 8057598:	4618      	mov	r0, r3
 805759a:	3714      	adds	r7, #20
 805759c:	46bd      	mov	sp, r7
 805759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80575a2:	4770      	bx	lr

080575a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80575a4:	b580      	push	{r7, lr}
 80575a6:	b084      	sub	sp, #16
 80575a8:	af00      	add	r7, sp, #0
 80575aa:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80575ac:	687b      	ldr	r3, [r7, #4]
 80575ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80575b2:	2b00      	cmp	r3, #0
 80575b4:	d108      	bne.n	80575c8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80575b6:	687b      	ldr	r3, [r7, #4]
 80575b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80575ba:	4618      	mov	r0, r3
 80575bc:	f001 fc32 	bl	8058e24 <vPortFree>
                vPortFree( pxTCB );
 80575c0:	6878      	ldr	r0, [r7, #4]
 80575c2:	f001 fc2f 	bl	8058e24 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80575c6:	e01b      	b.n	8057600 <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80575c8:	687b      	ldr	r3, [r7, #4]
 80575ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80575ce:	2b01      	cmp	r3, #1
 80575d0:	d103      	bne.n	80575da <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80575d2:	6878      	ldr	r0, [r7, #4]
 80575d4:	f001 fc26 	bl	8058e24 <vPortFree>
    }
 80575d8:	e012      	b.n	8057600 <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80575da:	687b      	ldr	r3, [r7, #4]
 80575dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80575e0:	2b02      	cmp	r3, #2
 80575e2:	d00d      	beq.n	8057600 <prvDeleteTCB+0x5c>
    __asm volatile
 80575e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80575e8:	b672      	cpsid	i
 80575ea:	f383 8811 	msr	BASEPRI, r3
 80575ee:	f3bf 8f6f 	isb	sy
 80575f2:	f3bf 8f4f 	dsb	sy
 80575f6:	b662      	cpsie	i
 80575f8:	60fb      	str	r3, [r7, #12]
}
 80575fa:	bf00      	nop
 80575fc:	bf00      	nop
 80575fe:	e7fd      	b.n	80575fc <prvDeleteTCB+0x58>
    }
 8057600:	bf00      	nop
 8057602:	3710      	adds	r7, #16
 8057604:	46bd      	mov	sp, r7
 8057606:	bd80      	pop	{r7, pc}

08057608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8057608:	b480      	push	{r7}
 805760a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 805760c:	4b0a      	ldr	r3, [pc, #40]	@ (8057638 <prvResetNextTaskUnblockTime+0x30>)
 805760e:	681b      	ldr	r3, [r3, #0]
 8057610:	681b      	ldr	r3, [r3, #0]
 8057612:	2b00      	cmp	r3, #0
 8057614:	d104      	bne.n	8057620 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8057616:	4b09      	ldr	r3, [pc, #36]	@ (805763c <prvResetNextTaskUnblockTime+0x34>)
 8057618:	f04f 32ff 	mov.w	r2, #4294967295
 805761c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 805761e:	e005      	b.n	805762c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8057620:	4b05      	ldr	r3, [pc, #20]	@ (8057638 <prvResetNextTaskUnblockTime+0x30>)
 8057622:	681b      	ldr	r3, [r3, #0]
 8057624:	68db      	ldr	r3, [r3, #12]
 8057626:	681b      	ldr	r3, [r3, #0]
 8057628:	4a04      	ldr	r2, [pc, #16]	@ (805763c <prvResetNextTaskUnblockTime+0x34>)
 805762a:	6013      	str	r3, [r2, #0]
}
 805762c:	bf00      	nop
 805762e:	46bd      	mov	sp, r7
 8057630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057634:	4770      	bx	lr
 8057636:	bf00      	nop
 8057638:	2402d8a0 	.word	0x2402d8a0
 805763c:	2402d8f4 	.word	0x2402d8f4

08057640 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8057640:	b480      	push	{r7}
 8057642:	b083      	sub	sp, #12
 8057644:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8057646:	4b05      	ldr	r3, [pc, #20]	@ (805765c <xTaskGetCurrentTaskHandle+0x1c>)
 8057648:	681b      	ldr	r3, [r3, #0]
 805764a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 805764c:	687b      	ldr	r3, [r7, #4]
        }
 805764e:	4618      	mov	r0, r3
 8057650:	370c      	adds	r7, #12
 8057652:	46bd      	mov	sp, r7
 8057654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057658:	4770      	bx	lr
 805765a:	bf00      	nop
 805765c:	2402d7e8 	.word	0x2402d7e8

08057660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8057660:	b480      	push	{r7}
 8057662:	b083      	sub	sp, #12
 8057664:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8057666:	4b0b      	ldr	r3, [pc, #44]	@ (8057694 <xTaskGetSchedulerState+0x34>)
 8057668:	681b      	ldr	r3, [r3, #0]
 805766a:	2b00      	cmp	r3, #0
 805766c:	d102      	bne.n	8057674 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 805766e:	2301      	movs	r3, #1
 8057670:	607b      	str	r3, [r7, #4]
 8057672:	e008      	b.n	8057686 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057674:	4b08      	ldr	r3, [pc, #32]	@ (8057698 <xTaskGetSchedulerState+0x38>)
 8057676:	681b      	ldr	r3, [r3, #0]
 8057678:	2b00      	cmp	r3, #0
 805767a:	d102      	bne.n	8057682 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 805767c:	2302      	movs	r3, #2
 805767e:	607b      	str	r3, [r7, #4]
 8057680:	e001      	b.n	8057686 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8057682:	2300      	movs	r3, #0
 8057684:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8057686:	687b      	ldr	r3, [r7, #4]
    }
 8057688:	4618      	mov	r0, r3
 805768a:	370c      	adds	r7, #12
 805768c:	46bd      	mov	sp, r7
 805768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057692:	4770      	bx	lr
 8057694:	2402d8e0 	.word	0x2402d8e0
 8057698:	2402d8fc 	.word	0x2402d8fc

0805769c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 805769c:	b580      	push	{r7, lr}
 805769e:	b086      	sub	sp, #24
 80576a0:	af00      	add	r7, sp, #0
 80576a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80576a4:	687b      	ldr	r3, [r7, #4]
 80576a6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80576a8:	2300      	movs	r3, #0
 80576aa:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80576ac:	687b      	ldr	r3, [r7, #4]
 80576ae:	2b00      	cmp	r3, #0
 80576b0:	f000 8089 	beq.w	80577c6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80576b4:	693b      	ldr	r3, [r7, #16]
 80576b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80576b8:	4b45      	ldr	r3, [pc, #276]	@ (80577d0 <xTaskPriorityInherit+0x134>)
 80576ba:	681b      	ldr	r3, [r3, #0]
 80576bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80576be:	429a      	cmp	r2, r3
 80576c0:	d278      	bcs.n	80577b4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80576c2:	693b      	ldr	r3, [r7, #16]
 80576c4:	699b      	ldr	r3, [r3, #24]
 80576c6:	2b00      	cmp	r3, #0
 80576c8:	db06      	blt.n	80576d8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80576ca:	4b41      	ldr	r3, [pc, #260]	@ (80577d0 <xTaskPriorityInherit+0x134>)
 80576cc:	681b      	ldr	r3, [r3, #0]
 80576ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80576d0:	f1c3 0207 	rsb	r2, r3, #7
 80576d4:	693b      	ldr	r3, [r7, #16]
 80576d6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80576d8:	693b      	ldr	r3, [r7, #16]
 80576da:	6959      	ldr	r1, [r3, #20]
 80576dc:	693b      	ldr	r3, [r7, #16]
 80576de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80576e0:	4613      	mov	r3, r2
 80576e2:	009b      	lsls	r3, r3, #2
 80576e4:	4413      	add	r3, r2
 80576e6:	009b      	lsls	r3, r3, #2
 80576e8:	4a3a      	ldr	r2, [pc, #232]	@ (80577d4 <xTaskPriorityInherit+0x138>)
 80576ea:	4413      	add	r3, r2
 80576ec:	4299      	cmp	r1, r3
 80576ee:	d159      	bne.n	80577a4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80576f0:	693b      	ldr	r3, [r7, #16]
 80576f2:	3304      	adds	r3, #4
 80576f4:	4618      	mov	r0, r3
 80576f6:	f7fd fbf9 	bl	8054eec <uxListRemove>
 80576fa:	4603      	mov	r3, r0
 80576fc:	2b00      	cmp	r3, #0
 80576fe:	d10a      	bne.n	8057716 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8057700:	693b      	ldr	r3, [r7, #16]
 8057702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057704:	2201      	movs	r2, #1
 8057706:	fa02 f303 	lsl.w	r3, r2, r3
 805770a:	43da      	mvns	r2, r3
 805770c:	4b32      	ldr	r3, [pc, #200]	@ (80577d8 <xTaskPriorityInherit+0x13c>)
 805770e:	681b      	ldr	r3, [r3, #0]
 8057710:	4013      	ands	r3, r2
 8057712:	4a31      	ldr	r2, [pc, #196]	@ (80577d8 <xTaskPriorityInherit+0x13c>)
 8057714:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057716:	4b2e      	ldr	r3, [pc, #184]	@ (80577d0 <xTaskPriorityInherit+0x134>)
 8057718:	681b      	ldr	r3, [r3, #0]
 805771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805771c:	693b      	ldr	r3, [r7, #16]
 805771e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8057720:	693b      	ldr	r3, [r7, #16]
 8057722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057724:	2201      	movs	r2, #1
 8057726:	409a      	lsls	r2, r3
 8057728:	4b2b      	ldr	r3, [pc, #172]	@ (80577d8 <xTaskPriorityInherit+0x13c>)
 805772a:	681b      	ldr	r3, [r3, #0]
 805772c:	4313      	orrs	r3, r2
 805772e:	4a2a      	ldr	r2, [pc, #168]	@ (80577d8 <xTaskPriorityInherit+0x13c>)
 8057730:	6013      	str	r3, [r2, #0]
 8057732:	693b      	ldr	r3, [r7, #16]
 8057734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057736:	4927      	ldr	r1, [pc, #156]	@ (80577d4 <xTaskPriorityInherit+0x138>)
 8057738:	4613      	mov	r3, r2
 805773a:	009b      	lsls	r3, r3, #2
 805773c:	4413      	add	r3, r2
 805773e:	009b      	lsls	r3, r3, #2
 8057740:	440b      	add	r3, r1
 8057742:	3304      	adds	r3, #4
 8057744:	681b      	ldr	r3, [r3, #0]
 8057746:	60fb      	str	r3, [r7, #12]
 8057748:	693b      	ldr	r3, [r7, #16]
 805774a:	68fa      	ldr	r2, [r7, #12]
 805774c:	609a      	str	r2, [r3, #8]
 805774e:	68fb      	ldr	r3, [r7, #12]
 8057750:	689a      	ldr	r2, [r3, #8]
 8057752:	693b      	ldr	r3, [r7, #16]
 8057754:	60da      	str	r2, [r3, #12]
 8057756:	68fb      	ldr	r3, [r7, #12]
 8057758:	689b      	ldr	r3, [r3, #8]
 805775a:	693a      	ldr	r2, [r7, #16]
 805775c:	3204      	adds	r2, #4
 805775e:	605a      	str	r2, [r3, #4]
 8057760:	693b      	ldr	r3, [r7, #16]
 8057762:	1d1a      	adds	r2, r3, #4
 8057764:	68fb      	ldr	r3, [r7, #12]
 8057766:	609a      	str	r2, [r3, #8]
 8057768:	693b      	ldr	r3, [r7, #16]
 805776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805776c:	4613      	mov	r3, r2
 805776e:	009b      	lsls	r3, r3, #2
 8057770:	4413      	add	r3, r2
 8057772:	009b      	lsls	r3, r3, #2
 8057774:	4a17      	ldr	r2, [pc, #92]	@ (80577d4 <xTaskPriorityInherit+0x138>)
 8057776:	441a      	add	r2, r3
 8057778:	693b      	ldr	r3, [r7, #16]
 805777a:	615a      	str	r2, [r3, #20]
 805777c:	693b      	ldr	r3, [r7, #16]
 805777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057780:	4914      	ldr	r1, [pc, #80]	@ (80577d4 <xTaskPriorityInherit+0x138>)
 8057782:	4613      	mov	r3, r2
 8057784:	009b      	lsls	r3, r3, #2
 8057786:	4413      	add	r3, r2
 8057788:	009b      	lsls	r3, r3, #2
 805778a:	440b      	add	r3, r1
 805778c:	681b      	ldr	r3, [r3, #0]
 805778e:	693a      	ldr	r2, [r7, #16]
 8057790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8057792:	1c59      	adds	r1, r3, #1
 8057794:	480f      	ldr	r0, [pc, #60]	@ (80577d4 <xTaskPriorityInherit+0x138>)
 8057796:	4613      	mov	r3, r2
 8057798:	009b      	lsls	r3, r3, #2
 805779a:	4413      	add	r3, r2
 805779c:	009b      	lsls	r3, r3, #2
 805779e:	4403      	add	r3, r0
 80577a0:	6019      	str	r1, [r3, #0]
 80577a2:	e004      	b.n	80577ae <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80577a4:	4b0a      	ldr	r3, [pc, #40]	@ (80577d0 <xTaskPriorityInherit+0x134>)
 80577a6:	681b      	ldr	r3, [r3, #0]
 80577a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80577aa:	693b      	ldr	r3, [r7, #16]
 80577ac:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80577ae:	2301      	movs	r3, #1
 80577b0:	617b      	str	r3, [r7, #20]
 80577b2:	e008      	b.n	80577c6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80577b4:	693b      	ldr	r3, [r7, #16]
 80577b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80577b8:	4b05      	ldr	r3, [pc, #20]	@ (80577d0 <xTaskPriorityInherit+0x134>)
 80577ba:	681b      	ldr	r3, [r3, #0]
 80577bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80577be:	429a      	cmp	r2, r3
 80577c0:	d201      	bcs.n	80577c6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80577c2:	2301      	movs	r3, #1
 80577c4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80577c6:	697b      	ldr	r3, [r7, #20]
    }
 80577c8:	4618      	mov	r0, r3
 80577ca:	3718      	adds	r7, #24
 80577cc:	46bd      	mov	sp, r7
 80577ce:	bd80      	pop	{r7, pc}
 80577d0:	2402d7e8 	.word	0x2402d7e8
 80577d4:	2402d7ec 	.word	0x2402d7ec
 80577d8:	2402d8dc 	.word	0x2402d8dc

080577dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80577dc:	b580      	push	{r7, lr}
 80577de:	b088      	sub	sp, #32
 80577e0:	af00      	add	r7, sp, #0
 80577e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80577e4:	687b      	ldr	r3, [r7, #4]
 80577e6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80577e8:	2300      	movs	r3, #0
 80577ea:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80577ec:	687b      	ldr	r3, [r7, #4]
 80577ee:	2b00      	cmp	r3, #0
 80577f0:	f000 8094 	beq.w	805791c <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80577f4:	4b4c      	ldr	r3, [pc, #304]	@ (8057928 <xTaskPriorityDisinherit+0x14c>)
 80577f6:	681b      	ldr	r3, [r3, #0]
 80577f8:	69ba      	ldr	r2, [r7, #24]
 80577fa:	429a      	cmp	r2, r3
 80577fc:	d00d      	beq.n	805781a <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 80577fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057802:	b672      	cpsid	i
 8057804:	f383 8811 	msr	BASEPRI, r3
 8057808:	f3bf 8f6f 	isb	sy
 805780c:	f3bf 8f4f 	dsb	sy
 8057810:	b662      	cpsie	i
 8057812:	613b      	str	r3, [r7, #16]
}
 8057814:	bf00      	nop
 8057816:	bf00      	nop
 8057818:	e7fd      	b.n	8057816 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 805781a:	69bb      	ldr	r3, [r7, #24]
 805781c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 805781e:	2b00      	cmp	r3, #0
 8057820:	d10d      	bne.n	805783e <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8057822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057826:	b672      	cpsid	i
 8057828:	f383 8811 	msr	BASEPRI, r3
 805782c:	f3bf 8f6f 	isb	sy
 8057830:	f3bf 8f4f 	dsb	sy
 8057834:	b662      	cpsie	i
 8057836:	60fb      	str	r3, [r7, #12]
}
 8057838:	bf00      	nop
 805783a:	bf00      	nop
 805783c:	e7fd      	b.n	805783a <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 805783e:	69bb      	ldr	r3, [r7, #24]
 8057840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8057842:	1e5a      	subs	r2, r3, #1
 8057844:	69bb      	ldr	r3, [r7, #24]
 8057846:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8057848:	69bb      	ldr	r3, [r7, #24]
 805784a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 805784c:	69bb      	ldr	r3, [r7, #24]
 805784e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8057850:	429a      	cmp	r2, r3
 8057852:	d063      	beq.n	805791c <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8057854:	69bb      	ldr	r3, [r7, #24]
 8057856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8057858:	2b00      	cmp	r3, #0
 805785a:	d15f      	bne.n	805791c <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805785c:	69bb      	ldr	r3, [r7, #24]
 805785e:	3304      	adds	r3, #4
 8057860:	4618      	mov	r0, r3
 8057862:	f7fd fb43 	bl	8054eec <uxListRemove>
 8057866:	4603      	mov	r3, r0
 8057868:	2b00      	cmp	r3, #0
 805786a:	d10a      	bne.n	8057882 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 805786c:	69bb      	ldr	r3, [r7, #24]
 805786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057870:	2201      	movs	r2, #1
 8057872:	fa02 f303 	lsl.w	r3, r2, r3
 8057876:	43da      	mvns	r2, r3
 8057878:	4b2c      	ldr	r3, [pc, #176]	@ (805792c <xTaskPriorityDisinherit+0x150>)
 805787a:	681b      	ldr	r3, [r3, #0]
 805787c:	4013      	ands	r3, r2
 805787e:	4a2b      	ldr	r2, [pc, #172]	@ (805792c <xTaskPriorityDisinherit+0x150>)
 8057880:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8057882:	69bb      	ldr	r3, [r7, #24]
 8057884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8057886:	69bb      	ldr	r3, [r7, #24]
 8057888:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 805788a:	69bb      	ldr	r3, [r7, #24]
 805788c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805788e:	f1c3 0207 	rsb	r2, r3, #7
 8057892:	69bb      	ldr	r3, [r7, #24]
 8057894:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8057896:	69bb      	ldr	r3, [r7, #24]
 8057898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805789a:	2201      	movs	r2, #1
 805789c:	409a      	lsls	r2, r3
 805789e:	4b23      	ldr	r3, [pc, #140]	@ (805792c <xTaskPriorityDisinherit+0x150>)
 80578a0:	681b      	ldr	r3, [r3, #0]
 80578a2:	4313      	orrs	r3, r2
 80578a4:	4a21      	ldr	r2, [pc, #132]	@ (805792c <xTaskPriorityDisinherit+0x150>)
 80578a6:	6013      	str	r3, [r2, #0]
 80578a8:	69bb      	ldr	r3, [r7, #24]
 80578aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80578ac:	4920      	ldr	r1, [pc, #128]	@ (8057930 <xTaskPriorityDisinherit+0x154>)
 80578ae:	4613      	mov	r3, r2
 80578b0:	009b      	lsls	r3, r3, #2
 80578b2:	4413      	add	r3, r2
 80578b4:	009b      	lsls	r3, r3, #2
 80578b6:	440b      	add	r3, r1
 80578b8:	3304      	adds	r3, #4
 80578ba:	681b      	ldr	r3, [r3, #0]
 80578bc:	617b      	str	r3, [r7, #20]
 80578be:	69bb      	ldr	r3, [r7, #24]
 80578c0:	697a      	ldr	r2, [r7, #20]
 80578c2:	609a      	str	r2, [r3, #8]
 80578c4:	697b      	ldr	r3, [r7, #20]
 80578c6:	689a      	ldr	r2, [r3, #8]
 80578c8:	69bb      	ldr	r3, [r7, #24]
 80578ca:	60da      	str	r2, [r3, #12]
 80578cc:	697b      	ldr	r3, [r7, #20]
 80578ce:	689b      	ldr	r3, [r3, #8]
 80578d0:	69ba      	ldr	r2, [r7, #24]
 80578d2:	3204      	adds	r2, #4
 80578d4:	605a      	str	r2, [r3, #4]
 80578d6:	69bb      	ldr	r3, [r7, #24]
 80578d8:	1d1a      	adds	r2, r3, #4
 80578da:	697b      	ldr	r3, [r7, #20]
 80578dc:	609a      	str	r2, [r3, #8]
 80578de:	69bb      	ldr	r3, [r7, #24]
 80578e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80578e2:	4613      	mov	r3, r2
 80578e4:	009b      	lsls	r3, r3, #2
 80578e6:	4413      	add	r3, r2
 80578e8:	009b      	lsls	r3, r3, #2
 80578ea:	4a11      	ldr	r2, [pc, #68]	@ (8057930 <xTaskPriorityDisinherit+0x154>)
 80578ec:	441a      	add	r2, r3
 80578ee:	69bb      	ldr	r3, [r7, #24]
 80578f0:	615a      	str	r2, [r3, #20]
 80578f2:	69bb      	ldr	r3, [r7, #24]
 80578f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80578f6:	490e      	ldr	r1, [pc, #56]	@ (8057930 <xTaskPriorityDisinherit+0x154>)
 80578f8:	4613      	mov	r3, r2
 80578fa:	009b      	lsls	r3, r3, #2
 80578fc:	4413      	add	r3, r2
 80578fe:	009b      	lsls	r3, r3, #2
 8057900:	440b      	add	r3, r1
 8057902:	681b      	ldr	r3, [r3, #0]
 8057904:	69ba      	ldr	r2, [r7, #24]
 8057906:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8057908:	1c59      	adds	r1, r3, #1
 805790a:	4809      	ldr	r0, [pc, #36]	@ (8057930 <xTaskPriorityDisinherit+0x154>)
 805790c:	4613      	mov	r3, r2
 805790e:	009b      	lsls	r3, r3, #2
 8057910:	4413      	add	r3, r2
 8057912:	009b      	lsls	r3, r3, #2
 8057914:	4403      	add	r3, r0
 8057916:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8057918:	2301      	movs	r3, #1
 805791a:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 805791c:	69fb      	ldr	r3, [r7, #28]
    }
 805791e:	4618      	mov	r0, r3
 8057920:	3720      	adds	r7, #32
 8057922:	46bd      	mov	sp, r7
 8057924:	bd80      	pop	{r7, pc}
 8057926:	bf00      	nop
 8057928:	2402d7e8 	.word	0x2402d7e8
 805792c:	2402d8dc 	.word	0x2402d8dc
 8057930:	2402d7ec 	.word	0x2402d7ec

08057934 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8057934:	b580      	push	{r7, lr}
 8057936:	b08a      	sub	sp, #40	@ 0x28
 8057938:	af00      	add	r7, sp, #0
 805793a:	6078      	str	r0, [r7, #4]
 805793c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 805793e:	687b      	ldr	r3, [r7, #4]
 8057940:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8057942:	2301      	movs	r3, #1
 8057944:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8057946:	687b      	ldr	r3, [r7, #4]
 8057948:	2b00      	cmp	r3, #0
 805794a:	f000 80aa 	beq.w	8057aa2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 805794e:	6a3b      	ldr	r3, [r7, #32]
 8057950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8057952:	2b00      	cmp	r3, #0
 8057954:	d10d      	bne.n	8057972 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 8057956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805795a:	b672      	cpsid	i
 805795c:	f383 8811 	msr	BASEPRI, r3
 8057960:	f3bf 8f6f 	isb	sy
 8057964:	f3bf 8f4f 	dsb	sy
 8057968:	b662      	cpsie	i
 805796a:	613b      	str	r3, [r7, #16]
}
 805796c:	bf00      	nop
 805796e:	bf00      	nop
 8057970:	e7fd      	b.n	805796e <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8057972:	6a3b      	ldr	r3, [r7, #32]
 8057974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8057976:	683a      	ldr	r2, [r7, #0]
 8057978:	429a      	cmp	r2, r3
 805797a:	d902      	bls.n	8057982 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 805797c:	683b      	ldr	r3, [r7, #0]
 805797e:	627b      	str	r3, [r7, #36]	@ 0x24
 8057980:	e002      	b.n	8057988 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8057982:	6a3b      	ldr	r3, [r7, #32]
 8057984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8057986:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8057988:	6a3b      	ldr	r3, [r7, #32]
 805798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805798c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 805798e:	429a      	cmp	r2, r3
 8057990:	f000 8087 	beq.w	8057aa2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8057994:	6a3b      	ldr	r3, [r7, #32]
 8057996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8057998:	69fa      	ldr	r2, [r7, #28]
 805799a:	429a      	cmp	r2, r3
 805799c:	f040 8081 	bne.w	8057aa2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80579a0:	4b42      	ldr	r3, [pc, #264]	@ (8057aac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80579a2:	681b      	ldr	r3, [r3, #0]
 80579a4:	6a3a      	ldr	r2, [r7, #32]
 80579a6:	429a      	cmp	r2, r3
 80579a8:	d10d      	bne.n	80579c6 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 80579aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80579ae:	b672      	cpsid	i
 80579b0:	f383 8811 	msr	BASEPRI, r3
 80579b4:	f3bf 8f6f 	isb	sy
 80579b8:	f3bf 8f4f 	dsb	sy
 80579bc:	b662      	cpsie	i
 80579be:	60fb      	str	r3, [r7, #12]
}
 80579c0:	bf00      	nop
 80579c2:	bf00      	nop
 80579c4:	e7fd      	b.n	80579c2 <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80579c6:	6a3b      	ldr	r3, [r7, #32]
 80579c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80579ca:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80579cc:	6a3b      	ldr	r3, [r7, #32]
 80579ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80579d0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80579d2:	6a3b      	ldr	r3, [r7, #32]
 80579d4:	699b      	ldr	r3, [r3, #24]
 80579d6:	2b00      	cmp	r3, #0
 80579d8:	db04      	blt.n	80579e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80579da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80579dc:	f1c3 0207 	rsb	r2, r3, #7
 80579e0:	6a3b      	ldr	r3, [r7, #32]
 80579e2:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80579e4:	6a3b      	ldr	r3, [r7, #32]
 80579e6:	6959      	ldr	r1, [r3, #20]
 80579e8:	69ba      	ldr	r2, [r7, #24]
 80579ea:	4613      	mov	r3, r2
 80579ec:	009b      	lsls	r3, r3, #2
 80579ee:	4413      	add	r3, r2
 80579f0:	009b      	lsls	r3, r3, #2
 80579f2:	4a2f      	ldr	r2, [pc, #188]	@ (8057ab0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80579f4:	4413      	add	r3, r2
 80579f6:	4299      	cmp	r1, r3
 80579f8:	d153      	bne.n	8057aa2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80579fa:	6a3b      	ldr	r3, [r7, #32]
 80579fc:	3304      	adds	r3, #4
 80579fe:	4618      	mov	r0, r3
 8057a00:	f7fd fa74 	bl	8054eec <uxListRemove>
 8057a04:	4603      	mov	r3, r0
 8057a06:	2b00      	cmp	r3, #0
 8057a08:	d10a      	bne.n	8057a20 <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8057a0a:	6a3b      	ldr	r3, [r7, #32]
 8057a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057a0e:	2201      	movs	r2, #1
 8057a10:	fa02 f303 	lsl.w	r3, r2, r3
 8057a14:	43da      	mvns	r2, r3
 8057a16:	4b27      	ldr	r3, [pc, #156]	@ (8057ab4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8057a18:	681b      	ldr	r3, [r3, #0]
 8057a1a:	4013      	ands	r3, r2
 8057a1c:	4a25      	ldr	r2, [pc, #148]	@ (8057ab4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8057a1e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8057a20:	6a3b      	ldr	r3, [r7, #32]
 8057a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057a24:	2201      	movs	r2, #1
 8057a26:	409a      	lsls	r2, r3
 8057a28:	4b22      	ldr	r3, [pc, #136]	@ (8057ab4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8057a2a:	681b      	ldr	r3, [r3, #0]
 8057a2c:	4313      	orrs	r3, r2
 8057a2e:	4a21      	ldr	r2, [pc, #132]	@ (8057ab4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8057a30:	6013      	str	r3, [r2, #0]
 8057a32:	6a3b      	ldr	r3, [r7, #32]
 8057a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057a36:	491e      	ldr	r1, [pc, #120]	@ (8057ab0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8057a38:	4613      	mov	r3, r2
 8057a3a:	009b      	lsls	r3, r3, #2
 8057a3c:	4413      	add	r3, r2
 8057a3e:	009b      	lsls	r3, r3, #2
 8057a40:	440b      	add	r3, r1
 8057a42:	3304      	adds	r3, #4
 8057a44:	681b      	ldr	r3, [r3, #0]
 8057a46:	617b      	str	r3, [r7, #20]
 8057a48:	6a3b      	ldr	r3, [r7, #32]
 8057a4a:	697a      	ldr	r2, [r7, #20]
 8057a4c:	609a      	str	r2, [r3, #8]
 8057a4e:	697b      	ldr	r3, [r7, #20]
 8057a50:	689a      	ldr	r2, [r3, #8]
 8057a52:	6a3b      	ldr	r3, [r7, #32]
 8057a54:	60da      	str	r2, [r3, #12]
 8057a56:	697b      	ldr	r3, [r7, #20]
 8057a58:	689b      	ldr	r3, [r3, #8]
 8057a5a:	6a3a      	ldr	r2, [r7, #32]
 8057a5c:	3204      	adds	r2, #4
 8057a5e:	605a      	str	r2, [r3, #4]
 8057a60:	6a3b      	ldr	r3, [r7, #32]
 8057a62:	1d1a      	adds	r2, r3, #4
 8057a64:	697b      	ldr	r3, [r7, #20]
 8057a66:	609a      	str	r2, [r3, #8]
 8057a68:	6a3b      	ldr	r3, [r7, #32]
 8057a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057a6c:	4613      	mov	r3, r2
 8057a6e:	009b      	lsls	r3, r3, #2
 8057a70:	4413      	add	r3, r2
 8057a72:	009b      	lsls	r3, r3, #2
 8057a74:	4a0e      	ldr	r2, [pc, #56]	@ (8057ab0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8057a76:	441a      	add	r2, r3
 8057a78:	6a3b      	ldr	r3, [r7, #32]
 8057a7a:	615a      	str	r2, [r3, #20]
 8057a7c:	6a3b      	ldr	r3, [r7, #32]
 8057a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057a80:	490b      	ldr	r1, [pc, #44]	@ (8057ab0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8057a82:	4613      	mov	r3, r2
 8057a84:	009b      	lsls	r3, r3, #2
 8057a86:	4413      	add	r3, r2
 8057a88:	009b      	lsls	r3, r3, #2
 8057a8a:	440b      	add	r3, r1
 8057a8c:	681b      	ldr	r3, [r3, #0]
 8057a8e:	6a3a      	ldr	r2, [r7, #32]
 8057a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8057a92:	1c59      	adds	r1, r3, #1
 8057a94:	4806      	ldr	r0, [pc, #24]	@ (8057ab0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8057a96:	4613      	mov	r3, r2
 8057a98:	009b      	lsls	r3, r3, #2
 8057a9a:	4413      	add	r3, r2
 8057a9c:	009b      	lsls	r3, r3, #2
 8057a9e:	4403      	add	r3, r0
 8057aa0:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8057aa2:	bf00      	nop
 8057aa4:	3728      	adds	r7, #40	@ 0x28
 8057aa6:	46bd      	mov	sp, r7
 8057aa8:	bd80      	pop	{r7, pc}
 8057aaa:	bf00      	nop
 8057aac:	2402d7e8 	.word	0x2402d7e8
 8057ab0:	2402d7ec 	.word	0x2402d7ec
 8057ab4:	2402d8dc 	.word	0x2402d8dc

08057ab8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8057ab8:	b480      	push	{r7}
 8057aba:	b083      	sub	sp, #12
 8057abc:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8057abe:	4b09      	ldr	r3, [pc, #36]	@ (8057ae4 <pvTaskIncrementMutexHeldCount+0x2c>)
 8057ac0:	681b      	ldr	r3, [r3, #0]
 8057ac2:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8057ac4:	687b      	ldr	r3, [r7, #4]
 8057ac6:	2b00      	cmp	r3, #0
 8057ac8:	d004      	beq.n	8057ad4 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8057aca:	687b      	ldr	r3, [r7, #4]
 8057acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8057ace:	1c5a      	adds	r2, r3, #1
 8057ad0:	687b      	ldr	r3, [r7, #4]
 8057ad2:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8057ad4:	687b      	ldr	r3, [r7, #4]
    }
 8057ad6:	4618      	mov	r0, r3
 8057ad8:	370c      	adds	r7, #12
 8057ada:	46bd      	mov	sp, r7
 8057adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057ae0:	4770      	bx	lr
 8057ae2:	bf00      	nop
 8057ae4:	2402d7e8 	.word	0x2402d7e8

08057ae8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8057ae8:	b580      	push	{r7, lr}
 8057aea:	b088      	sub	sp, #32
 8057aec:	af00      	add	r7, sp, #0
 8057aee:	60f8      	str	r0, [r7, #12]
 8057af0:	60b9      	str	r1, [r7, #8]
 8057af2:	607a      	str	r2, [r7, #4]
 8057af4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8057af6:	2300      	movs	r3, #0
 8057af8:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057afa:	68fb      	ldr	r3, [r7, #12]
 8057afc:	2b00      	cmp	r3, #0
 8057afe:	d00d      	beq.n	8057b1c <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8057b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057b04:	b672      	cpsid	i
 8057b06:	f383 8811 	msr	BASEPRI, r3
 8057b0a:	f3bf 8f6f 	isb	sy
 8057b0e:	f3bf 8f4f 	dsb	sy
 8057b12:	b662      	cpsie	i
 8057b14:	613b      	str	r3, [r7, #16]
}
 8057b16:	bf00      	nop
 8057b18:	bf00      	nop
 8057b1a:	e7fd      	b.n	8057b18 <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8057b1c:	f7fe feec 	bl	80568f8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8057b20:	f000 ff08 	bl	8058934 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8057b24:	4b3b      	ldr	r3, [pc, #236]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057b26:	681a      	ldr	r2, [r3, #0]
 8057b28:	68fb      	ldr	r3, [r7, #12]
 8057b2a:	4413      	add	r3, r2
 8057b2c:	3358      	adds	r3, #88	@ 0x58
 8057b2e:	781b      	ldrb	r3, [r3, #0]
 8057b30:	b2db      	uxtb	r3, r3
 8057b32:	2b02      	cmp	r3, #2
 8057b34:	d01a      	beq.n	8057b6c <xTaskGenericNotifyWait+0x84>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8057b36:	4b37      	ldr	r3, [pc, #220]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057b38:	681a      	ldr	r2, [r3, #0]
 8057b3a:	68fb      	ldr	r3, [r7, #12]
 8057b3c:	3314      	adds	r3, #20
 8057b3e:	009b      	lsls	r3, r3, #2
 8057b40:	4413      	add	r3, r2
 8057b42:	6859      	ldr	r1, [r3, #4]
 8057b44:	68bb      	ldr	r3, [r7, #8]
 8057b46:	43db      	mvns	r3, r3
 8057b48:	4019      	ands	r1, r3
 8057b4a:	68fb      	ldr	r3, [r7, #12]
 8057b4c:	3314      	adds	r3, #20
 8057b4e:	009b      	lsls	r3, r3, #2
 8057b50:	4413      	add	r3, r2
 8057b52:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8057b54:	4b2f      	ldr	r3, [pc, #188]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057b56:	681a      	ldr	r2, [r3, #0]
 8057b58:	68fb      	ldr	r3, [r7, #12]
 8057b5a:	4413      	add	r3, r2
 8057b5c:	3358      	adds	r3, #88	@ 0x58
 8057b5e:	2201      	movs	r2, #1
 8057b60:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8057b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8057b64:	2b00      	cmp	r3, #0
 8057b66:	d001      	beq.n	8057b6c <xTaskGenericNotifyWait+0x84>
                    {
                        xShouldBlock = pdTRUE;
 8057b68:	2301      	movs	r3, #1
 8057b6a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8057b6c:	f000 ff18 	bl	80589a0 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8057b70:	69bb      	ldr	r3, [r7, #24]
 8057b72:	2b01      	cmp	r3, #1
 8057b74:	d103      	bne.n	8057b7e <xTaskGenericNotifyWait+0x96>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057b76:	2101      	movs	r1, #1
 8057b78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8057b7a:	f000 f987 	bl	8057e8c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8057b7e:	f7fe fec9 	bl	8056914 <xTaskResumeAll>
 8057b82:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8057b84:	69bb      	ldr	r3, [r7, #24]
 8057b86:	2b01      	cmp	r3, #1
 8057b88:	d10a      	bne.n	8057ba0 <xTaskGenericNotifyWait+0xb8>
 8057b8a:	697b      	ldr	r3, [r7, #20]
 8057b8c:	2b00      	cmp	r3, #0
 8057b8e:	d107      	bne.n	8057ba0 <xTaskGenericNotifyWait+0xb8>
        {
            taskYIELD_WITHIN_API();
 8057b90:	4b21      	ldr	r3, [pc, #132]	@ (8057c18 <xTaskGenericNotifyWait+0x130>)
 8057b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8057b96:	601a      	str	r2, [r3, #0]
 8057b98:	f3bf 8f4f 	dsb	sy
 8057b9c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8057ba0:	f000 fec8 	bl	8058934 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8057ba4:	683b      	ldr	r3, [r7, #0]
 8057ba6:	2b00      	cmp	r3, #0
 8057ba8:	d008      	beq.n	8057bbc <xTaskGenericNotifyWait+0xd4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8057baa:	4b1a      	ldr	r3, [pc, #104]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057bac:	681a      	ldr	r2, [r3, #0]
 8057bae:	68fb      	ldr	r3, [r7, #12]
 8057bb0:	3314      	adds	r3, #20
 8057bb2:	009b      	lsls	r3, r3, #2
 8057bb4:	4413      	add	r3, r2
 8057bb6:	685a      	ldr	r2, [r3, #4]
 8057bb8:	683b      	ldr	r3, [r7, #0]
 8057bba:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8057bbc:	4b15      	ldr	r3, [pc, #84]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057bbe:	681a      	ldr	r2, [r3, #0]
 8057bc0:	68fb      	ldr	r3, [r7, #12]
 8057bc2:	4413      	add	r3, r2
 8057bc4:	3358      	adds	r3, #88	@ 0x58
 8057bc6:	781b      	ldrb	r3, [r3, #0]
 8057bc8:	b2db      	uxtb	r3, r3
 8057bca:	2b02      	cmp	r3, #2
 8057bcc:	d002      	beq.n	8057bd4 <xTaskGenericNotifyWait+0xec>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8057bce:	2300      	movs	r3, #0
 8057bd0:	61fb      	str	r3, [r7, #28]
 8057bd2:	e010      	b.n	8057bf6 <xTaskGenericNotifyWait+0x10e>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8057bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057bd6:	681a      	ldr	r2, [r3, #0]
 8057bd8:	68fb      	ldr	r3, [r7, #12]
 8057bda:	3314      	adds	r3, #20
 8057bdc:	009b      	lsls	r3, r3, #2
 8057bde:	4413      	add	r3, r2
 8057be0:	6859      	ldr	r1, [r3, #4]
 8057be2:	687b      	ldr	r3, [r7, #4]
 8057be4:	43db      	mvns	r3, r3
 8057be6:	4019      	ands	r1, r3
 8057be8:	68fb      	ldr	r3, [r7, #12]
 8057bea:	3314      	adds	r3, #20
 8057bec:	009b      	lsls	r3, r3, #2
 8057bee:	4413      	add	r3, r2
 8057bf0:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8057bf2:	2301      	movs	r3, #1
 8057bf4:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8057bf6:	4b07      	ldr	r3, [pc, #28]	@ (8057c14 <xTaskGenericNotifyWait+0x12c>)
 8057bf8:	681a      	ldr	r2, [r3, #0]
 8057bfa:	68fb      	ldr	r3, [r7, #12]
 8057bfc:	4413      	add	r3, r2
 8057bfe:	3358      	adds	r3, #88	@ 0x58
 8057c00:	2200      	movs	r2, #0
 8057c02:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8057c04:	f000 fecc 	bl	80589a0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8057c08:	69fb      	ldr	r3, [r7, #28]
    }
 8057c0a:	4618      	mov	r0, r3
 8057c0c:	3720      	adds	r7, #32
 8057c0e:	46bd      	mov	sp, r7
 8057c10:	bd80      	pop	{r7, pc}
 8057c12:	bf00      	nop
 8057c14:	2402d7e8 	.word	0x2402d7e8
 8057c18:	e000ed04 	.word	0xe000ed04

08057c1c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8057c1c:	b580      	push	{r7, lr}
 8057c1e:	b08e      	sub	sp, #56	@ 0x38
 8057c20:	af00      	add	r7, sp, #0
 8057c22:	60f8      	str	r0, [r7, #12]
 8057c24:	60b9      	str	r1, [r7, #8]
 8057c26:	607a      	str	r2, [r7, #4]
 8057c28:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8057c2a:	2301      	movs	r3, #1
 8057c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057c2e:	68bb      	ldr	r3, [r7, #8]
 8057c30:	2b00      	cmp	r3, #0
 8057c32:	d00d      	beq.n	8057c50 <xTaskGenericNotify+0x34>
    __asm volatile
 8057c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057c38:	b672      	cpsid	i
 8057c3a:	f383 8811 	msr	BASEPRI, r3
 8057c3e:	f3bf 8f6f 	isb	sy
 8057c42:	f3bf 8f4f 	dsb	sy
 8057c46:	b662      	cpsie	i
 8057c48:	623b      	str	r3, [r7, #32]
}
 8057c4a:	bf00      	nop
 8057c4c:	bf00      	nop
 8057c4e:	e7fd      	b.n	8057c4c <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 8057c50:	68fb      	ldr	r3, [r7, #12]
 8057c52:	2b00      	cmp	r3, #0
 8057c54:	d10d      	bne.n	8057c72 <xTaskGenericNotify+0x56>
    __asm volatile
 8057c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057c5a:	b672      	cpsid	i
 8057c5c:	f383 8811 	msr	BASEPRI, r3
 8057c60:	f3bf 8f6f 	isb	sy
 8057c64:	f3bf 8f4f 	dsb	sy
 8057c68:	b662      	cpsie	i
 8057c6a:	61fb      	str	r3, [r7, #28]
}
 8057c6c:	bf00      	nop
 8057c6e:	bf00      	nop
 8057c70:	e7fd      	b.n	8057c6e <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 8057c72:	68fb      	ldr	r3, [r7, #12]
 8057c74:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8057c76:	f000 fe5d 	bl	8058934 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8057c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8057c7c:	2b00      	cmp	r3, #0
 8057c7e:	d007      	beq.n	8057c90 <xTaskGenericNotify+0x74>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8057c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057c82:	68bb      	ldr	r3, [r7, #8]
 8057c84:	3314      	adds	r3, #20
 8057c86:	009b      	lsls	r3, r3, #2
 8057c88:	4413      	add	r3, r2
 8057c8a:	685a      	ldr	r2, [r3, #4]
 8057c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8057c8e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057c92:	68bb      	ldr	r3, [r7, #8]
 8057c94:	4413      	add	r3, r2
 8057c96:	3358      	adds	r3, #88	@ 0x58
 8057c98:	781b      	ldrb	r3, [r3, #0]
 8057c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057ca0:	68bb      	ldr	r3, [r7, #8]
 8057ca2:	4413      	add	r3, r2
 8057ca4:	3358      	adds	r3, #88	@ 0x58
 8057ca6:	2202      	movs	r2, #2
 8057ca8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8057caa:	78fb      	ldrb	r3, [r7, #3]
 8057cac:	2b04      	cmp	r3, #4
 8057cae:	d841      	bhi.n	8057d34 <xTaskGenericNotify+0x118>
 8057cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8057cb8 <xTaskGenericNotify+0x9c>)
 8057cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8057cb6:	bf00      	nop
 8057cb8:	08057d59 	.word	0x08057d59
 8057cbc:	08057ccd 	.word	0x08057ccd
 8057cc0:	08057ceb 	.word	0x08057ceb
 8057cc4:	08057d07 	.word	0x08057d07
 8057cc8:	08057d17 	.word	0x08057d17
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8057ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057cce:	68bb      	ldr	r3, [r7, #8]
 8057cd0:	3314      	adds	r3, #20
 8057cd2:	009b      	lsls	r3, r3, #2
 8057cd4:	4413      	add	r3, r2
 8057cd6:	685a      	ldr	r2, [r3, #4]
 8057cd8:	687b      	ldr	r3, [r7, #4]
 8057cda:	431a      	orrs	r2, r3
 8057cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8057cde:	68bb      	ldr	r3, [r7, #8]
 8057ce0:	3314      	adds	r3, #20
 8057ce2:	009b      	lsls	r3, r3, #2
 8057ce4:	440b      	add	r3, r1
 8057ce6:	605a      	str	r2, [r3, #4]
                    break;
 8057ce8:	e039      	b.n	8057d5e <xTaskGenericNotify+0x142>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8057cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057cec:	68bb      	ldr	r3, [r7, #8]
 8057cee:	3314      	adds	r3, #20
 8057cf0:	009b      	lsls	r3, r3, #2
 8057cf2:	4413      	add	r3, r2
 8057cf4:	685b      	ldr	r3, [r3, #4]
 8057cf6:	1c5a      	adds	r2, r3, #1
 8057cf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8057cfa:	68bb      	ldr	r3, [r7, #8]
 8057cfc:	3314      	adds	r3, #20
 8057cfe:	009b      	lsls	r3, r3, #2
 8057d00:	440b      	add	r3, r1
 8057d02:	605a      	str	r2, [r3, #4]
                    break;
 8057d04:	e02b      	b.n	8057d5e <xTaskGenericNotify+0x142>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057d08:	68bb      	ldr	r3, [r7, #8]
 8057d0a:	3314      	adds	r3, #20
 8057d0c:	009b      	lsls	r3, r3, #2
 8057d0e:	4413      	add	r3, r2
 8057d10:	687a      	ldr	r2, [r7, #4]
 8057d12:	605a      	str	r2, [r3, #4]
                    break;
 8057d14:	e023      	b.n	8057d5e <xTaskGenericNotify+0x142>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8057d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8057d1a:	2b02      	cmp	r3, #2
 8057d1c:	d007      	beq.n	8057d2e <xTaskGenericNotify+0x112>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057d20:	68bb      	ldr	r3, [r7, #8]
 8057d22:	3314      	adds	r3, #20
 8057d24:	009b      	lsls	r3, r3, #2
 8057d26:	4413      	add	r3, r2
 8057d28:	687a      	ldr	r2, [r7, #4]
 8057d2a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8057d2c:	e017      	b.n	8057d5e <xTaskGenericNotify+0x142>
                        xReturn = pdFAIL;
 8057d2e:	2300      	movs	r3, #0
 8057d30:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8057d32:	e014      	b.n	8057d5e <xTaskGenericNotify+0x142>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8057d34:	4b50      	ldr	r3, [pc, #320]	@ (8057e78 <xTaskGenericNotify+0x25c>)
 8057d36:	681b      	ldr	r3, [r3, #0]
 8057d38:	2b00      	cmp	r3, #0
 8057d3a:	d00f      	beq.n	8057d5c <xTaskGenericNotify+0x140>
    __asm volatile
 8057d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057d40:	b672      	cpsid	i
 8057d42:	f383 8811 	msr	BASEPRI, r3
 8057d46:	f3bf 8f6f 	isb	sy
 8057d4a:	f3bf 8f4f 	dsb	sy
 8057d4e:	b662      	cpsie	i
 8057d50:	61bb      	str	r3, [r7, #24]
}
 8057d52:	bf00      	nop
 8057d54:	bf00      	nop
 8057d56:	e7fd      	b.n	8057d54 <xTaskGenericNotify+0x138>
                    break;
 8057d58:	bf00      	nop
 8057d5a:	e000      	b.n	8057d5e <xTaskGenericNotify+0x142>

                    break;
 8057d5c:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8057d62:	2b01      	cmp	r3, #1
 8057d64:	f040 8081 	bne.w	8057e6a <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d6a:	695b      	ldr	r3, [r3, #20]
 8057d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8057d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d70:	689b      	ldr	r3, [r3, #8]
 8057d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057d74:	68d2      	ldr	r2, [r2, #12]
 8057d76:	609a      	str	r2, [r3, #8]
 8057d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d7a:	68db      	ldr	r3, [r3, #12]
 8057d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057d7e:	6892      	ldr	r2, [r2, #8]
 8057d80:	605a      	str	r2, [r3, #4]
 8057d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8057d84:	685a      	ldr	r2, [r3, #4]
 8057d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d88:	3304      	adds	r3, #4
 8057d8a:	429a      	cmp	r2, r3
 8057d8c:	d103      	bne.n	8057d96 <xTaskGenericNotify+0x17a>
 8057d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d90:	68da      	ldr	r2, [r3, #12]
 8057d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8057d94:	605a      	str	r2, [r3, #4]
 8057d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057d98:	2200      	movs	r2, #0
 8057d9a:	615a      	str	r2, [r3, #20]
 8057d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8057d9e:	681b      	ldr	r3, [r3, #0]
 8057da0:	1e5a      	subs	r2, r3, #1
 8057da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8057da4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8057da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057daa:	2201      	movs	r2, #1
 8057dac:	409a      	lsls	r2, r3
 8057dae:	4b33      	ldr	r3, [pc, #204]	@ (8057e7c <xTaskGenericNotify+0x260>)
 8057db0:	681b      	ldr	r3, [r3, #0]
 8057db2:	4313      	orrs	r3, r2
 8057db4:	4a31      	ldr	r2, [pc, #196]	@ (8057e7c <xTaskGenericNotify+0x260>)
 8057db6:	6013      	str	r3, [r2, #0]
 8057db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057dbc:	4930      	ldr	r1, [pc, #192]	@ (8057e80 <xTaskGenericNotify+0x264>)
 8057dbe:	4613      	mov	r3, r2
 8057dc0:	009b      	lsls	r3, r3, #2
 8057dc2:	4413      	add	r3, r2
 8057dc4:	009b      	lsls	r3, r3, #2
 8057dc6:	440b      	add	r3, r1
 8057dc8:	3304      	adds	r3, #4
 8057dca:	681b      	ldr	r3, [r3, #0]
 8057dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8057dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8057dd2:	609a      	str	r2, [r3, #8]
 8057dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8057dd6:	689a      	ldr	r2, [r3, #8]
 8057dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057dda:	60da      	str	r2, [r3, #12]
 8057ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8057dde:	689b      	ldr	r3, [r3, #8]
 8057de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057de2:	3204      	adds	r2, #4
 8057de4:	605a      	str	r2, [r3, #4]
 8057de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057de8:	1d1a      	adds	r2, r3, #4
 8057dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8057dec:	609a      	str	r2, [r3, #8]
 8057dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057df2:	4613      	mov	r3, r2
 8057df4:	009b      	lsls	r3, r3, #2
 8057df6:	4413      	add	r3, r2
 8057df8:	009b      	lsls	r3, r3, #2
 8057dfa:	4a21      	ldr	r2, [pc, #132]	@ (8057e80 <xTaskGenericNotify+0x264>)
 8057dfc:	441a      	add	r2, r3
 8057dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057e00:	615a      	str	r2, [r3, #20]
 8057e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057e06:	491e      	ldr	r1, [pc, #120]	@ (8057e80 <xTaskGenericNotify+0x264>)
 8057e08:	4613      	mov	r3, r2
 8057e0a:	009b      	lsls	r3, r3, #2
 8057e0c:	4413      	add	r3, r2
 8057e0e:	009b      	lsls	r3, r3, #2
 8057e10:	440b      	add	r3, r1
 8057e12:	681b      	ldr	r3, [r3, #0]
 8057e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8057e16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8057e18:	1c59      	adds	r1, r3, #1
 8057e1a:	4819      	ldr	r0, [pc, #100]	@ (8057e80 <xTaskGenericNotify+0x264>)
 8057e1c:	4613      	mov	r3, r2
 8057e1e:	009b      	lsls	r3, r3, #2
 8057e20:	4413      	add	r3, r2
 8057e22:	009b      	lsls	r3, r3, #2
 8057e24:	4403      	add	r3, r0
 8057e26:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8057e2c:	2b00      	cmp	r3, #0
 8057e2e:	d00d      	beq.n	8057e4c <xTaskGenericNotify+0x230>
    __asm volatile
 8057e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8057e34:	b672      	cpsid	i
 8057e36:	f383 8811 	msr	BASEPRI, r3
 8057e3a:	f3bf 8f6f 	isb	sy
 8057e3e:	f3bf 8f4f 	dsb	sy
 8057e42:	b662      	cpsie	i
 8057e44:	617b      	str	r3, [r7, #20]
}
 8057e46:	bf00      	nop
 8057e48:	bf00      	nop
 8057e4a:	e7fd      	b.n	8057e48 <xTaskGenericNotify+0x22c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8057e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8057e84 <xTaskGenericNotify+0x268>)
 8057e4e:	681b      	ldr	r3, [r3, #0]
 8057e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8057e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8057e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057e56:	429a      	cmp	r2, r3
 8057e58:	d207      	bcs.n	8057e6a <xTaskGenericNotify+0x24e>
 8057e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8057e88 <xTaskGenericNotify+0x26c>)
 8057e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8057e60:	601a      	str	r2, [r3, #0]
 8057e62:	f3bf 8f4f 	dsb	sy
 8057e66:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8057e6a:	f000 fd99 	bl	80589a0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8057e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8057e70:	4618      	mov	r0, r3
 8057e72:	3738      	adds	r7, #56	@ 0x38
 8057e74:	46bd      	mov	sp, r7
 8057e76:	bd80      	pop	{r7, pc}
 8057e78:	2402d8d8 	.word	0x2402d8d8
 8057e7c:	2402d8dc 	.word	0x2402d8dc
 8057e80:	2402d7ec 	.word	0x2402d7ec
 8057e84:	2402d7e8 	.word	0x2402d7e8
 8057e88:	e000ed04 	.word	0xe000ed04

08057e8c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8057e8c:	b580      	push	{r7, lr}
 8057e8e:	b086      	sub	sp, #24
 8057e90:	af00      	add	r7, sp, #0
 8057e92:	6078      	str	r0, [r7, #4]
 8057e94:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8057e96:	4b22      	ldr	r3, [pc, #136]	@ (8057f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8057e98:	681b      	ldr	r3, [r3, #0]
 8057e9a:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8057e9c:	4b21      	ldr	r3, [pc, #132]	@ (8057f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8057e9e:	681b      	ldr	r3, [r3, #0]
 8057ea0:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8057ea2:	4b21      	ldr	r3, [pc, #132]	@ (8057f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8057ea4:	681b      	ldr	r3, [r3, #0]
 8057ea6:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057ea8:	4b20      	ldr	r3, [pc, #128]	@ (8057f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8057eaa:	681b      	ldr	r3, [r3, #0]
 8057eac:	3304      	adds	r3, #4
 8057eae:	4618      	mov	r0, r3
 8057eb0:	f7fd f81c 	bl	8054eec <uxListRemove>
 8057eb4:	4603      	mov	r3, r0
 8057eb6:	2b00      	cmp	r3, #0
 8057eb8:	d10b      	bne.n	8057ed2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8057eba:	4b1c      	ldr	r3, [pc, #112]	@ (8057f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8057ebc:	681b      	ldr	r3, [r3, #0]
 8057ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8057ec0:	2201      	movs	r2, #1
 8057ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8057ec6:	43da      	mvns	r2, r3
 8057ec8:	4b19      	ldr	r3, [pc, #100]	@ (8057f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8057eca:	681b      	ldr	r3, [r3, #0]
 8057ecc:	4013      	ands	r3, r2
 8057ece:	4a18      	ldr	r2, [pc, #96]	@ (8057f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8057ed0:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8057ed2:	697a      	ldr	r2, [r7, #20]
 8057ed4:	687b      	ldr	r3, [r7, #4]
 8057ed6:	4413      	add	r3, r2
 8057ed8:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8057eda:	4b14      	ldr	r3, [pc, #80]	@ (8057f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8057edc:	681b      	ldr	r3, [r3, #0]
 8057ede:	68ba      	ldr	r2, [r7, #8]
 8057ee0:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8057ee2:	68ba      	ldr	r2, [r7, #8]
 8057ee4:	697b      	ldr	r3, [r7, #20]
 8057ee6:	429a      	cmp	r2, r3
 8057ee8:	d207      	bcs.n	8057efa <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8057eea:	4b10      	ldr	r3, [pc, #64]	@ (8057f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8057eec:	681b      	ldr	r3, [r3, #0]
 8057eee:	3304      	adds	r3, #4
 8057ef0:	4619      	mov	r1, r3
 8057ef2:	68f8      	ldr	r0, [r7, #12]
 8057ef4:	f7fc ffc1 	bl	8054e7a <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8057ef8:	e00e      	b.n	8057f18 <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8057efa:	4b0c      	ldr	r3, [pc, #48]	@ (8057f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8057efc:	681b      	ldr	r3, [r3, #0]
 8057efe:	3304      	adds	r3, #4
 8057f00:	4619      	mov	r1, r3
 8057f02:	6938      	ldr	r0, [r7, #16]
 8057f04:	f7fc ffb9 	bl	8054e7a <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8057f08:	4b0a      	ldr	r3, [pc, #40]	@ (8057f34 <prvAddCurrentTaskToDelayedList+0xa8>)
 8057f0a:	681b      	ldr	r3, [r3, #0]
 8057f0c:	68ba      	ldr	r2, [r7, #8]
 8057f0e:	429a      	cmp	r2, r3
 8057f10:	d202      	bcs.n	8057f18 <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 8057f12:	4a08      	ldr	r2, [pc, #32]	@ (8057f34 <prvAddCurrentTaskToDelayedList+0xa8>)
 8057f14:	68bb      	ldr	r3, [r7, #8]
 8057f16:	6013      	str	r3, [r2, #0]
}
 8057f18:	bf00      	nop
 8057f1a:	3718      	adds	r7, #24
 8057f1c:	46bd      	mov	sp, r7
 8057f1e:	bd80      	pop	{r7, pc}
 8057f20:	2402d8d8 	.word	0x2402d8d8
 8057f24:	2402d8a0 	.word	0x2402d8a0
 8057f28:	2402d8a4 	.word	0x2402d8a4
 8057f2c:	2402d7e8 	.word	0x2402d7e8
 8057f30:	2402d8dc 	.word	0x2402d8dc
 8057f34:	2402d8f4 	.word	0x2402d8f4

08057f38 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8057f38:	b480      	push	{r7}
 8057f3a:	b085      	sub	sp, #20
 8057f3c:	af00      	add	r7, sp, #0
 8057f3e:	60f8      	str	r0, [r7, #12]
 8057f40:	60b9      	str	r1, [r7, #8]
 8057f42:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8057f44:	68fb      	ldr	r3, [r7, #12]
 8057f46:	4a07      	ldr	r2, [pc, #28]	@ (8057f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8057f48:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8057f4a:	68bb      	ldr	r3, [r7, #8]
 8057f4c:	4a06      	ldr	r2, [pc, #24]	@ (8057f68 <vApplicationGetIdleTaskMemory+0x30>)
 8057f4e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8057f50:	687b      	ldr	r3, [r7, #4]
 8057f52:	2280      	movs	r2, #128	@ 0x80
 8057f54:	601a      	str	r2, [r3, #0]
    }
 8057f56:	bf00      	nop
 8057f58:	3714      	adds	r7, #20
 8057f5a:	46bd      	mov	sp, r7
 8057f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057f60:	4770      	bx	lr
 8057f62:	bf00      	nop
 8057f64:	2402d900 	.word	0x2402d900
 8057f68:	2402d95c 	.word	0x2402d95c

08057f6c <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8057f6c:	b480      	push	{r7}
 8057f6e:	b085      	sub	sp, #20
 8057f70:	af00      	add	r7, sp, #0
 8057f72:	60f8      	str	r0, [r7, #12]
 8057f74:	60b9      	str	r1, [r7, #8]
 8057f76:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8057f78:	68fb      	ldr	r3, [r7, #12]
 8057f7a:	4a07      	ldr	r2, [pc, #28]	@ (8057f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8057f7c:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8057f7e:	68bb      	ldr	r3, [r7, #8]
 8057f80:	4a06      	ldr	r2, [pc, #24]	@ (8057f9c <vApplicationGetTimerTaskMemory+0x30>)
 8057f82:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8057f84:	687b      	ldr	r3, [r7, #4]
 8057f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8057f8a:	601a      	str	r2, [r3, #0]
    }
 8057f8c:	bf00      	nop
 8057f8e:	3714      	adds	r7, #20
 8057f90:	46bd      	mov	sp, r7
 8057f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057f96:	4770      	bx	lr
 8057f98:	2402db5c 	.word	0x2402db5c
 8057f9c:	2402dbb8 	.word	0x2402dbb8

08057fa0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8057fa0:	b580      	push	{r7, lr}
 8057fa2:	b08a      	sub	sp, #40	@ 0x28
 8057fa4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8057fa6:	2300      	movs	r3, #0
 8057fa8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8057faa:	f000 fb23 	bl	80585f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8057fae:	4b1e      	ldr	r3, [pc, #120]	@ (8058028 <xTimerCreateTimerTask+0x88>)
 8057fb0:	681b      	ldr	r3, [r3, #0]
 8057fb2:	2b00      	cmp	r3, #0
 8057fb4:	d021      	beq.n	8057ffa <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8057fb6:	2300      	movs	r3, #0
 8057fb8:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8057fba:	2300      	movs	r3, #0
 8057fbc:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8057fbe:	1d3a      	adds	r2, r7, #4
 8057fc0:	f107 0108 	add.w	r1, r7, #8
 8057fc4:	f107 030c 	add.w	r3, r7, #12
 8057fc8:	4618      	mov	r0, r3
 8057fca:	f7ff ffcf 	bl	8057f6c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8057fce:	6879      	ldr	r1, [r7, #4]
 8057fd0:	68bb      	ldr	r3, [r7, #8]
 8057fd2:	68fa      	ldr	r2, [r7, #12]
 8057fd4:	9202      	str	r2, [sp, #8]
 8057fd6:	9301      	str	r3, [sp, #4]
 8057fd8:	2302      	movs	r3, #2
 8057fda:	9300      	str	r3, [sp, #0]
 8057fdc:	2300      	movs	r3, #0
 8057fde:	460a      	mov	r2, r1
 8057fe0:	4912      	ldr	r1, [pc, #72]	@ (805802c <xTimerCreateTimerTask+0x8c>)
 8057fe2:	4813      	ldr	r0, [pc, #76]	@ (8058030 <xTimerCreateTimerTask+0x90>)
 8057fe4:	f7fe f85f 	bl	80560a6 <xTaskCreateStatic>
 8057fe8:	4603      	mov	r3, r0
 8057fea:	4a12      	ldr	r2, [pc, #72]	@ (8058034 <xTimerCreateTimerTask+0x94>)
 8057fec:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8057fee:	4b11      	ldr	r3, [pc, #68]	@ (8058034 <xTimerCreateTimerTask+0x94>)
 8057ff0:	681b      	ldr	r3, [r3, #0]
 8057ff2:	2b00      	cmp	r3, #0
 8057ff4:	d001      	beq.n	8057ffa <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8057ff6:	2301      	movs	r3, #1
 8057ff8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8057ffa:	697b      	ldr	r3, [r7, #20]
 8057ffc:	2b00      	cmp	r3, #0
 8057ffe:	d10d      	bne.n	805801c <xTimerCreateTimerTask+0x7c>
    __asm volatile
 8058000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058004:	b672      	cpsid	i
 8058006:	f383 8811 	msr	BASEPRI, r3
 805800a:	f3bf 8f6f 	isb	sy
 805800e:	f3bf 8f4f 	dsb	sy
 8058012:	b662      	cpsie	i
 8058014:	613b      	str	r3, [r7, #16]
}
 8058016:	bf00      	nop
 8058018:	bf00      	nop
 805801a:	e7fd      	b.n	8058018 <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 805801c:	697b      	ldr	r3, [r7, #20]
    }
 805801e:	4618      	mov	r0, r3
 8058020:	3718      	adds	r7, #24
 8058022:	46bd      	mov	sp, r7
 8058024:	bd80      	pop	{r7, pc}
 8058026:	bf00      	nop
 8058028:	2402dfe8 	.word	0x2402dfe8
 805802c:	08070a48 	.word	0x08070a48
 8058030:	08058245 	.word	0x08058245
 8058034:	2402dfec 	.word	0x2402dfec

08058038 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8058038:	b580      	push	{r7, lr}
 805803a:	b088      	sub	sp, #32
 805803c:	af02      	add	r7, sp, #8
 805803e:	60f8      	str	r0, [r7, #12]
 8058040:	60b9      	str	r1, [r7, #8]
 8058042:	607a      	str	r2, [r7, #4]
 8058044:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8058046:	202c      	movs	r0, #44	@ 0x2c
 8058048:	f000 fda8 	bl	8058b9c <pvPortMalloc>
 805804c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 805804e:	697b      	ldr	r3, [r7, #20]
 8058050:	2b00      	cmp	r3, #0
 8058052:	d00d      	beq.n	8058070 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8058054:	697b      	ldr	r3, [r7, #20]
 8058056:	2200      	movs	r2, #0
 8058058:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 805805c:	697b      	ldr	r3, [r7, #20]
 805805e:	9301      	str	r3, [sp, #4]
 8058060:	6a3b      	ldr	r3, [r7, #32]
 8058062:	9300      	str	r3, [sp, #0]
 8058064:	683b      	ldr	r3, [r7, #0]
 8058066:	687a      	ldr	r2, [r7, #4]
 8058068:	68b9      	ldr	r1, [r7, #8]
 805806a:	68f8      	ldr	r0, [r7, #12]
 805806c:	f000 f805 	bl	805807a <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 8058070:	697b      	ldr	r3, [r7, #20]
        }
 8058072:	4618      	mov	r0, r3
 8058074:	3718      	adds	r7, #24
 8058076:	46bd      	mov	sp, r7
 8058078:	bd80      	pop	{r7, pc}

0805807a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 805807a:	b580      	push	{r7, lr}
 805807c:	b086      	sub	sp, #24
 805807e:	af00      	add	r7, sp, #0
 8058080:	60f8      	str	r0, [r7, #12]
 8058082:	60b9      	str	r1, [r7, #8]
 8058084:	607a      	str	r2, [r7, #4]
 8058086:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8058088:	68bb      	ldr	r3, [r7, #8]
 805808a:	2b00      	cmp	r3, #0
 805808c:	d10d      	bne.n	80580aa <prvInitialiseNewTimer+0x30>
    __asm volatile
 805808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058092:	b672      	cpsid	i
 8058094:	f383 8811 	msr	BASEPRI, r3
 8058098:	f3bf 8f6f 	isb	sy
 805809c:	f3bf 8f4f 	dsb	sy
 80580a0:	b662      	cpsie	i
 80580a2:	617b      	str	r3, [r7, #20]
}
 80580a4:	bf00      	nop
 80580a6:	bf00      	nop
 80580a8:	e7fd      	b.n	80580a6 <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80580aa:	f000 faa3 	bl	80585f4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80580ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580b0:	68fa      	ldr	r2, [r7, #12]
 80580b2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80580b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580b6:	68ba      	ldr	r2, [r7, #8]
 80580b8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80580ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580bc:	683a      	ldr	r2, [r7, #0]
 80580be:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80580c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580c2:	6a3a      	ldr	r2, [r7, #32]
 80580c4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80580c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580c8:	3304      	adds	r3, #4
 80580ca:	4618      	mov	r0, r3
 80580cc:	f7fc fea4 	bl	8054e18 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80580d0:	687b      	ldr	r3, [r7, #4]
 80580d2:	2b00      	cmp	r3, #0
 80580d4:	d008      	beq.n	80580e8 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 80580d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80580dc:	f043 0304 	orr.w	r3, r3, #4
 80580e0:	b2da      	uxtb	r2, r3
 80580e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80580e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80580e8:	bf00      	nop
 80580ea:	3718      	adds	r7, #24
 80580ec:	46bd      	mov	sp, r7
 80580ee:	bd80      	pop	{r7, pc}

080580f0 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 80580f0:	b580      	push	{r7, lr}
 80580f2:	b08a      	sub	sp, #40	@ 0x28
 80580f4:	af00      	add	r7, sp, #0
 80580f6:	60f8      	str	r0, [r7, #12]
 80580f8:	60b9      	str	r1, [r7, #8]
 80580fa:	607a      	str	r2, [r7, #4]
 80580fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80580fe:	2300      	movs	r3, #0
 8058100:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8058102:	68fb      	ldr	r3, [r7, #12]
 8058104:	2b00      	cmp	r3, #0
 8058106:	d10d      	bne.n	8058124 <xTimerGenericCommandFromTask+0x34>
    __asm volatile
 8058108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805810c:	b672      	cpsid	i
 805810e:	f383 8811 	msr	BASEPRI, r3
 8058112:	f3bf 8f6f 	isb	sy
 8058116:	f3bf 8f4f 	dsb	sy
 805811a:	b662      	cpsie	i
 805811c:	623b      	str	r3, [r7, #32]
}
 805811e:	bf00      	nop
 8058120:	bf00      	nop
 8058122:	e7fd      	b.n	8058120 <xTimerGenericCommandFromTask+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8058124:	4b1d      	ldr	r3, [pc, #116]	@ (805819c <xTimerGenericCommandFromTask+0xac>)
 8058126:	681b      	ldr	r3, [r3, #0]
 8058128:	2b00      	cmp	r3, #0
 805812a:	d031      	beq.n	8058190 <xTimerGenericCommandFromTask+0xa0>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 805812c:	68bb      	ldr	r3, [r7, #8]
 805812e:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8058130:	687b      	ldr	r3, [r7, #4]
 8058132:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8058134:	68fb      	ldr	r3, [r7, #12]
 8058136:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8058138:	68bb      	ldr	r3, [r7, #8]
 805813a:	2b05      	cmp	r3, #5
 805813c:	dd0d      	ble.n	805815a <xTimerGenericCommandFromTask+0x6a>
    __asm volatile
 805813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058142:	b672      	cpsid	i
 8058144:	f383 8811 	msr	BASEPRI, r3
 8058148:	f3bf 8f6f 	isb	sy
 805814c:	f3bf 8f4f 	dsb	sy
 8058150:	b662      	cpsie	i
 8058152:	61fb      	str	r3, [r7, #28]
}
 8058154:	bf00      	nop
 8058156:	bf00      	nop
 8058158:	e7fd      	b.n	8058156 <xTimerGenericCommandFromTask+0x66>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 805815a:	68bb      	ldr	r3, [r7, #8]
 805815c:	2b05      	cmp	r3, #5
 805815e:	dc17      	bgt.n	8058190 <xTimerGenericCommandFromTask+0xa0>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8058160:	f7ff fa7e 	bl	8057660 <xTaskGetSchedulerState>
 8058164:	4603      	mov	r3, r0
 8058166:	2b02      	cmp	r3, #2
 8058168:	d109      	bne.n	805817e <xTimerGenericCommandFromTask+0x8e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 805816a:	4b0c      	ldr	r3, [pc, #48]	@ (805819c <xTimerGenericCommandFromTask+0xac>)
 805816c:	6818      	ldr	r0, [r3, #0]
 805816e:	f107 0110 	add.w	r1, r7, #16
 8058172:	2300      	movs	r3, #0
 8058174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8058176:	f7fd f88b 	bl	8055290 <xQueueGenericSend>
 805817a:	6278      	str	r0, [r7, #36]	@ 0x24
 805817c:	e008      	b.n	8058190 <xTimerGenericCommandFromTask+0xa0>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 805817e:	4b07      	ldr	r3, [pc, #28]	@ (805819c <xTimerGenericCommandFromTask+0xac>)
 8058180:	6818      	ldr	r0, [r3, #0]
 8058182:	f107 0110 	add.w	r1, r7, #16
 8058186:	2300      	movs	r3, #0
 8058188:	2200      	movs	r2, #0
 805818a:	f7fd f881 	bl	8055290 <xQueueGenericSend>
 805818e:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 8058190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8058192:	4618      	mov	r0, r3
 8058194:	3728      	adds	r7, #40	@ 0x28
 8058196:	46bd      	mov	sp, r7
 8058198:	bd80      	pop	{r7, pc}
 805819a:	bf00      	nop
 805819c:	2402dfe8 	.word	0x2402dfe8

080581a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80581a0:	b580      	push	{r7, lr}
 80581a2:	b084      	sub	sp, #16
 80581a4:	af00      	add	r7, sp, #0
 80581a6:	60f8      	str	r0, [r7, #12]
 80581a8:	60b9      	str	r1, [r7, #8]
 80581aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80581ac:	e008      	b.n	80581c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80581ae:	68fb      	ldr	r3, [r7, #12]
 80581b0:	699b      	ldr	r3, [r3, #24]
 80581b2:	68ba      	ldr	r2, [r7, #8]
 80581b4:	4413      	add	r3, r2
 80581b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80581b8:	68fb      	ldr	r3, [r7, #12]
 80581ba:	6a1b      	ldr	r3, [r3, #32]
 80581bc:	68f8      	ldr	r0, [r7, #12]
 80581be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80581c0:	68fb      	ldr	r3, [r7, #12]
 80581c2:	699a      	ldr	r2, [r3, #24]
 80581c4:	68bb      	ldr	r3, [r7, #8]
 80581c6:	18d1      	adds	r1, r2, r3
 80581c8:	68bb      	ldr	r3, [r7, #8]
 80581ca:	687a      	ldr	r2, [r7, #4]
 80581cc:	68f8      	ldr	r0, [r7, #12]
 80581ce:	f000 f8df 	bl	8058390 <prvInsertTimerInActiveList>
 80581d2:	4603      	mov	r3, r0
 80581d4:	2b00      	cmp	r3, #0
 80581d6:	d1ea      	bne.n	80581ae <prvReloadTimer+0xe>
        }
    }
 80581d8:	bf00      	nop
 80581da:	bf00      	nop
 80581dc:	3710      	adds	r7, #16
 80581de:	46bd      	mov	sp, r7
 80581e0:	bd80      	pop	{r7, pc}
	...

080581e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80581e4:	b580      	push	{r7, lr}
 80581e6:	b084      	sub	sp, #16
 80581e8:	af00      	add	r7, sp, #0
 80581ea:	6078      	str	r0, [r7, #4]
 80581ec:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80581ee:	4b14      	ldr	r3, [pc, #80]	@ (8058240 <prvProcessExpiredTimer+0x5c>)
 80581f0:	681b      	ldr	r3, [r3, #0]
 80581f2:	68db      	ldr	r3, [r3, #12]
 80581f4:	68db      	ldr	r3, [r3, #12]
 80581f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80581f8:	68fb      	ldr	r3, [r7, #12]
 80581fa:	3304      	adds	r3, #4
 80581fc:	4618      	mov	r0, r3
 80581fe:	f7fc fe75 	bl	8054eec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8058202:	68fb      	ldr	r3, [r7, #12]
 8058204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8058208:	f003 0304 	and.w	r3, r3, #4
 805820c:	2b00      	cmp	r3, #0
 805820e:	d005      	beq.n	805821c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8058210:	683a      	ldr	r2, [r7, #0]
 8058212:	6879      	ldr	r1, [r7, #4]
 8058214:	68f8      	ldr	r0, [r7, #12]
 8058216:	f7ff ffc3 	bl	80581a0 <prvReloadTimer>
 805821a:	e008      	b.n	805822e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 805821c:	68fb      	ldr	r3, [r7, #12]
 805821e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8058222:	f023 0301 	bic.w	r3, r3, #1
 8058226:	b2da      	uxtb	r2, r3
 8058228:	68fb      	ldr	r3, [r7, #12]
 805822a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 805822e:	68fb      	ldr	r3, [r7, #12]
 8058230:	6a1b      	ldr	r3, [r3, #32]
 8058232:	68f8      	ldr	r0, [r7, #12]
 8058234:	4798      	blx	r3
    }
 8058236:	bf00      	nop
 8058238:	3710      	adds	r7, #16
 805823a:	46bd      	mov	sp, r7
 805823c:	bd80      	pop	{r7, pc}
 805823e:	bf00      	nop
 8058240:	2402dfe0 	.word	0x2402dfe0

08058244 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8058244:	b580      	push	{r7, lr}
 8058246:	b084      	sub	sp, #16
 8058248:	af00      	add	r7, sp, #0
 805824a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 805824c:	f107 0308 	add.w	r3, r7, #8
 8058250:	4618      	mov	r0, r3
 8058252:	f000 f859 	bl	8058308 <prvGetNextExpireTime>
 8058256:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8058258:	68bb      	ldr	r3, [r7, #8]
 805825a:	4619      	mov	r1, r3
 805825c:	68f8      	ldr	r0, [r7, #12]
 805825e:	f000 f805 	bl	805826c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8058262:	f000 f8d7 	bl	8058414 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8058266:	bf00      	nop
 8058268:	e7f0      	b.n	805824c <prvTimerTask+0x8>
	...

0805826c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 805826c:	b580      	push	{r7, lr}
 805826e:	b084      	sub	sp, #16
 8058270:	af00      	add	r7, sp, #0
 8058272:	6078      	str	r0, [r7, #4]
 8058274:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8058276:	f7fe fb3f 	bl	80568f8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 805827a:	f107 0308 	add.w	r3, r7, #8
 805827e:	4618      	mov	r0, r3
 8058280:	f000 f866 	bl	8058350 <prvSampleTimeNow>
 8058284:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8058286:	68bb      	ldr	r3, [r7, #8]
 8058288:	2b00      	cmp	r3, #0
 805828a:	d130      	bne.n	80582ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 805828c:	683b      	ldr	r3, [r7, #0]
 805828e:	2b00      	cmp	r3, #0
 8058290:	d10a      	bne.n	80582a8 <prvProcessTimerOrBlockTask+0x3c>
 8058292:	687a      	ldr	r2, [r7, #4]
 8058294:	68fb      	ldr	r3, [r7, #12]
 8058296:	429a      	cmp	r2, r3
 8058298:	d806      	bhi.n	80582a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 805829a:	f7fe fb3b 	bl	8056914 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 805829e:	68f9      	ldr	r1, [r7, #12]
 80582a0:	6878      	ldr	r0, [r7, #4]
 80582a2:	f7ff ff9f 	bl	80581e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80582a6:	e024      	b.n	80582f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80582a8:	683b      	ldr	r3, [r7, #0]
 80582aa:	2b00      	cmp	r3, #0
 80582ac:	d008      	beq.n	80582c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80582ae:	4b13      	ldr	r3, [pc, #76]	@ (80582fc <prvProcessTimerOrBlockTask+0x90>)
 80582b0:	681b      	ldr	r3, [r3, #0]
 80582b2:	681b      	ldr	r3, [r3, #0]
 80582b4:	2b00      	cmp	r3, #0
 80582b6:	d101      	bne.n	80582bc <prvProcessTimerOrBlockTask+0x50>
 80582b8:	2301      	movs	r3, #1
 80582ba:	e000      	b.n	80582be <prvProcessTimerOrBlockTask+0x52>
 80582bc:	2300      	movs	r3, #0
 80582be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80582c0:	4b0f      	ldr	r3, [pc, #60]	@ (8058300 <prvProcessTimerOrBlockTask+0x94>)
 80582c2:	6818      	ldr	r0, [r3, #0]
 80582c4:	687a      	ldr	r2, [r7, #4]
 80582c6:	68fb      	ldr	r3, [r7, #12]
 80582c8:	1ad3      	subs	r3, r2, r3
 80582ca:	683a      	ldr	r2, [r7, #0]
 80582cc:	4619      	mov	r1, r3
 80582ce:	f7fd fe4f 	bl	8055f70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80582d2:	f7fe fb1f 	bl	8056914 <xTaskResumeAll>
 80582d6:	4603      	mov	r3, r0
 80582d8:	2b00      	cmp	r3, #0
 80582da:	d10a      	bne.n	80582f2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80582dc:	4b09      	ldr	r3, [pc, #36]	@ (8058304 <prvProcessTimerOrBlockTask+0x98>)
 80582de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80582e2:	601a      	str	r2, [r3, #0]
 80582e4:	f3bf 8f4f 	dsb	sy
 80582e8:	f3bf 8f6f 	isb	sy
    }
 80582ec:	e001      	b.n	80582f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80582ee:	f7fe fb11 	bl	8056914 <xTaskResumeAll>
    }
 80582f2:	bf00      	nop
 80582f4:	3710      	adds	r7, #16
 80582f6:	46bd      	mov	sp, r7
 80582f8:	bd80      	pop	{r7, pc}
 80582fa:	bf00      	nop
 80582fc:	2402dfe4 	.word	0x2402dfe4
 8058300:	2402dfe8 	.word	0x2402dfe8
 8058304:	e000ed04 	.word	0xe000ed04

08058308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8058308:	b480      	push	{r7}
 805830a:	b085      	sub	sp, #20
 805830c:	af00      	add	r7, sp, #0
 805830e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8058310:	4b0e      	ldr	r3, [pc, #56]	@ (805834c <prvGetNextExpireTime+0x44>)
 8058312:	681b      	ldr	r3, [r3, #0]
 8058314:	681b      	ldr	r3, [r3, #0]
 8058316:	2b00      	cmp	r3, #0
 8058318:	d101      	bne.n	805831e <prvGetNextExpireTime+0x16>
 805831a:	2201      	movs	r2, #1
 805831c:	e000      	b.n	8058320 <prvGetNextExpireTime+0x18>
 805831e:	2200      	movs	r2, #0
 8058320:	687b      	ldr	r3, [r7, #4]
 8058322:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8058324:	687b      	ldr	r3, [r7, #4]
 8058326:	681b      	ldr	r3, [r3, #0]
 8058328:	2b00      	cmp	r3, #0
 805832a:	d105      	bne.n	8058338 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 805832c:	4b07      	ldr	r3, [pc, #28]	@ (805834c <prvGetNextExpireTime+0x44>)
 805832e:	681b      	ldr	r3, [r3, #0]
 8058330:	68db      	ldr	r3, [r3, #12]
 8058332:	681b      	ldr	r3, [r3, #0]
 8058334:	60fb      	str	r3, [r7, #12]
 8058336:	e001      	b.n	805833c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8058338:	2300      	movs	r3, #0
 805833a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 805833c:	68fb      	ldr	r3, [r7, #12]
    }
 805833e:	4618      	mov	r0, r3
 8058340:	3714      	adds	r7, #20
 8058342:	46bd      	mov	sp, r7
 8058344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058348:	4770      	bx	lr
 805834a:	bf00      	nop
 805834c:	2402dfe0 	.word	0x2402dfe0

08058350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8058350:	b580      	push	{r7, lr}
 8058352:	b084      	sub	sp, #16
 8058354:	af00      	add	r7, sp, #0
 8058356:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8058358:	f7fe fbe6 	bl	8056b28 <xTaskGetTickCount>
 805835c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 805835e:	4b0b      	ldr	r3, [pc, #44]	@ (805838c <prvSampleTimeNow+0x3c>)
 8058360:	681b      	ldr	r3, [r3, #0]
 8058362:	68fa      	ldr	r2, [r7, #12]
 8058364:	429a      	cmp	r2, r3
 8058366:	d205      	bcs.n	8058374 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8058368:	f000 f91e 	bl	80585a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 805836c:	687b      	ldr	r3, [r7, #4]
 805836e:	2201      	movs	r2, #1
 8058370:	601a      	str	r2, [r3, #0]
 8058372:	e002      	b.n	805837a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8058374:	687b      	ldr	r3, [r7, #4]
 8058376:	2200      	movs	r2, #0
 8058378:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 805837a:	4a04      	ldr	r2, [pc, #16]	@ (805838c <prvSampleTimeNow+0x3c>)
 805837c:	68fb      	ldr	r3, [r7, #12]
 805837e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8058380:	68fb      	ldr	r3, [r7, #12]
    }
 8058382:	4618      	mov	r0, r3
 8058384:	3710      	adds	r7, #16
 8058386:	46bd      	mov	sp, r7
 8058388:	bd80      	pop	{r7, pc}
 805838a:	bf00      	nop
 805838c:	2402dff0 	.word	0x2402dff0

08058390 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8058390:	b580      	push	{r7, lr}
 8058392:	b086      	sub	sp, #24
 8058394:	af00      	add	r7, sp, #0
 8058396:	60f8      	str	r0, [r7, #12]
 8058398:	60b9      	str	r1, [r7, #8]
 805839a:	607a      	str	r2, [r7, #4]
 805839c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 805839e:	2300      	movs	r3, #0
 80583a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80583a2:	68fb      	ldr	r3, [r7, #12]
 80583a4:	68ba      	ldr	r2, [r7, #8]
 80583a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80583a8:	68fb      	ldr	r3, [r7, #12]
 80583aa:	68fa      	ldr	r2, [r7, #12]
 80583ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80583ae:	68ba      	ldr	r2, [r7, #8]
 80583b0:	687b      	ldr	r3, [r7, #4]
 80583b2:	429a      	cmp	r2, r3
 80583b4:	d812      	bhi.n	80583dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80583b6:	687a      	ldr	r2, [r7, #4]
 80583b8:	683b      	ldr	r3, [r7, #0]
 80583ba:	1ad2      	subs	r2, r2, r3
 80583bc:	68fb      	ldr	r3, [r7, #12]
 80583be:	699b      	ldr	r3, [r3, #24]
 80583c0:	429a      	cmp	r2, r3
 80583c2:	d302      	bcc.n	80583ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80583c4:	2301      	movs	r3, #1
 80583c6:	617b      	str	r3, [r7, #20]
 80583c8:	e01b      	b.n	8058402 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80583ca:	4b10      	ldr	r3, [pc, #64]	@ (805840c <prvInsertTimerInActiveList+0x7c>)
 80583cc:	681a      	ldr	r2, [r3, #0]
 80583ce:	68fb      	ldr	r3, [r7, #12]
 80583d0:	3304      	adds	r3, #4
 80583d2:	4619      	mov	r1, r3
 80583d4:	4610      	mov	r0, r2
 80583d6:	f7fc fd50 	bl	8054e7a <vListInsert>
 80583da:	e012      	b.n	8058402 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80583dc:	687a      	ldr	r2, [r7, #4]
 80583de:	683b      	ldr	r3, [r7, #0]
 80583e0:	429a      	cmp	r2, r3
 80583e2:	d206      	bcs.n	80583f2 <prvInsertTimerInActiveList+0x62>
 80583e4:	68ba      	ldr	r2, [r7, #8]
 80583e6:	683b      	ldr	r3, [r7, #0]
 80583e8:	429a      	cmp	r2, r3
 80583ea:	d302      	bcc.n	80583f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80583ec:	2301      	movs	r3, #1
 80583ee:	617b      	str	r3, [r7, #20]
 80583f0:	e007      	b.n	8058402 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80583f2:	4b07      	ldr	r3, [pc, #28]	@ (8058410 <prvInsertTimerInActiveList+0x80>)
 80583f4:	681a      	ldr	r2, [r3, #0]
 80583f6:	68fb      	ldr	r3, [r7, #12]
 80583f8:	3304      	adds	r3, #4
 80583fa:	4619      	mov	r1, r3
 80583fc:	4610      	mov	r0, r2
 80583fe:	f7fc fd3c 	bl	8054e7a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8058402:	697b      	ldr	r3, [r7, #20]
    }
 8058404:	4618      	mov	r0, r3
 8058406:	3718      	adds	r7, #24
 8058408:	46bd      	mov	sp, r7
 805840a:	bd80      	pop	{r7, pc}
 805840c:	2402dfe4 	.word	0x2402dfe4
 8058410:	2402dfe0 	.word	0x2402dfe0

08058414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8058414:	b580      	push	{r7, lr}
 8058416:	b088      	sub	sp, #32
 8058418:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 805841a:	f107 0308 	add.w	r3, r7, #8
 805841e:	2200      	movs	r2, #0
 8058420:	601a      	str	r2, [r3, #0]
 8058422:	605a      	str	r2, [r3, #4]
 8058424:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8058426:	e0ab      	b.n	8058580 <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8058428:	68bb      	ldr	r3, [r7, #8]
 805842a:	2b00      	cmp	r3, #0
 805842c:	f2c0 80a8 	blt.w	8058580 <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8058430:	693b      	ldr	r3, [r7, #16]
 8058432:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8058434:	69fb      	ldr	r3, [r7, #28]
 8058436:	695b      	ldr	r3, [r3, #20]
 8058438:	2b00      	cmp	r3, #0
 805843a:	d004      	beq.n	8058446 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 805843c:	69fb      	ldr	r3, [r7, #28]
 805843e:	3304      	adds	r3, #4
 8058440:	4618      	mov	r0, r3
 8058442:	f7fc fd53 	bl	8054eec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8058446:	1d3b      	adds	r3, r7, #4
 8058448:	4618      	mov	r0, r3
 805844a:	f7ff ff81 	bl	8058350 <prvSampleTimeNow>
 805844e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8058450:	68bb      	ldr	r3, [r7, #8]
 8058452:	3b01      	subs	r3, #1
 8058454:	2b08      	cmp	r3, #8
 8058456:	f200 8090 	bhi.w	805857a <prvProcessReceivedCommands+0x166>
 805845a:	a201      	add	r2, pc, #4	@ (adr r2, 8058460 <prvProcessReceivedCommands+0x4c>)
 805845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8058460:	08058485 	.word	0x08058485
 8058464:	08058485 	.word	0x08058485
 8058468:	080584ed 	.word	0x080584ed
 805846c:	08058501 	.word	0x08058501
 8058470:	08058551 	.word	0x08058551
 8058474:	08058485 	.word	0x08058485
 8058478:	08058485 	.word	0x08058485
 805847c:	080584ed 	.word	0x080584ed
 8058480:	08058501 	.word	0x08058501
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058484:	69fb      	ldr	r3, [r7, #28]
 8058486:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 805848a:	f043 0301 	orr.w	r3, r3, #1
 805848e:	b2da      	uxtb	r2, r3
 8058490:	69fb      	ldr	r3, [r7, #28]
 8058492:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8058496:	68fa      	ldr	r2, [r7, #12]
 8058498:	69fb      	ldr	r3, [r7, #28]
 805849a:	699b      	ldr	r3, [r3, #24]
 805849c:	18d1      	adds	r1, r2, r3
 805849e:	68fb      	ldr	r3, [r7, #12]
 80584a0:	69ba      	ldr	r2, [r7, #24]
 80584a2:	69f8      	ldr	r0, [r7, #28]
 80584a4:	f7ff ff74 	bl	8058390 <prvInsertTimerInActiveList>
 80584a8:	4603      	mov	r3, r0
 80584aa:	2b00      	cmp	r3, #0
 80584ac:	d067      	beq.n	805857e <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80584ae:	69fb      	ldr	r3, [r7, #28]
 80584b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80584b4:	f003 0304 	and.w	r3, r3, #4
 80584b8:	2b00      	cmp	r3, #0
 80584ba:	d009      	beq.n	80584d0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80584bc:	68fa      	ldr	r2, [r7, #12]
 80584be:	69fb      	ldr	r3, [r7, #28]
 80584c0:	699b      	ldr	r3, [r3, #24]
 80584c2:	4413      	add	r3, r2
 80584c4:	69ba      	ldr	r2, [r7, #24]
 80584c6:	4619      	mov	r1, r3
 80584c8:	69f8      	ldr	r0, [r7, #28]
 80584ca:	f7ff fe69 	bl	80581a0 <prvReloadTimer>
 80584ce:	e008      	b.n	80584e2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80584d0:	69fb      	ldr	r3, [r7, #28]
 80584d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80584d6:	f023 0301 	bic.w	r3, r3, #1
 80584da:	b2da      	uxtb	r2, r3
 80584dc:	69fb      	ldr	r3, [r7, #28]
 80584de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80584e2:	69fb      	ldr	r3, [r7, #28]
 80584e4:	6a1b      	ldr	r3, [r3, #32]
 80584e6:	69f8      	ldr	r0, [r7, #28]
 80584e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80584ea:	e048      	b.n	805857e <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80584ec:	69fb      	ldr	r3, [r7, #28]
 80584ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80584f2:	f023 0301 	bic.w	r3, r3, #1
 80584f6:	b2da      	uxtb	r2, r3
 80584f8:	69fb      	ldr	r3, [r7, #28]
 80584fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80584fe:	e03f      	b.n	8058580 <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058500:	69fb      	ldr	r3, [r7, #28]
 8058502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8058506:	f043 0301 	orr.w	r3, r3, #1
 805850a:	b2da      	uxtb	r2, r3
 805850c:	69fb      	ldr	r3, [r7, #28]
 805850e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8058512:	68fa      	ldr	r2, [r7, #12]
 8058514:	69fb      	ldr	r3, [r7, #28]
 8058516:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8058518:	69fb      	ldr	r3, [r7, #28]
 805851a:	699b      	ldr	r3, [r3, #24]
 805851c:	2b00      	cmp	r3, #0
 805851e:	d10d      	bne.n	805853c <prvProcessReceivedCommands+0x128>
    __asm volatile
 8058520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058524:	b672      	cpsid	i
 8058526:	f383 8811 	msr	BASEPRI, r3
 805852a:	f3bf 8f6f 	isb	sy
 805852e:	f3bf 8f4f 	dsb	sy
 8058532:	b662      	cpsie	i
 8058534:	617b      	str	r3, [r7, #20]
}
 8058536:	bf00      	nop
 8058538:	bf00      	nop
 805853a:	e7fd      	b.n	8058538 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 805853c:	69fb      	ldr	r3, [r7, #28]
 805853e:	699a      	ldr	r2, [r3, #24]
 8058540:	69bb      	ldr	r3, [r7, #24]
 8058542:	18d1      	adds	r1, r2, r3
 8058544:	69bb      	ldr	r3, [r7, #24]
 8058546:	69ba      	ldr	r2, [r7, #24]
 8058548:	69f8      	ldr	r0, [r7, #28]
 805854a:	f7ff ff21 	bl	8058390 <prvInsertTimerInActiveList>
                        break;
 805854e:	e017      	b.n	8058580 <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8058550:	69fb      	ldr	r3, [r7, #28]
 8058552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8058556:	f003 0302 	and.w	r3, r3, #2
 805855a:	2b00      	cmp	r3, #0
 805855c:	d103      	bne.n	8058566 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 805855e:	69f8      	ldr	r0, [r7, #28]
 8058560:	f000 fc60 	bl	8058e24 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8058564:	e00c      	b.n	8058580 <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058566:	69fb      	ldr	r3, [r7, #28]
 8058568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 805856c:	f023 0301 	bic.w	r3, r3, #1
 8058570:	b2da      	uxtb	r2, r3
 8058572:	69fb      	ldr	r3, [r7, #28]
 8058574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8058578:	e002      	b.n	8058580 <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 805857a:	bf00      	nop
 805857c:	e000      	b.n	8058580 <prvProcessReceivedCommands+0x16c>
                        break;
 805857e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8058580:	4b08      	ldr	r3, [pc, #32]	@ (80585a4 <prvProcessReceivedCommands+0x190>)
 8058582:	681b      	ldr	r3, [r3, #0]
 8058584:	f107 0108 	add.w	r1, r7, #8
 8058588:	2200      	movs	r2, #0
 805858a:	4618      	mov	r0, r3
 805858c:	f7fd f83c 	bl	8055608 <xQueueReceive>
 8058590:	4603      	mov	r3, r0
 8058592:	2b00      	cmp	r3, #0
 8058594:	f47f af48 	bne.w	8058428 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8058598:	bf00      	nop
 805859a:	bf00      	nop
 805859c:	3720      	adds	r7, #32
 805859e:	46bd      	mov	sp, r7
 80585a0:	bd80      	pop	{r7, pc}
 80585a2:	bf00      	nop
 80585a4:	2402dfe8 	.word	0x2402dfe8

080585a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80585a8:	b580      	push	{r7, lr}
 80585aa:	b082      	sub	sp, #8
 80585ac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80585ae:	e009      	b.n	80585c4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80585b0:	4b0e      	ldr	r3, [pc, #56]	@ (80585ec <prvSwitchTimerLists+0x44>)
 80585b2:	681b      	ldr	r3, [r3, #0]
 80585b4:	68db      	ldr	r3, [r3, #12]
 80585b6:	681b      	ldr	r3, [r3, #0]
 80585b8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80585ba:	f04f 31ff 	mov.w	r1, #4294967295
 80585be:	6838      	ldr	r0, [r7, #0]
 80585c0:	f7ff fe10 	bl	80581e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80585c4:	4b09      	ldr	r3, [pc, #36]	@ (80585ec <prvSwitchTimerLists+0x44>)
 80585c6:	681b      	ldr	r3, [r3, #0]
 80585c8:	681b      	ldr	r3, [r3, #0]
 80585ca:	2b00      	cmp	r3, #0
 80585cc:	d1f0      	bne.n	80585b0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80585ce:	4b07      	ldr	r3, [pc, #28]	@ (80585ec <prvSwitchTimerLists+0x44>)
 80585d0:	681b      	ldr	r3, [r3, #0]
 80585d2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80585d4:	4b06      	ldr	r3, [pc, #24]	@ (80585f0 <prvSwitchTimerLists+0x48>)
 80585d6:	681b      	ldr	r3, [r3, #0]
 80585d8:	4a04      	ldr	r2, [pc, #16]	@ (80585ec <prvSwitchTimerLists+0x44>)
 80585da:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80585dc:	4a04      	ldr	r2, [pc, #16]	@ (80585f0 <prvSwitchTimerLists+0x48>)
 80585de:	687b      	ldr	r3, [r7, #4]
 80585e0:	6013      	str	r3, [r2, #0]
    }
 80585e2:	bf00      	nop
 80585e4:	3708      	adds	r7, #8
 80585e6:	46bd      	mov	sp, r7
 80585e8:	bd80      	pop	{r7, pc}
 80585ea:	bf00      	nop
 80585ec:	2402dfe0 	.word	0x2402dfe0
 80585f0:	2402dfe4 	.word	0x2402dfe4

080585f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80585f4:	b580      	push	{r7, lr}
 80585f6:	b082      	sub	sp, #8
 80585f8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80585fa:	f000 f99b 	bl	8058934 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80585fe:	4b15      	ldr	r3, [pc, #84]	@ (8058654 <prvCheckForValidListAndQueue+0x60>)
 8058600:	681b      	ldr	r3, [r3, #0]
 8058602:	2b00      	cmp	r3, #0
 8058604:	d120      	bne.n	8058648 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8058606:	4814      	ldr	r0, [pc, #80]	@ (8058658 <prvCheckForValidListAndQueue+0x64>)
 8058608:	f7fc fbe6 	bl	8054dd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 805860c:	4813      	ldr	r0, [pc, #76]	@ (805865c <prvCheckForValidListAndQueue+0x68>)
 805860e:	f7fc fbe3 	bl	8054dd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8058612:	4b13      	ldr	r3, [pc, #76]	@ (8058660 <prvCheckForValidListAndQueue+0x6c>)
 8058614:	4a10      	ldr	r2, [pc, #64]	@ (8058658 <prvCheckForValidListAndQueue+0x64>)
 8058616:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8058618:	4b12      	ldr	r3, [pc, #72]	@ (8058664 <prvCheckForValidListAndQueue+0x70>)
 805861a:	4a10      	ldr	r2, [pc, #64]	@ (805865c <prvCheckForValidListAndQueue+0x68>)
 805861c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 805861e:	2300      	movs	r3, #0
 8058620:	9300      	str	r3, [sp, #0]
 8058622:	4b11      	ldr	r3, [pc, #68]	@ (8058668 <prvCheckForValidListAndQueue+0x74>)
 8058624:	4a11      	ldr	r2, [pc, #68]	@ (805866c <prvCheckForValidListAndQueue+0x78>)
 8058626:	210c      	movs	r1, #12
 8058628:	200a      	movs	r0, #10
 805862a:	f7fc fd1f 	bl	805506c <xQueueGenericCreateStatic>
 805862e:	4603      	mov	r3, r0
 8058630:	4a08      	ldr	r2, [pc, #32]	@ (8058654 <prvCheckForValidListAndQueue+0x60>)
 8058632:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8058634:	4b07      	ldr	r3, [pc, #28]	@ (8058654 <prvCheckForValidListAndQueue+0x60>)
 8058636:	681b      	ldr	r3, [r3, #0]
 8058638:	2b00      	cmp	r3, #0
 805863a:	d005      	beq.n	8058648 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 805863c:	4b05      	ldr	r3, [pc, #20]	@ (8058654 <prvCheckForValidListAndQueue+0x60>)
 805863e:	681b      	ldr	r3, [r3, #0]
 8058640:	490b      	ldr	r1, [pc, #44]	@ (8058670 <prvCheckForValidListAndQueue+0x7c>)
 8058642:	4618      	mov	r0, r3
 8058644:	f7fd fc06 	bl	8055e54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8058648:	f000 f9aa 	bl	80589a0 <vPortExitCritical>
    }
 805864c:	bf00      	nop
 805864e:	46bd      	mov	sp, r7
 8058650:	bd80      	pop	{r7, pc}
 8058652:	bf00      	nop
 8058654:	2402dfe8 	.word	0x2402dfe8
 8058658:	2402dfb8 	.word	0x2402dfb8
 805865c:	2402dfcc 	.word	0x2402dfcc
 8058660:	2402dfe0 	.word	0x2402dfe0
 8058664:	2402dfe4 	.word	0x2402dfe4
 8058668:	2402e06c 	.word	0x2402e06c
 805866c:	2402dff4 	.word	0x2402dff4
 8058670:	08070a50 	.word	0x08070a50

08058674 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8058674:	b480      	push	{r7}
 8058676:	b085      	sub	sp, #20
 8058678:	af00      	add	r7, sp, #0
 805867a:	60f8      	str	r0, [r7, #12]
 805867c:	60b9      	str	r1, [r7, #8]
 805867e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8058680:	68fb      	ldr	r3, [r7, #12]
 8058682:	3b04      	subs	r3, #4
 8058684:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8058686:	68fb      	ldr	r3, [r7, #12]
 8058688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 805868c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 805868e:	68fb      	ldr	r3, [r7, #12]
 8058690:	3b04      	subs	r3, #4
 8058692:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8058694:	68bb      	ldr	r3, [r7, #8]
 8058696:	f023 0201 	bic.w	r2, r3, #1
 805869a:	68fb      	ldr	r3, [r7, #12]
 805869c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 805869e:	68fb      	ldr	r3, [r7, #12]
 80586a0:	3b04      	subs	r3, #4
 80586a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80586a4:	4a0c      	ldr	r2, [pc, #48]	@ (80586d8 <pxPortInitialiseStack+0x64>)
 80586a6:	68fb      	ldr	r3, [r7, #12]
 80586a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80586aa:	68fb      	ldr	r3, [r7, #12]
 80586ac:	3b14      	subs	r3, #20
 80586ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80586b0:	687a      	ldr	r2, [r7, #4]
 80586b2:	68fb      	ldr	r3, [r7, #12]
 80586b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80586b6:	68fb      	ldr	r3, [r7, #12]
 80586b8:	3b04      	subs	r3, #4
 80586ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80586bc:	68fb      	ldr	r3, [r7, #12]
 80586be:	f06f 0202 	mvn.w	r2, #2
 80586c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80586c4:	68fb      	ldr	r3, [r7, #12]
 80586c6:	3b20      	subs	r3, #32
 80586c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80586ca:	68fb      	ldr	r3, [r7, #12]
}
 80586cc:	4618      	mov	r0, r3
 80586ce:	3714      	adds	r7, #20
 80586d0:	46bd      	mov	sp, r7
 80586d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80586d6:	4770      	bx	lr
 80586d8:	080586dd 	.word	0x080586dd

080586dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80586dc:	b480      	push	{r7}
 80586de:	b085      	sub	sp, #20
 80586e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80586e2:	2300      	movs	r3, #0
 80586e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80586e6:	4b15      	ldr	r3, [pc, #84]	@ (805873c <prvTaskExitError+0x60>)
 80586e8:	681b      	ldr	r3, [r3, #0]
 80586ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80586ee:	d00d      	beq.n	805870c <prvTaskExitError+0x30>
    __asm volatile
 80586f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80586f4:	b672      	cpsid	i
 80586f6:	f383 8811 	msr	BASEPRI, r3
 80586fa:	f3bf 8f6f 	isb	sy
 80586fe:	f3bf 8f4f 	dsb	sy
 8058702:	b662      	cpsie	i
 8058704:	60fb      	str	r3, [r7, #12]
}
 8058706:	bf00      	nop
 8058708:	bf00      	nop
 805870a:	e7fd      	b.n	8058708 <prvTaskExitError+0x2c>
    __asm volatile
 805870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058710:	b672      	cpsid	i
 8058712:	f383 8811 	msr	BASEPRI, r3
 8058716:	f3bf 8f6f 	isb	sy
 805871a:	f3bf 8f4f 	dsb	sy
 805871e:	b662      	cpsie	i
 8058720:	60bb      	str	r3, [r7, #8]
}
 8058722:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8058724:	bf00      	nop
 8058726:	687b      	ldr	r3, [r7, #4]
 8058728:	2b00      	cmp	r3, #0
 805872a:	d0fc      	beq.n	8058726 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 805872c:	bf00      	nop
 805872e:	bf00      	nop
 8058730:	3714      	adds	r7, #20
 8058732:	46bd      	mov	sp, r7
 8058734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058738:	4770      	bx	lr
 805873a:	bf00      	nop
 805873c:	240148f0 	.word	0x240148f0

08058740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8058740:	4b07      	ldr	r3, [pc, #28]	@ (8058760 <pxCurrentTCBConst2>)
 8058742:	6819      	ldr	r1, [r3, #0]
 8058744:	6808      	ldr	r0, [r1, #0]
 8058746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805874a:	f380 8809 	msr	PSP, r0
 805874e:	f3bf 8f6f 	isb	sy
 8058752:	f04f 0000 	mov.w	r0, #0
 8058756:	f380 8811 	msr	BASEPRI, r0
 805875a:	4770      	bx	lr
 805875c:	f3af 8000 	nop.w

08058760 <pxCurrentTCBConst2>:
 8058760:	2402d7e8 	.word	0x2402d7e8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8058764:	bf00      	nop
 8058766:	bf00      	nop

08058768 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8058768:	4808      	ldr	r0, [pc, #32]	@ (805878c <prvPortStartFirstTask+0x24>)
 805876a:	6800      	ldr	r0, [r0, #0]
 805876c:	6800      	ldr	r0, [r0, #0]
 805876e:	f380 8808 	msr	MSP, r0
 8058772:	f04f 0000 	mov.w	r0, #0
 8058776:	f380 8814 	msr	CONTROL, r0
 805877a:	b662      	cpsie	i
 805877c:	b661      	cpsie	f
 805877e:	f3bf 8f4f 	dsb	sy
 8058782:	f3bf 8f6f 	isb	sy
 8058786:	df00      	svc	0
 8058788:	bf00      	nop
 805878a:	0000      	.short	0x0000
 805878c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8058790:	bf00      	nop
 8058792:	bf00      	nop

08058794 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8058794:	b580      	push	{r7, lr}
 8058796:	b08a      	sub	sp, #40	@ 0x28
 8058798:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 805879a:	4b5c      	ldr	r3, [pc, #368]	@ (805890c <xPortStartScheduler+0x178>)
 805879c:	681b      	ldr	r3, [r3, #0]
 805879e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80587a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80587a2:	332c      	adds	r3, #44	@ 0x2c
 80587a4:	681b      	ldr	r3, [r3, #0]
 80587a6:	4a5a      	ldr	r2, [pc, #360]	@ (8058910 <xPortStartScheduler+0x17c>)
 80587a8:	4293      	cmp	r3, r2
 80587aa:	d00d      	beq.n	80587c8 <xPortStartScheduler+0x34>
    __asm volatile
 80587ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80587b0:	b672      	cpsid	i
 80587b2:	f383 8811 	msr	BASEPRI, r3
 80587b6:	f3bf 8f6f 	isb	sy
 80587ba:	f3bf 8f4f 	dsb	sy
 80587be:	b662      	cpsie	i
 80587c0:	61bb      	str	r3, [r7, #24]
}
 80587c2:	bf00      	nop
 80587c4:	bf00      	nop
 80587c6:	e7fd      	b.n	80587c4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80587c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80587ca:	3338      	adds	r3, #56	@ 0x38
 80587cc:	681b      	ldr	r3, [r3, #0]
 80587ce:	4a51      	ldr	r2, [pc, #324]	@ (8058914 <xPortStartScheduler+0x180>)
 80587d0:	4293      	cmp	r3, r2
 80587d2:	d00d      	beq.n	80587f0 <xPortStartScheduler+0x5c>
    __asm volatile
 80587d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80587d8:	b672      	cpsid	i
 80587da:	f383 8811 	msr	BASEPRI, r3
 80587de:	f3bf 8f6f 	isb	sy
 80587e2:	f3bf 8f4f 	dsb	sy
 80587e6:	b662      	cpsie	i
 80587e8:	61fb      	str	r3, [r7, #28]
}
 80587ea:	bf00      	nop
 80587ec:	bf00      	nop
 80587ee:	e7fd      	b.n	80587ec <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80587f0:	2300      	movs	r3, #0
 80587f2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80587f4:	4b48      	ldr	r3, [pc, #288]	@ (8058918 <xPortStartScheduler+0x184>)
 80587f6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80587f8:	6a3b      	ldr	r3, [r7, #32]
 80587fa:	781b      	ldrb	r3, [r3, #0]
 80587fc:	b2db      	uxtb	r3, r3
 80587fe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8058800:	6a3b      	ldr	r3, [r7, #32]
 8058802:	22ff      	movs	r2, #255	@ 0xff
 8058804:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8058806:	6a3b      	ldr	r3, [r7, #32]
 8058808:	781b      	ldrb	r3, [r3, #0]
 805880a:	b2db      	uxtb	r3, r3
 805880c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 805880e:	79fb      	ldrb	r3, [r7, #7]
 8058810:	b2db      	uxtb	r3, r3
 8058812:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8058816:	b2da      	uxtb	r2, r3
 8058818:	4b40      	ldr	r3, [pc, #256]	@ (805891c <xPortStartScheduler+0x188>)
 805881a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 805881c:	4b3f      	ldr	r3, [pc, #252]	@ (805891c <xPortStartScheduler+0x188>)
 805881e:	781b      	ldrb	r3, [r3, #0]
 8058820:	2b00      	cmp	r3, #0
 8058822:	d10d      	bne.n	8058840 <xPortStartScheduler+0xac>
    __asm volatile
 8058824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058828:	b672      	cpsid	i
 805882a:	f383 8811 	msr	BASEPRI, r3
 805882e:	f3bf 8f6f 	isb	sy
 8058832:	f3bf 8f4f 	dsb	sy
 8058836:	b662      	cpsie	i
 8058838:	617b      	str	r3, [r7, #20]
}
 805883a:	bf00      	nop
 805883c:	bf00      	nop
 805883e:	e7fd      	b.n	805883c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8058840:	79fb      	ldrb	r3, [r7, #7]
 8058842:	b2db      	uxtb	r3, r3
 8058844:	43db      	mvns	r3, r3
 8058846:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 805884a:	2b00      	cmp	r3, #0
 805884c:	d015      	beq.n	805887a <xPortStartScheduler+0xe6>
    __asm volatile
 805884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058852:	b672      	cpsid	i
 8058854:	f383 8811 	msr	BASEPRI, r3
 8058858:	f3bf 8f6f 	isb	sy
 805885c:	f3bf 8f4f 	dsb	sy
 8058860:	b662      	cpsie	i
 8058862:	613b      	str	r3, [r7, #16]
}
 8058864:	bf00      	nop
 8058866:	bf00      	nop
 8058868:	e7fd      	b.n	8058866 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 805886a:	68bb      	ldr	r3, [r7, #8]
 805886c:	3301      	adds	r3, #1
 805886e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8058870:	79fb      	ldrb	r3, [r7, #7]
 8058872:	b2db      	uxtb	r3, r3
 8058874:	005b      	lsls	r3, r3, #1
 8058876:	b2db      	uxtb	r3, r3
 8058878:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805887a:	79fb      	ldrb	r3, [r7, #7]
 805887c:	b2db      	uxtb	r3, r3
 805887e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8058882:	2b80      	cmp	r3, #128	@ 0x80
 8058884:	d0f1      	beq.n	805886a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8058886:	68bb      	ldr	r3, [r7, #8]
 8058888:	2b08      	cmp	r3, #8
 805888a:	d103      	bne.n	8058894 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 805888c:	4b24      	ldr	r3, [pc, #144]	@ (8058920 <xPortStartScheduler+0x18c>)
 805888e:	2200      	movs	r2, #0
 8058890:	601a      	str	r2, [r3, #0]
 8058892:	e004      	b.n	805889e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8058894:	68bb      	ldr	r3, [r7, #8]
 8058896:	f1c3 0307 	rsb	r3, r3, #7
 805889a:	4a21      	ldr	r2, [pc, #132]	@ (8058920 <xPortStartScheduler+0x18c>)
 805889c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 805889e:	4b20      	ldr	r3, [pc, #128]	@ (8058920 <xPortStartScheduler+0x18c>)
 80588a0:	681b      	ldr	r3, [r3, #0]
 80588a2:	021b      	lsls	r3, r3, #8
 80588a4:	4a1e      	ldr	r2, [pc, #120]	@ (8058920 <xPortStartScheduler+0x18c>)
 80588a6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80588a8:	4b1d      	ldr	r3, [pc, #116]	@ (8058920 <xPortStartScheduler+0x18c>)
 80588aa:	681b      	ldr	r3, [r3, #0]
 80588ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80588b0:	4a1b      	ldr	r2, [pc, #108]	@ (8058920 <xPortStartScheduler+0x18c>)
 80588b2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80588b4:	7bfb      	ldrb	r3, [r7, #15]
 80588b6:	b2da      	uxtb	r2, r3
 80588b8:	6a3b      	ldr	r3, [r7, #32]
 80588ba:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80588bc:	4b19      	ldr	r3, [pc, #100]	@ (8058924 <xPortStartScheduler+0x190>)
 80588be:	681b      	ldr	r3, [r3, #0]
 80588c0:	4a18      	ldr	r2, [pc, #96]	@ (8058924 <xPortStartScheduler+0x190>)
 80588c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80588c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80588c8:	4b16      	ldr	r3, [pc, #88]	@ (8058924 <xPortStartScheduler+0x190>)
 80588ca:	681b      	ldr	r3, [r3, #0]
 80588cc:	4a15      	ldr	r2, [pc, #84]	@ (8058924 <xPortStartScheduler+0x190>)
 80588ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80588d2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80588d4:	4b14      	ldr	r3, [pc, #80]	@ (8058928 <xPortStartScheduler+0x194>)
 80588d6:	2200      	movs	r2, #0
 80588d8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80588da:	f000 f8e9 	bl	8058ab0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80588de:	4b13      	ldr	r3, [pc, #76]	@ (805892c <xPortStartScheduler+0x198>)
 80588e0:	2200      	movs	r2, #0
 80588e2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80588e4:	f000 f908 	bl	8058af8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80588e8:	4b11      	ldr	r3, [pc, #68]	@ (8058930 <xPortStartScheduler+0x19c>)
 80588ea:	681b      	ldr	r3, [r3, #0]
 80588ec:	4a10      	ldr	r2, [pc, #64]	@ (8058930 <xPortStartScheduler+0x19c>)
 80588ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80588f2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80588f4:	f7ff ff38 	bl	8058768 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80588f8:	f7fe fac8 	bl	8056e8c <vTaskSwitchContext>
    prvTaskExitError();
 80588fc:	f7ff feee 	bl	80586dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8058900:	2300      	movs	r3, #0
}
 8058902:	4618      	mov	r0, r3
 8058904:	3728      	adds	r7, #40	@ 0x28
 8058906:	46bd      	mov	sp, r7
 8058908:	bd80      	pop	{r7, pc}
 805890a:	bf00      	nop
 805890c:	e000ed08 	.word	0xe000ed08
 8058910:	08058741 	.word	0x08058741
 8058914:	08058a01 	.word	0x08058a01
 8058918:	e000e400 	.word	0xe000e400
 805891c:	2402e0bc 	.word	0x2402e0bc
 8058920:	2402e0c0 	.word	0x2402e0c0
 8058924:	e000ed20 	.word	0xe000ed20
 8058928:	e000ed1c 	.word	0xe000ed1c
 805892c:	240148f0 	.word	0x240148f0
 8058930:	e000ef34 	.word	0xe000ef34

08058934 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8058934:	b480      	push	{r7}
 8058936:	b083      	sub	sp, #12
 8058938:	af00      	add	r7, sp, #0
    __asm volatile
 805893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 805893e:	b672      	cpsid	i
 8058940:	f383 8811 	msr	BASEPRI, r3
 8058944:	f3bf 8f6f 	isb	sy
 8058948:	f3bf 8f4f 	dsb	sy
 805894c:	b662      	cpsie	i
 805894e:	607b      	str	r3, [r7, #4]
}
 8058950:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8058952:	4b11      	ldr	r3, [pc, #68]	@ (8058998 <vPortEnterCritical+0x64>)
 8058954:	681b      	ldr	r3, [r3, #0]
 8058956:	3301      	adds	r3, #1
 8058958:	4a0f      	ldr	r2, [pc, #60]	@ (8058998 <vPortEnterCritical+0x64>)
 805895a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 805895c:	4b0e      	ldr	r3, [pc, #56]	@ (8058998 <vPortEnterCritical+0x64>)
 805895e:	681b      	ldr	r3, [r3, #0]
 8058960:	2b01      	cmp	r3, #1
 8058962:	d112      	bne.n	805898a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8058964:	4b0d      	ldr	r3, [pc, #52]	@ (805899c <vPortEnterCritical+0x68>)
 8058966:	681b      	ldr	r3, [r3, #0]
 8058968:	b2db      	uxtb	r3, r3
 805896a:	2b00      	cmp	r3, #0
 805896c:	d00d      	beq.n	805898a <vPortEnterCritical+0x56>
    __asm volatile
 805896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058972:	b672      	cpsid	i
 8058974:	f383 8811 	msr	BASEPRI, r3
 8058978:	f3bf 8f6f 	isb	sy
 805897c:	f3bf 8f4f 	dsb	sy
 8058980:	b662      	cpsie	i
 8058982:	603b      	str	r3, [r7, #0]
}
 8058984:	bf00      	nop
 8058986:	bf00      	nop
 8058988:	e7fd      	b.n	8058986 <vPortEnterCritical+0x52>
    }
}
 805898a:	bf00      	nop
 805898c:	370c      	adds	r7, #12
 805898e:	46bd      	mov	sp, r7
 8058990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058994:	4770      	bx	lr
 8058996:	bf00      	nop
 8058998:	240148f0 	.word	0x240148f0
 805899c:	e000ed04 	.word	0xe000ed04

080589a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80589a0:	b480      	push	{r7}
 80589a2:	b083      	sub	sp, #12
 80589a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80589a6:	4b13      	ldr	r3, [pc, #76]	@ (80589f4 <vPortExitCritical+0x54>)
 80589a8:	681b      	ldr	r3, [r3, #0]
 80589aa:	2b00      	cmp	r3, #0
 80589ac:	d10d      	bne.n	80589ca <vPortExitCritical+0x2a>
    __asm volatile
 80589ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80589b2:	b672      	cpsid	i
 80589b4:	f383 8811 	msr	BASEPRI, r3
 80589b8:	f3bf 8f6f 	isb	sy
 80589bc:	f3bf 8f4f 	dsb	sy
 80589c0:	b662      	cpsie	i
 80589c2:	607b      	str	r3, [r7, #4]
}
 80589c4:	bf00      	nop
 80589c6:	bf00      	nop
 80589c8:	e7fd      	b.n	80589c6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80589ca:	4b0a      	ldr	r3, [pc, #40]	@ (80589f4 <vPortExitCritical+0x54>)
 80589cc:	681b      	ldr	r3, [r3, #0]
 80589ce:	3b01      	subs	r3, #1
 80589d0:	4a08      	ldr	r2, [pc, #32]	@ (80589f4 <vPortExitCritical+0x54>)
 80589d2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80589d4:	4b07      	ldr	r3, [pc, #28]	@ (80589f4 <vPortExitCritical+0x54>)
 80589d6:	681b      	ldr	r3, [r3, #0]
 80589d8:	2b00      	cmp	r3, #0
 80589da:	d105      	bne.n	80589e8 <vPortExitCritical+0x48>
 80589dc:	2300      	movs	r3, #0
 80589de:	603b      	str	r3, [r7, #0]
    __asm volatile
 80589e0:	683b      	ldr	r3, [r7, #0]
 80589e2:	f383 8811 	msr	BASEPRI, r3
}
 80589e6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80589e8:	bf00      	nop
 80589ea:	370c      	adds	r7, #12
 80589ec:	46bd      	mov	sp, r7
 80589ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80589f2:	4770      	bx	lr
 80589f4:	240148f0 	.word	0x240148f0
	...

08058a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8058a00:	f3ef 8009 	mrs	r0, PSP
 8058a04:	f3bf 8f6f 	isb	sy
 8058a08:	4b15      	ldr	r3, [pc, #84]	@ (8058a60 <pxCurrentTCBConst>)
 8058a0a:	681a      	ldr	r2, [r3, #0]
 8058a0c:	f01e 0f10 	tst.w	lr, #16
 8058a10:	bf08      	it	eq
 8058a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8058a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058a1a:	6010      	str	r0, [r2, #0]
 8058a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8058a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8058a24:	b672      	cpsid	i
 8058a26:	f380 8811 	msr	BASEPRI, r0
 8058a2a:	f3bf 8f4f 	dsb	sy
 8058a2e:	f3bf 8f6f 	isb	sy
 8058a32:	b662      	cpsie	i
 8058a34:	f7fe fa2a 	bl	8056e8c <vTaskSwitchContext>
 8058a38:	f04f 0000 	mov.w	r0, #0
 8058a3c:	f380 8811 	msr	BASEPRI, r0
 8058a40:	bc09      	pop	{r0, r3}
 8058a42:	6819      	ldr	r1, [r3, #0]
 8058a44:	6808      	ldr	r0, [r1, #0]
 8058a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058a4a:	f01e 0f10 	tst.w	lr, #16
 8058a4e:	bf08      	it	eq
 8058a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8058a54:	f380 8809 	msr	PSP, r0
 8058a58:	f3bf 8f6f 	isb	sy
 8058a5c:	4770      	bx	lr
 8058a5e:	bf00      	nop

08058a60 <pxCurrentTCBConst>:
 8058a60:	2402d7e8 	.word	0x2402d7e8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8058a64:	bf00      	nop
 8058a66:	bf00      	nop

08058a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8058a68:	b580      	push	{r7, lr}
 8058a6a:	b082      	sub	sp, #8
 8058a6c:	af00      	add	r7, sp, #0
    __asm volatile
 8058a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058a72:	b672      	cpsid	i
 8058a74:	f383 8811 	msr	BASEPRI, r3
 8058a78:	f3bf 8f6f 	isb	sy
 8058a7c:	f3bf 8f4f 	dsb	sy
 8058a80:	b662      	cpsie	i
 8058a82:	607b      	str	r3, [r7, #4]
}
 8058a84:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8058a86:	f7fe f8e5 	bl	8056c54 <xTaskIncrementTick>
 8058a8a:	4603      	mov	r3, r0
 8058a8c:	2b00      	cmp	r3, #0
 8058a8e:	d003      	beq.n	8058a98 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8058a90:	4b06      	ldr	r3, [pc, #24]	@ (8058aac <SysTick_Handler+0x44>)
 8058a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8058a96:	601a      	str	r2, [r3, #0]
 8058a98:	2300      	movs	r3, #0
 8058a9a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8058a9c:	683b      	ldr	r3, [r7, #0]
 8058a9e:	f383 8811 	msr	BASEPRI, r3
}
 8058aa2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8058aa4:	bf00      	nop
 8058aa6:	3708      	adds	r7, #8
 8058aa8:	46bd      	mov	sp, r7
 8058aaa:	bd80      	pop	{r7, pc}
 8058aac:	e000ed04 	.word	0xe000ed04

08058ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8058ab0:	b480      	push	{r7}
 8058ab2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8058ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8058ae4 <vPortSetupTimerInterrupt+0x34>)
 8058ab6:	2200      	movs	r2, #0
 8058ab8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8058aba:	4b0b      	ldr	r3, [pc, #44]	@ (8058ae8 <vPortSetupTimerInterrupt+0x38>)
 8058abc:	2200      	movs	r2, #0
 8058abe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8058ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8058aec <vPortSetupTimerInterrupt+0x3c>)
 8058ac2:	681b      	ldr	r3, [r3, #0]
 8058ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8058af0 <vPortSetupTimerInterrupt+0x40>)
 8058ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8058aca:	099b      	lsrs	r3, r3, #6
 8058acc:	4a09      	ldr	r2, [pc, #36]	@ (8058af4 <vPortSetupTimerInterrupt+0x44>)
 8058ace:	3b01      	subs	r3, #1
 8058ad0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8058ad2:	4b04      	ldr	r3, [pc, #16]	@ (8058ae4 <vPortSetupTimerInterrupt+0x34>)
 8058ad4:	2207      	movs	r2, #7
 8058ad6:	601a      	str	r2, [r3, #0]
}
 8058ad8:	bf00      	nop
 8058ada:	46bd      	mov	sp, r7
 8058adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058ae0:	4770      	bx	lr
 8058ae2:	bf00      	nop
 8058ae4:	e000e010 	.word	0xe000e010
 8058ae8:	e000e018 	.word	0xe000e018
 8058aec:	240148f8 	.word	0x240148f8
 8058af0:	10624dd3 	.word	0x10624dd3
 8058af4:	e000e014 	.word	0xe000e014

08058af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8058af8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8058b08 <vPortEnableVFP+0x10>
 8058afc:	6801      	ldr	r1, [r0, #0]
 8058afe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8058b02:	6001      	str	r1, [r0, #0]
 8058b04:	4770      	bx	lr
 8058b06:	0000      	.short	0x0000
 8058b08:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8058b0c:	bf00      	nop
 8058b0e:	bf00      	nop

08058b10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8058b10:	b480      	push	{r7}
 8058b12:	b085      	sub	sp, #20
 8058b14:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8058b16:	f3ef 8305 	mrs	r3, IPSR
 8058b1a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8058b1c:	68fb      	ldr	r3, [r7, #12]
 8058b1e:	2b0f      	cmp	r3, #15
 8058b20:	d917      	bls.n	8058b52 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8058b22:	4a1a      	ldr	r2, [pc, #104]	@ (8058b8c <vPortValidateInterruptPriority+0x7c>)
 8058b24:	68fb      	ldr	r3, [r7, #12]
 8058b26:	4413      	add	r3, r2
 8058b28:	781b      	ldrb	r3, [r3, #0]
 8058b2a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8058b2c:	4b18      	ldr	r3, [pc, #96]	@ (8058b90 <vPortValidateInterruptPriority+0x80>)
 8058b2e:	781b      	ldrb	r3, [r3, #0]
 8058b30:	7afa      	ldrb	r2, [r7, #11]
 8058b32:	429a      	cmp	r2, r3
 8058b34:	d20d      	bcs.n	8058b52 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8058b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058b3a:	b672      	cpsid	i
 8058b3c:	f383 8811 	msr	BASEPRI, r3
 8058b40:	f3bf 8f6f 	isb	sy
 8058b44:	f3bf 8f4f 	dsb	sy
 8058b48:	b662      	cpsie	i
 8058b4a:	607b      	str	r3, [r7, #4]
}
 8058b4c:	bf00      	nop
 8058b4e:	bf00      	nop
 8058b50:	e7fd      	b.n	8058b4e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8058b52:	4b10      	ldr	r3, [pc, #64]	@ (8058b94 <vPortValidateInterruptPriority+0x84>)
 8058b54:	681b      	ldr	r3, [r3, #0]
 8058b56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8058b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8058b98 <vPortValidateInterruptPriority+0x88>)
 8058b5c:	681b      	ldr	r3, [r3, #0]
 8058b5e:	429a      	cmp	r2, r3
 8058b60:	d90d      	bls.n	8058b7e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8058b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058b66:	b672      	cpsid	i
 8058b68:	f383 8811 	msr	BASEPRI, r3
 8058b6c:	f3bf 8f6f 	isb	sy
 8058b70:	f3bf 8f4f 	dsb	sy
 8058b74:	b662      	cpsie	i
 8058b76:	603b      	str	r3, [r7, #0]
}
 8058b78:	bf00      	nop
 8058b7a:	bf00      	nop
 8058b7c:	e7fd      	b.n	8058b7a <vPortValidateInterruptPriority+0x6a>
    }
 8058b7e:	bf00      	nop
 8058b80:	3714      	adds	r7, #20
 8058b82:	46bd      	mov	sp, r7
 8058b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058b88:	4770      	bx	lr
 8058b8a:	bf00      	nop
 8058b8c:	e000e3f0 	.word	0xe000e3f0
 8058b90:	2402e0bc 	.word	0x2402e0bc
 8058b94:	e000ed0c 	.word	0xe000ed0c
 8058b98:	2402e0c0 	.word	0x2402e0c0

08058b9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8058b9c:	b580      	push	{r7, lr}
 8058b9e:	b08e      	sub	sp, #56	@ 0x38
 8058ba0:	af00      	add	r7, sp, #0
 8058ba2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8058ba4:	2300      	movs	r3, #0
 8058ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8058ba8:	687b      	ldr	r3, [r7, #4]
 8058baa:	2b00      	cmp	r3, #0
 8058bac:	d022      	beq.n	8058bf4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8058bae:	2308      	movs	r3, #8
 8058bb0:	43db      	mvns	r3, r3
 8058bb2:	687a      	ldr	r2, [r7, #4]
 8058bb4:	429a      	cmp	r2, r3
 8058bb6:	d81b      	bhi.n	8058bf0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8058bb8:	2208      	movs	r2, #8
 8058bba:	687b      	ldr	r3, [r7, #4]
 8058bbc:	4413      	add	r3, r2
 8058bbe:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8058bc0:	687b      	ldr	r3, [r7, #4]
 8058bc2:	f003 0307 	and.w	r3, r3, #7
 8058bc6:	2b00      	cmp	r3, #0
 8058bc8:	d014      	beq.n	8058bf4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8058bca:	687b      	ldr	r3, [r7, #4]
 8058bcc:	f003 0307 	and.w	r3, r3, #7
 8058bd0:	f1c3 0308 	rsb	r3, r3, #8
 8058bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8058bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8058bd8:	43db      	mvns	r3, r3
 8058bda:	687a      	ldr	r2, [r7, #4]
 8058bdc:	429a      	cmp	r2, r3
 8058bde:	d804      	bhi.n	8058bea <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8058be0:	687a      	ldr	r2, [r7, #4]
 8058be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8058be4:	4413      	add	r3, r2
 8058be6:	607b      	str	r3, [r7, #4]
 8058be8:	e004      	b.n	8058bf4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8058bea:	2300      	movs	r3, #0
 8058bec:	607b      	str	r3, [r7, #4]
 8058bee:	e001      	b.n	8058bf4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8058bf0:	2300      	movs	r3, #0
 8058bf2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8058bf4:	f7fd fe80 	bl	80568f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8058bf8:	4b83      	ldr	r3, [pc, #524]	@ (8058e08 <pvPortMalloc+0x26c>)
 8058bfa:	681b      	ldr	r3, [r3, #0]
 8058bfc:	2b00      	cmp	r3, #0
 8058bfe:	d101      	bne.n	8058c04 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8058c00:	f000 f98c 	bl	8058f1c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8058c04:	687b      	ldr	r3, [r7, #4]
 8058c06:	2b00      	cmp	r3, #0
 8058c08:	f2c0 80de 	blt.w	8058dc8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8058c0c:	687b      	ldr	r3, [r7, #4]
 8058c0e:	2b00      	cmp	r3, #0
 8058c10:	f000 80da 	beq.w	8058dc8 <pvPortMalloc+0x22c>
 8058c14:	4b7d      	ldr	r3, [pc, #500]	@ (8058e0c <pvPortMalloc+0x270>)
 8058c16:	681b      	ldr	r3, [r3, #0]
 8058c18:	687a      	ldr	r2, [r7, #4]
 8058c1a:	429a      	cmp	r2, r3
 8058c1c:	f200 80d4 	bhi.w	8058dc8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8058c20:	4b7b      	ldr	r3, [pc, #492]	@ (8058e10 <pvPortMalloc+0x274>)
 8058c22:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8058c24:	4b7a      	ldr	r3, [pc, #488]	@ (8058e10 <pvPortMalloc+0x274>)
 8058c26:	681b      	ldr	r3, [r3, #0]
 8058c28:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c2c:	4a79      	ldr	r2, [pc, #484]	@ (8058e14 <pvPortMalloc+0x278>)
 8058c2e:	4293      	cmp	r3, r2
 8058c30:	d305      	bcc.n	8058c3e <pvPortMalloc+0xa2>
 8058c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c34:	4a78      	ldr	r2, [pc, #480]	@ (8058e18 <pvPortMalloc+0x27c>)
 8058c36:	4293      	cmp	r3, r2
 8058c38:	d801      	bhi.n	8058c3e <pvPortMalloc+0xa2>
 8058c3a:	2301      	movs	r3, #1
 8058c3c:	e000      	b.n	8058c40 <pvPortMalloc+0xa4>
 8058c3e:	2300      	movs	r3, #0
 8058c40:	2b00      	cmp	r3, #0
 8058c42:	d12d      	bne.n	8058ca0 <pvPortMalloc+0x104>
    __asm volatile
 8058c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058c48:	b672      	cpsid	i
 8058c4a:	f383 8811 	msr	BASEPRI, r3
 8058c4e:	f3bf 8f6f 	isb	sy
 8058c52:	f3bf 8f4f 	dsb	sy
 8058c56:	b662      	cpsie	i
 8058c58:	623b      	str	r3, [r7, #32]
}
 8058c5a:	bf00      	nop
 8058c5c:	bf00      	nop
 8058c5e:	e7fd      	b.n	8058c5c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8058c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c62:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8058c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c66:	681b      	ldr	r3, [r3, #0]
 8058c68:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c6c:	4a69      	ldr	r2, [pc, #420]	@ (8058e14 <pvPortMalloc+0x278>)
 8058c6e:	4293      	cmp	r3, r2
 8058c70:	d305      	bcc.n	8058c7e <pvPortMalloc+0xe2>
 8058c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058c74:	4a68      	ldr	r2, [pc, #416]	@ (8058e18 <pvPortMalloc+0x27c>)
 8058c76:	4293      	cmp	r3, r2
 8058c78:	d801      	bhi.n	8058c7e <pvPortMalloc+0xe2>
 8058c7a:	2301      	movs	r3, #1
 8058c7c:	e000      	b.n	8058c80 <pvPortMalloc+0xe4>
 8058c7e:	2300      	movs	r3, #0
 8058c80:	2b00      	cmp	r3, #0
 8058c82:	d10d      	bne.n	8058ca0 <pvPortMalloc+0x104>
    __asm volatile
 8058c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058c88:	b672      	cpsid	i
 8058c8a:	f383 8811 	msr	BASEPRI, r3
 8058c8e:	f3bf 8f6f 	isb	sy
 8058c92:	f3bf 8f4f 	dsb	sy
 8058c96:	b662      	cpsie	i
 8058c98:	61fb      	str	r3, [r7, #28]
}
 8058c9a:	bf00      	nop
 8058c9c:	bf00      	nop
 8058c9e:	e7fd      	b.n	8058c9c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8058ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058ca2:	685b      	ldr	r3, [r3, #4]
 8058ca4:	687a      	ldr	r2, [r7, #4]
 8058ca6:	429a      	cmp	r2, r3
 8058ca8:	d903      	bls.n	8058cb2 <pvPortMalloc+0x116>
 8058caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058cac:	681b      	ldr	r3, [r3, #0]
 8058cae:	2b00      	cmp	r3, #0
 8058cb0:	d1d6      	bne.n	8058c60 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8058cb2:	4b55      	ldr	r3, [pc, #340]	@ (8058e08 <pvPortMalloc+0x26c>)
 8058cb4:	681b      	ldr	r3, [r3, #0]
 8058cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8058cb8:	429a      	cmp	r2, r3
 8058cba:	f000 8085 	beq.w	8058dc8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8058cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8058cc0:	681b      	ldr	r3, [r3, #0]
 8058cc2:	2208      	movs	r2, #8
 8058cc4:	4413      	add	r3, r2
 8058cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8058cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8058cca:	4a52      	ldr	r2, [pc, #328]	@ (8058e14 <pvPortMalloc+0x278>)
 8058ccc:	4293      	cmp	r3, r2
 8058cce:	d305      	bcc.n	8058cdc <pvPortMalloc+0x140>
 8058cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8058cd2:	4a51      	ldr	r2, [pc, #324]	@ (8058e18 <pvPortMalloc+0x27c>)
 8058cd4:	4293      	cmp	r3, r2
 8058cd6:	d801      	bhi.n	8058cdc <pvPortMalloc+0x140>
 8058cd8:	2301      	movs	r3, #1
 8058cda:	e000      	b.n	8058cde <pvPortMalloc+0x142>
 8058cdc:	2300      	movs	r3, #0
 8058cde:	2b00      	cmp	r3, #0
 8058ce0:	d10d      	bne.n	8058cfe <pvPortMalloc+0x162>
    __asm volatile
 8058ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058ce6:	b672      	cpsid	i
 8058ce8:	f383 8811 	msr	BASEPRI, r3
 8058cec:	f3bf 8f6f 	isb	sy
 8058cf0:	f3bf 8f4f 	dsb	sy
 8058cf4:	b662      	cpsie	i
 8058cf6:	61bb      	str	r3, [r7, #24]
}
 8058cf8:	bf00      	nop
 8058cfa:	bf00      	nop
 8058cfc:	e7fd      	b.n	8058cfa <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8058cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d00:	681a      	ldr	r2, [r3, #0]
 8058d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8058d04:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8058d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d08:	685b      	ldr	r3, [r3, #4]
 8058d0a:	687a      	ldr	r2, [r7, #4]
 8058d0c:	429a      	cmp	r2, r3
 8058d0e:	d90d      	bls.n	8058d2c <pvPortMalloc+0x190>
    __asm volatile
 8058d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058d14:	b672      	cpsid	i
 8058d16:	f383 8811 	msr	BASEPRI, r3
 8058d1a:	f3bf 8f6f 	isb	sy
 8058d1e:	f3bf 8f4f 	dsb	sy
 8058d22:	b662      	cpsie	i
 8058d24:	617b      	str	r3, [r7, #20]
}
 8058d26:	bf00      	nop
 8058d28:	bf00      	nop
 8058d2a:	e7fd      	b.n	8058d28 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8058d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d2e:	685a      	ldr	r2, [r3, #4]
 8058d30:	687b      	ldr	r3, [r7, #4]
 8058d32:	1ad2      	subs	r2, r2, r3
 8058d34:	2308      	movs	r3, #8
 8058d36:	005b      	lsls	r3, r3, #1
 8058d38:	429a      	cmp	r2, r3
 8058d3a:	d926      	bls.n	8058d8a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8058d3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8058d3e:	687b      	ldr	r3, [r7, #4]
 8058d40:	4413      	add	r3, r2
 8058d42:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8058d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8058d46:	f003 0307 	and.w	r3, r3, #7
 8058d4a:	2b00      	cmp	r3, #0
 8058d4c:	d00d      	beq.n	8058d6a <pvPortMalloc+0x1ce>
    __asm volatile
 8058d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058d52:	b672      	cpsid	i
 8058d54:	f383 8811 	msr	BASEPRI, r3
 8058d58:	f3bf 8f6f 	isb	sy
 8058d5c:	f3bf 8f4f 	dsb	sy
 8058d60:	b662      	cpsie	i
 8058d62:	613b      	str	r3, [r7, #16]
}
 8058d64:	bf00      	nop
 8058d66:	bf00      	nop
 8058d68:	e7fd      	b.n	8058d66 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8058d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d6c:	685a      	ldr	r2, [r3, #4]
 8058d6e:	687b      	ldr	r3, [r7, #4]
 8058d70:	1ad2      	subs	r2, r2, r3
 8058d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8058d74:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8058d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d78:	687a      	ldr	r2, [r7, #4]
 8058d7a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8058d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8058d7e:	681a      	ldr	r2, [r3, #0]
 8058d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8058d82:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8058d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8058d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8058d88:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8058d8a:	4b20      	ldr	r3, [pc, #128]	@ (8058e0c <pvPortMalloc+0x270>)
 8058d8c:	681a      	ldr	r2, [r3, #0]
 8058d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058d90:	685b      	ldr	r3, [r3, #4]
 8058d92:	1ad3      	subs	r3, r2, r3
 8058d94:	4a1d      	ldr	r2, [pc, #116]	@ (8058e0c <pvPortMalloc+0x270>)
 8058d96:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8058d98:	4b1c      	ldr	r3, [pc, #112]	@ (8058e0c <pvPortMalloc+0x270>)
 8058d9a:	681a      	ldr	r2, [r3, #0]
 8058d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8058e1c <pvPortMalloc+0x280>)
 8058d9e:	681b      	ldr	r3, [r3, #0]
 8058da0:	429a      	cmp	r2, r3
 8058da2:	d203      	bcs.n	8058dac <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8058da4:	4b19      	ldr	r3, [pc, #100]	@ (8058e0c <pvPortMalloc+0x270>)
 8058da6:	681b      	ldr	r3, [r3, #0]
 8058da8:	4a1c      	ldr	r2, [pc, #112]	@ (8058e1c <pvPortMalloc+0x280>)
 8058daa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8058dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058dae:	685b      	ldr	r3, [r3, #4]
 8058db0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8058db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058db6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8058db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8058dba:	2200      	movs	r2, #0
 8058dbc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8058dbe:	4b18      	ldr	r3, [pc, #96]	@ (8058e20 <pvPortMalloc+0x284>)
 8058dc0:	681b      	ldr	r3, [r3, #0]
 8058dc2:	3301      	adds	r3, #1
 8058dc4:	4a16      	ldr	r2, [pc, #88]	@ (8058e20 <pvPortMalloc+0x284>)
 8058dc6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8058dc8:	f7fd fda4 	bl	8056914 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8058dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8058dce:	2b00      	cmp	r3, #0
 8058dd0:	d101      	bne.n	8058dd6 <pvPortMalloc+0x23a>
        {
            vApplicationMallocFailedHook();
 8058dd2:	f7e7 fe0d 	bl	80409f0 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8058dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8058dd8:	f003 0307 	and.w	r3, r3, #7
 8058ddc:	2b00      	cmp	r3, #0
 8058dde:	d00d      	beq.n	8058dfc <pvPortMalloc+0x260>
    __asm volatile
 8058de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058de4:	b672      	cpsid	i
 8058de6:	f383 8811 	msr	BASEPRI, r3
 8058dea:	f3bf 8f6f 	isb	sy
 8058dee:	f3bf 8f4f 	dsb	sy
 8058df2:	b662      	cpsie	i
 8058df4:	60fb      	str	r3, [r7, #12]
}
 8058df6:	bf00      	nop
 8058df8:	bf00      	nop
 8058dfa:	e7fd      	b.n	8058df8 <pvPortMalloc+0x25c>
    return pvReturn;
 8058dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8058dfe:	4618      	mov	r0, r3
 8058e00:	3738      	adds	r7, #56	@ 0x38
 8058e02:	46bd      	mov	sp, r7
 8058e04:	bd80      	pop	{r7, pc}
 8058e06:	bf00      	nop
 8058e08:	2406e0cc 	.word	0x2406e0cc
 8058e0c:	2406e0d0 	.word	0x2406e0d0
 8058e10:	2406e0c4 	.word	0x2406e0c4
 8058e14:	2402e0c4 	.word	0x2402e0c4
 8058e18:	2406e0c3 	.word	0x2406e0c3
 8058e1c:	2406e0d4 	.word	0x2406e0d4
 8058e20:	2406e0d8 	.word	0x2406e0d8

08058e24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8058e24:	b580      	push	{r7, lr}
 8058e26:	b088      	sub	sp, #32
 8058e28:	af00      	add	r7, sp, #0
 8058e2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8058e2c:	687b      	ldr	r3, [r7, #4]
 8058e2e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8058e30:	687b      	ldr	r3, [r7, #4]
 8058e32:	2b00      	cmp	r3, #0
 8058e34:	d066      	beq.n	8058f04 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8058e36:	2308      	movs	r3, #8
 8058e38:	425b      	negs	r3, r3
 8058e3a:	69fa      	ldr	r2, [r7, #28]
 8058e3c:	4413      	add	r3, r2
 8058e3e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8058e40:	69fb      	ldr	r3, [r7, #28]
 8058e42:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8058e44:	69bb      	ldr	r3, [r7, #24]
 8058e46:	4a31      	ldr	r2, [pc, #196]	@ (8058f0c <vPortFree+0xe8>)
 8058e48:	4293      	cmp	r3, r2
 8058e4a:	d305      	bcc.n	8058e58 <vPortFree+0x34>
 8058e4c:	69bb      	ldr	r3, [r7, #24]
 8058e4e:	4a30      	ldr	r2, [pc, #192]	@ (8058f10 <vPortFree+0xec>)
 8058e50:	4293      	cmp	r3, r2
 8058e52:	d801      	bhi.n	8058e58 <vPortFree+0x34>
 8058e54:	2301      	movs	r3, #1
 8058e56:	e000      	b.n	8058e5a <vPortFree+0x36>
 8058e58:	2300      	movs	r3, #0
 8058e5a:	2b00      	cmp	r3, #0
 8058e5c:	d10d      	bne.n	8058e7a <vPortFree+0x56>
    __asm volatile
 8058e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058e62:	b672      	cpsid	i
 8058e64:	f383 8811 	msr	BASEPRI, r3
 8058e68:	f3bf 8f6f 	isb	sy
 8058e6c:	f3bf 8f4f 	dsb	sy
 8058e70:	b662      	cpsie	i
 8058e72:	617b      	str	r3, [r7, #20]
}
 8058e74:	bf00      	nop
 8058e76:	bf00      	nop
 8058e78:	e7fd      	b.n	8058e76 <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8058e7a:	69bb      	ldr	r3, [r7, #24]
 8058e7c:	685b      	ldr	r3, [r3, #4]
 8058e7e:	2b00      	cmp	r3, #0
 8058e80:	db0d      	blt.n	8058e9e <vPortFree+0x7a>
    __asm volatile
 8058e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058e86:	b672      	cpsid	i
 8058e88:	f383 8811 	msr	BASEPRI, r3
 8058e8c:	f3bf 8f6f 	isb	sy
 8058e90:	f3bf 8f4f 	dsb	sy
 8058e94:	b662      	cpsie	i
 8058e96:	613b      	str	r3, [r7, #16]
}
 8058e98:	bf00      	nop
 8058e9a:	bf00      	nop
 8058e9c:	e7fd      	b.n	8058e9a <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8058e9e:	69bb      	ldr	r3, [r7, #24]
 8058ea0:	681b      	ldr	r3, [r3, #0]
 8058ea2:	2b00      	cmp	r3, #0
 8058ea4:	d00d      	beq.n	8058ec2 <vPortFree+0x9e>
    __asm volatile
 8058ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8058eaa:	b672      	cpsid	i
 8058eac:	f383 8811 	msr	BASEPRI, r3
 8058eb0:	f3bf 8f6f 	isb	sy
 8058eb4:	f3bf 8f4f 	dsb	sy
 8058eb8:	b662      	cpsie	i
 8058eba:	60fb      	str	r3, [r7, #12]
}
 8058ebc:	bf00      	nop
 8058ebe:	bf00      	nop
 8058ec0:	e7fd      	b.n	8058ebe <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8058ec2:	69bb      	ldr	r3, [r7, #24]
 8058ec4:	685b      	ldr	r3, [r3, #4]
 8058ec6:	2b00      	cmp	r3, #0
 8058ec8:	da1c      	bge.n	8058f04 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8058eca:	69bb      	ldr	r3, [r7, #24]
 8058ecc:	681b      	ldr	r3, [r3, #0]
 8058ece:	2b00      	cmp	r3, #0
 8058ed0:	d118      	bne.n	8058f04 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8058ed2:	69bb      	ldr	r3, [r7, #24]
 8058ed4:	685b      	ldr	r3, [r3, #4]
 8058ed6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8058eda:	69bb      	ldr	r3, [r7, #24]
 8058edc:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8058ede:	f7fd fd0b 	bl	80568f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8058ee2:	69bb      	ldr	r3, [r7, #24]
 8058ee4:	685a      	ldr	r2, [r3, #4]
 8058ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8058f14 <vPortFree+0xf0>)
 8058ee8:	681b      	ldr	r3, [r3, #0]
 8058eea:	4413      	add	r3, r2
 8058eec:	4a09      	ldr	r2, [pc, #36]	@ (8058f14 <vPortFree+0xf0>)
 8058eee:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8058ef0:	69b8      	ldr	r0, [r7, #24]
 8058ef2:	f000 f86d 	bl	8058fd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8058ef6:	4b08      	ldr	r3, [pc, #32]	@ (8058f18 <vPortFree+0xf4>)
 8058ef8:	681b      	ldr	r3, [r3, #0]
 8058efa:	3301      	adds	r3, #1
 8058efc:	4a06      	ldr	r2, [pc, #24]	@ (8058f18 <vPortFree+0xf4>)
 8058efe:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8058f00:	f7fd fd08 	bl	8056914 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8058f04:	bf00      	nop
 8058f06:	3720      	adds	r7, #32
 8058f08:	46bd      	mov	sp, r7
 8058f0a:	bd80      	pop	{r7, pc}
 8058f0c:	2402e0c4 	.word	0x2402e0c4
 8058f10:	2406e0c3 	.word	0x2406e0c3
 8058f14:	2406e0d0 	.word	0x2406e0d0
 8058f18:	2406e0dc 	.word	0x2406e0dc

08058f1c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8058f1c:	b480      	push	{r7}
 8058f1e:	b085      	sub	sp, #20
 8058f20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8058f22:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8058f26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8058f28:	4b24      	ldr	r3, [pc, #144]	@ (8058fbc <prvHeapInit+0xa0>)
 8058f2a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8058f2c:	68fb      	ldr	r3, [r7, #12]
 8058f2e:	f003 0307 	and.w	r3, r3, #7
 8058f32:	2b00      	cmp	r3, #0
 8058f34:	d00c      	beq.n	8058f50 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8058f36:	68fb      	ldr	r3, [r7, #12]
 8058f38:	3307      	adds	r3, #7
 8058f3a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8058f3c:	68fb      	ldr	r3, [r7, #12]
 8058f3e:	f023 0307 	bic.w	r3, r3, #7
 8058f42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8058f44:	68ba      	ldr	r2, [r7, #8]
 8058f46:	68fb      	ldr	r3, [r7, #12]
 8058f48:	1ad3      	subs	r3, r2, r3
 8058f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8058fbc <prvHeapInit+0xa0>)
 8058f4c:	4413      	add	r3, r2
 8058f4e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8058f50:	68fb      	ldr	r3, [r7, #12]
 8058f52:	4a1b      	ldr	r2, [pc, #108]	@ (8058fc0 <prvHeapInit+0xa4>)
 8058f54:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8058f56:	4b1a      	ldr	r3, [pc, #104]	@ (8058fc0 <prvHeapInit+0xa4>)
 8058f58:	2200      	movs	r2, #0
 8058f5a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8058f5c:	68fa      	ldr	r2, [r7, #12]
 8058f5e:	68bb      	ldr	r3, [r7, #8]
 8058f60:	4413      	add	r3, r2
 8058f62:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8058f64:	2208      	movs	r2, #8
 8058f66:	687b      	ldr	r3, [r7, #4]
 8058f68:	1a9b      	subs	r3, r3, r2
 8058f6a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8058f6c:	687b      	ldr	r3, [r7, #4]
 8058f6e:	f023 0307 	bic.w	r3, r3, #7
 8058f72:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8058f74:	687b      	ldr	r3, [r7, #4]
 8058f76:	4a13      	ldr	r2, [pc, #76]	@ (8058fc4 <prvHeapInit+0xa8>)
 8058f78:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8058f7a:	4b12      	ldr	r3, [pc, #72]	@ (8058fc4 <prvHeapInit+0xa8>)
 8058f7c:	681b      	ldr	r3, [r3, #0]
 8058f7e:	2200      	movs	r2, #0
 8058f80:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8058f82:	4b10      	ldr	r3, [pc, #64]	@ (8058fc4 <prvHeapInit+0xa8>)
 8058f84:	681b      	ldr	r3, [r3, #0]
 8058f86:	2200      	movs	r2, #0
 8058f88:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8058f8a:	68fb      	ldr	r3, [r7, #12]
 8058f8c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8058f8e:	683b      	ldr	r3, [r7, #0]
 8058f90:	687a      	ldr	r2, [r7, #4]
 8058f92:	1ad2      	subs	r2, r2, r3
 8058f94:	683b      	ldr	r3, [r7, #0]
 8058f96:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8058f98:	4b0a      	ldr	r3, [pc, #40]	@ (8058fc4 <prvHeapInit+0xa8>)
 8058f9a:	681a      	ldr	r2, [r3, #0]
 8058f9c:	683b      	ldr	r3, [r7, #0]
 8058f9e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8058fa0:	683b      	ldr	r3, [r7, #0]
 8058fa2:	685b      	ldr	r3, [r3, #4]
 8058fa4:	4a08      	ldr	r2, [pc, #32]	@ (8058fc8 <prvHeapInit+0xac>)
 8058fa6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8058fa8:	683b      	ldr	r3, [r7, #0]
 8058faa:	685b      	ldr	r3, [r3, #4]
 8058fac:	4a07      	ldr	r2, [pc, #28]	@ (8058fcc <prvHeapInit+0xb0>)
 8058fae:	6013      	str	r3, [r2, #0]
}
 8058fb0:	bf00      	nop
 8058fb2:	3714      	adds	r7, #20
 8058fb4:	46bd      	mov	sp, r7
 8058fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058fba:	4770      	bx	lr
 8058fbc:	2402e0c4 	.word	0x2402e0c4
 8058fc0:	2406e0c4 	.word	0x2406e0c4
 8058fc4:	2406e0cc 	.word	0x2406e0cc
 8058fc8:	2406e0d4 	.word	0x2406e0d4
 8058fcc:	2406e0d0 	.word	0x2406e0d0

08058fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8058fd0:	b480      	push	{r7}
 8058fd2:	b087      	sub	sp, #28
 8058fd4:	af00      	add	r7, sp, #0
 8058fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8058fd8:	4b37      	ldr	r3, [pc, #220]	@ (80590b8 <prvInsertBlockIntoFreeList+0xe8>)
 8058fda:	617b      	str	r3, [r7, #20]
 8058fdc:	e002      	b.n	8058fe4 <prvInsertBlockIntoFreeList+0x14>
 8058fde:	697b      	ldr	r3, [r7, #20]
 8058fe0:	681b      	ldr	r3, [r3, #0]
 8058fe2:	617b      	str	r3, [r7, #20]
 8058fe4:	697b      	ldr	r3, [r7, #20]
 8058fe6:	681b      	ldr	r3, [r3, #0]
 8058fe8:	687a      	ldr	r2, [r7, #4]
 8058fea:	429a      	cmp	r2, r3
 8058fec:	d8f7      	bhi.n	8058fde <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8058fee:	697b      	ldr	r3, [r7, #20]
 8058ff0:	4a31      	ldr	r2, [pc, #196]	@ (80590b8 <prvInsertBlockIntoFreeList+0xe8>)
 8058ff2:	4293      	cmp	r3, r2
 8058ff4:	d01a      	beq.n	805902c <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8058ff6:	697b      	ldr	r3, [r7, #20]
 8058ff8:	4a30      	ldr	r2, [pc, #192]	@ (80590bc <prvInsertBlockIntoFreeList+0xec>)
 8058ffa:	4293      	cmp	r3, r2
 8058ffc:	d305      	bcc.n	805900a <prvInsertBlockIntoFreeList+0x3a>
 8058ffe:	697b      	ldr	r3, [r7, #20]
 8059000:	4a2f      	ldr	r2, [pc, #188]	@ (80590c0 <prvInsertBlockIntoFreeList+0xf0>)
 8059002:	4293      	cmp	r3, r2
 8059004:	d801      	bhi.n	805900a <prvInsertBlockIntoFreeList+0x3a>
 8059006:	2301      	movs	r3, #1
 8059008:	e000      	b.n	805900c <prvInsertBlockIntoFreeList+0x3c>
 805900a:	2300      	movs	r3, #0
 805900c:	2b00      	cmp	r3, #0
 805900e:	d10d      	bne.n	805902c <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8059010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8059014:	b672      	cpsid	i
 8059016:	f383 8811 	msr	BASEPRI, r3
 805901a:	f3bf 8f6f 	isb	sy
 805901e:	f3bf 8f4f 	dsb	sy
 8059022:	b662      	cpsie	i
 8059024:	60fb      	str	r3, [r7, #12]
}
 8059026:	bf00      	nop
 8059028:	bf00      	nop
 805902a:	e7fd      	b.n	8059028 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 805902c:	697b      	ldr	r3, [r7, #20]
 805902e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8059030:	697b      	ldr	r3, [r7, #20]
 8059032:	685b      	ldr	r3, [r3, #4]
 8059034:	693a      	ldr	r2, [r7, #16]
 8059036:	4413      	add	r3, r2
 8059038:	687a      	ldr	r2, [r7, #4]
 805903a:	429a      	cmp	r2, r3
 805903c:	d108      	bne.n	8059050 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 805903e:	697b      	ldr	r3, [r7, #20]
 8059040:	685a      	ldr	r2, [r3, #4]
 8059042:	687b      	ldr	r3, [r7, #4]
 8059044:	685b      	ldr	r3, [r3, #4]
 8059046:	441a      	add	r2, r3
 8059048:	697b      	ldr	r3, [r7, #20]
 805904a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 805904c:	697b      	ldr	r3, [r7, #20]
 805904e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8059050:	687b      	ldr	r3, [r7, #4]
 8059052:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8059054:	687b      	ldr	r3, [r7, #4]
 8059056:	685b      	ldr	r3, [r3, #4]
 8059058:	693a      	ldr	r2, [r7, #16]
 805905a:	441a      	add	r2, r3
 805905c:	697b      	ldr	r3, [r7, #20]
 805905e:	681b      	ldr	r3, [r3, #0]
 8059060:	429a      	cmp	r2, r3
 8059062:	d118      	bne.n	8059096 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8059064:	697b      	ldr	r3, [r7, #20]
 8059066:	681a      	ldr	r2, [r3, #0]
 8059068:	4b16      	ldr	r3, [pc, #88]	@ (80590c4 <prvInsertBlockIntoFreeList+0xf4>)
 805906a:	681b      	ldr	r3, [r3, #0]
 805906c:	429a      	cmp	r2, r3
 805906e:	d00d      	beq.n	805908c <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8059070:	687b      	ldr	r3, [r7, #4]
 8059072:	685a      	ldr	r2, [r3, #4]
 8059074:	697b      	ldr	r3, [r7, #20]
 8059076:	681b      	ldr	r3, [r3, #0]
 8059078:	685b      	ldr	r3, [r3, #4]
 805907a:	441a      	add	r2, r3
 805907c:	687b      	ldr	r3, [r7, #4]
 805907e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8059080:	697b      	ldr	r3, [r7, #20]
 8059082:	681b      	ldr	r3, [r3, #0]
 8059084:	681a      	ldr	r2, [r3, #0]
 8059086:	687b      	ldr	r3, [r7, #4]
 8059088:	601a      	str	r2, [r3, #0]
 805908a:	e008      	b.n	805909e <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 805908c:	4b0d      	ldr	r3, [pc, #52]	@ (80590c4 <prvInsertBlockIntoFreeList+0xf4>)
 805908e:	681a      	ldr	r2, [r3, #0]
 8059090:	687b      	ldr	r3, [r7, #4]
 8059092:	601a      	str	r2, [r3, #0]
 8059094:	e003      	b.n	805909e <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8059096:	697b      	ldr	r3, [r7, #20]
 8059098:	681a      	ldr	r2, [r3, #0]
 805909a:	687b      	ldr	r3, [r7, #4]
 805909c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 805909e:	697a      	ldr	r2, [r7, #20]
 80590a0:	687b      	ldr	r3, [r7, #4]
 80590a2:	429a      	cmp	r2, r3
 80590a4:	d002      	beq.n	80590ac <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80590a6:	697b      	ldr	r3, [r7, #20]
 80590a8:	687a      	ldr	r2, [r7, #4]
 80590aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80590ac:	bf00      	nop
 80590ae:	371c      	adds	r7, #28
 80590b0:	46bd      	mov	sp, r7
 80590b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80590b6:	4770      	bx	lr
 80590b8:	2406e0c4 	.word	0x2406e0c4
 80590bc:	2402e0c4 	.word	0x2402e0c4
 80590c0:	2406e0c3 	.word	0x2406e0c3
 80590c4:	2406e0cc 	.word	0x2406e0cc

080590c8 <LogManager_InitChannel>:
__attribute__((section(".log_data"))) __attribute__((aligned(4))) uint8_t exp_log_right[LOG_BUFFER_SIZE_EXP];

LogManager_TypeDef log_manager;

// --- Internal Helper Functions ---
static void LogManager_InitChannel(LogChannel_TypeDef *channel, uint8_t *b_left, uint8_t *b_right, uint32_t buf_size, uint32_t threshold) {
 80590c8:	b580      	push	{r7, lr}
 80590ca:	b084      	sub	sp, #16
 80590cc:	af00      	add	r7, sp, #0
 80590ce:	60f8      	str	r0, [r7, #12]
 80590d0:	60b9      	str	r1, [r7, #8]
 80590d2:	607a      	str	r2, [r7, #4]
 80590d4:	603b      	str	r3, [r7, #0]
    channel->buffer_left = b_left;
 80590d6:	68fb      	ldr	r3, [r7, #12]
 80590d8:	68ba      	ldr	r2, [r7, #8]
 80590da:	601a      	str	r2, [r3, #0]
    channel->buffer_right = b_right;
 80590dc:	68fb      	ldr	r3, [r7, #12]
 80590de:	687a      	ldr	r2, [r7, #4]
 80590e0:	605a      	str	r2, [r3, #4]
    channel->buffer_size = buf_size;
 80590e2:	68fb      	ldr	r3, [r7, #12]
 80590e4:	683a      	ldr	r2, [r7, #0]
 80590e6:	609a      	str	r2, [r3, #8]
    channel->trigger_threshold = threshold;
 80590e8:	68fb      	ldr	r3, [r7, #12]
 80590ea:	69ba      	ldr	r2, [r7, #24]
 80590ec:	60da      	str	r2, [r3, #12]

    memset(channel->buffer_left, 0, channel->buffer_size);
 80590ee:	68fb      	ldr	r3, [r7, #12]
 80590f0:	6818      	ldr	r0, [r3, #0]
 80590f2:	68fb      	ldr	r3, [r7, #12]
 80590f4:	689b      	ldr	r3, [r3, #8]
 80590f6:	461a      	mov	r2, r3
 80590f8:	2100      	movs	r1, #0
 80590fa:	f010 fb73 	bl	80697e4 <memset>
    memset(channel->buffer_right, 0, channel->buffer_size);
 80590fe:	68fb      	ldr	r3, [r7, #12]
 8059100:	6858      	ldr	r0, [r3, #4]
 8059102:	68fb      	ldr	r3, [r7, #12]
 8059104:	689b      	ldr	r3, [r3, #8]
 8059106:	461a      	mov	r2, r3
 8059108:	2100      	movs	r1, #0
 805910a:	f010 fb6b 	bl	80697e4 <memset>

    channel->current_index = 0;
 805910e:	68fb      	ldr	r3, [r7, #12]
 8059110:	2200      	movs	r2, #0
 8059112:	611a      	str	r2, [r3, #16]
    channel->active_buffer = LOG_BUFFER_LEFT;
 8059114:	68fb      	ldr	r3, [r7, #12]
 8059116:	2200      	movs	r2, #0
 8059118:	751a      	strb	r2, [r3, #20]
    channel->transfer_ready_flag = false;
 805911a:	68fb      	ldr	r3, [r7, #12]
 805911c:	2200      	movs	r2, #0
 805911e:	755a      	strb	r2, [r3, #21]
}
 8059120:	bf00      	nop
 8059122:	3710      	adds	r7, #16
 8059124:	46bd      	mov	sp, r7
 8059126:	bd80      	pop	{r7, pc}

08059128 <LogManager_Write_Internal>:

static void LogManager_Write_Internal(LogChannel_TypeDef *channel, uint8_t *data, uint32_t length) {
 8059128:	b580      	push	{r7, lr}
 805912a:	b086      	sub	sp, #24
 805912c:	af00      	add	r7, sp, #0
 805912e:	60f8      	str	r0, [r7, #12]
 8059130:	60b9      	str	r1, [r7, #8]
 8059132:	607a      	str	r2, [r7, #4]
    if (channel->current_index + length > channel->buffer_size) {
 8059134:	68fb      	ldr	r3, [r7, #12]
 8059136:	691a      	ldr	r2, [r3, #16]
 8059138:	687b      	ldr	r3, [r7, #4]
 805913a:	441a      	add	r2, r3
 805913c:	68fb      	ldr	r3, [r7, #12]
 805913e:	689b      	ldr	r3, [r3, #8]
 8059140:	429a      	cmp	r2, r3
 8059142:	d837      	bhi.n	80591b4 <LogManager_Write_Internal+0x8c>
        printf("LogManager_Write: Data too large or buffer full! Dropping data.\n");
        #endif
        return;
    }

    uint8_t *target_buffer = (channel->active_buffer == LOG_BUFFER_LEFT) ? channel->buffer_left : channel->buffer_right;
 8059144:	68fb      	ldr	r3, [r7, #12]
 8059146:	7d1b      	ldrb	r3, [r3, #20]
 8059148:	2b00      	cmp	r3, #0
 805914a:	d102      	bne.n	8059152 <LogManager_Write_Internal+0x2a>
 805914c:	68fb      	ldr	r3, [r7, #12]
 805914e:	681b      	ldr	r3, [r3, #0]
 8059150:	e001      	b.n	8059156 <LogManager_Write_Internal+0x2e>
 8059152:	68fb      	ldr	r3, [r7, #12]
 8059154:	685b      	ldr	r3, [r3, #4]
 8059156:	617b      	str	r3, [r7, #20]

    memcpy(target_buffer + channel->current_index, data, length);
 8059158:	68fb      	ldr	r3, [r7, #12]
 805915a:	691b      	ldr	r3, [r3, #16]
 805915c:	697a      	ldr	r2, [r7, #20]
 805915e:	4413      	add	r3, r2
 8059160:	687a      	ldr	r2, [r7, #4]
 8059162:	68b9      	ldr	r1, [r7, #8]
 8059164:	4618      	mov	r0, r3
 8059166:	f010 fbe8 	bl	806993a <memcpy>
    channel->current_index += length;
 805916a:	68fb      	ldr	r3, [r7, #12]
 805916c:	691a      	ldr	r2, [r3, #16]
 805916e:	687b      	ldr	r3, [r7, #4]
 8059170:	441a      	add	r2, r3
 8059172:	68fb      	ldr	r3, [r7, #12]
 8059174:	611a      	str	r2, [r3, #16]

    if (channel->current_index >= channel->trigger_threshold && !channel->transfer_ready_flag) {
 8059176:	68fb      	ldr	r3, [r7, #12]
 8059178:	691a      	ldr	r2, [r3, #16]
 805917a:	68fb      	ldr	r3, [r7, #12]
 805917c:	68db      	ldr	r3, [r3, #12]
 805917e:	429a      	cmp	r2, r3
 8059180:	d319      	bcc.n	80591b6 <LogManager_Write_Internal+0x8e>
 8059182:	68fb      	ldr	r3, [r7, #12]
 8059184:	7d5b      	ldrb	r3, [r3, #21]
 8059186:	b2db      	uxtb	r3, r3
 8059188:	f083 0301 	eor.w	r3, r3, #1
 805918c:	b2db      	uxtb	r3, r3
 805918e:	2b00      	cmp	r3, #0
 8059190:	d011      	beq.n	80591b6 <LogManager_Write_Internal+0x8e>
        channel->transfer_ready_flag = true;
 8059192:	68fb      	ldr	r3, [r7, #12]
 8059194:	2201      	movs	r2, #1
 8059196:	755a      	strb	r2, [r3, #21]
        channel->active_buffer = (channel->active_buffer == LOG_BUFFER_LEFT) ? LOG_BUFFER_RIGHT : LOG_BUFFER_LEFT;
 8059198:	68fb      	ldr	r3, [r7, #12]
 805919a:	7d1b      	ldrb	r3, [r3, #20]
 805919c:	2b00      	cmp	r3, #0
 805919e:	bf0c      	ite	eq
 80591a0:	2301      	moveq	r3, #1
 80591a2:	2300      	movne	r3, #0
 80591a4:	b2db      	uxtb	r3, r3
 80591a6:	461a      	mov	r2, r3
 80591a8:	68fb      	ldr	r3, [r7, #12]
 80591aa:	751a      	strb	r2, [r3, #20]
        channel->current_index = 0;
 80591ac:	68fb      	ldr	r3, [r7, #12]
 80591ae:	2200      	movs	r2, #0
 80591b0:	611a      	str	r2, [r3, #16]
 80591b2:	e000      	b.n	80591b6 <LogManager_Write_Internal+0x8e>
        return;
 80591b4:	bf00      	nop
    }
}
 80591b6:	3718      	adds	r7, #24
 80591b8:	46bd      	mov	sp, r7
 80591ba:	bd80      	pop	{r7, pc}

080591bc <LogManager_Init>:


// --- Public API Implementation ---

void LogManager_Init(void) {
 80591bc:	b580      	push	{r7, lr}
 80591be:	b082      	sub	sp, #8
 80591c0:	af02      	add	r7, sp, #8
    // Initialize OBC Channel
    LogManager_InitChannel(&log_manager.channels[LOG_SOURCE_OBC],
 80591c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80591c6:	9300      	str	r3, [sp, #0]
 80591c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80591cc:	4a08      	ldr	r2, [pc, #32]	@ (80591f0 <LogManager_Init+0x34>)
 80591ce:	4909      	ldr	r1, [pc, #36]	@ (80591f4 <LogManager_Init+0x38>)
 80591d0:	4809      	ldr	r0, [pc, #36]	@ (80591f8 <LogManager_Init+0x3c>)
 80591d2:	f7ff ff79 	bl	80590c8 <LogManager_InitChannel>
                           obc_log_left, obc_log_right,
                           LOG_BUFFER_SIZE_OBC, LOG_TRIGGER_THRESHOLD_OBC);

    // Initialize EXP Channel
    LogManager_InitChannel(&log_manager.channels[LOG_SOURCE_EXP],
 80591d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80591da:	9300      	str	r3, [sp, #0]
 80591dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80591e0:	4a06      	ldr	r2, [pc, #24]	@ (80591fc <LogManager_Init+0x40>)
 80591e2:	4907      	ldr	r1, [pc, #28]	@ (8059200 <LogManager_Init+0x44>)
 80591e4:	4807      	ldr	r0, [pc, #28]	@ (8059204 <LogManager_Init+0x48>)
 80591e6:	f7ff ff6f 	bl	80590c8 <LogManager_InitChannel>
                           exp_log_left, exp_log_right,
                           LOG_BUFFER_SIZE_EXP, LOG_TRIGGER_THRESHOLD_EXP);
}
 80591ea:	bf00      	nop
 80591ec:	46bd      	mov	sp, r7
 80591ee:	bd80      	pop	{r7, pc}
 80591f0:	3000c000 	.word	0x3000c000
 80591f4:	30008000 	.word	0x30008000
 80591f8:	2406e0e0 	.word	0x2406e0e0
 80591fc:	30014000 	.word	0x30014000
 8059200:	30010000 	.word	0x30010000
 8059204:	2406e0f8 	.word	0x2406e0f8

08059208 <LogManager_Write_OBC>:

void LogManager_Write_OBC(uint8_t *data, uint32_t length) {
 8059208:	b580      	push	{r7, lr}
 805920a:	b082      	sub	sp, #8
 805920c:	af00      	add	r7, sp, #0
 805920e:	6078      	str	r0, [r7, #4]
 8059210:	6039      	str	r1, [r7, #0]
    LogManager_Write_Internal(&log_manager.channels[LOG_SOURCE_OBC], data, length);
 8059212:	683a      	ldr	r2, [r7, #0]
 8059214:	6879      	ldr	r1, [r7, #4]
 8059216:	4803      	ldr	r0, [pc, #12]	@ (8059224 <LogManager_Write_OBC+0x1c>)
 8059218:	f7ff ff86 	bl	8059128 <LogManager_Write_Internal>
}
 805921c:	bf00      	nop
 805921e:	3708      	adds	r7, #8
 8059220:	46bd      	mov	sp, r7
 8059222:	bd80      	pop	{r7, pc}
 8059224:	2406e0e0 	.word	0x2406e0e0

08059228 <LogManager_Process>:

void LogManager_Write_EXP(uint8_t *data, uint32_t length) {
    LogManager_Write_Internal(&log_manager.channels[LOG_SOURCE_EXP], data, length);
}

void LogManager_Process(void) {
 8059228:	b580      	push	{r7, lr}
 805922a:	b084      	sub	sp, #16
 805922c:	af00      	add	r7, sp, #0
    for (int i = 0; i < LOG_SOURCE_COUNT; i++) {
 805922e:	2300      	movs	r3, #0
 8059230:	60fb      	str	r3, [r7, #12]
 8059232:	e037      	b.n	80592a4 <LogManager_Process+0x7c>
        LogChannel_TypeDef *channel = &log_manager.channels[i];
 8059234:	68fa      	ldr	r2, [r7, #12]
 8059236:	4613      	mov	r3, r2
 8059238:	005b      	lsls	r3, r3, #1
 805923a:	4413      	add	r3, r2
 805923c:	00db      	lsls	r3, r3, #3
 805923e:	4a1d      	ldr	r2, [pc, #116]	@ (80592b4 <LogManager_Process+0x8c>)
 8059240:	4413      	add	r3, r2
 8059242:	60bb      	str	r3, [r7, #8]

        if (channel->transfer_ready_flag) {
 8059244:	68bb      	ldr	r3, [r7, #8]
 8059246:	7d5b      	ldrb	r3, [r3, #21]
 8059248:	b2db      	uxtb	r3, r3
 805924a:	2b00      	cmp	r3, #0
 805924c:	d027      	beq.n	805929e <LogManager_Process+0x76>
            // The buffer to send is the one that is NOT active
            uint8_t *buffer_to_send = (channel->active_buffer == LOG_BUFFER_RIGHT) ? channel->buffer_left : channel->buffer_right;
 805924e:	68bb      	ldr	r3, [r7, #8]
 8059250:	7d1b      	ldrb	r3, [r3, #20]
 8059252:	2b01      	cmp	r3, #1
 8059254:	d102      	bne.n	805925c <LogManager_Process+0x34>
 8059256:	68bb      	ldr	r3, [r7, #8]
 8059258:	681b      	ldr	r3, [r3, #0]
 805925a:	e001      	b.n	8059260 <LogManager_Process+0x38>
 805925c:	68bb      	ldr	r3, [r7, #8]
 805925e:	685b      	ldr	r3, [r3, #4]
 8059260:	607b      	str	r3, [r7, #4]
            uint32_t length_to_send = channel->trigger_threshold; // Send the threshold amount
 8059262:	68bb      	ldr	r3, [r7, #8]
 8059264:	68db      	ldr	r3, [r3, #12]
 8059266:	603b      	str	r3, [r7, #0]

            LogManager_SendLogData((LogSource_TypeDef)i, buffer_to_send, length_to_send);
 8059268:	68fb      	ldr	r3, [r7, #12]
 805926a:	b2db      	uxtb	r3, r3
 805926c:	683a      	ldr	r2, [r7, #0]
 805926e:	6879      	ldr	r1, [r7, #4]
 8059270:	4618      	mov	r0, r3
 8059272:	f000 f821 	bl	80592b8 <LogManager_SendLogData>

            // Clear the buffer that was just sent and reset the flag
            if (LogManager_SendLogData((LogSource_TypeDef)i, buffer_to_send, length_to_send)) {
 8059276:	68fb      	ldr	r3, [r7, #12]
 8059278:	b2db      	uxtb	r3, r3
 805927a:	683a      	ldr	r2, [r7, #0]
 805927c:	6879      	ldr	r1, [r7, #4]
 805927e:	4618      	mov	r0, r3
 8059280:	f000 f81a 	bl	80592b8 <LogManager_SendLogData>
 8059284:	4603      	mov	r3, r0
 8059286:	2b00      	cmp	r3, #0
 8059288:	d009      	beq.n	805929e <LogManager_Process+0x76>
                memset(buffer_to_send, 0, channel->buffer_size);
 805928a:	68bb      	ldr	r3, [r7, #8]
 805928c:	689b      	ldr	r3, [r3, #8]
 805928e:	461a      	mov	r2, r3
 8059290:	2100      	movs	r1, #0
 8059292:	6878      	ldr	r0, [r7, #4]
 8059294:	f010 faa6 	bl	80697e4 <memset>
                channel->transfer_ready_flag = false;
 8059298:	68bb      	ldr	r3, [r7, #8]
 805929a:	2200      	movs	r2, #0
 805929c:	755a      	strb	r2, [r3, #21]
    for (int i = 0; i < LOG_SOURCE_COUNT; i++) {
 805929e:	68fb      	ldr	r3, [r7, #12]
 80592a0:	3301      	adds	r3, #1
 80592a2:	60fb      	str	r3, [r7, #12]
 80592a4:	68fb      	ldr	r3, [r7, #12]
 80592a6:	2b01      	cmp	r3, #1
 80592a8:	ddc4      	ble.n	8059234 <LogManager_Process+0xc>
            }
        }
    }
}
 80592aa:	bf00      	nop
 80592ac:	bf00      	nop
 80592ae:	3710      	adds	r7, #16
 80592b0:	46bd      	mov	sp, r7
 80592b2:	bd80      	pop	{r7, pc}
 80592b4:	2406e0e0 	.word	0x2406e0e0

080592b8 <LogManager_SendLogData>:

__attribute__((weak)) bool LogManager_SendLogData(LogSource_TypeDef source, uint8_t *current_buffer_to_send, uint32_t data_length) {
 80592b8:	b480      	push	{r7}
 80592ba:	b085      	sub	sp, #20
 80592bc:	af00      	add	r7, sp, #0
 80592be:	4603      	mov	r3, r0
 80592c0:	60b9      	str	r1, [r7, #8]
 80592c2:	607a      	str	r2, [r7, #4]
 80592c4:	73fb      	strb	r3, [r7, #15]
    const char* source_name = (source == LOG_SOURCE_OBC) ? "OBC" : "EXP";
    printf("LogManager_SendLogData: Simulating send for %s. Length: %lu bytes.\n", source_name, data_length);
    #endif

    // Mặc định giả lập là gửi thành công
    return true;
 80592c6:	2301      	movs	r3, #1

    // Thực tế bạn sẽ viết như sau:
    // if (HAL_UART_Transmit(...) == HAL_OK) return true;
    // else return false;
}
 80592c8:	4618      	mov	r0, r3
 80592ca:	3714      	adds	r7, #20
 80592cc:	46bd      	mov	sp, r7
 80592ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80592d2:	4770      	bx	lr

080592d4 <LogManager_DebugInfo>:

// --- Debugging API Implementation ---

#define LOG_MANAGER_DEBUG

void LogManager_DebugInfo(LogSource_TypeDef source) {
 80592d4:	b580      	push	{r7, lr}
 80592d6:	b084      	sub	sp, #16
 80592d8:	af00      	add	r7, sp, #0
 80592da:	4603      	mov	r3, r0
 80592dc:	71fb      	strb	r3, [r7, #7]
    #ifdef LOG_MANAGER_DEBUG
    if (source >= LOG_SOURCE_COUNT) return;
 80592de:	79fb      	ldrb	r3, [r7, #7]
 80592e0:	2b01      	cmp	r3, #1
 80592e2:	d833      	bhi.n	805934c <LogManager_DebugInfo+0x78>
    LogChannel_TypeDef *channel = &log_manager.channels[source];
 80592e4:	79fa      	ldrb	r2, [r7, #7]
 80592e6:	4613      	mov	r3, r2
 80592e8:	005b      	lsls	r3, r3, #1
 80592ea:	4413      	add	r3, r2
 80592ec:	00db      	lsls	r3, r3, #3
 80592ee:	4a19      	ldr	r2, [pc, #100]	@ (8059354 <LogManager_DebugInfo+0x80>)
 80592f0:	4413      	add	r3, r2
 80592f2:	60fb      	str	r3, [r7, #12]
    const char* source_name = (source == LOG_SOURCE_OBC) ? "OBC" : "EXP";
 80592f4:	79fb      	ldrb	r3, [r7, #7]
 80592f6:	2b00      	cmp	r3, #0
 80592f8:	d101      	bne.n	80592fe <LogManager_DebugInfo+0x2a>
 80592fa:	4b17      	ldr	r3, [pc, #92]	@ (8059358 <LogManager_DebugInfo+0x84>)
 80592fc:	e000      	b.n	8059300 <LogManager_DebugInfo+0x2c>
 80592fe:	4b17      	ldr	r3, [pc, #92]	@ (805935c <LogManager_DebugInfo+0x88>)
 8059300:	60bb      	str	r3, [r7, #8]

    BScript_Log("--- Log Manager Debug Info (%s) ---", source_name);
 8059302:	68b9      	ldr	r1, [r7, #8]
 8059304:	4816      	ldr	r0, [pc, #88]	@ (8059360 <LogManager_DebugInfo+0x8c>)
 8059306:	f7f4 fe41 	bl	804df8c <BScript_Log>
    BScript_Log("Current Index: %lu bytes", channel->current_index);
 805930a:	68fb      	ldr	r3, [r7, #12]
 805930c:	691b      	ldr	r3, [r3, #16]
 805930e:	4619      	mov	r1, r3
 8059310:	4814      	ldr	r0, [pc, #80]	@ (8059364 <LogManager_DebugInfo+0x90>)
 8059312:	f7f4 fe3b 	bl	804df8c <BScript_Log>
    BScript_Log("Active Buffer: %s", (channel->active_buffer == LOG_BUFFER_LEFT) ? "LEFT" : "RIGHT");
 8059316:	68fb      	ldr	r3, [r7, #12]
 8059318:	7d1b      	ldrb	r3, [r3, #20]
 805931a:	2b00      	cmp	r3, #0
 805931c:	d101      	bne.n	8059322 <LogManager_DebugInfo+0x4e>
 805931e:	4b12      	ldr	r3, [pc, #72]	@ (8059368 <LogManager_DebugInfo+0x94>)
 8059320:	e000      	b.n	8059324 <LogManager_DebugInfo+0x50>
 8059322:	4b12      	ldr	r3, [pc, #72]	@ (805936c <LogManager_DebugInfo+0x98>)
 8059324:	4619      	mov	r1, r3
 8059326:	4812      	ldr	r0, [pc, #72]	@ (8059370 <LogManager_DebugInfo+0x9c>)
 8059328:	f7f4 fe30 	bl	804df8c <BScript_Log>
    BScript_Log("Transfer Ready Flag: %s", channel->transfer_ready_flag ? "TRUE" : "FALSE");
 805932c:	68fb      	ldr	r3, [r7, #12]
 805932e:	7d5b      	ldrb	r3, [r3, #21]
 8059330:	b2db      	uxtb	r3, r3
 8059332:	2b00      	cmp	r3, #0
 8059334:	d001      	beq.n	805933a <LogManager_DebugInfo+0x66>
 8059336:	4b0f      	ldr	r3, [pc, #60]	@ (8059374 <LogManager_DebugInfo+0xa0>)
 8059338:	e000      	b.n	805933c <LogManager_DebugInfo+0x68>
 805933a:	4b0f      	ldr	r3, [pc, #60]	@ (8059378 <LogManager_DebugInfo+0xa4>)
 805933c:	4619      	mov	r1, r3
 805933e:	480f      	ldr	r0, [pc, #60]	@ (805937c <LogManager_DebugInfo+0xa8>)
 8059340:	f7f4 fe24 	bl	804df8c <BScript_Log>
    BScript_Log("--------------------------------------");
 8059344:	480e      	ldr	r0, [pc, #56]	@ (8059380 <LogManager_DebugInfo+0xac>)
 8059346:	f7f4 fe21 	bl	804df8c <BScript_Log>
 805934a:	e000      	b.n	805934e <LogManager_DebugInfo+0x7a>
    if (source >= LOG_SOURCE_COUNT) return;
 805934c:	bf00      	nop
    #endif
}
 805934e:	3710      	adds	r7, #16
 8059350:	46bd      	mov	sp, r7
 8059352:	bd80      	pop	{r7, pc}
 8059354:	2406e0e0 	.word	0x2406e0e0
 8059358:	08070a58 	.word	0x08070a58
 805935c:	08070a5c 	.word	0x08070a5c
 8059360:	08070a60 	.word	0x08070a60
 8059364:	08070a84 	.word	0x08070a84
 8059368:	08070aa0 	.word	0x08070aa0
 805936c:	08070aa8 	.word	0x08070aa8
 8059370:	08070ab0 	.word	0x08070ab0
 8059374:	08070ac4 	.word	0x08070ac4
 8059378:	08070acc 	.word	0x08070acc
 805937c:	08070ad4 	.word	0x08070ad4
 8059380:	08070aec 	.word	0x08070aec

08059384 <LogManager_DumpBuffer>:


void LogManager_DumpBuffer(LogSource_TypeDef source, LogBufferSide_TypeDef buffer_side) {
 8059384:	b580      	push	{r7, lr}
 8059386:	b0aa      	sub	sp, #168	@ 0xa8
 8059388:	af00      	add	r7, sp, #0
 805938a:	4603      	mov	r3, r0
 805938c:	460a      	mov	r2, r1
 805938e:	71fb      	strb	r3, [r7, #7]
 8059390:	4613      	mov	r3, r2
 8059392:	71bb      	strb	r3, [r7, #6]
    #ifdef LOG_MANAGER_DEBUG
    if (source >= LOG_SOURCE_COUNT) return;
 8059394:	79fb      	ldrb	r3, [r7, #7]
 8059396:	2b01      	cmp	r3, #1
 8059398:	f200 8087 	bhi.w	80594aa <LogManager_DumpBuffer+0x126>
    LogChannel_TypeDef *channel = &log_manager.channels[source];
 805939c:	79fa      	ldrb	r2, [r7, #7]
 805939e:	4613      	mov	r3, r2
 80593a0:	005b      	lsls	r3, r3, #1
 80593a2:	4413      	add	r3, r2
 80593a4:	00db      	lsls	r3, r3, #3
 80593a6:	4a43      	ldr	r2, [pc, #268]	@ (80594b4 <LogManager_DumpBuffer+0x130>)
 80593a8:	4413      	add	r3, r2
 80593aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    const char* source_name = (source == LOG_SOURCE_OBC) ? "OBC" : "EXP";
 80593ae:	79fb      	ldrb	r3, [r7, #7]
 80593b0:	2b00      	cmp	r3, #0
 80593b2:	d101      	bne.n	80593b8 <LogManager_DumpBuffer+0x34>
 80593b4:	4b40      	ldr	r3, [pc, #256]	@ (80594b8 <LogManager_DumpBuffer+0x134>)
 80593b6:	e000      	b.n	80593ba <LogManager_DumpBuffer+0x36>
 80593b8:	4b40      	ldr	r3, [pc, #256]	@ (80594bc <LogManager_DumpBuffer+0x138>)
 80593ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const char* buffer_name = (buffer_side == LOG_BUFFER_LEFT) ? "LEFT" : "RIGHT";
 80593be:	79bb      	ldrb	r3, [r7, #6]
 80593c0:	2b00      	cmp	r3, #0
 80593c2:	d101      	bne.n	80593c8 <LogManager_DumpBuffer+0x44>
 80593c4:	4b3e      	ldr	r3, [pc, #248]	@ (80594c0 <LogManager_DumpBuffer+0x13c>)
 80593c6:	e000      	b.n	80593ca <LogManager_DumpBuffer+0x46>
 80593c8:	4b3e      	ldr	r3, [pc, #248]	@ (80594c4 <LogManager_DumpBuffer+0x140>)
 80593ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint8_t* buffer_ptr = (buffer_side == LOG_BUFFER_LEFT) ? channel->buffer_left : channel->buffer_right;
 80593ce:	79bb      	ldrb	r3, [r7, #6]
 80593d0:	2b00      	cmp	r3, #0
 80593d2:	d103      	bne.n	80593dc <LogManager_DumpBuffer+0x58>
 80593d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80593d8:	681b      	ldr	r3, [r3, #0]
 80593da:	e002      	b.n	80593e2 <LogManager_DumpBuffer+0x5e>
 80593dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80593e0:	685b      	ldr	r3, [r3, #4]
 80593e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t size = channel->buffer_size;
 80593e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80593ea:	689b      	ldr	r3, [r3, #8]
 80593ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    BScript_Log("--- Dumping %s Buffer for %s (Size: %lu bytes) ---", buffer_name, source_name, size);
 80593f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80593f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80593f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80593fc:	4832      	ldr	r0, [pc, #200]	@ (80594c8 <LogManager_DumpBuffer+0x144>)
 80593fe:	f7f4 fdc5 	bl	804df8c <BScript_Log>

    char line_buf[128];
    for (uint32_t i = 0; i < size; i += 16) {
 8059402:	2300      	movs	r3, #0
 8059404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8059408:	e045      	b.n	8059496 <LogManager_DumpBuffer+0x112>
        int len = snprintf(line_buf, sizeof(line_buf), "%04lX: ", i);
 805940a:	f107 0008 	add.w	r0, r7, #8
 805940e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8059412:	4a2e      	ldr	r2, [pc, #184]	@ (80594cc <LogManager_DumpBuffer+0x148>)
 8059414:	2180      	movs	r1, #128	@ 0x80
 8059416:	f010 f8e3 	bl	80695e0 <sniprintf>
 805941a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        for (uint32_t j = 0; j < 16 && (i + j) < size; j++) {
 805941e:	2300      	movs	r3, #0
 8059420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8059424:	e01f      	b.n	8059466 <LogManager_DumpBuffer+0xe2>
            len += snprintf(line_buf + len, sizeof(line_buf) - len, "%02X ", buffer_ptr[i + j]);
 8059426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 805942a:	f107 0208 	add.w	r2, r7, #8
 805942e:	18d0      	adds	r0, r2, r3
 8059430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8059434:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8059438:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 805943c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8059440:	4413      	add	r3, r2
 8059442:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8059446:	4413      	add	r3, r2
 8059448:	781b      	ldrb	r3, [r3, #0]
 805944a:	4a21      	ldr	r2, [pc, #132]	@ (80594d0 <LogManager_DumpBuffer+0x14c>)
 805944c:	f010 f8c8 	bl	80695e0 <sniprintf>
 8059450:	4602      	mov	r2, r0
 8059452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8059456:	4413      	add	r3, r2
 8059458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        for (uint32_t j = 0; j < 16 && (i + j) < size; j++) {
 805945c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8059460:	3301      	adds	r3, #1
 8059462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8059466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 805946a:	2b0f      	cmp	r3, #15
 805946c:	d808      	bhi.n	8059480 <LogManager_DumpBuffer+0xfc>
 805946e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8059472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8059476:	4413      	add	r3, r2
 8059478:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 805947c:	429a      	cmp	r2, r3
 805947e:	d8d2      	bhi.n	8059426 <LogManager_DumpBuffer+0xa2>
        }
        BScript_Log("%s", line_buf);
 8059480:	f107 0308 	add.w	r3, r7, #8
 8059484:	4619      	mov	r1, r3
 8059486:	4813      	ldr	r0, [pc, #76]	@ (80594d4 <LogManager_DumpBuffer+0x150>)
 8059488:	f7f4 fd80 	bl	804df8c <BScript_Log>
    for (uint32_t i = 0; i < size; i += 16) {
 805948c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8059490:	3310      	adds	r3, #16
 8059492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8059496:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 805949a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 805949e:	429a      	cmp	r2, r3
 80594a0:	d3b3      	bcc.n	805940a <LogManager_DumpBuffer+0x86>
    }

    BScript_Log("------------------------------------------------");
 80594a2:	480d      	ldr	r0, [pc, #52]	@ (80594d8 <LogManager_DumpBuffer+0x154>)
 80594a4:	f7f4 fd72 	bl	804df8c <BScript_Log>
 80594a8:	e000      	b.n	80594ac <LogManager_DumpBuffer+0x128>
    if (source >= LOG_SOURCE_COUNT) return;
 80594aa:	bf00      	nop
    #endif
}
 80594ac:	37a8      	adds	r7, #168	@ 0xa8
 80594ae:	46bd      	mov	sp, r7
 80594b0:	bd80      	pop	{r7, pc}
 80594b2:	bf00      	nop
 80594b4:	2406e0e0 	.word	0x2406e0e0
 80594b8:	08070a58 	.word	0x08070a58
 80594bc:	08070a5c 	.word	0x08070a5c
 80594c0:	08070aa0 	.word	0x08070aa0
 80594c4:	08070aa8 	.word	0x08070aa8
 80594c8:	08070b14 	.word	0x08070b14
 80594cc:	08070b48 	.word	0x08070b48
 80594d0:	08070b50 	.word	0x08070b50
 80594d4:	08070b58 	.word	0x08070b58
 80594d8:	08070b5c 	.word	0x08070b5c

080594dc <calculate_crc8>:
    0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
};

static uint8_t calculate_crc8(const uint8_t *data, uint32_t len) {
 80594dc:	b480      	push	{r7}
 80594de:	b085      	sub	sp, #20
 80594e0:	af00      	add	r7, sp, #0
 80594e2:	6078      	str	r0, [r7, #4]
 80594e4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00; // Initial value
 80594e6:	2300      	movs	r3, #0
 80594e8:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < len; i++) {
 80594ea:	2300      	movs	r3, #0
 80594ec:	60bb      	str	r3, [r7, #8]
 80594ee:	e00d      	b.n	805950c <calculate_crc8+0x30>
        crc = crc8_table[crc ^ data[i]];
 80594f0:	687a      	ldr	r2, [r7, #4]
 80594f2:	68bb      	ldr	r3, [r7, #8]
 80594f4:	4413      	add	r3, r2
 80594f6:	781a      	ldrb	r2, [r3, #0]
 80594f8:	7bfb      	ldrb	r3, [r7, #15]
 80594fa:	4053      	eors	r3, r2
 80594fc:	b2db      	uxtb	r3, r3
 80594fe:	461a      	mov	r2, r3
 8059500:	4b08      	ldr	r3, [pc, #32]	@ (8059524 <calculate_crc8+0x48>)
 8059502:	5c9b      	ldrb	r3, [r3, r2]
 8059504:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < len; i++) {
 8059506:	68bb      	ldr	r3, [r7, #8]
 8059508:	3301      	adds	r3, #1
 805950a:	60bb      	str	r3, [r7, #8]
 805950c:	68ba      	ldr	r2, [r7, #8]
 805950e:	683b      	ldr	r3, [r7, #0]
 8059510:	429a      	cmp	r2, r3
 8059512:	d3ed      	bcc.n	80594f0 <calculate_crc8+0x14>
    }
    return crc;
 8059514:	7bfb      	ldrb	r3, [r7, #15]
}
 8059516:	4618      	mov	r0, r3
 8059518:	3714      	adds	r7, #20
 805951a:	46bd      	mov	sp, r7
 805951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059520:	4770      	bx	lr
 8059522:	bf00      	nop
 8059524:	08072240 	.word	0x08072240

08059528 <LWL_Init>:

////////////////////////////////////////////////////////////////////////////////
// Public function implementations
////////////////////////////////////////////////////////////////////////////////

void LWL_Init(void) {
 8059528:	b480      	push	{r7}
 805952a:	af00      	add	r7, sp, #0
    lwl_enabled = true;
 805952c:	4b03      	ldr	r3, [pc, #12]	@ (805953c <LWL_Init+0x14>)
 805952e:	2201      	movs	r2, #1
 8059530:	701a      	strb	r2, [r3, #0]
}
 8059532:	bf00      	nop
 8059534:	46bd      	mov	sp, r7
 8059536:	f85d 7b04 	ldr.w	r7, [sp], #4
 805953a:	4770      	bx	lr
 805953c:	240148f4 	.word	0x240148f4

08059540 <LWL_Log>:

void LWL_Log(uint8_t id, ...) {
 8059540:	b40f      	push	{r0, r1, r2, r3}
 8059542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8059544:	b09b      	sub	sp, #108	@ 0x6c
 8059546:	af00      	add	r7, sp, #0
 8059548:	466b      	mov	r3, sp
 805954a:	461e      	mov	r6, r3
    va_list ap;
    uint8_t package[LWL_MAX_PACKAGE_SIZE];
    uint32_t package_idx = 0;
 805954c:	2300      	movs	r3, #0
 805954e:	667b      	str	r3, [r7, #100]	@ 0x64

    if (!lwl_enabled) {
 8059550:	4b60      	ldr	r3, [pc, #384]	@ (80596d4 <LWL_Log+0x194>)
 8059552:	781b      	ldrb	r3, [r3, #0]
 8059554:	f083 0301 	eor.w	r3, r3, #1
 8059558:	b2db      	uxtb	r3, r3
 805955a:	2b00      	cmp	r3, #0
 805955c:	f040 80b2 	bne.w	80596c4 <LWL_Log+0x184>
        return;
    }

    // Validate ID
    if (id == 0 || id >= lwl_msg_table_size || lwl_msg_table[id].description == NULL) {
 8059560:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8059564:	2b00      	cmp	r3, #0
 8059566:	f000 80aa 	beq.w	80596be <LWL_Log+0x17e>
 805956a:	221c      	movs	r2, #28
 805956c:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8059570:	4293      	cmp	r3, r2
 8059572:	f080 80a4 	bcs.w	80596be <LWL_Log+0x17e>
 8059576:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 805957a:	4a57      	ldr	r2, [pc, #348]	@ (80596d8 <LWL_Log+0x198>)
 805957c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8059580:	2b00      	cmp	r3, #0
 8059582:	f000 809c 	beq.w	80596be <LWL_Log+0x17e>
        return; // Invalid ID
    }

    const struct lwl_msg *msg_info = &lwl_msg_table[id];
 8059586:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 805958a:	00db      	lsls	r3, r3, #3
 805958c:	4a52      	ldr	r2, [pc, #328]	@ (80596d8 <LWL_Log+0x198>)
 805958e:	4413      	add	r3, r2
 8059590:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint8_t length = 1 + 1 + msg_info->num_arg_bytes + 1; // length + id + args + CRC
 8059592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8059594:	791b      	ldrb	r3, [r3, #4]
 8059596:	3303      	adds	r3, #3
 8059598:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    
    // Check if package fits in buffer
    if (length + 1 > LWL_MAX_PACKAGE_SIZE) {
 805959c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80595a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80595a2:	f200 808e 	bhi.w	80596c2 <LWL_Log+0x182>
        return; // Package too large
    }

    va_start(ap, id);
 80595a6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80595aa:	643b      	str	r3, [r7, #64]	@ 0x40

    // Build package
    package[package_idx++] = LWL_START_BYTE;
 80595ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80595ae:	1c5a      	adds	r2, r3, #1
 80595b0:	667a      	str	r2, [r7, #100]	@ 0x64
 80595b2:	3368      	adds	r3, #104	@ 0x68
 80595b4:	443b      	add	r3, r7
 80595b6:	22aa      	movs	r2, #170	@ 0xaa
 80595b8:	f803 2c68 	strb.w	r2, [r3, #-104]
    package[package_idx++] = length;
 80595bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80595be:	1c5a      	adds	r2, r3, #1
 80595c0:	667a      	str	r2, [r7, #100]	@ 0x64
 80595c2:	3368      	adds	r3, #104	@ 0x68
 80595c4:	443b      	add	r3, r7
 80595c6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80595ca:	f803 2c68 	strb.w	r2, [r3, #-104]
    package[package_idx++] = id;
 80595ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80595d0:	1c5a      	adds	r2, r3, #1
 80595d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80595d4:	3368      	adds	r3, #104	@ 0x68
 80595d6:	443b      	add	r3, r7
 80595d8:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80595dc:	f803 2c68 	strb.w	r2, [r3, #-104]

    // Collect data for CRC calculation
    uint8_t crc_data[1 + msg_info->num_arg_bytes];
 80595e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80595e2:	791b      	ldrb	r3, [r3, #4]
 80595e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80595e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80595e8:	791b      	ldrb	r3, [r3, #4]
 80595ea:	3301      	adds	r3, #1
 80595ec:	2200      	movs	r2, #0
 80595ee:	461c      	mov	r4, r3
 80595f0:	4615      	mov	r5, r2
 80595f2:	f04f 0200 	mov.w	r2, #0
 80595f6:	f04f 0300 	mov.w	r3, #0
 80595fa:	00eb      	lsls	r3, r5, #3
 80595fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8059600:	00e2      	lsls	r2, r4, #3
 8059602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8059604:	791b      	ldrb	r3, [r3, #4]
 8059606:	3301      	adds	r3, #1
 8059608:	2200      	movs	r2, #0
 805960a:	4618      	mov	r0, r3
 805960c:	4611      	mov	r1, r2
 805960e:	f04f 0200 	mov.w	r2, #0
 8059612:	f04f 0300 	mov.w	r3, #0
 8059616:	00cb      	lsls	r3, r1, #3
 8059618:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 805961c:	00c2      	lsls	r2, r0, #3
 805961e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8059620:	791b      	ldrb	r3, [r3, #4]
 8059622:	3301      	adds	r3, #1
 8059624:	3307      	adds	r3, #7
 8059626:	08db      	lsrs	r3, r3, #3
 8059628:	00db      	lsls	r3, r3, #3
 805962a:	ebad 0d03 	sub.w	sp, sp, r3
 805962e:	466b      	mov	r3, sp
 8059630:	3300      	adds	r3, #0
 8059632:	653b      	str	r3, [r7, #80]	@ 0x50
    crc_data[0] = id;
 8059634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8059636:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 805963a:	701a      	strb	r2, [r3, #0]

    // Add arguments
    for (uint8_t i = 0; i < msg_info->num_arg_bytes; i++) {
 805963c:	2300      	movs	r3, #0
 805963e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 8059642:	e01c      	b.n	805967e <LWL_Log+0x13e>
        uint32_t arg = va_arg(ap, unsigned);
 8059644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8059646:	1d1a      	adds	r2, r3, #4
 8059648:	643a      	str	r2, [r7, #64]	@ 0x40
 805964a:	681b      	ldr	r3, [r3, #0]
 805964c:	64bb      	str	r3, [r7, #72]	@ 0x48
        uint8_t byte_val = (uint8_t)(arg & 0xFF);
 805964e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8059650:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        package[package_idx++] = byte_val;
 8059654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8059656:	1c5a      	adds	r2, r3, #1
 8059658:	667a      	str	r2, [r7, #100]	@ 0x64
 805965a:	3368      	adds	r3, #104	@ 0x68
 805965c:	443b      	add	r3, r7
 805965e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8059662:	f803 2c68 	strb.w	r2, [r3, #-104]
        crc_data[i + 1] = byte_val;
 8059666:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 805966a:	3301      	adds	r3, #1
 805966c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 805966e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8059672:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < msg_info->num_arg_bytes; i++) {
 8059674:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8059678:	3301      	adds	r3, #1
 805967a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 805967e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8059680:	791b      	ldrb	r3, [r3, #4]
 8059682:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8059686:	429a      	cmp	r2, r3
 8059688:	d3dc      	bcc.n	8059644 <LWL_Log+0x104>
    }

    // Calculate and add CRC
    uint8_t crc = calculate_crc8(crc_data, 1 + msg_info->num_arg_bytes);
 805968a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 805968c:	791b      	ldrb	r3, [r3, #4]
 805968e:	3301      	adds	r3, #1
 8059690:	4619      	mov	r1, r3
 8059692:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8059694:	f7ff ff22 	bl	80594dc <calculate_crc8>
 8059698:	4603      	mov	r3, r0
 805969a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    package[package_idx++] = crc;
 805969e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80596a0:	1c5a      	adds	r2, r3, #1
 80596a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80596a4:	3368      	adds	r3, #104	@ 0x68
 80596a6:	443b      	add	r3, r7
 80596a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80596ac:	f803 2c68 	strb.w	r2, [r3, #-104]

    va_end(ap);

    // Send directly to Log Manager
    LogManager_Write_OBC(package, package_idx);
 80596b0:	463b      	mov	r3, r7
 80596b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80596b4:	4618      	mov	r0, r3
 80596b6:	f7ff fda7 	bl	8059208 <LogManager_Write_OBC>
 80596ba:	46b5      	mov	sp, r6
 80596bc:	e003      	b.n	80596c6 <LWL_Log+0x186>
        return; // Invalid ID
 80596be:	bf00      	nop
 80596c0:	e000      	b.n	80596c4 <LWL_Log+0x184>
        return; // Package too large
 80596c2:	bf00      	nop
        return;
 80596c4:	46b5      	mov	sp, r6
}
 80596c6:	376c      	adds	r7, #108	@ 0x6c
 80596c8:	46bd      	mov	sp, r7
 80596ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80596ce:	b004      	add	sp, #16
 80596d0:	4770      	bx	lr
 80596d2:	bf00      	nop
 80596d4:	240148f4 	.word	0x240148f4
 80596d8:	08072340 	.word	0x08072340

080596dc <LWL_TestLogs>:

/**
 * @brief Test function to generate sample logs
 * @return 0 on success
 */
int32_t LWL_TestLogs(void) {
 80596dc:	b580      	push	{r7, lr}
 80596de:	af00      	add	r7, sp, #0
    LWL_Log(OBC_STM32_TEST_LOG);            // 0 bytes
 80596e0:	2018      	movs	r0, #24
 80596e2:	f7ff ff2d 	bl	8059540 <LWL_Log>
    LWL_Log(OBC_STM32_STARTUP);         // 1 byte task ID
 80596e6:	2019      	movs	r0, #25
 80596e8:	f7ff ff2a 	bl	8059540 <LWL_Log>
    return 0;
 80596ec:	2300      	movs	r3, #0
}
 80596ee:	4618      	mov	r0, r3
 80596f0:	bd80      	pop	{r7, pc}

080596f2 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 80596f2:	b480      	push	{r7}
 80596f4:	b083      	sub	sp, #12
 80596f6:	af00      	add	r7, sp, #0
 80596f8:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 80596fa:	687b      	ldr	r3, [r7, #4]
 80596fc:	f04f 32ff 	mov.w	r2, #4294967295
 8059700:	601a      	str	r2, [r3, #0]
}
 8059702:	bf00      	nop
 8059704:	370c      	adds	r7, #12
 8059706:	46bd      	mov	sp, r7
 8059708:	f85d 7b04 	ldr.w	r7, [sp], #4
 805970c:	4770      	bx	lr
	...

08059710 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 8059710:	b480      	push	{r7}
 8059712:	b085      	sub	sp, #20
 8059714:	af00      	add	r7, sp, #0
 8059716:	6078      	str	r0, [r7, #4]
 8059718:	460b      	mov	r3, r1
 805971a:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 805971c:	687b      	ldr	r3, [r7, #4]
 805971e:	681a      	ldr	r2, [r3, #0]
 8059720:	78fb      	ldrb	r3, [r7, #3]
 8059722:	405a      	eors	r2, r3
 8059724:	687b      	ldr	r3, [r7, #4]
 8059726:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8059728:	2300      	movs	r3, #0
 805972a:	60fb      	str	r3, [r7, #12]
 805972c:	e011      	b.n	8059752 <crc32_step+0x42>
        uint32_t mask = (uint32_t) - (context->crc & 1U);
 805972e:	687b      	ldr	r3, [r7, #4]
 8059730:	681b      	ldr	r3, [r3, #0]
 8059732:	f003 0301 	and.w	r3, r3, #1
 8059736:	425b      	negs	r3, r3
 8059738:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 805973a:	687b      	ldr	r3, [r7, #4]
 805973c:	681b      	ldr	r3, [r3, #0]
 805973e:	085a      	lsrs	r2, r3, #1
 8059740:	68b9      	ldr	r1, [r7, #8]
 8059742:	4b09      	ldr	r3, [pc, #36]	@ (8059768 <crc32_step+0x58>)
 8059744:	400b      	ands	r3, r1
 8059746:	405a      	eors	r2, r3
 8059748:	687b      	ldr	r3, [r7, #4]
 805974a:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 805974c:	68fb      	ldr	r3, [r7, #12]
 805974e:	3301      	adds	r3, #1
 8059750:	60fb      	str	r3, [r7, #12]
 8059752:	68fb      	ldr	r3, [r7, #12]
 8059754:	2b07      	cmp	r3, #7
 8059756:	d9ea      	bls.n	805972e <crc32_step+0x1e>
    }
}
 8059758:	bf00      	nop
 805975a:	bf00      	nop
 805975c:	3714      	adds	r7, #20
 805975e:	46bd      	mov	sp, r7
 8059760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059764:	4770      	bx	lr
 8059766:	bf00      	nop
 8059768:	edb88320 	.word	0xedb88320

0805976c <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 805976c:	b480      	push	{r7}
 805976e:	b083      	sub	sp, #12
 8059770:	af00      	add	r7, sp, #0
 8059772:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8059774:	687b      	ldr	r3, [r7, #4]
 8059776:	681b      	ldr	r3, [r3, #0]
 8059778:	43db      	mvns	r3, r3
}
 805977a:	4618      	mov	r0, r3
 805977c:	370c      	adds	r7, #12
 805977e:	46bd      	mov	sp, r7
 8059780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059784:	4770      	bx	lr

08059786 <stuffed_tx_byte>:

static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 8059786:	b580      	push	{r7, lr}
 8059788:	b082      	sub	sp, #8
 805978a:	af00      	add	r7, sp, #0
 805978c:	6078      	str	r0, [r7, #4]
 805978e:	460b      	mov	r3, r1
 8059790:	70fb      	strb	r3, [r7, #3]
 8059792:	4613      	mov	r3, r2
 8059794:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 8059796:	687b      	ldr	r3, [r7, #4]
 8059798:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805979c:	78fa      	ldrb	r2, [r7, #3]
 805979e:	4611      	mov	r1, r2
 80597a0:	4618      	mov	r0, r3
 80597a2:	f000 fde1 	bl	805a368 <min_tx_byte>
    if (crc) {
 80597a6:	78bb      	ldrb	r3, [r7, #2]
 80597a8:	2b00      	cmp	r3, #0
 80597aa:	d007      	beq.n	80597bc <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 80597ac:	687b      	ldr	r3, [r7, #4]
 80597ae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80597b2:	78fa      	ldrb	r2, [r7, #3]
 80597b4:	4611      	mov	r1, r2
 80597b6:	4618      	mov	r0, r3
 80597b8:	f7ff ffaa 	bl	8059710 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if (byte == HEADER_BYTE) {
 80597bc:	78fb      	ldrb	r3, [r7, #3]
 80597be:	2baa      	cmp	r3, #170	@ 0xaa
 80597c0:	d118      	bne.n	80597f4 <stuffed_tx_byte+0x6e>
        if (--self->tx_header_byte_countdown == 0) {
 80597c2:	687b      	ldr	r3, [r7, #4]
 80597c4:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80597c8:	3b01      	subs	r3, #1
 80597ca:	b2da      	uxtb	r2, r3
 80597cc:	687b      	ldr	r3, [r7, #4]
 80597ce:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
 80597d2:	687b      	ldr	r3, [r7, #4]
 80597d4:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80597d8:	2b00      	cmp	r3, #0
 80597da:	d10f      	bne.n	80597fc <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE); // Stuff byte
 80597dc:	687b      	ldr	r3, [r7, #4]
 80597de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80597e2:	2155      	movs	r1, #85	@ 0x55
 80597e4:	4618      	mov	r0, r3
 80597e6:	f000 fdbf 	bl	805a368 <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 80597ea:	687b      	ldr	r3, [r7, #4]
 80597ec:	2202      	movs	r2, #2
 80597ee:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
        }
    } else {
        self->tx_header_byte_countdown = 2U;
    }
}
 80597f2:	e003      	b.n	80597fc <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 80597f4:	687b      	ldr	r3, [r7, #4]
 80597f6:	2202      	movs	r2, #2
 80597f8:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
}
 80597fc:	bf00      	nop
 80597fe:	3708      	adds	r7, #8
 8059800:	46bd      	mov	sp, r7
 8059802:	bd80      	pop	{r7, pc}

08059804 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 8059804:	b580      	push	{r7, lr}
 8059806:	b086      	sub	sp, #24
 8059808:	af00      	add	r7, sp, #0
 805980a:	60f8      	str	r0, [r7, #12]
 805980c:	607b      	str	r3, [r7, #4]
 805980e:	460b      	mov	r3, r1
 8059810:	72fb      	strb	r3, [r7, #11]
 8059812:	4613      	mov	r3, r2
 8059814:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 8059816:	68fb      	ldr	r3, [r7, #12]
 8059818:	2202      	movs	r2, #2
 805981a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    crc32_init_context(&self->tx_checksum);
 805981e:	68fb      	ldr	r3, [r7, #12]
 8059820:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8059824:	4618      	mov	r0, r3
 8059826:	f7ff ff64 	bl	80596f2 <crc32_init_context>

    min_tx_start(self->port);
 805982a:	68fb      	ldr	r3, [r7, #12]
 805982c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059830:	4618      	mov	r0, r3
 8059832:	f000 fdaf 	bl	805a394 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 8059836:	68fb      	ldr	r3, [r7, #12]
 8059838:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805983c:	21aa      	movs	r1, #170	@ 0xaa
 805983e:	4618      	mov	r0, r3
 8059840:	f000 fd92 	bl	805a368 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8059844:	68fb      	ldr	r3, [r7, #12]
 8059846:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805984a:	21aa      	movs	r1, #170	@ 0xaa
 805984c:	4618      	mov	r0, r3
 805984e:	f000 fd8b 	bl	805a368 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8059852:	68fb      	ldr	r3, [r7, #12]
 8059854:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059858:	21aa      	movs	r1, #170	@ 0xaa
 805985a:	4618      	mov	r0, r3
 805985c:	f000 fd84 	bl	805a368 <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8059860:	7afb      	ldrb	r3, [r7, #11]
 8059862:	2201      	movs	r2, #1
 8059864:	4619      	mov	r1, r3
 8059866:	68f8      	ldr	r0, [r7, #12]
 8059868:	f7ff ff8d 	bl	8059786 <stuffed_tx_byte>
    if (id_control & 0x80U) {
 805986c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8059870:	2b00      	cmp	r3, #0
 8059872:	da05      	bge.n	8059880 <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8059874:	7abb      	ldrb	r3, [r7, #10]
 8059876:	2201      	movs	r2, #1
 8059878:	4619      	mov	r1, r3
 805987a:	68f8      	ldr	r0, [r7, #12]
 805987c:	f7ff ff83 	bl	8059786 <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8059880:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8059884:	2201      	movs	r2, #1
 8059886:	4619      	mov	r1, r3
 8059888:	68f8      	ldr	r0, [r7, #12]
 805988a:	f7ff ff7c 	bl	8059786 <stuffed_tx_byte>

    for (i = 0, n = payload_len; n > 0; n--, i++) {
 805988e:	2300      	movs	r3, #0
 8059890:	75bb      	strb	r3, [r7, #22]
 8059892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8059896:	75fb      	strb	r3, [r7, #23]
 8059898:	e015      	b.n	80598c6 <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 805989a:	8c3b      	ldrh	r3, [r7, #32]
 805989c:	687a      	ldr	r2, [r7, #4]
 805989e:	4413      	add	r3, r2
 80598a0:	781b      	ldrb	r3, [r3, #0]
 80598a2:	2201      	movs	r2, #1
 80598a4:	4619      	mov	r1, r3
 80598a6:	68f8      	ldr	r0, [r7, #12]
 80598a8:	f7ff ff6d 	bl	8059786 <stuffed_tx_byte>
        payload_offset++;
 80598ac:	8c3b      	ldrh	r3, [r7, #32]
 80598ae:	3301      	adds	r3, #1
 80598b0:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 80598b2:	8c3a      	ldrh	r2, [r7, #32]
 80598b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80598b6:	4013      	ands	r3, r2
 80598b8:	843b      	strh	r3, [r7, #32]
    for (i = 0, n = payload_len; n > 0; n--, i++) {
 80598ba:	7dfb      	ldrb	r3, [r7, #23]
 80598bc:	3b01      	subs	r3, #1
 80598be:	75fb      	strb	r3, [r7, #23]
 80598c0:	7dbb      	ldrb	r3, [r7, #22]
 80598c2:	3301      	adds	r3, #1
 80598c4:	75bb      	strb	r3, [r7, #22]
 80598c6:	7dfb      	ldrb	r3, [r7, #23]
 80598c8:	2b00      	cmp	r3, #0
 80598ca:	d1e6      	bne.n	805989a <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 80598cc:	68fb      	ldr	r3, [r7, #12]
 80598ce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80598d2:	4618      	mov	r0, r3
 80598d4:	f7ff ff4a 	bl	805976c <crc32_finalize>
 80598d8:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 80598da:	693b      	ldr	r3, [r7, #16]
 80598dc:	0e1b      	lsrs	r3, r3, #24
 80598de:	b2db      	uxtb	r3, r3
 80598e0:	2200      	movs	r2, #0
 80598e2:	4619      	mov	r1, r3
 80598e4:	68f8      	ldr	r0, [r7, #12]
 80598e6:	f7ff ff4e 	bl	8059786 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 80598ea:	693b      	ldr	r3, [r7, #16]
 80598ec:	0c1b      	lsrs	r3, r3, #16
 80598ee:	b2db      	uxtb	r3, r3
 80598f0:	2200      	movs	r2, #0
 80598f2:	4619      	mov	r1, r3
 80598f4:	68f8      	ldr	r0, [r7, #12]
 80598f6:	f7ff ff46 	bl	8059786 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 80598fa:	693b      	ldr	r3, [r7, #16]
 80598fc:	0a1b      	lsrs	r3, r3, #8
 80598fe:	b2db      	uxtb	r3, r3
 8059900:	2200      	movs	r2, #0
 8059902:	4619      	mov	r1, r3
 8059904:	68f8      	ldr	r0, [r7, #12]
 8059906:	f7ff ff3e 	bl	8059786 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 805990a:	693b      	ldr	r3, [r7, #16]
 805990c:	b2db      	uxtb	r3, r3
 805990e:	2200      	movs	r2, #0
 8059910:	4619      	mov	r1, r3
 8059912:	68f8      	ldr	r0, [r7, #12]
 8059914:	f7ff ff37 	bl	8059786 <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 8059918:	68fb      	ldr	r3, [r7, #12]
 805991a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805991e:	2155      	movs	r1, #85	@ 0x55
 8059920:	4618      	mov	r0, r3
 8059922:	f000 fd21 	bl	805a368 <min_tx_byte>

    min_tx_finished(self->port);
 8059926:	68fb      	ldr	r3, [r7, #12]
 8059928:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805992c:	4618      	mov	r0, r3
 805992e:	f000 fd3c 	bl	805a3aa <min_tx_finished>
}
 8059932:	bf00      	nop
 8059934:	3718      	adds	r7, #24
 8059936:	46bd      	mov	sp, r7
 8059938:	bd80      	pop	{r7, pc}

0805993a <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 805993a:	b480      	push	{r7}
 805993c:	b085      	sub	sp, #20
 805993e:	af00      	add	r7, sp, #0
 8059940:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8059942:	687b      	ldr	r3, [r7, #4]
 8059944:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8059948:	461a      	mov	r2, r3
 805994a:	4613      	mov	r3, r2
 805994c:	005b      	lsls	r3, r3, #1
 805994e:	4413      	add	r3, r2
 8059950:	009b      	lsls	r3, r3, #2
 8059952:	687a      	ldr	r2, [r7, #4]
 8059954:	4413      	add	r3, r2
 8059956:	60fb      	str	r3, [r7, #12]

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8059958:	687b      	ldr	r3, [r7, #4]
 805995a:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 805995e:	3b01      	subs	r3, #1
 8059960:	b2da      	uxtb	r2, r3
 8059962:	687b      	ldr	r3, [r7, #4]
 8059964:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx++;
 8059968:	687b      	ldr	r3, [r7, #4]
 805996a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 805996e:	3301      	adds	r3, #1
 8059970:	b2da      	uxtb	r2, r3
 8059972:	687b      	ldr	r3, [r7, #4]
 8059974:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8059978:	687b      	ldr	r3, [r7, #4]
 805997a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 805997e:	f003 030f 	and.w	r3, r3, #15
 8059982:	b2da      	uxtb	r2, r3
 8059984:	687b      	ldr	r3, [r7, #4]
 8059986:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 805998a:	687b      	ldr	r3, [r7, #4]
 805998c:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8059990:	68fa      	ldr	r2, [r7, #12]
 8059992:	7992      	ldrb	r2, [r2, #6]
 8059994:	1a9b      	subs	r3, r3, r2
 8059996:	b29a      	uxth	r2, r3
 8059998:	687b      	ldr	r3, [r7, #4]
 805999a:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
}
 805999e:	bf00      	nop
 80599a0:	3714      	adds	r7, #20
 80599a2:	46bd      	mov	sp, r7
 80599a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80599a8:	4770      	bx	lr

080599aa <transport_fifo_push>:

// Claim a buffer slot from the FIFO. Returns 0 if there is no space.
static struct transport_frame *transport_fifo_push(struct min_context *self, uint16_t data_size)
{
 80599aa:	b480      	push	{r7}
 80599ac:	b085      	sub	sp, #20
 80599ae:	af00      	add	r7, sp, #0
 80599b0:	6078      	str	r0, [r7, #4]
 80599b2:	460b      	mov	r3, r1
 80599b4:	807b      	strh	r3, [r7, #2]
    // A frame is only queued if there aren't too many frames in the FIFO and there is space in the
    // data ring buffer.
    struct transport_frame *ret = 0;
 80599b6:	2300      	movs	r3, #0
 80599b8:	60fb      	str	r3, [r7, #12]
    if (self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES) {
 80599ba:	687b      	ldr	r3, [r7, #4]
 80599bc:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80599c0:	2b0f      	cmp	r3, #15
 80599c2:	d868      	bhi.n	8059a96 <transport_fifo_push+0xec>
        // Is there space in the ring buffer for the frame payload?
        if (self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - data_size) {
 80599c4:	687b      	ldr	r3, [r7, #4]
 80599c6:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 80599ca:	461a      	mov	r2, r3
 80599cc:	887b      	ldrh	r3, [r7, #2]
 80599ce:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80599d2:	429a      	cmp	r2, r3
 80599d4:	d85f      	bhi.n	8059a96 <transport_fifo_push+0xec>
            self->transport_fifo.n_frames++;
 80599d6:	687b      	ldr	r3, [r7, #4]
 80599d8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80599dc:	3301      	adds	r3, #1
 80599de:	b2da      	uxtb	r2, r3
 80599e0:	687b      	ldr	r3, [r7, #4]
 80599e2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            if (self->transport_fifo.n_frames > self->transport_fifo.n_frames_max) {
 80599e6:	687b      	ldr	r3, [r7, #4]
 80599e8:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 80599ec:	687b      	ldr	r3, [r7, #4]
 80599ee:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80599f2:	429a      	cmp	r2, r3
 80599f4:	d905      	bls.n	8059a02 <transport_fifo_push+0x58>
                // High-water mark of FIFO (for diagnostic purposes)
                self->transport_fifo.n_frames_max = self->transport_fifo.n_frames;
 80599f6:	687b      	ldr	r3, [r7, #4]
 80599f8:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 80599fc:	687b      	ldr	r3, [r7, #4]
 80599fe:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            }
            // Create FIFO entry
            ret = &(self->transport_fifo.frames[self->transport_fifo.tail_idx]);
 8059a02:	687b      	ldr	r3, [r7, #4]
 8059a04:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8059a08:	461a      	mov	r2, r3
 8059a0a:	4613      	mov	r3, r2
 8059a0c:	005b      	lsls	r3, r3, #1
 8059a0e:	4413      	add	r3, r2
 8059a10:	009b      	lsls	r3, r3, #2
 8059a12:	687a      	ldr	r2, [r7, #4]
 8059a14:	4413      	add	r3, r2
 8059a16:	60fb      	str	r3, [r7, #12]
            ret->payload_offset = self->transport_fifo.ring_buffer_tail_offset;
 8059a18:	687b      	ldr	r3, [r7, #4]
 8059a1a:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8059a1e:	68fb      	ldr	r3, [r7, #12]
 8059a20:	809a      	strh	r2, [r3, #4]

            // Claim ring buffer space
            self->transport_fifo.n_ring_buffer_bytes += data_size;
 8059a22:	687b      	ldr	r3, [r7, #4]
 8059a24:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8059a28:	887b      	ldrh	r3, [r7, #2]
 8059a2a:	4413      	add	r3, r2
 8059a2c:	b29a      	uxth	r2, r3
 8059a2e:	687b      	ldr	r3, [r7, #4]
 8059a30:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
            if (self->transport_fifo.n_ring_buffer_bytes > self->transport_fifo.n_ring_buffer_bytes_max) {
 8059a34:	687b      	ldr	r3, [r7, #4]
 8059a36:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8059a3a:	687b      	ldr	r3, [r7, #4]
 8059a3c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8059a40:	429a      	cmp	r2, r3
 8059a42:	d905      	bls.n	8059a50 <transport_fifo_push+0xa6>
                // High-water mark of ring buffer usage (for diagnostic purposes)
                self->transport_fifo.n_ring_buffer_bytes_max = self->transport_fifo.n_ring_buffer_bytes;
 8059a44:	687b      	ldr	r3, [r7, #4]
 8059a46:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8059a4a:	687b      	ldr	r3, [r7, #4]
 8059a4c:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
            }
            self->transport_fifo.ring_buffer_tail_offset += data_size;
 8059a50:	687b      	ldr	r3, [r7, #4]
 8059a52:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8059a56:	887b      	ldrh	r3, [r7, #2]
 8059a58:	4413      	add	r3, r2
 8059a5a:	b29a      	uxth	r2, r3
 8059a5c:	687b      	ldr	r3, [r7, #4]
 8059a5e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            self->transport_fifo.ring_buffer_tail_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8059a62:	687b      	ldr	r3, [r7, #4]
 8059a64:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8059a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8059a6c:	b29a      	uxth	r2, r3
 8059a6e:	687b      	ldr	r3, [r7, #4]
 8059a70:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

            // Claim FIFO space
            self->transport_fifo.tail_idx++;
 8059a74:	687b      	ldr	r3, [r7, #4]
 8059a76:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8059a7a:	3301      	adds	r3, #1
 8059a7c:	b2da      	uxtb	r2, r3
 8059a7e:	687b      	ldr	r3, [r7, #4]
 8059a80:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            self->transport_fifo.tail_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8059a84:	687b      	ldr	r3, [r7, #4]
 8059a86:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8059a8a:	f003 030f 	and.w	r3, r3, #15
 8059a8e:	b2da      	uxtb	r2, r3
 8059a90:	687b      	ldr	r3, [r7, #4]
 8059a92:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
//            min_debug_print("No FIFO payload space: data_size=%d, n_ring_buffer_bytes=%d\n", data_size, self->transport_fifo.n_ring_buffer_bytes);
        }
    } else {
//        min_debug_print("No FIFO frame slots\n");
    }
    return ret;
 8059a96:	68fb      	ldr	r3, [r7, #12]
}
 8059a98:	4618      	mov	r0, r3
 8059a9a:	3714      	adds	r7, #20
 8059a9c:	46bd      	mov	sp, r7
 8059a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059aa2:	4770      	bx	lr

08059aa4 <transport_fifo_get>:

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8059aa4:	b480      	push	{r7}
 8059aa6:	b085      	sub	sp, #20
 8059aa8:	af00      	add	r7, sp, #0
 8059aaa:	6078      	str	r0, [r7, #4]
 8059aac:	460b      	mov	r3, r1
 8059aae:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8059ab0:	687b      	ldr	r3, [r7, #4]
 8059ab2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8059ab6:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8059ab8:	7bfa      	ldrb	r2, [r7, #15]
 8059aba:	78fb      	ldrb	r3, [r7, #3]
 8059abc:	4413      	add	r3, r2
 8059abe:	b2db      	uxtb	r3, r3
 8059ac0:	f003 020f 	and.w	r2, r3, #15
 8059ac4:	4613      	mov	r3, r2
 8059ac6:	005b      	lsls	r3, r3, #1
 8059ac8:	4413      	add	r3, r2
 8059aca:	009b      	lsls	r3, r3, #2
 8059acc:	687a      	ldr	r2, [r7, #4]
 8059ace:	4413      	add	r3, r2
}
 8059ad0:	4618      	mov	r0, r3
 8059ad2:	3714      	adds	r7, #20
 8059ad4:	46bd      	mov	sp, r7
 8059ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059ada:	4770      	bx	lr

08059adc <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8059adc:	b580      	push	{r7, lr}
 8059ade:	b086      	sub	sp, #24
 8059ae0:	af04      	add	r7, sp, #16
 8059ae2:	6078      	str	r0, [r7, #4]
 8059ae4:	6039      	str	r1, [r7, #0]
//    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8059ae6:	683b      	ldr	r3, [r7, #0]
 8059ae8:	79db      	ldrb	r3, [r3, #7]
 8059aea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8059aee:	b2d9      	uxtb	r1, r3
 8059af0:	683b      	ldr	r3, [r7, #0]
 8059af2:	7a18      	ldrb	r0, [r3, #8]
 8059af4:	683b      	ldr	r3, [r7, #0]
 8059af6:	889b      	ldrh	r3, [r3, #4]
 8059af8:	683a      	ldr	r2, [r7, #0]
 8059afa:	7992      	ldrb	r2, [r2, #6]
 8059afc:	9202      	str	r2, [sp, #8]
 8059afe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8059b02:	9201      	str	r2, [sp, #4]
 8059b04:	9300      	str	r3, [sp, #0]
 8059b06:	4b06      	ldr	r3, [pc, #24]	@ (8059b20 <transport_fifo_send+0x44>)
 8059b08:	4602      	mov	r2, r0
 8059b0a:	6878      	ldr	r0, [r7, #4]
 8059b0c:	f7ff fe7a 	bl	8059804 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8059b10:	4b04      	ldr	r3, [pc, #16]	@ (8059b24 <transport_fifo_send+0x48>)
 8059b12:	681a      	ldr	r2, [r3, #0]
 8059b14:	683b      	ldr	r3, [r7, #0]
 8059b16:	601a      	str	r2, [r3, #0]
}
 8059b18:	bf00      	nop
 8059b1a:	3708      	adds	r7, #8
 8059b1c:	46bd      	mov	sp, r7
 8059b1e:	bd80      	pop	{r7, pc}
 8059b20:	2406e110 	.word	0x2406e110
 8059b24:	2406e510 	.word	0x2406e510

08059b28 <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8059b28:	b580      	push	{r7, lr}
 8059b2a:	b086      	sub	sp, #24
 8059b2c:	af04      	add	r7, sp, #16
 8059b2e:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
//    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8059b30:	687b      	ldr	r3, [r7, #4]
 8059b32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059b36:	4618      	mov	r0, r3
 8059b38:	f000 fc06 	bl	805a348 <min_tx_space>
 8059b3c:	4603      	mov	r3, r0
 8059b3e:	2b0a      	cmp	r3, #10
 8059b40:	d913      	bls.n	8059b6a <send_ack+0x42>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8059b42:	687b      	ldr	r3, [r7, #4]
 8059b44:	f893 20e8 	ldrb.w	r2, [r3, #232]	@ 0xe8
 8059b48:	687b      	ldr	r3, [r7, #4]
 8059b4a:	33e8      	adds	r3, #232	@ 0xe8
 8059b4c:	2101      	movs	r1, #1
 8059b4e:	9102      	str	r1, [sp, #8]
 8059b50:	21ff      	movs	r1, #255	@ 0xff
 8059b52:	9101      	str	r1, [sp, #4]
 8059b54:	2100      	movs	r1, #0
 8059b56:	9100      	str	r1, [sp, #0]
 8059b58:	21ff      	movs	r1, #255	@ 0xff
 8059b5a:	6878      	ldr	r0, [r7, #4]
 8059b5c:	f7ff fe52 	bl	8059804 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8059b60:	4b04      	ldr	r3, [pc, #16]	@ (8059b74 <send_ack+0x4c>)
 8059b62:	681a      	ldr	r2, [r3, #0]
 8059b64:	687b      	ldr	r3, [r7, #4]
 8059b66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8059b6a:	bf00      	nop
 8059b6c:	3708      	adds	r7, #8
 8059b6e:	46bd      	mov	sp, r7
 8059b70:	bd80      	pop	{r7, pc}
 8059b72:	bf00      	nop
 8059b74:	2406e510 	.word	0x2406e510

08059b78 <send_reset>:

// We don't queue an RESET frame - we send it straight away (if there's space to do so)
static void send_reset(struct min_context *self)
{
 8059b78:	b580      	push	{r7, lr}
 8059b7a:	b086      	sub	sp, #24
 8059b7c:	af04      	add	r7, sp, #16
 8059b7e:	6078      	str	r0, [r7, #4]
//    min_debug_print("send RESET\n");
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8059b80:	687b      	ldr	r3, [r7, #4]
 8059b82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059b86:	4618      	mov	r0, r3
 8059b88:	f000 fbde 	bl	805a348 <min_tx_space>
 8059b8c:	4603      	mov	r3, r0
 8059b8e:	2b0a      	cmp	r3, #10
 8059b90:	d90b      	bls.n	8059baa <send_reset+0x32>
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
 8059b92:	2300      	movs	r3, #0
 8059b94:	9302      	str	r3, [sp, #8]
 8059b96:	2300      	movs	r3, #0
 8059b98:	9301      	str	r3, [sp, #4]
 8059b9a:	2300      	movs	r3, #0
 8059b9c:	9300      	str	r3, [sp, #0]
 8059b9e:	2300      	movs	r3, #0
 8059ba0:	2200      	movs	r2, #0
 8059ba2:	21fe      	movs	r1, #254	@ 0xfe
 8059ba4:	6878      	ldr	r0, [r7, #4]
 8059ba6:	f7ff fe2d 	bl	8059804 <on_wire_bytes>
    }
}
 8059baa:	bf00      	nop
 8059bac:	3708      	adds	r7, #8
 8059bae:	46bd      	mov	sp, r7
 8059bb0:	bd80      	pop	{r7, pc}
	...

08059bb4 <transport_fifo_reset>:

static void transport_fifo_reset(struct min_context *self)
{
 8059bb4:	b480      	push	{r7}
 8059bb6:	b083      	sub	sp, #12
 8059bb8:	af00      	add	r7, sp, #0
 8059bba:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8059bbc:	687b      	ldr	r3, [r7, #4]
 8059bbe:	2200      	movs	r2, #0
 8059bc0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx = 0;
 8059bc4:	687b      	ldr	r3, [r7, #4]
 8059bc6:	2200      	movs	r2, #0
 8059bc8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.tail_idx = 0;
 8059bcc:	687b      	ldr	r3, [r7, #4]
 8059bce:	2200      	movs	r2, #0
 8059bd0:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8059bd4:	687b      	ldr	r3, [r7, #4]
 8059bd6:	2200      	movs	r2, #0
 8059bd8:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8059bdc:	687b      	ldr	r3, [r7, #4]
 8059bde:	2200      	movs	r2, #0
 8059be0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    self->transport_fifo.sn_max = 0;
 8059be4:	687b      	ldr	r3, [r7, #4]
 8059be6:	2200      	movs	r2, #0
 8059be8:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    self->transport_fifo.sn_min = 0;
 8059bec:	687b      	ldr	r3, [r7, #4]
 8059bee:	2200      	movs	r2, #0
 8059bf0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    self->transport_fifo.rn = 0;
 8059bf4:	687b      	ldr	r3, [r7, #4]
 8059bf6:	2200      	movs	r2, #0
 8059bf8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8059bfc:	4b09      	ldr	r3, [pc, #36]	@ (8059c24 <transport_fifo_reset+0x70>)
 8059bfe:	681a      	ldr	r2, [r3, #0]
 8059c00:	687b      	ldr	r3, [r7, #4]
 8059c02:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8059c06:	4b07      	ldr	r3, [pc, #28]	@ (8059c24 <transport_fifo_reset+0x70>)
 8059c08:	681a      	ldr	r2, [r3, #0]
 8059c0a:	687b      	ldr	r3, [r7, #4]
 8059c0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 8059c10:	687b      	ldr	r3, [r7, #4]
 8059c12:	2200      	movs	r2, #0
 8059c14:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8059c18:	bf00      	nop
 8059c1a:	370c      	adds	r7, #12
 8059c1c:	46bd      	mov	sp, r7
 8059c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059c22:	4770      	bx	lr
 8059c24:	2406e510 	.word	0x2406e510

08059c28 <min_transport_reset>:

void min_transport_reset(struct min_context *self, bool inform_other_side)
{
 8059c28:	b580      	push	{r7, lr}
 8059c2a:	b082      	sub	sp, #8
 8059c2c:	af00      	add	r7, sp, #0
 8059c2e:	6078      	str	r0, [r7, #4]
 8059c30:	460b      	mov	r3, r1
 8059c32:	70fb      	strb	r3, [r7, #3]
//    min_debug_print("Resetting %s other side\n", inform_other_side ? "and informing" : "without informing");
    if (inform_other_side) {
 8059c34:	78fb      	ldrb	r3, [r7, #3]
 8059c36:	2b00      	cmp	r3, #0
 8059c38:	d002      	beq.n	8059c40 <min_transport_reset+0x18>
        // Tell the other end we have gone away
        send_reset(self);
 8059c3a:	6878      	ldr	r0, [r7, #4]
 8059c3c:	f7ff ff9c 	bl	8059b78 <send_reset>
    }

    // Throw our frames away
    transport_fifo_reset(self);
 8059c40:	6878      	ldr	r0, [r7, #4]
 8059c42:	f7ff ffb7 	bl	8059bb4 <transport_fifo_reset>
}
 8059c46:	bf00      	nop
 8059c48:	3708      	adds	r7, #8
 8059c4a:	46bd      	mov	sp, r7
 8059c4c:	bd80      	pop	{r7, pc}
	...

08059c50 <min_queue_frame>:

// Queues a MIN ID / payload frame into the outgoing FIFO
// API call.
// Returns true if the frame was queued OK.
bool min_queue_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 8059c50:	b580      	push	{r7, lr}
 8059c52:	b088      	sub	sp, #32
 8059c54:	af00      	add	r7, sp, #0
 8059c56:	60f8      	str	r0, [r7, #12]
 8059c58:	607a      	str	r2, [r7, #4]
 8059c5a:	461a      	mov	r2, r3
 8059c5c:	460b      	mov	r3, r1
 8059c5e:	72fb      	strb	r3, [r7, #11]
 8059c60:	4613      	mov	r3, r2
 8059c62:	72bb      	strb	r3, [r7, #10]
    struct transport_frame *frame = transport_fifo_push(self, payload_len); // Claim a FIFO slot, reserve space for payload
 8059c64:	7abb      	ldrb	r3, [r7, #10]
 8059c66:	b29b      	uxth	r3, r3
 8059c68:	4619      	mov	r1, r3
 8059c6a:	68f8      	ldr	r0, [r7, #12]
 8059c6c:	f7ff fe9d 	bl	80599aa <transport_fifo_push>
 8059c70:	6178      	str	r0, [r7, #20]

    // We are just queueing here: the poll() function puts the frame into the window and on to the wire
    if (frame != 0) {
 8059c72:	697b      	ldr	r3, [r7, #20]
 8059c74:	2b00      	cmp	r3, #0
 8059c76:	d025      	beq.n	8059cc4 <min_queue_frame+0x74>
        uint32_t i;
        // Copy frame details into frame slot, copy payload into ring buffer
        frame->min_id = min_id & (uint8_t)0x3fU;
 8059c78:	7afb      	ldrb	r3, [r7, #11]
 8059c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8059c7e:	b2da      	uxtb	r2, r3
 8059c80:	697b      	ldr	r3, [r7, #20]
 8059c82:	71da      	strb	r2, [r3, #7]
        frame->payload_len = payload_len;
 8059c84:	697b      	ldr	r3, [r7, #20]
 8059c86:	7aba      	ldrb	r2, [r7, #10]
 8059c88:	719a      	strb	r2, [r3, #6]

        uint16_t payload_offset = frame->payload_offset;
 8059c8a:	697b      	ldr	r3, [r7, #20]
 8059c8c:	889b      	ldrh	r3, [r3, #4]
 8059c8e:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8059c90:	2300      	movs	r3, #0
 8059c92:	61fb      	str	r3, [r7, #28]
 8059c94:	e010      	b.n	8059cb8 <min_queue_frame+0x68>
            payloads_ring_buffer[payload_offset] = payload[i];
 8059c96:	687a      	ldr	r2, [r7, #4]
 8059c98:	69fb      	ldr	r3, [r7, #28]
 8059c9a:	441a      	add	r2, r3
 8059c9c:	8b7b      	ldrh	r3, [r7, #26]
 8059c9e:	7811      	ldrb	r1, [r2, #0]
 8059ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8059cdc <min_queue_frame+0x8c>)
 8059ca2:	54d1      	strb	r1, [r2, r3]
            payload_offset++;
 8059ca4:	8b7b      	ldrh	r3, [r7, #26]
 8059ca6:	3301      	adds	r3, #1
 8059ca8:	837b      	strh	r3, [r7, #26]
            payload_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8059caa:	8b7b      	ldrh	r3, [r7, #26]
 8059cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8059cb0:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8059cb2:	69fb      	ldr	r3, [r7, #28]
 8059cb4:	3301      	adds	r3, #1
 8059cb6:	61fb      	str	r3, [r7, #28]
 8059cb8:	7abb      	ldrb	r3, [r7, #10]
 8059cba:	69fa      	ldr	r2, [r7, #28]
 8059cbc:	429a      	cmp	r2, r3
 8059cbe:	d3ea      	bcc.n	8059c96 <min_queue_frame+0x46>
        }
//        min_debug_print("Queued ID=%d, len=%d\n", min_id, payload_len);
        return true;
 8059cc0:	2301      	movs	r3, #1
 8059cc2:	e007      	b.n	8059cd4 <min_queue_frame+0x84>
    } else {
        self->transport_fifo.dropped_frames++;
 8059cc4:	68fb      	ldr	r3, [r7, #12]
 8059cc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8059cca:	1c5a      	adds	r2, r3, #1
 8059ccc:	68fb      	ldr	r3, [r7, #12]
 8059cce:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        return false;
 8059cd2:	2300      	movs	r3, #0
    }
}
 8059cd4:	4618      	mov	r0, r3
 8059cd6:	3720      	adds	r7, #32
 8059cd8:	46bd      	mov	sp, r7
 8059cda:	bd80      	pop	{r7, pc}
 8059cdc:	2406e110 	.word	0x2406e110

08059ce0 <min_queue_has_space_for_frame>:

bool min_queue_has_space_for_frame(struct min_context *self, uint8_t payload_len)
{
 8059ce0:	b480      	push	{r7}
 8059ce2:	b083      	sub	sp, #12
 8059ce4:	af00      	add	r7, sp, #0
 8059ce6:	6078      	str	r0, [r7, #4]
 8059ce8:	460b      	mov	r3, r1
 8059cea:	70fb      	strb	r3, [r7, #3]
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8059cec:	687b      	ldr	r3, [r7, #4]
 8059cee:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8059cf2:	2b0f      	cmp	r3, #15
 8059cf4:	d80a      	bhi.n	8059d0c <min_queue_has_space_for_frame+0x2c>
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
 8059cf6:	687b      	ldr	r3, [r7, #4]
 8059cf8:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8059cfc:	461a      	mov	r2, r3
 8059cfe:	78fb      	ldrb	r3, [r7, #3]
 8059d00:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8059d04:	429a      	cmp	r2, r3
 8059d06:	d801      	bhi.n	8059d0c <min_queue_has_space_for_frame+0x2c>
 8059d08:	2301      	movs	r3, #1
 8059d0a:	e000      	b.n	8059d0e <min_queue_has_space_for_frame+0x2e>
 8059d0c:	2300      	movs	r3, #0
 8059d0e:	f003 0301 	and.w	r3, r3, #1
 8059d12:	b2db      	uxtb	r3, r3
}
 8059d14:	4618      	mov	r0, r3
 8059d16:	370c      	adds	r7, #12
 8059d18:	46bd      	mov	sp, r7
 8059d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059d1e:	4770      	bx	lr

08059d20 <find_retransmit_frame>:

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 8059d20:	b480      	push	{r7}
 8059d22:	b089      	sub	sp, #36	@ 0x24
 8059d24:	af00      	add	r7, sp, #0
 8059d26:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8059d28:	687b      	ldr	r3, [r7, #4]
 8059d2a:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8059d2e:	687b      	ldr	r3, [r7, #4]
 8059d30:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8059d34:	1ad3      	subs	r3, r2, r3
 8059d36:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8059d38:	687b      	ldr	r3, [r7, #4]
 8059d3a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8059d3e:	461a      	mov	r2, r3
 8059d40:	4613      	mov	r3, r2
 8059d42:	005b      	lsls	r3, r3, #1
 8059d44:	4413      	add	r3, r2
 8059d46:	009b      	lsls	r3, r3, #2
 8059d48:	687a      	ldr	r2, [r7, #4]
 8059d4a:	4413      	add	r3, r2
 8059d4c:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 8059d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8059dc8 <find_retransmit_frame+0xa8>)
 8059d50:	681a      	ldr	r2, [r3, #0]
 8059d52:	69bb      	ldr	r3, [r7, #24]
 8059d54:	681b      	ldr	r3, [r3, #0]
 8059d56:	1ad3      	subs	r3, r2, r3
 8059d58:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 8059d5a:	687b      	ldr	r3, [r7, #4]
 8059d5c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8059d60:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8059d62:	2300      	movs	r3, #0
 8059d64:	77bb      	strb	r3, [r7, #30]
 8059d66:	e023      	b.n	8059db0 <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 8059d68:	4b17      	ldr	r3, [pc, #92]	@ (8059dc8 <find_retransmit_frame+0xa8>)
 8059d6a:	6819      	ldr	r1, [r3, #0]
 8059d6c:	7ffa      	ldrb	r2, [r7, #31]
 8059d6e:	6878      	ldr	r0, [r7, #4]
 8059d70:	4613      	mov	r3, r2
 8059d72:	005b      	lsls	r3, r3, #1
 8059d74:	4413      	add	r3, r2
 8059d76:	009b      	lsls	r3, r3, #2
 8059d78:	4403      	add	r3, r0
 8059d7a:	681b      	ldr	r3, [r3, #0]
 8059d7c:	1acb      	subs	r3, r1, r3
 8059d7e:	60fb      	str	r3, [r7, #12]
        if (elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 8059d80:	68fa      	ldr	r2, [r7, #12]
 8059d82:	697b      	ldr	r3, [r7, #20]
 8059d84:	429a      	cmp	r2, r3
 8059d86:	d909      	bls.n	8059d9c <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8059d88:	68fb      	ldr	r3, [r7, #12]
 8059d8a:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8059d8c:	7ffa      	ldrb	r2, [r7, #31]
 8059d8e:	4613      	mov	r3, r2
 8059d90:	005b      	lsls	r3, r3, #1
 8059d92:	4413      	add	r3, r2
 8059d94:	009b      	lsls	r3, r3, #2
 8059d96:	687a      	ldr	r2, [r7, #4]
 8059d98:	4413      	add	r3, r2
 8059d9a:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8059d9c:	7ffb      	ldrb	r3, [r7, #31]
 8059d9e:	3301      	adds	r3, #1
 8059da0:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8059da2:	7ffb      	ldrb	r3, [r7, #31]
 8059da4:	f003 030f 	and.w	r3, r3, #15
 8059da8:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8059daa:	7fbb      	ldrb	r3, [r7, #30]
 8059dac:	3301      	adds	r3, #1
 8059dae:	77bb      	strb	r3, [r7, #30]
 8059db0:	7fba      	ldrb	r2, [r7, #30]
 8059db2:	7cfb      	ldrb	r3, [r7, #19]
 8059db4:	429a      	cmp	r2, r3
 8059db6:	d3d7      	bcc.n	8059d68 <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 8059db8:	69bb      	ldr	r3, [r7, #24]
}
 8059dba:	4618      	mov	r0, r3
 8059dbc:	3724      	adds	r7, #36	@ 0x24
 8059dbe:	46bd      	mov	sp, r7
 8059dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059dc4:	4770      	bx	lr
 8059dc6:	bf00      	nop
 8059dc8:	2406e510 	.word	0x2406e510

08059dcc <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 8059dcc:	b580      	push	{r7, lr}
 8059dce:	b088      	sub	sp, #32
 8059dd0:	af00      	add	r7, sp, #0
 8059dd2:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 8059dd4:	687b      	ldr	r3, [r7, #4]
 8059dd6:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 8059dda:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 8059ddc:	687b      	ldr	r3, [r7, #4]
 8059dde:	33ec      	adds	r3, #236	@ 0xec
 8059de0:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 8059de2:	687b      	ldr	r3, [r7, #4]
 8059de4:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8059de8:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 8059dea:	687b      	ldr	r3, [r7, #4]
 8059dec:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8059df0:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 8059df2:	4b52      	ldr	r3, [pc, #328]	@ (8059f3c <valid_frame_received+0x170>)
 8059df4:	681a      	ldr	r2, [r3, #0]
 8059df6:	687b      	ldr	r3, [r7, #4]
 8059df8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    switch (id_control) {
 8059dfc:	7f7b      	ldrb	r3, [r7, #29]
 8059dfe:	2bfe      	cmp	r3, #254	@ 0xfe
 8059e00:	d053      	beq.n	8059eaa <valid_frame_received+0xde>
 8059e02:	2bff      	cmp	r3, #255	@ 0xff
 8059e04:	d15c      	bne.n	8059ec0 <valid_frame_received+0xf4>
    case ACK:
        // If we get an ACK then we remove all the acknowledged frames with seq < rn
        // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
        // they have gone missing.
        // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
        num_acked = seq - self->transport_fifo.sn_min;
 8059e06:	687b      	ldr	r3, [r7, #4]
 8059e08:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8059e0c:	7dba      	ldrb	r2, [r7, #22]
 8059e0e:	1ad3      	subs	r3, r2, r3
 8059e10:	757b      	strb	r3, [r7, #21]
        num_nacked = payload[0] - seq;
 8059e12:	69bb      	ldr	r3, [r7, #24]
 8059e14:	781a      	ldrb	r2, [r3, #0]
 8059e16:	7dbb      	ldrb	r3, [r7, #22]
 8059e18:	1ad3      	subs	r3, r2, r3
 8059e1a:	753b      	strb	r3, [r7, #20]
        num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8059e1c:	687b      	ldr	r3, [r7, #4]
 8059e1e:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8059e22:	687b      	ldr	r3, [r7, #4]
 8059e24:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8059e28:	1ad3      	subs	r3, r2, r3
 8059e2a:	74fb      	strb	r3, [r7, #19]

        if (num_acked <= num_in_window) {
 8059e2c:	7d7a      	ldrb	r2, [r7, #21]
 8059e2e:	7cfb      	ldrb	r3, [r7, #19]
 8059e30:	429a      	cmp	r2, r3
 8059e32:	d832      	bhi.n	8059e9a <valid_frame_received+0xce>
            uint8_t i;

            self->transport_fifo.sn_min = seq;
 8059e34:	687b      	ldr	r3, [r7, #4]
 8059e36:	7dba      	ldrb	r2, [r7, #22]
 8059e38:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
            // Now pop off all the frames up to (but not including) rn
            // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
//            min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
            for (i = 0; i < num_acked; i++) {
 8059e3c:	2300      	movs	r3, #0
 8059e3e:	77fb      	strb	r3, [r7, #31]
 8059e40:	e005      	b.n	8059e4e <valid_frame_received+0x82>
                transport_fifo_pop(self);
 8059e42:	6878      	ldr	r0, [r7, #4]
 8059e44:	f7ff fd79 	bl	805993a <transport_fifo_pop>
            for (i = 0; i < num_acked; i++) {
 8059e48:	7ffb      	ldrb	r3, [r7, #31]
 8059e4a:	3301      	adds	r3, #1
 8059e4c:	77fb      	strb	r3, [r7, #31]
 8059e4e:	7ffa      	ldrb	r2, [r7, #31]
 8059e50:	7d7b      	ldrb	r3, [r7, #21]
 8059e52:	429a      	cmp	r2, r3
 8059e54:	d3f5      	bcc.n	8059e42 <valid_frame_received+0x76>
            }
            uint8_t idx = self->transport_fifo.head_idx;
 8059e56:	687b      	ldr	r3, [r7, #4]
 8059e58:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8059e5c:	77bb      	strb	r3, [r7, #30]
            // Now retransmit the number of frames that were requested
            for (i = 0; i < num_nacked; i++) {
 8059e5e:	2300      	movs	r3, #0
 8059e60:	77fb      	strb	r3, [r7, #31]
 8059e62:	e015      	b.n	8059e90 <valid_frame_received+0xc4>
                struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8059e64:	7fba      	ldrb	r2, [r7, #30]
 8059e66:	4613      	mov	r3, r2
 8059e68:	005b      	lsls	r3, r3, #1
 8059e6a:	4413      	add	r3, r2
 8059e6c:	009b      	lsls	r3, r3, #2
 8059e6e:	687a      	ldr	r2, [r7, #4]
 8059e70:	4413      	add	r3, r2
 8059e72:	60fb      	str	r3, [r7, #12]
                transport_fifo_send(self, retransmit_frame);
 8059e74:	68f9      	ldr	r1, [r7, #12]
 8059e76:	6878      	ldr	r0, [r7, #4]
 8059e78:	f7ff fe30 	bl	8059adc <transport_fifo_send>
                idx++;
 8059e7c:	7fbb      	ldrb	r3, [r7, #30]
 8059e7e:	3301      	adds	r3, #1
 8059e80:	77bb      	strb	r3, [r7, #30]
                idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8059e82:	7fbb      	ldrb	r3, [r7, #30]
 8059e84:	f003 030f 	and.w	r3, r3, #15
 8059e88:	77bb      	strb	r3, [r7, #30]
            for (i = 0; i < num_nacked; i++) {
 8059e8a:	7ffb      	ldrb	r3, [r7, #31]
 8059e8c:	3301      	adds	r3, #1
 8059e8e:	77fb      	strb	r3, [r7, #31]
 8059e90:	7ffa      	ldrb	r2, [r7, #31]
 8059e92:	7d3b      	ldrb	r3, [r7, #20]
 8059e94:	429a      	cmp	r2, r3
 8059e96:	d3e5      	bcc.n	8059e64 <valid_frame_received+0x98>
            }
        } else {
//            min_debug_print("Received spurious ACK seq=%d\n", seq);
            self->transport_fifo.spurious_acks++;
        }
        break;
 8059e98:	e04c      	b.n	8059f34 <valid_frame_received+0x168>
            self->transport_fifo.spurious_acks++;
 8059e9a:	687b      	ldr	r3, [r7, #4]
 8059e9c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8059ea0:	1c5a      	adds	r2, r3, #1
 8059ea2:	687b      	ldr	r3, [r7, #4]
 8059ea4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        break;
 8059ea8:	e044      	b.n	8059f34 <valid_frame_received+0x168>
        // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
        // sequence numbers, etc.)
        // We don't send anything, we just do it. The other end can send frames to see if this end is
        // alive (pings, etc.) or just wait to get application frames.
//        min_debug_print("Received reset\n");
        self->transport_fifo.resets_received++;
 8059eaa:	687b      	ldr	r3, [r7, #4]
 8059eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8059eb0:	1c5a      	adds	r2, r3, #1
 8059eb2:	687b      	ldr	r3, [r7, #4]
 8059eb4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        transport_fifo_reset(self);
 8059eb8:	6878      	ldr	r0, [r7, #4]
 8059eba:	f7ff fe7b 	bl	8059bb4 <transport_fifo_reset>
        break;
 8059ebe:	e039      	b.n	8059f34 <valid_frame_received+0x168>
    default:
        if (id_control & 0x80U) {
 8059ec0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8059ec4:	2b00      	cmp	r3, #0
 8059ec6:	da29      	bge.n	8059f1c <valid_frame_received+0x150>
            // Incoming application frames

            // Reset the activity time (an idle connection will be stalled)
            self->transport_fifo.last_received_frame_ms = now;
 8059ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8059f3c <valid_frame_received+0x170>)
 8059eca:	681a      	ldr	r2, [r3, #0]
 8059ecc:	687b      	ldr	r3, [r7, #4]
 8059ece:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            if (seq == self->transport_fifo.rn) {
 8059ed2:	687b      	ldr	r3, [r7, #4]
 8059ed4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8059ed8:	7dba      	ldrb	r2, [r7, #22]
 8059eda:	429a      	cmp	r2, r3
 8059edc:	d116      	bne.n	8059f0c <valid_frame_received+0x140>
                // Accept this frame as matching the sequence number we were looking for

                // Now looking for the next one in the sequence
                self->transport_fifo.rn++;
 8059ede:	687b      	ldr	r3, [r7, #4]
 8059ee0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8059ee4:	3301      	adds	r3, #1
 8059ee6:	b2da      	uxtb	r2, r3
 8059ee8:	687b      	ldr	r3, [r7, #4]
 8059eea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                // Always send an ACK back for the frame we received
                // ACKs are short (should be about 9 microseconds to send on the wire) and
                // this will cut the latency down.
                // We also periodically send an ACK in case the ACK was lost, and in any case
                // frames are re-sent.
                send_ack(self);
 8059eee:	6878      	ldr	r0, [r7, #4]
 8059ef0:	f7ff fe1a 	bl	8059b28 <send_ack>

                // Now ready to pass this up to the application handlers

                // Pass frame up to application handler to deal with
//                min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8059ef4:	7f7b      	ldrb	r3, [r7, #29]
 8059ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8059efa:	b2d8      	uxtb	r0, r3
 8059efc:	687b      	ldr	r3, [r7, #4]
 8059efe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059f02:	7dfa      	ldrb	r2, [r7, #23]
 8059f04:	69b9      	ldr	r1, [r7, #24]
 8059f06:	f000 fb3f 	bl	805a588 <min_application_handler>
        } else {
            // Not a transport frame
//            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
        }
        break;
 8059f0a:	e012      	b.n	8059f32 <valid_frame_received+0x166>
                self->transport_fifo.sequence_mismatch_drop++;
 8059f0c:	687b      	ldr	r3, [r7, #4]
 8059f0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8059f12:	1c5a      	adds	r2, r3, #1
 8059f14:	687b      	ldr	r3, [r7, #4]
 8059f16:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        break;
 8059f1a:	e00a      	b.n	8059f32 <valid_frame_received+0x166>
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8059f1c:	7f7b      	ldrb	r3, [r7, #29]
 8059f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8059f22:	b2d8      	uxtb	r0, r3
 8059f24:	687b      	ldr	r3, [r7, #4]
 8059f26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8059f2a:	7dfa      	ldrb	r2, [r7, #23]
 8059f2c:	69b9      	ldr	r1, [r7, #24]
 8059f2e:	f000 fb2b 	bl	805a588 <min_application_handler>
        break;
 8059f32:	bf00      	nop
    }
#else  // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8059f34:	bf00      	nop
 8059f36:	3720      	adds	r7, #32
 8059f38:	46bd      	mov	sp, r7
 8059f3a:	bd80      	pop	{r7, pc}
 8059f3c:	2406e510 	.word	0x2406e510

08059f40 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8059f40:	b580      	push	{r7, lr}
 8059f42:	b084      	sub	sp, #16
 8059f44:	af00      	add	r7, sp, #0
 8059f46:	6078      	str	r0, [r7, #4]
 8059f48:	460b      	mov	r3, r1
 8059f4a:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if (self->rx_header_bytes_seen == 2) {
 8059f4c:	687b      	ldr	r3, [r7, #4]
 8059f4e:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8059f52:	2b02      	cmp	r3, #2
 8059f54:	d114      	bne.n	8059f80 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 8059f56:	687b      	ldr	r3, [r7, #4]
 8059f58:	2200      	movs	r2, #0
 8059f5a:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
        if (byte == HEADER_BYTE) {
 8059f5e:	78fb      	ldrb	r3, [r7, #3]
 8059f60:	2baa      	cmp	r3, #170	@ 0xaa
 8059f62:	d104      	bne.n	8059f6e <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8059f64:	687b      	ldr	r3, [r7, #4]
 8059f66:	2201      	movs	r2, #1
 8059f68:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8059f6c:	e110      	b.n	805a190 <rx_byte+0x250>
        }
        if (byte == STUFF_BYTE) {
 8059f6e:	78fb      	ldrb	r3, [r7, #3]
 8059f70:	2b55      	cmp	r3, #85	@ 0x55
 8059f72:	f000 8108 	beq.w	805a186 <rx_byte+0x246>
            /* Discard this byte; carry on receiving on the next character */
            return;
        } else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8059f76:	687b      	ldr	r3, [r7, #4]
 8059f78:	2200      	movs	r2, #0
 8059f7a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8059f7e:	e107      	b.n	805a190 <rx_byte+0x250>
        }
    }

    if (byte == HEADER_BYTE) {
 8059f80:	78fb      	ldrb	r3, [r7, #3]
 8059f82:	2baa      	cmp	r3, #170	@ 0xaa
 8059f84:	d108      	bne.n	8059f98 <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 8059f86:	687b      	ldr	r3, [r7, #4]
 8059f88:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8059f8c:	3301      	adds	r3, #1
 8059f8e:	b2da      	uxtb	r2, r3
 8059f90:	687b      	ldr	r3, [r7, #4]
 8059f92:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 8059f96:	e003      	b.n	8059fa0 <rx_byte+0x60>
    } else {
        self->rx_header_bytes_seen = 0;
 8059f98:	687b      	ldr	r3, [r7, #4]
 8059f9a:	2200      	movs	r2, #0
 8059f9c:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    }

    switch (self->rx_frame_state) {
 8059fa0:	687b      	ldr	r3, [r7, #4]
 8059fa2:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8059fa6:	2b09      	cmp	r3, #9
 8059fa8:	f200 80e8 	bhi.w	805a17c <rx_byte+0x23c>
 8059fac:	a201      	add	r2, pc, #4	@ (adr r2, 8059fb4 <rx_byte+0x74>)
 8059fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8059fb2:	bf00      	nop
 8059fb4:	0805a18b 	.word	0x0805a18b
 8059fb8:	08059fdd 	.word	0x08059fdd
 8059fbc:	0805a02d 	.word	0x0805a02d
 8059fc0:	0805a04f 	.word	0x0805a04f
 8059fc4:	0805a08d 	.word	0x0805a08d
 8059fc8:	0805a0dd 	.word	0x0805a0dd
 8059fcc:	0805a0f1 	.word	0x0805a0f1
 8059fd0:	0805a10d 	.word	0x0805a10d
 8059fd4:	0805a129 	.word	0x0805a129
 8059fd8:	0805a167 	.word	0x0805a167
    case SEARCHING_FOR_SOF:
        break;
    case RECEIVING_ID_CONTROL:
        self->rx_frame_id_control = byte;
 8059fdc:	687b      	ldr	r3, [r7, #4]
 8059fde:	78fa      	ldrb	r2, [r7, #3]
 8059fe0:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
        self->rx_frame_payload_bytes = 0;
 8059fe4:	687b      	ldr	r3, [r7, #4]
 8059fe6:	2200      	movs	r2, #0
 8059fe8:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
        crc32_init_context(&self->rx_checksum);
 8059fec:	687b      	ldr	r3, [r7, #4]
 8059fee:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8059ff2:	4618      	mov	r0, r3
 8059ff4:	f7ff fb7d 	bl	80596f2 <crc32_init_context>
        crc32_step(&self->rx_checksum, byte);
 8059ff8:	687b      	ldr	r3, [r7, #4]
 8059ffa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8059ffe:	78fa      	ldrb	r2, [r7, #3]
 805a000:	4611      	mov	r1, r2
 805a002:	4618      	mov	r0, r3
 805a004:	f7ff fb84 	bl	8059710 <crc32_step>
        if (byte & 0x80U) {
 805a008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 805a00c:	2b00      	cmp	r3, #0
 805a00e:	da04      	bge.n	805a01a <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
            self->rx_frame_state = RECEIVING_SEQ;
 805a010:	687b      	ldr	r3, [r7, #4]
 805a012:	2202      	movs	r2, #2
 805a014:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
#endif // TRANSPORT_PROTOCOL
        } else {
            self->rx_frame_seq = 0;
            self->rx_frame_state = RECEIVING_LENGTH;
        }
        break;
 805a018:	e0ba      	b.n	805a190 <rx_byte+0x250>
            self->rx_frame_seq = 0;
 805a01a:	687b      	ldr	r3, [r7, #4]
 805a01c:	2200      	movs	r2, #0
 805a01e:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
            self->rx_frame_state = RECEIVING_LENGTH;
 805a022:	687b      	ldr	r3, [r7, #4]
 805a024:	2203      	movs	r2, #3
 805a026:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a02a:	e0b1      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_SEQ:
        self->rx_frame_seq = byte;
 805a02c:	687b      	ldr	r3, [r7, #4]
 805a02e:	78fa      	ldrb	r2, [r7, #3]
 805a030:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        crc32_step(&self->rx_checksum, byte);
 805a034:	687b      	ldr	r3, [r7, #4]
 805a036:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 805a03a:	78fa      	ldrb	r2, [r7, #3]
 805a03c:	4611      	mov	r1, r2
 805a03e:	4618      	mov	r0, r3
 805a040:	f7ff fb66 	bl	8059710 <crc32_step>
        self->rx_frame_state = RECEIVING_LENGTH;
 805a044:	687b      	ldr	r3, [r7, #4]
 805a046:	2203      	movs	r2, #3
 805a048:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a04c:	e0a0      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_LENGTH:
        self->rx_frame_length = byte;
 805a04e:	687b      	ldr	r3, [r7, #4]
 805a050:	78fa      	ldrb	r2, [r7, #3]
 805a052:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
        self->rx_control = byte;
 805a056:	687b      	ldr	r3, [r7, #4]
 805a058:	78fa      	ldrb	r2, [r7, #3]
 805a05a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
        crc32_step(&self->rx_checksum, byte);
 805a05e:	687b      	ldr	r3, [r7, #4]
 805a060:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 805a064:	78fa      	ldrb	r2, [r7, #3]
 805a066:	4611      	mov	r1, r2
 805a068:	4618      	mov	r0, r3
 805a06a:	f7ff fb51 	bl	8059710 <crc32_step>
        if (self->rx_frame_length > 0) {
 805a06e:	687b      	ldr	r3, [r7, #4]
 805a070:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 805a074:	2b00      	cmp	r3, #0
 805a076:	d004      	beq.n	805a082 <rx_byte+0x142>
            // Can reduce the RAM size by compiling limits to frame sizes
            if (self->rx_frame_length <= MAX_PAYLOAD) {
                self->rx_frame_state = RECEIVING_PAYLOAD;
 805a078:	687b      	ldr	r3, [r7, #4]
 805a07a:	2204      	movs	r2, #4
 805a07c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
                self->rx_frame_state = SEARCHING_FOR_SOF;
            }
        } else {
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
        }
        break;
 805a080:	e086      	b.n	805a190 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 805a082:	687b      	ldr	r3, [r7, #4]
 805a084:	2205      	movs	r2, #5
 805a086:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a08a:	e081      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_PAYLOAD:
        self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 805a08c:	687b      	ldr	r3, [r7, #4]
 805a08e:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 805a092:	1c5a      	adds	r2, r3, #1
 805a094:	b2d1      	uxtb	r1, r2
 805a096:	687a      	ldr	r2, [r7, #4]
 805a098:	f882 11fa 	strb.w	r1, [r2, #506]	@ 0x1fa
 805a09c:	461a      	mov	r2, r3
 805a09e:	687b      	ldr	r3, [r7, #4]
 805a0a0:	4413      	add	r3, r2
 805a0a2:	78fa      	ldrb	r2, [r7, #3]
 805a0a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        crc32_step(&self->rx_checksum, byte);
 805a0a8:	687b      	ldr	r3, [r7, #4]
 805a0aa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 805a0ae:	78fa      	ldrb	r2, [r7, #3]
 805a0b0:	4611      	mov	r1, r2
 805a0b2:	4618      	mov	r0, r3
 805a0b4:	f7ff fb2c 	bl	8059710 <crc32_step>
        if (--self->rx_frame_length == 0) {
 805a0b8:	687b      	ldr	r3, [r7, #4]
 805a0ba:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 805a0be:	3b01      	subs	r3, #1
 805a0c0:	b2da      	uxtb	r2, r3
 805a0c2:	687b      	ldr	r3, [r7, #4]
 805a0c4:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
 805a0c8:	687b      	ldr	r3, [r7, #4]
 805a0ca:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 805a0ce:	2b00      	cmp	r3, #0
 805a0d0:	d15d      	bne.n	805a18e <rx_byte+0x24e>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 805a0d2:	687b      	ldr	r3, [r7, #4]
 805a0d4:	2205      	movs	r2, #5
 805a0d6:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        }
        break;
 805a0da:	e058      	b.n	805a18e <rx_byte+0x24e>
    case RECEIVING_CHECKSUM_3:
        self->rx_frame_checksum = ((uint32_t)byte) << 24;
 805a0dc:	78fb      	ldrb	r3, [r7, #3]
 805a0de:	061a      	lsls	r2, r3, #24
 805a0e0:	687b      	ldr	r3, [r7, #4]
 805a0e2:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_2;
 805a0e6:	687b      	ldr	r3, [r7, #4]
 805a0e8:	2206      	movs	r2, #6
 805a0ea:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a0ee:	e04f      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_2:
        self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 805a0f0:	687b      	ldr	r3, [r7, #4]
 805a0f2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 805a0f6:	78fb      	ldrb	r3, [r7, #3]
 805a0f8:	041b      	lsls	r3, r3, #16
 805a0fa:	431a      	orrs	r2, r3
 805a0fc:	687b      	ldr	r3, [r7, #4]
 805a0fe:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_1;
 805a102:	687b      	ldr	r3, [r7, #4]
 805a104:	2207      	movs	r2, #7
 805a106:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a10a:	e041      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_1:
        self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 805a10c:	687b      	ldr	r3, [r7, #4]
 805a10e:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 805a112:	78fb      	ldrb	r3, [r7, #3]
 805a114:	021b      	lsls	r3, r3, #8
 805a116:	431a      	orrs	r2, r3
 805a118:	687b      	ldr	r3, [r7, #4]
 805a11a:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_0;
 805a11e:	687b      	ldr	r3, [r7, #4]
 805a120:	2208      	movs	r2, #8
 805a122:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a126:	e033      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_0:
        self->rx_frame_checksum |= byte;
 805a128:	687b      	ldr	r3, [r7, #4]
 805a12a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 805a12e:	78fb      	ldrb	r3, [r7, #3]
 805a130:	431a      	orrs	r2, r3
 805a132:	687b      	ldr	r3, [r7, #4]
 805a134:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        crc = crc32_finalize(&self->rx_checksum);
 805a138:	687b      	ldr	r3, [r7, #4]
 805a13a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 805a13e:	4618      	mov	r0, r3
 805a140:	f7ff fb14 	bl	805976c <crc32_finalize>
 805a144:	60f8      	str	r0, [r7, #12]
        if (self->rx_frame_checksum != crc) {
 805a146:	687b      	ldr	r3, [r7, #4]
 805a148:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 805a14c:	68fa      	ldr	r2, [r7, #12]
 805a14e:	429a      	cmp	r2, r3
 805a150:	d004      	beq.n	805a15c <rx_byte+0x21c>
//            min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
            // Frame fails the checksum and so is dropped
            self->rx_frame_state = SEARCHING_FOR_SOF;
 805a152:	687b      	ldr	r3, [r7, #4]
 805a154:	2200      	movs	r2, #0
 805a156:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        } else {
            // Checksum passes, go on to check for the end-of-frame marker
            self->rx_frame_state = RECEIVING_EOF;
        }
        break;
 805a15a:	e019      	b.n	805a190 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_EOF;
 805a15c:	687b      	ldr	r3, [r7, #4]
 805a15e:	2209      	movs	r2, #9
 805a160:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a164:	e014      	b.n	805a190 <rx_byte+0x250>
    case RECEIVING_EOF:
        if (byte == 0x55u) {
 805a166:	78fb      	ldrb	r3, [r7, #3]
 805a168:	2b55      	cmp	r3, #85	@ 0x55
 805a16a:	d102      	bne.n	805a172 <rx_byte+0x232>
            // Frame received OK, pass up data to handler
            valid_frame_received(self);
 805a16c:	6878      	ldr	r0, [r7, #4]
 805a16e:	f7ff fe2d 	bl	8059dcc <valid_frame_received>
        } else {
            // else discard
//            min_debug_print("Received invalid EOF 0x%02X", byte);
        }
        // Look for next frame */
        self->rx_frame_state = SEARCHING_FOR_SOF;
 805a172:	687b      	ldr	r3, [r7, #4]
 805a174:	2200      	movs	r2, #0
 805a176:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a17a:	e009      	b.n	805a190 <rx_byte+0x250>
    default:
        // Should never get here but in case we do then reset to a safe state
//        min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
        self->rx_frame_state = SEARCHING_FOR_SOF;
 805a17c:	687b      	ldr	r3, [r7, #4]
 805a17e:	2200      	movs	r2, #0
 805a180:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 805a184:	e004      	b.n	805a190 <rx_byte+0x250>
            return;
 805a186:	bf00      	nop
 805a188:	e002      	b.n	805a190 <rx_byte+0x250>
        break;
 805a18a:	bf00      	nop
 805a18c:	e000      	b.n	805a190 <rx_byte+0x250>
        break;
 805a18e:	bf00      	nop
    }
}
 805a190:	3710      	adds	r7, #16
 805a192:	46bd      	mov	sp, r7
 805a194:	bd80      	pop	{r7, pc}
 805a196:	bf00      	nop

0805a198 <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 805a198:	b590      	push	{r4, r7, lr}
 805a19a:	b089      	sub	sp, #36	@ 0x24
 805a19c:	af00      	add	r7, sp, #0
 805a19e:	60f8      	str	r0, [r7, #12]
 805a1a0:	60b9      	str	r1, [r7, #8]
 805a1a2:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buf_len; i++) {
 805a1a4:	2300      	movs	r3, #0
 805a1a6:	61fb      	str	r3, [r7, #28]
 805a1a8:	e00a      	b.n	805a1c0 <min_poll+0x28>
        rx_byte(self, buf[i]);
 805a1aa:	68ba      	ldr	r2, [r7, #8]
 805a1ac:	69fb      	ldr	r3, [r7, #28]
 805a1ae:	4413      	add	r3, r2
 805a1b0:	781b      	ldrb	r3, [r3, #0]
 805a1b2:	4619      	mov	r1, r3
 805a1b4:	68f8      	ldr	r0, [r7, #12]
 805a1b6:	f7ff fec3 	bl	8059f40 <rx_byte>
    for (i = 0; i < buf_len; i++) {
 805a1ba:	69fb      	ldr	r3, [r7, #28]
 805a1bc:	3301      	adds	r3, #1
 805a1be:	61fb      	str	r3, [r7, #28]
 805a1c0:	69fa      	ldr	r2, [r7, #28]
 805a1c2:	687b      	ldr	r3, [r7, #4]
 805a1c4:	429a      	cmp	r2, r3
 805a1c6:	d3f0      	bcc.n	805a1aa <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 805a1c8:	f000 f8fa 	bl	805a3c0 <min_time_ms>
 805a1cc:	4603      	mov	r3, r0
 805a1ce:	4a44      	ldr	r2, [pc, #272]	@ (805a2e0 <min_poll+0x148>)
 805a1d0:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 805a1d2:	4b43      	ldr	r3, [pc, #268]	@ (805a2e0 <min_poll+0x148>)
 805a1d4:	681a      	ldr	r2, [r3, #0]
 805a1d6:	68fb      	ldr	r3, [r7, #12]
 805a1d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 805a1dc:	1ad3      	subs	r3, r2, r3
 805a1de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 805a1e2:	4293      	cmp	r3, r2
 805a1e4:	bf94      	ite	ls
 805a1e6:	2301      	movls	r3, #1
 805a1e8:	2300      	movhi	r3, #0
 805a1ea:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 805a1ec:	4b3c      	ldr	r3, [pc, #240]	@ (805a2e0 <min_poll+0x148>)
 805a1ee:	681a      	ldr	r2, [r3, #0]
 805a1f0:	68fb      	ldr	r3, [r7, #12]
 805a1f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 805a1f6:	1ad3      	subs	r3, r2, r3
 805a1f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 805a1fc:	4293      	cmp	r3, r2
 805a1fe:	bf94      	ite	ls
 805a200:	2301      	movls	r3, #1
 805a202:	2300      	movhi	r3, #0
 805a204:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 805a206:	68fb      	ldr	r3, [r7, #12]
 805a208:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 805a20c:	68fb      	ldr	r3, [r7, #12]
 805a20e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 805a212:	1ad3      	subs	r3, r2, r3
 805a214:	767b      	strb	r3, [r7, #25]
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 805a216:	7e7b      	ldrb	r3, [r7, #25]
 805a218:	2b03      	cmp	r3, #3
 805a21a:	d82a      	bhi.n	805a272 <min_poll+0xda>
 805a21c:	68fb      	ldr	r3, [r7, #12]
 805a21e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 805a222:	7e7a      	ldrb	r2, [r7, #25]
 805a224:	429a      	cmp	r2, r3
 805a226:	d224      	bcs.n	805a272 <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 805a228:	7e7b      	ldrb	r3, [r7, #25]
 805a22a:	4619      	mov	r1, r3
 805a22c:	68f8      	ldr	r0, [r7, #12]
 805a22e:	f7ff fc39 	bl	8059aa4 <transport_fifo_get>
 805a232:	6178      	str	r0, [r7, #20]
        if (ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 805a234:	697b      	ldr	r3, [r7, #20]
 805a236:	799b      	ldrb	r3, [r3, #6]
 805a238:	f103 040b 	add.w	r4, r3, #11
 805a23c:	68fb      	ldr	r3, [r7, #12]
 805a23e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805a242:	4618      	mov	r0, r3
 805a244:	f000 f880 	bl	805a348 <min_tx_space>
 805a248:	4603      	mov	r3, r0
 805a24a:	429c      	cmp	r4, r3
 805a24c:	d834      	bhi.n	805a2b8 <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 805a24e:	68fb      	ldr	r3, [r7, #12]
 805a250:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 805a254:	697b      	ldr	r3, [r7, #20]
 805a256:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 805a258:	6979      	ldr	r1, [r7, #20]
 805a25a:	68f8      	ldr	r0, [r7, #12]
 805a25c:	f7ff fc3e 	bl	8059adc <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 805a260:	68fb      	ldr	r3, [r7, #12]
 805a262:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 805a266:	3301      	adds	r3, #1
 805a268:	b2da      	uxtb	r2, r3
 805a26a:	68fb      	ldr	r3, [r7, #12]
 805a26c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 805a270:	e022      	b.n	805a2b8 <min_poll+0x120>
        }
    } else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if ((window_size > 0) && remote_connected) {
 805a272:	7e7b      	ldrb	r3, [r7, #25]
 805a274:	2b00      	cmp	r3, #0
 805a276:	d020      	beq.n	805a2ba <min_poll+0x122>
 805a278:	7efb      	ldrb	r3, [r7, #27]
 805a27a:	2b00      	cmp	r3, #0
 805a27c:	d01d      	beq.n	805a2ba <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 805a27e:	68f8      	ldr	r0, [r7, #12]
 805a280:	f7ff fd4e 	bl	8059d20 <find_retransmit_frame>
 805a284:	6138      	str	r0, [r7, #16]
            if (now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 805a286:	4b16      	ldr	r3, [pc, #88]	@ (805a2e0 <min_poll+0x148>)
 805a288:	681a      	ldr	r2, [r3, #0]
 805a28a:	693b      	ldr	r3, [r7, #16]
 805a28c:	681b      	ldr	r3, [r3, #0]
 805a28e:	1ad3      	subs	r3, r2, r3
 805a290:	2bf9      	cmp	r3, #249	@ 0xf9
 805a292:	d912      	bls.n	805a2ba <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if (ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 805a294:	693b      	ldr	r3, [r7, #16]
 805a296:	799b      	ldrb	r3, [r3, #6]
 805a298:	f103 040b 	add.w	r4, r3, #11
 805a29c:	68fb      	ldr	r3, [r7, #12]
 805a29e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805a2a2:	4618      	mov	r0, r3
 805a2a4:	f000 f850 	bl	805a348 <min_tx_space>
 805a2a8:	4603      	mov	r3, r0
 805a2aa:	429c      	cmp	r4, r3
 805a2ac:	d805      	bhi.n	805a2ba <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 805a2ae:	6939      	ldr	r1, [r7, #16]
 805a2b0:	68f8      	ldr	r0, [r7, #12]
 805a2b2:	f7ff fc13 	bl	8059adc <transport_fifo_send>
 805a2b6:	e000      	b.n	805a2ba <min_poll+0x122>
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 805a2b8:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if (now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 805a2ba:	4b09      	ldr	r3, [pc, #36]	@ (805a2e0 <min_poll+0x148>)
 805a2bc:	681a      	ldr	r2, [r3, #0]
 805a2be:	68fb      	ldr	r3, [r7, #12]
 805a2c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 805a2c4:	1ad3      	subs	r3, r2, r3
 805a2c6:	2bfa      	cmp	r3, #250	@ 0xfa
 805a2c8:	d905      	bls.n	805a2d6 <min_poll+0x13e>
        if (remote_active) {
 805a2ca:	7ebb      	ldrb	r3, [r7, #26]
 805a2cc:	2b00      	cmp	r3, #0
 805a2ce:	d002      	beq.n	805a2d6 <min_poll+0x13e>
            send_ack(self);
 805a2d0:	68f8      	ldr	r0, [r7, #12]
 805a2d2:	f7ff fc29 	bl	8059b28 <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 805a2d6:	bf00      	nop
 805a2d8:	3724      	adds	r7, #36	@ 0x24
 805a2da:	46bd      	mov	sp, r7
 805a2dc:	bd90      	pop	{r4, r7, pc}
 805a2de:	bf00      	nop
 805a2e0:	2406e510 	.word	0x2406e510

0805a2e4 <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void *p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 805a2e4:	b580      	push	{r7, lr}
 805a2e6:	b082      	sub	sp, #8
 805a2e8:	af00      	add	r7, sp, #0
 805a2ea:	6078      	str	r0, [r7, #4]
 805a2ec:	460b      	mov	r3, r1
 805a2ee:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 805a2f0:	687b      	ldr	r3, [r7, #4]
 805a2f2:	2200      	movs	r2, #0
 805a2f4:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 805a2f8:	687b      	ldr	r3, [r7, #4]
 805a2fa:	2200      	movs	r2, #0
 805a2fc:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
    self->port = port;
 805a300:	687b      	ldr	r3, [r7, #4]
 805a302:	78fa      	ldrb	r2, [r7, #3]
 805a304:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 805a308:	687b      	ldr	r3, [r7, #4]
 805a30a:	2200      	movs	r2, #0
 805a30c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 805a310:	687b      	ldr	r3, [r7, #4]
 805a312:	2200      	movs	r2, #0
 805a314:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    self->transport_fifo.dropped_frames = 0;
 805a318:	687b      	ldr	r3, [r7, #4]
 805a31a:	2200      	movs	r2, #0
 805a31c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    self->transport_fifo.resets_received = 0;
 805a320:	687b      	ldr	r3, [r7, #4]
 805a322:	2200      	movs	r2, #0
 805a324:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 805a328:	687b      	ldr	r3, [r7, #4]
 805a32a:	2200      	movs	r2, #0
 805a32c:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    self->transport_fifo.n_frames_max = 0;
 805a330:	687b      	ldr	r3, [r7, #4]
 805a332:	2200      	movs	r2, #0
 805a334:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    transport_fifo_reset(self);
 805a338:	6878      	ldr	r0, [r7, #4]
 805a33a:	f7ff fc3b 	bl	8059bb4 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
//    min_debug_print("MIN init complete\n");
}
 805a33e:	bf00      	nop
 805a340:	3708      	adds	r7, #8
 805a342:	46bd      	mov	sp, r7
 805a344:	bd80      	pop	{r7, pc}
	...

0805a348 <min_tx_space>:
#include "uart_driver_dma.h"

static MIN_Context_t *registered_contexts[MAX_MIN_CONTEXTS] = {0};

uint16_t min_tx_space(uint8_t port)
{
 805a348:	b580      	push	{r7, lr}
 805a34a:	b082      	sub	sp, #8
 805a34c:	af00      	add	r7, sp, #0
 805a34e:	4603      	mov	r3, r0
 805a350:	71fb      	strb	r3, [r7, #7]
    return UART_DMA_Driver_TXNumFreeSlots(UART_EXP);
 805a352:	4804      	ldr	r0, [pc, #16]	@ (805a364 <min_tx_space+0x1c>)
 805a354:	f7e8 fc28 	bl	8042ba8 <UART_DMA_Driver_TXNumFreeSlots>
 805a358:	4603      	mov	r3, r0
/*
 * Since the implementation uses UART TX in Blocking/IRQ mode, we assume that
 * the buffer always has enough space, so this function returns a constant value.
 */
}
 805a35a:	4618      	mov	r0, r3
 805a35c:	3708      	adds	r7, #8
 805a35e:	46bd      	mov	sp, r7
 805a360:	bd80      	pop	{r7, pc}
 805a362:	bf00      	nop
 805a364:	40007800 	.word	0x40007800

0805a368 <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte)
{
 805a368:	b580      	push	{r7, lr}
 805a36a:	b082      	sub	sp, #8
 805a36c:	af00      	add	r7, sp, #0
 805a36e:	4603      	mov	r3, r0
 805a370:	460a      	mov	r2, r1
 805a372:	71fb      	strb	r3, [r7, #7]
 805a374:	4613      	mov	r3, r2
 805a376:	71bb      	strb	r3, [r7, #6]
    if (port == EXP_PORT)
 805a378:	79fb      	ldrb	r3, [r7, #7]
 805a37a:	2b00      	cmp	r3, #0
 805a37c:	d104      	bne.n	805a388 <min_tx_byte+0x20>
    {
    	UART_Driver_Write(UART_EXP, byte);
 805a37e:	79bb      	ldrb	r3, [r7, #6]
 805a380:	4619      	mov	r1, r3
 805a382:	4803      	ldr	r0, [pc, #12]	@ (805a390 <min_tx_byte+0x28>)
 805a384:	f7e8 fa9e 	bl	80428c4 <UART_Driver_Write>
#ifdef TEST_DEMO_MIN
        HAL_UART_Transmit(&huart6, &byte, 1, 10);
#endif
    }
}
 805a388:	bf00      	nop
 805a38a:	3708      	adds	r7, #8
 805a38c:	46bd      	mov	sp, r7
 805a38e:	bd80      	pop	{r7, pc}
 805a390:	40007800 	.word	0x40007800

0805a394 <min_tx_start>:
 * This function is called before sending data. It can be used to
 * perform actions such as disabling TX interrupts or preparing
 * the hardware for transmission.
 */
void min_tx_start(uint8_t port)
{
 805a394:	b480      	push	{r7}
 805a396:	b083      	sub	sp, #12
 805a398:	af00      	add	r7, sp, #0
 805a39a:	4603      	mov	r3, r0
 805a39c:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Disable TX interrupt if needed (not required in this case)
}
 805a39e:	bf00      	nop
 805a3a0:	370c      	adds	r7, #12
 805a3a2:	46bd      	mov	sp, r7
 805a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805a3a8:	4770      	bx	lr

0805a3aa <min_tx_finished>:
 * This function is called when data transmission is finished.
 * It can be used to restore the previous state if any changes
 * were made in `min_tx_start()`.
 */
void min_tx_finished(uint8_t port)
{
 805a3aa:	b480      	push	{r7}
 805a3ac:	b083      	sub	sp, #12
 805a3ae:	af00      	add	r7, sp, #0
 805a3b0:	4603      	mov	r3, r0
 805a3b2:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Restore TX interrupt state if modified earlier
}
 805a3b4:	bf00      	nop
 805a3b6:	370c      	adds	r7, #12
 805a3b8:	46bd      	mov	sp, r7
 805a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 805a3be:	4770      	bx	lr

0805a3c0 <min_time_ms>:
 * a timestamp for timeout handling and scheduling.
 *
 * @return uint32_t The current system time in milliseconds.
 */
uint32_t min_time_ms(void)
{
 805a3c0:	b580      	push	{r7, lr}
 805a3c2:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // Uses HAL function to get system uptime
 805a3c4:	f006 f862 	bl	806048c <HAL_GetTick>
 805a3c8:	4603      	mov	r3, r0
}
 805a3ca:	4618      	mov	r0, r3
 805a3cc:	bd80      	pop	{r7, pc}
	...

0805a3d0 <MIN_Context_Init>:

void MIN_Context_Init(MIN_Context_t *ctx, uint8_t port) {
 805a3d0:	b580      	push	{r7, lr}
 805a3d2:	b082      	sub	sp, #8
 805a3d4:	af00      	add	r7, sp, #0
 805a3d6:	6078      	str	r0, [r7, #4]
 805a3d8:	460b      	mov	r3, r1
 805a3da:	70fb      	strb	r3, [r7, #3]
    min_init_context(&ctx->min_ctx, port);
 805a3dc:	687b      	ldr	r3, [r7, #4]
 805a3de:	78fa      	ldrb	r2, [r7, #3]
 805a3e0:	4611      	mov	r1, r2
 805a3e2:	4618      	mov	r0, r3
 805a3e4:	f7ff ff7e 	bl	805a2e4 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 805a3e8:	687b      	ldr	r3, [r7, #4]
 805a3ea:	2101      	movs	r1, #1
 805a3ec:	4618      	mov	r0, r3
 805a3ee:	f7ff fc1b 	bl	8059c28 <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 805a3f2:	f7ff ffe5 	bl	805a3c0 <min_time_ms>
 805a3f6:	4602      	mov	r2, r0
 805a3f8:	687b      	ldr	r3, [r7, #4]
 805a3fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 805a3fe:	687b      	ldr	r3, [r7, #4]
 805a400:	2200      	movs	r2, #0
 805a402:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
    ctx->auto_reinit = true;
 805a406:	687b      	ldr	r3, [r7, #4]
 805a408:	2201      	movs	r2, #1
 805a40a:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
#endif
    if (port < MAX_MIN_CONTEXTS) {
 805a40e:	78fb      	ldrb	r3, [r7, #3]
 805a410:	2b03      	cmp	r3, #3
 805a412:	d804      	bhi.n	805a41e <MIN_Context_Init+0x4e>
        registered_contexts[port] = ctx;
 805a414:	78fb      	ldrb	r3, [r7, #3]
 805a416:	4904      	ldr	r1, [pc, #16]	@ (805a428 <MIN_Context_Init+0x58>)
 805a418:	687a      	ldr	r2, [r7, #4]
 805a41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 805a41e:	bf00      	nop
 805a420:	3708      	adds	r7, #8
 805a422:	46bd      	mov	sp, r7
 805a424:	bd80      	pop	{r7, pc}
 805a426:	bf00      	nop
 805a428:	2406e514 	.word	0x2406e514

0805a42c <MIN_ReInit>:

void MIN_ReInit(MIN_Context_t *ctx) {
 805a42c:	b580      	push	{r7, lr}
 805a42e:	b082      	sub	sp, #8
 805a430:	af00      	add	r7, sp, #0
 805a432:	6078      	str	r0, [r7, #4]
    min_init_context(&ctx->min_ctx, ctx->min_ctx.port);
 805a434:	687a      	ldr	r2, [r7, #4]
 805a436:	687b      	ldr	r3, [r7, #4]
 805a438:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 805a43c:	4619      	mov	r1, r3
 805a43e:	4610      	mov	r0, r2
 805a440:	f7ff ff50 	bl	805a2e4 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 805a444:	687b      	ldr	r3, [r7, #4]
 805a446:	2101      	movs	r1, #1
 805a448:	4618      	mov	r0, r3
 805a44a:	f7ff fbed 	bl	8059c28 <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 805a44e:	f7ff ffb7 	bl	805a3c0 <min_time_ms>
 805a452:	4602      	mov	r2, r0
 805a454:	687b      	ldr	r3, [r7, #4]
 805a456:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 805a45a:	687b      	ldr	r3, [r7, #4]
 805a45c:	2200      	movs	r2, #0
 805a45e:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
}
 805a462:	bf00      	nop
 805a464:	3708      	adds	r7, #8
 805a466:	46bd      	mov	sp, r7
 805a468:	bd80      	pop	{r7, pc}

0805a46a <MIN_RegisterTimeoutCallback>:

void MIN_RegisterTimeoutCallback(MIN_Context_t *ctx, void (*callback)(MIN_Context_t *ctx)) {
 805a46a:	b480      	push	{r7}
 805a46c:	b083      	sub	sp, #12
 805a46e:	af00      	add	r7, sp, #0
 805a470:	6078      	str	r0, [r7, #4]
 805a472:	6039      	str	r1, [r7, #0]
    ctx->timeout_callback = callback;
 805a474:	687b      	ldr	r3, [r7, #4]
 805a476:	683a      	ldr	r2, [r7, #0]
 805a478:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 805a47c:	bf00      	nop
 805a47e:	370c      	adds	r7, #12
 805a480:	46bd      	mov	sp, r7
 805a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 805a486:	4770      	bx	lr

0805a488 <MIN_App_Poll>:

void MIN_App_Poll(MIN_Context_t *ctx, const uint8_t *rx_data, uint32_t rx_len) {
 805a488:	b580      	push	{r7, lr}
 805a48a:	b086      	sub	sp, #24
 805a48c:	af00      	add	r7, sp, #0
 805a48e:	60f8      	str	r0, [r7, #12]
 805a490:	60b9      	str	r1, [r7, #8]
 805a492:	607a      	str	r2, [r7, #4]
    min_poll(&ctx->min_ctx, rx_data, rx_len);
 805a494:	68fb      	ldr	r3, [r7, #12]
 805a496:	687a      	ldr	r2, [r7, #4]
 805a498:	68b9      	ldr	r1, [r7, #8]
 805a49a:	4618      	mov	r0, r3
 805a49c:	f7ff fe7c 	bl	805a198 <min_poll>
    uint32_t now = min_time_ms();
 805a4a0:	f7ff ff8e 	bl	805a3c0 <min_time_ms>
 805a4a4:	6178      	str	r0, [r7, #20]
    if (ctx->min_ctx.transport_fifo.n_frames > 0) {
 805a4a6:	68fb      	ldr	r3, [r7, #12]
 805a4a8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 805a4ac:	2b00      	cmp	r3, #0
 805a4ae:	d035      	beq.n	805a51c <MIN_App_Poll+0x94>
        struct transport_frame *oldest = &ctx->min_ctx.transport_fifo.frames[ctx->min_ctx.transport_fifo.head_idx];
 805a4b0:	68fb      	ldr	r3, [r7, #12]
 805a4b2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 805a4b6:	461a      	mov	r2, r3
 805a4b8:	4613      	mov	r3, r2
 805a4ba:	005b      	lsls	r3, r3, #1
 805a4bc:	4413      	add	r3, r2
 805a4be:	009b      	lsls	r3, r3, #2
 805a4c0:	68fa      	ldr	r2, [r7, #12]
 805a4c2:	4413      	add	r3, r2
 805a4c4:	613b      	str	r3, [r7, #16]
        if ((now - oldest->last_sent_time_ms) > MIN_FRAME_TIMEOUT_MS) {
 805a4c6:	693b      	ldr	r3, [r7, #16]
 805a4c8:	681b      	ldr	r3, [r3, #0]
 805a4ca:	697a      	ldr	r2, [r7, #20]
 805a4cc:	1ad3      	subs	r3, r2, r3
 805a4ce:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 805a4d2:	4293      	cmp	r3, r2
 805a4d4:	d91e      	bls.n	805a514 <MIN_App_Poll+0x8c>
            if (!ctx->timeout_triggered) {
 805a4d6:	68fb      	ldr	r3, [r7, #12]
 805a4d8:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 805a4dc:	f083 0301 	eor.w	r3, r3, #1
 805a4e0:	b2db      	uxtb	r3, r3
 805a4e2:	2b00      	cmp	r3, #0
 805a4e4:	d01a      	beq.n	805a51c <MIN_App_Poll+0x94>
                if (ctx->timeout_callback) {
 805a4e6:	68fb      	ldr	r3, [r7, #12]
 805a4e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 805a4ec:	2b00      	cmp	r3, #0
 805a4ee:	d004      	beq.n	805a4fa <MIN_App_Poll+0x72>
                    ctx->timeout_callback(ctx);
 805a4f0:	68fb      	ldr	r3, [r7, #12]
 805a4f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 805a4f6:	68f8      	ldr	r0, [r7, #12]
 805a4f8:	4798      	blx	r3
                }
                ctx->timeout_triggered = true;
 805a4fa:	68fb      	ldr	r3, [r7, #12]
 805a4fc:	2201      	movs	r2, #1
 805a4fe:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
                if (ctx->auto_reinit) {
 805a502:	68fb      	ldr	r3, [r7, #12]
 805a504:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 805a508:	2b00      	cmp	r3, #0
 805a50a:	d007      	beq.n	805a51c <MIN_App_Poll+0x94>
                    MIN_ReInit(ctx);
 805a50c:	68f8      	ldr	r0, [r7, #12]
 805a50e:	f7ff ff8d 	bl	805a42c <MIN_ReInit>
 805a512:	e003      	b.n	805a51c <MIN_App_Poll+0x94>
                }
#endif
            }
        } else {
            ctx->timeout_triggered = false;
 805a514:	68fb      	ldr	r3, [r7, #12]
 805a516:	2200      	movs	r2, #0
 805a518:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
        }
    }
    ctx->last_poll_time = now;
 805a51c:	68fb      	ldr	r3, [r7, #12]
 805a51e:	697a      	ldr	r2, [r7, #20]
 805a520:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 805a524:	bf00      	nop
 805a526:	3718      	adds	r7, #24
 805a528:	46bd      	mov	sp, r7
 805a52a:	bd80      	pop	{r7, pc}

0805a52c <MIN_Send>:
void MIN_Send(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *payload, uint8_t len) {
 805a52c:	b580      	push	{r7, lr}
 805a52e:	b084      	sub	sp, #16
 805a530:	af00      	add	r7, sp, #0
 805a532:	60f8      	str	r0, [r7, #12]
 805a534:	607a      	str	r2, [r7, #4]
 805a536:	461a      	mov	r2, r3
 805a538:	460b      	mov	r3, r1
 805a53a:	72fb      	strb	r3, [r7, #11]
 805a53c:	4613      	mov	r3, r2
 805a53e:	72bb      	strb	r3, [r7, #10]
    if (min_queue_has_space_for_frame(&ctx->min_ctx, len)) {
 805a540:	68fb      	ldr	r3, [r7, #12]
 805a542:	7aba      	ldrb	r2, [r7, #10]
 805a544:	4611      	mov	r1, r2
 805a546:	4618      	mov	r0, r3
 805a548:	f7ff fbca 	bl	8059ce0 <min_queue_has_space_for_frame>
 805a54c:	4603      	mov	r3, r0
 805a54e:	2b00      	cmp	r3, #0
 805a550:	d005      	beq.n	805a55e <MIN_Send+0x32>
        min_queue_frame(&ctx->min_ctx, min_id, payload, len);
 805a552:	68f8      	ldr	r0, [r7, #12]
 805a554:	7abb      	ldrb	r3, [r7, #10]
 805a556:	7af9      	ldrb	r1, [r7, #11]
 805a558:	687a      	ldr	r2, [r7, #4]
 805a55a:	f7ff fb79 	bl	8059c50 <min_queue_frame>
    }
}
 805a55e:	bf00      	nop
 805a560:	3710      	adds	r7, #16
 805a562:	46bd      	mov	sp, r7
 805a564:	bd80      	pop	{r7, pc}
	...

0805a568 <MIN_RegisterResponseHandler>:
 *       to the appropriate handlers based on `min_id`.
 */

static MIN_ResponseHandler response_handler = NULL;

void MIN_RegisterResponseHandler(MIN_ResponseHandler handler) {
 805a568:	b480      	push	{r7}
 805a56a:	b083      	sub	sp, #12
 805a56c:	af00      	add	r7, sp, #0
 805a56e:	6078      	str	r0, [r7, #4]
    response_handler = handler;
 805a570:	4a04      	ldr	r2, [pc, #16]	@ (805a584 <MIN_RegisterResponseHandler+0x1c>)
 805a572:	687b      	ldr	r3, [r7, #4]
 805a574:	6013      	str	r3, [r2, #0]
}
 805a576:	bf00      	nop
 805a578:	370c      	adds	r7, #12
 805a57a:	46bd      	mov	sp, r7
 805a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805a580:	4770      	bx	lr
 805a582:	bf00      	nop
 805a584:	2406e524 	.word	0x2406e524

0805a588 <min_application_handler>:

void min_application_handler(uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload, uint8_t port) {
 805a588:	b580      	push	{r7, lr}
 805a58a:	b086      	sub	sp, #24
 805a58c:	af00      	add	r7, sp, #0
 805a58e:	6039      	str	r1, [r7, #0]
 805a590:	4611      	mov	r1, r2
 805a592:	461a      	mov	r2, r3
 805a594:	4603      	mov	r3, r0
 805a596:	71fb      	strb	r3, [r7, #7]
 805a598:	460b      	mov	r3, r1
 805a59a:	71bb      	strb	r3, [r7, #6]
 805a59c:	4613      	mov	r3, r2
 805a59e:	717b      	strb	r3, [r7, #5]
    if (port >= MAX_MIN_CONTEXTS) {
 805a5a0:	797b      	ldrb	r3, [r7, #5]
 805a5a2:	2b03      	cmp	r3, #3
 805a5a4:	d834      	bhi.n	805a610 <min_application_handler+0x88>
        return;
    }
    MIN_Context_t *ctx = registered_contexts[port];
 805a5a6:	797b      	ldrb	r3, [r7, #5]
 805a5a8:	4a1c      	ldr	r2, [pc, #112]	@ (805a61c <min_application_handler+0x94>)
 805a5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 805a5ae:	613b      	str	r3, [r7, #16]
    if (ctx == NULL) {
 805a5b0:	693b      	ldr	r3, [r7, #16]
 805a5b2:	2b00      	cmp	r3, #0
 805a5b4:	d02e      	beq.n	805a614 <min_application_handler+0x8c>
        return;
    }

    if (response_handler != NULL) {
 805a5b6:	4b1a      	ldr	r3, [pc, #104]	@ (805a620 <min_application_handler+0x98>)
 805a5b8:	681b      	ldr	r3, [r3, #0]
 805a5ba:	2b00      	cmp	r3, #0
 805a5bc:	d005      	beq.n	805a5ca <min_application_handler+0x42>
            response_handler(min_id, min_payload, len_payload);
 805a5be:	4b18      	ldr	r3, [pc, #96]	@ (805a620 <min_application_handler+0x98>)
 805a5c0:	681b      	ldr	r3, [r3, #0]
 805a5c2:	79ba      	ldrb	r2, [r7, #6]
 805a5c4:	79f8      	ldrb	r0, [r7, #7]
 805a5c6:	6839      	ldr	r1, [r7, #0]
 805a5c8:	4798      	blx	r3
    }

    const MIN_Command_t *command_table = MIN_GetCommandTable();
 805a5ca:	f002 f8df 	bl	805c78c <MIN_GetCommandTable>
 805a5ce:	60f8      	str	r0, [r7, #12]
    int table_size = MIN_GetCommandTableSize();
 805a5d0:	f002 f8e6 	bl	805c7a0 <MIN_GetCommandTableSize>
 805a5d4:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i < table_size; i++) {
 805a5d6:	2300      	movs	r3, #0
 805a5d8:	617b      	str	r3, [r7, #20]
 805a5da:	e014      	b.n	805a606 <min_application_handler+0x7e>
        if (command_table[i].id == min_id) {
 805a5dc:	697b      	ldr	r3, [r7, #20]
 805a5de:	00db      	lsls	r3, r3, #3
 805a5e0:	68fa      	ldr	r2, [r7, #12]
 805a5e2:	4413      	add	r3, r2
 805a5e4:	781b      	ldrb	r3, [r3, #0]
 805a5e6:	79fa      	ldrb	r2, [r7, #7]
 805a5e8:	429a      	cmp	r2, r3
 805a5ea:	d109      	bne.n	805a600 <min_application_handler+0x78>
            command_table[i].handler(ctx, min_payload, len_payload);
 805a5ec:	697b      	ldr	r3, [r7, #20]
 805a5ee:	00db      	lsls	r3, r3, #3
 805a5f0:	68fa      	ldr	r2, [r7, #12]
 805a5f2:	4413      	add	r3, r2
 805a5f4:	685b      	ldr	r3, [r3, #4]
 805a5f6:	79ba      	ldrb	r2, [r7, #6]
 805a5f8:	6839      	ldr	r1, [r7, #0]
 805a5fa:	6938      	ldr	r0, [r7, #16]
 805a5fc:	4798      	blx	r3
            return;
 805a5fe:	e00a      	b.n	805a616 <min_application_handler+0x8e>
    for (int i = 0; i < table_size; i++) {
 805a600:	697b      	ldr	r3, [r7, #20]
 805a602:	3301      	adds	r3, #1
 805a604:	617b      	str	r3, [r7, #20]
 805a606:	697a      	ldr	r2, [r7, #20]
 805a608:	68bb      	ldr	r3, [r7, #8]
 805a60a:	429a      	cmp	r2, r3
 805a60c:	dbe6      	blt.n	805a5dc <min_application_handler+0x54>
 805a60e:	e002      	b.n	805a616 <min_application_handler+0x8e>
        return;
 805a610:	bf00      	nop
 805a612:	e000      	b.n	805a616 <min_application_handler+0x8e>
        return;
 805a614:	bf00      	nop
        }
    }
    // Optional: Add default handler for unmatched commands
}
 805a616:	3718      	adds	r7, #24
 805a618:	46bd      	mov	sp, r7
 805a61a:	bd80      	pop	{r7, pc}
 805a61c:	2406e514 	.word	0x2406e514
 805a620:	2406e524 	.word	0x2406e524

0805a624 <MIN_Handler_Init>:
static SemaphoreHandle_t g_response_data_semaphore;

// =================================================================
// Command Handlers
// =================================================================
void MIN_Handler_Init(void){
 805a624:	b580      	push	{r7, lr}
 805a626:	af00      	add	r7, sp, #0
    g_response_data_semaphore = xSemaphoreCreateBinary();
 805a628:	2203      	movs	r2, #3
 805a62a:	2100      	movs	r1, #0
 805a62c:	2001      	movs	r0, #1
 805a62e:	f7fa fd84 	bl	805513a <xQueueGenericCreate>
 805a632:	4603      	mov	r3, r0
 805a634:	4a04      	ldr	r2, [pc, #16]	@ (805a648 <MIN_Handler_Init+0x24>)
 805a636:	6013      	str	r3, [r2, #0]
    memset(&g_last_response_data, 0, sizeof(MIN_ResponseData_t));
 805a638:	f44f 7281 	mov.w	r2, #258	@ 0x102
 805a63c:	2100      	movs	r1, #0
 805a63e:	4803      	ldr	r0, [pc, #12]	@ (805a64c <MIN_Handler_Init+0x28>)
 805a640:	f00f f8d0 	bl	80697e4 <memset>
}
 805a644:	bf00      	nop
 805a646:	bd80      	pop	{r7, pc}
 805a648:	2406e62c 	.word	0x2406e62c
 805a64c:	2406e528 	.word	0x2406e528

0805a650 <MIN_Handler_TEST_CONNECTION_ACK>:
        }
    }
    return false;
}

static void MIN_Handler_TEST_CONNECTION_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805a650:	b580      	push	{r7, lr}
 805a652:	b0c6      	sub	sp, #280	@ 0x118
 805a654:	af00      	add	r7, sp, #0
 805a656:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a65a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805a65e:	6018      	str	r0, [r3, #0]
 805a660:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a664:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a668:	6019      	str	r1, [r3, #0]
 805a66a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a66e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a672:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805a674:	2300      	movs	r3, #0
 805a676:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload TEST_CONNECTION_ACK (%u bytes):", len);
 805a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a67e:	f107 0210 	add.w	r2, r7, #16
 805a682:	18d0      	adds	r0, r2, r3
 805a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a688:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a68c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a690:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a694:	781b      	ldrb	r3, [r3, #0]
 805a696:	4a41      	ldr	r2, [pc, #260]	@ (805a79c <MIN_Handler_TEST_CONNECTION_ACK+0x14c>)
 805a698:	f00e ffa2 	bl	80695e0 <sniprintf>
 805a69c:	4602      	mov	r2, r0
 805a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a6a2:	4413      	add	r3, r2
 805a6a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a6a8:	2300      	movs	r3, #0
 805a6aa:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a6ae:	e01f      	b.n	805a6f0 <MIN_Handler_TEST_CONNECTION_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a6b4:	f107 0210 	add.w	r2, r7, #16
 805a6b8:	18d0      	adds	r0, r2, r3
 805a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a6be:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a6c2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a6c6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805a6ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805a6ce:	6812      	ldr	r2, [r2, #0]
 805a6d0:	4413      	add	r3, r2
 805a6d2:	781b      	ldrb	r3, [r3, #0]
 805a6d4:	4a32      	ldr	r2, [pc, #200]	@ (805a7a0 <MIN_Handler_TEST_CONNECTION_ACK+0x150>)
 805a6d6:	f00e ff83 	bl	80695e0 <sniprintf>
 805a6da:	4602      	mov	r2, r0
 805a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a6e0:	4413      	add	r3, r2
 805a6e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a6e6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a6ea:	3301      	adds	r3, #1
 805a6ec:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a6f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a6f4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a6f8:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805a6fc:	781b      	ldrb	r3, [r3, #0]
 805a6fe:	429a      	cmp	r2, r3
 805a700:	d203      	bcs.n	805a70a <MIN_Handler_TEST_CONNECTION_ACK+0xba>
 805a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a706:	2bfb      	cmp	r3, #251	@ 0xfb
 805a708:	d9d2      	bls.n	805a6b0 <MIN_Handler_TEST_CONNECTION_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a70e:	f107 0210 	add.w	r2, r7, #16
 805a712:	18d0      	adds	r0, r2, r3
 805a714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a718:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805a71c:	4a21      	ldr	r2, [pc, #132]	@ (805a7a4 <MIN_Handler_TEST_CONNECTION_ACK+0x154>)
 805a71e:	4619      	mov	r1, r3
 805a720:	f00e ff5e 	bl	80695e0 <sniprintf>
    printf(buffer);
 805a724:	f107 0310 	add.w	r3, r7, #16
 805a728:	4618      	mov	r0, r3
 805a72a:	f00e ff47 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805a72e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a732:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a736:	f107 0010 	add.w	r0, r7, #16
 805a73a:	681b      	ldr	r3, [r3, #0]
 805a73c:	4a1a      	ldr	r2, [pc, #104]	@ (805a7a8 <MIN_Handler_TEST_CONNECTION_ACK+0x158>)
 805a73e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805a742:	f00e ff4d 	bl	80695e0 <sniprintf>
    printf(buffer);
 805a746:	f107 0310 	add.w	r3, r7, #16
 805a74a:	4618      	mov	r0, r3
 805a74c:	f00e ff36 	bl	80695bc <iprintf>

    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805a750:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a754:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a758:	781a      	ldrb	r2, [r3, #0]
 805a75a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a75e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a762:	6819      	ldr	r1, [r3, #0]
 805a764:	4811      	ldr	r0, [pc, #68]	@ (805a7ac <MIN_Handler_TEST_CONNECTION_ACK+0x15c>)
 805a766:	f00f f8e8 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805a76a:	4a10      	ldr	r2, [pc, #64]	@ (805a7ac <MIN_Handler_TEST_CONNECTION_ACK+0x15c>)
 805a76c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a770:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a774:	781b      	ldrb	r3, [r3, #0]
 805a776:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805a77a:	4b0c      	ldr	r3, [pc, #48]	@ (805a7ac <MIN_Handler_TEST_CONNECTION_ACK+0x15c>)
 805a77c:	2201      	movs	r2, #1
 805a77e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805a782:	4b0b      	ldr	r3, [pc, #44]	@ (805a7b0 <MIN_Handler_TEST_CONNECTION_ACK+0x160>)
 805a784:	6818      	ldr	r0, [r3, #0]
 805a786:	2300      	movs	r3, #0
 805a788:	2200      	movs	r2, #0
 805a78a:	2100      	movs	r1, #0
 805a78c:	f7fa fd80 	bl	8055290 <xQueueGenericSend>
    }
}
 805a790:	bf00      	nop
 805a792:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805a796:	46bd      	mov	sp, r7
 805a798:	bd80      	pop	{r7, pc}
 805a79a:	bf00      	nop
 805a79c:	08070fd8 	.word	0x08070fd8
 805a7a0:	08071000 	.word	0x08071000
 805a7a4:	08071008 	.word	0x08071008
 805a7a8:	0807100c 	.word	0x0807100c
 805a7ac:	2406e528 	.word	0x2406e528
 805a7b0:	2406e62c 	.word	0x2406e62c

0805a7b4 <MIN_Handler_SET_TEMP_PROFILE_ACK>:

static void MIN_Handler_SET_TEMP_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805a7b4:	b580      	push	{r7, lr}
 805a7b6:	b0c6      	sub	sp, #280	@ 0x118
 805a7b8:	af00      	add	r7, sp, #0
 805a7ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a7be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805a7c2:	6018      	str	r0, [r3, #0]
 805a7c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a7c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a7cc:	6019      	str	r1, [r3, #0]
 805a7ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a7d2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a7d6:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805a7d8:	2300      	movs	r3, #0
 805a7da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_TEMP_PROFILE_ACK (%u bytes):", len);
 805a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a7e2:	f107 0210 	add.w	r2, r7, #16
 805a7e6:	18d0      	adds	r0, r2, r3
 805a7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a7ec:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a7f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a7f4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a7f8:	781b      	ldrb	r3, [r3, #0]
 805a7fa:	4a41      	ldr	r2, [pc, #260]	@ (805a900 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x14c>)
 805a7fc:	f00e fef0 	bl	80695e0 <sniprintf>
 805a800:	4602      	mov	r2, r0
 805a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a806:	4413      	add	r3, r2
 805a808:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a80c:	2300      	movs	r3, #0
 805a80e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a812:	e01f      	b.n	805a854 <MIN_Handler_SET_TEMP_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805a814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a818:	f107 0210 	add.w	r2, r7, #16
 805a81c:	18d0      	adds	r0, r2, r3
 805a81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a822:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a826:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a82a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805a82e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805a832:	6812      	ldr	r2, [r2, #0]
 805a834:	4413      	add	r3, r2
 805a836:	781b      	ldrb	r3, [r3, #0]
 805a838:	4a32      	ldr	r2, [pc, #200]	@ (805a904 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x150>)
 805a83a:	f00e fed1 	bl	80695e0 <sniprintf>
 805a83e:	4602      	mov	r2, r0
 805a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a844:	4413      	add	r3, r2
 805a846:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a84a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a84e:	3301      	adds	r3, #1
 805a850:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a854:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a858:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a85c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805a860:	781b      	ldrb	r3, [r3, #0]
 805a862:	429a      	cmp	r2, r3
 805a864:	d203      	bcs.n	805a86e <MIN_Handler_SET_TEMP_PROFILE_ACK+0xba>
 805a866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a86a:	2bfb      	cmp	r3, #251	@ 0xfb
 805a86c:	d9d2      	bls.n	805a814 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a872:	f107 0210 	add.w	r2, r7, #16
 805a876:	18d0      	adds	r0, r2, r3
 805a878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a87c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805a880:	4a21      	ldr	r2, [pc, #132]	@ (805a908 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x154>)
 805a882:	4619      	mov	r1, r3
 805a884:	f00e feac 	bl	80695e0 <sniprintf>
    printf(buffer);
 805a888:	f107 0310 	add.w	r3, r7, #16
 805a88c:	4618      	mov	r0, r3
 805a88e:	f00e fe95 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805a892:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a896:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a89a:	f107 0010 	add.w	r0, r7, #16
 805a89e:	681b      	ldr	r3, [r3, #0]
 805a8a0:	4a1a      	ldr	r2, [pc, #104]	@ (805a90c <MIN_Handler_SET_TEMP_PROFILE_ACK+0x158>)
 805a8a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805a8a6:	f00e fe9b 	bl	80695e0 <sniprintf>
    printf(buffer);
 805a8aa:	f107 0310 	add.w	r3, r7, #16
 805a8ae:	4618      	mov	r0, r3
 805a8b0:	f00e fe84 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805a8b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a8b8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a8bc:	781a      	ldrb	r2, [r3, #0]
 805a8be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a8c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a8c6:	6819      	ldr	r1, [r3, #0]
 805a8c8:	4811      	ldr	r0, [pc, #68]	@ (805a910 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x15c>)
 805a8ca:	f00f f836 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805a8ce:	4a10      	ldr	r2, [pc, #64]	@ (805a910 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x15c>)
 805a8d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a8d4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a8d8:	781b      	ldrb	r3, [r3, #0]
 805a8da:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805a8de:	4b0c      	ldr	r3, [pc, #48]	@ (805a910 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x15c>)
 805a8e0:	2201      	movs	r2, #1
 805a8e2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805a8e6:	4b0b      	ldr	r3, [pc, #44]	@ (805a914 <MIN_Handler_SET_TEMP_PROFILE_ACK+0x160>)
 805a8e8:	6818      	ldr	r0, [r3, #0]
 805a8ea:	2300      	movs	r3, #0
 805a8ec:	2200      	movs	r2, #0
 805a8ee:	2100      	movs	r1, #0
 805a8f0:	f7fa fcce 	bl	8055290 <xQueueGenericSend>
    }

}
 805a8f4:	bf00      	nop
 805a8f6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805a8fa:	46bd      	mov	sp, r7
 805a8fc:	bd80      	pop	{r7, pc}
 805a8fe:	bf00      	nop
 805a900:	0807101c 	.word	0x0807101c
 805a904:	08071000 	.word	0x08071000
 805a908:	08071008 	.word	0x08071008
 805a90c:	0807100c 	.word	0x0807100c
 805a910:	2406e528 	.word	0x2406e528
 805a914:	2406e62c 	.word	0x2406e62c

0805a918 <MIN_Handler_START_TEMP_PROFILE_ACK>:

static void MIN_Handler_START_TEMP_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805a918:	b580      	push	{r7, lr}
 805a91a:	b0c6      	sub	sp, #280	@ 0x118
 805a91c:	af00      	add	r7, sp, #0
 805a91e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a922:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805a926:	6018      	str	r0, [r3, #0]
 805a928:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a92c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805a930:	6019      	str	r1, [r3, #0]
 805a932:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a936:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a93a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805a93c:	2300      	movs	r3, #0
 805a93e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload START_TEMP_PROFILE_ACK (%u bytes):", len);
 805a942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a946:	f107 0210 	add.w	r2, r7, #16
 805a94a:	18d0      	adds	r0, r2, r3
 805a94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a950:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a954:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a958:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a95c:	781b      	ldrb	r3, [r3, #0]
 805a95e:	4a42      	ldr	r2, [pc, #264]	@ (805aa68 <MIN_Handler_START_TEMP_PROFILE_ACK+0x150>)
 805a960:	f00e fe3e 	bl	80695e0 <sniprintf>
 805a964:	4602      	mov	r2, r0
 805a966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a96a:	4413      	add	r3, r2
 805a96c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a970:	2300      	movs	r3, #0
 805a972:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a976:	e01f      	b.n	805a9b8 <MIN_Handler_START_TEMP_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a97c:	f107 0210 	add.w	r2, r7, #16
 805a980:	18d0      	adds	r0, r2, r3
 805a982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a986:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805a98a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a98e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805a992:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805a996:	6812      	ldr	r2, [r2, #0]
 805a998:	4413      	add	r3, r2
 805a99a:	781b      	ldrb	r3, [r3, #0]
 805a99c:	4a33      	ldr	r2, [pc, #204]	@ (805aa6c <MIN_Handler_START_TEMP_PROFILE_ACK+0x154>)
 805a99e:	f00e fe1f 	bl	80695e0 <sniprintf>
 805a9a2:	4602      	mov	r2, r0
 805a9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a9a8:	4413      	add	r3, r2
 805a9aa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805a9ae:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805a9b2:	3301      	adds	r3, #1
 805a9b4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805a9b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a9bc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805a9c0:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805a9c4:	781b      	ldrb	r3, [r3, #0]
 805a9c6:	429a      	cmp	r2, r3
 805a9c8:	d203      	bcs.n	805a9d2 <MIN_Handler_START_TEMP_PROFILE_ACK+0xba>
 805a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a9ce:	2bfb      	cmp	r3, #251	@ 0xfb
 805a9d0:	d9d2      	bls.n	805a978 <MIN_Handler_START_TEMP_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a9d6:	f107 0210 	add.w	r2, r7, #16
 805a9da:	18d0      	adds	r0, r2, r3
 805a9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805a9e0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805a9e4:	4a22      	ldr	r2, [pc, #136]	@ (805aa70 <MIN_Handler_START_TEMP_PROFILE_ACK+0x158>)
 805a9e6:	4619      	mov	r1, r3
 805a9e8:	f00e fdfa 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805a9ec:	f107 0310 	add.w	r3, r7, #16
 805a9f0:	4619      	mov	r1, r3
 805a9f2:	4820      	ldr	r0, [pc, #128]	@ (805aa74 <MIN_Handler_START_TEMP_PROFILE_ACK+0x15c>)
 805a9f4:	f00e fde2 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805a9f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805a9fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805aa00:	f107 0010 	add.w	r0, r7, #16
 805aa04:	681b      	ldr	r3, [r3, #0]
 805aa06:	4a1c      	ldr	r2, [pc, #112]	@ (805aa78 <MIN_Handler_START_TEMP_PROFILE_ACK+0x160>)
 805aa08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805aa0c:	f00e fde8 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805aa10:	f107 0310 	add.w	r3, r7, #16
 805aa14:	4619      	mov	r1, r3
 805aa16:	4817      	ldr	r0, [pc, #92]	@ (805aa74 <MIN_Handler_START_TEMP_PROFILE_ACK+0x15c>)
 805aa18:	f00e fdd0 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805aa1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aa20:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aa24:	781a      	ldrb	r2, [r3, #0]
 805aa26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aa2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805aa2e:	6819      	ldr	r1, [r3, #0]
 805aa30:	4812      	ldr	r0, [pc, #72]	@ (805aa7c <MIN_Handler_START_TEMP_PROFILE_ACK+0x164>)
 805aa32:	f00e ff82 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805aa36:	4a11      	ldr	r2, [pc, #68]	@ (805aa7c <MIN_Handler_START_TEMP_PROFILE_ACK+0x164>)
 805aa38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aa3c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aa40:	781b      	ldrb	r3, [r3, #0]
 805aa42:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805aa46:	4b0d      	ldr	r3, [pc, #52]	@ (805aa7c <MIN_Handler_START_TEMP_PROFILE_ACK+0x164>)
 805aa48:	2201      	movs	r2, #1
 805aa4a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805aa4e:	4b0c      	ldr	r3, [pc, #48]	@ (805aa80 <MIN_Handler_START_TEMP_PROFILE_ACK+0x168>)
 805aa50:	6818      	ldr	r0, [r3, #0]
 805aa52:	2300      	movs	r3, #0
 805aa54:	2200      	movs	r2, #0
 805aa56:	2100      	movs	r1, #0
 805aa58:	f7fa fc1a 	bl	8055290 <xQueueGenericSend>
    }
}
 805aa5c:	bf00      	nop
 805aa5e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805aa62:	46bd      	mov	sp, r7
 805aa64:	bd80      	pop	{r7, pc}
 805aa66:	bf00      	nop
 805aa68:	08071048 	.word	0x08071048
 805aa6c:	08071000 	.word	0x08071000
 805aa70:	08071008 	.word	0x08071008
 805aa74:	08071074 	.word	0x08071074
 805aa78:	0807100c 	.word	0x0807100c
 805aa7c:	2406e528 	.word	0x2406e528
 805aa80:	2406e62c 	.word	0x2406e62c

0805aa84 <MIN_Handler_STOP_TEMP_PROFILE_ACK>:

static void MIN_Handler_STOP_TEMP_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805aa84:	b580      	push	{r7, lr}
 805aa86:	b0c6      	sub	sp, #280	@ 0x118
 805aa88:	af00      	add	r7, sp, #0
 805aa8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aa8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805aa92:	6018      	str	r0, [r3, #0]
 805aa94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aa98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805aa9c:	6019      	str	r1, [r3, #0]
 805aa9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aaa2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aaa6:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805aaa8:	2300      	movs	r3, #0
 805aaaa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload STOP_TEMP_PROFILE_ACK (%u bytes):", len);
 805aaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aab2:	f107 0210 	add.w	r2, r7, #16
 805aab6:	18d0      	adds	r0, r2, r3
 805aab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aabc:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805aac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aac4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aac8:	781b      	ldrb	r3, [r3, #0]
 805aaca:	4a42      	ldr	r2, [pc, #264]	@ (805abd4 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x150>)
 805aacc:	f00e fd88 	bl	80695e0 <sniprintf>
 805aad0:	4602      	mov	r2, r0
 805aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aad6:	4413      	add	r3, r2
 805aad8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805aadc:	2300      	movs	r3, #0
 805aade:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805aae2:	e01f      	b.n	805ab24 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805aae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aae8:	f107 0210 	add.w	r2, r7, #16
 805aaec:	18d0      	adds	r0, r2, r3
 805aaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aaf2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805aaf6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805aafa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805aafe:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805ab02:	6812      	ldr	r2, [r2, #0]
 805ab04:	4413      	add	r3, r2
 805ab06:	781b      	ldrb	r3, [r3, #0]
 805ab08:	4a33      	ldr	r2, [pc, #204]	@ (805abd8 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x154>)
 805ab0a:	f00e fd69 	bl	80695e0 <sniprintf>
 805ab0e:	4602      	mov	r2, r0
 805ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ab14:	4413      	add	r3, r2
 805ab16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805ab1a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805ab1e:	3301      	adds	r3, #1
 805ab20:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805ab24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ab28:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ab2c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805ab30:	781b      	ldrb	r3, [r3, #0]
 805ab32:	429a      	cmp	r2, r3
 805ab34:	d203      	bcs.n	805ab3e <MIN_Handler_STOP_TEMP_PROFILE_ACK+0xba>
 805ab36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ab3a:	2bfb      	cmp	r3, #251	@ 0xfb
 805ab3c:	d9d2      	bls.n	805aae4 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805ab3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ab42:	f107 0210 	add.w	r2, r7, #16
 805ab46:	18d0      	adds	r0, r2, r3
 805ab48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ab4c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805ab50:	4a22      	ldr	r2, [pc, #136]	@ (805abdc <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x158>)
 805ab52:	4619      	mov	r1, r3
 805ab54:	f00e fd44 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805ab58:	f107 0310 	add.w	r3, r7, #16
 805ab5c:	4619      	mov	r1, r3
 805ab5e:	4820      	ldr	r0, [pc, #128]	@ (805abe0 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x15c>)
 805ab60:	f00e fd2c 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805ab64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ab68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ab6c:	f107 0010 	add.w	r0, r7, #16
 805ab70:	681b      	ldr	r3, [r3, #0]
 805ab72:	4a1c      	ldr	r2, [pc, #112]	@ (805abe4 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x160>)
 805ab74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805ab78:	f00e fd32 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805ab7c:	f107 0310 	add.w	r3, r7, #16
 805ab80:	4619      	mov	r1, r3
 805ab82:	4817      	ldr	r0, [pc, #92]	@ (805abe0 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x15c>)
 805ab84:	f00e fd1a 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805ab88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ab8c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ab90:	781a      	ldrb	r2, [r3, #0]
 805ab92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ab96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ab9a:	6819      	ldr	r1, [r3, #0]
 805ab9c:	4812      	ldr	r0, [pc, #72]	@ (805abe8 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x164>)
 805ab9e:	f00e fecc 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805aba2:	4a11      	ldr	r2, [pc, #68]	@ (805abe8 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x164>)
 805aba4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aba8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805abac:	781b      	ldrb	r3, [r3, #0]
 805abae:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805abb2:	4b0d      	ldr	r3, [pc, #52]	@ (805abe8 <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x164>)
 805abb4:	2201      	movs	r2, #1
 805abb6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805abba:	4b0c      	ldr	r3, [pc, #48]	@ (805abec <MIN_Handler_STOP_TEMP_PROFILE_ACK+0x168>)
 805abbc:	6818      	ldr	r0, [r3, #0]
 805abbe:	2300      	movs	r3, #0
 805abc0:	2200      	movs	r2, #0
 805abc2:	2100      	movs	r1, #0
 805abc4:	f7fa fb64 	bl	8055290 <xQueueGenericSend>
    }
}
 805abc8:	bf00      	nop
 805abca:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805abce:	46bd      	mov	sp, r7
 805abd0:	bd80      	pop	{r7, pc}
 805abd2:	bf00      	nop
 805abd4:	08071078 	.word	0x08071078
 805abd8:	08071000 	.word	0x08071000
 805abdc:	08071008 	.word	0x08071008
 805abe0:	08071074 	.word	0x08071074
 805abe4:	0807100c 	.word	0x0807100c
 805abe8:	2406e528 	.word	0x2406e528
 805abec:	2406e62c 	.word	0x2406e62c

0805abf0 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK>:

static void MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805abf0:	b580      	push	{r7, lr}
 805abf2:	b0c6      	sub	sp, #280	@ 0x118
 805abf4:	af00      	add	r7, sp, #0
 805abf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805abfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805abfe:	6018      	str	r0, [r3, #0]
 805ac00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ac04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ac08:	6019      	str	r1, [r3, #0]
 805ac0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ac0e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ac12:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805ac14:	2300      	movs	r3, #0
 805ac16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_OVERRIDE_TEC_PROFILE_ACK (%u bytes):", len);
 805ac1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac1e:	f107 0210 	add.w	r2, r7, #16
 805ac22:	18d0      	adds	r0, r2, r3
 805ac24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac28:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805ac2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ac30:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ac34:	781b      	ldrb	r3, [r3, #0]
 805ac36:	4a42      	ldr	r2, [pc, #264]	@ (805ad40 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x150>)
 805ac38:	f00e fcd2 	bl	80695e0 <sniprintf>
 805ac3c:	4602      	mov	r2, r0
 805ac3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac42:	4413      	add	r3, r2
 805ac44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805ac48:	2300      	movs	r3, #0
 805ac4a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805ac4e:	e01f      	b.n	805ac90 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805ac50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac54:	f107 0210 	add.w	r2, r7, #16
 805ac58:	18d0      	adds	r0, r2, r3
 805ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac5e:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805ac62:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805ac66:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805ac6a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805ac6e:	6812      	ldr	r2, [r2, #0]
 805ac70:	4413      	add	r3, r2
 805ac72:	781b      	ldrb	r3, [r3, #0]
 805ac74:	4a33      	ldr	r2, [pc, #204]	@ (805ad44 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x154>)
 805ac76:	f00e fcb3 	bl	80695e0 <sniprintf>
 805ac7a:	4602      	mov	r2, r0
 805ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ac80:	4413      	add	r3, r2
 805ac82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805ac86:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805ac8a:	3301      	adds	r3, #1
 805ac8c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805ac90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ac94:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ac98:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805ac9c:	781b      	ldrb	r3, [r3, #0]
 805ac9e:	429a      	cmp	r2, r3
 805aca0:	d203      	bcs.n	805acaa <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0xba>
 805aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aca6:	2bfb      	cmp	r3, #251	@ 0xfb
 805aca8:	d9d2      	bls.n	805ac50 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805acaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805acae:	f107 0210 	add.w	r2, r7, #16
 805acb2:	18d0      	adds	r0, r2, r3
 805acb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805acb8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805acbc:	4a22      	ldr	r2, [pc, #136]	@ (805ad48 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x158>)
 805acbe:	4619      	mov	r1, r3
 805acc0:	f00e fc8e 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805acc4:	f107 0310 	add.w	r3, r7, #16
 805acc8:	4619      	mov	r1, r3
 805acca:	4820      	ldr	r0, [pc, #128]	@ (805ad4c <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805accc:	f00e fc76 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805acd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805acd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805acd8:	f107 0010 	add.w	r0, r7, #16
 805acdc:	681b      	ldr	r3, [r3, #0]
 805acde:	4a1c      	ldr	r2, [pc, #112]	@ (805ad50 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x160>)
 805ace0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805ace4:	f00e fc7c 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805ace8:	f107 0310 	add.w	r3, r7, #16
 805acec:	4619      	mov	r1, r3
 805acee:	4817      	ldr	r0, [pc, #92]	@ (805ad4c <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805acf0:	f00e fc64 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805acf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805acf8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805acfc:	781a      	ldrb	r2, [r3, #0]
 805acfe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ad06:	6819      	ldr	r1, [r3, #0]
 805ad08:	4812      	ldr	r0, [pc, #72]	@ (805ad54 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ad0a:	f00e fe16 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805ad0e:	4a11      	ldr	r2, [pc, #68]	@ (805ad54 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ad10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad14:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ad18:	781b      	ldrb	r3, [r3, #0]
 805ad1a:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (805ad54 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ad20:	2201      	movs	r2, #1
 805ad22:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805ad26:	4b0c      	ldr	r3, [pc, #48]	@ (805ad58 <MIN_Handler_SET_OVERRIDE_TEC_PROFILE_ACK+0x168>)
 805ad28:	6818      	ldr	r0, [r3, #0]
 805ad2a:	2300      	movs	r3, #0
 805ad2c:	2200      	movs	r2, #0
 805ad2e:	2100      	movs	r1, #0
 805ad30:	f7fa faae 	bl	8055290 <xQueueGenericSend>
    }
}
 805ad34:	bf00      	nop
 805ad36:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805ad3a:	46bd      	mov	sp, r7
 805ad3c:	bd80      	pop	{r7, pc}
 805ad3e:	bf00      	nop
 805ad40:	080710a4 	.word	0x080710a4
 805ad44:	08071000 	.word	0x08071000
 805ad48:	08071008 	.word	0x08071008
 805ad4c:	08071074 	.word	0x08071074
 805ad50:	0807100c 	.word	0x0807100c
 805ad54:	2406e528 	.word	0x2406e528
 805ad58:	2406e62c 	.word	0x2406e62c

0805ad5c <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK>:

static void MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805ad5c:	b580      	push	{r7, lr}
 805ad5e:	b0c6      	sub	sp, #280	@ 0x118
 805ad60:	af00      	add	r7, sp, #0
 805ad62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805ad6a:	6018      	str	r0, [r3, #0]
 805ad6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ad74:	6019      	str	r1, [r3, #0]
 805ad76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad7a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ad7e:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805ad80:	2300      	movs	r3, #0
 805ad82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload START_OVERRIDE_TEC_PROFILE_ACK (%u bytes):", len);
 805ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ad8a:	f107 0210 	add.w	r2, r7, #16
 805ad8e:	18d0      	adds	r0, r2, r3
 805ad90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ad94:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805ad98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ad9c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ada0:	781b      	ldrb	r3, [r3, #0]
 805ada2:	4a42      	ldr	r2, [pc, #264]	@ (805aeac <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x150>)
 805ada4:	f00e fc1c 	bl	80695e0 <sniprintf>
 805ada8:	4602      	mov	r2, r0
 805adaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805adae:	4413      	add	r3, r2
 805adb0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805adb4:	2300      	movs	r3, #0
 805adb6:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805adba:	e01f      	b.n	805adfc <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805adbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805adc0:	f107 0210 	add.w	r2, r7, #16
 805adc4:	18d0      	adds	r0, r2, r3
 805adc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805adca:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805adce:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805add2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805add6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805adda:	6812      	ldr	r2, [r2, #0]
 805addc:	4413      	add	r3, r2
 805adde:	781b      	ldrb	r3, [r3, #0]
 805ade0:	4a33      	ldr	r2, [pc, #204]	@ (805aeb0 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x154>)
 805ade2:	f00e fbfd 	bl	80695e0 <sniprintf>
 805ade6:	4602      	mov	r2, r0
 805ade8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805adec:	4413      	add	r3, r2
 805adee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805adf2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805adf6:	3301      	adds	r3, #1
 805adf8:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805adfc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ae00:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ae04:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805ae08:	781b      	ldrb	r3, [r3, #0]
 805ae0a:	429a      	cmp	r2, r3
 805ae0c:	d203      	bcs.n	805ae16 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0xba>
 805ae0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ae12:	2bfb      	cmp	r3, #251	@ 0xfb
 805ae14:	d9d2      	bls.n	805adbc <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805ae16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ae1a:	f107 0210 	add.w	r2, r7, #16
 805ae1e:	18d0      	adds	r0, r2, r3
 805ae20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ae24:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805ae28:	4a22      	ldr	r2, [pc, #136]	@ (805aeb4 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x158>)
 805ae2a:	4619      	mov	r1, r3
 805ae2c:	f00e fbd8 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805ae30:	f107 0310 	add.w	r3, r7, #16
 805ae34:	4619      	mov	r1, r3
 805ae36:	4820      	ldr	r0, [pc, #128]	@ (805aeb8 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805ae38:	f00e fbc0 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805ae3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ae40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ae44:	f107 0010 	add.w	r0, r7, #16
 805ae48:	681b      	ldr	r3, [r3, #0]
 805ae4a:	4a1c      	ldr	r2, [pc, #112]	@ (805aebc <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x160>)
 805ae4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805ae50:	f00e fbc6 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805ae54:	f107 0310 	add.w	r3, r7, #16
 805ae58:	4619      	mov	r1, r3
 805ae5a:	4817      	ldr	r0, [pc, #92]	@ (805aeb8 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805ae5c:	f00e fbae 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805ae60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ae64:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ae68:	781a      	ldrb	r2, [r3, #0]
 805ae6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ae6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ae72:	6819      	ldr	r1, [r3, #0]
 805ae74:	4812      	ldr	r0, [pc, #72]	@ (805aec0 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ae76:	f00e fd60 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805ae7a:	4a11      	ldr	r2, [pc, #68]	@ (805aec0 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ae7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ae80:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ae84:	781b      	ldrb	r3, [r3, #0]
 805ae86:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805ae8a:	4b0d      	ldr	r3, [pc, #52]	@ (805aec0 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805ae8c:	2201      	movs	r2, #1
 805ae8e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805ae92:	4b0c      	ldr	r3, [pc, #48]	@ (805aec4 <MIN_Handler_START_OVERRIDE_TEC_PROFILE_ACK+0x168>)
 805ae94:	6818      	ldr	r0, [r3, #0]
 805ae96:	2300      	movs	r3, #0
 805ae98:	2200      	movs	r2, #0
 805ae9a:	2100      	movs	r1, #0
 805ae9c:	f7fa f9f8 	bl	8055290 <xQueueGenericSend>
    }
}
 805aea0:	bf00      	nop
 805aea2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805aea6:	46bd      	mov	sp, r7
 805aea8:	bd80      	pop	{r7, pc}
 805aeaa:	bf00      	nop
 805aeac:	080710d8 	.word	0x080710d8
 805aeb0:	08071000 	.word	0x08071000
 805aeb4:	08071008 	.word	0x08071008
 805aeb8:	08071074 	.word	0x08071074
 805aebc:	0807100c 	.word	0x0807100c
 805aec0:	2406e528 	.word	0x2406e528
 805aec4:	2406e62c 	.word	0x2406e62c

0805aec8 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK>:

static void MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805aec8:	b580      	push	{r7, lr}
 805aeca:	b0c6      	sub	sp, #280	@ 0x118
 805aecc:	af00      	add	r7, sp, #0
 805aece:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aed2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805aed6:	6018      	str	r0, [r3, #0]
 805aed8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aedc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805aee0:	6019      	str	r1, [r3, #0]
 805aee2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805aee6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aeea:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805aeec:	2300      	movs	r3, #0
 805aeee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload STOP_OVERRIDE_TEC_PROFILE_ACK (%u bytes):", len);
 805aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805aef6:	f107 0210 	add.w	r2, r7, #16
 805aefa:	18d0      	adds	r0, r2, r3
 805aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af00:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805af04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805af08:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805af0c:	781b      	ldrb	r3, [r3, #0]
 805af0e:	4a42      	ldr	r2, [pc, #264]	@ (805b018 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x150>)
 805af10:	f00e fb66 	bl	80695e0 <sniprintf>
 805af14:	4602      	mov	r2, r0
 805af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af1a:	4413      	add	r3, r2
 805af1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805af20:	2300      	movs	r3, #0
 805af22:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805af26:	e01f      	b.n	805af68 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805af28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af2c:	f107 0210 	add.w	r2, r7, #16
 805af30:	18d0      	adds	r0, r2, r3
 805af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af36:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805af3a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805af3e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805af42:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805af46:	6812      	ldr	r2, [r2, #0]
 805af48:	4413      	add	r3, r2
 805af4a:	781b      	ldrb	r3, [r3, #0]
 805af4c:	4a33      	ldr	r2, [pc, #204]	@ (805b01c <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x154>)
 805af4e:	f00e fb47 	bl	80695e0 <sniprintf>
 805af52:	4602      	mov	r2, r0
 805af54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af58:	4413      	add	r3, r2
 805af5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805af5e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805af62:	3301      	adds	r3, #1
 805af64:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805af68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805af6c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805af70:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805af74:	781b      	ldrb	r3, [r3, #0]
 805af76:	429a      	cmp	r2, r3
 805af78:	d203      	bcs.n	805af82 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0xba>
 805af7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af7e:	2bfb      	cmp	r3, #251	@ 0xfb
 805af80:	d9d2      	bls.n	805af28 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af86:	f107 0210 	add.w	r2, r7, #16
 805af8a:	18d0      	adds	r0, r2, r3
 805af8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805af90:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805af94:	4a22      	ldr	r2, [pc, #136]	@ (805b020 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x158>)
 805af96:	4619      	mov	r1, r3
 805af98:	f00e fb22 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805af9c:	f107 0310 	add.w	r3, r7, #16
 805afa0:	4619      	mov	r1, r3
 805afa2:	4820      	ldr	r0, [pc, #128]	@ (805b024 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805afa4:	f00e fb0a 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805afa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805afac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805afb0:	f107 0010 	add.w	r0, r7, #16
 805afb4:	681b      	ldr	r3, [r3, #0]
 805afb6:	4a1c      	ldr	r2, [pc, #112]	@ (805b028 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x160>)
 805afb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805afbc:	f00e fb10 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805afc0:	f107 0310 	add.w	r3, r7, #16
 805afc4:	4619      	mov	r1, r3
 805afc6:	4817      	ldr	r0, [pc, #92]	@ (805b024 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x15c>)
 805afc8:	f00e faf8 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805afcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805afd0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805afd4:	781a      	ldrb	r2, [r3, #0]
 805afd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805afda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805afde:	6819      	ldr	r1, [r3, #0]
 805afe0:	4812      	ldr	r0, [pc, #72]	@ (805b02c <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805afe2:	f00e fcaa 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805afe6:	4a11      	ldr	r2, [pc, #68]	@ (805b02c <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805afe8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805afec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805aff0:	781b      	ldrb	r3, [r3, #0]
 805aff2:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805aff6:	4b0d      	ldr	r3, [pc, #52]	@ (805b02c <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x164>)
 805aff8:	2201      	movs	r2, #1
 805affa:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805affe:	4b0c      	ldr	r3, [pc, #48]	@ (805b030 <MIN_Handler_STOP_OVERRIDE_TEC_PROFILE_ACK+0x168>)
 805b000:	6818      	ldr	r0, [r3, #0]
 805b002:	2300      	movs	r3, #0
 805b004:	2200      	movs	r2, #0
 805b006:	2100      	movs	r1, #0
 805b008:	f7fa f942 	bl	8055290 <xQueueGenericSend>
    }
}
 805b00c:	bf00      	nop
 805b00e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b012:	46bd      	mov	sp, r7
 805b014:	bd80      	pop	{r7, pc}
 805b016:	bf00      	nop
 805b018:	0807110c 	.word	0x0807110c
 805b01c:	08071000 	.word	0x08071000
 805b020:	08071008 	.word	0x08071008
 805b024:	08071074 	.word	0x08071074
 805b028:	0807100c 	.word	0x0807100c
 805b02c:	2406e528 	.word	0x2406e528
 805b030:	2406e62c 	.word	0x2406e62c

0805b034 <MIN_Handler_SET_PDA_PROFILE_ACK>:

static void MIN_Handler_SET_PDA_PROFILE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b034:	b580      	push	{r7, lr}
 805b036:	b0c6      	sub	sp, #280	@ 0x118
 805b038:	af00      	add	r7, sp, #0
 805b03a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b03e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b042:	6018      	str	r0, [r3, #0]
 805b044:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b048:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b04c:	6019      	str	r1, [r3, #0]
 805b04e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b052:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b056:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b058:	2300      	movs	r3, #0
 805b05a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_SAMPLING_PROFILE_ACK (%u bytes):", len);
 805b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b062:	f107 0210 	add.w	r2, r7, #16
 805b066:	18d0      	adds	r0, r2, r3
 805b068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b06c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b070:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b074:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b078:	781b      	ldrb	r3, [r3, #0]
 805b07a:	4a42      	ldr	r2, [pc, #264]	@ (805b184 <MIN_Handler_SET_PDA_PROFILE_ACK+0x150>)
 805b07c:	f00e fab0 	bl	80695e0 <sniprintf>
 805b080:	4602      	mov	r2, r0
 805b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b086:	4413      	add	r3, r2
 805b088:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b08c:	2300      	movs	r3, #0
 805b08e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b092:	e01f      	b.n	805b0d4 <MIN_Handler_SET_PDA_PROFILE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b098:	f107 0210 	add.w	r2, r7, #16
 805b09c:	18d0      	adds	r0, r2, r3
 805b09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b0a2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b0a6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b0aa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b0ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b0b2:	6812      	ldr	r2, [r2, #0]
 805b0b4:	4413      	add	r3, r2
 805b0b6:	781b      	ldrb	r3, [r3, #0]
 805b0b8:	4a33      	ldr	r2, [pc, #204]	@ (805b188 <MIN_Handler_SET_PDA_PROFILE_ACK+0x154>)
 805b0ba:	f00e fa91 	bl	80695e0 <sniprintf>
 805b0be:	4602      	mov	r2, r0
 805b0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b0c4:	4413      	add	r3, r2
 805b0c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b0ca:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b0ce:	3301      	adds	r3, #1
 805b0d0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b0d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b0d8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b0dc:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b0e0:	781b      	ldrb	r3, [r3, #0]
 805b0e2:	429a      	cmp	r2, r3
 805b0e4:	d203      	bcs.n	805b0ee <MIN_Handler_SET_PDA_PROFILE_ACK+0xba>
 805b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b0ea:	2bfb      	cmp	r3, #251	@ 0xfb
 805b0ec:	d9d2      	bls.n	805b094 <MIN_Handler_SET_PDA_PROFILE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b0f2:	f107 0210 	add.w	r2, r7, #16
 805b0f6:	18d0      	adds	r0, r2, r3
 805b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b0fc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b100:	4a22      	ldr	r2, [pc, #136]	@ (805b18c <MIN_Handler_SET_PDA_PROFILE_ACK+0x158>)
 805b102:	4619      	mov	r1, r3
 805b104:	f00e fa6c 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b108:	f107 0310 	add.w	r3, r7, #16
 805b10c:	4619      	mov	r1, r3
 805b10e:	4820      	ldr	r0, [pc, #128]	@ (805b190 <MIN_Handler_SET_PDA_PROFILE_ACK+0x15c>)
 805b110:	f00e fa54 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b114:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b118:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b11c:	f107 0010 	add.w	r0, r7, #16
 805b120:	681b      	ldr	r3, [r3, #0]
 805b122:	4a1c      	ldr	r2, [pc, #112]	@ (805b194 <MIN_Handler_SET_PDA_PROFILE_ACK+0x160>)
 805b124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b128:	f00e fa5a 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b12c:	f107 0310 	add.w	r3, r7, #16
 805b130:	4619      	mov	r1, r3
 805b132:	4817      	ldr	r0, [pc, #92]	@ (805b190 <MIN_Handler_SET_PDA_PROFILE_ACK+0x15c>)
 805b134:	f00e fa42 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b138:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b13c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b140:	781a      	ldrb	r2, [r3, #0]
 805b142:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b146:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b14a:	6819      	ldr	r1, [r3, #0]
 805b14c:	4812      	ldr	r0, [pc, #72]	@ (805b198 <MIN_Handler_SET_PDA_PROFILE_ACK+0x164>)
 805b14e:	f00e fbf4 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b152:	4a11      	ldr	r2, [pc, #68]	@ (805b198 <MIN_Handler_SET_PDA_PROFILE_ACK+0x164>)
 805b154:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b158:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b15c:	781b      	ldrb	r3, [r3, #0]
 805b15e:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b162:	4b0d      	ldr	r3, [pc, #52]	@ (805b198 <MIN_Handler_SET_PDA_PROFILE_ACK+0x164>)
 805b164:	2201      	movs	r2, #1
 805b166:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b16a:	4b0c      	ldr	r3, [pc, #48]	@ (805b19c <MIN_Handler_SET_PDA_PROFILE_ACK+0x168>)
 805b16c:	6818      	ldr	r0, [r3, #0]
 805b16e:	2300      	movs	r3, #0
 805b170:	2200      	movs	r2, #0
 805b172:	2100      	movs	r1, #0
 805b174:	f7fa f88c 	bl	8055290 <xQueueGenericSend>
    }
}
 805b178:	bf00      	nop
 805b17a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b17e:	46bd      	mov	sp, r7
 805b180:	bd80      	pop	{r7, pc}
 805b182:	bf00      	nop
 805b184:	08071140 	.word	0x08071140
 805b188:	08071000 	.word	0x08071000
 805b18c:	08071008 	.word	0x08071008
 805b190:	08071074 	.word	0x08071074
 805b194:	0807100c 	.word	0x0807100c
 805b198:	2406e528 	.word	0x2406e528
 805b19c:	2406e62c 	.word	0x2406e62c

0805b1a0 <MIN_Handler_SET_LASER_INTENSITY_ACK>:

static void MIN_Handler_SET_LASER_INTENSITY_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b1a0:	b580      	push	{r7, lr}
 805b1a2:	b0c6      	sub	sp, #280	@ 0x118
 805b1a4:	af00      	add	r7, sp, #0
 805b1a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b1aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b1ae:	6018      	str	r0, [r3, #0]
 805b1b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b1b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b1b8:	6019      	str	r1, [r3, #0]
 805b1ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b1be:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b1c2:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b1c4:	2300      	movs	r3, #0
 805b1c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_LASER_INTENSITY_ACK (%u bytes):", len);
 805b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b1ce:	f107 0210 	add.w	r2, r7, #16
 805b1d2:	18d0      	adds	r0, r2, r3
 805b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b1d8:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b1dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b1e0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b1e4:	781b      	ldrb	r3, [r3, #0]
 805b1e6:	4a42      	ldr	r2, [pc, #264]	@ (805b2f0 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x150>)
 805b1e8:	f00e f9fa 	bl	80695e0 <sniprintf>
 805b1ec:	4602      	mov	r2, r0
 805b1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b1f2:	4413      	add	r3, r2
 805b1f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b1f8:	2300      	movs	r3, #0
 805b1fa:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b1fe:	e01f      	b.n	805b240 <MIN_Handler_SET_LASER_INTENSITY_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b204:	f107 0210 	add.w	r2, r7, #16
 805b208:	18d0      	adds	r0, r2, r3
 805b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b20e:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b212:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b216:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b21a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b21e:	6812      	ldr	r2, [r2, #0]
 805b220:	4413      	add	r3, r2
 805b222:	781b      	ldrb	r3, [r3, #0]
 805b224:	4a33      	ldr	r2, [pc, #204]	@ (805b2f4 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x154>)
 805b226:	f00e f9db 	bl	80695e0 <sniprintf>
 805b22a:	4602      	mov	r2, r0
 805b22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b230:	4413      	add	r3, r2
 805b232:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b236:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b23a:	3301      	adds	r3, #1
 805b23c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b240:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b244:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b248:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b24c:	781b      	ldrb	r3, [r3, #0]
 805b24e:	429a      	cmp	r2, r3
 805b250:	d203      	bcs.n	805b25a <MIN_Handler_SET_LASER_INTENSITY_ACK+0xba>
 805b252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b256:	2bfb      	cmp	r3, #251	@ 0xfb
 805b258:	d9d2      	bls.n	805b200 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b25e:	f107 0210 	add.w	r2, r7, #16
 805b262:	18d0      	adds	r0, r2, r3
 805b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b268:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b26c:	4a22      	ldr	r2, [pc, #136]	@ (805b2f8 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x158>)
 805b26e:	4619      	mov	r1, r3
 805b270:	f00e f9b6 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b274:	f107 0310 	add.w	r3, r7, #16
 805b278:	4619      	mov	r1, r3
 805b27a:	4820      	ldr	r0, [pc, #128]	@ (805b2fc <MIN_Handler_SET_LASER_INTENSITY_ACK+0x15c>)
 805b27c:	f00e f99e 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b280:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b284:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b288:	f107 0010 	add.w	r0, r7, #16
 805b28c:	681b      	ldr	r3, [r3, #0]
 805b28e:	4a1c      	ldr	r2, [pc, #112]	@ (805b300 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x160>)
 805b290:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b294:	f00e f9a4 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b298:	f107 0310 	add.w	r3, r7, #16
 805b29c:	4619      	mov	r1, r3
 805b29e:	4817      	ldr	r0, [pc, #92]	@ (805b2fc <MIN_Handler_SET_LASER_INTENSITY_ACK+0x15c>)
 805b2a0:	f00e f98c 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b2a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b2a8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b2ac:	781a      	ldrb	r2, [r3, #0]
 805b2ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b2b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b2b6:	6819      	ldr	r1, [r3, #0]
 805b2b8:	4812      	ldr	r0, [pc, #72]	@ (805b304 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x164>)
 805b2ba:	f00e fb3e 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b2be:	4a11      	ldr	r2, [pc, #68]	@ (805b304 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x164>)
 805b2c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b2c4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b2c8:	781b      	ldrb	r3, [r3, #0]
 805b2ca:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (805b304 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x164>)
 805b2d0:	2201      	movs	r2, #1
 805b2d2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b2d6:	4b0c      	ldr	r3, [pc, #48]	@ (805b308 <MIN_Handler_SET_LASER_INTENSITY_ACK+0x168>)
 805b2d8:	6818      	ldr	r0, [r3, #0]
 805b2da:	2300      	movs	r3, #0
 805b2dc:	2200      	movs	r2, #0
 805b2de:	2100      	movs	r1, #0
 805b2e0:	f7f9 ffd6 	bl	8055290 <xQueueGenericSend>
    }
}
 805b2e4:	bf00      	nop
 805b2e6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b2ea:	46bd      	mov	sp, r7
 805b2ec:	bd80      	pop	{r7, pc}
 805b2ee:	bf00      	nop
 805b2f0:	08071170 	.word	0x08071170
 805b2f4:	08071000 	.word	0x08071000
 805b2f8:	08071008 	.word	0x08071008
 805b2fc:	08071074 	.word	0x08071074
 805b300:	0807100c 	.word	0x0807100c
 805b304:	2406e528 	.word	0x2406e528
 805b308:	2406e62c 	.word	0x2406e62c

0805b30c <MIN_Handler_SET_POSITION_ACK>:

static void MIN_Handler_SET_POSITION_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b30c:	b580      	push	{r7, lr}
 805b30e:	b0c6      	sub	sp, #280	@ 0x118
 805b310:	af00      	add	r7, sp, #0
 805b312:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b316:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b31a:	6018      	str	r0, [r3, #0]
 805b31c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b320:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b324:	6019      	str	r1, [r3, #0]
 805b326:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b32a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b32e:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b330:	2300      	movs	r3, #0
 805b332:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_POSITION_ACK (%u bytes):", len);
 805b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b33a:	f107 0210 	add.w	r2, r7, #16
 805b33e:	18d0      	adds	r0, r2, r3
 805b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b344:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b348:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b34c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b350:	781b      	ldrb	r3, [r3, #0]
 805b352:	4a42      	ldr	r2, [pc, #264]	@ (805b45c <MIN_Handler_SET_POSITION_ACK+0x150>)
 805b354:	f00e f944 	bl	80695e0 <sniprintf>
 805b358:	4602      	mov	r2, r0
 805b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b35e:	4413      	add	r3, r2
 805b360:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b364:	2300      	movs	r3, #0
 805b366:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b36a:	e01f      	b.n	805b3ac <MIN_Handler_SET_POSITION_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b370:	f107 0210 	add.w	r2, r7, #16
 805b374:	18d0      	adds	r0, r2, r3
 805b376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b37a:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b37e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b382:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b386:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b38a:	6812      	ldr	r2, [r2, #0]
 805b38c:	4413      	add	r3, r2
 805b38e:	781b      	ldrb	r3, [r3, #0]
 805b390:	4a33      	ldr	r2, [pc, #204]	@ (805b460 <MIN_Handler_SET_POSITION_ACK+0x154>)
 805b392:	f00e f925 	bl	80695e0 <sniprintf>
 805b396:	4602      	mov	r2, r0
 805b398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b39c:	4413      	add	r3, r2
 805b39e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b3a2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b3a6:	3301      	adds	r3, #1
 805b3a8:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b3ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b3b0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b3b4:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b3b8:	781b      	ldrb	r3, [r3, #0]
 805b3ba:	429a      	cmp	r2, r3
 805b3bc:	d203      	bcs.n	805b3c6 <MIN_Handler_SET_POSITION_ACK+0xba>
 805b3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b3c2:	2bfb      	cmp	r3, #251	@ 0xfb
 805b3c4:	d9d2      	bls.n	805b36c <MIN_Handler_SET_POSITION_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b3ca:	f107 0210 	add.w	r2, r7, #16
 805b3ce:	18d0      	adds	r0, r2, r3
 805b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b3d4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b3d8:	4a22      	ldr	r2, [pc, #136]	@ (805b464 <MIN_Handler_SET_POSITION_ACK+0x158>)
 805b3da:	4619      	mov	r1, r3
 805b3dc:	f00e f900 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b3e0:	f107 0310 	add.w	r3, r7, #16
 805b3e4:	4619      	mov	r1, r3
 805b3e6:	4820      	ldr	r0, [pc, #128]	@ (805b468 <MIN_Handler_SET_POSITION_ACK+0x15c>)
 805b3e8:	f00e f8e8 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b3ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b3f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b3f4:	f107 0010 	add.w	r0, r7, #16
 805b3f8:	681b      	ldr	r3, [r3, #0]
 805b3fa:	4a1c      	ldr	r2, [pc, #112]	@ (805b46c <MIN_Handler_SET_POSITION_ACK+0x160>)
 805b3fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b400:	f00e f8ee 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b404:	f107 0310 	add.w	r3, r7, #16
 805b408:	4619      	mov	r1, r3
 805b40a:	4817      	ldr	r0, [pc, #92]	@ (805b468 <MIN_Handler_SET_POSITION_ACK+0x15c>)
 805b40c:	f00e f8d6 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b410:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b414:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b418:	781a      	ldrb	r2, [r3, #0]
 805b41a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b41e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b422:	6819      	ldr	r1, [r3, #0]
 805b424:	4812      	ldr	r0, [pc, #72]	@ (805b470 <MIN_Handler_SET_POSITION_ACK+0x164>)
 805b426:	f00e fa88 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b42a:	4a11      	ldr	r2, [pc, #68]	@ (805b470 <MIN_Handler_SET_POSITION_ACK+0x164>)
 805b42c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b430:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b434:	781b      	ldrb	r3, [r3, #0]
 805b436:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b43a:	4b0d      	ldr	r3, [pc, #52]	@ (805b470 <MIN_Handler_SET_POSITION_ACK+0x164>)
 805b43c:	2201      	movs	r2, #1
 805b43e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b442:	4b0c      	ldr	r3, [pc, #48]	@ (805b474 <MIN_Handler_SET_POSITION_ACK+0x168>)
 805b444:	6818      	ldr	r0, [r3, #0]
 805b446:	2300      	movs	r3, #0
 805b448:	2200      	movs	r2, #0
 805b44a:	2100      	movs	r1, #0
 805b44c:	f7f9 ff20 	bl	8055290 <xQueueGenericSend>
    }
}
 805b450:	bf00      	nop
 805b452:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b456:	46bd      	mov	sp, r7
 805b458:	bd80      	pop	{r7, pc}
 805b45a:	bf00      	nop
 805b45c:	0807119c 	.word	0x0807119c
 805b460:	08071000 	.word	0x08071000
 805b464:	08071008 	.word	0x08071008
 805b468:	08071074 	.word	0x08071074
 805b46c:	0807100c 	.word	0x0807100c
 805b470:	2406e528 	.word	0x2406e528
 805b474:	2406e62c 	.word	0x2406e62c

0805b478 <MIN_Handler_START_SAMPLE_CYCLE_ACK>:

static void MIN_Handler_START_SAMPLE_CYCLE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b478:	b580      	push	{r7, lr}
 805b47a:	b0c6      	sub	sp, #280	@ 0x118
 805b47c:	af00      	add	r7, sp, #0
 805b47e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b482:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b486:	6018      	str	r0, [r3, #0]
 805b488:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b48c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b490:	6019      	str	r1, [r3, #0]
 805b492:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b496:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b49a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b49c:	2300      	movs	r3, #0
 805b49e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload START_SAMPLING_CYCLE_ACK (%u bytes):", len);
 805b4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b4a6:	f107 0210 	add.w	r2, r7, #16
 805b4aa:	18d0      	adds	r0, r2, r3
 805b4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b4b0:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b4b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b4b8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b4bc:	781b      	ldrb	r3, [r3, #0]
 805b4be:	4a42      	ldr	r2, [pc, #264]	@ (805b5c8 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x150>)
 805b4c0:	f00e f88e 	bl	80695e0 <sniprintf>
 805b4c4:	4602      	mov	r2, r0
 805b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b4ca:	4413      	add	r3, r2
 805b4cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b4d0:	2300      	movs	r3, #0
 805b4d2:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b4d6:	e01f      	b.n	805b518 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b4dc:	f107 0210 	add.w	r2, r7, #16
 805b4e0:	18d0      	adds	r0, r2, r3
 805b4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b4e6:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b4ea:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b4ee:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b4f2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b4f6:	6812      	ldr	r2, [r2, #0]
 805b4f8:	4413      	add	r3, r2
 805b4fa:	781b      	ldrb	r3, [r3, #0]
 805b4fc:	4a33      	ldr	r2, [pc, #204]	@ (805b5cc <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x154>)
 805b4fe:	f00e f86f 	bl	80695e0 <sniprintf>
 805b502:	4602      	mov	r2, r0
 805b504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b508:	4413      	add	r3, r2
 805b50a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b50e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b512:	3301      	adds	r3, #1
 805b514:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b518:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b51c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b520:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b524:	781b      	ldrb	r3, [r3, #0]
 805b526:	429a      	cmp	r2, r3
 805b528:	d203      	bcs.n	805b532 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0xba>
 805b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b52e:	2bfb      	cmp	r3, #251	@ 0xfb
 805b530:	d9d2      	bls.n	805b4d8 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b536:	f107 0210 	add.w	r2, r7, #16
 805b53a:	18d0      	adds	r0, r2, r3
 805b53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b540:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b544:	4a22      	ldr	r2, [pc, #136]	@ (805b5d0 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x158>)
 805b546:	4619      	mov	r1, r3
 805b548:	f00e f84a 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b54c:	f107 0310 	add.w	r3, r7, #16
 805b550:	4619      	mov	r1, r3
 805b552:	4820      	ldr	r0, [pc, #128]	@ (805b5d4 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x15c>)
 805b554:	f00e f832 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b558:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b55c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b560:	f107 0010 	add.w	r0, r7, #16
 805b564:	681b      	ldr	r3, [r3, #0]
 805b566:	4a1c      	ldr	r2, [pc, #112]	@ (805b5d8 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x160>)
 805b568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b56c:	f00e f838 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b570:	f107 0310 	add.w	r3, r7, #16
 805b574:	4619      	mov	r1, r3
 805b576:	4817      	ldr	r0, [pc, #92]	@ (805b5d4 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x15c>)
 805b578:	f00e f820 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b57c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b580:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b584:	781a      	ldrb	r2, [r3, #0]
 805b586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b58a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b58e:	6819      	ldr	r1, [r3, #0]
 805b590:	4812      	ldr	r0, [pc, #72]	@ (805b5dc <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x164>)
 805b592:	f00e f9d2 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b596:	4a11      	ldr	r2, [pc, #68]	@ (805b5dc <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x164>)
 805b598:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b59c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b5a0:	781b      	ldrb	r3, [r3, #0]
 805b5a2:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (805b5dc <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x164>)
 805b5a8:	2201      	movs	r2, #1
 805b5aa:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b5ae:	4b0c      	ldr	r3, [pc, #48]	@ (805b5e0 <MIN_Handler_START_SAMPLE_CYCLE_ACK+0x168>)
 805b5b0:	6818      	ldr	r0, [r3, #0]
 805b5b2:	2300      	movs	r3, #0
 805b5b4:	2200      	movs	r2, #0
 805b5b6:	2100      	movs	r1, #0
 805b5b8:	f7f9 fe6a 	bl	8055290 <xQueueGenericSend>
    }
}
 805b5bc:	bf00      	nop
 805b5be:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b5c2:	46bd      	mov	sp, r7
 805b5c4:	bd80      	pop	{r7, pc}
 805b5c6:	bf00      	nop
 805b5c8:	080711c4 	.word	0x080711c4
 805b5cc:	08071000 	.word	0x08071000
 805b5d0:	08071008 	.word	0x08071008
 805b5d4:	08071074 	.word	0x08071074
 805b5d8:	0807100c 	.word	0x0807100c
 805b5dc:	2406e528 	.word	0x2406e528
 805b5e0:	2406e62c 	.word	0x2406e62c

0805b5e4 <MIN_Handler_GET_INFO_SAMPLE_ACK>:

static void MIN_Handler_GET_INFO_SAMPLE_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b5e4:	b580      	push	{r7, lr}
 805b5e6:	b0c6      	sub	sp, #280	@ 0x118
 805b5e8:	af00      	add	r7, sp, #0
 805b5ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b5ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b5f2:	6018      	str	r0, [r3, #0]
 805b5f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b5f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b5fc:	6019      	str	r1, [r3, #0]
 805b5fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b602:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b606:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b608:	2300      	movs	r3, #0
 805b60a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload GET_INFO_SAMPLE_ACK (%u bytes):", len);
 805b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b612:	f107 0210 	add.w	r2, r7, #16
 805b616:	18d0      	adds	r0, r2, r3
 805b618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b61c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b620:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b624:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b628:	781b      	ldrb	r3, [r3, #0]
 805b62a:	4a42      	ldr	r2, [pc, #264]	@ (805b734 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x150>)
 805b62c:	f00d ffd8 	bl	80695e0 <sniprintf>
 805b630:	4602      	mov	r2, r0
 805b632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b636:	4413      	add	r3, r2
 805b638:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b63c:	2300      	movs	r3, #0
 805b63e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b642:	e01f      	b.n	805b684 <MIN_Handler_GET_INFO_SAMPLE_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b648:	f107 0210 	add.w	r2, r7, #16
 805b64c:	18d0      	adds	r0, r2, r3
 805b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b652:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b656:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b65a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b65e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b662:	6812      	ldr	r2, [r2, #0]
 805b664:	4413      	add	r3, r2
 805b666:	781b      	ldrb	r3, [r3, #0]
 805b668:	4a33      	ldr	r2, [pc, #204]	@ (805b738 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x154>)
 805b66a:	f00d ffb9 	bl	80695e0 <sniprintf>
 805b66e:	4602      	mov	r2, r0
 805b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b674:	4413      	add	r3, r2
 805b676:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b67a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b67e:	3301      	adds	r3, #1
 805b680:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b684:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b688:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b68c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b690:	781b      	ldrb	r3, [r3, #0]
 805b692:	429a      	cmp	r2, r3
 805b694:	d203      	bcs.n	805b69e <MIN_Handler_GET_INFO_SAMPLE_ACK+0xba>
 805b696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b69a:	2bfb      	cmp	r3, #251	@ 0xfb
 805b69c:	d9d2      	bls.n	805b644 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b6a2:	f107 0210 	add.w	r2, r7, #16
 805b6a6:	18d0      	adds	r0, r2, r3
 805b6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b6ac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b6b0:	4a22      	ldr	r2, [pc, #136]	@ (805b73c <MIN_Handler_GET_INFO_SAMPLE_ACK+0x158>)
 805b6b2:	4619      	mov	r1, r3
 805b6b4:	f00d ff94 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b6b8:	f107 0310 	add.w	r3, r7, #16
 805b6bc:	4619      	mov	r1, r3
 805b6be:	4820      	ldr	r0, [pc, #128]	@ (805b740 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x15c>)
 805b6c0:	f00d ff7c 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b6c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b6c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b6cc:	f107 0010 	add.w	r0, r7, #16
 805b6d0:	681b      	ldr	r3, [r3, #0]
 805b6d2:	4a1c      	ldr	r2, [pc, #112]	@ (805b744 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x160>)
 805b6d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b6d8:	f00d ff82 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b6dc:	f107 0310 	add.w	r3, r7, #16
 805b6e0:	4619      	mov	r1, r3
 805b6e2:	4817      	ldr	r0, [pc, #92]	@ (805b740 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x15c>)
 805b6e4:	f00d ff6a 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b6e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b6ec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b6f0:	781a      	ldrb	r2, [r3, #0]
 805b6f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b6f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b6fa:	6819      	ldr	r1, [r3, #0]
 805b6fc:	4812      	ldr	r0, [pc, #72]	@ (805b748 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x164>)
 805b6fe:	f00e f91c 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b702:	4a11      	ldr	r2, [pc, #68]	@ (805b748 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x164>)
 805b704:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b708:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b70c:	781b      	ldrb	r3, [r3, #0]
 805b70e:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b712:	4b0d      	ldr	r3, [pc, #52]	@ (805b748 <MIN_Handler_GET_INFO_SAMPLE_ACK+0x164>)
 805b714:	2201      	movs	r2, #1
 805b716:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b71a:	4b0c      	ldr	r3, [pc, #48]	@ (805b74c <MIN_Handler_GET_INFO_SAMPLE_ACK+0x168>)
 805b71c:	6818      	ldr	r0, [r3, #0]
 805b71e:	2300      	movs	r3, #0
 805b720:	2200      	movs	r2, #0
 805b722:	2100      	movs	r1, #0
 805b724:	f7f9 fdb4 	bl	8055290 <xQueueGenericSend>
    }
}
 805b728:	bf00      	nop
 805b72a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b72e:	46bd      	mov	sp, r7
 805b730:	bd80      	pop	{r7, pc}
 805b732:	bf00      	nop
 805b734:	080711f4 	.word	0x080711f4
 805b738:	08071000 	.word	0x08071000
 805b73c:	08071008 	.word	0x08071008
 805b740:	08071074 	.word	0x08071074
 805b744:	0807100c 	.word	0x0807100c
 805b748:	2406e528 	.word	0x2406e528
 805b74c:	2406e62c 	.word	0x2406e62c

0805b750 <MIN_Handler_GET_CHUNK_ACK>:

static void MIN_Handler_GET_CHUNK_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b750:	b580      	push	{r7, lr}
 805b752:	b0c6      	sub	sp, #280	@ 0x118
 805b754:	af00      	add	r7, sp, #0
 805b756:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b75a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b75e:	6018      	str	r0, [r3, #0]
 805b760:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b764:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b768:	6019      	str	r1, [r3, #0]
 805b76a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b76e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b772:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b774:	2300      	movs	r3, #0
 805b776:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload GET_CHUNK_ACK (%u bytes):", len);
 805b77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b77e:	f107 0210 	add.w	r2, r7, #16
 805b782:	18d0      	adds	r0, r2, r3
 805b784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b788:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b78c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b790:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b794:	781b      	ldrb	r3, [r3, #0]
 805b796:	4a42      	ldr	r2, [pc, #264]	@ (805b8a0 <MIN_Handler_GET_CHUNK_ACK+0x150>)
 805b798:	f00d ff22 	bl	80695e0 <sniprintf>
 805b79c:	4602      	mov	r2, r0
 805b79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b7a2:	4413      	add	r3, r2
 805b7a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b7a8:	2300      	movs	r3, #0
 805b7aa:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b7ae:	e01f      	b.n	805b7f0 <MIN_Handler_GET_CHUNK_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b7b4:	f107 0210 	add.w	r2, r7, #16
 805b7b8:	18d0      	adds	r0, r2, r3
 805b7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b7be:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b7c2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b7c6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b7ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b7ce:	6812      	ldr	r2, [r2, #0]
 805b7d0:	4413      	add	r3, r2
 805b7d2:	781b      	ldrb	r3, [r3, #0]
 805b7d4:	4a33      	ldr	r2, [pc, #204]	@ (805b8a4 <MIN_Handler_GET_CHUNK_ACK+0x154>)
 805b7d6:	f00d ff03 	bl	80695e0 <sniprintf>
 805b7da:	4602      	mov	r2, r0
 805b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b7e0:	4413      	add	r3, r2
 805b7e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b7e6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b7ea:	3301      	adds	r3, #1
 805b7ec:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b7f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b7f4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b7f8:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b7fc:	781b      	ldrb	r3, [r3, #0]
 805b7fe:	429a      	cmp	r2, r3
 805b800:	d203      	bcs.n	805b80a <MIN_Handler_GET_CHUNK_ACK+0xba>
 805b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b806:	2bfb      	cmp	r3, #251	@ 0xfb
 805b808:	d9d2      	bls.n	805b7b0 <MIN_Handler_GET_CHUNK_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b80e:	f107 0210 	add.w	r2, r7, #16
 805b812:	18d0      	adds	r0, r2, r3
 805b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b818:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b81c:	4a22      	ldr	r2, [pc, #136]	@ (805b8a8 <MIN_Handler_GET_CHUNK_ACK+0x158>)
 805b81e:	4619      	mov	r1, r3
 805b820:	f00d fede 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b824:	f107 0310 	add.w	r3, r7, #16
 805b828:	4619      	mov	r1, r3
 805b82a:	4820      	ldr	r0, [pc, #128]	@ (805b8ac <MIN_Handler_GET_CHUNK_ACK+0x15c>)
 805b82c:	f00d fec6 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b830:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b838:	f107 0010 	add.w	r0, r7, #16
 805b83c:	681b      	ldr	r3, [r3, #0]
 805b83e:	4a1c      	ldr	r2, [pc, #112]	@ (805b8b0 <MIN_Handler_GET_CHUNK_ACK+0x160>)
 805b840:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b844:	f00d fecc 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b848:	f107 0310 	add.w	r3, r7, #16
 805b84c:	4619      	mov	r1, r3
 805b84e:	4817      	ldr	r0, [pc, #92]	@ (805b8ac <MIN_Handler_GET_CHUNK_ACK+0x15c>)
 805b850:	f00d feb4 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b854:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b858:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b85c:	781a      	ldrb	r2, [r3, #0]
 805b85e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b862:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b866:	6819      	ldr	r1, [r3, #0]
 805b868:	4812      	ldr	r0, [pc, #72]	@ (805b8b4 <MIN_Handler_GET_CHUNK_ACK+0x164>)
 805b86a:	f00e f866 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b86e:	4a11      	ldr	r2, [pc, #68]	@ (805b8b4 <MIN_Handler_GET_CHUNK_ACK+0x164>)
 805b870:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b874:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b878:	781b      	ldrb	r3, [r3, #0]
 805b87a:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b87e:	4b0d      	ldr	r3, [pc, #52]	@ (805b8b4 <MIN_Handler_GET_CHUNK_ACK+0x164>)
 805b880:	2201      	movs	r2, #1
 805b882:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b886:	4b0c      	ldr	r3, [pc, #48]	@ (805b8b8 <MIN_Handler_GET_CHUNK_ACK+0x168>)
 805b888:	6818      	ldr	r0, [r3, #0]
 805b88a:	2300      	movs	r3, #0
 805b88c:	2200      	movs	r2, #0
 805b88e:	2100      	movs	r1, #0
 805b890:	f7f9 fcfe 	bl	8055290 <xQueueGenericSend>
    }
}
 805b894:	bf00      	nop
 805b896:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805b89a:	46bd      	mov	sp, r7
 805b89c:	bd80      	pop	{r7, pc}
 805b89e:	bf00      	nop
 805b8a0:	0807121c 	.word	0x0807121c
 805b8a4:	08071000 	.word	0x08071000
 805b8a8:	08071008 	.word	0x08071008
 805b8ac:	08071074 	.word	0x08071074
 805b8b0:	0807100c 	.word	0x0807100c
 805b8b4:	2406e528 	.word	0x2406e528
 805b8b8:	2406e62c 	.word	0x2406e62c

0805b8bc <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK>:

static void MIN_Handler_SET_EXT_LASER_INTENSITY_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805b8bc:	b580      	push	{r7, lr}
 805b8be:	b0c6      	sub	sp, #280	@ 0x118
 805b8c0:	af00      	add	r7, sp, #0
 805b8c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b8c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805b8ca:	6018      	str	r0, [r3, #0]
 805b8cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b8d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b8d4:	6019      	str	r1, [r3, #0]
 805b8d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b8da:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b8de:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805b8e0:	2300      	movs	r3, #0
 805b8e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload SET_EXT_LASER_INTENSITY_ACK (%u bytes):", len);
 805b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b8ea:	f107 0210 	add.w	r2, r7, #16
 805b8ee:	18d0      	adds	r0, r2, r3
 805b8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b8f4:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b8f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b8fc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b900:	781b      	ldrb	r3, [r3, #0]
 805b902:	4a42      	ldr	r2, [pc, #264]	@ (805ba0c <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x150>)
 805b904:	f00d fe6c 	bl	80695e0 <sniprintf>
 805b908:	4602      	mov	r2, r0
 805b90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b90e:	4413      	add	r3, r2
 805b910:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b914:	2300      	movs	r3, #0
 805b916:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b91a:	e01f      	b.n	805b95c <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805b91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b920:	f107 0210 	add.w	r2, r7, #16
 805b924:	18d0      	adds	r0, r2, r3
 805b926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b92a:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805b92e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b932:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805b936:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805b93a:	6812      	ldr	r2, [r2, #0]
 805b93c:	4413      	add	r3, r2
 805b93e:	781b      	ldrb	r3, [r3, #0]
 805b940:	4a33      	ldr	r2, [pc, #204]	@ (805ba10 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x154>)
 805b942:	f00d fe4d 	bl	80695e0 <sniprintf>
 805b946:	4602      	mov	r2, r0
 805b948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b94c:	4413      	add	r3, r2
 805b94e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805b952:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805b956:	3301      	adds	r3, #1
 805b958:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805b95c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b960:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b964:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805b968:	781b      	ldrb	r3, [r3, #0]
 805b96a:	429a      	cmp	r2, r3
 805b96c:	d203      	bcs.n	805b976 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0xba>
 805b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b972:	2bfb      	cmp	r3, #251	@ 0xfb
 805b974:	d9d2      	bls.n	805b91c <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805b976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b97a:	f107 0210 	add.w	r2, r7, #16
 805b97e:	18d0      	adds	r0, r2, r3
 805b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805b984:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805b988:	4a22      	ldr	r2, [pc, #136]	@ (805ba14 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x158>)
 805b98a:	4619      	mov	r1, r3
 805b98c:	f00d fe28 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b990:	f107 0310 	add.w	r3, r7, #16
 805b994:	4619      	mov	r1, r3
 805b996:	4820      	ldr	r0, [pc, #128]	@ (805ba18 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x15c>)
 805b998:	f00d fe10 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805b99c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b9a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b9a4:	f107 0010 	add.w	r0, r7, #16
 805b9a8:	681b      	ldr	r3, [r3, #0]
 805b9aa:	4a1c      	ldr	r2, [pc, #112]	@ (805ba1c <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x160>)
 805b9ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805b9b0:	f00d fe16 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805b9b4:	f107 0310 	add.w	r3, r7, #16
 805b9b8:	4619      	mov	r1, r3
 805b9ba:	4817      	ldr	r0, [pc, #92]	@ (805ba18 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x15c>)
 805b9bc:	f00d fdfe 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805b9c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b9c4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b9c8:	781a      	ldrb	r2, [r3, #0]
 805b9ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b9ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805b9d2:	6819      	ldr	r1, [r3, #0]
 805b9d4:	4812      	ldr	r0, [pc, #72]	@ (805ba20 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x164>)
 805b9d6:	f00d ffb0 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805b9da:	4a11      	ldr	r2, [pc, #68]	@ (805ba20 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x164>)
 805b9dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805b9e0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805b9e4:	781b      	ldrb	r3, [r3, #0]
 805b9e6:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805b9ea:	4b0d      	ldr	r3, [pc, #52]	@ (805ba20 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x164>)
 805b9ec:	2201      	movs	r2, #1
 805b9ee:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805b9f2:	4b0c      	ldr	r3, [pc, #48]	@ (805ba24 <MIN_Handler_SET_EXT_LASER_INTENSITY_ACK+0x168>)
 805b9f4:	6818      	ldr	r0, [r3, #0]
 805b9f6:	2300      	movs	r3, #0
 805b9f8:	2200      	movs	r2, #0
 805b9fa:	2100      	movs	r1, #0
 805b9fc:	f7f9 fc48 	bl	8055290 <xQueueGenericSend>
    }
}
 805ba00:	bf00      	nop
 805ba02:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805ba06:	46bd      	mov	sp, r7
 805ba08:	bd80      	pop	{r7, pc}
 805ba0a:	bf00      	nop
 805ba0c:	08071240 	.word	0x08071240
 805ba10:	08071000 	.word	0x08071000
 805ba14:	08071008 	.word	0x08071008
 805ba18:	08071074 	.word	0x08071074
 805ba1c:	0807100c 	.word	0x0807100c
 805ba20:	2406e528 	.word	0x2406e528
 805ba24:	2406e62c 	.word	0x2406e62c

0805ba28 <MIN_Handler_TURN_ON_EXT_LASER_ACK>:

static void MIN_Handler_TURN_ON_EXT_LASER_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805ba28:	b580      	push	{r7, lr}
 805ba2a:	b0c6      	sub	sp, #280	@ 0x118
 805ba2c:	af00      	add	r7, sp, #0
 805ba2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ba32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805ba36:	6018      	str	r0, [r3, #0]
 805ba38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ba3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805ba40:	6019      	str	r1, [r3, #0]
 805ba42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ba46:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ba4a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805ba4c:	2300      	movs	r3, #0
 805ba4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload TURN_ON_EXT_LASER_ACK (%u bytes):", len);
 805ba52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ba56:	f107 0210 	add.w	r2, r7, #16
 805ba5a:	18d0      	adds	r0, r2, r3
 805ba5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ba60:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805ba64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805ba68:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805ba6c:	781b      	ldrb	r3, [r3, #0]
 805ba6e:	4a42      	ldr	r2, [pc, #264]	@ (805bb78 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x150>)
 805ba70:	f00d fdb6 	bl	80695e0 <sniprintf>
 805ba74:	4602      	mov	r2, r0
 805ba76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ba7a:	4413      	add	r3, r2
 805ba7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805ba80:	2300      	movs	r3, #0
 805ba82:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805ba86:	e01f      	b.n	805bac8 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805ba88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ba8c:	f107 0210 	add.w	r2, r7, #16
 805ba90:	18d0      	adds	r0, r2, r3
 805ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805ba96:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805ba9a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805ba9e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805baa2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805baa6:	6812      	ldr	r2, [r2, #0]
 805baa8:	4413      	add	r3, r2
 805baaa:	781b      	ldrb	r3, [r3, #0]
 805baac:	4a33      	ldr	r2, [pc, #204]	@ (805bb7c <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x154>)
 805baae:	f00d fd97 	bl	80695e0 <sniprintf>
 805bab2:	4602      	mov	r2, r0
 805bab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bab8:	4413      	add	r3, r2
 805baba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805babe:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bac2:	3301      	adds	r3, #1
 805bac4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bac8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bacc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bad0:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805bad4:	781b      	ldrb	r3, [r3, #0]
 805bad6:	429a      	cmp	r2, r3
 805bad8:	d203      	bcs.n	805bae2 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0xba>
 805bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bade:	2bfb      	cmp	r3, #251	@ 0xfb
 805bae0:	d9d2      	bls.n	805ba88 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805bae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bae6:	f107 0210 	add.w	r2, r7, #16
 805baea:	18d0      	adds	r0, r2, r3
 805baec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805baf0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805baf4:	4a22      	ldr	r2, [pc, #136]	@ (805bb80 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x158>)
 805baf6:	4619      	mov	r1, r3
 805baf8:	f00d fd72 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bafc:	f107 0310 	add.w	r3, r7, #16
 805bb00:	4619      	mov	r1, r3
 805bb02:	4820      	ldr	r0, [pc, #128]	@ (805bb84 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x15c>)
 805bb04:	f00d fd5a 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805bb08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bb0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bb10:	f107 0010 	add.w	r0, r7, #16
 805bb14:	681b      	ldr	r3, [r3, #0]
 805bb16:	4a1c      	ldr	r2, [pc, #112]	@ (805bb88 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x160>)
 805bb18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805bb1c:	f00d fd60 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bb20:	f107 0310 	add.w	r3, r7, #16
 805bb24:	4619      	mov	r1, r3
 805bb26:	4817      	ldr	r0, [pc, #92]	@ (805bb84 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x15c>)
 805bb28:	f00d fd48 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805bb2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bb30:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bb34:	781a      	ldrb	r2, [r3, #0]
 805bb36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bb3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bb3e:	6819      	ldr	r1, [r3, #0]
 805bb40:	4812      	ldr	r0, [pc, #72]	@ (805bb8c <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x164>)
 805bb42:	f00d fefa 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805bb46:	4a11      	ldr	r2, [pc, #68]	@ (805bb8c <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x164>)
 805bb48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bb4c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bb50:	781b      	ldrb	r3, [r3, #0]
 805bb52:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805bb56:	4b0d      	ldr	r3, [pc, #52]	@ (805bb8c <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x164>)
 805bb58:	2201      	movs	r2, #1
 805bb5a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805bb5e:	4b0c      	ldr	r3, [pc, #48]	@ (805bb90 <MIN_Handler_TURN_ON_EXT_LASER_ACK+0x168>)
 805bb60:	6818      	ldr	r0, [r3, #0]
 805bb62:	2300      	movs	r3, #0
 805bb64:	2200      	movs	r2, #0
 805bb66:	2100      	movs	r1, #0
 805bb68:	f7f9 fb92 	bl	8055290 <xQueueGenericSend>
    }
}
 805bb6c:	bf00      	nop
 805bb6e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805bb72:	46bd      	mov	sp, r7
 805bb74:	bd80      	pop	{r7, pc}
 805bb76:	bf00      	nop
 805bb78:	08071270 	.word	0x08071270
 805bb7c:	08071000 	.word	0x08071000
 805bb80:	08071008 	.word	0x08071008
 805bb84:	08071074 	.word	0x08071074
 805bb88:	0807100c 	.word	0x0807100c
 805bb8c:	2406e528 	.word	0x2406e528
 805bb90:	2406e62c 	.word	0x2406e62c

0805bb94 <MIN_Handler_TURN_OFF_EXT_LASER_ACK>:

static void MIN_Handler_TURN_OFF_EXT_LASER_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805bb94:	b580      	push	{r7, lr}
 805bb96:	b0c6      	sub	sp, #280	@ 0x118
 805bb98:	af00      	add	r7, sp, #0
 805bb9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bb9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805bba2:	6018      	str	r0, [r3, #0]
 805bba4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bba8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bbac:	6019      	str	r1, [r3, #0]
 805bbae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bbb2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bbb6:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805bbb8:	2300      	movs	r3, #0
 805bbba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload TURN_OFF_EXT_LASER_ACK (%u bytes):", len);
 805bbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bbc2:	f107 0210 	add.w	r2, r7, #16
 805bbc6:	18d0      	adds	r0, r2, r3
 805bbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bbcc:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bbd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bbd4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bbd8:	781b      	ldrb	r3, [r3, #0]
 805bbda:	4a42      	ldr	r2, [pc, #264]	@ (805bce4 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x150>)
 805bbdc:	f00d fd00 	bl	80695e0 <sniprintf>
 805bbe0:	4602      	mov	r2, r0
 805bbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bbe6:	4413      	add	r3, r2
 805bbe8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bbec:	2300      	movs	r3, #0
 805bbee:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bbf2:	e01f      	b.n	805bc34 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bbf8:	f107 0210 	add.w	r2, r7, #16
 805bbfc:	18d0      	adds	r0, r2, r3
 805bbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bc02:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bc06:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bc0a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805bc0e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805bc12:	6812      	ldr	r2, [r2, #0]
 805bc14:	4413      	add	r3, r2
 805bc16:	781b      	ldrb	r3, [r3, #0]
 805bc18:	4a33      	ldr	r2, [pc, #204]	@ (805bce8 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x154>)
 805bc1a:	f00d fce1 	bl	80695e0 <sniprintf>
 805bc1e:	4602      	mov	r2, r0
 805bc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bc24:	4413      	add	r3, r2
 805bc26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bc2a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bc2e:	3301      	adds	r3, #1
 805bc30:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bc34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bc38:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bc3c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805bc40:	781b      	ldrb	r3, [r3, #0]
 805bc42:	429a      	cmp	r2, r3
 805bc44:	d203      	bcs.n	805bc4e <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0xba>
 805bc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bc4a:	2bfb      	cmp	r3, #251	@ 0xfb
 805bc4c:	d9d2      	bls.n	805bbf4 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bc52:	f107 0210 	add.w	r2, r7, #16
 805bc56:	18d0      	adds	r0, r2, r3
 805bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bc5c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805bc60:	4a22      	ldr	r2, [pc, #136]	@ (805bcec <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x158>)
 805bc62:	4619      	mov	r1, r3
 805bc64:	f00d fcbc 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bc68:	f107 0310 	add.w	r3, r7, #16
 805bc6c:	4619      	mov	r1, r3
 805bc6e:	4820      	ldr	r0, [pc, #128]	@ (805bcf0 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x15c>)
 805bc70:	f00d fca4 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805bc74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bc78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bc7c:	f107 0010 	add.w	r0, r7, #16
 805bc80:	681b      	ldr	r3, [r3, #0]
 805bc82:	4a1c      	ldr	r2, [pc, #112]	@ (805bcf4 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x160>)
 805bc84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805bc88:	f00d fcaa 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bc8c:	f107 0310 	add.w	r3, r7, #16
 805bc90:	4619      	mov	r1, r3
 805bc92:	4817      	ldr	r0, [pc, #92]	@ (805bcf0 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x15c>)
 805bc94:	f00d fc92 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805bc98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bc9c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bca0:	781a      	ldrb	r2, [r3, #0]
 805bca2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bca6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bcaa:	6819      	ldr	r1, [r3, #0]
 805bcac:	4812      	ldr	r0, [pc, #72]	@ (805bcf8 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x164>)
 805bcae:	f00d fe44 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805bcb2:	4a11      	ldr	r2, [pc, #68]	@ (805bcf8 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x164>)
 805bcb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bcb8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bcbc:	781b      	ldrb	r3, [r3, #0]
 805bcbe:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805bcc2:	4b0d      	ldr	r3, [pc, #52]	@ (805bcf8 <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x164>)
 805bcc4:	2201      	movs	r2, #1
 805bcc6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805bcca:	4b0c      	ldr	r3, [pc, #48]	@ (805bcfc <MIN_Handler_TURN_OFF_EXT_LASER_ACK+0x168>)
 805bccc:	6818      	ldr	r0, [r3, #0]
 805bcce:	2300      	movs	r3, #0
 805bcd0:	2200      	movs	r2, #0
 805bcd2:	2100      	movs	r1, #0
 805bcd4:	f7f9 fadc 	bl	8055290 <xQueueGenericSend>
    }
}
 805bcd8:	bf00      	nop
 805bcda:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805bcde:	46bd      	mov	sp, r7
 805bce0:	bd80      	pop	{r7, pc}
 805bce2:	bf00      	nop
 805bce4:	0807129c 	.word	0x0807129c
 805bce8:	08071000 	.word	0x08071000
 805bcec:	08071008 	.word	0x08071008
 805bcf0:	08071074 	.word	0x08071074
 805bcf4:	0807100c 	.word	0x0807100c
 805bcf8:	2406e528 	.word	0x2406e528
 805bcfc:	2406e62c 	.word	0x2406e62c

0805bd00 <MIN_Handler_CUSTOM_COMMAND_ACK>:

static void MIN_Handler_CUSTOM_COMMAND_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805bd00:	b580      	push	{r7, lr}
 805bd02:	b0c6      	sub	sp, #280	@ 0x118
 805bd04:	af00      	add	r7, sp, #0
 805bd06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bd0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805bd0e:	6018      	str	r0, [r3, #0]
 805bd10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bd14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bd18:	6019      	str	r1, [r3, #0]
 805bd1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bd1e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bd22:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805bd24:	2300      	movs	r3, #0
 805bd26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload CUSTOM_COMMAND_ACK (%u bytes):", len);
 805bd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd2e:	f107 0210 	add.w	r2, r7, #16
 805bd32:	18d0      	adds	r0, r2, r3
 805bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd38:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bd3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bd40:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bd44:	781b      	ldrb	r3, [r3, #0]
 805bd46:	4a42      	ldr	r2, [pc, #264]	@ (805be50 <MIN_Handler_CUSTOM_COMMAND_ACK+0x150>)
 805bd48:	f00d fc4a 	bl	80695e0 <sniprintf>
 805bd4c:	4602      	mov	r2, r0
 805bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd52:	4413      	add	r3, r2
 805bd54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bd58:	2300      	movs	r3, #0
 805bd5a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bd5e:	e01f      	b.n	805bda0 <MIN_Handler_CUSTOM_COMMAND_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805bd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd64:	f107 0210 	add.w	r2, r7, #16
 805bd68:	18d0      	adds	r0, r2, r3
 805bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd6e:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bd72:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bd76:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805bd7a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805bd7e:	6812      	ldr	r2, [r2, #0]
 805bd80:	4413      	add	r3, r2
 805bd82:	781b      	ldrb	r3, [r3, #0]
 805bd84:	4a33      	ldr	r2, [pc, #204]	@ (805be54 <MIN_Handler_CUSTOM_COMMAND_ACK+0x154>)
 805bd86:	f00d fc2b 	bl	80695e0 <sniprintf>
 805bd8a:	4602      	mov	r2, r0
 805bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bd90:	4413      	add	r3, r2
 805bd92:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bd96:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bd9a:	3301      	adds	r3, #1
 805bd9c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bda0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bda4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bda8:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805bdac:	781b      	ldrb	r3, [r3, #0]
 805bdae:	429a      	cmp	r2, r3
 805bdb0:	d203      	bcs.n	805bdba <MIN_Handler_CUSTOM_COMMAND_ACK+0xba>
 805bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bdb6:	2bfb      	cmp	r3, #251	@ 0xfb
 805bdb8:	d9d2      	bls.n	805bd60 <MIN_Handler_CUSTOM_COMMAND_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805bdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bdbe:	f107 0210 	add.w	r2, r7, #16
 805bdc2:	18d0      	adds	r0, r2, r3
 805bdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bdc8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805bdcc:	4a22      	ldr	r2, [pc, #136]	@ (805be58 <MIN_Handler_CUSTOM_COMMAND_ACK+0x158>)
 805bdce:	4619      	mov	r1, r3
 805bdd0:	f00d fc06 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bdd4:	f107 0310 	add.w	r3, r7, #16
 805bdd8:	4619      	mov	r1, r3
 805bdda:	4820      	ldr	r0, [pc, #128]	@ (805be5c <MIN_Handler_CUSTOM_COMMAND_ACK+0x15c>)
 805bddc:	f00d fbee 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805bde0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bde4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bde8:	f107 0010 	add.w	r0, r7, #16
 805bdec:	681b      	ldr	r3, [r3, #0]
 805bdee:	4a1c      	ldr	r2, [pc, #112]	@ (805be60 <MIN_Handler_CUSTOM_COMMAND_ACK+0x160>)
 805bdf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805bdf4:	f00d fbf4 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bdf8:	f107 0310 	add.w	r3, r7, #16
 805bdfc:	4619      	mov	r1, r3
 805bdfe:	4817      	ldr	r0, [pc, #92]	@ (805be5c <MIN_Handler_CUSTOM_COMMAND_ACK+0x15c>)
 805be00:	f00d fbdc 	bl	80695bc <iprintf>
    if (len <= sizeof(g_last_response_data.data)) {
        memcpy(g_last_response_data.data, payload, len);
 805be04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be08:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805be0c:	781a      	ldrb	r2, [r3, #0]
 805be0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805be16:	6819      	ldr	r1, [r3, #0]
 805be18:	4812      	ldr	r0, [pc, #72]	@ (805be64 <MIN_Handler_CUSTOM_COMMAND_ACK+0x164>)
 805be1a:	f00d fd8e 	bl	806993a <memcpy>
        g_last_response_data.length = len;
 805be1e:	4a11      	ldr	r2, [pc, #68]	@ (805be64 <MIN_Handler_CUSTOM_COMMAND_ACK+0x164>)
 805be20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be24:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805be28:	781b      	ldrb	r3, [r3, #0]
 805be2a:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
        g_last_response_data.valid = 1;
 805be2e:	4b0d      	ldr	r3, [pc, #52]	@ (805be64 <MIN_Handler_CUSTOM_COMMAND_ACK+0x164>)
 805be30:	2201      	movs	r2, #1
 805be32:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        xSemaphoreGive(g_response_data_semaphore);
 805be36:	4b0c      	ldr	r3, [pc, #48]	@ (805be68 <MIN_Handler_CUSTOM_COMMAND_ACK+0x168>)
 805be38:	6818      	ldr	r0, [r3, #0]
 805be3a:	2300      	movs	r3, #0
 805be3c:	2200      	movs	r2, #0
 805be3e:	2100      	movs	r1, #0
 805be40:	f7f9 fa26 	bl	8055290 <xQueueGenericSend>
    }
}
 805be44:	bf00      	nop
 805be46:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805be4a:	46bd      	mov	sp, r7
 805be4c:	bd80      	pop	{r7, pc}
 805be4e:	bf00      	nop
 805be50:	080712c8 	.word	0x080712c8
 805be54:	08071000 	.word	0x08071000
 805be58:	08071008 	.word	0x08071008
 805be5c:	08071074 	.word	0x08071074
 805be60:	0807100c 	.word	0x0807100c
 805be64:	2406e528 	.word	0x2406e528
 805be68:	2406e62c 	.word	0x2406e62c

0805be6c <MIN_Handler_PING_CMD>:

static void MIN_Handler_PING_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805be6c:	b580      	push	{r7, lr}
 805be6e:	b0c6      	sub	sp, #280	@ 0x118
 805be70:	af00      	add	r7, sp, #0
 805be72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805be7a:	6018      	str	r0, [r3, #0]
 805be7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805be84:	6019      	str	r1, [r3, #0]
 805be86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805be8a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805be8e:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805be90:	2300      	movs	r3, #0
 805be92:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload PING_CMD (%u bytes):", len);
 805be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805be9a:	f107 0210 	add.w	r2, r7, #16
 805be9e:	18d0      	adds	r0, r2, r3
 805bea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bea4:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bea8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805beac:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805beb0:	781b      	ldrb	r3, [r3, #0]
 805beb2:	4a32      	ldr	r2, [pc, #200]	@ (805bf7c <MIN_Handler_PING_CMD+0x110>)
 805beb4:	f00d fb94 	bl	80695e0 <sniprintf>
 805beb8:	4602      	mov	r2, r0
 805beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bebe:	4413      	add	r3, r2
 805bec0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bec4:	2300      	movs	r3, #0
 805bec6:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805beca:	e01f      	b.n	805bf0c <MIN_Handler_PING_CMD+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bed0:	f107 0210 	add.w	r2, r7, #16
 805bed4:	18d0      	adds	r0, r2, r3
 805bed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805beda:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bede:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bee2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805bee6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805beea:	6812      	ldr	r2, [r2, #0]
 805beec:	4413      	add	r3, r2
 805beee:	781b      	ldrb	r3, [r3, #0]
 805bef0:	4a23      	ldr	r2, [pc, #140]	@ (805bf80 <MIN_Handler_PING_CMD+0x114>)
 805bef2:	f00d fb75 	bl	80695e0 <sniprintf>
 805bef6:	4602      	mov	r2, r0
 805bef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805befc:	4413      	add	r3, r2
 805befe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bf02:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805bf06:	3301      	adds	r3, #1
 805bf08:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bf0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bf10:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bf14:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805bf18:	781b      	ldrb	r3, [r3, #0]
 805bf1a:	429a      	cmp	r2, r3
 805bf1c:	d203      	bcs.n	805bf26 <MIN_Handler_PING_CMD+0xba>
 805bf1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bf22:	2bfb      	cmp	r3, #251	@ 0xfb
 805bf24:	d9d2      	bls.n	805becc <MIN_Handler_PING_CMD+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805bf26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bf2a:	f107 0210 	add.w	r2, r7, #16
 805bf2e:	18d0      	adds	r0, r2, r3
 805bf30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bf34:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805bf38:	4a12      	ldr	r2, [pc, #72]	@ (805bf84 <MIN_Handler_PING_CMD+0x118>)
 805bf3a:	4619      	mov	r1, r3
 805bf3c:	f00d fb50 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bf40:	f107 0310 	add.w	r3, r7, #16
 805bf44:	4619      	mov	r1, r3
 805bf46:	4810      	ldr	r0, [pc, #64]	@ (805bf88 <MIN_Handler_PING_CMD+0x11c>)
 805bf48:	f00d fb38 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805bf4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bf50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bf54:	f107 0010 	add.w	r0, r7, #16
 805bf58:	681b      	ldr	r3, [r3, #0]
 805bf5a:	4a0c      	ldr	r2, [pc, #48]	@ (805bf8c <MIN_Handler_PING_CMD+0x120>)
 805bf5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805bf60:	f00d fb3e 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805bf64:	f107 0310 	add.w	r3, r7, #16
 805bf68:	4619      	mov	r1, r3
 805bf6a:	4807      	ldr	r0, [pc, #28]	@ (805bf88 <MIN_Handler_PING_CMD+0x11c>)
 805bf6c:	f00d fb26 	bl	80695bc <iprintf>
}
 805bf70:	bf00      	nop
 805bf72:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805bf76:	46bd      	mov	sp, r7
 805bf78:	bd80      	pop	{r7, pc}
 805bf7a:	bf00      	nop
 805bf7c:	080712f0 	.word	0x080712f0
 805bf80:	08071000 	.word	0x08071000
 805bf84:	08071008 	.word	0x08071008
 805bf88:	08071074 	.word	0x08071074
 805bf8c:	0807100c 	.word	0x0807100c

0805bf90 <MIN_Handler_PONG_CMD>:

static void MIN_Handler_PONG_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805bf90:	b580      	push	{r7, lr}
 805bf92:	b0c6      	sub	sp, #280	@ 0x118
 805bf94:	af00      	add	r7, sp, #0
 805bf96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bf9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805bf9e:	6018      	str	r0, [r3, #0]
 805bfa0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bfa4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805bfa8:	6019      	str	r1, [r3, #0]
 805bfaa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bfae:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bfb2:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805bfb4:	2300      	movs	r3, #0
 805bfb6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload PONG_CMD (%u bytes):", len);
 805bfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bfbe:	f107 0210 	add.w	r2, r7, #16
 805bfc2:	18d0      	adds	r0, r2, r3
 805bfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bfc8:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805bfcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805bfd0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805bfd4:	781b      	ldrb	r3, [r3, #0]
 805bfd6:	4a32      	ldr	r2, [pc, #200]	@ (805c0a0 <MIN_Handler_PONG_CMD+0x110>)
 805bfd8:	f00d fb02 	bl	80695e0 <sniprintf>
 805bfdc:	4602      	mov	r2, r0
 805bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bfe2:	4413      	add	r3, r2
 805bfe4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805bfe8:	2300      	movs	r3, #0
 805bfea:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805bfee:	e01f      	b.n	805c030 <MIN_Handler_PONG_CMD+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805bff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bff4:	f107 0210 	add.w	r2, r7, #16
 805bff8:	18d0      	adds	r0, r2, r3
 805bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805bffe:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c002:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c006:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c00a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c00e:	6812      	ldr	r2, [r2, #0]
 805c010:	4413      	add	r3, r2
 805c012:	781b      	ldrb	r3, [r3, #0]
 805c014:	4a23      	ldr	r2, [pc, #140]	@ (805c0a4 <MIN_Handler_PONG_CMD+0x114>)
 805c016:	f00d fae3 	bl	80695e0 <sniprintf>
 805c01a:	4602      	mov	r2, r0
 805c01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c020:	4413      	add	r3, r2
 805c022:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c026:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c02a:	3301      	adds	r3, #1
 805c02c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c030:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c034:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c038:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c03c:	781b      	ldrb	r3, [r3, #0]
 805c03e:	429a      	cmp	r2, r3
 805c040:	d203      	bcs.n	805c04a <MIN_Handler_PONG_CMD+0xba>
 805c042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c046:	2bfb      	cmp	r3, #251	@ 0xfb
 805c048:	d9d2      	bls.n	805bff0 <MIN_Handler_PONG_CMD+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c04e:	f107 0210 	add.w	r2, r7, #16
 805c052:	18d0      	adds	r0, r2, r3
 805c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c058:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c05c:	4a12      	ldr	r2, [pc, #72]	@ (805c0a8 <MIN_Handler_PONG_CMD+0x118>)
 805c05e:	4619      	mov	r1, r3
 805c060:	f00d fabe 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c064:	f107 0310 	add.w	r3, r7, #16
 805c068:	4619      	mov	r1, r3
 805c06a:	4810      	ldr	r0, [pc, #64]	@ (805c0ac <MIN_Handler_PONG_CMD+0x11c>)
 805c06c:	f00d faa6 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c070:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c074:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c078:	f107 0010 	add.w	r0, r7, #16
 805c07c:	681b      	ldr	r3, [r3, #0]
 805c07e:	4a0c      	ldr	r2, [pc, #48]	@ (805c0b0 <MIN_Handler_PONG_CMD+0x120>)
 805c080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c084:	f00d faac 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c088:	f107 0310 	add.w	r3, r7, #16
 805c08c:	4619      	mov	r1, r3
 805c08e:	4807      	ldr	r0, [pc, #28]	@ (805c0ac <MIN_Handler_PONG_CMD+0x11c>)
 805c090:	f00d fa94 	bl	80695bc <iprintf>
}
 805c094:	bf00      	nop
 805c096:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c09a:	46bd      	mov	sp, r7
 805c09c:	bd80      	pop	{r7, pc}
 805c09e:	bf00      	nop
 805c0a0:	08071310 	.word	0x08071310
 805c0a4:	08071000 	.word	0x08071000
 805c0a8:	08071008 	.word	0x08071008
 805c0ac:	08071074 	.word	0x08071074
 805c0b0:	0807100c 	.word	0x0807100c

0805c0b4 <MIN_Handler_MIN_RESP_NAK>:

static void MIN_Handler_MIN_RESP_NAK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c0b4:	b580      	push	{r7, lr}
 805c0b6:	b0c6      	sub	sp, #280	@ 0x118
 805c0b8:	af00      	add	r7, sp, #0
 805c0ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c0be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c0c2:	6018      	str	r0, [r3, #0]
 805c0c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c0c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c0cc:	6019      	str	r1, [r3, #0]
 805c0ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c0d2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c0d6:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c0d8:	2300      	movs	r3, #0
 805c0da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_NAK (%u bytes):", len);
 805c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c0e2:	f107 0210 	add.w	r2, r7, #16
 805c0e6:	18d0      	adds	r0, r2, r3
 805c0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c0ec:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c0f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c0f4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c0f8:	781b      	ldrb	r3, [r3, #0]
 805c0fa:	4a32      	ldr	r2, [pc, #200]	@ (805c1c4 <MIN_Handler_MIN_RESP_NAK+0x110>)
 805c0fc:	f00d fa70 	bl	80695e0 <sniprintf>
 805c100:	4602      	mov	r2, r0
 805c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c106:	4413      	add	r3, r2
 805c108:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c10c:	2300      	movs	r3, #0
 805c10e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c112:	e01f      	b.n	805c154 <MIN_Handler_MIN_RESP_NAK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c118:	f107 0210 	add.w	r2, r7, #16
 805c11c:	18d0      	adds	r0, r2, r3
 805c11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c122:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c126:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c12a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c12e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c132:	6812      	ldr	r2, [r2, #0]
 805c134:	4413      	add	r3, r2
 805c136:	781b      	ldrb	r3, [r3, #0]
 805c138:	4a23      	ldr	r2, [pc, #140]	@ (805c1c8 <MIN_Handler_MIN_RESP_NAK+0x114>)
 805c13a:	f00d fa51 	bl	80695e0 <sniprintf>
 805c13e:	4602      	mov	r2, r0
 805c140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c144:	4413      	add	r3, r2
 805c146:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c14a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c14e:	3301      	adds	r3, #1
 805c150:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c154:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c158:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c15c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c160:	781b      	ldrb	r3, [r3, #0]
 805c162:	429a      	cmp	r2, r3
 805c164:	d203      	bcs.n	805c16e <MIN_Handler_MIN_RESP_NAK+0xba>
 805c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c16a:	2bfb      	cmp	r3, #251	@ 0xfb
 805c16c:	d9d2      	bls.n	805c114 <MIN_Handler_MIN_RESP_NAK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c172:	f107 0210 	add.w	r2, r7, #16
 805c176:	18d0      	adds	r0, r2, r3
 805c178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c17c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c180:	4a12      	ldr	r2, [pc, #72]	@ (805c1cc <MIN_Handler_MIN_RESP_NAK+0x118>)
 805c182:	4619      	mov	r1, r3
 805c184:	f00d fa2c 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c188:	f107 0310 	add.w	r3, r7, #16
 805c18c:	4619      	mov	r1, r3
 805c18e:	4810      	ldr	r0, [pc, #64]	@ (805c1d0 <MIN_Handler_MIN_RESP_NAK+0x11c>)
 805c190:	f00d fa14 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c194:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c198:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c19c:	f107 0010 	add.w	r0, r7, #16
 805c1a0:	681b      	ldr	r3, [r3, #0]
 805c1a2:	4a0c      	ldr	r2, [pc, #48]	@ (805c1d4 <MIN_Handler_MIN_RESP_NAK+0x120>)
 805c1a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c1a8:	f00d fa1a 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c1ac:	f107 0310 	add.w	r3, r7, #16
 805c1b0:	4619      	mov	r1, r3
 805c1b2:	4807      	ldr	r0, [pc, #28]	@ (805c1d0 <MIN_Handler_MIN_RESP_NAK+0x11c>)
 805c1b4:	f00d fa02 	bl	80695bc <iprintf>
}
 805c1b8:	bf00      	nop
 805c1ba:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c1be:	46bd      	mov	sp, r7
 805c1c0:	bd80      	pop	{r7, pc}
 805c1c2:	bf00      	nop
 805c1c4:	08071330 	.word	0x08071330
 805c1c8:	08071000 	.word	0x08071000
 805c1cc:	08071008 	.word	0x08071008
 805c1d0:	08071074 	.word	0x08071074
 805c1d4:	0807100c 	.word	0x0807100c

0805c1d8 <MIN_Handler_MIN_RESP_ACK>:

static void MIN_Handler_MIN_RESP_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c1d8:	b580      	push	{r7, lr}
 805c1da:	b0c6      	sub	sp, #280	@ 0x118
 805c1dc:	af00      	add	r7, sp, #0
 805c1de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c1e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c1e6:	6018      	str	r0, [r3, #0]
 805c1e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c1ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c1f0:	6019      	str	r1, [r3, #0]
 805c1f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c1f6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c1fa:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c1fc:	2300      	movs	r3, #0
 805c1fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_ACK (%u bytes):", len);
 805c202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c206:	f107 0210 	add.w	r2, r7, #16
 805c20a:	18d0      	adds	r0, r2, r3
 805c20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c210:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c218:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c21c:	781b      	ldrb	r3, [r3, #0]
 805c21e:	4a32      	ldr	r2, [pc, #200]	@ (805c2e8 <MIN_Handler_MIN_RESP_ACK+0x110>)
 805c220:	f00d f9de 	bl	80695e0 <sniprintf>
 805c224:	4602      	mov	r2, r0
 805c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c22a:	4413      	add	r3, r2
 805c22c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c230:	2300      	movs	r3, #0
 805c232:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c236:	e01f      	b.n	805c278 <MIN_Handler_MIN_RESP_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c23c:	f107 0210 	add.w	r2, r7, #16
 805c240:	18d0      	adds	r0, r2, r3
 805c242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c246:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c24a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c24e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c252:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c256:	6812      	ldr	r2, [r2, #0]
 805c258:	4413      	add	r3, r2
 805c25a:	781b      	ldrb	r3, [r3, #0]
 805c25c:	4a23      	ldr	r2, [pc, #140]	@ (805c2ec <MIN_Handler_MIN_RESP_ACK+0x114>)
 805c25e:	f00d f9bf 	bl	80695e0 <sniprintf>
 805c262:	4602      	mov	r2, r0
 805c264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c268:	4413      	add	r3, r2
 805c26a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c26e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c272:	3301      	adds	r3, #1
 805c274:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c278:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c27c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c280:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c284:	781b      	ldrb	r3, [r3, #0]
 805c286:	429a      	cmp	r2, r3
 805c288:	d203      	bcs.n	805c292 <MIN_Handler_MIN_RESP_ACK+0xba>
 805c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c28e:	2bfb      	cmp	r3, #251	@ 0xfb
 805c290:	d9d2      	bls.n	805c238 <MIN_Handler_MIN_RESP_ACK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c296:	f107 0210 	add.w	r2, r7, #16
 805c29a:	18d0      	adds	r0, r2, r3
 805c29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c2a0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c2a4:	4a12      	ldr	r2, [pc, #72]	@ (805c2f0 <MIN_Handler_MIN_RESP_ACK+0x118>)
 805c2a6:	4619      	mov	r1, r3
 805c2a8:	f00d f99a 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c2ac:	f107 0310 	add.w	r3, r7, #16
 805c2b0:	4619      	mov	r1, r3
 805c2b2:	4810      	ldr	r0, [pc, #64]	@ (805c2f4 <MIN_Handler_MIN_RESP_ACK+0x11c>)
 805c2b4:	f00d f982 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c2b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c2bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c2c0:	f107 0010 	add.w	r0, r7, #16
 805c2c4:	681b      	ldr	r3, [r3, #0]
 805c2c6:	4a0c      	ldr	r2, [pc, #48]	@ (805c2f8 <MIN_Handler_MIN_RESP_ACK+0x120>)
 805c2c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c2cc:	f00d f988 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c2d0:	f107 0310 	add.w	r3, r7, #16
 805c2d4:	4619      	mov	r1, r3
 805c2d6:	4807      	ldr	r0, [pc, #28]	@ (805c2f4 <MIN_Handler_MIN_RESP_ACK+0x11c>)
 805c2d8:	f00d f970 	bl	80695bc <iprintf>
}
 805c2dc:	bf00      	nop
 805c2de:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c2e2:	46bd      	mov	sp, r7
 805c2e4:	bd80      	pop	{r7, pc}
 805c2e6:	bf00      	nop
 805c2e8:	08071354 	.word	0x08071354
 805c2ec:	08071000 	.word	0x08071000
 805c2f0:	08071008 	.word	0x08071008
 805c2f4:	08071074 	.word	0x08071074
 805c2f8:	0807100c 	.word	0x0807100c

0805c2fc <MIN_Handler_MIN_RESP_WRONG>:

static void MIN_Handler_MIN_RESP_WRONG(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c2fc:	b580      	push	{r7, lr}
 805c2fe:	b0c6      	sub	sp, #280	@ 0x118
 805c300:	af00      	add	r7, sp, #0
 805c302:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c306:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c30a:	6018      	str	r0, [r3, #0]
 805c30c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c310:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c314:	6019      	str	r1, [r3, #0]
 805c316:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c31a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c31e:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c320:	2300      	movs	r3, #0
 805c322:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_WRONG (%u bytes):", len);
 805c326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c32a:	f107 0210 	add.w	r2, r7, #16
 805c32e:	18d0      	adds	r0, r2, r3
 805c330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c334:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c338:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c33c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c340:	781b      	ldrb	r3, [r3, #0]
 805c342:	4a32      	ldr	r2, [pc, #200]	@ (805c40c <MIN_Handler_MIN_RESP_WRONG+0x110>)
 805c344:	f00d f94c 	bl	80695e0 <sniprintf>
 805c348:	4602      	mov	r2, r0
 805c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c34e:	4413      	add	r3, r2
 805c350:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c354:	2300      	movs	r3, #0
 805c356:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c35a:	e01f      	b.n	805c39c <MIN_Handler_MIN_RESP_WRONG+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c360:	f107 0210 	add.w	r2, r7, #16
 805c364:	18d0      	adds	r0, r2, r3
 805c366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c36a:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c36e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c372:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c376:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c37a:	6812      	ldr	r2, [r2, #0]
 805c37c:	4413      	add	r3, r2
 805c37e:	781b      	ldrb	r3, [r3, #0]
 805c380:	4a23      	ldr	r2, [pc, #140]	@ (805c410 <MIN_Handler_MIN_RESP_WRONG+0x114>)
 805c382:	f00d f92d 	bl	80695e0 <sniprintf>
 805c386:	4602      	mov	r2, r0
 805c388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c38c:	4413      	add	r3, r2
 805c38e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c392:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c396:	3301      	adds	r3, #1
 805c398:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c39c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c3a0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c3a4:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c3a8:	781b      	ldrb	r3, [r3, #0]
 805c3aa:	429a      	cmp	r2, r3
 805c3ac:	d203      	bcs.n	805c3b6 <MIN_Handler_MIN_RESP_WRONG+0xba>
 805c3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c3b2:	2bfb      	cmp	r3, #251	@ 0xfb
 805c3b4:	d9d2      	bls.n	805c35c <MIN_Handler_MIN_RESP_WRONG+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c3ba:	f107 0210 	add.w	r2, r7, #16
 805c3be:	18d0      	adds	r0, r2, r3
 805c3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c3c4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c3c8:	4a12      	ldr	r2, [pc, #72]	@ (805c414 <MIN_Handler_MIN_RESP_WRONG+0x118>)
 805c3ca:	4619      	mov	r1, r3
 805c3cc:	f00d f908 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c3d0:	f107 0310 	add.w	r3, r7, #16
 805c3d4:	4619      	mov	r1, r3
 805c3d6:	4810      	ldr	r0, [pc, #64]	@ (805c418 <MIN_Handler_MIN_RESP_WRONG+0x11c>)
 805c3d8:	f00d f8f0 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c3dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c3e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c3e4:	f107 0010 	add.w	r0, r7, #16
 805c3e8:	681b      	ldr	r3, [r3, #0]
 805c3ea:	4a0c      	ldr	r2, [pc, #48]	@ (805c41c <MIN_Handler_MIN_RESP_WRONG+0x120>)
 805c3ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c3f0:	f00d f8f6 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c3f4:	f107 0310 	add.w	r3, r7, #16
 805c3f8:	4619      	mov	r1, r3
 805c3fa:	4807      	ldr	r0, [pc, #28]	@ (805c418 <MIN_Handler_MIN_RESP_WRONG+0x11c>)
 805c3fc:	f00d f8de 	bl	80695bc <iprintf>
}
 805c400:	bf00      	nop
 805c402:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c406:	46bd      	mov	sp, r7
 805c408:	bd80      	pop	{r7, pc}
 805c40a:	bf00      	nop
 805c40c:	08071378 	.word	0x08071378
 805c410:	08071000 	.word	0x08071000
 805c414:	08071008 	.word	0x08071008
 805c418:	08071074 	.word	0x08071074
 805c41c:	0807100c 	.word	0x0807100c

0805c420 <MIN_Handler_MIN_RESP_DONE>:

static void MIN_Handler_MIN_RESP_DONE(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c420:	b580      	push	{r7, lr}
 805c422:	b0c6      	sub	sp, #280	@ 0x118
 805c424:	af00      	add	r7, sp, #0
 805c426:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c42a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c42e:	6018      	str	r0, [r3, #0]
 805c430:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c434:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c438:	6019      	str	r1, [r3, #0]
 805c43a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c43e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c442:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c444:	2300      	movs	r3, #0
 805c446:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_DONE (%u bytes):", len);
 805c44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c44e:	f107 0210 	add.w	r2, r7, #16
 805c452:	18d0      	adds	r0, r2, r3
 805c454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c458:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c45c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c460:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c464:	781b      	ldrb	r3, [r3, #0]
 805c466:	4a32      	ldr	r2, [pc, #200]	@ (805c530 <MIN_Handler_MIN_RESP_DONE+0x110>)
 805c468:	f00d f8ba 	bl	80695e0 <sniprintf>
 805c46c:	4602      	mov	r2, r0
 805c46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c472:	4413      	add	r3, r2
 805c474:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c478:	2300      	movs	r3, #0
 805c47a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c47e:	e01f      	b.n	805c4c0 <MIN_Handler_MIN_RESP_DONE+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c484:	f107 0210 	add.w	r2, r7, #16
 805c488:	18d0      	adds	r0, r2, r3
 805c48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c48e:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c492:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c496:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c49a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c49e:	6812      	ldr	r2, [r2, #0]
 805c4a0:	4413      	add	r3, r2
 805c4a2:	781b      	ldrb	r3, [r3, #0]
 805c4a4:	4a23      	ldr	r2, [pc, #140]	@ (805c534 <MIN_Handler_MIN_RESP_DONE+0x114>)
 805c4a6:	f00d f89b 	bl	80695e0 <sniprintf>
 805c4aa:	4602      	mov	r2, r0
 805c4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c4b0:	4413      	add	r3, r2
 805c4b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c4b6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c4ba:	3301      	adds	r3, #1
 805c4bc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c4c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c4c4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c4c8:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c4cc:	781b      	ldrb	r3, [r3, #0]
 805c4ce:	429a      	cmp	r2, r3
 805c4d0:	d203      	bcs.n	805c4da <MIN_Handler_MIN_RESP_DONE+0xba>
 805c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c4d6:	2bfb      	cmp	r3, #251	@ 0xfb
 805c4d8:	d9d2      	bls.n	805c480 <MIN_Handler_MIN_RESP_DONE+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c4de:	f107 0210 	add.w	r2, r7, #16
 805c4e2:	18d0      	adds	r0, r2, r3
 805c4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c4e8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c4ec:	4a12      	ldr	r2, [pc, #72]	@ (805c538 <MIN_Handler_MIN_RESP_DONE+0x118>)
 805c4ee:	4619      	mov	r1, r3
 805c4f0:	f00d f876 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c4f4:	f107 0310 	add.w	r3, r7, #16
 805c4f8:	4619      	mov	r1, r3
 805c4fa:	4810      	ldr	r0, [pc, #64]	@ (805c53c <MIN_Handler_MIN_RESP_DONE+0x11c>)
 805c4fc:	f00d f85e 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c500:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c504:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c508:	f107 0010 	add.w	r0, r7, #16
 805c50c:	681b      	ldr	r3, [r3, #0]
 805c50e:	4a0c      	ldr	r2, [pc, #48]	@ (805c540 <MIN_Handler_MIN_RESP_DONE+0x120>)
 805c510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c514:	f00d f864 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c518:	f107 0310 	add.w	r3, r7, #16
 805c51c:	4619      	mov	r1, r3
 805c51e:	4807      	ldr	r0, [pc, #28]	@ (805c53c <MIN_Handler_MIN_RESP_DONE+0x11c>)
 805c520:	f00d f84c 	bl	80695bc <iprintf>
}
 805c524:	bf00      	nop
 805c526:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c52a:	46bd      	mov	sp, r7
 805c52c:	bd80      	pop	{r7, pc}
 805c52e:	bf00      	nop
 805c530:	0807139c 	.word	0x0807139c
 805c534:	08071000 	.word	0x08071000
 805c538:	08071008 	.word	0x08071008
 805c53c:	08071074 	.word	0x08071074
 805c540:	0807100c 	.word	0x0807100c

0805c544 <MIN_Handler_MIN_RESP_FAIL>:

static void MIN_Handler_MIN_RESP_FAIL(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c544:	b580      	push	{r7, lr}
 805c546:	b0c6      	sub	sp, #280	@ 0x118
 805c548:	af00      	add	r7, sp, #0
 805c54a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c54e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c552:	6018      	str	r0, [r3, #0]
 805c554:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c558:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c55c:	6019      	str	r1, [r3, #0]
 805c55e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c562:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c566:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c568:	2300      	movs	r3, #0
 805c56a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_FAIL (%u bytes):", len);
 805c56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c572:	f107 0210 	add.w	r2, r7, #16
 805c576:	18d0      	adds	r0, r2, r3
 805c578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c57c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c580:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c584:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c588:	781b      	ldrb	r3, [r3, #0]
 805c58a:	4a32      	ldr	r2, [pc, #200]	@ (805c654 <MIN_Handler_MIN_RESP_FAIL+0x110>)
 805c58c:	f00d f828 	bl	80695e0 <sniprintf>
 805c590:	4602      	mov	r2, r0
 805c592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c596:	4413      	add	r3, r2
 805c598:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c59c:	2300      	movs	r3, #0
 805c59e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c5a2:	e01f      	b.n	805c5e4 <MIN_Handler_MIN_RESP_FAIL+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c5a8:	f107 0210 	add.w	r2, r7, #16
 805c5ac:	18d0      	adds	r0, r2, r3
 805c5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c5b2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c5b6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c5ba:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c5be:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c5c2:	6812      	ldr	r2, [r2, #0]
 805c5c4:	4413      	add	r3, r2
 805c5c6:	781b      	ldrb	r3, [r3, #0]
 805c5c8:	4a23      	ldr	r2, [pc, #140]	@ (805c658 <MIN_Handler_MIN_RESP_FAIL+0x114>)
 805c5ca:	f00d f809 	bl	80695e0 <sniprintf>
 805c5ce:	4602      	mov	r2, r0
 805c5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c5d4:	4413      	add	r3, r2
 805c5d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c5da:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c5de:	3301      	adds	r3, #1
 805c5e0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c5e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c5e8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c5ec:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c5f0:	781b      	ldrb	r3, [r3, #0]
 805c5f2:	429a      	cmp	r2, r3
 805c5f4:	d203      	bcs.n	805c5fe <MIN_Handler_MIN_RESP_FAIL+0xba>
 805c5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c5fa:	2bfb      	cmp	r3, #251	@ 0xfb
 805c5fc:	d9d2      	bls.n	805c5a4 <MIN_Handler_MIN_RESP_FAIL+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c602:	f107 0210 	add.w	r2, r7, #16
 805c606:	18d0      	adds	r0, r2, r3
 805c608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c60c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c610:	4a12      	ldr	r2, [pc, #72]	@ (805c65c <MIN_Handler_MIN_RESP_FAIL+0x118>)
 805c612:	4619      	mov	r1, r3
 805c614:	f00c ffe4 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c618:	f107 0310 	add.w	r3, r7, #16
 805c61c:	4619      	mov	r1, r3
 805c61e:	4810      	ldr	r0, [pc, #64]	@ (805c660 <MIN_Handler_MIN_RESP_FAIL+0x11c>)
 805c620:	f00c ffcc 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c624:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c628:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c62c:	f107 0010 	add.w	r0, r7, #16
 805c630:	681b      	ldr	r3, [r3, #0]
 805c632:	4a0c      	ldr	r2, [pc, #48]	@ (805c664 <MIN_Handler_MIN_RESP_FAIL+0x120>)
 805c634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c638:	f00c ffd2 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c63c:	f107 0310 	add.w	r3, r7, #16
 805c640:	4619      	mov	r1, r3
 805c642:	4807      	ldr	r0, [pc, #28]	@ (805c660 <MIN_Handler_MIN_RESP_FAIL+0x11c>)
 805c644:	f00c ffba 	bl	80695bc <iprintf>
}
 805c648:	bf00      	nop
 805c64a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c64e:	46bd      	mov	sp, r7
 805c650:	bd80      	pop	{r7, pc}
 805c652:	bf00      	nop
 805c654:	080713c0 	.word	0x080713c0
 805c658:	08071000 	.word	0x08071000
 805c65c:	08071008 	.word	0x08071008
 805c660:	08071074 	.word	0x08071074
 805c664:	0807100c 	.word	0x0807100c

0805c668 <MIN_Handler_MIN_RESP_OK>:

static void MIN_Handler_MIN_RESP_OK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 805c668:	b580      	push	{r7, lr}
 805c66a:	b0c6      	sub	sp, #280	@ 0x118
 805c66c:	af00      	add	r7, sp, #0
 805c66e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 805c676:	6018      	str	r0, [r3, #0]
 805c678:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c67c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c680:	6019      	str	r1, [r3, #0]
 805c682:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c686:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c68a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 805c68c:	2300      	movs	r3, #0
 805c68e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload MIN_RESP_OK (%u bytes):", len);
 805c692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c696:	f107 0210 	add.w	r2, r7, #16
 805c69a:	18d0      	adds	r0, r2, r3
 805c69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c6a0:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c6a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c6a8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c6ac:	781b      	ldrb	r3, [r3, #0]
 805c6ae:	4a32      	ldr	r2, [pc, #200]	@ (805c778 <MIN_Handler_MIN_RESP_OK+0x110>)
 805c6b0:	f00c ff96 	bl	80695e0 <sniprintf>
 805c6b4:	4602      	mov	r2, r0
 805c6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c6ba:	4413      	add	r3, r2
 805c6bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c6c0:	2300      	movs	r3, #0
 805c6c2:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c6c6:	e01f      	b.n	805c708 <MIN_Handler_MIN_RESP_OK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 805c6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c6cc:	f107 0210 	add.w	r2, r7, #16
 805c6d0:	18d0      	adds	r0, r2, r3
 805c6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c6d6:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 805c6da:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c6de:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 805c6e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 805c6e6:	6812      	ldr	r2, [r2, #0]
 805c6e8:	4413      	add	r3, r2
 805c6ea:	781b      	ldrb	r3, [r3, #0]
 805c6ec:	4a23      	ldr	r2, [pc, #140]	@ (805c77c <MIN_Handler_MIN_RESP_OK+0x114>)
 805c6ee:	f00c ff77 	bl	80695e0 <sniprintf>
 805c6f2:	4602      	mov	r2, r0
 805c6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c6f8:	4413      	add	r3, r2
 805c6fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 805c6fe:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 805c702:	3301      	adds	r3, #1
 805c704:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 805c708:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c70c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 805c710:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 805c714:	781b      	ldrb	r3, [r3, #0]
 805c716:	429a      	cmp	r2, r3
 805c718:	d203      	bcs.n	805c722 <MIN_Handler_MIN_RESP_OK+0xba>
 805c71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c71e:	2bfb      	cmp	r3, #251	@ 0xfb
 805c720:	d9d2      	bls.n	805c6c8 <MIN_Handler_MIN_RESP_OK+0x60>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 805c722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c726:	f107 0210 	add.w	r2, r7, #16
 805c72a:	18d0      	adds	r0, r2, r3
 805c72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 805c730:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 805c734:	4a12      	ldr	r2, [pc, #72]	@ (805c780 <MIN_Handler_MIN_RESP_OK+0x118>)
 805c736:	4619      	mov	r1, r3
 805c738:	f00c ff52 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c73c:	f107 0310 	add.w	r3, r7, #16
 805c740:	4619      	mov	r1, r3
 805c742:	4810      	ldr	r0, [pc, #64]	@ (805c784 <MIN_Handler_MIN_RESP_OK+0x11c>)
 805c744:	f00c ff3a 	bl	80695bc <iprintf>
    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 805c748:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 805c74c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 805c750:	f107 0010 	add.w	r0, r7, #16
 805c754:	681b      	ldr	r3, [r3, #0]
 805c756:	4a0c      	ldr	r2, [pc, #48]	@ (805c788 <MIN_Handler_MIN_RESP_OK+0x120>)
 805c758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805c75c:	f00c ff40 	bl	80695e0 <sniprintf>
    printf("%s", buffer);
 805c760:	f107 0310 	add.w	r3, r7, #16
 805c764:	4619      	mov	r1, r3
 805c766:	4807      	ldr	r0, [pc, #28]	@ (805c784 <MIN_Handler_MIN_RESP_OK+0x11c>)
 805c768:	f00c ff28 	bl	80695bc <iprintf>
}
 805c76c:	bf00      	nop
 805c76e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 805c772:	46bd      	mov	sp, r7
 805c774:	bd80      	pop	{r7, pc}
 805c776:	bf00      	nop
 805c778:	080713e4 	.word	0x080713e4
 805c77c:	08071000 	.word	0x08071000
 805c780:	08071008 	.word	0x08071008
 805c784:	08071074 	.word	0x08071074
 805c788:	0807100c 	.word	0x0807100c

0805c78c <MIN_GetCommandTable>:

// =================================================================
// Helper Functions
// =================================================================

const MIN_Command_t *MIN_GetCommandTable(void) {
 805c78c:	b480      	push	{r7}
 805c78e:	af00      	add	r7, sp, #0
    return command_table;
 805c790:	4b02      	ldr	r3, [pc, #8]	@ (805c79c <MIN_GetCommandTable+0x10>)
}
 805c792:	4618      	mov	r0, r3
 805c794:	46bd      	mov	sp, r7
 805c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c79a:	4770      	bx	lr
 805c79c:	08072420 	.word	0x08072420

0805c7a0 <MIN_GetCommandTableSize>:

int MIN_GetCommandTableSize(void) {
 805c7a0:	b480      	push	{r7}
 805c7a2:	af00      	add	r7, sp, #0
    return command_table_size;
 805c7a4:	2319      	movs	r3, #25
}
 805c7a6:	4618      	mov	r0, r3
 805c7a8:	46bd      	mov	sp, r7
 805c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c7ae:	4770      	bx	lr

0805c7b0 <MODFSP_Init>:

// Static instance for global usage (can be removed if you prefer instance-based approach)
static MODFSP_Data_t global_instance;

MODFSP_Return_t MODFSP_Init(MODFSP_Data_t *this)
{
 805c7b0:	b580      	push	{r7, lr}
 805c7b2:	b082      	sub	sp, #8
 805c7b4:	af00      	add	r7, sp, #0
 805c7b6:	6078      	str	r0, [r7, #4]
    if (this == NULL) {
 805c7b8:	687b      	ldr	r3, [r7, #4]
 805c7ba:	2b00      	cmp	r3, #0
 805c7bc:	d101      	bne.n	805c7c2 <MODFSP_Init+0x12>
        return MODFSP_ERR;
 805c7be:	2301      	movs	r3, #1
 805c7c0:	e003      	b.n	805c7ca <MODFSP_Init+0x1a>
    }
    
    MODFSP_Reset(this);
 805c7c2:	6878      	ldr	r0, [r7, #4]
 805c7c4:	f000 f816 	bl	805c7f4 <MODFSP_Reset>
    return MODFSP_OK;
 805c7c8:	2300      	movs	r3, #0
}
 805c7ca:	4618      	mov	r0, r3
 805c7cc:	3708      	adds	r7, #8
 805c7ce:	46bd      	mov	sp, r7
 805c7d0:	bd80      	pop	{r7, pc}

0805c7d2 <crc_init>:

static void crc_init(MODFSP_Data_t *this, MODFSP_CRC_t *crc_obj)
{
 805c7d2:	b580      	push	{r7, lr}
 805c7d4:	b082      	sub	sp, #8
 805c7d6:	af00      	add	r7, sp, #0
 805c7d8:	6078      	str	r0, [r7, #4]
 805c7da:	6039      	str	r1, [r7, #0]
    (void)this;
    memset(crc_obj, 0x00, sizeof(*crc_obj));
 805c7dc:	2202      	movs	r2, #2
 805c7de:	2100      	movs	r1, #0
 805c7e0:	6838      	ldr	r0, [r7, #0]
 805c7e2:	f00c ffff 	bl	80697e4 <memset>
    crc_obj->crc = CRC16_XMODEM_INIT;
 805c7e6:	683b      	ldr	r3, [r7, #0]
 805c7e8:	2200      	movs	r2, #0
 805c7ea:	801a      	strh	r2, [r3, #0]
}
 805c7ec:	bf00      	nop
 805c7ee:	3708      	adds	r7, #8
 805c7f0:	46bd      	mov	sp, r7
 805c7f2:	bd80      	pop	{r7, pc}

0805c7f4 <MODFSP_Reset>:

void MODFSP_Reset(MODFSP_Data_t *this)
{
 805c7f4:	b580      	push	{r7, lr}
 805c7f6:	b082      	sub	sp, #8
 805c7f8:	af00      	add	r7, sp, #0
 805c7fa:	6078      	str	r0, [r7, #4]
    if (this == NULL) return;
 805c7fc:	687b      	ldr	r3, [r7, #4]
 805c7fe:	2b00      	cmp	r3, #0
 805c800:	d023      	beq.n	805c84a <MODFSP_Reset+0x56>
    
    memset(&this->data, 0x00, sizeof(this->data));
 805c802:	687b      	ldr	r3, [r7, #4]
 805c804:	3304      	adds	r3, #4
 805c806:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 805c80a:	2100      	movs	r1, #0
 805c80c:	4618      	mov	r0, r3
 805c80e:	f00c ffe9 	bl	80697e4 <memset>
    this->state = SFP_DECODE_START1; 
 805c812:	687b      	ldr	r3, [r7, #4]
 805c814:	2200      	movs	r2, #0
 805c816:	701a      	strb	r2, [r3, #0]
    this->crc16.crc = CRC16_XMODEM_INIT;
 805c818:	687b      	ldr	r3, [r7, #4]
 805c81a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805c81e:	2200      	movs	r2, #0
 805c820:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
    this->index = 0;
 805c824:	687b      	ldr	r3, [r7, #4]
 805c826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805c82a:	2200      	movs	r2, #0
 805c82c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
    this->length = 0;
 805c830:	687b      	ldr	r3, [r7, #4]
 805c832:	2200      	movs	r2, #0
 805c834:	805a      	strh	r2, [r3, #2]
    this->crc16_data = 0;
 805c836:	687b      	ldr	r3, [r7, #4]
 805c838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805c83c:	2200      	movs	r2, #0
 805c83e:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
    this->id = 0;
 805c842:	687b      	ldr	r3, [r7, #4]
 805c844:	2200      	movs	r2, #0
 805c846:	705a      	strb	r2, [r3, #1]
 805c848:	e000      	b.n	805c84c <MODFSP_Reset+0x58>
    if (this == NULL) return;
 805c84a:	bf00      	nop
}
 805c84c:	3708      	adds	r7, #8
 805c84e:	46bd      	mov	sp, r7
 805c850:	bd80      	pop	{r7, pc}

0805c852 <crc16_xmodem_update>:

uint16_t crc16_xmodem_update(uint16_t crc, uint8_t data)
{
 805c852:	b480      	push	{r7}
 805c854:	b085      	sub	sp, #20
 805c856:	af00      	add	r7, sp, #0
 805c858:	4603      	mov	r3, r0
 805c85a:	460a      	mov	r2, r1
 805c85c:	80fb      	strh	r3, [r7, #6]
 805c85e:	4613      	mov	r3, r2
 805c860:	717b      	strb	r3, [r7, #5]
    crc ^= ((uint16_t)data) << 8;
 805c862:	797b      	ldrb	r3, [r7, #5]
 805c864:	b21b      	sxth	r3, r3
 805c866:	021b      	lsls	r3, r3, #8
 805c868:	b21a      	sxth	r2, r3
 805c86a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805c86e:	4053      	eors	r3, r2
 805c870:	b21b      	sxth	r3, r3
 805c872:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 8; ++i)
 805c874:	2300      	movs	r3, #0
 805c876:	73fb      	strb	r3, [r7, #15]
 805c878:	e013      	b.n	805c8a2 <crc16_xmodem_update+0x50>
    {
        if (crc & 0x8000)
 805c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805c87e:	2b00      	cmp	r3, #0
 805c880:	da09      	bge.n	805c896 <crc16_xmodem_update+0x44>
            crc = (crc << 1) ^ CRC16_XMODEM_POLY;
 805c882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805c886:	005b      	lsls	r3, r3, #1
 805c888:	b21a      	sxth	r2, r3
 805c88a:	f241 0321 	movw	r3, #4129	@ 0x1021
 805c88e:	4053      	eors	r3, r2
 805c890:	b21b      	sxth	r3, r3
 805c892:	80fb      	strh	r3, [r7, #6]
 805c894:	e002      	b.n	805c89c <crc16_xmodem_update+0x4a>
        else
            crc <<= 1;
 805c896:	88fb      	ldrh	r3, [r7, #6]
 805c898:	005b      	lsls	r3, r3, #1
 805c89a:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 8; ++i)
 805c89c:	7bfb      	ldrb	r3, [r7, #15]
 805c89e:	3301      	adds	r3, #1
 805c8a0:	73fb      	strb	r3, [r7, #15]
 805c8a2:	7bfb      	ldrb	r3, [r7, #15]
 805c8a4:	2b07      	cmp	r3, #7
 805c8a6:	d9e8      	bls.n	805c87a <crc16_xmodem_update+0x28>
    }
    return crc;
 805c8a8:	88fb      	ldrh	r3, [r7, #6]
}
 805c8aa:	4618      	mov	r0, r3
 805c8ac:	3714      	adds	r7, #20
 805c8ae:	46bd      	mov	sp, r7
 805c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c8b4:	4770      	bx	lr

0805c8b6 <crc_update>:

static void crc_update(MODFSP_CRC_t* crc_obj, uint8_t data)
{
 805c8b6:	b580      	push	{r7, lr}
 805c8b8:	b082      	sub	sp, #8
 805c8ba:	af00      	add	r7, sp, #0
 805c8bc:	6078      	str	r0, [r7, #4]
 805c8be:	460b      	mov	r3, r1
 805c8c0:	70fb      	strb	r3, [r7, #3]
    crc_obj->crc = crc16_xmodem_update(crc_obj->crc, data);
 805c8c2:	687b      	ldr	r3, [r7, #4]
 805c8c4:	881b      	ldrh	r3, [r3, #0]
 805c8c6:	78fa      	ldrb	r2, [r7, #3]
 805c8c8:	4611      	mov	r1, r2
 805c8ca:	4618      	mov	r0, r3
 805c8cc:	f7ff ffc1 	bl	805c852 <crc16_xmodem_update>
 805c8d0:	4603      	mov	r3, r0
 805c8d2:	461a      	mov	r2, r3
 805c8d4:	687b      	ldr	r3, [r7, #4]
 805c8d6:	801a      	strh	r2, [r3, #0]
}
 805c8d8:	bf00      	nop
 805c8da:	3708      	adds	r7, #8
 805c8dc:	46bd      	mov	sp, r7
 805c8de:	bd80      	pop	{r7, pc}

0805c8e0 <crc_finish>:

static uint16_t crc_finish(MODFSP_CRC_t* crc_obj)
{
 805c8e0:	b480      	push	{r7}
 805c8e2:	b083      	sub	sp, #12
 805c8e4:	af00      	add	r7, sp, #0
 805c8e6:	6078      	str	r0, [r7, #4]
    return crc_obj->crc;
 805c8e8:	687b      	ldr	r3, [r7, #4]
 805c8ea:	881b      	ldrh	r3, [r3, #0]
}
 805c8ec:	4618      	mov	r0, r3
 805c8ee:	370c      	adds	r7, #12
 805c8f0:	46bd      	mov	sp, r7
 805c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c8f6:	4770      	bx	lr

0805c8f8 <go_to_next_rx_state_decode>:

static void go_to_next_rx_state_decode(MODFSP_Data_t *this)
{
 805c8f8:	b480      	push	{r7}
 805c8fa:	b085      	sub	sp, #20
 805c8fc:	af00      	add	r7, sp, #0
 805c8fe:	6078      	str	r0, [r7, #4]
    MODFSP_DecodeState_t next_state = SFP_DECODE_END;
 805c900:	2309      	movs	r3, #9
 805c902:	73fb      	strb	r3, [r7, #15]
    switch (this->state)
 805c904:	687b      	ldr	r3, [r7, #4]
 805c906:	781b      	ldrb	r3, [r3, #0]
 805c908:	2b08      	cmp	r3, #8
 805c90a:	d837      	bhi.n	805c97c <go_to_next_rx_state_decode+0x84>
 805c90c:	a201      	add	r2, pc, #4	@ (adr r2, 805c914 <go_to_next_rx_state_decode+0x1c>)
 805c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 805c912:	bf00      	nop
 805c914:	0805c939 	.word	0x0805c939
 805c918:	0805c93f 	.word	0x0805c93f
 805c91c:	0805c945 	.word	0x0805c945
 805c920:	0805c94b 	.word	0x0805c94b
 805c924:	0805c951 	.word	0x0805c951
 805c928:	0805c965 	.word	0x0805c965
 805c92c:	0805c96b 	.word	0x0805c96b
 805c930:	0805c971 	.word	0x0805c971
 805c934:	0805c977 	.word	0x0805c977
    {
    case SFP_DECODE_START1:
        next_state = SFP_DECODE_START2;
 805c938:	2301      	movs	r3, #1
 805c93a:	73fb      	strb	r3, [r7, #15]
        break;
 805c93c:	e01f      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_START2:
        next_state = SFP_DECODE_ID;
 805c93e:	2302      	movs	r3, #2
 805c940:	73fb      	strb	r3, [r7, #15]
        break;
 805c942:	e01c      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_ID:
        next_state = SFP_DECODE_LEN_LOW;
 805c944:	2303      	movs	r3, #3
 805c946:	73fb      	strb	r3, [r7, #15]
        break;
 805c948:	e019      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_LEN_LOW:
        next_state = SFP_DECODE_LEN_HIGH;
 805c94a:	2304      	movs	r3, #4
 805c94c:	73fb      	strb	r3, [r7, #15]
        break;
 805c94e:	e016      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_LEN_HIGH:
        if (this->length > 0) {
 805c950:	687b      	ldr	r3, [r7, #4]
 805c952:	885b      	ldrh	r3, [r3, #2]
 805c954:	2b00      	cmp	r3, #0
 805c956:	d002      	beq.n	805c95e <go_to_next_rx_state_decode+0x66>
            next_state = SFP_DECODE_DATA;
 805c958:	2305      	movs	r3, #5
 805c95a:	73fb      	strb	r3, [r7, #15]
        } else {
            next_state = SFP_DECODE_CRC;
        }
        break;
 805c95c:	e00f      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
            next_state = SFP_DECODE_CRC;
 805c95e:	2306      	movs	r3, #6
 805c960:	73fb      	strb	r3, [r7, #15]
        break;
 805c962:	e00c      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_DATA:
        next_state = SFP_DECODE_CRC;
 805c964:	2306      	movs	r3, #6
 805c966:	73fb      	strb	r3, [r7, #15]
        break;
 805c968:	e009      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_CRC:
        next_state = SFP_DECODE_STOP1;
 805c96a:	2307      	movs	r3, #7
 805c96c:	73fb      	strb	r3, [r7, #15]
        break;
 805c96e:	e006      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_STOP1:
        next_state = SFP_DECODE_STOP2;
 805c970:	2308      	movs	r3, #8
 805c972:	73fb      	strb	r3, [r7, #15]
        break;
 805c974:	e003      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    case SFP_DECODE_STOP2:
        next_state = SFP_DECODE_START1;
 805c976:	2300      	movs	r3, #0
 805c978:	73fb      	strb	r3, [r7, #15]
        break;
 805c97a:	e000      	b.n	805c97e <go_to_next_rx_state_decode+0x86>
    default:
        break;
 805c97c:	bf00      	nop
    }
    if (next_state != SFP_DECODE_END)
 805c97e:	7bfb      	ldrb	r3, [r7, #15]
 805c980:	2b09      	cmp	r3, #9
 805c982:	d008      	beq.n	805c996 <go_to_next_rx_state_decode+0x9e>
    {
        this->state = next_state;
 805c984:	687b      	ldr	r3, [r7, #4]
 805c986:	7bfa      	ldrb	r2, [r7, #15]
 805c988:	701a      	strb	r2, [r3, #0]
        this->index = 0;
 805c98a:	687b      	ldr	r3, [r7, #4]
 805c98c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805c990:	2200      	movs	r2, #0
 805c992:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
    }
}
 805c996:	bf00      	nop
 805c998:	3714      	adds	r7, #20
 805c99a:	46bd      	mov	sp, r7
 805c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c9a0:	4770      	bx	lr
 805c9a2:	bf00      	nop

0805c9a4 <MODFSP_Read>:

MODFSP_Return_t MODFSP_Read(MODFSP_Data_t *this, const uint8_t *rx_data)
{
 805c9a4:	b580      	push	{r7, lr}
 805c9a6:	b084      	sub	sp, #16
 805c9a8:	af00      	add	r7, sp, #0
 805c9aa:	6078      	str	r0, [r7, #4]
 805c9ac:	6039      	str	r1, [r7, #0]
    uint8_t byte = 0;
 805c9ae:	2300      	movs	r3, #0
 805c9b0:	73fb      	strb	r3, [r7, #15]
    MODFSP_Return_t res = MODFSP_OK;
 805c9b2:	2300      	movs	r3, #0
 805c9b4:	73bb      	strb	r3, [r7, #14]

    if (this == NULL || rx_data == NULL) {
 805c9b6:	687b      	ldr	r3, [r7, #4]
 805c9b8:	2b00      	cmp	r3, #0
 805c9ba:	d002      	beq.n	805c9c2 <MODFSP_Read+0x1e>
 805c9bc:	683b      	ldr	r3, [r7, #0]
 805c9be:	2b00      	cmp	r3, #0
 805c9c0:	d101      	bne.n	805c9c6 <MODFSP_Read+0x22>
        return MODFSP_ERR;
 805c9c2:	2301      	movs	r3, #1
 805c9c4:	e15a      	b.n	805cc7c <MODFSP_Read+0x2d8>
    }

    byte = *rx_data;
 805c9c6:	683b      	ldr	r3, [r7, #0]
 805c9c8:	781b      	ldrb	r3, [r3, #0]
 805c9ca:	73fb      	strb	r3, [r7, #15]

    switch (this->state)
 805c9cc:	687b      	ldr	r3, [r7, #4]
 805c9ce:	781b      	ldrb	r3, [r3, #0]
 805c9d0:	2b08      	cmp	r3, #8
 805c9d2:	f200 813e 	bhi.w	805cc52 <MODFSP_Read+0x2ae>
 805c9d6:	a201      	add	r2, pc, #4	@ (adr r2, 805c9dc <MODFSP_Read+0x38>)
 805c9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 805c9dc:	0805ca01 	.word	0x0805ca01
 805c9e0:	0805ca2d 	.word	0x0805ca2d
 805c9e4:	0805ca49 	.word	0x0805ca49
 805c9e8:	0805ca75 	.word	0x0805ca75
 805c9ec:	0805caa1 	.word	0x0805caa1
 805c9f0:	0805cadd 	.word	0x0805cadd
 805c9f4:	0805cb61 	.word	0x0805cb61
 805c9f8:	0805cc09 	.word	0x0805cc09
 805c9fc:	0805cc2b 	.word	0x0805cc2b
    {
        case SFP_DECODE_START1:
        {

            if (byte == SFP_START1_BYTE)
 805ca00:	7bfb      	ldrb	r3, [r7, #15]
 805ca02:	2bc0      	cmp	r3, #192	@ 0xc0
 805ca04:	f040 812c 	bne.w	805cc60 <MODFSP_Read+0x2bc>
            {
            	MODFSP_Log("Start1");
 805ca08:	489e      	ldr	r0, [pc, #632]	@ (805cc84 <MODFSP_Read+0x2e0>)
 805ca0a:	f000 faa9 	bl	805cf60 <MODFSP_Log>
                MODFSP_Reset(this); /* Reset instance and make it ready for receiving */
 805ca0e:	6878      	ldr	r0, [r7, #4]
 805ca10:	f7ff fef0 	bl	805c7f4 <MODFSP_Reset>
                crc_init(this, &this->crc16);
 805ca14:	687a      	ldr	r2, [r7, #4]
 805ca16:	f241 4306 	movw	r3, #5126	@ 0x1406
 805ca1a:	4413      	add	r3, r2
 805ca1c:	4619      	mov	r1, r3
 805ca1e:	6878      	ldr	r0, [r7, #4]
 805ca20:	f7ff fed7 	bl	805c7d2 <crc_init>
                go_to_next_rx_state_decode(this);
 805ca24:	6878      	ldr	r0, [r7, #4]
 805ca26:	f7ff ff67 	bl	805c8f8 <go_to_next_rx_state_decode>
            }
            break;
 805ca2a:	e119      	b.n	805cc60 <MODFSP_Read+0x2bc>
        }
        case SFP_DECODE_START2:
        {
            if (byte == SFP_START2_BYTE)
 805ca2c:	7bfb      	ldrb	r3, [r7, #15]
 805ca2e:	2bde      	cmp	r3, #222	@ 0xde
 805ca30:	d106      	bne.n	805ca40 <MODFSP_Read+0x9c>
            {
            	MODFSP_Log("Start2");
 805ca32:	4895      	ldr	r0, [pc, #596]	@ (805cc88 <MODFSP_Read+0x2e4>)
 805ca34:	f000 fa94 	bl	805cf60 <MODFSP_Log>
                go_to_next_rx_state_decode(this);
 805ca38:	6878      	ldr	r0, [r7, #4]
 805ca3a:	f7ff ff5d 	bl	805c8f8 <go_to_next_rx_state_decode>
            } else {
                MODFSP_Reset(this);
            }
            break;
 805ca3e:	e114      	b.n	805cc6a <MODFSP_Read+0x2c6>
                MODFSP_Reset(this);
 805ca40:	6878      	ldr	r0, [r7, #4]
 805ca42:	f7ff fed7 	bl	805c7f4 <MODFSP_Reset>
            break;
 805ca46:	e110      	b.n	805cc6a <MODFSP_Read+0x2c6>
        }
        case SFP_DECODE_ID:
        {
            this->id = byte;
 805ca48:	687b      	ldr	r3, [r7, #4]
 805ca4a:	7bfa      	ldrb	r2, [r7, #15]
 805ca4c:	705a      	strb	r2, [r3, #1]
            MODFSP_Log("ID: 0x%02X (%d)", byte, byte);
 805ca4e:	7bfb      	ldrb	r3, [r7, #15]
 805ca50:	7bfa      	ldrb	r2, [r7, #15]
 805ca52:	4619      	mov	r1, r3
 805ca54:	488d      	ldr	r0, [pc, #564]	@ (805cc8c <MODFSP_Read+0x2e8>)
 805ca56:	f000 fa83 	bl	805cf60 <MODFSP_Log>
            crc_update(&this->crc16, byte);
 805ca5a:	687a      	ldr	r2, [r7, #4]
 805ca5c:	f241 4306 	movw	r3, #5126	@ 0x1406
 805ca60:	4413      	add	r3, r2
 805ca62:	7bfa      	ldrb	r2, [r7, #15]
 805ca64:	4611      	mov	r1, r2
 805ca66:	4618      	mov	r0, r3
 805ca68:	f7ff ff25 	bl	805c8b6 <crc_update>
            go_to_next_rx_state_decode(this);
 805ca6c:	6878      	ldr	r0, [r7, #4]
 805ca6e:	f7ff ff43 	bl	805c8f8 <go_to_next_rx_state_decode>
            break;
 805ca72:	e0fa      	b.n	805cc6a <MODFSP_Read+0x2c6>
        }
        case SFP_DECODE_LEN_LOW:
        {
        	MODFSP_Log("LEN-LOW: %d", byte);
 805ca74:	7bfb      	ldrb	r3, [r7, #15]
 805ca76:	4619      	mov	r1, r3
 805ca78:	4885      	ldr	r0, [pc, #532]	@ (805cc90 <MODFSP_Read+0x2ec>)
 805ca7a:	f000 fa71 	bl	805cf60 <MODFSP_Log>
            crc_update(&this->crc16, byte);
 805ca7e:	687a      	ldr	r2, [r7, #4]
 805ca80:	f241 4306 	movw	r3, #5126	@ 0x1406
 805ca84:	4413      	add	r3, r2
 805ca86:	7bfa      	ldrb	r2, [r7, #15]
 805ca88:	4611      	mov	r1, r2
 805ca8a:	4618      	mov	r0, r3
 805ca8c:	f7ff ff13 	bl	805c8b6 <crc_update>
            this->length = byte;
 805ca90:	7bfb      	ldrb	r3, [r7, #15]
 805ca92:	b29a      	uxth	r2, r3
 805ca94:	687b      	ldr	r3, [r7, #4]
 805ca96:	805a      	strh	r2, [r3, #2]
            go_to_next_rx_state_decode(this);
 805ca98:	6878      	ldr	r0, [r7, #4]
 805ca9a:	f7ff ff2d 	bl	805c8f8 <go_to_next_rx_state_decode>
            break;
 805ca9e:	e0e4      	b.n	805cc6a <MODFSP_Read+0x2c6>
        }
        case SFP_DECODE_LEN_HIGH:
        {
        	MODFSP_Log("LEN-HIGH: %d", byte);
 805caa0:	7bfb      	ldrb	r3, [r7, #15]
 805caa2:	4619      	mov	r1, r3
 805caa4:	487b      	ldr	r0, [pc, #492]	@ (805cc94 <MODFSP_Read+0x2f0>)
 805caa6:	f000 fa5b 	bl	805cf60 <MODFSP_Log>
            crc_update(&this->crc16, byte);
 805caaa:	687a      	ldr	r2, [r7, #4]
 805caac:	f241 4306 	movw	r3, #5126	@ 0x1406
 805cab0:	4413      	add	r3, r2
 805cab2:	7bfa      	ldrb	r2, [r7, #15]
 805cab4:	4611      	mov	r1, r2
 805cab6:	4618      	mov	r0, r3
 805cab8:	f7ff fefd 	bl	805c8b6 <crc_update>
            this->length |= ((uint16_t)byte) << 8;
 805cabc:	687b      	ldr	r3, [r7, #4]
 805cabe:	885b      	ldrh	r3, [r3, #2]
 805cac0:	b21a      	sxth	r2, r3
 805cac2:	7bfb      	ldrb	r3, [r7, #15]
 805cac4:	b21b      	sxth	r3, r3
 805cac6:	021b      	lsls	r3, r3, #8
 805cac8:	b21b      	sxth	r3, r3
 805caca:	4313      	orrs	r3, r2
 805cacc:	b21b      	sxth	r3, r3
 805cace:	b29a      	uxth	r2, r3
 805cad0:	687b      	ldr	r3, [r7, #4]
 805cad2:	805a      	strh	r2, [r3, #2]
            go_to_next_rx_state_decode(this);
 805cad4:	6878      	ldr	r0, [r7, #4]
 805cad6:	f7ff ff0f 	bl	805c8f8 <go_to_next_rx_state_decode>
            break;
 805cada:	e0c6      	b.n	805cc6a <MODFSP_Read+0x2c6>
        }
        case SFP_DECODE_DATA:
        {
            if (this->index < sizeof(this->data))
 805cadc:	687b      	ldr	r3, [r7, #4]
 805cade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cae2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cae6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 805caea:	d232      	bcs.n	805cb52 <MODFSP_Read+0x1ae>
            {
            	MODFSP_Log("DATA[%d]: 0x%02X (%d)", this->index - 1, byte, byte);
 805caec:	687b      	ldr	r3, [r7, #4]
 805caee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805caf2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805caf6:	1e59      	subs	r1, r3, #1
 805caf8:	7bfa      	ldrb	r2, [r7, #15]
 805cafa:	7bfb      	ldrb	r3, [r7, #15]
 805cafc:	4866      	ldr	r0, [pc, #408]	@ (805cc98 <MODFSP_Read+0x2f4>)
 805cafe:	f000 fa2f 	bl	805cf60 <MODFSP_Log>
                this->data[this->index++] = byte;
 805cb02:	687b      	ldr	r3, [r7, #4]
 805cb04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb08:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cb0c:	1c5a      	adds	r2, r3, #1
 805cb0e:	b291      	uxth	r1, r2
 805cb10:	687a      	ldr	r2, [r7, #4]
 805cb12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 805cb16:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 805cb1a:	461a      	mov	r2, r3
 805cb1c:	687b      	ldr	r3, [r7, #4]
 805cb1e:	4413      	add	r3, r2
 805cb20:	7bfa      	ldrb	r2, [r7, #15]
 805cb22:	711a      	strb	r2, [r3, #4]
                crc_update(&this->crc16, byte);
 805cb24:	687a      	ldr	r2, [r7, #4]
 805cb26:	f241 4306 	movw	r3, #5126	@ 0x1406
 805cb2a:	4413      	add	r3, r2
 805cb2c:	7bfa      	ldrb	r2, [r7, #15]
 805cb2e:	4611      	mov	r1, r2
 805cb30:	4618      	mov	r0, r3
 805cb32:	f7ff fec0 	bl	805c8b6 <crc_update>
                if (this->index == this->length)
 805cb36:	687b      	ldr	r3, [r7, #4]
 805cb38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb3c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 805cb40:	687b      	ldr	r3, [r7, #4]
 805cb42:	885b      	ldrh	r3, [r3, #2]
 805cb44:	429a      	cmp	r2, r3
 805cb46:	f040 808d 	bne.w	805cc64 <MODFSP_Read+0x2c0>
                {
                    go_to_next_rx_state_decode(this);
 805cb4a:	6878      	ldr	r0, [r7, #4]
 805cb4c:	f7ff fed4 	bl	805c8f8 <go_to_next_rx_state_decode>
            {
                MODFSP_Reset(this);
                res = MODFSP_ERRMEM;
                return res;
            }
            break;
 805cb50:	e088      	b.n	805cc64 <MODFSP_Read+0x2c0>
                MODFSP_Reset(this);
 805cb52:	6878      	ldr	r0, [r7, #4]
 805cb54:	f7ff fe4e 	bl	805c7f4 <MODFSP_Reset>
                res = MODFSP_ERRMEM;
 805cb58:	2307      	movs	r3, #7
 805cb5a:	73bb      	strb	r3, [r7, #14]
                return res;
 805cb5c:	7bbb      	ldrb	r3, [r7, #14]
 805cb5e:	e08d      	b.n	805cc7c <MODFSP_Read+0x2d8>
        }
        case SFP_DECODE_CRC:
        {
            if (this->index < sizeof(this->crc16_data))
 805cb60:	687b      	ldr	r3, [r7, #4]
 805cb62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb66:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cb6a:	2b01      	cmp	r3, #1
 805cb6c:	d823      	bhi.n	805cbb6 <MODFSP_Read+0x212>
            {
                this->crc16_data |= (uint16_t)byte << (8 * this->index);
 805cb6e:	687b      	ldr	r3, [r7, #4]
 805cb70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb74:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 805cb78:	b21a      	sxth	r2, r3
 805cb7a:	7bf9      	ldrb	r1, [r7, #15]
 805cb7c:	687b      	ldr	r3, [r7, #4]
 805cb7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb82:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cb86:	00db      	lsls	r3, r3, #3
 805cb88:	fa01 f303 	lsl.w	r3, r1, r3
 805cb8c:	b21b      	sxth	r3, r3
 805cb8e:	4313      	orrs	r3, r2
 805cb90:	b21b      	sxth	r3, r3
 805cb92:	b29a      	uxth	r2, r3
 805cb94:	687b      	ldr	r3, [r7, #4]
 805cb96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cb9a:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
                ++this->index;
 805cb9e:	687b      	ldr	r3, [r7, #4]
 805cba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cba4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cba8:	3301      	adds	r3, #1
 805cbaa:	b29a      	uxth	r2, r3
 805cbac:	687b      	ldr	r3, [r7, #4]
 805cbae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cbb2:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
            }

            /* Check if we received all CRC bytes */
            if (this->index == sizeof(this->crc16_data))
 805cbb6:	687b      	ldr	r3, [r7, #4]
 805cbb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cbbc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 805cbc0:	2b02      	cmp	r3, #2
 805cbc2:	d151      	bne.n	805cc68 <MODFSP_Read+0x2c4>
            {
                uint16_t calculated_crc = crc_finish(&this->crc16);
 805cbc4:	687a      	ldr	r2, [r7, #4]
 805cbc6:	f241 4306 	movw	r3, #5126	@ 0x1406
 805cbca:	4413      	add	r3, r2
 805cbcc:	4618      	mov	r0, r3
 805cbce:	f7ff fe87 	bl	805c8e0 <crc_finish>
 805cbd2:	4603      	mov	r3, r0
 805cbd4:	81bb      	strh	r3, [r7, #12]

                /* Check if calculated CRC matches the received data */
                if (calculated_crc == this->crc16_data)
 805cbd6:	687b      	ldr	r3, [r7, #4]
 805cbd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805cbdc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 805cbe0:	89ba      	ldrh	r2, [r7, #12]
 805cbe2:	429a      	cmp	r2, r3
 805cbe4:	d106      	bne.n	805cbf4 <MODFSP_Read+0x250>
                {
                	MODFSP_Log("CRC OK!");
 805cbe6:	482d      	ldr	r0, [pc, #180]	@ (805cc9c <MODFSP_Read+0x2f8>)
 805cbe8:	f000 f9ba 	bl	805cf60 <MODFSP_Log>
                    go_to_next_rx_state_decode(this);
 805cbec:	6878      	ldr	r0, [r7, #4]
 805cbee:	f7ff fe83 	bl	805c8f8 <go_to_next_rx_state_decode>
                    MODFSP_Reset(this);
                    res = MODFSP_ERRCRC;
                    return res;
                }
            }
            break;
 805cbf2:	e039      	b.n	805cc68 <MODFSP_Read+0x2c4>
                	MODFSP_Log("ERROR CRC!!!");
 805cbf4:	482a      	ldr	r0, [pc, #168]	@ (805cca0 <MODFSP_Read+0x2fc>)
 805cbf6:	f000 f9b3 	bl	805cf60 <MODFSP_Log>
                    MODFSP_Reset(this);
 805cbfa:	6878      	ldr	r0, [r7, #4]
 805cbfc:	f7ff fdfa 	bl	805c7f4 <MODFSP_Reset>
                    res = MODFSP_ERRCRC;
 805cc00:	2304      	movs	r3, #4
 805cc02:	73bb      	strb	r3, [r7, #14]
                    return res;
 805cc04:	7bbb      	ldrb	r3, [r7, #14]
 805cc06:	e039      	b.n	805cc7c <MODFSP_Read+0x2d8>
        }

        case SFP_DECODE_STOP1:
        {
            if (byte == SFP_STOP1_BYTE)
 805cc08:	7bfb      	ldrb	r3, [r7, #15]
 805cc0a:	2bda      	cmp	r3, #218	@ 0xda
 805cc0c:	d106      	bne.n	805cc1c <MODFSP_Read+0x278>
            {
            	MODFSP_Log("Stop1");
 805cc0e:	4825      	ldr	r0, [pc, #148]	@ (805cca4 <MODFSP_Read+0x300>)
 805cc10:	f000 f9a6 	bl	805cf60 <MODFSP_Log>
                go_to_next_rx_state_decode(this);
 805cc14:	6878      	ldr	r0, [r7, #4]
 805cc16:	f7ff fe6f 	bl	805c8f8 <go_to_next_rx_state_decode>
            } else {
                MODFSP_Reset(this);
                res = MODFSP_ERRSTOP;
                return res;
            }
            break;
 805cc1a:	e026      	b.n	805cc6a <MODFSP_Read+0x2c6>
                MODFSP_Reset(this);
 805cc1c:	6878      	ldr	r0, [r7, #4]
 805cc1e:	f7ff fde9 	bl	805c7f4 <MODFSP_Reset>
                res = MODFSP_ERRSTOP;
 805cc22:	2305      	movs	r3, #5
 805cc24:	73bb      	strb	r3, [r7, #14]
                return res;
 805cc26:	7bbb      	ldrb	r3, [r7, #14]
 805cc28:	e028      	b.n	805cc7c <MODFSP_Read+0x2d8>
        }

        case SFP_DECODE_STOP2:
        {
            if (byte == SFP_STOP2_BYTE)
 805cc2a:	7bfb      	ldrb	r3, [r7, #15]
 805cc2c:	2bed      	cmp	r3, #237	@ 0xed
 805cc2e:	d109      	bne.n	805cc44 <MODFSP_Read+0x2a0>
            {
            	MODFSP_Log("Stop2");
 805cc30:	481d      	ldr	r0, [pc, #116]	@ (805cca8 <MODFSP_Read+0x304>)
 805cc32:	f000 f995 	bl	805cf60 <MODFSP_Log>
                res = MODFSP_VALID; /* Packet fully valid, take data from it */
 805cc36:	2303      	movs	r3, #3
 805cc38:	73bb      	strb	r3, [r7, #14]
                go_to_next_rx_state_decode(this);
 805cc3a:	6878      	ldr	r0, [r7, #4]
 805cc3c:	f7ff fe5c 	bl	805c8f8 <go_to_next_rx_state_decode>
                return res;
 805cc40:	7bbb      	ldrb	r3, [r7, #14]
 805cc42:	e01b      	b.n	805cc7c <MODFSP_Read+0x2d8>
            }
            else
            {
                MODFSP_Reset(this);
 805cc44:	6878      	ldr	r0, [r7, #4]
 805cc46:	f7ff fdd5 	bl	805c7f4 <MODFSP_Reset>
                res = MODFSP_ERRSTOP;
 805cc4a:	2305      	movs	r3, #5
 805cc4c:	73bb      	strb	r3, [r7, #14]
                return res;
 805cc4e:	7bbb      	ldrb	r3, [r7, #14]
 805cc50:	e014      	b.n	805cc7c <MODFSP_Read+0x2d8>
            }
            break;
        }
        default:
        {
            MODFSP_Reset(this);
 805cc52:	6878      	ldr	r0, [r7, #4]
 805cc54:	f7ff fdce 	bl	805c7f4 <MODFSP_Reset>
            res = MODFSP_ERR;
 805cc58:	2301      	movs	r3, #1
 805cc5a:	73bb      	strb	r3, [r7, #14]
            return res;
 805cc5c:	7bbb      	ldrb	r3, [r7, #14]
 805cc5e:	e00d      	b.n	805cc7c <MODFSP_Read+0x2d8>
            break;
 805cc60:	bf00      	nop
 805cc62:	e002      	b.n	805cc6a <MODFSP_Read+0x2c6>
            break;
 805cc64:	bf00      	nop
 805cc66:	e000      	b.n	805cc6a <MODFSP_Read+0x2c6>
            break;
 805cc68:	bf00      	nop
        }
    }

    res = (this->state == SFP_DECODE_START1) ? MODFSP_WAITDATA : MODFSP_INPROG;
 805cc6a:	687b      	ldr	r3, [r7, #4]
 805cc6c:	781b      	ldrb	r3, [r3, #0]
 805cc6e:	2b00      	cmp	r3, #0
 805cc70:	d101      	bne.n	805cc76 <MODFSP_Read+0x2d2>
 805cc72:	2306      	movs	r3, #6
 805cc74:	e000      	b.n	805cc78 <MODFSP_Read+0x2d4>
 805cc76:	2302      	movs	r3, #2
 805cc78:	73bb      	strb	r3, [r7, #14]
    return res;
 805cc7a:	7bbb      	ldrb	r3, [r7, #14]
}
 805cc7c:	4618      	mov	r0, r3
 805cc7e:	3710      	adds	r7, #16
 805cc80:	46bd      	mov	sp, r7
 805cc82:	bd80      	pop	{r7, pc}
 805cc84:	08071404 	.word	0x08071404
 805cc88:	0807140c 	.word	0x0807140c
 805cc8c:	08071414 	.word	0x08071414
 805cc90:	08071424 	.word	0x08071424
 805cc94:	08071430 	.word	0x08071430
 805cc98:	08071440 	.word	0x08071440
 805cc9c:	08071458 	.word	0x08071458
 805cca0:	08071460 	.word	0x08071460
 805cca4:	08071470 	.word	0x08071470
 805cca8:	08071478 	.word	0x08071478

0805ccac <MODFSP_Send>:

MODFSP_Return_t MODFSP_Send(MODFSP_Data_t *this, uint8_t id, const void* data, uint16_t len)
{
 805ccac:	b580      	push	{r7, lr}
 805ccae:	b08a      	sub	sp, #40	@ 0x28
 805ccb0:	af00      	add	r7, sp, #0
 805ccb2:	60f8      	str	r0, [r7, #12]
 805ccb4:	607a      	str	r2, [r7, #4]
 805ccb6:	461a      	mov	r2, r3
 805ccb8:	460b      	mov	r3, r1
 805ccba:	72fb      	strb	r3, [r7, #11]
 805ccbc:	4613      	mov	r3, r2
 805ccbe:	813b      	strh	r3, [r7, #8]
    MODFSP_Return_t res = MODFSP_OK;
 805ccc0:	2300      	movs	r3, #0
 805ccc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    MODFSP_CRC_t crc;
    uint16_t org_len = len;
 805ccc6:	893b      	ldrh	r3, [r7, #8]
 805ccc8:	847b      	strh	r3, [r7, #34]	@ 0x22
    const uint8_t* pdata = (const uint8_t*)data;
 805ccca:	687b      	ldr	r3, [r7, #4]
 805cccc:	61fb      	str	r3, [r7, #28]
    uint8_t byte;
    uint16_t crc_value;

    if (this == NULL) {
 805ccce:	68fb      	ldr	r3, [r7, #12]
 805ccd0:	2b00      	cmp	r3, #0
 805ccd2:	d101      	bne.n	805ccd8 <MODFSP_Send+0x2c>
        return MODFSP_ERR;
 805ccd4:	2301      	movs	r3, #1
 805ccd6:	e091      	b.n	805cdfc <MODFSP_Send+0x150>
    }

    uint16_t min_mem = 9U + len; // 2 start + 2 stop + 1 id + 1 len + 2 CRC + data
 805ccd8:	893b      	ldrh	r3, [r7, #8]
 805ccda:	3309      	adds	r3, #9
 805ccdc:	837b      	strh	r3, [r7, #26]

    if (MODFSP_GetSpaceForTx() < min_mem){
 805ccde:	f000 f92d 	bl	805cf3c <MODFSP_GetSpaceForTx>
 805cce2:	4603      	mov	r3, r0
 805cce4:	461a      	mov	r2, r3
 805cce6:	8b7b      	ldrh	r3, [r7, #26]
 805cce8:	4293      	cmp	r3, r2
 805ccea:	d901      	bls.n	805ccf0 <MODFSP_Send+0x44>
        return MODFSP_ERRMEM;
 805ccec:	2307      	movs	r3, #7
 805ccee:	e085      	b.n	805cdfc <MODFSP_Send+0x150>
    }

    crc_init(this, &crc);
 805ccf0:	f107 0314 	add.w	r3, r7, #20
 805ccf4:	4619      	mov	r1, r3
 805ccf6:	68f8      	ldr	r0, [r7, #12]
 805ccf8:	f7ff fd6b 	bl	805c7d2 <crc_init>

    byte = SFP_START1_BYTE;
 805ccfc:	23c0      	movs	r3, #192	@ 0xc0
 805ccfe:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cd00:	f107 0313 	add.w	r3, r7, #19
 805cd04:	4618      	mov	r0, r3
 805cd06:	f000 f8e5 	bl	805ced4 <MODFSP_SendByte>
    byte = SFP_START2_BYTE;
 805cd0a:	23de      	movs	r3, #222	@ 0xde
 805cd0c:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cd0e:	f107 0313 	add.w	r3, r7, #19
 805cd12:	4618      	mov	r0, r3
 805cd14:	f000 f8de 	bl	805ced4 <MODFSP_SendByte>

    byte = id;
 805cd18:	7afb      	ldrb	r3, [r7, #11]
 805cd1a:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cd1c:	f107 0313 	add.w	r3, r7, #19
 805cd20:	4618      	mov	r0, r3
 805cd22:	f000 f8d7 	bl	805ced4 <MODFSP_SendByte>
    crc_update(&crc, byte);
 805cd26:	7cfa      	ldrb	r2, [r7, #19]
 805cd28:	f107 0314 	add.w	r3, r7, #20
 805cd2c:	4611      	mov	r1, r2
 805cd2e:	4618      	mov	r0, r3
 805cd30:	f7ff fdc1 	bl	805c8b6 <crc_update>

    // length byte low first
    byte = (uint8_t)(len & 0xFF);
 805cd34:	893b      	ldrh	r3, [r7, #8]
 805cd36:	b2db      	uxtb	r3, r3
 805cd38:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cd3a:	f107 0313 	add.w	r3, r7, #19
 805cd3e:	4618      	mov	r0, r3
 805cd40:	f000 f8c8 	bl	805ced4 <MODFSP_SendByte>
    crc_update(&crc, byte);
 805cd44:	7cfa      	ldrb	r2, [r7, #19]
 805cd46:	f107 0314 	add.w	r3, r7, #20
 805cd4a:	4611      	mov	r1, r2
 805cd4c:	4618      	mov	r0, r3
 805cd4e:	f7ff fdb2 	bl	805c8b6 <crc_update>

    byte = (uint8_t)((len >> 8) & 0xFF);
 805cd52:	893b      	ldrh	r3, [r7, #8]
 805cd54:	0a1b      	lsrs	r3, r3, #8
 805cd56:	b29b      	uxth	r3, r3
 805cd58:	b2db      	uxtb	r3, r3
 805cd5a:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cd5c:	f107 0313 	add.w	r3, r7, #19
 805cd60:	4618      	mov	r0, r3
 805cd62:	f000 f8b7 	bl	805ced4 <MODFSP_SendByte>
    crc_update(&crc, byte);
 805cd66:	7cfa      	ldrb	r2, [r7, #19]
 805cd68:	f107 0314 	add.w	r3, r7, #20
 805cd6c:	4611      	mov	r1, r2
 805cd6e:	4618      	mov	r0, r3
 805cd70:	f7ff fda1 	bl	805c8b6 <crc_update>

    for (uint16_t i = 0; i < org_len; i++) {
 805cd74:	2300      	movs	r3, #0
 805cd76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 805cd78:	e013      	b.n	805cda2 <MODFSP_Send+0xf6>
        byte = pdata[i];
 805cd7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 805cd7c:	69fa      	ldr	r2, [r7, #28]
 805cd7e:	4413      	add	r3, r2
 805cd80:	781b      	ldrb	r3, [r3, #0]
 805cd82:	74fb      	strb	r3, [r7, #19]
        MODFSP_SendByte(&byte);
 805cd84:	f107 0313 	add.w	r3, r7, #19
 805cd88:	4618      	mov	r0, r3
 805cd8a:	f000 f8a3 	bl	805ced4 <MODFSP_SendByte>
        crc_update(&crc, byte);
 805cd8e:	7cfa      	ldrb	r2, [r7, #19]
 805cd90:	f107 0314 	add.w	r3, r7, #20
 805cd94:	4611      	mov	r1, r2
 805cd96:	4618      	mov	r0, r3
 805cd98:	f7ff fd8d 	bl	805c8b6 <crc_update>
    for (uint16_t i = 0; i < org_len; i++) {
 805cd9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 805cd9e:	3301      	adds	r3, #1
 805cda0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 805cda2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 805cda4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 805cda6:	429a      	cmp	r2, r3
 805cda8:	d3e7      	bcc.n	805cd7a <MODFSP_Send+0xce>
    }

    crc_value = crc_finish(&crc);
 805cdaa:	f107 0314 	add.w	r3, r7, #20
 805cdae:	4618      	mov	r0, r3
 805cdb0:	f7ff fd96 	bl	805c8e0 <crc_finish>
 805cdb4:	4603      	mov	r3, r0
 805cdb6:	833b      	strh	r3, [r7, #24]

    byte = (uint8_t)(crc_value & 0xFF);
 805cdb8:	8b3b      	ldrh	r3, [r7, #24]
 805cdba:	b2db      	uxtb	r3, r3
 805cdbc:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cdbe:	f107 0313 	add.w	r3, r7, #19
 805cdc2:	4618      	mov	r0, r3
 805cdc4:	f000 f886 	bl	805ced4 <MODFSP_SendByte>
    byte = (uint8_t)((crc_value >> 8) & 0xFF);
 805cdc8:	8b3b      	ldrh	r3, [r7, #24]
 805cdca:	0a1b      	lsrs	r3, r3, #8
 805cdcc:	b29b      	uxth	r3, r3
 805cdce:	b2db      	uxtb	r3, r3
 805cdd0:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cdd2:	f107 0313 	add.w	r3, r7, #19
 805cdd6:	4618      	mov	r0, r3
 805cdd8:	f000 f87c 	bl	805ced4 <MODFSP_SendByte>

    byte = SFP_STOP1_BYTE;
 805cddc:	23da      	movs	r3, #218	@ 0xda
 805cdde:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cde0:	f107 0313 	add.w	r3, r7, #19
 805cde4:	4618      	mov	r0, r3
 805cde6:	f000 f875 	bl	805ced4 <MODFSP_SendByte>
    byte = SFP_STOP2_BYTE;
 805cdea:	23ed      	movs	r3, #237	@ 0xed
 805cdec:	74fb      	strb	r3, [r7, #19]
    MODFSP_SendByte(&byte);
 805cdee:	f107 0313 	add.w	r3, r7, #19
 805cdf2:	4618      	mov	r0, r3
 805cdf4:	f000 f86e 	bl	805ced4 <MODFSP_SendByte>

    return res;
 805cdf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 805cdfc:	4618      	mov	r0, r3
 805cdfe:	3728      	adds	r7, #40	@ 0x28
 805ce00:	46bd      	mov	sp, r7
 805ce02:	bd80      	pop	{r7, pc}

0805ce04 <MODFSP_Process>:

MODFSP_Return_t MODFSP_Process(MODFSP_Data_t *this)
{
 805ce04:	b580      	push	{r7, lr}
 805ce06:	b086      	sub	sp, #24
 805ce08:	af00      	add	r7, sp, #0
 805ce0a:	6078      	str	r0, [r7, #4]
    uint8_t byte = 0;
 805ce0c:	2300      	movs	r3, #0
 805ce0e:	73bb      	strb	r3, [r7, #14]
    uint32_t now = MODFSP_GetTick();
 805ce10:	f000 f89e 	bl	805cf50 <MODFSP_GetTick>
 805ce14:	6178      	str	r0, [r7, #20]
    int res_read = MODFSP_ReadByte(&byte);
 805ce16:	f107 030e 	add.w	r3, r7, #14
 805ce1a:	4618      	mov	r0, r3
 805ce1c:	f000 f86e 	bl	805cefc <MODFSP_ReadByte>
 805ce20:	6138      	str	r0, [r7, #16]

    if (this == NULL) {
 805ce22:	687b      	ldr	r3, [r7, #4]
 805ce24:	2b00      	cmp	r3, #0
 805ce26:	d101      	bne.n	805ce2c <MODFSP_Process+0x28>
        return MODFSP_ERR;
 805ce28:	2301      	movs	r3, #1
 805ce2a:	e04b      	b.n	805cec4 <MODFSP_Process+0xc0>
    }

    if (res_read == 0)
 805ce2c:	693b      	ldr	r3, [r7, #16]
 805ce2e:	2b00      	cmp	r3, #0
 805ce30:	d12a      	bne.n	805ce88 <MODFSP_Process+0x84>
    {
        MODFSP_Return_t res = MODFSP_Read(this, &byte);
 805ce32:	f107 030e 	add.w	r3, r7, #14
 805ce36:	4619      	mov	r1, r3
 805ce38:	6878      	ldr	r0, [r7, #4]
 805ce3a:	f7ff fdb3 	bl	805c9a4 <MODFSP_Read>
 805ce3e:	4603      	mov	r3, r0
 805ce40:	73fb      	strb	r3, [r7, #15]

        if (res == MODFSP_VALID) {
 805ce42:	7bfb      	ldrb	r3, [r7, #15]
 805ce44:	2b03      	cmp	r3, #3
 805ce46:	d113      	bne.n	805ce70 <MODFSP_Process+0x6c>
            this->last_rx_time = now;
 805ce48:	687b      	ldr	r3, [r7, #4]
 805ce4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805ce4e:	461a      	mov	r2, r3
 805ce50:	697b      	ldr	r3, [r7, #20]
 805ce52:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
            MODFSP_Log("Call Handler");
 805ce56:	481d      	ldr	r0, [pc, #116]	@ (805cecc <MODFSP_Process+0xc8>)
 805ce58:	f000 f882 	bl	805cf60 <MODFSP_Log>
            MODFSP_ApplicationHandler(this, this->id, this->data, this->length);
 805ce5c:	687b      	ldr	r3, [r7, #4]
 805ce5e:	7859      	ldrb	r1, [r3, #1]
 805ce60:	687b      	ldr	r3, [r7, #4]
 805ce62:	1d1a      	adds	r2, r3, #4
 805ce64:	687b      	ldr	r3, [r7, #4]
 805ce66:	885b      	ldrh	r3, [r3, #2]
 805ce68:	6878      	ldr	r0, [r7, #4]
 805ce6a:	f7ed f8c1 	bl	8049ff0 <MODFSP_ApplicationHandler>
 805ce6e:	e009      	b.n	805ce84 <MODFSP_Process+0x80>
        }
        else if (res == MODFSP_INPROG) {
 805ce70:	7bfb      	ldrb	r3, [r7, #15]
 805ce72:	2b02      	cmp	r3, #2
 805ce74:	d106      	bne.n	805ce84 <MODFSP_Process+0x80>
            this->last_rx_time = now;
 805ce76:	687b      	ldr	r3, [r7, #4]
 805ce78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805ce7c:	461a      	mov	r2, r3
 805ce7e:	697b      	ldr	r3, [r7, #20]
 805ce80:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
        }

        return res;
 805ce84:	7bfb      	ldrb	r3, [r7, #15]
 805ce86:	e01d      	b.n	805cec4 <MODFSP_Process+0xc0>
    }
    else
    {
        if ((this->state != SFP_DECODE_START1) &&
 805ce88:	687b      	ldr	r3, [r7, #4]
 805ce8a:	781b      	ldrb	r3, [r3, #0]
 805ce8c:	2b00      	cmp	r3, #0
 805ce8e:	d018      	beq.n	805cec2 <MODFSP_Process+0xbe>
            ((now - this->last_rx_time) > MODFSP_TIMEOUT_MS))
 805ce90:	687b      	ldr	r3, [r7, #4]
 805ce92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805ce96:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 805ce9a:	697a      	ldr	r2, [r7, #20]
 805ce9c:	1ad3      	subs	r3, r2, r3
        if ((this->state != SFP_DECODE_START1) &&
 805ce9e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 805cea2:	d90e      	bls.n	805cec2 <MODFSP_Process+0xbe>
        {
        	MODFSP_Log("Timeout - Reset state machine");
 805cea4:	480a      	ldr	r0, [pc, #40]	@ (805ced0 <MODFSP_Process+0xcc>)
 805cea6:	f000 f85b 	bl	805cf60 <MODFSP_Log>
            MODFSP_Reset(this);
 805ceaa:	6878      	ldr	r0, [r7, #4]
 805ceac:	f7ff fca2 	bl	805c7f4 <MODFSP_Reset>
            this->last_rx_time = now;
 805ceb0:	687b      	ldr	r3, [r7, #4]
 805ceb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 805ceb6:	461a      	mov	r2, r3
 805ceb8:	697b      	ldr	r3, [r7, #20]
 805ceba:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
            return MODFSP_ERRTIMEOUT;
 805cebe:	2308      	movs	r3, #8
 805cec0:	e000      	b.n	805cec4 <MODFSP_Process+0xc0>
        }
    }

    return MODFSP_WAITDATA;
 805cec2:	2306      	movs	r3, #6
}
 805cec4:	4618      	mov	r0, r3
 805cec6:	3718      	adds	r7, #24
 805cec8:	46bd      	mov	sp, r7
 805ceca:	bd80      	pop	{r7, pc}
 805cecc:	08071480 	.word	0x08071480
 805ced0:	08071490 	.word	0x08071490

0805ced4 <MODFSP_SendByte>:
#define NULL ((void *)0)
#endif


void MODFSP_SendByte(const uint8_t *byte)
{
 805ced4:	b580      	push	{r7, lr}
 805ced6:	b082      	sub	sp, #8
 805ced8:	af00      	add	r7, sp, #0
 805ceda:	6078      	str	r0, [r7, #4]
    if (byte == NULL) return;
 805cedc:	687b      	ldr	r3, [r7, #4]
 805cede:	2b00      	cmp	r3, #0
 805cee0:	d006      	beq.n	805cef0 <MODFSP_SendByte+0x1c>
    UART_Driver_Write(UART_DEBUG, *byte);
 805cee2:	687b      	ldr	r3, [r7, #4]
 805cee4:	781b      	ldrb	r3, [r3, #0]
 805cee6:	4619      	mov	r1, r3
 805cee8:	4803      	ldr	r0, [pc, #12]	@ (805cef8 <MODFSP_SendByte+0x24>)
 805ceea:	f7e5 fceb 	bl	80428c4 <UART_Driver_Write>
 805ceee:	e000      	b.n	805cef2 <MODFSP_SendByte+0x1e>
    if (byte == NULL) return;
 805cef0:	bf00      	nop
}
 805cef2:	3708      	adds	r7, #8
 805cef4:	46bd      	mov	sp, r7
 805cef6:	bd80      	pop	{r7, pc}
 805cef8:	40004400 	.word	0x40004400

0805cefc <MODFSP_ReadByte>:

int MODFSP_ReadByte(uint8_t *byte)
{
 805cefc:	b580      	push	{r7, lr}
 805cefe:	b084      	sub	sp, #16
 805cf00:	af00      	add	r7, sp, #0
 805cf02:	6078      	str	r0, [r7, #4]
    if (byte == NULL) {
 805cf04:	687b      	ldr	r3, [r7, #4]
 805cf06:	2b00      	cmp	r3, #0
 805cf08:	d102      	bne.n	805cf10 <MODFSP_ReadByte+0x14>
        return -1;
 805cf0a:	f04f 33ff 	mov.w	r3, #4294967295
 805cf0e:	e00e      	b.n	805cf2e <MODFSP_ReadByte+0x32>
    }

    int data = UART_DMA_Driver_Read(UART_DEBUG);
 805cf10:	4809      	ldr	r0, [pc, #36]	@ (805cf38 <MODFSP_ReadByte+0x3c>)
 805cf12:	f7e5 fe11 	bl	8042b38 <UART_DMA_Driver_Read>
 805cf16:	60f8      	str	r0, [r7, #12]
    if (data >= 0) {
 805cf18:	68fb      	ldr	r3, [r7, #12]
 805cf1a:	2b00      	cmp	r3, #0
 805cf1c:	db05      	blt.n	805cf2a <MODFSP_ReadByte+0x2e>
        *byte = data;
 805cf1e:	68fb      	ldr	r3, [r7, #12]
 805cf20:	b2da      	uxtb	r2, r3
 805cf22:	687b      	ldr	r3, [r7, #4]
 805cf24:	701a      	strb	r2, [r3, #0]
         return 0;
 805cf26:	2300      	movs	r3, #0
 805cf28:	e001      	b.n	805cf2e <MODFSP_ReadByte+0x32>
    }

    return -1;
 805cf2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 805cf2e:	4618      	mov	r0, r3
 805cf30:	3710      	adds	r7, #16
 805cf32:	46bd      	mov	sp, r7
 805cf34:	bd80      	pop	{r7, pc}
 805cf36:	bf00      	nop
 805cf38:	40004400 	.word	0x40004400

0805cf3c <MODFSP_GetSpaceForTx>:

uint16_t MODFSP_GetSpaceForTx(void)
{
 805cf3c:	b580      	push	{r7, lr}
 805cf3e:	af00      	add	r7, sp, #0
    return UART_DMA_Driver_TXNumFreeSlots(UART_DEBUG);
 805cf40:	4802      	ldr	r0, [pc, #8]	@ (805cf4c <MODFSP_GetSpaceForTx+0x10>)
 805cf42:	f7e5 fe31 	bl	8042ba8 <UART_DMA_Driver_TXNumFreeSlots>
 805cf46:	4603      	mov	r3, r0
}
 805cf48:	4618      	mov	r0, r3
 805cf4a:	bd80      	pop	{r7, pc}
 805cf4c:	40004400 	.word	0x40004400

0805cf50 <MODFSP_GetTick>:

uint32_t MODFSP_GetTick(void)
{
 805cf50:	b580      	push	{r7, lr}
 805cf52:	af00      	add	r7, sp, #0
	return Utils_GetTick();
 805cf54:	f7f1 f80e 	bl	804df74 <Utils_GetTick>
 805cf58:	4603      	mov	r3, r0
}
 805cf5a:	4618      	mov	r0, r3
 805cf5c:	bd80      	pop	{r7, pc}
	...

0805cf60 <MODFSP_Log>:

#include "stdarg.h"
#include "stdio.h"

void MODFSP_Log(const char *fmt, ...)
{
 805cf60:	b40f      	push	{r0, r1, r2, r3}
 805cf62:	b580      	push	{r7, lr}
 805cf64:	b0c2      	sub	sp, #264	@ 0x108
 805cf66:	af00      	add	r7, sp, #0
    char log_buf[MODFSP_LOG_BUFFER_SIZE];
    va_list args;
    va_start(args, fmt);
 805cf68:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 805cf6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 805cf70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 805cf74:	601a      	str	r2, [r3, #0]
    vsnprintf(log_buf, sizeof(log_buf), fmt, args);
 805cf76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 805cf7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 805cf7e:	f107 0008 	add.w	r0, r7, #8
 805cf82:	681b      	ldr	r3, [r3, #0]
 805cf84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 805cf88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805cf8c:	f00c fbf2 	bl	8069774 <vsniprintf>
    va_end(args);

#if MODFSP_LOG_METHOD == 1
    UART_Driver_SendString(UART_USB, "[MODFSP]: ");
 805cf90:	490a      	ldr	r1, [pc, #40]	@ (805cfbc <MODFSP_Log+0x5c>)
 805cf92:	480b      	ldr	r0, [pc, #44]	@ (805cfc0 <MODFSP_Log+0x60>)
 805cf94:	f7e5 fccc 	bl	8042930 <UART_Driver_SendString>
    UART_Driver_SendString(UART_USB, log_buf);
 805cf98:	f107 0308 	add.w	r3, r7, #8
 805cf9c:	4619      	mov	r1, r3
 805cf9e:	4808      	ldr	r0, [pc, #32]	@ (805cfc0 <MODFSP_Log+0x60>)
 805cfa0:	f7e5 fcc6 	bl	8042930 <UART_Driver_SendString>
    UART_Driver_SendString(UART_USB, "\r\n");
 805cfa4:	4907      	ldr	r1, [pc, #28]	@ (805cfc4 <MODFSP_Log+0x64>)
 805cfa6:	4806      	ldr	r0, [pc, #24]	@ (805cfc0 <MODFSP_Log+0x60>)
 805cfa8:	f7e5 fcc2 	bl	8042930 <UART_Driver_SendString>
#elif MODFSP_LOG_METHOD == 2
    extern UART_HandleTypeDef MODFSP_LOG_UART_HANDLE;
    HAL_UART_Transmit(&MODFSP_LOG_UART_HANDLE, (uint8_t*)log_buf, strlen(log_buf), 100);
#endif
}
 805cfac:	bf00      	nop
 805cfae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 805cfb2:	46bd      	mov	sp, r7
 805cfb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 805cfb8:	b004      	add	sp, #16
 805cfba:	4770      	bx	lr
 805cfbc:	080714b0 	.word	0x080714b0
 805cfc0:	40011000 	.word	0x40011000
 805cfc4:	080714bc 	.word	0x080714bc

0805cfc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 805cfc8:	b480      	push	{r7}
 805cfca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 805cfcc:	4b49      	ldr	r3, [pc, #292]	@ (805d0f4 <SystemInit+0x12c>)
 805cfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 805cfd2:	4a48      	ldr	r2, [pc, #288]	@ (805d0f4 <SystemInit+0x12c>)
 805cfd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 805cfd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 805cfdc:	4b45      	ldr	r3, [pc, #276]	@ (805d0f4 <SystemInit+0x12c>)
 805cfde:	691b      	ldr	r3, [r3, #16]
 805cfe0:	4a44      	ldr	r2, [pc, #272]	@ (805d0f4 <SystemInit+0x12c>)
 805cfe2:	f043 0310 	orr.w	r3, r3, #16
 805cfe6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 805cfe8:	4b43      	ldr	r3, [pc, #268]	@ (805d0f8 <SystemInit+0x130>)
 805cfea:	681b      	ldr	r3, [r3, #0]
 805cfec:	f003 030f 	and.w	r3, r3, #15
 805cff0:	2b06      	cmp	r3, #6
 805cff2:	d807      	bhi.n	805d004 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 805cff4:	4b40      	ldr	r3, [pc, #256]	@ (805d0f8 <SystemInit+0x130>)
 805cff6:	681b      	ldr	r3, [r3, #0]
 805cff8:	f023 030f 	bic.w	r3, r3, #15
 805cffc:	4a3e      	ldr	r2, [pc, #248]	@ (805d0f8 <SystemInit+0x130>)
 805cffe:	f043 0307 	orr.w	r3, r3, #7
 805d002:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 805d004:	4b3d      	ldr	r3, [pc, #244]	@ (805d0fc <SystemInit+0x134>)
 805d006:	681b      	ldr	r3, [r3, #0]
 805d008:	4a3c      	ldr	r2, [pc, #240]	@ (805d0fc <SystemInit+0x134>)
 805d00a:	f043 0301 	orr.w	r3, r3, #1
 805d00e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 805d010:	4b3a      	ldr	r3, [pc, #232]	@ (805d0fc <SystemInit+0x134>)
 805d012:	2200      	movs	r2, #0
 805d014:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 805d016:	4b39      	ldr	r3, [pc, #228]	@ (805d0fc <SystemInit+0x134>)
 805d018:	681a      	ldr	r2, [r3, #0]
 805d01a:	4938      	ldr	r1, [pc, #224]	@ (805d0fc <SystemInit+0x134>)
 805d01c:	4b38      	ldr	r3, [pc, #224]	@ (805d100 <SystemInit+0x138>)
 805d01e:	4013      	ands	r3, r2
 805d020:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 805d022:	4b35      	ldr	r3, [pc, #212]	@ (805d0f8 <SystemInit+0x130>)
 805d024:	681b      	ldr	r3, [r3, #0]
 805d026:	f003 0308 	and.w	r3, r3, #8
 805d02a:	2b00      	cmp	r3, #0
 805d02c:	d007      	beq.n	805d03e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 805d02e:	4b32      	ldr	r3, [pc, #200]	@ (805d0f8 <SystemInit+0x130>)
 805d030:	681b      	ldr	r3, [r3, #0]
 805d032:	f023 030f 	bic.w	r3, r3, #15
 805d036:	4a30      	ldr	r2, [pc, #192]	@ (805d0f8 <SystemInit+0x130>)
 805d038:	f043 0307 	orr.w	r3, r3, #7
 805d03c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 805d03e:	4b2f      	ldr	r3, [pc, #188]	@ (805d0fc <SystemInit+0x134>)
 805d040:	2200      	movs	r2, #0
 805d042:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 805d044:	4b2d      	ldr	r3, [pc, #180]	@ (805d0fc <SystemInit+0x134>)
 805d046:	2200      	movs	r2, #0
 805d048:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 805d04a:	4b2c      	ldr	r3, [pc, #176]	@ (805d0fc <SystemInit+0x134>)
 805d04c:	2200      	movs	r2, #0
 805d04e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 805d050:	4b2a      	ldr	r3, [pc, #168]	@ (805d0fc <SystemInit+0x134>)
 805d052:	4a2c      	ldr	r2, [pc, #176]	@ (805d104 <SystemInit+0x13c>)
 805d054:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 805d056:	4b29      	ldr	r3, [pc, #164]	@ (805d0fc <SystemInit+0x134>)
 805d058:	4a2b      	ldr	r2, [pc, #172]	@ (805d108 <SystemInit+0x140>)
 805d05a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 805d05c:	4b27      	ldr	r3, [pc, #156]	@ (805d0fc <SystemInit+0x134>)
 805d05e:	4a2b      	ldr	r2, [pc, #172]	@ (805d10c <SystemInit+0x144>)
 805d060:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 805d062:	4b26      	ldr	r3, [pc, #152]	@ (805d0fc <SystemInit+0x134>)
 805d064:	2200      	movs	r2, #0
 805d066:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 805d068:	4b24      	ldr	r3, [pc, #144]	@ (805d0fc <SystemInit+0x134>)
 805d06a:	4a28      	ldr	r2, [pc, #160]	@ (805d10c <SystemInit+0x144>)
 805d06c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 805d06e:	4b23      	ldr	r3, [pc, #140]	@ (805d0fc <SystemInit+0x134>)
 805d070:	2200      	movs	r2, #0
 805d072:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 805d074:	4b21      	ldr	r3, [pc, #132]	@ (805d0fc <SystemInit+0x134>)
 805d076:	4a25      	ldr	r2, [pc, #148]	@ (805d10c <SystemInit+0x144>)
 805d078:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 805d07a:	4b20      	ldr	r3, [pc, #128]	@ (805d0fc <SystemInit+0x134>)
 805d07c:	2200      	movs	r2, #0
 805d07e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 805d080:	4b1e      	ldr	r3, [pc, #120]	@ (805d0fc <SystemInit+0x134>)
 805d082:	681b      	ldr	r3, [r3, #0]
 805d084:	4a1d      	ldr	r2, [pc, #116]	@ (805d0fc <SystemInit+0x134>)
 805d086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 805d08a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 805d08c:	4b1b      	ldr	r3, [pc, #108]	@ (805d0fc <SystemInit+0x134>)
 805d08e:	2200      	movs	r2, #0
 805d090:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 805d092:	4b1f      	ldr	r3, [pc, #124]	@ (805d110 <SystemInit+0x148>)
 805d094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 805d096:	4a1e      	ldr	r2, [pc, #120]	@ (805d110 <SystemInit+0x148>)
 805d098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 805d09c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 805d09e:	4b1d      	ldr	r3, [pc, #116]	@ (805d114 <SystemInit+0x14c>)
 805d0a0:	681a      	ldr	r2, [r3, #0]
 805d0a2:	4b1d      	ldr	r3, [pc, #116]	@ (805d118 <SystemInit+0x150>)
 805d0a4:	4013      	ands	r3, r2
 805d0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 805d0aa:	d202      	bcs.n	805d0b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 805d0ac:	4b1b      	ldr	r3, [pc, #108]	@ (805d11c <SystemInit+0x154>)
 805d0ae:	2201      	movs	r2, #1
 805d0b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 805d0b2:	4b12      	ldr	r3, [pc, #72]	@ (805d0fc <SystemInit+0x134>)
 805d0b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805d0b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 805d0bc:	2b00      	cmp	r3, #0
 805d0be:	d113      	bne.n	805d0e8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 805d0c0:	4b0e      	ldr	r3, [pc, #56]	@ (805d0fc <SystemInit+0x134>)
 805d0c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805d0c6:	4a0d      	ldr	r2, [pc, #52]	@ (805d0fc <SystemInit+0x134>)
 805d0c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 805d0cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 805d0d0:	4b13      	ldr	r3, [pc, #76]	@ (805d120 <SystemInit+0x158>)
 805d0d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 805d0d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 805d0d8:	4b08      	ldr	r3, [pc, #32]	@ (805d0fc <SystemInit+0x134>)
 805d0da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805d0de:	4a07      	ldr	r2, [pc, #28]	@ (805d0fc <SystemInit+0x134>)
 805d0e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 805d0e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 805d0e8:	bf00      	nop
 805d0ea:	46bd      	mov	sp, r7
 805d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d0f0:	4770      	bx	lr
 805d0f2:	bf00      	nop
 805d0f4:	e000ed00 	.word	0xe000ed00
 805d0f8:	52002000 	.word	0x52002000
 805d0fc:	58024400 	.word	0x58024400
 805d100:	eaf6ed7f 	.word	0xeaf6ed7f
 805d104:	02020200 	.word	0x02020200
 805d108:	01ff0000 	.word	0x01ff0000
 805d10c:	01010280 	.word	0x01010280
 805d110:	580000c0 	.word	0x580000c0
 805d114:	5c001000 	.word	0x5c001000
 805d118:	ffff0000 	.word	0xffff0000
 805d11c:	51008108 	.word	0x51008108
 805d120:	52004000 	.word	0x52004000

0805d124 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 805d124:	b480      	push	{r7}
 805d126:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 805d128:	4b0a      	ldr	r3, [pc, #40]	@ (805d154 <ExitRun0Mode+0x30>)
 805d12a:	68db      	ldr	r3, [r3, #12]
 805d12c:	f023 0306 	bic.w	r3, r3, #6
 805d130:	4a08      	ldr	r2, [pc, #32]	@ (805d154 <ExitRun0Mode+0x30>)
 805d132:	f043 0302 	orr.w	r3, r3, #2
 805d136:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 805d138:	bf00      	nop
 805d13a:	4b06      	ldr	r3, [pc, #24]	@ (805d154 <ExitRun0Mode+0x30>)
 805d13c:	685b      	ldr	r3, [r3, #4]
 805d13e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 805d142:	2b00      	cmp	r3, #0
 805d144:	d0f9      	beq.n	805d13a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 805d146:	bf00      	nop
 805d148:	bf00      	nop
 805d14a:	46bd      	mov	sp, r7
 805d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d150:	4770      	bx	lr
 805d152:	bf00      	nop
 805d154:	58024800 	.word	0x58024800

0805d158 <__NVIC_GetPriorityGrouping>:
{
 805d158:	b480      	push	{r7}
 805d15a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 805d15c:	4b04      	ldr	r3, [pc, #16]	@ (805d170 <__NVIC_GetPriorityGrouping+0x18>)
 805d15e:	68db      	ldr	r3, [r3, #12]
 805d160:	0a1b      	lsrs	r3, r3, #8
 805d162:	f003 0307 	and.w	r3, r3, #7
}
 805d166:	4618      	mov	r0, r3
 805d168:	46bd      	mov	sp, r7
 805d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d16e:	4770      	bx	lr
 805d170:	e000ed00 	.word	0xe000ed00

0805d174 <__NVIC_EnableIRQ>:
{
 805d174:	b480      	push	{r7}
 805d176:	b083      	sub	sp, #12
 805d178:	af00      	add	r7, sp, #0
 805d17a:	4603      	mov	r3, r0
 805d17c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 805d17e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805d182:	2b00      	cmp	r3, #0
 805d184:	db0b      	blt.n	805d19e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 805d186:	88fb      	ldrh	r3, [r7, #6]
 805d188:	f003 021f 	and.w	r2, r3, #31
 805d18c:	4907      	ldr	r1, [pc, #28]	@ (805d1ac <__NVIC_EnableIRQ+0x38>)
 805d18e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805d192:	095b      	lsrs	r3, r3, #5
 805d194:	2001      	movs	r0, #1
 805d196:	fa00 f202 	lsl.w	r2, r0, r2
 805d19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 805d19e:	bf00      	nop
 805d1a0:	370c      	adds	r7, #12
 805d1a2:	46bd      	mov	sp, r7
 805d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d1a8:	4770      	bx	lr
 805d1aa:	bf00      	nop
 805d1ac:	e000e100 	.word	0xe000e100

0805d1b0 <__NVIC_SetPriority>:
{
 805d1b0:	b480      	push	{r7}
 805d1b2:	b083      	sub	sp, #12
 805d1b4:	af00      	add	r7, sp, #0
 805d1b6:	4603      	mov	r3, r0
 805d1b8:	6039      	str	r1, [r7, #0]
 805d1ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 805d1bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805d1c0:	2b00      	cmp	r3, #0
 805d1c2:	db0a      	blt.n	805d1da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805d1c4:	683b      	ldr	r3, [r7, #0]
 805d1c6:	b2da      	uxtb	r2, r3
 805d1c8:	490c      	ldr	r1, [pc, #48]	@ (805d1fc <__NVIC_SetPriority+0x4c>)
 805d1ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 805d1ce:	0112      	lsls	r2, r2, #4
 805d1d0:	b2d2      	uxtb	r2, r2
 805d1d2:	440b      	add	r3, r1
 805d1d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 805d1d8:	e00a      	b.n	805d1f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805d1da:	683b      	ldr	r3, [r7, #0]
 805d1dc:	b2da      	uxtb	r2, r3
 805d1de:	4908      	ldr	r1, [pc, #32]	@ (805d200 <__NVIC_SetPriority+0x50>)
 805d1e0:	88fb      	ldrh	r3, [r7, #6]
 805d1e2:	f003 030f 	and.w	r3, r3, #15
 805d1e6:	3b04      	subs	r3, #4
 805d1e8:	0112      	lsls	r2, r2, #4
 805d1ea:	b2d2      	uxtb	r2, r2
 805d1ec:	440b      	add	r3, r1
 805d1ee:	761a      	strb	r2, [r3, #24]
}
 805d1f0:	bf00      	nop
 805d1f2:	370c      	adds	r7, #12
 805d1f4:	46bd      	mov	sp, r7
 805d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d1fa:	4770      	bx	lr
 805d1fc:	e000e100 	.word	0xe000e100
 805d200:	e000ed00 	.word	0xe000ed00

0805d204 <NVIC_EncodePriority>:
{
 805d204:	b480      	push	{r7}
 805d206:	b089      	sub	sp, #36	@ 0x24
 805d208:	af00      	add	r7, sp, #0
 805d20a:	60f8      	str	r0, [r7, #12]
 805d20c:	60b9      	str	r1, [r7, #8]
 805d20e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 805d210:	68fb      	ldr	r3, [r7, #12]
 805d212:	f003 0307 	and.w	r3, r3, #7
 805d216:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 805d218:	69fb      	ldr	r3, [r7, #28]
 805d21a:	f1c3 0307 	rsb	r3, r3, #7
 805d21e:	2b04      	cmp	r3, #4
 805d220:	bf28      	it	cs
 805d222:	2304      	movcs	r3, #4
 805d224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 805d226:	69fb      	ldr	r3, [r7, #28]
 805d228:	3304      	adds	r3, #4
 805d22a:	2b06      	cmp	r3, #6
 805d22c:	d902      	bls.n	805d234 <NVIC_EncodePriority+0x30>
 805d22e:	69fb      	ldr	r3, [r7, #28]
 805d230:	3b03      	subs	r3, #3
 805d232:	e000      	b.n	805d236 <NVIC_EncodePriority+0x32>
 805d234:	2300      	movs	r3, #0
 805d236:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805d238:	f04f 32ff 	mov.w	r2, #4294967295
 805d23c:	69bb      	ldr	r3, [r7, #24]
 805d23e:	fa02 f303 	lsl.w	r3, r2, r3
 805d242:	43da      	mvns	r2, r3
 805d244:	68bb      	ldr	r3, [r7, #8]
 805d246:	401a      	ands	r2, r3
 805d248:	697b      	ldr	r3, [r7, #20]
 805d24a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 805d24c:	f04f 31ff 	mov.w	r1, #4294967295
 805d250:	697b      	ldr	r3, [r7, #20]
 805d252:	fa01 f303 	lsl.w	r3, r1, r3
 805d256:	43d9      	mvns	r1, r3
 805d258:	687b      	ldr	r3, [r7, #4]
 805d25a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805d25c:	4313      	orrs	r3, r2
}
 805d25e:	4618      	mov	r0, r3
 805d260:	3724      	adds	r7, #36	@ 0x24
 805d262:	46bd      	mov	sp, r7
 805d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d268:	4770      	bx	lr

0805d26a <LL_I2C_Disable>:
{
 805d26a:	b480      	push	{r7}
 805d26c:	b083      	sub	sp, #12
 805d26e:	af00      	add	r7, sp, #0
 805d270:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 805d272:	687b      	ldr	r3, [r7, #4]
 805d274:	681b      	ldr	r3, [r3, #0]
 805d276:	f023 0201 	bic.w	r2, r3, #1
 805d27a:	687b      	ldr	r3, [r7, #4]
 805d27c:	601a      	str	r2, [r3, #0]
}
 805d27e:	bf00      	nop
 805d280:	370c      	adds	r7, #12
 805d282:	46bd      	mov	sp, r7
 805d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d288:	4770      	bx	lr

0805d28a <LL_I2C_EnableClockStretching>:
{
 805d28a:	b480      	push	{r7}
 805d28c:	b083      	sub	sp, #12
 805d28e:	af00      	add	r7, sp, #0
 805d290:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 805d292:	687b      	ldr	r3, [r7, #4]
 805d294:	681b      	ldr	r3, [r3, #0]
 805d296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 805d29a:	687b      	ldr	r3, [r7, #4]
 805d29c:	601a      	str	r2, [r3, #0]
}
 805d29e:	bf00      	nop
 805d2a0:	370c      	adds	r7, #12
 805d2a2:	46bd      	mov	sp, r7
 805d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d2a8:	4770      	bx	lr

0805d2aa <LL_I2C_DisableGeneralCall>:
{
 805d2aa:	b480      	push	{r7}
 805d2ac:	b083      	sub	sp, #12
 805d2ae:	af00      	add	r7, sp, #0
 805d2b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 805d2b2:	687b      	ldr	r3, [r7, #4]
 805d2b4:	681b      	ldr	r3, [r3, #0]
 805d2b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 805d2ba:	687b      	ldr	r3, [r7, #4]
 805d2bc:	601a      	str	r2, [r3, #0]
}
 805d2be:	bf00      	nop
 805d2c0:	370c      	adds	r7, #12
 805d2c2:	46bd      	mov	sp, r7
 805d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d2c8:	4770      	bx	lr
	...

0805d2cc <LL_I2C_SetOwnAddress2>:
{
 805d2cc:	b480      	push	{r7}
 805d2ce:	b085      	sub	sp, #20
 805d2d0:	af00      	add	r7, sp, #0
 805d2d2:	60f8      	str	r0, [r7, #12]
 805d2d4:	60b9      	str	r1, [r7, #8]
 805d2d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 805d2d8:	68fb      	ldr	r3, [r7, #12]
 805d2da:	68da      	ldr	r2, [r3, #12]
 805d2dc:	4b06      	ldr	r3, [pc, #24]	@ (805d2f8 <LL_I2C_SetOwnAddress2+0x2c>)
 805d2de:	4013      	ands	r3, r2
 805d2e0:	68b9      	ldr	r1, [r7, #8]
 805d2e2:	687a      	ldr	r2, [r7, #4]
 805d2e4:	430a      	orrs	r2, r1
 805d2e6:	431a      	orrs	r2, r3
 805d2e8:	68fb      	ldr	r3, [r7, #12]
 805d2ea:	60da      	str	r2, [r3, #12]
}
 805d2ec:	bf00      	nop
 805d2ee:	3714      	adds	r7, #20
 805d2f0:	46bd      	mov	sp, r7
 805d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d2f6:	4770      	bx	lr
 805d2f8:	fffff801 	.word	0xfffff801

0805d2fc <LL_I2C_DisableOwnAddress2>:
{
 805d2fc:	b480      	push	{r7}
 805d2fe:	b083      	sub	sp, #12
 805d300:	af00      	add	r7, sp, #0
 805d302:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 805d304:	687b      	ldr	r3, [r7, #4]
 805d306:	68db      	ldr	r3, [r3, #12]
 805d308:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 805d30c:	687b      	ldr	r3, [r7, #4]
 805d30e:	60da      	str	r2, [r3, #12]
}
 805d310:	bf00      	nop
 805d312:	370c      	adds	r7, #12
 805d314:	46bd      	mov	sp, r7
 805d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d31a:	4770      	bx	lr

0805d31c <LL_I2C_EnableAutoEndMode>:
{
 805d31c:	b480      	push	{r7}
 805d31e:	b083      	sub	sp, #12
 805d320:	af00      	add	r7, sp, #0
 805d322:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 805d324:	687b      	ldr	r3, [r7, #4]
 805d326:	685b      	ldr	r3, [r3, #4]
 805d328:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 805d32c:	687b      	ldr	r3, [r7, #4]
 805d32e:	605a      	str	r2, [r3, #4]
}
 805d330:	bf00      	nop
 805d332:	370c      	adds	r7, #12
 805d334:	46bd      	mov	sp, r7
 805d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d33a:	4770      	bx	lr

0805d33c <LL_SPI_Enable>:
{
 805d33c:	b480      	push	{r7}
 805d33e:	b083      	sub	sp, #12
 805d340:	af00      	add	r7, sp, #0
 805d342:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 805d344:	687b      	ldr	r3, [r7, #4]
 805d346:	681b      	ldr	r3, [r3, #0]
 805d348:	f043 0201 	orr.w	r2, r3, #1
 805d34c:	687b      	ldr	r3, [r7, #4]
 805d34e:	601a      	str	r2, [r3, #0]
}
 805d350:	bf00      	nop
 805d352:	370c      	adds	r7, #12
 805d354:	46bd      	mov	sp, r7
 805d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d35a:	4770      	bx	lr

0805d35c <LL_SPI_StartMasterTransfer>:
{
 805d35c:	b480      	push	{r7}
 805d35e:	b083      	sub	sp, #12
 805d360:	af00      	add	r7, sp, #0
 805d362:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 805d364:	687b      	ldr	r3, [r7, #4]
 805d366:	681b      	ldr	r3, [r3, #0]
 805d368:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 805d36c:	687b      	ldr	r3, [r7, #4]
 805d36e:	601a      	str	r2, [r3, #0]
}
 805d370:	bf00      	nop
 805d372:	370c      	adds	r7, #12
 805d374:	46bd      	mov	sp, r7
 805d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d37a:	4770      	bx	lr

0805d37c <LL_SPI_SetStandard>:
{
 805d37c:	b480      	push	{r7}
 805d37e:	b083      	sub	sp, #12
 805d380:	af00      	add	r7, sp, #0
 805d382:	6078      	str	r0, [r7, #4]
 805d384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 805d386:	687b      	ldr	r3, [r7, #4]
 805d388:	68db      	ldr	r3, [r3, #12]
 805d38a:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 805d38e:	683b      	ldr	r3, [r7, #0]
 805d390:	431a      	orrs	r2, r3
 805d392:	687b      	ldr	r3, [r7, #4]
 805d394:	60da      	str	r2, [r3, #12]
}
 805d396:	bf00      	nop
 805d398:	370c      	adds	r7, #12
 805d39a:	46bd      	mov	sp, r7
 805d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d3a0:	4770      	bx	lr

0805d3a2 <LL_SPI_SetFIFOThreshold>:
{
 805d3a2:	b480      	push	{r7}
 805d3a4:	b083      	sub	sp, #12
 805d3a6:	af00      	add	r7, sp, #0
 805d3a8:	6078      	str	r0, [r7, #4]
 805d3aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 805d3ac:	687b      	ldr	r3, [r7, #4]
 805d3ae:	689b      	ldr	r3, [r3, #8]
 805d3b0:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 805d3b4:	683b      	ldr	r3, [r7, #0]
 805d3b6:	431a      	orrs	r2, r3
 805d3b8:	687b      	ldr	r3, [r7, #4]
 805d3ba:	609a      	str	r2, [r3, #8]
}
 805d3bc:	bf00      	nop
 805d3be:	370c      	adds	r7, #12
 805d3c0:	46bd      	mov	sp, r7
 805d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d3c6:	4770      	bx	lr

0805d3c8 <LL_SPI_EnableNSSPulseMgt>:
{
 805d3c8:	b480      	push	{r7}
 805d3ca:	b083      	sub	sp, #12
 805d3cc:	af00      	add	r7, sp, #0
 805d3ce:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 805d3d0:	687b      	ldr	r3, [r7, #4]
 805d3d2:	68db      	ldr	r3, [r3, #12]
 805d3d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 805d3d8:	687b      	ldr	r3, [r7, #4]
 805d3da:	60da      	str	r2, [r3, #12]
}
 805d3dc:	bf00      	nop
 805d3de:	370c      	adds	r7, #12
 805d3e0:	46bd      	mov	sp, r7
 805d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d3e6:	4770      	bx	lr

0805d3e8 <LL_SPI_DisableNSSPulseMgt>:
{
 805d3e8:	b480      	push	{r7}
 805d3ea:	b083      	sub	sp, #12
 805d3ec:	af00      	add	r7, sp, #0
 805d3ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 805d3f0:	687b      	ldr	r3, [r7, #4]
 805d3f2:	68db      	ldr	r3, [r3, #12]
 805d3f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 805d3f8:	687b      	ldr	r3, [r7, #4]
 805d3fa:	60da      	str	r2, [r3, #12]
}
 805d3fc:	bf00      	nop
 805d3fe:	370c      	adds	r7, #12
 805d400:	46bd      	mov	sp, r7
 805d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d406:	4770      	bx	lr

0805d408 <LL_TIM_EnableCounter>:
{
 805d408:	b480      	push	{r7}
 805d40a:	b083      	sub	sp, #12
 805d40c:	af00      	add	r7, sp, #0
 805d40e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 805d410:	687b      	ldr	r3, [r7, #4]
 805d412:	681b      	ldr	r3, [r3, #0]
 805d414:	f043 0201 	orr.w	r2, r3, #1
 805d418:	687b      	ldr	r3, [r7, #4]
 805d41a:	601a      	str	r2, [r3, #0]
}
 805d41c:	bf00      	nop
 805d41e:	370c      	adds	r7, #12
 805d420:	46bd      	mov	sp, r7
 805d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d426:	4770      	bx	lr

0805d428 <LL_TIM_EnableUpdateEvent>:
{
 805d428:	b480      	push	{r7}
 805d42a:	b083      	sub	sp, #12
 805d42c:	af00      	add	r7, sp, #0
 805d42e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 805d430:	687b      	ldr	r3, [r7, #4]
 805d432:	681b      	ldr	r3, [r3, #0]
 805d434:	f023 0202 	bic.w	r2, r3, #2
 805d438:	687b      	ldr	r3, [r7, #4]
 805d43a:	601a      	str	r2, [r3, #0]
}
 805d43c:	bf00      	nop
 805d43e:	370c      	adds	r7, #12
 805d440:	46bd      	mov	sp, r7
 805d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d446:	4770      	bx	lr

0805d448 <LL_TIM_DisableARRPreload>:
{
 805d448:	b480      	push	{r7}
 805d44a:	b083      	sub	sp, #12
 805d44c:	af00      	add	r7, sp, #0
 805d44e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 805d450:	687b      	ldr	r3, [r7, #4]
 805d452:	681b      	ldr	r3, [r3, #0]
 805d454:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 805d458:	687b      	ldr	r3, [r7, #4]
 805d45a:	601a      	str	r2, [r3, #0]
}
 805d45c:	bf00      	nop
 805d45e:	370c      	adds	r7, #12
 805d460:	46bd      	mov	sp, r7
 805d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d466:	4770      	bx	lr

0805d468 <LL_TIM_SetClockSource>:
{
 805d468:	b480      	push	{r7}
 805d46a:	b083      	sub	sp, #12
 805d46c:	af00      	add	r7, sp, #0
 805d46e:	6078      	str	r0, [r7, #4]
 805d470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 805d472:	687b      	ldr	r3, [r7, #4]
 805d474:	689a      	ldr	r2, [r3, #8]
 805d476:	4b06      	ldr	r3, [pc, #24]	@ (805d490 <LL_TIM_SetClockSource+0x28>)
 805d478:	4013      	ands	r3, r2
 805d47a:	683a      	ldr	r2, [r7, #0]
 805d47c:	431a      	orrs	r2, r3
 805d47e:	687b      	ldr	r3, [r7, #4]
 805d480:	609a      	str	r2, [r3, #8]
}
 805d482:	bf00      	nop
 805d484:	370c      	adds	r7, #12
 805d486:	46bd      	mov	sp, r7
 805d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d48c:	4770      	bx	lr
 805d48e:	bf00      	nop
 805d490:	fffebff8 	.word	0xfffebff8

0805d494 <LL_TIM_SetTriggerOutput>:
{
 805d494:	b480      	push	{r7}
 805d496:	b083      	sub	sp, #12
 805d498:	af00      	add	r7, sp, #0
 805d49a:	6078      	str	r0, [r7, #4]
 805d49c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 805d49e:	687b      	ldr	r3, [r7, #4]
 805d4a0:	685b      	ldr	r3, [r3, #4]
 805d4a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 805d4a6:	683b      	ldr	r3, [r7, #0]
 805d4a8:	431a      	orrs	r2, r3
 805d4aa:	687b      	ldr	r3, [r7, #4]
 805d4ac:	605a      	str	r2, [r3, #4]
}
 805d4ae:	bf00      	nop
 805d4b0:	370c      	adds	r7, #12
 805d4b2:	46bd      	mov	sp, r7
 805d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d4b8:	4770      	bx	lr

0805d4ba <LL_TIM_SetTriggerOutput2>:
{
 805d4ba:	b480      	push	{r7}
 805d4bc:	b083      	sub	sp, #12
 805d4be:	af00      	add	r7, sp, #0
 805d4c0:	6078      	str	r0, [r7, #4]
 805d4c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 805d4c4:	687b      	ldr	r3, [r7, #4]
 805d4c6:	685b      	ldr	r3, [r3, #4]
 805d4c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 805d4cc:	683b      	ldr	r3, [r7, #0]
 805d4ce:	431a      	orrs	r2, r3
 805d4d0:	687b      	ldr	r3, [r7, #4]
 805d4d2:	605a      	str	r2, [r3, #4]
}
 805d4d4:	bf00      	nop
 805d4d6:	370c      	adds	r7, #12
 805d4d8:	46bd      	mov	sp, r7
 805d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d4de:	4770      	bx	lr

0805d4e0 <LL_TIM_DisableMasterSlaveMode>:
{
 805d4e0:	b480      	push	{r7}
 805d4e2:	b083      	sub	sp, #12
 805d4e4:	af00      	add	r7, sp, #0
 805d4e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 805d4e8:	687b      	ldr	r3, [r7, #4]
 805d4ea:	689b      	ldr	r3, [r3, #8]
 805d4ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 805d4f0:	687b      	ldr	r3, [r7, #4]
 805d4f2:	609a      	str	r2, [r3, #8]
}
 805d4f4:	bf00      	nop
 805d4f6:	370c      	adds	r7, #12
 805d4f8:	46bd      	mov	sp, r7
 805d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d4fe:	4770      	bx	lr

0805d500 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 805d500:	b480      	push	{r7}
 805d502:	b083      	sub	sp, #12
 805d504:	af00      	add	r7, sp, #0
 805d506:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 805d508:	687b      	ldr	r3, [r7, #4]
 805d50a:	68db      	ldr	r3, [r3, #12]
 805d50c:	f043 0201 	orr.w	r2, r3, #1
 805d510:	687b      	ldr	r3, [r7, #4]
 805d512:	60da      	str	r2, [r3, #12]
}
 805d514:	bf00      	nop
 805d516:	370c      	adds	r7, #12
 805d518:	46bd      	mov	sp, r7
 805d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d51e:	4770      	bx	lr

0805d520 <LL_USART_Enable>:
{
 805d520:	b480      	push	{r7}
 805d522:	b083      	sub	sp, #12
 805d524:	af00      	add	r7, sp, #0
 805d526:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 805d528:	687b      	ldr	r3, [r7, #4]
 805d52a:	681b      	ldr	r3, [r3, #0]
 805d52c:	f043 0201 	orr.w	r2, r3, #1
 805d530:	687b      	ldr	r3, [r7, #4]
 805d532:	601a      	str	r2, [r3, #0]
}
 805d534:	bf00      	nop
 805d536:	370c      	adds	r7, #12
 805d538:	46bd      	mov	sp, r7
 805d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d53e:	4770      	bx	lr

0805d540 <LL_USART_DisableFIFO>:
{
 805d540:	b480      	push	{r7}
 805d542:	b083      	sub	sp, #12
 805d544:	af00      	add	r7, sp, #0
 805d546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 805d548:	687b      	ldr	r3, [r7, #4]
 805d54a:	681b      	ldr	r3, [r3, #0]
 805d54c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 805d550:	687b      	ldr	r3, [r7, #4]
 805d552:	601a      	str	r2, [r3, #0]
}
 805d554:	bf00      	nop
 805d556:	370c      	adds	r7, #12
 805d558:	46bd      	mov	sp, r7
 805d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d55e:	4770      	bx	lr

0805d560 <LL_USART_SetTXFIFOThreshold>:
{
 805d560:	b480      	push	{r7}
 805d562:	b089      	sub	sp, #36	@ 0x24
 805d564:	af00      	add	r7, sp, #0
 805d566:	6078      	str	r0, [r7, #4]
 805d568:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 805d56a:	687b      	ldr	r3, [r7, #4]
 805d56c:	3308      	adds	r3, #8
 805d56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 805d570:	68fb      	ldr	r3, [r7, #12]
 805d572:	e853 3f00 	ldrex	r3, [r3]
 805d576:	60bb      	str	r3, [r7, #8]
   return(result);
 805d578:	68bb      	ldr	r3, [r7, #8]
 805d57a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 805d57e:	683b      	ldr	r3, [r7, #0]
 805d580:	075b      	lsls	r3, r3, #29
 805d582:	4313      	orrs	r3, r2
 805d584:	61fb      	str	r3, [r7, #28]
 805d586:	687b      	ldr	r3, [r7, #4]
 805d588:	3308      	adds	r3, #8
 805d58a:	69fa      	ldr	r2, [r7, #28]
 805d58c:	61ba      	str	r2, [r7, #24]
 805d58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 805d590:	6979      	ldr	r1, [r7, #20]
 805d592:	69ba      	ldr	r2, [r7, #24]
 805d594:	e841 2300 	strex	r3, r2, [r1]
 805d598:	613b      	str	r3, [r7, #16]
   return(result);
 805d59a:	693b      	ldr	r3, [r7, #16]
 805d59c:	2b00      	cmp	r3, #0
 805d59e:	d1e4      	bne.n	805d56a <LL_USART_SetTXFIFOThreshold+0xa>
}
 805d5a0:	bf00      	nop
 805d5a2:	bf00      	nop
 805d5a4:	3724      	adds	r7, #36	@ 0x24
 805d5a6:	46bd      	mov	sp, r7
 805d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d5ac:	4770      	bx	lr

0805d5ae <LL_USART_SetRXFIFOThreshold>:
{
 805d5ae:	b480      	push	{r7}
 805d5b0:	b089      	sub	sp, #36	@ 0x24
 805d5b2:	af00      	add	r7, sp, #0
 805d5b4:	6078      	str	r0, [r7, #4]
 805d5b6:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 805d5b8:	687b      	ldr	r3, [r7, #4]
 805d5ba:	3308      	adds	r3, #8
 805d5bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 805d5be:	68fb      	ldr	r3, [r7, #12]
 805d5c0:	e853 3f00 	ldrex	r3, [r3]
 805d5c4:	60bb      	str	r3, [r7, #8]
   return(result);
 805d5c6:	68bb      	ldr	r3, [r7, #8]
 805d5c8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 805d5cc:	683b      	ldr	r3, [r7, #0]
 805d5ce:	065b      	lsls	r3, r3, #25
 805d5d0:	4313      	orrs	r3, r2
 805d5d2:	61fb      	str	r3, [r7, #28]
 805d5d4:	687b      	ldr	r3, [r7, #4]
 805d5d6:	3308      	adds	r3, #8
 805d5d8:	69fa      	ldr	r2, [r7, #28]
 805d5da:	61ba      	str	r2, [r7, #24]
 805d5dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 805d5de:	6979      	ldr	r1, [r7, #20]
 805d5e0:	69ba      	ldr	r2, [r7, #24]
 805d5e2:	e841 2300 	strex	r3, r2, [r1]
 805d5e6:	613b      	str	r3, [r7, #16]
   return(result);
 805d5e8:	693b      	ldr	r3, [r7, #16]
 805d5ea:	2b00      	cmp	r3, #0
 805d5ec:	d1e4      	bne.n	805d5b8 <LL_USART_SetRXFIFOThreshold+0xa>
}
 805d5ee:	bf00      	nop
 805d5f0:	bf00      	nop
 805d5f2:	3724      	adds	r7, #36	@ 0x24
 805d5f4:	46bd      	mov	sp, r7
 805d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d5fa:	4770      	bx	lr

0805d5fc <LL_USART_ConfigAsyncMode>:
{
 805d5fc:	b480      	push	{r7}
 805d5fe:	b083      	sub	sp, #12
 805d600:	af00      	add	r7, sp, #0
 805d602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 805d604:	687b      	ldr	r3, [r7, #4]
 805d606:	685b      	ldr	r3, [r3, #4]
 805d608:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 805d60c:	687b      	ldr	r3, [r7, #4]
 805d60e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 805d610:	687b      	ldr	r3, [r7, #4]
 805d612:	689b      	ldr	r3, [r3, #8]
 805d614:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 805d618:	687b      	ldr	r3, [r7, #4]
 805d61a:	609a      	str	r2, [r3, #8]
}
 805d61c:	bf00      	nop
 805d61e:	370c      	adds	r7, #12
 805d620:	46bd      	mov	sp, r7
 805d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d626:	4770      	bx	lr

0805d628 <LL_USART_IsActiveFlag_TC>:
{
 805d628:	b480      	push	{r7}
 805d62a:	b083      	sub	sp, #12
 805d62c:	af00      	add	r7, sp, #0
 805d62e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 805d630:	687b      	ldr	r3, [r7, #4]
 805d632:	69db      	ldr	r3, [r3, #28]
 805d634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 805d638:	2b40      	cmp	r3, #64	@ 0x40
 805d63a:	d101      	bne.n	805d640 <LL_USART_IsActiveFlag_TC+0x18>
 805d63c:	2301      	movs	r3, #1
 805d63e:	e000      	b.n	805d642 <LL_USART_IsActiveFlag_TC+0x1a>
 805d640:	2300      	movs	r3, #0
}
 805d642:	4618      	mov	r0, r3
 805d644:	370c      	adds	r7, #12
 805d646:	46bd      	mov	sp, r7
 805d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d64c:	4770      	bx	lr

0805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 805d64e:	b480      	push	{r7}
 805d650:	b083      	sub	sp, #12
 805d652:	af00      	add	r7, sp, #0
 805d654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 805d656:	687b      	ldr	r3, [r7, #4]
 805d658:	69db      	ldr	r3, [r3, #28]
 805d65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 805d65e:	2b80      	cmp	r3, #128	@ 0x80
 805d660:	d101      	bne.n	805d666 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 805d662:	2301      	movs	r3, #1
 805d664:	e000      	b.n	805d668 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 805d666:	2300      	movs	r3, #0
}
 805d668:	4618      	mov	r0, r3
 805d66a:	370c      	adds	r7, #12
 805d66c:	46bd      	mov	sp, r7
 805d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d672:	4770      	bx	lr

0805d674 <LL_USART_IsActiveFlag_TEACK>:
{
 805d674:	b480      	push	{r7}
 805d676:	b083      	sub	sp, #12
 805d678:	af00      	add	r7, sp, #0
 805d67a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 805d67c:	687b      	ldr	r3, [r7, #4]
 805d67e:	69db      	ldr	r3, [r3, #28]
 805d680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 805d684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 805d688:	d101      	bne.n	805d68e <LL_USART_IsActiveFlag_TEACK+0x1a>
 805d68a:	2301      	movs	r3, #1
 805d68c:	e000      	b.n	805d690 <LL_USART_IsActiveFlag_TEACK+0x1c>
 805d68e:	2300      	movs	r3, #0
}
 805d690:	4618      	mov	r0, r3
 805d692:	370c      	adds	r7, #12
 805d694:	46bd      	mov	sp, r7
 805d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d69a:	4770      	bx	lr

0805d69c <LL_USART_IsActiveFlag_REACK>:
{
 805d69c:	b480      	push	{r7}
 805d69e:	b083      	sub	sp, #12
 805d6a0:	af00      	add	r7, sp, #0
 805d6a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 805d6a4:	687b      	ldr	r3, [r7, #4]
 805d6a6:	69db      	ldr	r3, [r3, #28]
 805d6a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 805d6ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 805d6b0:	d101      	bne.n	805d6b6 <LL_USART_IsActiveFlag_REACK+0x1a>
 805d6b2:	2301      	movs	r3, #1
 805d6b4:	e000      	b.n	805d6b8 <LL_USART_IsActiveFlag_REACK+0x1c>
 805d6b6:	2300      	movs	r3, #0
}
 805d6b8:	4618      	mov	r0, r3
 805d6ba:	370c      	adds	r7, #12
 805d6bc:	46bd      	mov	sp, r7
 805d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d6c2:	4770      	bx	lr

0805d6c4 <LL_USART_TransmitData8>:
{
 805d6c4:	b480      	push	{r7}
 805d6c6:	b083      	sub	sp, #12
 805d6c8:	af00      	add	r7, sp, #0
 805d6ca:	6078      	str	r0, [r7, #4]
 805d6cc:	460b      	mov	r3, r1
 805d6ce:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 805d6d0:	78fa      	ldrb	r2, [r7, #3]
 805d6d2:	687b      	ldr	r3, [r7, #4]
 805d6d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 805d6d6:	bf00      	nop
 805d6d8:	370c      	adds	r7, #12
 805d6da:	46bd      	mov	sp, r7
 805d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d6e0:	4770      	bx	lr

0805d6e2 <LL_GPIO_SetOutputPin>:
{
 805d6e2:	b480      	push	{r7}
 805d6e4:	b083      	sub	sp, #12
 805d6e6:	af00      	add	r7, sp, #0
 805d6e8:	6078      	str	r0, [r7, #4]
 805d6ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 805d6ec:	687b      	ldr	r3, [r7, #4]
 805d6ee:	683a      	ldr	r2, [r7, #0]
 805d6f0:	619a      	str	r2, [r3, #24]
}
 805d6f2:	bf00      	nop
 805d6f4:	370c      	adds	r7, #12
 805d6f6:	46bd      	mov	sp, r7
 805d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d6fc:	4770      	bx	lr

0805d6fe <LL_GPIO_ResetOutputPin>:
{
 805d6fe:	b480      	push	{r7}
 805d700:	b083      	sub	sp, #12
 805d702:	af00      	add	r7, sp, #0
 805d704:	6078      	str	r0, [r7, #4]
 805d706:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 805d708:	683b      	ldr	r3, [r7, #0]
 805d70a:	041a      	lsls	r2, r3, #16
 805d70c:	687b      	ldr	r3, [r7, #4]
 805d70e:	619a      	str	r2, [r3, #24]
}
 805d710:	bf00      	nop
 805d712:	370c      	adds	r7, #12
 805d714:	46bd      	mov	sp, r7
 805d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d71a:	4770      	bx	lr

0805d71c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 805d71c:	b480      	push	{r7}
 805d71e:	b085      	sub	sp, #20
 805d720:	af00      	add	r7, sp, #0
 805d722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 805d724:	4b0a      	ldr	r3, [pc, #40]	@ (805d750 <LL_AHB4_GRP1_EnableClock+0x34>)
 805d726:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 805d72a:	4909      	ldr	r1, [pc, #36]	@ (805d750 <LL_AHB4_GRP1_EnableClock+0x34>)
 805d72c:	687b      	ldr	r3, [r7, #4]
 805d72e:	4313      	orrs	r3, r2
 805d730:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 805d734:	4b06      	ldr	r3, [pc, #24]	@ (805d750 <LL_AHB4_GRP1_EnableClock+0x34>)
 805d736:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 805d73a:	687b      	ldr	r3, [r7, #4]
 805d73c:	4013      	ands	r3, r2
 805d73e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 805d740:	68fb      	ldr	r3, [r7, #12]
}
 805d742:	bf00      	nop
 805d744:	3714      	adds	r7, #20
 805d746:	46bd      	mov	sp, r7
 805d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d74c:	4770      	bx	lr
 805d74e:	bf00      	nop
 805d750:	58024400 	.word	0x58024400

0805d754 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 805d754:	b480      	push	{r7}
 805d756:	b085      	sub	sp, #20
 805d758:	af00      	add	r7, sp, #0
 805d75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 805d75c:	4b0a      	ldr	r3, [pc, #40]	@ (805d788 <LL_APB1_GRP1_EnableClock+0x34>)
 805d75e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 805d762:	4909      	ldr	r1, [pc, #36]	@ (805d788 <LL_APB1_GRP1_EnableClock+0x34>)
 805d764:	687b      	ldr	r3, [r7, #4]
 805d766:	4313      	orrs	r3, r2
 805d768:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 805d76c:	4b06      	ldr	r3, [pc, #24]	@ (805d788 <LL_APB1_GRP1_EnableClock+0x34>)
 805d76e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 805d772:	687b      	ldr	r3, [r7, #4]
 805d774:	4013      	ands	r3, r2
 805d776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 805d778:	68fb      	ldr	r3, [r7, #12]
}
 805d77a:	bf00      	nop
 805d77c:	3714      	adds	r7, #20
 805d77e:	46bd      	mov	sp, r7
 805d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d784:	4770      	bx	lr
 805d786:	bf00      	nop
 805d788:	58024400 	.word	0x58024400

0805d78c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 805d78c:	b480      	push	{r7}
 805d78e:	b085      	sub	sp, #20
 805d790:	af00      	add	r7, sp, #0
 805d792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 805d794:	4b0a      	ldr	r3, [pc, #40]	@ (805d7c0 <LL_APB2_GRP1_EnableClock+0x34>)
 805d796:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 805d79a:	4909      	ldr	r1, [pc, #36]	@ (805d7c0 <LL_APB2_GRP1_EnableClock+0x34>)
 805d79c:	687b      	ldr	r3, [r7, #4]
 805d79e:	4313      	orrs	r3, r2
 805d7a0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 805d7a4:	4b06      	ldr	r3, [pc, #24]	@ (805d7c0 <LL_APB2_GRP1_EnableClock+0x34>)
 805d7a6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 805d7aa:	687b      	ldr	r3, [r7, #4]
 805d7ac:	4013      	ands	r3, r2
 805d7ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 805d7b0:	68fb      	ldr	r3, [r7, #12]
}
 805d7b2:	bf00      	nop
 805d7b4:	3714      	adds	r7, #20
 805d7b6:	46bd      	mov	sp, r7
 805d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d7bc:	4770      	bx	lr
 805d7be:	bf00      	nop
 805d7c0:	58024400 	.word	0x58024400

0805d7c4 <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 805d7c4:	b480      	push	{r7}
 805d7c6:	b085      	sub	sp, #20
 805d7c8:	af00      	add	r7, sp, #0
 805d7ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 805d7cc:	4b0a      	ldr	r3, [pc, #40]	@ (805d7f8 <LL_APB4_GRP1_EnableClock+0x34>)
 805d7ce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 805d7d2:	4909      	ldr	r1, [pc, #36]	@ (805d7f8 <LL_APB4_GRP1_EnableClock+0x34>)
 805d7d4:	687b      	ldr	r3, [r7, #4]
 805d7d6:	4313      	orrs	r3, r2
 805d7d8:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 805d7dc:	4b06      	ldr	r3, [pc, #24]	@ (805d7f8 <LL_APB4_GRP1_EnableClock+0x34>)
 805d7de:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 805d7e2:	687b      	ldr	r3, [r7, #4]
 805d7e4:	4013      	ands	r3, r2
 805d7e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 805d7e8:	68fb      	ldr	r3, [r7, #12]
}
 805d7ea:	bf00      	nop
 805d7ec:	3714      	adds	r7, #20
 805d7ee:	46bd      	mov	sp, r7
 805d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d7f4:	4770      	bx	lr
 805d7f6:	bf00      	nop
 805d7f8:	58024400 	.word	0x58024400

0805d7fc <LL_DMA_SetDataTransferDirection>:
{
 805d7fc:	b480      	push	{r7}
 805d7fe:	b087      	sub	sp, #28
 805d800:	af00      	add	r7, sp, #0
 805d802:	60f8      	str	r0, [r7, #12]
 805d804:	60b9      	str	r1, [r7, #8]
 805d806:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d808:	68fb      	ldr	r3, [r7, #12]
 805d80a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 805d80c:	4a0d      	ldr	r2, [pc, #52]	@ (805d844 <LL_DMA_SetDataTransferDirection+0x48>)
 805d80e:	68bb      	ldr	r3, [r7, #8]
 805d810:	4413      	add	r3, r2
 805d812:	781b      	ldrb	r3, [r3, #0]
 805d814:	461a      	mov	r2, r3
 805d816:	697b      	ldr	r3, [r7, #20]
 805d818:	4413      	add	r3, r2
 805d81a:	681b      	ldr	r3, [r3, #0]
 805d81c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 805d820:	4908      	ldr	r1, [pc, #32]	@ (805d844 <LL_DMA_SetDataTransferDirection+0x48>)
 805d822:	68bb      	ldr	r3, [r7, #8]
 805d824:	440b      	add	r3, r1
 805d826:	781b      	ldrb	r3, [r3, #0]
 805d828:	4619      	mov	r1, r3
 805d82a:	697b      	ldr	r3, [r7, #20]
 805d82c:	440b      	add	r3, r1
 805d82e:	4619      	mov	r1, r3
 805d830:	687b      	ldr	r3, [r7, #4]
 805d832:	4313      	orrs	r3, r2
 805d834:	600b      	str	r3, [r1, #0]
}
 805d836:	bf00      	nop
 805d838:	371c      	adds	r7, #28
 805d83a:	46bd      	mov	sp, r7
 805d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d840:	4770      	bx	lr
 805d842:	bf00      	nop
 805d844:	080724f8 	.word	0x080724f8

0805d848 <LL_DMA_SetMode>:
{
 805d848:	b480      	push	{r7}
 805d84a:	b087      	sub	sp, #28
 805d84c:	af00      	add	r7, sp, #0
 805d84e:	60f8      	str	r0, [r7, #12]
 805d850:	60b9      	str	r1, [r7, #8]
 805d852:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d854:	68fb      	ldr	r3, [r7, #12]
 805d856:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 805d858:	4a0d      	ldr	r2, [pc, #52]	@ (805d890 <LL_DMA_SetMode+0x48>)
 805d85a:	68bb      	ldr	r3, [r7, #8]
 805d85c:	4413      	add	r3, r2
 805d85e:	781b      	ldrb	r3, [r3, #0]
 805d860:	461a      	mov	r2, r3
 805d862:	697b      	ldr	r3, [r7, #20]
 805d864:	4413      	add	r3, r2
 805d866:	681b      	ldr	r3, [r3, #0]
 805d868:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 805d86c:	4908      	ldr	r1, [pc, #32]	@ (805d890 <LL_DMA_SetMode+0x48>)
 805d86e:	68bb      	ldr	r3, [r7, #8]
 805d870:	440b      	add	r3, r1
 805d872:	781b      	ldrb	r3, [r3, #0]
 805d874:	4619      	mov	r1, r3
 805d876:	697b      	ldr	r3, [r7, #20]
 805d878:	440b      	add	r3, r1
 805d87a:	4619      	mov	r1, r3
 805d87c:	687b      	ldr	r3, [r7, #4]
 805d87e:	4313      	orrs	r3, r2
 805d880:	600b      	str	r3, [r1, #0]
}
 805d882:	bf00      	nop
 805d884:	371c      	adds	r7, #28
 805d886:	46bd      	mov	sp, r7
 805d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d88c:	4770      	bx	lr
 805d88e:	bf00      	nop
 805d890:	080724f8 	.word	0x080724f8

0805d894 <LL_DMA_SetPeriphIncMode>:
{
 805d894:	b480      	push	{r7}
 805d896:	b087      	sub	sp, #28
 805d898:	af00      	add	r7, sp, #0
 805d89a:	60f8      	str	r0, [r7, #12]
 805d89c:	60b9      	str	r1, [r7, #8]
 805d89e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d8a0:	68fb      	ldr	r3, [r7, #12]
 805d8a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 805d8a4:	4a0d      	ldr	r2, [pc, #52]	@ (805d8dc <LL_DMA_SetPeriphIncMode+0x48>)
 805d8a6:	68bb      	ldr	r3, [r7, #8]
 805d8a8:	4413      	add	r3, r2
 805d8aa:	781b      	ldrb	r3, [r3, #0]
 805d8ac:	461a      	mov	r2, r3
 805d8ae:	697b      	ldr	r3, [r7, #20]
 805d8b0:	4413      	add	r3, r2
 805d8b2:	681b      	ldr	r3, [r3, #0]
 805d8b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 805d8b8:	4908      	ldr	r1, [pc, #32]	@ (805d8dc <LL_DMA_SetPeriphIncMode+0x48>)
 805d8ba:	68bb      	ldr	r3, [r7, #8]
 805d8bc:	440b      	add	r3, r1
 805d8be:	781b      	ldrb	r3, [r3, #0]
 805d8c0:	4619      	mov	r1, r3
 805d8c2:	697b      	ldr	r3, [r7, #20]
 805d8c4:	440b      	add	r3, r1
 805d8c6:	4619      	mov	r1, r3
 805d8c8:	687b      	ldr	r3, [r7, #4]
 805d8ca:	4313      	orrs	r3, r2
 805d8cc:	600b      	str	r3, [r1, #0]
}
 805d8ce:	bf00      	nop
 805d8d0:	371c      	adds	r7, #28
 805d8d2:	46bd      	mov	sp, r7
 805d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d8d8:	4770      	bx	lr
 805d8da:	bf00      	nop
 805d8dc:	080724f8 	.word	0x080724f8

0805d8e0 <LL_DMA_SetMemoryIncMode>:
{
 805d8e0:	b480      	push	{r7}
 805d8e2:	b087      	sub	sp, #28
 805d8e4:	af00      	add	r7, sp, #0
 805d8e6:	60f8      	str	r0, [r7, #12]
 805d8e8:	60b9      	str	r1, [r7, #8]
 805d8ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d8ec:	68fb      	ldr	r3, [r7, #12]
 805d8ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 805d8f0:	4a0d      	ldr	r2, [pc, #52]	@ (805d928 <LL_DMA_SetMemoryIncMode+0x48>)
 805d8f2:	68bb      	ldr	r3, [r7, #8]
 805d8f4:	4413      	add	r3, r2
 805d8f6:	781b      	ldrb	r3, [r3, #0]
 805d8f8:	461a      	mov	r2, r3
 805d8fa:	697b      	ldr	r3, [r7, #20]
 805d8fc:	4413      	add	r3, r2
 805d8fe:	681b      	ldr	r3, [r3, #0]
 805d900:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 805d904:	4908      	ldr	r1, [pc, #32]	@ (805d928 <LL_DMA_SetMemoryIncMode+0x48>)
 805d906:	68bb      	ldr	r3, [r7, #8]
 805d908:	440b      	add	r3, r1
 805d90a:	781b      	ldrb	r3, [r3, #0]
 805d90c:	4619      	mov	r1, r3
 805d90e:	697b      	ldr	r3, [r7, #20]
 805d910:	440b      	add	r3, r1
 805d912:	4619      	mov	r1, r3
 805d914:	687b      	ldr	r3, [r7, #4]
 805d916:	4313      	orrs	r3, r2
 805d918:	600b      	str	r3, [r1, #0]
}
 805d91a:	bf00      	nop
 805d91c:	371c      	adds	r7, #28
 805d91e:	46bd      	mov	sp, r7
 805d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d924:	4770      	bx	lr
 805d926:	bf00      	nop
 805d928:	080724f8 	.word	0x080724f8

0805d92c <LL_DMA_SetPeriphSize>:
{
 805d92c:	b480      	push	{r7}
 805d92e:	b087      	sub	sp, #28
 805d930:	af00      	add	r7, sp, #0
 805d932:	60f8      	str	r0, [r7, #12]
 805d934:	60b9      	str	r1, [r7, #8]
 805d936:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d938:	68fb      	ldr	r3, [r7, #12]
 805d93a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 805d93c:	4a0d      	ldr	r2, [pc, #52]	@ (805d974 <LL_DMA_SetPeriphSize+0x48>)
 805d93e:	68bb      	ldr	r3, [r7, #8]
 805d940:	4413      	add	r3, r2
 805d942:	781b      	ldrb	r3, [r3, #0]
 805d944:	461a      	mov	r2, r3
 805d946:	697b      	ldr	r3, [r7, #20]
 805d948:	4413      	add	r3, r2
 805d94a:	681b      	ldr	r3, [r3, #0]
 805d94c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 805d950:	4908      	ldr	r1, [pc, #32]	@ (805d974 <LL_DMA_SetPeriphSize+0x48>)
 805d952:	68bb      	ldr	r3, [r7, #8]
 805d954:	440b      	add	r3, r1
 805d956:	781b      	ldrb	r3, [r3, #0]
 805d958:	4619      	mov	r1, r3
 805d95a:	697b      	ldr	r3, [r7, #20]
 805d95c:	440b      	add	r3, r1
 805d95e:	4619      	mov	r1, r3
 805d960:	687b      	ldr	r3, [r7, #4]
 805d962:	4313      	orrs	r3, r2
 805d964:	600b      	str	r3, [r1, #0]
}
 805d966:	bf00      	nop
 805d968:	371c      	adds	r7, #28
 805d96a:	46bd      	mov	sp, r7
 805d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d970:	4770      	bx	lr
 805d972:	bf00      	nop
 805d974:	080724f8 	.word	0x080724f8

0805d978 <LL_DMA_SetMemorySize>:
{
 805d978:	b480      	push	{r7}
 805d97a:	b087      	sub	sp, #28
 805d97c:	af00      	add	r7, sp, #0
 805d97e:	60f8      	str	r0, [r7, #12]
 805d980:	60b9      	str	r1, [r7, #8]
 805d982:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d984:	68fb      	ldr	r3, [r7, #12]
 805d986:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 805d988:	4a0d      	ldr	r2, [pc, #52]	@ (805d9c0 <LL_DMA_SetMemorySize+0x48>)
 805d98a:	68bb      	ldr	r3, [r7, #8]
 805d98c:	4413      	add	r3, r2
 805d98e:	781b      	ldrb	r3, [r3, #0]
 805d990:	461a      	mov	r2, r3
 805d992:	697b      	ldr	r3, [r7, #20]
 805d994:	4413      	add	r3, r2
 805d996:	681b      	ldr	r3, [r3, #0]
 805d998:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 805d99c:	4908      	ldr	r1, [pc, #32]	@ (805d9c0 <LL_DMA_SetMemorySize+0x48>)
 805d99e:	68bb      	ldr	r3, [r7, #8]
 805d9a0:	440b      	add	r3, r1
 805d9a2:	781b      	ldrb	r3, [r3, #0]
 805d9a4:	4619      	mov	r1, r3
 805d9a6:	697b      	ldr	r3, [r7, #20]
 805d9a8:	440b      	add	r3, r1
 805d9aa:	4619      	mov	r1, r3
 805d9ac:	687b      	ldr	r3, [r7, #4]
 805d9ae:	4313      	orrs	r3, r2
 805d9b0:	600b      	str	r3, [r1, #0]
}
 805d9b2:	bf00      	nop
 805d9b4:	371c      	adds	r7, #28
 805d9b6:	46bd      	mov	sp, r7
 805d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d9bc:	4770      	bx	lr
 805d9be:	bf00      	nop
 805d9c0:	080724f8 	.word	0x080724f8

0805d9c4 <LL_DMA_SetStreamPriorityLevel>:
{
 805d9c4:	b480      	push	{r7}
 805d9c6:	b087      	sub	sp, #28
 805d9c8:	af00      	add	r7, sp, #0
 805d9ca:	60f8      	str	r0, [r7, #12]
 805d9cc:	60b9      	str	r1, [r7, #8]
 805d9ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805d9d0:	68fb      	ldr	r3, [r7, #12]
 805d9d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 805d9d4:	4a0d      	ldr	r2, [pc, #52]	@ (805da0c <LL_DMA_SetStreamPriorityLevel+0x48>)
 805d9d6:	68bb      	ldr	r3, [r7, #8]
 805d9d8:	4413      	add	r3, r2
 805d9da:	781b      	ldrb	r3, [r3, #0]
 805d9dc:	461a      	mov	r2, r3
 805d9de:	697b      	ldr	r3, [r7, #20]
 805d9e0:	4413      	add	r3, r2
 805d9e2:	681b      	ldr	r3, [r3, #0]
 805d9e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 805d9e8:	4908      	ldr	r1, [pc, #32]	@ (805da0c <LL_DMA_SetStreamPriorityLevel+0x48>)
 805d9ea:	68bb      	ldr	r3, [r7, #8]
 805d9ec:	440b      	add	r3, r1
 805d9ee:	781b      	ldrb	r3, [r3, #0]
 805d9f0:	4619      	mov	r1, r3
 805d9f2:	697b      	ldr	r3, [r7, #20]
 805d9f4:	440b      	add	r3, r1
 805d9f6:	4619      	mov	r1, r3
 805d9f8:	687b      	ldr	r3, [r7, #4]
 805d9fa:	4313      	orrs	r3, r2
 805d9fc:	600b      	str	r3, [r1, #0]
}
 805d9fe:	bf00      	nop
 805da00:	371c      	adds	r7, #28
 805da02:	46bd      	mov	sp, r7
 805da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 805da08:	4770      	bx	lr
 805da0a:	bf00      	nop
 805da0c:	080724f8 	.word	0x080724f8

0805da10 <LL_DMA_SetPeriphRequest>:
{
 805da10:	b480      	push	{r7}
 805da12:	b085      	sub	sp, #20
 805da14:	af00      	add	r7, sp, #0
 805da16:	60f8      	str	r0, [r7, #12]
 805da18:	60b9      	str	r1, [r7, #8]
 805da1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 805da1c:	68ba      	ldr	r2, [r7, #8]
 805da1e:	4b12      	ldr	r3, [pc, #72]	@ (805da68 <LL_DMA_SetPeriphRequest+0x58>)
 805da20:	4413      	add	r3, r2
 805da22:	009b      	lsls	r3, r3, #2
 805da24:	68fa      	ldr	r2, [r7, #12]
 805da26:	4911      	ldr	r1, [pc, #68]	@ (805da6c <LL_DMA_SetPeriphRequest+0x5c>)
 805da28:	428a      	cmp	r2, r1
 805da2a:	d101      	bne.n	805da30 <LL_DMA_SetPeriphRequest+0x20>
 805da2c:	2200      	movs	r2, #0
 805da2e:	e000      	b.n	805da32 <LL_DMA_SetPeriphRequest+0x22>
 805da30:	2220      	movs	r2, #32
 805da32:	4413      	add	r3, r2
 805da34:	681b      	ldr	r3, [r3, #0]
 805da36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 805da3a:	68b9      	ldr	r1, [r7, #8]
 805da3c:	4b0a      	ldr	r3, [pc, #40]	@ (805da68 <LL_DMA_SetPeriphRequest+0x58>)
 805da3e:	440b      	add	r3, r1
 805da40:	009b      	lsls	r3, r3, #2
 805da42:	68f9      	ldr	r1, [r7, #12]
 805da44:	4809      	ldr	r0, [pc, #36]	@ (805da6c <LL_DMA_SetPeriphRequest+0x5c>)
 805da46:	4281      	cmp	r1, r0
 805da48:	d101      	bne.n	805da4e <LL_DMA_SetPeriphRequest+0x3e>
 805da4a:	2100      	movs	r1, #0
 805da4c:	e000      	b.n	805da50 <LL_DMA_SetPeriphRequest+0x40>
 805da4e:	2120      	movs	r1, #32
 805da50:	440b      	add	r3, r1
 805da52:	4619      	mov	r1, r3
 805da54:	687b      	ldr	r3, [r7, #4]
 805da56:	4313      	orrs	r3, r2
 805da58:	600b      	str	r3, [r1, #0]
}
 805da5a:	bf00      	nop
 805da5c:	3714      	adds	r7, #20
 805da5e:	46bd      	mov	sp, r7
 805da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 805da64:	4770      	bx	lr
 805da66:	bf00      	nop
 805da68:	10008200 	.word	0x10008200
 805da6c:	40020000 	.word	0x40020000

0805da70 <LL_DMA_DisableFifoMode>:
{
 805da70:	b480      	push	{r7}
 805da72:	b085      	sub	sp, #20
 805da74:	af00      	add	r7, sp, #0
 805da76:	6078      	str	r0, [r7, #4]
 805da78:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805da7a:	687b      	ldr	r3, [r7, #4]
 805da7c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 805da7e:	4a0c      	ldr	r2, [pc, #48]	@ (805dab0 <LL_DMA_DisableFifoMode+0x40>)
 805da80:	683b      	ldr	r3, [r7, #0]
 805da82:	4413      	add	r3, r2
 805da84:	781b      	ldrb	r3, [r3, #0]
 805da86:	461a      	mov	r2, r3
 805da88:	68fb      	ldr	r3, [r7, #12]
 805da8a:	4413      	add	r3, r2
 805da8c:	695b      	ldr	r3, [r3, #20]
 805da8e:	4908      	ldr	r1, [pc, #32]	@ (805dab0 <LL_DMA_DisableFifoMode+0x40>)
 805da90:	683a      	ldr	r2, [r7, #0]
 805da92:	440a      	add	r2, r1
 805da94:	7812      	ldrb	r2, [r2, #0]
 805da96:	4611      	mov	r1, r2
 805da98:	68fa      	ldr	r2, [r7, #12]
 805da9a:	440a      	add	r2, r1
 805da9c:	f023 0304 	bic.w	r3, r3, #4
 805daa0:	6153      	str	r3, [r2, #20]
}
 805daa2:	bf00      	nop
 805daa4:	3714      	adds	r7, #20
 805daa6:	46bd      	mov	sp, r7
 805daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805daac:	4770      	bx	lr
 805daae:	bf00      	nop
 805dab0:	080724f8 	.word	0x080724f8

0805dab4 <LL_BDMA_SetDataTransferDirection>:
{
 805dab4:	b480      	push	{r7}
 805dab6:	b087      	sub	sp, #28
 805dab8:	af00      	add	r7, sp, #0
 805daba:	60f8      	str	r0, [r7, #12]
 805dabc:	60b9      	str	r1, [r7, #8]
 805dabe:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805dac0:	68fb      	ldr	r3, [r7, #12]
 805dac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 805dac4:	4a0d      	ldr	r2, [pc, #52]	@ (805dafc <LL_BDMA_SetDataTransferDirection+0x48>)
 805dac6:	68bb      	ldr	r3, [r7, #8]
 805dac8:	4413      	add	r3, r2
 805daca:	781b      	ldrb	r3, [r3, #0]
 805dacc:	461a      	mov	r2, r3
 805dace:	697b      	ldr	r3, [r7, #20]
 805dad0:	4413      	add	r3, r2
 805dad2:	681a      	ldr	r2, [r3, #0]
 805dad4:	4b0a      	ldr	r3, [pc, #40]	@ (805db00 <LL_BDMA_SetDataTransferDirection+0x4c>)
 805dad6:	4013      	ands	r3, r2
 805dad8:	4908      	ldr	r1, [pc, #32]	@ (805dafc <LL_BDMA_SetDataTransferDirection+0x48>)
 805dada:	68ba      	ldr	r2, [r7, #8]
 805dadc:	440a      	add	r2, r1
 805dade:	7812      	ldrb	r2, [r2, #0]
 805dae0:	4611      	mov	r1, r2
 805dae2:	697a      	ldr	r2, [r7, #20]
 805dae4:	440a      	add	r2, r1
 805dae6:	4611      	mov	r1, r2
 805dae8:	687a      	ldr	r2, [r7, #4]
 805daea:	4313      	orrs	r3, r2
 805daec:	600b      	str	r3, [r1, #0]
}
 805daee:	bf00      	nop
 805daf0:	371c      	adds	r7, #28
 805daf2:	46bd      	mov	sp, r7
 805daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805daf8:	4770      	bx	lr
 805dafa:	bf00      	nop
 805dafc:	08072500 	.word	0x08072500
 805db00:	ffffbfef 	.word	0xffffbfef

0805db04 <LL_BDMA_SetMode>:
{
 805db04:	b480      	push	{r7}
 805db06:	b087      	sub	sp, #28
 805db08:	af00      	add	r7, sp, #0
 805db0a:	60f8      	str	r0, [r7, #12]
 805db0c:	60b9      	str	r1, [r7, #8]
 805db0e:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805db10:	68fb      	ldr	r3, [r7, #12]
 805db12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_CIRC,
 805db14:	4a0d      	ldr	r2, [pc, #52]	@ (805db4c <LL_BDMA_SetMode+0x48>)
 805db16:	68bb      	ldr	r3, [r7, #8]
 805db18:	4413      	add	r3, r2
 805db1a:	781b      	ldrb	r3, [r3, #0]
 805db1c:	461a      	mov	r2, r3
 805db1e:	697b      	ldr	r3, [r7, #20]
 805db20:	4413      	add	r3, r2
 805db22:	681b      	ldr	r3, [r3, #0]
 805db24:	f023 0220 	bic.w	r2, r3, #32
 805db28:	4908      	ldr	r1, [pc, #32]	@ (805db4c <LL_BDMA_SetMode+0x48>)
 805db2a:	68bb      	ldr	r3, [r7, #8]
 805db2c:	440b      	add	r3, r1
 805db2e:	781b      	ldrb	r3, [r3, #0]
 805db30:	4619      	mov	r1, r3
 805db32:	697b      	ldr	r3, [r7, #20]
 805db34:	440b      	add	r3, r1
 805db36:	4619      	mov	r1, r3
 805db38:	687b      	ldr	r3, [r7, #4]
 805db3a:	4313      	orrs	r3, r2
 805db3c:	600b      	str	r3, [r1, #0]
}
 805db3e:	bf00      	nop
 805db40:	371c      	adds	r7, #28
 805db42:	46bd      	mov	sp, r7
 805db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 805db48:	4770      	bx	lr
 805db4a:	bf00      	nop
 805db4c:	08072500 	.word	0x08072500

0805db50 <LL_BDMA_SetPeriphIncMode>:
{
 805db50:	b480      	push	{r7}
 805db52:	b087      	sub	sp, #28
 805db54:	af00      	add	r7, sp, #0
 805db56:	60f8      	str	r0, [r7, #12]
 805db58:	60b9      	str	r1, [r7, #8]
 805db5a:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805db5c:	68fb      	ldr	r3, [r7, #12]
 805db5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PINC,
 805db60:	4a0d      	ldr	r2, [pc, #52]	@ (805db98 <LL_BDMA_SetPeriphIncMode+0x48>)
 805db62:	68bb      	ldr	r3, [r7, #8]
 805db64:	4413      	add	r3, r2
 805db66:	781b      	ldrb	r3, [r3, #0]
 805db68:	461a      	mov	r2, r3
 805db6a:	697b      	ldr	r3, [r7, #20]
 805db6c:	4413      	add	r3, r2
 805db6e:	681b      	ldr	r3, [r3, #0]
 805db70:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 805db74:	4908      	ldr	r1, [pc, #32]	@ (805db98 <LL_BDMA_SetPeriphIncMode+0x48>)
 805db76:	68bb      	ldr	r3, [r7, #8]
 805db78:	440b      	add	r3, r1
 805db7a:	781b      	ldrb	r3, [r3, #0]
 805db7c:	4619      	mov	r1, r3
 805db7e:	697b      	ldr	r3, [r7, #20]
 805db80:	440b      	add	r3, r1
 805db82:	4619      	mov	r1, r3
 805db84:	687b      	ldr	r3, [r7, #4]
 805db86:	4313      	orrs	r3, r2
 805db88:	600b      	str	r3, [r1, #0]
}
 805db8a:	bf00      	nop
 805db8c:	371c      	adds	r7, #28
 805db8e:	46bd      	mov	sp, r7
 805db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 805db94:	4770      	bx	lr
 805db96:	bf00      	nop
 805db98:	08072500 	.word	0x08072500

0805db9c <LL_BDMA_SetMemoryIncMode>:
{
 805db9c:	b480      	push	{r7}
 805db9e:	b087      	sub	sp, #28
 805dba0:	af00      	add	r7, sp, #0
 805dba2:	60f8      	str	r0, [r7, #12]
 805dba4:	60b9      	str	r1, [r7, #8]
 805dba6:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805dba8:	68fb      	ldr	r3, [r7, #12]
 805dbaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MINC,
 805dbac:	4a0d      	ldr	r2, [pc, #52]	@ (805dbe4 <LL_BDMA_SetMemoryIncMode+0x48>)
 805dbae:	68bb      	ldr	r3, [r7, #8]
 805dbb0:	4413      	add	r3, r2
 805dbb2:	781b      	ldrb	r3, [r3, #0]
 805dbb4:	461a      	mov	r2, r3
 805dbb6:	697b      	ldr	r3, [r7, #20]
 805dbb8:	4413      	add	r3, r2
 805dbba:	681b      	ldr	r3, [r3, #0]
 805dbbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 805dbc0:	4908      	ldr	r1, [pc, #32]	@ (805dbe4 <LL_BDMA_SetMemoryIncMode+0x48>)
 805dbc2:	68bb      	ldr	r3, [r7, #8]
 805dbc4:	440b      	add	r3, r1
 805dbc6:	781b      	ldrb	r3, [r3, #0]
 805dbc8:	4619      	mov	r1, r3
 805dbca:	697b      	ldr	r3, [r7, #20]
 805dbcc:	440b      	add	r3, r1
 805dbce:	4619      	mov	r1, r3
 805dbd0:	687b      	ldr	r3, [r7, #4]
 805dbd2:	4313      	orrs	r3, r2
 805dbd4:	600b      	str	r3, [r1, #0]
}
 805dbd6:	bf00      	nop
 805dbd8:	371c      	adds	r7, #28
 805dbda:	46bd      	mov	sp, r7
 805dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dbe0:	4770      	bx	lr
 805dbe2:	bf00      	nop
 805dbe4:	08072500 	.word	0x08072500

0805dbe8 <LL_BDMA_SetPeriphSize>:
{
 805dbe8:	b480      	push	{r7}
 805dbea:	b087      	sub	sp, #28
 805dbec:	af00      	add	r7, sp, #0
 805dbee:	60f8      	str	r0, [r7, #12]
 805dbf0:	60b9      	str	r1, [r7, #8]
 805dbf2:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805dbf4:	68fb      	ldr	r3, [r7, #12]
 805dbf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PSIZE,
 805dbf8:	4a0d      	ldr	r2, [pc, #52]	@ (805dc30 <LL_BDMA_SetPeriphSize+0x48>)
 805dbfa:	68bb      	ldr	r3, [r7, #8]
 805dbfc:	4413      	add	r3, r2
 805dbfe:	781b      	ldrb	r3, [r3, #0]
 805dc00:	461a      	mov	r2, r3
 805dc02:	697b      	ldr	r3, [r7, #20]
 805dc04:	4413      	add	r3, r2
 805dc06:	681b      	ldr	r3, [r3, #0]
 805dc08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 805dc0c:	4908      	ldr	r1, [pc, #32]	@ (805dc30 <LL_BDMA_SetPeriphSize+0x48>)
 805dc0e:	68bb      	ldr	r3, [r7, #8]
 805dc10:	440b      	add	r3, r1
 805dc12:	781b      	ldrb	r3, [r3, #0]
 805dc14:	4619      	mov	r1, r3
 805dc16:	697b      	ldr	r3, [r7, #20]
 805dc18:	440b      	add	r3, r1
 805dc1a:	4619      	mov	r1, r3
 805dc1c:	687b      	ldr	r3, [r7, #4]
 805dc1e:	4313      	orrs	r3, r2
 805dc20:	600b      	str	r3, [r1, #0]
}
 805dc22:	bf00      	nop
 805dc24:	371c      	adds	r7, #28
 805dc26:	46bd      	mov	sp, r7
 805dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dc2c:	4770      	bx	lr
 805dc2e:	bf00      	nop
 805dc30:	08072500 	.word	0x08072500

0805dc34 <LL_BDMA_SetMemorySize>:
{
 805dc34:	b480      	push	{r7}
 805dc36:	b087      	sub	sp, #28
 805dc38:	af00      	add	r7, sp, #0
 805dc3a:	60f8      	str	r0, [r7, #12]
 805dc3c:	60b9      	str	r1, [r7, #8]
 805dc3e:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805dc40:	68fb      	ldr	r3, [r7, #12]
 805dc42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MSIZE,
 805dc44:	4a0d      	ldr	r2, [pc, #52]	@ (805dc7c <LL_BDMA_SetMemorySize+0x48>)
 805dc46:	68bb      	ldr	r3, [r7, #8]
 805dc48:	4413      	add	r3, r2
 805dc4a:	781b      	ldrb	r3, [r3, #0]
 805dc4c:	461a      	mov	r2, r3
 805dc4e:	697b      	ldr	r3, [r7, #20]
 805dc50:	4413      	add	r3, r2
 805dc52:	681b      	ldr	r3, [r3, #0]
 805dc54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 805dc58:	4908      	ldr	r1, [pc, #32]	@ (805dc7c <LL_BDMA_SetMemorySize+0x48>)
 805dc5a:	68bb      	ldr	r3, [r7, #8]
 805dc5c:	440b      	add	r3, r1
 805dc5e:	781b      	ldrb	r3, [r3, #0]
 805dc60:	4619      	mov	r1, r3
 805dc62:	697b      	ldr	r3, [r7, #20]
 805dc64:	440b      	add	r3, r1
 805dc66:	4619      	mov	r1, r3
 805dc68:	687b      	ldr	r3, [r7, #4]
 805dc6a:	4313      	orrs	r3, r2
 805dc6c:	600b      	str	r3, [r1, #0]
}
 805dc6e:	bf00      	nop
 805dc70:	371c      	adds	r7, #28
 805dc72:	46bd      	mov	sp, r7
 805dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dc78:	4770      	bx	lr
 805dc7a:	bf00      	nop
 805dc7c:	08072500 	.word	0x08072500

0805dc80 <LL_BDMA_SetChannelPriorityLevel>:
{
 805dc80:	b480      	push	{r7}
 805dc82:	b087      	sub	sp, #28
 805dc84:	af00      	add	r7, sp, #0
 805dc86:	60f8      	str	r0, [r7, #12]
 805dc88:	60b9      	str	r1, [r7, #8]
 805dc8a:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 805dc8c:	68fb      	ldr	r3, [r7, #12]
 805dc8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PL,
 805dc90:	4a0d      	ldr	r2, [pc, #52]	@ (805dcc8 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 805dc92:	68bb      	ldr	r3, [r7, #8]
 805dc94:	4413      	add	r3, r2
 805dc96:	781b      	ldrb	r3, [r3, #0]
 805dc98:	461a      	mov	r2, r3
 805dc9a:	697b      	ldr	r3, [r7, #20]
 805dc9c:	4413      	add	r3, r2
 805dc9e:	681b      	ldr	r3, [r3, #0]
 805dca0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 805dca4:	4908      	ldr	r1, [pc, #32]	@ (805dcc8 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 805dca6:	68bb      	ldr	r3, [r7, #8]
 805dca8:	440b      	add	r3, r1
 805dcaa:	781b      	ldrb	r3, [r3, #0]
 805dcac:	4619      	mov	r1, r3
 805dcae:	697b      	ldr	r3, [r7, #20]
 805dcb0:	440b      	add	r3, r1
 805dcb2:	4619      	mov	r1, r3
 805dcb4:	687b      	ldr	r3, [r7, #4]
 805dcb6:	4313      	orrs	r3, r2
 805dcb8:	600b      	str	r3, [r1, #0]
}
 805dcba:	bf00      	nop
 805dcbc:	371c      	adds	r7, #28
 805dcbe:	46bd      	mov	sp, r7
 805dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dcc4:	4770      	bx	lr
 805dcc6:	bf00      	nop
 805dcc8:	08072500 	.word	0x08072500

0805dccc <LL_BDMA_SetPeriphRequest>:
{
 805dccc:	b480      	push	{r7}
 805dcce:	b085      	sub	sp, #20
 805dcd0:	af00      	add	r7, sp, #0
 805dcd2:	60f8      	str	r0, [r7, #12]
 805dcd4:	60b9      	str	r1, [r7, #8]
 805dcd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 805dcd8:	68ba      	ldr	r2, [r7, #8]
 805dcda:	4b0a      	ldr	r3, [pc, #40]	@ (805dd04 <LL_BDMA_SetPeriphRequest+0x38>)
 805dcdc:	4413      	add	r3, r2
 805dcde:	009b      	lsls	r3, r3, #2
 805dce0:	681b      	ldr	r3, [r3, #0]
 805dce2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 805dce6:	68b9      	ldr	r1, [r7, #8]
 805dce8:	4b06      	ldr	r3, [pc, #24]	@ (805dd04 <LL_BDMA_SetPeriphRequest+0x38>)
 805dcea:	440b      	add	r3, r1
 805dcec:	009b      	lsls	r3, r3, #2
 805dcee:	4619      	mov	r1, r3
 805dcf0:	687b      	ldr	r3, [r7, #4]
 805dcf2:	4313      	orrs	r3, r2
 805dcf4:	600b      	str	r3, [r1, #0]
}
 805dcf6:	bf00      	nop
 805dcf8:	3714      	adds	r7, #20
 805dcfa:	46bd      	mov	sp, r7
 805dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dd00:	4770      	bx	lr
 805dd02:	bf00      	nop
 805dd04:	16009600 	.word	0x16009600

0805dd08 <I2C_ReInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_ReInit(I2C_TypeDef *I2Cx) {
 805dd08:	b580      	push	{r7, lr}
 805dd0a:	b082      	sub	sp, #8
 805dd0c:	af00      	add	r7, sp, #0
 805dd0e:	6078      	str	r0, [r7, #4]
    LL_I2C_Disable(I2Cx);
 805dd10:	6878      	ldr	r0, [r7, #4]
 805dd12:	f7ff faaa 	bl	805d26a <LL_I2C_Disable>

    if (I2Cx == I2C2) {
 805dd16:	687b      	ldr	r3, [r7, #4]
 805dd18:	4a04      	ldr	r2, [pc, #16]	@ (805dd2c <I2C_ReInit+0x24>)
 805dd1a:	4293      	cmp	r3, r2
 805dd1c:	d101      	bne.n	805dd22 <I2C_ReInit+0x1a>
        MX_I2C2_Init();
 805dd1e:	f000 fcd9 	bl	805e6d4 <MX_I2C2_Init>
    }
}
 805dd22:	bf00      	nop
 805dd24:	3708      	adds	r7, #8
 805dd26:	46bd      	mov	sp, r7
 805dd28:	bd80      	pop	{r7, pc}
 805dd2a:	bf00      	nop
 805dd2c:	40005800 	.word	0x40005800

0805dd30 <SDMMC1_ReInit>:

void SDMMC1_ReInit(void) {
 805dd30:	b580      	push	{r7, lr}
 805dd32:	af00      	add	r7, sp, #0
	HAL_MMC_DeInit(&hmmc1);
 805dd34:	4803      	ldr	r0, [pc, #12]	@ (805dd44 <SDMMC1_ReInit+0x14>)
 805dd36:	f003 fed5 	bl	8061ae4 <HAL_MMC_DeInit>
	MX_SDMMC1_MMC_Init();
 805dd3a:	f000 fd55 	bl	805e7e8 <MX_SDMMC1_MMC_Init>
}
 805dd3e:	bf00      	nop
 805dd40:	bd80      	pop	{r7, pc}
 805dd42:	bf00      	nop
 805dd44:	2406e634 	.word	0x2406e634

0805dd48 <SDMMC1_DeInit>:

void SDMMC1_DeInit(void) {
 805dd48:	b580      	push	{r7, lr}
 805dd4a:	af00      	add	r7, sp, #0
	HAL_MMC_DeInit(&hmmc1);
 805dd4c:	4802      	ldr	r0, [pc, #8]	@ (805dd58 <SDMMC1_DeInit+0x10>)
 805dd4e:	f003 fec9 	bl	8061ae4 <HAL_MMC_DeInit>
}
 805dd52:	bf00      	nop
 805dd54:	bd80      	pop	{r7, pc}
 805dd56:	bf00      	nop
 805dd58:	2406e634 	.word	0x2406e634

0805dd5c <SDMMC1_Init>:

void SDMMC1_Init(void) {
 805dd5c:	b580      	push	{r7, lr}
 805dd5e:	af00      	add	r7, sp, #0
	MX_SDMMC1_MMC_Init();
 805dd60:	f000 fd42 	bl	805e7e8 <MX_SDMMC1_MMC_Init>
}
 805dd64:	bf00      	nop
 805dd66:	bd80      	pop	{r7, pc}

0805dd68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 805dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 805dd6a:	f5ad 7d6b 	sub.w	sp, sp, #940	@ 0x3ac
 805dd6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 805dd70:	f001 fcc8 	bl	805f704 <MPU_Config>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 805dd74:	f002 fad4 	bl	8060320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 805dd78:	f000 fc30 	bl	805e5dc <SystemClock_Config>
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/

#ifdef USE_CORE_M4
  __HAL_RCC_HSEM_CLK_ENABLE();
 805dd7c:	4bba      	ldr	r3, [pc, #744]	@ (805e068 <main+0x300>)
 805dd7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805dd82:	4ab9      	ldr	r2, [pc, #740]	@ (805e068 <main+0x300>)
 805dd84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 805dd88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 805dd8c:	4bb6      	ldr	r3, [pc, #728]	@ (805e068 <main+0x300>)
 805dd8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805dd92:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 805dd96:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805dd9a:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 805dd9e:	601a      	str	r2, [r3, #0]
 805dda0:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805dda4:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 805dda8:	681b      	ldr	r3, [r3, #0]
  HAL_HSEM_FastTake(1);
 805ddaa:	2001      	movs	r0, #1
 805ddac:	f003 faf0 	bl	8061390 <HAL_HSEM_FastTake>

  while(!HAL_HSEM_IsSemTaken(0));
 805ddb0:	bf00      	nop
 805ddb2:	2000      	movs	r0, #0
 805ddb4:	f003 fb06 	bl	80613c4 <HAL_HSEM_IsSemTaken>
 805ddb8:	4603      	mov	r3, r0
 805ddba:	2b00      	cmp	r3, #0
 805ddbc:	d0f9      	beq.n	805ddb2 <main+0x4a>
  HAL_HSEM_Release(0, 0);
 805ddbe:	2100      	movs	r1, #0
 805ddc0:	2000      	movs	r0, #0
 805ddc2:	f003 fb15 	bl	80613f0 <HAL_HSEM_Release>
  while (!__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY));
 805ddc6:	bf00      	nop
 805ddc8:	4ba7      	ldr	r3, [pc, #668]	@ (805e068 <main+0x300>)
 805ddca:	681b      	ldr	r3, [r3, #0]
 805ddcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 805ddd0:	2b00      	cmp	r3, #0
 805ddd2:	d0f9      	beq.n	805ddc8 <main+0x60>

  HAL_Init();
 805ddd4:	f002 faa4 	bl	8060320 <HAL_Init>
  MX_TIM1_Init();
  MX_UART7_Init();
  /* USER CODE BEGIN 2 */
#else

  char boot_log[800] = {0};
 805ddd8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805dddc:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 805dde0:	4618      	mov	r0, r3
 805dde2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 805dde6:	461a      	mov	r2, r3
 805dde8:	2100      	movs	r1, #0
 805ddea:	f00b fcfb 	bl	80697e4 <memset>
  char temp[80];

  sprintf(boot_log, "\r\n-----> Booting STM32H7 - Cortex M7 on OBC ...\r\n");
 805ddee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805ddf2:	499e      	ldr	r1, [pc, #632]	@ (805e06c <main+0x304>)
 805ddf4:	4618      	mov	r0, r3
 805ddf6:	f00b fc29 	bl	806964c <siprintf>
  strcat(boot_log, "[ OK ] SystemClock: 240MHz, Initializing Peripherals...\r\n");
 805ddfa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805ddfe:	4618      	mov	r0, r3
 805de00:	f7e2 fa78 	bl	80402f4 <strlen>
 805de04:	4603      	mov	r3, r0
 805de06:	461a      	mov	r2, r3
 805de08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805de0c:	4413      	add	r3, r2
 805de0e:	4a98      	ldr	r2, [pc, #608]	@ (805e070 <main+0x308>)
 805de10:	4614      	mov	r4, r2
 805de12:	469c      	mov	ip, r3
 805de14:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 805de18:	4665      	mov	r5, ip
 805de1a:	4626      	mov	r6, r4
 805de1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 805de1e:	6028      	str	r0, [r5, #0]
 805de20:	6069      	str	r1, [r5, #4]
 805de22:	60aa      	str	r2, [r5, #8]
 805de24:	60eb      	str	r3, [r5, #12]
 805de26:	3410      	adds	r4, #16
 805de28:	f10c 0c10 	add.w	ip, ip, #16
 805de2c:	4574      	cmp	r4, lr
 805de2e:	d1f3      	bne.n	805de18 <main+0xb0>
 805de30:	4662      	mov	r2, ip
 805de32:	4623      	mov	r3, r4
 805de34:	cb03      	ldmia	r3!, {r0, r1}
 805de36:	6010      	str	r0, [r2, #0]
 805de38:	6051      	str	r1, [r2, #4]
 805de3a:	881b      	ldrh	r3, [r3, #0]
 805de3c:	8113      	strh	r3, [r2, #8]
//  LL_mDelay(2);				//When use FreeRTOS, Sys-tick IRQ here is not enable
  HAL_Delay(2);
 805de3e:	2002      	movs	r0, #2
 805de40:	f002 fb30 	bl	80604a4 <HAL_Delay>
  strcat(boot_log, "[ OK ] SYSCLK OK!, HAL OK!\r\n");
 805de44:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805de48:	4618      	mov	r0, r3
 805de4a:	f7e2 fa53 	bl	80402f4 <strlen>
 805de4e:	4603      	mov	r3, r0
 805de50:	461a      	mov	r2, r3
 805de52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805de56:	4413      	add	r3, r2
 805de58:	4a86      	ldr	r2, [pc, #536]	@ (805e074 <main+0x30c>)
 805de5a:	461d      	mov	r5, r3
 805de5c:	4614      	mov	r4, r2
 805de5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 805de60:	6028      	str	r0, [r5, #0]
 805de62:	6069      	str	r1, [r5, #4]
 805de64:	60aa      	str	r2, [r5, #8]
 805de66:	60eb      	str	r3, [r5, #12]
 805de68:	cc07      	ldmia	r4!, {r0, r1, r2}
 805de6a:	6128      	str	r0, [r5, #16]
 805de6c:	6169      	str	r1, [r5, #20]
 805de6e:	61aa      	str	r2, [r5, #24]
 805de70:	7823      	ldrb	r3, [r4, #0]
 805de72:	772b      	strb	r3, [r5, #28]

  //--> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init
  MX_GPIO_Init();
 805de74:	f001 fb5e 	bl	805f534 <MX_GPIO_Init>
  if(peripherals[0].errorCode == Sys_OK)
 805de78:	4b7f      	ldr	r3, [pc, #508]	@ (805e078 <main+0x310>)
 805de7a:	7a9b      	ldrb	r3, [r3, #10]
 805de7c:	2b00      	cmp	r3, #0
 805de7e:	d128      	bne.n	805ded2 <main+0x16a>
  {
	  sprintf(temp, "[ OK ] GPIO Initialized.\r\n");
 805de80:	f107 0308 	add.w	r3, r7, #8
 805de84:	497d      	ldr	r1, [pc, #500]	@ (805e07c <main+0x314>)
 805de86:	4618      	mov	r0, r3
 805de88:	f00b fbe0 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805de8c:	f107 0208 	add.w	r2, r7, #8
 805de90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805de94:	4611      	mov	r1, r2
 805de96:	4618      	mov	r0, r3
 805de98:	f00b fcac 	bl	80697f4 <strcat>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED0_GPIO_Port, MCU_IO_DEBUG_LED0_Pin);
 805de9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805dea0:	4877      	ldr	r0, [pc, #476]	@ (805e080 <main+0x318>)
 805dea2:	f7ff fc1e 	bl	805d6e2 <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED1_GPIO_Port, MCU_IO_DEBUG_LED1_Pin);
 805dea6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 805deaa:	4875      	ldr	r0, [pc, #468]	@ (805e080 <main+0x318>)
 805deac:	f7ff fc19 	bl	805d6e2 <LL_GPIO_SetOutputPin>
	  sprintf(temp, "[ OK ] DEBUG0: [+] | DEBUG1: [+]\r\n");
 805deb0:	f107 0308 	add.w	r3, r7, #8
 805deb4:	4973      	ldr	r1, [pc, #460]	@ (805e084 <main+0x31c>)
 805deb6:	4618      	mov	r0, r3
 805deb8:	f00b fbc8 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805debc:	f107 0208 	add.w	r2, r7, #8
 805dec0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805dec4:	4611      	mov	r1, r2
 805dec6:	4618      	mov	r0, r3
 805dec8:	f00b fc94 	bl	80697f4 <strcat>
	  peripherals[0].state = PERIPH_STATE_INIT;
 805decc:	4b6a      	ldr	r3, [pc, #424]	@ (805e078 <main+0x310>)
 805dece:	2201      	movs	r2, #1
 805ded0:	721a      	strb	r2, [r3, #8]
  }

  //--> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init
  MX_MDMA_Init();
 805ded2:	f001 fac7 	bl	805f464 <MX_MDMA_Init>
  if(peripherals[1].errorCode == Sys_OK)
 805ded6:	4b68      	ldr	r3, [pc, #416]	@ (805e078 <main+0x310>)
 805ded8:	7f9b      	ldrb	r3, [r3, #30]
 805deda:	2b00      	cmp	r3, #0
 805dedc:	d111      	bne.n	805df02 <main+0x19a>
  {
	  sprintf(temp, "[ OK ] MDMA Initialized.\r\n");
 805dede:	f107 0308 	add.w	r3, r7, #8
 805dee2:	4969      	ldr	r1, [pc, #420]	@ (805e088 <main+0x320>)
 805dee4:	4618      	mov	r0, r3
 805dee6:	f00b fbb1 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805deea:	f107 0208 	add.w	r2, r7, #8
 805deee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805def2:	4611      	mov	r1, r2
 805def4:	4618      	mov	r0, r3
 805def6:	f00b fc7d 	bl	80697f4 <strcat>
	  peripherals[1].state = PERIPH_STATE_INIT;
 805defa:	4b5f      	ldr	r3, [pc, #380]	@ (805e078 <main+0x310>)
 805defc:	2201      	movs	r2, #1
 805defe:	771a      	strb	r2, [r3, #28]
 805df00:	e010      	b.n	805df24 <main+0x1bc>
  }else{
	  sprintf(temp, "[ ER ] MDMA Init Error!.\r\n");
 805df02:	f107 0308 	add.w	r3, r7, #8
 805df06:	4961      	ldr	r1, [pc, #388]	@ (805e08c <main+0x324>)
 805df08:	4618      	mov	r0, r3
 805df0a:	f00b fb9f 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805df0e:	f107 0208 	add.w	r2, r7, #8
 805df12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805df16:	4611      	mov	r1, r2
 805df18:	4618      	mov	r0, r3
 805df1a:	f00b fc6b 	bl	80697f4 <strcat>
	  peripherals[1].state = PERIPH_STATE_ERROR;
 805df1e:	4b56      	ldr	r3, [pc, #344]	@ (805e078 <main+0x310>)
 805df20:	2202      	movs	r2, #2
 805df22:	771a      	strb	r2, [r3, #28]
  }

  //--> DMA Init --> DMA Init --> DMA Init --> DMA Init --> DMA Init
  MX_DMA_Init();
 805df24:	f001 fa30 	bl	805f388 <MX_DMA_Init>
  if(peripherals[2].errorCode == Sys_OK)
 805df28:	4b53      	ldr	r3, [pc, #332]	@ (805e078 <main+0x310>)
 805df2a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 805df2e:	2b00      	cmp	r3, #0
 805df30:	d111      	bne.n	805df56 <main+0x1ee>
  {
	  sprintf(temp, "[ OK ] DMA Initialized.\r\n");
 805df32:	f107 0308 	add.w	r3, r7, #8
 805df36:	4956      	ldr	r1, [pc, #344]	@ (805e090 <main+0x328>)
 805df38:	4618      	mov	r0, r3
 805df3a:	f00b fb87 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805df3e:	f107 0208 	add.w	r2, r7, #8
 805df42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805df46:	4611      	mov	r1, r2
 805df48:	4618      	mov	r0, r3
 805df4a:	f00b fc53 	bl	80697f4 <strcat>
	  peripherals[2].state = PERIPH_STATE_INIT;
 805df4e:	4b4a      	ldr	r3, [pc, #296]	@ (805e078 <main+0x310>)
 805df50:	2201      	movs	r2, #1
 805df52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  //--> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init
  MX_BDMA_Init();
 805df56:	f001 f9d9 	bl	805f30c <MX_BDMA_Init>
  if(peripherals[3].errorCode == Sys_OK)
 805df5a:	4b47      	ldr	r3, [pc, #284]	@ (805e078 <main+0x310>)
 805df5c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 805df60:	2b00      	cmp	r3, #0
 805df62:	d111      	bne.n	805df88 <main+0x220>
  {
	  sprintf(temp, "[ OK ] BDMA Initialized.\r\n");
 805df64:	f107 0308 	add.w	r3, r7, #8
 805df68:	494a      	ldr	r1, [pc, #296]	@ (805e094 <main+0x32c>)
 805df6a:	4618      	mov	r0, r3
 805df6c:	f00b fb6e 	bl	806964c <siprintf>
      strcat(boot_log, temp);
 805df70:	f107 0208 	add.w	r2, r7, #8
 805df74:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805df78:	4611      	mov	r1, r2
 805df7a:	4618      	mov	r0, r3
 805df7c:	f00b fc3a 	bl	80697f4 <strcat>
	  peripherals[3].state = PERIPH_STATE_INIT;
 805df80:	4b3d      	ldr	r3, [pc, #244]	@ (805e078 <main+0x310>)
 805df82:	2201      	movs	r2, #1
 805df84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

  //--> USART1 Init --> USART1 Init--> USART1 Init--> USART1 Init--> USART1 Init
  MX_USART1_UART_Init();
 805df88:	f001 f818 	bl	805efbc <MX_USART1_UART_Init>
  if(peripherals[4].errorCode == Sys_OK)
 805df8c:	4b3a      	ldr	r3, [pc, #232]	@ (805e078 <main+0x310>)
 805df8e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 805df92:	2b00      	cmp	r3, #0
 805df94:	d111      	bne.n	805dfba <main+0x252>
  {
	  sprintf(temp, "[ OK ] USART1 Initialized, Baud Rate: 115200.\r\n");
 805df96:	f107 0308 	add.w	r3, r7, #8
 805df9a:	493f      	ldr	r1, [pc, #252]	@ (805e098 <main+0x330>)
 805df9c:	4618      	mov	r0, r3
 805df9e:	f00b fb55 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805dfa2:	f107 0208 	add.w	r2, r7, #8
 805dfa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805dfaa:	4611      	mov	r1, r2
 805dfac:	4618      	mov	r0, r3
 805dfae:	f00b fc21 	bl	80697f4 <strcat>
	  peripherals[4].state = PERIPH_STATE_INIT;
 805dfb2:	4b31      	ldr	r3, [pc, #196]	@ (805e078 <main+0x310>)
 805dfb4:	2201      	movs	r2, #1
 805dfb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  //--> USART2 Init --> USART2 Init--> USART2 Init--> USART2 Init--> USART2 Init
  MX_USART2_UART_Init();
 805dfba:	f001 f8d3 	bl	805f164 <MX_USART2_UART_Init>
  if(peripherals[5].errorCode == Sys_OK)
 805dfbe:	4b2e      	ldr	r3, [pc, #184]	@ (805e078 <main+0x310>)
 805dfc0:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 805dfc4:	2b00      	cmp	r3, #0
 805dfc6:	d111      	bne.n	805dfec <main+0x284>
  {
	  sprintf(temp, "[ OK ] USART2 Initialized, Baud Rate: 115200.\r\n");
 805dfc8:	f107 0308 	add.w	r3, r7, #8
 805dfcc:	4933      	ldr	r1, [pc, #204]	@ (805e09c <main+0x334>)
 805dfce:	4618      	mov	r0, r3
 805dfd0:	f00b fb3c 	bl	806964c <siprintf>
	  strcat(boot_log, temp);
 805dfd4:	f107 0208 	add.w	r2, r7, #8
 805dfd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805dfdc:	4611      	mov	r1, r2
 805dfde:	4618      	mov	r0, r3
 805dfe0:	f00b fc08 	bl	80697f4 <strcat>
	  peripherals[5].state = PERIPH_STATE_INIT;
 805dfe4:	4b24      	ldr	r3, [pc, #144]	@ (805e078 <main+0x310>)
 805dfe6:	2201      	movs	r2, #1
 805dfe8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805dfec:	2300      	movs	r3, #0
 805dfee:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 805dff2:	e017      	b.n	805e024 <main+0x2bc>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805dff4:	bf00      	nop
 805dff6:	482a      	ldr	r0, [pc, #168]	@ (805e0a0 <main+0x338>)
 805dff8:	f7ff fb29 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805dffc:	4603      	mov	r3, r0
 805dffe:	2b00      	cmp	r3, #0
 805e000:	d0f9      	beq.n	805dff6 <main+0x28e>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e002:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e006:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e00a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 805e00e:	4413      	add	r3, r2
 805e010:	781b      	ldrb	r3, [r3, #0]
 805e012:	4619      	mov	r1, r3
 805e014:	4822      	ldr	r0, [pc, #136]	@ (805e0a0 <main+0x338>)
 805e016:	f7ff fb55 	bl	805d6c4 <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e01a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 805e01e:	3301      	adds	r3, #1
 805e020:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 805e024:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e028:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e02c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 805e030:	4413      	add	r3, r2
 805e032:	781b      	ldrb	r3, [r3, #0]
 805e034:	2b00      	cmp	r3, #0
 805e036:	d1dd      	bne.n	805dff4 <main+0x28c>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e038:	bf00      	nop
 805e03a:	4819      	ldr	r0, [pc, #100]	@ (805e0a0 <main+0x338>)
 805e03c:	f7ff faf4 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e040:	4603      	mov	r3, r0
 805e042:	2b00      	cmp	r3, #0
 805e044:	d0f9      	beq.n	805e03a <main+0x2d2>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init
  MX_I2C2_Init();
 805e046:	f000 fb45 	bl	805e6d4 <MX_I2C2_Init>
  if(peripherals[6].errorCode == Sys_OK)
 805e04a:	4b0b      	ldr	r3, [pc, #44]	@ (805e078 <main+0x310>)
 805e04c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 805e050:	2b00      	cmp	r3, #0
 805e052:	d156      	bne.n	805e102 <main+0x39a>
  {
	  sprintf(boot_log, "[ OK ] I2C2 -> RTC Initialized.\r\n");
 805e054:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e058:	4912      	ldr	r1, [pc, #72]	@ (805e0a4 <main+0x33c>)
 805e05a:	4618      	mov	r0, r3
 805e05c:	f00b faf6 	bl	806964c <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e060:	2300      	movs	r3, #0
 805e062:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 805e066:	e037      	b.n	805e0d8 <main+0x370>
 805e068:	58024400 	.word	0x58024400
 805e06c:	08071524 	.word	0x08071524
 805e070:	08071558 	.word	0x08071558
 805e074:	08071594 	.word	0x08071594
 805e078:	24014900 	.word	0x24014900
 805e07c:	080715b4 	.word	0x080715b4
 805e080:	58020c00 	.word	0x58020c00
 805e084:	080715d0 	.word	0x080715d0
 805e088:	080715f4 	.word	0x080715f4
 805e08c:	08071610 	.word	0x08071610
 805e090:	0807162c 	.word	0x0807162c
 805e094:	08071648 	.word	0x08071648
 805e098:	08071664 	.word	0x08071664
 805e09c:	08071694 	.word	0x08071694
 805e0a0:	40004400 	.word	0x40004400
 805e0a4:	080716c4 	.word	0x080716c4
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e0a8:	bf00      	nop
 805e0aa:	48c1      	ldr	r0, [pc, #772]	@ (805e3b0 <main+0x648>)
 805e0ac:	f7ff facf 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e0b0:	4603      	mov	r3, r0
 805e0b2:	2b00      	cmp	r3, #0
 805e0b4:	d0f9      	beq.n	805e0aa <main+0x342>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e0b6:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e0ba:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e0be:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 805e0c2:	4413      	add	r3, r2
 805e0c4:	781b      	ldrb	r3, [r3, #0]
 805e0c6:	4619      	mov	r1, r3
 805e0c8:	48b9      	ldr	r0, [pc, #740]	@ (805e3b0 <main+0x648>)
 805e0ca:	f7ff fafb 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e0ce:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 805e0d2:	3301      	adds	r3, #1
 805e0d4:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 805e0d8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e0dc:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e0e0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 805e0e4:	4413      	add	r3, r2
 805e0e6:	781b      	ldrb	r3, [r3, #0]
 805e0e8:	2b00      	cmp	r3, #0
 805e0ea:	d1dd      	bne.n	805e0a8 <main+0x340>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e0ec:	bf00      	nop
 805e0ee:	48b0      	ldr	r0, [pc, #704]	@ (805e3b0 <main+0x648>)
 805e0f0:	f7ff fa9a 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e0f4:	4603      	mov	r3, r0
 805e0f6:	2b00      	cmp	r3, #0
 805e0f8:	d0f9      	beq.n	805e0ee <main+0x386>
//	  {
//	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
//	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
	  peripherals[6].state = PERIPH_STATE_INIT;
 805e0fa:	4bae      	ldr	r3, [pc, #696]	@ (805e3b4 <main+0x64c>)
 805e0fc:	2201      	movs	r2, #1
 805e0fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  }

  //--> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init
  MX_SDMMC1_MMC_Init();
 805e102:	f000 fb71 	bl	805e7e8 <MX_SDMMC1_MMC_Init>
  if(peripherals[7].errorCode == Sys_OK)
 805e106:	4bab      	ldr	r3, [pc, #684]	@ (805e3b4 <main+0x64c>)
 805e108:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 805e10c:	2b00      	cmp	r3, #0
 805e10e:	d10a      	bne.n	805e126 <main+0x3be>
  {
	  sprintf(boot_log, "[ OK ] SDMMC1 -> MainStorage Initialized.\r\n");
 805e110:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e114:	49a8      	ldr	r1, [pc, #672]	@ (805e3b8 <main+0x650>)
 805e116:	4618      	mov	r0, r3
 805e118:	f00b fa98 	bl	806964c <siprintf>

	  peripherals[7].state = PERIPH_STATE_INIT;
 805e11c:	4ba5      	ldr	r3, [pc, #660]	@ (805e3b4 <main+0x64c>)
 805e11e:	2201      	movs	r2, #1
 805e120:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 805e124:	e009      	b.n	805e13a <main+0x3d2>
  }else{
	  sprintf(boot_log, "[ ER ] SDMMC1 -> MainStorage Init Error!.\r\n");
 805e126:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e12a:	49a4      	ldr	r1, [pc, #656]	@ (805e3bc <main+0x654>)
 805e12c:	4618      	mov	r0, r3
 805e12e:	f00b fa8d 	bl	806964c <siprintf>
	  peripherals[7].state = PERIPH_STATE_ERROR;
 805e132:	4ba0      	ldr	r3, [pc, #640]	@ (805e3b4 <main+0x64c>)
 805e134:	2202      	movs	r2, #2
 805e136:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e13a:	2300      	movs	r3, #0
 805e13c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 805e140:	e017      	b.n	805e172 <main+0x40a>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e142:	bf00      	nop
 805e144:	489a      	ldr	r0, [pc, #616]	@ (805e3b0 <main+0x648>)
 805e146:	f7ff fa82 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e14a:	4603      	mov	r3, r0
 805e14c:	2b00      	cmp	r3, #0
 805e14e:	d0f9      	beq.n	805e144 <main+0x3dc>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e150:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e154:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e158:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 805e15c:	4413      	add	r3, r2
 805e15e:	781b      	ldrb	r3, [r3, #0]
 805e160:	4619      	mov	r1, r3
 805e162:	4893      	ldr	r0, [pc, #588]	@ (805e3b0 <main+0x648>)
 805e164:	f7ff faae 	bl	805d6c4 <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e168:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 805e16c:	3301      	adds	r3, #1
 805e16e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 805e172:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e176:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e17a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 805e17e:	4413      	add	r3, r2
 805e180:	781b      	ldrb	r3, [r3, #0]
 805e182:	2b00      	cmp	r3, #0
 805e184:	d1dd      	bne.n	805e142 <main+0x3da>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e186:	bf00      	nop
 805e188:	4889      	ldr	r0, [pc, #548]	@ (805e3b0 <main+0x648>)
 805e18a:	f7ff fa4d 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e18e:	4603      	mov	r3, r0
 805e190:	2b00      	cmp	r3, #0
 805e192:	d0f9      	beq.n	805e188 <main+0x420>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init
  MX_SPI4_Init();
 805e194:	f000 fb50 	bl	805e838 <MX_SPI4_Init>
  if(peripherals[8].errorCode == Sys_OK)
 805e198:	4b86      	ldr	r3, [pc, #536]	@ (805e3b4 <main+0x64c>)
 805e19a:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 805e19e:	2b00      	cmp	r3, #0
 805e1a0:	d136      	bne.n	805e210 <main+0x4a8>
  {
	  sprintf(boot_log, "[ OK ] SPI4 -> ExMemory Initialized.\r\n");
 805e1a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e1a6:	4986      	ldr	r1, [pc, #536]	@ (805e3c0 <main+0x658>)
 805e1a8:	4618      	mov	r0, r3
 805e1aa:	f00b fa4f 	bl	806964c <siprintf>
	  peripherals[8].state = PERIPH_STATE_INIT;
 805e1ae:	4b81      	ldr	r3, [pc, #516]	@ (805e3b4 <main+0x64c>)
 805e1b0:	2201      	movs	r2, #1
 805e1b2:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e1b6:	2300      	movs	r3, #0
 805e1b8:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 805e1bc:	e017      	b.n	805e1ee <main+0x486>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e1be:	bf00      	nop
 805e1c0:	487b      	ldr	r0, [pc, #492]	@ (805e3b0 <main+0x648>)
 805e1c2:	f7ff fa44 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e1c6:	4603      	mov	r3, r0
 805e1c8:	2b00      	cmp	r3, #0
 805e1ca:	d0f9      	beq.n	805e1c0 <main+0x458>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e1cc:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e1d0:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e1d4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 805e1d8:	4413      	add	r3, r2
 805e1da:	781b      	ldrb	r3, [r3, #0]
 805e1dc:	4619      	mov	r1, r3
 805e1de:	4874      	ldr	r0, [pc, #464]	@ (805e3b0 <main+0x648>)
 805e1e0:	f7ff fa70 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e1e4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 805e1e8:	3301      	adds	r3, #1
 805e1ea:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 805e1ee:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e1f2:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e1f6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 805e1fa:	4413      	add	r3, r2
 805e1fc:	781b      	ldrb	r3, [r3, #0]
 805e1fe:	2b00      	cmp	r3, #0
 805e200:	d1dd      	bne.n	805e1be <main+0x456>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e202:	bf00      	nop
 805e204:	486a      	ldr	r0, [pc, #424]	@ (805e3b0 <main+0x648>)
 805e206:	f7ff fa0f 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e20a:	4603      	mov	r3, r0
 805e20c:	2b00      	cmp	r3, #0
 805e20e:	d0f9      	beq.n	805e204 <main+0x49c>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init
  MX_SPI5_Init();
 805e210:	f000 fbae 	bl	805e970 <MX_SPI5_Init>
  if(peripherals[9].errorCode == Sys_OK)
 805e214:	4b67      	ldr	r3, [pc, #412]	@ (805e3b4 <main+0x64c>)
 805e216:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 805e21a:	2b00      	cmp	r3, #0
 805e21c:	d136      	bne.n	805e28c <main+0x524>
  {
	  sprintf(boot_log, "[ OK ] SPI5 -> Host Initialized.\r\n");
 805e21e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e222:	4968      	ldr	r1, [pc, #416]	@ (805e3c4 <main+0x65c>)
 805e224:	4618      	mov	r0, r3
 805e226:	f00b fa11 	bl	806964c <siprintf>
	  peripherals[11].state = PERIPH_STATE_INIT;
 805e22a:	4b62      	ldr	r3, [pc, #392]	@ (805e3b4 <main+0x64c>)
 805e22c:	2201      	movs	r2, #1
 805e22e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e232:	2300      	movs	r3, #0
 805e234:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 805e238:	e017      	b.n	805e26a <main+0x502>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e23a:	bf00      	nop
 805e23c:	485c      	ldr	r0, [pc, #368]	@ (805e3b0 <main+0x648>)
 805e23e:	f7ff fa06 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e242:	4603      	mov	r3, r0
 805e244:	2b00      	cmp	r3, #0
 805e246:	d0f9      	beq.n	805e23c <main+0x4d4>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e248:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e24c:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e250:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 805e254:	4413      	add	r3, r2
 805e256:	781b      	ldrb	r3, [r3, #0]
 805e258:	4619      	mov	r1, r3
 805e25a:	4855      	ldr	r0, [pc, #340]	@ (805e3b0 <main+0x648>)
 805e25c:	f7ff fa32 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e260:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 805e264:	3301      	adds	r3, #1
 805e266:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 805e26a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e26e:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e272:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 805e276:	4413      	add	r3, r2
 805e278:	781b      	ldrb	r3, [r3, #0]
 805e27a:	2b00      	cmp	r3, #0
 805e27c:	d1dd      	bne.n	805e23a <main+0x4d2>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e27e:	bf00      	nop
 805e280:	484b      	ldr	r0, [pc, #300]	@ (805e3b0 <main+0x648>)
 805e282:	f7ff f9d1 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e286:	4603      	mov	r3, r0
 805e288:	2b00      	cmp	r3, #0
 805e28a:	d0f9      	beq.n	805e280 <main+0x518>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init
  MX_SPI6_Init();
 805e28c:	f000 fc40 	bl	805eb10 <MX_SPI6_Init>
  if(peripherals[10].errorCode == Sys_OK)
 805e290:	4b48      	ldr	r3, [pc, #288]	@ (805e3b4 <main+0x64c>)
 805e292:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 805e296:	2b00      	cmp	r3, #0
 805e298:	d136      	bne.n	805e308 <main+0x5a0>
  {
	  sprintf(boot_log, "[ OK ] SPI6 -> EXP Initialized.\r\n");
 805e29a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e29e:	494a      	ldr	r1, [pc, #296]	@ (805e3c8 <main+0x660>)
 805e2a0:	4618      	mov	r0, r3
 805e2a2:	f00b f9d3 	bl	806964c <siprintf>
	  peripherals[10].state = PERIPH_STATE_INIT;
 805e2a6:	4b43      	ldr	r3, [pc, #268]	@ (805e3b4 <main+0x64c>)
 805e2a8:	2201      	movs	r2, #1
 805e2aa:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e2ae:	2300      	movs	r3, #0
 805e2b0:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 805e2b4:	e017      	b.n	805e2e6 <main+0x57e>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e2b6:	bf00      	nop
 805e2b8:	483d      	ldr	r0, [pc, #244]	@ (805e3b0 <main+0x648>)
 805e2ba:	f7ff f9c8 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e2be:	4603      	mov	r3, r0
 805e2c0:	2b00      	cmp	r3, #0
 805e2c2:	d0f9      	beq.n	805e2b8 <main+0x550>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e2c4:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e2c8:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e2cc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 805e2d0:	4413      	add	r3, r2
 805e2d2:	781b      	ldrb	r3, [r3, #0]
 805e2d4:	4619      	mov	r1, r3
 805e2d6:	4836      	ldr	r0, [pc, #216]	@ (805e3b0 <main+0x648>)
 805e2d8:	f7ff f9f4 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e2dc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 805e2e0:	3301      	adds	r3, #1
 805e2e2:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 805e2e6:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e2ea:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e2ee:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 805e2f2:	4413      	add	r3, r2
 805e2f4:	781b      	ldrb	r3, [r3, #0]
 805e2f6:	2b00      	cmp	r3, #0
 805e2f8:	d1dd      	bne.n	805e2b6 <main+0x54e>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e2fa:	bf00      	nop
 805e2fc:	482c      	ldr	r0, [pc, #176]	@ (805e3b0 <main+0x648>)
 805e2fe:	f7ff f993 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e302:	4603      	mov	r3, r0
 805e304:	2b00      	cmp	r3, #0
 805e306:	d0f9      	beq.n	805e2fc <main+0x594>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init
  MX_TIM1_Init();
 805e308:	f000 fd2e 	bl	805ed68 <MX_TIM1_Init>
  if(peripherals[11].errorCode == Sys_OK)
 805e30c:	4b29      	ldr	r3, [pc, #164]	@ (805e3b4 <main+0x64c>)
 805e30e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 805e312:	2b00      	cmp	r3, #0
 805e314:	d136      	bne.n	805e384 <main+0x61c>
  {
	  sprintf(boot_log, "[ OK ] Timer-Clock Ready.\r\n");
 805e316:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e31a:	492c      	ldr	r1, [pc, #176]	@ (805e3cc <main+0x664>)
 805e31c:	4618      	mov	r0, r3
 805e31e:	f00b f995 	bl	806964c <siprintf>
	  peripherals[13].state = PERIPH_STATE_INIT;
 805e322:	4b24      	ldr	r3, [pc, #144]	@ (805e3b4 <main+0x64c>)
 805e324:	2201      	movs	r2, #1
 805e326:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e32a:	2300      	movs	r3, #0
 805e32c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 805e330:	e017      	b.n	805e362 <main+0x5fa>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e332:	bf00      	nop
 805e334:	481e      	ldr	r0, [pc, #120]	@ (805e3b0 <main+0x648>)
 805e336:	f7ff f98a 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e33a:	4603      	mov	r3, r0
 805e33c:	2b00      	cmp	r3, #0
 805e33e:	d0f9      	beq.n	805e334 <main+0x5cc>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e340:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e344:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e348:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 805e34c:	4413      	add	r3, r2
 805e34e:	781b      	ldrb	r3, [r3, #0]
 805e350:	4619      	mov	r1, r3
 805e352:	4817      	ldr	r0, [pc, #92]	@ (805e3b0 <main+0x648>)
 805e354:	f7ff f9b6 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e358:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 805e35c:	3301      	adds	r3, #1
 805e35e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 805e362:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e366:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e36a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 805e36e:	4413      	add	r3, r2
 805e370:	781b      	ldrb	r3, [r3, #0]
 805e372:	2b00      	cmp	r3, #0
 805e374:	d1dd      	bne.n	805e332 <main+0x5ca>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e376:	bf00      	nop
 805e378:	480d      	ldr	r0, [pc, #52]	@ (805e3b0 <main+0x648>)
 805e37a:	f7ff f955 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e37e:	4603      	mov	r3, r0
 805e380:	2b00      	cmp	r3, #0
 805e382:	d0f9      	beq.n	805e378 <main+0x610>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init
  MX_UART7_Init();
 805e384:	f000 fd44 	bl	805ee10 <MX_UART7_Init>
  if(peripherals[12].errorCode == Sys_OK)
 805e388:	4b0a      	ldr	r3, [pc, #40]	@ (805e3b4 <main+0x64c>)
 805e38a:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 805e38e:	2b00      	cmp	r3, #0
 805e390:	d149      	bne.n	805e426 <main+0x6be>
  {
	  sprintf(boot_log, "[ OK ] UART7 Initialized, Baud Rate: 115200.\r\n");
 805e392:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e396:	490e      	ldr	r1, [pc, #56]	@ (805e3d0 <main+0x668>)
 805e398:	4618      	mov	r0, r3
 805e39a:	f00b f957 	bl	806964c <siprintf>
	  peripherals[12].state = PERIPH_STATE_INIT;
 805e39e:	4b05      	ldr	r3, [pc, #20]	@ (805e3b4 <main+0x64c>)
 805e3a0:	2201      	movs	r2, #1
 805e3a2:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e3a6:	2300      	movs	r3, #0
 805e3a8:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 805e3ac:	e02a      	b.n	805e404 <main+0x69c>
 805e3ae:	bf00      	nop
 805e3b0:	40004400 	.word	0x40004400
 805e3b4:	24014900 	.word	0x24014900
 805e3b8:	080716e8 	.word	0x080716e8
 805e3bc:	08071714 	.word	0x08071714
 805e3c0:	08071740 	.word	0x08071740
 805e3c4:	08071768 	.word	0x08071768
 805e3c8:	0807178c 	.word	0x0807178c
 805e3cc:	080717b0 	.word	0x080717b0
 805e3d0:	080717cc 	.word	0x080717cc
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e3d4:	bf00      	nop
 805e3d6:	487c      	ldr	r0, [pc, #496]	@ (805e5c8 <main+0x860>)
 805e3d8:	f7ff f939 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e3dc:	4603      	mov	r3, r0
 805e3de:	2b00      	cmp	r3, #0
 805e3e0:	d0f9      	beq.n	805e3d6 <main+0x66e>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e3e2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e3e6:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e3ea:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 805e3ee:	4413      	add	r3, r2
 805e3f0:	781b      	ldrb	r3, [r3, #0]
 805e3f2:	4619      	mov	r1, r3
 805e3f4:	4874      	ldr	r0, [pc, #464]	@ (805e5c8 <main+0x860>)
 805e3f6:	f7ff f965 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e3fa:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 805e3fe:	3301      	adds	r3, #1
 805e400:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 805e404:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e408:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e40c:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 805e410:	4413      	add	r3, r2
 805e412:	781b      	ldrb	r3, [r3, #0]
 805e414:	2b00      	cmp	r3, #0
 805e416:	d1dd      	bne.n	805e3d4 <main+0x66c>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e418:	bf00      	nop
 805e41a:	486b      	ldr	r0, [pc, #428]	@ (805e5c8 <main+0x860>)
 805e41c:	f7ff f904 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e420:	4603      	mov	r3, r0
 805e422:	2b00      	cmp	r3, #0
 805e424:	d0f9      	beq.n	805e41a <main+0x6b2>
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

#endif

  if (Mgmt_HardwareSystemPreparing() != E_OK){
 805e426:	f7e2 f959 	bl	80406dc <Mgmt_HardwareSystemPreparing>
 805e42a:	4603      	mov	r3, r0
 805e42c:	2b00      	cmp	r3, #0
 805e42e:	d066      	beq.n	805e4fe <main+0x796>
	  system_status.init_state = INIT_STATE_FAILED;
 805e430:	4b66      	ldr	r3, [pc, #408]	@ (805e5cc <main+0x864>)
 805e432:	2207      	movs	r2, #7
 805e434:	701a      	strb	r2, [r3, #0]
      system_status.program_state = PROGRAM_STATE_ERROR;
 805e436:	4b65      	ldr	r3, [pc, #404]	@ (805e5cc <main+0x864>)
 805e438:	2202      	movs	r2, #2
 805e43a:	705a      	strb	r2, [r3, #1]
	  sprintf(boot_log, "[ ER ] System Hardware Preparing Fail!...\r\n[ ER ] Something wrong in Hardware Start-up\r\n");
 805e43c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e440:	4963      	ldr	r1, [pc, #396]	@ (805e5d0 <main+0x868>)
 805e442:	4618      	mov	r0, r3
 805e444:	f00b f902 	bl	806964c <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e448:	2300      	movs	r3, #0
 805e44a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 805e44e:	e017      	b.n	805e480 <main+0x718>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e450:	bf00      	nop
 805e452:	485d      	ldr	r0, [pc, #372]	@ (805e5c8 <main+0x860>)
 805e454:	f7ff f8fb 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e458:	4603      	mov	r3, r0
 805e45a:	2b00      	cmp	r3, #0
 805e45c:	d0f9      	beq.n	805e452 <main+0x6ea>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e45e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e462:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e466:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 805e46a:	4413      	add	r3, r2
 805e46c:	781b      	ldrb	r3, [r3, #0]
 805e46e:	4619      	mov	r1, r3
 805e470:	4855      	ldr	r0, [pc, #340]	@ (805e5c8 <main+0x860>)
 805e472:	f7ff f927 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e476:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 805e47a:	3301      	adds	r3, #1
 805e47c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 805e480:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e484:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e488:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 805e48c:	4413      	add	r3, r2
 805e48e:	781b      	ldrb	r3, [r3, #0]
 805e490:	2b00      	cmp	r3, #0
 805e492:	d1dd      	bne.n	805e450 <main+0x6e8>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e494:	bf00      	nop
 805e496:	484c      	ldr	r0, [pc, #304]	@ (805e5c8 <main+0x860>)
 805e498:	f7ff f8c6 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e49c:	4603      	mov	r3, r0
 805e49e:	2b00      	cmp	r3, #0
 805e4a0:	d0f9      	beq.n	805e496 <main+0x72e>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e4a2:	2300      	movs	r3, #0
 805e4a4:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 805e4a8:	e017      	b.n	805e4da <main+0x772>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 805e4aa:	bf00      	nop
 805e4ac:	4849      	ldr	r0, [pc, #292]	@ (805e5d4 <main+0x86c>)
 805e4ae:	f7ff f8ce 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e4b2:	4603      	mov	r3, r0
 805e4b4:	2b00      	cmp	r3, #0
 805e4b6:	d0f9      	beq.n	805e4ac <main+0x744>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 805e4b8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e4bc:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e4c0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 805e4c4:	4413      	add	r3, r2
 805e4c6:	781b      	ldrb	r3, [r3, #0]
 805e4c8:	4619      	mov	r1, r3
 805e4ca:	4842      	ldr	r0, [pc, #264]	@ (805e5d4 <main+0x86c>)
 805e4cc:	f7ff f8fa 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e4d0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 805e4d4:	3301      	adds	r3, #1
 805e4d6:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 805e4da:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e4de:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e4e2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 805e4e6:	4413      	add	r3, r2
 805e4e8:	781b      	ldrb	r3, [r3, #0]
 805e4ea:	2b00      	cmp	r3, #0
 805e4ec:	d1dd      	bne.n	805e4aa <main+0x742>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 805e4ee:	bf00      	nop
 805e4f0:	4838      	ldr	r0, [pc, #224]	@ (805e5d4 <main+0x86c>)
 805e4f2:	f7ff f899 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e4f6:	4603      	mov	r3, r0
 805e4f8:	2b00      	cmp	r3, #0
 805e4fa:	d0f9      	beq.n	805e4f0 <main+0x788>
 805e4fc:	e05f      	b.n	805e5be <main+0x856>
  }else{
	  sprintf(boot_log, "[ OK ] System Hardware Preparing Done...\r\n");
 805e4fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 805e502:	4935      	ldr	r1, [pc, #212]	@ (805e5d8 <main+0x870>)
 805e504:	4618      	mov	r0, r3
 805e506:	f00b f8a1 	bl	806964c <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e50a:	2300      	movs	r3, #0
 805e50c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 805e510:	e017      	b.n	805e542 <main+0x7da>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 805e512:	bf00      	nop
 805e514:	482c      	ldr	r0, [pc, #176]	@ (805e5c8 <main+0x860>)
 805e516:	f7ff f89a 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e51a:	4603      	mov	r3, r0
 805e51c:	2b00      	cmp	r3, #0
 805e51e:	d0f9      	beq.n	805e514 <main+0x7ac>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 805e520:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e524:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e528:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 805e52c:	4413      	add	r3, r2
 805e52e:	781b      	ldrb	r3, [r3, #0]
 805e530:	4619      	mov	r1, r3
 805e532:	4825      	ldr	r0, [pc, #148]	@ (805e5c8 <main+0x860>)
 805e534:	f7ff f8c6 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 805e53c:	3301      	adds	r3, #1
 805e53e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 805e542:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e546:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 805e54e:	4413      	add	r3, r2
 805e550:	781b      	ldrb	r3, [r3, #0]
 805e552:	2b00      	cmp	r3, #0
 805e554:	d1dd      	bne.n	805e512 <main+0x7aa>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 805e556:	bf00      	nop
 805e558:	481b      	ldr	r0, [pc, #108]	@ (805e5c8 <main+0x860>)
 805e55a:	f7ff f865 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e55e:	4603      	mov	r3, r0
 805e560:	2b00      	cmp	r3, #0
 805e562:	d0f9      	beq.n	805e558 <main+0x7f0>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e564:	2300      	movs	r3, #0
 805e566:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 805e56a:	e017      	b.n	805e59c <main+0x834>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 805e56c:	bf00      	nop
 805e56e:	4819      	ldr	r0, [pc, #100]	@ (805e5d4 <main+0x86c>)
 805e570:	f7ff f86d 	bl	805d64e <LL_USART_IsActiveFlag_TXE_TXFNF>
 805e574:	4603      	mov	r3, r0
 805e576:	2b00      	cmp	r3, #0
 805e578:	d0f9      	beq.n	805e56e <main+0x806>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 805e57a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e57e:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e582:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 805e586:	4413      	add	r3, r2
 805e588:	781b      	ldrb	r3, [r3, #0]
 805e58a:	4619      	mov	r1, r3
 805e58c:	4811      	ldr	r0, [pc, #68]	@ (805e5d4 <main+0x86c>)
 805e58e:	f7ff f899 	bl	805d6c4 <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 805e592:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 805e596:	3301      	adds	r3, #1
 805e598:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 805e59c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 805e5a0:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 805e5a4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 805e5a8:	4413      	add	r3, r2
 805e5aa:	781b      	ldrb	r3, [r3, #0]
 805e5ac:	2b00      	cmp	r3, #0
 805e5ae:	d1dd      	bne.n	805e56c <main+0x804>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 805e5b0:	bf00      	nop
 805e5b2:	4808      	ldr	r0, [pc, #32]	@ (805e5d4 <main+0x86c>)
 805e5b4:	f7ff f838 	bl	805d628 <LL_USART_IsActiveFlag_TC>
 805e5b8:	4603      	mov	r3, r0
 805e5ba:	2b00      	cmp	r3, #0
 805e5bc:	d0f9      	beq.n	805e5b2 <main+0x84a>
  }

  Mgmt_SystemStart();
 805e5be:	f7e2 f8d5 	bl	804076c <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 805e5c2:	bf00      	nop
 805e5c4:	e7fd      	b.n	805e5c2 <main+0x85a>
 805e5c6:	bf00      	nop
 805e5c8:	40004400 	.word	0x40004400
 805e5cc:	2406e630 	.word	0x2406e630
 805e5d0:	080717fc 	.word	0x080717fc
 805e5d4:	40011000 	.word	0x40011000
 805e5d8:	08071858 	.word	0x08071858

0805e5dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 805e5dc:	b580      	push	{r7, lr}
 805e5de:	b09c      	sub	sp, #112	@ 0x70
 805e5e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 805e5e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 805e5e6:	224c      	movs	r2, #76	@ 0x4c
 805e5e8:	2100      	movs	r1, #0
 805e5ea:	4618      	mov	r0, r3
 805e5ec:	f00b f8fa 	bl	80697e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 805e5f0:	1d3b      	adds	r3, r7, #4
 805e5f2:	2220      	movs	r2, #32
 805e5f4:	2100      	movs	r1, #0
 805e5f6:	4618      	mov	r0, r3
 805e5f8:	f00b f8f4 	bl	80697e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 805e5fc:	2002      	movs	r0, #2
 805e5fe:	f004 fd59 	bl	80630b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 805e602:	2300      	movs	r3, #0
 805e604:	603b      	str	r3, [r7, #0]
 805e606:	4b31      	ldr	r3, [pc, #196]	@ (805e6cc <SystemClock_Config+0xf0>)
 805e608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805e60a:	4a30      	ldr	r2, [pc, #192]	@ (805e6cc <SystemClock_Config+0xf0>)
 805e60c:	f023 0301 	bic.w	r3, r3, #1
 805e610:	62d3      	str	r3, [r2, #44]	@ 0x2c
 805e612:	4b2e      	ldr	r3, [pc, #184]	@ (805e6cc <SystemClock_Config+0xf0>)
 805e614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 805e616:	f003 0301 	and.w	r3, r3, #1
 805e61a:	603b      	str	r3, [r7, #0]
 805e61c:	4b2c      	ldr	r3, [pc, #176]	@ (805e6d0 <SystemClock_Config+0xf4>)
 805e61e:	699b      	ldr	r3, [r3, #24]
 805e620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 805e624:	4a2a      	ldr	r2, [pc, #168]	@ (805e6d0 <SystemClock_Config+0xf4>)
 805e626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 805e62a:	6193      	str	r3, [r2, #24]
 805e62c:	4b28      	ldr	r3, [pc, #160]	@ (805e6d0 <SystemClock_Config+0xf4>)
 805e62e:	699b      	ldr	r3, [r3, #24]
 805e630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 805e634:	603b      	str	r3, [r7, #0]
 805e636:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 805e638:	bf00      	nop
 805e63a:	4b25      	ldr	r3, [pc, #148]	@ (805e6d0 <SystemClock_Config+0xf4>)
 805e63c:	699b      	ldr	r3, [r3, #24]
 805e63e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 805e642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 805e646:	d1f8      	bne.n	805e63a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 805e648:	2301      	movs	r3, #1
 805e64a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 805e64c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 805e650:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 805e652:	2302      	movs	r3, #2
 805e654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 805e656:	2302      	movs	r3, #2
 805e658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 805e65a:	2305      	movs	r3, #5
 805e65c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 805e65e:	2360      	movs	r3, #96	@ 0x60
 805e660:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 805e662:	2302      	movs	r3, #2
 805e664:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 805e666:	2308      	movs	r3, #8
 805e668:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 805e66a:	2302      	movs	r3, #2
 805e66c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 805e66e:	2308      	movs	r3, #8
 805e670:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 805e672:	2300      	movs	r3, #0
 805e674:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 805e676:	2300      	movs	r3, #0
 805e678:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 805e67a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 805e67e:	4618      	mov	r0, r3
 805e680:	f004 fd72 	bl	8063168 <HAL_RCC_OscConfig>
 805e684:	4603      	mov	r3, r0
 805e686:	2b00      	cmp	r3, #0
 805e688:	d001      	beq.n	805e68e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 805e68a:	f001 f879 	bl	805f780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 805e68e:	233f      	movs	r3, #63	@ 0x3f
 805e690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 805e692:	2303      	movs	r3, #3
 805e694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 805e696:	2300      	movs	r3, #0
 805e698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 805e69a:	2308      	movs	r3, #8
 805e69c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 805e69e:	2340      	movs	r3, #64	@ 0x40
 805e6a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 805e6a2:	2340      	movs	r3, #64	@ 0x40
 805e6a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 805e6a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 805e6aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 805e6ac:	2340      	movs	r3, #64	@ 0x40
 805e6ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 805e6b0:	1d3b      	adds	r3, r7, #4
 805e6b2:	2102      	movs	r1, #2
 805e6b4:	4618      	mov	r0, r3
 805e6b6:	f005 f9b1 	bl	8063a1c <HAL_RCC_ClockConfig>
 805e6ba:	4603      	mov	r3, r0
 805e6bc:	2b00      	cmp	r3, #0
 805e6be:	d001      	beq.n	805e6c4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 805e6c0:	f001 f85e 	bl	805f780 <Error_Handler>
  }
}
 805e6c4:	bf00      	nop
 805e6c6:	3770      	adds	r7, #112	@ 0x70
 805e6c8:	46bd      	mov	sp, r7
 805e6ca:	bd80      	pop	{r7, pc}
 805e6cc:	58000400 	.word	0x58000400
 805e6d0:	58024800 	.word	0x58024800

0805e6d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 805e6d4:	b580      	push	{r7, lr}
 805e6d6:	b0be      	sub	sp, #248	@ 0xf8
 805e6d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 805e6da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805e6de:	2200      	movs	r2, #0
 805e6e0:	601a      	str	r2, [r3, #0]
 805e6e2:	605a      	str	r2, [r3, #4]
 805e6e4:	609a      	str	r2, [r3, #8]
 805e6e6:	60da      	str	r2, [r3, #12]
 805e6e8:	611a      	str	r2, [r3, #16]
 805e6ea:	615a      	str	r2, [r3, #20]
 805e6ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805e6ee:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 805e6f2:	2200      	movs	r2, #0
 805e6f4:	601a      	str	r2, [r3, #0]
 805e6f6:	605a      	str	r2, [r3, #4]
 805e6f8:	609a      	str	r2, [r3, #8]
 805e6fa:	60da      	str	r2, [r3, #12]
 805e6fc:	611a      	str	r2, [r3, #16]
 805e6fe:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805e700:	463b      	mov	r3, r7
 805e702:	22c0      	movs	r2, #192	@ 0xc0
 805e704:	2100      	movs	r1, #0
 805e706:	4618      	mov	r0, r3
 805e708:	f00b f86c 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 805e70c:	f04f 0208 	mov.w	r2, #8
 805e710:	f04f 0300 	mov.w	r3, #0
 805e714:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 805e718:	2300      	movs	r3, #0
 805e71a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805e71e:	463b      	mov	r3, r7
 805e720:	4618      	mov	r0, r3
 805e722:	f005 fd33 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805e726:	4603      	mov	r3, r0
 805e728:	2b00      	cmp	r3, #0
 805e72a:	d001      	beq.n	805e730 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 805e72c:	f001 f828 	bl	805f780 <Error_Handler>
  }

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 805e730:	2002      	movs	r0, #2
 805e732:	f7fe fff3 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 805e736:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 805e73a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805e73e:	2302      	movs	r3, #2
 805e740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805e744:	2300      	movs	r3, #0
 805e746:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 805e74a:	2301      	movs	r3, #1
 805e74c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805e750:	2300      	movs	r3, #0
 805e752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 805e756:	2304      	movs	r3, #4
 805e758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 805e75c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 805e760:	4619      	mov	r1, r3
 805e762:	481d      	ldr	r0, [pc, #116]	@ (805e7d8 <MX_I2C2_Init+0x104>)
 805e764:	f008 fdb2 	bl	80672cc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 805e768:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 805e76c:	f7fe fff2 	bl	805d754 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 805e770:	481a      	ldr	r0, [pc, #104]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e772:	f7fe fdd3 	bl	805d31c <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 805e776:	2200      	movs	r2, #0
 805e778:	2100      	movs	r1, #0
 805e77a:	4818      	ldr	r0, [pc, #96]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e77c:	f7fe fda6 	bl	805d2cc <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 805e780:	4816      	ldr	r0, [pc, #88]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e782:	f7fe fdbb 	bl	805d2fc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 805e786:	4815      	ldr	r0, [pc, #84]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e788:	f7fe fd8f 	bl	805d2aa <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 805e78c:	4813      	ldr	r0, [pc, #76]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e78e:	f7fe fd7c 	bl	805d28a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 805e792:	2300      	movs	r3, #0
 805e794:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  I2C_InitStruct.Timing = 0x00501E6C;
 805e798:	4b11      	ldr	r3, [pc, #68]	@ (805e7e0 <MX_I2C2_Init+0x10c>)
 805e79a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 805e79e:	2300      	movs	r3, #0
 805e7a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  I2C_InitStruct.DigitalFilter = 0;
 805e7a4:	2300      	movs	r3, #0
 805e7a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  I2C_InitStruct.OwnAddress1 = 0;
 805e7aa:	2300      	movs	r3, #0
 805e7ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 805e7b0:	2300      	movs	r3, #0
 805e7b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 805e7b6:	2300      	movs	r3, #0
 805e7b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 805e7bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805e7c0:	4619      	mov	r1, r3
 805e7c2:	4806      	ldr	r0, [pc, #24]	@ (805e7dc <MX_I2C2_Init+0x108>)
 805e7c4:	f008 fe94 	bl	80674f0 <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */
  peripherals[7].errorCode = Sys_OK;
 805e7c8:	4b06      	ldr	r3, [pc, #24]	@ (805e7e4 <MX_I2C2_Init+0x110>)
 805e7ca:	2200      	movs	r2, #0
 805e7cc:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  /* USER CODE END I2C2_Init 2 */

}
 805e7d0:	bf00      	nop
 805e7d2:	37f8      	adds	r7, #248	@ 0xf8
 805e7d4:	46bd      	mov	sp, r7
 805e7d6:	bd80      	pop	{r7, pc}
 805e7d8:	58020400 	.word	0x58020400
 805e7dc:	40005800 	.word	0x40005800
 805e7e0:	00501e6c 	.word	0x00501e6c
 805e7e4:	24014900 	.word	0x24014900

0805e7e8 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 805e7e8:	b580      	push	{r7, lr}
 805e7ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 805e7ec:	4b0f      	ldr	r3, [pc, #60]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e7ee:	4a10      	ldr	r2, [pc, #64]	@ (805e830 <MX_SDMMC1_MMC_Init+0x48>)
 805e7f0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 805e7f2:	4b0e      	ldr	r3, [pc, #56]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e7f4:	2200      	movs	r2, #0
 805e7f6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 805e7f8:	4b0c      	ldr	r3, [pc, #48]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e7fa:	2200      	movs	r2, #0
 805e7fc:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 805e7fe:	4b0b      	ldr	r3, [pc, #44]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e800:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 805e804:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 805e806:	4b09      	ldr	r3, [pc, #36]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e808:	2200      	movs	r2, #0
 805e80a:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 4;
 805e80c:	4b07      	ldr	r3, [pc, #28]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e80e:	2204      	movs	r2, #4
 805e810:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 805e812:	4806      	ldr	r0, [pc, #24]	@ (805e82c <MX_SDMMC1_MMC_Init+0x44>)
 805e814:	f003 f88a 	bl	806192c <HAL_MMC_Init>
 805e818:	4603      	mov	r3, r0
 805e81a:	2b00      	cmp	r3, #0
 805e81c:	d104      	bne.n	805e828 <MX_SDMMC1_MMC_Init+0x40>
  {
    return;
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */
  peripherals[8].errorCode = Sys_OK;
 805e81e:	4b05      	ldr	r3, [pc, #20]	@ (805e834 <MX_SDMMC1_MMC_Init+0x4c>)
 805e820:	2200      	movs	r2, #0
 805e822:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 805e826:	e000      	b.n	805e82a <MX_SDMMC1_MMC_Init+0x42>
    return;
 805e828:	bf00      	nop
  /* USER CODE END SDMMC1_Init 2 */

}
 805e82a:	bd80      	pop	{r7, pc}
 805e82c:	2406e634 	.word	0x2406e634
 805e830:	52007000 	.word	0x52007000
 805e834:	24014900 	.word	0x24014900

0805e838 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 805e838:	b580      	push	{r7, lr}
 805e83a:	b0c0      	sub	sp, #256	@ 0x100
 805e83c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 805e83e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805e842:	2228      	movs	r2, #40	@ 0x28
 805e844:	2100      	movs	r1, #0
 805e846:	4618      	mov	r0, r3
 805e848:	f00a ffcc 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805e84c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805e850:	2200      	movs	r2, #0
 805e852:	601a      	str	r2, [r3, #0]
 805e854:	605a      	str	r2, [r3, #4]
 805e856:	609a      	str	r2, [r3, #8]
 805e858:	60da      	str	r2, [r3, #12]
 805e85a:	611a      	str	r2, [r3, #16]
 805e85c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805e85e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e862:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805e866:	4618      	mov	r0, r3
 805e868:	23c0      	movs	r3, #192	@ 0xc0
 805e86a:	461a      	mov	r2, r3
 805e86c:	2100      	movs	r1, #0
 805e86e:	f00a ffb9 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 805e872:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e876:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 805e87a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 805e87e:	f04f 0300 	mov.w	r3, #0
 805e882:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 805e886:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e88a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805e88e:	2200      	movs	r2, #0
 805e890:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805e892:	463b      	mov	r3, r7
 805e894:	4618      	mov	r0, r3
 805e896:	f005 fc79 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805e89a:	4603      	mov	r3, r0
 805e89c:	2b00      	cmp	r3, #0
 805e89e:	d001      	beq.n	805e8a4 <MX_SPI4_Init+0x6c>
  {
    Error_Handler();
 805e8a0:	f000 ff6e 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 805e8a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 805e8a8:	f7fe ff70 	bl	805d78c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 805e8ac:	2010      	movs	r0, #16
 805e8ae:	f7fe ff35 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE2   ------> SPI4_SCK
  PE5   ------> SPI4_MISO
  PE6   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 805e8b2:	2364      	movs	r3, #100	@ 0x64
 805e8b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805e8b8:	2302      	movs	r3, #2
 805e8ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805e8be:	2300      	movs	r3, #0
 805e8c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805e8c4:	2300      	movs	r3, #0
 805e8c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805e8ca:	2300      	movs	r3, #0
 805e8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 805e8d0:	2305      	movs	r3, #5
 805e8d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 805e8d6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805e8da:	4619      	mov	r1, r3
 805e8dc:	4821      	ldr	r0, [pc, #132]	@ (805e964 <MX_SPI4_Init+0x12c>)
 805e8de:	f008 fcf5 	bl	80672cc <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 805e8e2:	2300      	movs	r3, #0
 805e8e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 805e8e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 805e8ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 805e8f0:	2307      	movs	r3, #7
 805e8f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 805e8f6:	2300      	movs	r3, #0
 805e8f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 805e8fc:	2300      	movs	r3, #0
 805e8fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 805e902:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 805e906:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 805e90a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 805e90e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 805e912:	2300      	movs	r3, #0
 805e914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 805e918:	2300      	movs	r3, #0
 805e91a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 805e91e:	2300      	movs	r3, #0
 805e920:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 805e924:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805e928:	4619      	mov	r1, r3
 805e92a:	480f      	ldr	r0, [pc, #60]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e92c:	f00a f9b2 	bl	8068c94 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 805e930:	2100      	movs	r1, #0
 805e932:	480d      	ldr	r0, [pc, #52]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e934:	f7fe fd22 	bl	805d37c <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI4, LL_SPI_FIFO_TH_01DATA);
 805e938:	2100      	movs	r1, #0
 805e93a:	480b      	ldr	r0, [pc, #44]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e93c:	f7fe fd31 	bl	805d3a2 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI4);
 805e940:	4809      	ldr	r0, [pc, #36]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e942:	f7fe fd41 	bl	805d3c8 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 805e946:	4808      	ldr	r0, [pc, #32]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e948:	f7fe fcf8 	bl	805d33c <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI4);
 805e94c:	4806      	ldr	r0, [pc, #24]	@ (805e968 <MX_SPI4_Init+0x130>)
 805e94e:	f7fe fd05 	bl	805d35c <LL_SPI_StartMasterTransfer>
  peripherals[10].errorCode = Sys_OK;
 805e952:	4b06      	ldr	r3, [pc, #24]	@ (805e96c <MX_SPI4_Init+0x134>)
 805e954:	2200      	movs	r2, #0
 805e956:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  /* USER CODE END SPI4_Init 2 */

}
 805e95a:	bf00      	nop
 805e95c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 805e960:	46bd      	mov	sp, r7
 805e962:	bd80      	pop	{r7, pc}
 805e964:	58021000 	.word	0x58021000
 805e968:	40013400 	.word	0x40013400
 805e96c:	24014900 	.word	0x24014900

0805e970 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 805e970:	b580      	push	{r7, lr}
 805e972:	b0c0      	sub	sp, #256	@ 0x100
 805e974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 805e976:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805e97a:	2228      	movs	r2, #40	@ 0x28
 805e97c:	2100      	movs	r1, #0
 805e97e:	4618      	mov	r0, r3
 805e980:	f00a ff30 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805e984:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805e988:	2200      	movs	r2, #0
 805e98a:	601a      	str	r2, [r3, #0]
 805e98c:	605a      	str	r2, [r3, #4]
 805e98e:	609a      	str	r2, [r3, #8]
 805e990:	60da      	str	r2, [r3, #12]
 805e992:	611a      	str	r2, [r3, #16]
 805e994:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805e996:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e99a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805e99e:	4618      	mov	r0, r3
 805e9a0:	23c0      	movs	r3, #192	@ 0xc0
 805e9a2:	461a      	mov	r2, r3
 805e9a4:	2100      	movs	r1, #0
 805e9a6:	f00a ff1d 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 805e9aa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e9ae:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 805e9b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 805e9b6:	f04f 0300 	mov.w	r3, #0
 805e9ba:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 805e9be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805e9c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805e9c6:	2200      	movs	r2, #0
 805e9c8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805e9ca:	463b      	mov	r3, r7
 805e9cc:	4618      	mov	r0, r3
 805e9ce:	f005 fbdd 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805e9d2:	4603      	mov	r3, r0
 805e9d4:	2b00      	cmp	r3, #0
 805e9d6:	d001      	beq.n	805e9dc <MX_SPI5_Init+0x6c>
  {
    Error_Handler();
 805e9d8:	f000 fed2 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 805e9dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 805e9e0:	f7fe fed4 	bl	805d78c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 805e9e4:	2020      	movs	r0, #32
 805e9e6:	f7fe fe99 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  PF6   ------> SPI5_NSS
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 805e9ea:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 805e9ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805e9f2:	2302      	movs	r3, #2
 805e9f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805e9f8:	2300      	movs	r3, #0
 805e9fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805e9fe:	2300      	movs	r3, #0
 805ea00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805ea04:	2300      	movs	r3, #0
 805ea06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 805ea0a:	2305      	movs	r3, #5
 805ea0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 805ea10:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805ea14:	4619      	mov	r1, r3
 805ea16:	483a      	ldr	r0, [pc, #232]	@ (805eb00 <MX_SPI5_Init+0x190>)
 805ea18:	f008 fc58 	bl	80672cc <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_7, LL_DMAMUX1_REQ_SPI5_TX);
 805ea1c:	2256      	movs	r2, #86	@ 0x56
 805ea1e:	2107      	movs	r1, #7
 805ea20:	4838      	ldr	r0, [pc, #224]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea22:	f7fe fff5 	bl	805da10 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 805ea26:	2240      	movs	r2, #64	@ 0x40
 805ea28:	2107      	movs	r1, #7
 805ea2a:	4836      	ldr	r0, [pc, #216]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea2c:	f7fe fee6 	bl	805d7fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 805ea30:	2200      	movs	r2, #0
 805ea32:	2107      	movs	r1, #7
 805ea34:	4833      	ldr	r0, [pc, #204]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea36:	f7fe ffc5 	bl	805d9c4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 805ea3a:	2200      	movs	r2, #0
 805ea3c:	2107      	movs	r1, #7
 805ea3e:	4831      	ldr	r0, [pc, #196]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea40:	f7fe ff02 	bl	805d848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 805ea44:	2200      	movs	r2, #0
 805ea46:	2107      	movs	r1, #7
 805ea48:	482e      	ldr	r0, [pc, #184]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea4a:	f7fe ff23 	bl	805d894 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 805ea4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 805ea52:	2107      	movs	r1, #7
 805ea54:	482b      	ldr	r0, [pc, #172]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea56:	f7fe ff43 	bl	805d8e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 805ea5a:	2200      	movs	r2, #0
 805ea5c:	2107      	movs	r1, #7
 805ea5e:	4829      	ldr	r0, [pc, #164]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea60:	f7fe ff64 	bl	805d92c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 805ea64:	2200      	movs	r2, #0
 805ea66:	2107      	movs	r1, #7
 805ea68:	4826      	ldr	r0, [pc, #152]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea6a:	f7fe ff85 	bl	805d978 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_7);
 805ea6e:	2107      	movs	r1, #7
 805ea70:	4824      	ldr	r0, [pc, #144]	@ (805eb04 <MX_SPI5_Init+0x194>)
 805ea72:	f7fe fffd 	bl	805da70 <LL_DMA_DisableFifoMode>

  /* SPI5 interrupt Init */
  NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805ea76:	f7fe fb6f 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805ea7a:	4603      	mov	r3, r0
 805ea7c:	2200      	movs	r2, #0
 805ea7e:	2107      	movs	r1, #7
 805ea80:	4618      	mov	r0, r3
 805ea82:	f7fe fbbf 	bl	805d204 <NVIC_EncodePriority>
 805ea86:	4603      	mov	r3, r0
 805ea88:	4619      	mov	r1, r3
 805ea8a:	2055      	movs	r0, #85	@ 0x55
 805ea8c:	f7fe fb90 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI5_IRQn);
 805ea90:	2055      	movs	r0, #85	@ 0x55
 805ea92:	f7fe fb6f 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 805ea96:	2300      	movs	r3, #0
 805ea98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 805ea9c:	2300      	movs	r3, #0
 805ea9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 805eaa2:	2307      	movs	r3, #7
 805eaa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 805eaa8:	2300      	movs	r3, #0
 805eaaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 805eaae:	2300      	movs	r3, #0
 805eab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 805eab4:	2300      	movs	r3, #0
 805eab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 805eaba:	2300      	movs	r3, #0
 805eabc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 805eac0:	2300      	movs	r3, #0
 805eac2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 805eac6:	2300      	movs	r3, #0
 805eac8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI5, &SPI_InitStruct);
 805eacc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805ead0:	4619      	mov	r1, r3
 805ead2:	480d      	ldr	r0, [pc, #52]	@ (805eb08 <MX_SPI5_Init+0x198>)
 805ead4:	f00a f8de 	bl	8068c94 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 805ead8:	2100      	movs	r1, #0
 805eada:	480b      	ldr	r0, [pc, #44]	@ (805eb08 <MX_SPI5_Init+0x198>)
 805eadc:	f7fe fc4e 	bl	805d37c <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI5, LL_SPI_FIFO_TH_01DATA);
 805eae0:	2100      	movs	r1, #0
 805eae2:	4809      	ldr	r0, [pc, #36]	@ (805eb08 <MX_SPI5_Init+0x198>)
 805eae4:	f7fe fc5d 	bl	805d3a2 <LL_SPI_SetFIFOThreshold>
  LL_SPI_DisableNSSPulseMgt(SPI5);
 805eae8:	4807      	ldr	r0, [pc, #28]	@ (805eb08 <MX_SPI5_Init+0x198>)
 805eaea:	f7fe fc7d 	bl	805d3e8 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI5_Init 2 */

  peripherals[11].errorCode = Sys_OK;
 805eaee:	4b07      	ldr	r3, [pc, #28]	@ (805eb0c <MX_SPI5_Init+0x19c>)
 805eaf0:	2200      	movs	r2, #0
 805eaf2:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
  /* USER CODE END SPI5_Init 2 */

}
 805eaf6:	bf00      	nop
 805eaf8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 805eafc:	46bd      	mov	sp, r7
 805eafe:	bd80      	pop	{r7, pc}
 805eb00:	58021400 	.word	0x58021400
 805eb04:	40020000 	.word	0x40020000
 805eb08:	40015000 	.word	0x40015000
 805eb0c:	24014900 	.word	0x24014900

0805eb10 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 805eb10:	b580      	push	{r7, lr}
 805eb12:	b0c0      	sub	sp, #256	@ 0x100
 805eb14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 805eb16:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805eb1a:	2228      	movs	r2, #40	@ 0x28
 805eb1c:	2100      	movs	r1, #0
 805eb1e:	4618      	mov	r0, r3
 805eb20:	f00a fe60 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805eb24:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805eb28:	2200      	movs	r2, #0
 805eb2a:	601a      	str	r2, [r3, #0]
 805eb2c:	605a      	str	r2, [r3, #4]
 805eb2e:	609a      	str	r2, [r3, #8]
 805eb30:	60da      	str	r2, [r3, #12]
 805eb32:	611a      	str	r2, [r3, #16]
 805eb34:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805eb36:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb3a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb3e:	4618      	mov	r0, r3
 805eb40:	23c0      	movs	r3, #192	@ 0xc0
 805eb42:	461a      	mov	r2, r3
 805eb44:	2100      	movs	r1, #0
 805eb46:	f00a fe4d 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 805eb4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb4e:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 805eb52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 805eb56:	f04f 0300 	mov.w	r3, #0
 805eb5a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 805eb5e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb62:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb66:	2205      	movs	r2, #5
 805eb68:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 805eb6a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb72:	2230      	movs	r2, #48	@ 0x30
 805eb74:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 805eb76:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb7a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb7e:	2202      	movs	r2, #2
 805eb80:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 805eb82:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb8a:	2206      	movs	r2, #6
 805eb8c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 805eb8e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eb96:	2204      	movs	r2, #4
 805eb98:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 805eb9a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805eb9e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805eba2:	2280      	movs	r2, #128	@ 0x80
 805eba4:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 805eba6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805ebaa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805ebae:	2200      	movs	r2, #0
 805ebb0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 805ebb2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805ebb6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805ebba:	2200      	movs	r2, #0
 805ebbc:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 805ebbe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 805ebc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 805ebc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 805ebca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805ebce:	463b      	mov	r3, r7
 805ebd0:	4618      	mov	r0, r3
 805ebd2:	f005 fadb 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805ebd6:	4603      	mov	r3, r0
 805ebd8:	2b00      	cmp	r3, #0
 805ebda:	d001      	beq.n	805ebe0 <MX_SPI6_Init+0xd0>
  {
    Error_Handler();
 805ebdc:	f000 fdd0 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SPI6);
 805ebe0:	2020      	movs	r0, #32
 805ebe2:	f7fe fdef 	bl	805d7c4 <LL_APB4_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 805ebe6:	2001      	movs	r0, #1
 805ebe8:	f7fe fd98 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PA5   ------> SPI6_SCK
  PA6   ------> SPI6_MISO
  PA7   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 805ebec:	23e0      	movs	r3, #224	@ 0xe0
 805ebee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805ebf2:	2302      	movs	r3, #2
 805ebf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805ebf8:	2300      	movs	r3, #0
 805ebfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805ebfe:	2300      	movs	r3, #0
 805ec00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805ec04:	2300      	movs	r3, #0
 805ec06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 805ec0a:	2308      	movs	r3, #8
 805ec0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 805ec10:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805ec14:	4619      	mov	r1, r3
 805ec16:	4850      	ldr	r0, [pc, #320]	@ (805ed58 <MX_SPI6_Init+0x248>)
 805ec18:	f008 fb58 	bl	80672cc <LL_GPIO_Init>

  /* SPI6 DMA Init */

  /* SPI6_RX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 805ec1c:	220b      	movs	r2, #11
 805ec1e:	2100      	movs	r1, #0
 805ec20:	484e      	ldr	r0, [pc, #312]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec22:	f7ff f853 	bl	805dccc <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_DIRECTION_PERIPH_TO_MEMORY);
 805ec26:	2200      	movs	r2, #0
 805ec28:	2100      	movs	r1, #0
 805ec2a:	484c      	ldr	r0, [pc, #304]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec2c:	f7fe ff42 	bl	805dab4 <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PRIORITY_LOW);
 805ec30:	2200      	movs	r2, #0
 805ec32:	2100      	movs	r1, #0
 805ec34:	4849      	ldr	r0, [pc, #292]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec36:	f7ff f823 	bl	805dc80 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MODE_NORMAL);
 805ec3a:	2200      	movs	r2, #0
 805ec3c:	2100      	movs	r1, #0
 805ec3e:	4847      	ldr	r0, [pc, #284]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec40:	f7fe ff60 	bl	805db04 <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PERIPH_NOINCREMENT);
 805ec44:	2200      	movs	r2, #0
 805ec46:	2100      	movs	r1, #0
 805ec48:	4844      	ldr	r0, [pc, #272]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec4a:	f7fe ff81 	bl	805db50 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MEMORY_INCREMENT);
 805ec4e:	2280      	movs	r2, #128	@ 0x80
 805ec50:	2100      	movs	r1, #0
 805ec52:	4842      	ldr	r0, [pc, #264]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec54:	f7fe ffa2 	bl	805db9c <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PDATAALIGN_BYTE);
 805ec58:	2200      	movs	r2, #0
 805ec5a:	2100      	movs	r1, #0
 805ec5c:	483f      	ldr	r0, [pc, #252]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec5e:	f7fe ffc3 	bl	805dbe8 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MDATAALIGN_BYTE);
 805ec62:	2200      	movs	r2, #0
 805ec64:	2100      	movs	r1, #0
 805ec66:	483d      	ldr	r0, [pc, #244]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec68:	f7fe ffe4 	bl	805dc34 <LL_BDMA_SetMemorySize>

  /* SPI6_TX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_1, LL_DMAMUX2_REQ_SPI6_TX);
 805ec6c:	220c      	movs	r2, #12
 805ec6e:	2101      	movs	r1, #1
 805ec70:	483a      	ldr	r0, [pc, #232]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec72:	f7ff f82b 	bl	805dccc <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_DIRECTION_MEMORY_TO_PERIPH);
 805ec76:	2210      	movs	r2, #16
 805ec78:	2101      	movs	r1, #1
 805ec7a:	4838      	ldr	r0, [pc, #224]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec7c:	f7fe ff1a 	bl	805dab4 <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PRIORITY_LOW);
 805ec80:	2200      	movs	r2, #0
 805ec82:	2101      	movs	r1, #1
 805ec84:	4835      	ldr	r0, [pc, #212]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec86:	f7fe fffb 	bl	805dc80 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MODE_NORMAL);
 805ec8a:	2200      	movs	r2, #0
 805ec8c:	2101      	movs	r1, #1
 805ec8e:	4833      	ldr	r0, [pc, #204]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec90:	f7fe ff38 	bl	805db04 <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PERIPH_NOINCREMENT);
 805ec94:	2200      	movs	r2, #0
 805ec96:	2101      	movs	r1, #1
 805ec98:	4830      	ldr	r0, [pc, #192]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ec9a:	f7fe ff59 	bl	805db50 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MEMORY_NOINCREMENT);
 805ec9e:	2200      	movs	r2, #0
 805eca0:	2101      	movs	r1, #1
 805eca2:	482e      	ldr	r0, [pc, #184]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805eca4:	f7fe ff7a 	bl	805db9c <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PDATAALIGN_BYTE);
 805eca8:	2200      	movs	r2, #0
 805ecaa:	2101      	movs	r1, #1
 805ecac:	482b      	ldr	r0, [pc, #172]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ecae:	f7fe ff9b 	bl	805dbe8 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MDATAALIGN_BYTE);
 805ecb2:	2200      	movs	r2, #0
 805ecb4:	2101      	movs	r1, #1
 805ecb6:	4829      	ldr	r0, [pc, #164]	@ (805ed5c <MX_SPI6_Init+0x24c>)
 805ecb8:	f7fe ffbc 	bl	805dc34 <LL_BDMA_SetMemorySize>

  /* SPI6 interrupt Init */
  NVIC_SetPriority(SPI6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805ecbc:	f7fe fa4c 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805ecc0:	4603      	mov	r3, r0
 805ecc2:	2200      	movs	r2, #0
 805ecc4:	2107      	movs	r1, #7
 805ecc6:	4618      	mov	r0, r3
 805ecc8:	f7fe fa9c 	bl	805d204 <NVIC_EncodePriority>
 805eccc:	4603      	mov	r3, r0
 805ecce:	4619      	mov	r1, r3
 805ecd0:	2056      	movs	r0, #86	@ 0x56
 805ecd2:	f7fe fa6d 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI6_IRQn);
 805ecd6:	2056      	movs	r0, #86	@ 0x56
 805ecd8:	f7fe fa4c 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 805ecdc:	2300      	movs	r3, #0
 805ecde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 805ece2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 805ece6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 805ecea:	2307      	movs	r3, #7
 805ecec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 805ecf0:	2300      	movs	r3, #0
 805ecf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 805ecf6:	2300      	movs	r3, #0
 805ecf8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 805ecfc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 805ed00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 805ed04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 805ed08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 805ed0c:	2300      	movs	r3, #0
 805ed0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 805ed12:	2300      	movs	r3, #0
 805ed14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 805ed18:	2300      	movs	r3, #0
 805ed1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 805ed1e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805ed22:	4619      	mov	r1, r3
 805ed24:	480e      	ldr	r0, [pc, #56]	@ (805ed60 <MX_SPI6_Init+0x250>)
 805ed26:	f009 ffb5 	bl	8068c94 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 805ed2a:	2100      	movs	r1, #0
 805ed2c:	480c      	ldr	r0, [pc, #48]	@ (805ed60 <MX_SPI6_Init+0x250>)
 805ed2e:	f7fe fb25 	bl	805d37c <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 805ed32:	2100      	movs	r1, #0
 805ed34:	480a      	ldr	r0, [pc, #40]	@ (805ed60 <MX_SPI6_Init+0x250>)
 805ed36:	f7fe fb34 	bl	805d3a2 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 805ed3a:	4809      	ldr	r0, [pc, #36]	@ (805ed60 <MX_SPI6_Init+0x250>)
 805ed3c:	f7fe fb44 	bl	805d3c8 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 805ed40:	4807      	ldr	r0, [pc, #28]	@ (805ed60 <MX_SPI6_Init+0x250>)
 805ed42:	f7fe fafb 	bl	805d33c <LL_SPI_Enable>
  peripherals[12].errorCode = Sys_OK;
 805ed46:	4b07      	ldr	r3, [pc, #28]	@ (805ed64 <MX_SPI6_Init+0x254>)
 805ed48:	2200      	movs	r2, #0
 805ed4a:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END SPI6_Init 2 */

}
 805ed4e:	bf00      	nop
 805ed50:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 805ed54:	46bd      	mov	sp, r7
 805ed56:	bd80      	pop	{r7, pc}
 805ed58:	58020000 	.word	0x58020000
 805ed5c:	58025400 	.word	0x58025400
 805ed60:	58001400 	.word	0x58001400
 805ed64:	24014900 	.word	0x24014900

0805ed68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 805ed68:	b580      	push	{r7, lr}
 805ed6a:	b086      	sub	sp, #24
 805ed6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 805ed6e:	1d3b      	adds	r3, r7, #4
 805ed70:	2200      	movs	r2, #0
 805ed72:	601a      	str	r2, [r3, #0]
 805ed74:	605a      	str	r2, [r3, #4]
 805ed76:	609a      	str	r2, [r3, #8]
 805ed78:	60da      	str	r2, [r3, #12]
 805ed7a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 805ed7c:	2001      	movs	r0, #1
 805ed7e:	f7fe fd05 	bl	805d78c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 805ed82:	f7fe f9e9 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805ed86:	4603      	mov	r3, r0
 805ed88:	2200      	movs	r2, #0
 805ed8a:	210f      	movs	r1, #15
 805ed8c:	4618      	mov	r0, r3
 805ed8e:	f7fe fa39 	bl	805d204 <NVIC_EncodePriority>
 805ed92:	4603      	mov	r3, r0
 805ed94:	4619      	mov	r1, r3
 805ed96:	2019      	movs	r0, #25
 805ed98:	f7fe fa0a 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 805ed9c:	2019      	movs	r0, #25
 805ed9e:	f7fe f9e9 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 805eda2:	2377      	movs	r3, #119	@ 0x77
 805eda4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 805eda6:	2300      	movs	r3, #0
 805eda8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 805edaa:	f240 33e7 	movw	r3, #999	@ 0x3e7
 805edae:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 805edb0:	2300      	movs	r3, #0
 805edb2:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 805edb4:	2300      	movs	r3, #0
 805edb6:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 805edb8:	1d3b      	adds	r3, r7, #4
 805edba:	4619      	mov	r1, r3
 805edbc:	4812      	ldr	r0, [pc, #72]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edbe:	f00a f821 	bl	8068e04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 805edc2:	4811      	ldr	r0, [pc, #68]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edc4:	f7fe fb40 	bl	805d448 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 805edc8:	2100      	movs	r1, #0
 805edca:	480f      	ldr	r0, [pc, #60]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edcc:	f7fe fb4c 	bl	805d468 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 805edd0:	2120      	movs	r1, #32
 805edd2:	480d      	ldr	r0, [pc, #52]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edd4:	f7fe fb5e 	bl	805d494 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 805edd8:	2100      	movs	r1, #0
 805edda:	480b      	ldr	r0, [pc, #44]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805eddc:	f7fe fb6d 	bl	805d4ba <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 805ede0:	4809      	ldr	r0, [pc, #36]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805ede2:	f7fe fb7d 	bl	805d4e0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 805ede6:	4808      	ldr	r0, [pc, #32]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805ede8:	f7fe fb8a 	bl	805d500 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM1);
 805edec:	4806      	ldr	r0, [pc, #24]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edee:	f7fe fb1b 	bl	805d428 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM1);
 805edf2:	4805      	ldr	r0, [pc, #20]	@ (805ee08 <MX_TIM1_Init+0xa0>)
 805edf4:	f7fe fb08 	bl	805d408 <LL_TIM_EnableCounter>
  peripherals[13].errorCode = Sys_OK;
 805edf8:	4b04      	ldr	r3, [pc, #16]	@ (805ee0c <MX_TIM1_Init+0xa4>)
 805edfa:	2200      	movs	r2, #0
 805edfc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
  /* USER CODE END TIM1_Init 2 */

}
 805ee00:	bf00      	nop
 805ee02:	3718      	adds	r7, #24
 805ee04:	46bd      	mov	sp, r7
 805ee06:	bd80      	pop	{r7, pc}
 805ee08:	40010000 	.word	0x40010000
 805ee0c:	24014900 	.word	0x24014900

0805ee10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 805ee10:	b580      	push	{r7, lr}
 805ee12:	b0be      	sub	sp, #248	@ 0xf8
 805ee14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 805ee16:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805ee1a:	2220      	movs	r2, #32
 805ee1c:	2100      	movs	r1, #0
 805ee1e:	4618      	mov	r0, r3
 805ee20:	f00a fce0 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805ee24:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805ee28:	2200      	movs	r2, #0
 805ee2a:	601a      	str	r2, [r3, #0]
 805ee2c:	605a      	str	r2, [r3, #4]
 805ee2e:	609a      	str	r2, [r3, #8]
 805ee30:	60da      	str	r2, [r3, #12]
 805ee32:	611a      	str	r2, [r3, #16]
 805ee34:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805ee36:	463b      	mov	r3, r7
 805ee38:	22c0      	movs	r2, #192	@ 0xc0
 805ee3a:	2100      	movs	r1, #0
 805ee3c:	4618      	mov	r0, r3
 805ee3e:	f00a fcd1 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 805ee42:	f04f 0202 	mov.w	r2, #2
 805ee46:	f04f 0300 	mov.w	r3, #0
 805ee4a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 805ee4e:	2300      	movs	r3, #0
 805ee50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805ee52:	463b      	mov	r3, r7
 805ee54:	4618      	mov	r0, r3
 805ee56:	f005 f999 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805ee5a:	4603      	mov	r3, r0
 805ee5c:	2b00      	cmp	r3, #0
 805ee5e:	d001      	beq.n	805ee64 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 805ee60:	f000 fc8e 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 805ee64:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 805ee68:	f7fe fc74 	bl	805d754 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 805ee6c:	2010      	movs	r0, #16
 805ee6e:	f7fe fc55 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 805ee72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 805ee76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805ee7a:	2302      	movs	r3, #2
 805ee7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805ee80:	2300      	movs	r3, #0
 805ee82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805ee86:	2300      	movs	r3, #0
 805ee88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805ee8c:	2300      	movs	r3, #0
 805ee8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 805ee92:	2307      	movs	r3, #7
 805ee94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 805ee98:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805ee9c:	4619      	mov	r1, r3
 805ee9e:	4843      	ldr	r0, [pc, #268]	@ (805efac <MX_UART7_Init+0x19c>)
 805eea0:	f008 fa14 	bl	80672cc <LL_GPIO_Init>

  /* UART7 DMA Init */

  /* UART7_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_UART7_RX);
 805eea4:	224f      	movs	r2, #79	@ 0x4f
 805eea6:	2101      	movs	r1, #1
 805eea8:	4841      	ldr	r0, [pc, #260]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eeaa:	f7fe fdb1 	bl	805da10 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 805eeae:	2200      	movs	r2, #0
 805eeb0:	2101      	movs	r1, #1
 805eeb2:	483f      	ldr	r0, [pc, #252]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eeb4:	f7fe fca2 	bl	805d7fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 805eeb8:	2200      	movs	r2, #0
 805eeba:	2101      	movs	r1, #1
 805eebc:	483c      	ldr	r0, [pc, #240]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eebe:	f7fe fd81 	bl	805d9c4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 805eec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 805eec6:	2101      	movs	r1, #1
 805eec8:	4839      	ldr	r0, [pc, #228]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eeca:	f7fe fcbd 	bl	805d848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 805eece:	2200      	movs	r2, #0
 805eed0:	2101      	movs	r1, #1
 805eed2:	4837      	ldr	r0, [pc, #220]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eed4:	f7fe fcde 	bl	805d894 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 805eed8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 805eedc:	2101      	movs	r1, #1
 805eede:	4834      	ldr	r0, [pc, #208]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eee0:	f7fe fcfe 	bl	805d8e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 805eee4:	2200      	movs	r2, #0
 805eee6:	2101      	movs	r1, #1
 805eee8:	4831      	ldr	r0, [pc, #196]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eeea:	f7fe fd1f 	bl	805d92c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 805eeee:	2200      	movs	r2, #0
 805eef0:	2101      	movs	r1, #1
 805eef2:	482f      	ldr	r0, [pc, #188]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eef4:	f7fe fd40 	bl	805d978 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 805eef8:	2101      	movs	r1, #1
 805eefa:	482d      	ldr	r0, [pc, #180]	@ (805efb0 <MX_UART7_Init+0x1a0>)
 805eefc:	f7fe fdb8 	bl	805da70 <LL_DMA_DisableFifoMode>

  /* UART7 interrupt Init */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805ef00:	f7fe f92a 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805ef04:	4603      	mov	r3, r0
 805ef06:	2200      	movs	r2, #0
 805ef08:	2107      	movs	r1, #7
 805ef0a:	4618      	mov	r0, r3
 805ef0c:	f7fe f97a 	bl	805d204 <NVIC_EncodePriority>
 805ef10:	4603      	mov	r3, r0
 805ef12:	4619      	mov	r1, r3
 805ef14:	2052      	movs	r0, #82	@ 0x52
 805ef16:	f7fe f94b 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 805ef1a:	2052      	movs	r0, #82	@ 0x52
 805ef1c:	f7fe f92a 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 805ef20:	2300      	movs	r3, #0
 805ef22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 805ef26:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 805ef2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 805ef2e:	2300      	movs	r3, #0
 805ef30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 805ef34:	2300      	movs	r3, #0
 805ef36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 805ef3a:	2300      	movs	r3, #0
 805ef3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 805ef40:	230c      	movs	r3, #12
 805ef42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 805ef46:	2300      	movs	r3, #0
 805ef48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 805ef4c:	2300      	movs	r3, #0
 805ef4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART7, &UART_InitStruct);
 805ef52:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805ef56:	4619      	mov	r1, r3
 805ef58:	4816      	ldr	r0, [pc, #88]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef5a:	f00a f885 	bl	8069068 <LL_USART_Init>
  LL_USART_DisableFIFO(UART7);
 805ef5e:	4815      	ldr	r0, [pc, #84]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef60:	f7fe faee 	bl	805d540 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 805ef64:	2100      	movs	r1, #0
 805ef66:	4813      	ldr	r0, [pc, #76]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef68:	f7fe fafa 	bl	805d560 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 805ef6c:	2100      	movs	r1, #0
 805ef6e:	4811      	ldr	r0, [pc, #68]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef70:	f7fe fb1d 	bl	805d5ae <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART7);
 805ef74:	480f      	ldr	r0, [pc, #60]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef76:	f7fe fb41 	bl	805d5fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART7 */

  /* USER CODE END WKUPType UART7 */

  LL_USART_Enable(UART7);
 805ef7a:	480e      	ldr	r0, [pc, #56]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef7c:	f7fe fad0 	bl	805d520 <LL_USART_Enable>

  /* Polling UART7 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART7))) || (!(LL_USART_IsActiveFlag_REACK(UART7))))
 805ef80:	bf00      	nop
 805ef82:	480c      	ldr	r0, [pc, #48]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef84:	f7fe fb76 	bl	805d674 <LL_USART_IsActiveFlag_TEACK>
 805ef88:	4603      	mov	r3, r0
 805ef8a:	2b00      	cmp	r3, #0
 805ef8c:	d0f9      	beq.n	805ef82 <MX_UART7_Init+0x172>
 805ef8e:	4809      	ldr	r0, [pc, #36]	@ (805efb4 <MX_UART7_Init+0x1a4>)
 805ef90:	f7fe fb84 	bl	805d69c <LL_USART_IsActiveFlag_REACK>
 805ef94:	4603      	mov	r3, r0
 805ef96:	2b00      	cmp	r3, #0
 805ef98:	d0f3      	beq.n	805ef82 <MX_UART7_Init+0x172>
  {
  }
  /* USER CODE BEGIN UART7_Init 2 */
  peripherals[12].errorCode = Sys_OK;
 805ef9a:	4b07      	ldr	r3, [pc, #28]	@ (805efb8 <MX_UART7_Init+0x1a8>)
 805ef9c:	2200      	movs	r2, #0
 805ef9e:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END UART7_Init 2 */

}
 805efa2:	bf00      	nop
 805efa4:	37f8      	adds	r7, #248	@ 0xf8
 805efa6:	46bd      	mov	sp, r7
 805efa8:	bd80      	pop	{r7, pc}
 805efaa:	bf00      	nop
 805efac:	58021000 	.word	0x58021000
 805efb0:	40020400 	.word	0x40020400
 805efb4:	40007800 	.word	0x40007800
 805efb8:	24014900 	.word	0x24014900

0805efbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 805efbc:	b580      	push	{r7, lr}
 805efbe:	b0be      	sub	sp, #248	@ 0xf8
 805efc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 805efc2:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805efc6:	2220      	movs	r2, #32
 805efc8:	2100      	movs	r1, #0
 805efca:	4618      	mov	r0, r3
 805efcc:	f00a fc0a 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805efd0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805efd4:	2200      	movs	r2, #0
 805efd6:	601a      	str	r2, [r3, #0]
 805efd8:	605a      	str	r2, [r3, #4]
 805efda:	609a      	str	r2, [r3, #8]
 805efdc:	60da      	str	r2, [r3, #12]
 805efde:	611a      	str	r2, [r3, #16]
 805efe0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805efe2:	463b      	mov	r3, r7
 805efe4:	22c0      	movs	r2, #192	@ 0xc0
 805efe6:	2100      	movs	r1, #0
 805efe8:	4618      	mov	r0, r3
 805efea:	f00a fbfb 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 805efee:	f04f 0201 	mov.w	r2, #1
 805eff2:	f04f 0300 	mov.w	r3, #0
 805eff6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 805effa:	2300      	movs	r3, #0
 805effc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805effe:	463b      	mov	r3, r7
 805f000:	4618      	mov	r0, r3
 805f002:	f005 f8c3 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805f006:	4603      	mov	r3, r0
 805f008:	2b00      	cmp	r3, #0
 805f00a:	d001      	beq.n	805f010 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 805f00c:	f000 fbb8 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 805f010:	2010      	movs	r0, #16
 805f012:	f7fe fbbb 	bl	805d78c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 805f016:	2001      	movs	r0, #1
 805f018:	f7fe fb80 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 805f01c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 805f020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805f024:	2302      	movs	r3, #2
 805f026:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f02a:	2300      	movs	r3, #0
 805f02c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f030:	2300      	movs	r3, #0
 805f032:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f036:	2300      	movs	r3, #0
 805f038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 805f03c:	2307      	movs	r3, #7
 805f03e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 805f042:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805f046:	4619      	mov	r1, r3
 805f048:	4842      	ldr	r0, [pc, #264]	@ (805f154 <MX_USART1_UART_Init+0x198>)
 805f04a:	f008 f93f 	bl	80672cc <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART1_RX);
 805f04e:	2229      	movs	r2, #41	@ 0x29
 805f050:	2100      	movs	r1, #0
 805f052:	4841      	ldr	r0, [pc, #260]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f054:	f7fe fcdc 	bl	805da10 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 805f058:	2200      	movs	r2, #0
 805f05a:	2100      	movs	r1, #0
 805f05c:	483e      	ldr	r0, [pc, #248]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f05e:	f7fe fbcd 	bl	805d7fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 805f062:	2200      	movs	r2, #0
 805f064:	2100      	movs	r1, #0
 805f066:	483c      	ldr	r0, [pc, #240]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f068:	f7fe fcac 	bl	805d9c4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 805f06c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 805f070:	2100      	movs	r1, #0
 805f072:	4839      	ldr	r0, [pc, #228]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f074:	f7fe fbe8 	bl	805d848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 805f078:	2200      	movs	r2, #0
 805f07a:	2100      	movs	r1, #0
 805f07c:	4836      	ldr	r0, [pc, #216]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f07e:	f7fe fc09 	bl	805d894 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 805f082:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 805f086:	2100      	movs	r1, #0
 805f088:	4833      	ldr	r0, [pc, #204]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f08a:	f7fe fc29 	bl	805d8e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 805f08e:	2200      	movs	r2, #0
 805f090:	2100      	movs	r1, #0
 805f092:	4831      	ldr	r0, [pc, #196]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f094:	f7fe fc4a 	bl	805d92c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 805f098:	2200      	movs	r2, #0
 805f09a:	2100      	movs	r1, #0
 805f09c:	482e      	ldr	r0, [pc, #184]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f09e:	f7fe fc6b 	bl	805d978 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 805f0a2:	2100      	movs	r1, #0
 805f0a4:	482c      	ldr	r0, [pc, #176]	@ (805f158 <MX_USART1_UART_Init+0x19c>)
 805f0a6:	f7fe fce3 	bl	805da70 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f0aa:	f7fe f855 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f0ae:	4603      	mov	r3, r0
 805f0b0:	2200      	movs	r2, #0
 805f0b2:	2107      	movs	r1, #7
 805f0b4:	4618      	mov	r0, r3
 805f0b6:	f7fe f8a5 	bl	805d204 <NVIC_EncodePriority>
 805f0ba:	4603      	mov	r3, r0
 805f0bc:	4619      	mov	r1, r3
 805f0be:	2025      	movs	r0, #37	@ 0x25
 805f0c0:	f7fe f876 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 805f0c4:	2025      	movs	r0, #37	@ 0x25
 805f0c6:	f7fe f855 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 805f0ca:	2300      	movs	r3, #0
 805f0cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 805f0d0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 805f0d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 805f0d8:	2300      	movs	r3, #0
 805f0da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 805f0de:	2300      	movs	r3, #0
 805f0e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 805f0e4:	2300      	movs	r3, #0
 805f0e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 805f0ea:	230c      	movs	r3, #12
 805f0ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 805f0f0:	2300      	movs	r3, #0
 805f0f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 805f0f6:	2300      	movs	r3, #0
 805f0f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART1, &USART_InitStruct);
 805f0fc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805f100:	4619      	mov	r1, r3
 805f102:	4816      	ldr	r0, [pc, #88]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f104:	f009 ffb0 	bl	8069068 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 805f108:	2100      	movs	r1, #0
 805f10a:	4814      	ldr	r0, [pc, #80]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f10c:	f7fe fa28 	bl	805d560 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 805f110:	2100      	movs	r1, #0
 805f112:	4812      	ldr	r0, [pc, #72]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f114:	f7fe fa4b 	bl	805d5ae <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 805f118:	4810      	ldr	r0, [pc, #64]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f11a:	f7fe fa11 	bl	805d540 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 805f11e:	480f      	ldr	r0, [pc, #60]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f120:	f7fe fa6c 	bl	805d5fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 805f124:	480d      	ldr	r0, [pc, #52]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f126:	f7fe f9fb 	bl	805d520 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 805f12a:	bf00      	nop
 805f12c:	480b      	ldr	r0, [pc, #44]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f12e:	f7fe faa1 	bl	805d674 <LL_USART_IsActiveFlag_TEACK>
 805f132:	4603      	mov	r3, r0
 805f134:	2b00      	cmp	r3, #0
 805f136:	d0f9      	beq.n	805f12c <MX_USART1_UART_Init+0x170>
 805f138:	4808      	ldr	r0, [pc, #32]	@ (805f15c <MX_USART1_UART_Init+0x1a0>)
 805f13a:	f7fe faaf 	bl	805d69c <LL_USART_IsActiveFlag_REACK>
 805f13e:	4603      	mov	r3, r0
 805f140:	2b00      	cmp	r3, #0
 805f142:	d0f3      	beq.n	805f12c <MX_USART1_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART1_Init 2 */
  peripherals[4].errorCode = Sys_OK;
 805f144:	4b06      	ldr	r3, [pc, #24]	@ (805f160 <MX_USART1_UART_Init+0x1a4>)
 805f146:	2200      	movs	r2, #0
 805f148:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  /* USER CODE END USART1_Init 2 */

}
 805f14c:	bf00      	nop
 805f14e:	37f8      	adds	r7, #248	@ 0xf8
 805f150:	46bd      	mov	sp, r7
 805f152:	bd80      	pop	{r7, pc}
 805f154:	58020000 	.word	0x58020000
 805f158:	40020000 	.word	0x40020000
 805f15c:	40011000 	.word	0x40011000
 805f160:	24014900 	.word	0x24014900

0805f164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 805f164:	b580      	push	{r7, lr}
 805f166:	b0be      	sub	sp, #248	@ 0xf8
 805f168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 805f16a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805f16e:	2220      	movs	r2, #32
 805f170:	2100      	movs	r1, #0
 805f172:	4618      	mov	r0, r3
 805f174:	f00a fb36 	bl	80697e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805f178:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805f17c:	2200      	movs	r2, #0
 805f17e:	601a      	str	r2, [r3, #0]
 805f180:	605a      	str	r2, [r3, #4]
 805f182:	609a      	str	r2, [r3, #8]
 805f184:	60da      	str	r2, [r3, #12]
 805f186:	611a      	str	r2, [r3, #16]
 805f188:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805f18a:	463b      	mov	r3, r7
 805f18c:	22c0      	movs	r2, #192	@ 0xc0
 805f18e:	2100      	movs	r1, #0
 805f190:	4618      	mov	r0, r3
 805f192:	f00a fb27 	bl	80697e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 805f196:	f04f 0202 	mov.w	r2, #2
 805f19a:	f04f 0300 	mov.w	r3, #0
 805f19e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 805f1a2:	2300      	movs	r3, #0
 805f1a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805f1a6:	463b      	mov	r3, r7
 805f1a8:	4618      	mov	r0, r3
 805f1aa:	f004 ffef 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805f1ae:	4603      	mov	r3, r0
 805f1b0:	2b00      	cmp	r3, #0
 805f1b2:	d001      	beq.n	805f1b8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 805f1b4:	f000 fae4 	bl	805f780 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 805f1b8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 805f1bc:	f7fe faca 	bl	805d754 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 805f1c0:	2001      	movs	r0, #1
 805f1c2:	f7fe faab 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 805f1c6:	230c      	movs	r3, #12
 805f1c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 805f1cc:	2302      	movs	r3, #2
 805f1ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f1d2:	2300      	movs	r3, #0
 805f1d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f1d8:	2300      	movs	r3, #0
 805f1da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f1de:	2300      	movs	r3, #0
 805f1e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 805f1e4:	2307      	movs	r3, #7
 805f1e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 805f1ea:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 805f1ee:	4619      	mov	r1, r3
 805f1f0:	4842      	ldr	r0, [pc, #264]	@ (805f2fc <MX_USART2_UART_Init+0x198>)
 805f1f2:	f008 f86b 	bl	80672cc <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_USART2_RX);
 805f1f6:	222b      	movs	r2, #43	@ 0x2b
 805f1f8:	2101      	movs	r1, #1
 805f1fa:	4841      	ldr	r0, [pc, #260]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f1fc:	f7fe fc08 	bl	805da10 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 805f200:	2200      	movs	r2, #0
 805f202:	2101      	movs	r1, #1
 805f204:	483e      	ldr	r0, [pc, #248]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f206:	f7fe faf9 	bl	805d7fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 805f20a:	2200      	movs	r2, #0
 805f20c:	2101      	movs	r1, #1
 805f20e:	483c      	ldr	r0, [pc, #240]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f210:	f7fe fbd8 	bl	805d9c4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 805f214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 805f218:	2101      	movs	r1, #1
 805f21a:	4839      	ldr	r0, [pc, #228]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f21c:	f7fe fb14 	bl	805d848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 805f220:	2200      	movs	r2, #0
 805f222:	2101      	movs	r1, #1
 805f224:	4836      	ldr	r0, [pc, #216]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f226:	f7fe fb35 	bl	805d894 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 805f22a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 805f22e:	2101      	movs	r1, #1
 805f230:	4833      	ldr	r0, [pc, #204]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f232:	f7fe fb55 	bl	805d8e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 805f236:	2200      	movs	r2, #0
 805f238:	2101      	movs	r1, #1
 805f23a:	4831      	ldr	r0, [pc, #196]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f23c:	f7fe fb76 	bl	805d92c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 805f240:	2200      	movs	r2, #0
 805f242:	2101      	movs	r1, #1
 805f244:	482e      	ldr	r0, [pc, #184]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f246:	f7fe fb97 	bl	805d978 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 805f24a:	2101      	movs	r1, #1
 805f24c:	482c      	ldr	r0, [pc, #176]	@ (805f300 <MX_USART2_UART_Init+0x19c>)
 805f24e:	f7fe fc0f 	bl	805da70 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f252:	f7fd ff81 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f256:	4603      	mov	r3, r0
 805f258:	2200      	movs	r2, #0
 805f25a:	2107      	movs	r1, #7
 805f25c:	4618      	mov	r0, r3
 805f25e:	f7fd ffd1 	bl	805d204 <NVIC_EncodePriority>
 805f262:	4603      	mov	r3, r0
 805f264:	4619      	mov	r1, r3
 805f266:	2026      	movs	r0, #38	@ 0x26
 805f268:	f7fd ffa2 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 805f26c:	2026      	movs	r0, #38	@ 0x26
 805f26e:	f7fd ff81 	bl	805d174 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 805f272:	2300      	movs	r3, #0
 805f274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 805f278:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 805f27c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 805f280:	2300      	movs	r3, #0
 805f282:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 805f286:	2300      	movs	r3, #0
 805f288:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 805f28c:	2300      	movs	r3, #0
 805f28e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 805f292:	230c      	movs	r3, #12
 805f294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 805f298:	2300      	movs	r3, #0
 805f29a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 805f29e:	2300      	movs	r3, #0
 805f2a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART2, &USART_InitStruct);
 805f2a4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 805f2a8:	4619      	mov	r1, r3
 805f2aa:	4816      	ldr	r0, [pc, #88]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2ac:	f009 fedc 	bl	8069068 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 805f2b0:	2100      	movs	r1, #0
 805f2b2:	4814      	ldr	r0, [pc, #80]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2b4:	f7fe f954 	bl	805d560 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 805f2b8:	2100      	movs	r1, #0
 805f2ba:	4812      	ldr	r0, [pc, #72]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2bc:	f7fe f977 	bl	805d5ae <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 805f2c0:	4810      	ldr	r0, [pc, #64]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2c2:	f7fe f93d 	bl	805d540 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 805f2c6:	480f      	ldr	r0, [pc, #60]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2c8:	f7fe f998 	bl	805d5fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 805f2cc:	480d      	ldr	r0, [pc, #52]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2ce:	f7fe f927 	bl	805d520 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 805f2d2:	bf00      	nop
 805f2d4:	480b      	ldr	r0, [pc, #44]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2d6:	f7fe f9cd 	bl	805d674 <LL_USART_IsActiveFlag_TEACK>
 805f2da:	4603      	mov	r3, r0
 805f2dc:	2b00      	cmp	r3, #0
 805f2de:	d0f9      	beq.n	805f2d4 <MX_USART2_UART_Init+0x170>
 805f2e0:	4808      	ldr	r0, [pc, #32]	@ (805f304 <MX_USART2_UART_Init+0x1a0>)
 805f2e2:	f7fe f9db 	bl	805d69c <LL_USART_IsActiveFlag_REACK>
 805f2e6:	4603      	mov	r3, r0
 805f2e8:	2b00      	cmp	r3, #0
 805f2ea:	d0f3      	beq.n	805f2d4 <MX_USART2_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART2_Init 2 */
  peripherals[5].errorCode = Sys_OK;
 805f2ec:	4b06      	ldr	r3, [pc, #24]	@ (805f308 <MX_USART2_UART_Init+0x1a4>)
 805f2ee:	2200      	movs	r2, #0
 805f2f0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
  /* USER CODE END USART2_Init 2 */

}
 805f2f4:	bf00      	nop
 805f2f6:	37f8      	adds	r7, #248	@ 0xf8
 805f2f8:	46bd      	mov	sp, r7
 805f2fa:	bd80      	pop	{r7, pc}
 805f2fc:	58020000 	.word	0x58020000
 805f300:	40020000 	.word	0x40020000
 805f304:	40004400 	.word	0x40004400
 805f308:	24014900 	.word	0x24014900

0805f30c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 805f30c:	b580      	push	{r7, lr}
 805f30e:	b082      	sub	sp, #8
 805f310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 805f312:	4b1b      	ldr	r3, [pc, #108]	@ (805f380 <MX_BDMA_Init+0x74>)
 805f314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f318:	4a19      	ldr	r2, [pc, #100]	@ (805f380 <MX_BDMA_Init+0x74>)
 805f31a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 805f31e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 805f322:	4b17      	ldr	r3, [pc, #92]	@ (805f380 <MX_BDMA_Init+0x74>)
 805f324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 805f32c:	607b      	str	r3, [r7, #4]
 805f32e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f330:	f7fd ff12 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f334:	4603      	mov	r3, r0
 805f336:	2200      	movs	r2, #0
 805f338:	2107      	movs	r1, #7
 805f33a:	4618      	mov	r0, r3
 805f33c:	f7fd ff62 	bl	805d204 <NVIC_EncodePriority>
 805f340:	4603      	mov	r3, r0
 805f342:	4619      	mov	r1, r3
 805f344:	2081      	movs	r0, #129	@ 0x81
 805f346:	f7fd ff33 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 805f34a:	2081      	movs	r0, #129	@ 0x81
 805f34c:	f7fd ff12 	bl	805d174 <__NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 805f350:	f7fd ff02 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f354:	4603      	mov	r3, r0
 805f356:	2200      	movs	r2, #0
 805f358:	2100      	movs	r1, #0
 805f35a:	4618      	mov	r0, r3
 805f35c:	f7fd ff52 	bl	805d204 <NVIC_EncodePriority>
 805f360:	4603      	mov	r3, r0
 805f362:	4619      	mov	r1, r3
 805f364:	2082      	movs	r0, #130	@ 0x82
 805f366:	f7fd ff23 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 805f36a:	2082      	movs	r0, #130	@ 0x82
 805f36c:	f7fd ff02 	bl	805d174 <__NVIC_EnableIRQ>

  peripherals[3].errorCode = Sys_OK;
 805f370:	4b04      	ldr	r3, [pc, #16]	@ (805f384 <MX_BDMA_Init+0x78>)
 805f372:	2200      	movs	r2, #0
 805f374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
}
 805f378:	bf00      	nop
 805f37a:	3708      	adds	r7, #8
 805f37c:	46bd      	mov	sp, r7
 805f37e:	bd80      	pop	{r7, pc}
 805f380:	58024400 	.word	0x58024400
 805f384:	24014900 	.word	0x24014900

0805f388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 805f388:	b580      	push	{r7, lr}
 805f38a:	b082      	sub	sp, #8
 805f38c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 805f38e:	4b33      	ldr	r3, [pc, #204]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 805f394:	4a31      	ldr	r2, [pc, #196]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f396:	f043 0302 	orr.w	r3, r3, #2
 805f39a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 805f39e:	4b2f      	ldr	r3, [pc, #188]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f3a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 805f3a4:	f003 0302 	and.w	r3, r3, #2
 805f3a8:	607b      	str	r3, [r7, #4]
 805f3aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 805f3ac:	4b2b      	ldr	r3, [pc, #172]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f3ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 805f3b2:	4a2a      	ldr	r2, [pc, #168]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f3b4:	f043 0301 	orr.w	r3, r3, #1
 805f3b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 805f3bc:	4b27      	ldr	r3, [pc, #156]	@ (805f45c <MX_DMA_Init+0xd4>)
 805f3be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 805f3c2:	f003 0301 	and.w	r3, r3, #1
 805f3c6:	603b      	str	r3, [r7, #0]
 805f3c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f3ca:	f7fd fec5 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f3ce:	4603      	mov	r3, r0
 805f3d0:	2200      	movs	r2, #0
 805f3d2:	2107      	movs	r1, #7
 805f3d4:	4618      	mov	r0, r3
 805f3d6:	f7fd ff15 	bl	805d204 <NVIC_EncodePriority>
 805f3da:	4603      	mov	r3, r0
 805f3dc:	4619      	mov	r1, r3
 805f3de:	200b      	movs	r0, #11
 805f3e0:	f7fd fee6 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 805f3e4:	200b      	movs	r0, #11
 805f3e6:	f7fd fec5 	bl	805d174 <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f3ea:	f7fd feb5 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f3ee:	4603      	mov	r3, r0
 805f3f0:	2200      	movs	r2, #0
 805f3f2:	2107      	movs	r1, #7
 805f3f4:	4618      	mov	r0, r3
 805f3f6:	f7fd ff05 	bl	805d204 <NVIC_EncodePriority>
 805f3fa:	4603      	mov	r3, r0
 805f3fc:	4619      	mov	r1, r3
 805f3fe:	200c      	movs	r0, #12
 805f400:	f7fd fed6 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 805f404:	200c      	movs	r0, #12
 805f406:	f7fd feb5 	bl	805d174 <__NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f40a:	f7fd fea5 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f40e:	4603      	mov	r3, r0
 805f410:	2200      	movs	r2, #0
 805f412:	2107      	movs	r1, #7
 805f414:	4618      	mov	r0, r3
 805f416:	f7fd fef5 	bl	805d204 <NVIC_EncodePriority>
 805f41a:	4603      	mov	r3, r0
 805f41c:	4619      	mov	r1, r3
 805f41e:	202f      	movs	r0, #47	@ 0x2f
 805f420:	f7fd fec6 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 805f424:	202f      	movs	r0, #47	@ 0x2f
 805f426:	f7fd fea5 	bl	805d174 <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 805f42a:	f7fd fe95 	bl	805d158 <__NVIC_GetPriorityGrouping>
 805f42e:	4603      	mov	r3, r0
 805f430:	2200      	movs	r2, #0
 805f432:	2107      	movs	r1, #7
 805f434:	4618      	mov	r0, r3
 805f436:	f7fd fee5 	bl	805d204 <NVIC_EncodePriority>
 805f43a:	4603      	mov	r3, r0
 805f43c:	4619      	mov	r1, r3
 805f43e:	2039      	movs	r0, #57	@ 0x39
 805f440:	f7fd feb6 	bl	805d1b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 805f444:	2039      	movs	r0, #57	@ 0x39
 805f446:	f7fd fe95 	bl	805d174 <__NVIC_EnableIRQ>

  peripherals[2].errorCode = Sys_OK;
 805f44a:	4b05      	ldr	r3, [pc, #20]	@ (805f460 <MX_DMA_Init+0xd8>)
 805f44c:	2200      	movs	r2, #0
 805f44e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 805f452:	bf00      	nop
 805f454:	3708      	adds	r7, #8
 805f456:	46bd      	mov	sp, r7
 805f458:	bd80      	pop	{r7, pc}
 805f45a:	bf00      	nop
 805f45c:	58024400 	.word	0x58024400
 805f460:	24014900 	.word	0x24014900

0805f464 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 805f464:	b580      	push	{r7, lr}
 805f466:	b082      	sub	sp, #8
 805f468:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 805f46a:	4b2e      	ldr	r3, [pc, #184]	@ (805f524 <MX_MDMA_Init+0xc0>)
 805f46c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805f470:	4a2c      	ldr	r2, [pc, #176]	@ (805f524 <MX_MDMA_Init+0xc0>)
 805f472:	f043 0301 	orr.w	r3, r3, #1
 805f476:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 805f47a:	4b2a      	ldr	r3, [pc, #168]	@ (805f524 <MX_MDMA_Init+0xc0>)
 805f47c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805f480:	f003 0301 	and.w	r3, r3, #1
 805f484:	607b      	str	r3, [r7, #4]
 805f486:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 805f488:	4b27      	ldr	r3, [pc, #156]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f48a:	4a28      	ldr	r2, [pc, #160]	@ (805f52c <MX_MDMA_Init+0xc8>)
 805f48c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 805f48e:	4b26      	ldr	r3, [pc, #152]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f490:	221d      	movs	r2, #29
 805f492:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 805f494:	4b24      	ldr	r3, [pc, #144]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f496:	2200      	movs	r2, #0
 805f498:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 805f49a:	4b23      	ldr	r3, [pc, #140]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f49c:	2200      	movs	r2, #0
 805f49e:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 805f4a0:	4b21      	ldr	r3, [pc, #132]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4a2:	2200      	movs	r2, #0
 805f4a4:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 805f4a6:	4b20      	ldr	r3, [pc, #128]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4a8:	2202      	movs	r2, #2
 805f4aa:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 805f4ac:	4b1e      	ldr	r3, [pc, #120]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4ae:	2208      	movs	r2, #8
 805f4b0:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 805f4b2:	4b1d      	ldr	r3, [pc, #116]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4b4:	2200      	movs	r2, #0
 805f4b6:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 805f4b8:	4b1b      	ldr	r3, [pc, #108]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4ba:	2200      	movs	r2, #0
 805f4bc:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 805f4be:	4b1a      	ldr	r3, [pc, #104]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 805f4c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 805f4c6:	4b18      	ldr	r3, [pc, #96]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4c8:	2201      	movs	r2, #1
 805f4ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 805f4cc:	4b16      	ldr	r3, [pc, #88]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4ce:	2200      	movs	r2, #0
 805f4d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 805f4d2:	4b15      	ldr	r3, [pc, #84]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4d4:	2200      	movs	r2, #0
 805f4d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 805f4d8:	4b13      	ldr	r3, [pc, #76]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4da:	2200      	movs	r2, #0
 805f4dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 805f4de:	4b12      	ldr	r3, [pc, #72]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4e0:	2200      	movs	r2, #0
 805f4e2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_end_data_0) != HAL_OK)
 805f4e4:	4810      	ldr	r0, [pc, #64]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4e6:	f001 ff97 	bl	8061418 <HAL_MDMA_Init>
 805f4ea:	4603      	mov	r3, r0
 805f4ec:	2b00      	cmp	r3, #0
 805f4ee:	d113      	bne.n	805f518 <MX_MDMA_Init+0xb4>
  {
    return;
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 805f4f0:	2200      	movs	r2, #0
 805f4f2:	2100      	movs	r1, #0
 805f4f4:	480c      	ldr	r0, [pc, #48]	@ (805f528 <MX_MDMA_Init+0xc4>)
 805f4f6:	f001 ffdb 	bl	80614b0 <HAL_MDMA_ConfigPostRequestMask>
 805f4fa:	4603      	mov	r3, r0
 805f4fc:	2b00      	cmp	r3, #0
 805f4fe:	d10d      	bne.n	805f51c <MX_MDMA_Init+0xb8>
	return;
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 7, 0);
 805f500:	2200      	movs	r2, #0
 805f502:	2107      	movs	r1, #7
 805f504:	207a      	movs	r0, #122	@ 0x7a
 805f506:	f001 f8d9 	bl	80606bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 805f50a:	207a      	movs	r0, #122	@ 0x7a
 805f50c:	f001 f8f0 	bl	80606f0 <HAL_NVIC_EnableIRQ>
  peripherals[1].errorCode = Sys_OK;
 805f510:	4b07      	ldr	r3, [pc, #28]	@ (805f530 <MX_MDMA_Init+0xcc>)
 805f512:	2200      	movs	r2, #0
 805f514:	779a      	strb	r2, [r3, #30]
 805f516:	e002      	b.n	805f51e <MX_MDMA_Init+0xba>
    return;
 805f518:	bf00      	nop
 805f51a:	e000      	b.n	805f51e <MX_MDMA_Init+0xba>
	return;
 805f51c:	bf00      	nop
}
 805f51e:	3708      	adds	r7, #8
 805f520:	46bd      	mov	sp, r7
 805f522:	bd80      	pop	{r7, pc}
 805f524:	58024400 	.word	0x58024400
 805f528:	2406e8ac 	.word	0x2406e8ac
 805f52c:	52000040 	.word	0x52000040
 805f530:	24014900 	.word	0x24014900

0805f534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 805f534:	b580      	push	{r7, lr}
 805f536:	b086      	sub	sp, #24
 805f538:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 805f53a:	463b      	mov	r3, r7
 805f53c:	2200      	movs	r2, #0
 805f53e:	601a      	str	r2, [r3, #0]
 805f540:	605a      	str	r2, [r3, #4]
 805f542:	609a      	str	r2, [r3, #8]
 805f544:	60da      	str	r2, [r3, #12]
 805f546:	611a      	str	r2, [r3, #16]
 805f548:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 805f54a:	2010      	movs	r0, #16
 805f54c:	f7fe f8e6 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 805f550:	2004      	movs	r0, #4
 805f552:	f7fe f8e3 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 805f556:	2020      	movs	r0, #32
 805f558:	f7fe f8e0 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 805f55c:	2001      	movs	r0, #1
 805f55e:	f7fe f8dd 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 805f562:	2002      	movs	r0, #2
 805f564:	f7fe f8da 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 805f568:	2008      	movs	r0, #8
 805f56a:	f7fe f8d7 	bl	805d71c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 805f56e:	2040      	movs	r0, #64	@ 0x40
 805f570:	f7fe f8d4 	bl	805d71c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|OBCOUT_EXPIN_READDONE_Pin|MCU_SDMMC_SEL_Pin);
 805f574:	f24a 0118 	movw	r1, #40984	@ 0xa018
 805f578:	485a      	ldr	r0, [pc, #360]	@ (805f6e4 <MX_GPIO_Init+0x1b0>)
 805f57a:	f7fe f8b2 	bl	805d6e2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 805f57e:	2110      	movs	r1, #16
 805f580:	4859      	ldr	r0, [pc, #356]	@ (805f6e8 <MX_GPIO_Init+0x1b4>)
 805f582:	f7fe f8ae 	bl	805d6e2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOF, STMOUT_CM4IN_SCL_Pin|STMOUT_CM4IN_SDA_Pin);
 805f586:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 805f58a:	4858      	ldr	r0, [pc, #352]	@ (805f6ec <MX_GPIO_Init+0x1b8>)
 805f58c:	f7fe f8a9 	bl	805d6e2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_RESET_CM4_GPIO_Port, MCU_IO_RESET_CM4_Pin);
 805f590:	2180      	movs	r1, #128	@ 0x80
 805f592:	4857      	ldr	r0, [pc, #348]	@ (805f6f0 <MX_GPIO_Init+0x1bc>)
 805f594:	f7fe f8a5 	bl	805d6e2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_HUB_RESET_GPIO_Port, MCU_IO_HUB_RESET_Pin);
 805f598:	2108      	movs	r1, #8
 805f59a:	4856      	ldr	r0, [pc, #344]	@ (805f6f4 <MX_GPIO_Init+0x1c0>)
 805f59c:	f7fe f8a1 	bl	805d6e2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Bootloader_DETECT_DOWN_GPIO_Port, Bootloader_DETECT_DOWN_Pin);
 805f5a0:	2104      	movs	r1, #4
 805f5a2:	4855      	ldr	r0, [pc, #340]	@ (805f6f8 <MX_GPIO_Init+0x1c4>)
 805f5a4:	f7fe f8ab 	bl	805d6fe <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_DETECT_SD_Pin|MCU_WD_DONE_Pin);
 805f5a8:	f44f 7164 	mov.w	r1, #912	@ 0x390
 805f5ac:	4851      	ldr	r0, [pc, #324]	@ (805f6f4 <MX_GPIO_Init+0x1c0>)
 805f5ae:	f7fe f8a6 	bl	805d6fe <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, Bootloader_DETECT_UPG6_Pin|MCU_IO_GLOBAL_EN_CM4_Pin);
 805f5b2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 805f5b6:	484e      	ldr	r0, [pc, #312]	@ (805f6f0 <MX_GPIO_Init+0x1bc>)
 805f5b8:	f7fe f8a1 	bl	805d6fe <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|OBCOUT_EXPIN_READDONE_Pin|MCU_SDMMC_SEL_Pin;
 805f5bc:	f24a 0318 	movw	r3, #40984	@ 0xa018
 805f5c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f5c2:	2301      	movs	r3, #1
 805f5c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f5c6:	2300      	movs	r3, #0
 805f5c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f5ca:	2300      	movs	r3, #0
 805f5cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f5ce:	2300      	movs	r3, #0
 805f5d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 805f5d2:	463b      	mov	r3, r7
 805f5d4:	4619      	mov	r1, r3
 805f5d6:	4843      	ldr	r0, [pc, #268]	@ (805f6e4 <MX_GPIO_Init+0x1b0>)
 805f5d8:	f007 fe78 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_WD_WAKE_Pin|MCU_IO_RTC_CLKOUT_Pin|MCU_IO_RTC_INT_Pin;
 805f5dc:	f242 0330 	movw	r3, #8240	@ 0x2030
 805f5e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 805f5e2:	2300      	movs	r3, #0
 805f5e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f5e6:	2300      	movs	r3, #0
 805f5e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 805f5ea:	463b      	mov	r3, r7
 805f5ec:	4619      	mov	r1, r3
 805f5ee:	4843      	ldr	r0, [pc, #268]	@ (805f6fc <MX_GPIO_Init+0x1c8>)
 805f5f0:	f007 fe6c 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI6_EXP_CS_Pin;
 805f5f4:	2310      	movs	r3, #16
 805f5f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f5f8:	2301      	movs	r3, #1
 805f5fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f5fc:	2300      	movs	r3, #0
 805f5fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f600:	2300      	movs	r3, #0
 805f602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f604:	2300      	movs	r3, #0
 805f606:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI6_EXP_CS_GPIO_Port, &GPIO_InitStruct);
 805f608:	463b      	mov	r3, r7
 805f60a:	4619      	mov	r1, r3
 805f60c:	4836      	ldr	r0, [pc, #216]	@ (805f6e8 <MX_GPIO_Init+0x1b4>)
 805f60e:	f007 fe5d 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWN_Pin;
 805f612:	2304      	movs	r3, #4
 805f614:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f616:	2301      	movs	r3, #1
 805f618:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f61a:	2300      	movs	r3, #0
 805f61c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f61e:	2300      	movs	r3, #0
 805f620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f622:	2300      	movs	r3, #0
 805f624:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Bootloader_DETECT_DOWN_GPIO_Port, &GPIO_InitStruct);
 805f626:	463b      	mov	r3, r7
 805f628:	4619      	mov	r1, r3
 805f62a:	4833      	ldr	r0, [pc, #204]	@ (805f6f8 <MX_GPIO_Init+0x1c4>)
 805f62c:	f007 fe4e 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = STMOUT_CM4IN_SCL_Pin|STMOUT_CM4IN_SDA_Pin;
 805f630:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 805f634:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f636:	2301      	movs	r3, #1
 805f638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f63a:	2300      	movs	r3, #0
 805f63c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f63e:	2300      	movs	r3, #0
 805f640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f642:	2300      	movs	r3, #0
 805f644:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 805f646:	463b      	mov	r3, r7
 805f648:	4619      	mov	r1, r3
 805f64a:	4828      	ldr	r0, [pc, #160]	@ (805f6ec <MX_GPIO_Init+0x1b8>)
 805f64c:	f007 fe3e 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CM4OUT_STMIN_D1_Pin|CM4OUT_STMIN_D0_Pin|EXPOUT_OBCIN_DATAREADY_Pin;
 805f650:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 805f654:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 805f656:	2300      	movs	r3, #0
 805f658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f65a:	2300      	movs	r3, #0
 805f65c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 805f65e:	463b      	mov	r3, r7
 805f660:	4619      	mov	r1, r3
 805f662:	4820      	ldr	r0, [pc, #128]	@ (805f6e4 <MX_GPIO_Init+0x1b0>)
 805f664:	f007 fe32 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_IO_HUB_RESET_Pin|MCU_DETECT_SD_Pin
 805f668:	f44f 7366 	mov.w	r3, #920	@ 0x398
 805f66c:	603b      	str	r3, [r7, #0]
                          |MCU_WD_DONE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f66e:	2301      	movs	r3, #1
 805f670:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f672:	2300      	movs	r3, #0
 805f674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f676:	2300      	movs	r3, #0
 805f678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f67a:	2300      	movs	r3, #0
 805f67c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 805f67e:	463b      	mov	r3, r7
 805f680:	4619      	mov	r1, r3
 805f682:	481c      	ldr	r0, [pc, #112]	@ (805f6f4 <MX_GPIO_Init+0x1c0>)
 805f684:	f007 fe22 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWND11_Pin|Bootloader_DETECT_UP_Pin;
 805f688:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 805f68c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 805f68e:	2300      	movs	r3, #0
 805f690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f692:	2300      	movs	r3, #0
 805f694:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 805f696:	463b      	mov	r3, r7
 805f698:	4619      	mov	r1, r3
 805f69a:	4816      	ldr	r0, [pc, #88]	@ (805f6f4 <MX_GPIO_Init+0x1c0>)
 805f69c:	f007 fe16 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_UPG6_Pin|MCU_IO_RESET_CM4_Pin|MCU_IO_GLOBAL_EN_CM4_Pin;
 805f6a0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 805f6a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 805f6a6:	2301      	movs	r3, #1
 805f6a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 805f6aa:	2300      	movs	r3, #0
 805f6ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 805f6ae:	2300      	movs	r3, #0
 805f6b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f6b2:	2300      	movs	r3, #0
 805f6b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 805f6b6:	463b      	mov	r3, r7
 805f6b8:	4619      	mov	r1, r3
 805f6ba:	480d      	ldr	r0, [pc, #52]	@ (805f6f0 <MX_GPIO_Init+0x1bc>)
 805f6bc:	f007 fe06 	bl	80672cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXPOUT_OBCIN_LOGTRIGGER_Pin|EXPOUT_OBCIN_MINBUSY_Pin;
 805f6c0:	23c0      	movs	r3, #192	@ 0xc0
 805f6c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 805f6c4:	2300      	movs	r3, #0
 805f6c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 805f6c8:	2300      	movs	r3, #0
 805f6ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 805f6cc:	463b      	mov	r3, r7
 805f6ce:	4619      	mov	r1, r3
 805f6d0:	4809      	ldr	r0, [pc, #36]	@ (805f6f8 <MX_GPIO_Init+0x1c4>)
 805f6d2:	f007 fdfb 	bl	80672cc <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  peripherals[0].errorCode = Sys_OK;
 805f6d6:	4b0a      	ldr	r3, [pc, #40]	@ (805f700 <MX_GPIO_Init+0x1cc>)
 805f6d8:	2200      	movs	r2, #0
 805f6da:	729a      	strb	r2, [r3, #10]
  /* USER CODE END MX_GPIO_Init_2 */
}
 805f6dc:	bf00      	nop
 805f6de:	3718      	adds	r7, #24
 805f6e0:	46bd      	mov	sp, r7
 805f6e2:	bd80      	pop	{r7, pc}
 805f6e4:	58021000 	.word	0x58021000
 805f6e8:	58020000 	.word	0x58020000
 805f6ec:	58021400 	.word	0x58021400
 805f6f0:	58021800 	.word	0x58021800
 805f6f4:	58020c00 	.word	0x58020c00
 805f6f8:	58020400 	.word	0x58020400
 805f6fc:	58020800 	.word	0x58020800
 805f700:	24014900 	.word	0x24014900

0805f704 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 805f704:	b580      	push	{r7, lr}
 805f706:	b084      	sub	sp, #16
 805f708:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 805f70a:	463b      	mov	r3, r7
 805f70c:	2200      	movs	r2, #0
 805f70e:	601a      	str	r2, [r3, #0]
 805f710:	605a      	str	r2, [r3, #4]
 805f712:	609a      	str	r2, [r3, #8]
 805f714:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 805f716:	f001 f807 	bl	8060728 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 805f71a:	2301      	movs	r3, #1
 805f71c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 805f71e:	2300      	movs	r3, #0
 805f720:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 805f722:	2300      	movs	r3, #0
 805f724:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 805f726:	231f      	movs	r3, #31
 805f728:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 805f72a:	2387      	movs	r3, #135	@ 0x87
 805f72c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 805f72e:	2300      	movs	r3, #0
 805f730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 805f732:	2300      	movs	r3, #0
 805f734:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 805f736:	2301      	movs	r3, #1
 805f738:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 805f73a:	2301      	movs	r3, #1
 805f73c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 805f73e:	2300      	movs	r3, #0
 805f740:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 805f742:	2300      	movs	r3, #0
 805f744:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 805f746:	463b      	mov	r3, r7
 805f748:	4618      	mov	r0, r3
 805f74a:	f001 f825 	bl	8060798 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 805f74e:	2004      	movs	r0, #4
 805f750:	f001 f802 	bl	8060758 <HAL_MPU_Enable>

}
 805f754:	bf00      	nop
 805f756:	3710      	adds	r7, #16
 805f758:	46bd      	mov	sp, r7
 805f75a:	bd80      	pop	{r7, pc}

0805f75c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 805f75c:	b580      	push	{r7, lr}
 805f75e:	b082      	sub	sp, #8
 805f760:	af00      	add	r7, sp, #0
 805f762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 805f764:	687b      	ldr	r3, [r7, #4]
 805f766:	681b      	ldr	r3, [r3, #0]
 805f768:	4a04      	ldr	r2, [pc, #16]	@ (805f77c <HAL_TIM_PeriodElapsedCallback+0x20>)
 805f76a:	4293      	cmp	r3, r2
 805f76c:	d101      	bne.n	805f772 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 805f76e:	f000 fe79 	bl	8060464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 805f772:	bf00      	nop
 805f774:	3708      	adds	r7, #8
 805f776:	46bd      	mov	sp, r7
 805f778:	bd80      	pop	{r7, pc}
 805f77a:	bf00      	nop
 805f77c:	40001400 	.word	0x40001400

0805f780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 805f780:	b580      	push	{r7, lr}
 805f782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 805f784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805f788:	4807      	ldr	r0, [pc, #28]	@ (805f7a8 <Error_Handler+0x28>)
 805f78a:	f7fd ffaa 	bl	805d6e2 <LL_GPIO_SetOutputPin>
    HAL_Delay(50);
 805f78e:	2032      	movs	r0, #50	@ 0x32
 805f790:	f000 fe88 	bl	80604a4 <HAL_Delay>
    LL_GPIO_ResetOutputPin(LED0_Port, LED0);
 805f794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 805f798:	4803      	ldr	r0, [pc, #12]	@ (805f7a8 <Error_Handler+0x28>)
 805f79a:	f7fd ffb0 	bl	805d6fe <LL_GPIO_ResetOutputPin>
    HAL_Delay(50);
 805f79e:	2032      	movs	r0, #50	@ 0x32
 805f7a0:	f000 fe80 	bl	80604a4 <HAL_Delay>
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 805f7a4:	bf00      	nop
 805f7a6:	e7ed      	b.n	805f784 <Error_Handler+0x4>
 805f7a8:	58020c00 	.word	0x58020c00

0805f7ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 805f7ac:	b480      	push	{r7}
 805f7ae:	b083      	sub	sp, #12
 805f7b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 805f7b2:	4b0a      	ldr	r3, [pc, #40]	@ (805f7dc <HAL_MspInit+0x30>)
 805f7b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 805f7b8:	4a08      	ldr	r2, [pc, #32]	@ (805f7dc <HAL_MspInit+0x30>)
 805f7ba:	f043 0302 	orr.w	r3, r3, #2
 805f7be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 805f7c2:	4b06      	ldr	r3, [pc, #24]	@ (805f7dc <HAL_MspInit+0x30>)
 805f7c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 805f7c8:	f003 0302 	and.w	r3, r3, #2
 805f7cc:	607b      	str	r3, [r7, #4]
 805f7ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 805f7d0:	bf00      	nop
 805f7d2:	370c      	adds	r7, #12
 805f7d4:	46bd      	mov	sp, r7
 805f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 805f7da:	4770      	bx	lr
 805f7dc:	58024400 	.word	0x58024400

0805f7e0 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 805f7e0:	b580      	push	{r7, lr}
 805f7e2:	b0bc      	sub	sp, #240	@ 0xf0
 805f7e4:	af00      	add	r7, sp, #0
 805f7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 805f7e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805f7ec:	2200      	movs	r2, #0
 805f7ee:	601a      	str	r2, [r3, #0]
 805f7f0:	605a      	str	r2, [r3, #4]
 805f7f2:	609a      	str	r2, [r3, #8]
 805f7f4:	60da      	str	r2, [r3, #12]
 805f7f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 805f7f8:	f107 0318 	add.w	r3, r7, #24
 805f7fc:	22c0      	movs	r2, #192	@ 0xc0
 805f7fe:	2100      	movs	r1, #0
 805f800:	4618      	mov	r0, r3
 805f802:	f009 ffef 	bl	80697e4 <memset>
  if(hmmc->Instance==SDMMC1)
 805f806:	687b      	ldr	r3, [r7, #4]
 805f808:	681b      	ldr	r3, [r3, #0]
 805f80a:	4a4f      	ldr	r2, [pc, #316]	@ (805f948 <HAL_MMC_MspInit+0x168>)
 805f80c:	4293      	cmp	r3, r2
 805f80e:	f040 8097 	bne.w	805f940 <HAL_MMC_MspInit+0x160>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 805f812:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 805f816:	f04f 0300 	mov.w	r3, #0
 805f81a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 805f81e:	2300      	movs	r3, #0
 805f820:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 805f822:	f107 0318 	add.w	r3, r7, #24
 805f826:	4618      	mov	r0, r3
 805f828:	f004 fcb0 	bl	806418c <HAL_RCCEx_PeriphCLKConfig>
 805f82c:	4603      	mov	r3, r0
 805f82e:	2b00      	cmp	r3, #0
 805f830:	d001      	beq.n	805f836 <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 805f832:	f7ff ffa5 	bl	805f780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 805f836:	4b45      	ldr	r3, [pc, #276]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f838:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805f83c:	4a43      	ldr	r2, [pc, #268]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f83e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 805f842:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 805f846:	4b41      	ldr	r3, [pc, #260]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f848:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805f84c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 805f850:	617b      	str	r3, [r7, #20]
 805f852:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 805f854:	4b3d      	ldr	r3, [pc, #244]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f85a:	4a3c      	ldr	r2, [pc, #240]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f85c:	f043 0304 	orr.w	r3, r3, #4
 805f860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 805f864:	4b39      	ldr	r3, [pc, #228]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f86a:	f003 0304 	and.w	r3, r3, #4
 805f86e:	613b      	str	r3, [r7, #16]
 805f870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 805f872:	4b36      	ldr	r3, [pc, #216]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f878:	4a34      	ldr	r2, [pc, #208]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f87a:	f043 0308 	orr.w	r3, r3, #8
 805f87e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 805f882:	4b32      	ldr	r3, [pc, #200]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f888:	f003 0308 	and.w	r3, r3, #8
 805f88c:	60fb      	str	r3, [r7, #12]
 805f88e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 805f890:	4b2e      	ldr	r3, [pc, #184]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f896:	4a2d      	ldr	r2, [pc, #180]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f898:	f043 0302 	orr.w	r3, r3, #2
 805f89c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 805f8a0:	4b2a      	ldr	r3, [pc, #168]	@ (805f94c <HAL_MMC_MspInit+0x16c>)
 805f8a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 805f8a6:	f003 0302 	and.w	r3, r3, #2
 805f8aa:	60bb      	str	r3, [r7, #8]
 805f8ac:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 805f8ae:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 805f8b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805f8b6:	2302      	movs	r3, #2
 805f8b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805f8bc:	2300      	movs	r3, #0
 805f8be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 805f8c2:	2303      	movs	r3, #3
 805f8c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 805f8c8:	230c      	movs	r3, #12
 805f8ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 805f8ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805f8d2:	4619      	mov	r1, r3
 805f8d4:	481e      	ldr	r0, [pc, #120]	@ (805f950 <HAL_MMC_MspInit+0x170>)
 805f8d6:	f001 faa1 	bl	8060e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 805f8da:	2304      	movs	r3, #4
 805f8dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805f8e0:	2302      	movs	r3, #2
 805f8e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805f8e6:	2300      	movs	r3, #0
 805f8e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 805f8ec:	2303      	movs	r3, #3
 805f8ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 805f8f2:	230c      	movs	r3, #12
 805f8f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 805f8f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805f8fc:	4619      	mov	r1, r3
 805f8fe:	4815      	ldr	r0, [pc, #84]	@ (805f954 <HAL_MMC_MspInit+0x174>)
 805f900:	f001 fa8c 	bl	8060e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 805f904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 805f908:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805f90c:	2302      	movs	r3, #2
 805f90e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805f912:	2300      	movs	r3, #0
 805f914:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 805f918:	2303      	movs	r3, #3
 805f91a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 805f91e:	230c      	movs	r3, #12
 805f920:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 805f924:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 805f928:	4619      	mov	r1, r3
 805f92a:	480b      	ldr	r0, [pc, #44]	@ (805f958 <HAL_MMC_MspInit+0x178>)
 805f92c:	f001 fa76 	bl	8060e1c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 805f930:	2200      	movs	r2, #0
 805f932:	2107      	movs	r1, #7
 805f934:	2031      	movs	r0, #49	@ 0x31
 805f936:	f000 fec1 	bl	80606bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 805f93a:	2031      	movs	r0, #49	@ 0x31
 805f93c:	f000 fed8 	bl	80606f0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 805f940:	bf00      	nop
 805f942:	37f0      	adds	r7, #240	@ 0xf0
 805f944:	46bd      	mov	sp, r7
 805f946:	bd80      	pop	{r7, pc}
 805f948:	52007000 	.word	0x52007000
 805f94c:	58024400 	.word	0x58024400
 805f950:	58020800 	.word	0x58020800
 805f954:	58020c00 	.word	0x58020c00
 805f958:	58020400 	.word	0x58020400

0805f95c <HAL_MMC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspDeInit(MMC_HandleTypeDef* hmmc)
{
 805f95c:	b580      	push	{r7, lr}
 805f95e:	b082      	sub	sp, #8
 805f960:	af00      	add	r7, sp, #0
 805f962:	6078      	str	r0, [r7, #4]
  if(hmmc->Instance==SDMMC1)
 805f964:	687b      	ldr	r3, [r7, #4]
 805f966:	681b      	ldr	r3, [r3, #0]
 805f968:	4a0f      	ldr	r2, [pc, #60]	@ (805f9a8 <HAL_MMC_MspDeInit+0x4c>)
 805f96a:	4293      	cmp	r3, r2
 805f96c:	d118      	bne.n	805f9a0 <HAL_MMC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

    /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 805f96e:	4b0f      	ldr	r3, [pc, #60]	@ (805f9ac <HAL_MMC_MspDeInit+0x50>)
 805f970:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 805f974:	4a0d      	ldr	r2, [pc, #52]	@ (805f9ac <HAL_MMC_MspDeInit+0x50>)
 805f976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 805f97a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 805f97e:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 805f982:	480b      	ldr	r0, [pc, #44]	@ (805f9b0 <HAL_MMC_MspDeInit+0x54>)
 805f984:	f001 fbfa 	bl	806117c <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 805f988:	2104      	movs	r1, #4
 805f98a:	480a      	ldr	r0, [pc, #40]	@ (805f9b4 <HAL_MMC_MspDeInit+0x58>)
 805f98c:	f001 fbf6 	bl	806117c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 805f990:	f44f 7140 	mov.w	r1, #768	@ 0x300
 805f994:	4808      	ldr	r0, [pc, #32]	@ (805f9b8 <HAL_MMC_MspDeInit+0x5c>)
 805f996:	f001 fbf1 	bl	806117c <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 805f99a:	2031      	movs	r0, #49	@ 0x31
 805f99c:	f000 feb6 	bl	806070c <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

    /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 805f9a0:	bf00      	nop
 805f9a2:	3708      	adds	r7, #8
 805f9a4:	46bd      	mov	sp, r7
 805f9a6:	bd80      	pop	{r7, pc}
 805f9a8:	52007000 	.word	0x52007000
 805f9ac:	58024400 	.word	0x58024400
 805f9b0:	58020800 	.word	0x58020800
 805f9b4:	58020c00 	.word	0x58020c00
 805f9b8:	58020400 	.word	0x58020400

0805f9bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 805f9bc:	b580      	push	{r7, lr}
 805f9be:	b090      	sub	sp, #64	@ 0x40
 805f9c0:	af00      	add	r7, sp, #0
 805f9c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 805f9c4:	687b      	ldr	r3, [r7, #4]
 805f9c6:	2b0f      	cmp	r3, #15
 805f9c8:	d827      	bhi.n	805fa1a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 805f9ca:	2200      	movs	r2, #0
 805f9cc:	6879      	ldr	r1, [r7, #4]
 805f9ce:	2037      	movs	r0, #55	@ 0x37
 805f9d0:	f000 fe74 	bl	80606bc <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 805f9d4:	2037      	movs	r0, #55	@ 0x37
 805f9d6:	f000 fe8b 	bl	80606f0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 805f9da:	4a29      	ldr	r2, [pc, #164]	@ (805fa80 <HAL_InitTick+0xc4>)
 805f9dc:	687b      	ldr	r3, [r7, #4]
 805f9de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 805f9e0:	4b28      	ldr	r3, [pc, #160]	@ (805fa84 <HAL_InitTick+0xc8>)
 805f9e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 805f9e6:	4a27      	ldr	r2, [pc, #156]	@ (805fa84 <HAL_InitTick+0xc8>)
 805f9e8:	f043 0320 	orr.w	r3, r3, #32
 805f9ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 805f9f0:	4b24      	ldr	r3, [pc, #144]	@ (805fa84 <HAL_InitTick+0xc8>)
 805f9f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 805f9f6:	f003 0320 	and.w	r3, r3, #32
 805f9fa:	60fb      	str	r3, [r7, #12]
 805f9fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 805f9fe:	f107 0210 	add.w	r2, r7, #16
 805fa02:	f107 0314 	add.w	r3, r7, #20
 805fa06:	4611      	mov	r1, r2
 805fa08:	4618      	mov	r0, r3
 805fa0a:	f004 fb7d 	bl	8064108 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 805fa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 805fa10:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 805fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 805fa14:	2b00      	cmp	r3, #0
 805fa16:	d106      	bne.n	805fa26 <HAL_InitTick+0x6a>
 805fa18:	e001      	b.n	805fa1e <HAL_InitTick+0x62>
    return HAL_ERROR;
 805fa1a:	2301      	movs	r3, #1
 805fa1c:	e02b      	b.n	805fa76 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 805fa1e:	f004 fb5d 	bl	80640dc <HAL_RCC_GetPCLK1Freq>
 805fa22:	63f8      	str	r0, [r7, #60]	@ 0x3c
 805fa24:	e004      	b.n	805fa30 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 805fa26:	f004 fb59 	bl	80640dc <HAL_RCC_GetPCLK1Freq>
 805fa2a:	4603      	mov	r3, r0
 805fa2c:	005b      	lsls	r3, r3, #1
 805fa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 805fa30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 805fa32:	4a15      	ldr	r2, [pc, #84]	@ (805fa88 <HAL_InitTick+0xcc>)
 805fa34:	fba2 2303 	umull	r2, r3, r2, r3
 805fa38:	0c9b      	lsrs	r3, r3, #18
 805fa3a:	3b01      	subs	r3, #1
 805fa3c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 805fa3e:	4b13      	ldr	r3, [pc, #76]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa40:	4a13      	ldr	r2, [pc, #76]	@ (805fa90 <HAL_InitTick+0xd4>)
 805fa42:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 805fa44:	4b11      	ldr	r3, [pc, #68]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 805fa4a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 805fa4c:	4a0f      	ldr	r2, [pc, #60]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 805fa50:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 805fa52:	4b0e      	ldr	r3, [pc, #56]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa54:	2200      	movs	r2, #0
 805fa56:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 805fa58:	4b0c      	ldr	r3, [pc, #48]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa5a:	2200      	movs	r2, #0
 805fa5c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 805fa5e:	480b      	ldr	r0, [pc, #44]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa60:	f007 f892 	bl	8066b88 <HAL_TIM_Base_Init>
 805fa64:	4603      	mov	r3, r0
 805fa66:	2b00      	cmp	r3, #0
 805fa68:	d104      	bne.n	805fa74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 805fa6a:	4808      	ldr	r0, [pc, #32]	@ (805fa8c <HAL_InitTick+0xd0>)
 805fa6c:	f007 f8ee 	bl	8066c4c <HAL_TIM_Base_Start_IT>
 805fa70:	4603      	mov	r3, r0
 805fa72:	e000      	b.n	805fa76 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 805fa74:	2301      	movs	r3, #1
}
 805fa76:	4618      	mov	r0, r3
 805fa78:	3740      	adds	r7, #64	@ 0x40
 805fa7a:	46bd      	mov	sp, r7
 805fa7c:	bd80      	pop	{r7, pc}
 805fa7e:	bf00      	nop
 805fa80:	24014a04 	.word	0x24014a04
 805fa84:	58024400 	.word	0x58024400
 805fa88:	431bde83 	.word	0x431bde83
 805fa8c:	2406e918 	.word	0x2406e918
 805fa90:	40001400 	.word	0x40001400

0805fa94 <LL_USART_IsActiveFlag_IDLE>:
{
 805fa94:	b480      	push	{r7}
 805fa96:	b083      	sub	sp, #12
 805fa98:	af00      	add	r7, sp, #0
 805fa9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 805fa9c:	687b      	ldr	r3, [r7, #4]
 805fa9e:	69db      	ldr	r3, [r3, #28]
 805faa0:	f003 0310 	and.w	r3, r3, #16
 805faa4:	2b10      	cmp	r3, #16
 805faa6:	d101      	bne.n	805faac <LL_USART_IsActiveFlag_IDLE+0x18>
 805faa8:	2301      	movs	r3, #1
 805faaa:	e000      	b.n	805faae <LL_USART_IsActiveFlag_IDLE+0x1a>
 805faac:	2300      	movs	r3, #0
}
 805faae:	4618      	mov	r0, r3
 805fab0:	370c      	adds	r7, #12
 805fab2:	46bd      	mov	sp, r7
 805fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fab8:	4770      	bx	lr

0805faba <LL_USART_ClearFlag_IDLE>:
{
 805faba:	b480      	push	{r7}
 805fabc:	b083      	sub	sp, #12
 805fabe:	af00      	add	r7, sp, #0
 805fac0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 805fac2:	687b      	ldr	r3, [r7, #4]
 805fac4:	2210      	movs	r2, #16
 805fac6:	621a      	str	r2, [r3, #32]
}
 805fac8:	bf00      	nop
 805faca:	370c      	adds	r7, #12
 805facc:	46bd      	mov	sp, r7
 805face:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fad2:	4770      	bx	lr

0805fad4 <LL_USART_IsEnabledIT_IDLE>:
{
 805fad4:	b480      	push	{r7}
 805fad6:	b083      	sub	sp, #12
 805fad8:	af00      	add	r7, sp, #0
 805fada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 805fadc:	687b      	ldr	r3, [r7, #4]
 805fade:	681b      	ldr	r3, [r3, #0]
 805fae0:	f003 0310 	and.w	r3, r3, #16
 805fae4:	2b10      	cmp	r3, #16
 805fae6:	d101      	bne.n	805faec <LL_USART_IsEnabledIT_IDLE+0x18>
 805fae8:	2301      	movs	r3, #1
 805faea:	e000      	b.n	805faee <LL_USART_IsEnabledIT_IDLE+0x1a>
 805faec:	2300      	movs	r3, #0
}
 805faee:	4618      	mov	r0, r3
 805faf0:	370c      	adds	r7, #12
 805faf2:	46bd      	mov	sp, r7
 805faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805faf8:	4770      	bx	lr
	...

0805fafc <LL_DMA_EnableStream>:
{
 805fafc:	b480      	push	{r7}
 805fafe:	b085      	sub	sp, #20
 805fb00:	af00      	add	r7, sp, #0
 805fb02:	6078      	str	r0, [r7, #4]
 805fb04:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805fb06:	687b      	ldr	r3, [r7, #4]
 805fb08:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 805fb0a:	4a0c      	ldr	r2, [pc, #48]	@ (805fb3c <LL_DMA_EnableStream+0x40>)
 805fb0c:	683b      	ldr	r3, [r7, #0]
 805fb0e:	4413      	add	r3, r2
 805fb10:	781b      	ldrb	r3, [r3, #0]
 805fb12:	461a      	mov	r2, r3
 805fb14:	68fb      	ldr	r3, [r7, #12]
 805fb16:	4413      	add	r3, r2
 805fb18:	681b      	ldr	r3, [r3, #0]
 805fb1a:	4908      	ldr	r1, [pc, #32]	@ (805fb3c <LL_DMA_EnableStream+0x40>)
 805fb1c:	683a      	ldr	r2, [r7, #0]
 805fb1e:	440a      	add	r2, r1
 805fb20:	7812      	ldrb	r2, [r2, #0]
 805fb22:	4611      	mov	r1, r2
 805fb24:	68fa      	ldr	r2, [r7, #12]
 805fb26:	440a      	add	r2, r1
 805fb28:	f043 0301 	orr.w	r3, r3, #1
 805fb2c:	6013      	str	r3, [r2, #0]
}
 805fb2e:	bf00      	nop
 805fb30:	3714      	adds	r7, #20
 805fb32:	46bd      	mov	sp, r7
 805fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fb38:	4770      	bx	lr
 805fb3a:	bf00      	nop
 805fb3c:	08072508 	.word	0x08072508

0805fb40 <LL_DMA_IsActiveFlag_HT0>:
{
 805fb40:	b480      	push	{r7}
 805fb42:	b083      	sub	sp, #12
 805fb44:	af00      	add	r7, sp, #0
 805fb46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 805fb48:	687b      	ldr	r3, [r7, #4]
 805fb4a:	681b      	ldr	r3, [r3, #0]
 805fb4c:	f003 0310 	and.w	r3, r3, #16
 805fb50:	2b10      	cmp	r3, #16
 805fb52:	d101      	bne.n	805fb58 <LL_DMA_IsActiveFlag_HT0+0x18>
 805fb54:	2301      	movs	r3, #1
 805fb56:	e000      	b.n	805fb5a <LL_DMA_IsActiveFlag_HT0+0x1a>
 805fb58:	2300      	movs	r3, #0
}
 805fb5a:	4618      	mov	r0, r3
 805fb5c:	370c      	adds	r7, #12
 805fb5e:	46bd      	mov	sp, r7
 805fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fb64:	4770      	bx	lr

0805fb66 <LL_DMA_IsActiveFlag_HT1>:
{
 805fb66:	b480      	push	{r7}
 805fb68:	b083      	sub	sp, #12
 805fb6a:	af00      	add	r7, sp, #0
 805fb6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF1) == (DMA_LISR_HTIF1)) ? 1UL : 0UL);
 805fb6e:	687b      	ldr	r3, [r7, #4]
 805fb70:	681b      	ldr	r3, [r3, #0]
 805fb72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 805fb76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 805fb7a:	d101      	bne.n	805fb80 <LL_DMA_IsActiveFlag_HT1+0x1a>
 805fb7c:	2301      	movs	r3, #1
 805fb7e:	e000      	b.n	805fb82 <LL_DMA_IsActiveFlag_HT1+0x1c>
 805fb80:	2300      	movs	r3, #0
}
 805fb82:	4618      	mov	r0, r3
 805fb84:	370c      	adds	r7, #12
 805fb86:	46bd      	mov	sp, r7
 805fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fb8c:	4770      	bx	lr

0805fb8e <LL_DMA_IsActiveFlag_TC0>:
{
 805fb8e:	b480      	push	{r7}
 805fb90:	b083      	sub	sp, #12
 805fb92:	af00      	add	r7, sp, #0
 805fb94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 805fb96:	687b      	ldr	r3, [r7, #4]
 805fb98:	681b      	ldr	r3, [r3, #0]
 805fb9a:	f003 0320 	and.w	r3, r3, #32
 805fb9e:	2b20      	cmp	r3, #32
 805fba0:	d101      	bne.n	805fba6 <LL_DMA_IsActiveFlag_TC0+0x18>
 805fba2:	2301      	movs	r3, #1
 805fba4:	e000      	b.n	805fba8 <LL_DMA_IsActiveFlag_TC0+0x1a>
 805fba6:	2300      	movs	r3, #0
}
 805fba8:	4618      	mov	r0, r3
 805fbaa:	370c      	adds	r7, #12
 805fbac:	46bd      	mov	sp, r7
 805fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fbb2:	4770      	bx	lr

0805fbb4 <LL_DMA_IsActiveFlag_TC1>:
{
 805fbb4:	b480      	push	{r7}
 805fbb6:	b083      	sub	sp, #12
 805fbb8:	af00      	add	r7, sp, #0
 805fbba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF1) == (DMA_LISR_TCIF1)) ? 1UL : 0UL);
 805fbbc:	687b      	ldr	r3, [r7, #4]
 805fbbe:	681b      	ldr	r3, [r3, #0]
 805fbc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 805fbc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 805fbc8:	d101      	bne.n	805fbce <LL_DMA_IsActiveFlag_TC1+0x1a>
 805fbca:	2301      	movs	r3, #1
 805fbcc:	e000      	b.n	805fbd0 <LL_DMA_IsActiveFlag_TC1+0x1c>
 805fbce:	2300      	movs	r3, #0
}
 805fbd0:	4618      	mov	r0, r3
 805fbd2:	370c      	adds	r7, #12
 805fbd4:	46bd      	mov	sp, r7
 805fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fbda:	4770      	bx	lr

0805fbdc <LL_DMA_IsActiveFlag_TC7>:
{
 805fbdc:	b480      	push	{r7}
 805fbde:	b083      	sub	sp, #12
 805fbe0:	af00      	add	r7, sp, #0
 805fbe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TCIF7) == (DMA_HISR_TCIF7)) ? 1UL : 0UL);
 805fbe4:	687b      	ldr	r3, [r7, #4]
 805fbe6:	685b      	ldr	r3, [r3, #4]
 805fbe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 805fbec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 805fbf0:	d101      	bne.n	805fbf6 <LL_DMA_IsActiveFlag_TC7+0x1a>
 805fbf2:	2301      	movs	r3, #1
 805fbf4:	e000      	b.n	805fbf8 <LL_DMA_IsActiveFlag_TC7+0x1c>
 805fbf6:	2300      	movs	r3, #0
}
 805fbf8:	4618      	mov	r0, r3
 805fbfa:	370c      	adds	r7, #12
 805fbfc:	46bd      	mov	sp, r7
 805fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fc02:	4770      	bx	lr

0805fc04 <LL_DMA_IsActiveFlag_TE0>:
{
 805fc04:	b480      	push	{r7}
 805fc06:	b083      	sub	sp, #12
 805fc08:	af00      	add	r7, sp, #0
 805fc0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 805fc0c:	687b      	ldr	r3, [r7, #4]
 805fc0e:	681b      	ldr	r3, [r3, #0]
 805fc10:	f003 0308 	and.w	r3, r3, #8
 805fc14:	2b08      	cmp	r3, #8
 805fc16:	d101      	bne.n	805fc1c <LL_DMA_IsActiveFlag_TE0+0x18>
 805fc18:	2301      	movs	r3, #1
 805fc1a:	e000      	b.n	805fc1e <LL_DMA_IsActiveFlag_TE0+0x1a>
 805fc1c:	2300      	movs	r3, #0
}
 805fc1e:	4618      	mov	r0, r3
 805fc20:	370c      	adds	r7, #12
 805fc22:	46bd      	mov	sp, r7
 805fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fc28:	4770      	bx	lr

0805fc2a <LL_DMA_IsActiveFlag_TE1>:
{
 805fc2a:	b480      	push	{r7}
 805fc2c:	b083      	sub	sp, #12
 805fc2e:	af00      	add	r7, sp, #0
 805fc30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF1) == (DMA_LISR_TEIF1)) ? 1UL : 0UL);
 805fc32:	687b      	ldr	r3, [r7, #4]
 805fc34:	681b      	ldr	r3, [r3, #0]
 805fc36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 805fc3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 805fc3e:	d101      	bne.n	805fc44 <LL_DMA_IsActiveFlag_TE1+0x1a>
 805fc40:	2301      	movs	r3, #1
 805fc42:	e000      	b.n	805fc46 <LL_DMA_IsActiveFlag_TE1+0x1c>
 805fc44:	2300      	movs	r3, #0
}
 805fc46:	4618      	mov	r0, r3
 805fc48:	370c      	adds	r7, #12
 805fc4a:	46bd      	mov	sp, r7
 805fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fc50:	4770      	bx	lr

0805fc52 <LL_DMA_IsActiveFlag_TE7>:
{
 805fc52:	b480      	push	{r7}
 805fc54:	b083      	sub	sp, #12
 805fc56:	af00      	add	r7, sp, #0
 805fc58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TEIF7) == (DMA_HISR_TEIF7)) ? 1UL : 0UL);
 805fc5a:	687b      	ldr	r3, [r7, #4]
 805fc5c:	685b      	ldr	r3, [r3, #4]
 805fc5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 805fc62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 805fc66:	d101      	bne.n	805fc6c <LL_DMA_IsActiveFlag_TE7+0x1a>
 805fc68:	2301      	movs	r3, #1
 805fc6a:	e000      	b.n	805fc6e <LL_DMA_IsActiveFlag_TE7+0x1c>
 805fc6c:	2300      	movs	r3, #0
}
 805fc6e:	4618      	mov	r0, r3
 805fc70:	370c      	adds	r7, #12
 805fc72:	46bd      	mov	sp, r7
 805fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fc78:	4770      	bx	lr

0805fc7a <LL_DMA_ClearFlag_HT0>:
{
 805fc7a:	b480      	push	{r7}
 805fc7c:	b083      	sub	sp, #12
 805fc7e:	af00      	add	r7, sp, #0
 805fc80:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 805fc82:	687b      	ldr	r3, [r7, #4]
 805fc84:	2210      	movs	r2, #16
 805fc86:	609a      	str	r2, [r3, #8]
}
 805fc88:	bf00      	nop
 805fc8a:	370c      	adds	r7, #12
 805fc8c:	46bd      	mov	sp, r7
 805fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fc92:	4770      	bx	lr

0805fc94 <LL_DMA_ClearFlag_HT1>:
{
 805fc94:	b480      	push	{r7}
 805fc96:	b083      	sub	sp, #12
 805fc98:	af00      	add	r7, sp, #0
 805fc9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 805fc9c:	687b      	ldr	r3, [r7, #4]
 805fc9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 805fca2:	609a      	str	r2, [r3, #8]
}
 805fca4:	bf00      	nop
 805fca6:	370c      	adds	r7, #12
 805fca8:	46bd      	mov	sp, r7
 805fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fcae:	4770      	bx	lr

0805fcb0 <LL_DMA_ClearFlag_TC0>:
{
 805fcb0:	b480      	push	{r7}
 805fcb2:	b083      	sub	sp, #12
 805fcb4:	af00      	add	r7, sp, #0
 805fcb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 805fcb8:	687b      	ldr	r3, [r7, #4]
 805fcba:	2220      	movs	r2, #32
 805fcbc:	609a      	str	r2, [r3, #8]
}
 805fcbe:	bf00      	nop
 805fcc0:	370c      	adds	r7, #12
 805fcc2:	46bd      	mov	sp, r7
 805fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fcc8:	4770      	bx	lr

0805fcca <LL_DMA_ClearFlag_TC1>:
{
 805fcca:	b480      	push	{r7}
 805fccc:	b083      	sub	sp, #12
 805fcce:	af00      	add	r7, sp, #0
 805fcd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 805fcd2:	687b      	ldr	r3, [r7, #4]
 805fcd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 805fcd8:	609a      	str	r2, [r3, #8]
}
 805fcda:	bf00      	nop
 805fcdc:	370c      	adds	r7, #12
 805fcde:	46bd      	mov	sp, r7
 805fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fce4:	4770      	bx	lr

0805fce6 <LL_DMA_ClearFlag_TC7>:
{
 805fce6:	b480      	push	{r7}
 805fce8:	b083      	sub	sp, #12
 805fcea:	af00      	add	r7, sp, #0
 805fcec:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 805fcee:	687b      	ldr	r3, [r7, #4]
 805fcf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 805fcf4:	60da      	str	r2, [r3, #12]
}
 805fcf6:	bf00      	nop
 805fcf8:	370c      	adds	r7, #12
 805fcfa:	46bd      	mov	sp, r7
 805fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fd00:	4770      	bx	lr

0805fd02 <LL_DMA_ClearFlag_TE0>:
{
 805fd02:	b480      	push	{r7}
 805fd04:	b083      	sub	sp, #12
 805fd06:	af00      	add	r7, sp, #0
 805fd08:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 805fd0a:	687b      	ldr	r3, [r7, #4]
 805fd0c:	2208      	movs	r2, #8
 805fd0e:	609a      	str	r2, [r3, #8]
}
 805fd10:	bf00      	nop
 805fd12:	370c      	adds	r7, #12
 805fd14:	46bd      	mov	sp, r7
 805fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fd1a:	4770      	bx	lr

0805fd1c <LL_DMA_ClearFlag_TE1>:
{
 805fd1c:	b480      	push	{r7}
 805fd1e:	b083      	sub	sp, #12
 805fd20:	af00      	add	r7, sp, #0
 805fd22:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF1);
 805fd24:	687b      	ldr	r3, [r7, #4]
 805fd26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 805fd2a:	609a      	str	r2, [r3, #8]
}
 805fd2c:	bf00      	nop
 805fd2e:	370c      	adds	r7, #12
 805fd30:	46bd      	mov	sp, r7
 805fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fd36:	4770      	bx	lr

0805fd38 <LL_DMA_ClearFlag_TE7>:
{
 805fd38:	b480      	push	{r7}
 805fd3a:	b083      	sub	sp, #12
 805fd3c:	af00      	add	r7, sp, #0
 805fd3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 805fd40:	687b      	ldr	r3, [r7, #4]
 805fd42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 805fd46:	60da      	str	r2, [r3, #12]
}
 805fd48:	bf00      	nop
 805fd4a:	370c      	adds	r7, #12
 805fd4c:	46bd      	mov	sp, r7
 805fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fd52:	4770      	bx	lr

0805fd54 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 805fd54:	b480      	push	{r7}
 805fd56:	b085      	sub	sp, #20
 805fd58:	af00      	add	r7, sp, #0
 805fd5a:	6078      	str	r0, [r7, #4]
 805fd5c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805fd5e:	687b      	ldr	r3, [r7, #4]
 805fd60:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 805fd62:	4a0a      	ldr	r2, [pc, #40]	@ (805fd8c <LL_DMA_IsEnabledIT_HT+0x38>)
 805fd64:	683b      	ldr	r3, [r7, #0]
 805fd66:	4413      	add	r3, r2
 805fd68:	781b      	ldrb	r3, [r3, #0]
 805fd6a:	461a      	mov	r2, r3
 805fd6c:	68fb      	ldr	r3, [r7, #12]
 805fd6e:	4413      	add	r3, r2
 805fd70:	681b      	ldr	r3, [r3, #0]
 805fd72:	f003 0308 	and.w	r3, r3, #8
 805fd76:	2b08      	cmp	r3, #8
 805fd78:	d101      	bne.n	805fd7e <LL_DMA_IsEnabledIT_HT+0x2a>
 805fd7a:	2301      	movs	r3, #1
 805fd7c:	e000      	b.n	805fd80 <LL_DMA_IsEnabledIT_HT+0x2c>
 805fd7e:	2300      	movs	r3, #0
}
 805fd80:	4618      	mov	r0, r3
 805fd82:	3714      	adds	r7, #20
 805fd84:	46bd      	mov	sp, r7
 805fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fd8a:	4770      	bx	lr
 805fd8c:	08072508 	.word	0x08072508

0805fd90 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 805fd90:	b480      	push	{r7}
 805fd92:	b085      	sub	sp, #20
 805fd94:	af00      	add	r7, sp, #0
 805fd96:	6078      	str	r0, [r7, #4]
 805fd98:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805fd9a:	687b      	ldr	r3, [r7, #4]
 805fd9c:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 805fd9e:	4a0a      	ldr	r2, [pc, #40]	@ (805fdc8 <LL_DMA_IsEnabledIT_TE+0x38>)
 805fda0:	683b      	ldr	r3, [r7, #0]
 805fda2:	4413      	add	r3, r2
 805fda4:	781b      	ldrb	r3, [r3, #0]
 805fda6:	461a      	mov	r2, r3
 805fda8:	68fb      	ldr	r3, [r7, #12]
 805fdaa:	4413      	add	r3, r2
 805fdac:	681b      	ldr	r3, [r3, #0]
 805fdae:	f003 0304 	and.w	r3, r3, #4
 805fdb2:	2b04      	cmp	r3, #4
 805fdb4:	d101      	bne.n	805fdba <LL_DMA_IsEnabledIT_TE+0x2a>
 805fdb6:	2301      	movs	r3, #1
 805fdb8:	e000      	b.n	805fdbc <LL_DMA_IsEnabledIT_TE+0x2c>
 805fdba:	2300      	movs	r3, #0
}
 805fdbc:	4618      	mov	r0, r3
 805fdbe:	3714      	adds	r7, #20
 805fdc0:	46bd      	mov	sp, r7
 805fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fdc6:	4770      	bx	lr
 805fdc8:	08072508 	.word	0x08072508

0805fdcc <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 805fdcc:	b480      	push	{r7}
 805fdce:	b085      	sub	sp, #20
 805fdd0:	af00      	add	r7, sp, #0
 805fdd2:	6078      	str	r0, [r7, #4]
 805fdd4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 805fdd6:	687b      	ldr	r3, [r7, #4]
 805fdd8:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 805fdda:	4a0a      	ldr	r2, [pc, #40]	@ (805fe04 <LL_DMA_IsEnabledIT_TC+0x38>)
 805fddc:	683b      	ldr	r3, [r7, #0]
 805fdde:	4413      	add	r3, r2
 805fde0:	781b      	ldrb	r3, [r3, #0]
 805fde2:	461a      	mov	r2, r3
 805fde4:	68fb      	ldr	r3, [r7, #12]
 805fde6:	4413      	add	r3, r2
 805fde8:	681b      	ldr	r3, [r3, #0]
 805fdea:	f003 0310 	and.w	r3, r3, #16
 805fdee:	2b10      	cmp	r3, #16
 805fdf0:	d101      	bne.n	805fdf6 <LL_DMA_IsEnabledIT_TC+0x2a>
 805fdf2:	2301      	movs	r3, #1
 805fdf4:	e000      	b.n	805fdf8 <LL_DMA_IsEnabledIT_TC+0x2c>
 805fdf6:	2300      	movs	r3, #0
}
 805fdf8:	4618      	mov	r0, r3
 805fdfa:	3714      	adds	r7, #20
 805fdfc:	46bd      	mov	sp, r7
 805fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fe02:	4770      	bx	lr
 805fe04:	08072508 	.word	0x08072508

0805fe08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 805fe08:	b480      	push	{r7}
 805fe0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 805fe0c:	bf00      	nop
 805fe0e:	e7fd      	b.n	805fe0c <NMI_Handler+0x4>

0805fe10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 805fe10:	b480      	push	{r7}
 805fe12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 805fe14:	bf00      	nop
 805fe16:	e7fd      	b.n	805fe14 <HardFault_Handler+0x4>

0805fe18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 805fe18:	b480      	push	{r7}
 805fe1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 805fe1c:	bf00      	nop
 805fe1e:	e7fd      	b.n	805fe1c <MemManage_Handler+0x4>

0805fe20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 805fe20:	b480      	push	{r7}
 805fe22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 805fe24:	bf00      	nop
 805fe26:	e7fd      	b.n	805fe24 <BusFault_Handler+0x4>

0805fe28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 805fe28:	b480      	push	{r7}
 805fe2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 805fe2c:	bf00      	nop
 805fe2e:	e7fd      	b.n	805fe2c <UsageFault_Handler+0x4>

0805fe30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 805fe30:	b480      	push	{r7}
 805fe32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 805fe34:	bf00      	nop
 805fe36:	46bd      	mov	sp, r7
 805fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 805fe3c:	4770      	bx	lr
	...

0805fe40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 805fe40:	b580      	push	{r7, lr}
 805fe42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA1))
 805fe44:	2100      	movs	r1, #0
 805fe46:	481d      	ldr	r0, [pc, #116]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe48:	f7ff ff84 	bl	805fd54 <LL_DMA_IsEnabledIT_HT>
 805fe4c:	4603      	mov	r3, r0
 805fe4e:	2b00      	cmp	r3, #0
 805fe50:	d00b      	beq.n	805fe6a <DMA1_Stream0_IRQHandler+0x2a>
 805fe52:	481a      	ldr	r0, [pc, #104]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe54:	f7ff fe74 	bl	805fb40 <LL_DMA_IsActiveFlag_HT0>
 805fe58:	4603      	mov	r3, r0
 805fe5a:	2b00      	cmp	r3, #0
 805fe5c:	d005      	beq.n	805fe6a <DMA1_Stream0_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT0(DMA1);
 805fe5e:	4817      	ldr	r0, [pc, #92]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe60:	f7ff ff0b 	bl	805fc7a <LL_DMA_ClearFlag_HT0>
     UART_DMA_Rx_Check(USART1);
 805fe64:	4816      	ldr	r0, [pc, #88]	@ (805fec0 <DMA1_Stream0_IRQHandler+0x80>)
 805fe66:	f7e2 fdd7 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA1))
 805fe6a:	2100      	movs	r1, #0
 805fe6c:	4813      	ldr	r0, [pc, #76]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe6e:	f7ff ffad 	bl	805fdcc <LL_DMA_IsEnabledIT_TC>
 805fe72:	4603      	mov	r3, r0
 805fe74:	2b00      	cmp	r3, #0
 805fe76:	d00b      	beq.n	805fe90 <DMA1_Stream0_IRQHandler+0x50>
 805fe78:	4810      	ldr	r0, [pc, #64]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe7a:	f7ff fe88 	bl	805fb8e <LL_DMA_IsActiveFlag_TC0>
 805fe7e:	4603      	mov	r3, r0
 805fe80:	2b00      	cmp	r3, #0
 805fe82:	d005      	beq.n	805fe90 <DMA1_Stream0_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC0(DMA1);
 805fe84:	480d      	ldr	r0, [pc, #52]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe86:	f7ff ff13 	bl	805fcb0 <LL_DMA_ClearFlag_TC0>
     UART_DMA_Rx_Check(USART1);
 805fe8a:	480d      	ldr	r0, [pc, #52]	@ (805fec0 <DMA1_Stream0_IRQHandler+0x80>)
 805fe8c:	f7e2 fdc4 	bl	8042a18 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA1))
 805fe90:	2100      	movs	r1, #0
 805fe92:	480a      	ldr	r0, [pc, #40]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fe94:	f7ff ff7c 	bl	805fd90 <LL_DMA_IsEnabledIT_TE>
 805fe98:	4603      	mov	r3, r0
 805fe9a:	2b00      	cmp	r3, #0
 805fe9c:	d00c      	beq.n	805feb8 <DMA1_Stream0_IRQHandler+0x78>
 805fe9e:	4807      	ldr	r0, [pc, #28]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805fea0:	f7ff feb0 	bl	805fc04 <LL_DMA_IsActiveFlag_TE0>
 805fea4:	4603      	mov	r3, r0
 805fea6:	2b00      	cmp	r3, #0
 805fea8:	d006      	beq.n	805feb8 <DMA1_Stream0_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE0(DMA1);
 805feaa:	4804      	ldr	r0, [pc, #16]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805feac:	f7ff ff29 	bl	805fd02 <LL_DMA_ClearFlag_TE0>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
 805feb0:	2100      	movs	r1, #0
 805feb2:	4802      	ldr	r0, [pc, #8]	@ (805febc <DMA1_Stream0_IRQHandler+0x7c>)
 805feb4:	f7ff fe22 	bl	805fafc <LL_DMA_EnableStream>
  }

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 805feb8:	bf00      	nop
 805feba:	bd80      	pop	{r7, pc}
 805febc:	40020000 	.word	0x40020000
 805fec0:	40011000 	.word	0x40011000

0805fec4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 805fec4:	b580      	push	{r7, lr}
 805fec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA1))
 805fec8:	2101      	movs	r1, #1
 805feca:	481d      	ldr	r0, [pc, #116]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805fecc:	f7ff ff42 	bl	805fd54 <LL_DMA_IsEnabledIT_HT>
 805fed0:	4603      	mov	r3, r0
 805fed2:	2b00      	cmp	r3, #0
 805fed4:	d00b      	beq.n	805feee <DMA1_Stream1_IRQHandler+0x2a>
 805fed6:	481a      	ldr	r0, [pc, #104]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805fed8:	f7ff fe45 	bl	805fb66 <LL_DMA_IsActiveFlag_HT1>
 805fedc:	4603      	mov	r3, r0
 805fede:	2b00      	cmp	r3, #0
 805fee0:	d005      	beq.n	805feee <DMA1_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA1);
 805fee2:	4817      	ldr	r0, [pc, #92]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805fee4:	f7ff fed6 	bl	805fc94 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(USART2);
 805fee8:	4816      	ldr	r0, [pc, #88]	@ (805ff44 <DMA1_Stream1_IRQHandler+0x80>)
 805feea:	f7e2 fd95 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 805feee:	2101      	movs	r1, #1
 805fef0:	4813      	ldr	r0, [pc, #76]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805fef2:	f7ff ff6b 	bl	805fdcc <LL_DMA_IsEnabledIT_TC>
 805fef6:	4603      	mov	r3, r0
 805fef8:	2b00      	cmp	r3, #0
 805fefa:	d00b      	beq.n	805ff14 <DMA1_Stream1_IRQHandler+0x50>
 805fefc:	4810      	ldr	r0, [pc, #64]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805fefe:	f7ff fe59 	bl	805fbb4 <LL_DMA_IsActiveFlag_TC1>
 805ff02:	4603      	mov	r3, r0
 805ff04:	2b00      	cmp	r3, #0
 805ff06:	d005      	beq.n	805ff14 <DMA1_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA1);
 805ff08:	480d      	ldr	r0, [pc, #52]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805ff0a:	f7ff fede 	bl	805fcca <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(USART2);
 805ff0e:	480d      	ldr	r0, [pc, #52]	@ (805ff44 <DMA1_Stream1_IRQHandler+0x80>)
 805ff10:	f7e2 fd82 	bl	8042a18 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 805ff14:	2101      	movs	r1, #1
 805ff16:	480a      	ldr	r0, [pc, #40]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805ff18:	f7ff ff3a 	bl	805fd90 <LL_DMA_IsEnabledIT_TE>
 805ff1c:	4603      	mov	r3, r0
 805ff1e:	2b00      	cmp	r3, #0
 805ff20:	d00c      	beq.n	805ff3c <DMA1_Stream1_IRQHandler+0x78>
 805ff22:	4807      	ldr	r0, [pc, #28]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805ff24:	f7ff fe81 	bl	805fc2a <LL_DMA_IsActiveFlag_TE1>
 805ff28:	4603      	mov	r3, r0
 805ff2a:	2b00      	cmp	r3, #0
 805ff2c:	d006      	beq.n	805ff3c <DMA1_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA1);
 805ff2e:	4804      	ldr	r0, [pc, #16]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805ff30:	f7ff fef4 	bl	805fd1c <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 805ff34:	2101      	movs	r1, #1
 805ff36:	4802      	ldr	r0, [pc, #8]	@ (805ff40 <DMA1_Stream1_IRQHandler+0x7c>)
 805ff38:	f7ff fde0 	bl	805fafc <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 805ff3c:	bf00      	nop
 805ff3e:	bd80      	pop	{r7, pc}
 805ff40:	40020000 	.word	0x40020000
 805ff44:	40004400 	.word	0x40004400

0805ff48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 805ff48:	b580      	push	{r7, lr}
 805ff4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	 TickTimer_IRQHandler();
 805ff4c:	f7ed fff6 	bl	804df3c <TickTimer_IRQHandler>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 805ff50:	bf00      	nop
 805ff52:	bd80      	pop	{r7, pc}

0805ff54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 805ff54:	b580      	push	{r7, lr}
 805ff56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 805ff58:	480b      	ldr	r0, [pc, #44]	@ (805ff88 <USART1_IRQHandler+0x34>)
 805ff5a:	f7ff fdbb 	bl	805fad4 <LL_USART_IsEnabledIT_IDLE>
 805ff5e:	4603      	mov	r3, r0
 805ff60:	2b00      	cmp	r3, #0
 805ff62:	d00b      	beq.n	805ff7c <USART1_IRQHandler+0x28>
 805ff64:	4808      	ldr	r0, [pc, #32]	@ (805ff88 <USART1_IRQHandler+0x34>)
 805ff66:	f7ff fd95 	bl	805fa94 <LL_USART_IsActiveFlag_IDLE>
 805ff6a:	4603      	mov	r3, r0
 805ff6c:	2b00      	cmp	r3, #0
 805ff6e:	d005      	beq.n	805ff7c <USART1_IRQHandler+0x28>
  {
     LL_USART_ClearFlag_IDLE(USART1);
 805ff70:	4805      	ldr	r0, [pc, #20]	@ (805ff88 <USART1_IRQHandler+0x34>)
 805ff72:	f7ff fda2 	bl	805faba <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART1);
 805ff76:	4804      	ldr	r0, [pc, #16]	@ (805ff88 <USART1_IRQHandler+0x34>)
 805ff78:	f7e2 fd4e 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Driver_TX_ISR(USART1);
 805ff7c:	4802      	ldr	r0, [pc, #8]	@ (805ff88 <USART1_IRQHandler+0x34>)
 805ff7e:	f7e2 fcf9 	bl	8042974 <UART_Driver_TX_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 805ff82:	bf00      	nop
 805ff84:	bd80      	pop	{r7, pc}
 805ff86:	bf00      	nop
 805ff88:	40011000 	.word	0x40011000

0805ff8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 805ff8c:	b580      	push	{r7, lr}
 805ff8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2))
 805ff90:	480b      	ldr	r0, [pc, #44]	@ (805ffc0 <USART2_IRQHandler+0x34>)
 805ff92:	f7ff fd9f 	bl	805fad4 <LL_USART_IsEnabledIT_IDLE>
 805ff96:	4603      	mov	r3, r0
 805ff98:	2b00      	cmp	r3, #0
 805ff9a:	d00b      	beq.n	805ffb4 <USART2_IRQHandler+0x28>
 805ff9c:	4808      	ldr	r0, [pc, #32]	@ (805ffc0 <USART2_IRQHandler+0x34>)
 805ff9e:	f7ff fd79 	bl	805fa94 <LL_USART_IsActiveFlag_IDLE>
 805ffa2:	4603      	mov	r3, r0
 805ffa4:	2b00      	cmp	r3, #0
 805ffa6:	d005      	beq.n	805ffb4 <USART2_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(USART2);
 805ffa8:	4805      	ldr	r0, [pc, #20]	@ (805ffc0 <USART2_IRQHandler+0x34>)
 805ffaa:	f7ff fd86 	bl	805faba <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART2);
 805ffae:	4804      	ldr	r0, [pc, #16]	@ (805ffc0 <USART2_IRQHandler+0x34>)
 805ffb0:	f7e2 fd32 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_Driver_TX_ISR(USART2);
 805ffb4:	4802      	ldr	r0, [pc, #8]	@ (805ffc0 <USART2_IRQHandler+0x34>)
 805ffb6:	f7e2 fcdd 	bl	8042974 <UART_Driver_TX_ISR>
  /* USER CODE END USART2_IRQn 1 */
}
 805ffba:	bf00      	nop
 805ffbc:	bd80      	pop	{r7, pc}
 805ffbe:	bf00      	nop
 805ffc0:	40004400 	.word	0x40004400

0805ffc4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 805ffc4:	b580      	push	{r7, lr}
 805ffc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC7(DMA1))
 805ffc8:	480f      	ldr	r0, [pc, #60]	@ (8060008 <DMA1_Stream7_IRQHandler+0x44>)
 805ffca:	f7ff fe07 	bl	805fbdc <LL_DMA_IsActiveFlag_TC7>
 805ffce:	4603      	mov	r3, r0
 805ffd0:	2b00      	cmp	r3, #0
 805ffd2:	d007      	beq.n	805ffe4 <DMA1_Stream7_IRQHandler+0x20>
  {
      LL_DMA_ClearFlag_TC7(DMA1);
 805ffd4:	480c      	ldr	r0, [pc, #48]	@ (8060008 <DMA1_Stream7_IRQHandler+0x44>)
 805ffd6:	f7ff fe86 	bl	805fce6 <LL_DMA_ClearFlag_TC7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_COMPLETE);
 805ffda:	2001      	movs	r0, #1
 805ffdc:	f7ed fa72 	bl	804d4c4 <SPI_SlaveDevice_SetTransferState>
      SPI_SlaveDevice_Disable();
 805ffe0:	f7ed fa46 	bl	804d470 <SPI_SlaveDevice_Disable>
  }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  if (LL_DMA_IsActiveFlag_TE7(DMA1))
 805ffe4:	4808      	ldr	r0, [pc, #32]	@ (8060008 <DMA1_Stream7_IRQHandler+0x44>)
 805ffe6:	f7ff fe34 	bl	805fc52 <LL_DMA_IsActiveFlag_TE7>
 805ffea:	4603      	mov	r3, r0
 805ffec:	2b00      	cmp	r3, #0
 805ffee:	d008      	beq.n	8060002 <DMA1_Stream7_IRQHandler+0x3e>
  {
      LL_DMA_ClearFlag_TE7(DMA1);
 805fff0:	4805      	ldr	r0, [pc, #20]	@ (8060008 <DMA1_Stream7_IRQHandler+0x44>)
 805fff2:	f7ff fea1 	bl	805fd38 <LL_DMA_ClearFlag_TE7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_ERROR);
 805fff6:	2002      	movs	r0, #2
 805fff8:	f7ed fa64 	bl	804d4c4 <SPI_SlaveDevice_SetTransferState>
      toCM4_SetState(TOCM4_ERROR);
 805fffc:	2000      	movs	r0, #0
 805fffe:	f7e0 fd17 	bl	8040a30 <toCM4_SetState>
  }
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8060002:	bf00      	nop
 8060004:	bd80      	pop	{r7, pc}
 8060006:	bf00      	nop
 8060008:	40020000 	.word	0x40020000

0806000c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 806000c:	b580      	push	{r7, lr}
 806000e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc1);
 8060010:	4802      	ldr	r0, [pc, #8]	@ (806001c <SDMMC1_IRQHandler+0x10>)
 8060012:	f001 ff11 	bl	8061e38 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8060016:	bf00      	nop
 8060018:	bd80      	pop	{r7, pc}
 806001a:	bf00      	nop
 806001c:	2406e634 	.word	0x2406e634

08060020 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8060020:	b580      	push	{r7, lr}
 8060022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8060024:	4802      	ldr	r0, [pc, #8]	@ (8060030 <TIM7_IRQHandler+0x10>)
 8060026:	f006 fe89 	bl	8066d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 806002a:	bf00      	nop
 806002c:	bd80      	pop	{r7, pc}
 806002e:	bf00      	nop
 8060030:	2406e918 	.word	0x2406e918

08060034 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8060034:	b580      	push	{r7, lr}
 8060036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA2))
 8060038:	2101      	movs	r1, #1
 806003a:	481d      	ldr	r0, [pc, #116]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 806003c:	f7ff fe8a 	bl	805fd54 <LL_DMA_IsEnabledIT_HT>
 8060040:	4603      	mov	r3, r0
 8060042:	2b00      	cmp	r3, #0
 8060044:	d00b      	beq.n	806005e <DMA2_Stream1_IRQHandler+0x2a>
 8060046:	481a      	ldr	r0, [pc, #104]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 8060048:	f7ff fd8d 	bl	805fb66 <LL_DMA_IsActiveFlag_HT1>
 806004c:	4603      	mov	r3, r0
 806004e:	2b00      	cmp	r3, #0
 8060050:	d005      	beq.n	806005e <DMA2_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA2);
 8060052:	4817      	ldr	r0, [pc, #92]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 8060054:	f7ff fe1e 	bl	805fc94 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(UART7);
 8060058:	4816      	ldr	r0, [pc, #88]	@ (80600b4 <DMA2_Stream1_IRQHandler+0x80>)
 806005a:	f7e2 fcdd 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA2))
 806005e:	2101      	movs	r1, #1
 8060060:	4813      	ldr	r0, [pc, #76]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 8060062:	f7ff feb3 	bl	805fdcc <LL_DMA_IsEnabledIT_TC>
 8060066:	4603      	mov	r3, r0
 8060068:	2b00      	cmp	r3, #0
 806006a:	d00b      	beq.n	8060084 <DMA2_Stream1_IRQHandler+0x50>
 806006c:	4810      	ldr	r0, [pc, #64]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 806006e:	f7ff fda1 	bl	805fbb4 <LL_DMA_IsActiveFlag_TC1>
 8060072:	4603      	mov	r3, r0
 8060074:	2b00      	cmp	r3, #0
 8060076:	d005      	beq.n	8060084 <DMA2_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA2);
 8060078:	480d      	ldr	r0, [pc, #52]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 806007a:	f7ff fe26 	bl	805fcca <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(UART7);
 806007e:	480d      	ldr	r0, [pc, #52]	@ (80600b4 <DMA2_Stream1_IRQHandler+0x80>)
 8060080:	f7e2 fcca 	bl	8042a18 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA2))
 8060084:	2101      	movs	r1, #1
 8060086:	480a      	ldr	r0, [pc, #40]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 8060088:	f7ff fe82 	bl	805fd90 <LL_DMA_IsEnabledIT_TE>
 806008c:	4603      	mov	r3, r0
 806008e:	2b00      	cmp	r3, #0
 8060090:	d00c      	beq.n	80600ac <DMA2_Stream1_IRQHandler+0x78>
 8060092:	4807      	ldr	r0, [pc, #28]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 8060094:	f7ff fdc9 	bl	805fc2a <LL_DMA_IsActiveFlag_TE1>
 8060098:	4603      	mov	r3, r0
 806009a:	2b00      	cmp	r3, #0
 806009c:	d006      	beq.n	80600ac <DMA2_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA2);
 806009e:	4804      	ldr	r0, [pc, #16]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 80600a0:	f7ff fe3c 	bl	805fd1c <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 80600a4:	2101      	movs	r1, #1
 80600a6:	4802      	ldr	r0, [pc, #8]	@ (80600b0 <DMA2_Stream1_IRQHandler+0x7c>)
 80600a8:	f7ff fd28 	bl	805fafc <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80600ac:	bf00      	nop
 80600ae:	bd80      	pop	{r7, pc}
 80600b0:	40020400 	.word	0x40020400
 80600b4:	40007800 	.word	0x40007800

080600b8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80600b8:	b580      	push	{r7, lr}
 80600ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(UART7) && LL_USART_IsActiveFlag_IDLE(UART7))
 80600bc:	480b      	ldr	r0, [pc, #44]	@ (80600ec <UART7_IRQHandler+0x34>)
 80600be:	f7ff fd09 	bl	805fad4 <LL_USART_IsEnabledIT_IDLE>
 80600c2:	4603      	mov	r3, r0
 80600c4:	2b00      	cmp	r3, #0
 80600c6:	d00b      	beq.n	80600e0 <UART7_IRQHandler+0x28>
 80600c8:	4808      	ldr	r0, [pc, #32]	@ (80600ec <UART7_IRQHandler+0x34>)
 80600ca:	f7ff fce3 	bl	805fa94 <LL_USART_IsActiveFlag_IDLE>
 80600ce:	4603      	mov	r3, r0
 80600d0:	2b00      	cmp	r3, #0
 80600d2:	d005      	beq.n	80600e0 <UART7_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(UART7);
 80600d4:	4805      	ldr	r0, [pc, #20]	@ (80600ec <UART7_IRQHandler+0x34>)
 80600d6:	f7ff fcf0 	bl	805faba <LL_USART_ClearFlag_IDLE>
	 UART_DMA_Rx_Check(UART7);
 80600da:	4804      	ldr	r0, [pc, #16]	@ (80600ec <UART7_IRQHandler+0x34>)
 80600dc:	f7e2 fc9c 	bl	8042a18 <UART_DMA_Rx_Check>
  }
  /* USER CODE END UART7_IRQn 0 */
  /* USER CODE BEGIN UART7_IRQn 1 */
  UART_Driver_TX_ISR(UART7);
 80600e0:	4802      	ldr	r0, [pc, #8]	@ (80600ec <UART7_IRQHandler+0x34>)
 80600e2:	f7e2 fc47 	bl	8042974 <UART_Driver_TX_ISR>
  /* USER CODE END UART7_IRQn 1 */
}
 80600e6:	bf00      	nop
 80600e8:	bd80      	pop	{r7, pc}
 80600ea:	bf00      	nop
 80600ec:	40007800 	.word	0x40007800

080600f0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80600f0:	b480      	push	{r7}
 80600f2:	af00      	add	r7, sp, #0

  /* USER CODE END SPI5_IRQn 0 */
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80600f4:	bf00      	nop
 80600f6:	46bd      	mov	sp, r7
 80600f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80600fc:	4770      	bx	lr

080600fe <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80600fe:	b480      	push	{r7}
 8060100:	af00      	add	r7, sp, #0

  /* USER CODE END SPI6_IRQn 0 */
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8060102:	bf00      	nop
 8060104:	46bd      	mov	sp, r7
 8060106:	f85d 7b04 	ldr.w	r7, [sp], #4
 806010a:	4770      	bx	lr

0806010c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 806010c:	b580      	push	{r7, lr}
 806010e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_end_data_0);
 8060110:	4802      	ldr	r0, [pc, #8]	@ (806011c <MDMA_IRQHandler+0x10>)
 8060112:	f001 fa1f 	bl	8061554 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8060116:	bf00      	nop
 8060118:	bd80      	pop	{r7, pc}
 806011a:	bf00      	nop
 806011c:	2406e8ac 	.word	0x2406e8ac

08060120 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8060120:	b580      	push	{r7, lr}
 8060122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */
  SPIMaster_IRQHandler();
 8060124:	f7ec fe4c 	bl	804cdc0 <SPIMaster_IRQHandler>
  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8060128:	bf00      	nop
 806012a:	bd80      	pop	{r7, pc}

0806012c <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 806012c:	b480      	push	{r7}
 806012e:	af00      	add	r7, sp, #0

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8060130:	bf00      	nop
 8060132:	46bd      	mov	sp, r7
 8060134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060138:	4770      	bx	lr

0806013a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 806013a:	b480      	push	{r7}
 806013c:	af00      	add	r7, sp, #0
  return 1;
 806013e:	2301      	movs	r3, #1
}
 8060140:	4618      	mov	r0, r3
 8060142:	46bd      	mov	sp, r7
 8060144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060148:	4770      	bx	lr

0806014a <_kill>:

int _kill(int pid, int sig)
{
 806014a:	b580      	push	{r7, lr}
 806014c:	b082      	sub	sp, #8
 806014e:	af00      	add	r7, sp, #0
 8060150:	6078      	str	r0, [r7, #4]
 8060152:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8060154:	f009 fbc4 	bl	80698e0 <__errno>
 8060158:	4603      	mov	r3, r0
 806015a:	2216      	movs	r2, #22
 806015c:	601a      	str	r2, [r3, #0]
  return -1;
 806015e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8060162:	4618      	mov	r0, r3
 8060164:	3708      	adds	r7, #8
 8060166:	46bd      	mov	sp, r7
 8060168:	bd80      	pop	{r7, pc}

0806016a <_exit>:

void _exit (int status)
{
 806016a:	b580      	push	{r7, lr}
 806016c:	b082      	sub	sp, #8
 806016e:	af00      	add	r7, sp, #0
 8060170:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8060172:	f04f 31ff 	mov.w	r1, #4294967295
 8060176:	6878      	ldr	r0, [r7, #4]
 8060178:	f7ff ffe7 	bl	806014a <_kill>
  while (1) {}    /* Make sure we hang here */
 806017c:	bf00      	nop
 806017e:	e7fd      	b.n	806017c <_exit+0x12>

08060180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8060180:	b580      	push	{r7, lr}
 8060182:	b086      	sub	sp, #24
 8060184:	af00      	add	r7, sp, #0
 8060186:	60f8      	str	r0, [r7, #12]
 8060188:	60b9      	str	r1, [r7, #8]
 806018a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 806018c:	2300      	movs	r3, #0
 806018e:	617b      	str	r3, [r7, #20]
 8060190:	e00a      	b.n	80601a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8060192:	f3af 8000 	nop.w
 8060196:	4601      	mov	r1, r0
 8060198:	68bb      	ldr	r3, [r7, #8]
 806019a:	1c5a      	adds	r2, r3, #1
 806019c:	60ba      	str	r2, [r7, #8]
 806019e:	b2ca      	uxtb	r2, r1
 80601a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80601a2:	697b      	ldr	r3, [r7, #20]
 80601a4:	3301      	adds	r3, #1
 80601a6:	617b      	str	r3, [r7, #20]
 80601a8:	697a      	ldr	r2, [r7, #20]
 80601aa:	687b      	ldr	r3, [r7, #4]
 80601ac:	429a      	cmp	r2, r3
 80601ae:	dbf0      	blt.n	8060192 <_read+0x12>
  }

  return len;
 80601b0:	687b      	ldr	r3, [r7, #4]
}
 80601b2:	4618      	mov	r0, r3
 80601b4:	3718      	adds	r7, #24
 80601b6:	46bd      	mov	sp, r7
 80601b8:	bd80      	pop	{r7, pc}

080601ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80601ba:	b580      	push	{r7, lr}
 80601bc:	b086      	sub	sp, #24
 80601be:	af00      	add	r7, sp, #0
 80601c0:	60f8      	str	r0, [r7, #12]
 80601c2:	60b9      	str	r1, [r7, #8]
 80601c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80601c6:	2300      	movs	r3, #0
 80601c8:	617b      	str	r3, [r7, #20]
 80601ca:	e009      	b.n	80601e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80601cc:	68bb      	ldr	r3, [r7, #8]
 80601ce:	1c5a      	adds	r2, r3, #1
 80601d0:	60ba      	str	r2, [r7, #8]
 80601d2:	781b      	ldrb	r3, [r3, #0]
 80601d4:	4618      	mov	r0, r3
 80601d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80601da:	697b      	ldr	r3, [r7, #20]
 80601dc:	3301      	adds	r3, #1
 80601de:	617b      	str	r3, [r7, #20]
 80601e0:	697a      	ldr	r2, [r7, #20]
 80601e2:	687b      	ldr	r3, [r7, #4]
 80601e4:	429a      	cmp	r2, r3
 80601e6:	dbf1      	blt.n	80601cc <_write+0x12>
  }
  return len;
 80601e8:	687b      	ldr	r3, [r7, #4]
}
 80601ea:	4618      	mov	r0, r3
 80601ec:	3718      	adds	r7, #24
 80601ee:	46bd      	mov	sp, r7
 80601f0:	bd80      	pop	{r7, pc}

080601f2 <_close>:

int _close(int file)
{
 80601f2:	b480      	push	{r7}
 80601f4:	b083      	sub	sp, #12
 80601f6:	af00      	add	r7, sp, #0
 80601f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80601fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80601fe:	4618      	mov	r0, r3
 8060200:	370c      	adds	r7, #12
 8060202:	46bd      	mov	sp, r7
 8060204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060208:	4770      	bx	lr

0806020a <_fstat>:


int _fstat(int file, struct stat *st)
{
 806020a:	b480      	push	{r7}
 806020c:	b083      	sub	sp, #12
 806020e:	af00      	add	r7, sp, #0
 8060210:	6078      	str	r0, [r7, #4]
 8060212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8060214:	683b      	ldr	r3, [r7, #0]
 8060216:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 806021a:	605a      	str	r2, [r3, #4]
  return 0;
 806021c:	2300      	movs	r3, #0
}
 806021e:	4618      	mov	r0, r3
 8060220:	370c      	adds	r7, #12
 8060222:	46bd      	mov	sp, r7
 8060224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060228:	4770      	bx	lr

0806022a <_isatty>:

int _isatty(int file)
{
 806022a:	b480      	push	{r7}
 806022c:	b083      	sub	sp, #12
 806022e:	af00      	add	r7, sp, #0
 8060230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8060232:	2301      	movs	r3, #1
}
 8060234:	4618      	mov	r0, r3
 8060236:	370c      	adds	r7, #12
 8060238:	46bd      	mov	sp, r7
 806023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806023e:	4770      	bx	lr

08060240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8060240:	b480      	push	{r7}
 8060242:	b085      	sub	sp, #20
 8060244:	af00      	add	r7, sp, #0
 8060246:	60f8      	str	r0, [r7, #12]
 8060248:	60b9      	str	r1, [r7, #8]
 806024a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 806024c:	2300      	movs	r3, #0
}
 806024e:	4618      	mov	r0, r3
 8060250:	3714      	adds	r7, #20
 8060252:	46bd      	mov	sp, r7
 8060254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060258:	4770      	bx	lr
	...

0806025c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 806025c:	b580      	push	{r7, lr}
 806025e:	b086      	sub	sp, #24
 8060260:	af00      	add	r7, sp, #0
 8060262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8060264:	4a14      	ldr	r2, [pc, #80]	@ (80602b8 <_sbrk+0x5c>)
 8060266:	4b15      	ldr	r3, [pc, #84]	@ (80602bc <_sbrk+0x60>)
 8060268:	1ad3      	subs	r3, r2, r3
 806026a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 806026c:	697b      	ldr	r3, [r7, #20]
 806026e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8060270:	4b13      	ldr	r3, [pc, #76]	@ (80602c0 <_sbrk+0x64>)
 8060272:	681b      	ldr	r3, [r3, #0]
 8060274:	2b00      	cmp	r3, #0
 8060276:	d102      	bne.n	806027e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8060278:	4b11      	ldr	r3, [pc, #68]	@ (80602c0 <_sbrk+0x64>)
 806027a:	4a12      	ldr	r2, [pc, #72]	@ (80602c4 <_sbrk+0x68>)
 806027c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 806027e:	4b10      	ldr	r3, [pc, #64]	@ (80602c0 <_sbrk+0x64>)
 8060280:	681a      	ldr	r2, [r3, #0]
 8060282:	687b      	ldr	r3, [r7, #4]
 8060284:	4413      	add	r3, r2
 8060286:	693a      	ldr	r2, [r7, #16]
 8060288:	429a      	cmp	r2, r3
 806028a:	d207      	bcs.n	806029c <_sbrk+0x40>
  {
    errno = ENOMEM;
 806028c:	f009 fb28 	bl	80698e0 <__errno>
 8060290:	4603      	mov	r3, r0
 8060292:	220c      	movs	r2, #12
 8060294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8060296:	f04f 33ff 	mov.w	r3, #4294967295
 806029a:	e009      	b.n	80602b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 806029c:	4b08      	ldr	r3, [pc, #32]	@ (80602c0 <_sbrk+0x64>)
 806029e:	681b      	ldr	r3, [r3, #0]
 80602a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80602a2:	4b07      	ldr	r3, [pc, #28]	@ (80602c0 <_sbrk+0x64>)
 80602a4:	681a      	ldr	r2, [r3, #0]
 80602a6:	687b      	ldr	r3, [r7, #4]
 80602a8:	4413      	add	r3, r2
 80602aa:	4a05      	ldr	r2, [pc, #20]	@ (80602c0 <_sbrk+0x64>)
 80602ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80602ae:	68fb      	ldr	r3, [r7, #12]
}
 80602b0:	4618      	mov	r0, r3
 80602b2:	3718      	adds	r7, #24
 80602b4:	46bd      	mov	sp, r7
 80602b6:	bd80      	pop	{r7, pc}
 80602b8:	24080000 	.word	0x24080000
 80602bc:	00000800 	.word	0x00000800
 80602c0:	2406e964 	.word	0x2406e964
 80602c4:	2406ead8 	.word	0x2406ead8

080602c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80602c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8060304 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80602cc:	f7fc ff2a 	bl	805d124 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80602d0:	f7fc fe7a 	bl	805cfc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80602d4:	480c      	ldr	r0, [pc, #48]	@ (8060308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80602d6:	490d      	ldr	r1, [pc, #52]	@ (806030c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80602d8:	4a0d      	ldr	r2, [pc, #52]	@ (8060310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80602da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80602dc:	e002      	b.n	80602e4 <LoopCopyDataInit>

080602de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80602de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80602e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80602e2:	3304      	adds	r3, #4

080602e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80602e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80602e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80602e8:	d3f9      	bcc.n	80602de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80602ea:	4a0a      	ldr	r2, [pc, #40]	@ (8060314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80602ec:	4c0a      	ldr	r4, [pc, #40]	@ (8060318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80602ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80602f0:	e001      	b.n	80602f6 <LoopFillZerobss>

080602f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80602f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80602f4:	3204      	adds	r2, #4

080602f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80602f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80602f8:	d3fb      	bcc.n	80602f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80602fa:	f009 faf7 	bl	80698ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80602fe:	f7fd fd33 	bl	805dd68 <main>
  bx  lr
 8060302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8060304:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8060308:	24014728 	.word	0x24014728
  ldr r1, =_edata
 806030c:	24014a68 	.word	0x24014a68
  ldr r2, =_sidata
 8060310:	08072740 	.word	0x08072740
  ldr r2, =_sbss
 8060314:	24014a68 	.word	0x24014a68
  ldr r4, =_ebss
 8060318:	2406ead4 	.word	0x2406ead4

0806031c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 806031c:	e7fe      	b.n	806031c <ADC3_IRQHandler>
	...

08060320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8060320:	b580      	push	{r7, lr}
 8060322:	b082      	sub	sp, #8
 8060324:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08140000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8060326:	2003      	movs	r0, #3
 8060328:	f000 f9bd 	bl	80606a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 806032c:	f003 fd2c 	bl	8063d88 <HAL_RCC_GetSysClockFreq>
 8060330:	4602      	mov	r2, r0
 8060332:	4b15      	ldr	r3, [pc, #84]	@ (8060388 <HAL_Init+0x68>)
 8060334:	699b      	ldr	r3, [r3, #24]
 8060336:	0a1b      	lsrs	r3, r3, #8
 8060338:	f003 030f 	and.w	r3, r3, #15
 806033c:	4913      	ldr	r1, [pc, #76]	@ (806038c <HAL_Init+0x6c>)
 806033e:	5ccb      	ldrb	r3, [r1, r3]
 8060340:	f003 031f 	and.w	r3, r3, #31
 8060344:	fa22 f303 	lsr.w	r3, r2, r3
 8060348:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 806034a:	4b0f      	ldr	r3, [pc, #60]	@ (8060388 <HAL_Init+0x68>)
 806034c:	699b      	ldr	r3, [r3, #24]
 806034e:	f003 030f 	and.w	r3, r3, #15
 8060352:	4a0e      	ldr	r2, [pc, #56]	@ (806038c <HAL_Init+0x6c>)
 8060354:	5cd3      	ldrb	r3, [r2, r3]
 8060356:	f003 031f 	and.w	r3, r3, #31
 806035a:	687a      	ldr	r2, [r7, #4]
 806035c:	fa22 f303 	lsr.w	r3, r2, r3
 8060360:	4a0b      	ldr	r2, [pc, #44]	@ (8060390 <HAL_Init+0x70>)
 8060362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8060364:	4a0b      	ldr	r2, [pc, #44]	@ (8060394 <HAL_Init+0x74>)
 8060366:	687b      	ldr	r3, [r7, #4]
 8060368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 806036a:	200f      	movs	r0, #15
 806036c:	f7ff fb26 	bl	805f9bc <HAL_InitTick>
 8060370:	4603      	mov	r3, r0
 8060372:	2b00      	cmp	r3, #0
 8060374:	d001      	beq.n	806037a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8060376:	2301      	movs	r3, #1
 8060378:	e002      	b.n	8060380 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 806037a:	f7ff fa17 	bl	805f7ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 806037e:	2300      	movs	r3, #0
}
 8060380:	4618      	mov	r0, r3
 8060382:	3708      	adds	r7, #8
 8060384:	46bd      	mov	sp, r7
 8060386:	bd80      	pop	{r7, pc}
 8060388:	58024400 	.word	0x58024400
 806038c:	080724e8 	.word	0x080724e8
 8060390:	240148fc 	.word	0x240148fc
 8060394:	240148f8 	.word	0x240148f8

08060398 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8060398:	b580      	push	{r7, lr}
 806039a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 806039c:	4b26      	ldr	r3, [pc, #152]	@ (8060438 <HAL_DeInit+0xa0>)
 806039e:	4a27      	ldr	r2, [pc, #156]	@ (806043c <HAL_DeInit+0xa4>)
 80603a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 80603a2:	4b25      	ldr	r3, [pc, #148]	@ (8060438 <HAL_DeInit+0xa0>)
 80603a4:	2200      	movs	r2, #0
 80603a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 80603a8:	4b23      	ldr	r3, [pc, #140]	@ (8060438 <HAL_DeInit+0xa0>)
 80603aa:	4a25      	ldr	r2, [pc, #148]	@ (8060440 <HAL_DeInit+0xa8>)
 80603ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 80603b0:	4b21      	ldr	r3, [pc, #132]	@ (8060438 <HAL_DeInit+0xa0>)
 80603b2:	2200      	movs	r2, #0
 80603b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 80603b8:	4b1f      	ldr	r3, [pc, #124]	@ (8060438 <HAL_DeInit+0xa0>)
 80603ba:	f240 2271 	movw	r2, #625	@ 0x271
 80603be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 80603c2:	4b1d      	ldr	r3, [pc, #116]	@ (8060438 <HAL_DeInit+0xa0>)
 80603c4:	2200      	movs	r2, #0
 80603c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 80603ca:	4b1b      	ldr	r3, [pc, #108]	@ (8060438 <HAL_DeInit+0xa0>)
 80603cc:	4a1d      	ldr	r2, [pc, #116]	@ (8060444 <HAL_DeInit+0xac>)
 80603ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 80603d2:	4b19      	ldr	r3, [pc, #100]	@ (8060438 <HAL_DeInit+0xa0>)
 80603d4:	2200      	movs	r2, #0
 80603d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 80603da:	4b17      	ldr	r3, [pc, #92]	@ (8060438 <HAL_DeInit+0xa0>)
 80603dc:	2218      	movs	r2, #24
 80603de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 80603e2:	4b15      	ldr	r3, [pc, #84]	@ (8060438 <HAL_DeInit+0xa0>)
 80603e4:	2200      	movs	r2, #0
 80603e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 80603ea:	4b13      	ldr	r3, [pc, #76]	@ (8060438 <HAL_DeInit+0xa0>)
 80603ec:	4a16      	ldr	r2, [pc, #88]	@ (8060448 <HAL_DeInit+0xb0>)
 80603ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 80603f2:	4b11      	ldr	r3, [pc, #68]	@ (8060438 <HAL_DeInit+0xa0>)
 80603f4:	2200      	movs	r2, #0
 80603f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 80603fa:	4b0f      	ldr	r3, [pc, #60]	@ (8060438 <HAL_DeInit+0xa0>)
 80603fc:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8060400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8060404:	4b0c      	ldr	r3, [pc, #48]	@ (8060438 <HAL_DeInit+0xa0>)
 8060406:	2200      	movs	r2, #0
 8060408:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 806040c:	4b0a      	ldr	r3, [pc, #40]	@ (8060438 <HAL_DeInit+0xa0>)
 806040e:	4a0f      	ldr	r2, [pc, #60]	@ (806044c <HAL_DeInit+0xb4>)
 8060410:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8060414:	4b08      	ldr	r3, [pc, #32]	@ (8060438 <HAL_DeInit+0xa0>)
 8060416:	2200      	movs	r2, #0
 8060418:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 806041c:	4b06      	ldr	r3, [pc, #24]	@ (8060438 <HAL_DeInit+0xa0>)
 806041e:	4a0c      	ldr	r2, [pc, #48]	@ (8060450 <HAL_DeInit+0xb8>)
 8060420:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8060424:	4b04      	ldr	r3, [pc, #16]	@ (8060438 <HAL_DeInit+0xa0>)
 8060426:	2200      	movs	r2, #0
 8060428:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 806042c:	f000 f812 	bl	8060454 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8060430:	2300      	movs	r3, #0
}
 8060432:	4618      	mov	r0, r3
 8060434:	bd80      	pop	{r7, pc}
 8060436:	bf00      	nop
 8060438:	58024400 	.word	0x58024400
 806043c:	00015031 	.word	0x00015031
 8060440:	0a00c023 	.word	0x0a00c023
 8060444:	032807ff 	.word	0x032807ff
 8060448:	e8ffc3ff 	.word	0xe8ffc3ff
 806044c:	31d73033 	.word	0x31d73033
 8060450:	0020deaa 	.word	0x0020deaa

08060454 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8060454:	b480      	push	{r7}
 8060456:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8060458:	bf00      	nop
 806045a:	46bd      	mov	sp, r7
 806045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060460:	4770      	bx	lr
	...

08060464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8060464:	b480      	push	{r7}
 8060466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8060468:	4b06      	ldr	r3, [pc, #24]	@ (8060484 <HAL_IncTick+0x20>)
 806046a:	781b      	ldrb	r3, [r3, #0]
 806046c:	461a      	mov	r2, r3
 806046e:	4b06      	ldr	r3, [pc, #24]	@ (8060488 <HAL_IncTick+0x24>)
 8060470:	681b      	ldr	r3, [r3, #0]
 8060472:	4413      	add	r3, r2
 8060474:	4a04      	ldr	r2, [pc, #16]	@ (8060488 <HAL_IncTick+0x24>)
 8060476:	6013      	str	r3, [r2, #0]
}
 8060478:	bf00      	nop
 806047a:	46bd      	mov	sp, r7
 806047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060480:	4770      	bx	lr
 8060482:	bf00      	nop
 8060484:	24014a08 	.word	0x24014a08
 8060488:	2406e968 	.word	0x2406e968

0806048c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 806048c:	b480      	push	{r7}
 806048e:	af00      	add	r7, sp, #0
  return uwTick;
 8060490:	4b03      	ldr	r3, [pc, #12]	@ (80604a0 <HAL_GetTick+0x14>)
 8060492:	681b      	ldr	r3, [r3, #0]
}
 8060494:	4618      	mov	r0, r3
 8060496:	46bd      	mov	sp, r7
 8060498:	f85d 7b04 	ldr.w	r7, [sp], #4
 806049c:	4770      	bx	lr
 806049e:	bf00      	nop
 80604a0:	2406e968 	.word	0x2406e968

080604a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80604a4:	b580      	push	{r7, lr}
 80604a6:	b084      	sub	sp, #16
 80604a8:	af00      	add	r7, sp, #0
 80604aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80604ac:	f7ff ffee 	bl	806048c <HAL_GetTick>
 80604b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80604b2:	687b      	ldr	r3, [r7, #4]
 80604b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80604b6:	68fb      	ldr	r3, [r7, #12]
 80604b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80604bc:	d005      	beq.n	80604ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80604be:	4b0a      	ldr	r3, [pc, #40]	@ (80604e8 <HAL_Delay+0x44>)
 80604c0:	781b      	ldrb	r3, [r3, #0]
 80604c2:	461a      	mov	r2, r3
 80604c4:	68fb      	ldr	r3, [r7, #12]
 80604c6:	4413      	add	r3, r2
 80604c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80604ca:	bf00      	nop
 80604cc:	f7ff ffde 	bl	806048c <HAL_GetTick>
 80604d0:	4602      	mov	r2, r0
 80604d2:	68bb      	ldr	r3, [r7, #8]
 80604d4:	1ad3      	subs	r3, r2, r3
 80604d6:	68fa      	ldr	r2, [r7, #12]
 80604d8:	429a      	cmp	r2, r3
 80604da:	d8f7      	bhi.n	80604cc <HAL_Delay+0x28>
  {
  }
}
 80604dc:	bf00      	nop
 80604de:	bf00      	nop
 80604e0:	3710      	adds	r7, #16
 80604e2:	46bd      	mov	sp, r7
 80604e4:	bd80      	pop	{r7, pc}
 80604e6:	bf00      	nop
 80604e8:	24014a08 	.word	0x24014a08

080604ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80604ec:	b480      	push	{r7}
 80604ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80604f0:	4b03      	ldr	r3, [pc, #12]	@ (8060500 <HAL_GetREVID+0x14>)
 80604f2:	681b      	ldr	r3, [r3, #0]
 80604f4:	0c1b      	lsrs	r3, r3, #16
}
 80604f6:	4618      	mov	r0, r3
 80604f8:	46bd      	mov	sp, r7
 80604fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80604fe:	4770      	bx	lr
 8060500:	5c001000 	.word	0x5c001000

08060504 <__NVIC_SetPriorityGrouping>:
{
 8060504:	b480      	push	{r7}
 8060506:	b085      	sub	sp, #20
 8060508:	af00      	add	r7, sp, #0
 806050a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 806050c:	687b      	ldr	r3, [r7, #4]
 806050e:	f003 0307 	and.w	r3, r3, #7
 8060512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8060514:	4b0b      	ldr	r3, [pc, #44]	@ (8060544 <__NVIC_SetPriorityGrouping+0x40>)
 8060516:	68db      	ldr	r3, [r3, #12]
 8060518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 806051a:	68ba      	ldr	r2, [r7, #8]
 806051c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8060520:	4013      	ands	r3, r2
 8060522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8060524:	68fb      	ldr	r3, [r7, #12]
 8060526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8060528:	68bb      	ldr	r3, [r7, #8]
 806052a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 806052c:	4b06      	ldr	r3, [pc, #24]	@ (8060548 <__NVIC_SetPriorityGrouping+0x44>)
 806052e:	4313      	orrs	r3, r2
 8060530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8060532:	4a04      	ldr	r2, [pc, #16]	@ (8060544 <__NVIC_SetPriorityGrouping+0x40>)
 8060534:	68bb      	ldr	r3, [r7, #8]
 8060536:	60d3      	str	r3, [r2, #12]
}
 8060538:	bf00      	nop
 806053a:	3714      	adds	r7, #20
 806053c:	46bd      	mov	sp, r7
 806053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060542:	4770      	bx	lr
 8060544:	e000ed00 	.word	0xe000ed00
 8060548:	05fa0000 	.word	0x05fa0000

0806054c <__NVIC_GetPriorityGrouping>:
{
 806054c:	b480      	push	{r7}
 806054e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8060550:	4b04      	ldr	r3, [pc, #16]	@ (8060564 <__NVIC_GetPriorityGrouping+0x18>)
 8060552:	68db      	ldr	r3, [r3, #12]
 8060554:	0a1b      	lsrs	r3, r3, #8
 8060556:	f003 0307 	and.w	r3, r3, #7
}
 806055a:	4618      	mov	r0, r3
 806055c:	46bd      	mov	sp, r7
 806055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060562:	4770      	bx	lr
 8060564:	e000ed00 	.word	0xe000ed00

08060568 <__NVIC_EnableIRQ>:
{
 8060568:	b480      	push	{r7}
 806056a:	b083      	sub	sp, #12
 806056c:	af00      	add	r7, sp, #0
 806056e:	4603      	mov	r3, r0
 8060570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8060572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8060576:	2b00      	cmp	r3, #0
 8060578:	db0b      	blt.n	8060592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 806057a:	88fb      	ldrh	r3, [r7, #6]
 806057c:	f003 021f 	and.w	r2, r3, #31
 8060580:	4907      	ldr	r1, [pc, #28]	@ (80605a0 <__NVIC_EnableIRQ+0x38>)
 8060582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8060586:	095b      	lsrs	r3, r3, #5
 8060588:	2001      	movs	r0, #1
 806058a:	fa00 f202 	lsl.w	r2, r0, r2
 806058e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8060592:	bf00      	nop
 8060594:	370c      	adds	r7, #12
 8060596:	46bd      	mov	sp, r7
 8060598:	f85d 7b04 	ldr.w	r7, [sp], #4
 806059c:	4770      	bx	lr
 806059e:	bf00      	nop
 80605a0:	e000e100 	.word	0xe000e100

080605a4 <__NVIC_DisableIRQ>:
{
 80605a4:	b480      	push	{r7}
 80605a6:	b083      	sub	sp, #12
 80605a8:	af00      	add	r7, sp, #0
 80605aa:	4603      	mov	r3, r0
 80605ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80605ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80605b2:	2b00      	cmp	r3, #0
 80605b4:	db12      	blt.n	80605dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80605b6:	88fb      	ldrh	r3, [r7, #6]
 80605b8:	f003 021f 	and.w	r2, r3, #31
 80605bc:	490a      	ldr	r1, [pc, #40]	@ (80605e8 <__NVIC_DisableIRQ+0x44>)
 80605be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80605c2:	095b      	lsrs	r3, r3, #5
 80605c4:	2001      	movs	r0, #1
 80605c6:	fa00 f202 	lsl.w	r2, r0, r2
 80605ca:	3320      	adds	r3, #32
 80605cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80605d0:	f3bf 8f4f 	dsb	sy
}
 80605d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80605d6:	f3bf 8f6f 	isb	sy
}
 80605da:	bf00      	nop
}
 80605dc:	bf00      	nop
 80605de:	370c      	adds	r7, #12
 80605e0:	46bd      	mov	sp, r7
 80605e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80605e6:	4770      	bx	lr
 80605e8:	e000e100 	.word	0xe000e100

080605ec <__NVIC_SetPriority>:
{
 80605ec:	b480      	push	{r7}
 80605ee:	b083      	sub	sp, #12
 80605f0:	af00      	add	r7, sp, #0
 80605f2:	4603      	mov	r3, r0
 80605f4:	6039      	str	r1, [r7, #0]
 80605f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80605f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80605fc:	2b00      	cmp	r3, #0
 80605fe:	db0a      	blt.n	8060616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060600:	683b      	ldr	r3, [r7, #0]
 8060602:	b2da      	uxtb	r2, r3
 8060604:	490c      	ldr	r1, [pc, #48]	@ (8060638 <__NVIC_SetPriority+0x4c>)
 8060606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 806060a:	0112      	lsls	r2, r2, #4
 806060c:	b2d2      	uxtb	r2, r2
 806060e:	440b      	add	r3, r1
 8060610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8060614:	e00a      	b.n	806062c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060616:	683b      	ldr	r3, [r7, #0]
 8060618:	b2da      	uxtb	r2, r3
 806061a:	4908      	ldr	r1, [pc, #32]	@ (806063c <__NVIC_SetPriority+0x50>)
 806061c:	88fb      	ldrh	r3, [r7, #6]
 806061e:	f003 030f 	and.w	r3, r3, #15
 8060622:	3b04      	subs	r3, #4
 8060624:	0112      	lsls	r2, r2, #4
 8060626:	b2d2      	uxtb	r2, r2
 8060628:	440b      	add	r3, r1
 806062a:	761a      	strb	r2, [r3, #24]
}
 806062c:	bf00      	nop
 806062e:	370c      	adds	r7, #12
 8060630:	46bd      	mov	sp, r7
 8060632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060636:	4770      	bx	lr
 8060638:	e000e100 	.word	0xe000e100
 806063c:	e000ed00 	.word	0xe000ed00

08060640 <NVIC_EncodePriority>:
{
 8060640:	b480      	push	{r7}
 8060642:	b089      	sub	sp, #36	@ 0x24
 8060644:	af00      	add	r7, sp, #0
 8060646:	60f8      	str	r0, [r7, #12]
 8060648:	60b9      	str	r1, [r7, #8]
 806064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 806064c:	68fb      	ldr	r3, [r7, #12]
 806064e:	f003 0307 	and.w	r3, r3, #7
 8060652:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8060654:	69fb      	ldr	r3, [r7, #28]
 8060656:	f1c3 0307 	rsb	r3, r3, #7
 806065a:	2b04      	cmp	r3, #4
 806065c:	bf28      	it	cs
 806065e:	2304      	movcs	r3, #4
 8060660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8060662:	69fb      	ldr	r3, [r7, #28]
 8060664:	3304      	adds	r3, #4
 8060666:	2b06      	cmp	r3, #6
 8060668:	d902      	bls.n	8060670 <NVIC_EncodePriority+0x30>
 806066a:	69fb      	ldr	r3, [r7, #28]
 806066c:	3b03      	subs	r3, #3
 806066e:	e000      	b.n	8060672 <NVIC_EncodePriority+0x32>
 8060670:	2300      	movs	r3, #0
 8060672:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060674:	f04f 32ff 	mov.w	r2, #4294967295
 8060678:	69bb      	ldr	r3, [r7, #24]
 806067a:	fa02 f303 	lsl.w	r3, r2, r3
 806067e:	43da      	mvns	r2, r3
 8060680:	68bb      	ldr	r3, [r7, #8]
 8060682:	401a      	ands	r2, r3
 8060684:	697b      	ldr	r3, [r7, #20]
 8060686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8060688:	f04f 31ff 	mov.w	r1, #4294967295
 806068c:	697b      	ldr	r3, [r7, #20]
 806068e:	fa01 f303 	lsl.w	r3, r1, r3
 8060692:	43d9      	mvns	r1, r3
 8060694:	687b      	ldr	r3, [r7, #4]
 8060696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060698:	4313      	orrs	r3, r2
}
 806069a:	4618      	mov	r0, r3
 806069c:	3724      	adds	r7, #36	@ 0x24
 806069e:	46bd      	mov	sp, r7
 80606a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80606a4:	4770      	bx	lr

080606a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80606a6:	b580      	push	{r7, lr}
 80606a8:	b082      	sub	sp, #8
 80606aa:	af00      	add	r7, sp, #0
 80606ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80606ae:	6878      	ldr	r0, [r7, #4]
 80606b0:	f7ff ff28 	bl	8060504 <__NVIC_SetPriorityGrouping>
}
 80606b4:	bf00      	nop
 80606b6:	3708      	adds	r7, #8
 80606b8:	46bd      	mov	sp, r7
 80606ba:	bd80      	pop	{r7, pc}

080606bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80606bc:	b580      	push	{r7, lr}
 80606be:	b086      	sub	sp, #24
 80606c0:	af00      	add	r7, sp, #0
 80606c2:	4603      	mov	r3, r0
 80606c4:	60b9      	str	r1, [r7, #8]
 80606c6:	607a      	str	r2, [r7, #4]
 80606c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80606ca:	f7ff ff3f 	bl	806054c <__NVIC_GetPriorityGrouping>
 80606ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80606d0:	687a      	ldr	r2, [r7, #4]
 80606d2:	68b9      	ldr	r1, [r7, #8]
 80606d4:	6978      	ldr	r0, [r7, #20]
 80606d6:	f7ff ffb3 	bl	8060640 <NVIC_EncodePriority>
 80606da:	4602      	mov	r2, r0
 80606dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80606e0:	4611      	mov	r1, r2
 80606e2:	4618      	mov	r0, r3
 80606e4:	f7ff ff82 	bl	80605ec <__NVIC_SetPriority>
}
 80606e8:	bf00      	nop
 80606ea:	3718      	adds	r7, #24
 80606ec:	46bd      	mov	sp, r7
 80606ee:	bd80      	pop	{r7, pc}

080606f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80606f0:	b580      	push	{r7, lr}
 80606f2:	b082      	sub	sp, #8
 80606f4:	af00      	add	r7, sp, #0
 80606f6:	4603      	mov	r3, r0
 80606f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80606fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80606fe:	4618      	mov	r0, r3
 8060700:	f7ff ff32 	bl	8060568 <__NVIC_EnableIRQ>
}
 8060704:	bf00      	nop
 8060706:	3708      	adds	r7, #8
 8060708:	46bd      	mov	sp, r7
 806070a:	bd80      	pop	{r7, pc}

0806070c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 806070c:	b580      	push	{r7, lr}
 806070e:	b082      	sub	sp, #8
 8060710:	af00      	add	r7, sp, #0
 8060712:	4603      	mov	r3, r0
 8060714:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8060716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 806071a:	4618      	mov	r0, r3
 806071c:	f7ff ff42 	bl	80605a4 <__NVIC_DisableIRQ>
}
 8060720:	bf00      	nop
 8060722:	3708      	adds	r7, #8
 8060724:	46bd      	mov	sp, r7
 8060726:	bd80      	pop	{r7, pc}

08060728 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8060728:	b480      	push	{r7}
 806072a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 806072c:	f3bf 8f5f 	dmb	sy
}
 8060730:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8060732:	4b07      	ldr	r3, [pc, #28]	@ (8060750 <HAL_MPU_Disable+0x28>)
 8060734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8060736:	4a06      	ldr	r2, [pc, #24]	@ (8060750 <HAL_MPU_Disable+0x28>)
 8060738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 806073c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 806073e:	4b05      	ldr	r3, [pc, #20]	@ (8060754 <HAL_MPU_Disable+0x2c>)
 8060740:	2200      	movs	r2, #0
 8060742:	605a      	str	r2, [r3, #4]
}
 8060744:	bf00      	nop
 8060746:	46bd      	mov	sp, r7
 8060748:	f85d 7b04 	ldr.w	r7, [sp], #4
 806074c:	4770      	bx	lr
 806074e:	bf00      	nop
 8060750:	e000ed00 	.word	0xe000ed00
 8060754:	e000ed90 	.word	0xe000ed90

08060758 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8060758:	b480      	push	{r7}
 806075a:	b083      	sub	sp, #12
 806075c:	af00      	add	r7, sp, #0
 806075e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8060760:	4a0b      	ldr	r2, [pc, #44]	@ (8060790 <HAL_MPU_Enable+0x38>)
 8060762:	687b      	ldr	r3, [r7, #4]
 8060764:	f043 0301 	orr.w	r3, r3, #1
 8060768:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 806076a:	4b0a      	ldr	r3, [pc, #40]	@ (8060794 <HAL_MPU_Enable+0x3c>)
 806076c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806076e:	4a09      	ldr	r2, [pc, #36]	@ (8060794 <HAL_MPU_Enable+0x3c>)
 8060770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8060774:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8060776:	f3bf 8f4f 	dsb	sy
}
 806077a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 806077c:	f3bf 8f6f 	isb	sy
}
 8060780:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8060782:	bf00      	nop
 8060784:	370c      	adds	r7, #12
 8060786:	46bd      	mov	sp, r7
 8060788:	f85d 7b04 	ldr.w	r7, [sp], #4
 806078c:	4770      	bx	lr
 806078e:	bf00      	nop
 8060790:	e000ed90 	.word	0xe000ed90
 8060794:	e000ed00 	.word	0xe000ed00

08060798 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8060798:	b480      	push	{r7}
 806079a:	b083      	sub	sp, #12
 806079c:	af00      	add	r7, sp, #0
 806079e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80607a0:	687b      	ldr	r3, [r7, #4]
 80607a2:	785a      	ldrb	r2, [r3, #1]
 80607a4:	4b1b      	ldr	r3, [pc, #108]	@ (8060814 <HAL_MPU_ConfigRegion+0x7c>)
 80607a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80607a8:	4b1a      	ldr	r3, [pc, #104]	@ (8060814 <HAL_MPU_ConfigRegion+0x7c>)
 80607aa:	691b      	ldr	r3, [r3, #16]
 80607ac:	4a19      	ldr	r2, [pc, #100]	@ (8060814 <HAL_MPU_ConfigRegion+0x7c>)
 80607ae:	f023 0301 	bic.w	r3, r3, #1
 80607b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80607b4:	4a17      	ldr	r2, [pc, #92]	@ (8060814 <HAL_MPU_ConfigRegion+0x7c>)
 80607b6:	687b      	ldr	r3, [r7, #4]
 80607b8:	685b      	ldr	r3, [r3, #4]
 80607ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80607bc:	687b      	ldr	r3, [r7, #4]
 80607be:	7b1b      	ldrb	r3, [r3, #12]
 80607c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80607c2:	687b      	ldr	r3, [r7, #4]
 80607c4:	7adb      	ldrb	r3, [r3, #11]
 80607c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80607c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80607ca:	687b      	ldr	r3, [r7, #4]
 80607cc:	7a9b      	ldrb	r3, [r3, #10]
 80607ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80607d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80607d2:	687b      	ldr	r3, [r7, #4]
 80607d4:	7b5b      	ldrb	r3, [r3, #13]
 80607d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80607d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80607da:	687b      	ldr	r3, [r7, #4]
 80607dc:	7b9b      	ldrb	r3, [r3, #14]
 80607de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80607e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80607e2:	687b      	ldr	r3, [r7, #4]
 80607e4:	7bdb      	ldrb	r3, [r3, #15]
 80607e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80607e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80607ea:	687b      	ldr	r3, [r7, #4]
 80607ec:	7a5b      	ldrb	r3, [r3, #9]
 80607ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80607f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80607f2:	687b      	ldr	r3, [r7, #4]
 80607f4:	7a1b      	ldrb	r3, [r3, #8]
 80607f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80607f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80607fa:	687a      	ldr	r2, [r7, #4]
 80607fc:	7812      	ldrb	r2, [r2, #0]
 80607fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8060800:	4a04      	ldr	r2, [pc, #16]	@ (8060814 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8060802:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8060804:	6113      	str	r3, [r2, #16]
}
 8060806:	bf00      	nop
 8060808:	370c      	adds	r7, #12
 806080a:	46bd      	mov	sp, r7
 806080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060810:	4770      	bx	lr
 8060812:	bf00      	nop
 8060814:	e000ed90 	.word	0xe000ed90

08060818 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8060818:	b580      	push	{r7, lr}
 806081a:	b08a      	sub	sp, #40	@ 0x28
 806081c:	af00      	add	r7, sp, #0
 806081e:	60f8      	str	r0, [r7, #12]
 8060820:	60b9      	str	r1, [r7, #8]
 8060822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8060824:	68bb      	ldr	r3, [r7, #8]
 8060826:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8060828:	687b      	ldr	r3, [r7, #4]
 806082a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 806082c:	2308      	movs	r3, #8
 806082e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8060830:	4b40      	ldr	r3, [pc, #256]	@ (8060934 <HAL_FLASH_Program+0x11c>)
 8060832:	7d1b      	ldrb	r3, [r3, #20]
 8060834:	2b01      	cmp	r3, #1
 8060836:	d101      	bne.n	806083c <HAL_FLASH_Program+0x24>
 8060838:	2302      	movs	r3, #2
 806083a:	e076      	b.n	806092a <HAL_FLASH_Program+0x112>
 806083c:	4b3d      	ldr	r3, [pc, #244]	@ (8060934 <HAL_FLASH_Program+0x11c>)
 806083e:	2201      	movs	r2, #1
 8060840:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8060842:	68bb      	ldr	r3, [r7, #8]
 8060844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8060848:	d306      	bcc.n	8060858 <HAL_FLASH_Program+0x40>
 806084a:	68bb      	ldr	r3, [r7, #8]
 806084c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8060850:	d202      	bcs.n	8060858 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8060852:	2301      	movs	r3, #1
 8060854:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8060856:	e00c      	b.n	8060872 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8060858:	68bb      	ldr	r3, [r7, #8]
 806085a:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 806085e:	d306      	bcc.n	806086e <HAL_FLASH_Program+0x56>
 8060860:	68bb      	ldr	r3, [r7, #8]
 8060862:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8060866:	d202      	bcs.n	806086e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8060868:	2302      	movs	r3, #2
 806086a:	61bb      	str	r3, [r7, #24]
 806086c:	e001      	b.n	8060872 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 806086e:	2301      	movs	r3, #1
 8060870:	e05b      	b.n	806092a <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8060872:	4b30      	ldr	r3, [pc, #192]	@ (8060934 <HAL_FLASH_Program+0x11c>)
 8060874:	2200      	movs	r2, #0
 8060876:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8060878:	69b9      	ldr	r1, [r7, #24]
 806087a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 806087e:	f000 f8c1 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060882:	4603      	mov	r3, r0
 8060884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8060888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 806088c:	2b00      	cmp	r3, #0
 806088e:	d147      	bne.n	8060920 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8060890:	69bb      	ldr	r3, [r7, #24]
 8060892:	2b01      	cmp	r3, #1
 8060894:	d106      	bne.n	80608a4 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8060896:	4b28      	ldr	r3, [pc, #160]	@ (8060938 <HAL_FLASH_Program+0x120>)
 8060898:	68db      	ldr	r3, [r3, #12]
 806089a:	4a27      	ldr	r2, [pc, #156]	@ (8060938 <HAL_FLASH_Program+0x120>)
 806089c:	f043 0302 	orr.w	r3, r3, #2
 80608a0:	60d3      	str	r3, [r2, #12]
 80608a2:	e007      	b.n	80608b4 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80608a4:	4b24      	ldr	r3, [pc, #144]	@ (8060938 <HAL_FLASH_Program+0x120>)
 80608a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80608aa:	4a23      	ldr	r2, [pc, #140]	@ (8060938 <HAL_FLASH_Program+0x120>)
 80608ac:	f043 0302 	orr.w	r3, r3, #2
 80608b0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80608b4:	f3bf 8f6f 	isb	sy
}
 80608b8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80608ba:	f3bf 8f4f 	dsb	sy
}
 80608be:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80608c0:	69fb      	ldr	r3, [r7, #28]
 80608c2:	681a      	ldr	r2, [r3, #0]
 80608c4:	6a3b      	ldr	r3, [r7, #32]
 80608c6:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80608c8:	6a3b      	ldr	r3, [r7, #32]
 80608ca:	3304      	adds	r3, #4
 80608cc:	623b      	str	r3, [r7, #32]
        src_addr++;
 80608ce:	69fb      	ldr	r3, [r7, #28]
 80608d0:	3304      	adds	r3, #4
 80608d2:	61fb      	str	r3, [r7, #28]
        row_index--;
 80608d4:	7dfb      	ldrb	r3, [r7, #23]
 80608d6:	3b01      	subs	r3, #1
 80608d8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80608da:	7dfb      	ldrb	r3, [r7, #23]
 80608dc:	2b00      	cmp	r3, #0
 80608de:	d1ef      	bne.n	80608c0 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80608e0:	f3bf 8f6f 	isb	sy
}
 80608e4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80608e6:	f3bf 8f4f 	dsb	sy
}
 80608ea:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80608ec:	69b9      	ldr	r1, [r7, #24]
 80608ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80608f2:	f000 f887 	bl	8060a04 <FLASH_WaitForLastOperation>
 80608f6:	4603      	mov	r3, r0
 80608f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80608fc:	69bb      	ldr	r3, [r7, #24]
 80608fe:	2b01      	cmp	r3, #1
 8060900:	d106      	bne.n	8060910 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8060902:	4b0d      	ldr	r3, [pc, #52]	@ (8060938 <HAL_FLASH_Program+0x120>)
 8060904:	68db      	ldr	r3, [r3, #12]
 8060906:	4a0c      	ldr	r2, [pc, #48]	@ (8060938 <HAL_FLASH_Program+0x120>)
 8060908:	f023 0302 	bic.w	r3, r3, #2
 806090c:	60d3      	str	r3, [r2, #12]
 806090e:	e007      	b.n	8060920 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8060910:	4b09      	ldr	r3, [pc, #36]	@ (8060938 <HAL_FLASH_Program+0x120>)
 8060912:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060916:	4a08      	ldr	r2, [pc, #32]	@ (8060938 <HAL_FLASH_Program+0x120>)
 8060918:	f023 0302 	bic.w	r3, r3, #2
 806091c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8060920:	4b04      	ldr	r3, [pc, #16]	@ (8060934 <HAL_FLASH_Program+0x11c>)
 8060922:	2200      	movs	r2, #0
 8060924:	751a      	strb	r2, [r3, #20]

  return status;
 8060926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 806092a:	4618      	mov	r0, r3
 806092c:	3728      	adds	r7, #40	@ 0x28
 806092e:	46bd      	mov	sp, r7
 8060930:	bd80      	pop	{r7, pc}
 8060932:	bf00      	nop
 8060934:	2406e96c 	.word	0x2406e96c
 8060938:	52002000 	.word	0x52002000

0806093c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 806093c:	b480      	push	{r7}
 806093e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8060940:	4b18      	ldr	r3, [pc, #96]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 8060942:	68db      	ldr	r3, [r3, #12]
 8060944:	f003 0301 	and.w	r3, r3, #1
 8060948:	2b00      	cmp	r3, #0
 806094a:	d00d      	beq.n	8060968 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 806094c:	4b15      	ldr	r3, [pc, #84]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 806094e:	4a16      	ldr	r2, [pc, #88]	@ (80609a8 <HAL_FLASH_Unlock+0x6c>)
 8060950:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8060952:	4b14      	ldr	r3, [pc, #80]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 8060954:	4a15      	ldr	r2, [pc, #84]	@ (80609ac <HAL_FLASH_Unlock+0x70>)
 8060956:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8060958:	4b12      	ldr	r3, [pc, #72]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 806095a:	68db      	ldr	r3, [r3, #12]
 806095c:	f003 0301 	and.w	r3, r3, #1
 8060960:	2b00      	cmp	r3, #0
 8060962:	d001      	beq.n	8060968 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8060964:	2301      	movs	r3, #1
 8060966:	e018      	b.n	806099a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8060968:	4b0e      	ldr	r3, [pc, #56]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 806096a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 806096e:	f003 0301 	and.w	r3, r3, #1
 8060972:	2b00      	cmp	r3, #0
 8060974:	d010      	beq.n	8060998 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8060976:	4b0b      	ldr	r3, [pc, #44]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 8060978:	4a0b      	ldr	r2, [pc, #44]	@ (80609a8 <HAL_FLASH_Unlock+0x6c>)
 806097a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 806097e:	4b09      	ldr	r3, [pc, #36]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 8060980:	4a0a      	ldr	r2, [pc, #40]	@ (80609ac <HAL_FLASH_Unlock+0x70>)
 8060982:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8060986:	4b07      	ldr	r3, [pc, #28]	@ (80609a4 <HAL_FLASH_Unlock+0x68>)
 8060988:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 806098c:	f003 0301 	and.w	r3, r3, #1
 8060990:	2b00      	cmp	r3, #0
 8060992:	d001      	beq.n	8060998 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8060994:	2301      	movs	r3, #1
 8060996:	e000      	b.n	806099a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8060998:	2300      	movs	r3, #0
}
 806099a:	4618      	mov	r0, r3
 806099c:	46bd      	mov	sp, r7
 806099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80609a2:	4770      	bx	lr
 80609a4:	52002000 	.word	0x52002000
 80609a8:	45670123 	.word	0x45670123
 80609ac:	cdef89ab 	.word	0xcdef89ab

080609b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80609b0:	b480      	push	{r7}
 80609b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80609b4:	4b12      	ldr	r3, [pc, #72]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609b6:	68db      	ldr	r3, [r3, #12]
 80609b8:	4a11      	ldr	r2, [pc, #68]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609ba:	f043 0301 	orr.w	r3, r3, #1
 80609be:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80609c0:	4b0f      	ldr	r3, [pc, #60]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609c2:	68db      	ldr	r3, [r3, #12]
 80609c4:	f003 0301 	and.w	r3, r3, #1
 80609c8:	2b00      	cmp	r3, #0
 80609ca:	d101      	bne.n	80609d0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80609cc:	2301      	movs	r3, #1
 80609ce:	e011      	b.n	80609f4 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80609d0:	4b0b      	ldr	r3, [pc, #44]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80609d6:	4a0a      	ldr	r2, [pc, #40]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609d8:	f043 0301 	orr.w	r3, r3, #1
 80609dc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80609e0:	4b07      	ldr	r3, [pc, #28]	@ (8060a00 <HAL_FLASH_Lock+0x50>)
 80609e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80609e6:	f003 0301 	and.w	r3, r3, #1
 80609ea:	2b00      	cmp	r3, #0
 80609ec:	d101      	bne.n	80609f2 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80609ee:	2301      	movs	r3, #1
 80609f0:	e000      	b.n	80609f4 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80609f2:	2300      	movs	r3, #0
}
 80609f4:	4618      	mov	r0, r3
 80609f6:	46bd      	mov	sp, r7
 80609f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80609fc:	4770      	bx	lr
 80609fe:	bf00      	nop
 8060a00:	52002000 	.word	0x52002000

08060a04 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8060a04:	b580      	push	{r7, lr}
 8060a06:	b086      	sub	sp, #24
 8060a08:	af00      	add	r7, sp, #0
 8060a0a:	6078      	str	r0, [r7, #4]
 8060a0c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8060a0e:	2304      	movs	r3, #4
 8060a10:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8060a12:	2300      	movs	r3, #0
 8060a14:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8060a16:	f7ff fd39 	bl	806048c <HAL_GetTick>
 8060a1a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8060a1c:	683b      	ldr	r3, [r7, #0]
 8060a1e:	2b02      	cmp	r3, #2
 8060a20:	d113      	bne.n	8060a4a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8060a22:	4b40      	ldr	r3, [pc, #256]	@ (8060b24 <FLASH_WaitForLastOperation+0x120>)
 8060a24:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8060a26:	e010      	b.n	8060a4a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8060a28:	687b      	ldr	r3, [r7, #4]
 8060a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8060a2e:	d00c      	beq.n	8060a4a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8060a30:	f7ff fd2c 	bl	806048c <HAL_GetTick>
 8060a34:	4602      	mov	r2, r0
 8060a36:	68fb      	ldr	r3, [r7, #12]
 8060a38:	1ad3      	subs	r3, r2, r3
 8060a3a:	687a      	ldr	r2, [r7, #4]
 8060a3c:	429a      	cmp	r2, r3
 8060a3e:	d302      	bcc.n	8060a46 <FLASH_WaitForLastOperation+0x42>
 8060a40:	687b      	ldr	r3, [r7, #4]
 8060a42:	2b00      	cmp	r3, #0
 8060a44:	d101      	bne.n	8060a4a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8060a46:	2303      	movs	r3, #3
 8060a48:	e068      	b.n	8060b1c <FLASH_WaitForLastOperation+0x118>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8060a4a:	697a      	ldr	r2, [r7, #20]
 8060a4c:	4b36      	ldr	r3, [pc, #216]	@ (8060b28 <FLASH_WaitForLastOperation+0x124>)
 8060a4e:	4013      	ands	r3, r2
 8060a50:	2b00      	cmp	r3, #0
 8060a52:	d10a      	bne.n	8060a6a <FLASH_WaitForLastOperation+0x66>
 8060a54:	4b35      	ldr	r3, [pc, #212]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060a56:	691a      	ldr	r2, [r3, #16]
 8060a58:	697b      	ldr	r3, [r7, #20]
 8060a5a:	4013      	ands	r3, r2
 8060a5c:	697a      	ldr	r2, [r7, #20]
 8060a5e:	429a      	cmp	r2, r3
 8060a60:	bf0c      	ite	eq
 8060a62:	2301      	moveq	r3, #1
 8060a64:	2300      	movne	r3, #0
 8060a66:	b2db      	uxtb	r3, r3
 8060a68:	e00c      	b.n	8060a84 <FLASH_WaitForLastOperation+0x80>
 8060a6a:	4b30      	ldr	r3, [pc, #192]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060a6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8060a70:	43da      	mvns	r2, r3
 8060a72:	697b      	ldr	r3, [r7, #20]
 8060a74:	4013      	ands	r3, r2
 8060a76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8060a7a:	2b00      	cmp	r3, #0
 8060a7c:	bf0c      	ite	eq
 8060a7e:	2301      	moveq	r3, #1
 8060a80:	2300      	movne	r3, #0
 8060a82:	b2db      	uxtb	r3, r3
 8060a84:	2b00      	cmp	r3, #0
 8060a86:	d1cf      	bne.n	8060a28 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8060a88:	683b      	ldr	r3, [r7, #0]
 8060a8a:	2b01      	cmp	r3, #1
 8060a8c:	d105      	bne.n	8060a9a <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8060a8e:	4b27      	ldr	r3, [pc, #156]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060a90:	691a      	ldr	r2, [r3, #16]
 8060a92:	4b27      	ldr	r3, [pc, #156]	@ (8060b30 <FLASH_WaitForLastOperation+0x12c>)
 8060a94:	4013      	ands	r3, r2
 8060a96:	613b      	str	r3, [r7, #16]
 8060a98:	e007      	b.n	8060aaa <FLASH_WaitForLastOperation+0xa6>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8060a9a:	4b24      	ldr	r3, [pc, #144]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060a9c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8060aa0:	4b23      	ldr	r3, [pc, #140]	@ (8060b30 <FLASH_WaitForLastOperation+0x12c>)
 8060aa2:	4013      	ands	r3, r2
 8060aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8060aa8:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8060aaa:	693b      	ldr	r3, [r7, #16]
 8060aac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8060ab0:	2b00      	cmp	r3, #0
 8060ab2:	d016      	beq.n	8060ae2 <FLASH_WaitForLastOperation+0xde>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8060ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8060b34 <FLASH_WaitForLastOperation+0x130>)
 8060ab6:	699a      	ldr	r2, [r3, #24]
 8060ab8:	693b      	ldr	r3, [r7, #16]
 8060aba:	4313      	orrs	r3, r2
 8060abc:	4a1d      	ldr	r2, [pc, #116]	@ (8060b34 <FLASH_WaitForLastOperation+0x130>)
 8060abe:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8060ac0:	693a      	ldr	r2, [r7, #16]
 8060ac2:	4b19      	ldr	r3, [pc, #100]	@ (8060b28 <FLASH_WaitForLastOperation+0x124>)
 8060ac4:	4013      	ands	r3, r2
 8060ac6:	2b00      	cmp	r3, #0
 8060ac8:	d103      	bne.n	8060ad2 <FLASH_WaitForLastOperation+0xce>
 8060aca:	4a18      	ldr	r2, [pc, #96]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060acc:	693b      	ldr	r3, [r7, #16]
 8060ace:	6153      	str	r3, [r2, #20]
 8060ad0:	e005      	b.n	8060ade <FLASH_WaitForLastOperation+0xda>
 8060ad2:	4a16      	ldr	r2, [pc, #88]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060ad4:	693b      	ldr	r3, [r7, #16]
 8060ad6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8060ada:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 8060ade:	2301      	movs	r3, #1
 8060ae0:	e01c      	b.n	8060b1c <FLASH_WaitForLastOperation+0x118>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8060ae2:	683b      	ldr	r3, [r7, #0]
 8060ae4:	2b01      	cmp	r3, #1
 8060ae6:	d10b      	bne.n	8060b00 <FLASH_WaitForLastOperation+0xfc>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8060ae8:	4b10      	ldr	r3, [pc, #64]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060aea:	691b      	ldr	r3, [r3, #16]
 8060aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8060af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8060af4:	d111      	bne.n	8060b1a <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8060af6:	4b0d      	ldr	r3, [pc, #52]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060af8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8060afc:	615a      	str	r2, [r3, #20]
 8060afe:	e00c      	b.n	8060b1a <FLASH_WaitForLastOperation+0x116>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8060b00:	4b0a      	ldr	r3, [pc, #40]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060b02:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8060b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8060b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8060b0e:	d104      	bne.n	8060b1a <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8060b10:	4b06      	ldr	r3, [pc, #24]	@ (8060b2c <FLASH_WaitForLastOperation+0x128>)
 8060b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8060b16:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8060b1a:	2300      	movs	r3, #0
}
 8060b1c:	4618      	mov	r0, r3
 8060b1e:	3718      	adds	r7, #24
 8060b20:	46bd      	mov	sp, r7
 8060b22:	bd80      	pop	{r7, pc}
 8060b24:	80000004 	.word	0x80000004
 8060b28:	e010fff0 	.word	0xe010fff0
 8060b2c:	52002000 	.word	0x52002000
 8060b30:	17ee0000 	.word	0x17ee0000
 8060b34:	2406e96c 	.word	0x2406e96c

08060b38 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8060b38:	b580      	push	{r7, lr}
 8060b3a:	b084      	sub	sp, #16
 8060b3c:	af00      	add	r7, sp, #0
 8060b3e:	6078      	str	r0, [r7, #4]
 8060b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8060b42:	2300      	movs	r3, #0
 8060b44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8060b46:	4b5e      	ldr	r3, [pc, #376]	@ (8060cc0 <HAL_FLASHEx_Erase+0x188>)
 8060b48:	7d1b      	ldrb	r3, [r3, #20]
 8060b4a:	2b01      	cmp	r3, #1
 8060b4c:	d101      	bne.n	8060b52 <HAL_FLASHEx_Erase+0x1a>
 8060b4e:	2302      	movs	r3, #2
 8060b50:	e0b2      	b.n	8060cb8 <HAL_FLASHEx_Erase+0x180>
 8060b52:	4b5b      	ldr	r3, [pc, #364]	@ (8060cc0 <HAL_FLASHEx_Erase+0x188>)
 8060b54:	2201      	movs	r2, #1
 8060b56:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8060b58:	4b59      	ldr	r3, [pc, #356]	@ (8060cc0 <HAL_FLASHEx_Erase+0x188>)
 8060b5a:	2200      	movs	r2, #0
 8060b5c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8060b5e:	687b      	ldr	r3, [r7, #4]
 8060b60:	685b      	ldr	r3, [r3, #4]
 8060b62:	f003 0301 	and.w	r3, r3, #1
 8060b66:	2b00      	cmp	r3, #0
 8060b68:	d009      	beq.n	8060b7e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8060b6a:	2101      	movs	r1, #1
 8060b6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060b70:	f7ff ff48 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060b74:	4603      	mov	r3, r0
 8060b76:	2b00      	cmp	r3, #0
 8060b78:	d001      	beq.n	8060b7e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8060b7a:	2301      	movs	r3, #1
 8060b7c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8060b7e:	687b      	ldr	r3, [r7, #4]
 8060b80:	685b      	ldr	r3, [r3, #4]
 8060b82:	f003 0302 	and.w	r3, r3, #2
 8060b86:	2b00      	cmp	r3, #0
 8060b88:	d009      	beq.n	8060b9e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8060b8a:	2102      	movs	r1, #2
 8060b8c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060b90:	f7ff ff38 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060b94:	4603      	mov	r3, r0
 8060b96:	2b00      	cmp	r3, #0
 8060b98:	d001      	beq.n	8060b9e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8060b9a:	2301      	movs	r3, #1
 8060b9c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8060b9e:	7bfb      	ldrb	r3, [r7, #15]
 8060ba0:	2b00      	cmp	r3, #0
 8060ba2:	f040 8085 	bne.w	8060cb0 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8060ba6:	687b      	ldr	r3, [r7, #4]
 8060ba8:	681b      	ldr	r3, [r3, #0]
 8060baa:	2b01      	cmp	r3, #1
 8060bac:	d136      	bne.n	8060c1c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8060bae:	687b      	ldr	r3, [r7, #4]
 8060bb0:	691a      	ldr	r2, [r3, #16]
 8060bb2:	687b      	ldr	r3, [r7, #4]
 8060bb4:	685b      	ldr	r3, [r3, #4]
 8060bb6:	4619      	mov	r1, r3
 8060bb8:	4610      	mov	r0, r2
 8060bba:	f000 f887 	bl	8060ccc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8060bbe:	687b      	ldr	r3, [r7, #4]
 8060bc0:	685b      	ldr	r3, [r3, #4]
 8060bc2:	f003 0301 	and.w	r3, r3, #1
 8060bc6:	2b00      	cmp	r3, #0
 8060bc8:	d00f      	beq.n	8060bea <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8060bca:	2101      	movs	r1, #1
 8060bcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060bd0:	f7ff ff18 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060bd4:	4603      	mov	r3, r0
 8060bd6:	2b00      	cmp	r3, #0
 8060bd8:	d001      	beq.n	8060bde <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8060bda:	2301      	movs	r3, #1
 8060bdc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8060bde:	4b39      	ldr	r3, [pc, #228]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060be0:	68db      	ldr	r3, [r3, #12]
 8060be2:	4a38      	ldr	r2, [pc, #224]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060be4:	f023 0308 	bic.w	r3, r3, #8
 8060be8:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8060bea:	687b      	ldr	r3, [r7, #4]
 8060bec:	685b      	ldr	r3, [r3, #4]
 8060bee:	f003 0302 	and.w	r3, r3, #2
 8060bf2:	2b00      	cmp	r3, #0
 8060bf4:	d05c      	beq.n	8060cb0 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8060bf6:	2102      	movs	r1, #2
 8060bf8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060bfc:	f7ff ff02 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060c00:	4603      	mov	r3, r0
 8060c02:	2b00      	cmp	r3, #0
 8060c04:	d001      	beq.n	8060c0a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8060c06:	2301      	movs	r3, #1
 8060c08:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8060c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c0c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060c10:	4a2c      	ldr	r2, [pc, #176]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c12:	f023 0308 	bic.w	r3, r3, #8
 8060c16:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 8060c1a:	e049      	b.n	8060cb0 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8060c1c:	683b      	ldr	r3, [r7, #0]
 8060c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8060c22:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8060c24:	687b      	ldr	r3, [r7, #4]
 8060c26:	689b      	ldr	r3, [r3, #8]
 8060c28:	60bb      	str	r3, [r7, #8]
 8060c2a:	e039      	b.n	8060ca0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8060c2c:	687b      	ldr	r3, [r7, #4]
 8060c2e:	6859      	ldr	r1, [r3, #4]
 8060c30:	687b      	ldr	r3, [r7, #4]
 8060c32:	691b      	ldr	r3, [r3, #16]
 8060c34:	461a      	mov	r2, r3
 8060c36:	68b8      	ldr	r0, [r7, #8]
 8060c38:	f000 f8b2 	bl	8060da0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8060c3c:	687b      	ldr	r3, [r7, #4]
 8060c3e:	685b      	ldr	r3, [r3, #4]
 8060c40:	f003 0301 	and.w	r3, r3, #1
 8060c44:	2b00      	cmp	r3, #0
 8060c46:	d00c      	beq.n	8060c62 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8060c48:	2101      	movs	r1, #1
 8060c4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060c4e:	f7ff fed9 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060c52:	4603      	mov	r3, r0
 8060c54:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8060c56:	4b1b      	ldr	r3, [pc, #108]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c58:	68da      	ldr	r2, [r3, #12]
 8060c5a:	491a      	ldr	r1, [pc, #104]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8060cc8 <HAL_FLASHEx_Erase+0x190>)
 8060c5e:	4013      	ands	r3, r2
 8060c60:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8060c62:	687b      	ldr	r3, [r7, #4]
 8060c64:	685b      	ldr	r3, [r3, #4]
 8060c66:	f003 0302 	and.w	r3, r3, #2
 8060c6a:	2b00      	cmp	r3, #0
 8060c6c:	d00e      	beq.n	8060c8c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8060c6e:	2102      	movs	r1, #2
 8060c70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8060c74:	f7ff fec6 	bl	8060a04 <FLASH_WaitForLastOperation>
 8060c78:	4603      	mov	r3, r0
 8060c7a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8060c7c:	4b11      	ldr	r3, [pc, #68]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c7e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8060c82:	4910      	ldr	r1, [pc, #64]	@ (8060cc4 <HAL_FLASHEx_Erase+0x18c>)
 8060c84:	4b10      	ldr	r3, [pc, #64]	@ (8060cc8 <HAL_FLASHEx_Erase+0x190>)
 8060c86:	4013      	ands	r3, r2
 8060c88:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8060c8c:	7bfb      	ldrb	r3, [r7, #15]
 8060c8e:	2b00      	cmp	r3, #0
 8060c90:	d003      	beq.n	8060c9a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8060c92:	683b      	ldr	r3, [r7, #0]
 8060c94:	68ba      	ldr	r2, [r7, #8]
 8060c96:	601a      	str	r2, [r3, #0]
          break;
 8060c98:	e00a      	b.n	8060cb0 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8060c9a:	68bb      	ldr	r3, [r7, #8]
 8060c9c:	3301      	adds	r3, #1
 8060c9e:	60bb      	str	r3, [r7, #8]
 8060ca0:	687b      	ldr	r3, [r7, #4]
 8060ca2:	68da      	ldr	r2, [r3, #12]
 8060ca4:	687b      	ldr	r3, [r7, #4]
 8060ca6:	689b      	ldr	r3, [r3, #8]
 8060ca8:	4413      	add	r3, r2
 8060caa:	68ba      	ldr	r2, [r7, #8]
 8060cac:	429a      	cmp	r2, r3
 8060cae:	d3bd      	bcc.n	8060c2c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8060cb0:	4b03      	ldr	r3, [pc, #12]	@ (8060cc0 <HAL_FLASHEx_Erase+0x188>)
 8060cb2:	2200      	movs	r2, #0
 8060cb4:	751a      	strb	r2, [r3, #20]

  return status;
 8060cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8060cb8:	4618      	mov	r0, r3
 8060cba:	3710      	adds	r7, #16
 8060cbc:	46bd      	mov	sp, r7
 8060cbe:	bd80      	pop	{r7, pc}
 8060cc0:	2406e96c 	.word	0x2406e96c
 8060cc4:	52002000 	.word	0x52002000
 8060cc8:	fffff8fb 	.word	0xfffff8fb

08060ccc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8060ccc:	b480      	push	{r7}
 8060cce:	b083      	sub	sp, #12
 8060cd0:	af00      	add	r7, sp, #0
 8060cd2:	6078      	str	r0, [r7, #4]
 8060cd4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8060cd6:	683b      	ldr	r3, [r7, #0]
 8060cd8:	f003 0303 	and.w	r3, r3, #3
 8060cdc:	2b03      	cmp	r3, #3
 8060cde:	d122      	bne.n	8060d26 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8060ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060ce2:	68db      	ldr	r3, [r3, #12]
 8060ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060ce6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8060cea:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8060cec:	4b2b      	ldr	r3, [pc, #172]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060cee:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060cf4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8060cf8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8060cfc:	4b27      	ldr	r3, [pc, #156]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060cfe:	68da      	ldr	r2, [r3, #12]
 8060d00:	4926      	ldr	r1, [pc, #152]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d02:	687b      	ldr	r3, [r7, #4]
 8060d04:	4313      	orrs	r3, r2
 8060d06:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8060d08:	4b24      	ldr	r3, [pc, #144]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d0a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8060d0e:	4923      	ldr	r1, [pc, #140]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d10:	687b      	ldr	r3, [r7, #4]
 8060d12:	4313      	orrs	r3, r2
 8060d14:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8060d18:	4b20      	ldr	r3, [pc, #128]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d1a:	699b      	ldr	r3, [r3, #24]
 8060d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d1e:	f043 0310 	orr.w	r3, r3, #16
 8060d22:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8060d24:	e033      	b.n	8060d8e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8060d26:	683b      	ldr	r3, [r7, #0]
 8060d28:	f003 0301 	and.w	r3, r3, #1
 8060d2c:	2b00      	cmp	r3, #0
 8060d2e:	d011      	beq.n	8060d54 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8060d30:	4b1a      	ldr	r3, [pc, #104]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d32:	68db      	ldr	r3, [r3, #12]
 8060d34:	4a19      	ldr	r2, [pc, #100]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8060d3a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8060d3c:	4b17      	ldr	r3, [pc, #92]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d3e:	68da      	ldr	r2, [r3, #12]
 8060d40:	4916      	ldr	r1, [pc, #88]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d42:	687b      	ldr	r3, [r7, #4]
 8060d44:	4313      	orrs	r3, r2
 8060d46:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8060d48:	4b14      	ldr	r3, [pc, #80]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d4a:	68db      	ldr	r3, [r3, #12]
 8060d4c:	4a13      	ldr	r2, [pc, #76]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d4e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8060d52:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8060d54:	683b      	ldr	r3, [r7, #0]
 8060d56:	f003 0302 	and.w	r3, r3, #2
 8060d5a:	2b00      	cmp	r3, #0
 8060d5c:	d017      	beq.n	8060d8e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8060d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d60:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060d64:	4a0d      	ldr	r2, [pc, #52]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8060d6a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 8060d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d70:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8060d74:	4909      	ldr	r1, [pc, #36]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d76:	687b      	ldr	r3, [r7, #4]
 8060d78:	4313      	orrs	r3, r2
 8060d7a:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8060d7e:	4b07      	ldr	r3, [pc, #28]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d80:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060d84:	4a05      	ldr	r2, [pc, #20]	@ (8060d9c <FLASH_MassErase+0xd0>)
 8060d86:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8060d8a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8060d8e:	bf00      	nop
 8060d90:	370c      	adds	r7, #12
 8060d92:	46bd      	mov	sp, r7
 8060d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060d98:	4770      	bx	lr
 8060d9a:	bf00      	nop
 8060d9c:	52002000 	.word	0x52002000

08060da0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8060da0:	b480      	push	{r7}
 8060da2:	b085      	sub	sp, #20
 8060da4:	af00      	add	r7, sp, #0
 8060da6:	60f8      	str	r0, [r7, #12]
 8060da8:	60b9      	str	r1, [r7, #8]
 8060daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8060dac:	68bb      	ldr	r3, [r7, #8]
 8060dae:	f003 0301 	and.w	r3, r3, #1
 8060db2:	2b00      	cmp	r3, #0
 8060db4:	d010      	beq.n	8060dd8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8060db6:	4b18      	ldr	r3, [pc, #96]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060db8:	68db      	ldr	r3, [r3, #12]
 8060dba:	4a17      	ldr	r2, [pc, #92]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060dbc:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8060dc0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8060dc2:	4b15      	ldr	r3, [pc, #84]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060dc4:	68da      	ldr	r2, [r3, #12]
 8060dc6:	68fb      	ldr	r3, [r7, #12]
 8060dc8:	0219      	lsls	r1, r3, #8
 8060dca:	687b      	ldr	r3, [r7, #4]
 8060dcc:	430b      	orrs	r3, r1
 8060dce:	4313      	orrs	r3, r2
 8060dd0:	4a11      	ldr	r2, [pc, #68]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060dd2:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8060dd6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8060dd8:	68bb      	ldr	r3, [r7, #8]
 8060dda:	f003 0302 	and.w	r3, r3, #2
 8060dde:	2b00      	cmp	r3, #0
 8060de0:	d014      	beq.n	8060e0c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8060de2:	4b0d      	ldr	r3, [pc, #52]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060de4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8060de8:	4a0b      	ldr	r2, [pc, #44]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060dea:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8060dee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8060df2:	4b09      	ldr	r3, [pc, #36]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060df4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8060df8:	68fb      	ldr	r3, [r7, #12]
 8060dfa:	0219      	lsls	r1, r3, #8
 8060dfc:	687b      	ldr	r3, [r7, #4]
 8060dfe:	430b      	orrs	r3, r1
 8060e00:	4313      	orrs	r3, r2
 8060e02:	4a05      	ldr	r2, [pc, #20]	@ (8060e18 <FLASH_Erase_Sector+0x78>)
 8060e04:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8060e08:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8060e0c:	bf00      	nop
 8060e0e:	3714      	adds	r7, #20
 8060e10:	46bd      	mov	sp, r7
 8060e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e16:	4770      	bx	lr
 8060e18:	52002000 	.word	0x52002000

08060e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8060e1c:	b480      	push	{r7}
 8060e1e:	b089      	sub	sp, #36	@ 0x24
 8060e20:	af00      	add	r7, sp, #0
 8060e22:	6078      	str	r0, [r7, #4]
 8060e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8060e26:	2300      	movs	r3, #0
 8060e28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8060e2a:	4b89      	ldr	r3, [pc, #548]	@ (8061050 <HAL_GPIO_Init+0x234>)
 8060e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8060e2e:	e194      	b.n	806115a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8060e30:	683b      	ldr	r3, [r7, #0]
 8060e32:	681a      	ldr	r2, [r3, #0]
 8060e34:	2101      	movs	r1, #1
 8060e36:	69fb      	ldr	r3, [r7, #28]
 8060e38:	fa01 f303 	lsl.w	r3, r1, r3
 8060e3c:	4013      	ands	r3, r2
 8060e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8060e40:	693b      	ldr	r3, [r7, #16]
 8060e42:	2b00      	cmp	r3, #0
 8060e44:	f000 8186 	beq.w	8061154 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8060e48:	683b      	ldr	r3, [r7, #0]
 8060e4a:	685b      	ldr	r3, [r3, #4]
 8060e4c:	f003 0303 	and.w	r3, r3, #3
 8060e50:	2b01      	cmp	r3, #1
 8060e52:	d005      	beq.n	8060e60 <HAL_GPIO_Init+0x44>
 8060e54:	683b      	ldr	r3, [r7, #0]
 8060e56:	685b      	ldr	r3, [r3, #4]
 8060e58:	f003 0303 	and.w	r3, r3, #3
 8060e5c:	2b02      	cmp	r3, #2
 8060e5e:	d130      	bne.n	8060ec2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8060e60:	687b      	ldr	r3, [r7, #4]
 8060e62:	689b      	ldr	r3, [r3, #8]
 8060e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8060e66:	69fb      	ldr	r3, [r7, #28]
 8060e68:	005b      	lsls	r3, r3, #1
 8060e6a:	2203      	movs	r2, #3
 8060e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8060e70:	43db      	mvns	r3, r3
 8060e72:	69ba      	ldr	r2, [r7, #24]
 8060e74:	4013      	ands	r3, r2
 8060e76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8060e78:	683b      	ldr	r3, [r7, #0]
 8060e7a:	68da      	ldr	r2, [r3, #12]
 8060e7c:	69fb      	ldr	r3, [r7, #28]
 8060e7e:	005b      	lsls	r3, r3, #1
 8060e80:	fa02 f303 	lsl.w	r3, r2, r3
 8060e84:	69ba      	ldr	r2, [r7, #24]
 8060e86:	4313      	orrs	r3, r2
 8060e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8060e8a:	687b      	ldr	r3, [r7, #4]
 8060e8c:	69ba      	ldr	r2, [r7, #24]
 8060e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8060e90:	687b      	ldr	r3, [r7, #4]
 8060e92:	685b      	ldr	r3, [r3, #4]
 8060e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8060e96:	2201      	movs	r2, #1
 8060e98:	69fb      	ldr	r3, [r7, #28]
 8060e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8060e9e:	43db      	mvns	r3, r3
 8060ea0:	69ba      	ldr	r2, [r7, #24]
 8060ea2:	4013      	ands	r3, r2
 8060ea4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8060ea6:	683b      	ldr	r3, [r7, #0]
 8060ea8:	685b      	ldr	r3, [r3, #4]
 8060eaa:	091b      	lsrs	r3, r3, #4
 8060eac:	f003 0201 	and.w	r2, r3, #1
 8060eb0:	69fb      	ldr	r3, [r7, #28]
 8060eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8060eb6:	69ba      	ldr	r2, [r7, #24]
 8060eb8:	4313      	orrs	r3, r2
 8060eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8060ebc:	687b      	ldr	r3, [r7, #4]
 8060ebe:	69ba      	ldr	r2, [r7, #24]
 8060ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8060ec2:	683b      	ldr	r3, [r7, #0]
 8060ec4:	685b      	ldr	r3, [r3, #4]
 8060ec6:	f003 0303 	and.w	r3, r3, #3
 8060eca:	2b03      	cmp	r3, #3
 8060ecc:	d017      	beq.n	8060efe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8060ece:	687b      	ldr	r3, [r7, #4]
 8060ed0:	68db      	ldr	r3, [r3, #12]
 8060ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8060ed4:	69fb      	ldr	r3, [r7, #28]
 8060ed6:	005b      	lsls	r3, r3, #1
 8060ed8:	2203      	movs	r2, #3
 8060eda:	fa02 f303 	lsl.w	r3, r2, r3
 8060ede:	43db      	mvns	r3, r3
 8060ee0:	69ba      	ldr	r2, [r7, #24]
 8060ee2:	4013      	ands	r3, r2
 8060ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8060ee6:	683b      	ldr	r3, [r7, #0]
 8060ee8:	689a      	ldr	r2, [r3, #8]
 8060eea:	69fb      	ldr	r3, [r7, #28]
 8060eec:	005b      	lsls	r3, r3, #1
 8060eee:	fa02 f303 	lsl.w	r3, r2, r3
 8060ef2:	69ba      	ldr	r2, [r7, #24]
 8060ef4:	4313      	orrs	r3, r2
 8060ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8060ef8:	687b      	ldr	r3, [r7, #4]
 8060efa:	69ba      	ldr	r2, [r7, #24]
 8060efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8060efe:	683b      	ldr	r3, [r7, #0]
 8060f00:	685b      	ldr	r3, [r3, #4]
 8060f02:	f003 0303 	and.w	r3, r3, #3
 8060f06:	2b02      	cmp	r3, #2
 8060f08:	d123      	bne.n	8060f52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8060f0a:	69fb      	ldr	r3, [r7, #28]
 8060f0c:	08da      	lsrs	r2, r3, #3
 8060f0e:	687b      	ldr	r3, [r7, #4]
 8060f10:	3208      	adds	r2, #8
 8060f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8060f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8060f18:	69fb      	ldr	r3, [r7, #28]
 8060f1a:	f003 0307 	and.w	r3, r3, #7
 8060f1e:	009b      	lsls	r3, r3, #2
 8060f20:	220f      	movs	r2, #15
 8060f22:	fa02 f303 	lsl.w	r3, r2, r3
 8060f26:	43db      	mvns	r3, r3
 8060f28:	69ba      	ldr	r2, [r7, #24]
 8060f2a:	4013      	ands	r3, r2
 8060f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8060f2e:	683b      	ldr	r3, [r7, #0]
 8060f30:	691a      	ldr	r2, [r3, #16]
 8060f32:	69fb      	ldr	r3, [r7, #28]
 8060f34:	f003 0307 	and.w	r3, r3, #7
 8060f38:	009b      	lsls	r3, r3, #2
 8060f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8060f3e:	69ba      	ldr	r2, [r7, #24]
 8060f40:	4313      	orrs	r3, r2
 8060f42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8060f44:	69fb      	ldr	r3, [r7, #28]
 8060f46:	08da      	lsrs	r2, r3, #3
 8060f48:	687b      	ldr	r3, [r7, #4]
 8060f4a:	3208      	adds	r2, #8
 8060f4c:	69b9      	ldr	r1, [r7, #24]
 8060f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8060f52:	687b      	ldr	r3, [r7, #4]
 8060f54:	681b      	ldr	r3, [r3, #0]
 8060f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8060f58:	69fb      	ldr	r3, [r7, #28]
 8060f5a:	005b      	lsls	r3, r3, #1
 8060f5c:	2203      	movs	r2, #3
 8060f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8060f62:	43db      	mvns	r3, r3
 8060f64:	69ba      	ldr	r2, [r7, #24]
 8060f66:	4013      	ands	r3, r2
 8060f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8060f6a:	683b      	ldr	r3, [r7, #0]
 8060f6c:	685b      	ldr	r3, [r3, #4]
 8060f6e:	f003 0203 	and.w	r2, r3, #3
 8060f72:	69fb      	ldr	r3, [r7, #28]
 8060f74:	005b      	lsls	r3, r3, #1
 8060f76:	fa02 f303 	lsl.w	r3, r2, r3
 8060f7a:	69ba      	ldr	r2, [r7, #24]
 8060f7c:	4313      	orrs	r3, r2
 8060f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8060f80:	687b      	ldr	r3, [r7, #4]
 8060f82:	69ba      	ldr	r2, [r7, #24]
 8060f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8060f86:	683b      	ldr	r3, [r7, #0]
 8060f88:	685b      	ldr	r3, [r3, #4]
 8060f8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8060f8e:	2b00      	cmp	r3, #0
 8060f90:	f000 80e0 	beq.w	8061154 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8060f94:	4b2f      	ldr	r3, [pc, #188]	@ (8061054 <HAL_GPIO_Init+0x238>)
 8060f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8060f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8061054 <HAL_GPIO_Init+0x238>)
 8060f9c:	f043 0302 	orr.w	r3, r3, #2
 8060fa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8060fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8061054 <HAL_GPIO_Init+0x238>)
 8060fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8060faa:	f003 0302 	and.w	r3, r3, #2
 8060fae:	60fb      	str	r3, [r7, #12]
 8060fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8060fb2:	4a29      	ldr	r2, [pc, #164]	@ (8061058 <HAL_GPIO_Init+0x23c>)
 8060fb4:	69fb      	ldr	r3, [r7, #28]
 8060fb6:	089b      	lsrs	r3, r3, #2
 8060fb8:	3302      	adds	r3, #2
 8060fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8060fc0:	69fb      	ldr	r3, [r7, #28]
 8060fc2:	f003 0303 	and.w	r3, r3, #3
 8060fc6:	009b      	lsls	r3, r3, #2
 8060fc8:	220f      	movs	r2, #15
 8060fca:	fa02 f303 	lsl.w	r3, r2, r3
 8060fce:	43db      	mvns	r3, r3
 8060fd0:	69ba      	ldr	r2, [r7, #24]
 8060fd2:	4013      	ands	r3, r2
 8060fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8060fd6:	687b      	ldr	r3, [r7, #4]
 8060fd8:	4a20      	ldr	r2, [pc, #128]	@ (806105c <HAL_GPIO_Init+0x240>)
 8060fda:	4293      	cmp	r3, r2
 8060fdc:	d052      	beq.n	8061084 <HAL_GPIO_Init+0x268>
 8060fde:	687b      	ldr	r3, [r7, #4]
 8060fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8061060 <HAL_GPIO_Init+0x244>)
 8060fe2:	4293      	cmp	r3, r2
 8060fe4:	d031      	beq.n	806104a <HAL_GPIO_Init+0x22e>
 8060fe6:	687b      	ldr	r3, [r7, #4]
 8060fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8061064 <HAL_GPIO_Init+0x248>)
 8060fea:	4293      	cmp	r3, r2
 8060fec:	d02b      	beq.n	8061046 <HAL_GPIO_Init+0x22a>
 8060fee:	687b      	ldr	r3, [r7, #4]
 8060ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8061068 <HAL_GPIO_Init+0x24c>)
 8060ff2:	4293      	cmp	r3, r2
 8060ff4:	d025      	beq.n	8061042 <HAL_GPIO_Init+0x226>
 8060ff6:	687b      	ldr	r3, [r7, #4]
 8060ff8:	4a1c      	ldr	r2, [pc, #112]	@ (806106c <HAL_GPIO_Init+0x250>)
 8060ffa:	4293      	cmp	r3, r2
 8060ffc:	d01f      	beq.n	806103e <HAL_GPIO_Init+0x222>
 8060ffe:	687b      	ldr	r3, [r7, #4]
 8061000:	4a1b      	ldr	r2, [pc, #108]	@ (8061070 <HAL_GPIO_Init+0x254>)
 8061002:	4293      	cmp	r3, r2
 8061004:	d019      	beq.n	806103a <HAL_GPIO_Init+0x21e>
 8061006:	687b      	ldr	r3, [r7, #4]
 8061008:	4a1a      	ldr	r2, [pc, #104]	@ (8061074 <HAL_GPIO_Init+0x258>)
 806100a:	4293      	cmp	r3, r2
 806100c:	d013      	beq.n	8061036 <HAL_GPIO_Init+0x21a>
 806100e:	687b      	ldr	r3, [r7, #4]
 8061010:	4a19      	ldr	r2, [pc, #100]	@ (8061078 <HAL_GPIO_Init+0x25c>)
 8061012:	4293      	cmp	r3, r2
 8061014:	d00d      	beq.n	8061032 <HAL_GPIO_Init+0x216>
 8061016:	687b      	ldr	r3, [r7, #4]
 8061018:	4a18      	ldr	r2, [pc, #96]	@ (806107c <HAL_GPIO_Init+0x260>)
 806101a:	4293      	cmp	r3, r2
 806101c:	d007      	beq.n	806102e <HAL_GPIO_Init+0x212>
 806101e:	687b      	ldr	r3, [r7, #4]
 8061020:	4a17      	ldr	r2, [pc, #92]	@ (8061080 <HAL_GPIO_Init+0x264>)
 8061022:	4293      	cmp	r3, r2
 8061024:	d101      	bne.n	806102a <HAL_GPIO_Init+0x20e>
 8061026:	2309      	movs	r3, #9
 8061028:	e02d      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806102a:	230a      	movs	r3, #10
 806102c:	e02b      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806102e:	2308      	movs	r3, #8
 8061030:	e029      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 8061032:	2307      	movs	r3, #7
 8061034:	e027      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 8061036:	2306      	movs	r3, #6
 8061038:	e025      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806103a:	2305      	movs	r3, #5
 806103c:	e023      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806103e:	2304      	movs	r3, #4
 8061040:	e021      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 8061042:	2303      	movs	r3, #3
 8061044:	e01f      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 8061046:	2302      	movs	r3, #2
 8061048:	e01d      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806104a:	2301      	movs	r3, #1
 806104c:	e01b      	b.n	8061086 <HAL_GPIO_Init+0x26a>
 806104e:	bf00      	nop
 8061050:	58000080 	.word	0x58000080
 8061054:	58024400 	.word	0x58024400
 8061058:	58000400 	.word	0x58000400
 806105c:	58020000 	.word	0x58020000
 8061060:	58020400 	.word	0x58020400
 8061064:	58020800 	.word	0x58020800
 8061068:	58020c00 	.word	0x58020c00
 806106c:	58021000 	.word	0x58021000
 8061070:	58021400 	.word	0x58021400
 8061074:	58021800 	.word	0x58021800
 8061078:	58021c00 	.word	0x58021c00
 806107c:	58022000 	.word	0x58022000
 8061080:	58022400 	.word	0x58022400
 8061084:	2300      	movs	r3, #0
 8061086:	69fa      	ldr	r2, [r7, #28]
 8061088:	f002 0203 	and.w	r2, r2, #3
 806108c:	0092      	lsls	r2, r2, #2
 806108e:	4093      	lsls	r3, r2
 8061090:	69ba      	ldr	r2, [r7, #24]
 8061092:	4313      	orrs	r3, r2
 8061094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8061096:	4938      	ldr	r1, [pc, #224]	@ (8061178 <HAL_GPIO_Init+0x35c>)
 8061098:	69fb      	ldr	r3, [r7, #28]
 806109a:	089b      	lsrs	r3, r3, #2
 806109c:	3302      	adds	r3, #2
 806109e:	69ba      	ldr	r2, [r7, #24]
 80610a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80610a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80610a8:	681b      	ldr	r3, [r3, #0]
 80610aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80610ac:	693b      	ldr	r3, [r7, #16]
 80610ae:	43db      	mvns	r3, r3
 80610b0:	69ba      	ldr	r2, [r7, #24]
 80610b2:	4013      	ands	r3, r2
 80610b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80610b6:	683b      	ldr	r3, [r7, #0]
 80610b8:	685b      	ldr	r3, [r3, #4]
 80610ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80610be:	2b00      	cmp	r3, #0
 80610c0:	d003      	beq.n	80610ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80610c2:	69ba      	ldr	r2, [r7, #24]
 80610c4:	693b      	ldr	r3, [r7, #16]
 80610c6:	4313      	orrs	r3, r2
 80610c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80610ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80610ce:	69bb      	ldr	r3, [r7, #24]
 80610d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80610d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80610d6:	685b      	ldr	r3, [r3, #4]
 80610d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80610da:	693b      	ldr	r3, [r7, #16]
 80610dc:	43db      	mvns	r3, r3
 80610de:	69ba      	ldr	r2, [r7, #24]
 80610e0:	4013      	ands	r3, r2
 80610e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80610e4:	683b      	ldr	r3, [r7, #0]
 80610e6:	685b      	ldr	r3, [r3, #4]
 80610e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80610ec:	2b00      	cmp	r3, #0
 80610ee:	d003      	beq.n	80610f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80610f0:	69ba      	ldr	r2, [r7, #24]
 80610f2:	693b      	ldr	r3, [r7, #16]
 80610f4:	4313      	orrs	r3, r2
 80610f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80610f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80610fc:	69bb      	ldr	r3, [r7, #24]
 80610fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8061100:	697b      	ldr	r3, [r7, #20]
 8061102:	685b      	ldr	r3, [r3, #4]
 8061104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061106:	693b      	ldr	r3, [r7, #16]
 8061108:	43db      	mvns	r3, r3
 806110a:	69ba      	ldr	r2, [r7, #24]
 806110c:	4013      	ands	r3, r2
 806110e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8061110:	683b      	ldr	r3, [r7, #0]
 8061112:	685b      	ldr	r3, [r3, #4]
 8061114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8061118:	2b00      	cmp	r3, #0
 806111a:	d003      	beq.n	8061124 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 806111c:	69ba      	ldr	r2, [r7, #24]
 806111e:	693b      	ldr	r3, [r7, #16]
 8061120:	4313      	orrs	r3, r2
 8061122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8061124:	697b      	ldr	r3, [r7, #20]
 8061126:	69ba      	ldr	r2, [r7, #24]
 8061128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 806112a:	697b      	ldr	r3, [r7, #20]
 806112c:	681b      	ldr	r3, [r3, #0]
 806112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061130:	693b      	ldr	r3, [r7, #16]
 8061132:	43db      	mvns	r3, r3
 8061134:	69ba      	ldr	r2, [r7, #24]
 8061136:	4013      	ands	r3, r2
 8061138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 806113a:	683b      	ldr	r3, [r7, #0]
 806113c:	685b      	ldr	r3, [r3, #4]
 806113e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8061142:	2b00      	cmp	r3, #0
 8061144:	d003      	beq.n	806114e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8061146:	69ba      	ldr	r2, [r7, #24]
 8061148:	693b      	ldr	r3, [r7, #16]
 806114a:	4313      	orrs	r3, r2
 806114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 806114e:	697b      	ldr	r3, [r7, #20]
 8061150:	69ba      	ldr	r2, [r7, #24]
 8061152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8061154:	69fb      	ldr	r3, [r7, #28]
 8061156:	3301      	adds	r3, #1
 8061158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 806115a:	683b      	ldr	r3, [r7, #0]
 806115c:	681a      	ldr	r2, [r3, #0]
 806115e:	69fb      	ldr	r3, [r7, #28]
 8061160:	fa22 f303 	lsr.w	r3, r2, r3
 8061164:	2b00      	cmp	r3, #0
 8061166:	f47f ae63 	bne.w	8060e30 <HAL_GPIO_Init+0x14>
  }
}
 806116a:	bf00      	nop
 806116c:	bf00      	nop
 806116e:	3724      	adds	r7, #36	@ 0x24
 8061170:	46bd      	mov	sp, r7
 8061172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061176:	4770      	bx	lr
 8061178:	58000400 	.word	0x58000400

0806117c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 806117c:	b480      	push	{r7}
 806117e:	b087      	sub	sp, #28
 8061180:	af00      	add	r7, sp, #0
 8061182:	6078      	str	r0, [r7, #4]
 8061184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8061186:	2300      	movs	r3, #0
 8061188:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 806118a:	4b75      	ldr	r3, [pc, #468]	@ (8061360 <HAL_GPIO_DeInit+0x1e4>)
 806118c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 806118e:	e0d9      	b.n	8061344 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8061190:	2201      	movs	r2, #1
 8061192:	697b      	ldr	r3, [r7, #20]
 8061194:	fa02 f303 	lsl.w	r3, r2, r3
 8061198:	683a      	ldr	r2, [r7, #0]
 806119a:	4013      	ands	r3, r2
 806119c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 806119e:	68fb      	ldr	r3, [r7, #12]
 80611a0:	2b00      	cmp	r3, #0
 80611a2:	f000 80cc 	beq.w	806133e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80611a6:	4a6f      	ldr	r2, [pc, #444]	@ (8061364 <HAL_GPIO_DeInit+0x1e8>)
 80611a8:	697b      	ldr	r3, [r7, #20]
 80611aa:	089b      	lsrs	r3, r3, #2
 80611ac:	3302      	adds	r3, #2
 80611ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80611b2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80611b4:	697b      	ldr	r3, [r7, #20]
 80611b6:	f003 0303 	and.w	r3, r3, #3
 80611ba:	009b      	lsls	r3, r3, #2
 80611bc:	220f      	movs	r2, #15
 80611be:	fa02 f303 	lsl.w	r3, r2, r3
 80611c2:	68ba      	ldr	r2, [r7, #8]
 80611c4:	4013      	ands	r3, r2
 80611c6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80611c8:	687b      	ldr	r3, [r7, #4]
 80611ca:	4a67      	ldr	r2, [pc, #412]	@ (8061368 <HAL_GPIO_DeInit+0x1ec>)
 80611cc:	4293      	cmp	r3, r2
 80611ce:	d037      	beq.n	8061240 <HAL_GPIO_DeInit+0xc4>
 80611d0:	687b      	ldr	r3, [r7, #4]
 80611d2:	4a66      	ldr	r2, [pc, #408]	@ (806136c <HAL_GPIO_DeInit+0x1f0>)
 80611d4:	4293      	cmp	r3, r2
 80611d6:	d031      	beq.n	806123c <HAL_GPIO_DeInit+0xc0>
 80611d8:	687b      	ldr	r3, [r7, #4]
 80611da:	4a65      	ldr	r2, [pc, #404]	@ (8061370 <HAL_GPIO_DeInit+0x1f4>)
 80611dc:	4293      	cmp	r3, r2
 80611de:	d02b      	beq.n	8061238 <HAL_GPIO_DeInit+0xbc>
 80611e0:	687b      	ldr	r3, [r7, #4]
 80611e2:	4a64      	ldr	r2, [pc, #400]	@ (8061374 <HAL_GPIO_DeInit+0x1f8>)
 80611e4:	4293      	cmp	r3, r2
 80611e6:	d025      	beq.n	8061234 <HAL_GPIO_DeInit+0xb8>
 80611e8:	687b      	ldr	r3, [r7, #4]
 80611ea:	4a63      	ldr	r2, [pc, #396]	@ (8061378 <HAL_GPIO_DeInit+0x1fc>)
 80611ec:	4293      	cmp	r3, r2
 80611ee:	d01f      	beq.n	8061230 <HAL_GPIO_DeInit+0xb4>
 80611f0:	687b      	ldr	r3, [r7, #4]
 80611f2:	4a62      	ldr	r2, [pc, #392]	@ (806137c <HAL_GPIO_DeInit+0x200>)
 80611f4:	4293      	cmp	r3, r2
 80611f6:	d019      	beq.n	806122c <HAL_GPIO_DeInit+0xb0>
 80611f8:	687b      	ldr	r3, [r7, #4]
 80611fa:	4a61      	ldr	r2, [pc, #388]	@ (8061380 <HAL_GPIO_DeInit+0x204>)
 80611fc:	4293      	cmp	r3, r2
 80611fe:	d013      	beq.n	8061228 <HAL_GPIO_DeInit+0xac>
 8061200:	687b      	ldr	r3, [r7, #4]
 8061202:	4a60      	ldr	r2, [pc, #384]	@ (8061384 <HAL_GPIO_DeInit+0x208>)
 8061204:	4293      	cmp	r3, r2
 8061206:	d00d      	beq.n	8061224 <HAL_GPIO_DeInit+0xa8>
 8061208:	687b      	ldr	r3, [r7, #4]
 806120a:	4a5f      	ldr	r2, [pc, #380]	@ (8061388 <HAL_GPIO_DeInit+0x20c>)
 806120c:	4293      	cmp	r3, r2
 806120e:	d007      	beq.n	8061220 <HAL_GPIO_DeInit+0xa4>
 8061210:	687b      	ldr	r3, [r7, #4]
 8061212:	4a5e      	ldr	r2, [pc, #376]	@ (806138c <HAL_GPIO_DeInit+0x210>)
 8061214:	4293      	cmp	r3, r2
 8061216:	d101      	bne.n	806121c <HAL_GPIO_DeInit+0xa0>
 8061218:	2309      	movs	r3, #9
 806121a:	e012      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 806121c:	230a      	movs	r3, #10
 806121e:	e010      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061220:	2308      	movs	r3, #8
 8061222:	e00e      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061224:	2307      	movs	r3, #7
 8061226:	e00c      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061228:	2306      	movs	r3, #6
 806122a:	e00a      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 806122c:	2305      	movs	r3, #5
 806122e:	e008      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061230:	2304      	movs	r3, #4
 8061232:	e006      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061234:	2303      	movs	r3, #3
 8061236:	e004      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061238:	2302      	movs	r3, #2
 806123a:	e002      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 806123c:	2301      	movs	r3, #1
 806123e:	e000      	b.n	8061242 <HAL_GPIO_DeInit+0xc6>
 8061240:	2300      	movs	r3, #0
 8061242:	697a      	ldr	r2, [r7, #20]
 8061244:	f002 0203 	and.w	r2, r2, #3
 8061248:	0092      	lsls	r2, r2, #2
 806124a:	4093      	lsls	r3, r2
 806124c:	68ba      	ldr	r2, [r7, #8]
 806124e:	429a      	cmp	r2, r3
 8061250:	d136      	bne.n	80612c0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8061252:	693b      	ldr	r3, [r7, #16]
 8061254:	681a      	ldr	r2, [r3, #0]
 8061256:	68fb      	ldr	r3, [r7, #12]
 8061258:	43db      	mvns	r3, r3
 806125a:	401a      	ands	r2, r3
 806125c:	693b      	ldr	r3, [r7, #16]
 806125e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8061260:	693b      	ldr	r3, [r7, #16]
 8061262:	685a      	ldr	r2, [r3, #4]
 8061264:	68fb      	ldr	r3, [r7, #12]
 8061266:	43db      	mvns	r3, r3
 8061268:	401a      	ands	r2, r3
 806126a:	693b      	ldr	r3, [r7, #16]
 806126c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 806126e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8061272:	685a      	ldr	r2, [r3, #4]
 8061274:	68fb      	ldr	r3, [r7, #12]
 8061276:	43db      	mvns	r3, r3
 8061278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 806127c:	4013      	ands	r3, r2
 806127e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8061280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8061284:	681a      	ldr	r2, [r3, #0]
 8061286:	68fb      	ldr	r3, [r7, #12]
 8061288:	43db      	mvns	r3, r3
 806128a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 806128e:	4013      	ands	r3, r2
 8061290:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8061292:	697b      	ldr	r3, [r7, #20]
 8061294:	f003 0303 	and.w	r3, r3, #3
 8061298:	009b      	lsls	r3, r3, #2
 806129a:	220f      	movs	r2, #15
 806129c:	fa02 f303 	lsl.w	r3, r2, r3
 80612a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80612a2:	4a30      	ldr	r2, [pc, #192]	@ (8061364 <HAL_GPIO_DeInit+0x1e8>)
 80612a4:	697b      	ldr	r3, [r7, #20]
 80612a6:	089b      	lsrs	r3, r3, #2
 80612a8:	3302      	adds	r3, #2
 80612aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80612ae:	68bb      	ldr	r3, [r7, #8]
 80612b0:	43da      	mvns	r2, r3
 80612b2:	482c      	ldr	r0, [pc, #176]	@ (8061364 <HAL_GPIO_DeInit+0x1e8>)
 80612b4:	697b      	ldr	r3, [r7, #20]
 80612b6:	089b      	lsrs	r3, r3, #2
 80612b8:	400a      	ands	r2, r1
 80612ba:	3302      	adds	r3, #2
 80612bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80612c0:	687b      	ldr	r3, [r7, #4]
 80612c2:	681a      	ldr	r2, [r3, #0]
 80612c4:	697b      	ldr	r3, [r7, #20]
 80612c6:	005b      	lsls	r3, r3, #1
 80612c8:	2103      	movs	r1, #3
 80612ca:	fa01 f303 	lsl.w	r3, r1, r3
 80612ce:	431a      	orrs	r2, r3
 80612d0:	687b      	ldr	r3, [r7, #4]
 80612d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80612d4:	697b      	ldr	r3, [r7, #20]
 80612d6:	08da      	lsrs	r2, r3, #3
 80612d8:	687b      	ldr	r3, [r7, #4]
 80612da:	3208      	adds	r2, #8
 80612dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80612e0:	697b      	ldr	r3, [r7, #20]
 80612e2:	f003 0307 	and.w	r3, r3, #7
 80612e6:	009b      	lsls	r3, r3, #2
 80612e8:	220f      	movs	r2, #15
 80612ea:	fa02 f303 	lsl.w	r3, r2, r3
 80612ee:	43db      	mvns	r3, r3
 80612f0:	697a      	ldr	r2, [r7, #20]
 80612f2:	08d2      	lsrs	r2, r2, #3
 80612f4:	4019      	ands	r1, r3
 80612f6:	687b      	ldr	r3, [r7, #4]
 80612f8:	3208      	adds	r2, #8
 80612fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80612fe:	687b      	ldr	r3, [r7, #4]
 8061300:	68da      	ldr	r2, [r3, #12]
 8061302:	697b      	ldr	r3, [r7, #20]
 8061304:	005b      	lsls	r3, r3, #1
 8061306:	2103      	movs	r1, #3
 8061308:	fa01 f303 	lsl.w	r3, r1, r3
 806130c:	43db      	mvns	r3, r3
 806130e:	401a      	ands	r2, r3
 8061310:	687b      	ldr	r3, [r7, #4]
 8061312:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8061314:	687b      	ldr	r3, [r7, #4]
 8061316:	685a      	ldr	r2, [r3, #4]
 8061318:	2101      	movs	r1, #1
 806131a:	697b      	ldr	r3, [r7, #20]
 806131c:	fa01 f303 	lsl.w	r3, r1, r3
 8061320:	43db      	mvns	r3, r3
 8061322:	401a      	ands	r2, r3
 8061324:	687b      	ldr	r3, [r7, #4]
 8061326:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8061328:	687b      	ldr	r3, [r7, #4]
 806132a:	689a      	ldr	r2, [r3, #8]
 806132c:	697b      	ldr	r3, [r7, #20]
 806132e:	005b      	lsls	r3, r3, #1
 8061330:	2103      	movs	r1, #3
 8061332:	fa01 f303 	lsl.w	r3, r1, r3
 8061336:	43db      	mvns	r3, r3
 8061338:	401a      	ands	r2, r3
 806133a:	687b      	ldr	r3, [r7, #4]
 806133c:	609a      	str	r2, [r3, #8]
    }

    position++;
 806133e:	697b      	ldr	r3, [r7, #20]
 8061340:	3301      	adds	r3, #1
 8061342:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8061344:	683a      	ldr	r2, [r7, #0]
 8061346:	697b      	ldr	r3, [r7, #20]
 8061348:	fa22 f303 	lsr.w	r3, r2, r3
 806134c:	2b00      	cmp	r3, #0
 806134e:	f47f af1f 	bne.w	8061190 <HAL_GPIO_DeInit+0x14>
  }
}
 8061352:	bf00      	nop
 8061354:	bf00      	nop
 8061356:	371c      	adds	r7, #28
 8061358:	46bd      	mov	sp, r7
 806135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806135e:	4770      	bx	lr
 8061360:	58000080 	.word	0x58000080
 8061364:	58000400 	.word	0x58000400
 8061368:	58020000 	.word	0x58020000
 806136c:	58020400 	.word	0x58020400
 8061370:	58020800 	.word	0x58020800
 8061374:	58020c00 	.word	0x58020c00
 8061378:	58021000 	.word	0x58021000
 806137c:	58021400 	.word	0x58021400
 8061380:	58021800 	.word	0x58021800
 8061384:	58021c00 	.word	0x58021c00
 8061388:	58022000 	.word	0x58022000
 806138c:	58022400 	.word	0x58022400

08061390 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8061390:	b480      	push	{r7}
 8061392:	b083      	sub	sp, #12
 8061394:	af00      	add	r7, sp, #0
 8061396:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8061398:	4a08      	ldr	r2, [pc, #32]	@ (80613bc <HAL_HSEM_FastTake+0x2c>)
 806139a:	687b      	ldr	r3, [r7, #4]
 806139c:	3320      	adds	r3, #32
 806139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80613a2:	4a07      	ldr	r2, [pc, #28]	@ (80613c0 <HAL_HSEM_FastTake+0x30>)
 80613a4:	4293      	cmp	r3, r2
 80613a6:	d101      	bne.n	80613ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80613a8:	2300      	movs	r3, #0
 80613aa:	e000      	b.n	80613ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80613ac:	2301      	movs	r3, #1
}
 80613ae:	4618      	mov	r0, r3
 80613b0:	370c      	adds	r7, #12
 80613b2:	46bd      	mov	sp, r7
 80613b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80613b8:	4770      	bx	lr
 80613ba:	bf00      	nop
 80613bc:	58026400 	.word	0x58026400
 80613c0:	80000300 	.word	0x80000300

080613c4 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 80613c4:	b480      	push	{r7}
 80613c6:	b083      	sub	sp, #12
 80613c8:	af00      	add	r7, sp, #0
 80613ca:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 80613cc:	4a07      	ldr	r2, [pc, #28]	@ (80613ec <HAL_HSEM_IsSemTaken+0x28>)
 80613ce:	687b      	ldr	r3, [r7, #4]
 80613d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80613d4:	2b00      	cmp	r3, #0
 80613d6:	da01      	bge.n	80613dc <HAL_HSEM_IsSemTaken+0x18>
 80613d8:	2301      	movs	r3, #1
 80613da:	e000      	b.n	80613de <HAL_HSEM_IsSemTaken+0x1a>
 80613dc:	2300      	movs	r3, #0
}
 80613de:	4618      	mov	r0, r3
 80613e0:	370c      	adds	r7, #12
 80613e2:	46bd      	mov	sp, r7
 80613e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80613e8:	4770      	bx	lr
 80613ea:	bf00      	nop
 80613ec:	58026400 	.word	0x58026400

080613f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80613f0:	b480      	push	{r7}
 80613f2:	b083      	sub	sp, #12
 80613f4:	af00      	add	r7, sp, #0
 80613f6:	6078      	str	r0, [r7, #4]
 80613f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80613fa:	4906      	ldr	r1, [pc, #24]	@ (8061414 <HAL_HSEM_Release+0x24>)
 80613fc:	683b      	ldr	r3, [r7, #0]
 80613fe:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8061402:	687b      	ldr	r3, [r7, #4]
 8061404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8061408:	bf00      	nop
 806140a:	370c      	adds	r7, #12
 806140c:	46bd      	mov	sp, r7
 806140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061412:	4770      	bx	lr
 8061414:	58026400 	.word	0x58026400

08061418 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8061418:	b580      	push	{r7, lr}
 806141a:	b084      	sub	sp, #16
 806141c:	af00      	add	r7, sp, #0
 806141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8061420:	f7ff f834 	bl	806048c <HAL_GetTick>
 8061424:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8061426:	687b      	ldr	r3, [r7, #4]
 8061428:	2b00      	cmp	r3, #0
 806142a:	d101      	bne.n	8061430 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 806142c:	2301      	movs	r3, #1
 806142e:	e03b      	b.n	80614a8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8061430:	687b      	ldr	r3, [r7, #4]
 8061432:	2200      	movs	r2, #0
 8061434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8061438:	687b      	ldr	r3, [r7, #4]
 806143a:	2202      	movs	r2, #2
 806143c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8061440:	687b      	ldr	r3, [r7, #4]
 8061442:	681b      	ldr	r3, [r3, #0]
 8061444:	68da      	ldr	r2, [r3, #12]
 8061446:	687b      	ldr	r3, [r7, #4]
 8061448:	681b      	ldr	r3, [r3, #0]
 806144a:	f022 0201 	bic.w	r2, r2, #1
 806144e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8061450:	e00f      	b.n	8061472 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8061452:	f7ff f81b 	bl	806048c <HAL_GetTick>
 8061456:	4602      	mov	r2, r0
 8061458:	68fb      	ldr	r3, [r7, #12]
 806145a:	1ad3      	subs	r3, r2, r3
 806145c:	2b05      	cmp	r3, #5
 806145e:	d908      	bls.n	8061472 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8061460:	687b      	ldr	r3, [r7, #4]
 8061462:	2240      	movs	r2, #64	@ 0x40
 8061464:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8061466:	687b      	ldr	r3, [r7, #4]
 8061468:	2203      	movs	r2, #3
 806146a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 806146e:	2301      	movs	r3, #1
 8061470:	e01a      	b.n	80614a8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8061472:	687b      	ldr	r3, [r7, #4]
 8061474:	681b      	ldr	r3, [r3, #0]
 8061476:	68db      	ldr	r3, [r3, #12]
 8061478:	f003 0301 	and.w	r3, r3, #1
 806147c:	2b00      	cmp	r3, #0
 806147e:	d1e8      	bne.n	8061452 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8061480:	6878      	ldr	r0, [r7, #4]
 8061482:	f000 f9bb 	bl	80617fc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8061486:	687b      	ldr	r3, [r7, #4]
 8061488:	2200      	movs	r2, #0
 806148a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 806148c:	687b      	ldr	r3, [r7, #4]
 806148e:	2200      	movs	r2, #0
 8061490:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8061492:	687b      	ldr	r3, [r7, #4]
 8061494:	2200      	movs	r2, #0
 8061496:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8061498:	687b      	ldr	r3, [r7, #4]
 806149a:	2200      	movs	r2, #0
 806149c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 806149e:	687b      	ldr	r3, [r7, #4]
 80614a0:	2201      	movs	r2, #1
 80614a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80614a6:	2300      	movs	r3, #0
}
 80614a8:	4618      	mov	r0, r3
 80614aa:	3710      	adds	r7, #16
 80614ac:	46bd      	mov	sp, r7
 80614ae:	bd80      	pop	{r7, pc}

080614b0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 80614b0:	b480      	push	{r7}
 80614b2:	b087      	sub	sp, #28
 80614b4:	af00      	add	r7, sp, #0
 80614b6:	60f8      	str	r0, [r7, #12]
 80614b8:	60b9      	str	r1, [r7, #8]
 80614ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80614bc:	2300      	movs	r3, #0
 80614be:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80614c0:	68fb      	ldr	r3, [r7, #12]
 80614c2:	2b00      	cmp	r3, #0
 80614c4:	d101      	bne.n	80614ca <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 80614c6:	2301      	movs	r3, #1
 80614c8:	e03e      	b.n	8061548 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80614ca:	68fb      	ldr	r3, [r7, #12]
 80614cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80614d0:	2b01      	cmp	r3, #1
 80614d2:	d101      	bne.n	80614d8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80614d4:	2302      	movs	r3, #2
 80614d6:	e037      	b.n	8061548 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80614d8:	68fb      	ldr	r3, [r7, #12]
 80614da:	2201      	movs	r2, #1
 80614dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80614e0:	68fb      	ldr	r3, [r7, #12]
 80614e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80614e6:	b2db      	uxtb	r3, r3
 80614e8:	2b01      	cmp	r3, #1
 80614ea:	d126      	bne.n	806153a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80614ec:	68fb      	ldr	r3, [r7, #12]
 80614ee:	681b      	ldr	r3, [r3, #0]
 80614f0:	691b      	ldr	r3, [r3, #16]
 80614f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80614f6:	2b00      	cmp	r3, #0
 80614f8:	d11c      	bne.n	8061534 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80614fa:	68fb      	ldr	r3, [r7, #12]
 80614fc:	681b      	ldr	r3, [r3, #0]
 80614fe:	68ba      	ldr	r2, [r7, #8]
 8061500:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8061502:	68fb      	ldr	r3, [r7, #12]
 8061504:	681b      	ldr	r3, [r3, #0]
 8061506:	687a      	ldr	r2, [r7, #4]
 8061508:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 806150a:	68bb      	ldr	r3, [r7, #8]
 806150c:	2b00      	cmp	r3, #0
 806150e:	d108      	bne.n	8061522 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8061510:	68fb      	ldr	r3, [r7, #12]
 8061512:	681b      	ldr	r3, [r3, #0]
 8061514:	691a      	ldr	r2, [r3, #16]
 8061516:	68fb      	ldr	r3, [r7, #12]
 8061518:	681b      	ldr	r3, [r3, #0]
 806151a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 806151e:	611a      	str	r2, [r3, #16]
 8061520:	e00d      	b.n	806153e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8061522:	68fb      	ldr	r3, [r7, #12]
 8061524:	681b      	ldr	r3, [r3, #0]
 8061526:	691a      	ldr	r2, [r3, #16]
 8061528:	68fb      	ldr	r3, [r7, #12]
 806152a:	681b      	ldr	r3, [r3, #0]
 806152c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8061530:	611a      	str	r2, [r3, #16]
 8061532:	e004      	b.n	806153e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8061534:	2301      	movs	r3, #1
 8061536:	75fb      	strb	r3, [r7, #23]
 8061538:	e001      	b.n	806153e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 806153a:	2301      	movs	r3, #1
 806153c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 806153e:	68fb      	ldr	r3, [r7, #12]
 8061540:	2200      	movs	r2, #0
 8061542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8061546:	7dfb      	ldrb	r3, [r7, #23]
}
 8061548:	4618      	mov	r0, r3
 806154a:	371c      	adds	r7, #28
 806154c:	46bd      	mov	sp, r7
 806154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061552:	4770      	bx	lr

08061554 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8061554:	b580      	push	{r7, lr}
 8061556:	b086      	sub	sp, #24
 8061558:	af00      	add	r7, sp, #0
 806155a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 806155c:	2300      	movs	r3, #0
 806155e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8061560:	4b91      	ldr	r3, [pc, #580]	@ (80617a8 <HAL_MDMA_IRQHandler+0x254>)
 8061562:	681b      	ldr	r3, [r3, #0]
 8061564:	4a91      	ldr	r2, [pc, #580]	@ (80617ac <HAL_MDMA_IRQHandler+0x258>)
 8061566:	fba2 2303 	umull	r2, r3, r2, r3
 806156a:	0a9b      	lsrs	r3, r3, #10
 806156c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 806156e:	687b      	ldr	r3, [r7, #4]
 8061570:	681b      	ldr	r3, [r3, #0]
 8061572:	461a      	mov	r2, r3
 8061574:	4b8e      	ldr	r3, [pc, #568]	@ (80617b0 <HAL_MDMA_IRQHandler+0x25c>)
 8061576:	4413      	add	r3, r2
 8061578:	099b      	lsrs	r3, r3, #6
 806157a:	f003 031f 	and.w	r3, r3, #31
 806157e:	2201      	movs	r2, #1
 8061580:	fa02 f303 	lsl.w	r3, r2, r3
 8061584:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8061586:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 806158a:	681a      	ldr	r2, [r3, #0]
 806158c:	693b      	ldr	r3, [r7, #16]
 806158e:	4013      	ands	r3, r2
 8061590:	2b00      	cmp	r3, #0
 8061592:	f000 812d 	beq.w	80617f0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8061596:	687b      	ldr	r3, [r7, #4]
 8061598:	681b      	ldr	r3, [r3, #0]
 806159a:	681b      	ldr	r3, [r3, #0]
 806159c:	f003 0301 	and.w	r3, r3, #1
 80615a0:	2b00      	cmp	r3, #0
 80615a2:	d054      	beq.n	806164e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80615a4:	687b      	ldr	r3, [r7, #4]
 80615a6:	681b      	ldr	r3, [r3, #0]
 80615a8:	68db      	ldr	r3, [r3, #12]
 80615aa:	f003 0302 	and.w	r3, r3, #2
 80615ae:	2b00      	cmp	r3, #0
 80615b0:	d04d      	beq.n	806164e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80615b2:	687b      	ldr	r3, [r7, #4]
 80615b4:	681b      	ldr	r3, [r3, #0]
 80615b6:	68da      	ldr	r2, [r3, #12]
 80615b8:	687b      	ldr	r3, [r7, #4]
 80615ba:	681b      	ldr	r3, [r3, #0]
 80615bc:	f022 0202 	bic.w	r2, r2, #2
 80615c0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80615c2:	687b      	ldr	r3, [r7, #4]
 80615c4:	681b      	ldr	r3, [r3, #0]
 80615c6:	689b      	ldr	r3, [r3, #8]
 80615c8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80615ca:	68fb      	ldr	r3, [r7, #12]
 80615cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80615d0:	2b00      	cmp	r3, #0
 80615d2:	d106      	bne.n	80615e2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80615d4:	687b      	ldr	r3, [r7, #4]
 80615d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80615d8:	f043 0201 	orr.w	r2, r3, #1
 80615dc:	687b      	ldr	r3, [r7, #4]
 80615de:	669a      	str	r2, [r3, #104]	@ 0x68
 80615e0:	e005      	b.n	80615ee <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80615e2:	687b      	ldr	r3, [r7, #4]
 80615e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80615e6:	f043 0202 	orr.w	r2, r3, #2
 80615ea:	687b      	ldr	r3, [r7, #4]
 80615ec:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80615ee:	68fb      	ldr	r3, [r7, #12]
 80615f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80615f4:	2b00      	cmp	r3, #0
 80615f6:	d005      	beq.n	8061604 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80615f8:	687b      	ldr	r3, [r7, #4]
 80615fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80615fc:	f043 0204 	orr.w	r2, r3, #4
 8061600:	687b      	ldr	r3, [r7, #4]
 8061602:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8061604:	68fb      	ldr	r3, [r7, #12]
 8061606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806160a:	2b00      	cmp	r3, #0
 806160c:	d005      	beq.n	806161a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 806160e:	687b      	ldr	r3, [r7, #4]
 8061610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8061612:	f043 0208 	orr.w	r2, r3, #8
 8061616:	687b      	ldr	r3, [r7, #4]
 8061618:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 806161a:	68fb      	ldr	r3, [r7, #12]
 806161c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8061620:	2b00      	cmp	r3, #0
 8061622:	d005      	beq.n	8061630 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8061624:	687b      	ldr	r3, [r7, #4]
 8061626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8061628:	f043 0210 	orr.w	r2, r3, #16
 806162c:	687b      	ldr	r3, [r7, #4]
 806162e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8061630:	68fb      	ldr	r3, [r7, #12]
 8061632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8061636:	2b00      	cmp	r3, #0
 8061638:	d005      	beq.n	8061646 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 806163a:	687b      	ldr	r3, [r7, #4]
 806163c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 806163e:	f043 0220 	orr.w	r2, r3, #32
 8061642:	687b      	ldr	r3, [r7, #4]
 8061644:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8061646:	687b      	ldr	r3, [r7, #4]
 8061648:	681b      	ldr	r3, [r3, #0]
 806164a:	2201      	movs	r2, #1
 806164c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 806164e:	687b      	ldr	r3, [r7, #4]
 8061650:	681b      	ldr	r3, [r3, #0]
 8061652:	681b      	ldr	r3, [r3, #0]
 8061654:	f003 0310 	and.w	r3, r3, #16
 8061658:	2b00      	cmp	r3, #0
 806165a:	d012      	beq.n	8061682 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 806165c:	687b      	ldr	r3, [r7, #4]
 806165e:	681b      	ldr	r3, [r3, #0]
 8061660:	68db      	ldr	r3, [r3, #12]
 8061662:	f003 0320 	and.w	r3, r3, #32
 8061666:	2b00      	cmp	r3, #0
 8061668:	d00b      	beq.n	8061682 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 806166a:	687b      	ldr	r3, [r7, #4]
 806166c:	681b      	ldr	r3, [r3, #0]
 806166e:	2210      	movs	r2, #16
 8061670:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8061672:	687b      	ldr	r3, [r7, #4]
 8061674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8061676:	2b00      	cmp	r3, #0
 8061678:	d003      	beq.n	8061682 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 806167a:	687b      	ldr	r3, [r7, #4]
 806167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806167e:	6878      	ldr	r0, [r7, #4]
 8061680:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8061682:	687b      	ldr	r3, [r7, #4]
 8061684:	681b      	ldr	r3, [r3, #0]
 8061686:	681b      	ldr	r3, [r3, #0]
 8061688:	f003 0308 	and.w	r3, r3, #8
 806168c:	2b00      	cmp	r3, #0
 806168e:	d012      	beq.n	80616b6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8061690:	687b      	ldr	r3, [r7, #4]
 8061692:	681b      	ldr	r3, [r3, #0]
 8061694:	68db      	ldr	r3, [r3, #12]
 8061696:	f003 0310 	and.w	r3, r3, #16
 806169a:	2b00      	cmp	r3, #0
 806169c:	d00b      	beq.n	80616b6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 806169e:	687b      	ldr	r3, [r7, #4]
 80616a0:	681b      	ldr	r3, [r3, #0]
 80616a2:	2208      	movs	r2, #8
 80616a4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80616a6:	687b      	ldr	r3, [r7, #4]
 80616a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80616aa:	2b00      	cmp	r3, #0
 80616ac:	d003      	beq.n	80616b6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80616ae:	687b      	ldr	r3, [r7, #4]
 80616b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80616b2:	6878      	ldr	r0, [r7, #4]
 80616b4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80616b6:	687b      	ldr	r3, [r7, #4]
 80616b8:	681b      	ldr	r3, [r3, #0]
 80616ba:	681b      	ldr	r3, [r3, #0]
 80616bc:	f003 0304 	and.w	r3, r3, #4
 80616c0:	2b00      	cmp	r3, #0
 80616c2:	d012      	beq.n	80616ea <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80616c4:	687b      	ldr	r3, [r7, #4]
 80616c6:	681b      	ldr	r3, [r3, #0]
 80616c8:	68db      	ldr	r3, [r3, #12]
 80616ca:	f003 0308 	and.w	r3, r3, #8
 80616ce:	2b00      	cmp	r3, #0
 80616d0:	d00b      	beq.n	80616ea <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80616d2:	687b      	ldr	r3, [r7, #4]
 80616d4:	681b      	ldr	r3, [r3, #0]
 80616d6:	2204      	movs	r2, #4
 80616d8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80616da:	687b      	ldr	r3, [r7, #4]
 80616dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80616de:	2b00      	cmp	r3, #0
 80616e0:	d003      	beq.n	80616ea <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80616e2:	687b      	ldr	r3, [r7, #4]
 80616e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80616e6:	6878      	ldr	r0, [r7, #4]
 80616e8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80616ea:	687b      	ldr	r3, [r7, #4]
 80616ec:	681b      	ldr	r3, [r3, #0]
 80616ee:	681b      	ldr	r3, [r3, #0]
 80616f0:	f003 0302 	and.w	r3, r3, #2
 80616f4:	2b00      	cmp	r3, #0
 80616f6:	d039      	beq.n	806176c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80616f8:	687b      	ldr	r3, [r7, #4]
 80616fa:	681b      	ldr	r3, [r3, #0]
 80616fc:	68db      	ldr	r3, [r3, #12]
 80616fe:	f003 0304 	and.w	r3, r3, #4
 8061702:	2b00      	cmp	r3, #0
 8061704:	d032      	beq.n	806176c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8061706:	687b      	ldr	r3, [r7, #4]
 8061708:	681b      	ldr	r3, [r3, #0]
 806170a:	68da      	ldr	r2, [r3, #12]
 806170c:	687b      	ldr	r3, [r7, #4]
 806170e:	681b      	ldr	r3, [r3, #0]
 8061710:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8061714:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8061716:	687b      	ldr	r3, [r7, #4]
 8061718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 806171c:	b2db      	uxtb	r3, r3
 806171e:	2b04      	cmp	r3, #4
 8061720:	d110      	bne.n	8061744 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8061722:	687b      	ldr	r3, [r7, #4]
 8061724:	2200      	movs	r2, #0
 8061726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 806172a:	687b      	ldr	r3, [r7, #4]
 806172c:	2201      	movs	r2, #1
 806172e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8061732:	687b      	ldr	r3, [r7, #4]
 8061734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8061736:	2b00      	cmp	r3, #0
 8061738:	d05c      	beq.n	80617f4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 806173a:	687b      	ldr	r3, [r7, #4]
 806173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806173e:	6878      	ldr	r0, [r7, #4]
 8061740:	4798      	blx	r3
        }
        return;
 8061742:	e057      	b.n	80617f4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8061744:	687b      	ldr	r3, [r7, #4]
 8061746:	681b      	ldr	r3, [r3, #0]
 8061748:	2202      	movs	r2, #2
 806174a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 806174c:	687b      	ldr	r3, [r7, #4]
 806174e:	2200      	movs	r2, #0
 8061750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8061754:	687b      	ldr	r3, [r7, #4]
 8061756:	2201      	movs	r2, #1
 8061758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 806175c:	687b      	ldr	r3, [r7, #4]
 806175e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8061760:	2b00      	cmp	r3, #0
 8061762:	d003      	beq.n	806176c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8061764:	687b      	ldr	r3, [r7, #4]
 8061766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8061768:	6878      	ldr	r0, [r7, #4]
 806176a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 806176c:	687b      	ldr	r3, [r7, #4]
 806176e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8061770:	2b00      	cmp	r3, #0
 8061772:	d040      	beq.n	80617f6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8061774:	687b      	ldr	r3, [r7, #4]
 8061776:	2204      	movs	r2, #4
 8061778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 806177c:	687b      	ldr	r3, [r7, #4]
 806177e:	681b      	ldr	r3, [r3, #0]
 8061780:	68da      	ldr	r2, [r3, #12]
 8061782:	687b      	ldr	r3, [r7, #4]
 8061784:	681b      	ldr	r3, [r3, #0]
 8061786:	f022 0201 	bic.w	r2, r2, #1
 806178a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 806178c:	68bb      	ldr	r3, [r7, #8]
 806178e:	3301      	adds	r3, #1
 8061790:	60bb      	str	r3, [r7, #8]
 8061792:	697a      	ldr	r2, [r7, #20]
 8061794:	429a      	cmp	r2, r3
 8061796:	d30d      	bcc.n	80617b4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8061798:	687b      	ldr	r3, [r7, #4]
 806179a:	681b      	ldr	r3, [r3, #0]
 806179c:	68db      	ldr	r3, [r3, #12]
 806179e:	f003 0301 	and.w	r3, r3, #1
 80617a2:	2b00      	cmp	r3, #0
 80617a4:	d1f2      	bne.n	806178c <HAL_MDMA_IRQHandler+0x238>
 80617a6:	e006      	b.n	80617b6 <HAL_MDMA_IRQHandler+0x262>
 80617a8:	240148f8 	.word	0x240148f8
 80617ac:	1b4e81b5 	.word	0x1b4e81b5
 80617b0:	adffffc0 	.word	0xadffffc0
        break;
 80617b4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80617b6:	687b      	ldr	r3, [r7, #4]
 80617b8:	2200      	movs	r2, #0
 80617ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80617be:	687b      	ldr	r3, [r7, #4]
 80617c0:	681b      	ldr	r3, [r3, #0]
 80617c2:	68db      	ldr	r3, [r3, #12]
 80617c4:	f003 0301 	and.w	r3, r3, #1
 80617c8:	2b00      	cmp	r3, #0
 80617ca:	d004      	beq.n	80617d6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80617cc:	687b      	ldr	r3, [r7, #4]
 80617ce:	2203      	movs	r2, #3
 80617d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80617d4:	e003      	b.n	80617de <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80617d6:	687b      	ldr	r3, [r7, #4]
 80617d8:	2201      	movs	r2, #1
 80617da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80617de:	687b      	ldr	r3, [r7, #4]
 80617e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80617e2:	2b00      	cmp	r3, #0
 80617e4:	d007      	beq.n	80617f6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80617e6:	687b      	ldr	r3, [r7, #4]
 80617e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80617ea:	6878      	ldr	r0, [r7, #4]
 80617ec:	4798      	blx	r3
 80617ee:	e002      	b.n	80617f6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80617f0:	bf00      	nop
 80617f2:	e000      	b.n	80617f6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80617f4:	bf00      	nop
    }
  }
}
 80617f6:	3718      	adds	r7, #24
 80617f8:	46bd      	mov	sp, r7
 80617fa:	bd80      	pop	{r7, pc}

080617fc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80617fc:	b480      	push	{r7}
 80617fe:	b085      	sub	sp, #20
 8061800:	af00      	add	r7, sp, #0
 8061802:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8061804:	687b      	ldr	r3, [r7, #4]
 8061806:	68d9      	ldr	r1, [r3, #12]
 8061808:	687b      	ldr	r3, [r7, #4]
 806180a:	691a      	ldr	r2, [r3, #16]
 806180c:	687b      	ldr	r3, [r7, #4]
 806180e:	681b      	ldr	r3, [r3, #0]
 8061810:	430a      	orrs	r2, r1
 8061812:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8061814:	687b      	ldr	r3, [r7, #4]
 8061816:	695a      	ldr	r2, [r3, #20]
 8061818:	687b      	ldr	r3, [r7, #4]
 806181a:	699b      	ldr	r3, [r3, #24]
 806181c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 806181e:	687b      	ldr	r3, [r7, #4]
 8061820:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8061822:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8061824:	687b      	ldr	r3, [r7, #4]
 8061826:	6a1b      	ldr	r3, [r3, #32]
 8061828:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 806182a:	687b      	ldr	r3, [r7, #4]
 806182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 806182e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8061830:	687b      	ldr	r3, [r7, #4]
 8061832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8061834:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8061836:	687b      	ldr	r3, [r7, #4]
 8061838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 806183a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 806183c:	687b      	ldr	r3, [r7, #4]
 806183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8061840:	3b01      	subs	r3, #1
 8061842:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8061844:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8061848:	687b      	ldr	r3, [r7, #4]
 806184a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 806184c:	687b      	ldr	r3, [r7, #4]
 806184e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8061850:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8061852:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8061854:	687b      	ldr	r3, [r7, #4]
 8061856:	685b      	ldr	r3, [r3, #4]
 8061858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806185c:	d107      	bne.n	806186e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 806185e:	687b      	ldr	r3, [r7, #4]
 8061860:	681b      	ldr	r3, [r3, #0]
 8061862:	691a      	ldr	r2, [r3, #16]
 8061864:	687b      	ldr	r3, [r7, #4]
 8061866:	681b      	ldr	r3, [r3, #0]
 8061868:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 806186c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 806186e:	687b      	ldr	r3, [r7, #4]
 8061870:	681b      	ldr	r3, [r3, #0]
 8061872:	2200      	movs	r2, #0
 8061874:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8061876:	687b      	ldr	r3, [r7, #4]
 8061878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806187a:	2b00      	cmp	r3, #0
 806187c:	da11      	bge.n	80618a2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 806187e:	687b      	ldr	r3, [r7, #4]
 8061880:	681b      	ldr	r3, [r3, #0]
 8061882:	695a      	ldr	r2, [r3, #20]
 8061884:	687b      	ldr	r3, [r7, #4]
 8061886:	681b      	ldr	r3, [r3, #0]
 8061888:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 806188c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 806188e:	687b      	ldr	r3, [r7, #4]
 8061890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061892:	425b      	negs	r3, r3
 8061894:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8061896:	687b      	ldr	r3, [r7, #4]
 8061898:	681b      	ldr	r3, [r3, #0]
 806189a:	68fa      	ldr	r2, [r7, #12]
 806189c:	b292      	uxth	r2, r2
 806189e:	621a      	str	r2, [r3, #32]
 80618a0:	e006      	b.n	80618b0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80618a2:	687b      	ldr	r3, [r7, #4]
 80618a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80618a6:	461a      	mov	r2, r3
 80618a8:	687b      	ldr	r3, [r7, #4]
 80618aa:	681b      	ldr	r3, [r3, #0]
 80618ac:	b292      	uxth	r2, r2
 80618ae:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80618b0:	687b      	ldr	r3, [r7, #4]
 80618b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80618b4:	2b00      	cmp	r3, #0
 80618b6:	da15      	bge.n	80618e4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80618b8:	687b      	ldr	r3, [r7, #4]
 80618ba:	681b      	ldr	r3, [r3, #0]
 80618bc:	695a      	ldr	r2, [r3, #20]
 80618be:	687b      	ldr	r3, [r7, #4]
 80618c0:	681b      	ldr	r3, [r3, #0]
 80618c2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80618c6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80618c8:	687b      	ldr	r3, [r7, #4]
 80618ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80618cc:	425b      	negs	r3, r3
 80618ce:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80618d0:	687b      	ldr	r3, [r7, #4]
 80618d2:	681b      	ldr	r3, [r3, #0]
 80618d4:	6a19      	ldr	r1, [r3, #32]
 80618d6:	68fb      	ldr	r3, [r7, #12]
 80618d8:	041a      	lsls	r2, r3, #16
 80618da:	687b      	ldr	r3, [r7, #4]
 80618dc:	681b      	ldr	r3, [r3, #0]
 80618de:	430a      	orrs	r2, r1
 80618e0:	621a      	str	r2, [r3, #32]
 80618e2:	e009      	b.n	80618f8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80618e4:	687b      	ldr	r3, [r7, #4]
 80618e6:	681b      	ldr	r3, [r3, #0]
 80618e8:	6a19      	ldr	r1, [r3, #32]
 80618ea:	687b      	ldr	r3, [r7, #4]
 80618ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80618ee:	041a      	lsls	r2, r3, #16
 80618f0:	687b      	ldr	r3, [r7, #4]
 80618f2:	681b      	ldr	r3, [r3, #0]
 80618f4:	430a      	orrs	r2, r1
 80618f6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80618f8:	687b      	ldr	r3, [r7, #4]
 80618fa:	685b      	ldr	r3, [r3, #4]
 80618fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8061900:	d006      	beq.n	8061910 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8061902:	687b      	ldr	r3, [r7, #4]
 8061904:	685a      	ldr	r2, [r3, #4]
 8061906:	687b      	ldr	r3, [r7, #4]
 8061908:	681b      	ldr	r3, [r3, #0]
 806190a:	b2d2      	uxtb	r2, r2
 806190c:	629a      	str	r2, [r3, #40]	@ 0x28
 806190e:	e003      	b.n	8061918 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8061910:	687b      	ldr	r3, [r7, #4]
 8061912:	681b      	ldr	r3, [r3, #0]
 8061914:	2200      	movs	r2, #0
 8061916:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8061918:	687b      	ldr	r3, [r7, #4]
 806191a:	681b      	ldr	r3, [r3, #0]
 806191c:	2200      	movs	r2, #0
 806191e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8061920:	bf00      	nop
 8061922:	3714      	adds	r7, #20
 8061924:	46bd      	mov	sp, r7
 8061926:	f85d 7b04 	ldr.w	r7, [sp], #4
 806192a:	4770      	bx	lr

0806192c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 806192c:	b580      	push	{r7, lr}
 806192e:	b082      	sub	sp, #8
 8061930:	af00      	add	r7, sp, #0
 8061932:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8061934:	687b      	ldr	r3, [r7, #4]
 8061936:	2b00      	cmp	r3, #0
 8061938:	d101      	bne.n	806193e <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 806193a:	2301      	movs	r3, #1
 806193c:	e031      	b.n	80619a2 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 806193e:	687b      	ldr	r3, [r7, #4]
 8061940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8061944:	b2db      	uxtb	r3, r3
 8061946:	2b00      	cmp	r3, #0
 8061948:	d105      	bne.n	8061956 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 806194a:	687b      	ldr	r3, [r7, #4]
 806194c:	2200      	movs	r2, #0
 806194e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8061950:	6878      	ldr	r0, [r7, #4]
 8061952:	f7fd ff45 	bl	805f7e0 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8061956:	687b      	ldr	r3, [r7, #4]
 8061958:	2203      	movs	r2, #3
 806195a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 806195e:	6878      	ldr	r0, [r7, #4]
 8061960:	f000 f824 	bl	80619ac <HAL_MMC_InitCard>
 8061964:	4603      	mov	r3, r0
 8061966:	2b01      	cmp	r3, #1
 8061968:	d101      	bne.n	806196e <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 806196a:	2301      	movs	r3, #1
 806196c:	e019      	b.n	80619a2 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 806196e:	687b      	ldr	r3, [r7, #4]
 8061970:	2200      	movs	r2, #0
 8061972:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8061974:	687b      	ldr	r3, [r7, #4]
 8061976:	2200      	movs	r2, #0
 8061978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 806197a:	687b      	ldr	r3, [r7, #4]
 806197c:	2201      	movs	r2, #1
 806197e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8061982:	687b      	ldr	r3, [r7, #4]
 8061984:	68db      	ldr	r3, [r3, #12]
 8061986:	2b00      	cmp	r3, #0
 8061988:	d00a      	beq.n	80619a0 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 806198a:	687b      	ldr	r3, [r7, #4]
 806198c:	68db      	ldr	r3, [r3, #12]
 806198e:	4619      	mov	r1, r3
 8061990:	6878      	ldr	r0, [r7, #4]
 8061992:	f000 fed3 	bl	806273c <HAL_MMC_ConfigWideBusOperation>
 8061996:	4603      	mov	r3, r0
 8061998:	2b00      	cmp	r3, #0
 806199a:	d001      	beq.n	80619a0 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 806199c:	2301      	movs	r3, #1
 806199e:	e000      	b.n	80619a2 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80619a0:	2300      	movs	r3, #0
}
 80619a2:	4618      	mov	r0, r3
 80619a4:	3708      	adds	r7, #8
 80619a6:	46bd      	mov	sp, r7
 80619a8:	bd80      	pop	{r7, pc}
	...

080619ac <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80619ac:	b590      	push	{r4, r7, lr}
 80619ae:	b08d      	sub	sp, #52	@ 0x34
 80619b0:	af02      	add	r7, sp, #8
 80619b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80619b4:	2300      	movs	r3, #0
 80619b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80619b8:	2300      	movs	r3, #0
 80619ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80619bc:	2300      	movs	r3, #0
 80619be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80619c0:	2300      	movs	r3, #0
 80619c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80619c4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80619c8:	f04f 0100 	mov.w	r1, #0
 80619cc:	f003 fde8 	bl	80655a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80619d0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80619d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80619d4:	2b00      	cmp	r3, #0
 80619d6:	d109      	bne.n	80619ec <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80619d8:	687b      	ldr	r3, [r7, #4]
 80619da:	2201      	movs	r2, #1
 80619dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80619e0:	687b      	ldr	r3, [r7, #4]
 80619e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80619e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80619e8:	2301      	movs	r3, #1
 80619ea:	e070      	b.n	8061ace <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80619ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80619ee:	0a1b      	lsrs	r3, r3, #8
 80619f0:	4a39      	ldr	r2, [pc, #228]	@ (8061ad8 <HAL_MMC_InitCard+0x12c>)
 80619f2:	fba2 2303 	umull	r2, r3, r2, r3
 80619f6:	091b      	lsrs	r3, r3, #4
 80619f8:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 80619fa:	687b      	ldr	r3, [r7, #4]
 80619fc:	681c      	ldr	r4, [r3, #0]
 80619fe:	466a      	mov	r2, sp
 8061a00:	f107 0318 	add.w	r3, r7, #24
 8061a04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8061a08:	e882 0003 	stmia.w	r2, {r0, r1}
 8061a0c:	f107 030c 	add.w	r3, r7, #12
 8061a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8061a12:	4620      	mov	r0, r4
 8061a14:	f006 fc4a 	bl	80682ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8061a18:	687b      	ldr	r3, [r7, #4]
 8061a1a:	681b      	ldr	r3, [r3, #0]
 8061a1c:	4618      	mov	r0, r3
 8061a1e:	f006 fc8d 	bl	806833c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8061a22:	69fb      	ldr	r3, [r7, #28]
 8061a24:	2b00      	cmp	r3, #0
 8061a26:	d005      	beq.n	8061a34 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8061a28:	69fb      	ldr	r3, [r7, #28]
 8061a2a:	005b      	lsls	r3, r3, #1
 8061a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8061a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8061a32:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8061a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061a36:	2b00      	cmp	r3, #0
 8061a38:	d007      	beq.n	8061a4a <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8061a3a:	4a28      	ldr	r2, [pc, #160]	@ (8061adc <HAL_MMC_InitCard+0x130>)
 8061a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8061a42:	3301      	adds	r3, #1
 8061a44:	4618      	mov	r0, r3
 8061a46:	f7fe fd2d 	bl	80604a4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8061a4a:	6878      	ldr	r0, [r7, #4]
 8061a4c:	f001 f860 	bl	8062b10 <MMC_PowerON>
 8061a50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8061a52:	6a3b      	ldr	r3, [r7, #32]
 8061a54:	2b00      	cmp	r3, #0
 8061a56:	d00b      	beq.n	8061a70 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8061a58:	687b      	ldr	r3, [r7, #4]
 8061a5a:	2201      	movs	r2, #1
 8061a5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8061a60:	687b      	ldr	r3, [r7, #4]
 8061a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061a64:	6a3b      	ldr	r3, [r7, #32]
 8061a66:	431a      	orrs	r2, r3
 8061a68:	687b      	ldr	r3, [r7, #4]
 8061a6a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8061a6c:	2301      	movs	r3, #1
 8061a6e:	e02e      	b.n	8061ace <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8061a70:	6878      	ldr	r0, [r7, #4]
 8061a72:	f000 ff4f 	bl	8062914 <MMC_InitCard>
 8061a76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8061a78:	6a3b      	ldr	r3, [r7, #32]
 8061a7a:	2b00      	cmp	r3, #0
 8061a7c:	d00b      	beq.n	8061a96 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8061a7e:	687b      	ldr	r3, [r7, #4]
 8061a80:	2201      	movs	r2, #1
 8061a82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8061a86:	687b      	ldr	r3, [r7, #4]
 8061a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061a8a:	6a3b      	ldr	r3, [r7, #32]
 8061a8c:	431a      	orrs	r2, r3
 8061a8e:	687b      	ldr	r3, [r7, #4]
 8061a90:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8061a92:	2301      	movs	r3, #1
 8061a94:	e01b      	b.n	8061ace <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8061a96:	687b      	ldr	r3, [r7, #4]
 8061a98:	681b      	ldr	r3, [r3, #0]
 8061a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8061a9e:	4618      	mov	r0, r3
 8061aa0:	f006 fcf2 	bl	8068488 <SDMMC_CmdBlockLength>
 8061aa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8061aa6:	6a3b      	ldr	r3, [r7, #32]
 8061aa8:	2b00      	cmp	r3, #0
 8061aaa:	d00f      	beq.n	8061acc <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8061aac:	687b      	ldr	r3, [r7, #4]
 8061aae:	681b      	ldr	r3, [r3, #0]
 8061ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8061ae0 <HAL_MMC_InitCard+0x134>)
 8061ab2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8061ab4:	687b      	ldr	r3, [r7, #4]
 8061ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061ab8:	6a3b      	ldr	r3, [r7, #32]
 8061aba:	431a      	orrs	r2, r3
 8061abc:	687b      	ldr	r3, [r7, #4]
 8061abe:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8061ac0:	687b      	ldr	r3, [r7, #4]
 8061ac2:	2201      	movs	r2, #1
 8061ac4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8061ac8:	2301      	movs	r3, #1
 8061aca:	e000      	b.n	8061ace <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8061acc:	2300      	movs	r3, #0
}
 8061ace:	4618      	mov	r0, r3
 8061ad0:	372c      	adds	r7, #44	@ 0x2c
 8061ad2:	46bd      	mov	sp, r7
 8061ad4:	bd90      	pop	{r4, r7, pc}
 8061ad6:	bf00      	nop
 8061ad8:	014f8b59 	.word	0x014f8b59
 8061adc:	00012110 	.word	0x00012110
 8061ae0:	1fe00fff 	.word	0x1fe00fff

08061ae4 <HAL_MMC_DeInit>:
  * @brief  De-Initializes the MMC card.
  * @param  hmmc: Pointer to MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_DeInit(MMC_HandleTypeDef *hmmc)
{
 8061ae4:	b580      	push	{r7, lr}
 8061ae6:	b082      	sub	sp, #8
 8061ae8:	af00      	add	r7, sp, #0
 8061aea:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8061aec:	687b      	ldr	r3, [r7, #4]
 8061aee:	2b00      	cmp	r3, #0
 8061af0:	d101      	bne.n	8061af6 <HAL_MMC_DeInit+0x12>
  {
    return HAL_ERROR;
 8061af2:	2301      	movs	r3, #1
 8061af4:	e011      	b.n	8061b1a <HAL_MMC_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hmmc->Instance));

  hmmc->State = HAL_MMC_STATE_BUSY;
 8061af6:	687b      	ldr	r3, [r7, #4]
 8061af8:	2203      	movs	r2, #3
 8061afa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Set MMC power state to off */
  MMC_PowerOFF(hmmc);
 8061afe:	6878      	ldr	r0, [r7, #4]
 8061b00:	f001 f856 	bl	8062bb0 <MMC_PowerOFF>

  /* DeInit the low level hardware */
  hmmc->MspDeInitCallback(hmmc);
#else
  /* De-Initialize the MSP layer */
  HAL_MMC_MspDeInit(hmmc);
 8061b04:	6878      	ldr	r0, [r7, #4]
 8061b06:	f7fd ff29 	bl	805f95c <HAL_MMC_MspDeInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8061b0a:	687b      	ldr	r3, [r7, #4]
 8061b0c:	2200      	movs	r2, #0
 8061b0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hmmc->State = HAL_MMC_STATE_RESET;
 8061b10:	687b      	ldr	r3, [r7, #4]
 8061b12:	2200      	movs	r2, #0
 8061b14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8061b18:	2300      	movs	r3, #0
}
 8061b1a:	4618      	mov	r0, r3
 8061b1c:	3708      	adds	r7, #8
 8061b1e:	46bd      	mov	sp, r7
 8061b20:	bd80      	pop	{r7, pc}
	...

08061b24 <HAL_MMC_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8061b24:	b580      	push	{r7, lr}
 8061b26:	b08c      	sub	sp, #48	@ 0x30
 8061b28:	af00      	add	r7, sp, #0
 8061b2a:	60f8      	str	r0, [r7, #12]
 8061b2c:	60b9      	str	r1, [r7, #8]
 8061b2e:	607a      	str	r2, [r7, #4]
 8061b30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8061b32:	687b      	ldr	r3, [r7, #4]
 8061b34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8061b36:	68bb      	ldr	r3, [r7, #8]
 8061b38:	2b00      	cmp	r3, #0
 8061b3a:	d107      	bne.n	8061b4c <HAL_MMC_ReadBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8061b3c:	68fb      	ldr	r3, [r7, #12]
 8061b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061b40:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8061b44:	68fb      	ldr	r3, [r7, #12]
 8061b46:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8061b48:	2301      	movs	r3, #1
 8061b4a:	e0a8      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8061b4c:	68fb      	ldr	r3, [r7, #12]
 8061b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8061b52:	b2db      	uxtb	r3, r3
 8061b54:	2b01      	cmp	r3, #1
 8061b56:	f040 80a1 	bne.w	8061c9c <HAL_MMC_ReadBlocks_DMA+0x178>
  {
    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8061b5a:	68fb      	ldr	r3, [r7, #12]
 8061b5c:	2200      	movs	r2, #0
 8061b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 8061b60:	687a      	ldr	r2, [r7, #4]
 8061b62:	683b      	ldr	r3, [r7, #0]
 8061b64:	441a      	add	r2, r3
 8061b66:	68fb      	ldr	r3, [r7, #12]
 8061b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8061b6a:	429a      	cmp	r2, r3
 8061b6c:	d907      	bls.n	8061b7e <HAL_MMC_ReadBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 8061b6e:	68fb      	ldr	r3, [r7, #12]
 8061b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061b72:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8061b76:	68fb      	ldr	r3, [r7, #12]
 8061b78:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8061b7a:	2301      	movs	r3, #1
 8061b7c:	e08f      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 8061b7e:	68fb      	ldr	r3, [r7, #12]
 8061b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8061b84:	0a1b      	lsrs	r3, r3, #8
 8061b86:	b2db      	uxtb	r3, r3
 8061b88:	2b00      	cmp	r3, #0
 8061b8a:	d019      	beq.n	8061bc0 <HAL_MMC_ReadBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 8061b8c:	683b      	ldr	r3, [r7, #0]
 8061b8e:	f003 0307 	and.w	r3, r3, #7
 8061b92:	2b00      	cmp	r3, #0
 8061b94:	d007      	beq.n	8061ba6 <HAL_MMC_ReadBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 8061b96:	68fb      	ldr	r3, [r7, #12]
 8061b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061b9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8061b9e:	68fb      	ldr	r3, [r7, #12]
 8061ba0:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8061ba2:	2301      	movs	r3, #1
 8061ba4:	e07b      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
      }

      if ((BlockAdd % 8U) != 0U)
 8061ba6:	687b      	ldr	r3, [r7, #4]
 8061ba8:	f003 0307 	and.w	r3, r3, #7
 8061bac:	2b00      	cmp	r3, #0
 8061bae:	d007      	beq.n	8061bc0 <HAL_MMC_ReadBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 8061bb0:	68fb      	ldr	r3, [r7, #12]
 8061bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061bb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8061bb8:	68fb      	ldr	r3, [r7, #12]
 8061bba:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8061bbc:	2301      	movs	r3, #1
 8061bbe:	e06e      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 8061bc0:	68fb      	ldr	r3, [r7, #12]
 8061bc2:	2203      	movs	r2, #3
 8061bc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 8061bc8:	68fb      	ldr	r3, [r7, #12]
 8061bca:	681b      	ldr	r3, [r3, #0]
 8061bcc:	2200      	movs	r2, #0
 8061bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pRxBuffPtr = pData;
 8061bd0:	68fb      	ldr	r3, [r7, #12]
 8061bd2:	68ba      	ldr	r2, [r7, #8]
 8061bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 8061bd6:	683b      	ldr	r3, [r7, #0]
 8061bd8:	025a      	lsls	r2, r3, #9
 8061bda:	68fb      	ldr	r3, [r7, #12]
 8061bdc:	629a      	str	r2, [r3, #40]	@ 0x28

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 8061bde:	68fb      	ldr	r3, [r7, #12]
 8061be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8061be2:	2b01      	cmp	r3, #1
 8061be4:	d002      	beq.n	8061bec <HAL_MMC_ReadBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 8061be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8061be8:	025b      	lsls	r3, r3, #9
 8061bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8061bec:	f04f 33ff 	mov.w	r3, #4294967295
 8061bf0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 8061bf2:	683b      	ldr	r3, [r7, #0]
 8061bf4:	025b      	lsls	r3, r3, #9
 8061bf6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8061bf8:	2390      	movs	r3, #144	@ 0x90
 8061bfa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8061bfc:	2302      	movs	r3, #2
 8061bfe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8061c00:	2300      	movs	r3, #0
 8061c02:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8061c04:	2300      	movs	r3, #0
 8061c06:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8061c08:	68fb      	ldr	r3, [r7, #12]
 8061c0a:	681b      	ldr	r3, [r3, #0]
 8061c0c:	f107 0210 	add.w	r2, r7, #16
 8061c10:	4611      	mov	r1, r2
 8061c12:	4618      	mov	r0, r3
 8061c14:	f006 fc0c 	bl	8068430 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8061c18:	68fb      	ldr	r3, [r7, #12]
 8061c1a:	681b      	ldr	r3, [r3, #0]
 8061c1c:	68da      	ldr	r2, [r3, #12]
 8061c1e:	68fb      	ldr	r3, [r7, #12]
 8061c20:	681b      	ldr	r3, [r3, #0]
 8061c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8061c26:	60da      	str	r2, [r3, #12]
    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 8061c28:	68fb      	ldr	r3, [r7, #12]
 8061c2a:	681b      	ldr	r3, [r3, #0]
 8061c2c:	68ba      	ldr	r2, [r7, #8]
 8061c2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8061c30:	68fb      	ldr	r3, [r7, #12]
 8061c32:	681b      	ldr	r3, [r3, #0]
 8061c34:	2201      	movs	r2, #1
 8061c36:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8061c38:	683b      	ldr	r3, [r7, #0]
 8061c3a:	2b01      	cmp	r3, #1
 8061c3c:	d90a      	bls.n	8061c54 <HAL_MMC_ReadBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 8061c3e:	68fb      	ldr	r3, [r7, #12]
 8061c40:	2282      	movs	r2, #130	@ 0x82
 8061c42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 8061c44:	68fb      	ldr	r3, [r7, #12]
 8061c46:	681b      	ldr	r3, [r3, #0]
 8061c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8061c4a:	4618      	mov	r0, r3
 8061c4c:	f006 fc62 	bl	8068514 <SDMMC_CmdReadMultiBlock>
 8061c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8061c52:	e009      	b.n	8061c68 <HAL_MMC_ReadBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_READ_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 8061c54:	68fb      	ldr	r3, [r7, #12]
 8061c56:	2281      	movs	r2, #129	@ 0x81
 8061c58:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 8061c5a:	68fb      	ldr	r3, [r7, #12]
 8061c5c:	681b      	ldr	r3, [r3, #0]
 8061c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8061c60:	4618      	mov	r0, r3
 8061c62:	f006 fc34 	bl	80684ce <SDMMC_CmdReadSingleBlock>
 8061c66:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 8061c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8061c6a:	2b00      	cmp	r3, #0
 8061c6c:	d00c      	beq.n	8061c88 <HAL_MMC_ReadBlocks_DMA+0x164>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8061c6e:	68fb      	ldr	r3, [r7, #12]
 8061c70:	681b      	ldr	r3, [r3, #0]
 8061c72:	4a0d      	ldr	r2, [pc, #52]	@ (8061ca8 <HAL_MMC_ReadBlocks_DMA+0x184>)
 8061c74:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode = errorstate;
 8061c76:	68fb      	ldr	r3, [r7, #12]
 8061c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8061c7a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8061c7c:	68fb      	ldr	r3, [r7, #12]
 8061c7e:	2201      	movs	r2, #1
 8061c80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8061c84:	2301      	movs	r3, #1
 8061c86:	e00a      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8061c88:	68fb      	ldr	r3, [r7, #12]
 8061c8a:	681b      	ldr	r3, [r3, #0]
 8061c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8061c8e:	68fb      	ldr	r3, [r7, #12]
 8061c90:	681b      	ldr	r3, [r3, #0]
 8061c92:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8061c96:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8061c98:	2300      	movs	r3, #0
 8061c9a:	e000      	b.n	8061c9e <HAL_MMC_ReadBlocks_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8061c9c:	2302      	movs	r3, #2
  }
}
 8061c9e:	4618      	mov	r0, r3
 8061ca0:	3730      	adds	r7, #48	@ 0x30
 8061ca2:	46bd      	mov	sp, r7
 8061ca4:	bd80      	pop	{r7, pc}
 8061ca6:	bf00      	nop
 8061ca8:	1fe00fff 	.word	0x1fe00fff

08061cac <HAL_MMC_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, const uint8_t *pData,
                                          uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8061cac:	b580      	push	{r7, lr}
 8061cae:	b08c      	sub	sp, #48	@ 0x30
 8061cb0:	af00      	add	r7, sp, #0
 8061cb2:	60f8      	str	r0, [r7, #12]
 8061cb4:	60b9      	str	r1, [r7, #8]
 8061cb6:	607a      	str	r2, [r7, #4]
 8061cb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8061cba:	687b      	ldr	r3, [r7, #4]
 8061cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8061cbe:	68bb      	ldr	r3, [r7, #8]
 8061cc0:	2b00      	cmp	r3, #0
 8061cc2:	d107      	bne.n	8061cd4 <HAL_MMC_WriteBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8061cc4:	68fb      	ldr	r3, [r7, #12]
 8061cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061cc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8061ccc:	68fb      	ldr	r3, [r7, #12]
 8061cce:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8061cd0:	2301      	movs	r3, #1
 8061cd2:	e0ab      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8061cd4:	68fb      	ldr	r3, [r7, #12]
 8061cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8061cda:	b2db      	uxtb	r3, r3
 8061cdc:	2b01      	cmp	r3, #1
 8061cde:	f040 80a4 	bne.w	8061e2a <HAL_MMC_WriteBlocks_DMA+0x17e>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8061ce2:	68fb      	ldr	r3, [r7, #12]
 8061ce4:	2200      	movs	r2, #0
 8061ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 8061ce8:	687a      	ldr	r2, [r7, #4]
 8061cea:	683b      	ldr	r3, [r7, #0]
 8061cec:	441a      	add	r2, r3
 8061cee:	68fb      	ldr	r3, [r7, #12]
 8061cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8061cf2:	429a      	cmp	r2, r3
 8061cf4:	d907      	bls.n	8061d06 <HAL_MMC_WriteBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 8061cf6:	68fb      	ldr	r3, [r7, #12]
 8061cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061cfa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8061cfe:	68fb      	ldr	r3, [r7, #12]
 8061d00:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8061d02:	2301      	movs	r3, #1
 8061d04:	e092      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 8061d06:	68fb      	ldr	r3, [r7, #12]
 8061d08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8061d0c:	0a1b      	lsrs	r3, r3, #8
 8061d0e:	b2db      	uxtb	r3, r3
 8061d10:	2b00      	cmp	r3, #0
 8061d12:	d019      	beq.n	8061d48 <HAL_MMC_WriteBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 8061d14:	683b      	ldr	r3, [r7, #0]
 8061d16:	f003 0307 	and.w	r3, r3, #7
 8061d1a:	2b00      	cmp	r3, #0
 8061d1c:	d007      	beq.n	8061d2e <HAL_MMC_WriteBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 8061d1e:	68fb      	ldr	r3, [r7, #12]
 8061d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061d22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8061d26:	68fb      	ldr	r3, [r7, #12]
 8061d28:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8061d2a:	2301      	movs	r3, #1
 8061d2c:	e07e      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
      }

      if ((BlockAdd % 8U) != 0U)
 8061d2e:	687b      	ldr	r3, [r7, #4]
 8061d30:	f003 0307 	and.w	r3, r3, #7
 8061d34:	2b00      	cmp	r3, #0
 8061d36:	d007      	beq.n	8061d48 <HAL_MMC_WriteBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 8061d38:	68fb      	ldr	r3, [r7, #12]
 8061d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061d3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8061d40:	68fb      	ldr	r3, [r7, #12]
 8061d42:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8061d44:	2301      	movs	r3, #1
 8061d46:	e071      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 8061d48:	68fb      	ldr	r3, [r7, #12]
 8061d4a:	2203      	movs	r2, #3
 8061d4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 8061d50:	68fb      	ldr	r3, [r7, #12]
 8061d52:	681b      	ldr	r3, [r3, #0]
 8061d54:	2200      	movs	r2, #0
 8061d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pTxBuffPtr = pData;
 8061d58:	68fb      	ldr	r3, [r7, #12]
 8061d5a:	68ba      	ldr	r2, [r7, #8]
 8061d5c:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 8061d5e:	683b      	ldr	r3, [r7, #0]
 8061d60:	025a      	lsls	r2, r3, #9
 8061d62:	68fb      	ldr	r3, [r7, #12]
 8061d64:	621a      	str	r2, [r3, #32]

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 8061d66:	68fb      	ldr	r3, [r7, #12]
 8061d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8061d6a:	2b01      	cmp	r3, #1
 8061d6c:	d002      	beq.n	8061d74 <HAL_MMC_WriteBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 8061d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8061d70:	025b      	lsls	r3, r3, #9
 8061d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8061d74:	f04f 33ff 	mov.w	r3, #4294967295
 8061d78:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 8061d7a:	683b      	ldr	r3, [r7, #0]
 8061d7c:	025b      	lsls	r3, r3, #9
 8061d7e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8061d80:	2390      	movs	r3, #144	@ 0x90
 8061d82:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8061d84:	2300      	movs	r3, #0
 8061d86:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8061d88:	2300      	movs	r3, #0
 8061d8a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8061d8c:	2300      	movs	r3, #0
 8061d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8061d90:	68fb      	ldr	r3, [r7, #12]
 8061d92:	681b      	ldr	r3, [r3, #0]
 8061d94:	f107 0210 	add.w	r2, r7, #16
 8061d98:	4611      	mov	r1, r2
 8061d9a:	4618      	mov	r0, r3
 8061d9c:	f006 fb48 	bl	8068430 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8061da0:	68fb      	ldr	r3, [r7, #12]
 8061da2:	681b      	ldr	r3, [r3, #0]
 8061da4:	68da      	ldr	r2, [r3, #12]
 8061da6:	68fb      	ldr	r3, [r7, #12]
 8061da8:	681b      	ldr	r3, [r3, #0]
 8061daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8061dae:	60da      	str	r2, [r3, #12]

    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 8061db0:	68fb      	ldr	r3, [r7, #12]
 8061db2:	681b      	ldr	r3, [r3, #0]
 8061db4:	68ba      	ldr	r2, [r7, #8]
 8061db6:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8061db8:	68fb      	ldr	r3, [r7, #12]
 8061dba:	681b      	ldr	r3, [r3, #0]
 8061dbc:	2201      	movs	r2, #1
 8061dbe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8061dc0:	683b      	ldr	r3, [r7, #0]
 8061dc2:	2b01      	cmp	r3, #1
 8061dc4:	d90a      	bls.n	8061ddc <HAL_MMC_WriteBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 8061dc6:	68fb      	ldr	r3, [r7, #12]
 8061dc8:	22a0      	movs	r2, #160	@ 0xa0
 8061dca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 8061dcc:	68fb      	ldr	r3, [r7, #12]
 8061dce:	681b      	ldr	r3, [r3, #0]
 8061dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8061dd2:	4618      	mov	r0, r3
 8061dd4:	f006 fbe4 	bl	80685a0 <SDMMC_CmdWriteMultiBlock>
 8061dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8061dda:	e009      	b.n	8061df0 <HAL_MMC_WriteBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 8061ddc:	68fb      	ldr	r3, [r7, #12]
 8061dde:	2290      	movs	r2, #144	@ 0x90
 8061de0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 8061de2:	68fb      	ldr	r3, [r7, #12]
 8061de4:	681b      	ldr	r3, [r3, #0]
 8061de6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8061de8:	4618      	mov	r0, r3
 8061dea:	f006 fbb6 	bl	806855a <SDMMC_CmdWriteSingleBlock>
 8061dee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 8061df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8061df2:	2b00      	cmp	r3, #0
 8061df4:	d00f      	beq.n	8061e16 <HAL_MMC_WriteBlocks_DMA+0x16a>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8061df6:	68fb      	ldr	r3, [r7, #12]
 8061df8:	681b      	ldr	r3, [r3, #0]
 8061dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8061e34 <HAL_MMC_WriteBlocks_DMA+0x188>)
 8061dfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8061dfe:	68fb      	ldr	r3, [r7, #12]
 8061e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8061e04:	431a      	orrs	r2, r3
 8061e06:	68fb      	ldr	r3, [r7, #12]
 8061e08:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8061e0a:	68fb      	ldr	r3, [r7, #12]
 8061e0c:	2201      	movs	r2, #1
 8061e0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8061e12:	2301      	movs	r3, #1
 8061e14:	e00a      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8061e16:	68fb      	ldr	r3, [r7, #12]
 8061e18:	681b      	ldr	r3, [r3, #0]
 8061e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8061e1c:	68fb      	ldr	r3, [r7, #12]
 8061e1e:	681b      	ldr	r3, [r3, #0]
 8061e20:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8061e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8061e26:	2300      	movs	r3, #0
 8061e28:	e000      	b.n	8061e2c <HAL_MMC_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 8061e2a:	2302      	movs	r3, #2
  }
}
 8061e2c:	4618      	mov	r0, r3
 8061e2e:	3730      	adds	r7, #48	@ 0x30
 8061e30:	46bd      	mov	sp, r7
 8061e32:	bd80      	pop	{r7, pc}
 8061e34:	1fe00fff 	.word	0x1fe00fff

08061e38 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 8061e38:	b580      	push	{r7, lr}
 8061e3a:	b084      	sub	sp, #16
 8061e3c:	af00      	add	r7, sp, #0
 8061e3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 8061e40:	687b      	ldr	r3, [r7, #4]
 8061e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8061e44:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8061e46:	687b      	ldr	r3, [r7, #4]
 8061e48:	681b      	ldr	r3, [r3, #0]
 8061e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8061e50:	2b00      	cmp	r3, #0
 8061e52:	d008      	beq.n	8061e66 <HAL_MMC_IRQHandler+0x2e>
 8061e54:	68fb      	ldr	r3, [r7, #12]
 8061e56:	f003 0308 	and.w	r3, r3, #8
 8061e5a:	2b00      	cmp	r3, #0
 8061e5c:	d003      	beq.n	8061e66 <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 8061e5e:	6878      	ldr	r0, [r7, #4]
 8061e60:	f000 ffd0 	bl	8062e04 <MMC_Read_IT>
 8061e64:	e194      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 8061e66:	687b      	ldr	r3, [r7, #4]
 8061e68:	681b      	ldr	r3, [r3, #0]
 8061e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8061e70:	2b00      	cmp	r3, #0
 8061e72:	f000 80aa 	beq.w	8061fca <HAL_MMC_IRQHandler+0x192>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 8061e76:	687b      	ldr	r3, [r7, #4]
 8061e78:	681b      	ldr	r3, [r3, #0]
 8061e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8061e7e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8061e80:	687b      	ldr	r3, [r7, #4]
 8061e82:	681b      	ldr	r3, [r3, #0]
 8061e84:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8061e86:	687b      	ldr	r3, [r7, #4]
 8061e88:	681a      	ldr	r2, [r3, #0]
 8061e8a:	4b9a      	ldr	r3, [pc, #616]	@ (80620f4 <HAL_MMC_IRQHandler+0x2bc>)
 8061e8c:	400b      	ands	r3, r1
 8061e8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8061e90:	687b      	ldr	r3, [r7, #4]
 8061e92:	681b      	ldr	r3, [r3, #0]
 8061e94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8061e96:	687b      	ldr	r3, [r7, #4]
 8061e98:	681b      	ldr	r3, [r3, #0]
 8061e9a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8061e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8061ea0:	687b      	ldr	r3, [r7, #4]
 8061ea2:	681b      	ldr	r3, [r3, #0]
 8061ea4:	68da      	ldr	r2, [r3, #12]
 8061ea6:	687b      	ldr	r3, [r7, #4]
 8061ea8:	681b      	ldr	r3, [r3, #0]
 8061eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8061eae:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 8061eb0:	68fb      	ldr	r3, [r7, #12]
 8061eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8061eb6:	2b00      	cmp	r3, #0
 8061eb8:	d04b      	beq.n	8061f52 <HAL_MMC_IRQHandler+0x11a>
    {
      hmmc->Instance->DLEN = 0;
 8061eba:	687b      	ldr	r3, [r7, #4]
 8061ebc:	681b      	ldr	r3, [r3, #0]
 8061ebe:	2200      	movs	r2, #0
 8061ec0:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 8061ec2:	687b      	ldr	r3, [r7, #4]
 8061ec4:	681b      	ldr	r3, [r3, #0]
 8061ec6:	2200      	movs	r2, #0
 8061ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 8061eca:	687b      	ldr	r3, [r7, #4]
 8061ecc:	681b      	ldr	r3, [r3, #0]
 8061ece:	2200      	movs	r2, #0
 8061ed0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8061ed2:	68fb      	ldr	r3, [r7, #12]
 8061ed4:	f003 0302 	and.w	r3, r3, #2
 8061ed8:	2b00      	cmp	r3, #0
 8061eda:	d104      	bne.n	8061ee6 <HAL_MMC_IRQHandler+0xae>
 8061edc:	68fb      	ldr	r3, [r7, #12]
 8061ede:	f003 0320 	and.w	r3, r3, #32
 8061ee2:	2b00      	cmp	r3, #0
 8061ee4:	d011      	beq.n	8061f0a <HAL_MMC_IRQHandler+0xd2>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8061ee6:	687b      	ldr	r3, [r7, #4]
 8061ee8:	681b      	ldr	r3, [r3, #0]
 8061eea:	4618      	mov	r0, r3
 8061eec:	f006 fb7c 	bl	80685e8 <SDMMC_CmdStopTransfer>
 8061ef0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8061ef2:	68bb      	ldr	r3, [r7, #8]
 8061ef4:	2b00      	cmp	r3, #0
 8061ef6:	d008      	beq.n	8061f0a <HAL_MMC_IRQHandler+0xd2>
        {
          hmmc->ErrorCode |= errorstate;
 8061ef8:	687b      	ldr	r3, [r7, #4]
 8061efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061efc:	68bb      	ldr	r3, [r7, #8]
 8061efe:	431a      	orrs	r2, r3
 8061f00:	687b      	ldr	r3, [r7, #4]
 8061f02:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 8061f04:	6878      	ldr	r0, [r7, #4]
 8061f06:	f000 f947 	bl	8062198 <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8061f0a:	687b      	ldr	r3, [r7, #4]
 8061f0c:	681b      	ldr	r3, [r3, #0]
 8061f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80620f8 <HAL_MMC_IRQHandler+0x2c0>)
 8061f10:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 8061f12:	687b      	ldr	r3, [r7, #4]
 8061f14:	2201      	movs	r2, #1
 8061f16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8061f1a:	68fb      	ldr	r3, [r7, #12]
 8061f1c:	f003 0310 	and.w	r3, r3, #16
 8061f20:	2b00      	cmp	r3, #0
 8061f22:	d104      	bne.n	8061f2e <HAL_MMC_IRQHandler+0xf6>
 8061f24:	68fb      	ldr	r3, [r7, #12]
 8061f26:	f003 0320 	and.w	r3, r3, #32
 8061f2a:	2b00      	cmp	r3, #0
 8061f2c:	d002      	beq.n	8061f34 <HAL_MMC_IRQHandler+0xfc>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 8061f2e:	6878      	ldr	r0, [r7, #4]
 8061f30:	f7df ffa2 	bl	8041e78 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8061f34:	68fb      	ldr	r3, [r7, #12]
 8061f36:	f003 0301 	and.w	r3, r3, #1
 8061f3a:	2b00      	cmp	r3, #0
 8061f3c:	d105      	bne.n	8061f4a <HAL_MMC_IRQHandler+0x112>
 8061f3e:	68fb      	ldr	r3, [r7, #12]
 8061f40:	f003 0302 	and.w	r3, r3, #2
 8061f44:	2b00      	cmp	r3, #0
 8061f46:	f000 8123 	beq.w	8062190 <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 8061f4a:	6878      	ldr	r0, [r7, #4]
 8061f4c:	f7df ff9f 	bl	8041e8e <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 8061f50:	e11e      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 8061f52:	68fb      	ldr	r3, [r7, #12]
 8061f54:	f003 0308 	and.w	r3, r3, #8
 8061f58:	2b00      	cmp	r3, #0
 8061f5a:	f000 8119 	beq.w	8062190 <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8061f5e:	68fb      	ldr	r3, [r7, #12]
 8061f60:	f003 0302 	and.w	r3, r3, #2
 8061f64:	2b00      	cmp	r3, #0
 8061f66:	d104      	bne.n	8061f72 <HAL_MMC_IRQHandler+0x13a>
 8061f68:	68fb      	ldr	r3, [r7, #12]
 8061f6a:	f003 0320 	and.w	r3, r3, #32
 8061f6e:	2b00      	cmp	r3, #0
 8061f70:	d011      	beq.n	8061f96 <HAL_MMC_IRQHandler+0x15e>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8061f72:	687b      	ldr	r3, [r7, #4]
 8061f74:	681b      	ldr	r3, [r3, #0]
 8061f76:	4618      	mov	r0, r3
 8061f78:	f006 fb36 	bl	80685e8 <SDMMC_CmdStopTransfer>
 8061f7c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8061f7e:	68bb      	ldr	r3, [r7, #8]
 8061f80:	2b00      	cmp	r3, #0
 8061f82:	d008      	beq.n	8061f96 <HAL_MMC_IRQHandler+0x15e>
          hmmc->ErrorCode |= errorstate;
 8061f84:	687b      	ldr	r3, [r7, #4]
 8061f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8061f88:	68bb      	ldr	r3, [r7, #8]
 8061f8a:	431a      	orrs	r2, r3
 8061f8c:	687b      	ldr	r3, [r7, #4]
 8061f8e:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 8061f90:	6878      	ldr	r0, [r7, #4]
 8061f92:	f000 f901 	bl	8062198 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8061f96:	687b      	ldr	r3, [r7, #4]
 8061f98:	681b      	ldr	r3, [r3, #0]
 8061f9a:	4a57      	ldr	r2, [pc, #348]	@ (80620f8 <HAL_MMC_IRQHandler+0x2c0>)
 8061f9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8061f9e:	687b      	ldr	r3, [r7, #4]
 8061fa0:	2201      	movs	r2, #1
 8061fa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8061fa6:	68fb      	ldr	r3, [r7, #12]
 8061fa8:	f003 0301 	and.w	r3, r3, #1
 8061fac:	2b00      	cmp	r3, #0
 8061fae:	d104      	bne.n	8061fba <HAL_MMC_IRQHandler+0x182>
 8061fb0:	68fb      	ldr	r3, [r7, #12]
 8061fb2:	f003 0302 	and.w	r3, r3, #2
 8061fb6:	2b00      	cmp	r3, #0
 8061fb8:	d003      	beq.n	8061fc2 <HAL_MMC_IRQHandler+0x18a>
        HAL_MMC_RxCpltCallback(hmmc);
 8061fba:	6878      	ldr	r0, [r7, #4]
 8061fbc:	f7df ff67 	bl	8041e8e <HAL_MMC_RxCpltCallback>
 8061fc0:	e0e6      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 8061fc2:	6878      	ldr	r0, [r7, #4]
 8061fc4:	f7df ff58 	bl	8041e78 <HAL_MMC_TxCpltCallback>
}
 8061fc8:	e0e2      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8061fca:	687b      	ldr	r3, [r7, #4]
 8061fcc:	681b      	ldr	r3, [r3, #0]
 8061fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8061fd4:	2b00      	cmp	r3, #0
 8061fd6:	d008      	beq.n	8061fea <HAL_MMC_IRQHandler+0x1b2>
 8061fd8:	68fb      	ldr	r3, [r7, #12]
 8061fda:	f003 0308 	and.w	r3, r3, #8
 8061fde:	2b00      	cmp	r3, #0
 8061fe0:	d003      	beq.n	8061fea <HAL_MMC_IRQHandler+0x1b2>
    MMC_Write_IT(hmmc);
 8061fe2:	6878      	ldr	r0, [r7, #4]
 8061fe4:	f000 ff54 	bl	8062e90 <MMC_Write_IT>
 8061fe8:	e0d2      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 8061fea:	687b      	ldr	r3, [r7, #4]
 8061fec:	681b      	ldr	r3, [r3, #0]
 8061fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8061ff0:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8061ff4:	2b00      	cmp	r3, #0
 8061ff6:	f000 809e 	beq.w	8062136 <HAL_MMC_IRQHandler+0x2fe>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 8061ffa:	687b      	ldr	r3, [r7, #4]
 8061ffc:	681b      	ldr	r3, [r3, #0]
 8061ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062000:	f003 0302 	and.w	r3, r3, #2
 8062004:	2b00      	cmp	r3, #0
 8062006:	d005      	beq.n	8062014 <HAL_MMC_IRQHandler+0x1dc>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8062008:	687b      	ldr	r3, [r7, #4]
 806200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806200c:	f043 0202 	orr.w	r2, r3, #2
 8062010:	687b      	ldr	r3, [r7, #4]
 8062012:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 8062014:	687b      	ldr	r3, [r7, #4]
 8062016:	681b      	ldr	r3, [r3, #0]
 8062018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806201a:	f003 0308 	and.w	r3, r3, #8
 806201e:	2b00      	cmp	r3, #0
 8062020:	d005      	beq.n	806202e <HAL_MMC_IRQHandler+0x1f6>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8062022:	687b      	ldr	r3, [r7, #4]
 8062024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062026:	f043 0208 	orr.w	r2, r3, #8
 806202a:	687b      	ldr	r3, [r7, #4]
 806202c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 806202e:	687b      	ldr	r3, [r7, #4]
 8062030:	681b      	ldr	r3, [r3, #0]
 8062032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062034:	f003 0320 	and.w	r3, r3, #32
 8062038:	2b00      	cmp	r3, #0
 806203a:	d005      	beq.n	8062048 <HAL_MMC_IRQHandler+0x210>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 806203c:	687b      	ldr	r3, [r7, #4]
 806203e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062040:	f043 0220 	orr.w	r2, r3, #32
 8062044:	687b      	ldr	r3, [r7, #4]
 8062046:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 8062048:	687b      	ldr	r3, [r7, #4]
 806204a:	681b      	ldr	r3, [r3, #0]
 806204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806204e:	f003 0310 	and.w	r3, r3, #16
 8062052:	2b00      	cmp	r3, #0
 8062054:	d005      	beq.n	8062062 <HAL_MMC_IRQHandler+0x22a>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 8062056:	687b      	ldr	r3, [r7, #4]
 8062058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806205a:	f043 0210 	orr.w	r2, r3, #16
 806205e:	687b      	ldr	r3, [r7, #4]
 8062060:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8062062:	687b      	ldr	r3, [r7, #4]
 8062064:	681b      	ldr	r3, [r3, #0]
 8062066:	4a24      	ldr	r2, [pc, #144]	@ (80620f8 <HAL_MMC_IRQHandler+0x2c0>)
 8062068:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 806206a:	687b      	ldr	r3, [r7, #4]
 806206c:	681b      	ldr	r3, [r3, #0]
 806206e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8062070:	687b      	ldr	r3, [r7, #4]
 8062072:	681b      	ldr	r3, [r3, #0]
 8062074:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8062078:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 806207a:	687b      	ldr	r3, [r7, #4]
 806207c:	681b      	ldr	r3, [r3, #0]
 806207e:	68da      	ldr	r2, [r3, #12]
 8062080:	687b      	ldr	r3, [r7, #4]
 8062082:	681b      	ldr	r3, [r3, #0]
 8062084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8062088:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 806208a:	687b      	ldr	r3, [r7, #4]
 806208c:	681b      	ldr	r3, [r3, #0]
 806208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8062090:	687b      	ldr	r3, [r7, #4]
 8062092:	681b      	ldr	r3, [r3, #0]
 8062094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8062098:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 806209a:	687b      	ldr	r3, [r7, #4]
 806209c:	681b      	ldr	r3, [r3, #0]
 806209e:	68da      	ldr	r2, [r3, #12]
 80620a0:	687b      	ldr	r3, [r7, #4]
 80620a2:	681b      	ldr	r3, [r3, #0]
 80620a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80620a8:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 80620aa:	687b      	ldr	r3, [r7, #4]
 80620ac:	681b      	ldr	r3, [r3, #0]
 80620ae:	4618      	mov	r0, r3
 80620b0:	f006 fa9a 	bl	80685e8 <SDMMC_CmdStopTransfer>
 80620b4:	4602      	mov	r2, r0
 80620b6:	687b      	ldr	r3, [r7, #4]
 80620b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80620ba:	431a      	orrs	r2, r3
 80620bc:	687b      	ldr	r3, [r7, #4]
 80620be:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80620c0:	687b      	ldr	r3, [r7, #4]
 80620c2:	681b      	ldr	r3, [r3, #0]
 80620c4:	68da      	ldr	r2, [r3, #12]
 80620c6:	687b      	ldr	r3, [r7, #4]
 80620c8:	681b      	ldr	r3, [r3, #0]
 80620ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80620ce:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 80620d0:	687b      	ldr	r3, [r7, #4]
 80620d2:	681b      	ldr	r3, [r3, #0]
 80620d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80620d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 80620da:	68fb      	ldr	r3, [r7, #12]
 80620dc:	f003 0308 	and.w	r3, r3, #8
 80620e0:	2b00      	cmp	r3, #0
 80620e2:	d00b      	beq.n	80620fc <HAL_MMC_IRQHandler+0x2c4>
      hmmc->State = HAL_MMC_STATE_READY;
 80620e4:	687b      	ldr	r3, [r7, #4]
 80620e6:	2201      	movs	r2, #1
 80620e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 80620ec:	6878      	ldr	r0, [r7, #4]
 80620ee:	f000 f853 	bl	8062198 <HAL_MMC_ErrorCallback>
}
 80620f2:	e04d      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
 80620f4:	ffff3ec5 	.word	0xffff3ec5
 80620f8:	18000f3a 	.word	0x18000f3a
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 80620fc:	68fb      	ldr	r3, [r7, #12]
 80620fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8062102:	2b00      	cmp	r3, #0
 8062104:	d044      	beq.n	8062190 <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 8062106:	687b      	ldr	r3, [r7, #4]
 8062108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806210a:	2b00      	cmp	r3, #0
 806210c:	d040      	beq.n	8062190 <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 806210e:	687b      	ldr	r3, [r7, #4]
 8062110:	681b      	ldr	r3, [r3, #0]
 8062112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8062114:	687b      	ldr	r3, [r7, #4]
 8062116:	681b      	ldr	r3, [r3, #0]
 8062118:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 806211c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 806211e:	687b      	ldr	r3, [r7, #4]
 8062120:	681b      	ldr	r3, [r3, #0]
 8062122:	2200      	movs	r2, #0
 8062124:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 8062126:	687b      	ldr	r3, [r7, #4]
 8062128:	2201      	movs	r2, #1
 806212a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 806212e:	6878      	ldr	r0, [r7, #4]
 8062130:	f000 f832 	bl	8062198 <HAL_MMC_ErrorCallback>
}
 8062134:	e02c      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 8062136:	687b      	ldr	r3, [r7, #4]
 8062138:	681b      	ldr	r3, [r3, #0]
 806213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806213c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8062140:	2b00      	cmp	r3, #0
 8062142:	d025      	beq.n	8062190 <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 8062144:	687b      	ldr	r3, [r7, #4]
 8062146:	681b      	ldr	r3, [r3, #0]
 8062148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806214c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 806214e:	687b      	ldr	r3, [r7, #4]
 8062150:	681b      	ldr	r3, [r3, #0]
 8062152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8062154:	f003 0304 	and.w	r3, r3, #4
 8062158:	2b00      	cmp	r3, #0
 806215a:	d10c      	bne.n	8062176 <HAL_MMC_IRQHandler+0x33e>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 806215c:	68fb      	ldr	r3, [r7, #12]
 806215e:	f003 0320 	and.w	r3, r3, #32
 8062162:	2b00      	cmp	r3, #0
 8062164:	d003      	beq.n	806216e <HAL_MMC_IRQHandler+0x336>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 8062166:	6878      	ldr	r0, [r7, #4]
 8062168:	f000 ff9a 	bl	80630a0 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 806216c:	e010      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 806216e:	6878      	ldr	r0, [r7, #4]
 8062170:	f000 ff82 	bl	8063078 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 8062174:	e00c      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8062176:	68fb      	ldr	r3, [r7, #12]
 8062178:	f003 0320 	and.w	r3, r3, #32
 806217c:	2b00      	cmp	r3, #0
 806217e:	d003      	beq.n	8062188 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 8062180:	6878      	ldr	r0, [r7, #4]
 8062182:	f000 ff83 	bl	806308c <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 8062186:	e003      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 8062188:	6878      	ldr	r0, [r7, #4]
 806218a:	f000 ff6b 	bl	8063064 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 806218e:	e7ff      	b.n	8062190 <HAL_MMC_IRQHandler+0x358>
 8062190:	bf00      	nop
 8062192:	3710      	adds	r7, #16
 8062194:	46bd      	mov	sp, r7
 8062196:	bd80      	pop	{r7, pc}

08062198 <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 8062198:	b480      	push	{r7}
 806219a:	b083      	sub	sp, #12
 806219c:	af00      	add	r7, sp, #0
 806219e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 80621a0:	bf00      	nop
 80621a2:	370c      	adds	r7, #12
 80621a4:	46bd      	mov	sp, r7
 80621a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80621aa:	4770      	bx	lr

080621ac <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80621ac:	b580      	push	{r7, lr}
 80621ae:	b084      	sub	sp, #16
 80621b0:	af00      	add	r7, sp, #0
 80621b2:	6078      	str	r0, [r7, #4]
 80621b4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80621b6:	2300      	movs	r3, #0
 80621b8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80621ba:	687b      	ldr	r3, [r7, #4]
 80621bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80621be:	0f9b      	lsrs	r3, r3, #30
 80621c0:	b2da      	uxtb	r2, r3
 80621c2:	683b      	ldr	r3, [r7, #0]
 80621c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80621c6:	687b      	ldr	r3, [r7, #4]
 80621c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80621ca:	0e9b      	lsrs	r3, r3, #26
 80621cc:	b2db      	uxtb	r3, r3
 80621ce:	f003 030f 	and.w	r3, r3, #15
 80621d2:	b2da      	uxtb	r2, r3
 80621d4:	683b      	ldr	r3, [r7, #0]
 80621d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80621d8:	687b      	ldr	r3, [r7, #4]
 80621da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80621dc:	0e1b      	lsrs	r3, r3, #24
 80621de:	b2db      	uxtb	r3, r3
 80621e0:	f003 0303 	and.w	r3, r3, #3
 80621e4:	b2da      	uxtb	r2, r3
 80621e6:	683b      	ldr	r3, [r7, #0]
 80621e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80621ea:	687b      	ldr	r3, [r7, #4]
 80621ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80621ee:	0c1b      	lsrs	r3, r3, #16
 80621f0:	b2da      	uxtb	r2, r3
 80621f2:	683b      	ldr	r3, [r7, #0]
 80621f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80621f6:	687b      	ldr	r3, [r7, #4]
 80621f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80621fa:	0a1b      	lsrs	r3, r3, #8
 80621fc:	b2da      	uxtb	r2, r3
 80621fe:	683b      	ldr	r3, [r7, #0]
 8062200:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8062202:	687b      	ldr	r3, [r7, #4]
 8062204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8062206:	b2da      	uxtb	r2, r3
 8062208:	683b      	ldr	r3, [r7, #0]
 806220a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 806220c:	687b      	ldr	r3, [r7, #4]
 806220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062210:	0d1b      	lsrs	r3, r3, #20
 8062212:	b29a      	uxth	r2, r3
 8062214:	683b      	ldr	r3, [r7, #0]
 8062216:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8062218:	687b      	ldr	r3, [r7, #4]
 806221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 806221c:	0c1b      	lsrs	r3, r3, #16
 806221e:	b2db      	uxtb	r3, r3
 8062220:	f003 030f 	and.w	r3, r3, #15
 8062224:	b2da      	uxtb	r2, r3
 8062226:	683b      	ldr	r3, [r7, #0]
 8062228:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 806222a:	687b      	ldr	r3, [r7, #4]
 806222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 806222e:	0bdb      	lsrs	r3, r3, #15
 8062230:	b2db      	uxtb	r3, r3
 8062232:	f003 0301 	and.w	r3, r3, #1
 8062236:	b2da      	uxtb	r2, r3
 8062238:	683b      	ldr	r3, [r7, #0]
 806223a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 806223c:	687b      	ldr	r3, [r7, #4]
 806223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062240:	0b9b      	lsrs	r3, r3, #14
 8062242:	b2db      	uxtb	r3, r3
 8062244:	f003 0301 	and.w	r3, r3, #1
 8062248:	b2da      	uxtb	r2, r3
 806224a:	683b      	ldr	r3, [r7, #0]
 806224c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 806224e:	687b      	ldr	r3, [r7, #4]
 8062250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062252:	0b5b      	lsrs	r3, r3, #13
 8062254:	b2db      	uxtb	r3, r3
 8062256:	f003 0301 	and.w	r3, r3, #1
 806225a:	b2da      	uxtb	r2, r3
 806225c:	683b      	ldr	r3, [r7, #0]
 806225e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8062260:	687b      	ldr	r3, [r7, #4]
 8062262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062264:	0b1b      	lsrs	r3, r3, #12
 8062266:	b2db      	uxtb	r3, r3
 8062268:	f003 0301 	and.w	r3, r3, #1
 806226c:	b2da      	uxtb	r2, r3
 806226e:	683b      	ldr	r3, [r7, #0]
 8062270:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8062272:	683b      	ldr	r3, [r7, #0]
 8062274:	2200      	movs	r2, #0
 8062276:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8062278:	f107 010c 	add.w	r1, r7, #12
 806227c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8062280:	22d4      	movs	r2, #212	@ 0xd4
 8062282:	6878      	ldr	r0, [r7, #4]
 8062284:	f000 fcca 	bl	8062c1c <MMC_ReadExtCSD>
 8062288:	4603      	mov	r3, r0
 806228a:	2b00      	cmp	r3, #0
 806228c:	d001      	beq.n	8062292 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 806228e:	2301      	movs	r3, #1
 8062290:	e129      	b.n	80624e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8062292:	687b      	ldr	r3, [r7, #4]
 8062294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8062296:	2b00      	cmp	r3, #0
 8062298:	d163      	bne.n	8062362 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 806229a:	687b      	ldr	r3, [r7, #4]
 806229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 806229e:	009a      	lsls	r2, r3, #2
 80622a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80622a4:	4013      	ands	r3, r2
 80622a6:	687a      	ldr	r2, [r7, #4]
 80622a8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80622aa:	0f92      	lsrs	r2, r2, #30
 80622ac:	431a      	orrs	r2, r3
 80622ae:	683b      	ldr	r3, [r7, #0]
 80622b0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80622b2:	687b      	ldr	r3, [r7, #4]
 80622b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80622b6:	0edb      	lsrs	r3, r3, #27
 80622b8:	b2db      	uxtb	r3, r3
 80622ba:	f003 0307 	and.w	r3, r3, #7
 80622be:	b2da      	uxtb	r2, r3
 80622c0:	683b      	ldr	r3, [r7, #0]
 80622c2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80622c4:	687b      	ldr	r3, [r7, #4]
 80622c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80622c8:	0e1b      	lsrs	r3, r3, #24
 80622ca:	b2db      	uxtb	r3, r3
 80622cc:	f003 0307 	and.w	r3, r3, #7
 80622d0:	b2da      	uxtb	r2, r3
 80622d2:	683b      	ldr	r3, [r7, #0]
 80622d4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80622d6:	687b      	ldr	r3, [r7, #4]
 80622d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80622da:	0d5b      	lsrs	r3, r3, #21
 80622dc:	b2db      	uxtb	r3, r3
 80622de:	f003 0307 	and.w	r3, r3, #7
 80622e2:	b2da      	uxtb	r2, r3
 80622e4:	683b      	ldr	r3, [r7, #0]
 80622e6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80622e8:	687b      	ldr	r3, [r7, #4]
 80622ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80622ec:	0c9b      	lsrs	r3, r3, #18
 80622ee:	b2db      	uxtb	r3, r3
 80622f0:	f003 0307 	and.w	r3, r3, #7
 80622f4:	b2da      	uxtb	r2, r3
 80622f6:	683b      	ldr	r3, [r7, #0]
 80622f8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80622fa:	687b      	ldr	r3, [r7, #4]
 80622fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80622fe:	0bdb      	lsrs	r3, r3, #15
 8062300:	b2db      	uxtb	r3, r3
 8062302:	f003 0307 	and.w	r3, r3, #7
 8062306:	b2da      	uxtb	r2, r3
 8062308:	683b      	ldr	r3, [r7, #0]
 806230a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 806230c:	683b      	ldr	r3, [r7, #0]
 806230e:	691b      	ldr	r3, [r3, #16]
 8062310:	1c5a      	adds	r2, r3, #1
 8062312:	687b      	ldr	r3, [r7, #4]
 8062314:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8062316:	683b      	ldr	r3, [r7, #0]
 8062318:	7e1b      	ldrb	r3, [r3, #24]
 806231a:	b2db      	uxtb	r3, r3
 806231c:	f003 0307 	and.w	r3, r3, #7
 8062320:	3302      	adds	r3, #2
 8062322:	2201      	movs	r2, #1
 8062324:	fa02 f303 	lsl.w	r3, r2, r3
 8062328:	687a      	ldr	r2, [r7, #4]
 806232a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 806232c:	fb03 f202 	mul.w	r2, r3, r2
 8062330:	687b      	ldr	r3, [r7, #4]
 8062332:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8062334:	683b      	ldr	r3, [r7, #0]
 8062336:	7a1b      	ldrb	r3, [r3, #8]
 8062338:	b2db      	uxtb	r3, r3
 806233a:	f003 030f 	and.w	r3, r3, #15
 806233e:	2201      	movs	r2, #1
 8062340:	409a      	lsls	r2, r3
 8062342:	687b      	ldr	r3, [r7, #4]
 8062344:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8062346:	687b      	ldr	r3, [r7, #4]
 8062348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806234a:	687a      	ldr	r2, [r7, #4]
 806234c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 806234e:	0a52      	lsrs	r2, r2, #9
 8062350:	fb03 f202 	mul.w	r2, r3, r2
 8062354:	687b      	ldr	r3, [r7, #4]
 8062356:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8062358:	687b      	ldr	r3, [r7, #4]
 806235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 806235e:	655a      	str	r2, [r3, #84]	@ 0x54
 8062360:	e023      	b.n	80623aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8062362:	687b      	ldr	r3, [r7, #4]
 8062364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8062366:	2b01      	cmp	r3, #1
 8062368:	d10f      	bne.n	806238a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 806236a:	68fa      	ldr	r2, [r7, #12]
 806236c:	687b      	ldr	r3, [r7, #4]
 806236e:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8062370:	687b      	ldr	r3, [r7, #4]
 8062372:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8062374:	687b      	ldr	r3, [r7, #4]
 8062376:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8062378:	687b      	ldr	r3, [r7, #4]
 806237a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 806237e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8062380:	687b      	ldr	r3, [r7, #4]
 8062382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8062384:	687b      	ldr	r3, [r7, #4]
 8062386:	655a      	str	r2, [r3, #84]	@ 0x54
 8062388:	e00f      	b.n	80623aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 806238a:	687b      	ldr	r3, [r7, #4]
 806238c:	681b      	ldr	r3, [r3, #0]
 806238e:	4a58      	ldr	r2, [pc, #352]	@ (80624f0 <HAL_MMC_GetCardCSD+0x344>)
 8062390:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8062392:	687b      	ldr	r3, [r7, #4]
 8062394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062396:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 806239a:	687b      	ldr	r3, [r7, #4]
 806239c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 806239e:	687b      	ldr	r3, [r7, #4]
 80623a0:	2201      	movs	r2, #1
 80623a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80623a6:	2301      	movs	r3, #1
 80623a8:	e09d      	b.n	80624e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80623aa:	687b      	ldr	r3, [r7, #4]
 80623ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80623ae:	0b9b      	lsrs	r3, r3, #14
 80623b0:	b2db      	uxtb	r3, r3
 80623b2:	f003 0301 	and.w	r3, r3, #1
 80623b6:	b2da      	uxtb	r2, r3
 80623b8:	683b      	ldr	r3, [r7, #0]
 80623ba:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80623bc:	687b      	ldr	r3, [r7, #4]
 80623be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80623c0:	09db      	lsrs	r3, r3, #7
 80623c2:	b2db      	uxtb	r3, r3
 80623c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80623c8:	b2da      	uxtb	r2, r3
 80623ca:	683b      	ldr	r3, [r7, #0]
 80623cc:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80623ce:	687b      	ldr	r3, [r7, #4]
 80623d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80623d2:	b2db      	uxtb	r3, r3
 80623d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80623d8:	b2da      	uxtb	r2, r3
 80623da:	683b      	ldr	r3, [r7, #0]
 80623dc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80623de:	687b      	ldr	r3, [r7, #4]
 80623e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80623e2:	0fdb      	lsrs	r3, r3, #31
 80623e4:	b2da      	uxtb	r2, r3
 80623e6:	683b      	ldr	r3, [r7, #0]
 80623e8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80623ea:	687b      	ldr	r3, [r7, #4]
 80623ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80623ee:	0f5b      	lsrs	r3, r3, #29
 80623f0:	b2db      	uxtb	r3, r3
 80623f2:	f003 0303 	and.w	r3, r3, #3
 80623f6:	b2da      	uxtb	r2, r3
 80623f8:	683b      	ldr	r3, [r7, #0]
 80623fa:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80623fc:	687b      	ldr	r3, [r7, #4]
 80623fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062400:	0e9b      	lsrs	r3, r3, #26
 8062402:	b2db      	uxtb	r3, r3
 8062404:	f003 0307 	and.w	r3, r3, #7
 8062408:	b2da      	uxtb	r2, r3
 806240a:	683b      	ldr	r3, [r7, #0]
 806240c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 806240e:	687b      	ldr	r3, [r7, #4]
 8062410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062412:	0d9b      	lsrs	r3, r3, #22
 8062414:	b2db      	uxtb	r3, r3
 8062416:	f003 030f 	and.w	r3, r3, #15
 806241a:	b2da      	uxtb	r2, r3
 806241c:	683b      	ldr	r3, [r7, #0]
 806241e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8062420:	687b      	ldr	r3, [r7, #4]
 8062422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062424:	0d5b      	lsrs	r3, r3, #21
 8062426:	b2db      	uxtb	r3, r3
 8062428:	f003 0301 	and.w	r3, r3, #1
 806242c:	b2da      	uxtb	r2, r3
 806242e:	683b      	ldr	r3, [r7, #0]
 8062430:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8062434:	683b      	ldr	r3, [r7, #0]
 8062436:	2200      	movs	r2, #0
 8062438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 806243c:	687b      	ldr	r3, [r7, #4]
 806243e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062440:	0c1b      	lsrs	r3, r3, #16
 8062442:	b2db      	uxtb	r3, r3
 8062444:	f003 0301 	and.w	r3, r3, #1
 8062448:	b2da      	uxtb	r2, r3
 806244a:	683b      	ldr	r3, [r7, #0]
 806244c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8062450:	687b      	ldr	r3, [r7, #4]
 8062452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062454:	0bdb      	lsrs	r3, r3, #15
 8062456:	b2db      	uxtb	r3, r3
 8062458:	f003 0301 	and.w	r3, r3, #1
 806245c:	b2da      	uxtb	r2, r3
 806245e:	683b      	ldr	r3, [r7, #0]
 8062460:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8062464:	687b      	ldr	r3, [r7, #4]
 8062466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062468:	0b9b      	lsrs	r3, r3, #14
 806246a:	b2db      	uxtb	r3, r3
 806246c:	f003 0301 	and.w	r3, r3, #1
 8062470:	b2da      	uxtb	r2, r3
 8062472:	683b      	ldr	r3, [r7, #0]
 8062474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8062478:	687b      	ldr	r3, [r7, #4]
 806247a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 806247c:	0b5b      	lsrs	r3, r3, #13
 806247e:	b2db      	uxtb	r3, r3
 8062480:	f003 0301 	and.w	r3, r3, #1
 8062484:	b2da      	uxtb	r2, r3
 8062486:	683b      	ldr	r3, [r7, #0]
 8062488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 806248c:	687b      	ldr	r3, [r7, #4]
 806248e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062490:	0b1b      	lsrs	r3, r3, #12
 8062492:	b2db      	uxtb	r3, r3
 8062494:	f003 0301 	and.w	r3, r3, #1
 8062498:	b2da      	uxtb	r2, r3
 806249a:	683b      	ldr	r3, [r7, #0]
 806249c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80624a0:	687b      	ldr	r3, [r7, #4]
 80624a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80624a4:	0a9b      	lsrs	r3, r3, #10
 80624a6:	b2db      	uxtb	r3, r3
 80624a8:	f003 0303 	and.w	r3, r3, #3
 80624ac:	b2da      	uxtb	r2, r3
 80624ae:	683b      	ldr	r3, [r7, #0]
 80624b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80624b4:	687b      	ldr	r3, [r7, #4]
 80624b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80624b8:	0a1b      	lsrs	r3, r3, #8
 80624ba:	b2db      	uxtb	r3, r3
 80624bc:	f003 0303 	and.w	r3, r3, #3
 80624c0:	b2da      	uxtb	r2, r3
 80624c2:	683b      	ldr	r3, [r7, #0]
 80624c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80624c8:	687b      	ldr	r3, [r7, #4]
 80624ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80624cc:	085b      	lsrs	r3, r3, #1
 80624ce:	b2db      	uxtb	r3, r3
 80624d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80624d4:	b2da      	uxtb	r2, r3
 80624d6:	683b      	ldr	r3, [r7, #0]
 80624d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80624dc:	683b      	ldr	r3, [r7, #0]
 80624de:	2201      	movs	r2, #1
 80624e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80624e4:	2300      	movs	r3, #0
}
 80624e6:	4618      	mov	r0, r3
 80624e8:	3710      	adds	r7, #16
 80624ea:	46bd      	mov	sp, r7
 80624ec:	bd80      	pop	{r7, pc}
 80624ee:	bf00      	nop
 80624f0:	1fe00fff 	.word	0x1fe00fff

080624f4 <HAL_MMC_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_MMC_CardInfoTypeDef structure that
  *         will contain the MMC card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardInfo(const MMC_HandleTypeDef *hmmc, HAL_MMC_CardInfoTypeDef *pCardInfo)
{
 80624f4:	b480      	push	{r7}
 80624f6:	b083      	sub	sp, #12
 80624f8:	af00      	add	r7, sp, #0
 80624fa:	6078      	str	r0, [r7, #4]
 80624fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hmmc->MmcCard.CardType);
 80624fe:	687b      	ldr	r3, [r7, #4]
 8062500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8062502:	683b      	ldr	r3, [r7, #0]
 8062504:	601a      	str	r2, [r3, #0]
  pCardInfo->Class        = (uint32_t)(hmmc->MmcCard.Class);
 8062506:	687b      	ldr	r3, [r7, #4]
 8062508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 806250a:	683b      	ldr	r3, [r7, #0]
 806250c:	605a      	str	r2, [r3, #4]
  pCardInfo->RelCardAdd   = (uint32_t)(hmmc->MmcCard.RelCardAdd);
 806250e:	687b      	ldr	r3, [r7, #4]
 8062510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8062512:	683b      	ldr	r3, [r7, #0]
 8062514:	609a      	str	r2, [r3, #8]
  pCardInfo->BlockNbr     = (uint32_t)(hmmc->MmcCard.BlockNbr);
 8062516:	687b      	ldr	r3, [r7, #4]
 8062518:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 806251a:	683b      	ldr	r3, [r7, #0]
 806251c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockSize    = (uint32_t)(hmmc->MmcCard.BlockSize);
 806251e:	687b      	ldr	r3, [r7, #4]
 8062520:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8062522:	683b      	ldr	r3, [r7, #0]
 8062524:	611a      	str	r2, [r3, #16]
  pCardInfo->LogBlockNbr  = (uint32_t)(hmmc->MmcCard.LogBlockNbr);
 8062526:	687b      	ldr	r3, [r7, #4]
 8062528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 806252a:	683b      	ldr	r3, [r7, #0]
 806252c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockSize = (uint32_t)(hmmc->MmcCard.LogBlockSize);
 806252e:	687b      	ldr	r3, [r7, #4]
 8062530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8062532:	683b      	ldr	r3, [r7, #0]
 8062534:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8062536:	2300      	movs	r3, #0
}
 8062538:	4618      	mov	r0, r3
 806253a:	370c      	adds	r7, #12
 806253c:	46bd      	mov	sp, r7
 806253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062542:	4770      	bx	lr

08062544 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8062544:	b580      	push	{r7, lr}
 8062546:	b08e      	sub	sp, #56	@ 0x38
 8062548:	af00      	add	r7, sp, #0
 806254a:	60f8      	str	r0, [r7, #12]
 806254c:	60b9      	str	r1, [r7, #8]
 806254e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8062550:	f7fd ff9c 	bl	806048c <HAL_GetTick>
 8062554:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8062556:	68bb      	ldr	r3, [r7, #8]
 8062558:	2b00      	cmp	r3, #0
 806255a:	d107      	bne.n	806256c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 806255c:	68fb      	ldr	r3, [r7, #12]
 806255e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062560:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8062564:	68fb      	ldr	r3, [r7, #12]
 8062566:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8062568:	2301      	movs	r3, #1
 806256a:	e0de      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 806256c:	68fb      	ldr	r3, [r7, #12]
 806256e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8062572:	b2db      	uxtb	r3, r3
 8062574:	2b01      	cmp	r3, #1
 8062576:	f040 80d7 	bne.w	8062728 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 806257a:	68fb      	ldr	r3, [r7, #12]
 806257c:	2200      	movs	r2, #0
 806257e:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8062580:	68fb      	ldr	r3, [r7, #12]
 8062582:	2203      	movs	r2, #3
 8062584:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8062588:	68fb      	ldr	r3, [r7, #12]
 806258a:	681b      	ldr	r3, [r3, #0]
 806258c:	2200      	movs	r2, #0
 806258e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8062590:	68bb      	ldr	r3, [r7, #8]
 8062592:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8062594:	f04f 33ff 	mov.w	r3, #4294967295
 8062598:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 806259a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 806259e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80625a0:	2390      	movs	r3, #144	@ 0x90
 80625a2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80625a4:	2302      	movs	r3, #2
 80625a6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80625a8:	2300      	movs	r3, #0
 80625aa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80625ac:	2300      	movs	r3, #0
 80625ae:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80625b0:	68fb      	ldr	r3, [r7, #12]
 80625b2:	681b      	ldr	r3, [r3, #0]
 80625b4:	f107 0210 	add.w	r2, r7, #16
 80625b8:	4611      	mov	r1, r2
 80625ba:	4618      	mov	r0, r3
 80625bc:	f005 ff38 	bl	8068430 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80625c0:	68fb      	ldr	r3, [r7, #12]
 80625c2:	681b      	ldr	r3, [r3, #0]
 80625c4:	68da      	ldr	r2, [r3, #12]
 80625c6:	68fb      	ldr	r3, [r7, #12]
 80625c8:	681b      	ldr	r3, [r3, #0]
 80625ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80625ce:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80625d0:	68fb      	ldr	r3, [r7, #12]
 80625d2:	681b      	ldr	r3, [r3, #0]
 80625d4:	2100      	movs	r1, #0
 80625d6:	4618      	mov	r0, r3
 80625d8:	f006 f94d 	bl	8068876 <SDMMC_CmdSendEXTCSD>
 80625dc:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 80625de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80625e0:	2b00      	cmp	r3, #0
 80625e2:	d045      	beq.n	8062670 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80625e4:	68fb      	ldr	r3, [r7, #12]
 80625e6:	681b      	ldr	r3, [r3, #0]
 80625e8:	4a52      	ldr	r2, [pc, #328]	@ (8062734 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80625ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 80625ec:	68fb      	ldr	r3, [r7, #12]
 80625ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80625f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80625f2:	431a      	orrs	r2, r3
 80625f4:	68fb      	ldr	r3, [r7, #12]
 80625f6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80625f8:	68fb      	ldr	r3, [r7, #12]
 80625fa:	2201      	movs	r2, #1
 80625fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8062600:	2301      	movs	r3, #1
 8062602:	e092      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8062604:	68fb      	ldr	r3, [r7, #12]
 8062606:	681b      	ldr	r3, [r3, #0]
 8062608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806260a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 806260e:	2b00      	cmp	r3, #0
 8062610:	d013      	beq.n	806263a <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062612:	2300      	movs	r3, #0
 8062614:	637b      	str	r3, [r7, #52]	@ 0x34
 8062616:	e00d      	b.n	8062634 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8062618:	68fb      	ldr	r3, [r7, #12]
 806261a:	681b      	ldr	r3, [r3, #0]
 806261c:	4618      	mov	r0, r3
 806261e:	f005 fe6f 	bl	8068300 <SDMMC_ReadFIFO>
 8062622:	4602      	mov	r2, r0
 8062624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8062626:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8062628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806262a:	3304      	adds	r3, #4
 806262c:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 806262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8062630:	3301      	adds	r3, #1
 8062632:	637b      	str	r3, [r7, #52]	@ 0x34
 8062634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8062636:	2b07      	cmp	r3, #7
 8062638:	d9ee      	bls.n	8062618 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 806263a:	f7fd ff27 	bl	806048c <HAL_GetTick>
 806263e:	4602      	mov	r2, r0
 8062640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8062642:	1ad3      	subs	r3, r2, r3
 8062644:	687a      	ldr	r2, [r7, #4]
 8062646:	429a      	cmp	r2, r3
 8062648:	d902      	bls.n	8062650 <HAL_MMC_GetCardExtCSD+0x10c>
 806264a:	687b      	ldr	r3, [r7, #4]
 806264c:	2b00      	cmp	r3, #0
 806264e:	d10f      	bne.n	8062670 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062650:	68fb      	ldr	r3, [r7, #12]
 8062652:	681b      	ldr	r3, [r3, #0]
 8062654:	4a37      	ldr	r2, [pc, #220]	@ (8062734 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8062656:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8062658:	68fb      	ldr	r3, [r7, #12]
 806265a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806265c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8062660:	68fb      	ldr	r3, [r7, #12]
 8062662:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8062664:	68fb      	ldr	r3, [r7, #12]
 8062666:	2201      	movs	r2, #1
 8062668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 806266c:	2303      	movs	r3, #3
 806266e:	e05c      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8062670:	68fb      	ldr	r3, [r7, #12]
 8062672:	681b      	ldr	r3, [r3, #0]
 8062674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062676:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 806267a:	2b00      	cmp	r3, #0
 806267c:	d0c2      	beq.n	8062604 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 806267e:	68fb      	ldr	r3, [r7, #12]
 8062680:	681b      	ldr	r3, [r3, #0]
 8062682:	68da      	ldr	r2, [r3, #12]
 8062684:	68fb      	ldr	r3, [r7, #12]
 8062686:	681b      	ldr	r3, [r3, #0]
 8062688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806268c:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 806268e:	68fb      	ldr	r3, [r7, #12]
 8062690:	681b      	ldr	r3, [r3, #0]
 8062692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062694:	f003 0308 	and.w	r3, r3, #8
 8062698:	2b00      	cmp	r3, #0
 806269a:	d00f      	beq.n	80626bc <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 806269c:	68fb      	ldr	r3, [r7, #12]
 806269e:	681b      	ldr	r3, [r3, #0]
 80626a0:	4a24      	ldr	r2, [pc, #144]	@ (8062734 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80626a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80626a4:	68fb      	ldr	r3, [r7, #12]
 80626a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80626a8:	f043 0208 	orr.w	r2, r3, #8
 80626ac:	68fb      	ldr	r3, [r7, #12]
 80626ae:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80626b0:	68fb      	ldr	r3, [r7, #12]
 80626b2:	2201      	movs	r2, #1
 80626b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80626b8:	2301      	movs	r3, #1
 80626ba:	e036      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80626bc:	68fb      	ldr	r3, [r7, #12]
 80626be:	681b      	ldr	r3, [r3, #0]
 80626c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80626c2:	f003 0302 	and.w	r3, r3, #2
 80626c6:	2b00      	cmp	r3, #0
 80626c8:	d00f      	beq.n	80626ea <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80626ca:	68fb      	ldr	r3, [r7, #12]
 80626cc:	681b      	ldr	r3, [r3, #0]
 80626ce:	4a19      	ldr	r2, [pc, #100]	@ (8062734 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80626d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80626d2:	68fb      	ldr	r3, [r7, #12]
 80626d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80626d6:	f043 0202 	orr.w	r2, r3, #2
 80626da:	68fb      	ldr	r3, [r7, #12]
 80626dc:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80626de:	68fb      	ldr	r3, [r7, #12]
 80626e0:	2201      	movs	r2, #1
 80626e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80626e6:	2301      	movs	r3, #1
 80626e8:	e01f      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80626ea:	68fb      	ldr	r3, [r7, #12]
 80626ec:	681b      	ldr	r3, [r3, #0]
 80626ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80626f0:	f003 0320 	and.w	r3, r3, #32
 80626f4:	2b00      	cmp	r3, #0
 80626f6:	d00f      	beq.n	8062718 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80626f8:	68fb      	ldr	r3, [r7, #12]
 80626fa:	681b      	ldr	r3, [r3, #0]
 80626fc:	4a0d      	ldr	r2, [pc, #52]	@ (8062734 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80626fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8062700:	68fb      	ldr	r3, [r7, #12]
 8062702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062704:	f043 0220 	orr.w	r2, r3, #32
 8062708:	68fb      	ldr	r3, [r7, #12]
 806270a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 806270c:	68fb      	ldr	r3, [r7, #12]
 806270e:	2201      	movs	r2, #1
 8062710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8062714:	2301      	movs	r3, #1
 8062716:	e008      	b.n	806272a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8062718:	68fb      	ldr	r3, [r7, #12]
 806271a:	681b      	ldr	r3, [r3, #0]
 806271c:	4a06      	ldr	r2, [pc, #24]	@ (8062738 <HAL_MMC_GetCardExtCSD+0x1f4>)
 806271e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8062720:	68fb      	ldr	r3, [r7, #12]
 8062722:	2201      	movs	r2, #1
 8062724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8062728:	2300      	movs	r3, #0
}
 806272a:	4618      	mov	r0, r3
 806272c:	3738      	adds	r7, #56	@ 0x38
 806272e:	46bd      	mov	sp, r7
 8062730:	bd80      	pop	{r7, pc}
 8062732:	bf00      	nop
 8062734:	1fe00fff 	.word	0x1fe00fff
 8062738:	18000f3a 	.word	0x18000f3a

0806273c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 806273c:	b5b0      	push	{r4, r5, r7, lr}
 806273e:	b08c      	sub	sp, #48	@ 0x30
 8062740:	af02      	add	r7, sp, #8
 8062742:	6078      	str	r0, [r7, #4]
 8062744:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8062746:	2300      	movs	r3, #0
 8062748:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 806274a:	687b      	ldr	r3, [r7, #4]
 806274c:	2203      	movs	r2, #3
 806274e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8062752:	687b      	ldr	r3, [r7, #4]
 8062754:	681b      	ldr	r3, [r3, #0]
 8062756:	685b      	ldr	r3, [r3, #4]
 8062758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 806275c:	2b00      	cmp	r3, #0
 806275e:	d014      	beq.n	806278a <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8062760:	687b      	ldr	r3, [r7, #4]
 8062762:	681b      	ldr	r3, [r3, #0]
 8062764:	685b      	ldr	r3, [r3, #4]
 8062766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 806276a:	2b00      	cmp	r3, #0
 806276c:	d006      	beq.n	806277c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 806276e:	2204      	movs	r2, #4
 8062770:	6839      	ldr	r1, [r7, #0]
 8062772:	6878      	ldr	r0, [r7, #4]
 8062774:	f000 fbd6 	bl	8062f24 <MMC_PwrClassUpdate>
 8062778:	6238      	str	r0, [r7, #32]
 806277a:	e00c      	b.n	8062796 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 806277c:	2202      	movs	r2, #2
 806277e:	6839      	ldr	r1, [r7, #0]
 8062780:	6878      	ldr	r0, [r7, #4]
 8062782:	f000 fbcf 	bl	8062f24 <MMC_PwrClassUpdate>
 8062786:	6238      	str	r0, [r7, #32]
 8062788:	e005      	b.n	8062796 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 806278a:	2201      	movs	r2, #1
 806278c:	6839      	ldr	r1, [r7, #0]
 806278e:	6878      	ldr	r0, [r7, #4]
 8062790:	f000 fbc8 	bl	8062f24 <MMC_PwrClassUpdate>
 8062794:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8062796:	6a3b      	ldr	r3, [r7, #32]
 8062798:	2b00      	cmp	r3, #0
 806279a:	d17b      	bne.n	8062894 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 806279c:	683b      	ldr	r3, [r7, #0]
 806279e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80627a2:	d107      	bne.n	80627b4 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80627a4:	687b      	ldr	r3, [r7, #4]
 80627a6:	681b      	ldr	r3, [r3, #0]
 80627a8:	4946      	ldr	r1, [pc, #280]	@ (80628c4 <HAL_MMC_ConfigWideBusOperation+0x188>)
 80627aa:	4618      	mov	r0, r3
 80627ac:	f006 f840 	bl	8068830 <SDMMC_CmdSwitch>
 80627b0:	6238      	str	r0, [r7, #32]
 80627b2:	e019      	b.n	80627e8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80627b4:	683b      	ldr	r3, [r7, #0]
 80627b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80627ba:	d107      	bne.n	80627cc <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80627bc:	687b      	ldr	r3, [r7, #4]
 80627be:	681b      	ldr	r3, [r3, #0]
 80627c0:	4941      	ldr	r1, [pc, #260]	@ (80628c8 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 80627c2:	4618      	mov	r0, r3
 80627c4:	f006 f834 	bl	8068830 <SDMMC_CmdSwitch>
 80627c8:	6238      	str	r0, [r7, #32]
 80627ca:	e00d      	b.n	80627e8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80627cc:	683b      	ldr	r3, [r7, #0]
 80627ce:	2b00      	cmp	r3, #0
 80627d0:	d107      	bne.n	80627e2 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 80627d2:	687b      	ldr	r3, [r7, #4]
 80627d4:	681b      	ldr	r3, [r3, #0]
 80627d6:	493d      	ldr	r1, [pc, #244]	@ (80628cc <HAL_MMC_ConfigWideBusOperation+0x190>)
 80627d8:	4618      	mov	r0, r3
 80627da:	f006 f829 	bl	8068830 <SDMMC_CmdSwitch>
 80627de:	6238      	str	r0, [r7, #32]
 80627e0:	e002      	b.n	80627e8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 80627e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80627e6:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 80627e8:	6a3b      	ldr	r3, [r7, #32]
 80627ea:	2b00      	cmp	r3, #0
 80627ec:	d152      	bne.n	8062894 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 80627ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80627f2:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80627f4:	687b      	ldr	r3, [r7, #4]
 80627f6:	681a      	ldr	r2, [r3, #0]
 80627f8:	687b      	ldr	r3, [r7, #4]
 80627fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80627fc:	041b      	lsls	r3, r3, #16
 80627fe:	4619      	mov	r1, r3
 8062800:	4610      	mov	r0, r2
 8062802:	f005 ffd2 	bl	80687aa <SDMMC_CmdSendStatus>
 8062806:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8062808:	6a3b      	ldr	r3, [r7, #32]
 806280a:	2b00      	cmp	r3, #0
 806280c:	d112      	bne.n	8062834 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 806280e:	687b      	ldr	r3, [r7, #4]
 8062810:	681b      	ldr	r3, [r3, #0]
 8062812:	2100      	movs	r1, #0
 8062814:	4618      	mov	r0, r3
 8062816:	f005 fdf8 	bl	806840a <SDMMC_GetResponse>
 806281a:	61f8      	str	r0, [r7, #28]
        count--;
 806281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806281e:	3b01      	subs	r3, #1
 8062820:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8062822:	69fb      	ldr	r3, [r7, #28]
 8062824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8062828:	2b00      	cmp	r3, #0
 806282a:	d104      	bne.n	8062836 <HAL_MMC_ConfigWideBusOperation+0xfa>
 806282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806282e:	2b00      	cmp	r3, #0
 8062830:	d1e0      	bne.n	80627f4 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8062832:	e000      	b.n	8062836 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8062834:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8062836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8062838:	2b00      	cmp	r3, #0
 806283a:	d025      	beq.n	8062888 <HAL_MMC_ConfigWideBusOperation+0x14c>
 806283c:	6a3b      	ldr	r3, [r7, #32]
 806283e:	2b00      	cmp	r3, #0
 8062840:	d122      	bne.n	8062888 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8062842:	69fb      	ldr	r3, [r7, #28]
 8062844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8062848:	2b00      	cmp	r3, #0
 806284a:	d003      	beq.n	8062854 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 806284c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8062850:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8062852:	e01f      	b.n	8062894 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8062854:	687b      	ldr	r3, [r7, #4]
 8062856:	f107 0408 	add.w	r4, r7, #8
 806285a:	1d1d      	adds	r5, r3, #4
 806285c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 806285e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8062860:	682b      	ldr	r3, [r5, #0]
 8062862:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8062864:	683b      	ldr	r3, [r7, #0]
 8062866:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8062868:	687b      	ldr	r3, [r7, #4]
 806286a:	681c      	ldr	r4, [r3, #0]
 806286c:	466a      	mov	r2, sp
 806286e:	f107 0314 	add.w	r3, r7, #20
 8062872:	e893 0003 	ldmia.w	r3, {r0, r1}
 8062876:	e882 0003 	stmia.w	r2, {r0, r1}
 806287a:	f107 0308 	add.w	r3, r7, #8
 806287e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8062880:	4620      	mov	r0, r4
 8062882:	f005 fd13 	bl	80682ac <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8062886:	e005      	b.n	8062894 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8062888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806288a:	2b00      	cmp	r3, #0
 806288c:	d102      	bne.n	8062894 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 806288e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8062892:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8062894:	687b      	ldr	r3, [r7, #4]
 8062896:	2201      	movs	r2, #1
 8062898:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 806289c:	6a3b      	ldr	r3, [r7, #32]
 806289e:	2b00      	cmp	r3, #0
 80628a0:	d00b      	beq.n	80628ba <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80628a2:	687b      	ldr	r3, [r7, #4]
 80628a4:	681b      	ldr	r3, [r3, #0]
 80628a6:	4a0a      	ldr	r2, [pc, #40]	@ (80628d0 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80628a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80628aa:	687b      	ldr	r3, [r7, #4]
 80628ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80628ae:	6a3b      	ldr	r3, [r7, #32]
 80628b0:	431a      	orrs	r2, r3
 80628b2:	687b      	ldr	r3, [r7, #4]
 80628b4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80628b6:	2301      	movs	r3, #1
 80628b8:	e000      	b.n	80628bc <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 80628ba:	2300      	movs	r3, #0
}
 80628bc:	4618      	mov	r0, r3
 80628be:	3728      	adds	r7, #40	@ 0x28
 80628c0:	46bd      	mov	sp, r7
 80628c2:	bdb0      	pop	{r4, r5, r7, pc}
 80628c4:	03b70200 	.word	0x03b70200
 80628c8:	03b70100 	.word	0x03b70100
 80628cc:	03b70000 	.word	0x03b70000
 80628d0:	1fe00fff 	.word	0x1fe00fff

080628d4 <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 80628d4:	b580      	push	{r7, lr}
 80628d6:	b086      	sub	sp, #24
 80628d8:	af00      	add	r7, sp, #0
 80628da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 80628dc:	2300      	movs	r3, #0
 80628de:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 80628e0:	f107 030c 	add.w	r3, r7, #12
 80628e4:	4619      	mov	r1, r3
 80628e6:	6878      	ldr	r0, [r7, #4]
 80628e8:	f000 f96f 	bl	8062bca <MMC_SendStatus>
 80628ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80628ee:	697b      	ldr	r3, [r7, #20]
 80628f0:	2b00      	cmp	r3, #0
 80628f2:	d005      	beq.n	8062900 <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 80628f4:	687b      	ldr	r3, [r7, #4]
 80628f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80628f8:	697b      	ldr	r3, [r7, #20]
 80628fa:	431a      	orrs	r2, r3
 80628fc:	687b      	ldr	r3, [r7, #4]
 80628fe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8062900:	68fb      	ldr	r3, [r7, #12]
 8062902:	0a5b      	lsrs	r3, r3, #9
 8062904:	f003 030f 	and.w	r3, r3, #15
 8062908:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 806290a:	693b      	ldr	r3, [r7, #16]
}
 806290c:	4618      	mov	r0, r3
 806290e:	3718      	adds	r7, #24
 8062910:	46bd      	mov	sp, r7
 8062912:	bd80      	pop	{r7, pc}

08062914 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8062914:	b5b0      	push	{r4, r5, r7, lr}
 8062916:	b096      	sub	sp, #88	@ 0x58
 8062918:	af02      	add	r7, sp, #8
 806291a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 806291c:	2302      	movs	r3, #2
 806291e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8062922:	687b      	ldr	r3, [r7, #4]
 8062924:	681b      	ldr	r3, [r3, #0]
 8062926:	4618      	mov	r0, r3
 8062928:	f005 fd2a 	bl	8068380 <SDMMC_GetPowerState>
 806292c:	4603      	mov	r3, r0
 806292e:	2b00      	cmp	r3, #0
 8062930:	d102      	bne.n	8062938 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8062932:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8062936:	e0e6      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8062938:	687b      	ldr	r3, [r7, #4]
 806293a:	681b      	ldr	r3, [r3, #0]
 806293c:	4618      	mov	r0, r3
 806293e:	f005 fed0 	bl	80686e2 <SDMMC_CmdSendCID>
 8062942:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062946:	2b00      	cmp	r3, #0
 8062948:	d001      	beq.n	806294e <MMC_InitCard+0x3a>
  {
    return errorstate;
 806294a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 806294c:	e0db      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 806294e:	687b      	ldr	r3, [r7, #4]
 8062950:	681b      	ldr	r3, [r3, #0]
 8062952:	2100      	movs	r1, #0
 8062954:	4618      	mov	r0, r3
 8062956:	f005 fd58 	bl	806840a <SDMMC_GetResponse>
 806295a:	4602      	mov	r2, r0
 806295c:	687b      	ldr	r3, [r7, #4]
 806295e:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8062960:	687b      	ldr	r3, [r7, #4]
 8062962:	681b      	ldr	r3, [r3, #0]
 8062964:	2104      	movs	r1, #4
 8062966:	4618      	mov	r0, r3
 8062968:	f005 fd4f 	bl	806840a <SDMMC_GetResponse>
 806296c:	4602      	mov	r2, r0
 806296e:	687b      	ldr	r3, [r7, #4]
 8062970:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8062972:	687b      	ldr	r3, [r7, #4]
 8062974:	681b      	ldr	r3, [r3, #0]
 8062976:	2108      	movs	r1, #8
 8062978:	4618      	mov	r0, r3
 806297a:	f005 fd46 	bl	806840a <SDMMC_GetResponse>
 806297e:	4602      	mov	r2, r0
 8062980:	687b      	ldr	r3, [r7, #4]
 8062982:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8062984:	687b      	ldr	r3, [r7, #4]
 8062986:	681b      	ldr	r3, [r3, #0]
 8062988:	210c      	movs	r1, #12
 806298a:	4618      	mov	r0, r3
 806298c:	f005 fd3d 	bl	806840a <SDMMC_GetResponse>
 8062990:	4602      	mov	r2, r0
 8062992:	687b      	ldr	r3, [r7, #4]
 8062994:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8062996:	687b      	ldr	r3, [r7, #4]
 8062998:	681b      	ldr	r3, [r3, #0]
 806299a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 806299e:	4611      	mov	r1, r2
 80629a0:	4618      	mov	r0, r3
 80629a2:	f005 fedd 	bl	8068760 <SDMMC_CmdSetRelAddMmc>
 80629a6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80629a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80629aa:	2b00      	cmp	r3, #0
 80629ac:	d001      	beq.n	80629b2 <MMC_InitCard+0x9e>
  {
    return errorstate;
 80629ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80629b0:	e0a9      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80629b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80629b6:	687b      	ldr	r3, [r7, #4]
 80629b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80629ba:	687b      	ldr	r3, [r7, #4]
 80629bc:	681a      	ldr	r2, [r3, #0]
 80629be:	687b      	ldr	r3, [r7, #4]
 80629c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80629c2:	041b      	lsls	r3, r3, #16
 80629c4:	4619      	mov	r1, r3
 80629c6:	4610      	mov	r0, r2
 80629c8:	f005 feaa 	bl	8068720 <SDMMC_CmdSendCSD>
 80629cc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80629ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80629d0:	2b00      	cmp	r3, #0
 80629d2:	d001      	beq.n	80629d8 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80629d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80629d6:	e096      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80629d8:	687b      	ldr	r3, [r7, #4]
 80629da:	681b      	ldr	r3, [r3, #0]
 80629dc:	2100      	movs	r1, #0
 80629de:	4618      	mov	r0, r3
 80629e0:	f005 fd13 	bl	806840a <SDMMC_GetResponse>
 80629e4:	4602      	mov	r2, r0
 80629e6:	687b      	ldr	r3, [r7, #4]
 80629e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80629ea:	687b      	ldr	r3, [r7, #4]
 80629ec:	681b      	ldr	r3, [r3, #0]
 80629ee:	2104      	movs	r1, #4
 80629f0:	4618      	mov	r0, r3
 80629f2:	f005 fd0a 	bl	806840a <SDMMC_GetResponse>
 80629f6:	4602      	mov	r2, r0
 80629f8:	687b      	ldr	r3, [r7, #4]
 80629fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80629fc:	687b      	ldr	r3, [r7, #4]
 80629fe:	681b      	ldr	r3, [r3, #0]
 8062a00:	2108      	movs	r1, #8
 8062a02:	4618      	mov	r0, r3
 8062a04:	f005 fd01 	bl	806840a <SDMMC_GetResponse>
 8062a08:	4602      	mov	r2, r0
 8062a0a:	687b      	ldr	r3, [r7, #4]
 8062a0c:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8062a0e:	687b      	ldr	r3, [r7, #4]
 8062a10:	681b      	ldr	r3, [r3, #0]
 8062a12:	210c      	movs	r1, #12
 8062a14:	4618      	mov	r0, r3
 8062a16:	f005 fcf8 	bl	806840a <SDMMC_GetResponse>
 8062a1a:	4602      	mov	r2, r0
 8062a1c:	687b      	ldr	r3, [r7, #4]
 8062a1e:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8062a20:	687b      	ldr	r3, [r7, #4]
 8062a22:	681b      	ldr	r3, [r3, #0]
 8062a24:	2104      	movs	r1, #4
 8062a26:	4618      	mov	r0, r3
 8062a28:	f005 fcef 	bl	806840a <SDMMC_GetResponse>
 8062a2c:	4603      	mov	r3, r0
 8062a2e:	0d1a      	lsrs	r2, r3, #20
 8062a30:	687b      	ldr	r3, [r7, #4]
 8062a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8062a34:	687b      	ldr	r3, [r7, #4]
 8062a36:	681a      	ldr	r2, [r3, #0]
 8062a38:	687b      	ldr	r3, [r7, #4]
 8062a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062a3c:	041b      	lsls	r3, r3, #16
 8062a3e:	4619      	mov	r1, r3
 8062a40:	4610      	mov	r0, r2
 8062a42:	f005 fe0d 	bl	8068660 <SDMMC_CmdSelDesel>
 8062a46:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062a4a:	2b00      	cmp	r3, #0
 8062a4c:	d001      	beq.n	8062a52 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8062a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062a50:	e059      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8062a52:	f107 031c 	add.w	r3, r7, #28
 8062a56:	4619      	mov	r1, r3
 8062a58:	6878      	ldr	r0, [r7, #4]
 8062a5a:	f7ff fba7 	bl	80621ac <HAL_MMC_GetCardCSD>
 8062a5e:	4603      	mov	r3, r0
 8062a60:	2b00      	cmp	r3, #0
 8062a62:	d002      	beq.n	8062a6a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8062a64:	687b      	ldr	r3, [r7, #4]
 8062a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062a68:	e04d      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8062a6a:	687b      	ldr	r3, [r7, #4]
 8062a6c:	681a      	ldr	r2, [r3, #0]
 8062a6e:	687b      	ldr	r3, [r7, #4]
 8062a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062a72:	041b      	lsls	r3, r3, #16
 8062a74:	4619      	mov	r1, r3
 8062a76:	4610      	mov	r0, r2
 8062a78:	f005 fe97 	bl	80687aa <SDMMC_CmdSendStatus>
 8062a7c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062a80:	2b00      	cmp	r3, #0
 8062a82:	d005      	beq.n	8062a90 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8062a84:	687b      	ldr	r3, [r7, #4]
 8062a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8062a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062a8a:	431a      	orrs	r2, r3
 8062a8c:	687b      	ldr	r3, [r7, #4]
 8062a8e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8062a90:	687b      	ldr	r3, [r7, #4]
 8062a92:	3378      	adds	r3, #120	@ 0x78
 8062a94:	f04f 32ff 	mov.w	r2, #4294967295
 8062a98:	4619      	mov	r1, r3
 8062a9a:	6878      	ldr	r0, [r7, #4]
 8062a9c:	f7ff fd52 	bl	8062544 <HAL_MMC_GetCardExtCSD>
 8062aa0:	4603      	mov	r3, r0
 8062aa2:	2b00      	cmp	r3, #0
 8062aa4:	d002      	beq.n	8062aac <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8062aa6:	687b      	ldr	r3, [r7, #4]
 8062aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062aaa:	e02c      	b.n	8062b06 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8062aac:	687b      	ldr	r3, [r7, #4]
 8062aae:	681a      	ldr	r2, [r3, #0]
 8062ab0:	687b      	ldr	r3, [r7, #4]
 8062ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062ab4:	041b      	lsls	r3, r3, #16
 8062ab6:	4619      	mov	r1, r3
 8062ab8:	4610      	mov	r0, r2
 8062aba:	f005 fe76 	bl	80687aa <SDMMC_CmdSendStatus>
 8062abe:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062ac2:	2b00      	cmp	r3, #0
 8062ac4:	d005      	beq.n	8062ad2 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8062ac6:	687b      	ldr	r3, [r7, #4]
 8062ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8062aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8062acc:	431a      	orrs	r2, r3
 8062ace:	687b      	ldr	r3, [r7, #4]
 8062ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8062ad2:	687b      	ldr	r3, [r7, #4]
 8062ad4:	f107 0408 	add.w	r4, r7, #8
 8062ad8:	1d1d      	adds	r5, r3, #4
 8062ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8062adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8062ade:	682b      	ldr	r3, [r5, #0]
 8062ae0:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8062ae2:	2300      	movs	r3, #0
 8062ae4:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8062ae6:	687b      	ldr	r3, [r7, #4]
 8062ae8:	681c      	ldr	r4, [r3, #0]
 8062aea:	466a      	mov	r2, sp
 8062aec:	f107 0314 	add.w	r3, r7, #20
 8062af0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8062af4:	e882 0003 	stmia.w	r2, {r0, r1}
 8062af8:	f107 0308 	add.w	r3, r7, #8
 8062afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8062afe:	4620      	mov	r0, r4
 8062b00:	f005 fbd4 	bl	80682ac <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8062b04:	2300      	movs	r3, #0
}
 8062b06:	4618      	mov	r0, r3
 8062b08:	3750      	adds	r7, #80	@ 0x50
 8062b0a:	46bd      	mov	sp, r7
 8062b0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08062b10 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8062b10:	b580      	push	{r7, lr}
 8062b12:	b086      	sub	sp, #24
 8062b14:	af00      	add	r7, sp, #0
 8062b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8062b18:	2300      	movs	r3, #0
 8062b1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8062b1c:	2300      	movs	r3, #0
 8062b1e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8062b20:	2300      	movs	r3, #0
 8062b22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8062b24:	687b      	ldr	r3, [r7, #4]
 8062b26:	681b      	ldr	r3, [r3, #0]
 8062b28:	4618      	mov	r0, r3
 8062b2a:	f005 fdbc 	bl	80686a6 <SDMMC_CmdGoIdleState>
 8062b2e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062b30:	68fb      	ldr	r3, [r7, #12]
 8062b32:	2b00      	cmp	r3, #0
 8062b34:	d027      	beq.n	8062b86 <MMC_PowerON+0x76>
  {
    return errorstate;
 8062b36:	68fb      	ldr	r3, [r7, #12]
 8062b38:	e034      	b.n	8062ba4 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8062b3a:	68bb      	ldr	r3, [r7, #8]
 8062b3c:	1c5a      	adds	r2, r3, #1
 8062b3e:	60ba      	str	r2, [r7, #8]
 8062b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8062b44:	4293      	cmp	r3, r2
 8062b46:	d102      	bne.n	8062b4e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8062b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8062b4c:	e02a      	b.n	8062ba4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8062b4e:	687b      	ldr	r3, [r7, #4]
 8062b50:	681b      	ldr	r3, [r3, #0]
 8062b52:	4916      	ldr	r1, [pc, #88]	@ (8062bac <MMC_PowerON+0x9c>)
 8062b54:	4618      	mov	r0, r3
 8062b56:	f005 fe4b 	bl	80687f0 <SDMMC_CmdOpCondition>
 8062b5a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8062b5c:	68fb      	ldr	r3, [r7, #12]
 8062b5e:	2b00      	cmp	r3, #0
 8062b60:	d002      	beq.n	8062b68 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8062b62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8062b66:	e01d      	b.n	8062ba4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8062b68:	687b      	ldr	r3, [r7, #4]
 8062b6a:	681b      	ldr	r3, [r3, #0]
 8062b6c:	2100      	movs	r1, #0
 8062b6e:	4618      	mov	r0, r3
 8062b70:	f005 fc4b 	bl	806840a <SDMMC_GetResponse>
 8062b74:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8062b76:	697b      	ldr	r3, [r7, #20]
 8062b78:	0fdb      	lsrs	r3, r3, #31
 8062b7a:	2b01      	cmp	r3, #1
 8062b7c:	d101      	bne.n	8062b82 <MMC_PowerON+0x72>
 8062b7e:	2301      	movs	r3, #1
 8062b80:	e000      	b.n	8062b84 <MMC_PowerON+0x74>
 8062b82:	2300      	movs	r3, #0
 8062b84:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8062b86:	693b      	ldr	r3, [r7, #16]
 8062b88:	2b00      	cmp	r3, #0
 8062b8a:	d0d6      	beq.n	8062b3a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8062b8c:	697b      	ldr	r3, [r7, #20]
 8062b8e:	0e1b      	lsrs	r3, r3, #24
 8062b90:	2bc0      	cmp	r3, #192	@ 0xc0
 8062b92:	d103      	bne.n	8062b9c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8062b94:	687b      	ldr	r3, [r7, #4]
 8062b96:	2201      	movs	r2, #1
 8062b98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8062b9a:	e002      	b.n	8062ba2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8062b9c:	687b      	ldr	r3, [r7, #4]
 8062b9e:	2200      	movs	r2, #0
 8062ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8062ba2:	2300      	movs	r3, #0
}
 8062ba4:	4618      	mov	r0, r3
 8062ba6:	3718      	adds	r7, #24
 8062ba8:	46bd      	mov	sp, r7
 8062baa:	bd80      	pop	{r7, pc}
 8062bac:	c0ff8000 	.word	0xc0ff8000

08062bb0 <MMC_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
static void MMC_PowerOFF(MMC_HandleTypeDef *hmmc)
{
 8062bb0:	b580      	push	{r7, lr}
 8062bb2:	b082      	sub	sp, #8
 8062bb4:	af00      	add	r7, sp, #0
 8062bb6:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hmmc->Instance);
 8062bb8:	687b      	ldr	r3, [r7, #4]
 8062bba:	681b      	ldr	r3, [r3, #0]
 8062bbc:	4618      	mov	r0, r3
 8062bbe:	f005 fbce 	bl	806835e <SDMMC_PowerState_OFF>
}
 8062bc2:	bf00      	nop
 8062bc4:	3708      	adds	r7, #8
 8062bc6:	46bd      	mov	sp, r7
 8062bc8:	bd80      	pop	{r7, pc}

08062bca <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 8062bca:	b580      	push	{r7, lr}
 8062bcc:	b084      	sub	sp, #16
 8062bce:	af00      	add	r7, sp, #0
 8062bd0:	6078      	str	r0, [r7, #4]
 8062bd2:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8062bd4:	683b      	ldr	r3, [r7, #0]
 8062bd6:	2b00      	cmp	r3, #0
 8062bd8:	d102      	bne.n	8062be0 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 8062bda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8062bde:	e018      	b.n	8062c12 <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8062be0:	687b      	ldr	r3, [r7, #4]
 8062be2:	681a      	ldr	r2, [r3, #0]
 8062be4:	687b      	ldr	r3, [r7, #4]
 8062be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062be8:	041b      	lsls	r3, r3, #16
 8062bea:	4619      	mov	r1, r3
 8062bec:	4610      	mov	r0, r2
 8062bee:	f005 fddc 	bl	80687aa <SDMMC_CmdSendStatus>
 8062bf2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062bf4:	68fb      	ldr	r3, [r7, #12]
 8062bf6:	2b00      	cmp	r3, #0
 8062bf8:	d001      	beq.n	8062bfe <MMC_SendStatus+0x34>
  {
    return errorstate;
 8062bfa:	68fb      	ldr	r3, [r7, #12]
 8062bfc:	e009      	b.n	8062c12 <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8062bfe:	687b      	ldr	r3, [r7, #4]
 8062c00:	681b      	ldr	r3, [r3, #0]
 8062c02:	2100      	movs	r1, #0
 8062c04:	4618      	mov	r0, r3
 8062c06:	f005 fc00 	bl	806840a <SDMMC_GetResponse>
 8062c0a:	4602      	mov	r2, r0
 8062c0c:	683b      	ldr	r3, [r7, #0]
 8062c0e:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 8062c10:	2300      	movs	r3, #0
}
 8062c12:	4618      	mov	r0, r3
 8062c14:	3710      	adds	r7, #16
 8062c16:	46bd      	mov	sp, r7
 8062c18:	bd80      	pop	{r7, pc}
	...

08062c1c <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8062c1c:	b580      	push	{r7, lr}
 8062c1e:	b090      	sub	sp, #64	@ 0x40
 8062c20:	af00      	add	r7, sp, #0
 8062c22:	60f8      	str	r0, [r7, #12]
 8062c24:	60b9      	str	r1, [r7, #8]
 8062c26:	603b      	str	r3, [r7, #0]
 8062c28:	4613      	mov	r3, r2
 8062c2a:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8062c2c:	f7fd fc2e 	bl	806048c <HAL_GetTick>
 8062c30:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8062c32:	2300      	movs	r3, #0
 8062c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8062c36:	68fb      	ldr	r3, [r7, #12]
 8062c38:	2200      	movs	r2, #0
 8062c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8062c3c:	68fb      	ldr	r3, [r7, #12]
 8062c3e:	681b      	ldr	r3, [r3, #0]
 8062c40:	2200      	movs	r2, #0
 8062c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8062c44:	f04f 33ff 	mov.w	r3, #4294967295
 8062c48:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8062c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8062c4e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8062c50:	2390      	movs	r3, #144	@ 0x90
 8062c52:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8062c54:	2302      	movs	r3, #2
 8062c56:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8062c58:	2300      	movs	r3, #0
 8062c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8062c5c:	2301      	movs	r3, #1
 8062c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8062c60:	68fb      	ldr	r3, [r7, #12]
 8062c62:	681b      	ldr	r3, [r3, #0]
 8062c64:	f107 0214 	add.w	r2, r7, #20
 8062c68:	4611      	mov	r1, r2
 8062c6a:	4618      	mov	r0, r3
 8062c6c:	f005 fbe0 	bl	8068430 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8062c70:	68fb      	ldr	r3, [r7, #12]
 8062c72:	681b      	ldr	r3, [r3, #0]
 8062c74:	2100      	movs	r1, #0
 8062c76:	4618      	mov	r0, r3
 8062c78:	f005 fdfd 	bl	8068876 <SDMMC_CmdSendEXTCSD>
 8062c7c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8062c80:	2b00      	cmp	r3, #0
 8062c82:	d04e      	beq.n	8062d22 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062c84:	68fb      	ldr	r3, [r7, #12]
 8062c86:	681b      	ldr	r3, [r3, #0]
 8062c88:	4a5c      	ldr	r2, [pc, #368]	@ (8062dfc <MMC_ReadExtCSD+0x1e0>)
 8062c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8062c8c:	68fb      	ldr	r3, [r7, #12]
 8062c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8062c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8062c92:	431a      	orrs	r2, r3
 8062c94:	68fb      	ldr	r3, [r7, #12]
 8062c96:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8062c98:	68fb      	ldr	r3, [r7, #12]
 8062c9a:	2201      	movs	r2, #1
 8062c9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8062ca0:	2301      	movs	r3, #1
 8062ca2:	e0a6      	b.n	8062df2 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8062ca4:	68fb      	ldr	r3, [r7, #12]
 8062ca6:	681b      	ldr	r3, [r3, #0]
 8062ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8062cae:	2b00      	cmp	r3, #0
 8062cb0:	d01c      	beq.n	8062cec <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062cb2:	2300      	movs	r3, #0
 8062cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8062cb6:	e013      	b.n	8062ce0 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8062cb8:	68fb      	ldr	r3, [r7, #12]
 8062cba:	681b      	ldr	r3, [r3, #0]
 8062cbc:	4618      	mov	r0, r3
 8062cbe:	f005 fb1f 	bl	8068300 <SDMMC_ReadFIFO>
 8062cc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8062cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8062cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8062cc8:	4413      	add	r3, r2
 8062cca:	88fa      	ldrh	r2, [r7, #6]
 8062ccc:	0892      	lsrs	r2, r2, #2
 8062cce:	b292      	uxth	r2, r2
 8062cd0:	4293      	cmp	r3, r2
 8062cd2:	d102      	bne.n	8062cda <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8062cd4:	68bb      	ldr	r3, [r7, #8]
 8062cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8062cd8:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8062cdc:	3301      	adds	r3, #1
 8062cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8062ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8062ce2:	2b07      	cmp	r3, #7
 8062ce4:	d9e8      	bls.n	8062cb8 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8062ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8062ce8:	3308      	adds	r3, #8
 8062cea:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8062cec:	f7fd fbce 	bl	806048c <HAL_GetTick>
 8062cf0:	4602      	mov	r2, r0
 8062cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8062cf4:	1ad3      	subs	r3, r2, r3
 8062cf6:	683a      	ldr	r2, [r7, #0]
 8062cf8:	429a      	cmp	r2, r3
 8062cfa:	d902      	bls.n	8062d02 <MMC_ReadExtCSD+0xe6>
 8062cfc:	683b      	ldr	r3, [r7, #0]
 8062cfe:	2b00      	cmp	r3, #0
 8062d00:	d10f      	bne.n	8062d22 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062d02:	68fb      	ldr	r3, [r7, #12]
 8062d04:	681b      	ldr	r3, [r3, #0]
 8062d06:	4a3d      	ldr	r2, [pc, #244]	@ (8062dfc <MMC_ReadExtCSD+0x1e0>)
 8062d08:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8062d0a:	68fb      	ldr	r3, [r7, #12]
 8062d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8062d12:	68fb      	ldr	r3, [r7, #12]
 8062d14:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8062d16:	68fb      	ldr	r3, [r7, #12]
 8062d18:	2201      	movs	r2, #1
 8062d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8062d1e:	2303      	movs	r3, #3
 8062d20:	e067      	b.n	8062df2 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8062d22:	68fb      	ldr	r3, [r7, #12]
 8062d24:	681b      	ldr	r3, [r3, #0]
 8062d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d28:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8062d2c:	2b00      	cmp	r3, #0
 8062d2e:	d0b9      	beq.n	8062ca4 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8062d30:	68fb      	ldr	r3, [r7, #12]
 8062d32:	681b      	ldr	r3, [r3, #0]
 8062d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d36:	f003 0308 	and.w	r3, r3, #8
 8062d3a:	2b00      	cmp	r3, #0
 8062d3c:	d00f      	beq.n	8062d5e <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062d3e:	68fb      	ldr	r3, [r7, #12]
 8062d40:	681b      	ldr	r3, [r3, #0]
 8062d42:	4a2e      	ldr	r2, [pc, #184]	@ (8062dfc <MMC_ReadExtCSD+0x1e0>)
 8062d44:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8062d46:	68fb      	ldr	r3, [r7, #12]
 8062d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d4a:	f043 0208 	orr.w	r2, r3, #8
 8062d4e:	68fb      	ldr	r3, [r7, #12]
 8062d50:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8062d52:	68fb      	ldr	r3, [r7, #12]
 8062d54:	2201      	movs	r2, #1
 8062d56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8062d5a:	2301      	movs	r3, #1
 8062d5c:	e049      	b.n	8062df2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8062d5e:	68fb      	ldr	r3, [r7, #12]
 8062d60:	681b      	ldr	r3, [r3, #0]
 8062d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d64:	f003 0302 	and.w	r3, r3, #2
 8062d68:	2b00      	cmp	r3, #0
 8062d6a:	d00f      	beq.n	8062d8c <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062d6c:	68fb      	ldr	r3, [r7, #12]
 8062d6e:	681b      	ldr	r3, [r3, #0]
 8062d70:	4a22      	ldr	r2, [pc, #136]	@ (8062dfc <MMC_ReadExtCSD+0x1e0>)
 8062d72:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8062d74:	68fb      	ldr	r3, [r7, #12]
 8062d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d78:	f043 0202 	orr.w	r2, r3, #2
 8062d7c:	68fb      	ldr	r3, [r7, #12]
 8062d7e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8062d80:	68fb      	ldr	r3, [r7, #12]
 8062d82:	2201      	movs	r2, #1
 8062d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8062d88:	2301      	movs	r3, #1
 8062d8a:	e032      	b.n	8062df2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8062d8c:	68fb      	ldr	r3, [r7, #12]
 8062d8e:	681b      	ldr	r3, [r3, #0]
 8062d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062d92:	f003 0320 	and.w	r3, r3, #32
 8062d96:	2b00      	cmp	r3, #0
 8062d98:	d00f      	beq.n	8062dba <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8062d9a:	68fb      	ldr	r3, [r7, #12]
 8062d9c:	681b      	ldr	r3, [r3, #0]
 8062d9e:	4a17      	ldr	r2, [pc, #92]	@ (8062dfc <MMC_ReadExtCSD+0x1e0>)
 8062da0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8062da2:	68fb      	ldr	r3, [r7, #12]
 8062da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062da6:	f043 0220 	orr.w	r2, r3, #32
 8062daa:	68fb      	ldr	r3, [r7, #12]
 8062dac:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8062dae:	68fb      	ldr	r3, [r7, #12]
 8062db0:	2201      	movs	r2, #1
 8062db2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8062db6:	2301      	movs	r3, #1
 8062db8:	e01b      	b.n	8062df2 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8062dba:	68fb      	ldr	r3, [r7, #12]
 8062dbc:	681a      	ldr	r2, [r3, #0]
 8062dbe:	68fb      	ldr	r3, [r7, #12]
 8062dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062dc2:	041b      	lsls	r3, r3, #16
 8062dc4:	4619      	mov	r1, r3
 8062dc6:	4610      	mov	r0, r2
 8062dc8:	f005 fcef 	bl	80687aa <SDMMC_CmdSendStatus>
 8062dcc:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8062dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8062dd0:	2b00      	cmp	r3, #0
 8062dd2:	d005      	beq.n	8062de0 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8062dd4:	68fb      	ldr	r3, [r7, #12]
 8062dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8062dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8062dda:	431a      	orrs	r2, r3
 8062ddc:	68fb      	ldr	r3, [r7, #12]
 8062dde:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8062de0:	68fb      	ldr	r3, [r7, #12]
 8062de2:	681b      	ldr	r3, [r3, #0]
 8062de4:	4a06      	ldr	r2, [pc, #24]	@ (8062e00 <MMC_ReadExtCSD+0x1e4>)
 8062de6:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8062de8:	68fb      	ldr	r3, [r7, #12]
 8062dea:	2201      	movs	r2, #1
 8062dec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8062df0:	2300      	movs	r3, #0
}
 8062df2:	4618      	mov	r0, r3
 8062df4:	3740      	adds	r7, #64	@ 0x40
 8062df6:	46bd      	mov	sp, r7
 8062df8:	bd80      	pop	{r7, pc}
 8062dfa:	bf00      	nop
 8062dfc:	1fe00fff 	.word	0x1fe00fff
 8062e00:	18000f3a 	.word	0x18000f3a

08062e04 <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 8062e04:	b580      	push	{r7, lr}
 8062e06:	b086      	sub	sp, #24
 8062e08:	af00      	add	r7, sp, #0
 8062e0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 8062e0c:	687b      	ldr	r3, [r7, #4]
 8062e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8062e10:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 8062e12:	687b      	ldr	r3, [r7, #4]
 8062e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8062e16:	2b1f      	cmp	r3, #31
 8062e18:	d936      	bls.n	8062e88 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062e1a:	2300      	movs	r3, #0
 8062e1c:	617b      	str	r3, [r7, #20]
 8062e1e:	e027      	b.n	8062e70 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 8062e20:	687b      	ldr	r3, [r7, #4]
 8062e22:	681b      	ldr	r3, [r3, #0]
 8062e24:	4618      	mov	r0, r3
 8062e26:	f005 fa6b 	bl	8068300 <SDMMC_ReadFIFO>
 8062e2a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8062e2c:	68fb      	ldr	r3, [r7, #12]
 8062e2e:	b2da      	uxtb	r2, r3
 8062e30:	693b      	ldr	r3, [r7, #16]
 8062e32:	701a      	strb	r2, [r3, #0]
      tmp++;
 8062e34:	693b      	ldr	r3, [r7, #16]
 8062e36:	3301      	adds	r3, #1
 8062e38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8062e3a:	68fb      	ldr	r3, [r7, #12]
 8062e3c:	0a1b      	lsrs	r3, r3, #8
 8062e3e:	b2da      	uxtb	r2, r3
 8062e40:	693b      	ldr	r3, [r7, #16]
 8062e42:	701a      	strb	r2, [r3, #0]
      tmp++;
 8062e44:	693b      	ldr	r3, [r7, #16]
 8062e46:	3301      	adds	r3, #1
 8062e48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8062e4a:	68fb      	ldr	r3, [r7, #12]
 8062e4c:	0c1b      	lsrs	r3, r3, #16
 8062e4e:	b2da      	uxtb	r2, r3
 8062e50:	693b      	ldr	r3, [r7, #16]
 8062e52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8062e54:	693b      	ldr	r3, [r7, #16]
 8062e56:	3301      	adds	r3, #1
 8062e58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8062e5a:	68fb      	ldr	r3, [r7, #12]
 8062e5c:	0e1b      	lsrs	r3, r3, #24
 8062e5e:	b2da      	uxtb	r2, r3
 8062e60:	693b      	ldr	r3, [r7, #16]
 8062e62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8062e64:	693b      	ldr	r3, [r7, #16]
 8062e66:	3301      	adds	r3, #1
 8062e68:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062e6a:	697b      	ldr	r3, [r7, #20]
 8062e6c:	3301      	adds	r3, #1
 8062e6e:	617b      	str	r3, [r7, #20]
 8062e70:	697b      	ldr	r3, [r7, #20]
 8062e72:	2b07      	cmp	r3, #7
 8062e74:	d9d4      	bls.n	8062e20 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 8062e76:	687b      	ldr	r3, [r7, #4]
 8062e78:	693a      	ldr	r2, [r7, #16]
 8062e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 8062e7c:	687b      	ldr	r3, [r7, #4]
 8062e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8062e80:	f1a3 0220 	sub.w	r2, r3, #32
 8062e84:	687b      	ldr	r3, [r7, #4]
 8062e86:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8062e88:	bf00      	nop
 8062e8a:	3718      	adds	r7, #24
 8062e8c:	46bd      	mov	sp, r7
 8062e8e:	bd80      	pop	{r7, pc}

08062e90 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 8062e90:	b580      	push	{r7, lr}
 8062e92:	b086      	sub	sp, #24
 8062e94:	af00      	add	r7, sp, #0
 8062e96:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 8062e98:	687b      	ldr	r3, [r7, #4]
 8062e9a:	69db      	ldr	r3, [r3, #28]
 8062e9c:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 8062e9e:	687b      	ldr	r3, [r7, #4]
 8062ea0:	6a1b      	ldr	r3, [r3, #32]
 8062ea2:	2b1f      	cmp	r3, #31
 8062ea4:	d93a      	bls.n	8062f1c <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062ea6:	2300      	movs	r3, #0
 8062ea8:	617b      	str	r3, [r7, #20]
 8062eaa:	e02b      	b.n	8062f04 <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8062eac:	693b      	ldr	r3, [r7, #16]
 8062eae:	781b      	ldrb	r3, [r3, #0]
 8062eb0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8062eb2:	693b      	ldr	r3, [r7, #16]
 8062eb4:	3301      	adds	r3, #1
 8062eb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8062eb8:	693b      	ldr	r3, [r7, #16]
 8062eba:	781b      	ldrb	r3, [r3, #0]
 8062ebc:	021a      	lsls	r2, r3, #8
 8062ebe:	68fb      	ldr	r3, [r7, #12]
 8062ec0:	4313      	orrs	r3, r2
 8062ec2:	60fb      	str	r3, [r7, #12]
      tmp++;
 8062ec4:	693b      	ldr	r3, [r7, #16]
 8062ec6:	3301      	adds	r3, #1
 8062ec8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8062eca:	693b      	ldr	r3, [r7, #16]
 8062ecc:	781b      	ldrb	r3, [r3, #0]
 8062ece:	041a      	lsls	r2, r3, #16
 8062ed0:	68fb      	ldr	r3, [r7, #12]
 8062ed2:	4313      	orrs	r3, r2
 8062ed4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8062ed6:	693b      	ldr	r3, [r7, #16]
 8062ed8:	3301      	adds	r3, #1
 8062eda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8062edc:	693b      	ldr	r3, [r7, #16]
 8062ede:	781b      	ldrb	r3, [r3, #0]
 8062ee0:	061a      	lsls	r2, r3, #24
 8062ee2:	68fb      	ldr	r3, [r7, #12]
 8062ee4:	4313      	orrs	r3, r2
 8062ee6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8062ee8:	693b      	ldr	r3, [r7, #16]
 8062eea:	3301      	adds	r3, #1
 8062eec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 8062eee:	687b      	ldr	r3, [r7, #4]
 8062ef0:	681b      	ldr	r3, [r3, #0]
 8062ef2:	f107 020c 	add.w	r2, r7, #12
 8062ef6:	4611      	mov	r1, r2
 8062ef8:	4618      	mov	r0, r3
 8062efa:	f005 fa0e 	bl	806831a <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8062efe:	697b      	ldr	r3, [r7, #20]
 8062f00:	3301      	adds	r3, #1
 8062f02:	617b      	str	r3, [r7, #20]
 8062f04:	697b      	ldr	r3, [r7, #20]
 8062f06:	2b07      	cmp	r3, #7
 8062f08:	d9d0      	bls.n	8062eac <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 8062f0a:	687b      	ldr	r3, [r7, #4]
 8062f0c:	693a      	ldr	r2, [r7, #16]
 8062f0e:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 8062f10:	687b      	ldr	r3, [r7, #4]
 8062f12:	6a1b      	ldr	r3, [r3, #32]
 8062f14:	f1a3 0220 	sub.w	r2, r3, #32
 8062f18:	687b      	ldr	r3, [r7, #4]
 8062f1a:	621a      	str	r2, [r3, #32]
  }
}
 8062f1c:	bf00      	nop
 8062f1e:	3718      	adds	r7, #24
 8062f20:	46bd      	mov	sp, r7
 8062f22:	bd80      	pop	{r7, pc}

08062f24 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8062f24:	b580      	push	{r7, lr}
 8062f26:	b08a      	sub	sp, #40	@ 0x28
 8062f28:	af00      	add	r7, sp, #0
 8062f2a:	60f8      	str	r0, [r7, #12]
 8062f2c:	60b9      	str	r1, [r7, #8]
 8062f2e:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8062f30:	2300      	movs	r3, #0
 8062f32:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8062f34:	2300      	movs	r3, #0
 8062f36:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8062f38:	68bb      	ldr	r3, [r7, #8]
 8062f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8062f3e:	d004      	beq.n	8062f4a <MMC_PwrClassUpdate+0x26>
 8062f40:	68bb      	ldr	r3, [r7, #8]
 8062f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8062f46:	f040 8085 	bne.w	8063054 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8062f4a:	2300      	movs	r3, #0
 8062f4c:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8062f4e:	f107 0114 	add.w	r1, r7, #20
 8062f52:	f04f 33ff 	mov.w	r3, #4294967295
 8062f56:	22bb      	movs	r2, #187	@ 0xbb
 8062f58:	68f8      	ldr	r0, [r7, #12]
 8062f5a:	f7ff fe5f 	bl	8062c1c <MMC_ReadExtCSD>
 8062f5e:	4603      	mov	r3, r0
 8062f60:	2b00      	cmp	r3, #0
 8062f62:	d003      	beq.n	8062f6c <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8062f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8062f68:	61fb      	str	r3, [r7, #28]
 8062f6a:	e002      	b.n	8062f72 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8062f6c:	697b      	ldr	r3, [r7, #20]
 8062f6e:	0e1b      	lsrs	r3, r3, #24
 8062f70:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8062f72:	687b      	ldr	r3, [r7, #4]
 8062f74:	2b04      	cmp	r3, #4
 8062f76:	d105      	bne.n	8062f84 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8062f78:	68fb      	ldr	r3, [r7, #12]
 8062f7a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8062f7e:	0e1b      	lsrs	r3, r3, #24
 8062f80:	61bb      	str	r3, [r7, #24]
 8062f82:	e00e      	b.n	8062fa2 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8062f84:	687b      	ldr	r3, [r7, #4]
 8062f86:	2b02      	cmp	r3, #2
 8062f88:	d106      	bne.n	8062f98 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8062f8a:	68fb      	ldr	r3, [r7, #12]
 8062f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8062f90:	0c1b      	lsrs	r3, r3, #16
 8062f92:	b2db      	uxtb	r3, r3
 8062f94:	61bb      	str	r3, [r7, #24]
 8062f96:	e004      	b.n	8062fa2 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8062f98:	68fb      	ldr	r3, [r7, #12]
 8062f9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8062f9e:	0e1b      	lsrs	r3, r3, #24
 8062fa0:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8062fa2:	69fb      	ldr	r3, [r7, #28]
 8062fa4:	2b00      	cmp	r3, #0
 8062fa6:	d155      	bne.n	8063054 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8062fa8:	68bb      	ldr	r3, [r7, #8]
 8062faa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8062fae:	d102      	bne.n	8062fb6 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8062fb0:	69bb      	ldr	r3, [r7, #24]
 8062fb2:	091b      	lsrs	r3, r3, #4
 8062fb4:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8062fb6:	697a      	ldr	r2, [r7, #20]
 8062fb8:	69bb      	ldr	r3, [r7, #24]
 8062fba:	4053      	eors	r3, r2
 8062fbc:	f003 030f 	and.w	r3, r3, #15
 8062fc0:	2b00      	cmp	r3, #0
 8062fc2:	d047      	beq.n	8063054 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8062fc4:	68fb      	ldr	r3, [r7, #12]
 8062fc6:	6818      	ldr	r0, [r3, #0]
 8062fc8:	69bb      	ldr	r3, [r7, #24]
 8062fca:	021b      	lsls	r3, r3, #8
 8062fcc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8062fd0:	4b23      	ldr	r3, [pc, #140]	@ (8063060 <MMC_PwrClassUpdate+0x13c>)
 8062fd2:	4313      	orrs	r3, r2
 8062fd4:	4619      	mov	r1, r3
 8062fd6:	f005 fc2b 	bl	8068830 <SDMMC_CmdSwitch>
 8062fda:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8062fdc:	69fb      	ldr	r3, [r7, #28]
 8062fde:	2b00      	cmp	r3, #0
 8062fe0:	d138      	bne.n	8063054 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8062fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8062fe6:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8062fe8:	68fb      	ldr	r3, [r7, #12]
 8062fea:	681a      	ldr	r2, [r3, #0]
 8062fec:	68fb      	ldr	r3, [r7, #12]
 8062fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062ff0:	041b      	lsls	r3, r3, #16
 8062ff2:	4619      	mov	r1, r3
 8062ff4:	4610      	mov	r0, r2
 8062ff6:	f005 fbd8 	bl	80687aa <SDMMC_CmdSendStatus>
 8062ffa:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8062ffc:	69fb      	ldr	r3, [r7, #28]
 8062ffe:	2b00      	cmp	r3, #0
 8063000:	d112      	bne.n	8063028 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8063002:	68fb      	ldr	r3, [r7, #12]
 8063004:	681b      	ldr	r3, [r3, #0]
 8063006:	2100      	movs	r1, #0
 8063008:	4618      	mov	r0, r3
 806300a:	f005 f9fe 	bl	806840a <SDMMC_GetResponse>
 806300e:	6238      	str	r0, [r7, #32]
            count--;
 8063010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063012:	3b01      	subs	r3, #1
 8063014:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8063016:	6a3b      	ldr	r3, [r7, #32]
 8063018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806301c:	2b00      	cmp	r3, #0
 806301e:	d104      	bne.n	806302a <MMC_PwrClassUpdate+0x106>
 8063020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063022:	2b00      	cmp	r3, #0
 8063024:	d1e0      	bne.n	8062fe8 <MMC_PwrClassUpdate+0xc4>
 8063026:	e000      	b.n	806302a <MMC_PwrClassUpdate+0x106>
              break;
 8063028:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 806302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806302c:	2b00      	cmp	r3, #0
 806302e:	d00b      	beq.n	8063048 <MMC_PwrClassUpdate+0x124>
 8063030:	69fb      	ldr	r3, [r7, #28]
 8063032:	2b00      	cmp	r3, #0
 8063034:	d108      	bne.n	8063048 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8063036:	6a3b      	ldr	r3, [r7, #32]
 8063038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806303c:	2b00      	cmp	r3, #0
 806303e:	d009      	beq.n	8063054 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8063040:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8063044:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8063046:	e005      	b.n	8063054 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8063048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806304a:	2b00      	cmp	r3, #0
 806304c:	d102      	bne.n	8063054 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 806304e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8063052:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8063054:	69fb      	ldr	r3, [r7, #28]
}
 8063056:	4618      	mov	r0, r3
 8063058:	3728      	adds	r7, #40	@ 0x28
 806305a:	46bd      	mov	sp, r7
 806305c:	bd80      	pop	{r7, pc}
 806305e:	bf00      	nop
 8063060:	03bb0000 	.word	0x03bb0000

08063064 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8063064:	b480      	push	{r7}
 8063066:	b083      	sub	sp, #12
 8063068:	af00      	add	r7, sp, #0
 806306a:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 806306c:	bf00      	nop
 806306e:	370c      	adds	r7, #12
 8063070:	46bd      	mov	sp, r7
 8063072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063076:	4770      	bx	lr

08063078 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8063078:	b480      	push	{r7}
 806307a:	b083      	sub	sp, #12
 806307c:	af00      	add	r7, sp, #0
 806307e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8063080:	bf00      	nop
 8063082:	370c      	adds	r7, #12
 8063084:	46bd      	mov	sp, r7
 8063086:	f85d 7b04 	ldr.w	r7, [sp], #4
 806308a:	4770      	bx	lr

0806308c <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 806308c:	b480      	push	{r7}
 806308e:	b083      	sub	sp, #12
 8063090:	af00      	add	r7, sp, #0
 8063092:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8063094:	bf00      	nop
 8063096:	370c      	adds	r7, #12
 8063098:	46bd      	mov	sp, r7
 806309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806309e:	4770      	bx	lr

080630a0 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 80630a0:	b480      	push	{r7}
 80630a2:	b083      	sub	sp, #12
 80630a4:	af00      	add	r7, sp, #0
 80630a6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80630a8:	bf00      	nop
 80630aa:	370c      	adds	r7, #12
 80630ac:	46bd      	mov	sp, r7
 80630ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630b2:	4770      	bx	lr

080630b4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80630b4:	b580      	push	{r7, lr}
 80630b6:	b084      	sub	sp, #16
 80630b8:	af00      	add	r7, sp, #0
 80630ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80630bc:	4b29      	ldr	r3, [pc, #164]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 80630be:	68db      	ldr	r3, [r3, #12]
 80630c0:	f003 0307 	and.w	r3, r3, #7
 80630c4:	2b06      	cmp	r3, #6
 80630c6:	d00a      	beq.n	80630de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80630c8:	4b26      	ldr	r3, [pc, #152]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 80630ca:	68db      	ldr	r3, [r3, #12]
 80630cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80630d0:	687a      	ldr	r2, [r7, #4]
 80630d2:	429a      	cmp	r2, r3
 80630d4:	d001      	beq.n	80630da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80630d6:	2301      	movs	r3, #1
 80630d8:	e040      	b.n	806315c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80630da:	2300      	movs	r3, #0
 80630dc:	e03e      	b.n	806315c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80630de:	4b21      	ldr	r3, [pc, #132]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 80630e0:	68db      	ldr	r3, [r3, #12]
 80630e2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80630e6:	491f      	ldr	r1, [pc, #124]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 80630e8:	687b      	ldr	r3, [r7, #4]
 80630ea:	4313      	orrs	r3, r2
 80630ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80630ee:	f7fd f9cd 	bl	806048c <HAL_GetTick>
 80630f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80630f4:	e009      	b.n	806310a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80630f6:	f7fd f9c9 	bl	806048c <HAL_GetTick>
 80630fa:	4602      	mov	r2, r0
 80630fc:	68fb      	ldr	r3, [r7, #12]
 80630fe:	1ad3      	subs	r3, r2, r3
 8063100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8063104:	d901      	bls.n	806310a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8063106:	2301      	movs	r3, #1
 8063108:	e028      	b.n	806315c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 806310a:	4b16      	ldr	r3, [pc, #88]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 806310c:	685b      	ldr	r3, [r3, #4]
 806310e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8063112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8063116:	d1ee      	bne.n	80630f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8063118:	687b      	ldr	r3, [r7, #4]
 806311a:	2b1e      	cmp	r3, #30
 806311c:	d008      	beq.n	8063130 <HAL_PWREx_ConfigSupply+0x7c>
 806311e:	687b      	ldr	r3, [r7, #4]
 8063120:	2b2e      	cmp	r3, #46	@ 0x2e
 8063122:	d005      	beq.n	8063130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8063124:	687b      	ldr	r3, [r7, #4]
 8063126:	2b1d      	cmp	r3, #29
 8063128:	d002      	beq.n	8063130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 806312a:	687b      	ldr	r3, [r7, #4]
 806312c:	2b2d      	cmp	r3, #45	@ 0x2d
 806312e:	d114      	bne.n	806315a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8063130:	f7fd f9ac 	bl	806048c <HAL_GetTick>
 8063134:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8063136:	e009      	b.n	806314c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8063138:	f7fd f9a8 	bl	806048c <HAL_GetTick>
 806313c:	4602      	mov	r2, r0
 806313e:	68fb      	ldr	r3, [r7, #12]
 8063140:	1ad3      	subs	r3, r2, r3
 8063142:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8063146:	d901      	bls.n	806314c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8063148:	2301      	movs	r3, #1
 806314a:	e007      	b.n	806315c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 806314c:	4b05      	ldr	r3, [pc, #20]	@ (8063164 <HAL_PWREx_ConfigSupply+0xb0>)
 806314e:	68db      	ldr	r3, [r3, #12]
 8063150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8063154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8063158:	d1ee      	bne.n	8063138 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 806315a:	2300      	movs	r3, #0
}
 806315c:	4618      	mov	r0, r3
 806315e:	3710      	adds	r7, #16
 8063160:	46bd      	mov	sp, r7
 8063162:	bd80      	pop	{r7, pc}
 8063164:	58024800 	.word	0x58024800

08063168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8063168:	b580      	push	{r7, lr}
 806316a:	b08c      	sub	sp, #48	@ 0x30
 806316c:	af00      	add	r7, sp, #0
 806316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8063170:	687b      	ldr	r3, [r7, #4]
 8063172:	2b00      	cmp	r3, #0
 8063174:	d102      	bne.n	806317c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8063176:	2301      	movs	r3, #1
 8063178:	f000 bc48 	b.w	8063a0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 806317c:	687b      	ldr	r3, [r7, #4]
 806317e:	681b      	ldr	r3, [r3, #0]
 8063180:	f003 0301 	and.w	r3, r3, #1
 8063184:	2b00      	cmp	r3, #0
 8063186:	f000 8088 	beq.w	806329a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 806318a:	4b99      	ldr	r3, [pc, #612]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806318c:	691b      	ldr	r3, [r3, #16]
 806318e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8063192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8063194:	4b96      	ldr	r3, [pc, #600]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063198:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 806319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806319c:	2b10      	cmp	r3, #16
 806319e:	d007      	beq.n	80631b0 <HAL_RCC_OscConfig+0x48>
 80631a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80631a2:	2b18      	cmp	r3, #24
 80631a4:	d111      	bne.n	80631ca <HAL_RCC_OscConfig+0x62>
 80631a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80631a8:	f003 0303 	and.w	r3, r3, #3
 80631ac:	2b02      	cmp	r3, #2
 80631ae:	d10c      	bne.n	80631ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80631b0:	4b8f      	ldr	r3, [pc, #572]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631b2:	681b      	ldr	r3, [r3, #0]
 80631b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80631b8:	2b00      	cmp	r3, #0
 80631ba:	d06d      	beq.n	8063298 <HAL_RCC_OscConfig+0x130>
 80631bc:	687b      	ldr	r3, [r7, #4]
 80631be:	685b      	ldr	r3, [r3, #4]
 80631c0:	2b00      	cmp	r3, #0
 80631c2:	d169      	bne.n	8063298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80631c4:	2301      	movs	r3, #1
 80631c6:	f000 bc21 	b.w	8063a0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80631ca:	687b      	ldr	r3, [r7, #4]
 80631cc:	685b      	ldr	r3, [r3, #4]
 80631ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80631d2:	d106      	bne.n	80631e2 <HAL_RCC_OscConfig+0x7a>
 80631d4:	4b86      	ldr	r3, [pc, #536]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631d6:	681b      	ldr	r3, [r3, #0]
 80631d8:	4a85      	ldr	r2, [pc, #532]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80631de:	6013      	str	r3, [r2, #0]
 80631e0:	e02e      	b.n	8063240 <HAL_RCC_OscConfig+0xd8>
 80631e2:	687b      	ldr	r3, [r7, #4]
 80631e4:	685b      	ldr	r3, [r3, #4]
 80631e6:	2b00      	cmp	r3, #0
 80631e8:	d10c      	bne.n	8063204 <HAL_RCC_OscConfig+0x9c>
 80631ea:	4b81      	ldr	r3, [pc, #516]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631ec:	681b      	ldr	r3, [r3, #0]
 80631ee:	4a80      	ldr	r2, [pc, #512]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80631f4:	6013      	str	r3, [r2, #0]
 80631f6:	4b7e      	ldr	r3, [pc, #504]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631f8:	681b      	ldr	r3, [r3, #0]
 80631fa:	4a7d      	ldr	r2, [pc, #500]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80631fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8063200:	6013      	str	r3, [r2, #0]
 8063202:	e01d      	b.n	8063240 <HAL_RCC_OscConfig+0xd8>
 8063204:	687b      	ldr	r3, [r7, #4]
 8063206:	685b      	ldr	r3, [r3, #4]
 8063208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 806320c:	d10c      	bne.n	8063228 <HAL_RCC_OscConfig+0xc0>
 806320e:	4b78      	ldr	r3, [pc, #480]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063210:	681b      	ldr	r3, [r3, #0]
 8063212:	4a77      	ldr	r2, [pc, #476]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8063218:	6013      	str	r3, [r2, #0]
 806321a:	4b75      	ldr	r3, [pc, #468]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806321c:	681b      	ldr	r3, [r3, #0]
 806321e:	4a74      	ldr	r2, [pc, #464]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8063224:	6013      	str	r3, [r2, #0]
 8063226:	e00b      	b.n	8063240 <HAL_RCC_OscConfig+0xd8>
 8063228:	4b71      	ldr	r3, [pc, #452]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806322a:	681b      	ldr	r3, [r3, #0]
 806322c:	4a70      	ldr	r2, [pc, #448]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806322e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8063232:	6013      	str	r3, [r2, #0]
 8063234:	4b6e      	ldr	r3, [pc, #440]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063236:	681b      	ldr	r3, [r3, #0]
 8063238:	4a6d      	ldr	r2, [pc, #436]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806323a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 806323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8063240:	687b      	ldr	r3, [r7, #4]
 8063242:	685b      	ldr	r3, [r3, #4]
 8063244:	2b00      	cmp	r3, #0
 8063246:	d013      	beq.n	8063270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8063248:	f7fd f920 	bl	806048c <HAL_GetTick>
 806324c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 806324e:	e008      	b.n	8063262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8063250:	f7fd f91c 	bl	806048c <HAL_GetTick>
 8063254:	4602      	mov	r2, r0
 8063256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063258:	1ad3      	subs	r3, r2, r3
 806325a:	2b64      	cmp	r3, #100	@ 0x64
 806325c:	d901      	bls.n	8063262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 806325e:	2303      	movs	r3, #3
 8063260:	e3d4      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8063262:	4b63      	ldr	r3, [pc, #396]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063264:	681b      	ldr	r3, [r3, #0]
 8063266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 806326a:	2b00      	cmp	r3, #0
 806326c:	d0f0      	beq.n	8063250 <HAL_RCC_OscConfig+0xe8>
 806326e:	e014      	b.n	806329a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8063270:	f7fd f90c 	bl	806048c <HAL_GetTick>
 8063274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8063276:	e008      	b.n	806328a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8063278:	f7fd f908 	bl	806048c <HAL_GetTick>
 806327c:	4602      	mov	r2, r0
 806327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063280:	1ad3      	subs	r3, r2, r3
 8063282:	2b64      	cmp	r3, #100	@ 0x64
 8063284:	d901      	bls.n	806328a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8063286:	2303      	movs	r3, #3
 8063288:	e3c0      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 806328a:	4b59      	ldr	r3, [pc, #356]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806328c:	681b      	ldr	r3, [r3, #0]
 806328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8063292:	2b00      	cmp	r3, #0
 8063294:	d1f0      	bne.n	8063278 <HAL_RCC_OscConfig+0x110>
 8063296:	e000      	b.n	806329a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8063298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 806329a:	687b      	ldr	r3, [r7, #4]
 806329c:	681b      	ldr	r3, [r3, #0]
 806329e:	f003 0302 	and.w	r3, r3, #2
 80632a2:	2b00      	cmp	r3, #0
 80632a4:	f000 80ca 	beq.w	806343c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80632a8:	4b51      	ldr	r3, [pc, #324]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80632aa:	691b      	ldr	r3, [r3, #16]
 80632ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80632b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80632b2:	4b4f      	ldr	r3, [pc, #316]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80632b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80632b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80632b8:	6a3b      	ldr	r3, [r7, #32]
 80632ba:	2b00      	cmp	r3, #0
 80632bc:	d007      	beq.n	80632ce <HAL_RCC_OscConfig+0x166>
 80632be:	6a3b      	ldr	r3, [r7, #32]
 80632c0:	2b18      	cmp	r3, #24
 80632c2:	d156      	bne.n	8063372 <HAL_RCC_OscConfig+0x20a>
 80632c4:	69fb      	ldr	r3, [r7, #28]
 80632c6:	f003 0303 	and.w	r3, r3, #3
 80632ca:	2b00      	cmp	r3, #0
 80632cc:	d151      	bne.n	8063372 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80632ce:	4b48      	ldr	r3, [pc, #288]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80632d0:	681b      	ldr	r3, [r3, #0]
 80632d2:	f003 0304 	and.w	r3, r3, #4
 80632d6:	2b00      	cmp	r3, #0
 80632d8:	d005      	beq.n	80632e6 <HAL_RCC_OscConfig+0x17e>
 80632da:	687b      	ldr	r3, [r7, #4]
 80632dc:	68db      	ldr	r3, [r3, #12]
 80632de:	2b00      	cmp	r3, #0
 80632e0:	d101      	bne.n	80632e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80632e2:	2301      	movs	r3, #1
 80632e4:	e392      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80632e6:	4b42      	ldr	r3, [pc, #264]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80632e8:	681b      	ldr	r3, [r3, #0]
 80632ea:	f023 0219 	bic.w	r2, r3, #25
 80632ee:	687b      	ldr	r3, [r7, #4]
 80632f0:	68db      	ldr	r3, [r3, #12]
 80632f2:	493f      	ldr	r1, [pc, #252]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80632f4:	4313      	orrs	r3, r2
 80632f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80632f8:	f7fd f8c8 	bl	806048c <HAL_GetTick>
 80632fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80632fe:	e008      	b.n	8063312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8063300:	f7fd f8c4 	bl	806048c <HAL_GetTick>
 8063304:	4602      	mov	r2, r0
 8063306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063308:	1ad3      	subs	r3, r2, r3
 806330a:	2b02      	cmp	r3, #2
 806330c:	d901      	bls.n	8063312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 806330e:	2303      	movs	r3, #3
 8063310:	e37c      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8063312:	4b37      	ldr	r3, [pc, #220]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063314:	681b      	ldr	r3, [r3, #0]
 8063316:	f003 0304 	and.w	r3, r3, #4
 806331a:	2b00      	cmp	r3, #0
 806331c:	d0f0      	beq.n	8063300 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 806331e:	f7fd f8e5 	bl	80604ec <HAL_GetREVID>
 8063322:	4603      	mov	r3, r0
 8063324:	f241 0203 	movw	r2, #4099	@ 0x1003
 8063328:	4293      	cmp	r3, r2
 806332a:	d817      	bhi.n	806335c <HAL_RCC_OscConfig+0x1f4>
 806332c:	687b      	ldr	r3, [r7, #4]
 806332e:	691b      	ldr	r3, [r3, #16]
 8063330:	2b40      	cmp	r3, #64	@ 0x40
 8063332:	d108      	bne.n	8063346 <HAL_RCC_OscConfig+0x1de>
 8063334:	4b2e      	ldr	r3, [pc, #184]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063336:	685b      	ldr	r3, [r3, #4]
 8063338:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 806333c:	4a2c      	ldr	r2, [pc, #176]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806333e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8063342:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8063344:	e07a      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8063346:	4b2a      	ldr	r3, [pc, #168]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063348:	685b      	ldr	r3, [r3, #4]
 806334a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 806334e:	687b      	ldr	r3, [r7, #4]
 8063350:	691b      	ldr	r3, [r3, #16]
 8063352:	031b      	lsls	r3, r3, #12
 8063354:	4926      	ldr	r1, [pc, #152]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063356:	4313      	orrs	r3, r2
 8063358:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 806335a:	e06f      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 806335c:	4b24      	ldr	r3, [pc, #144]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806335e:	685b      	ldr	r3, [r3, #4]
 8063360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8063364:	687b      	ldr	r3, [r7, #4]
 8063366:	691b      	ldr	r3, [r3, #16]
 8063368:	061b      	lsls	r3, r3, #24
 806336a:	4921      	ldr	r1, [pc, #132]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806336c:	4313      	orrs	r3, r2
 806336e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8063370:	e064      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8063372:	687b      	ldr	r3, [r7, #4]
 8063374:	68db      	ldr	r3, [r3, #12]
 8063376:	2b00      	cmp	r3, #0
 8063378:	d047      	beq.n	806340a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 806337a:	4b1d      	ldr	r3, [pc, #116]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 806337c:	681b      	ldr	r3, [r3, #0]
 806337e:	f023 0219 	bic.w	r2, r3, #25
 8063382:	687b      	ldr	r3, [r7, #4]
 8063384:	68db      	ldr	r3, [r3, #12]
 8063386:	491a      	ldr	r1, [pc, #104]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 8063388:	4313      	orrs	r3, r2
 806338a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806338c:	f7fd f87e 	bl	806048c <HAL_GetTick>
 8063390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8063392:	e008      	b.n	80633a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8063394:	f7fd f87a 	bl	806048c <HAL_GetTick>
 8063398:	4602      	mov	r2, r0
 806339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806339c:	1ad3      	subs	r3, r2, r3
 806339e:	2b02      	cmp	r3, #2
 80633a0:	d901      	bls.n	80633a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80633a2:	2303      	movs	r3, #3
 80633a4:	e332      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80633a6:	4b12      	ldr	r3, [pc, #72]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80633a8:	681b      	ldr	r3, [r3, #0]
 80633aa:	f003 0304 	and.w	r3, r3, #4
 80633ae:	2b00      	cmp	r3, #0
 80633b0:	d0f0      	beq.n	8063394 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80633b2:	f7fd f89b 	bl	80604ec <HAL_GetREVID>
 80633b6:	4603      	mov	r3, r0
 80633b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80633bc:	4293      	cmp	r3, r2
 80633be:	d819      	bhi.n	80633f4 <HAL_RCC_OscConfig+0x28c>
 80633c0:	687b      	ldr	r3, [r7, #4]
 80633c2:	691b      	ldr	r3, [r3, #16]
 80633c4:	2b40      	cmp	r3, #64	@ 0x40
 80633c6:	d108      	bne.n	80633da <HAL_RCC_OscConfig+0x272>
 80633c8:	4b09      	ldr	r3, [pc, #36]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80633ca:	685b      	ldr	r3, [r3, #4]
 80633cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80633d0:	4a07      	ldr	r2, [pc, #28]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80633d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80633d6:	6053      	str	r3, [r2, #4]
 80633d8:	e030      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
 80633da:	4b05      	ldr	r3, [pc, #20]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80633dc:	685b      	ldr	r3, [r3, #4]
 80633de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80633e2:	687b      	ldr	r3, [r7, #4]
 80633e4:	691b      	ldr	r3, [r3, #16]
 80633e6:	031b      	lsls	r3, r3, #12
 80633e8:	4901      	ldr	r1, [pc, #4]	@ (80633f0 <HAL_RCC_OscConfig+0x288>)
 80633ea:	4313      	orrs	r3, r2
 80633ec:	604b      	str	r3, [r1, #4]
 80633ee:	e025      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
 80633f0:	58024400 	.word	0x58024400
 80633f4:	4b9a      	ldr	r3, [pc, #616]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80633f6:	685b      	ldr	r3, [r3, #4]
 80633f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80633fc:	687b      	ldr	r3, [r7, #4]
 80633fe:	691b      	ldr	r3, [r3, #16]
 8063400:	061b      	lsls	r3, r3, #24
 8063402:	4997      	ldr	r1, [pc, #604]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063404:	4313      	orrs	r3, r2
 8063406:	604b      	str	r3, [r1, #4]
 8063408:	e018      	b.n	806343c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 806340a:	4b95      	ldr	r3, [pc, #596]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806340c:	681b      	ldr	r3, [r3, #0]
 806340e:	4a94      	ldr	r2, [pc, #592]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063410:	f023 0301 	bic.w	r3, r3, #1
 8063414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8063416:	f7fd f839 	bl	806048c <HAL_GetTick>
 806341a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 806341c:	e008      	b.n	8063430 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 806341e:	f7fd f835 	bl	806048c <HAL_GetTick>
 8063422:	4602      	mov	r2, r0
 8063424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063426:	1ad3      	subs	r3, r2, r3
 8063428:	2b02      	cmp	r3, #2
 806342a:	d901      	bls.n	8063430 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 806342c:	2303      	movs	r3, #3
 806342e:	e2ed      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8063430:	4b8b      	ldr	r3, [pc, #556]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063432:	681b      	ldr	r3, [r3, #0]
 8063434:	f003 0304 	and.w	r3, r3, #4
 8063438:	2b00      	cmp	r3, #0
 806343a:	d1f0      	bne.n	806341e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 806343c:	687b      	ldr	r3, [r7, #4]
 806343e:	681b      	ldr	r3, [r3, #0]
 8063440:	f003 0310 	and.w	r3, r3, #16
 8063444:	2b00      	cmp	r3, #0
 8063446:	f000 80a9 	beq.w	806359c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 806344a:	4b85      	ldr	r3, [pc, #532]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806344c:	691b      	ldr	r3, [r3, #16]
 806344e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8063452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8063454:	4b82      	ldr	r3, [pc, #520]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063458:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 806345a:	69bb      	ldr	r3, [r7, #24]
 806345c:	2b08      	cmp	r3, #8
 806345e:	d007      	beq.n	8063470 <HAL_RCC_OscConfig+0x308>
 8063460:	69bb      	ldr	r3, [r7, #24]
 8063462:	2b18      	cmp	r3, #24
 8063464:	d13a      	bne.n	80634dc <HAL_RCC_OscConfig+0x374>
 8063466:	697b      	ldr	r3, [r7, #20]
 8063468:	f003 0303 	and.w	r3, r3, #3
 806346c:	2b01      	cmp	r3, #1
 806346e:	d135      	bne.n	80634dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8063470:	4b7b      	ldr	r3, [pc, #492]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063472:	681b      	ldr	r3, [r3, #0]
 8063474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8063478:	2b00      	cmp	r3, #0
 806347a:	d005      	beq.n	8063488 <HAL_RCC_OscConfig+0x320>
 806347c:	687b      	ldr	r3, [r7, #4]
 806347e:	69db      	ldr	r3, [r3, #28]
 8063480:	2b80      	cmp	r3, #128	@ 0x80
 8063482:	d001      	beq.n	8063488 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8063484:	2301      	movs	r3, #1
 8063486:	e2c1      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8063488:	f7fd f830 	bl	80604ec <HAL_GetREVID>
 806348c:	4603      	mov	r3, r0
 806348e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8063492:	4293      	cmp	r3, r2
 8063494:	d817      	bhi.n	80634c6 <HAL_RCC_OscConfig+0x35e>
 8063496:	687b      	ldr	r3, [r7, #4]
 8063498:	6a1b      	ldr	r3, [r3, #32]
 806349a:	2b20      	cmp	r3, #32
 806349c:	d108      	bne.n	80634b0 <HAL_RCC_OscConfig+0x348>
 806349e:	4b70      	ldr	r3, [pc, #448]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634a0:	685b      	ldr	r3, [r3, #4]
 80634a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80634a6:	4a6e      	ldr	r2, [pc, #440]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80634ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80634ae:	e075      	b.n	806359c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80634b0:	4b6b      	ldr	r3, [pc, #428]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634b2:	685b      	ldr	r3, [r3, #4]
 80634b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80634b8:	687b      	ldr	r3, [r7, #4]
 80634ba:	6a1b      	ldr	r3, [r3, #32]
 80634bc:	069b      	lsls	r3, r3, #26
 80634be:	4968      	ldr	r1, [pc, #416]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634c0:	4313      	orrs	r3, r2
 80634c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80634c4:	e06a      	b.n	806359c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80634c6:	4b66      	ldr	r3, [pc, #408]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634c8:	68db      	ldr	r3, [r3, #12]
 80634ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80634ce:	687b      	ldr	r3, [r7, #4]
 80634d0:	6a1b      	ldr	r3, [r3, #32]
 80634d2:	061b      	lsls	r3, r3, #24
 80634d4:	4962      	ldr	r1, [pc, #392]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634d6:	4313      	orrs	r3, r2
 80634d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80634da:	e05f      	b.n	806359c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80634dc:	687b      	ldr	r3, [r7, #4]
 80634de:	69db      	ldr	r3, [r3, #28]
 80634e0:	2b00      	cmp	r3, #0
 80634e2:	d042      	beq.n	806356a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80634e4:	4b5e      	ldr	r3, [pc, #376]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634e6:	681b      	ldr	r3, [r3, #0]
 80634e8:	4a5d      	ldr	r2, [pc, #372]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80634ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80634ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80634f0:	f7fc ffcc 	bl	806048c <HAL_GetTick>
 80634f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80634f6:	e008      	b.n	806350a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80634f8:	f7fc ffc8 	bl	806048c <HAL_GetTick>
 80634fc:	4602      	mov	r2, r0
 80634fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063500:	1ad3      	subs	r3, r2, r3
 8063502:	2b02      	cmp	r3, #2
 8063504:	d901      	bls.n	806350a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8063506:	2303      	movs	r3, #3
 8063508:	e280      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 806350a:	4b55      	ldr	r3, [pc, #340]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806350c:	681b      	ldr	r3, [r3, #0]
 806350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8063512:	2b00      	cmp	r3, #0
 8063514:	d0f0      	beq.n	80634f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8063516:	f7fc ffe9 	bl	80604ec <HAL_GetREVID>
 806351a:	4603      	mov	r3, r0
 806351c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8063520:	4293      	cmp	r3, r2
 8063522:	d817      	bhi.n	8063554 <HAL_RCC_OscConfig+0x3ec>
 8063524:	687b      	ldr	r3, [r7, #4]
 8063526:	6a1b      	ldr	r3, [r3, #32]
 8063528:	2b20      	cmp	r3, #32
 806352a:	d108      	bne.n	806353e <HAL_RCC_OscConfig+0x3d6>
 806352c:	4b4c      	ldr	r3, [pc, #304]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806352e:	685b      	ldr	r3, [r3, #4]
 8063530:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8063534:	4a4a      	ldr	r2, [pc, #296]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063536:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 806353a:	6053      	str	r3, [r2, #4]
 806353c:	e02e      	b.n	806359c <HAL_RCC_OscConfig+0x434>
 806353e:	4b48      	ldr	r3, [pc, #288]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063540:	685b      	ldr	r3, [r3, #4]
 8063542:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8063546:	687b      	ldr	r3, [r7, #4]
 8063548:	6a1b      	ldr	r3, [r3, #32]
 806354a:	069b      	lsls	r3, r3, #26
 806354c:	4944      	ldr	r1, [pc, #272]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806354e:	4313      	orrs	r3, r2
 8063550:	604b      	str	r3, [r1, #4]
 8063552:	e023      	b.n	806359c <HAL_RCC_OscConfig+0x434>
 8063554:	4b42      	ldr	r3, [pc, #264]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063556:	68db      	ldr	r3, [r3, #12]
 8063558:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 806355c:	687b      	ldr	r3, [r7, #4]
 806355e:	6a1b      	ldr	r3, [r3, #32]
 8063560:	061b      	lsls	r3, r3, #24
 8063562:	493f      	ldr	r1, [pc, #252]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063564:	4313      	orrs	r3, r2
 8063566:	60cb      	str	r3, [r1, #12]
 8063568:	e018      	b.n	806359c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 806356a:	4b3d      	ldr	r3, [pc, #244]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806356c:	681b      	ldr	r3, [r3, #0]
 806356e:	4a3c      	ldr	r2, [pc, #240]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8063574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8063576:	f7fc ff89 	bl	806048c <HAL_GetTick>
 806357a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 806357c:	e008      	b.n	8063590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 806357e:	f7fc ff85 	bl	806048c <HAL_GetTick>
 8063582:	4602      	mov	r2, r0
 8063584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063586:	1ad3      	subs	r3, r2, r3
 8063588:	2b02      	cmp	r3, #2
 806358a:	d901      	bls.n	8063590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 806358c:	2303      	movs	r3, #3
 806358e:	e23d      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8063590:	4b33      	ldr	r3, [pc, #204]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063592:	681b      	ldr	r3, [r3, #0]
 8063594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8063598:	2b00      	cmp	r3, #0
 806359a:	d1f0      	bne.n	806357e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 806359c:	687b      	ldr	r3, [r7, #4]
 806359e:	681b      	ldr	r3, [r3, #0]
 80635a0:	f003 0308 	and.w	r3, r3, #8
 80635a4:	2b00      	cmp	r3, #0
 80635a6:	d036      	beq.n	8063616 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80635a8:	687b      	ldr	r3, [r7, #4]
 80635aa:	695b      	ldr	r3, [r3, #20]
 80635ac:	2b00      	cmp	r3, #0
 80635ae:	d019      	beq.n	80635e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80635b0:	4b2b      	ldr	r3, [pc, #172]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80635b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80635b4:	4a2a      	ldr	r2, [pc, #168]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80635b6:	f043 0301 	orr.w	r3, r3, #1
 80635ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80635bc:	f7fc ff66 	bl	806048c <HAL_GetTick>
 80635c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80635c2:	e008      	b.n	80635d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80635c4:	f7fc ff62 	bl	806048c <HAL_GetTick>
 80635c8:	4602      	mov	r2, r0
 80635ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80635cc:	1ad3      	subs	r3, r2, r3
 80635ce:	2b02      	cmp	r3, #2
 80635d0:	d901      	bls.n	80635d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80635d2:	2303      	movs	r3, #3
 80635d4:	e21a      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80635d6:	4b22      	ldr	r3, [pc, #136]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80635d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80635da:	f003 0302 	and.w	r3, r3, #2
 80635de:	2b00      	cmp	r3, #0
 80635e0:	d0f0      	beq.n	80635c4 <HAL_RCC_OscConfig+0x45c>
 80635e2:	e018      	b.n	8063616 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80635e4:	4b1e      	ldr	r3, [pc, #120]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80635e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80635e8:	4a1d      	ldr	r2, [pc, #116]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 80635ea:	f023 0301 	bic.w	r3, r3, #1
 80635ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80635f0:	f7fc ff4c 	bl	806048c <HAL_GetTick>
 80635f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80635f6:	e008      	b.n	806360a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80635f8:	f7fc ff48 	bl	806048c <HAL_GetTick>
 80635fc:	4602      	mov	r2, r0
 80635fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063600:	1ad3      	subs	r3, r2, r3
 8063602:	2b02      	cmp	r3, #2
 8063604:	d901      	bls.n	806360a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8063606:	2303      	movs	r3, #3
 8063608:	e200      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 806360a:	4b15      	ldr	r3, [pc, #84]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 806360e:	f003 0302 	and.w	r3, r3, #2
 8063612:	2b00      	cmp	r3, #0
 8063614:	d1f0      	bne.n	80635f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8063616:	687b      	ldr	r3, [r7, #4]
 8063618:	681b      	ldr	r3, [r3, #0]
 806361a:	f003 0320 	and.w	r3, r3, #32
 806361e:	2b00      	cmp	r3, #0
 8063620:	d039      	beq.n	8063696 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8063622:	687b      	ldr	r3, [r7, #4]
 8063624:	699b      	ldr	r3, [r3, #24]
 8063626:	2b00      	cmp	r3, #0
 8063628:	d01c      	beq.n	8063664 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 806362a:	4b0d      	ldr	r3, [pc, #52]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 806362c:	681b      	ldr	r3, [r3, #0]
 806362e:	4a0c      	ldr	r2, [pc, #48]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8063634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8063636:	f7fc ff29 	bl	806048c <HAL_GetTick>
 806363a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 806363c:	e008      	b.n	8063650 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 806363e:	f7fc ff25 	bl	806048c <HAL_GetTick>
 8063642:	4602      	mov	r2, r0
 8063644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063646:	1ad3      	subs	r3, r2, r3
 8063648:	2b02      	cmp	r3, #2
 806364a:	d901      	bls.n	8063650 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 806364c:	2303      	movs	r3, #3
 806364e:	e1dd      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8063650:	4b03      	ldr	r3, [pc, #12]	@ (8063660 <HAL_RCC_OscConfig+0x4f8>)
 8063652:	681b      	ldr	r3, [r3, #0]
 8063654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8063658:	2b00      	cmp	r3, #0
 806365a:	d0f0      	beq.n	806363e <HAL_RCC_OscConfig+0x4d6>
 806365c:	e01b      	b.n	8063696 <HAL_RCC_OscConfig+0x52e>
 806365e:	bf00      	nop
 8063660:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8063664:	4b9b      	ldr	r3, [pc, #620]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063666:	681b      	ldr	r3, [r3, #0]
 8063668:	4a9a      	ldr	r2, [pc, #616]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806366a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 806366e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8063670:	f7fc ff0c 	bl	806048c <HAL_GetTick>
 8063674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8063676:	e008      	b.n	806368a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8063678:	f7fc ff08 	bl	806048c <HAL_GetTick>
 806367c:	4602      	mov	r2, r0
 806367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063680:	1ad3      	subs	r3, r2, r3
 8063682:	2b02      	cmp	r3, #2
 8063684:	d901      	bls.n	806368a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8063686:	2303      	movs	r3, #3
 8063688:	e1c0      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 806368a:	4b92      	ldr	r3, [pc, #584]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806368c:	681b      	ldr	r3, [r3, #0]
 806368e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8063692:	2b00      	cmp	r3, #0
 8063694:	d1f0      	bne.n	8063678 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8063696:	687b      	ldr	r3, [r7, #4]
 8063698:	681b      	ldr	r3, [r3, #0]
 806369a:	f003 0304 	and.w	r3, r3, #4
 806369e:	2b00      	cmp	r3, #0
 80636a0:	f000 8081 	beq.w	80637a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80636a4:	4b8c      	ldr	r3, [pc, #560]	@ (80638d8 <HAL_RCC_OscConfig+0x770>)
 80636a6:	681b      	ldr	r3, [r3, #0]
 80636a8:	4a8b      	ldr	r2, [pc, #556]	@ (80638d8 <HAL_RCC_OscConfig+0x770>)
 80636aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80636ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80636b0:	f7fc feec 	bl	806048c <HAL_GetTick>
 80636b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80636b6:	e008      	b.n	80636ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80636b8:	f7fc fee8 	bl	806048c <HAL_GetTick>
 80636bc:	4602      	mov	r2, r0
 80636be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80636c0:	1ad3      	subs	r3, r2, r3
 80636c2:	2b64      	cmp	r3, #100	@ 0x64
 80636c4:	d901      	bls.n	80636ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80636c6:	2303      	movs	r3, #3
 80636c8:	e1a0      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80636ca:	4b83      	ldr	r3, [pc, #524]	@ (80638d8 <HAL_RCC_OscConfig+0x770>)
 80636cc:	681b      	ldr	r3, [r3, #0]
 80636ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80636d2:	2b00      	cmp	r3, #0
 80636d4:	d0f0      	beq.n	80636b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80636d6:	687b      	ldr	r3, [r7, #4]
 80636d8:	689b      	ldr	r3, [r3, #8]
 80636da:	2b01      	cmp	r3, #1
 80636dc:	d106      	bne.n	80636ec <HAL_RCC_OscConfig+0x584>
 80636de:	4b7d      	ldr	r3, [pc, #500]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80636e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80636e2:	4a7c      	ldr	r2, [pc, #496]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80636e4:	f043 0301 	orr.w	r3, r3, #1
 80636e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80636ea:	e02d      	b.n	8063748 <HAL_RCC_OscConfig+0x5e0>
 80636ec:	687b      	ldr	r3, [r7, #4]
 80636ee:	689b      	ldr	r3, [r3, #8]
 80636f0:	2b00      	cmp	r3, #0
 80636f2:	d10c      	bne.n	806370e <HAL_RCC_OscConfig+0x5a6>
 80636f4:	4b77      	ldr	r3, [pc, #476]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80636f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80636f8:	4a76      	ldr	r2, [pc, #472]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80636fa:	f023 0301 	bic.w	r3, r3, #1
 80636fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8063700:	4b74      	ldr	r3, [pc, #464]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063704:	4a73      	ldr	r2, [pc, #460]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063706:	f023 0304 	bic.w	r3, r3, #4
 806370a:	6713      	str	r3, [r2, #112]	@ 0x70
 806370c:	e01c      	b.n	8063748 <HAL_RCC_OscConfig+0x5e0>
 806370e:	687b      	ldr	r3, [r7, #4]
 8063710:	689b      	ldr	r3, [r3, #8]
 8063712:	2b05      	cmp	r3, #5
 8063714:	d10c      	bne.n	8063730 <HAL_RCC_OscConfig+0x5c8>
 8063716:	4b6f      	ldr	r3, [pc, #444]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806371a:	4a6e      	ldr	r2, [pc, #440]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806371c:	f043 0304 	orr.w	r3, r3, #4
 8063720:	6713      	str	r3, [r2, #112]	@ 0x70
 8063722:	4b6c      	ldr	r3, [pc, #432]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063726:	4a6b      	ldr	r2, [pc, #428]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063728:	f043 0301 	orr.w	r3, r3, #1
 806372c:	6713      	str	r3, [r2, #112]	@ 0x70
 806372e:	e00b      	b.n	8063748 <HAL_RCC_OscConfig+0x5e0>
 8063730:	4b68      	ldr	r3, [pc, #416]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063734:	4a67      	ldr	r2, [pc, #412]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063736:	f023 0301 	bic.w	r3, r3, #1
 806373a:	6713      	str	r3, [r2, #112]	@ 0x70
 806373c:	4b65      	ldr	r3, [pc, #404]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063740:	4a64      	ldr	r2, [pc, #400]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063742:	f023 0304 	bic.w	r3, r3, #4
 8063746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8063748:	687b      	ldr	r3, [r7, #4]
 806374a:	689b      	ldr	r3, [r3, #8]
 806374c:	2b00      	cmp	r3, #0
 806374e:	d015      	beq.n	806377c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8063750:	f7fc fe9c 	bl	806048c <HAL_GetTick>
 8063754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8063756:	e00a      	b.n	806376e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8063758:	f7fc fe98 	bl	806048c <HAL_GetTick>
 806375c:	4602      	mov	r2, r0
 806375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063760:	1ad3      	subs	r3, r2, r3
 8063762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8063766:	4293      	cmp	r3, r2
 8063768:	d901      	bls.n	806376e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 806376a:	2303      	movs	r3, #3
 806376c:	e14e      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 806376e:	4b59      	ldr	r3, [pc, #356]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063772:	f003 0302 	and.w	r3, r3, #2
 8063776:	2b00      	cmp	r3, #0
 8063778:	d0ee      	beq.n	8063758 <HAL_RCC_OscConfig+0x5f0>
 806377a:	e014      	b.n	80637a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 806377c:	f7fc fe86 	bl	806048c <HAL_GetTick>
 8063780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8063782:	e00a      	b.n	806379a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8063784:	f7fc fe82 	bl	806048c <HAL_GetTick>
 8063788:	4602      	mov	r2, r0
 806378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806378c:	1ad3      	subs	r3, r2, r3
 806378e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8063792:	4293      	cmp	r3, r2
 8063794:	d901      	bls.n	806379a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8063796:	2303      	movs	r3, #3
 8063798:	e138      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 806379a:	4b4e      	ldr	r3, [pc, #312]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806379e:	f003 0302 	and.w	r3, r3, #2
 80637a2:	2b00      	cmp	r3, #0
 80637a4:	d1ee      	bne.n	8063784 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80637a6:	687b      	ldr	r3, [r7, #4]
 80637a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80637aa:	2b00      	cmp	r3, #0
 80637ac:	f000 812d 	beq.w	8063a0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80637b0:	4b48      	ldr	r3, [pc, #288]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80637b2:	691b      	ldr	r3, [r3, #16]
 80637b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80637b8:	2b18      	cmp	r3, #24
 80637ba:	f000 80bd 	beq.w	8063938 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80637be:	687b      	ldr	r3, [r7, #4]
 80637c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80637c2:	2b02      	cmp	r3, #2
 80637c4:	f040 809e 	bne.w	8063904 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80637c8:	4b42      	ldr	r3, [pc, #264]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80637ca:	681b      	ldr	r3, [r3, #0]
 80637cc:	4a41      	ldr	r2, [pc, #260]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80637ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80637d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80637d4:	f7fc fe5a 	bl	806048c <HAL_GetTick>
 80637d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80637da:	e008      	b.n	80637ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80637dc:	f7fc fe56 	bl	806048c <HAL_GetTick>
 80637e0:	4602      	mov	r2, r0
 80637e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80637e4:	1ad3      	subs	r3, r2, r3
 80637e6:	2b02      	cmp	r3, #2
 80637e8:	d901      	bls.n	80637ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80637ea:	2303      	movs	r3, #3
 80637ec:	e10e      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80637ee:	4b39      	ldr	r3, [pc, #228]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80637f0:	681b      	ldr	r3, [r3, #0]
 80637f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80637f6:	2b00      	cmp	r3, #0
 80637f8:	d1f0      	bne.n	80637dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80637fa:	4b36      	ldr	r3, [pc, #216]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80637fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80637fe:	4b37      	ldr	r3, [pc, #220]	@ (80638dc <HAL_RCC_OscConfig+0x774>)
 8063800:	4013      	ands	r3, r2
 8063802:	687a      	ldr	r2, [r7, #4]
 8063804:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8063806:	687a      	ldr	r2, [r7, #4]
 8063808:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 806380a:	0112      	lsls	r2, r2, #4
 806380c:	430a      	orrs	r2, r1
 806380e:	4931      	ldr	r1, [pc, #196]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063810:	4313      	orrs	r3, r2
 8063812:	628b      	str	r3, [r1, #40]	@ 0x28
 8063814:	687b      	ldr	r3, [r7, #4]
 8063816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063818:	3b01      	subs	r3, #1
 806381a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 806381e:	687b      	ldr	r3, [r7, #4]
 8063820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8063822:	3b01      	subs	r3, #1
 8063824:	025b      	lsls	r3, r3, #9
 8063826:	b29b      	uxth	r3, r3
 8063828:	431a      	orrs	r2, r3
 806382a:	687b      	ldr	r3, [r7, #4]
 806382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806382e:	3b01      	subs	r3, #1
 8063830:	041b      	lsls	r3, r3, #16
 8063832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8063836:	431a      	orrs	r2, r3
 8063838:	687b      	ldr	r3, [r7, #4]
 806383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806383c:	3b01      	subs	r3, #1
 806383e:	061b      	lsls	r3, r3, #24
 8063840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8063844:	4923      	ldr	r1, [pc, #140]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063846:	4313      	orrs	r3, r2
 8063848:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 806384a:	4b22      	ldr	r3, [pc, #136]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806384e:	4a21      	ldr	r2, [pc, #132]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063850:	f023 0301 	bic.w	r3, r3, #1
 8063854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8063856:	4b1f      	ldr	r3, [pc, #124]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 806385a:	4b21      	ldr	r3, [pc, #132]	@ (80638e0 <HAL_RCC_OscConfig+0x778>)
 806385c:	4013      	ands	r3, r2
 806385e:	687a      	ldr	r2, [r7, #4]
 8063860:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8063862:	00d2      	lsls	r2, r2, #3
 8063864:	491b      	ldr	r1, [pc, #108]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063866:	4313      	orrs	r3, r2
 8063868:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 806386a:	4b1a      	ldr	r3, [pc, #104]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806386e:	f023 020c 	bic.w	r2, r3, #12
 8063872:	687b      	ldr	r3, [r7, #4]
 8063874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8063876:	4917      	ldr	r1, [pc, #92]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063878:	4313      	orrs	r3, r2
 806387a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 806387c:	4b15      	ldr	r3, [pc, #84]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063880:	f023 0202 	bic.w	r2, r3, #2
 8063884:	687b      	ldr	r3, [r7, #4]
 8063886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8063888:	4912      	ldr	r1, [pc, #72]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806388a:	4313      	orrs	r3, r2
 806388c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 806388e:	4b11      	ldr	r3, [pc, #68]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063892:	4a10      	ldr	r2, [pc, #64]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 8063894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8063898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 806389a:	4b0e      	ldr	r3, [pc, #56]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 806389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806389e:	4a0d      	ldr	r2, [pc, #52]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80638a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80638a6:	4b0b      	ldr	r3, [pc, #44]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80638aa:	4a0a      	ldr	r2, [pc, #40]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80638b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80638b2:	4b08      	ldr	r3, [pc, #32]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80638b6:	4a07      	ldr	r2, [pc, #28]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638b8:	f043 0301 	orr.w	r3, r3, #1
 80638bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80638be:	4b05      	ldr	r3, [pc, #20]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638c0:	681b      	ldr	r3, [r3, #0]
 80638c2:	4a04      	ldr	r2, [pc, #16]	@ (80638d4 <HAL_RCC_OscConfig+0x76c>)
 80638c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80638c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80638ca:	f7fc fddf 	bl	806048c <HAL_GetTick>
 80638ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80638d0:	e011      	b.n	80638f6 <HAL_RCC_OscConfig+0x78e>
 80638d2:	bf00      	nop
 80638d4:	58024400 	.word	0x58024400
 80638d8:	58024800 	.word	0x58024800
 80638dc:	fffffc0c 	.word	0xfffffc0c
 80638e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80638e4:	f7fc fdd2 	bl	806048c <HAL_GetTick>
 80638e8:	4602      	mov	r2, r0
 80638ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80638ec:	1ad3      	subs	r3, r2, r3
 80638ee:	2b02      	cmp	r3, #2
 80638f0:	d901      	bls.n	80638f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80638f2:	2303      	movs	r3, #3
 80638f4:	e08a      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80638f6:	4b47      	ldr	r3, [pc, #284]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80638f8:	681b      	ldr	r3, [r3, #0]
 80638fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80638fe:	2b00      	cmp	r3, #0
 8063900:	d0f0      	beq.n	80638e4 <HAL_RCC_OscConfig+0x77c>
 8063902:	e082      	b.n	8063a0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8063904:	4b43      	ldr	r3, [pc, #268]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 8063906:	681b      	ldr	r3, [r3, #0]
 8063908:	4a42      	ldr	r2, [pc, #264]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 806390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 806390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8063910:	f7fc fdbc 	bl	806048c <HAL_GetTick>
 8063914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8063916:	e008      	b.n	806392a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8063918:	f7fc fdb8 	bl	806048c <HAL_GetTick>
 806391c:	4602      	mov	r2, r0
 806391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8063920:	1ad3      	subs	r3, r2, r3
 8063922:	2b02      	cmp	r3, #2
 8063924:	d901      	bls.n	806392a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8063926:	2303      	movs	r3, #3
 8063928:	e070      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 806392a:	4b3a      	ldr	r3, [pc, #232]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 806392c:	681b      	ldr	r3, [r3, #0]
 806392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8063932:	2b00      	cmp	r3, #0
 8063934:	d1f0      	bne.n	8063918 <HAL_RCC_OscConfig+0x7b0>
 8063936:	e068      	b.n	8063a0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8063938:	4b36      	ldr	r3, [pc, #216]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 806393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806393c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 806393e:	4b35      	ldr	r3, [pc, #212]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 8063940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063942:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8063944:	687b      	ldr	r3, [r7, #4]
 8063946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8063948:	2b01      	cmp	r3, #1
 806394a:	d031      	beq.n	80639b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 806394c:	693b      	ldr	r3, [r7, #16]
 806394e:	f003 0203 	and.w	r2, r3, #3
 8063952:	687b      	ldr	r3, [r7, #4]
 8063954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8063956:	429a      	cmp	r2, r3
 8063958:	d12a      	bne.n	80639b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 806395a:	693b      	ldr	r3, [r7, #16]
 806395c:	091b      	lsrs	r3, r3, #4
 806395e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8063962:	687b      	ldr	r3, [r7, #4]
 8063964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8063966:	429a      	cmp	r2, r3
 8063968:	d122      	bne.n	80639b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 806396a:	68fb      	ldr	r3, [r7, #12]
 806396c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8063970:	687b      	ldr	r3, [r7, #4]
 8063972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8063976:	429a      	cmp	r2, r3
 8063978:	d11a      	bne.n	80639b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 806397a:	68fb      	ldr	r3, [r7, #12]
 806397c:	0a5b      	lsrs	r3, r3, #9
 806397e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8063982:	687b      	ldr	r3, [r7, #4]
 8063984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8063986:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8063988:	429a      	cmp	r2, r3
 806398a:	d111      	bne.n	80639b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 806398c:	68fb      	ldr	r3, [r7, #12]
 806398e:	0c1b      	lsrs	r3, r3, #16
 8063990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8063994:	687b      	ldr	r3, [r7, #4]
 8063996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 806399a:	429a      	cmp	r2, r3
 806399c:	d108      	bne.n	80639b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 806399e:	68fb      	ldr	r3, [r7, #12]
 80639a0:	0e1b      	lsrs	r3, r3, #24
 80639a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80639a6:	687b      	ldr	r3, [r7, #4]
 80639a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80639aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80639ac:	429a      	cmp	r2, r3
 80639ae:	d001      	beq.n	80639b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80639b0:	2301      	movs	r3, #1
 80639b2:	e02b      	b.n	8063a0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80639b4:	4b17      	ldr	r3, [pc, #92]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80639b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80639b8:	08db      	lsrs	r3, r3, #3
 80639ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80639be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80639c0:	687b      	ldr	r3, [r7, #4]
 80639c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80639c4:	693a      	ldr	r2, [r7, #16]
 80639c6:	429a      	cmp	r2, r3
 80639c8:	d01f      	beq.n	8063a0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80639ca:	4b12      	ldr	r3, [pc, #72]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80639cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80639ce:	4a11      	ldr	r2, [pc, #68]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80639d0:	f023 0301 	bic.w	r3, r3, #1
 80639d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80639d6:	f7fc fd59 	bl	806048c <HAL_GetTick>
 80639da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80639dc:	bf00      	nop
 80639de:	f7fc fd55 	bl	806048c <HAL_GetTick>
 80639e2:	4602      	mov	r2, r0
 80639e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80639e6:	4293      	cmp	r3, r2
 80639e8:	d0f9      	beq.n	80639de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80639ea:	4b0a      	ldr	r3, [pc, #40]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80639ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80639ee:	4b0a      	ldr	r3, [pc, #40]	@ (8063a18 <HAL_RCC_OscConfig+0x8b0>)
 80639f0:	4013      	ands	r3, r2
 80639f2:	687a      	ldr	r2, [r7, #4]
 80639f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80639f6:	00d2      	lsls	r2, r2, #3
 80639f8:	4906      	ldr	r1, [pc, #24]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 80639fa:	4313      	orrs	r3, r2
 80639fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80639fe:	4b05      	ldr	r3, [pc, #20]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 8063a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063a02:	4a04      	ldr	r2, [pc, #16]	@ (8063a14 <HAL_RCC_OscConfig+0x8ac>)
 8063a04:	f043 0301 	orr.w	r3, r3, #1
 8063a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8063a0a:	2300      	movs	r3, #0
}
 8063a0c:	4618      	mov	r0, r3
 8063a0e:	3730      	adds	r7, #48	@ 0x30
 8063a10:	46bd      	mov	sp, r7
 8063a12:	bd80      	pop	{r7, pc}
 8063a14:	58024400 	.word	0x58024400
 8063a18:	ffff0007 	.word	0xffff0007

08063a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8063a1c:	b580      	push	{r7, lr}
 8063a1e:	b086      	sub	sp, #24
 8063a20:	af00      	add	r7, sp, #0
 8063a22:	6078      	str	r0, [r7, #4]
 8063a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8063a26:	687b      	ldr	r3, [r7, #4]
 8063a28:	2b00      	cmp	r3, #0
 8063a2a:	d101      	bne.n	8063a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8063a2c:	2301      	movs	r3, #1
 8063a2e:	e19c      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8063a30:	4b8a      	ldr	r3, [pc, #552]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063a32:	681b      	ldr	r3, [r3, #0]
 8063a34:	f003 030f 	and.w	r3, r3, #15
 8063a38:	683a      	ldr	r2, [r7, #0]
 8063a3a:	429a      	cmp	r2, r3
 8063a3c:	d910      	bls.n	8063a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8063a3e:	4b87      	ldr	r3, [pc, #540]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063a40:	681b      	ldr	r3, [r3, #0]
 8063a42:	f023 020f 	bic.w	r2, r3, #15
 8063a46:	4985      	ldr	r1, [pc, #532]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063a48:	683b      	ldr	r3, [r7, #0]
 8063a4a:	4313      	orrs	r3, r2
 8063a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8063a4e:	4b83      	ldr	r3, [pc, #524]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063a50:	681b      	ldr	r3, [r3, #0]
 8063a52:	f003 030f 	and.w	r3, r3, #15
 8063a56:	683a      	ldr	r2, [r7, #0]
 8063a58:	429a      	cmp	r2, r3
 8063a5a:	d001      	beq.n	8063a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8063a5c:	2301      	movs	r3, #1
 8063a5e:	e184      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8063a60:	687b      	ldr	r3, [r7, #4]
 8063a62:	681b      	ldr	r3, [r3, #0]
 8063a64:	f003 0304 	and.w	r3, r3, #4
 8063a68:	2b00      	cmp	r3, #0
 8063a6a:	d010      	beq.n	8063a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8063a6c:	687b      	ldr	r3, [r7, #4]
 8063a6e:	691a      	ldr	r2, [r3, #16]
 8063a70:	4b7b      	ldr	r3, [pc, #492]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063a72:	699b      	ldr	r3, [r3, #24]
 8063a74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063a78:	429a      	cmp	r2, r3
 8063a7a:	d908      	bls.n	8063a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8063a7c:	4b78      	ldr	r3, [pc, #480]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063a7e:	699b      	ldr	r3, [r3, #24]
 8063a80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063a84:	687b      	ldr	r3, [r7, #4]
 8063a86:	691b      	ldr	r3, [r3, #16]
 8063a88:	4975      	ldr	r1, [pc, #468]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063a8a:	4313      	orrs	r3, r2
 8063a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8063a8e:	687b      	ldr	r3, [r7, #4]
 8063a90:	681b      	ldr	r3, [r3, #0]
 8063a92:	f003 0308 	and.w	r3, r3, #8
 8063a96:	2b00      	cmp	r3, #0
 8063a98:	d010      	beq.n	8063abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8063a9a:	687b      	ldr	r3, [r7, #4]
 8063a9c:	695a      	ldr	r2, [r3, #20]
 8063a9e:	4b70      	ldr	r3, [pc, #448]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063aa0:	69db      	ldr	r3, [r3, #28]
 8063aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063aa6:	429a      	cmp	r2, r3
 8063aa8:	d908      	bls.n	8063abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8063aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063aac:	69db      	ldr	r3, [r3, #28]
 8063aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063ab2:	687b      	ldr	r3, [r7, #4]
 8063ab4:	695b      	ldr	r3, [r3, #20]
 8063ab6:	496a      	ldr	r1, [pc, #424]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063ab8:	4313      	orrs	r3, r2
 8063aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8063abc:	687b      	ldr	r3, [r7, #4]
 8063abe:	681b      	ldr	r3, [r3, #0]
 8063ac0:	f003 0310 	and.w	r3, r3, #16
 8063ac4:	2b00      	cmp	r3, #0
 8063ac6:	d010      	beq.n	8063aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8063ac8:	687b      	ldr	r3, [r7, #4]
 8063aca:	699a      	ldr	r2, [r3, #24]
 8063acc:	4b64      	ldr	r3, [pc, #400]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063ace:	69db      	ldr	r3, [r3, #28]
 8063ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8063ad4:	429a      	cmp	r2, r3
 8063ad6:	d908      	bls.n	8063aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8063ad8:	4b61      	ldr	r3, [pc, #388]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063ada:	69db      	ldr	r3, [r3, #28]
 8063adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8063ae0:	687b      	ldr	r3, [r7, #4]
 8063ae2:	699b      	ldr	r3, [r3, #24]
 8063ae4:	495e      	ldr	r1, [pc, #376]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063ae6:	4313      	orrs	r3, r2
 8063ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8063aea:	687b      	ldr	r3, [r7, #4]
 8063aec:	681b      	ldr	r3, [r3, #0]
 8063aee:	f003 0320 	and.w	r3, r3, #32
 8063af2:	2b00      	cmp	r3, #0
 8063af4:	d010      	beq.n	8063b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8063af6:	687b      	ldr	r3, [r7, #4]
 8063af8:	69da      	ldr	r2, [r3, #28]
 8063afa:	4b59      	ldr	r3, [pc, #356]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063afc:	6a1b      	ldr	r3, [r3, #32]
 8063afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063b02:	429a      	cmp	r2, r3
 8063b04:	d908      	bls.n	8063b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8063b06:	4b56      	ldr	r3, [pc, #344]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b08:	6a1b      	ldr	r3, [r3, #32]
 8063b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063b0e:	687b      	ldr	r3, [r7, #4]
 8063b10:	69db      	ldr	r3, [r3, #28]
 8063b12:	4953      	ldr	r1, [pc, #332]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b14:	4313      	orrs	r3, r2
 8063b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8063b18:	687b      	ldr	r3, [r7, #4]
 8063b1a:	681b      	ldr	r3, [r3, #0]
 8063b1c:	f003 0302 	and.w	r3, r3, #2
 8063b20:	2b00      	cmp	r3, #0
 8063b22:	d010      	beq.n	8063b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8063b24:	687b      	ldr	r3, [r7, #4]
 8063b26:	68da      	ldr	r2, [r3, #12]
 8063b28:	4b4d      	ldr	r3, [pc, #308]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b2a:	699b      	ldr	r3, [r3, #24]
 8063b2c:	f003 030f 	and.w	r3, r3, #15
 8063b30:	429a      	cmp	r2, r3
 8063b32:	d908      	bls.n	8063b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8063b34:	4b4a      	ldr	r3, [pc, #296]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b36:	699b      	ldr	r3, [r3, #24]
 8063b38:	f023 020f 	bic.w	r2, r3, #15
 8063b3c:	687b      	ldr	r3, [r7, #4]
 8063b3e:	68db      	ldr	r3, [r3, #12]
 8063b40:	4947      	ldr	r1, [pc, #284]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b42:	4313      	orrs	r3, r2
 8063b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8063b46:	687b      	ldr	r3, [r7, #4]
 8063b48:	681b      	ldr	r3, [r3, #0]
 8063b4a:	f003 0301 	and.w	r3, r3, #1
 8063b4e:	2b00      	cmp	r3, #0
 8063b50:	d055      	beq.n	8063bfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8063b52:	4b43      	ldr	r3, [pc, #268]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b54:	699b      	ldr	r3, [r3, #24]
 8063b56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8063b5a:	687b      	ldr	r3, [r7, #4]
 8063b5c:	689b      	ldr	r3, [r3, #8]
 8063b5e:	4940      	ldr	r1, [pc, #256]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b60:	4313      	orrs	r3, r2
 8063b62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8063b64:	687b      	ldr	r3, [r7, #4]
 8063b66:	685b      	ldr	r3, [r3, #4]
 8063b68:	2b02      	cmp	r3, #2
 8063b6a:	d107      	bne.n	8063b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8063b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b6e:	681b      	ldr	r3, [r3, #0]
 8063b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8063b74:	2b00      	cmp	r3, #0
 8063b76:	d121      	bne.n	8063bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8063b78:	2301      	movs	r3, #1
 8063b7a:	e0f6      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8063b7c:	687b      	ldr	r3, [r7, #4]
 8063b7e:	685b      	ldr	r3, [r3, #4]
 8063b80:	2b03      	cmp	r3, #3
 8063b82:	d107      	bne.n	8063b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8063b84:	4b36      	ldr	r3, [pc, #216]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b86:	681b      	ldr	r3, [r3, #0]
 8063b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8063b8c:	2b00      	cmp	r3, #0
 8063b8e:	d115      	bne.n	8063bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8063b90:	2301      	movs	r3, #1
 8063b92:	e0ea      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8063b94:	687b      	ldr	r3, [r7, #4]
 8063b96:	685b      	ldr	r3, [r3, #4]
 8063b98:	2b01      	cmp	r3, #1
 8063b9a:	d107      	bne.n	8063bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8063b9c:	4b30      	ldr	r3, [pc, #192]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063b9e:	681b      	ldr	r3, [r3, #0]
 8063ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8063ba4:	2b00      	cmp	r3, #0
 8063ba6:	d109      	bne.n	8063bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8063ba8:	2301      	movs	r3, #1
 8063baa:	e0de      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8063bac:	4b2c      	ldr	r3, [pc, #176]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063bae:	681b      	ldr	r3, [r3, #0]
 8063bb0:	f003 0304 	and.w	r3, r3, #4
 8063bb4:	2b00      	cmp	r3, #0
 8063bb6:	d101      	bne.n	8063bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8063bb8:	2301      	movs	r3, #1
 8063bba:	e0d6      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8063bbc:	4b28      	ldr	r3, [pc, #160]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063bbe:	691b      	ldr	r3, [r3, #16]
 8063bc0:	f023 0207 	bic.w	r2, r3, #7
 8063bc4:	687b      	ldr	r3, [r7, #4]
 8063bc6:	685b      	ldr	r3, [r3, #4]
 8063bc8:	4925      	ldr	r1, [pc, #148]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063bca:	4313      	orrs	r3, r2
 8063bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8063bce:	f7fc fc5d 	bl	806048c <HAL_GetTick>
 8063bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8063bd4:	e00a      	b.n	8063bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8063bd6:	f7fc fc59 	bl	806048c <HAL_GetTick>
 8063bda:	4602      	mov	r2, r0
 8063bdc:	697b      	ldr	r3, [r7, #20]
 8063bde:	1ad3      	subs	r3, r2, r3
 8063be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8063be4:	4293      	cmp	r3, r2
 8063be6:	d901      	bls.n	8063bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8063be8:	2303      	movs	r3, #3
 8063bea:	e0be      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8063bec:	4b1c      	ldr	r3, [pc, #112]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063bee:	691b      	ldr	r3, [r3, #16]
 8063bf0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8063bf4:	687b      	ldr	r3, [r7, #4]
 8063bf6:	685b      	ldr	r3, [r3, #4]
 8063bf8:	00db      	lsls	r3, r3, #3
 8063bfa:	429a      	cmp	r2, r3
 8063bfc:	d1eb      	bne.n	8063bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8063bfe:	687b      	ldr	r3, [r7, #4]
 8063c00:	681b      	ldr	r3, [r3, #0]
 8063c02:	f003 0302 	and.w	r3, r3, #2
 8063c06:	2b00      	cmp	r3, #0
 8063c08:	d010      	beq.n	8063c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8063c0a:	687b      	ldr	r3, [r7, #4]
 8063c0c:	68da      	ldr	r2, [r3, #12]
 8063c0e:	4b14      	ldr	r3, [pc, #80]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063c10:	699b      	ldr	r3, [r3, #24]
 8063c12:	f003 030f 	and.w	r3, r3, #15
 8063c16:	429a      	cmp	r2, r3
 8063c18:	d208      	bcs.n	8063c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8063c1a:	4b11      	ldr	r3, [pc, #68]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063c1c:	699b      	ldr	r3, [r3, #24]
 8063c1e:	f023 020f 	bic.w	r2, r3, #15
 8063c22:	687b      	ldr	r3, [r7, #4]
 8063c24:	68db      	ldr	r3, [r3, #12]
 8063c26:	490e      	ldr	r1, [pc, #56]	@ (8063c60 <HAL_RCC_ClockConfig+0x244>)
 8063c28:	4313      	orrs	r3, r2
 8063c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8063c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063c2e:	681b      	ldr	r3, [r3, #0]
 8063c30:	f003 030f 	and.w	r3, r3, #15
 8063c34:	683a      	ldr	r2, [r7, #0]
 8063c36:	429a      	cmp	r2, r3
 8063c38:	d214      	bcs.n	8063c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8063c3a:	4b08      	ldr	r3, [pc, #32]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063c3c:	681b      	ldr	r3, [r3, #0]
 8063c3e:	f023 020f 	bic.w	r2, r3, #15
 8063c42:	4906      	ldr	r1, [pc, #24]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063c44:	683b      	ldr	r3, [r7, #0]
 8063c46:	4313      	orrs	r3, r2
 8063c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8063c4a:	4b04      	ldr	r3, [pc, #16]	@ (8063c5c <HAL_RCC_ClockConfig+0x240>)
 8063c4c:	681b      	ldr	r3, [r3, #0]
 8063c4e:	f003 030f 	and.w	r3, r3, #15
 8063c52:	683a      	ldr	r2, [r7, #0]
 8063c54:	429a      	cmp	r2, r3
 8063c56:	d005      	beq.n	8063c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8063c58:	2301      	movs	r3, #1
 8063c5a:	e086      	b.n	8063d6a <HAL_RCC_ClockConfig+0x34e>
 8063c5c:	52002000 	.word	0x52002000
 8063c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8063c64:	687b      	ldr	r3, [r7, #4]
 8063c66:	681b      	ldr	r3, [r3, #0]
 8063c68:	f003 0304 	and.w	r3, r3, #4
 8063c6c:	2b00      	cmp	r3, #0
 8063c6e:	d010      	beq.n	8063c92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8063c70:	687b      	ldr	r3, [r7, #4]
 8063c72:	691a      	ldr	r2, [r3, #16]
 8063c74:	4b3f      	ldr	r3, [pc, #252]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063c76:	699b      	ldr	r3, [r3, #24]
 8063c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063c7c:	429a      	cmp	r2, r3
 8063c7e:	d208      	bcs.n	8063c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8063c80:	4b3c      	ldr	r3, [pc, #240]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063c82:	699b      	ldr	r3, [r3, #24]
 8063c84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063c88:	687b      	ldr	r3, [r7, #4]
 8063c8a:	691b      	ldr	r3, [r3, #16]
 8063c8c:	4939      	ldr	r1, [pc, #228]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063c8e:	4313      	orrs	r3, r2
 8063c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8063c92:	687b      	ldr	r3, [r7, #4]
 8063c94:	681b      	ldr	r3, [r3, #0]
 8063c96:	f003 0308 	and.w	r3, r3, #8
 8063c9a:	2b00      	cmp	r3, #0
 8063c9c:	d010      	beq.n	8063cc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8063c9e:	687b      	ldr	r3, [r7, #4]
 8063ca0:	695a      	ldr	r2, [r3, #20]
 8063ca2:	4b34      	ldr	r3, [pc, #208]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063ca4:	69db      	ldr	r3, [r3, #28]
 8063ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063caa:	429a      	cmp	r2, r3
 8063cac:	d208      	bcs.n	8063cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8063cae:	4b31      	ldr	r3, [pc, #196]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063cb0:	69db      	ldr	r3, [r3, #28]
 8063cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063cb6:	687b      	ldr	r3, [r7, #4]
 8063cb8:	695b      	ldr	r3, [r3, #20]
 8063cba:	492e      	ldr	r1, [pc, #184]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063cbc:	4313      	orrs	r3, r2
 8063cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8063cc0:	687b      	ldr	r3, [r7, #4]
 8063cc2:	681b      	ldr	r3, [r3, #0]
 8063cc4:	f003 0310 	and.w	r3, r3, #16
 8063cc8:	2b00      	cmp	r3, #0
 8063cca:	d010      	beq.n	8063cee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8063ccc:	687b      	ldr	r3, [r7, #4]
 8063cce:	699a      	ldr	r2, [r3, #24]
 8063cd0:	4b28      	ldr	r3, [pc, #160]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063cd2:	69db      	ldr	r3, [r3, #28]
 8063cd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8063cd8:	429a      	cmp	r2, r3
 8063cda:	d208      	bcs.n	8063cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8063cdc:	4b25      	ldr	r3, [pc, #148]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063cde:	69db      	ldr	r3, [r3, #28]
 8063ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8063ce4:	687b      	ldr	r3, [r7, #4]
 8063ce6:	699b      	ldr	r3, [r3, #24]
 8063ce8:	4922      	ldr	r1, [pc, #136]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063cea:	4313      	orrs	r3, r2
 8063cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8063cee:	687b      	ldr	r3, [r7, #4]
 8063cf0:	681b      	ldr	r3, [r3, #0]
 8063cf2:	f003 0320 	and.w	r3, r3, #32
 8063cf6:	2b00      	cmp	r3, #0
 8063cf8:	d010      	beq.n	8063d1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8063cfa:	687b      	ldr	r3, [r7, #4]
 8063cfc:	69da      	ldr	r2, [r3, #28]
 8063cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063d00:	6a1b      	ldr	r3, [r3, #32]
 8063d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8063d06:	429a      	cmp	r2, r3
 8063d08:	d208      	bcs.n	8063d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8063d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063d0c:	6a1b      	ldr	r3, [r3, #32]
 8063d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8063d12:	687b      	ldr	r3, [r7, #4]
 8063d14:	69db      	ldr	r3, [r3, #28]
 8063d16:	4917      	ldr	r1, [pc, #92]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063d18:	4313      	orrs	r3, r2
 8063d1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8063d1c:	f000 f834 	bl	8063d88 <HAL_RCC_GetSysClockFreq>
 8063d20:	4602      	mov	r2, r0
 8063d22:	4b14      	ldr	r3, [pc, #80]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063d24:	699b      	ldr	r3, [r3, #24]
 8063d26:	0a1b      	lsrs	r3, r3, #8
 8063d28:	f003 030f 	and.w	r3, r3, #15
 8063d2c:	4912      	ldr	r1, [pc, #72]	@ (8063d78 <HAL_RCC_ClockConfig+0x35c>)
 8063d2e:	5ccb      	ldrb	r3, [r1, r3]
 8063d30:	f003 031f 	and.w	r3, r3, #31
 8063d34:	fa22 f303 	lsr.w	r3, r2, r3
 8063d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8063d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8063d74 <HAL_RCC_ClockConfig+0x358>)
 8063d3c:	699b      	ldr	r3, [r3, #24]
 8063d3e:	f003 030f 	and.w	r3, r3, #15
 8063d42:	4a0d      	ldr	r2, [pc, #52]	@ (8063d78 <HAL_RCC_ClockConfig+0x35c>)
 8063d44:	5cd3      	ldrb	r3, [r2, r3]
 8063d46:	f003 031f 	and.w	r3, r3, #31
 8063d4a:	693a      	ldr	r2, [r7, #16]
 8063d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8063d50:	4a0a      	ldr	r2, [pc, #40]	@ (8063d7c <HAL_RCC_ClockConfig+0x360>)
 8063d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8063d54:	4a0a      	ldr	r2, [pc, #40]	@ (8063d80 <HAL_RCC_ClockConfig+0x364>)
 8063d56:	693b      	ldr	r3, [r7, #16]
 8063d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8063d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8063d84 <HAL_RCC_ClockConfig+0x368>)
 8063d5c:	681b      	ldr	r3, [r3, #0]
 8063d5e:	4618      	mov	r0, r3
 8063d60:	f7fb fe2c 	bl	805f9bc <HAL_InitTick>
 8063d64:	4603      	mov	r3, r0
 8063d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8063d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8063d6a:	4618      	mov	r0, r3
 8063d6c:	3718      	adds	r7, #24
 8063d6e:	46bd      	mov	sp, r7
 8063d70:	bd80      	pop	{r7, pc}
 8063d72:	bf00      	nop
 8063d74:	58024400 	.word	0x58024400
 8063d78:	080724e8 	.word	0x080724e8
 8063d7c:	240148fc 	.word	0x240148fc
 8063d80:	240148f8 	.word	0x240148f8
 8063d84:	24014a04 	.word	0x24014a04

08063d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8063d88:	b480      	push	{r7}
 8063d8a:	b089      	sub	sp, #36	@ 0x24
 8063d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8063d8e:	4bb3      	ldr	r3, [pc, #716]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063d90:	691b      	ldr	r3, [r3, #16]
 8063d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8063d96:	2b18      	cmp	r3, #24
 8063d98:	f200 8155 	bhi.w	8064046 <HAL_RCC_GetSysClockFreq+0x2be>
 8063d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8063da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8063d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8063da2:	bf00      	nop
 8063da4:	08063e09 	.word	0x08063e09
 8063da8:	08064047 	.word	0x08064047
 8063dac:	08064047 	.word	0x08064047
 8063db0:	08064047 	.word	0x08064047
 8063db4:	08064047 	.word	0x08064047
 8063db8:	08064047 	.word	0x08064047
 8063dbc:	08064047 	.word	0x08064047
 8063dc0:	08064047 	.word	0x08064047
 8063dc4:	08063e2f 	.word	0x08063e2f
 8063dc8:	08064047 	.word	0x08064047
 8063dcc:	08064047 	.word	0x08064047
 8063dd0:	08064047 	.word	0x08064047
 8063dd4:	08064047 	.word	0x08064047
 8063dd8:	08064047 	.word	0x08064047
 8063ddc:	08064047 	.word	0x08064047
 8063de0:	08064047 	.word	0x08064047
 8063de4:	08063e35 	.word	0x08063e35
 8063de8:	08064047 	.word	0x08064047
 8063dec:	08064047 	.word	0x08064047
 8063df0:	08064047 	.word	0x08064047
 8063df4:	08064047 	.word	0x08064047
 8063df8:	08064047 	.word	0x08064047
 8063dfc:	08064047 	.word	0x08064047
 8063e00:	08064047 	.word	0x08064047
 8063e04:	08063e3b 	.word	0x08063e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8063e08:	4b94      	ldr	r3, [pc, #592]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e0a:	681b      	ldr	r3, [r3, #0]
 8063e0c:	f003 0320 	and.w	r3, r3, #32
 8063e10:	2b00      	cmp	r3, #0
 8063e12:	d009      	beq.n	8063e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8063e14:	4b91      	ldr	r3, [pc, #580]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e16:	681b      	ldr	r3, [r3, #0]
 8063e18:	08db      	lsrs	r3, r3, #3
 8063e1a:	f003 0303 	and.w	r3, r3, #3
 8063e1e:	4a90      	ldr	r2, [pc, #576]	@ (8064060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8063e20:	fa22 f303 	lsr.w	r3, r2, r3
 8063e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8063e26:	e111      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8063e28:	4b8d      	ldr	r3, [pc, #564]	@ (8064060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8063e2a:	61bb      	str	r3, [r7, #24]
      break;
 8063e2c:	e10e      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8063e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8064064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8063e30:	61bb      	str	r3, [r7, #24]
      break;
 8063e32:	e10b      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8063e34:	4b8c      	ldr	r3, [pc, #560]	@ (8064068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8063e36:	61bb      	str	r3, [r7, #24]
      break;
 8063e38:	e108      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8063e3a:	4b88      	ldr	r3, [pc, #544]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063e3e:	f003 0303 	and.w	r3, r3, #3
 8063e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8063e44:	4b85      	ldr	r3, [pc, #532]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063e48:	091b      	lsrs	r3, r3, #4
 8063e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8063e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8063e50:	4b82      	ldr	r3, [pc, #520]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063e54:	f003 0301 	and.w	r3, r3, #1
 8063e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8063e5a:	4b80      	ldr	r3, [pc, #512]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8063e5e:	08db      	lsrs	r3, r3, #3
 8063e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8063e64:	68fa      	ldr	r2, [r7, #12]
 8063e66:	fb02 f303 	mul.w	r3, r2, r3
 8063e6a:	ee07 3a90 	vmov	s15, r3
 8063e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8063e76:	693b      	ldr	r3, [r7, #16]
 8063e78:	2b00      	cmp	r3, #0
 8063e7a:	f000 80e1 	beq.w	8064040 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8063e7e:	697b      	ldr	r3, [r7, #20]
 8063e80:	2b02      	cmp	r3, #2
 8063e82:	f000 8083 	beq.w	8063f8c <HAL_RCC_GetSysClockFreq+0x204>
 8063e86:	697b      	ldr	r3, [r7, #20]
 8063e88:	2b02      	cmp	r3, #2
 8063e8a:	f200 80a1 	bhi.w	8063fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8063e8e:	697b      	ldr	r3, [r7, #20]
 8063e90:	2b00      	cmp	r3, #0
 8063e92:	d003      	beq.n	8063e9c <HAL_RCC_GetSysClockFreq+0x114>
 8063e94:	697b      	ldr	r3, [r7, #20]
 8063e96:	2b01      	cmp	r3, #1
 8063e98:	d056      	beq.n	8063f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8063e9a:	e099      	b.n	8063fd0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8063e9c:	4b6f      	ldr	r3, [pc, #444]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063e9e:	681b      	ldr	r3, [r3, #0]
 8063ea0:	f003 0320 	and.w	r3, r3, #32
 8063ea4:	2b00      	cmp	r3, #0
 8063ea6:	d02d      	beq.n	8063f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8063ea8:	4b6c      	ldr	r3, [pc, #432]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063eaa:	681b      	ldr	r3, [r3, #0]
 8063eac:	08db      	lsrs	r3, r3, #3
 8063eae:	f003 0303 	and.w	r3, r3, #3
 8063eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8064060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8063eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8063eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8063eba:	687b      	ldr	r3, [r7, #4]
 8063ebc:	ee07 3a90 	vmov	s15, r3
 8063ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063ec4:	693b      	ldr	r3, [r7, #16]
 8063ec6:	ee07 3a90 	vmov	s15, r3
 8063eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063ed2:	4b62      	ldr	r3, [pc, #392]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063eda:	ee07 3a90 	vmov	s15, r3
 8063ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8063ee6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 806406c <HAL_RCC_GetSysClockFreq+0x2e4>
 8063eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8063f02:	e087      	b.n	8064014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8063f04:	693b      	ldr	r3, [r7, #16]
 8063f06:	ee07 3a90 	vmov	s15, r3
 8063f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8064070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8063f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f16:	4b51      	ldr	r3, [pc, #324]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063f1e:	ee07 3a90 	vmov	s15, r3
 8063f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8063f2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 806406c <HAL_RCC_GetSysClockFreq+0x2e4>
 8063f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8063f46:	e065      	b.n	8064014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8063f48:	693b      	ldr	r3, [r7, #16]
 8063f4a:	ee07 3a90 	vmov	s15, r3
 8063f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8064074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8063f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f5a:	4b40      	ldr	r3, [pc, #256]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063f62:	ee07 3a90 	vmov	s15, r3
 8063f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8063f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 806406c <HAL_RCC_GetSysClockFreq+0x2e4>
 8063f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8063f8a:	e043      	b.n	8064014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8063f8c:	693b      	ldr	r3, [r7, #16]
 8063f8e:	ee07 3a90 	vmov	s15, r3
 8063f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8064078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8063f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f9e:	4b2f      	ldr	r3, [pc, #188]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063fa6:	ee07 3a90 	vmov	s15, r3
 8063faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8063fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 806406c <HAL_RCC_GetSysClockFreq+0x2e4>
 8063fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8063fce:	e021      	b.n	8064014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8063fd0:	693b      	ldr	r3, [r7, #16]
 8063fd2:	ee07 3a90 	vmov	s15, r3
 8063fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063fda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8064074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8063fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063fe2:	4b1e      	ldr	r3, [pc, #120]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8063fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8063fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063fea:	ee07 3a90 	vmov	s15, r3
 8063fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8063ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 806406c <HAL_RCC_GetSysClockFreq+0x2e4>
 8063ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8064002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8064006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 806400e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8064012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8064014:	4b11      	ldr	r3, [pc, #68]	@ (806405c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8064016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8064018:	0a5b      	lsrs	r3, r3, #9
 806401a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806401e:	3301      	adds	r3, #1
 8064020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8064022:	683b      	ldr	r3, [r7, #0]
 8064024:	ee07 3a90 	vmov	s15, r3
 8064028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 806402c:	edd7 6a07 	vldr	s13, [r7, #28]
 8064030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8064038:	ee17 3a90 	vmov	r3, s15
 806403c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 806403e:	e005      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8064040:	2300      	movs	r3, #0
 8064042:	61bb      	str	r3, [r7, #24]
      break;
 8064044:	e002      	b.n	806404c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8064046:	4b07      	ldr	r3, [pc, #28]	@ (8064064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8064048:	61bb      	str	r3, [r7, #24]
      break;
 806404a:	bf00      	nop
  }

  return sysclockfreq;
 806404c:	69bb      	ldr	r3, [r7, #24]
}
 806404e:	4618      	mov	r0, r3
 8064050:	3724      	adds	r7, #36	@ 0x24
 8064052:	46bd      	mov	sp, r7
 8064054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064058:	4770      	bx	lr
 806405a:	bf00      	nop
 806405c:	58024400 	.word	0x58024400
 8064060:	03d09000 	.word	0x03d09000
 8064064:	003d0900 	.word	0x003d0900
 8064068:	017d7840 	.word	0x017d7840
 806406c:	46000000 	.word	0x46000000
 8064070:	4c742400 	.word	0x4c742400
 8064074:	4a742400 	.word	0x4a742400
 8064078:	4bbebc20 	.word	0x4bbebc20

0806407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 806407c:	b580      	push	{r7, lr}
 806407e:	b082      	sub	sp, #8
 8064080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8064082:	f7ff fe81 	bl	8063d88 <HAL_RCC_GetSysClockFreq>
 8064086:	4602      	mov	r2, r0
 8064088:	4b10      	ldr	r3, [pc, #64]	@ (80640cc <HAL_RCC_GetHCLKFreq+0x50>)
 806408a:	699b      	ldr	r3, [r3, #24]
 806408c:	0a1b      	lsrs	r3, r3, #8
 806408e:	f003 030f 	and.w	r3, r3, #15
 8064092:	490f      	ldr	r1, [pc, #60]	@ (80640d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8064094:	5ccb      	ldrb	r3, [r1, r3]
 8064096:	f003 031f 	and.w	r3, r3, #31
 806409a:	fa22 f303 	lsr.w	r3, r2, r3
 806409e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80640a0:	4b0a      	ldr	r3, [pc, #40]	@ (80640cc <HAL_RCC_GetHCLKFreq+0x50>)
 80640a2:	699b      	ldr	r3, [r3, #24]
 80640a4:	f003 030f 	and.w	r3, r3, #15
 80640a8:	4a09      	ldr	r2, [pc, #36]	@ (80640d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80640aa:	5cd3      	ldrb	r3, [r2, r3]
 80640ac:	f003 031f 	and.w	r3, r3, #31
 80640b0:	687a      	ldr	r2, [r7, #4]
 80640b2:	fa22 f303 	lsr.w	r3, r2, r3
 80640b6:	4a07      	ldr	r2, [pc, #28]	@ (80640d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80640b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80640ba:	4a07      	ldr	r2, [pc, #28]	@ (80640d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80640bc:	687b      	ldr	r3, [r7, #4]
 80640be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80640c0:	4b04      	ldr	r3, [pc, #16]	@ (80640d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80640c2:	681b      	ldr	r3, [r3, #0]
}
 80640c4:	4618      	mov	r0, r3
 80640c6:	3708      	adds	r7, #8
 80640c8:	46bd      	mov	sp, r7
 80640ca:	bd80      	pop	{r7, pc}
 80640cc:	58024400 	.word	0x58024400
 80640d0:	080724e8 	.word	0x080724e8
 80640d4:	240148fc 	.word	0x240148fc
 80640d8:	240148f8 	.word	0x240148f8

080640dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80640dc:	b580      	push	{r7, lr}
 80640de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80640e0:	f7ff ffcc 	bl	806407c <HAL_RCC_GetHCLKFreq>
 80640e4:	4602      	mov	r2, r0
 80640e6:	4b06      	ldr	r3, [pc, #24]	@ (8064100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80640e8:	69db      	ldr	r3, [r3, #28]
 80640ea:	091b      	lsrs	r3, r3, #4
 80640ec:	f003 0307 	and.w	r3, r3, #7
 80640f0:	4904      	ldr	r1, [pc, #16]	@ (8064104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80640f2:	5ccb      	ldrb	r3, [r1, r3]
 80640f4:	f003 031f 	and.w	r3, r3, #31
 80640f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80640fc:	4618      	mov	r0, r3
 80640fe:	bd80      	pop	{r7, pc}
 8064100:	58024400 	.word	0x58024400
 8064104:	080724e8 	.word	0x080724e8

08064108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8064108:	b480      	push	{r7}
 806410a:	b083      	sub	sp, #12
 806410c:	af00      	add	r7, sp, #0
 806410e:	6078      	str	r0, [r7, #4]
 8064110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8064112:	687b      	ldr	r3, [r7, #4]
 8064114:	223f      	movs	r2, #63	@ 0x3f
 8064116:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8064118:	4b1a      	ldr	r3, [pc, #104]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 806411a:	691b      	ldr	r3, [r3, #16]
 806411c:	f003 0207 	and.w	r2, r3, #7
 8064120:	687b      	ldr	r3, [r7, #4]
 8064122:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8064124:	4b17      	ldr	r3, [pc, #92]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 8064126:	699b      	ldr	r3, [r3, #24]
 8064128:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 806412c:	687b      	ldr	r3, [r7, #4]
 806412e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8064130:	4b14      	ldr	r3, [pc, #80]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 8064132:	699b      	ldr	r3, [r3, #24]
 8064134:	f003 020f 	and.w	r2, r3, #15
 8064138:	687b      	ldr	r3, [r7, #4]
 806413a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 806413c:	4b11      	ldr	r3, [pc, #68]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 806413e:	699b      	ldr	r3, [r3, #24]
 8064140:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8064144:	687b      	ldr	r3, [r7, #4]
 8064146:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8064148:	4b0e      	ldr	r3, [pc, #56]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 806414a:	69db      	ldr	r3, [r3, #28]
 806414c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8064150:	687b      	ldr	r3, [r7, #4]
 8064152:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8064154:	4b0b      	ldr	r3, [pc, #44]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 8064156:	69db      	ldr	r3, [r3, #28]
 8064158:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 806415c:	687b      	ldr	r3, [r7, #4]
 806415e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8064160:	4b08      	ldr	r3, [pc, #32]	@ (8064184 <HAL_RCC_GetClockConfig+0x7c>)
 8064162:	6a1b      	ldr	r3, [r3, #32]
 8064164:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8064168:	687b      	ldr	r3, [r7, #4]
 806416a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 806416c:	4b06      	ldr	r3, [pc, #24]	@ (8064188 <HAL_RCC_GetClockConfig+0x80>)
 806416e:	681b      	ldr	r3, [r3, #0]
 8064170:	f003 020f 	and.w	r2, r3, #15
 8064174:	683b      	ldr	r3, [r7, #0]
 8064176:	601a      	str	r2, [r3, #0]
}
 8064178:	bf00      	nop
 806417a:	370c      	adds	r7, #12
 806417c:	46bd      	mov	sp, r7
 806417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064182:	4770      	bx	lr
 8064184:	58024400 	.word	0x58024400
 8064188:	52002000 	.word	0x52002000

0806418c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 806418c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8064190:	b0ca      	sub	sp, #296	@ 0x128
 8064192:	af00      	add	r7, sp, #0
 8064194:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8064198:	2300      	movs	r3, #0
 806419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 806419e:	2300      	movs	r3, #0
 80641a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80641a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80641a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80641ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80641b0:	2500      	movs	r5, #0
 80641b2:	ea54 0305 	orrs.w	r3, r4, r5
 80641b6:	d049      	beq.n	806424c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80641b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80641bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80641be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80641c2:	d02f      	beq.n	8064224 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80641c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80641c8:	d828      	bhi.n	806421c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80641ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80641ce:	d01a      	beq.n	8064206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80641d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80641d4:	d822      	bhi.n	806421c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80641d6:	2b00      	cmp	r3, #0
 80641d8:	d003      	beq.n	80641e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80641da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80641de:	d007      	beq.n	80641f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80641e0:	e01c      	b.n	806421c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80641e2:	4bb8      	ldr	r3, [pc, #736]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80641e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80641e6:	4ab7      	ldr	r2, [pc, #732]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80641e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80641ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80641ee:	e01a      	b.n	8064226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80641f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80641f4:	3308      	adds	r3, #8
 80641f6:	2102      	movs	r1, #2
 80641f8:	4618      	mov	r0, r3
 80641fa:	f002 fb61 	bl	80668c0 <RCCEx_PLL2_Config>
 80641fe:	4603      	mov	r3, r0
 8064200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8064204:	e00f      	b.n	8064226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8064206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806420a:	3328      	adds	r3, #40	@ 0x28
 806420c:	2102      	movs	r1, #2
 806420e:	4618      	mov	r0, r3
 8064210:	f002 fc08 	bl	8066a24 <RCCEx_PLL3_Config>
 8064214:	4603      	mov	r3, r0
 8064216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 806421a:	e004      	b.n	8064226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806421c:	2301      	movs	r3, #1
 806421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064222:	e000      	b.n	8064226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8064224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806422a:	2b00      	cmp	r3, #0
 806422c:	d10a      	bne.n	8064244 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 806422e:	4ba5      	ldr	r3, [pc, #660]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8064230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8064232:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8064236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806423a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 806423c:	4aa1      	ldr	r2, [pc, #644]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806423e:	430b      	orrs	r3, r1
 8064240:	6513      	str	r3, [r2, #80]	@ 0x50
 8064242:	e003      	b.n	806424c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 806424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064254:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8064258:	f04f 0900 	mov.w	r9, #0
 806425c:	ea58 0309 	orrs.w	r3, r8, r9
 8064260:	d047      	beq.n	80642f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8064262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8064268:	2b04      	cmp	r3, #4
 806426a:	d82a      	bhi.n	80642c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 806426c:	a201      	add	r2, pc, #4	@ (adr r2, 8064274 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 806426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064272:	bf00      	nop
 8064274:	08064289 	.word	0x08064289
 8064278:	08064297 	.word	0x08064297
 806427c:	080642ad 	.word	0x080642ad
 8064280:	080642cb 	.word	0x080642cb
 8064284:	080642cb 	.word	0x080642cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8064288:	4b8e      	ldr	r3, [pc, #568]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806428c:	4a8d      	ldr	r2, [pc, #564]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806428e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8064292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8064294:	e01a      	b.n	80642cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806429a:	3308      	adds	r3, #8
 806429c:	2100      	movs	r1, #0
 806429e:	4618      	mov	r0, r3
 80642a0:	f002 fb0e 	bl	80668c0 <RCCEx_PLL2_Config>
 80642a4:	4603      	mov	r3, r0
 80642a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80642aa:	e00f      	b.n	80642cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80642ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80642b0:	3328      	adds	r3, #40	@ 0x28
 80642b2:	2100      	movs	r1, #0
 80642b4:	4618      	mov	r0, r3
 80642b6:	f002 fbb5 	bl	8066a24 <RCCEx_PLL3_Config>
 80642ba:	4603      	mov	r3, r0
 80642bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80642c0:	e004      	b.n	80642cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80642c2:	2301      	movs	r3, #1
 80642c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80642c8:	e000      	b.n	80642cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80642ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80642cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80642d0:	2b00      	cmp	r3, #0
 80642d2:	d10a      	bne.n	80642ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80642d4:	4b7b      	ldr	r3, [pc, #492]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80642d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80642d8:	f023 0107 	bic.w	r1, r3, #7
 80642dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80642e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80642e2:	4a78      	ldr	r2, [pc, #480]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80642e4:	430b      	orrs	r3, r1
 80642e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80642e8:	e003      	b.n	80642f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80642ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80642ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80642f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80642f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80642fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80642fe:	f04f 0b00 	mov.w	fp, #0
 8064302:	ea5a 030b 	orrs.w	r3, sl, fp
 8064306:	d04c      	beq.n	80643a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8064308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 806430e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8064312:	d030      	beq.n	8064376 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8064314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8064318:	d829      	bhi.n	806436e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 806431a:	2bc0      	cmp	r3, #192	@ 0xc0
 806431c:	d02d      	beq.n	806437a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 806431e:	2bc0      	cmp	r3, #192	@ 0xc0
 8064320:	d825      	bhi.n	806436e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8064322:	2b80      	cmp	r3, #128	@ 0x80
 8064324:	d018      	beq.n	8064358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8064326:	2b80      	cmp	r3, #128	@ 0x80
 8064328:	d821      	bhi.n	806436e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 806432a:	2b00      	cmp	r3, #0
 806432c:	d002      	beq.n	8064334 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 806432e:	2b40      	cmp	r3, #64	@ 0x40
 8064330:	d007      	beq.n	8064342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8064332:	e01c      	b.n	806436e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8064334:	4b63      	ldr	r3, [pc, #396]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8064336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064338:	4a62      	ldr	r2, [pc, #392]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806433a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 806433e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8064340:	e01c      	b.n	806437c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064346:	3308      	adds	r3, #8
 8064348:	2100      	movs	r1, #0
 806434a:	4618      	mov	r0, r3
 806434c:	f002 fab8 	bl	80668c0 <RCCEx_PLL2_Config>
 8064350:	4603      	mov	r3, r0
 8064352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8064356:	e011      	b.n	806437c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8064358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806435c:	3328      	adds	r3, #40	@ 0x28
 806435e:	2100      	movs	r1, #0
 8064360:	4618      	mov	r0, r3
 8064362:	f002 fb5f 	bl	8066a24 <RCCEx_PLL3_Config>
 8064366:	4603      	mov	r3, r0
 8064368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 806436c:	e006      	b.n	806437c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806436e:	2301      	movs	r3, #1
 8064370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064374:	e002      	b.n	806437c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8064376:	bf00      	nop
 8064378:	e000      	b.n	806437c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 806437a:	bf00      	nop
    }

    if (ret == HAL_OK)
 806437c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064380:	2b00      	cmp	r3, #0
 8064382:	d10a      	bne.n	806439a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8064384:	4b4f      	ldr	r3, [pc, #316]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8064386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8064388:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 806438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8064392:	4a4c      	ldr	r2, [pc, #304]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8064394:	430b      	orrs	r3, r1
 8064396:	6513      	str	r3, [r2, #80]	@ 0x50
 8064398:	e003      	b.n	80643a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 806439a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806439e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80643a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80643a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80643aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80643ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80643b2:	2300      	movs	r3, #0
 80643b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80643b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80643bc:	460b      	mov	r3, r1
 80643be:	4313      	orrs	r3, r2
 80643c0:	d053      	beq.n	806446a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80643c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80643c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80643ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80643ce:	d035      	beq.n	806443c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80643d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80643d4:	d82e      	bhi.n	8064434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80643d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80643da:	d031      	beq.n	8064440 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80643dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80643e0:	d828      	bhi.n	8064434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80643e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80643e6:	d01a      	beq.n	806441e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80643e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80643ec:	d822      	bhi.n	8064434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80643ee:	2b00      	cmp	r3, #0
 80643f0:	d003      	beq.n	80643fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80643f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80643f6:	d007      	beq.n	8064408 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80643f8:	e01c      	b.n	8064434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80643fa:	4b32      	ldr	r3, [pc, #200]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80643fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80643fe:	4a31      	ldr	r2, [pc, #196]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8064400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8064404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8064406:	e01c      	b.n	8064442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806440c:	3308      	adds	r3, #8
 806440e:	2100      	movs	r1, #0
 8064410:	4618      	mov	r0, r3
 8064412:	f002 fa55 	bl	80668c0 <RCCEx_PLL2_Config>
 8064416:	4603      	mov	r3, r0
 8064418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 806441c:	e011      	b.n	8064442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 806441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064422:	3328      	adds	r3, #40	@ 0x28
 8064424:	2100      	movs	r1, #0
 8064426:	4618      	mov	r0, r3
 8064428:	f002 fafc 	bl	8066a24 <RCCEx_PLL3_Config>
 806442c:	4603      	mov	r3, r0
 806442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8064432:	e006      	b.n	8064442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8064434:	2301      	movs	r3, #1
 8064436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 806443a:	e002      	b.n	8064442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 806443c:	bf00      	nop
 806443e:	e000      	b.n	8064442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8064440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064446:	2b00      	cmp	r3, #0
 8064448:	d10b      	bne.n	8064462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 806444a:	4b1e      	ldr	r3, [pc, #120]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806444e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8064452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 806445a:	4a1a      	ldr	r2, [pc, #104]	@ (80644c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 806445c:	430b      	orrs	r3, r1
 806445e:	6593      	str	r3, [r2, #88]	@ 0x58
 8064460:	e003      	b.n	806446a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 806446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064472:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8064476:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 806447a:	2300      	movs	r3, #0
 806447c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8064480:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8064484:	460b      	mov	r3, r1
 8064486:	4313      	orrs	r3, r2
 8064488:	d056      	beq.n	8064538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 806448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806448e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8064492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8064496:	d038      	beq.n	806450a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8064498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 806449c:	d831      	bhi.n	8064502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 806449e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80644a2:	d034      	beq.n	806450e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80644a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80644a8:	d82b      	bhi.n	8064502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80644aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80644ae:	d01d      	beq.n	80644ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80644b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80644b4:	d825      	bhi.n	8064502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80644b6:	2b00      	cmp	r3, #0
 80644b8:	d006      	beq.n	80644c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80644ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80644be:	d00a      	beq.n	80644d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80644c0:	e01f      	b.n	8064502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80644c2:	bf00      	nop
 80644c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80644c8:	4ba2      	ldr	r3, [pc, #648]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80644ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80644cc:	4aa1      	ldr	r2, [pc, #644]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80644ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80644d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80644d4:	e01c      	b.n	8064510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80644d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80644da:	3308      	adds	r3, #8
 80644dc:	2100      	movs	r1, #0
 80644de:	4618      	mov	r0, r3
 80644e0:	f002 f9ee 	bl	80668c0 <RCCEx_PLL2_Config>
 80644e4:	4603      	mov	r3, r0
 80644e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80644ea:	e011      	b.n	8064510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80644ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80644f0:	3328      	adds	r3, #40	@ 0x28
 80644f2:	2100      	movs	r1, #0
 80644f4:	4618      	mov	r0, r3
 80644f6:	f002 fa95 	bl	8066a24 <RCCEx_PLL3_Config>
 80644fa:	4603      	mov	r3, r0
 80644fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8064500:	e006      	b.n	8064510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8064502:	2301      	movs	r3, #1
 8064504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064508:	e002      	b.n	8064510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 806450a:	bf00      	nop
 806450c:	e000      	b.n	8064510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 806450e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064514:	2b00      	cmp	r3, #0
 8064516:	d10b      	bne.n	8064530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8064518:	4b8e      	ldr	r3, [pc, #568]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806451c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8064520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8064528:	4a8a      	ldr	r2, [pc, #552]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806452a:	430b      	orrs	r3, r1
 806452c:	6593      	str	r3, [r2, #88]	@ 0x58
 806452e:	e003      	b.n	8064538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8064538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064540:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8064544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8064548:	2300      	movs	r3, #0
 806454a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 806454e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8064552:	460b      	mov	r3, r1
 8064554:	4313      	orrs	r3, r2
 8064556:	d03a      	beq.n	80645ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8064558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 806455e:	2b30      	cmp	r3, #48	@ 0x30
 8064560:	d01f      	beq.n	80645a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8064562:	2b30      	cmp	r3, #48	@ 0x30
 8064564:	d819      	bhi.n	806459a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8064566:	2b20      	cmp	r3, #32
 8064568:	d00c      	beq.n	8064584 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 806456a:	2b20      	cmp	r3, #32
 806456c:	d815      	bhi.n	806459a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 806456e:	2b00      	cmp	r3, #0
 8064570:	d019      	beq.n	80645a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8064572:	2b10      	cmp	r3, #16
 8064574:	d111      	bne.n	806459a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8064576:	4b77      	ldr	r3, [pc, #476]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8064578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806457a:	4a76      	ldr	r2, [pc, #472]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806457c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8064580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8064582:	e011      	b.n	80645a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8064584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064588:	3308      	adds	r3, #8
 806458a:	2102      	movs	r1, #2
 806458c:	4618      	mov	r0, r3
 806458e:	f002 f997 	bl	80668c0 <RCCEx_PLL2_Config>
 8064592:	4603      	mov	r3, r0
 8064594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8064598:	e006      	b.n	80645a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 806459a:	2301      	movs	r3, #1
 806459c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80645a0:	e002      	b.n	80645a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80645a2:	bf00      	nop
 80645a4:	e000      	b.n	80645a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80645a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80645a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80645ac:	2b00      	cmp	r3, #0
 80645ae:	d10a      	bne.n	80645c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80645b0:	4b68      	ldr	r3, [pc, #416]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80645b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80645b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80645b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80645bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80645be:	4a65      	ldr	r2, [pc, #404]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80645c0:	430b      	orrs	r3, r1
 80645c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80645c4:	e003      	b.n	80645ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80645c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80645ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80645ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80645d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80645d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80645da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80645de:	2300      	movs	r3, #0
 80645e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80645e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80645e8:	460b      	mov	r3, r1
 80645ea:	4313      	orrs	r3, r2
 80645ec:	d051      	beq.n	8064692 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80645ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80645f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80645f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80645f8:	d035      	beq.n	8064666 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80645fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80645fe:	d82e      	bhi.n	806465e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8064600:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8064604:	d031      	beq.n	806466a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8064606:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 806460a:	d828      	bhi.n	806465e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 806460c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8064610:	d01a      	beq.n	8064648 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8064612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8064616:	d822      	bhi.n	806465e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8064618:	2b00      	cmp	r3, #0
 806461a:	d003      	beq.n	8064624 <HAL_RCCEx_PeriphCLKConfig+0x498>
 806461c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8064620:	d007      	beq.n	8064632 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8064622:	e01c      	b.n	806465e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8064624:	4b4b      	ldr	r3, [pc, #300]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8064626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064628:	4a4a      	ldr	r2, [pc, #296]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806462a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 806462e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8064630:	e01c      	b.n	806466c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064636:	3308      	adds	r3, #8
 8064638:	2100      	movs	r1, #0
 806463a:	4618      	mov	r0, r3
 806463c:	f002 f940 	bl	80668c0 <RCCEx_PLL2_Config>
 8064640:	4603      	mov	r3, r0
 8064642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8064646:	e011      	b.n	806466c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8064648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806464c:	3328      	adds	r3, #40	@ 0x28
 806464e:	2100      	movs	r1, #0
 8064650:	4618      	mov	r0, r3
 8064652:	f002 f9e7 	bl	8066a24 <RCCEx_PLL3_Config>
 8064656:	4603      	mov	r3, r0
 8064658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 806465c:	e006      	b.n	806466c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806465e:	2301      	movs	r3, #1
 8064660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064664:	e002      	b.n	806466c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8064666:	bf00      	nop
 8064668:	e000      	b.n	806466c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 806466a:	bf00      	nop
    }

    if (ret == HAL_OK)
 806466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064670:	2b00      	cmp	r3, #0
 8064672:	d10a      	bne.n	806468a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8064674:	4b37      	ldr	r3, [pc, #220]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8064676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8064678:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 806467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8064682:	4a34      	ldr	r2, [pc, #208]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8064684:	430b      	orrs	r3, r1
 8064686:	6513      	str	r3, [r2, #80]	@ 0x50
 8064688:	e003      	b.n	8064692 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 806468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806468e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8064692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064696:	e9d3 2300 	ldrd	r2, r3, [r3]
 806469a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 806469e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80646a2:	2300      	movs	r3, #0
 80646a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80646a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80646ac:	460b      	mov	r3, r1
 80646ae:	4313      	orrs	r3, r2
 80646b0:	d056      	beq.n	8064760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80646b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80646b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80646b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80646bc:	d033      	beq.n	8064726 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80646be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80646c2:	d82c      	bhi.n	806471e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80646c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80646c8:	d02f      	beq.n	806472a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80646ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80646ce:	d826      	bhi.n	806471e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80646d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80646d4:	d02b      	beq.n	806472e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80646d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80646da:	d820      	bhi.n	806471e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80646dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80646e0:	d012      	beq.n	8064708 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80646e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80646e6:	d81a      	bhi.n	806471e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80646e8:	2b00      	cmp	r3, #0
 80646ea:	d022      	beq.n	8064732 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80646ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80646f0:	d115      	bne.n	806471e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80646f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80646f6:	3308      	adds	r3, #8
 80646f8:	2101      	movs	r1, #1
 80646fa:	4618      	mov	r0, r3
 80646fc:	f002 f8e0 	bl	80668c0 <RCCEx_PLL2_Config>
 8064700:	4603      	mov	r3, r0
 8064702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8064706:	e015      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8064708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806470c:	3328      	adds	r3, #40	@ 0x28
 806470e:	2101      	movs	r1, #1
 8064710:	4618      	mov	r0, r3
 8064712:	f002 f987 	bl	8066a24 <RCCEx_PLL3_Config>
 8064716:	4603      	mov	r3, r0
 8064718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 806471c:	e00a      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806471e:	2301      	movs	r3, #1
 8064720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064724:	e006      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8064726:	bf00      	nop
 8064728:	e004      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 806472a:	bf00      	nop
 806472c:	e002      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 806472e:	bf00      	nop
 8064730:	e000      	b.n	8064734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8064732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064738:	2b00      	cmp	r3, #0
 806473a:	d10d      	bne.n	8064758 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 806473c:	4b05      	ldr	r3, [pc, #20]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8064740:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8064744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 806474a:	4a02      	ldr	r2, [pc, #8]	@ (8064754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 806474c:	430b      	orrs	r3, r1
 806474e:	6513      	str	r3, [r2, #80]	@ 0x50
 8064750:	e006      	b.n	8064760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8064752:	bf00      	nop
 8064754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806475c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8064760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064768:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 806476c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8064770:	2300      	movs	r3, #0
 8064772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8064776:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 806477a:	460b      	mov	r3, r1
 806477c:	4313      	orrs	r3, r2
 806477e:	d055      	beq.n	806482c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8064780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8064788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 806478c:	d033      	beq.n	80647f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 806478e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8064792:	d82c      	bhi.n	80647ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8064794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8064798:	d02f      	beq.n	80647fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 806479a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806479e:	d826      	bhi.n	80647ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80647a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80647a4:	d02b      	beq.n	80647fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80647a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80647aa:	d820      	bhi.n	80647ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80647ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80647b0:	d012      	beq.n	80647d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80647b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80647b6:	d81a      	bhi.n	80647ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80647b8:	2b00      	cmp	r3, #0
 80647ba:	d022      	beq.n	8064802 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80647bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80647c0:	d115      	bne.n	80647ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80647c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80647c6:	3308      	adds	r3, #8
 80647c8:	2101      	movs	r1, #1
 80647ca:	4618      	mov	r0, r3
 80647cc:	f002 f878 	bl	80668c0 <RCCEx_PLL2_Config>
 80647d0:	4603      	mov	r3, r0
 80647d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80647d6:	e015      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80647d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80647dc:	3328      	adds	r3, #40	@ 0x28
 80647de:	2101      	movs	r1, #1
 80647e0:	4618      	mov	r0, r3
 80647e2:	f002 f91f 	bl	8066a24 <RCCEx_PLL3_Config>
 80647e6:	4603      	mov	r3, r0
 80647e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80647ec:	e00a      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80647ee:	2301      	movs	r3, #1
 80647f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80647f4:	e006      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80647f6:	bf00      	nop
 80647f8:	e004      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80647fa:	bf00      	nop
 80647fc:	e002      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80647fe:	bf00      	nop
 8064800:	e000      	b.n	8064804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8064802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064808:	2b00      	cmp	r3, #0
 806480a:	d10b      	bne.n	8064824 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 806480c:	4ba3      	ldr	r3, [pc, #652]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 806480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8064810:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8064814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 806481c:	4a9f      	ldr	r2, [pc, #636]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 806481e:	430b      	orrs	r3, r1
 8064820:	6593      	str	r3, [r2, #88]	@ 0x58
 8064822:	e003      	b.n	806482c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 806482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064834:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8064838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 806483c:	2300      	movs	r3, #0
 806483e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8064842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8064846:	460b      	mov	r3, r1
 8064848:	4313      	orrs	r3, r2
 806484a:	d037      	beq.n	80648bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 806484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8064852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8064856:	d00e      	beq.n	8064876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8064858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 806485c:	d816      	bhi.n	806488c <HAL_RCCEx_PeriphCLKConfig+0x700>
 806485e:	2b00      	cmp	r3, #0
 8064860:	d018      	beq.n	8064894 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8064862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8064866:	d111      	bne.n	806488c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8064868:	4b8c      	ldr	r3, [pc, #560]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 806486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806486c:	4a8b      	ldr	r2, [pc, #556]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 806486e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8064872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8064874:	e00f      	b.n	8064896 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8064876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806487a:	3308      	adds	r3, #8
 806487c:	2101      	movs	r1, #1
 806487e:	4618      	mov	r0, r3
 8064880:	f002 f81e 	bl	80668c0 <RCCEx_PLL2_Config>
 8064884:	4603      	mov	r3, r0
 8064886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 806488a:	e004      	b.n	8064896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806488c:	2301      	movs	r3, #1
 806488e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064892:	e000      	b.n	8064896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8064894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806489a:	2b00      	cmp	r3, #0
 806489c:	d10a      	bne.n	80648b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 806489e:	4b7f      	ldr	r3, [pc, #508]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80648a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80648a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80648a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80648aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80648ac:	4a7b      	ldr	r2, [pc, #492]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80648ae:	430b      	orrs	r3, r1
 80648b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80648b2:	e003      	b.n	80648bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80648b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80648b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80648bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80648c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80648c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80648c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80648cc:	2300      	movs	r3, #0
 80648ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80648d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80648d6:	460b      	mov	r3, r1
 80648d8:	4313      	orrs	r3, r2
 80648da:	d039      	beq.n	8064950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80648dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80648e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80648e2:	2b03      	cmp	r3, #3
 80648e4:	d81c      	bhi.n	8064920 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80648e6:	a201      	add	r2, pc, #4	@ (adr r2, 80648ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80648e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80648ec:	08064929 	.word	0x08064929
 80648f0:	080648fd 	.word	0x080648fd
 80648f4:	0806490b 	.word	0x0806490b
 80648f8:	08064929 	.word	0x08064929
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80648fc:	4b67      	ldr	r3, [pc, #412]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80648fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064900:	4a66      	ldr	r2, [pc, #408]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8064906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8064908:	e00f      	b.n	806492a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 806490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806490e:	3308      	adds	r3, #8
 8064910:	2102      	movs	r1, #2
 8064912:	4618      	mov	r0, r3
 8064914:	f001 ffd4 	bl	80668c0 <RCCEx_PLL2_Config>
 8064918:	4603      	mov	r3, r0
 806491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 806491e:	e004      	b.n	806492a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8064920:	2301      	movs	r3, #1
 8064922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064926:	e000      	b.n	806492a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8064928:	bf00      	nop
    }

    if (ret == HAL_OK)
 806492a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806492e:	2b00      	cmp	r3, #0
 8064930:	d10a      	bne.n	8064948 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8064932:	4b5a      	ldr	r3, [pc, #360]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8064936:	f023 0103 	bic.w	r1, r3, #3
 806493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806493e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8064940:	4a56      	ldr	r2, [pc, #344]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064942:	430b      	orrs	r3, r1
 8064944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8064946:	e003      	b.n	8064950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806494c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8064950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064958:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 806495c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8064960:	2300      	movs	r3, #0
 8064962:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8064966:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 806496a:	460b      	mov	r3, r1
 806496c:	4313      	orrs	r3, r2
 806496e:	f000 809f 	beq.w	8064ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8064972:	4b4b      	ldr	r3, [pc, #300]	@ (8064aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8064974:	681b      	ldr	r3, [r3, #0]
 8064976:	4a4a      	ldr	r2, [pc, #296]	@ (8064aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8064978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 806497c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 806497e:	f7fb fd85 	bl	806048c <HAL_GetTick>
 8064982:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8064986:	e00b      	b.n	80649a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8064988:	f7fb fd80 	bl	806048c <HAL_GetTick>
 806498c:	4602      	mov	r2, r0
 806498e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8064992:	1ad3      	subs	r3, r2, r3
 8064994:	2b64      	cmp	r3, #100	@ 0x64
 8064996:	d903      	bls.n	80649a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8064998:	2303      	movs	r3, #3
 806499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 806499e:	e005      	b.n	80649ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80649a0:	4b3f      	ldr	r3, [pc, #252]	@ (8064aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80649a2:	681b      	ldr	r3, [r3, #0]
 80649a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80649a8:	2b00      	cmp	r3, #0
 80649aa:	d0ed      	beq.n	8064988 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80649ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80649b0:	2b00      	cmp	r3, #0
 80649b2:	d179      	bne.n	8064aa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80649b4:	4b39      	ldr	r3, [pc, #228]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80649b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80649bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80649c0:	4053      	eors	r3, r2
 80649c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80649c6:	2b00      	cmp	r3, #0
 80649c8:	d015      	beq.n	80649f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80649ca:	4b34      	ldr	r3, [pc, #208]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80649ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80649d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80649d6:	4b31      	ldr	r3, [pc, #196]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80649da:	4a30      	ldr	r2, [pc, #192]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80649e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80649e2:	4b2e      	ldr	r3, [pc, #184]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80649e6:	4a2d      	ldr	r2, [pc, #180]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80649ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80649ee:	4a2b      	ldr	r2, [pc, #172]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80649f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80649f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80649f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80649fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80649fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8064a02:	d118      	bne.n	8064a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8064a04:	f7fb fd42 	bl	806048c <HAL_GetTick>
 8064a08:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8064a0c:	e00d      	b.n	8064a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8064a0e:	f7fb fd3d 	bl	806048c <HAL_GetTick>
 8064a12:	4602      	mov	r2, r0
 8064a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8064a18:	1ad2      	subs	r2, r2, r3
 8064a1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8064a1e:	429a      	cmp	r2, r3
 8064a20:	d903      	bls.n	8064a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8064a22:	2303      	movs	r3, #3
 8064a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8064a28:	e005      	b.n	8064a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8064a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8064a2e:	f003 0302 	and.w	r3, r3, #2
 8064a32:	2b00      	cmp	r3, #0
 8064a34:	d0eb      	beq.n	8064a0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8064a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064a3a:	2b00      	cmp	r3, #0
 8064a3c:	d129      	bne.n	8064a92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8064a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8064a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8064a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8064a4e:	d10e      	bne.n	8064a6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8064a50:	4b12      	ldr	r3, [pc, #72]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a52:	691b      	ldr	r3, [r3, #16]
 8064a54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8064a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8064a60:	091a      	lsrs	r2, r3, #4
 8064a62:	4b10      	ldr	r3, [pc, #64]	@ (8064aa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8064a64:	4013      	ands	r3, r2
 8064a66:	4a0d      	ldr	r2, [pc, #52]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a68:	430b      	orrs	r3, r1
 8064a6a:	6113      	str	r3, [r2, #16]
 8064a6c:	e005      	b.n	8064a7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8064a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a70:	691b      	ldr	r3, [r3, #16]
 8064a72:	4a0a      	ldr	r2, [pc, #40]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8064a78:	6113      	str	r3, [r2, #16]
 8064a7a:	4b08      	ldr	r3, [pc, #32]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8064a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8064a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8064a8a:	4a04      	ldr	r2, [pc, #16]	@ (8064a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8064a8c:	430b      	orrs	r3, r1
 8064a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8064a90:	e00e      	b.n	8064ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8064a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8064a9a:	e009      	b.n	8064ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8064a9c:	58024400 	.word	0x58024400
 8064aa0:	58024800 	.word	0x58024800
 8064aa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8064ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064ab8:	f002 0301 	and.w	r3, r2, #1
 8064abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8064ac0:	2300      	movs	r3, #0
 8064ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8064ac6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8064aca:	460b      	mov	r3, r1
 8064acc:	4313      	orrs	r3, r2
 8064ace:	f000 8089 	beq.w	8064be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8064ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8064ad8:	2b28      	cmp	r3, #40	@ 0x28
 8064ada:	d86b      	bhi.n	8064bb4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8064adc:	a201      	add	r2, pc, #4	@ (adr r2, 8064ae4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8064ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064ae2:	bf00      	nop
 8064ae4:	08064bbd 	.word	0x08064bbd
 8064ae8:	08064bb5 	.word	0x08064bb5
 8064aec:	08064bb5 	.word	0x08064bb5
 8064af0:	08064bb5 	.word	0x08064bb5
 8064af4:	08064bb5 	.word	0x08064bb5
 8064af8:	08064bb5 	.word	0x08064bb5
 8064afc:	08064bb5 	.word	0x08064bb5
 8064b00:	08064bb5 	.word	0x08064bb5
 8064b04:	08064b89 	.word	0x08064b89
 8064b08:	08064bb5 	.word	0x08064bb5
 8064b0c:	08064bb5 	.word	0x08064bb5
 8064b10:	08064bb5 	.word	0x08064bb5
 8064b14:	08064bb5 	.word	0x08064bb5
 8064b18:	08064bb5 	.word	0x08064bb5
 8064b1c:	08064bb5 	.word	0x08064bb5
 8064b20:	08064bb5 	.word	0x08064bb5
 8064b24:	08064b9f 	.word	0x08064b9f
 8064b28:	08064bb5 	.word	0x08064bb5
 8064b2c:	08064bb5 	.word	0x08064bb5
 8064b30:	08064bb5 	.word	0x08064bb5
 8064b34:	08064bb5 	.word	0x08064bb5
 8064b38:	08064bb5 	.word	0x08064bb5
 8064b3c:	08064bb5 	.word	0x08064bb5
 8064b40:	08064bb5 	.word	0x08064bb5
 8064b44:	08064bbd 	.word	0x08064bbd
 8064b48:	08064bb5 	.word	0x08064bb5
 8064b4c:	08064bb5 	.word	0x08064bb5
 8064b50:	08064bb5 	.word	0x08064bb5
 8064b54:	08064bb5 	.word	0x08064bb5
 8064b58:	08064bb5 	.word	0x08064bb5
 8064b5c:	08064bb5 	.word	0x08064bb5
 8064b60:	08064bb5 	.word	0x08064bb5
 8064b64:	08064bbd 	.word	0x08064bbd
 8064b68:	08064bb5 	.word	0x08064bb5
 8064b6c:	08064bb5 	.word	0x08064bb5
 8064b70:	08064bb5 	.word	0x08064bb5
 8064b74:	08064bb5 	.word	0x08064bb5
 8064b78:	08064bb5 	.word	0x08064bb5
 8064b7c:	08064bb5 	.word	0x08064bb5
 8064b80:	08064bb5 	.word	0x08064bb5
 8064b84:	08064bbd 	.word	0x08064bbd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8064b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064b8c:	3308      	adds	r3, #8
 8064b8e:	2101      	movs	r1, #1
 8064b90:	4618      	mov	r0, r3
 8064b92:	f001 fe95 	bl	80668c0 <RCCEx_PLL2_Config>
 8064b96:	4603      	mov	r3, r0
 8064b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8064b9c:	e00f      	b.n	8064bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8064b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ba2:	3328      	adds	r3, #40	@ 0x28
 8064ba4:	2101      	movs	r1, #1
 8064ba6:	4618      	mov	r0, r3
 8064ba8:	f001 ff3c 	bl	8066a24 <RCCEx_PLL3_Config>
 8064bac:	4603      	mov	r3, r0
 8064bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8064bb2:	e004      	b.n	8064bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064bb4:	2301      	movs	r3, #1
 8064bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064bba:	e000      	b.n	8064bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8064bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064bc2:	2b00      	cmp	r3, #0
 8064bc4:	d10a      	bne.n	8064bdc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8064bc6:	4bbf      	ldr	r3, [pc, #764]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064bca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8064bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8064bd4:	4abb      	ldr	r2, [pc, #748]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064bd6:	430b      	orrs	r3, r1
 8064bd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8064bda:	e003      	b.n	8064be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064be0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8064be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064bec:	f002 0302 	and.w	r3, r2, #2
 8064bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8064bf4:	2300      	movs	r3, #0
 8064bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8064bfa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8064bfe:	460b      	mov	r3, r1
 8064c00:	4313      	orrs	r3, r2
 8064c02:	d041      	beq.n	8064c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8064c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8064c0a:	2b05      	cmp	r3, #5
 8064c0c:	d824      	bhi.n	8064c58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8064c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8064c14 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8064c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064c14:	08064c61 	.word	0x08064c61
 8064c18:	08064c2d 	.word	0x08064c2d
 8064c1c:	08064c43 	.word	0x08064c43
 8064c20:	08064c61 	.word	0x08064c61
 8064c24:	08064c61 	.word	0x08064c61
 8064c28:	08064c61 	.word	0x08064c61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8064c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064c30:	3308      	adds	r3, #8
 8064c32:	2101      	movs	r1, #1
 8064c34:	4618      	mov	r0, r3
 8064c36:	f001 fe43 	bl	80668c0 <RCCEx_PLL2_Config>
 8064c3a:	4603      	mov	r3, r0
 8064c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8064c40:	e00f      	b.n	8064c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8064c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064c46:	3328      	adds	r3, #40	@ 0x28
 8064c48:	2101      	movs	r1, #1
 8064c4a:	4618      	mov	r0, r3
 8064c4c:	f001 feea 	bl	8066a24 <RCCEx_PLL3_Config>
 8064c50:	4603      	mov	r3, r0
 8064c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8064c56:	e004      	b.n	8064c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064c58:	2301      	movs	r3, #1
 8064c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064c5e:	e000      	b.n	8064c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8064c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064c66:	2b00      	cmp	r3, #0
 8064c68:	d10a      	bne.n	8064c80 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8064c6a:	4b96      	ldr	r3, [pc, #600]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064c6e:	f023 0107 	bic.w	r1, r3, #7
 8064c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8064c78:	4a92      	ldr	r2, [pc, #584]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064c7a:	430b      	orrs	r3, r1
 8064c7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8064c7e:	e003      	b.n	8064c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8064c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064c90:	f002 0304 	and.w	r3, r2, #4
 8064c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8064c98:	2300      	movs	r3, #0
 8064c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8064c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8064ca2:	460b      	mov	r3, r1
 8064ca4:	4313      	orrs	r3, r2
 8064ca6:	d044      	beq.n	8064d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8064ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8064cb0:	2b05      	cmp	r3, #5
 8064cb2:	d825      	bhi.n	8064d00 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8064cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8064cbc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8064cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064cba:	bf00      	nop
 8064cbc:	08064d09 	.word	0x08064d09
 8064cc0:	08064cd5 	.word	0x08064cd5
 8064cc4:	08064ceb 	.word	0x08064ceb
 8064cc8:	08064d09 	.word	0x08064d09
 8064ccc:	08064d09 	.word	0x08064d09
 8064cd0:	08064d09 	.word	0x08064d09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8064cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064cd8:	3308      	adds	r3, #8
 8064cda:	2101      	movs	r1, #1
 8064cdc:	4618      	mov	r0, r3
 8064cde:	f001 fdef 	bl	80668c0 <RCCEx_PLL2_Config>
 8064ce2:	4603      	mov	r3, r0
 8064ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8064ce8:	e00f      	b.n	8064d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8064cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064cee:	3328      	adds	r3, #40	@ 0x28
 8064cf0:	2101      	movs	r1, #1
 8064cf2:	4618      	mov	r0, r3
 8064cf4:	f001 fe96 	bl	8066a24 <RCCEx_PLL3_Config>
 8064cf8:	4603      	mov	r3, r0
 8064cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8064cfe:	e004      	b.n	8064d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064d00:	2301      	movs	r3, #1
 8064d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064d06:	e000      	b.n	8064d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8064d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064d0e:	2b00      	cmp	r3, #0
 8064d10:	d10b      	bne.n	8064d2a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8064d12:	4b6c      	ldr	r3, [pc, #432]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8064d16:	f023 0107 	bic.w	r1, r3, #7
 8064d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8064d22:	4a68      	ldr	r2, [pc, #416]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064d24:	430b      	orrs	r3, r1
 8064d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8064d28:	e003      	b.n	8064d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8064d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064d3a:	f002 0320 	and.w	r3, r2, #32
 8064d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8064d42:	2300      	movs	r3, #0
 8064d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8064d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8064d4c:	460b      	mov	r3, r1
 8064d4e:	4313      	orrs	r3, r2
 8064d50:	d055      	beq.n	8064dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8064d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8064d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8064d5e:	d033      	beq.n	8064dc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8064d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8064d64:	d82c      	bhi.n	8064dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8064d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8064d6a:	d02f      	beq.n	8064dcc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8064d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8064d70:	d826      	bhi.n	8064dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8064d72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8064d76:	d02b      	beq.n	8064dd0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8064d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8064d7c:	d820      	bhi.n	8064dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8064d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8064d82:	d012      	beq.n	8064daa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8064d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8064d88:	d81a      	bhi.n	8064dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8064d8a:	2b00      	cmp	r3, #0
 8064d8c:	d022      	beq.n	8064dd4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8064d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8064d92:	d115      	bne.n	8064dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064d98:	3308      	adds	r3, #8
 8064d9a:	2100      	movs	r1, #0
 8064d9c:	4618      	mov	r0, r3
 8064d9e:	f001 fd8f 	bl	80668c0 <RCCEx_PLL2_Config>
 8064da2:	4603      	mov	r3, r0
 8064da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8064da8:	e015      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8064daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064dae:	3328      	adds	r3, #40	@ 0x28
 8064db0:	2102      	movs	r1, #2
 8064db2:	4618      	mov	r0, r3
 8064db4:	f001 fe36 	bl	8066a24 <RCCEx_PLL3_Config>
 8064db8:	4603      	mov	r3, r0
 8064dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8064dbe:	e00a      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064dc0:	2301      	movs	r3, #1
 8064dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064dc6:	e006      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8064dc8:	bf00      	nop
 8064dca:	e004      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8064dcc:	bf00      	nop
 8064dce:	e002      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8064dd0:	bf00      	nop
 8064dd2:	e000      	b.n	8064dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8064dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064dda:	2b00      	cmp	r3, #0
 8064ddc:	d10b      	bne.n	8064df6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8064dde:	4b39      	ldr	r3, [pc, #228]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064de2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8064de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8064dee:	4a35      	ldr	r2, [pc, #212]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064df0:	430b      	orrs	r3, r1
 8064df2:	6553      	str	r3, [r2, #84]	@ 0x54
 8064df4:	e003      	b.n	8064dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8064dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064e06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8064e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8064e0e:	2300      	movs	r3, #0
 8064e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8064e14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8064e18:	460b      	mov	r3, r1
 8064e1a:	4313      	orrs	r3, r2
 8064e1c:	d058      	beq.n	8064ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8064e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8064e26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8064e2a:	d033      	beq.n	8064e94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8064e2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8064e30:	d82c      	bhi.n	8064e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8064e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8064e36:	d02f      	beq.n	8064e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8064e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8064e3c:	d826      	bhi.n	8064e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8064e3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8064e42:	d02b      	beq.n	8064e9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8064e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8064e48:	d820      	bhi.n	8064e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8064e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8064e4e:	d012      	beq.n	8064e76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8064e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8064e54:	d81a      	bhi.n	8064e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8064e56:	2b00      	cmp	r3, #0
 8064e58:	d022      	beq.n	8064ea0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8064e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8064e5e:	d115      	bne.n	8064e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064e64:	3308      	adds	r3, #8
 8064e66:	2100      	movs	r1, #0
 8064e68:	4618      	mov	r0, r3
 8064e6a:	f001 fd29 	bl	80668c0 <RCCEx_PLL2_Config>
 8064e6e:	4603      	mov	r3, r0
 8064e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8064e74:	e015      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8064e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064e7a:	3328      	adds	r3, #40	@ 0x28
 8064e7c:	2102      	movs	r1, #2
 8064e7e:	4618      	mov	r0, r3
 8064e80:	f001 fdd0 	bl	8066a24 <RCCEx_PLL3_Config>
 8064e84:	4603      	mov	r3, r0
 8064e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8064e8a:	e00a      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064e8c:	2301      	movs	r3, #1
 8064e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064e92:	e006      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8064e94:	bf00      	nop
 8064e96:	e004      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8064e98:	bf00      	nop
 8064e9a:	e002      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8064e9c:	bf00      	nop
 8064e9e:	e000      	b.n	8064ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8064ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064ea6:	2b00      	cmp	r3, #0
 8064ea8:	d10e      	bne.n	8064ec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8064eaa:	4b06      	ldr	r3, [pc, #24]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8064eae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8064eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8064eba:	4a02      	ldr	r2, [pc, #8]	@ (8064ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8064ebc:	430b      	orrs	r3, r1
 8064ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8064ec0:	e006      	b.n	8064ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8064ec2:	bf00      	nop
 8064ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8064ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064ed8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8064edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8064ee0:	2300      	movs	r3, #0
 8064ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8064ee6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8064eea:	460b      	mov	r3, r1
 8064eec:	4313      	orrs	r3, r2
 8064eee:	d055      	beq.n	8064f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8064ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8064ef8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8064efc:	d033      	beq.n	8064f66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8064efe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8064f02:	d82c      	bhi.n	8064f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8064f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8064f08:	d02f      	beq.n	8064f6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8064f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8064f0e:	d826      	bhi.n	8064f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8064f10:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8064f14:	d02b      	beq.n	8064f6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8064f16:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8064f1a:	d820      	bhi.n	8064f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8064f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8064f20:	d012      	beq.n	8064f48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8064f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8064f26:	d81a      	bhi.n	8064f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8064f28:	2b00      	cmp	r3, #0
 8064f2a:	d022      	beq.n	8064f72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8064f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8064f30:	d115      	bne.n	8064f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8064f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064f36:	3308      	adds	r3, #8
 8064f38:	2100      	movs	r1, #0
 8064f3a:	4618      	mov	r0, r3
 8064f3c:	f001 fcc0 	bl	80668c0 <RCCEx_PLL2_Config>
 8064f40:	4603      	mov	r3, r0
 8064f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8064f46:	e015      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8064f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064f4c:	3328      	adds	r3, #40	@ 0x28
 8064f4e:	2102      	movs	r1, #2
 8064f50:	4618      	mov	r0, r3
 8064f52:	f001 fd67 	bl	8066a24 <RCCEx_PLL3_Config>
 8064f56:	4603      	mov	r3, r0
 8064f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8064f5c:	e00a      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8064f5e:	2301      	movs	r3, #1
 8064f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8064f64:	e006      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8064f66:	bf00      	nop
 8064f68:	e004      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8064f6a:	bf00      	nop
 8064f6c:	e002      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8064f6e:	bf00      	nop
 8064f70:	e000      	b.n	8064f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8064f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8064f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064f78:	2b00      	cmp	r3, #0
 8064f7a:	d10b      	bne.n	8064f94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8064f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8064f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8064f80:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8064f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8064f8c:	4a9d      	ldr	r2, [pc, #628]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8064f8e:	430b      	orrs	r3, r1
 8064f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8064f92:	e003      	b.n	8064f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8064f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8064f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8064f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064fa4:	f002 0308 	and.w	r3, r2, #8
 8064fa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8064fac:	2300      	movs	r3, #0
 8064fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8064fb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8064fb6:	460b      	mov	r3, r1
 8064fb8:	4313      	orrs	r3, r2
 8064fba:	d01e      	beq.n	8064ffa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8064fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8064fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8064fc8:	d10c      	bne.n	8064fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8064fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064fce:	3328      	adds	r3, #40	@ 0x28
 8064fd0:	2102      	movs	r1, #2
 8064fd2:	4618      	mov	r0, r3
 8064fd4:	f001 fd26 	bl	8066a24 <RCCEx_PLL3_Config>
 8064fd8:	4603      	mov	r3, r0
 8064fda:	2b00      	cmp	r3, #0
 8064fdc:	d002      	beq.n	8064fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8064fde:	2301      	movs	r3, #1
 8064fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8064fe4:	4b87      	ldr	r3, [pc, #540]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8064fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064fe8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8064fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8064ff4:	4a83      	ldr	r2, [pc, #524]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8064ff6:	430b      	orrs	r3, r1
 8064ff8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8064ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8064ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065002:	f002 0310 	and.w	r3, r2, #16
 8065006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 806500a:	2300      	movs	r3, #0
 806500c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8065010:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8065014:	460b      	mov	r3, r1
 8065016:	4313      	orrs	r3, r2
 8065018:	d01e      	beq.n	8065058 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 806501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806501e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8065022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065026:	d10c      	bne.n	8065042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8065028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806502c:	3328      	adds	r3, #40	@ 0x28
 806502e:	2102      	movs	r1, #2
 8065030:	4618      	mov	r0, r3
 8065032:	f001 fcf7 	bl	8066a24 <RCCEx_PLL3_Config>
 8065036:	4603      	mov	r3, r0
 8065038:	2b00      	cmp	r3, #0
 806503a:	d002      	beq.n	8065042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 806503c:	2301      	movs	r3, #1
 806503e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8065042:	4b70      	ldr	r3, [pc, #448]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8065044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8065046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 806504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806504e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8065052:	4a6c      	ldr	r2, [pc, #432]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8065054:	430b      	orrs	r3, r1
 8065056:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8065058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065060:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8065064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8065068:	2300      	movs	r3, #0
 806506a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 806506e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8065072:	460b      	mov	r3, r1
 8065074:	4313      	orrs	r3, r2
 8065076:	d03e      	beq.n	80650f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8065078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806507c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8065080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065084:	d022      	beq.n	80650cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8065086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 806508a:	d81b      	bhi.n	80650c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 806508c:	2b00      	cmp	r3, #0
 806508e:	d003      	beq.n	8065098 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8065090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8065094:	d00b      	beq.n	80650ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8065096:	e015      	b.n	80650c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8065098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806509c:	3308      	adds	r3, #8
 806509e:	2100      	movs	r1, #0
 80650a0:	4618      	mov	r0, r3
 80650a2:	f001 fc0d 	bl	80668c0 <RCCEx_PLL2_Config>
 80650a6:	4603      	mov	r3, r0
 80650a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80650ac:	e00f      	b.n	80650ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80650ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80650b2:	3328      	adds	r3, #40	@ 0x28
 80650b4:	2102      	movs	r1, #2
 80650b6:	4618      	mov	r0, r3
 80650b8:	f001 fcb4 	bl	8066a24 <RCCEx_PLL3_Config>
 80650bc:	4603      	mov	r3, r0
 80650be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80650c2:	e004      	b.n	80650ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80650c4:	2301      	movs	r3, #1
 80650c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80650ca:	e000      	b.n	80650ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80650cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80650ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80650d2:	2b00      	cmp	r3, #0
 80650d4:	d10b      	bne.n	80650ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80650d6:	4b4b      	ldr	r3, [pc, #300]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80650d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80650da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80650de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80650e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80650e6:	4a47      	ldr	r2, [pc, #284]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80650e8:	430b      	orrs	r3, r1
 80650ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80650ec:	e003      	b.n	80650f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80650ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80650f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80650f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80650fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80650fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8065102:	67bb      	str	r3, [r7, #120]	@ 0x78
 8065104:	2300      	movs	r3, #0
 8065106:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8065108:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 806510c:	460b      	mov	r3, r1
 806510e:	4313      	orrs	r3, r2
 8065110:	d03b      	beq.n	806518a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8065112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 806511a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 806511e:	d01f      	beq.n	8065160 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8065120:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8065124:	d818      	bhi.n	8065158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8065126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 806512a:	d003      	beq.n	8065134 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 806512c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8065130:	d007      	beq.n	8065142 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8065132:	e011      	b.n	8065158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8065134:	4b33      	ldr	r3, [pc, #204]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8065136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8065138:	4a32      	ldr	r2, [pc, #200]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 806513a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 806513e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8065140:	e00f      	b.n	8065162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8065142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065146:	3328      	adds	r3, #40	@ 0x28
 8065148:	2101      	movs	r1, #1
 806514a:	4618      	mov	r0, r3
 806514c:	f001 fc6a 	bl	8066a24 <RCCEx_PLL3_Config>
 8065150:	4603      	mov	r3, r0
 8065152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8065156:	e004      	b.n	8065162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8065158:	2301      	movs	r3, #1
 806515a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 806515e:	e000      	b.n	8065162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8065160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8065162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065166:	2b00      	cmp	r3, #0
 8065168:	d10b      	bne.n	8065182 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 806516a:	4b26      	ldr	r3, [pc, #152]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 806516c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806516e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8065172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 806517a:	4a22      	ldr	r2, [pc, #136]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 806517c:	430b      	orrs	r3, r1
 806517e:	6553      	str	r3, [r2, #84]	@ 0x54
 8065180:	e003      	b.n	806518a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8065182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 806518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065192:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8065196:	673b      	str	r3, [r7, #112]	@ 0x70
 8065198:	2300      	movs	r3, #0
 806519a:	677b      	str	r3, [r7, #116]	@ 0x74
 806519c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80651a0:	460b      	mov	r3, r1
 80651a2:	4313      	orrs	r3, r2
 80651a4:	d034      	beq.n	8065210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80651a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80651aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80651ac:	2b00      	cmp	r3, #0
 80651ae:	d003      	beq.n	80651b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80651b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80651b4:	d007      	beq.n	80651c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80651b6:	e011      	b.n	80651dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80651b8:	4b12      	ldr	r3, [pc, #72]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80651ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80651bc:	4a11      	ldr	r2, [pc, #68]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80651be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80651c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80651c4:	e00e      	b.n	80651e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80651c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80651ca:	3308      	adds	r3, #8
 80651cc:	2102      	movs	r1, #2
 80651ce:	4618      	mov	r0, r3
 80651d0:	f001 fb76 	bl	80668c0 <RCCEx_PLL2_Config>
 80651d4:	4603      	mov	r3, r0
 80651d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80651da:	e003      	b.n	80651e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80651dc:	2301      	movs	r3, #1
 80651de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80651e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80651e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80651e8:	2b00      	cmp	r3, #0
 80651ea:	d10d      	bne.n	8065208 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80651ec:	4b05      	ldr	r3, [pc, #20]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80651ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80651f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80651f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80651f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80651fa:	4a02      	ldr	r2, [pc, #8]	@ (8065204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80651fc:	430b      	orrs	r3, r1
 80651fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8065200:	e006      	b.n	8065210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8065202:	bf00      	nop
 8065204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8065208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806520c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8065210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065218:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 806521c:	66bb      	str	r3, [r7, #104]	@ 0x68
 806521e:	2300      	movs	r3, #0
 8065220:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8065222:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8065226:	460b      	mov	r3, r1
 8065228:	4313      	orrs	r3, r2
 806522a:	d00c      	beq.n	8065246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 806522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065230:	3328      	adds	r3, #40	@ 0x28
 8065232:	2102      	movs	r1, #2
 8065234:	4618      	mov	r0, r3
 8065236:	f001 fbf5 	bl	8066a24 <RCCEx_PLL3_Config>
 806523a:	4603      	mov	r3, r0
 806523c:	2b00      	cmp	r3, #0
 806523e:	d002      	beq.n	8065246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8065240:	2301      	movs	r3, #1
 8065242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8065246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806524e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8065252:	663b      	str	r3, [r7, #96]	@ 0x60
 8065254:	2300      	movs	r3, #0
 8065256:	667b      	str	r3, [r7, #100]	@ 0x64
 8065258:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 806525c:	460b      	mov	r3, r1
 806525e:	4313      	orrs	r3, r2
 8065260:	d038      	beq.n	80652d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8065262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 806526a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 806526e:	d018      	beq.n	80652a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8065270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8065274:	d811      	bhi.n	806529a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8065276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806527a:	d014      	beq.n	80652a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 806527c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8065280:	d80b      	bhi.n	806529a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8065282:	2b00      	cmp	r3, #0
 8065284:	d011      	beq.n	80652aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8065286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806528a:	d106      	bne.n	806529a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 806528c:	4bc3      	ldr	r3, [pc, #780]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 806528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8065290:	4ac2      	ldr	r2, [pc, #776]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8065296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8065298:	e008      	b.n	80652ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806529a:	2301      	movs	r3, #1
 806529c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80652a0:	e004      	b.n	80652ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80652a2:	bf00      	nop
 80652a4:	e002      	b.n	80652ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80652a6:	bf00      	nop
 80652a8:	e000      	b.n	80652ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80652aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80652ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80652b0:	2b00      	cmp	r3, #0
 80652b2:	d10b      	bne.n	80652cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80652b4:	4bb9      	ldr	r3, [pc, #740]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80652b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80652b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80652bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80652c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80652c4:	4ab5      	ldr	r2, [pc, #724]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80652c6:	430b      	orrs	r3, r1
 80652c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80652ca:	e003      	b.n	80652d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80652cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80652d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80652d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80652d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80652dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80652e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80652e2:	2300      	movs	r3, #0
 80652e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80652e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80652ea:	460b      	mov	r3, r1
 80652ec:	4313      	orrs	r3, r2
 80652ee:	d009      	beq.n	8065304 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80652f0:	4baa      	ldr	r3, [pc, #680]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80652f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80652f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80652f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80652fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80652fe:	4aa7      	ldr	r2, [pc, #668]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065300:	430b      	orrs	r3, r1
 8065302:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8065304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065308:	e9d3 2300 	ldrd	r2, r3, [r3]
 806530c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8065310:	653b      	str	r3, [r7, #80]	@ 0x50
 8065312:	2300      	movs	r3, #0
 8065314:	657b      	str	r3, [r7, #84]	@ 0x54
 8065316:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 806531a:	460b      	mov	r3, r1
 806531c:	4313      	orrs	r3, r2
 806531e:	d00a      	beq.n	8065336 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8065320:	4b9e      	ldr	r3, [pc, #632]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065322:	691b      	ldr	r3, [r3, #16]
 8065324:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8065328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806532c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8065330:	4a9a      	ldr	r2, [pc, #616]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065332:	430b      	orrs	r3, r1
 8065334:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8065336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806533e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8065342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8065344:	2300      	movs	r3, #0
 8065346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8065348:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 806534c:	460b      	mov	r3, r1
 806534e:	4313      	orrs	r3, r2
 8065350:	d009      	beq.n	8065366 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8065352:	4b92      	ldr	r3, [pc, #584]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8065356:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 806535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8065360:	4a8e      	ldr	r2, [pc, #568]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065362:	430b      	orrs	r3, r1
 8065364:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8065366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 806536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806536e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8065372:	643b      	str	r3, [r7, #64]	@ 0x40
 8065374:	2300      	movs	r3, #0
 8065376:	647b      	str	r3, [r7, #68]	@ 0x44
 8065378:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 806537c:	460b      	mov	r3, r1
 806537e:	4313      	orrs	r3, r2
 8065380:	d00e      	beq.n	80653a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8065382:	4b86      	ldr	r3, [pc, #536]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065384:	691b      	ldr	r3, [r3, #16]
 8065386:	4a85      	ldr	r2, [pc, #532]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065388:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 806538c:	6113      	str	r3, [r2, #16]
 806538e:	4b83      	ldr	r3, [pc, #524]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8065390:	6919      	ldr	r1, [r3, #16]
 8065392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 806539a:	4a80      	ldr	r2, [pc, #512]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 806539c:	430b      	orrs	r3, r1
 806539e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80653a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80653a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80653a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80653ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80653ae:	2300      	movs	r3, #0
 80653b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80653b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80653b6:	460b      	mov	r3, r1
 80653b8:	4313      	orrs	r3, r2
 80653ba:	d009      	beq.n	80653d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80653bc:	4b77      	ldr	r3, [pc, #476]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80653be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80653c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80653c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80653c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80653ca:	4a74      	ldr	r2, [pc, #464]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80653cc:	430b      	orrs	r3, r1
 80653ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80653d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80653d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80653d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80653dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80653de:	2300      	movs	r3, #0
 80653e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80653e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80653e6:	460b      	mov	r3, r1
 80653e8:	4313      	orrs	r3, r2
 80653ea:	d00a      	beq.n	8065402 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80653ec:	4b6b      	ldr	r3, [pc, #428]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80653ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80653f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80653f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80653f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80653fc:	4a67      	ldr	r2, [pc, #412]	@ (806559c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80653fe:	430b      	orrs	r3, r1
 8065400:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8065402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065406:	e9d3 2300 	ldrd	r2, r3, [r3]
 806540a:	2100      	movs	r1, #0
 806540c:	62b9      	str	r1, [r7, #40]	@ 0x28
 806540e:	f003 0301 	and.w	r3, r3, #1
 8065412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8065414:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8065418:	460b      	mov	r3, r1
 806541a:	4313      	orrs	r3, r2
 806541c:	d011      	beq.n	8065442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 806541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065422:	3308      	adds	r3, #8
 8065424:	2100      	movs	r1, #0
 8065426:	4618      	mov	r0, r3
 8065428:	f001 fa4a 	bl	80668c0 <RCCEx_PLL2_Config>
 806542c:	4603      	mov	r3, r0
 806542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8065432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065436:	2b00      	cmp	r3, #0
 8065438:	d003      	beq.n	8065442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 806543a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806543e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8065442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065446:	e9d3 2300 	ldrd	r2, r3, [r3]
 806544a:	2100      	movs	r1, #0
 806544c:	6239      	str	r1, [r7, #32]
 806544e:	f003 0302 	and.w	r3, r3, #2
 8065452:	627b      	str	r3, [r7, #36]	@ 0x24
 8065454:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8065458:	460b      	mov	r3, r1
 806545a:	4313      	orrs	r3, r2
 806545c:	d011      	beq.n	8065482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 806545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065462:	3308      	adds	r3, #8
 8065464:	2101      	movs	r1, #1
 8065466:	4618      	mov	r0, r3
 8065468:	f001 fa2a 	bl	80668c0 <RCCEx_PLL2_Config>
 806546c:	4603      	mov	r3, r0
 806546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8065472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065476:	2b00      	cmp	r3, #0
 8065478:	d003      	beq.n	8065482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 806547a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806547e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8065482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065486:	e9d3 2300 	ldrd	r2, r3, [r3]
 806548a:	2100      	movs	r1, #0
 806548c:	61b9      	str	r1, [r7, #24]
 806548e:	f003 0304 	and.w	r3, r3, #4
 8065492:	61fb      	str	r3, [r7, #28]
 8065494:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8065498:	460b      	mov	r3, r1
 806549a:	4313      	orrs	r3, r2
 806549c:	d011      	beq.n	80654c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 806549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80654a2:	3308      	adds	r3, #8
 80654a4:	2102      	movs	r1, #2
 80654a6:	4618      	mov	r0, r3
 80654a8:	f001 fa0a 	bl	80668c0 <RCCEx_PLL2_Config>
 80654ac:	4603      	mov	r3, r0
 80654ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80654b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80654b6:	2b00      	cmp	r3, #0
 80654b8:	d003      	beq.n	80654c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80654ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80654be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80654c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80654c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80654ca:	2100      	movs	r1, #0
 80654cc:	6139      	str	r1, [r7, #16]
 80654ce:	f003 0308 	and.w	r3, r3, #8
 80654d2:	617b      	str	r3, [r7, #20]
 80654d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80654d8:	460b      	mov	r3, r1
 80654da:	4313      	orrs	r3, r2
 80654dc:	d011      	beq.n	8065502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80654de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80654e2:	3328      	adds	r3, #40	@ 0x28
 80654e4:	2100      	movs	r1, #0
 80654e6:	4618      	mov	r0, r3
 80654e8:	f001 fa9c 	bl	8066a24 <RCCEx_PLL3_Config>
 80654ec:	4603      	mov	r3, r0
 80654ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80654f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80654f6:	2b00      	cmp	r3, #0
 80654f8:	d003      	beq.n	8065502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80654fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80654fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8065502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065506:	e9d3 2300 	ldrd	r2, r3, [r3]
 806550a:	2100      	movs	r1, #0
 806550c:	60b9      	str	r1, [r7, #8]
 806550e:	f003 0310 	and.w	r3, r3, #16
 8065512:	60fb      	str	r3, [r7, #12]
 8065514:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8065518:	460b      	mov	r3, r1
 806551a:	4313      	orrs	r3, r2
 806551c:	d011      	beq.n	8065542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 806551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065522:	3328      	adds	r3, #40	@ 0x28
 8065524:	2101      	movs	r1, #1
 8065526:	4618      	mov	r0, r3
 8065528:	f001 fa7c 	bl	8066a24 <RCCEx_PLL3_Config>
 806552c:	4603      	mov	r3, r0
 806552e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8065532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065536:	2b00      	cmp	r3, #0
 8065538:	d003      	beq.n	8065542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 806553a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806553e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8065542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065546:	e9d3 2300 	ldrd	r2, r3, [r3]
 806554a:	2100      	movs	r1, #0
 806554c:	6039      	str	r1, [r7, #0]
 806554e:	f003 0320 	and.w	r3, r3, #32
 8065552:	607b      	str	r3, [r7, #4]
 8065554:	e9d7 1200 	ldrd	r1, r2, [r7]
 8065558:	460b      	mov	r3, r1
 806555a:	4313      	orrs	r3, r2
 806555c:	d011      	beq.n	8065582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 806555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8065562:	3328      	adds	r3, #40	@ 0x28
 8065564:	2102      	movs	r1, #2
 8065566:	4618      	mov	r0, r3
 8065568:	f001 fa5c 	bl	8066a24 <RCCEx_PLL3_Config>
 806556c:	4603      	mov	r3, r0
 806556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8065572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8065576:	2b00      	cmp	r3, #0
 8065578:	d003      	beq.n	8065582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 806557a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 806557e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8065582:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8065586:	2b00      	cmp	r3, #0
 8065588:	d101      	bne.n	806558e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 806558a:	2300      	movs	r3, #0
 806558c:	e000      	b.n	8065590 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 806558e:	2301      	movs	r3, #1
}
 8065590:	4618      	mov	r0, r3
 8065592:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8065596:	46bd      	mov	sp, r7
 8065598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 806559c:	58024400 	.word	0x58024400

080655a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80655a0:	b580      	push	{r7, lr}
 80655a2:	b090      	sub	sp, #64	@ 0x40
 80655a4:	af00      	add	r7, sp, #0
 80655a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80655aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80655ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80655b2:	430b      	orrs	r3, r1
 80655b4:	f040 8094 	bne.w	80656e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80655b8:	4b9e      	ldr	r3, [pc, #632]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80655ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80655bc:	f003 0307 	and.w	r3, r3, #7
 80655c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80655c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80655c4:	2b04      	cmp	r3, #4
 80655c6:	f200 8087 	bhi.w	80656d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80655ca:	a201      	add	r2, pc, #4	@ (adr r2, 80655d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80655cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80655d0:	080655e5 	.word	0x080655e5
 80655d4:	0806560d 	.word	0x0806560d
 80655d8:	08065635 	.word	0x08065635
 80655dc:	080656d1 	.word	0x080656d1
 80655e0:	0806565d 	.word	0x0806565d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80655e4:	4b93      	ldr	r3, [pc, #588]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80655e6:	681b      	ldr	r3, [r3, #0]
 80655e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80655ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80655f0:	d108      	bne.n	8065604 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80655f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80655f6:	4618      	mov	r0, r3
 80655f8:	f001 f810 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80655fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80655fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065600:	f000 bd45 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065604:	2300      	movs	r3, #0
 8065606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065608:	f000 bd41 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 806560c:	4b89      	ldr	r3, [pc, #548]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 806560e:	681b      	ldr	r3, [r3, #0]
 8065610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065618:	d108      	bne.n	806562c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 806561a:	f107 0318 	add.w	r3, r7, #24
 806561e:	4618      	mov	r0, r3
 8065620:	f000 fd54 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8065624:	69bb      	ldr	r3, [r7, #24]
 8065626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065628:	f000 bd31 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 806562c:	2300      	movs	r3, #0
 806562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065630:	f000 bd2d 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065634:	4b7f      	ldr	r3, [pc, #508]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8065636:	681b      	ldr	r3, [r3, #0]
 8065638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 806563c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065640:	d108      	bne.n	8065654 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065642:	f107 030c 	add.w	r3, r7, #12
 8065646:	4618      	mov	r0, r3
 8065648:	f000 fe94 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 806564c:	68fb      	ldr	r3, [r7, #12]
 806564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065650:	f000 bd1d 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065654:	2300      	movs	r3, #0
 8065656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065658:	f000 bd19 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 806565c:	4b75      	ldr	r3, [pc, #468]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 806565e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8065664:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8065666:	4b73      	ldr	r3, [pc, #460]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8065668:	681b      	ldr	r3, [r3, #0]
 806566a:	f003 0304 	and.w	r3, r3, #4
 806566e:	2b04      	cmp	r3, #4
 8065670:	d10c      	bne.n	806568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8065672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065674:	2b00      	cmp	r3, #0
 8065676:	d109      	bne.n	806568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065678:	4b6e      	ldr	r3, [pc, #440]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 806567a:	681b      	ldr	r3, [r3, #0]
 806567c:	08db      	lsrs	r3, r3, #3
 806567e:	f003 0303 	and.w	r3, r3, #3
 8065682:	4a6d      	ldr	r2, [pc, #436]	@ (8065838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8065684:	fa22 f303 	lsr.w	r3, r2, r3
 8065688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 806568a:	e01f      	b.n	80656cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 806568c:	4b69      	ldr	r3, [pc, #420]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 806568e:	681b      	ldr	r3, [r3, #0]
 8065690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065698:	d106      	bne.n	80656a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 806569a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806569c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80656a0:	d102      	bne.n	80656a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80656a2:	4b66      	ldr	r3, [pc, #408]	@ (806583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80656a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80656a6:	e011      	b.n	80656cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80656a8:	4b62      	ldr	r3, [pc, #392]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80656aa:	681b      	ldr	r3, [r3, #0]
 80656ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80656b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80656b4:	d106      	bne.n	80656c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80656b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80656b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80656bc:	d102      	bne.n	80656c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80656be:	4b60      	ldr	r3, [pc, #384]	@ (8065840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80656c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80656c2:	e003      	b.n	80656cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80656c4:	2300      	movs	r3, #0
 80656c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80656c8:	f000 bce1 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80656cc:	f000 bcdf 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80656d0:	4b5c      	ldr	r3, [pc, #368]	@ (8065844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80656d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80656d4:	f000 bcdb 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80656d8:	2300      	movs	r3, #0
 80656da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80656dc:	f000 bcd7 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80656e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80656e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80656e8:	430b      	orrs	r3, r1
 80656ea:	f040 80ad 	bne.w	8065848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80656ee:	4b51      	ldr	r3, [pc, #324]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80656f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80656f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80656f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80656f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80656fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80656fe:	d056      	beq.n	80657ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8065700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065706:	f200 8090 	bhi.w	806582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 806570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806570c:	2bc0      	cmp	r3, #192	@ 0xc0
 806570e:	f000 8088 	beq.w	8065822 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8065712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065714:	2bc0      	cmp	r3, #192	@ 0xc0
 8065716:	f200 8088 	bhi.w	806582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 806571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806571c:	2b80      	cmp	r3, #128	@ 0x80
 806571e:	d032      	beq.n	8065786 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8065720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065722:	2b80      	cmp	r3, #128	@ 0x80
 8065724:	f200 8081 	bhi.w	806582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8065728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806572a:	2b00      	cmp	r3, #0
 806572c:	d003      	beq.n	8065736 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 806572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065730:	2b40      	cmp	r3, #64	@ 0x40
 8065732:	d014      	beq.n	806575e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8065734:	e079      	b.n	806582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8065736:	4b3f      	ldr	r3, [pc, #252]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8065738:	681b      	ldr	r3, [r3, #0]
 806573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 806573e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8065742:	d108      	bne.n	8065756 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8065744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8065748:	4618      	mov	r0, r3
 806574a:	f000 ff67 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 806574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065752:	f000 bc9c 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065756:	2300      	movs	r3, #0
 8065758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806575a:	f000 bc98 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 806575e:	4b35      	ldr	r3, [pc, #212]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8065760:	681b      	ldr	r3, [r3, #0]
 8065762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 806576a:	d108      	bne.n	806577e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 806576c:	f107 0318 	add.w	r3, r7, #24
 8065770:	4618      	mov	r0, r3
 8065772:	f000 fcab 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8065776:	69bb      	ldr	r3, [r7, #24]
 8065778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 806577a:	f000 bc88 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 806577e:	2300      	movs	r3, #0
 8065780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065782:	f000 bc84 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065786:	4b2b      	ldr	r3, [pc, #172]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8065788:	681b      	ldr	r3, [r3, #0]
 806578a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 806578e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065792:	d108      	bne.n	80657a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065794:	f107 030c 	add.w	r3, r7, #12
 8065798:	4618      	mov	r0, r3
 806579a:	f000 fdeb 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 806579e:	68fb      	ldr	r3, [r7, #12]
 80657a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80657a2:	f000 bc74 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80657a6:	2300      	movs	r3, #0
 80657a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80657aa:	f000 bc70 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80657ae:	4b21      	ldr	r3, [pc, #132]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80657b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80657b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80657b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80657b8:	4b1e      	ldr	r3, [pc, #120]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80657ba:	681b      	ldr	r3, [r3, #0]
 80657bc:	f003 0304 	and.w	r3, r3, #4
 80657c0:	2b04      	cmp	r3, #4
 80657c2:	d10c      	bne.n	80657de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80657c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80657c6:	2b00      	cmp	r3, #0
 80657c8:	d109      	bne.n	80657de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80657ca:	4b1a      	ldr	r3, [pc, #104]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80657cc:	681b      	ldr	r3, [r3, #0]
 80657ce:	08db      	lsrs	r3, r3, #3
 80657d0:	f003 0303 	and.w	r3, r3, #3
 80657d4:	4a18      	ldr	r2, [pc, #96]	@ (8065838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80657d6:	fa22 f303 	lsr.w	r3, r2, r3
 80657da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80657dc:	e01f      	b.n	806581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80657de:	4b15      	ldr	r3, [pc, #84]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80657e0:	681b      	ldr	r3, [r3, #0]
 80657e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80657e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80657ea:	d106      	bne.n	80657fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80657ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80657ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80657f2:	d102      	bne.n	80657fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80657f4:	4b11      	ldr	r3, [pc, #68]	@ (806583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80657f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80657f8:	e011      	b.n	806581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80657fa:	4b0e      	ldr	r3, [pc, #56]	@ (8065834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80657fc:	681b      	ldr	r3, [r3, #0]
 80657fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065806:	d106      	bne.n	8065816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8065808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806580a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 806580e:	d102      	bne.n	8065816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8065810:	4b0b      	ldr	r3, [pc, #44]	@ (8065840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8065812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065814:	e003      	b.n	806581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8065816:	2300      	movs	r3, #0
 8065818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 806581a:	f000 bc38 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 806581e:	f000 bc36 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8065822:	4b08      	ldr	r3, [pc, #32]	@ (8065844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8065824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065826:	f000 bc32 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 806582a:	2300      	movs	r3, #0
 806582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806582e:	f000 bc2e 	b.w	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065832:	bf00      	nop
 8065834:	58024400 	.word	0x58024400
 8065838:	03d09000 	.word	0x03d09000
 806583c:	003d0900 	.word	0x003d0900
 8065840:	017d7840 	.word	0x017d7840
 8065844:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8065848:	e9d7 2300 	ldrd	r2, r3, [r7]
 806584c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8065850:	430b      	orrs	r3, r1
 8065852:	f040 809c 	bne.w	806598e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8065856:	4b9e      	ldr	r3, [pc, #632]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806585a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 806585e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8065860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065862:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8065866:	d054      	beq.n	8065912 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8065868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806586a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 806586e:	f200 808b 	bhi.w	8065988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8065872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065874:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8065878:	f000 8083 	beq.w	8065982 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 806587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806587e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8065882:	f200 8081 	bhi.w	8065988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8065886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 806588c:	d02f      	beq.n	80658ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 806588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8065894:	d878      	bhi.n	8065988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8065896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8065898:	2b00      	cmp	r3, #0
 806589a:	d004      	beq.n	80658a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 806589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806589e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80658a2:	d012      	beq.n	80658ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80658a4:	e070      	b.n	8065988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80658a6:	4b8a      	ldr	r3, [pc, #552]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80658a8:	681b      	ldr	r3, [r3, #0]
 80658aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80658ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80658b2:	d107      	bne.n	80658c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80658b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80658b8:	4618      	mov	r0, r3
 80658ba:	f000 feaf 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80658be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80658c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80658c2:	e3e4      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80658c4:	2300      	movs	r3, #0
 80658c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80658c8:	e3e1      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80658ca:	4b81      	ldr	r3, [pc, #516]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80658cc:	681b      	ldr	r3, [r3, #0]
 80658ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80658d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80658d6:	d107      	bne.n	80658e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80658d8:	f107 0318 	add.w	r3, r7, #24
 80658dc:	4618      	mov	r0, r3
 80658de:	f000 fbf5 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80658e2:	69bb      	ldr	r3, [r7, #24]
 80658e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80658e6:	e3d2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80658e8:	2300      	movs	r3, #0
 80658ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80658ec:	e3cf      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80658ee:	4b78      	ldr	r3, [pc, #480]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80658f0:	681b      	ldr	r3, [r3, #0]
 80658f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80658f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80658fa:	d107      	bne.n	806590c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80658fc:	f107 030c 	add.w	r3, r7, #12
 8065900:	4618      	mov	r0, r3
 8065902:	f000 fd37 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8065906:	68fb      	ldr	r3, [r7, #12]
 8065908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 806590a:	e3c0      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 806590c:	2300      	movs	r3, #0
 806590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065910:	e3bd      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8065912:	4b6f      	ldr	r3, [pc, #444]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065916:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 806591a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 806591c:	4b6c      	ldr	r3, [pc, #432]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 806591e:	681b      	ldr	r3, [r3, #0]
 8065920:	f003 0304 	and.w	r3, r3, #4
 8065924:	2b04      	cmp	r3, #4
 8065926:	d10c      	bne.n	8065942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8065928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806592a:	2b00      	cmp	r3, #0
 806592c:	d109      	bne.n	8065942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 806592e:	4b68      	ldr	r3, [pc, #416]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065930:	681b      	ldr	r3, [r3, #0]
 8065932:	08db      	lsrs	r3, r3, #3
 8065934:	f003 0303 	and.w	r3, r3, #3
 8065938:	4a66      	ldr	r2, [pc, #408]	@ (8065ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 806593a:	fa22 f303 	lsr.w	r3, r2, r3
 806593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065940:	e01e      	b.n	8065980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8065942:	4b63      	ldr	r3, [pc, #396]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065944:	681b      	ldr	r3, [r3, #0]
 8065946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806594a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806594e:	d106      	bne.n	806595e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8065950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8065956:	d102      	bne.n	806595e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8065958:	4b5f      	ldr	r3, [pc, #380]	@ (8065ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 806595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 806595c:	e010      	b.n	8065980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 806595e:	4b5c      	ldr	r3, [pc, #368]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065960:	681b      	ldr	r3, [r3, #0]
 8065962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 806596a:	d106      	bne.n	806597a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 806596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806596e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065972:	d102      	bne.n	806597a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8065974:	4b59      	ldr	r3, [pc, #356]	@ (8065adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8065976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065978:	e002      	b.n	8065980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 806597a:	2300      	movs	r3, #0
 806597c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 806597e:	e386      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065980:	e385      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8065982:	4b57      	ldr	r3, [pc, #348]	@ (8065ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8065984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065986:	e382      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8065988:	2300      	movs	r3, #0
 806598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806598c:	e37f      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 806598e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065992:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8065996:	430b      	orrs	r3, r1
 8065998:	f040 80a7 	bne.w	8065aea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 806599c:	4b4c      	ldr	r3, [pc, #304]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 806599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80659a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80659a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80659a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80659ac:	d055      	beq.n	8065a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80659ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80659b4:	f200 8096 	bhi.w	8065ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80659b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80659be:	f000 8084 	beq.w	8065aca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80659c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80659c8:	f200 808c 	bhi.w	8065ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80659cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80659d2:	d030      	beq.n	8065a36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80659d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80659da:	f200 8083 	bhi.w	8065ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80659de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659e0:	2b00      	cmp	r3, #0
 80659e2:	d004      	beq.n	80659ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80659e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80659ea:	d012      	beq.n	8065a12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80659ec:	e07a      	b.n	8065ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80659ee:	4b38      	ldr	r3, [pc, #224]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80659f0:	681b      	ldr	r3, [r3, #0]
 80659f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80659f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80659fa:	d107      	bne.n	8065a0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80659fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8065a00:	4618      	mov	r0, r3
 8065a02:	f000 fe0b 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8065a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065a0a:	e340      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065a0c:	2300      	movs	r3, #0
 8065a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065a10:	e33d      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065a12:	4b2f      	ldr	r3, [pc, #188]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a14:	681b      	ldr	r3, [r3, #0]
 8065a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065a1e:	d107      	bne.n	8065a30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065a20:	f107 0318 	add.w	r3, r7, #24
 8065a24:	4618      	mov	r0, r3
 8065a26:	f000 fb51 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8065a2a:	69bb      	ldr	r3, [r7, #24]
 8065a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065a2e:	e32e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065a30:	2300      	movs	r3, #0
 8065a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065a34:	e32b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065a36:	4b26      	ldr	r3, [pc, #152]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a38:	681b      	ldr	r3, [r3, #0]
 8065a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8065a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065a42:	d107      	bne.n	8065a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065a44:	f107 030c 	add.w	r3, r7, #12
 8065a48:	4618      	mov	r0, r3
 8065a4a:	f000 fc93 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8065a4e:	68fb      	ldr	r3, [r7, #12]
 8065a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065a52:	e31c      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065a54:	2300      	movs	r3, #0
 8065a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065a58:	e319      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8065a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065a5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8065a62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8065a64:	4b1a      	ldr	r3, [pc, #104]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a66:	681b      	ldr	r3, [r3, #0]
 8065a68:	f003 0304 	and.w	r3, r3, #4
 8065a6c:	2b04      	cmp	r3, #4
 8065a6e:	d10c      	bne.n	8065a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8065a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065a72:	2b00      	cmp	r3, #0
 8065a74:	d109      	bne.n	8065a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065a76:	4b16      	ldr	r3, [pc, #88]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a78:	681b      	ldr	r3, [r3, #0]
 8065a7a:	08db      	lsrs	r3, r3, #3
 8065a7c:	f003 0303 	and.w	r3, r3, #3
 8065a80:	4a14      	ldr	r2, [pc, #80]	@ (8065ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8065a82:	fa22 f303 	lsr.w	r3, r2, r3
 8065a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065a88:	e01e      	b.n	8065ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8065a8a:	4b11      	ldr	r3, [pc, #68]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065a8c:	681b      	ldr	r3, [r3, #0]
 8065a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065a96:	d106      	bne.n	8065aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8065a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8065a9e:	d102      	bne.n	8065aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8065aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8065ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8065aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065aa4:	e010      	b.n	8065ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8065aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8065ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8065aa8:	681b      	ldr	r3, [r3, #0]
 8065aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065ab2:	d106      	bne.n	8065ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8065ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065aba:	d102      	bne.n	8065ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8065abc:	4b07      	ldr	r3, [pc, #28]	@ (8065adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8065abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065ac0:	e002      	b.n	8065ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8065ac2:	2300      	movs	r3, #0
 8065ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8065ac6:	e2e2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065ac8:	e2e1      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8065aca:	4b05      	ldr	r3, [pc, #20]	@ (8065ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8065acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065ace:	e2de      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065ad0:	58024400 	.word	0x58024400
 8065ad4:	03d09000 	.word	0x03d09000
 8065ad8:	003d0900 	.word	0x003d0900
 8065adc:	017d7840 	.word	0x017d7840
 8065ae0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8065ae4:	2300      	movs	r3, #0
 8065ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065ae8:	e2d1      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8065aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065aee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8065af2:	430b      	orrs	r3, r1
 8065af4:	f040 809c 	bne.w	8065c30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8065af8:	4b93      	ldr	r3, [pc, #588]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8065afc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8065b00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8065b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8065b08:	d054      	beq.n	8065bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8065b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8065b10:	f200 808b 	bhi.w	8065c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8065b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8065b1a:	f000 8083 	beq.w	8065c24 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8065b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8065b24:	f200 8081 	bhi.w	8065c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8065b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8065b2e:	d02f      	beq.n	8065b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8065b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8065b36:	d878      	bhi.n	8065c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8065b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b3a:	2b00      	cmp	r3, #0
 8065b3c:	d004      	beq.n	8065b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8065b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8065b44:	d012      	beq.n	8065b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8065b46:	e070      	b.n	8065c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8065b48:	4b7f      	ldr	r3, [pc, #508]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065b4a:	681b      	ldr	r3, [r3, #0]
 8065b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8065b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8065b54:	d107      	bne.n	8065b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8065b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8065b5a:	4618      	mov	r0, r3
 8065b5c:	f000 fd5e 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8065b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065b64:	e293      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065b66:	2300      	movs	r3, #0
 8065b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065b6a:	e290      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065b6c:	4b76      	ldr	r3, [pc, #472]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065b6e:	681b      	ldr	r3, [r3, #0]
 8065b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065b78:	d107      	bne.n	8065b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065b7a:	f107 0318 	add.w	r3, r7, #24
 8065b7e:	4618      	mov	r0, r3
 8065b80:	f000 faa4 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8065b84:	69bb      	ldr	r3, [r7, #24]
 8065b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065b88:	e281      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065b8a:	2300      	movs	r3, #0
 8065b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065b8e:	e27e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065b90:	4b6d      	ldr	r3, [pc, #436]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065b92:	681b      	ldr	r3, [r3, #0]
 8065b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8065b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065b9c:	d107      	bne.n	8065bae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065b9e:	f107 030c 	add.w	r3, r7, #12
 8065ba2:	4618      	mov	r0, r3
 8065ba4:	f000 fbe6 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8065ba8:	68fb      	ldr	r3, [r7, #12]
 8065baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065bac:	e26f      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065bae:	2300      	movs	r3, #0
 8065bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065bb2:	e26c      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8065bb4:	4b64      	ldr	r3, [pc, #400]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065bb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8065bbc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8065bbe:	4b62      	ldr	r3, [pc, #392]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065bc0:	681b      	ldr	r3, [r3, #0]
 8065bc2:	f003 0304 	and.w	r3, r3, #4
 8065bc6:	2b04      	cmp	r3, #4
 8065bc8:	d10c      	bne.n	8065be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8065bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065bcc:	2b00      	cmp	r3, #0
 8065bce:	d109      	bne.n	8065be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065bd2:	681b      	ldr	r3, [r3, #0]
 8065bd4:	08db      	lsrs	r3, r3, #3
 8065bd6:	f003 0303 	and.w	r3, r3, #3
 8065bda:	4a5c      	ldr	r2, [pc, #368]	@ (8065d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8065bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8065be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065be2:	e01e      	b.n	8065c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8065be4:	4b58      	ldr	r3, [pc, #352]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065be6:	681b      	ldr	r3, [r3, #0]
 8065be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065bf0:	d106      	bne.n	8065c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8065bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8065bf8:	d102      	bne.n	8065c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8065bfa:	4b55      	ldr	r3, [pc, #340]	@ (8065d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8065bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065bfe:	e010      	b.n	8065c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8065c00:	4b51      	ldr	r3, [pc, #324]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065c02:	681b      	ldr	r3, [r3, #0]
 8065c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065c0c:	d106      	bne.n	8065c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8065c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065c14:	d102      	bne.n	8065c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8065c16:	4b4f      	ldr	r3, [pc, #316]	@ (8065d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8065c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065c1a:	e002      	b.n	8065c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8065c1c:	2300      	movs	r3, #0
 8065c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8065c20:	e235      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065c22:	e234      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8065c24:	4b4c      	ldr	r3, [pc, #304]	@ (8065d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8065c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065c28:	e231      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8065c2a:	2300      	movs	r3, #0
 8065c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065c2e:	e22e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8065c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065c34:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8065c38:	430b      	orrs	r3, r1
 8065c3a:	f040 808f 	bne.w	8065d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8065c3e:	4b42      	ldr	r3, [pc, #264]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8065c42:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8065c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8065c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8065c4e:	d06b      	beq.n	8065d28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8065c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8065c56:	d874      	bhi.n	8065d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8065c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8065c5e:	d056      	beq.n	8065d0e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8065c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8065c66:	d86c      	bhi.n	8065d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8065c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8065c6e:	d03b      	beq.n	8065ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8065c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8065c76:	d864      	bhi.n	8065d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8065c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065c7e:	d021      	beq.n	8065cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8065c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065c86:	d85c      	bhi.n	8065d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8065c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c8a:	2b00      	cmp	r3, #0
 8065c8c:	d004      	beq.n	8065c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8065c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8065c94:	d004      	beq.n	8065ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8065c96:	e054      	b.n	8065d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8065c98:	f7fe fa20 	bl	80640dc <HAL_RCC_GetPCLK1Freq>
 8065c9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8065c9e:	e1f6      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065ca0:	4b29      	ldr	r3, [pc, #164]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065ca2:	681b      	ldr	r3, [r3, #0]
 8065ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065cac:	d107      	bne.n	8065cbe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065cae:	f107 0318 	add.w	r3, r7, #24
 8065cb2:	4618      	mov	r0, r3
 8065cb4:	f000 fa0a 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8065cb8:	69fb      	ldr	r3, [r7, #28]
 8065cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065cbc:	e1e7      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065cbe:	2300      	movs	r3, #0
 8065cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065cc2:	e1e4      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065cc4:	4b20      	ldr	r3, [pc, #128]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065cc6:	681b      	ldr	r3, [r3, #0]
 8065cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8065ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065cd0:	d107      	bne.n	8065ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065cd2:	f107 030c 	add.w	r3, r7, #12
 8065cd6:	4618      	mov	r0, r3
 8065cd8:	f000 fb4c 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8065cdc:	693b      	ldr	r3, [r7, #16]
 8065cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065ce0:	e1d5      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065ce2:	2300      	movs	r3, #0
 8065ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065ce6:	e1d2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8065ce8:	4b17      	ldr	r3, [pc, #92]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065cea:	681b      	ldr	r3, [r3, #0]
 8065cec:	f003 0304 	and.w	r3, r3, #4
 8065cf0:	2b04      	cmp	r3, #4
 8065cf2:	d109      	bne.n	8065d08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065cf4:	4b14      	ldr	r3, [pc, #80]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065cf6:	681b      	ldr	r3, [r3, #0]
 8065cf8:	08db      	lsrs	r3, r3, #3
 8065cfa:	f003 0303 	and.w	r3, r3, #3
 8065cfe:	4a13      	ldr	r2, [pc, #76]	@ (8065d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8065d00:	fa22 f303 	lsr.w	r3, r2, r3
 8065d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065d06:	e1c2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065d08:	2300      	movs	r3, #0
 8065d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065d0c:	e1bf      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8065d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065d10:	681b      	ldr	r3, [r3, #0]
 8065d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065d1a:	d102      	bne.n	8065d22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8065d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8065d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8065d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065d20:	e1b5      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065d22:	2300      	movs	r3, #0
 8065d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065d26:	e1b2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8065d28:	4b07      	ldr	r3, [pc, #28]	@ (8065d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8065d2a:	681b      	ldr	r3, [r3, #0]
 8065d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065d34:	d102      	bne.n	8065d3c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8065d36:	4b07      	ldr	r3, [pc, #28]	@ (8065d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8065d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065d3a:	e1a8      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065d3c:	2300      	movs	r3, #0
 8065d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065d40:	e1a5      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8065d42:	2300      	movs	r3, #0
 8065d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065d46:	e1a2      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065d48:	58024400 	.word	0x58024400
 8065d4c:	03d09000 	.word	0x03d09000
 8065d50:	003d0900 	.word	0x003d0900
 8065d54:	017d7840 	.word	0x017d7840
 8065d58:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8065d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065d60:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8065d64:	430b      	orrs	r3, r1
 8065d66:	d173      	bne.n	8065e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8065d68:	4b9c      	ldr	r3, [pc, #624]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8065d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8065d70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8065d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065d78:	d02f      	beq.n	8065dda <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8065d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065d80:	d863      	bhi.n	8065e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8065d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065d84:	2b00      	cmp	r3, #0
 8065d86:	d004      	beq.n	8065d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8065d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8065d8e:	d012      	beq.n	8065db6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8065d90:	e05b      	b.n	8065e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065d92:	4b92      	ldr	r3, [pc, #584]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065d94:	681b      	ldr	r3, [r3, #0]
 8065d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065d9e:	d107      	bne.n	8065db0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065da0:	f107 0318 	add.w	r3, r7, #24
 8065da4:	4618      	mov	r0, r3
 8065da6:	f000 f991 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8065daa:	69bb      	ldr	r3, [r7, #24]
 8065dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065dae:	e16e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065db0:	2300      	movs	r3, #0
 8065db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065db4:	e16b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065db6:	4b89      	ldr	r3, [pc, #548]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065db8:	681b      	ldr	r3, [r3, #0]
 8065dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8065dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065dc2:	d107      	bne.n	8065dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065dc4:	f107 030c 	add.w	r3, r7, #12
 8065dc8:	4618      	mov	r0, r3
 8065dca:	f000 fad3 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8065dce:	697b      	ldr	r3, [r7, #20]
 8065dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065dd2:	e15c      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065dd4:	2300      	movs	r3, #0
 8065dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065dd8:	e159      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8065dda:	4b80      	ldr	r3, [pc, #512]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065dde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8065de2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8065de4:	4b7d      	ldr	r3, [pc, #500]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065de6:	681b      	ldr	r3, [r3, #0]
 8065de8:	f003 0304 	and.w	r3, r3, #4
 8065dec:	2b04      	cmp	r3, #4
 8065dee:	d10c      	bne.n	8065e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8065df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065df2:	2b00      	cmp	r3, #0
 8065df4:	d109      	bne.n	8065e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065df6:	4b79      	ldr	r3, [pc, #484]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065df8:	681b      	ldr	r3, [r3, #0]
 8065dfa:	08db      	lsrs	r3, r3, #3
 8065dfc:	f003 0303 	and.w	r3, r3, #3
 8065e00:	4a77      	ldr	r2, [pc, #476]	@ (8065fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8065e02:	fa22 f303 	lsr.w	r3, r2, r3
 8065e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065e08:	e01e      	b.n	8065e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8065e0a:	4b74      	ldr	r3, [pc, #464]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065e0c:	681b      	ldr	r3, [r3, #0]
 8065e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065e16:	d106      	bne.n	8065e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8065e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8065e1e:	d102      	bne.n	8065e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8065e20:	4b70      	ldr	r3, [pc, #448]	@ (8065fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8065e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065e24:	e010      	b.n	8065e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8065e26:	4b6d      	ldr	r3, [pc, #436]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065e28:	681b      	ldr	r3, [r3, #0]
 8065e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065e2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065e32:	d106      	bne.n	8065e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8065e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8065e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065e3a:	d102      	bne.n	8065e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8065e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8065fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8065e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8065e40:	e002      	b.n	8065e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8065e42:	2300      	movs	r3, #0
 8065e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8065e46:	e122      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065e48:	e121      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8065e4a:	2300      	movs	r3, #0
 8065e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065e4e:	e11e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8065e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065e54:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8065e58:	430b      	orrs	r3, r1
 8065e5a:	d133      	bne.n	8065ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8065e5c:	4b5f      	ldr	r3, [pc, #380]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8065e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8065e64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8065e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065e68:	2b00      	cmp	r3, #0
 8065e6a:	d004      	beq.n	8065e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8065e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8065e72:	d012      	beq.n	8065e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8065e74:	e023      	b.n	8065ebe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8065e76:	4b59      	ldr	r3, [pc, #356]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065e78:	681b      	ldr	r3, [r3, #0]
 8065e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8065e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8065e82:	d107      	bne.n	8065e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8065e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8065e88:	4618      	mov	r0, r3
 8065e8a:	f000 fbc7 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8065e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065e92:	e0fc      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065e94:	2300      	movs	r3, #0
 8065e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065e98:	e0f9      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065e9a:	4b50      	ldr	r3, [pc, #320]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065e9c:	681b      	ldr	r3, [r3, #0]
 8065e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065ea6:	d107      	bne.n	8065eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065ea8:	f107 0318 	add.w	r3, r7, #24
 8065eac:	4618      	mov	r0, r3
 8065eae:	f000 f90d 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8065eb2:	6a3b      	ldr	r3, [r7, #32]
 8065eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065eb6:	e0ea      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065eb8:	2300      	movs	r3, #0
 8065eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065ebc:	e0e7      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8065ebe:	2300      	movs	r3, #0
 8065ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065ec2:	e0e4      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8065ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065ec8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8065ecc:	430b      	orrs	r3, r1
 8065ece:	f040 808d 	bne.w	8065fec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8065ed2:	4b42      	ldr	r3, [pc, #264]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8065ed6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8065eda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8065edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8065ee2:	d06b      	beq.n	8065fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8065ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8065eea:	d874      	bhi.n	8065fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8065eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8065ef2:	d056      	beq.n	8065fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8065ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8065efa:	d86c      	bhi.n	8065fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8065efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8065f02:	d03b      	beq.n	8065f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8065f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065f06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8065f0a:	d864      	bhi.n	8065fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8065f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065f12:	d021      	beq.n	8065f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8065f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065f1a:	d85c      	bhi.n	8065fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8065f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065f1e:	2b00      	cmp	r3, #0
 8065f20:	d004      	beq.n	8065f2c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8065f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8065f28:	d004      	beq.n	8065f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8065f2a:	e054      	b.n	8065fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8065f2c:	f000 f8b8 	bl	80660a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8065f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8065f32:	e0ac      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8065f34:	4b29      	ldr	r3, [pc, #164]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065f36:	681b      	ldr	r3, [r3, #0]
 8065f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8065f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8065f40:	d107      	bne.n	8065f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065f42:	f107 0318 	add.w	r3, r7, #24
 8065f46:	4618      	mov	r0, r3
 8065f48:	f000 f8c0 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8065f4c:	69fb      	ldr	r3, [r7, #28]
 8065f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065f50:	e09d      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065f52:	2300      	movs	r3, #0
 8065f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065f56:	e09a      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8065f58:	4b20      	ldr	r3, [pc, #128]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065f5a:	681b      	ldr	r3, [r3, #0]
 8065f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8065f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8065f64:	d107      	bne.n	8065f76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065f66:	f107 030c 	add.w	r3, r7, #12
 8065f6a:	4618      	mov	r0, r3
 8065f6c:	f000 fa02 	bl	8066374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8065f70:	693b      	ldr	r3, [r7, #16]
 8065f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065f74:	e08b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065f76:	2300      	movs	r3, #0
 8065f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065f7a:	e088      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8065f7c:	4b17      	ldr	r3, [pc, #92]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065f7e:	681b      	ldr	r3, [r3, #0]
 8065f80:	f003 0304 	and.w	r3, r3, #4
 8065f84:	2b04      	cmp	r3, #4
 8065f86:	d109      	bne.n	8065f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8065f88:	4b14      	ldr	r3, [pc, #80]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065f8a:	681b      	ldr	r3, [r3, #0]
 8065f8c:	08db      	lsrs	r3, r3, #3
 8065f8e:	f003 0303 	and.w	r3, r3, #3
 8065f92:	4a13      	ldr	r2, [pc, #76]	@ (8065fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8065f94:	fa22 f303 	lsr.w	r3, r2, r3
 8065f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065f9a:	e078      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065f9c:	2300      	movs	r3, #0
 8065f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065fa0:	e075      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8065fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065fa4:	681b      	ldr	r3, [r3, #0]
 8065fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8065fae:	d102      	bne.n	8065fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8065fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8065fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8065fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065fb4:	e06b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065fb6:	2300      	movs	r3, #0
 8065fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065fba:	e068      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8065fbc:	4b07      	ldr	r3, [pc, #28]	@ (8065fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8065fbe:	681b      	ldr	r3, [r3, #0]
 8065fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8065fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8065fc8:	d102      	bne.n	8065fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8065fca:	4b07      	ldr	r3, [pc, #28]	@ (8065fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8065fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8065fce:	e05e      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8065fd0:	2300      	movs	r3, #0
 8065fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065fd4:	e05b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8065fd6:	2300      	movs	r3, #0
 8065fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065fda:	e058      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8065fdc:	58024400 	.word	0x58024400
 8065fe0:	03d09000 	.word	0x03d09000
 8065fe4:	003d0900 	.word	0x003d0900
 8065fe8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8065fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065ff0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8065ff4:	430b      	orrs	r3, r1
 8065ff6:	d148      	bne.n	806608a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8065ff8:	4b27      	ldr	r3, [pc, #156]	@ (8066098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8065ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8065ffc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8066000:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8066002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8066004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8066008:	d02a      	beq.n	8066060 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 806600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806600c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8066010:	d838      	bhi.n	8066084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8066012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8066014:	2b00      	cmp	r3, #0
 8066016:	d004      	beq.n	8066022 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8066018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806601a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 806601e:	d00d      	beq.n	806603c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8066020:	e030      	b.n	8066084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8066022:	4b1d      	ldr	r3, [pc, #116]	@ (8066098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8066024:	681b      	ldr	r3, [r3, #0]
 8066026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 806602a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 806602e:	d102      	bne.n	8066036 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8066030:	4b1a      	ldr	r3, [pc, #104]	@ (806609c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8066032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8066034:	e02b      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8066036:	2300      	movs	r3, #0
 8066038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806603a:	e028      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 806603c:	4b16      	ldr	r3, [pc, #88]	@ (8066098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 806603e:	681b      	ldr	r3, [r3, #0]
 8066040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8066044:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8066048:	d107      	bne.n	806605a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 806604a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 806604e:	4618      	mov	r0, r3
 8066050:	f000 fae4 	bl	806661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8066054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8066056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8066058:	e019      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 806605a:	2300      	movs	r3, #0
 806605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806605e:	e016      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8066060:	4b0d      	ldr	r3, [pc, #52]	@ (8066098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8066062:	681b      	ldr	r3, [r3, #0]
 8066064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8066068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 806606c:	d107      	bne.n	806607e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 806606e:	f107 0318 	add.w	r3, r7, #24
 8066072:	4618      	mov	r0, r3
 8066074:	f000 f82a 	bl	80660cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8066078:	69fb      	ldr	r3, [r7, #28]
 806607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 806607c:	e007      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 806607e:	2300      	movs	r3, #0
 8066080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8066082:	e004      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8066084:	2300      	movs	r3, #0
 8066086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8066088:	e001      	b.n	806608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 806608a:	2300      	movs	r3, #0
 806608c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 806608e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8066090:	4618      	mov	r0, r3
 8066092:	3740      	adds	r7, #64	@ 0x40
 8066094:	46bd      	mov	sp, r7
 8066096:	bd80      	pop	{r7, pc}
 8066098:	58024400 	.word	0x58024400
 806609c:	017d7840 	.word	0x017d7840

080660a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80660a0:	b580      	push	{r7, lr}
 80660a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80660a4:	f7fd ffea 	bl	806407c <HAL_RCC_GetHCLKFreq>
 80660a8:	4602      	mov	r2, r0
 80660aa:	4b06      	ldr	r3, [pc, #24]	@ (80660c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80660ac:	6a1b      	ldr	r3, [r3, #32]
 80660ae:	091b      	lsrs	r3, r3, #4
 80660b0:	f003 0307 	and.w	r3, r3, #7
 80660b4:	4904      	ldr	r1, [pc, #16]	@ (80660c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80660b6:	5ccb      	ldrb	r3, [r1, r3]
 80660b8:	f003 031f 	and.w	r3, r3, #31
 80660bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80660c0:	4618      	mov	r0, r3
 80660c2:	bd80      	pop	{r7, pc}
 80660c4:	58024400 	.word	0x58024400
 80660c8:	080724e8 	.word	0x080724e8

080660cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80660cc:	b480      	push	{r7}
 80660ce:	b089      	sub	sp, #36	@ 0x24
 80660d0:	af00      	add	r7, sp, #0
 80660d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80660d4:	4ba1      	ldr	r3, [pc, #644]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80660d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80660d8:	f003 0303 	and.w	r3, r3, #3
 80660dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80660de:	4b9f      	ldr	r3, [pc, #636]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80660e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80660e2:	0b1b      	lsrs	r3, r3, #12
 80660e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80660e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80660ea:	4b9c      	ldr	r3, [pc, #624]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80660ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80660ee:	091b      	lsrs	r3, r3, #4
 80660f0:	f003 0301 	and.w	r3, r3, #1
 80660f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80660f6:	4b99      	ldr	r3, [pc, #612]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80660f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80660fa:	08db      	lsrs	r3, r3, #3
 80660fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8066100:	693a      	ldr	r2, [r7, #16]
 8066102:	fb02 f303 	mul.w	r3, r2, r3
 8066106:	ee07 3a90 	vmov	s15, r3
 806610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806610e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8066112:	697b      	ldr	r3, [r7, #20]
 8066114:	2b00      	cmp	r3, #0
 8066116:	f000 8111 	beq.w	806633c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 806611a:	69bb      	ldr	r3, [r7, #24]
 806611c:	2b02      	cmp	r3, #2
 806611e:	f000 8083 	beq.w	8066228 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8066122:	69bb      	ldr	r3, [r7, #24]
 8066124:	2b02      	cmp	r3, #2
 8066126:	f200 80a1 	bhi.w	806626c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 806612a:	69bb      	ldr	r3, [r7, #24]
 806612c:	2b00      	cmp	r3, #0
 806612e:	d003      	beq.n	8066138 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8066130:	69bb      	ldr	r3, [r7, #24]
 8066132:	2b01      	cmp	r3, #1
 8066134:	d056      	beq.n	80661e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8066136:	e099      	b.n	806626c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8066138:	4b88      	ldr	r3, [pc, #544]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 806613a:	681b      	ldr	r3, [r3, #0]
 806613c:	f003 0320 	and.w	r3, r3, #32
 8066140:	2b00      	cmp	r3, #0
 8066142:	d02d      	beq.n	80661a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8066144:	4b85      	ldr	r3, [pc, #532]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8066146:	681b      	ldr	r3, [r3, #0]
 8066148:	08db      	lsrs	r3, r3, #3
 806614a:	f003 0303 	and.w	r3, r3, #3
 806614e:	4a84      	ldr	r2, [pc, #528]	@ (8066360 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8066150:	fa22 f303 	lsr.w	r3, r2, r3
 8066154:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8066156:	68bb      	ldr	r3, [r7, #8]
 8066158:	ee07 3a90 	vmov	s15, r3
 806615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066160:	697b      	ldr	r3, [r7, #20]
 8066162:	ee07 3a90 	vmov	s15, r3
 8066166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806616e:	4b7b      	ldr	r3, [pc, #492]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8066170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8066172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066176:	ee07 3a90 	vmov	s15, r3
 806617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806617e:	ed97 6a03 	vldr	s12, [r7, #12]
 8066182:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8066364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8066186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806618e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8066192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8066196:	ee67 7a27 	vmul.f32	s15, s14, s15
 806619a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 806619e:	e087      	b.n	80662b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80661a0:	697b      	ldr	r3, [r7, #20]
 80661a2:	ee07 3a90 	vmov	s15, r3
 80661a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80661aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8066368 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80661ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80661b2:	4b6a      	ldr	r3, [pc, #424]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80661b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80661b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80661ba:	ee07 3a90 	vmov	s15, r3
 80661be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80661c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80661c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8066364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80661ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80661ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80661d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80661d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80661da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80661de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80661e2:	e065      	b.n	80662b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80661e4:	697b      	ldr	r3, [r7, #20]
 80661e6:	ee07 3a90 	vmov	s15, r3
 80661ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80661ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 806636c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80661f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80661f6:	4b59      	ldr	r3, [pc, #356]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80661f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80661fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80661fe:	ee07 3a90 	vmov	s15, r3
 8066202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066206:	ed97 6a03 	vldr	s12, [r7, #12]
 806620a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8066364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 806620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8066226:	e043      	b.n	80662b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8066228:	697b      	ldr	r3, [r7, #20]
 806622a:	ee07 3a90 	vmov	s15, r3
 806622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066232:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8066370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8066236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806623a:	4b48      	ldr	r3, [pc, #288]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 806623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066242:	ee07 3a90 	vmov	s15, r3
 8066246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806624a:	ed97 6a03 	vldr	s12, [r7, #12]
 806624e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8066364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8066252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806625a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8066262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 806626a:	e021      	b.n	80662b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 806626c:	697b      	ldr	r3, [r7, #20]
 806626e:	ee07 3a90 	vmov	s15, r3
 8066272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066276:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 806636c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 806627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806627e:	4b37      	ldr	r3, [pc, #220]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8066280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8066282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066286:	ee07 3a90 	vmov	s15, r3
 806628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806628e:	ed97 6a03 	vldr	s12, [r7, #12]
 8066292:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8066364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8066296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80662a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80662a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80662aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80662ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80662b0:	4b2a      	ldr	r3, [pc, #168]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80662b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80662b4:	0a5b      	lsrs	r3, r3, #9
 80662b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80662ba:	ee07 3a90 	vmov	s15, r3
 80662be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80662c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80662c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80662ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80662ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80662d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80662d6:	ee17 2a90 	vmov	r2, s15
 80662da:	687b      	ldr	r3, [r7, #4]
 80662dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80662de:	4b1f      	ldr	r3, [pc, #124]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80662e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80662e2:	0c1b      	lsrs	r3, r3, #16
 80662e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80662e8:	ee07 3a90 	vmov	s15, r3
 80662ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80662f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80662f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80662f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80662fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8066300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8066304:	ee17 2a90 	vmov	r2, s15
 8066308:	687b      	ldr	r3, [r7, #4]
 806630a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 806630c:	4b13      	ldr	r3, [pc, #76]	@ (806635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 806630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8066310:	0e1b      	lsrs	r3, r3, #24
 8066312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066316:	ee07 3a90 	vmov	s15, r3
 806631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806631e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8066322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8066326:	edd7 6a07 	vldr	s13, [r7, #28]
 806632a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 806632e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8066332:	ee17 2a90 	vmov	r2, s15
 8066336:	687b      	ldr	r3, [r7, #4]
 8066338:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 806633a:	e008      	b.n	806634e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 806633c:	687b      	ldr	r3, [r7, #4]
 806633e:	2200      	movs	r2, #0
 8066340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8066342:	687b      	ldr	r3, [r7, #4]
 8066344:	2200      	movs	r2, #0
 8066346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8066348:	687b      	ldr	r3, [r7, #4]
 806634a:	2200      	movs	r2, #0
 806634c:	609a      	str	r2, [r3, #8]
}
 806634e:	bf00      	nop
 8066350:	3724      	adds	r7, #36	@ 0x24
 8066352:	46bd      	mov	sp, r7
 8066354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066358:	4770      	bx	lr
 806635a:	bf00      	nop
 806635c:	58024400 	.word	0x58024400
 8066360:	03d09000 	.word	0x03d09000
 8066364:	46000000 	.word	0x46000000
 8066368:	4c742400 	.word	0x4c742400
 806636c:	4a742400 	.word	0x4a742400
 8066370:	4bbebc20 	.word	0x4bbebc20

08066374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8066374:	b480      	push	{r7}
 8066376:	b089      	sub	sp, #36	@ 0x24
 8066378:	af00      	add	r7, sp, #0
 806637a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 806637c:	4ba1      	ldr	r3, [pc, #644]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 806637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066380:	f003 0303 	and.w	r3, r3, #3
 8066384:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8066386:	4b9f      	ldr	r3, [pc, #636]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8066388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806638a:	0d1b      	lsrs	r3, r3, #20
 806638c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8066390:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8066392:	4b9c      	ldr	r3, [pc, #624]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8066394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066396:	0a1b      	lsrs	r3, r3, #8
 8066398:	f003 0301 	and.w	r3, r3, #1
 806639c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 806639e:	4b99      	ldr	r3, [pc, #612]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80663a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80663a2:	08db      	lsrs	r3, r3, #3
 80663a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80663a8:	693a      	ldr	r2, [r7, #16]
 80663aa:	fb02 f303 	mul.w	r3, r2, r3
 80663ae:	ee07 3a90 	vmov	s15, r3
 80663b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80663b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80663ba:	697b      	ldr	r3, [r7, #20]
 80663bc:	2b00      	cmp	r3, #0
 80663be:	f000 8111 	beq.w	80665e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80663c2:	69bb      	ldr	r3, [r7, #24]
 80663c4:	2b02      	cmp	r3, #2
 80663c6:	f000 8083 	beq.w	80664d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80663ca:	69bb      	ldr	r3, [r7, #24]
 80663cc:	2b02      	cmp	r3, #2
 80663ce:	f200 80a1 	bhi.w	8066514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80663d2:	69bb      	ldr	r3, [r7, #24]
 80663d4:	2b00      	cmp	r3, #0
 80663d6:	d003      	beq.n	80663e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80663d8:	69bb      	ldr	r3, [r7, #24]
 80663da:	2b01      	cmp	r3, #1
 80663dc:	d056      	beq.n	806648c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80663de:	e099      	b.n	8066514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80663e0:	4b88      	ldr	r3, [pc, #544]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80663e2:	681b      	ldr	r3, [r3, #0]
 80663e4:	f003 0320 	and.w	r3, r3, #32
 80663e8:	2b00      	cmp	r3, #0
 80663ea:	d02d      	beq.n	8066448 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80663ec:	4b85      	ldr	r3, [pc, #532]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80663ee:	681b      	ldr	r3, [r3, #0]
 80663f0:	08db      	lsrs	r3, r3, #3
 80663f2:	f003 0303 	and.w	r3, r3, #3
 80663f6:	4a84      	ldr	r2, [pc, #528]	@ (8066608 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80663f8:	fa22 f303 	lsr.w	r3, r2, r3
 80663fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80663fe:	68bb      	ldr	r3, [r7, #8]
 8066400:	ee07 3a90 	vmov	s15, r3
 8066404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066408:	697b      	ldr	r3, [r7, #20]
 806640a:	ee07 3a90 	vmov	s15, r3
 806640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8066416:	4b7b      	ldr	r3, [pc, #492]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8066418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806641e:	ee07 3a90 	vmov	s15, r3
 8066422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066426:	ed97 6a03 	vldr	s12, [r7, #12]
 806642a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 806660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 806642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8066446:	e087      	b.n	8066558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8066448:	697b      	ldr	r3, [r7, #20]
 806644a:	ee07 3a90 	vmov	s15, r3
 806644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066452:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8066610 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8066456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806645a:	4b6a      	ldr	r3, [pc, #424]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 806645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066462:	ee07 3a90 	vmov	s15, r3
 8066466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806646a:	ed97 6a03 	vldr	s12, [r7, #12]
 806646e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 806660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8066472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806647a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8066482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 806648a:	e065      	b.n	8066558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 806648c:	697b      	ldr	r3, [r7, #20]
 806648e:	ee07 3a90 	vmov	s15, r3
 8066492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066496:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8066614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 806649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806649e:	4b59      	ldr	r3, [pc, #356]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80664a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80664a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80664a6:	ee07 3a90 	vmov	s15, r3
 80664aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80664ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80664b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 806660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80664b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80664ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80664be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80664c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80664c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80664ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80664ce:	e043      	b.n	8066558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80664d0:	697b      	ldr	r3, [r7, #20]
 80664d2:	ee07 3a90 	vmov	s15, r3
 80664d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80664da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8066618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80664de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80664e2:	4b48      	ldr	r3, [pc, #288]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80664e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80664e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80664ea:	ee07 3a90 	vmov	s15, r3
 80664ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80664f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80664f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 806660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80664fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80664fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8066506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 806650e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8066512:	e021      	b.n	8066558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8066514:	697b      	ldr	r3, [r7, #20]
 8066516:	ee07 3a90 	vmov	s15, r3
 806651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806651e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8066614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8066522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8066526:	4b37      	ldr	r3, [pc, #220]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8066528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806652e:	ee07 3a90 	vmov	s15, r3
 8066532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066536:	ed97 6a03 	vldr	s12, [r7, #12]
 806653a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 806660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 806653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8066556:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8066558:	4b2a      	ldr	r3, [pc, #168]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 806655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806655c:	0a5b      	lsrs	r3, r3, #9
 806655e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066562:	ee07 3a90 	vmov	s15, r3
 8066566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806656a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 806656e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8066572:	edd7 6a07 	vldr	s13, [r7, #28]
 8066576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 806657a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 806657e:	ee17 2a90 	vmov	r2, s15
 8066582:	687b      	ldr	r3, [r7, #4]
 8066584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8066586:	4b1f      	ldr	r3, [pc, #124]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8066588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806658a:	0c1b      	lsrs	r3, r3, #16
 806658c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066590:	ee07 3a90 	vmov	s15, r3
 8066594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 806659c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80665a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80665a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80665a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80665ac:	ee17 2a90 	vmov	r2, s15
 80665b0:	687b      	ldr	r3, [r7, #4]
 80665b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80665b4:	4b13      	ldr	r3, [pc, #76]	@ (8066604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80665b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80665b8:	0e1b      	lsrs	r3, r3, #24
 80665ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80665be:	ee07 3a90 	vmov	s15, r3
 80665c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80665c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80665ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80665ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80665d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80665d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80665da:	ee17 2a90 	vmov	r2, s15
 80665de:	687b      	ldr	r3, [r7, #4]
 80665e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80665e2:	e008      	b.n	80665f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80665e4:	687b      	ldr	r3, [r7, #4]
 80665e6:	2200      	movs	r2, #0
 80665e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80665ea:	687b      	ldr	r3, [r7, #4]
 80665ec:	2200      	movs	r2, #0
 80665ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80665f0:	687b      	ldr	r3, [r7, #4]
 80665f2:	2200      	movs	r2, #0
 80665f4:	609a      	str	r2, [r3, #8]
}
 80665f6:	bf00      	nop
 80665f8:	3724      	adds	r7, #36	@ 0x24
 80665fa:	46bd      	mov	sp, r7
 80665fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066600:	4770      	bx	lr
 8066602:	bf00      	nop
 8066604:	58024400 	.word	0x58024400
 8066608:	03d09000 	.word	0x03d09000
 806660c:	46000000 	.word	0x46000000
 8066610:	4c742400 	.word	0x4c742400
 8066614:	4a742400 	.word	0x4a742400
 8066618:	4bbebc20 	.word	0x4bbebc20

0806661c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 806661c:	b480      	push	{r7}
 806661e:	b089      	sub	sp, #36	@ 0x24
 8066620:	af00      	add	r7, sp, #0
 8066622:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8066624:	4ba0      	ldr	r3, [pc, #640]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066628:	f003 0303 	and.w	r3, r3, #3
 806662c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 806662e:	4b9e      	ldr	r3, [pc, #632]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066632:	091b      	lsrs	r3, r3, #4
 8066634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8066638:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 806663a:	4b9b      	ldr	r3, [pc, #620]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 806663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806663e:	f003 0301 	and.w	r3, r3, #1
 8066642:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8066644:	4b98      	ldr	r3, [pc, #608]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8066648:	08db      	lsrs	r3, r3, #3
 806664a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 806664e:	693a      	ldr	r2, [r7, #16]
 8066650:	fb02 f303 	mul.w	r3, r2, r3
 8066654:	ee07 3a90 	vmov	s15, r3
 8066658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806665c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8066660:	697b      	ldr	r3, [r7, #20]
 8066662:	2b00      	cmp	r3, #0
 8066664:	f000 8111 	beq.w	806688a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8066668:	69bb      	ldr	r3, [r7, #24]
 806666a:	2b02      	cmp	r3, #2
 806666c:	f000 8083 	beq.w	8066776 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8066670:	69bb      	ldr	r3, [r7, #24]
 8066672:	2b02      	cmp	r3, #2
 8066674:	f200 80a1 	bhi.w	80667ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8066678:	69bb      	ldr	r3, [r7, #24]
 806667a:	2b00      	cmp	r3, #0
 806667c:	d003      	beq.n	8066686 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 806667e:	69bb      	ldr	r3, [r7, #24]
 8066680:	2b01      	cmp	r3, #1
 8066682:	d056      	beq.n	8066732 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8066684:	e099      	b.n	80667ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8066686:	4b88      	ldr	r3, [pc, #544]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066688:	681b      	ldr	r3, [r3, #0]
 806668a:	f003 0320 	and.w	r3, r3, #32
 806668e:	2b00      	cmp	r3, #0
 8066690:	d02d      	beq.n	80666ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8066692:	4b85      	ldr	r3, [pc, #532]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066694:	681b      	ldr	r3, [r3, #0]
 8066696:	08db      	lsrs	r3, r3, #3
 8066698:	f003 0303 	and.w	r3, r3, #3
 806669c:	4a83      	ldr	r2, [pc, #524]	@ (80668ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 806669e:	fa22 f303 	lsr.w	r3, r2, r3
 80666a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80666a4:	68bb      	ldr	r3, [r7, #8]
 80666a6:	ee07 3a90 	vmov	s15, r3
 80666aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80666ae:	697b      	ldr	r3, [r7, #20]
 80666b0:	ee07 3a90 	vmov	s15, r3
 80666b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80666b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80666bc:	4b7a      	ldr	r3, [pc, #488]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80666be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80666c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80666c4:	ee07 3a90 	vmov	s15, r3
 80666c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80666cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80666d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80668b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80666d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80666d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80666dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80666e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80666e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80666e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80666ec:	e087      	b.n	80667fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80666ee:	697b      	ldr	r3, [r7, #20]
 80666f0:	ee07 3a90 	vmov	s15, r3
 80666f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80666f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80668b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80666fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8066700:	4b69      	ldr	r3, [pc, #420]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066708:	ee07 3a90 	vmov	s15, r3
 806670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066710:	ed97 6a03 	vldr	s12, [r7, #12]
 8066714:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80668b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8066718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8066724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8066728:	ee67 7a27 	vmul.f32	s15, s14, s15
 806672c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8066730:	e065      	b.n	80667fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8066732:	697b      	ldr	r3, [r7, #20]
 8066734:	ee07 3a90 	vmov	s15, r3
 8066738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806673c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80668b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8066740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8066744:	4b58      	ldr	r3, [pc, #352]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806674c:	ee07 3a90 	vmov	s15, r3
 8066750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066754:	ed97 6a03 	vldr	s12, [r7, #12]
 8066758:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80668b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 806675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8066760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8066764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8066768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8066770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8066774:	e043      	b.n	80667fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8066776:	697b      	ldr	r3, [r7, #20]
 8066778:	ee07 3a90 	vmov	s15, r3
 806677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066780:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80668bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8066784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8066788:	4b47      	ldr	r3, [pc, #284]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 806678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066790:	ee07 3a90 	vmov	s15, r3
 8066794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8066798:	ed97 6a03 	vldr	s12, [r7, #12]
 806679c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80668b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80667a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80667a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80667a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80667ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80667b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80667b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80667b8:	e021      	b.n	80667fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80667ba:	697b      	ldr	r3, [r7, #20]
 80667bc:	ee07 3a90 	vmov	s15, r3
 80667c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80667c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80668b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80667c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80667cc:	4b36      	ldr	r3, [pc, #216]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80667ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80667d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80667d4:	ee07 3a90 	vmov	s15, r3
 80667d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80667dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80667e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80668b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80667e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80667e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80667ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80667f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80667f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80667f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80667fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80667fe:	4b2a      	ldr	r3, [pc, #168]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8066800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066802:	0a5b      	lsrs	r3, r3, #9
 8066804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066808:	ee07 3a90 	vmov	s15, r3
 806680c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8066810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8066814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8066818:	edd7 6a07 	vldr	s13, [r7, #28]
 806681c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8066820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8066824:	ee17 2a90 	vmov	r2, s15
 8066828:	687b      	ldr	r3, [r7, #4]
 806682a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 806682c:	4b1e      	ldr	r3, [pc, #120]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 806682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066830:	0c1b      	lsrs	r3, r3, #16
 8066832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066836:	ee07 3a90 	vmov	s15, r3
 806683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806683e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8066842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8066846:	edd7 6a07 	vldr	s13, [r7, #28]
 806684a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 806684e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8066852:	ee17 2a90 	vmov	r2, s15
 8066856:	687b      	ldr	r3, [r7, #4]
 8066858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 806685a:	4b13      	ldr	r3, [pc, #76]	@ (80668a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 806685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806685e:	0e1b      	lsrs	r3, r3, #24
 8066860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8066864:	ee07 3a90 	vmov	s15, r3
 8066868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806686c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8066870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8066874:	edd7 6a07 	vldr	s13, [r7, #28]
 8066878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 806687c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8066880:	ee17 2a90 	vmov	r2, s15
 8066884:	687b      	ldr	r3, [r7, #4]
 8066886:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8066888:	e008      	b.n	806689c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 806688a:	687b      	ldr	r3, [r7, #4]
 806688c:	2200      	movs	r2, #0
 806688e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8066890:	687b      	ldr	r3, [r7, #4]
 8066892:	2200      	movs	r2, #0
 8066894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8066896:	687b      	ldr	r3, [r7, #4]
 8066898:	2200      	movs	r2, #0
 806689a:	609a      	str	r2, [r3, #8]
}
 806689c:	bf00      	nop
 806689e:	3724      	adds	r7, #36	@ 0x24
 80668a0:	46bd      	mov	sp, r7
 80668a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80668a6:	4770      	bx	lr
 80668a8:	58024400 	.word	0x58024400
 80668ac:	03d09000 	.word	0x03d09000
 80668b0:	46000000 	.word	0x46000000
 80668b4:	4c742400 	.word	0x4c742400
 80668b8:	4a742400 	.word	0x4a742400
 80668bc:	4bbebc20 	.word	0x4bbebc20

080668c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80668c0:	b580      	push	{r7, lr}
 80668c2:	b084      	sub	sp, #16
 80668c4:	af00      	add	r7, sp, #0
 80668c6:	6078      	str	r0, [r7, #4]
 80668c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80668ca:	2300      	movs	r3, #0
 80668cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80668ce:	4b53      	ldr	r3, [pc, #332]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80668d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80668d2:	f003 0303 	and.w	r3, r3, #3
 80668d6:	2b03      	cmp	r3, #3
 80668d8:	d101      	bne.n	80668de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80668da:	2301      	movs	r3, #1
 80668dc:	e099      	b.n	8066a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80668de:	4b4f      	ldr	r3, [pc, #316]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80668e0:	681b      	ldr	r3, [r3, #0]
 80668e2:	4a4e      	ldr	r2, [pc, #312]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80668e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80668e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80668ea:	f7f9 fdcf 	bl	806048c <HAL_GetTick>
 80668ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80668f0:	e008      	b.n	8066904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80668f2:	f7f9 fdcb 	bl	806048c <HAL_GetTick>
 80668f6:	4602      	mov	r2, r0
 80668f8:	68bb      	ldr	r3, [r7, #8]
 80668fa:	1ad3      	subs	r3, r2, r3
 80668fc:	2b02      	cmp	r3, #2
 80668fe:	d901      	bls.n	8066904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8066900:	2303      	movs	r3, #3
 8066902:	e086      	b.n	8066a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8066904:	4b45      	ldr	r3, [pc, #276]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066906:	681b      	ldr	r3, [r3, #0]
 8066908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 806690c:	2b00      	cmp	r3, #0
 806690e:	d1f0      	bne.n	80668f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8066910:	4b42      	ldr	r3, [pc, #264]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8066918:	687b      	ldr	r3, [r7, #4]
 806691a:	681b      	ldr	r3, [r3, #0]
 806691c:	031b      	lsls	r3, r3, #12
 806691e:	493f      	ldr	r1, [pc, #252]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066920:	4313      	orrs	r3, r2
 8066922:	628b      	str	r3, [r1, #40]	@ 0x28
 8066924:	687b      	ldr	r3, [r7, #4]
 8066926:	685b      	ldr	r3, [r3, #4]
 8066928:	3b01      	subs	r3, #1
 806692a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 806692e:	687b      	ldr	r3, [r7, #4]
 8066930:	689b      	ldr	r3, [r3, #8]
 8066932:	3b01      	subs	r3, #1
 8066934:	025b      	lsls	r3, r3, #9
 8066936:	b29b      	uxth	r3, r3
 8066938:	431a      	orrs	r2, r3
 806693a:	687b      	ldr	r3, [r7, #4]
 806693c:	68db      	ldr	r3, [r3, #12]
 806693e:	3b01      	subs	r3, #1
 8066940:	041b      	lsls	r3, r3, #16
 8066942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8066946:	431a      	orrs	r2, r3
 8066948:	687b      	ldr	r3, [r7, #4]
 806694a:	691b      	ldr	r3, [r3, #16]
 806694c:	3b01      	subs	r3, #1
 806694e:	061b      	lsls	r3, r3, #24
 8066950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8066954:	4931      	ldr	r1, [pc, #196]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066956:	4313      	orrs	r3, r2
 8066958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 806695a:	4b30      	ldr	r3, [pc, #192]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 806695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806695e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8066962:	687b      	ldr	r3, [r7, #4]
 8066964:	695b      	ldr	r3, [r3, #20]
 8066966:	492d      	ldr	r1, [pc, #180]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066968:	4313      	orrs	r3, r2
 806696a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 806696c:	4b2b      	ldr	r3, [pc, #172]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 806696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066970:	f023 0220 	bic.w	r2, r3, #32
 8066974:	687b      	ldr	r3, [r7, #4]
 8066976:	699b      	ldr	r3, [r3, #24]
 8066978:	4928      	ldr	r1, [pc, #160]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 806697a:	4313      	orrs	r3, r2
 806697c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 806697e:	4b27      	ldr	r3, [pc, #156]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066982:	4a26      	ldr	r2, [pc, #152]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066984:	f023 0310 	bic.w	r3, r3, #16
 8066988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 806698a:	4b24      	ldr	r3, [pc, #144]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 806698c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 806698e:	4b24      	ldr	r3, [pc, #144]	@ (8066a20 <RCCEx_PLL2_Config+0x160>)
 8066990:	4013      	ands	r3, r2
 8066992:	687a      	ldr	r2, [r7, #4]
 8066994:	69d2      	ldr	r2, [r2, #28]
 8066996:	00d2      	lsls	r2, r2, #3
 8066998:	4920      	ldr	r1, [pc, #128]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 806699a:	4313      	orrs	r3, r2
 806699c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 806699e:	4b1f      	ldr	r3, [pc, #124]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80669a2:	4a1e      	ldr	r2, [pc, #120]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669a4:	f043 0310 	orr.w	r3, r3, #16
 80669a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80669aa:	683b      	ldr	r3, [r7, #0]
 80669ac:	2b00      	cmp	r3, #0
 80669ae:	d106      	bne.n	80669be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80669b0:	4b1a      	ldr	r3, [pc, #104]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80669b4:	4a19      	ldr	r2, [pc, #100]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80669ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80669bc:	e00f      	b.n	80669de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80669be:	683b      	ldr	r3, [r7, #0]
 80669c0:	2b01      	cmp	r3, #1
 80669c2:	d106      	bne.n	80669d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80669c4:	4b15      	ldr	r3, [pc, #84]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80669c8:	4a14      	ldr	r2, [pc, #80]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80669ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80669d0:	e005      	b.n	80669de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80669d2:	4b12      	ldr	r3, [pc, #72]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80669d6:	4a11      	ldr	r2, [pc, #68]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80669dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80669de:	4b0f      	ldr	r3, [pc, #60]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669e0:	681b      	ldr	r3, [r3, #0]
 80669e2:	4a0e      	ldr	r2, [pc, #56]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 80669e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80669e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80669ea:	f7f9 fd4f 	bl	806048c <HAL_GetTick>
 80669ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80669f0:	e008      	b.n	8066a04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80669f2:	f7f9 fd4b 	bl	806048c <HAL_GetTick>
 80669f6:	4602      	mov	r2, r0
 80669f8:	68bb      	ldr	r3, [r7, #8]
 80669fa:	1ad3      	subs	r3, r2, r3
 80669fc:	2b02      	cmp	r3, #2
 80669fe:	d901      	bls.n	8066a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8066a00:	2303      	movs	r3, #3
 8066a02:	e006      	b.n	8066a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8066a04:	4b05      	ldr	r3, [pc, #20]	@ (8066a1c <RCCEx_PLL2_Config+0x15c>)
 8066a06:	681b      	ldr	r3, [r3, #0]
 8066a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8066a0c:	2b00      	cmp	r3, #0
 8066a0e:	d0f0      	beq.n	80669f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8066a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8066a12:	4618      	mov	r0, r3
 8066a14:	3710      	adds	r7, #16
 8066a16:	46bd      	mov	sp, r7
 8066a18:	bd80      	pop	{r7, pc}
 8066a1a:	bf00      	nop
 8066a1c:	58024400 	.word	0x58024400
 8066a20:	ffff0007 	.word	0xffff0007

08066a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8066a24:	b580      	push	{r7, lr}
 8066a26:	b084      	sub	sp, #16
 8066a28:	af00      	add	r7, sp, #0
 8066a2a:	6078      	str	r0, [r7, #4]
 8066a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8066a2e:	2300      	movs	r3, #0
 8066a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8066a32:	4b53      	ldr	r3, [pc, #332]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066a36:	f003 0303 	and.w	r3, r3, #3
 8066a3a:	2b03      	cmp	r3, #3
 8066a3c:	d101      	bne.n	8066a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8066a3e:	2301      	movs	r3, #1
 8066a40:	e099      	b.n	8066b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8066a42:	4b4f      	ldr	r3, [pc, #316]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a44:	681b      	ldr	r3, [r3, #0]
 8066a46:	4a4e      	ldr	r2, [pc, #312]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8066a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8066a4e:	f7f9 fd1d 	bl	806048c <HAL_GetTick>
 8066a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8066a54:	e008      	b.n	8066a68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8066a56:	f7f9 fd19 	bl	806048c <HAL_GetTick>
 8066a5a:	4602      	mov	r2, r0
 8066a5c:	68bb      	ldr	r3, [r7, #8]
 8066a5e:	1ad3      	subs	r3, r2, r3
 8066a60:	2b02      	cmp	r3, #2
 8066a62:	d901      	bls.n	8066a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8066a64:	2303      	movs	r3, #3
 8066a66:	e086      	b.n	8066b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8066a68:	4b45      	ldr	r3, [pc, #276]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a6a:	681b      	ldr	r3, [r3, #0]
 8066a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8066a70:	2b00      	cmp	r3, #0
 8066a72:	d1f0      	bne.n	8066a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8066a74:	4b42      	ldr	r3, [pc, #264]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8066a78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8066a7c:	687b      	ldr	r3, [r7, #4]
 8066a7e:	681b      	ldr	r3, [r3, #0]
 8066a80:	051b      	lsls	r3, r3, #20
 8066a82:	493f      	ldr	r1, [pc, #252]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066a84:	4313      	orrs	r3, r2
 8066a86:	628b      	str	r3, [r1, #40]	@ 0x28
 8066a88:	687b      	ldr	r3, [r7, #4]
 8066a8a:	685b      	ldr	r3, [r3, #4]
 8066a8c:	3b01      	subs	r3, #1
 8066a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8066a92:	687b      	ldr	r3, [r7, #4]
 8066a94:	689b      	ldr	r3, [r3, #8]
 8066a96:	3b01      	subs	r3, #1
 8066a98:	025b      	lsls	r3, r3, #9
 8066a9a:	b29b      	uxth	r3, r3
 8066a9c:	431a      	orrs	r2, r3
 8066a9e:	687b      	ldr	r3, [r7, #4]
 8066aa0:	68db      	ldr	r3, [r3, #12]
 8066aa2:	3b01      	subs	r3, #1
 8066aa4:	041b      	lsls	r3, r3, #16
 8066aa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8066aaa:	431a      	orrs	r2, r3
 8066aac:	687b      	ldr	r3, [r7, #4]
 8066aae:	691b      	ldr	r3, [r3, #16]
 8066ab0:	3b01      	subs	r3, #1
 8066ab2:	061b      	lsls	r3, r3, #24
 8066ab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8066ab8:	4931      	ldr	r1, [pc, #196]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066aba:	4313      	orrs	r3, r2
 8066abc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8066abe:	4b30      	ldr	r3, [pc, #192]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066ac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8066ac6:	687b      	ldr	r3, [r7, #4]
 8066ac8:	695b      	ldr	r3, [r3, #20]
 8066aca:	492d      	ldr	r1, [pc, #180]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066acc:	4313      	orrs	r3, r2
 8066ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8066ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066ad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8066ad8:	687b      	ldr	r3, [r7, #4]
 8066ada:	699b      	ldr	r3, [r3, #24]
 8066adc:	4928      	ldr	r1, [pc, #160]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066ade:	4313      	orrs	r3, r2
 8066ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8066ae2:	4b27      	ldr	r3, [pc, #156]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066ae6:	4a26      	ldr	r2, [pc, #152]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8066aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8066aee:	4b24      	ldr	r3, [pc, #144]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8066af2:	4b24      	ldr	r3, [pc, #144]	@ (8066b84 <RCCEx_PLL3_Config+0x160>)
 8066af4:	4013      	ands	r3, r2
 8066af6:	687a      	ldr	r2, [r7, #4]
 8066af8:	69d2      	ldr	r2, [r2, #28]
 8066afa:	00d2      	lsls	r2, r2, #3
 8066afc:	4920      	ldr	r1, [pc, #128]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066afe:	4313      	orrs	r3, r2
 8066b00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8066b02:	4b1f      	ldr	r3, [pc, #124]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066b06:	4a1e      	ldr	r2, [pc, #120]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8066b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8066b0e:	683b      	ldr	r3, [r7, #0]
 8066b10:	2b00      	cmp	r3, #0
 8066b12:	d106      	bne.n	8066b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8066b14:	4b1a      	ldr	r3, [pc, #104]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066b18:	4a19      	ldr	r2, [pc, #100]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8066b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8066b20:	e00f      	b.n	8066b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8066b22:	683b      	ldr	r3, [r7, #0]
 8066b24:	2b01      	cmp	r3, #1
 8066b26:	d106      	bne.n	8066b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8066b28:	4b15      	ldr	r3, [pc, #84]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066b2c:	4a14      	ldr	r2, [pc, #80]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8066b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8066b34:	e005      	b.n	8066b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8066b36:	4b12      	ldr	r3, [pc, #72]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8066b3a:	4a11      	ldr	r2, [pc, #68]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8066b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8066b42:	4b0f      	ldr	r3, [pc, #60]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b44:	681b      	ldr	r3, [r3, #0]
 8066b46:	4a0e      	ldr	r2, [pc, #56]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8066b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8066b4e:	f7f9 fc9d 	bl	806048c <HAL_GetTick>
 8066b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8066b54:	e008      	b.n	8066b68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8066b56:	f7f9 fc99 	bl	806048c <HAL_GetTick>
 8066b5a:	4602      	mov	r2, r0
 8066b5c:	68bb      	ldr	r3, [r7, #8]
 8066b5e:	1ad3      	subs	r3, r2, r3
 8066b60:	2b02      	cmp	r3, #2
 8066b62:	d901      	bls.n	8066b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8066b64:	2303      	movs	r3, #3
 8066b66:	e006      	b.n	8066b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8066b68:	4b05      	ldr	r3, [pc, #20]	@ (8066b80 <RCCEx_PLL3_Config+0x15c>)
 8066b6a:	681b      	ldr	r3, [r3, #0]
 8066b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8066b70:	2b00      	cmp	r3, #0
 8066b72:	d0f0      	beq.n	8066b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8066b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8066b76:	4618      	mov	r0, r3
 8066b78:	3710      	adds	r7, #16
 8066b7a:	46bd      	mov	sp, r7
 8066b7c:	bd80      	pop	{r7, pc}
 8066b7e:	bf00      	nop
 8066b80:	58024400 	.word	0x58024400
 8066b84:	ffff0007 	.word	0xffff0007

08066b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8066b88:	b580      	push	{r7, lr}
 8066b8a:	b082      	sub	sp, #8
 8066b8c:	af00      	add	r7, sp, #0
 8066b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8066b90:	687b      	ldr	r3, [r7, #4]
 8066b92:	2b00      	cmp	r3, #0
 8066b94:	d101      	bne.n	8066b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8066b96:	2301      	movs	r3, #1
 8066b98:	e049      	b.n	8066c2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8066b9a:	687b      	ldr	r3, [r7, #4]
 8066b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8066ba0:	b2db      	uxtb	r3, r3
 8066ba2:	2b00      	cmp	r3, #0
 8066ba4:	d106      	bne.n	8066bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8066ba6:	687b      	ldr	r3, [r7, #4]
 8066ba8:	2200      	movs	r2, #0
 8066baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8066bae:	6878      	ldr	r0, [r7, #4]
 8066bb0:	f000 f841 	bl	8066c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8066bb4:	687b      	ldr	r3, [r7, #4]
 8066bb6:	2202      	movs	r2, #2
 8066bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8066bbc:	687b      	ldr	r3, [r7, #4]
 8066bbe:	681a      	ldr	r2, [r3, #0]
 8066bc0:	687b      	ldr	r3, [r7, #4]
 8066bc2:	3304      	adds	r3, #4
 8066bc4:	4619      	mov	r1, r3
 8066bc6:	4610      	mov	r0, r2
 8066bc8:	f000 f9e8 	bl	8066f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8066bcc:	687b      	ldr	r3, [r7, #4]
 8066bce:	2201      	movs	r2, #1
 8066bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8066bd4:	687b      	ldr	r3, [r7, #4]
 8066bd6:	2201      	movs	r2, #1
 8066bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8066bdc:	687b      	ldr	r3, [r7, #4]
 8066bde:	2201      	movs	r2, #1
 8066be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8066be4:	687b      	ldr	r3, [r7, #4]
 8066be6:	2201      	movs	r2, #1
 8066be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8066bec:	687b      	ldr	r3, [r7, #4]
 8066bee:	2201      	movs	r2, #1
 8066bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8066bf4:	687b      	ldr	r3, [r7, #4]
 8066bf6:	2201      	movs	r2, #1
 8066bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8066bfc:	687b      	ldr	r3, [r7, #4]
 8066bfe:	2201      	movs	r2, #1
 8066c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8066c04:	687b      	ldr	r3, [r7, #4]
 8066c06:	2201      	movs	r2, #1
 8066c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8066c0c:	687b      	ldr	r3, [r7, #4]
 8066c0e:	2201      	movs	r2, #1
 8066c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8066c14:	687b      	ldr	r3, [r7, #4]
 8066c16:	2201      	movs	r2, #1
 8066c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8066c1c:	687b      	ldr	r3, [r7, #4]
 8066c1e:	2201      	movs	r2, #1
 8066c20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8066c24:	687b      	ldr	r3, [r7, #4]
 8066c26:	2201      	movs	r2, #1
 8066c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8066c2c:	2300      	movs	r3, #0
}
 8066c2e:	4618      	mov	r0, r3
 8066c30:	3708      	adds	r7, #8
 8066c32:	46bd      	mov	sp, r7
 8066c34:	bd80      	pop	{r7, pc}

08066c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8066c36:	b480      	push	{r7}
 8066c38:	b083      	sub	sp, #12
 8066c3a:	af00      	add	r7, sp, #0
 8066c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8066c3e:	bf00      	nop
 8066c40:	370c      	adds	r7, #12
 8066c42:	46bd      	mov	sp, r7
 8066c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066c48:	4770      	bx	lr
	...

08066c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8066c4c:	b480      	push	{r7}
 8066c4e:	b085      	sub	sp, #20
 8066c50:	af00      	add	r7, sp, #0
 8066c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8066c54:	687b      	ldr	r3, [r7, #4]
 8066c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8066c5a:	b2db      	uxtb	r3, r3
 8066c5c:	2b01      	cmp	r3, #1
 8066c5e:	d001      	beq.n	8066c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8066c60:	2301      	movs	r3, #1
 8066c62:	e054      	b.n	8066d0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8066c64:	687b      	ldr	r3, [r7, #4]
 8066c66:	2202      	movs	r2, #2
 8066c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8066c6c:	687b      	ldr	r3, [r7, #4]
 8066c6e:	681b      	ldr	r3, [r3, #0]
 8066c70:	68da      	ldr	r2, [r3, #12]
 8066c72:	687b      	ldr	r3, [r7, #4]
 8066c74:	681b      	ldr	r3, [r3, #0]
 8066c76:	f042 0201 	orr.w	r2, r2, #1
 8066c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8066c7c:	687b      	ldr	r3, [r7, #4]
 8066c7e:	681b      	ldr	r3, [r3, #0]
 8066c80:	4a26      	ldr	r2, [pc, #152]	@ (8066d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8066c82:	4293      	cmp	r3, r2
 8066c84:	d022      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066c86:	687b      	ldr	r3, [r7, #4]
 8066c88:	681b      	ldr	r3, [r3, #0]
 8066c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8066c8e:	d01d      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066c90:	687b      	ldr	r3, [r7, #4]
 8066c92:	681b      	ldr	r3, [r3, #0]
 8066c94:	4a22      	ldr	r2, [pc, #136]	@ (8066d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8066c96:	4293      	cmp	r3, r2
 8066c98:	d018      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066c9a:	687b      	ldr	r3, [r7, #4]
 8066c9c:	681b      	ldr	r3, [r3, #0]
 8066c9e:	4a21      	ldr	r2, [pc, #132]	@ (8066d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8066ca0:	4293      	cmp	r3, r2
 8066ca2:	d013      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066ca4:	687b      	ldr	r3, [r7, #4]
 8066ca6:	681b      	ldr	r3, [r3, #0]
 8066ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8066d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8066caa:	4293      	cmp	r3, r2
 8066cac:	d00e      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066cae:	687b      	ldr	r3, [r7, #4]
 8066cb0:	681b      	ldr	r3, [r3, #0]
 8066cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8066d2c <HAL_TIM_Base_Start_IT+0xe0>)
 8066cb4:	4293      	cmp	r3, r2
 8066cb6:	d009      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066cb8:	687b      	ldr	r3, [r7, #4]
 8066cba:	681b      	ldr	r3, [r3, #0]
 8066cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8066d30 <HAL_TIM_Base_Start_IT+0xe4>)
 8066cbe:	4293      	cmp	r3, r2
 8066cc0:	d004      	beq.n	8066ccc <HAL_TIM_Base_Start_IT+0x80>
 8066cc2:	687b      	ldr	r3, [r7, #4]
 8066cc4:	681b      	ldr	r3, [r3, #0]
 8066cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8066d34 <HAL_TIM_Base_Start_IT+0xe8>)
 8066cc8:	4293      	cmp	r3, r2
 8066cca:	d115      	bne.n	8066cf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8066ccc:	687b      	ldr	r3, [r7, #4]
 8066cce:	681b      	ldr	r3, [r3, #0]
 8066cd0:	689a      	ldr	r2, [r3, #8]
 8066cd2:	4b19      	ldr	r3, [pc, #100]	@ (8066d38 <HAL_TIM_Base_Start_IT+0xec>)
 8066cd4:	4013      	ands	r3, r2
 8066cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8066cd8:	68fb      	ldr	r3, [r7, #12]
 8066cda:	2b06      	cmp	r3, #6
 8066cdc:	d015      	beq.n	8066d0a <HAL_TIM_Base_Start_IT+0xbe>
 8066cde:	68fb      	ldr	r3, [r7, #12]
 8066ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8066ce4:	d011      	beq.n	8066d0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8066ce6:	687b      	ldr	r3, [r7, #4]
 8066ce8:	681b      	ldr	r3, [r3, #0]
 8066cea:	681a      	ldr	r2, [r3, #0]
 8066cec:	687b      	ldr	r3, [r7, #4]
 8066cee:	681b      	ldr	r3, [r3, #0]
 8066cf0:	f042 0201 	orr.w	r2, r2, #1
 8066cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8066cf6:	e008      	b.n	8066d0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8066cf8:	687b      	ldr	r3, [r7, #4]
 8066cfa:	681b      	ldr	r3, [r3, #0]
 8066cfc:	681a      	ldr	r2, [r3, #0]
 8066cfe:	687b      	ldr	r3, [r7, #4]
 8066d00:	681b      	ldr	r3, [r3, #0]
 8066d02:	f042 0201 	orr.w	r2, r2, #1
 8066d06:	601a      	str	r2, [r3, #0]
 8066d08:	e000      	b.n	8066d0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8066d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8066d0c:	2300      	movs	r3, #0
}
 8066d0e:	4618      	mov	r0, r3
 8066d10:	3714      	adds	r7, #20
 8066d12:	46bd      	mov	sp, r7
 8066d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066d18:	4770      	bx	lr
 8066d1a:	bf00      	nop
 8066d1c:	40010000 	.word	0x40010000
 8066d20:	40000400 	.word	0x40000400
 8066d24:	40000800 	.word	0x40000800
 8066d28:	40000c00 	.word	0x40000c00
 8066d2c:	40010400 	.word	0x40010400
 8066d30:	40001800 	.word	0x40001800
 8066d34:	40014000 	.word	0x40014000
 8066d38:	00010007 	.word	0x00010007

08066d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8066d3c:	b580      	push	{r7, lr}
 8066d3e:	b084      	sub	sp, #16
 8066d40:	af00      	add	r7, sp, #0
 8066d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8066d44:	687b      	ldr	r3, [r7, #4]
 8066d46:	681b      	ldr	r3, [r3, #0]
 8066d48:	68db      	ldr	r3, [r3, #12]
 8066d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8066d4c:	687b      	ldr	r3, [r7, #4]
 8066d4e:	681b      	ldr	r3, [r3, #0]
 8066d50:	691b      	ldr	r3, [r3, #16]
 8066d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8066d54:	68bb      	ldr	r3, [r7, #8]
 8066d56:	f003 0302 	and.w	r3, r3, #2
 8066d5a:	2b00      	cmp	r3, #0
 8066d5c:	d020      	beq.n	8066da0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8066d5e:	68fb      	ldr	r3, [r7, #12]
 8066d60:	f003 0302 	and.w	r3, r3, #2
 8066d64:	2b00      	cmp	r3, #0
 8066d66:	d01b      	beq.n	8066da0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8066d68:	687b      	ldr	r3, [r7, #4]
 8066d6a:	681b      	ldr	r3, [r3, #0]
 8066d6c:	f06f 0202 	mvn.w	r2, #2
 8066d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8066d72:	687b      	ldr	r3, [r7, #4]
 8066d74:	2201      	movs	r2, #1
 8066d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8066d78:	687b      	ldr	r3, [r7, #4]
 8066d7a:	681b      	ldr	r3, [r3, #0]
 8066d7c:	699b      	ldr	r3, [r3, #24]
 8066d7e:	f003 0303 	and.w	r3, r3, #3
 8066d82:	2b00      	cmp	r3, #0
 8066d84:	d003      	beq.n	8066d8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8066d86:	6878      	ldr	r0, [r7, #4]
 8066d88:	f000 f8e9 	bl	8066f5e <HAL_TIM_IC_CaptureCallback>
 8066d8c:	e005      	b.n	8066d9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8066d8e:	6878      	ldr	r0, [r7, #4]
 8066d90:	f000 f8db 	bl	8066f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8066d94:	6878      	ldr	r0, [r7, #4]
 8066d96:	f000 f8ec 	bl	8066f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8066d9a:	687b      	ldr	r3, [r7, #4]
 8066d9c:	2200      	movs	r2, #0
 8066d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8066da0:	68bb      	ldr	r3, [r7, #8]
 8066da2:	f003 0304 	and.w	r3, r3, #4
 8066da6:	2b00      	cmp	r3, #0
 8066da8:	d020      	beq.n	8066dec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8066daa:	68fb      	ldr	r3, [r7, #12]
 8066dac:	f003 0304 	and.w	r3, r3, #4
 8066db0:	2b00      	cmp	r3, #0
 8066db2:	d01b      	beq.n	8066dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8066db4:	687b      	ldr	r3, [r7, #4]
 8066db6:	681b      	ldr	r3, [r3, #0]
 8066db8:	f06f 0204 	mvn.w	r2, #4
 8066dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8066dbe:	687b      	ldr	r3, [r7, #4]
 8066dc0:	2202      	movs	r2, #2
 8066dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8066dc4:	687b      	ldr	r3, [r7, #4]
 8066dc6:	681b      	ldr	r3, [r3, #0]
 8066dc8:	699b      	ldr	r3, [r3, #24]
 8066dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8066dce:	2b00      	cmp	r3, #0
 8066dd0:	d003      	beq.n	8066dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8066dd2:	6878      	ldr	r0, [r7, #4]
 8066dd4:	f000 f8c3 	bl	8066f5e <HAL_TIM_IC_CaptureCallback>
 8066dd8:	e005      	b.n	8066de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8066dda:	6878      	ldr	r0, [r7, #4]
 8066ddc:	f000 f8b5 	bl	8066f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8066de0:	6878      	ldr	r0, [r7, #4]
 8066de2:	f000 f8c6 	bl	8066f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8066de6:	687b      	ldr	r3, [r7, #4]
 8066de8:	2200      	movs	r2, #0
 8066dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8066dec:	68bb      	ldr	r3, [r7, #8]
 8066dee:	f003 0308 	and.w	r3, r3, #8
 8066df2:	2b00      	cmp	r3, #0
 8066df4:	d020      	beq.n	8066e38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8066df6:	68fb      	ldr	r3, [r7, #12]
 8066df8:	f003 0308 	and.w	r3, r3, #8
 8066dfc:	2b00      	cmp	r3, #0
 8066dfe:	d01b      	beq.n	8066e38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8066e00:	687b      	ldr	r3, [r7, #4]
 8066e02:	681b      	ldr	r3, [r3, #0]
 8066e04:	f06f 0208 	mvn.w	r2, #8
 8066e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8066e0a:	687b      	ldr	r3, [r7, #4]
 8066e0c:	2204      	movs	r2, #4
 8066e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8066e10:	687b      	ldr	r3, [r7, #4]
 8066e12:	681b      	ldr	r3, [r3, #0]
 8066e14:	69db      	ldr	r3, [r3, #28]
 8066e16:	f003 0303 	and.w	r3, r3, #3
 8066e1a:	2b00      	cmp	r3, #0
 8066e1c:	d003      	beq.n	8066e26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8066e1e:	6878      	ldr	r0, [r7, #4]
 8066e20:	f000 f89d 	bl	8066f5e <HAL_TIM_IC_CaptureCallback>
 8066e24:	e005      	b.n	8066e32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8066e26:	6878      	ldr	r0, [r7, #4]
 8066e28:	f000 f88f 	bl	8066f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8066e2c:	6878      	ldr	r0, [r7, #4]
 8066e2e:	f000 f8a0 	bl	8066f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8066e32:	687b      	ldr	r3, [r7, #4]
 8066e34:	2200      	movs	r2, #0
 8066e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8066e38:	68bb      	ldr	r3, [r7, #8]
 8066e3a:	f003 0310 	and.w	r3, r3, #16
 8066e3e:	2b00      	cmp	r3, #0
 8066e40:	d020      	beq.n	8066e84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8066e42:	68fb      	ldr	r3, [r7, #12]
 8066e44:	f003 0310 	and.w	r3, r3, #16
 8066e48:	2b00      	cmp	r3, #0
 8066e4a:	d01b      	beq.n	8066e84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8066e4c:	687b      	ldr	r3, [r7, #4]
 8066e4e:	681b      	ldr	r3, [r3, #0]
 8066e50:	f06f 0210 	mvn.w	r2, #16
 8066e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8066e56:	687b      	ldr	r3, [r7, #4]
 8066e58:	2208      	movs	r2, #8
 8066e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8066e5c:	687b      	ldr	r3, [r7, #4]
 8066e5e:	681b      	ldr	r3, [r3, #0]
 8066e60:	69db      	ldr	r3, [r3, #28]
 8066e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8066e66:	2b00      	cmp	r3, #0
 8066e68:	d003      	beq.n	8066e72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8066e6a:	6878      	ldr	r0, [r7, #4]
 8066e6c:	f000 f877 	bl	8066f5e <HAL_TIM_IC_CaptureCallback>
 8066e70:	e005      	b.n	8066e7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8066e72:	6878      	ldr	r0, [r7, #4]
 8066e74:	f000 f869 	bl	8066f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8066e78:	6878      	ldr	r0, [r7, #4]
 8066e7a:	f000 f87a 	bl	8066f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8066e7e:	687b      	ldr	r3, [r7, #4]
 8066e80:	2200      	movs	r2, #0
 8066e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8066e84:	68bb      	ldr	r3, [r7, #8]
 8066e86:	f003 0301 	and.w	r3, r3, #1
 8066e8a:	2b00      	cmp	r3, #0
 8066e8c:	d00c      	beq.n	8066ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8066e8e:	68fb      	ldr	r3, [r7, #12]
 8066e90:	f003 0301 	and.w	r3, r3, #1
 8066e94:	2b00      	cmp	r3, #0
 8066e96:	d007      	beq.n	8066ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8066e98:	687b      	ldr	r3, [r7, #4]
 8066e9a:	681b      	ldr	r3, [r3, #0]
 8066e9c:	f06f 0201 	mvn.w	r2, #1
 8066ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8066ea2:	6878      	ldr	r0, [r7, #4]
 8066ea4:	f7f8 fc5a 	bl	805f75c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8066ea8:	68bb      	ldr	r3, [r7, #8]
 8066eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8066eae:	2b00      	cmp	r3, #0
 8066eb0:	d104      	bne.n	8066ebc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8066eb2:	68bb      	ldr	r3, [r7, #8]
 8066eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8066eb8:	2b00      	cmp	r3, #0
 8066eba:	d00c      	beq.n	8066ed6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8066ebc:	68fb      	ldr	r3, [r7, #12]
 8066ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8066ec2:	2b00      	cmp	r3, #0
 8066ec4:	d007      	beq.n	8066ed6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8066ec6:	687b      	ldr	r3, [r7, #4]
 8066ec8:	681b      	ldr	r3, [r3, #0]
 8066eca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8066ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8066ed0:	6878      	ldr	r0, [r7, #4]
 8066ed2:	f000 f90d 	bl	80670f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8066ed6:	68bb      	ldr	r3, [r7, #8]
 8066ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8066edc:	2b00      	cmp	r3, #0
 8066ede:	d00c      	beq.n	8066efa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8066ee0:	68fb      	ldr	r3, [r7, #12]
 8066ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8066ee6:	2b00      	cmp	r3, #0
 8066ee8:	d007      	beq.n	8066efa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8066eea:	687b      	ldr	r3, [r7, #4]
 8066eec:	681b      	ldr	r3, [r3, #0]
 8066eee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8066ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8066ef4:	6878      	ldr	r0, [r7, #4]
 8066ef6:	f000 f905 	bl	8067104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8066efa:	68bb      	ldr	r3, [r7, #8]
 8066efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8066f00:	2b00      	cmp	r3, #0
 8066f02:	d00c      	beq.n	8066f1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8066f04:	68fb      	ldr	r3, [r7, #12]
 8066f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8066f0a:	2b00      	cmp	r3, #0
 8066f0c:	d007      	beq.n	8066f1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8066f0e:	687b      	ldr	r3, [r7, #4]
 8066f10:	681b      	ldr	r3, [r3, #0]
 8066f12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8066f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8066f18:	6878      	ldr	r0, [r7, #4]
 8066f1a:	f000 f834 	bl	8066f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8066f1e:	68bb      	ldr	r3, [r7, #8]
 8066f20:	f003 0320 	and.w	r3, r3, #32
 8066f24:	2b00      	cmp	r3, #0
 8066f26:	d00c      	beq.n	8066f42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8066f28:	68fb      	ldr	r3, [r7, #12]
 8066f2a:	f003 0320 	and.w	r3, r3, #32
 8066f2e:	2b00      	cmp	r3, #0
 8066f30:	d007      	beq.n	8066f42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8066f32:	687b      	ldr	r3, [r7, #4]
 8066f34:	681b      	ldr	r3, [r3, #0]
 8066f36:	f06f 0220 	mvn.w	r2, #32
 8066f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8066f3c:	6878      	ldr	r0, [r7, #4]
 8066f3e:	f000 f8cd 	bl	80670dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8066f42:	bf00      	nop
 8066f44:	3710      	adds	r7, #16
 8066f46:	46bd      	mov	sp, r7
 8066f48:	bd80      	pop	{r7, pc}

08066f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8066f4a:	b480      	push	{r7}
 8066f4c:	b083      	sub	sp, #12
 8066f4e:	af00      	add	r7, sp, #0
 8066f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8066f52:	bf00      	nop
 8066f54:	370c      	adds	r7, #12
 8066f56:	46bd      	mov	sp, r7
 8066f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066f5c:	4770      	bx	lr

08066f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8066f5e:	b480      	push	{r7}
 8066f60:	b083      	sub	sp, #12
 8066f62:	af00      	add	r7, sp, #0
 8066f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8066f66:	bf00      	nop
 8066f68:	370c      	adds	r7, #12
 8066f6a:	46bd      	mov	sp, r7
 8066f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066f70:	4770      	bx	lr

08066f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8066f72:	b480      	push	{r7}
 8066f74:	b083      	sub	sp, #12
 8066f76:	af00      	add	r7, sp, #0
 8066f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8066f7a:	bf00      	nop
 8066f7c:	370c      	adds	r7, #12
 8066f7e:	46bd      	mov	sp, r7
 8066f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066f84:	4770      	bx	lr

08066f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8066f86:	b480      	push	{r7}
 8066f88:	b083      	sub	sp, #12
 8066f8a:	af00      	add	r7, sp, #0
 8066f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8066f8e:	bf00      	nop
 8066f90:	370c      	adds	r7, #12
 8066f92:	46bd      	mov	sp, r7
 8066f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066f98:	4770      	bx	lr
	...

08066f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8066f9c:	b480      	push	{r7}
 8066f9e:	b085      	sub	sp, #20
 8066fa0:	af00      	add	r7, sp, #0
 8066fa2:	6078      	str	r0, [r7, #4]
 8066fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8066fa6:	687b      	ldr	r3, [r7, #4]
 8066fa8:	681b      	ldr	r3, [r3, #0]
 8066faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8066fac:	687b      	ldr	r3, [r7, #4]
 8066fae:	4a43      	ldr	r2, [pc, #268]	@ (80670bc <TIM_Base_SetConfig+0x120>)
 8066fb0:	4293      	cmp	r3, r2
 8066fb2:	d013      	beq.n	8066fdc <TIM_Base_SetConfig+0x40>
 8066fb4:	687b      	ldr	r3, [r7, #4]
 8066fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8066fba:	d00f      	beq.n	8066fdc <TIM_Base_SetConfig+0x40>
 8066fbc:	687b      	ldr	r3, [r7, #4]
 8066fbe:	4a40      	ldr	r2, [pc, #256]	@ (80670c0 <TIM_Base_SetConfig+0x124>)
 8066fc0:	4293      	cmp	r3, r2
 8066fc2:	d00b      	beq.n	8066fdc <TIM_Base_SetConfig+0x40>
 8066fc4:	687b      	ldr	r3, [r7, #4]
 8066fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80670c4 <TIM_Base_SetConfig+0x128>)
 8066fc8:	4293      	cmp	r3, r2
 8066fca:	d007      	beq.n	8066fdc <TIM_Base_SetConfig+0x40>
 8066fcc:	687b      	ldr	r3, [r7, #4]
 8066fce:	4a3e      	ldr	r2, [pc, #248]	@ (80670c8 <TIM_Base_SetConfig+0x12c>)
 8066fd0:	4293      	cmp	r3, r2
 8066fd2:	d003      	beq.n	8066fdc <TIM_Base_SetConfig+0x40>
 8066fd4:	687b      	ldr	r3, [r7, #4]
 8066fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80670cc <TIM_Base_SetConfig+0x130>)
 8066fd8:	4293      	cmp	r3, r2
 8066fda:	d108      	bne.n	8066fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8066fdc:	68fb      	ldr	r3, [r7, #12]
 8066fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8066fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8066fe4:	683b      	ldr	r3, [r7, #0]
 8066fe6:	685b      	ldr	r3, [r3, #4]
 8066fe8:	68fa      	ldr	r2, [r7, #12]
 8066fea:	4313      	orrs	r3, r2
 8066fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8066fee:	687b      	ldr	r3, [r7, #4]
 8066ff0:	4a32      	ldr	r2, [pc, #200]	@ (80670bc <TIM_Base_SetConfig+0x120>)
 8066ff2:	4293      	cmp	r3, r2
 8066ff4:	d01f      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 8066ff6:	687b      	ldr	r3, [r7, #4]
 8066ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8066ffc:	d01b      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 8066ffe:	687b      	ldr	r3, [r7, #4]
 8067000:	4a2f      	ldr	r2, [pc, #188]	@ (80670c0 <TIM_Base_SetConfig+0x124>)
 8067002:	4293      	cmp	r3, r2
 8067004:	d017      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 8067006:	687b      	ldr	r3, [r7, #4]
 8067008:	4a2e      	ldr	r2, [pc, #184]	@ (80670c4 <TIM_Base_SetConfig+0x128>)
 806700a:	4293      	cmp	r3, r2
 806700c:	d013      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 806700e:	687b      	ldr	r3, [r7, #4]
 8067010:	4a2d      	ldr	r2, [pc, #180]	@ (80670c8 <TIM_Base_SetConfig+0x12c>)
 8067012:	4293      	cmp	r3, r2
 8067014:	d00f      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 8067016:	687b      	ldr	r3, [r7, #4]
 8067018:	4a2c      	ldr	r2, [pc, #176]	@ (80670cc <TIM_Base_SetConfig+0x130>)
 806701a:	4293      	cmp	r3, r2
 806701c:	d00b      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 806701e:	687b      	ldr	r3, [r7, #4]
 8067020:	4a2b      	ldr	r2, [pc, #172]	@ (80670d0 <TIM_Base_SetConfig+0x134>)
 8067022:	4293      	cmp	r3, r2
 8067024:	d007      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 8067026:	687b      	ldr	r3, [r7, #4]
 8067028:	4a2a      	ldr	r2, [pc, #168]	@ (80670d4 <TIM_Base_SetConfig+0x138>)
 806702a:	4293      	cmp	r3, r2
 806702c:	d003      	beq.n	8067036 <TIM_Base_SetConfig+0x9a>
 806702e:	687b      	ldr	r3, [r7, #4]
 8067030:	4a29      	ldr	r2, [pc, #164]	@ (80670d8 <TIM_Base_SetConfig+0x13c>)
 8067032:	4293      	cmp	r3, r2
 8067034:	d108      	bne.n	8067048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8067036:	68fb      	ldr	r3, [r7, #12]
 8067038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806703c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 806703e:	683b      	ldr	r3, [r7, #0]
 8067040:	68db      	ldr	r3, [r3, #12]
 8067042:	68fa      	ldr	r2, [r7, #12]
 8067044:	4313      	orrs	r3, r2
 8067046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8067048:	68fb      	ldr	r3, [r7, #12]
 806704a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 806704e:	683b      	ldr	r3, [r7, #0]
 8067050:	695b      	ldr	r3, [r3, #20]
 8067052:	4313      	orrs	r3, r2
 8067054:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8067056:	683b      	ldr	r3, [r7, #0]
 8067058:	689a      	ldr	r2, [r3, #8]
 806705a:	687b      	ldr	r3, [r7, #4]
 806705c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 806705e:	683b      	ldr	r3, [r7, #0]
 8067060:	681a      	ldr	r2, [r3, #0]
 8067062:	687b      	ldr	r3, [r7, #4]
 8067064:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8067066:	687b      	ldr	r3, [r7, #4]
 8067068:	4a14      	ldr	r2, [pc, #80]	@ (80670bc <TIM_Base_SetConfig+0x120>)
 806706a:	4293      	cmp	r3, r2
 806706c:	d00f      	beq.n	806708e <TIM_Base_SetConfig+0xf2>
 806706e:	687b      	ldr	r3, [r7, #4]
 8067070:	4a16      	ldr	r2, [pc, #88]	@ (80670cc <TIM_Base_SetConfig+0x130>)
 8067072:	4293      	cmp	r3, r2
 8067074:	d00b      	beq.n	806708e <TIM_Base_SetConfig+0xf2>
 8067076:	687b      	ldr	r3, [r7, #4]
 8067078:	4a15      	ldr	r2, [pc, #84]	@ (80670d0 <TIM_Base_SetConfig+0x134>)
 806707a:	4293      	cmp	r3, r2
 806707c:	d007      	beq.n	806708e <TIM_Base_SetConfig+0xf2>
 806707e:	687b      	ldr	r3, [r7, #4]
 8067080:	4a14      	ldr	r2, [pc, #80]	@ (80670d4 <TIM_Base_SetConfig+0x138>)
 8067082:	4293      	cmp	r3, r2
 8067084:	d003      	beq.n	806708e <TIM_Base_SetConfig+0xf2>
 8067086:	687b      	ldr	r3, [r7, #4]
 8067088:	4a13      	ldr	r2, [pc, #76]	@ (80670d8 <TIM_Base_SetConfig+0x13c>)
 806708a:	4293      	cmp	r3, r2
 806708c:	d103      	bne.n	8067096 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 806708e:	683b      	ldr	r3, [r7, #0]
 8067090:	691a      	ldr	r2, [r3, #16]
 8067092:	687b      	ldr	r3, [r7, #4]
 8067094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8067096:	687b      	ldr	r3, [r7, #4]
 8067098:	681b      	ldr	r3, [r3, #0]
 806709a:	f043 0204 	orr.w	r2, r3, #4
 806709e:	687b      	ldr	r3, [r7, #4]
 80670a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80670a2:	687b      	ldr	r3, [r7, #4]
 80670a4:	2201      	movs	r2, #1
 80670a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80670a8:	687b      	ldr	r3, [r7, #4]
 80670aa:	68fa      	ldr	r2, [r7, #12]
 80670ac:	601a      	str	r2, [r3, #0]
}
 80670ae:	bf00      	nop
 80670b0:	3714      	adds	r7, #20
 80670b2:	46bd      	mov	sp, r7
 80670b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80670b8:	4770      	bx	lr
 80670ba:	bf00      	nop
 80670bc:	40010000 	.word	0x40010000
 80670c0:	40000400 	.word	0x40000400
 80670c4:	40000800 	.word	0x40000800
 80670c8:	40000c00 	.word	0x40000c00
 80670cc:	40010400 	.word	0x40010400
 80670d0:	40014000 	.word	0x40014000
 80670d4:	40014400 	.word	0x40014400
 80670d8:	40014800 	.word	0x40014800

080670dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80670dc:	b480      	push	{r7}
 80670de:	b083      	sub	sp, #12
 80670e0:	af00      	add	r7, sp, #0
 80670e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80670e4:	bf00      	nop
 80670e6:	370c      	adds	r7, #12
 80670e8:	46bd      	mov	sp, r7
 80670ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80670ee:	4770      	bx	lr

080670f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80670f0:	b480      	push	{r7}
 80670f2:	b083      	sub	sp, #12
 80670f4:	af00      	add	r7, sp, #0
 80670f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80670f8:	bf00      	nop
 80670fa:	370c      	adds	r7, #12
 80670fc:	46bd      	mov	sp, r7
 80670fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067102:	4770      	bx	lr

08067104 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8067104:	b480      	push	{r7}
 8067106:	b083      	sub	sp, #12
 8067108:	af00      	add	r7, sp, #0
 806710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 806710c:	bf00      	nop
 806710e:	370c      	adds	r7, #12
 8067110:	46bd      	mov	sp, r7
 8067112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067116:	4770      	bx	lr

08067118 <LL_GPIO_SetPinMode>:
{
 8067118:	b480      	push	{r7}
 806711a:	b085      	sub	sp, #20
 806711c:	af00      	add	r7, sp, #0
 806711e:	60f8      	str	r0, [r7, #12]
 8067120:	60b9      	str	r1, [r7, #8]
 8067122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8067124:	68fb      	ldr	r3, [r7, #12]
 8067126:	6819      	ldr	r1, [r3, #0]
 8067128:	68bb      	ldr	r3, [r7, #8]
 806712a:	fb03 f203 	mul.w	r2, r3, r3
 806712e:	4613      	mov	r3, r2
 8067130:	005b      	lsls	r3, r3, #1
 8067132:	4413      	add	r3, r2
 8067134:	43db      	mvns	r3, r3
 8067136:	ea01 0203 	and.w	r2, r1, r3
 806713a:	68bb      	ldr	r3, [r7, #8]
 806713c:	fb03 f303 	mul.w	r3, r3, r3
 8067140:	6879      	ldr	r1, [r7, #4]
 8067142:	fb01 f303 	mul.w	r3, r1, r3
 8067146:	431a      	orrs	r2, r3
 8067148:	68fb      	ldr	r3, [r7, #12]
 806714a:	601a      	str	r2, [r3, #0]
}
 806714c:	bf00      	nop
 806714e:	3714      	adds	r7, #20
 8067150:	46bd      	mov	sp, r7
 8067152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067156:	4770      	bx	lr

08067158 <LL_GPIO_SetPinOutputType>:
{
 8067158:	b480      	push	{r7}
 806715a:	b085      	sub	sp, #20
 806715c:	af00      	add	r7, sp, #0
 806715e:	60f8      	str	r0, [r7, #12]
 8067160:	60b9      	str	r1, [r7, #8]
 8067162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8067164:	68fb      	ldr	r3, [r7, #12]
 8067166:	685a      	ldr	r2, [r3, #4]
 8067168:	68bb      	ldr	r3, [r7, #8]
 806716a:	43db      	mvns	r3, r3
 806716c:	401a      	ands	r2, r3
 806716e:	68bb      	ldr	r3, [r7, #8]
 8067170:	6879      	ldr	r1, [r7, #4]
 8067172:	fb01 f303 	mul.w	r3, r1, r3
 8067176:	431a      	orrs	r2, r3
 8067178:	68fb      	ldr	r3, [r7, #12]
 806717a:	605a      	str	r2, [r3, #4]
}
 806717c:	bf00      	nop
 806717e:	3714      	adds	r7, #20
 8067180:	46bd      	mov	sp, r7
 8067182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067186:	4770      	bx	lr

08067188 <LL_GPIO_SetPinSpeed>:
{
 8067188:	b480      	push	{r7}
 806718a:	b085      	sub	sp, #20
 806718c:	af00      	add	r7, sp, #0
 806718e:	60f8      	str	r0, [r7, #12]
 8067190:	60b9      	str	r1, [r7, #8]
 8067192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8067194:	68fb      	ldr	r3, [r7, #12]
 8067196:	6899      	ldr	r1, [r3, #8]
 8067198:	68bb      	ldr	r3, [r7, #8]
 806719a:	fb03 f203 	mul.w	r2, r3, r3
 806719e:	4613      	mov	r3, r2
 80671a0:	005b      	lsls	r3, r3, #1
 80671a2:	4413      	add	r3, r2
 80671a4:	43db      	mvns	r3, r3
 80671a6:	ea01 0203 	and.w	r2, r1, r3
 80671aa:	68bb      	ldr	r3, [r7, #8]
 80671ac:	fb03 f303 	mul.w	r3, r3, r3
 80671b0:	6879      	ldr	r1, [r7, #4]
 80671b2:	fb01 f303 	mul.w	r3, r1, r3
 80671b6:	431a      	orrs	r2, r3
 80671b8:	68fb      	ldr	r3, [r7, #12]
 80671ba:	609a      	str	r2, [r3, #8]
}
 80671bc:	bf00      	nop
 80671be:	3714      	adds	r7, #20
 80671c0:	46bd      	mov	sp, r7
 80671c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80671c6:	4770      	bx	lr

080671c8 <LL_GPIO_SetPinPull>:
{
 80671c8:	b480      	push	{r7}
 80671ca:	b085      	sub	sp, #20
 80671cc:	af00      	add	r7, sp, #0
 80671ce:	60f8      	str	r0, [r7, #12]
 80671d0:	60b9      	str	r1, [r7, #8]
 80671d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80671d4:	68fb      	ldr	r3, [r7, #12]
 80671d6:	68d9      	ldr	r1, [r3, #12]
 80671d8:	68bb      	ldr	r3, [r7, #8]
 80671da:	fb03 f203 	mul.w	r2, r3, r3
 80671de:	4613      	mov	r3, r2
 80671e0:	005b      	lsls	r3, r3, #1
 80671e2:	4413      	add	r3, r2
 80671e4:	43db      	mvns	r3, r3
 80671e6:	ea01 0203 	and.w	r2, r1, r3
 80671ea:	68bb      	ldr	r3, [r7, #8]
 80671ec:	fb03 f303 	mul.w	r3, r3, r3
 80671f0:	6879      	ldr	r1, [r7, #4]
 80671f2:	fb01 f303 	mul.w	r3, r1, r3
 80671f6:	431a      	orrs	r2, r3
 80671f8:	68fb      	ldr	r3, [r7, #12]
 80671fa:	60da      	str	r2, [r3, #12]
}
 80671fc:	bf00      	nop
 80671fe:	3714      	adds	r7, #20
 8067200:	46bd      	mov	sp, r7
 8067202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067206:	4770      	bx	lr

08067208 <LL_GPIO_SetAFPin_0_7>:
{
 8067208:	b480      	push	{r7}
 806720a:	b085      	sub	sp, #20
 806720c:	af00      	add	r7, sp, #0
 806720e:	60f8      	str	r0, [r7, #12]
 8067210:	60b9      	str	r1, [r7, #8]
 8067212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8067214:	68fb      	ldr	r3, [r7, #12]
 8067216:	6a19      	ldr	r1, [r3, #32]
 8067218:	68bb      	ldr	r3, [r7, #8]
 806721a:	fb03 f303 	mul.w	r3, r3, r3
 806721e:	68ba      	ldr	r2, [r7, #8]
 8067220:	fb02 f303 	mul.w	r3, r2, r3
 8067224:	68ba      	ldr	r2, [r7, #8]
 8067226:	fb03 f202 	mul.w	r2, r3, r2
 806722a:	4613      	mov	r3, r2
 806722c:	011b      	lsls	r3, r3, #4
 806722e:	1a9b      	subs	r3, r3, r2
 8067230:	43db      	mvns	r3, r3
 8067232:	ea01 0203 	and.w	r2, r1, r3
 8067236:	68bb      	ldr	r3, [r7, #8]
 8067238:	fb03 f303 	mul.w	r3, r3, r3
 806723c:	68b9      	ldr	r1, [r7, #8]
 806723e:	fb01 f303 	mul.w	r3, r1, r3
 8067242:	68b9      	ldr	r1, [r7, #8]
 8067244:	fb01 f303 	mul.w	r3, r1, r3
 8067248:	6879      	ldr	r1, [r7, #4]
 806724a:	fb01 f303 	mul.w	r3, r1, r3
 806724e:	431a      	orrs	r2, r3
 8067250:	68fb      	ldr	r3, [r7, #12]
 8067252:	621a      	str	r2, [r3, #32]
}
 8067254:	bf00      	nop
 8067256:	3714      	adds	r7, #20
 8067258:	46bd      	mov	sp, r7
 806725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806725e:	4770      	bx	lr

08067260 <LL_GPIO_SetAFPin_8_15>:
{
 8067260:	b480      	push	{r7}
 8067262:	b085      	sub	sp, #20
 8067264:	af00      	add	r7, sp, #0
 8067266:	60f8      	str	r0, [r7, #12]
 8067268:	60b9      	str	r1, [r7, #8]
 806726a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 806726c:	68fb      	ldr	r3, [r7, #12]
 806726e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8067270:	68bb      	ldr	r3, [r7, #8]
 8067272:	0a1b      	lsrs	r3, r3, #8
 8067274:	68ba      	ldr	r2, [r7, #8]
 8067276:	0a12      	lsrs	r2, r2, #8
 8067278:	fb02 f303 	mul.w	r3, r2, r3
 806727c:	68ba      	ldr	r2, [r7, #8]
 806727e:	0a12      	lsrs	r2, r2, #8
 8067280:	fb02 f303 	mul.w	r3, r2, r3
 8067284:	68ba      	ldr	r2, [r7, #8]
 8067286:	0a12      	lsrs	r2, r2, #8
 8067288:	fb03 f202 	mul.w	r2, r3, r2
 806728c:	4613      	mov	r3, r2
 806728e:	011b      	lsls	r3, r3, #4
 8067290:	1a9b      	subs	r3, r3, r2
 8067292:	43db      	mvns	r3, r3
 8067294:	ea01 0203 	and.w	r2, r1, r3
 8067298:	68bb      	ldr	r3, [r7, #8]
 806729a:	0a1b      	lsrs	r3, r3, #8
 806729c:	68b9      	ldr	r1, [r7, #8]
 806729e:	0a09      	lsrs	r1, r1, #8
 80672a0:	fb01 f303 	mul.w	r3, r1, r3
 80672a4:	68b9      	ldr	r1, [r7, #8]
 80672a6:	0a09      	lsrs	r1, r1, #8
 80672a8:	fb01 f303 	mul.w	r3, r1, r3
 80672ac:	68b9      	ldr	r1, [r7, #8]
 80672ae:	0a09      	lsrs	r1, r1, #8
 80672b0:	fb01 f303 	mul.w	r3, r1, r3
 80672b4:	6879      	ldr	r1, [r7, #4]
 80672b6:	fb01 f303 	mul.w	r3, r1, r3
 80672ba:	431a      	orrs	r2, r3
 80672bc:	68fb      	ldr	r3, [r7, #12]
 80672be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80672c0:	bf00      	nop
 80672c2:	3714      	adds	r7, #20
 80672c4:	46bd      	mov	sp, r7
 80672c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80672ca:	4770      	bx	lr

080672cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80672cc:	b580      	push	{r7, lr}
 80672ce:	b088      	sub	sp, #32
 80672d0:	af00      	add	r7, sp, #0
 80672d2:	6078      	str	r0, [r7, #4]
 80672d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80672d6:	683b      	ldr	r3, [r7, #0]
 80672d8:	681b      	ldr	r3, [r3, #0]
 80672da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80672dc:	693b      	ldr	r3, [r7, #16]
 80672de:	fa93 f3a3 	rbit	r3, r3
 80672e2:	60fb      	str	r3, [r7, #12]
  return result;
 80672e4:	68fb      	ldr	r3, [r7, #12]
 80672e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80672e8:	697b      	ldr	r3, [r7, #20]
 80672ea:	2b00      	cmp	r3, #0
 80672ec:	d101      	bne.n	80672f2 <LL_GPIO_Init+0x26>
    return 32U;
 80672ee:	2320      	movs	r3, #32
 80672f0:	e003      	b.n	80672fa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80672f2:	697b      	ldr	r3, [r7, #20]
 80672f4:	fab3 f383 	clz	r3, r3
 80672f8:	b2db      	uxtb	r3, r3
 80672fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80672fc:	e048      	b.n	8067390 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80672fe:	683b      	ldr	r3, [r7, #0]
 8067300:	681a      	ldr	r2, [r3, #0]
 8067302:	2101      	movs	r1, #1
 8067304:	69fb      	ldr	r3, [r7, #28]
 8067306:	fa01 f303 	lsl.w	r3, r1, r3
 806730a:	4013      	ands	r3, r2
 806730c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 806730e:	69bb      	ldr	r3, [r7, #24]
 8067310:	2b00      	cmp	r3, #0
 8067312:	d03a      	beq.n	806738a <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8067314:	683b      	ldr	r3, [r7, #0]
 8067316:	685b      	ldr	r3, [r3, #4]
 8067318:	2b01      	cmp	r3, #1
 806731a:	d003      	beq.n	8067324 <LL_GPIO_Init+0x58>
 806731c:	683b      	ldr	r3, [r7, #0]
 806731e:	685b      	ldr	r3, [r3, #4]
 8067320:	2b02      	cmp	r3, #2
 8067322:	d10e      	bne.n	8067342 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8067324:	683b      	ldr	r3, [r7, #0]
 8067326:	689b      	ldr	r3, [r3, #8]
 8067328:	461a      	mov	r2, r3
 806732a:	69b9      	ldr	r1, [r7, #24]
 806732c:	6878      	ldr	r0, [r7, #4]
 806732e:	f7ff ff2b 	bl	8067188 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8067332:	683b      	ldr	r3, [r7, #0]
 8067334:	6819      	ldr	r1, [r3, #0]
 8067336:	683b      	ldr	r3, [r7, #0]
 8067338:	68db      	ldr	r3, [r3, #12]
 806733a:	461a      	mov	r2, r3
 806733c:	6878      	ldr	r0, [r7, #4]
 806733e:	f7ff ff0b 	bl	8067158 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8067342:	683b      	ldr	r3, [r7, #0]
 8067344:	691b      	ldr	r3, [r3, #16]
 8067346:	461a      	mov	r2, r3
 8067348:	69b9      	ldr	r1, [r7, #24]
 806734a:	6878      	ldr	r0, [r7, #4]
 806734c:	f7ff ff3c 	bl	80671c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8067350:	683b      	ldr	r3, [r7, #0]
 8067352:	685b      	ldr	r3, [r3, #4]
 8067354:	2b02      	cmp	r3, #2
 8067356:	d111      	bne.n	806737c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8067358:	69bb      	ldr	r3, [r7, #24]
 806735a:	2bff      	cmp	r3, #255	@ 0xff
 806735c:	d807      	bhi.n	806736e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 806735e:	683b      	ldr	r3, [r7, #0]
 8067360:	695b      	ldr	r3, [r3, #20]
 8067362:	461a      	mov	r2, r3
 8067364:	69b9      	ldr	r1, [r7, #24]
 8067366:	6878      	ldr	r0, [r7, #4]
 8067368:	f7ff ff4e 	bl	8067208 <LL_GPIO_SetAFPin_0_7>
 806736c:	e006      	b.n	806737c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 806736e:	683b      	ldr	r3, [r7, #0]
 8067370:	695b      	ldr	r3, [r3, #20]
 8067372:	461a      	mov	r2, r3
 8067374:	69b9      	ldr	r1, [r7, #24]
 8067376:	6878      	ldr	r0, [r7, #4]
 8067378:	f7ff ff72 	bl	8067260 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 806737c:	683b      	ldr	r3, [r7, #0]
 806737e:	685b      	ldr	r3, [r3, #4]
 8067380:	461a      	mov	r2, r3
 8067382:	69b9      	ldr	r1, [r7, #24]
 8067384:	6878      	ldr	r0, [r7, #4]
 8067386:	f7ff fec7 	bl	8067118 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 806738a:	69fb      	ldr	r3, [r7, #28]
 806738c:	3301      	adds	r3, #1
 806738e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8067390:	683b      	ldr	r3, [r7, #0]
 8067392:	681a      	ldr	r2, [r3, #0]
 8067394:	69fb      	ldr	r3, [r7, #28]
 8067396:	fa22 f303 	lsr.w	r3, r2, r3
 806739a:	2b00      	cmp	r3, #0
 806739c:	d1af      	bne.n	80672fe <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 806739e:	2300      	movs	r3, #0
}
 80673a0:	4618      	mov	r0, r3
 80673a2:	3720      	adds	r7, #32
 80673a4:	46bd      	mov	sp, r7
 80673a6:	bd80      	pop	{r7, pc}

080673a8 <LL_I2C_Enable>:
{
 80673a8:	b480      	push	{r7}
 80673aa:	b083      	sub	sp, #12
 80673ac:	af00      	add	r7, sp, #0
 80673ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80673b0:	687b      	ldr	r3, [r7, #4]
 80673b2:	681b      	ldr	r3, [r3, #0]
 80673b4:	f043 0201 	orr.w	r2, r3, #1
 80673b8:	687b      	ldr	r3, [r7, #4]
 80673ba:	601a      	str	r2, [r3, #0]
}
 80673bc:	bf00      	nop
 80673be:	370c      	adds	r7, #12
 80673c0:	46bd      	mov	sp, r7
 80673c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80673c6:	4770      	bx	lr

080673c8 <LL_I2C_Disable>:
{
 80673c8:	b480      	push	{r7}
 80673ca:	b083      	sub	sp, #12
 80673cc:	af00      	add	r7, sp, #0
 80673ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80673d0:	687b      	ldr	r3, [r7, #4]
 80673d2:	681b      	ldr	r3, [r3, #0]
 80673d4:	f023 0201 	bic.w	r2, r3, #1
 80673d8:	687b      	ldr	r3, [r7, #4]
 80673da:	601a      	str	r2, [r3, #0]
}
 80673dc:	bf00      	nop
 80673de:	370c      	adds	r7, #12
 80673e0:	46bd      	mov	sp, r7
 80673e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80673e6:	4770      	bx	lr

080673e8 <LL_I2C_ConfigFilters>:
{
 80673e8:	b480      	push	{r7}
 80673ea:	b085      	sub	sp, #20
 80673ec:	af00      	add	r7, sp, #0
 80673ee:	60f8      	str	r0, [r7, #12]
 80673f0:	60b9      	str	r1, [r7, #8]
 80673f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80673f4:	68fb      	ldr	r3, [r7, #12]
 80673f6:	681b      	ldr	r3, [r3, #0]
 80673f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80673fc:	687b      	ldr	r3, [r7, #4]
 80673fe:	0219      	lsls	r1, r3, #8
 8067400:	68bb      	ldr	r3, [r7, #8]
 8067402:	430b      	orrs	r3, r1
 8067404:	431a      	orrs	r2, r3
 8067406:	68fb      	ldr	r3, [r7, #12]
 8067408:	601a      	str	r2, [r3, #0]
}
 806740a:	bf00      	nop
 806740c:	3714      	adds	r7, #20
 806740e:	46bd      	mov	sp, r7
 8067410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067414:	4770      	bx	lr
	...

08067418 <LL_I2C_SetOwnAddress1>:
{
 8067418:	b480      	push	{r7}
 806741a:	b085      	sub	sp, #20
 806741c:	af00      	add	r7, sp, #0
 806741e:	60f8      	str	r0, [r7, #12]
 8067420:	60b9      	str	r1, [r7, #8]
 8067422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8067424:	68fb      	ldr	r3, [r7, #12]
 8067426:	689a      	ldr	r2, [r3, #8]
 8067428:	4b06      	ldr	r3, [pc, #24]	@ (8067444 <LL_I2C_SetOwnAddress1+0x2c>)
 806742a:	4013      	ands	r3, r2
 806742c:	68b9      	ldr	r1, [r7, #8]
 806742e:	687a      	ldr	r2, [r7, #4]
 8067430:	430a      	orrs	r2, r1
 8067432:	431a      	orrs	r2, r3
 8067434:	68fb      	ldr	r3, [r7, #12]
 8067436:	609a      	str	r2, [r3, #8]
}
 8067438:	bf00      	nop
 806743a:	3714      	adds	r7, #20
 806743c:	46bd      	mov	sp, r7
 806743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067442:	4770      	bx	lr
 8067444:	fffff800 	.word	0xfffff800

08067448 <LL_I2C_EnableOwnAddress1>:
{
 8067448:	b480      	push	{r7}
 806744a:	b083      	sub	sp, #12
 806744c:	af00      	add	r7, sp, #0
 806744e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8067450:	687b      	ldr	r3, [r7, #4]
 8067452:	689b      	ldr	r3, [r3, #8]
 8067454:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8067458:	687b      	ldr	r3, [r7, #4]
 806745a:	609a      	str	r2, [r3, #8]
}
 806745c:	bf00      	nop
 806745e:	370c      	adds	r7, #12
 8067460:	46bd      	mov	sp, r7
 8067462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067466:	4770      	bx	lr

08067468 <LL_I2C_DisableOwnAddress1>:
{
 8067468:	b480      	push	{r7}
 806746a:	b083      	sub	sp, #12
 806746c:	af00      	add	r7, sp, #0
 806746e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8067470:	687b      	ldr	r3, [r7, #4]
 8067472:	689b      	ldr	r3, [r3, #8]
 8067474:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8067478:	687b      	ldr	r3, [r7, #4]
 806747a:	609a      	str	r2, [r3, #8]
}
 806747c:	bf00      	nop
 806747e:	370c      	adds	r7, #12
 8067480:	46bd      	mov	sp, r7
 8067482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067486:	4770      	bx	lr

08067488 <LL_I2C_SetTiming>:
{
 8067488:	b480      	push	{r7}
 806748a:	b083      	sub	sp, #12
 806748c:	af00      	add	r7, sp, #0
 806748e:	6078      	str	r0, [r7, #4]
 8067490:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8067492:	687b      	ldr	r3, [r7, #4]
 8067494:	683a      	ldr	r2, [r7, #0]
 8067496:	611a      	str	r2, [r3, #16]
}
 8067498:	bf00      	nop
 806749a:	370c      	adds	r7, #12
 806749c:	46bd      	mov	sp, r7
 806749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80674a2:	4770      	bx	lr

080674a4 <LL_I2C_SetMode>:
{
 80674a4:	b480      	push	{r7}
 80674a6:	b083      	sub	sp, #12
 80674a8:	af00      	add	r7, sp, #0
 80674aa:	6078      	str	r0, [r7, #4]
 80674ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80674ae:	687b      	ldr	r3, [r7, #4]
 80674b0:	681b      	ldr	r3, [r3, #0]
 80674b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80674b6:	683b      	ldr	r3, [r7, #0]
 80674b8:	431a      	orrs	r2, r3
 80674ba:	687b      	ldr	r3, [r7, #4]
 80674bc:	601a      	str	r2, [r3, #0]
}
 80674be:	bf00      	nop
 80674c0:	370c      	adds	r7, #12
 80674c2:	46bd      	mov	sp, r7
 80674c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80674c8:	4770      	bx	lr

080674ca <LL_I2C_AcknowledgeNextData>:
{
 80674ca:	b480      	push	{r7}
 80674cc:	b083      	sub	sp, #12
 80674ce:	af00      	add	r7, sp, #0
 80674d0:	6078      	str	r0, [r7, #4]
 80674d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80674d4:	687b      	ldr	r3, [r7, #4]
 80674d6:	685b      	ldr	r3, [r3, #4]
 80674d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80674dc:	683b      	ldr	r3, [r7, #0]
 80674de:	431a      	orrs	r2, r3
 80674e0:	687b      	ldr	r3, [r7, #4]
 80674e2:	605a      	str	r2, [r3, #4]
}
 80674e4:	bf00      	nop
 80674e6:	370c      	adds	r7, #12
 80674e8:	46bd      	mov	sp, r7
 80674ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80674ee:	4770      	bx	lr

080674f0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80674f0:	b580      	push	{r7, lr}
 80674f2:	b082      	sub	sp, #8
 80674f4:	af00      	add	r7, sp, #0
 80674f6:	6078      	str	r0, [r7, #4]
 80674f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80674fa:	6878      	ldr	r0, [r7, #4]
 80674fc:	f7ff ff64 	bl	80673c8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8067500:	683b      	ldr	r3, [r7, #0]
 8067502:	6899      	ldr	r1, [r3, #8]
 8067504:	683b      	ldr	r3, [r7, #0]
 8067506:	68db      	ldr	r3, [r3, #12]
 8067508:	461a      	mov	r2, r3
 806750a:	6878      	ldr	r0, [r7, #4]
 806750c:	f7ff ff6c 	bl	80673e8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8067510:	683b      	ldr	r3, [r7, #0]
 8067512:	685b      	ldr	r3, [r3, #4]
 8067514:	4619      	mov	r1, r3
 8067516:	6878      	ldr	r0, [r7, #4]
 8067518:	f7ff ffb6 	bl	8067488 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 806751c:	6878      	ldr	r0, [r7, #4]
 806751e:	f7ff ff43 	bl	80673a8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8067522:	6878      	ldr	r0, [r7, #4]
 8067524:	f7ff ffa0 	bl	8067468 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8067528:	683b      	ldr	r3, [r7, #0]
 806752a:	6919      	ldr	r1, [r3, #16]
 806752c:	683b      	ldr	r3, [r7, #0]
 806752e:	699b      	ldr	r3, [r3, #24]
 8067530:	461a      	mov	r2, r3
 8067532:	6878      	ldr	r0, [r7, #4]
 8067534:	f7ff ff70 	bl	8067418 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8067538:	683b      	ldr	r3, [r7, #0]
 806753a:	691b      	ldr	r3, [r3, #16]
 806753c:	2b00      	cmp	r3, #0
 806753e:	d002      	beq.n	8067546 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8067540:	6878      	ldr	r0, [r7, #4]
 8067542:	f7ff ff81 	bl	8067448 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8067546:	683b      	ldr	r3, [r7, #0]
 8067548:	681b      	ldr	r3, [r3, #0]
 806754a:	4619      	mov	r1, r3
 806754c:	6878      	ldr	r0, [r7, #4]
 806754e:	f7ff ffa9 	bl	80674a4 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8067552:	683b      	ldr	r3, [r7, #0]
 8067554:	695b      	ldr	r3, [r3, #20]
 8067556:	4619      	mov	r1, r3
 8067558:	6878      	ldr	r0, [r7, #4]
 806755a:	f7ff ffb6 	bl	80674ca <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 806755e:	2300      	movs	r3, #0
}
 8067560:	4618      	mov	r0, r3
 8067562:	3708      	adds	r7, #8
 8067564:	46bd      	mov	sp, r7
 8067566:	bd80      	pop	{r7, pc}

08067568 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8067568:	b480      	push	{r7}
 806756a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 806756c:	4b07      	ldr	r3, [pc, #28]	@ (806758c <LL_RCC_HSE_IsReady+0x24>)
 806756e:	681b      	ldr	r3, [r3, #0]
 8067570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8067574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8067578:	d101      	bne.n	806757e <LL_RCC_HSE_IsReady+0x16>
 806757a:	2301      	movs	r3, #1
 806757c:	e000      	b.n	8067580 <LL_RCC_HSE_IsReady+0x18>
 806757e:	2300      	movs	r3, #0
}
 8067580:	4618      	mov	r0, r3
 8067582:	46bd      	mov	sp, r7
 8067584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067588:	4770      	bx	lr
 806758a:	bf00      	nop
 806758c:	58024400 	.word	0x58024400

08067590 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8067590:	b480      	push	{r7}
 8067592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8067594:	4b06      	ldr	r3, [pc, #24]	@ (80675b0 <LL_RCC_HSI_IsReady+0x20>)
 8067596:	681b      	ldr	r3, [r3, #0]
 8067598:	f003 0304 	and.w	r3, r3, #4
 806759c:	2b04      	cmp	r3, #4
 806759e:	d101      	bne.n	80675a4 <LL_RCC_HSI_IsReady+0x14>
 80675a0:	2301      	movs	r3, #1
 80675a2:	e000      	b.n	80675a6 <LL_RCC_HSI_IsReady+0x16>
 80675a4:	2300      	movs	r3, #0
}
 80675a6:	4618      	mov	r0, r3
 80675a8:	46bd      	mov	sp, r7
 80675aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80675ae:	4770      	bx	lr
 80675b0:	58024400 	.word	0x58024400

080675b4 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 80675b4:	b480      	push	{r7}
 80675b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80675b8:	4b04      	ldr	r3, [pc, #16]	@ (80675cc <LL_RCC_HSI_GetDivider+0x18>)
 80675ba:	681b      	ldr	r3, [r3, #0]
 80675bc:	f003 0318 	and.w	r3, r3, #24
}
 80675c0:	4618      	mov	r0, r3
 80675c2:	46bd      	mov	sp, r7
 80675c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80675c8:	4770      	bx	lr
 80675ca:	bf00      	nop
 80675cc:	58024400 	.word	0x58024400

080675d0 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 80675d0:	b480      	push	{r7}
 80675d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 80675d4:	4b07      	ldr	r3, [pc, #28]	@ (80675f4 <LL_RCC_CSI_IsReady+0x24>)
 80675d6:	681b      	ldr	r3, [r3, #0]
 80675d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80675dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80675e0:	d101      	bne.n	80675e6 <LL_RCC_CSI_IsReady+0x16>
 80675e2:	2301      	movs	r3, #1
 80675e4:	e000      	b.n	80675e8 <LL_RCC_CSI_IsReady+0x18>
 80675e6:	2300      	movs	r3, #0
}
 80675e8:	4618      	mov	r0, r3
 80675ea:	46bd      	mov	sp, r7
 80675ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80675f0:	4770      	bx	lr
 80675f2:	bf00      	nop
 80675f4:	58024400 	.word	0x58024400

080675f8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80675f8:	b480      	push	{r7}
 80675fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80675fc:	4b06      	ldr	r3, [pc, #24]	@ (8067618 <LL_RCC_LSE_IsReady+0x20>)
 80675fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8067600:	f003 0302 	and.w	r3, r3, #2
 8067604:	2b02      	cmp	r3, #2
 8067606:	d101      	bne.n	806760c <LL_RCC_LSE_IsReady+0x14>
 8067608:	2301      	movs	r3, #1
 806760a:	e000      	b.n	806760e <LL_RCC_LSE_IsReady+0x16>
 806760c:	2300      	movs	r3, #0
}
 806760e:	4618      	mov	r0, r3
 8067610:	46bd      	mov	sp, r7
 8067612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067616:	4770      	bx	lr
 8067618:	58024400 	.word	0x58024400

0806761c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 806761c:	b480      	push	{r7}
 806761e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8067620:	4b04      	ldr	r3, [pc, #16]	@ (8067634 <LL_RCC_GetSysClkSource+0x18>)
 8067622:	691b      	ldr	r3, [r3, #16]
 8067624:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8067628:	4618      	mov	r0, r3
 806762a:	46bd      	mov	sp, r7
 806762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067630:	4770      	bx	lr
 8067632:	bf00      	nop
 8067634:	58024400 	.word	0x58024400

08067638 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8067638:	b480      	push	{r7}
 806763a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 806763c:	4b04      	ldr	r3, [pc, #16]	@ (8067650 <LL_RCC_GetSysPrescaler+0x18>)
 806763e:	699b      	ldr	r3, [r3, #24]
 8067640:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8067644:	4618      	mov	r0, r3
 8067646:	46bd      	mov	sp, r7
 8067648:	f85d 7b04 	ldr.w	r7, [sp], #4
 806764c:	4770      	bx	lr
 806764e:	bf00      	nop
 8067650:	58024400 	.word	0x58024400

08067654 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8067654:	b480      	push	{r7}
 8067656:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8067658:	4b04      	ldr	r3, [pc, #16]	@ (806766c <LL_RCC_GetAHBPrescaler+0x18>)
 806765a:	699b      	ldr	r3, [r3, #24]
 806765c:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8067660:	4618      	mov	r0, r3
 8067662:	46bd      	mov	sp, r7
 8067664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067668:	4770      	bx	lr
 806766a:	bf00      	nop
 806766c:	58024400 	.word	0x58024400

08067670 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8067670:	b480      	push	{r7}
 8067672:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8067674:	4b04      	ldr	r3, [pc, #16]	@ (8067688 <LL_RCC_GetAPB1Prescaler+0x18>)
 8067676:	69db      	ldr	r3, [r3, #28]
 8067678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 806767c:	4618      	mov	r0, r3
 806767e:	46bd      	mov	sp, r7
 8067680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067684:	4770      	bx	lr
 8067686:	bf00      	nop
 8067688:	58024400 	.word	0x58024400

0806768c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 806768c:	b480      	push	{r7}
 806768e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8067690:	4b04      	ldr	r3, [pc, #16]	@ (80676a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8067692:	69db      	ldr	r3, [r3, #28]
 8067694:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8067698:	4618      	mov	r0, r3
 806769a:	46bd      	mov	sp, r7
 806769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80676a0:	4770      	bx	lr
 80676a2:	bf00      	nop
 80676a4:	58024400 	.word	0x58024400

080676a8 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 80676a8:	b480      	push	{r7}
 80676aa:	b085      	sub	sp, #20
 80676ac:	af00      	add	r7, sp, #0
 80676ae:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 80676b0:	687b      	ldr	r3, [r7, #4]
 80676b2:	b2da      	uxtb	r2, r3
 80676b4:	4b0e      	ldr	r3, [pc, #56]	@ (80676f0 <LL_RCC_GetClockSource+0x48>)
 80676b6:	4413      	add	r3, r2
 80676b8:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 80676ba:	68fb      	ldr	r3, [r7, #12]
 80676bc:	681a      	ldr	r2, [r3, #0]
 80676be:	687b      	ldr	r3, [r7, #4]
 80676c0:	0e19      	lsrs	r1, r3, #24
 80676c2:	687b      	ldr	r3, [r7, #4]
 80676c4:	0a1b      	lsrs	r3, r3, #8
 80676c6:	f003 031f 	and.w	r3, r3, #31
 80676ca:	fa01 f303 	lsl.w	r3, r1, r3
 80676ce:	401a      	ands	r2, r3
 80676d0:	687b      	ldr	r3, [r7, #4]
 80676d2:	0a1b      	lsrs	r3, r3, #8
 80676d4:	f003 031f 	and.w	r3, r3, #31
 80676d8:	fa22 f303 	lsr.w	r3, r2, r3
 80676dc:	041a      	lsls	r2, r3, #16
 80676de:	687b      	ldr	r3, [r7, #4]
 80676e0:	4313      	orrs	r3, r2
}
 80676e2:	4618      	mov	r0, r3
 80676e4:	3714      	adds	r7, #20
 80676e6:	46bd      	mov	sp, r7
 80676e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80676ec:	4770      	bx	lr
 80676ee:	bf00      	nop
 80676f0:	5802444c 	.word	0x5802444c

080676f4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 80676f4:	b580      	push	{r7, lr}
 80676f6:	b082      	sub	sp, #8
 80676f8:	af00      	add	r7, sp, #0
 80676fa:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 80676fc:	6878      	ldr	r0, [r7, #4]
 80676fe:	f7ff ffd3 	bl	80676a8 <LL_RCC_GetClockSource>
 8067702:	4603      	mov	r3, r0
}
 8067704:	4618      	mov	r0, r3
 8067706:	3708      	adds	r7, #8
 8067708:	46bd      	mov	sp, r7
 806770a:	bd80      	pop	{r7, pc}

0806770c <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 806770c:	b480      	push	{r7}
 806770e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8067710:	4b04      	ldr	r3, [pc, #16]	@ (8067724 <LL_RCC_PLL_GetSource+0x18>)
 8067712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067714:	f003 0303 	and.w	r3, r3, #3
}
 8067718:	4618      	mov	r0, r3
 806771a:	46bd      	mov	sp, r7
 806771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067720:	4770      	bx	lr
 8067722:	bf00      	nop
 8067724:	58024400 	.word	0x58024400

08067728 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8067728:	b480      	push	{r7}
 806772a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 806772c:	4b07      	ldr	r3, [pc, #28]	@ (806774c <LL_RCC_PLL1P_IsEnabled+0x24>)
 806772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8067734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8067738:	d101      	bne.n	806773e <LL_RCC_PLL1P_IsEnabled+0x16>
 806773a:	2301      	movs	r3, #1
 806773c:	e000      	b.n	8067740 <LL_RCC_PLL1P_IsEnabled+0x18>
 806773e:	2300      	movs	r3, #0
}
 8067740:	4618      	mov	r0, r3
 8067742:	46bd      	mov	sp, r7
 8067744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067748:	4770      	bx	lr
 806774a:	bf00      	nop
 806774c:	58024400 	.word	0x58024400

08067750 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8067750:	b480      	push	{r7}
 8067752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8067754:	4b07      	ldr	r3, [pc, #28]	@ (8067774 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8067756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 806775c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8067760:	d101      	bne.n	8067766 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8067762:	2301      	movs	r3, #1
 8067764:	e000      	b.n	8067768 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8067766:	2300      	movs	r3, #0
}
 8067768:	4618      	mov	r0, r3
 806776a:	46bd      	mov	sp, r7
 806776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067770:	4770      	bx	lr
 8067772:	bf00      	nop
 8067774:	58024400 	.word	0x58024400

08067778 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8067778:	b480      	push	{r7}
 806777a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 806777c:	4b07      	ldr	r3, [pc, #28]	@ (806779c <LL_RCC_PLL1R_IsEnabled+0x24>)
 806777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8067784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8067788:	d101      	bne.n	806778e <LL_RCC_PLL1R_IsEnabled+0x16>
 806778a:	2301      	movs	r3, #1
 806778c:	e000      	b.n	8067790 <LL_RCC_PLL1R_IsEnabled+0x18>
 806778e:	2300      	movs	r3, #0
}
 8067790:	4618      	mov	r0, r3
 8067792:	46bd      	mov	sp, r7
 8067794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067798:	4770      	bx	lr
 806779a:	bf00      	nop
 806779c:	58024400 	.word	0x58024400

080677a0 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 80677a0:	b480      	push	{r7}
 80677a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 80677a4:	4b06      	ldr	r3, [pc, #24]	@ (80677c0 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 80677a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80677a8:	f003 0301 	and.w	r3, r3, #1
 80677ac:	2b01      	cmp	r3, #1
 80677ae:	d101      	bne.n	80677b4 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 80677b0:	2301      	movs	r3, #1
 80677b2:	e000      	b.n	80677b6 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 80677b4:	2300      	movs	r3, #0
}
 80677b6:	4618      	mov	r0, r3
 80677b8:	46bd      	mov	sp, r7
 80677ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80677be:	4770      	bx	lr
 80677c0:	58024400 	.word	0x58024400

080677c4 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 80677c4:	b480      	push	{r7}
 80677c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 80677c8:	4b04      	ldr	r3, [pc, #16]	@ (80677dc <LL_RCC_PLL1_GetN+0x18>)
 80677ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80677cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80677d0:	3301      	adds	r3, #1
}
 80677d2:	4618      	mov	r0, r3
 80677d4:	46bd      	mov	sp, r7
 80677d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80677da:	4770      	bx	lr
 80677dc:	58024400 	.word	0x58024400

080677e0 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 80677e0:	b480      	push	{r7}
 80677e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 80677e4:	4b04      	ldr	r3, [pc, #16]	@ (80677f8 <LL_RCC_PLL1_GetM+0x18>)
 80677e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80677e8:	091b      	lsrs	r3, r3, #4
 80677ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80677ee:	4618      	mov	r0, r3
 80677f0:	46bd      	mov	sp, r7
 80677f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80677f6:	4770      	bx	lr
 80677f8:	58024400 	.word	0x58024400

080677fc <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 80677fc:	b480      	push	{r7}
 80677fe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8067800:	4b05      	ldr	r3, [pc, #20]	@ (8067818 <LL_RCC_PLL1_GetP+0x1c>)
 8067802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8067804:	0a5b      	lsrs	r3, r3, #9
 8067806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806780a:	3301      	adds	r3, #1
}
 806780c:	4618      	mov	r0, r3
 806780e:	46bd      	mov	sp, r7
 8067810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067814:	4770      	bx	lr
 8067816:	bf00      	nop
 8067818:	58024400 	.word	0x58024400

0806781c <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 806781c:	b480      	push	{r7}
 806781e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8067820:	4b05      	ldr	r3, [pc, #20]	@ (8067838 <LL_RCC_PLL1_GetQ+0x1c>)
 8067822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8067824:	0c1b      	lsrs	r3, r3, #16
 8067826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806782a:	3301      	adds	r3, #1
}
 806782c:	4618      	mov	r0, r3
 806782e:	46bd      	mov	sp, r7
 8067830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067834:	4770      	bx	lr
 8067836:	bf00      	nop
 8067838:	58024400 	.word	0x58024400

0806783c <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 806783c:	b480      	push	{r7}
 806783e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8067840:	4b05      	ldr	r3, [pc, #20]	@ (8067858 <LL_RCC_PLL1_GetR+0x1c>)
 8067842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8067844:	0e1b      	lsrs	r3, r3, #24
 8067846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806784a:	3301      	adds	r3, #1
}
 806784c:	4618      	mov	r0, r3
 806784e:	46bd      	mov	sp, r7
 8067850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067854:	4770      	bx	lr
 8067856:	bf00      	nop
 8067858:	58024400 	.word	0x58024400

0806785c <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 806785c:	b480      	push	{r7}
 806785e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8067860:	4b04      	ldr	r3, [pc, #16]	@ (8067874 <LL_RCC_PLL1_GetFRACN+0x18>)
 8067862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8067864:	08db      	lsrs	r3, r3, #3
 8067866:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 806786a:	4618      	mov	r0, r3
 806786c:	46bd      	mov	sp, r7
 806786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067872:	4770      	bx	lr
 8067874:	58024400 	.word	0x58024400

08067878 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8067878:	b480      	push	{r7}
 806787a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 806787c:	4b07      	ldr	r3, [pc, #28]	@ (806789c <LL_RCC_PLL2_IsReady+0x24>)
 806787e:	681b      	ldr	r3, [r3, #0]
 8067880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8067884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8067888:	d101      	bne.n	806788e <LL_RCC_PLL2_IsReady+0x16>
 806788a:	2301      	movs	r3, #1
 806788c:	e000      	b.n	8067890 <LL_RCC_PLL2_IsReady+0x18>
 806788e:	2300      	movs	r3, #0
}
 8067890:	4618      	mov	r0, r3
 8067892:	46bd      	mov	sp, r7
 8067894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067898:	4770      	bx	lr
 806789a:	bf00      	nop
 806789c:	58024400 	.word	0x58024400

080678a0 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 80678a0:	b480      	push	{r7}
 80678a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 80678a4:	4b07      	ldr	r3, [pc, #28]	@ (80678c4 <LL_RCC_PLL2P_IsEnabled+0x24>)
 80678a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80678a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80678ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80678b0:	d101      	bne.n	80678b6 <LL_RCC_PLL2P_IsEnabled+0x16>
 80678b2:	2301      	movs	r3, #1
 80678b4:	e000      	b.n	80678b8 <LL_RCC_PLL2P_IsEnabled+0x18>
 80678b6:	2300      	movs	r3, #0
}
 80678b8:	4618      	mov	r0, r3
 80678ba:	46bd      	mov	sp, r7
 80678bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80678c0:	4770      	bx	lr
 80678c2:	bf00      	nop
 80678c4:	58024400 	.word	0x58024400

080678c8 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 80678c8:	b480      	push	{r7}
 80678ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 80678cc:	4b07      	ldr	r3, [pc, #28]	@ (80678ec <LL_RCC_PLL2Q_IsEnabled+0x24>)
 80678ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80678d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80678d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80678d8:	d101      	bne.n	80678de <LL_RCC_PLL2Q_IsEnabled+0x16>
 80678da:	2301      	movs	r3, #1
 80678dc:	e000      	b.n	80678e0 <LL_RCC_PLL2Q_IsEnabled+0x18>
 80678de:	2300      	movs	r3, #0
}
 80678e0:	4618      	mov	r0, r3
 80678e2:	46bd      	mov	sp, r7
 80678e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80678e8:	4770      	bx	lr
 80678ea:	bf00      	nop
 80678ec:	58024400 	.word	0x58024400

080678f0 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 80678f0:	b480      	push	{r7}
 80678f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 80678f4:	4b07      	ldr	r3, [pc, #28]	@ (8067914 <LL_RCC_PLL2R_IsEnabled+0x24>)
 80678f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80678f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80678fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8067900:	d101      	bne.n	8067906 <LL_RCC_PLL2R_IsEnabled+0x16>
 8067902:	2301      	movs	r3, #1
 8067904:	e000      	b.n	8067908 <LL_RCC_PLL2R_IsEnabled+0x18>
 8067906:	2300      	movs	r3, #0
}
 8067908:	4618      	mov	r0, r3
 806790a:	46bd      	mov	sp, r7
 806790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067910:	4770      	bx	lr
 8067912:	bf00      	nop
 8067914:	58024400 	.word	0x58024400

08067918 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8067918:	b480      	push	{r7}
 806791a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 806791c:	4b06      	ldr	r3, [pc, #24]	@ (8067938 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 806791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067920:	f003 0310 	and.w	r3, r3, #16
 8067924:	2b10      	cmp	r3, #16
 8067926:	d101      	bne.n	806792c <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8067928:	2301      	movs	r3, #1
 806792a:	e000      	b.n	806792e <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 806792c:	2300      	movs	r3, #0
}
 806792e:	4618      	mov	r0, r3
 8067930:	46bd      	mov	sp, r7
 8067932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067936:	4770      	bx	lr
 8067938:	58024400 	.word	0x58024400

0806793c <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 806793c:	b480      	push	{r7}
 806793e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8067940:	4b04      	ldr	r3, [pc, #16]	@ (8067954 <LL_RCC_PLL2_GetN+0x18>)
 8067942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8067944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067948:	3301      	adds	r3, #1
}
 806794a:	4618      	mov	r0, r3
 806794c:	46bd      	mov	sp, r7
 806794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067952:	4770      	bx	lr
 8067954:	58024400 	.word	0x58024400

08067958 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8067958:	b480      	push	{r7}
 806795a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 806795c:	4b04      	ldr	r3, [pc, #16]	@ (8067970 <LL_RCC_PLL2_GetM+0x18>)
 806795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067960:	0b1b      	lsrs	r3, r3, #12
 8067962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8067966:	4618      	mov	r0, r3
 8067968:	46bd      	mov	sp, r7
 806796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806796e:	4770      	bx	lr
 8067970:	58024400 	.word	0x58024400

08067974 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8067974:	b480      	push	{r7}
 8067976:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8067978:	4b05      	ldr	r3, [pc, #20]	@ (8067990 <LL_RCC_PLL2_GetP+0x1c>)
 806797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806797c:	0a5b      	lsrs	r3, r3, #9
 806797e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8067982:	3301      	adds	r3, #1
}
 8067984:	4618      	mov	r0, r3
 8067986:	46bd      	mov	sp, r7
 8067988:	f85d 7b04 	ldr.w	r7, [sp], #4
 806798c:	4770      	bx	lr
 806798e:	bf00      	nop
 8067990:	58024400 	.word	0x58024400

08067994 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8067994:	b480      	push	{r7}
 8067996:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8067998:	4b05      	ldr	r3, [pc, #20]	@ (80679b0 <LL_RCC_PLL2_GetQ+0x1c>)
 806799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806799c:	0c1b      	lsrs	r3, r3, #16
 806799e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80679a2:	3301      	adds	r3, #1
}
 80679a4:	4618      	mov	r0, r3
 80679a6:	46bd      	mov	sp, r7
 80679a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80679ac:	4770      	bx	lr
 80679ae:	bf00      	nop
 80679b0:	58024400 	.word	0x58024400

080679b4 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 80679b4:	b480      	push	{r7}
 80679b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 80679b8:	4b05      	ldr	r3, [pc, #20]	@ (80679d0 <LL_RCC_PLL2_GetR+0x1c>)
 80679ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80679bc:	0e1b      	lsrs	r3, r3, #24
 80679be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80679c2:	3301      	adds	r3, #1
}
 80679c4:	4618      	mov	r0, r3
 80679c6:	46bd      	mov	sp, r7
 80679c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80679cc:	4770      	bx	lr
 80679ce:	bf00      	nop
 80679d0:	58024400 	.word	0x58024400

080679d4 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 80679d4:	b480      	push	{r7}
 80679d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 80679d8:	4b04      	ldr	r3, [pc, #16]	@ (80679ec <LL_RCC_PLL2_GetFRACN+0x18>)
 80679da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80679dc:	08db      	lsrs	r3, r3, #3
 80679de:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80679e2:	4618      	mov	r0, r3
 80679e4:	46bd      	mov	sp, r7
 80679e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80679ea:	4770      	bx	lr
 80679ec:	58024400 	.word	0x58024400

080679f0 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 80679f0:	b480      	push	{r7}
 80679f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 80679f4:	4b07      	ldr	r3, [pc, #28]	@ (8067a14 <LL_RCC_PLL3_IsReady+0x24>)
 80679f6:	681b      	ldr	r3, [r3, #0]
 80679f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80679fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8067a00:	d101      	bne.n	8067a06 <LL_RCC_PLL3_IsReady+0x16>
 8067a02:	2301      	movs	r3, #1
 8067a04:	e000      	b.n	8067a08 <LL_RCC_PLL3_IsReady+0x18>
 8067a06:	2300      	movs	r3, #0
}
 8067a08:	4618      	mov	r0, r3
 8067a0a:	46bd      	mov	sp, r7
 8067a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067a10:	4770      	bx	lr
 8067a12:	bf00      	nop
 8067a14:	58024400 	.word	0x58024400

08067a18 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8067a18:	b480      	push	{r7}
 8067a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8067a1c:	4b07      	ldr	r3, [pc, #28]	@ (8067a3c <LL_RCC_PLL3P_IsEnabled+0x24>)
 8067a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8067a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8067a28:	d101      	bne.n	8067a2e <LL_RCC_PLL3P_IsEnabled+0x16>
 8067a2a:	2301      	movs	r3, #1
 8067a2c:	e000      	b.n	8067a30 <LL_RCC_PLL3P_IsEnabled+0x18>
 8067a2e:	2300      	movs	r3, #0
}
 8067a30:	4618      	mov	r0, r3
 8067a32:	46bd      	mov	sp, r7
 8067a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067a38:	4770      	bx	lr
 8067a3a:	bf00      	nop
 8067a3c:	58024400 	.word	0x58024400

08067a40 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8067a40:	b480      	push	{r7}
 8067a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8067a44:	4b07      	ldr	r3, [pc, #28]	@ (8067a64 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8067a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8067a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8067a50:	d101      	bne.n	8067a56 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8067a52:	2301      	movs	r3, #1
 8067a54:	e000      	b.n	8067a58 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8067a56:	2300      	movs	r3, #0
}
 8067a58:	4618      	mov	r0, r3
 8067a5a:	46bd      	mov	sp, r7
 8067a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067a60:	4770      	bx	lr
 8067a62:	bf00      	nop
 8067a64:	58024400 	.word	0x58024400

08067a68 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8067a68:	b480      	push	{r7}
 8067a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8067a6c:	4b07      	ldr	r3, [pc, #28]	@ (8067a8c <LL_RCC_PLL3R_IsEnabled+0x24>)
 8067a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8067a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8067a78:	d101      	bne.n	8067a7e <LL_RCC_PLL3R_IsEnabled+0x16>
 8067a7a:	2301      	movs	r3, #1
 8067a7c:	e000      	b.n	8067a80 <LL_RCC_PLL3R_IsEnabled+0x18>
 8067a7e:	2300      	movs	r3, #0
}
 8067a80:	4618      	mov	r0, r3
 8067a82:	46bd      	mov	sp, r7
 8067a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067a88:	4770      	bx	lr
 8067a8a:	bf00      	nop
 8067a8c:	58024400 	.word	0x58024400

08067a90 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8067a90:	b480      	push	{r7}
 8067a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8067a94:	4b07      	ldr	r3, [pc, #28]	@ (8067ab4 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8067a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8067a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8067aa0:	d101      	bne.n	8067aa6 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8067aa2:	2301      	movs	r3, #1
 8067aa4:	e000      	b.n	8067aa8 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8067aa6:	2300      	movs	r3, #0
}
 8067aa8:	4618      	mov	r0, r3
 8067aaa:	46bd      	mov	sp, r7
 8067aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067ab0:	4770      	bx	lr
 8067ab2:	bf00      	nop
 8067ab4:	58024400 	.word	0x58024400

08067ab8 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8067ab8:	b480      	push	{r7}
 8067aba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8067abc:	4b04      	ldr	r3, [pc, #16]	@ (8067ad0 <LL_RCC_PLL3_GetN+0x18>)
 8067abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067ac4:	3301      	adds	r3, #1
}
 8067ac6:	4618      	mov	r0, r3
 8067ac8:	46bd      	mov	sp, r7
 8067aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067ace:	4770      	bx	lr
 8067ad0:	58024400 	.word	0x58024400

08067ad4 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8067ad4:	b480      	push	{r7}
 8067ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8067ad8:	4b04      	ldr	r3, [pc, #16]	@ (8067aec <LL_RCC_PLL3_GetM+0x18>)
 8067ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067adc:	0d1b      	lsrs	r3, r3, #20
 8067ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8067ae2:	4618      	mov	r0, r3
 8067ae4:	46bd      	mov	sp, r7
 8067ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067aea:	4770      	bx	lr
 8067aec:	58024400 	.word	0x58024400

08067af0 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8067af0:	b480      	push	{r7}
 8067af2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8067af4:	4b05      	ldr	r3, [pc, #20]	@ (8067b0c <LL_RCC_PLL3_GetP+0x1c>)
 8067af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067af8:	0a5b      	lsrs	r3, r3, #9
 8067afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8067afe:	3301      	adds	r3, #1
}
 8067b00:	4618      	mov	r0, r3
 8067b02:	46bd      	mov	sp, r7
 8067b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067b08:	4770      	bx	lr
 8067b0a:	bf00      	nop
 8067b0c:	58024400 	.word	0x58024400

08067b10 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8067b10:	b480      	push	{r7}
 8067b12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8067b14:	4b05      	ldr	r3, [pc, #20]	@ (8067b2c <LL_RCC_PLL3_GetQ+0x1c>)
 8067b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067b18:	0c1b      	lsrs	r3, r3, #16
 8067b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8067b1e:	3301      	adds	r3, #1
}
 8067b20:	4618      	mov	r0, r3
 8067b22:	46bd      	mov	sp, r7
 8067b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067b28:	4770      	bx	lr
 8067b2a:	bf00      	nop
 8067b2c:	58024400 	.word	0x58024400

08067b30 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8067b30:	b480      	push	{r7}
 8067b32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8067b34:	4b05      	ldr	r3, [pc, #20]	@ (8067b4c <LL_RCC_PLL3_GetR+0x1c>)
 8067b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067b38:	0e1b      	lsrs	r3, r3, #24
 8067b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8067b3e:	3301      	adds	r3, #1
}
 8067b40:	4618      	mov	r0, r3
 8067b42:	46bd      	mov	sp, r7
 8067b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067b48:	4770      	bx	lr
 8067b4a:	bf00      	nop
 8067b4c:	58024400 	.word	0x58024400

08067b50 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8067b50:	b480      	push	{r7}
 8067b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8067b54:	4b04      	ldr	r3, [pc, #16]	@ (8067b68 <LL_RCC_PLL3_GetFRACN+0x18>)
 8067b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8067b58:	08db      	lsrs	r3, r3, #3
 8067b5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8067b5e:	4618      	mov	r0, r3
 8067b60:	46bd      	mov	sp, r7
 8067b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067b66:	4770      	bx	lr
 8067b68:	58024400 	.word	0x58024400

08067b6c <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8067b6c:	b580      	push	{r7, lr}
 8067b6e:	b08a      	sub	sp, #40	@ 0x28
 8067b70:	af02      	add	r7, sp, #8
 8067b72:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8067b74:	2300      	movs	r3, #0
 8067b76:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8067b78:	2300      	movs	r3, #0
 8067b7a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8067b7c:	f7ff fdc6 	bl	806770c <LL_RCC_PLL_GetSource>
 8067b80:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8067b82:	697b      	ldr	r3, [r7, #20]
 8067b84:	2b02      	cmp	r3, #2
 8067b86:	d01f      	beq.n	8067bc8 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8067b88:	697b      	ldr	r3, [r7, #20]
 8067b8a:	2b02      	cmp	r3, #2
 8067b8c:	d824      	bhi.n	8067bd8 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8067b8e:	697b      	ldr	r3, [r7, #20]
 8067b90:	2b00      	cmp	r3, #0
 8067b92:	d003      	beq.n	8067b9c <LL_RCC_GetPLL1ClockFreq+0x30>
 8067b94:	697b      	ldr	r3, [r7, #20]
 8067b96:	2b01      	cmp	r3, #1
 8067b98:	d00e      	beq.n	8067bb8 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8067b9a:	e01d      	b.n	8067bd8 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8067b9c:	f7ff fcf8 	bl	8067590 <LL_RCC_HSI_IsReady>
 8067ba0:	4603      	mov	r3, r0
 8067ba2:	2b00      	cmp	r3, #0
 8067ba4:	d01a      	beq.n	8067bdc <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8067ba6:	f7ff fd05 	bl	80675b4 <LL_RCC_HSI_GetDivider>
 8067baa:	4603      	mov	r3, r0
 8067bac:	08db      	lsrs	r3, r3, #3
 8067bae:	4a38      	ldr	r2, [pc, #224]	@ (8067c90 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8067bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8067bb4:	61fb      	str	r3, [r7, #28]
      break;
 8067bb6:	e011      	b.n	8067bdc <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8067bb8:	f7ff fd0a 	bl	80675d0 <LL_RCC_CSI_IsReady>
 8067bbc:	4603      	mov	r3, r0
 8067bbe:	2b00      	cmp	r3, #0
 8067bc0:	d00e      	beq.n	8067be0 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8067bc2:	4b34      	ldr	r3, [pc, #208]	@ (8067c94 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8067bc4:	61fb      	str	r3, [r7, #28]
      break;
 8067bc6:	e00b      	b.n	8067be0 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8067bc8:	f7ff fcce 	bl	8067568 <LL_RCC_HSE_IsReady>
 8067bcc:	4603      	mov	r3, r0
 8067bce:	2b00      	cmp	r3, #0
 8067bd0:	d008      	beq.n	8067be4 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8067bd2:	4b31      	ldr	r3, [pc, #196]	@ (8067c98 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8067bd4:	61fb      	str	r3, [r7, #28]
      break;
 8067bd6:	e005      	b.n	8067be4 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8067bd8:	bf00      	nop
 8067bda:	e004      	b.n	8067be6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8067bdc:	bf00      	nop
 8067bde:	e002      	b.n	8067be6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8067be0:	bf00      	nop
 8067be2:	e000      	b.n	8067be6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8067be4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8067be6:	687b      	ldr	r3, [r7, #4]
 8067be8:	2200      	movs	r2, #0
 8067bea:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8067bec:	687b      	ldr	r3, [r7, #4]
 8067bee:	2200      	movs	r2, #0
 8067bf0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8067bf2:	687b      	ldr	r3, [r7, #4]
 8067bf4:	2200      	movs	r2, #0
 8067bf6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8067bf8:	f7ff fdf2 	bl	80677e0 <LL_RCC_PLL1_GetM>
 8067bfc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8067bfe:	f7ff fde1 	bl	80677c4 <LL_RCC_PLL1_GetN>
 8067c02:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8067c04:	f7ff fdcc 	bl	80677a0 <LL_RCC_PLL1FRACN_IsEnabled>
 8067c08:	4603      	mov	r3, r0
 8067c0a:	2b00      	cmp	r3, #0
 8067c0c:	d002      	beq.n	8067c14 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8067c0e:	f7ff fe25 	bl	806785c <LL_RCC_PLL1_GetFRACN>
 8067c12:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8067c14:	693b      	ldr	r3, [r7, #16]
 8067c16:	2b00      	cmp	r3, #0
 8067c18:	d035      	beq.n	8067c86 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8067c1a:	f7ff fd85 	bl	8067728 <LL_RCC_PLL1P_IsEnabled>
 8067c1e:	4603      	mov	r3, r0
 8067c20:	2b00      	cmp	r3, #0
 8067c22:	d00c      	beq.n	8067c3e <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8067c24:	f7ff fdea 	bl	80677fc <LL_RCC_PLL1_GetP>
 8067c28:	4603      	mov	r3, r0
 8067c2a:	9300      	str	r3, [sp, #0]
 8067c2c:	69bb      	ldr	r3, [r7, #24]
 8067c2e:	68fa      	ldr	r2, [r7, #12]
 8067c30:	6939      	ldr	r1, [r7, #16]
 8067c32:	69f8      	ldr	r0, [r7, #28]
 8067c34:	f000 f964 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067c38:	4602      	mov	r2, r0
 8067c3a:	687b      	ldr	r3, [r7, #4]
 8067c3c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8067c3e:	f7ff fd87 	bl	8067750 <LL_RCC_PLL1Q_IsEnabled>
 8067c42:	4603      	mov	r3, r0
 8067c44:	2b00      	cmp	r3, #0
 8067c46:	d00c      	beq.n	8067c62 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8067c48:	f7ff fde8 	bl	806781c <LL_RCC_PLL1_GetQ>
 8067c4c:	4603      	mov	r3, r0
 8067c4e:	9300      	str	r3, [sp, #0]
 8067c50:	69bb      	ldr	r3, [r7, #24]
 8067c52:	68fa      	ldr	r2, [r7, #12]
 8067c54:	6939      	ldr	r1, [r7, #16]
 8067c56:	69f8      	ldr	r0, [r7, #28]
 8067c58:	f000 f952 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067c5c:	4602      	mov	r2, r0
 8067c5e:	687b      	ldr	r3, [r7, #4]
 8067c60:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8067c62:	f7ff fd89 	bl	8067778 <LL_RCC_PLL1R_IsEnabled>
 8067c66:	4603      	mov	r3, r0
 8067c68:	2b00      	cmp	r3, #0
 8067c6a:	d00c      	beq.n	8067c86 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8067c6c:	f7ff fde6 	bl	806783c <LL_RCC_PLL1_GetR>
 8067c70:	4603      	mov	r3, r0
 8067c72:	9300      	str	r3, [sp, #0]
 8067c74:	69bb      	ldr	r3, [r7, #24]
 8067c76:	68fa      	ldr	r2, [r7, #12]
 8067c78:	6939      	ldr	r1, [r7, #16]
 8067c7a:	69f8      	ldr	r0, [r7, #28]
 8067c7c:	f000 f940 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067c80:	4602      	mov	r2, r0
 8067c82:	687b      	ldr	r3, [r7, #4]
 8067c84:	609a      	str	r2, [r3, #8]
    }
  }
}
 8067c86:	bf00      	nop
 8067c88:	3720      	adds	r7, #32
 8067c8a:	46bd      	mov	sp, r7
 8067c8c:	bd80      	pop	{r7, pc}
 8067c8e:	bf00      	nop
 8067c90:	03d09000 	.word	0x03d09000
 8067c94:	003d0900 	.word	0x003d0900
 8067c98:	017d7840 	.word	0x017d7840

08067c9c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8067c9c:	b580      	push	{r7, lr}
 8067c9e:	b08a      	sub	sp, #40	@ 0x28
 8067ca0:	af02      	add	r7, sp, #8
 8067ca2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8067ca4:	2300      	movs	r3, #0
 8067ca6:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8067ca8:	2300      	movs	r3, #0
 8067caa:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8067cac:	f7ff fd2e 	bl	806770c <LL_RCC_PLL_GetSource>
 8067cb0:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8067cb2:	697b      	ldr	r3, [r7, #20]
 8067cb4:	2b02      	cmp	r3, #2
 8067cb6:	d01f      	beq.n	8067cf8 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8067cb8:	697b      	ldr	r3, [r7, #20]
 8067cba:	2b02      	cmp	r3, #2
 8067cbc:	d824      	bhi.n	8067d08 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8067cbe:	697b      	ldr	r3, [r7, #20]
 8067cc0:	2b00      	cmp	r3, #0
 8067cc2:	d003      	beq.n	8067ccc <LL_RCC_GetPLL2ClockFreq+0x30>
 8067cc4:	697b      	ldr	r3, [r7, #20]
 8067cc6:	2b01      	cmp	r3, #1
 8067cc8:	d00e      	beq.n	8067ce8 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8067cca:	e01d      	b.n	8067d08 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8067ccc:	f7ff fc60 	bl	8067590 <LL_RCC_HSI_IsReady>
 8067cd0:	4603      	mov	r3, r0
 8067cd2:	2b00      	cmp	r3, #0
 8067cd4:	d01a      	beq.n	8067d0c <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8067cd6:	f7ff fc6d 	bl	80675b4 <LL_RCC_HSI_GetDivider>
 8067cda:	4603      	mov	r3, r0
 8067cdc:	08db      	lsrs	r3, r3, #3
 8067cde:	4a38      	ldr	r2, [pc, #224]	@ (8067dc0 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8067ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8067ce4:	61fb      	str	r3, [r7, #28]
      break;
 8067ce6:	e011      	b.n	8067d0c <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8067ce8:	f7ff fc72 	bl	80675d0 <LL_RCC_CSI_IsReady>
 8067cec:	4603      	mov	r3, r0
 8067cee:	2b00      	cmp	r3, #0
 8067cf0:	d00e      	beq.n	8067d10 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8067cf2:	4b34      	ldr	r3, [pc, #208]	@ (8067dc4 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8067cf4:	61fb      	str	r3, [r7, #28]
      break;
 8067cf6:	e00b      	b.n	8067d10 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8067cf8:	f7ff fc36 	bl	8067568 <LL_RCC_HSE_IsReady>
 8067cfc:	4603      	mov	r3, r0
 8067cfe:	2b00      	cmp	r3, #0
 8067d00:	d008      	beq.n	8067d14 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8067d02:	4b31      	ldr	r3, [pc, #196]	@ (8067dc8 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8067d04:	61fb      	str	r3, [r7, #28]
      break;
 8067d06:	e005      	b.n	8067d14 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8067d08:	bf00      	nop
 8067d0a:	e004      	b.n	8067d16 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8067d0c:	bf00      	nop
 8067d0e:	e002      	b.n	8067d16 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8067d10:	bf00      	nop
 8067d12:	e000      	b.n	8067d16 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8067d14:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8067d16:	687b      	ldr	r3, [r7, #4]
 8067d18:	2200      	movs	r2, #0
 8067d1a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8067d1c:	687b      	ldr	r3, [r7, #4]
 8067d1e:	2200      	movs	r2, #0
 8067d20:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8067d22:	687b      	ldr	r3, [r7, #4]
 8067d24:	2200      	movs	r2, #0
 8067d26:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8067d28:	f7ff fe16 	bl	8067958 <LL_RCC_PLL2_GetM>
 8067d2c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8067d2e:	f7ff fe05 	bl	806793c <LL_RCC_PLL2_GetN>
 8067d32:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8067d34:	f7ff fdf0 	bl	8067918 <LL_RCC_PLL2FRACN_IsEnabled>
 8067d38:	4603      	mov	r3, r0
 8067d3a:	2b00      	cmp	r3, #0
 8067d3c:	d002      	beq.n	8067d44 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8067d3e:	f7ff fe49 	bl	80679d4 <LL_RCC_PLL2_GetFRACN>
 8067d42:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8067d44:	693b      	ldr	r3, [r7, #16]
 8067d46:	2b00      	cmp	r3, #0
 8067d48:	d035      	beq.n	8067db6 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8067d4a:	f7ff fda9 	bl	80678a0 <LL_RCC_PLL2P_IsEnabled>
 8067d4e:	4603      	mov	r3, r0
 8067d50:	2b00      	cmp	r3, #0
 8067d52:	d00c      	beq.n	8067d6e <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8067d54:	f7ff fe0e 	bl	8067974 <LL_RCC_PLL2_GetP>
 8067d58:	4603      	mov	r3, r0
 8067d5a:	9300      	str	r3, [sp, #0]
 8067d5c:	69bb      	ldr	r3, [r7, #24]
 8067d5e:	68fa      	ldr	r2, [r7, #12]
 8067d60:	6939      	ldr	r1, [r7, #16]
 8067d62:	69f8      	ldr	r0, [r7, #28]
 8067d64:	f000 f8cc 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067d68:	4602      	mov	r2, r0
 8067d6a:	687b      	ldr	r3, [r7, #4]
 8067d6c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8067d6e:	f7ff fdab 	bl	80678c8 <LL_RCC_PLL2Q_IsEnabled>
 8067d72:	4603      	mov	r3, r0
 8067d74:	2b00      	cmp	r3, #0
 8067d76:	d00c      	beq.n	8067d92 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8067d78:	f7ff fe0c 	bl	8067994 <LL_RCC_PLL2_GetQ>
 8067d7c:	4603      	mov	r3, r0
 8067d7e:	9300      	str	r3, [sp, #0]
 8067d80:	69bb      	ldr	r3, [r7, #24]
 8067d82:	68fa      	ldr	r2, [r7, #12]
 8067d84:	6939      	ldr	r1, [r7, #16]
 8067d86:	69f8      	ldr	r0, [r7, #28]
 8067d88:	f000 f8ba 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067d8c:	4602      	mov	r2, r0
 8067d8e:	687b      	ldr	r3, [r7, #4]
 8067d90:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8067d92:	f7ff fdad 	bl	80678f0 <LL_RCC_PLL2R_IsEnabled>
 8067d96:	4603      	mov	r3, r0
 8067d98:	2b00      	cmp	r3, #0
 8067d9a:	d00c      	beq.n	8067db6 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8067d9c:	f7ff fe0a 	bl	80679b4 <LL_RCC_PLL2_GetR>
 8067da0:	4603      	mov	r3, r0
 8067da2:	9300      	str	r3, [sp, #0]
 8067da4:	69bb      	ldr	r3, [r7, #24]
 8067da6:	68fa      	ldr	r2, [r7, #12]
 8067da8:	6939      	ldr	r1, [r7, #16]
 8067daa:	69f8      	ldr	r0, [r7, #28]
 8067dac:	f000 f8a8 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067db0:	4602      	mov	r2, r0
 8067db2:	687b      	ldr	r3, [r7, #4]
 8067db4:	609a      	str	r2, [r3, #8]
    }
  }
}
 8067db6:	bf00      	nop
 8067db8:	3720      	adds	r7, #32
 8067dba:	46bd      	mov	sp, r7
 8067dbc:	bd80      	pop	{r7, pc}
 8067dbe:	bf00      	nop
 8067dc0:	03d09000 	.word	0x03d09000
 8067dc4:	003d0900 	.word	0x003d0900
 8067dc8:	017d7840 	.word	0x017d7840

08067dcc <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8067dcc:	b580      	push	{r7, lr}
 8067dce:	b08a      	sub	sp, #40	@ 0x28
 8067dd0:	af02      	add	r7, sp, #8
 8067dd2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8067dd4:	2300      	movs	r3, #0
 8067dd6:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8067dd8:	2300      	movs	r3, #0
 8067dda:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8067ddc:	f7ff fc96 	bl	806770c <LL_RCC_PLL_GetSource>
 8067de0:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8067de2:	697b      	ldr	r3, [r7, #20]
 8067de4:	2b02      	cmp	r3, #2
 8067de6:	d01f      	beq.n	8067e28 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8067de8:	697b      	ldr	r3, [r7, #20]
 8067dea:	2b02      	cmp	r3, #2
 8067dec:	d824      	bhi.n	8067e38 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8067dee:	697b      	ldr	r3, [r7, #20]
 8067df0:	2b00      	cmp	r3, #0
 8067df2:	d003      	beq.n	8067dfc <LL_RCC_GetPLL3ClockFreq+0x30>
 8067df4:	697b      	ldr	r3, [r7, #20]
 8067df6:	2b01      	cmp	r3, #1
 8067df8:	d00e      	beq.n	8067e18 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8067dfa:	e01d      	b.n	8067e38 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8067dfc:	f7ff fbc8 	bl	8067590 <LL_RCC_HSI_IsReady>
 8067e00:	4603      	mov	r3, r0
 8067e02:	2b00      	cmp	r3, #0
 8067e04:	d01a      	beq.n	8067e3c <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8067e06:	f7ff fbd5 	bl	80675b4 <LL_RCC_HSI_GetDivider>
 8067e0a:	4603      	mov	r3, r0
 8067e0c:	08db      	lsrs	r3, r3, #3
 8067e0e:	4a39      	ldr	r2, [pc, #228]	@ (8067ef4 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8067e10:	fa22 f303 	lsr.w	r3, r2, r3
 8067e14:	61fb      	str	r3, [r7, #28]
      break;
 8067e16:	e011      	b.n	8067e3c <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8067e18:	f7ff fbda 	bl	80675d0 <LL_RCC_CSI_IsReady>
 8067e1c:	4603      	mov	r3, r0
 8067e1e:	2b00      	cmp	r3, #0
 8067e20:	d00e      	beq.n	8067e40 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8067e22:	4b35      	ldr	r3, [pc, #212]	@ (8067ef8 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8067e24:	61fb      	str	r3, [r7, #28]
      break;
 8067e26:	e00b      	b.n	8067e40 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8067e28:	f7ff fb9e 	bl	8067568 <LL_RCC_HSE_IsReady>
 8067e2c:	4603      	mov	r3, r0
 8067e2e:	2b00      	cmp	r3, #0
 8067e30:	d008      	beq.n	8067e44 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8067e32:	4b32      	ldr	r3, [pc, #200]	@ (8067efc <LL_RCC_GetPLL3ClockFreq+0x130>)
 8067e34:	61fb      	str	r3, [r7, #28]
      break;
 8067e36:	e005      	b.n	8067e44 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8067e38:	bf00      	nop
 8067e3a:	e004      	b.n	8067e46 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8067e3c:	bf00      	nop
 8067e3e:	e002      	b.n	8067e46 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8067e40:	bf00      	nop
 8067e42:	e000      	b.n	8067e46 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8067e44:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8067e46:	687b      	ldr	r3, [r7, #4]
 8067e48:	2200      	movs	r2, #0
 8067e4a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8067e4c:	687b      	ldr	r3, [r7, #4]
 8067e4e:	2200      	movs	r2, #0
 8067e50:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8067e52:	687b      	ldr	r3, [r7, #4]
 8067e54:	2200      	movs	r2, #0
 8067e56:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8067e58:	f7ff fe3c 	bl	8067ad4 <LL_RCC_PLL3_GetM>
 8067e5c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8067e5e:	f7ff fe2b 	bl	8067ab8 <LL_RCC_PLL3_GetN>
 8067e62:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8067e64:	f7ff fe14 	bl	8067a90 <LL_RCC_PLL3FRACN_IsEnabled>
 8067e68:	4603      	mov	r3, r0
 8067e6a:	2b00      	cmp	r3, #0
 8067e6c:	d002      	beq.n	8067e74 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8067e6e:	f7ff fe6f 	bl	8067b50 <LL_RCC_PLL3_GetFRACN>
 8067e72:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8067e74:	693b      	ldr	r3, [r7, #16]
 8067e76:	2b00      	cmp	r3, #0
 8067e78:	d038      	beq.n	8067eec <LL_RCC_GetPLL3ClockFreq+0x120>
 8067e7a:	69fb      	ldr	r3, [r7, #28]
 8067e7c:	2b00      	cmp	r3, #0
 8067e7e:	d035      	beq.n	8067eec <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8067e80:	f7ff fdca 	bl	8067a18 <LL_RCC_PLL3P_IsEnabled>
 8067e84:	4603      	mov	r3, r0
 8067e86:	2b00      	cmp	r3, #0
 8067e88:	d00c      	beq.n	8067ea4 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8067e8a:	f7ff fe31 	bl	8067af0 <LL_RCC_PLL3_GetP>
 8067e8e:	4603      	mov	r3, r0
 8067e90:	9300      	str	r3, [sp, #0]
 8067e92:	69bb      	ldr	r3, [r7, #24]
 8067e94:	68fa      	ldr	r2, [r7, #12]
 8067e96:	6939      	ldr	r1, [r7, #16]
 8067e98:	69f8      	ldr	r0, [r7, #28]
 8067e9a:	f000 f831 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067e9e:	4602      	mov	r2, r0
 8067ea0:	687b      	ldr	r3, [r7, #4]
 8067ea2:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8067ea4:	f7ff fdcc 	bl	8067a40 <LL_RCC_PLL3Q_IsEnabled>
 8067ea8:	4603      	mov	r3, r0
 8067eaa:	2b00      	cmp	r3, #0
 8067eac:	d00c      	beq.n	8067ec8 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8067eae:	f7ff fe2f 	bl	8067b10 <LL_RCC_PLL3_GetQ>
 8067eb2:	4603      	mov	r3, r0
 8067eb4:	9300      	str	r3, [sp, #0]
 8067eb6:	69bb      	ldr	r3, [r7, #24]
 8067eb8:	68fa      	ldr	r2, [r7, #12]
 8067eba:	6939      	ldr	r1, [r7, #16]
 8067ebc:	69f8      	ldr	r0, [r7, #28]
 8067ebe:	f000 f81f 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067ec2:	4602      	mov	r2, r0
 8067ec4:	687b      	ldr	r3, [r7, #4]
 8067ec6:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8067ec8:	f7ff fdce 	bl	8067a68 <LL_RCC_PLL3R_IsEnabled>
 8067ecc:	4603      	mov	r3, r0
 8067ece:	2b00      	cmp	r3, #0
 8067ed0:	d00c      	beq.n	8067eec <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8067ed2:	f7ff fe2d 	bl	8067b30 <LL_RCC_PLL3_GetR>
 8067ed6:	4603      	mov	r3, r0
 8067ed8:	9300      	str	r3, [sp, #0]
 8067eda:	69bb      	ldr	r3, [r7, #24]
 8067edc:	68fa      	ldr	r2, [r7, #12]
 8067ede:	6939      	ldr	r1, [r7, #16]
 8067ee0:	69f8      	ldr	r0, [r7, #28]
 8067ee2:	f000 f80d 	bl	8067f00 <LL_RCC_CalcPLLClockFreq>
 8067ee6:	4602      	mov	r2, r0
 8067ee8:	687b      	ldr	r3, [r7, #4]
 8067eea:	609a      	str	r2, [r3, #8]
    }
  }
}
 8067eec:	bf00      	nop
 8067eee:	3720      	adds	r7, #32
 8067ef0:	46bd      	mov	sp, r7
 8067ef2:	bd80      	pop	{r7, pc}
 8067ef4:	03d09000 	.word	0x03d09000
 8067ef8:	003d0900 	.word	0x003d0900
 8067efc:	017d7840 	.word	0x017d7840

08067f00 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8067f00:	b480      	push	{r7}
 8067f02:	b087      	sub	sp, #28
 8067f04:	af00      	add	r7, sp, #0
 8067f06:	60f8      	str	r0, [r7, #12]
 8067f08:	60b9      	str	r1, [r7, #8]
 8067f0a:	607a      	str	r2, [r7, #4]
 8067f0c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8067f0e:	68fb      	ldr	r3, [r7, #12]
 8067f10:	ee07 3a90 	vmov	s15, r3
 8067f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8067f18:	68bb      	ldr	r3, [r7, #8]
 8067f1a:	ee07 3a90 	vmov	s15, r3
 8067f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8067f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8067f26:	687b      	ldr	r3, [r7, #4]
 8067f28:	ee07 3a90 	vmov	s15, r3
 8067f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8067f30:	683b      	ldr	r3, [r7, #0]
 8067f32:	ee07 3a90 	vmov	s15, r3
 8067f36:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8067f3a:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8067f7c <LL_RCC_CalcPLLClockFreq+0x7c>
 8067f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8067f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8067f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8067f4a:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8067f4e:	6a3b      	ldr	r3, [r7, #32]
 8067f50:	ee07 3a90 	vmov	s15, r3
 8067f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8067f58:	edd7 6a05 	vldr	s13, [r7, #20]
 8067f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8067f60:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8067f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8067f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8067f6c:	ee17 3a90 	vmov	r3, s15
}
 8067f70:	4618      	mov	r0, r3
 8067f72:	371c      	adds	r7, #28
 8067f74:	46bd      	mov	sp, r7
 8067f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067f7a:	4770      	bx	lr
 8067f7c:	46000000 	.word	0x46000000

08067f80 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8067f80:	b590      	push	{r4, r7, lr}
 8067f82:	b087      	sub	sp, #28
 8067f84:	af00      	add	r7, sp, #0
 8067f86:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8067f88:	2300      	movs	r3, #0
 8067f8a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8067f8c:	6878      	ldr	r0, [r7, #4]
 8067f8e:	f7ff fbb1 	bl	80676f4 <LL_RCC_GetUSARTClockSource>
 8067f92:	4603      	mov	r3, r0
 8067f94:	4a62      	ldr	r2, [pc, #392]	@ (8068120 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8067f96:	4293      	cmp	r3, r2
 8067f98:	f000 80a9 	beq.w	80680ee <LL_RCC_GetUSARTClockFreq+0x16e>
 8067f9c:	4a60      	ldr	r2, [pc, #384]	@ (8068120 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8067f9e:	4293      	cmp	r3, r2
 8067fa0:	f200 80ae 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067fa4:	4a5f      	ldr	r2, [pc, #380]	@ (8068124 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8067fa6:	4293      	cmp	r3, r2
 8067fa8:	f000 80a1 	beq.w	80680ee <LL_RCC_GetUSARTClockFreq+0x16e>
 8067fac:	4a5d      	ldr	r2, [pc, #372]	@ (8068124 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8067fae:	4293      	cmp	r3, r2
 8067fb0:	f200 80a6 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8068128 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8067fb6:	4293      	cmp	r3, r2
 8067fb8:	f000 8091 	beq.w	80680de <LL_RCC_GetUSARTClockFreq+0x15e>
 8067fbc:	4a5a      	ldr	r2, [pc, #360]	@ (8068128 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8067fbe:	4293      	cmp	r3, r2
 8067fc0:	f200 809e 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067fc4:	4a59      	ldr	r2, [pc, #356]	@ (806812c <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8067fc6:	4293      	cmp	r3, r2
 8067fc8:	f000 8089 	beq.w	80680de <LL_RCC_GetUSARTClockFreq+0x15e>
 8067fcc:	4a57      	ldr	r2, [pc, #348]	@ (806812c <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8067fce:	4293      	cmp	r3, r2
 8067fd0:	f200 8096 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067fd4:	4a56      	ldr	r2, [pc, #344]	@ (8068130 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8067fd6:	4293      	cmp	r3, r2
 8067fd8:	d073      	beq.n	80680c2 <LL_RCC_GetUSARTClockFreq+0x142>
 8067fda:	4a55      	ldr	r2, [pc, #340]	@ (8068130 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8067fdc:	4293      	cmp	r3, r2
 8067fde:	f200 808f 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067fe2:	4a54      	ldr	r2, [pc, #336]	@ (8068134 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8067fe4:	4293      	cmp	r3, r2
 8067fe6:	d06c      	beq.n	80680c2 <LL_RCC_GetUSARTClockFreq+0x142>
 8067fe8:	4a52      	ldr	r2, [pc, #328]	@ (8068134 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8067fea:	4293      	cmp	r3, r2
 8067fec:	f200 8088 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067ff0:	4a51      	ldr	r2, [pc, #324]	@ (8068138 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8067ff2:	4293      	cmp	r3, r2
 8067ff4:	d058      	beq.n	80680a8 <LL_RCC_GetUSARTClockFreq+0x128>
 8067ff6:	4a50      	ldr	r2, [pc, #320]	@ (8068138 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8067ff8:	4293      	cmp	r3, r2
 8067ffa:	f200 8081 	bhi.w	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8067ffe:	4a4f      	ldr	r2, [pc, #316]	@ (806813c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8068000:	4293      	cmp	r3, r2
 8068002:	d051      	beq.n	80680a8 <LL_RCC_GetUSARTClockFreq+0x128>
 8068004:	4a4d      	ldr	r2, [pc, #308]	@ (806813c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8068006:	4293      	cmp	r3, r2
 8068008:	d87a      	bhi.n	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 806800a:	4a4d      	ldr	r2, [pc, #308]	@ (8068140 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 806800c:	4293      	cmp	r3, r2
 806800e:	d03e      	beq.n	806808e <LL_RCC_GetUSARTClockFreq+0x10e>
 8068010:	4a4b      	ldr	r2, [pc, #300]	@ (8068140 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8068012:	4293      	cmp	r3, r2
 8068014:	d874      	bhi.n	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8068016:	4a4b      	ldr	r2, [pc, #300]	@ (8068144 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8068018:	4293      	cmp	r3, r2
 806801a:	d038      	beq.n	806808e <LL_RCC_GetUSARTClockFreq+0x10e>
 806801c:	4a49      	ldr	r2, [pc, #292]	@ (8068144 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 806801e:	4293      	cmp	r3, r2
 8068020:	d86e      	bhi.n	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
 8068022:	4a49      	ldr	r2, [pc, #292]	@ (8068148 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8068024:	4293      	cmp	r3, r2
 8068026:	d01a      	beq.n	806805e <LL_RCC_GetUSARTClockFreq+0xde>
 8068028:	4a48      	ldr	r2, [pc, #288]	@ (806814c <LL_RCC_GetUSARTClockFreq+0x1cc>)
 806802a:	4293      	cmp	r3, r2
 806802c:	d168      	bne.n	8068100 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 806802e:	f000 f895 	bl	806815c <RCC_GetSystemClockFreq>
 8068032:	4604      	mov	r4, r0
 8068034:	f7ff fb00 	bl	8067638 <LL_RCC_GetSysPrescaler>
 8068038:	4603      	mov	r3, r0
 806803a:	0a1b      	lsrs	r3, r3, #8
 806803c:	f003 030f 	and.w	r3, r3, #15
 8068040:	4a43      	ldr	r2, [pc, #268]	@ (8068150 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8068042:	5cd3      	ldrb	r3, [r2, r3]
 8068044:	f003 031f 	and.w	r3, r3, #31
 8068048:	fa24 f303 	lsr.w	r3, r4, r3
 806804c:	4618      	mov	r0, r3
 806804e:	f000 f8e7 	bl	8068220 <RCC_GetHCLKClockFreq>
 8068052:	4603      	mov	r3, r0
 8068054:	4618      	mov	r0, r3
 8068056:	f000 f911 	bl	806827c <RCC_GetPCLK2ClockFreq>
 806805a:	6178      	str	r0, [r7, #20]
      break;
 806805c:	e05b      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 806805e:	f000 f87d 	bl	806815c <RCC_GetSystemClockFreq>
 8068062:	4604      	mov	r4, r0
 8068064:	f7ff fae8 	bl	8067638 <LL_RCC_GetSysPrescaler>
 8068068:	4603      	mov	r3, r0
 806806a:	0a1b      	lsrs	r3, r3, #8
 806806c:	f003 030f 	and.w	r3, r3, #15
 8068070:	4a37      	ldr	r2, [pc, #220]	@ (8068150 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8068072:	5cd3      	ldrb	r3, [r2, r3]
 8068074:	f003 031f 	and.w	r3, r3, #31
 8068078:	fa24 f303 	lsr.w	r3, r4, r3
 806807c:	4618      	mov	r0, r3
 806807e:	f000 f8cf 	bl	8068220 <RCC_GetHCLKClockFreq>
 8068082:	4603      	mov	r3, r0
 8068084:	4618      	mov	r0, r3
 8068086:	f000 f8e1 	bl	806824c <RCC_GetPCLK1ClockFreq>
 806808a:	6178      	str	r0, [r7, #20]
      break;
 806808c:	e043      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 806808e:	f7ff fbf3 	bl	8067878 <LL_RCC_PLL2_IsReady>
 8068092:	4603      	mov	r3, r0
 8068094:	2b00      	cmp	r3, #0
 8068096:	d035      	beq.n	8068104 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8068098:	f107 0308 	add.w	r3, r7, #8
 806809c:	4618      	mov	r0, r3
 806809e:	f7ff fdfd 	bl	8067c9c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80680a2:	68fb      	ldr	r3, [r7, #12]
 80680a4:	617b      	str	r3, [r7, #20]
      }
      break;
 80680a6:	e02d      	b.n	8068104 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 80680a8:	f7ff fca2 	bl	80679f0 <LL_RCC_PLL3_IsReady>
 80680ac:	4603      	mov	r3, r0
 80680ae:	2b00      	cmp	r3, #0
 80680b0:	d02a      	beq.n	8068108 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80680b2:	f107 0308 	add.w	r3, r7, #8
 80680b6:	4618      	mov	r0, r3
 80680b8:	f7ff fe88 	bl	8067dcc <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80680bc:	68fb      	ldr	r3, [r7, #12]
 80680be:	617b      	str	r3, [r7, #20]
      }
      break;
 80680c0:	e022      	b.n	8068108 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 80680c2:	f7ff fa65 	bl	8067590 <LL_RCC_HSI_IsReady>
 80680c6:	4603      	mov	r3, r0
 80680c8:	2b00      	cmp	r3, #0
 80680ca:	d01f      	beq.n	806810c <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80680cc:	f7ff fa72 	bl	80675b4 <LL_RCC_HSI_GetDivider>
 80680d0:	4603      	mov	r3, r0
 80680d2:	08db      	lsrs	r3, r3, #3
 80680d4:	4a1f      	ldr	r2, [pc, #124]	@ (8068154 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80680d6:	fa22 f303 	lsr.w	r3, r2, r3
 80680da:	617b      	str	r3, [r7, #20]
      }
      break;
 80680dc:	e016      	b.n	806810c <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 80680de:	f7ff fa77 	bl	80675d0 <LL_RCC_CSI_IsReady>
 80680e2:	4603      	mov	r3, r0
 80680e4:	2b00      	cmp	r3, #0
 80680e6:	d013      	beq.n	8068110 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80680e8:	4b1b      	ldr	r3, [pc, #108]	@ (8068158 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80680ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80680ec:	e010      	b.n	8068110 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80680ee:	f7ff fa83 	bl	80675f8 <LL_RCC_LSE_IsReady>
 80680f2:	4603      	mov	r3, r0
 80680f4:	2b00      	cmp	r3, #0
 80680f6:	d00d      	beq.n	8068114 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80680f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80680fc:	617b      	str	r3, [r7, #20]
      }
      break;
 80680fe:	e009      	b.n	8068114 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8068100:	bf00      	nop
 8068102:	e008      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8068104:	bf00      	nop
 8068106:	e006      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8068108:	bf00      	nop
 806810a:	e004      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 806810c:	bf00      	nop
 806810e:	e002      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8068110:	bf00      	nop
 8068112:	e000      	b.n	8068116 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8068114:	bf00      	nop
  }

  return usart_frequency;
 8068116:	697b      	ldr	r3, [r7, #20]
}
 8068118:	4618      	mov	r0, r3
 806811a:	371c      	adds	r7, #28
 806811c:	46bd      	mov	sp, r7
 806811e:	bd90      	pop	{r4, r7, pc}
 8068120:	07050308 	.word	0x07050308
 8068124:	07050008 	.word	0x07050008
 8068128:	07040308 	.word	0x07040308
 806812c:	07040008 	.word	0x07040008
 8068130:	07030308 	.word	0x07030308
 8068134:	07030008 	.word	0x07030008
 8068138:	07020308 	.word	0x07020308
 806813c:	07020008 	.word	0x07020008
 8068140:	07010308 	.word	0x07010308
 8068144:	07010008 	.word	0x07010008
 8068148:	07000008 	.word	0x07000008
 806814c:	07000308 	.word	0x07000308
 8068150:	08072510 	.word	0x08072510
 8068154:	03d09000 	.word	0x03d09000
 8068158:	003d0900 	.word	0x003d0900

0806815c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 806815c:	b580      	push	{r7, lr}
 806815e:	b084      	sub	sp, #16
 8068160:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8068162:	2300      	movs	r3, #0
 8068164:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8068166:	f7ff fa59 	bl	806761c <LL_RCC_GetSysClkSource>
 806816a:	4603      	mov	r3, r0
 806816c:	2b18      	cmp	r3, #24
 806816e:	d84b      	bhi.n	8068208 <RCC_GetSystemClockFreq+0xac>
 8068170:	a201      	add	r2, pc, #4	@ (adr r2, 8068178 <RCC_GetSystemClockFreq+0x1c>)
 8068172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8068176:	bf00      	nop
 8068178:	080681dd 	.word	0x080681dd
 806817c:	08068209 	.word	0x08068209
 8068180:	08068209 	.word	0x08068209
 8068184:	08068209 	.word	0x08068209
 8068188:	08068209 	.word	0x08068209
 806818c:	08068209 	.word	0x08068209
 8068190:	08068209 	.word	0x08068209
 8068194:	08068209 	.word	0x08068209
 8068198:	080681ef 	.word	0x080681ef
 806819c:	08068209 	.word	0x08068209
 80681a0:	08068209 	.word	0x08068209
 80681a4:	08068209 	.word	0x08068209
 80681a8:	08068209 	.word	0x08068209
 80681ac:	08068209 	.word	0x08068209
 80681b0:	08068209 	.word	0x08068209
 80681b4:	08068209 	.word	0x08068209
 80681b8:	080681f5 	.word	0x080681f5
 80681bc:	08068209 	.word	0x08068209
 80681c0:	08068209 	.word	0x08068209
 80681c4:	08068209 	.word	0x08068209
 80681c8:	08068209 	.word	0x08068209
 80681cc:	08068209 	.word	0x08068209
 80681d0:	08068209 	.word	0x08068209
 80681d4:	08068209 	.word	0x08068209
 80681d8:	080681fb 	.word	0x080681fb
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80681dc:	f7ff f9ea 	bl	80675b4 <LL_RCC_HSI_GetDivider>
 80681e0:	4603      	mov	r3, r0
 80681e2:	08db      	lsrs	r3, r3, #3
 80681e4:	4a0b      	ldr	r2, [pc, #44]	@ (8068214 <RCC_GetSystemClockFreq+0xb8>)
 80681e6:	fa22 f303 	lsr.w	r3, r2, r3
 80681ea:	60fb      	str	r3, [r7, #12]
      break;
 80681ec:	e00d      	b.n	806820a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80681ee:	4b0a      	ldr	r3, [pc, #40]	@ (8068218 <RCC_GetSystemClockFreq+0xbc>)
 80681f0:	60fb      	str	r3, [r7, #12]
      break;
 80681f2:	e00a      	b.n	806820a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80681f4:	4b09      	ldr	r3, [pc, #36]	@ (806821c <RCC_GetSystemClockFreq+0xc0>)
 80681f6:	60fb      	str	r3, [r7, #12]
      break;
 80681f8:	e007      	b.n	806820a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80681fa:	463b      	mov	r3, r7
 80681fc:	4618      	mov	r0, r3
 80681fe:	f7ff fcb5 	bl	8067b6c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8068202:	683b      	ldr	r3, [r7, #0]
 8068204:	60fb      	str	r3, [r7, #12]
      break;
 8068206:	e000      	b.n	806820a <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8068208:	bf00      	nop
  }

  return frequency;
 806820a:	68fb      	ldr	r3, [r7, #12]
}
 806820c:	4618      	mov	r0, r3
 806820e:	3710      	adds	r7, #16
 8068210:	46bd      	mov	sp, r7
 8068212:	bd80      	pop	{r7, pc}
 8068214:	03d09000 	.word	0x03d09000
 8068218:	003d0900 	.word	0x003d0900
 806821c:	017d7840 	.word	0x017d7840

08068220 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8068220:	b580      	push	{r7, lr}
 8068222:	b082      	sub	sp, #8
 8068224:	af00      	add	r7, sp, #0
 8068226:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8068228:	f7ff fa14 	bl	8067654 <LL_RCC_GetAHBPrescaler>
 806822c:	4603      	mov	r3, r0
 806822e:	f003 030f 	and.w	r3, r3, #15
 8068232:	4a05      	ldr	r2, [pc, #20]	@ (8068248 <RCC_GetHCLKClockFreq+0x28>)
 8068234:	5cd3      	ldrb	r3, [r2, r3]
 8068236:	f003 031f 	and.w	r3, r3, #31
 806823a:	687a      	ldr	r2, [r7, #4]
 806823c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8068240:	4618      	mov	r0, r3
 8068242:	3708      	adds	r7, #8
 8068244:	46bd      	mov	sp, r7
 8068246:	bd80      	pop	{r7, pc}
 8068248:	08072510 	.word	0x08072510

0806824c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 806824c:	b580      	push	{r7, lr}
 806824e:	b082      	sub	sp, #8
 8068250:	af00      	add	r7, sp, #0
 8068252:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8068254:	f7ff fa0c 	bl	8067670 <LL_RCC_GetAPB1Prescaler>
 8068258:	4603      	mov	r3, r0
 806825a:	091b      	lsrs	r3, r3, #4
 806825c:	f003 0307 	and.w	r3, r3, #7
 8068260:	4a05      	ldr	r2, [pc, #20]	@ (8068278 <RCC_GetPCLK1ClockFreq+0x2c>)
 8068262:	5cd3      	ldrb	r3, [r2, r3]
 8068264:	f003 031f 	and.w	r3, r3, #31
 8068268:	687a      	ldr	r2, [r7, #4]
 806826a:	fa22 f303 	lsr.w	r3, r2, r3
}
 806826e:	4618      	mov	r0, r3
 8068270:	3708      	adds	r7, #8
 8068272:	46bd      	mov	sp, r7
 8068274:	bd80      	pop	{r7, pc}
 8068276:	bf00      	nop
 8068278:	08072510 	.word	0x08072510

0806827c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 806827c:	b580      	push	{r7, lr}
 806827e:	b082      	sub	sp, #8
 8068280:	af00      	add	r7, sp, #0
 8068282:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8068284:	f7ff fa02 	bl	806768c <LL_RCC_GetAPB2Prescaler>
 8068288:	4603      	mov	r3, r0
 806828a:	0a1b      	lsrs	r3, r3, #8
 806828c:	f003 0307 	and.w	r3, r3, #7
 8068290:	4a05      	ldr	r2, [pc, #20]	@ (80682a8 <RCC_GetPCLK2ClockFreq+0x2c>)
 8068292:	5cd3      	ldrb	r3, [r2, r3]
 8068294:	f003 031f 	and.w	r3, r3, #31
 8068298:	687a      	ldr	r2, [r7, #4]
 806829a:	fa22 f303 	lsr.w	r3, r2, r3
}
 806829e:	4618      	mov	r0, r3
 80682a0:	3708      	adds	r7, #8
 80682a2:	46bd      	mov	sp, r7
 80682a4:	bd80      	pop	{r7, pc}
 80682a6:	bf00      	nop
 80682a8:	08072510 	.word	0x08072510

080682ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80682ac:	b084      	sub	sp, #16
 80682ae:	b480      	push	{r7}
 80682b0:	b085      	sub	sp, #20
 80682b2:	af00      	add	r7, sp, #0
 80682b4:	6078      	str	r0, [r7, #4]
 80682b6:	f107 001c 	add.w	r0, r7, #28
 80682ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80682be:	2300      	movs	r3, #0
 80682c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80682c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80682c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80682c6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80682c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80682ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80682cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80682ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80682d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80682d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80682d4:	68fa      	ldr	r2, [r7, #12]
 80682d6:	4313      	orrs	r3, r2
 80682d8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80682da:	687b      	ldr	r3, [r7, #4]
 80682dc:	685a      	ldr	r2, [r3, #4]
 80682de:	4b07      	ldr	r3, [pc, #28]	@ (80682fc <SDMMC_Init+0x50>)
 80682e0:	4013      	ands	r3, r2
 80682e2:	68fa      	ldr	r2, [r7, #12]
 80682e4:	431a      	orrs	r2, r3
 80682e6:	687b      	ldr	r3, [r7, #4]
 80682e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80682ea:	2300      	movs	r3, #0
}
 80682ec:	4618      	mov	r0, r3
 80682ee:	3714      	adds	r7, #20
 80682f0:	46bd      	mov	sp, r7
 80682f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80682f6:	b004      	add	sp, #16
 80682f8:	4770      	bx	lr
 80682fa:	bf00      	nop
 80682fc:	ffc02c00 	.word	0xffc02c00

08068300 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8068300:	b480      	push	{r7}
 8068302:	b083      	sub	sp, #12
 8068304:	af00      	add	r7, sp, #0
 8068306:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8068308:	687b      	ldr	r3, [r7, #4]
 806830a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 806830e:	4618      	mov	r0, r3
 8068310:	370c      	adds	r7, #12
 8068312:	46bd      	mov	sp, r7
 8068314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068318:	4770      	bx	lr

0806831a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 806831a:	b480      	push	{r7}
 806831c:	b083      	sub	sp, #12
 806831e:	af00      	add	r7, sp, #0
 8068320:	6078      	str	r0, [r7, #4]
 8068322:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8068324:	683b      	ldr	r3, [r7, #0]
 8068326:	681a      	ldr	r2, [r3, #0]
 8068328:	687b      	ldr	r3, [r7, #4]
 806832a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 806832e:	2300      	movs	r3, #0
}
 8068330:	4618      	mov	r0, r3
 8068332:	370c      	adds	r7, #12
 8068334:	46bd      	mov	sp, r7
 8068336:	f85d 7b04 	ldr.w	r7, [sp], #4
 806833a:	4770      	bx	lr

0806833c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 806833c:	b480      	push	{r7}
 806833e:	b083      	sub	sp, #12
 8068340:	af00      	add	r7, sp, #0
 8068342:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8068344:	687b      	ldr	r3, [r7, #4]
 8068346:	681b      	ldr	r3, [r3, #0]
 8068348:	f043 0203 	orr.w	r2, r3, #3
 806834c:	687b      	ldr	r3, [r7, #4]
 806834e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8068350:	2300      	movs	r3, #0
}
 8068352:	4618      	mov	r0, r3
 8068354:	370c      	adds	r7, #12
 8068356:	46bd      	mov	sp, r7
 8068358:	f85d 7b04 	ldr.w	r7, [sp], #4
 806835c:	4770      	bx	lr

0806835e <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 806835e:	b480      	push	{r7}
 8068360:	b083      	sub	sp, #12
 8068362:	af00      	add	r7, sp, #0
 8068364:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8068366:	687b      	ldr	r3, [r7, #4]
 8068368:	681b      	ldr	r3, [r3, #0]
 806836a:	f023 0203 	bic.w	r2, r3, #3
 806836e:	687b      	ldr	r3, [r7, #4]
 8068370:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8068372:	2300      	movs	r3, #0
}
 8068374:	4618      	mov	r0, r3
 8068376:	370c      	adds	r7, #12
 8068378:	46bd      	mov	sp, r7
 806837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806837e:	4770      	bx	lr

08068380 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8068380:	b480      	push	{r7}
 8068382:	b083      	sub	sp, #12
 8068384:	af00      	add	r7, sp, #0
 8068386:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8068388:	687b      	ldr	r3, [r7, #4]
 806838a:	681b      	ldr	r3, [r3, #0]
 806838c:	f003 0303 	and.w	r3, r3, #3
}
 8068390:	4618      	mov	r0, r3
 8068392:	370c      	adds	r7, #12
 8068394:	46bd      	mov	sp, r7
 8068396:	f85d 7b04 	ldr.w	r7, [sp], #4
 806839a:	4770      	bx	lr

0806839c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 806839c:	b480      	push	{r7}
 806839e:	b085      	sub	sp, #20
 80683a0:	af00      	add	r7, sp, #0
 80683a2:	6078      	str	r0, [r7, #4]
 80683a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80683a6:	2300      	movs	r3, #0
 80683a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80683aa:	683b      	ldr	r3, [r7, #0]
 80683ac:	681a      	ldr	r2, [r3, #0]
 80683ae:	687b      	ldr	r3, [r7, #4]
 80683b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80683b2:	683b      	ldr	r3, [r7, #0]
 80683b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80683b6:	683b      	ldr	r3, [r7, #0]
 80683b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80683ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80683bc:	683b      	ldr	r3, [r7, #0]
 80683be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80683c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80683c2:	683b      	ldr	r3, [r7, #0]
 80683c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80683c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80683c8:	68fa      	ldr	r2, [r7, #12]
 80683ca:	4313      	orrs	r3, r2
 80683cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80683ce:	687b      	ldr	r3, [r7, #4]
 80683d0:	68da      	ldr	r2, [r3, #12]
 80683d2:	4b06      	ldr	r3, [pc, #24]	@ (80683ec <SDMMC_SendCommand+0x50>)
 80683d4:	4013      	ands	r3, r2
 80683d6:	68fa      	ldr	r2, [r7, #12]
 80683d8:	431a      	orrs	r2, r3
 80683da:	687b      	ldr	r3, [r7, #4]
 80683dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80683de:	2300      	movs	r3, #0
}
 80683e0:	4618      	mov	r0, r3
 80683e2:	3714      	adds	r7, #20
 80683e4:	46bd      	mov	sp, r7
 80683e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80683ea:	4770      	bx	lr
 80683ec:	fffee0c0 	.word	0xfffee0c0

080683f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80683f0:	b480      	push	{r7}
 80683f2:	b083      	sub	sp, #12
 80683f4:	af00      	add	r7, sp, #0
 80683f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80683f8:	687b      	ldr	r3, [r7, #4]
 80683fa:	691b      	ldr	r3, [r3, #16]
 80683fc:	b2db      	uxtb	r3, r3
}
 80683fe:	4618      	mov	r0, r3
 8068400:	370c      	adds	r7, #12
 8068402:	46bd      	mov	sp, r7
 8068404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068408:	4770      	bx	lr

0806840a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 806840a:	b480      	push	{r7}
 806840c:	b085      	sub	sp, #20
 806840e:	af00      	add	r7, sp, #0
 8068410:	6078      	str	r0, [r7, #4]
 8068412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8068414:	687b      	ldr	r3, [r7, #4]
 8068416:	3314      	adds	r3, #20
 8068418:	461a      	mov	r2, r3
 806841a:	683b      	ldr	r3, [r7, #0]
 806841c:	4413      	add	r3, r2
 806841e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8068420:	68fb      	ldr	r3, [r7, #12]
 8068422:	681b      	ldr	r3, [r3, #0]
}
 8068424:	4618      	mov	r0, r3
 8068426:	3714      	adds	r7, #20
 8068428:	46bd      	mov	sp, r7
 806842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806842e:	4770      	bx	lr

08068430 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8068430:	b480      	push	{r7}
 8068432:	b085      	sub	sp, #20
 8068434:	af00      	add	r7, sp, #0
 8068436:	6078      	str	r0, [r7, #4]
 8068438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 806843a:	2300      	movs	r3, #0
 806843c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 806843e:	683b      	ldr	r3, [r7, #0]
 8068440:	681a      	ldr	r2, [r3, #0]
 8068442:	687b      	ldr	r3, [r7, #4]
 8068444:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8068446:	683b      	ldr	r3, [r7, #0]
 8068448:	685a      	ldr	r2, [r3, #4]
 806844a:	687b      	ldr	r3, [r7, #4]
 806844c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 806844e:	683b      	ldr	r3, [r7, #0]
 8068450:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8068452:	683b      	ldr	r3, [r7, #0]
 8068454:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8068456:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8068458:	683b      	ldr	r3, [r7, #0]
 806845a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 806845c:	431a      	orrs	r2, r3
                       Data->DPSM);
 806845e:	683b      	ldr	r3, [r7, #0]
 8068460:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8068462:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8068464:	68fa      	ldr	r2, [r7, #12]
 8068466:	4313      	orrs	r3, r2
 8068468:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 806846a:	687b      	ldr	r3, [r7, #4]
 806846c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806846e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8068472:	68fb      	ldr	r3, [r7, #12]
 8068474:	431a      	orrs	r2, r3
 8068476:	687b      	ldr	r3, [r7, #4]
 8068478:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 806847a:	2300      	movs	r3, #0

}
 806847c:	4618      	mov	r0, r3
 806847e:	3714      	adds	r7, #20
 8068480:	46bd      	mov	sp, r7
 8068482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068486:	4770      	bx	lr

08068488 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8068488:	b580      	push	{r7, lr}
 806848a:	b088      	sub	sp, #32
 806848c:	af00      	add	r7, sp, #0
 806848e:	6078      	str	r0, [r7, #4]
 8068490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8068492:	683b      	ldr	r3, [r7, #0]
 8068494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8068496:	2310      	movs	r3, #16
 8068498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 806849a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806849e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80684a0:	2300      	movs	r3, #0
 80684a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80684a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80684a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80684aa:	f107 0308 	add.w	r3, r7, #8
 80684ae:	4619      	mov	r1, r3
 80684b0:	6878      	ldr	r0, [r7, #4]
 80684b2:	f7ff ff73 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80684b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80684ba:	2110      	movs	r1, #16
 80684bc:	6878      	ldr	r0, [r7, #4]
 80684be:	f000 f9fd 	bl	80688bc <SDMMC_GetCmdResp1>
 80684c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80684c4:	69fb      	ldr	r3, [r7, #28]
}
 80684c6:	4618      	mov	r0, r3
 80684c8:	3720      	adds	r7, #32
 80684ca:	46bd      	mov	sp, r7
 80684cc:	bd80      	pop	{r7, pc}

080684ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80684ce:	b580      	push	{r7, lr}
 80684d0:	b088      	sub	sp, #32
 80684d2:	af00      	add	r7, sp, #0
 80684d4:	6078      	str	r0, [r7, #4]
 80684d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80684d8:	683b      	ldr	r3, [r7, #0]
 80684da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80684dc:	2311      	movs	r3, #17
 80684de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80684e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80684e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80684e6:	2300      	movs	r3, #0
 80684e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80684ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80684ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80684f0:	f107 0308 	add.w	r3, r7, #8
 80684f4:	4619      	mov	r1, r3
 80684f6:	6878      	ldr	r0, [r7, #4]
 80684f8:	f7ff ff50 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80684fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068500:	2111      	movs	r1, #17
 8068502:	6878      	ldr	r0, [r7, #4]
 8068504:	f000 f9da 	bl	80688bc <SDMMC_GetCmdResp1>
 8068508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 806850a:	69fb      	ldr	r3, [r7, #28]
}
 806850c:	4618      	mov	r0, r3
 806850e:	3720      	adds	r7, #32
 8068510:	46bd      	mov	sp, r7
 8068512:	bd80      	pop	{r7, pc}

08068514 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8068514:	b580      	push	{r7, lr}
 8068516:	b088      	sub	sp, #32
 8068518:	af00      	add	r7, sp, #0
 806851a:	6078      	str	r0, [r7, #4]
 806851c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 806851e:	683b      	ldr	r3, [r7, #0]
 8068520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8068522:	2312      	movs	r3, #18
 8068524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806852a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 806852c:	2300      	movs	r3, #0
 806852e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8068530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068534:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068536:	f107 0308 	add.w	r3, r7, #8
 806853a:	4619      	mov	r1, r3
 806853c:	6878      	ldr	r0, [r7, #4]
 806853e:	f7ff ff2d 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8068542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068546:	2112      	movs	r1, #18
 8068548:	6878      	ldr	r0, [r7, #4]
 806854a:	f000 f9b7 	bl	80688bc <SDMMC_GetCmdResp1>
 806854e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8068550:	69fb      	ldr	r3, [r7, #28]
}
 8068552:	4618      	mov	r0, r3
 8068554:	3720      	adds	r7, #32
 8068556:	46bd      	mov	sp, r7
 8068558:	bd80      	pop	{r7, pc}

0806855a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 806855a:	b580      	push	{r7, lr}
 806855c:	b088      	sub	sp, #32
 806855e:	af00      	add	r7, sp, #0
 8068560:	6078      	str	r0, [r7, #4]
 8068562:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8068564:	683b      	ldr	r3, [r7, #0]
 8068566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8068568:	2318      	movs	r3, #24
 806856a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 806856c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8068570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8068572:	2300      	movs	r3, #0
 8068574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8068576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 806857a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 806857c:	f107 0308 	add.w	r3, r7, #8
 8068580:	4619      	mov	r1, r3
 8068582:	6878      	ldr	r0, [r7, #4]
 8068584:	f7ff ff0a 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8068588:	f241 3288 	movw	r2, #5000	@ 0x1388
 806858c:	2118      	movs	r1, #24
 806858e:	6878      	ldr	r0, [r7, #4]
 8068590:	f000 f994 	bl	80688bc <SDMMC_GetCmdResp1>
 8068594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8068596:	69fb      	ldr	r3, [r7, #28]
}
 8068598:	4618      	mov	r0, r3
 806859a:	3720      	adds	r7, #32
 806859c:	46bd      	mov	sp, r7
 806859e:	bd80      	pop	{r7, pc}

080685a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80685a0:	b580      	push	{r7, lr}
 80685a2:	b088      	sub	sp, #32
 80685a4:	af00      	add	r7, sp, #0
 80685a6:	6078      	str	r0, [r7, #4]
 80685a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80685aa:	683b      	ldr	r3, [r7, #0]
 80685ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80685ae:	2319      	movs	r3, #25
 80685b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80685b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80685b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80685b8:	2300      	movs	r3, #0
 80685ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80685bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80685c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80685c2:	f107 0308 	add.w	r3, r7, #8
 80685c6:	4619      	mov	r1, r3
 80685c8:	6878      	ldr	r0, [r7, #4]
 80685ca:	f7ff fee7 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80685ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80685d2:	2119      	movs	r1, #25
 80685d4:	6878      	ldr	r0, [r7, #4]
 80685d6:	f000 f971 	bl	80688bc <SDMMC_GetCmdResp1>
 80685da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80685dc:	69fb      	ldr	r3, [r7, #28]
}
 80685de:	4618      	mov	r0, r3
 80685e0:	3720      	adds	r7, #32
 80685e2:	46bd      	mov	sp, r7
 80685e4:	bd80      	pop	{r7, pc}
	...

080685e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80685e8:	b580      	push	{r7, lr}
 80685ea:	b088      	sub	sp, #32
 80685ec:	af00      	add	r7, sp, #0
 80685ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80685f0:	2300      	movs	r3, #0
 80685f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80685f4:	230c      	movs	r3, #12
 80685f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80685f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80685fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80685fe:	2300      	movs	r3, #0
 8068600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8068602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068606:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8068608:	687b      	ldr	r3, [r7, #4]
 806860a:	68db      	ldr	r3, [r3, #12]
 806860c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8068610:	687b      	ldr	r3, [r7, #4]
 8068612:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8068614:	687b      	ldr	r3, [r7, #4]
 8068616:	68db      	ldr	r3, [r3, #12]
 8068618:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 806861c:	687b      	ldr	r3, [r7, #4]
 806861e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068620:	f107 0308 	add.w	r3, r7, #8
 8068624:	4619      	mov	r1, r3
 8068626:	6878      	ldr	r0, [r7, #4]
 8068628:	f7ff feb8 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 806862c:	4a0b      	ldr	r2, [pc, #44]	@ (806865c <SDMMC_CmdStopTransfer+0x74>)
 806862e:	210c      	movs	r1, #12
 8068630:	6878      	ldr	r0, [r7, #4]
 8068632:	f000 f943 	bl	80688bc <SDMMC_GetCmdResp1>
 8068636:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8068638:	687b      	ldr	r3, [r7, #4]
 806863a:	68db      	ldr	r3, [r3, #12]
 806863c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8068640:	687b      	ldr	r3, [r7, #4]
 8068642:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8068644:	69fb      	ldr	r3, [r7, #28]
 8068646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 806864a:	d101      	bne.n	8068650 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 806864c:	2300      	movs	r3, #0
 806864e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8068650:	69fb      	ldr	r3, [r7, #28]
}
 8068652:	4618      	mov	r0, r3
 8068654:	3720      	adds	r7, #32
 8068656:	46bd      	mov	sp, r7
 8068658:	bd80      	pop	{r7, pc}
 806865a:	bf00      	nop
 806865c:	05f5e100 	.word	0x05f5e100

08068660 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8068660:	b580      	push	{r7, lr}
 8068662:	b088      	sub	sp, #32
 8068664:	af00      	add	r7, sp, #0
 8068666:	6078      	str	r0, [r7, #4]
 8068668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 806866a:	683b      	ldr	r3, [r7, #0]
 806866c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 806866e:	2307      	movs	r3, #7
 8068670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8068676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8068678:	2300      	movs	r3, #0
 806867a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 806867c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068680:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068682:	f107 0308 	add.w	r3, r7, #8
 8068686:	4619      	mov	r1, r3
 8068688:	6878      	ldr	r0, [r7, #4]
 806868a:	f7ff fe87 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 806868e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068692:	2107      	movs	r1, #7
 8068694:	6878      	ldr	r0, [r7, #4]
 8068696:	f000 f911 	bl	80688bc <SDMMC_GetCmdResp1>
 806869a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 806869c:	69fb      	ldr	r3, [r7, #28]
}
 806869e:	4618      	mov	r0, r3
 80686a0:	3720      	adds	r7, #32
 80686a2:	46bd      	mov	sp, r7
 80686a4:	bd80      	pop	{r7, pc}

080686a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80686a6:	b580      	push	{r7, lr}
 80686a8:	b088      	sub	sp, #32
 80686aa:	af00      	add	r7, sp, #0
 80686ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80686ae:	2300      	movs	r3, #0
 80686b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80686b2:	2300      	movs	r3, #0
 80686b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80686b6:	2300      	movs	r3, #0
 80686b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80686ba:	2300      	movs	r3, #0
 80686bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80686be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80686c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80686c4:	f107 0308 	add.w	r3, r7, #8
 80686c8:	4619      	mov	r1, r3
 80686ca:	6878      	ldr	r0, [r7, #4]
 80686cc:	f7ff fe66 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80686d0:	6878      	ldr	r0, [r7, #4]
 80686d2:	f000 fa6f 	bl	8068bb4 <SDMMC_GetCmdError>
 80686d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80686d8:	69fb      	ldr	r3, [r7, #28]
}
 80686da:	4618      	mov	r0, r3
 80686dc:	3720      	adds	r7, #32
 80686de:	46bd      	mov	sp, r7
 80686e0:	bd80      	pop	{r7, pc}

080686e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80686e2:	b580      	push	{r7, lr}
 80686e4:	b088      	sub	sp, #32
 80686e6:	af00      	add	r7, sp, #0
 80686e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80686ea:	2300      	movs	r3, #0
 80686ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80686ee:	2302      	movs	r3, #2
 80686f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80686f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80686f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80686f8:	2300      	movs	r3, #0
 80686fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80686fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068702:	f107 0308 	add.w	r3, r7, #8
 8068706:	4619      	mov	r1, r3
 8068708:	6878      	ldr	r0, [r7, #4]
 806870a:	f7ff fe47 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 806870e:	6878      	ldr	r0, [r7, #4]
 8068710:	f000 f9c6 	bl	8068aa0 <SDMMC_GetCmdResp2>
 8068714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8068716:	69fb      	ldr	r3, [r7, #28]
}
 8068718:	4618      	mov	r0, r3
 806871a:	3720      	adds	r7, #32
 806871c:	46bd      	mov	sp, r7
 806871e:	bd80      	pop	{r7, pc}

08068720 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8068720:	b580      	push	{r7, lr}
 8068722:	b088      	sub	sp, #32
 8068724:	af00      	add	r7, sp, #0
 8068726:	6078      	str	r0, [r7, #4]
 8068728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 806872a:	683b      	ldr	r3, [r7, #0]
 806872c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 806872e:	2309      	movs	r3, #9
 8068730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8068732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8068736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8068738:	2300      	movs	r3, #0
 806873a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 806873c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068742:	f107 0308 	add.w	r3, r7, #8
 8068746:	4619      	mov	r1, r3
 8068748:	6878      	ldr	r0, [r7, #4]
 806874a:	f7ff fe27 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 806874e:	6878      	ldr	r0, [r7, #4]
 8068750:	f000 f9a6 	bl	8068aa0 <SDMMC_GetCmdResp2>
 8068754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8068756:	69fb      	ldr	r3, [r7, #28]
}
 8068758:	4618      	mov	r0, r3
 806875a:	3720      	adds	r7, #32
 806875c:	46bd      	mov	sp, r7
 806875e:	bd80      	pop	{r7, pc}

08068760 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8068760:	b580      	push	{r7, lr}
 8068762:	b088      	sub	sp, #32
 8068764:	af00      	add	r7, sp, #0
 8068766:	6078      	str	r0, [r7, #4]
 8068768:	460b      	mov	r3, r1
 806876a:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 806876c:	887b      	ldrh	r3, [r7, #2]
 806876e:	041b      	lsls	r3, r3, #16
 8068770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8068772:	2303      	movs	r3, #3
 8068774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806877a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 806877c:	2300      	movs	r3, #0
 806877e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8068780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068786:	f107 0308 	add.w	r3, r7, #8
 806878a:	4619      	mov	r1, r3
 806878c:	6878      	ldr	r0, [r7, #4]
 806878e:	f7ff fe05 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8068792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068796:	2103      	movs	r1, #3
 8068798:	6878      	ldr	r0, [r7, #4]
 806879a:	f000 f88f 	bl	80688bc <SDMMC_GetCmdResp1>
 806879e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80687a0:	69fb      	ldr	r3, [r7, #28]
}
 80687a2:	4618      	mov	r0, r3
 80687a4:	3720      	adds	r7, #32
 80687a6:	46bd      	mov	sp, r7
 80687a8:	bd80      	pop	{r7, pc}

080687aa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80687aa:	b580      	push	{r7, lr}
 80687ac:	b088      	sub	sp, #32
 80687ae:	af00      	add	r7, sp, #0
 80687b0:	6078      	str	r0, [r7, #4]
 80687b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80687b4:	683b      	ldr	r3, [r7, #0]
 80687b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80687b8:	230d      	movs	r3, #13
 80687ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80687bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80687c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80687c2:	2300      	movs	r3, #0
 80687c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80687c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80687ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80687cc:	f107 0308 	add.w	r3, r7, #8
 80687d0:	4619      	mov	r1, r3
 80687d2:	6878      	ldr	r0, [r7, #4]
 80687d4:	f7ff fde2 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80687d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80687dc:	210d      	movs	r1, #13
 80687de:	6878      	ldr	r0, [r7, #4]
 80687e0:	f000 f86c 	bl	80688bc <SDMMC_GetCmdResp1>
 80687e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80687e6:	69fb      	ldr	r3, [r7, #28]
}
 80687e8:	4618      	mov	r0, r3
 80687ea:	3720      	adds	r7, #32
 80687ec:	46bd      	mov	sp, r7
 80687ee:	bd80      	pop	{r7, pc}

080687f0 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80687f0:	b580      	push	{r7, lr}
 80687f2:	b088      	sub	sp, #32
 80687f4:	af00      	add	r7, sp, #0
 80687f6:	6078      	str	r0, [r7, #4]
 80687f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80687fa:	683b      	ldr	r3, [r7, #0]
 80687fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 80687fe:	2301      	movs	r3, #1
 8068800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068802:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8068806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8068808:	2300      	movs	r3, #0
 806880a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 806880c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068812:	f107 0308 	add.w	r3, r7, #8
 8068816:	4619      	mov	r1, r3
 8068818:	6878      	ldr	r0, [r7, #4]
 806881a:	f7ff fdbf 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 806881e:	6878      	ldr	r0, [r7, #4]
 8068820:	f000 f988 	bl	8068b34 <SDMMC_GetCmdResp3>
 8068824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8068826:	69fb      	ldr	r3, [r7, #28]
}
 8068828:	4618      	mov	r0, r3
 806882a:	3720      	adds	r7, #32
 806882c:	46bd      	mov	sp, r7
 806882e:	bd80      	pop	{r7, pc}

08068830 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8068830:	b580      	push	{r7, lr}
 8068832:	b088      	sub	sp, #32
 8068834:	af00      	add	r7, sp, #0
 8068836:	6078      	str	r0, [r7, #4]
 8068838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 806883a:	683b      	ldr	r3, [r7, #0]
 806883c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 806883e:	2306      	movs	r3, #6
 8068840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8068846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8068848:	2300      	movs	r3, #0
 806884a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 806884c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068852:	f107 0308 	add.w	r3, r7, #8
 8068856:	4619      	mov	r1, r3
 8068858:	6878      	ldr	r0, [r7, #4]
 806885a:	f7ff fd9f 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 806885e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068862:	2106      	movs	r1, #6
 8068864:	6878      	ldr	r0, [r7, #4]
 8068866:	f000 f829 	bl	80688bc <SDMMC_GetCmdResp1>
 806886a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 806886c:	69fb      	ldr	r3, [r7, #28]
}
 806886e:	4618      	mov	r0, r3
 8068870:	3720      	adds	r7, #32
 8068872:	46bd      	mov	sp, r7
 8068874:	bd80      	pop	{r7, pc}

08068876 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8068876:	b580      	push	{r7, lr}
 8068878:	b088      	sub	sp, #32
 806887a:	af00      	add	r7, sp, #0
 806887c:	6078      	str	r0, [r7, #4]
 806887e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8068880:	683b      	ldr	r3, [r7, #0]
 8068882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8068884:	2308      	movs	r3, #8
 8068886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8068888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806888c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 806888e:	2300      	movs	r3, #0
 8068890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8068892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8068896:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8068898:	f107 0308 	add.w	r3, r7, #8
 806889c:	4619      	mov	r1, r3
 806889e:	6878      	ldr	r0, [r7, #4]
 80688a0:	f7ff fd7c 	bl	806839c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 80688a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80688a8:	2108      	movs	r1, #8
 80688aa:	6878      	ldr	r0, [r7, #4]
 80688ac:	f000 f806 	bl	80688bc <SDMMC_GetCmdResp1>
 80688b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80688b2:	69fb      	ldr	r3, [r7, #28]
}
 80688b4:	4618      	mov	r0, r3
 80688b6:	3720      	adds	r7, #32
 80688b8:	46bd      	mov	sp, r7
 80688ba:	bd80      	pop	{r7, pc}

080688bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80688bc:	b580      	push	{r7, lr}
 80688be:	b088      	sub	sp, #32
 80688c0:	af00      	add	r7, sp, #0
 80688c2:	60f8      	str	r0, [r7, #12]
 80688c4:	460b      	mov	r3, r1
 80688c6:	607a      	str	r2, [r7, #4]
 80688c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80688ca:	4b70      	ldr	r3, [pc, #448]	@ (8068a8c <SDMMC_GetCmdResp1+0x1d0>)
 80688cc:	681b      	ldr	r3, [r3, #0]
 80688ce:	4a70      	ldr	r2, [pc, #448]	@ (8068a90 <SDMMC_GetCmdResp1+0x1d4>)
 80688d0:	fba2 2303 	umull	r2, r3, r2, r3
 80688d4:	0a5a      	lsrs	r2, r3, #9
 80688d6:	687b      	ldr	r3, [r7, #4]
 80688d8:	fb02 f303 	mul.w	r3, r2, r3
 80688dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80688de:	69fb      	ldr	r3, [r7, #28]
 80688e0:	1e5a      	subs	r2, r3, #1
 80688e2:	61fa      	str	r2, [r7, #28]
 80688e4:	2b00      	cmp	r3, #0
 80688e6:	d102      	bne.n	80688ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80688e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80688ec:	e0c9      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80688ee:	68fb      	ldr	r3, [r7, #12]
 80688f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80688f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80688f4:	69ba      	ldr	r2, [r7, #24]
 80688f6:	4b67      	ldr	r3, [pc, #412]	@ (8068a94 <SDMMC_GetCmdResp1+0x1d8>)
 80688f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80688fa:	2b00      	cmp	r3, #0
 80688fc:	d0ef      	beq.n	80688de <SDMMC_GetCmdResp1+0x22>
 80688fe:	69bb      	ldr	r3, [r7, #24]
 8068900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8068904:	2b00      	cmp	r3, #0
 8068906:	d1ea      	bne.n	80688de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8068908:	68fb      	ldr	r3, [r7, #12]
 806890a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806890c:	f003 0304 	and.w	r3, r3, #4
 8068910:	2b00      	cmp	r3, #0
 8068912:	d004      	beq.n	806891e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8068914:	68fb      	ldr	r3, [r7, #12]
 8068916:	2204      	movs	r2, #4
 8068918:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 806891a:	2304      	movs	r3, #4
 806891c:	e0b1      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 806891e:	68fb      	ldr	r3, [r7, #12]
 8068920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068922:	f003 0301 	and.w	r3, r3, #1
 8068926:	2b00      	cmp	r3, #0
 8068928:	d004      	beq.n	8068934 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 806892a:	68fb      	ldr	r3, [r7, #12]
 806892c:	2201      	movs	r2, #1
 806892e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8068930:	2301      	movs	r3, #1
 8068932:	e0a6      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8068934:	68fb      	ldr	r3, [r7, #12]
 8068936:	4a58      	ldr	r2, [pc, #352]	@ (8068a98 <SDMMC_GetCmdResp1+0x1dc>)
 8068938:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 806893a:	68f8      	ldr	r0, [r7, #12]
 806893c:	f7ff fd58 	bl	80683f0 <SDMMC_GetCommandResponse>
 8068940:	4603      	mov	r3, r0
 8068942:	461a      	mov	r2, r3
 8068944:	7afb      	ldrb	r3, [r7, #11]
 8068946:	4293      	cmp	r3, r2
 8068948:	d001      	beq.n	806894e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 806894a:	2301      	movs	r3, #1
 806894c:	e099      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 806894e:	2100      	movs	r1, #0
 8068950:	68f8      	ldr	r0, [r7, #12]
 8068952:	f7ff fd5a 	bl	806840a <SDMMC_GetResponse>
 8068956:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8068958:	697a      	ldr	r2, [r7, #20]
 806895a:	4b50      	ldr	r3, [pc, #320]	@ (8068a9c <SDMMC_GetCmdResp1+0x1e0>)
 806895c:	4013      	ands	r3, r2
 806895e:	2b00      	cmp	r3, #0
 8068960:	d101      	bne.n	8068966 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8068962:	2300      	movs	r3, #0
 8068964:	e08d      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8068966:	697b      	ldr	r3, [r7, #20]
 8068968:	2b00      	cmp	r3, #0
 806896a:	da02      	bge.n	8068972 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 806896c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8068970:	e087      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8068972:	697b      	ldr	r3, [r7, #20]
 8068974:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8068978:	2b00      	cmp	r3, #0
 806897a:	d001      	beq.n	8068980 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 806897c:	2340      	movs	r3, #64	@ 0x40
 806897e:	e080      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8068980:	697b      	ldr	r3, [r7, #20]
 8068982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8068986:	2b00      	cmp	r3, #0
 8068988:	d001      	beq.n	806898e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 806898a:	2380      	movs	r3, #128	@ 0x80
 806898c:	e079      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 806898e:	697b      	ldr	r3, [r7, #20]
 8068990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8068994:	2b00      	cmp	r3, #0
 8068996:	d002      	beq.n	806899e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8068998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806899c:	e071      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 806899e:	697b      	ldr	r3, [r7, #20]
 80689a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80689a4:	2b00      	cmp	r3, #0
 80689a6:	d002      	beq.n	80689ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80689a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80689ac:	e069      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80689ae:	697b      	ldr	r3, [r7, #20]
 80689b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80689b4:	2b00      	cmp	r3, #0
 80689b6:	d002      	beq.n	80689be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80689b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80689bc:	e061      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80689be:	697b      	ldr	r3, [r7, #20]
 80689c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80689c4:	2b00      	cmp	r3, #0
 80689c6:	d002      	beq.n	80689ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80689c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80689cc:	e059      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80689ce:	697b      	ldr	r3, [r7, #20]
 80689d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80689d4:	2b00      	cmp	r3, #0
 80689d6:	d002      	beq.n	80689de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80689d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80689dc:	e051      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80689de:	697b      	ldr	r3, [r7, #20]
 80689e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80689e4:	2b00      	cmp	r3, #0
 80689e6:	d002      	beq.n	80689ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80689e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80689ec:	e049      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80689ee:	697b      	ldr	r3, [r7, #20]
 80689f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80689f4:	2b00      	cmp	r3, #0
 80689f6:	d002      	beq.n	80689fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80689f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80689fc:	e041      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80689fe:	697b      	ldr	r3, [r7, #20]
 8068a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8068a04:	2b00      	cmp	r3, #0
 8068a06:	d002      	beq.n	8068a0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8068a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8068a0c:	e039      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8068a0e:	697b      	ldr	r3, [r7, #20]
 8068a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8068a14:	2b00      	cmp	r3, #0
 8068a16:	d002      	beq.n	8068a1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8068a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8068a1c:	e031      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8068a1e:	697b      	ldr	r3, [r7, #20]
 8068a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8068a24:	2b00      	cmp	r3, #0
 8068a26:	d002      	beq.n	8068a2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8068a28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8068a2c:	e029      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8068a2e:	697b      	ldr	r3, [r7, #20]
 8068a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8068a34:	2b00      	cmp	r3, #0
 8068a36:	d002      	beq.n	8068a3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8068a38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8068a3c:	e021      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8068a3e:	697b      	ldr	r3, [r7, #20]
 8068a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8068a44:	2b00      	cmp	r3, #0
 8068a46:	d002      	beq.n	8068a4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8068a48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8068a4c:	e019      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8068a4e:	697b      	ldr	r3, [r7, #20]
 8068a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8068a54:	2b00      	cmp	r3, #0
 8068a56:	d002      	beq.n	8068a5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8068a58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8068a5c:	e011      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8068a5e:	697b      	ldr	r3, [r7, #20]
 8068a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8068a64:	2b00      	cmp	r3, #0
 8068a66:	d002      	beq.n	8068a6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8068a68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8068a6c:	e009      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8068a6e:	697b      	ldr	r3, [r7, #20]
 8068a70:	f003 0308 	and.w	r3, r3, #8
 8068a74:	2b00      	cmp	r3, #0
 8068a76:	d002      	beq.n	8068a7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8068a78:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8068a7c:	e001      	b.n	8068a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8068a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8068a82:	4618      	mov	r0, r3
 8068a84:	3720      	adds	r7, #32
 8068a86:	46bd      	mov	sp, r7
 8068a88:	bd80      	pop	{r7, pc}
 8068a8a:	bf00      	nop
 8068a8c:	240148f8 	.word	0x240148f8
 8068a90:	10624dd3 	.word	0x10624dd3
 8068a94:	00200045 	.word	0x00200045
 8068a98:	002000c5 	.word	0x002000c5
 8068a9c:	fdffe008 	.word	0xfdffe008

08068aa0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8068aa0:	b480      	push	{r7}
 8068aa2:	b085      	sub	sp, #20
 8068aa4:	af00      	add	r7, sp, #0
 8068aa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8068aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8068b28 <SDMMC_GetCmdResp2+0x88>)
 8068aaa:	681b      	ldr	r3, [r3, #0]
 8068aac:	4a1f      	ldr	r2, [pc, #124]	@ (8068b2c <SDMMC_GetCmdResp2+0x8c>)
 8068aae:	fba2 2303 	umull	r2, r3, r2, r3
 8068ab2:	0a5b      	lsrs	r3, r3, #9
 8068ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068ab8:	fb02 f303 	mul.w	r3, r2, r3
 8068abc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8068abe:	68fb      	ldr	r3, [r7, #12]
 8068ac0:	1e5a      	subs	r2, r3, #1
 8068ac2:	60fa      	str	r2, [r7, #12]
 8068ac4:	2b00      	cmp	r3, #0
 8068ac6:	d102      	bne.n	8068ace <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8068ac8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8068acc:	e026      	b.n	8068b1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8068ace:	687b      	ldr	r3, [r7, #4]
 8068ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068ad2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8068ad4:	68bb      	ldr	r3, [r7, #8]
 8068ad6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8068ada:	2b00      	cmp	r3, #0
 8068adc:	d0ef      	beq.n	8068abe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8068ade:	68bb      	ldr	r3, [r7, #8]
 8068ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8068ae4:	2b00      	cmp	r3, #0
 8068ae6:	d1ea      	bne.n	8068abe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8068ae8:	687b      	ldr	r3, [r7, #4]
 8068aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068aec:	f003 0304 	and.w	r3, r3, #4
 8068af0:	2b00      	cmp	r3, #0
 8068af2:	d004      	beq.n	8068afe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8068af4:	687b      	ldr	r3, [r7, #4]
 8068af6:	2204      	movs	r2, #4
 8068af8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8068afa:	2304      	movs	r3, #4
 8068afc:	e00e      	b.n	8068b1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8068afe:	687b      	ldr	r3, [r7, #4]
 8068b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068b02:	f003 0301 	and.w	r3, r3, #1
 8068b06:	2b00      	cmp	r3, #0
 8068b08:	d004      	beq.n	8068b14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8068b0a:	687b      	ldr	r3, [r7, #4]
 8068b0c:	2201      	movs	r2, #1
 8068b0e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8068b10:	2301      	movs	r3, #1
 8068b12:	e003      	b.n	8068b1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8068b14:	687b      	ldr	r3, [r7, #4]
 8068b16:	4a06      	ldr	r2, [pc, #24]	@ (8068b30 <SDMMC_GetCmdResp2+0x90>)
 8068b18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8068b1a:	2300      	movs	r3, #0
}
 8068b1c:	4618      	mov	r0, r3
 8068b1e:	3714      	adds	r7, #20
 8068b20:	46bd      	mov	sp, r7
 8068b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068b26:	4770      	bx	lr
 8068b28:	240148f8 	.word	0x240148f8
 8068b2c:	10624dd3 	.word	0x10624dd3
 8068b30:	002000c5 	.word	0x002000c5

08068b34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8068b34:	b480      	push	{r7}
 8068b36:	b085      	sub	sp, #20
 8068b38:	af00      	add	r7, sp, #0
 8068b3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8068b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8068ba8 <SDMMC_GetCmdResp3+0x74>)
 8068b3e:	681b      	ldr	r3, [r3, #0]
 8068b40:	4a1a      	ldr	r2, [pc, #104]	@ (8068bac <SDMMC_GetCmdResp3+0x78>)
 8068b42:	fba2 2303 	umull	r2, r3, r2, r3
 8068b46:	0a5b      	lsrs	r3, r3, #9
 8068b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068b4c:	fb02 f303 	mul.w	r3, r2, r3
 8068b50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8068b52:	68fb      	ldr	r3, [r7, #12]
 8068b54:	1e5a      	subs	r2, r3, #1
 8068b56:	60fa      	str	r2, [r7, #12]
 8068b58:	2b00      	cmp	r3, #0
 8068b5a:	d102      	bne.n	8068b62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8068b5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8068b60:	e01b      	b.n	8068b9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8068b62:	687b      	ldr	r3, [r7, #4]
 8068b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068b66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8068b68:	68bb      	ldr	r3, [r7, #8]
 8068b6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8068b6e:	2b00      	cmp	r3, #0
 8068b70:	d0ef      	beq.n	8068b52 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8068b72:	68bb      	ldr	r3, [r7, #8]
 8068b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8068b78:	2b00      	cmp	r3, #0
 8068b7a:	d1ea      	bne.n	8068b52 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8068b7c:	687b      	ldr	r3, [r7, #4]
 8068b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068b80:	f003 0304 	and.w	r3, r3, #4
 8068b84:	2b00      	cmp	r3, #0
 8068b86:	d004      	beq.n	8068b92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8068b88:	687b      	ldr	r3, [r7, #4]
 8068b8a:	2204      	movs	r2, #4
 8068b8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8068b8e:	2304      	movs	r3, #4
 8068b90:	e003      	b.n	8068b9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8068b92:	687b      	ldr	r3, [r7, #4]
 8068b94:	4a06      	ldr	r2, [pc, #24]	@ (8068bb0 <SDMMC_GetCmdResp3+0x7c>)
 8068b96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8068b98:	2300      	movs	r3, #0
}
 8068b9a:	4618      	mov	r0, r3
 8068b9c:	3714      	adds	r7, #20
 8068b9e:	46bd      	mov	sp, r7
 8068ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068ba4:	4770      	bx	lr
 8068ba6:	bf00      	nop
 8068ba8:	240148f8 	.word	0x240148f8
 8068bac:	10624dd3 	.word	0x10624dd3
 8068bb0:	002000c5 	.word	0x002000c5

08068bb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8068bb4:	b480      	push	{r7}
 8068bb6:	b085      	sub	sp, #20
 8068bb8:	af00      	add	r7, sp, #0
 8068bba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8068bbc:	4b11      	ldr	r3, [pc, #68]	@ (8068c04 <SDMMC_GetCmdError+0x50>)
 8068bbe:	681b      	ldr	r3, [r3, #0]
 8068bc0:	4a11      	ldr	r2, [pc, #68]	@ (8068c08 <SDMMC_GetCmdError+0x54>)
 8068bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8068bc6:	0a5b      	lsrs	r3, r3, #9
 8068bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8068bcc:	fb02 f303 	mul.w	r3, r2, r3
 8068bd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8068bd2:	68fb      	ldr	r3, [r7, #12]
 8068bd4:	1e5a      	subs	r2, r3, #1
 8068bd6:	60fa      	str	r2, [r7, #12]
 8068bd8:	2b00      	cmp	r3, #0
 8068bda:	d102      	bne.n	8068be2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8068bdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8068be0:	e009      	b.n	8068bf6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8068be2:	687b      	ldr	r3, [r7, #4]
 8068be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8068be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8068bea:	2b00      	cmp	r3, #0
 8068bec:	d0f1      	beq.n	8068bd2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8068bee:	687b      	ldr	r3, [r7, #4]
 8068bf0:	4a06      	ldr	r2, [pc, #24]	@ (8068c0c <SDMMC_GetCmdError+0x58>)
 8068bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8068bf4:	2300      	movs	r3, #0
}
 8068bf6:	4618      	mov	r0, r3
 8068bf8:	3714      	adds	r7, #20
 8068bfa:	46bd      	mov	sp, r7
 8068bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068c00:	4770      	bx	lr
 8068c02:	bf00      	nop
 8068c04:	240148f8 	.word	0x240148f8
 8068c08:	10624dd3 	.word	0x10624dd3
 8068c0c:	002000c5 	.word	0x002000c5

08068c10 <LL_SPI_IsEnabled>:
{
 8068c10:	b480      	push	{r7}
 8068c12:	b083      	sub	sp, #12
 8068c14:	af00      	add	r7, sp, #0
 8068c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8068c18:	687b      	ldr	r3, [r7, #4]
 8068c1a:	681b      	ldr	r3, [r3, #0]
 8068c1c:	f003 0301 	and.w	r3, r3, #1
 8068c20:	2b01      	cmp	r3, #1
 8068c22:	d101      	bne.n	8068c28 <LL_SPI_IsEnabled+0x18>
 8068c24:	2301      	movs	r3, #1
 8068c26:	e000      	b.n	8068c2a <LL_SPI_IsEnabled+0x1a>
 8068c28:	2300      	movs	r3, #0
}
 8068c2a:	4618      	mov	r0, r3
 8068c2c:	370c      	adds	r7, #12
 8068c2e:	46bd      	mov	sp, r7
 8068c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068c34:	4770      	bx	lr

08068c36 <LL_SPI_SetInternalSSLevel>:
{
 8068c36:	b480      	push	{r7}
 8068c38:	b083      	sub	sp, #12
 8068c3a:	af00      	add	r7, sp, #0
 8068c3c:	6078      	str	r0, [r7, #4]
 8068c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8068c40:	687b      	ldr	r3, [r7, #4]
 8068c42:	681b      	ldr	r3, [r3, #0]
 8068c44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8068c48:	683b      	ldr	r3, [r7, #0]
 8068c4a:	431a      	orrs	r2, r3
 8068c4c:	687b      	ldr	r3, [r7, #4]
 8068c4e:	601a      	str	r2, [r3, #0]
}
 8068c50:	bf00      	nop
 8068c52:	370c      	adds	r7, #12
 8068c54:	46bd      	mov	sp, r7
 8068c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068c5a:	4770      	bx	lr

08068c5c <LL_SPI_GetNSSPolarity>:
{
 8068c5c:	b480      	push	{r7}
 8068c5e:	b083      	sub	sp, #12
 8068c60:	af00      	add	r7, sp, #0
 8068c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8068c64:	687b      	ldr	r3, [r7, #4]
 8068c66:	68db      	ldr	r3, [r3, #12]
 8068c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8068c6c:	4618      	mov	r0, r3
 8068c6e:	370c      	adds	r7, #12
 8068c70:	46bd      	mov	sp, r7
 8068c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068c76:	4770      	bx	lr

08068c78 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8068c78:	b480      	push	{r7}
 8068c7a:	b083      	sub	sp, #12
 8068c7c:	af00      	add	r7, sp, #0
 8068c7e:	6078      	str	r0, [r7, #4]
 8068c80:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8068c82:	687b      	ldr	r3, [r7, #4]
 8068c84:	683a      	ldr	r2, [r7, #0]
 8068c86:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8068c88:	bf00      	nop
 8068c8a:	370c      	adds	r7, #12
 8068c8c:	46bd      	mov	sp, r7
 8068c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068c92:	4770      	bx	lr

08068c94 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8068c94:	b580      	push	{r7, lr}
 8068c96:	b086      	sub	sp, #24
 8068c98:	af00      	add	r7, sp, #0
 8068c9a:	6078      	str	r0, [r7, #4]
 8068c9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8068c9e:	2301      	movs	r3, #1
 8068ca0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8068ca2:	6878      	ldr	r0, [r7, #4]
 8068ca4:	f7ff ffb4 	bl	8068c10 <LL_SPI_IsEnabled>
 8068ca8:	4603      	mov	r3, r0
 8068caa:	2b00      	cmp	r3, #0
 8068cac:	d167      	bne.n	8068d7e <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8068cae:	687b      	ldr	r3, [r7, #4]
 8068cb0:	689a      	ldr	r2, [r3, #8]
 8068cb2:	4b35      	ldr	r3, [pc, #212]	@ (8068d88 <LL_SPI_Init+0xf4>)
 8068cb4:	4013      	ands	r3, r2
 8068cb6:	683a      	ldr	r2, [r7, #0]
 8068cb8:	6991      	ldr	r1, [r2, #24]
 8068cba:	683a      	ldr	r2, [r7, #0]
 8068cbc:	6a12      	ldr	r2, [r2, #32]
 8068cbe:	4311      	orrs	r1, r2
 8068cc0:	683a      	ldr	r2, [r7, #0]
 8068cc2:	6892      	ldr	r2, [r2, #8]
 8068cc4:	430a      	orrs	r2, r1
 8068cc6:	431a      	orrs	r2, r3
 8068cc8:	687b      	ldr	r3, [r7, #4]
 8068cca:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8068ccc:	683b      	ldr	r3, [r7, #0]
 8068cce:	695b      	ldr	r3, [r3, #20]
 8068cd0:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8068cd2:	683b      	ldr	r3, [r7, #0]
 8068cd4:	685b      	ldr	r3, [r3, #4]
 8068cd6:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8068cd8:	6878      	ldr	r0, [r7, #4]
 8068cda:	f7ff ffbf 	bl	8068c5c <LL_SPI_GetNSSPolarity>
 8068cde:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8068ce0:	693b      	ldr	r3, [r7, #16]
 8068ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8068ce6:	d112      	bne.n	8068d0e <LL_SPI_Init+0x7a>
 8068ce8:	68bb      	ldr	r3, [r7, #8]
 8068cea:	2b00      	cmp	r3, #0
 8068cec:	d103      	bne.n	8068cf6 <LL_SPI_Init+0x62>
 8068cee:	68fb      	ldr	r3, [r7, #12]
 8068cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8068cf4:	d006      	beq.n	8068d04 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 8068cf6:	68bb      	ldr	r3, [r7, #8]
 8068cf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8068cfc:	d107      	bne.n	8068d0e <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8068cfe:	68fb      	ldr	r3, [r7, #12]
 8068d00:	2b00      	cmp	r3, #0
 8068d02:	d104      	bne.n	8068d0e <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8068d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8068d08:	6878      	ldr	r0, [r7, #4]
 8068d0a:	f7ff ff94 	bl	8068c36 <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8068d0e:	687b      	ldr	r3, [r7, #4]
 8068d10:	68da      	ldr	r2, [r3, #12]
 8068d12:	4b1e      	ldr	r3, [pc, #120]	@ (8068d8c <LL_SPI_Init+0xf8>)
 8068d14:	4013      	ands	r3, r2
 8068d16:	683a      	ldr	r2, [r7, #0]
 8068d18:	6951      	ldr	r1, [r2, #20]
 8068d1a:	683a      	ldr	r2, [r7, #0]
 8068d1c:	68d2      	ldr	r2, [r2, #12]
 8068d1e:	4311      	orrs	r1, r2
 8068d20:	683a      	ldr	r2, [r7, #0]
 8068d22:	6912      	ldr	r2, [r2, #16]
 8068d24:	4311      	orrs	r1, r2
 8068d26:	683a      	ldr	r2, [r7, #0]
 8068d28:	69d2      	ldr	r2, [r2, #28]
 8068d2a:	4311      	orrs	r1, r2
 8068d2c:	683a      	ldr	r2, [r7, #0]
 8068d2e:	6852      	ldr	r2, [r2, #4]
 8068d30:	4311      	orrs	r1, r2
 8068d32:	683a      	ldr	r2, [r7, #0]
 8068d34:	6812      	ldr	r2, [r2, #0]
 8068d36:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8068d3a:	430a      	orrs	r2, r1
 8068d3c:	431a      	orrs	r2, r3
 8068d3e:	687b      	ldr	r3, [r7, #4]
 8068d40:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8068d42:	687b      	ldr	r3, [r7, #4]
 8068d44:	681b      	ldr	r3, [r3, #0]
 8068d46:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8068d4a:	683b      	ldr	r3, [r7, #0]
 8068d4c:	681b      	ldr	r3, [r3, #0]
 8068d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8068d52:	431a      	orrs	r2, r3
 8068d54:	687b      	ldr	r3, [r7, #4]
 8068d56:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8068d58:	683b      	ldr	r3, [r7, #0]
 8068d5a:	6a1b      	ldr	r3, [r3, #32]
 8068d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8068d60:	d105      	bne.n	8068d6e <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8068d62:	683b      	ldr	r3, [r7, #0]
 8068d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8068d66:	4619      	mov	r1, r3
 8068d68:	6878      	ldr	r0, [r7, #4]
 8068d6a:	f7ff ff85 	bl	8068c78 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8068d6e:	687b      	ldr	r3, [r7, #4]
 8068d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8068d72:	f023 0201 	bic.w	r2, r3, #1
 8068d76:	687b      	ldr	r3, [r7, #4]
 8068d78:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8068d7a:	2300      	movs	r3, #0
 8068d7c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8068d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8068d80:	4618      	mov	r0, r3
 8068d82:	3718      	adds	r7, #24
 8068d84:	46bd      	mov	sp, r7
 8068d86:	bd80      	pop	{r7, pc}
 8068d88:	8fbfffe0 	.word	0x8fbfffe0
 8068d8c:	d839ffff 	.word	0xd839ffff

08068d90 <LL_TIM_SetPrescaler>:
{
 8068d90:	b480      	push	{r7}
 8068d92:	b083      	sub	sp, #12
 8068d94:	af00      	add	r7, sp, #0
 8068d96:	6078      	str	r0, [r7, #4]
 8068d98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8068d9a:	687b      	ldr	r3, [r7, #4]
 8068d9c:	683a      	ldr	r2, [r7, #0]
 8068d9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8068da0:	bf00      	nop
 8068da2:	370c      	adds	r7, #12
 8068da4:	46bd      	mov	sp, r7
 8068da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068daa:	4770      	bx	lr

08068dac <LL_TIM_SetAutoReload>:
{
 8068dac:	b480      	push	{r7}
 8068dae:	b083      	sub	sp, #12
 8068db0:	af00      	add	r7, sp, #0
 8068db2:	6078      	str	r0, [r7, #4]
 8068db4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8068db6:	687b      	ldr	r3, [r7, #4]
 8068db8:	683a      	ldr	r2, [r7, #0]
 8068dba:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8068dbc:	bf00      	nop
 8068dbe:	370c      	adds	r7, #12
 8068dc0:	46bd      	mov	sp, r7
 8068dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068dc6:	4770      	bx	lr

08068dc8 <LL_TIM_SetRepetitionCounter>:
{
 8068dc8:	b480      	push	{r7}
 8068dca:	b083      	sub	sp, #12
 8068dcc:	af00      	add	r7, sp, #0
 8068dce:	6078      	str	r0, [r7, #4]
 8068dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8068dd2:	687b      	ldr	r3, [r7, #4]
 8068dd4:	683a      	ldr	r2, [r7, #0]
 8068dd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8068dd8:	bf00      	nop
 8068dda:	370c      	adds	r7, #12
 8068ddc:	46bd      	mov	sp, r7
 8068dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068de2:	4770      	bx	lr

08068de4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8068de4:	b480      	push	{r7}
 8068de6:	b083      	sub	sp, #12
 8068de8:	af00      	add	r7, sp, #0
 8068dea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8068dec:	687b      	ldr	r3, [r7, #4]
 8068dee:	695b      	ldr	r3, [r3, #20]
 8068df0:	f043 0201 	orr.w	r2, r3, #1
 8068df4:	687b      	ldr	r3, [r7, #4]
 8068df6:	615a      	str	r2, [r3, #20]
}
 8068df8:	bf00      	nop
 8068dfa:	370c      	adds	r7, #12
 8068dfc:	46bd      	mov	sp, r7
 8068dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068e02:	4770      	bx	lr

08068e04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8068e04:	b580      	push	{r7, lr}
 8068e06:	b084      	sub	sp, #16
 8068e08:	af00      	add	r7, sp, #0
 8068e0a:	6078      	str	r0, [r7, #4]
 8068e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8068e0e:	687b      	ldr	r3, [r7, #4]
 8068e10:	681b      	ldr	r3, [r3, #0]
 8068e12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8068e14:	687b      	ldr	r3, [r7, #4]
 8068e16:	4a3d      	ldr	r2, [pc, #244]	@ (8068f0c <LL_TIM_Init+0x108>)
 8068e18:	4293      	cmp	r3, r2
 8068e1a:	d013      	beq.n	8068e44 <LL_TIM_Init+0x40>
 8068e1c:	687b      	ldr	r3, [r7, #4]
 8068e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8068e22:	d00f      	beq.n	8068e44 <LL_TIM_Init+0x40>
 8068e24:	687b      	ldr	r3, [r7, #4]
 8068e26:	4a3a      	ldr	r2, [pc, #232]	@ (8068f10 <LL_TIM_Init+0x10c>)
 8068e28:	4293      	cmp	r3, r2
 8068e2a:	d00b      	beq.n	8068e44 <LL_TIM_Init+0x40>
 8068e2c:	687b      	ldr	r3, [r7, #4]
 8068e2e:	4a39      	ldr	r2, [pc, #228]	@ (8068f14 <LL_TIM_Init+0x110>)
 8068e30:	4293      	cmp	r3, r2
 8068e32:	d007      	beq.n	8068e44 <LL_TIM_Init+0x40>
 8068e34:	687b      	ldr	r3, [r7, #4]
 8068e36:	4a38      	ldr	r2, [pc, #224]	@ (8068f18 <LL_TIM_Init+0x114>)
 8068e38:	4293      	cmp	r3, r2
 8068e3a:	d003      	beq.n	8068e44 <LL_TIM_Init+0x40>
 8068e3c:	687b      	ldr	r3, [r7, #4]
 8068e3e:	4a37      	ldr	r2, [pc, #220]	@ (8068f1c <LL_TIM_Init+0x118>)
 8068e40:	4293      	cmp	r3, r2
 8068e42:	d106      	bne.n	8068e52 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8068e44:	68fb      	ldr	r3, [r7, #12]
 8068e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8068e4a:	683b      	ldr	r3, [r7, #0]
 8068e4c:	685b      	ldr	r3, [r3, #4]
 8068e4e:	4313      	orrs	r3, r2
 8068e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8068e52:	687b      	ldr	r3, [r7, #4]
 8068e54:	4a2d      	ldr	r2, [pc, #180]	@ (8068f0c <LL_TIM_Init+0x108>)
 8068e56:	4293      	cmp	r3, r2
 8068e58:	d01f      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e5a:	687b      	ldr	r3, [r7, #4]
 8068e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8068e60:	d01b      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e62:	687b      	ldr	r3, [r7, #4]
 8068e64:	4a2a      	ldr	r2, [pc, #168]	@ (8068f10 <LL_TIM_Init+0x10c>)
 8068e66:	4293      	cmp	r3, r2
 8068e68:	d017      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e6a:	687b      	ldr	r3, [r7, #4]
 8068e6c:	4a29      	ldr	r2, [pc, #164]	@ (8068f14 <LL_TIM_Init+0x110>)
 8068e6e:	4293      	cmp	r3, r2
 8068e70:	d013      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e72:	687b      	ldr	r3, [r7, #4]
 8068e74:	4a28      	ldr	r2, [pc, #160]	@ (8068f18 <LL_TIM_Init+0x114>)
 8068e76:	4293      	cmp	r3, r2
 8068e78:	d00f      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e7a:	687b      	ldr	r3, [r7, #4]
 8068e7c:	4a27      	ldr	r2, [pc, #156]	@ (8068f1c <LL_TIM_Init+0x118>)
 8068e7e:	4293      	cmp	r3, r2
 8068e80:	d00b      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e82:	687b      	ldr	r3, [r7, #4]
 8068e84:	4a26      	ldr	r2, [pc, #152]	@ (8068f20 <LL_TIM_Init+0x11c>)
 8068e86:	4293      	cmp	r3, r2
 8068e88:	d007      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e8a:	687b      	ldr	r3, [r7, #4]
 8068e8c:	4a25      	ldr	r2, [pc, #148]	@ (8068f24 <LL_TIM_Init+0x120>)
 8068e8e:	4293      	cmp	r3, r2
 8068e90:	d003      	beq.n	8068e9a <LL_TIM_Init+0x96>
 8068e92:	687b      	ldr	r3, [r7, #4]
 8068e94:	4a24      	ldr	r2, [pc, #144]	@ (8068f28 <LL_TIM_Init+0x124>)
 8068e96:	4293      	cmp	r3, r2
 8068e98:	d106      	bne.n	8068ea8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8068e9a:	68fb      	ldr	r3, [r7, #12]
 8068e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8068ea0:	683b      	ldr	r3, [r7, #0]
 8068ea2:	68db      	ldr	r3, [r3, #12]
 8068ea4:	4313      	orrs	r3, r2
 8068ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8068ea8:	687b      	ldr	r3, [r7, #4]
 8068eaa:	68fa      	ldr	r2, [r7, #12]
 8068eac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8068eae:	683b      	ldr	r3, [r7, #0]
 8068eb0:	689b      	ldr	r3, [r3, #8]
 8068eb2:	4619      	mov	r1, r3
 8068eb4:	6878      	ldr	r0, [r7, #4]
 8068eb6:	f7ff ff79 	bl	8068dac <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8068eba:	683b      	ldr	r3, [r7, #0]
 8068ebc:	881b      	ldrh	r3, [r3, #0]
 8068ebe:	4619      	mov	r1, r3
 8068ec0:	6878      	ldr	r0, [r7, #4]
 8068ec2:	f7ff ff65 	bl	8068d90 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8068ec6:	687b      	ldr	r3, [r7, #4]
 8068ec8:	4a10      	ldr	r2, [pc, #64]	@ (8068f0c <LL_TIM_Init+0x108>)
 8068eca:	4293      	cmp	r3, r2
 8068ecc:	d00f      	beq.n	8068eee <LL_TIM_Init+0xea>
 8068ece:	687b      	ldr	r3, [r7, #4]
 8068ed0:	4a12      	ldr	r2, [pc, #72]	@ (8068f1c <LL_TIM_Init+0x118>)
 8068ed2:	4293      	cmp	r3, r2
 8068ed4:	d00b      	beq.n	8068eee <LL_TIM_Init+0xea>
 8068ed6:	687b      	ldr	r3, [r7, #4]
 8068ed8:	4a11      	ldr	r2, [pc, #68]	@ (8068f20 <LL_TIM_Init+0x11c>)
 8068eda:	4293      	cmp	r3, r2
 8068edc:	d007      	beq.n	8068eee <LL_TIM_Init+0xea>
 8068ede:	687b      	ldr	r3, [r7, #4]
 8068ee0:	4a10      	ldr	r2, [pc, #64]	@ (8068f24 <LL_TIM_Init+0x120>)
 8068ee2:	4293      	cmp	r3, r2
 8068ee4:	d003      	beq.n	8068eee <LL_TIM_Init+0xea>
 8068ee6:	687b      	ldr	r3, [r7, #4]
 8068ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8068f28 <LL_TIM_Init+0x124>)
 8068eea:	4293      	cmp	r3, r2
 8068eec:	d105      	bne.n	8068efa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8068eee:	683b      	ldr	r3, [r7, #0]
 8068ef0:	691b      	ldr	r3, [r3, #16]
 8068ef2:	4619      	mov	r1, r3
 8068ef4:	6878      	ldr	r0, [r7, #4]
 8068ef6:	f7ff ff67 	bl	8068dc8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8068efa:	6878      	ldr	r0, [r7, #4]
 8068efc:	f7ff ff72 	bl	8068de4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8068f00:	2300      	movs	r3, #0
}
 8068f02:	4618      	mov	r0, r3
 8068f04:	3710      	adds	r7, #16
 8068f06:	46bd      	mov	sp, r7
 8068f08:	bd80      	pop	{r7, pc}
 8068f0a:	bf00      	nop
 8068f0c:	40010000 	.word	0x40010000
 8068f10:	40000400 	.word	0x40000400
 8068f14:	40000800 	.word	0x40000800
 8068f18:	40000c00 	.word	0x40000c00
 8068f1c:	40010400 	.word	0x40010400
 8068f20:	40014000 	.word	0x40014000
 8068f24:	40014400 	.word	0x40014400
 8068f28:	40014800 	.word	0x40014800

08068f2c <LL_USART_IsEnabled>:
{
 8068f2c:	b480      	push	{r7}
 8068f2e:	b083      	sub	sp, #12
 8068f30:	af00      	add	r7, sp, #0
 8068f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8068f34:	687b      	ldr	r3, [r7, #4]
 8068f36:	681b      	ldr	r3, [r3, #0]
 8068f38:	f003 0301 	and.w	r3, r3, #1
 8068f3c:	2b01      	cmp	r3, #1
 8068f3e:	d101      	bne.n	8068f44 <LL_USART_IsEnabled+0x18>
 8068f40:	2301      	movs	r3, #1
 8068f42:	e000      	b.n	8068f46 <LL_USART_IsEnabled+0x1a>
 8068f44:	2300      	movs	r3, #0
}
 8068f46:	4618      	mov	r0, r3
 8068f48:	370c      	adds	r7, #12
 8068f4a:	46bd      	mov	sp, r7
 8068f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f50:	4770      	bx	lr

08068f52 <LL_USART_SetPrescaler>:
{
 8068f52:	b480      	push	{r7}
 8068f54:	b083      	sub	sp, #12
 8068f56:	af00      	add	r7, sp, #0
 8068f58:	6078      	str	r0, [r7, #4]
 8068f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8068f5c:	687b      	ldr	r3, [r7, #4]
 8068f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8068f60:	f023 030f 	bic.w	r3, r3, #15
 8068f64:	683a      	ldr	r2, [r7, #0]
 8068f66:	b292      	uxth	r2, r2
 8068f68:	431a      	orrs	r2, r3
 8068f6a:	687b      	ldr	r3, [r7, #4]
 8068f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8068f6e:	bf00      	nop
 8068f70:	370c      	adds	r7, #12
 8068f72:	46bd      	mov	sp, r7
 8068f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f78:	4770      	bx	lr

08068f7a <LL_USART_SetStopBitsLength>:
{
 8068f7a:	b480      	push	{r7}
 8068f7c:	b083      	sub	sp, #12
 8068f7e:	af00      	add	r7, sp, #0
 8068f80:	6078      	str	r0, [r7, #4]
 8068f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8068f84:	687b      	ldr	r3, [r7, #4]
 8068f86:	685b      	ldr	r3, [r3, #4]
 8068f88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8068f8c:	683b      	ldr	r3, [r7, #0]
 8068f8e:	431a      	orrs	r2, r3
 8068f90:	687b      	ldr	r3, [r7, #4]
 8068f92:	605a      	str	r2, [r3, #4]
}
 8068f94:	bf00      	nop
 8068f96:	370c      	adds	r7, #12
 8068f98:	46bd      	mov	sp, r7
 8068f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f9e:	4770      	bx	lr

08068fa0 <LL_USART_SetHWFlowCtrl>:
{
 8068fa0:	b480      	push	{r7}
 8068fa2:	b083      	sub	sp, #12
 8068fa4:	af00      	add	r7, sp, #0
 8068fa6:	6078      	str	r0, [r7, #4]
 8068fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8068faa:	687b      	ldr	r3, [r7, #4]
 8068fac:	689b      	ldr	r3, [r3, #8]
 8068fae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8068fb2:	683b      	ldr	r3, [r7, #0]
 8068fb4:	431a      	orrs	r2, r3
 8068fb6:	687b      	ldr	r3, [r7, #4]
 8068fb8:	609a      	str	r2, [r3, #8]
}
 8068fba:	bf00      	nop
 8068fbc:	370c      	adds	r7, #12
 8068fbe:	46bd      	mov	sp, r7
 8068fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068fc4:	4770      	bx	lr
	...

08068fc8 <LL_USART_SetBaudRate>:
{
 8068fc8:	b480      	push	{r7}
 8068fca:	b087      	sub	sp, #28
 8068fcc:	af00      	add	r7, sp, #0
 8068fce:	60f8      	str	r0, [r7, #12]
 8068fd0:	60b9      	str	r1, [r7, #8]
 8068fd2:	607a      	str	r2, [r7, #4]
 8068fd4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8068fd6:	687b      	ldr	r3, [r7, #4]
 8068fd8:	2b0b      	cmp	r3, #11
 8068fda:	d83c      	bhi.n	8069056 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8068fdc:	6a3b      	ldr	r3, [r7, #32]
 8068fde:	2b00      	cmp	r3, #0
 8068fe0:	d039      	beq.n	8069056 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8068fe2:	683b      	ldr	r3, [r7, #0]
 8068fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8068fe8:	d122      	bne.n	8069030 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8068fea:	687b      	ldr	r3, [r7, #4]
 8068fec:	b2db      	uxtb	r3, r3
 8068fee:	461a      	mov	r2, r3
 8068ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8069064 <LL_USART_SetBaudRate+0x9c>)
 8068ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8068ff6:	68ba      	ldr	r2, [r7, #8]
 8068ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8068ffc:	005a      	lsls	r2, r3, #1
 8068ffe:	6a3b      	ldr	r3, [r7, #32]
 8069000:	085b      	lsrs	r3, r3, #1
 8069002:	441a      	add	r2, r3
 8069004:	6a3b      	ldr	r3, [r7, #32]
 8069006:	fbb2 f3f3 	udiv	r3, r2, r3
 806900a:	b29b      	uxth	r3, r3
 806900c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 806900e:	697a      	ldr	r2, [r7, #20]
 8069010:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8069014:	4013      	ands	r3, r2
 8069016:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8069018:	697b      	ldr	r3, [r7, #20]
 806901a:	085b      	lsrs	r3, r3, #1
 806901c:	b29b      	uxth	r3, r3
 806901e:	f003 0307 	and.w	r3, r3, #7
 8069022:	693a      	ldr	r2, [r7, #16]
 8069024:	4313      	orrs	r3, r2
 8069026:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8069028:	68fb      	ldr	r3, [r7, #12]
 806902a:	693a      	ldr	r2, [r7, #16]
 806902c:	60da      	str	r2, [r3, #12]
}
 806902e:	e012      	b.n	8069056 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8069030:	687b      	ldr	r3, [r7, #4]
 8069032:	b2db      	uxtb	r3, r3
 8069034:	461a      	mov	r2, r3
 8069036:	4b0b      	ldr	r3, [pc, #44]	@ (8069064 <LL_USART_SetBaudRate+0x9c>)
 8069038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 806903c:	68ba      	ldr	r2, [r7, #8]
 806903e:	fbb2 f2f3 	udiv	r2, r2, r3
 8069042:	6a3b      	ldr	r3, [r7, #32]
 8069044:	085b      	lsrs	r3, r3, #1
 8069046:	441a      	add	r2, r3
 8069048:	6a3b      	ldr	r3, [r7, #32]
 806904a:	fbb2 f3f3 	udiv	r3, r2, r3
 806904e:	b29b      	uxth	r3, r3
 8069050:	461a      	mov	r2, r3
 8069052:	68fb      	ldr	r3, [r7, #12]
 8069054:	60da      	str	r2, [r3, #12]
}
 8069056:	bf00      	nop
 8069058:	371c      	adds	r7, #28
 806905a:	46bd      	mov	sp, r7
 806905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069060:	4770      	bx	lr
 8069062:	bf00      	nop
 8069064:	08072520 	.word	0x08072520

08069068 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8069068:	b580      	push	{r7, lr}
 806906a:	b086      	sub	sp, #24
 806906c:	af02      	add	r7, sp, #8
 806906e:	6078      	str	r0, [r7, #4]
 8069070:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8069072:	2301      	movs	r3, #1
 8069074:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8069076:	2300      	movs	r3, #0
 8069078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 806907a:	6878      	ldr	r0, [r7, #4]
 806907c:	f7ff ff56 	bl	8068f2c <LL_USART_IsEnabled>
 8069080:	4603      	mov	r3, r0
 8069082:	2b00      	cmp	r3, #0
 8069084:	d17f      	bne.n	8069186 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8069086:	687b      	ldr	r3, [r7, #4]
 8069088:	681a      	ldr	r2, [r3, #0]
 806908a:	4b41      	ldr	r3, [pc, #260]	@ (8069190 <LL_USART_Init+0x128>)
 806908c:	4013      	ands	r3, r2
 806908e:	683a      	ldr	r2, [r7, #0]
 8069090:	6891      	ldr	r1, [r2, #8]
 8069092:	683a      	ldr	r2, [r7, #0]
 8069094:	6912      	ldr	r2, [r2, #16]
 8069096:	4311      	orrs	r1, r2
 8069098:	683a      	ldr	r2, [r7, #0]
 806909a:	6952      	ldr	r2, [r2, #20]
 806909c:	4311      	orrs	r1, r2
 806909e:	683a      	ldr	r2, [r7, #0]
 80690a0:	69d2      	ldr	r2, [r2, #28]
 80690a2:	430a      	orrs	r2, r1
 80690a4:	431a      	orrs	r2, r3
 80690a6:	687b      	ldr	r3, [r7, #4]
 80690a8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80690aa:	683b      	ldr	r3, [r7, #0]
 80690ac:	68db      	ldr	r3, [r3, #12]
 80690ae:	4619      	mov	r1, r3
 80690b0:	6878      	ldr	r0, [r7, #4]
 80690b2:	f7ff ff62 	bl	8068f7a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80690b6:	683b      	ldr	r3, [r7, #0]
 80690b8:	699b      	ldr	r3, [r3, #24]
 80690ba:	4619      	mov	r1, r3
 80690bc:	6878      	ldr	r0, [r7, #4]
 80690be:	f7ff ff6f 	bl	8068fa0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80690c2:	687b      	ldr	r3, [r7, #4]
 80690c4:	4a33      	ldr	r2, [pc, #204]	@ (8069194 <LL_USART_Init+0x12c>)
 80690c6:	4293      	cmp	r3, r2
 80690c8:	d104      	bne.n	80690d4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80690ca:	4833      	ldr	r0, [pc, #204]	@ (8069198 <LL_USART_Init+0x130>)
 80690cc:	f7fe ff58 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 80690d0:	60b8      	str	r0, [r7, #8]
 80690d2:	e03d      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 80690d4:	687b      	ldr	r3, [r7, #4]
 80690d6:	4a31      	ldr	r2, [pc, #196]	@ (806919c <LL_USART_Init+0x134>)
 80690d8:	4293      	cmp	r3, r2
 80690da:	d104      	bne.n	80690e6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80690dc:	4830      	ldr	r0, [pc, #192]	@ (80691a0 <LL_USART_Init+0x138>)
 80690de:	f7fe ff4f 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 80690e2:	60b8      	str	r0, [r7, #8]
 80690e4:	e034      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 80690e6:	687b      	ldr	r3, [r7, #4]
 80690e8:	4a2e      	ldr	r2, [pc, #184]	@ (80691a4 <LL_USART_Init+0x13c>)
 80690ea:	4293      	cmp	r3, r2
 80690ec:	d104      	bne.n	80690f8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80690ee:	482c      	ldr	r0, [pc, #176]	@ (80691a0 <LL_USART_Init+0x138>)
 80690f0:	f7fe ff46 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 80690f4:	60b8      	str	r0, [r7, #8]
 80690f6:	e02b      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 80690f8:	687b      	ldr	r3, [r7, #4]
 80690fa:	4a2b      	ldr	r2, [pc, #172]	@ (80691a8 <LL_USART_Init+0x140>)
 80690fc:	4293      	cmp	r3, r2
 80690fe:	d104      	bne.n	806910a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8069100:	4827      	ldr	r0, [pc, #156]	@ (80691a0 <LL_USART_Init+0x138>)
 8069102:	f7fe ff3d 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 8069106:	60b8      	str	r0, [r7, #8]
 8069108:	e022      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 806910a:	687b      	ldr	r3, [r7, #4]
 806910c:	4a27      	ldr	r2, [pc, #156]	@ (80691ac <LL_USART_Init+0x144>)
 806910e:	4293      	cmp	r3, r2
 8069110:	d104      	bne.n	806911c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8069112:	4823      	ldr	r0, [pc, #140]	@ (80691a0 <LL_USART_Init+0x138>)
 8069114:	f7fe ff34 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 8069118:	60b8      	str	r0, [r7, #8]
 806911a:	e019      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 806911c:	687b      	ldr	r3, [r7, #4]
 806911e:	4a24      	ldr	r2, [pc, #144]	@ (80691b0 <LL_USART_Init+0x148>)
 8069120:	4293      	cmp	r3, r2
 8069122:	d104      	bne.n	806912e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8069124:	481c      	ldr	r0, [pc, #112]	@ (8069198 <LL_USART_Init+0x130>)
 8069126:	f7fe ff2b 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 806912a:	60b8      	str	r0, [r7, #8]
 806912c:	e010      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 806912e:	687b      	ldr	r3, [r7, #4]
 8069130:	4a20      	ldr	r2, [pc, #128]	@ (80691b4 <LL_USART_Init+0x14c>)
 8069132:	4293      	cmp	r3, r2
 8069134:	d104      	bne.n	8069140 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8069136:	481a      	ldr	r0, [pc, #104]	@ (80691a0 <LL_USART_Init+0x138>)
 8069138:	f7fe ff22 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 806913c:	60b8      	str	r0, [r7, #8]
 806913e:	e007      	b.n	8069150 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8069140:	687b      	ldr	r3, [r7, #4]
 8069142:	4a1d      	ldr	r2, [pc, #116]	@ (80691b8 <LL_USART_Init+0x150>)
 8069144:	4293      	cmp	r3, r2
 8069146:	d103      	bne.n	8069150 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8069148:	4815      	ldr	r0, [pc, #84]	@ (80691a0 <LL_USART_Init+0x138>)
 806914a:	f7fe ff19 	bl	8067f80 <LL_RCC_GetUSARTClockFreq>
 806914e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8069150:	68bb      	ldr	r3, [r7, #8]
 8069152:	2b00      	cmp	r3, #0
 8069154:	d011      	beq.n	806917a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8069156:	683b      	ldr	r3, [r7, #0]
 8069158:	685b      	ldr	r3, [r3, #4]
 806915a:	2b00      	cmp	r3, #0
 806915c:	d00d      	beq.n	806917a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 806915e:	2300      	movs	r3, #0
 8069160:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8069162:	683b      	ldr	r3, [r7, #0]
 8069164:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8069166:	683b      	ldr	r3, [r7, #0]
 8069168:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 806916a:	683b      	ldr	r3, [r7, #0]
 806916c:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 806916e:	9300      	str	r3, [sp, #0]
 8069170:	460b      	mov	r3, r1
 8069172:	68b9      	ldr	r1, [r7, #8]
 8069174:	6878      	ldr	r0, [r7, #4]
 8069176:	f7ff ff27 	bl	8068fc8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 806917a:	683b      	ldr	r3, [r7, #0]
 806917c:	681b      	ldr	r3, [r3, #0]
 806917e:	4619      	mov	r1, r3
 8069180:	6878      	ldr	r0, [r7, #4]
 8069182:	f7ff fee6 	bl	8068f52 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8069186:	7bfb      	ldrb	r3, [r7, #15]
}
 8069188:	4618      	mov	r0, r3
 806918a:	3710      	adds	r7, #16
 806918c:	46bd      	mov	sp, r7
 806918e:	bd80      	pop	{r7, pc}
 8069190:	efff69f3 	.word	0xefff69f3
 8069194:	40011000 	.word	0x40011000
 8069198:	07000308 	.word	0x07000308
 806919c:	40004400 	.word	0x40004400
 80691a0:	07000008 	.word	0x07000008
 80691a4:	40004800 	.word	0x40004800
 80691a8:	40004c00 	.word	0x40004c00
 80691ac:	40005000 	.word	0x40005000
 80691b0:	40011400 	.word	0x40011400
 80691b4:	40007800 	.word	0x40007800
 80691b8:	40007c00 	.word	0x40007c00

080691bc <atoi>:
 80691bc:	220a      	movs	r2, #10
 80691be:	2100      	movs	r1, #0
 80691c0:	f000 b8b8 	b.w	8069334 <strtol>

080691c4 <rand>:
 80691c4:	4b16      	ldr	r3, [pc, #88]	@ (8069220 <rand+0x5c>)
 80691c6:	b510      	push	{r4, lr}
 80691c8:	681c      	ldr	r4, [r3, #0]
 80691ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80691cc:	b9b3      	cbnz	r3, 80691fc <rand+0x38>
 80691ce:	2018      	movs	r0, #24
 80691d0:	f000 fc2a 	bl	8069a28 <malloc>
 80691d4:	4602      	mov	r2, r0
 80691d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80691d8:	b920      	cbnz	r0, 80691e4 <rand+0x20>
 80691da:	4b12      	ldr	r3, [pc, #72]	@ (8069224 <rand+0x60>)
 80691dc:	4812      	ldr	r0, [pc, #72]	@ (8069228 <rand+0x64>)
 80691de:	2152      	movs	r1, #82	@ 0x52
 80691e0:	f000 fbba 	bl	8069958 <__assert_func>
 80691e4:	4911      	ldr	r1, [pc, #68]	@ (806922c <rand+0x68>)
 80691e6:	4b12      	ldr	r3, [pc, #72]	@ (8069230 <rand+0x6c>)
 80691e8:	e9c0 1300 	strd	r1, r3, [r0]
 80691ec:	4b11      	ldr	r3, [pc, #68]	@ (8069234 <rand+0x70>)
 80691ee:	6083      	str	r3, [r0, #8]
 80691f0:	230b      	movs	r3, #11
 80691f2:	8183      	strh	r3, [r0, #12]
 80691f4:	2100      	movs	r1, #0
 80691f6:	2001      	movs	r0, #1
 80691f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80691fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80691fe:	480e      	ldr	r0, [pc, #56]	@ (8069238 <rand+0x74>)
 8069200:	690b      	ldr	r3, [r1, #16]
 8069202:	694c      	ldr	r4, [r1, #20]
 8069204:	4a0d      	ldr	r2, [pc, #52]	@ (806923c <rand+0x78>)
 8069206:	4358      	muls	r0, r3
 8069208:	fb02 0004 	mla	r0, r2, r4, r0
 806920c:	fba3 3202 	umull	r3, r2, r3, r2
 8069210:	3301      	adds	r3, #1
 8069212:	eb40 0002 	adc.w	r0, r0, r2
 8069216:	e9c1 3004 	strd	r3, r0, [r1, #16]
 806921a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 806921e:	bd10      	pop	{r4, pc}
 8069220:	24014a18 	.word	0x24014a18
 8069224:	08072550 	.word	0x08072550
 8069228:	08072567 	.word	0x08072567
 806922c:	abcd330e 	.word	0xabcd330e
 8069230:	e66d1234 	.word	0xe66d1234
 8069234:	0005deec 	.word	0x0005deec
 8069238:	5851f42d 	.word	0x5851f42d
 806923c:	4c957f2d 	.word	0x4c957f2d

08069240 <_strtol_l.isra.0>:
 8069240:	2b24      	cmp	r3, #36	@ 0x24
 8069242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8069246:	4686      	mov	lr, r0
 8069248:	4690      	mov	r8, r2
 806924a:	d801      	bhi.n	8069250 <_strtol_l.isra.0+0x10>
 806924c:	2b01      	cmp	r3, #1
 806924e:	d106      	bne.n	806925e <_strtol_l.isra.0+0x1e>
 8069250:	f000 fb46 	bl	80698e0 <__errno>
 8069254:	2316      	movs	r3, #22
 8069256:	6003      	str	r3, [r0, #0]
 8069258:	2000      	movs	r0, #0
 806925a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806925e:	4834      	ldr	r0, [pc, #208]	@ (8069330 <_strtol_l.isra.0+0xf0>)
 8069260:	460d      	mov	r5, r1
 8069262:	462a      	mov	r2, r5
 8069264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8069268:	5d06      	ldrb	r6, [r0, r4]
 806926a:	f016 0608 	ands.w	r6, r6, #8
 806926e:	d1f8      	bne.n	8069262 <_strtol_l.isra.0+0x22>
 8069270:	2c2d      	cmp	r4, #45	@ 0x2d
 8069272:	d110      	bne.n	8069296 <_strtol_l.isra.0+0x56>
 8069274:	782c      	ldrb	r4, [r5, #0]
 8069276:	2601      	movs	r6, #1
 8069278:	1c95      	adds	r5, r2, #2
 806927a:	f033 0210 	bics.w	r2, r3, #16
 806927e:	d115      	bne.n	80692ac <_strtol_l.isra.0+0x6c>
 8069280:	2c30      	cmp	r4, #48	@ 0x30
 8069282:	d10d      	bne.n	80692a0 <_strtol_l.isra.0+0x60>
 8069284:	782a      	ldrb	r2, [r5, #0]
 8069286:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 806928a:	2a58      	cmp	r2, #88	@ 0x58
 806928c:	d108      	bne.n	80692a0 <_strtol_l.isra.0+0x60>
 806928e:	786c      	ldrb	r4, [r5, #1]
 8069290:	3502      	adds	r5, #2
 8069292:	2310      	movs	r3, #16
 8069294:	e00a      	b.n	80692ac <_strtol_l.isra.0+0x6c>
 8069296:	2c2b      	cmp	r4, #43	@ 0x2b
 8069298:	bf04      	itt	eq
 806929a:	782c      	ldrbeq	r4, [r5, #0]
 806929c:	1c95      	addeq	r5, r2, #2
 806929e:	e7ec      	b.n	806927a <_strtol_l.isra.0+0x3a>
 80692a0:	2b00      	cmp	r3, #0
 80692a2:	d1f6      	bne.n	8069292 <_strtol_l.isra.0+0x52>
 80692a4:	2c30      	cmp	r4, #48	@ 0x30
 80692a6:	bf14      	ite	ne
 80692a8:	230a      	movne	r3, #10
 80692aa:	2308      	moveq	r3, #8
 80692ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80692b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80692b4:	2200      	movs	r2, #0
 80692b6:	fbbc f9f3 	udiv	r9, ip, r3
 80692ba:	4610      	mov	r0, r2
 80692bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80692c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80692c4:	2f09      	cmp	r7, #9
 80692c6:	d80f      	bhi.n	80692e8 <_strtol_l.isra.0+0xa8>
 80692c8:	463c      	mov	r4, r7
 80692ca:	42a3      	cmp	r3, r4
 80692cc:	dd1b      	ble.n	8069306 <_strtol_l.isra.0+0xc6>
 80692ce:	1c57      	adds	r7, r2, #1
 80692d0:	d007      	beq.n	80692e2 <_strtol_l.isra.0+0xa2>
 80692d2:	4581      	cmp	r9, r0
 80692d4:	d314      	bcc.n	8069300 <_strtol_l.isra.0+0xc0>
 80692d6:	d101      	bne.n	80692dc <_strtol_l.isra.0+0x9c>
 80692d8:	45a2      	cmp	sl, r4
 80692da:	db11      	blt.n	8069300 <_strtol_l.isra.0+0xc0>
 80692dc:	fb00 4003 	mla	r0, r0, r3, r4
 80692e0:	2201      	movs	r2, #1
 80692e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80692e6:	e7eb      	b.n	80692c0 <_strtol_l.isra.0+0x80>
 80692e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80692ec:	2f19      	cmp	r7, #25
 80692ee:	d801      	bhi.n	80692f4 <_strtol_l.isra.0+0xb4>
 80692f0:	3c37      	subs	r4, #55	@ 0x37
 80692f2:	e7ea      	b.n	80692ca <_strtol_l.isra.0+0x8a>
 80692f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80692f8:	2f19      	cmp	r7, #25
 80692fa:	d804      	bhi.n	8069306 <_strtol_l.isra.0+0xc6>
 80692fc:	3c57      	subs	r4, #87	@ 0x57
 80692fe:	e7e4      	b.n	80692ca <_strtol_l.isra.0+0x8a>
 8069300:	f04f 32ff 	mov.w	r2, #4294967295
 8069304:	e7ed      	b.n	80692e2 <_strtol_l.isra.0+0xa2>
 8069306:	1c53      	adds	r3, r2, #1
 8069308:	d108      	bne.n	806931c <_strtol_l.isra.0+0xdc>
 806930a:	2322      	movs	r3, #34	@ 0x22
 806930c:	f8ce 3000 	str.w	r3, [lr]
 8069310:	4660      	mov	r0, ip
 8069312:	f1b8 0f00 	cmp.w	r8, #0
 8069316:	d0a0      	beq.n	806925a <_strtol_l.isra.0+0x1a>
 8069318:	1e69      	subs	r1, r5, #1
 806931a:	e006      	b.n	806932a <_strtol_l.isra.0+0xea>
 806931c:	b106      	cbz	r6, 8069320 <_strtol_l.isra.0+0xe0>
 806931e:	4240      	negs	r0, r0
 8069320:	f1b8 0f00 	cmp.w	r8, #0
 8069324:	d099      	beq.n	806925a <_strtol_l.isra.0+0x1a>
 8069326:	2a00      	cmp	r2, #0
 8069328:	d1f6      	bne.n	8069318 <_strtol_l.isra.0+0xd8>
 806932a:	f8c8 1000 	str.w	r1, [r8]
 806932e:	e794      	b.n	806925a <_strtol_l.isra.0+0x1a>
 8069330:	0807262f 	.word	0x0807262f

08069334 <strtol>:
 8069334:	4613      	mov	r3, r2
 8069336:	460a      	mov	r2, r1
 8069338:	4601      	mov	r1, r0
 806933a:	4802      	ldr	r0, [pc, #8]	@ (8069344 <strtol+0x10>)
 806933c:	6800      	ldr	r0, [r0, #0]
 806933e:	f7ff bf7f 	b.w	8069240 <_strtol_l.isra.0>
 8069342:	bf00      	nop
 8069344:	24014a18 	.word	0x24014a18

08069348 <_strtoul_l.isra.0>:
 8069348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 806934c:	4e34      	ldr	r6, [pc, #208]	@ (8069420 <_strtoul_l.isra.0+0xd8>)
 806934e:	4686      	mov	lr, r0
 8069350:	460d      	mov	r5, r1
 8069352:	4628      	mov	r0, r5
 8069354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8069358:	5d37      	ldrb	r7, [r6, r4]
 806935a:	f017 0708 	ands.w	r7, r7, #8
 806935e:	d1f8      	bne.n	8069352 <_strtoul_l.isra.0+0xa>
 8069360:	2c2d      	cmp	r4, #45	@ 0x2d
 8069362:	d110      	bne.n	8069386 <_strtoul_l.isra.0+0x3e>
 8069364:	782c      	ldrb	r4, [r5, #0]
 8069366:	2701      	movs	r7, #1
 8069368:	1c85      	adds	r5, r0, #2
 806936a:	f033 0010 	bics.w	r0, r3, #16
 806936e:	d115      	bne.n	806939c <_strtoul_l.isra.0+0x54>
 8069370:	2c30      	cmp	r4, #48	@ 0x30
 8069372:	d10d      	bne.n	8069390 <_strtoul_l.isra.0+0x48>
 8069374:	7828      	ldrb	r0, [r5, #0]
 8069376:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 806937a:	2858      	cmp	r0, #88	@ 0x58
 806937c:	d108      	bne.n	8069390 <_strtoul_l.isra.0+0x48>
 806937e:	786c      	ldrb	r4, [r5, #1]
 8069380:	3502      	adds	r5, #2
 8069382:	2310      	movs	r3, #16
 8069384:	e00a      	b.n	806939c <_strtoul_l.isra.0+0x54>
 8069386:	2c2b      	cmp	r4, #43	@ 0x2b
 8069388:	bf04      	itt	eq
 806938a:	782c      	ldrbeq	r4, [r5, #0]
 806938c:	1c85      	addeq	r5, r0, #2
 806938e:	e7ec      	b.n	806936a <_strtoul_l.isra.0+0x22>
 8069390:	2b00      	cmp	r3, #0
 8069392:	d1f6      	bne.n	8069382 <_strtoul_l.isra.0+0x3a>
 8069394:	2c30      	cmp	r4, #48	@ 0x30
 8069396:	bf14      	ite	ne
 8069398:	230a      	movne	r3, #10
 806939a:	2308      	moveq	r3, #8
 806939c:	f04f 38ff 	mov.w	r8, #4294967295
 80693a0:	2600      	movs	r6, #0
 80693a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80693a6:	fb03 f908 	mul.w	r9, r3, r8
 80693aa:	ea6f 0909 	mvn.w	r9, r9
 80693ae:	4630      	mov	r0, r6
 80693b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80693b4:	f1bc 0f09 	cmp.w	ip, #9
 80693b8:	d810      	bhi.n	80693dc <_strtoul_l.isra.0+0x94>
 80693ba:	4664      	mov	r4, ip
 80693bc:	42a3      	cmp	r3, r4
 80693be:	dd1e      	ble.n	80693fe <_strtoul_l.isra.0+0xb6>
 80693c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80693c4:	d007      	beq.n	80693d6 <_strtoul_l.isra.0+0x8e>
 80693c6:	4580      	cmp	r8, r0
 80693c8:	d316      	bcc.n	80693f8 <_strtoul_l.isra.0+0xb0>
 80693ca:	d101      	bne.n	80693d0 <_strtoul_l.isra.0+0x88>
 80693cc:	45a1      	cmp	r9, r4
 80693ce:	db13      	blt.n	80693f8 <_strtoul_l.isra.0+0xb0>
 80693d0:	fb00 4003 	mla	r0, r0, r3, r4
 80693d4:	2601      	movs	r6, #1
 80693d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80693da:	e7e9      	b.n	80693b0 <_strtoul_l.isra.0+0x68>
 80693dc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80693e0:	f1bc 0f19 	cmp.w	ip, #25
 80693e4:	d801      	bhi.n	80693ea <_strtoul_l.isra.0+0xa2>
 80693e6:	3c37      	subs	r4, #55	@ 0x37
 80693e8:	e7e8      	b.n	80693bc <_strtoul_l.isra.0+0x74>
 80693ea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80693ee:	f1bc 0f19 	cmp.w	ip, #25
 80693f2:	d804      	bhi.n	80693fe <_strtoul_l.isra.0+0xb6>
 80693f4:	3c57      	subs	r4, #87	@ 0x57
 80693f6:	e7e1      	b.n	80693bc <_strtoul_l.isra.0+0x74>
 80693f8:	f04f 36ff 	mov.w	r6, #4294967295
 80693fc:	e7eb      	b.n	80693d6 <_strtoul_l.isra.0+0x8e>
 80693fe:	1c73      	adds	r3, r6, #1
 8069400:	d106      	bne.n	8069410 <_strtoul_l.isra.0+0xc8>
 8069402:	2322      	movs	r3, #34	@ 0x22
 8069404:	f8ce 3000 	str.w	r3, [lr]
 8069408:	4630      	mov	r0, r6
 806940a:	b932      	cbnz	r2, 806941a <_strtoul_l.isra.0+0xd2>
 806940c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8069410:	b107      	cbz	r7, 8069414 <_strtoul_l.isra.0+0xcc>
 8069412:	4240      	negs	r0, r0
 8069414:	2a00      	cmp	r2, #0
 8069416:	d0f9      	beq.n	806940c <_strtoul_l.isra.0+0xc4>
 8069418:	b106      	cbz	r6, 806941c <_strtoul_l.isra.0+0xd4>
 806941a:	1e69      	subs	r1, r5, #1
 806941c:	6011      	str	r1, [r2, #0]
 806941e:	e7f5      	b.n	806940c <_strtoul_l.isra.0+0xc4>
 8069420:	0807262f 	.word	0x0807262f

08069424 <strtoul>:
 8069424:	4613      	mov	r3, r2
 8069426:	460a      	mov	r2, r1
 8069428:	4601      	mov	r1, r0
 806942a:	4802      	ldr	r0, [pc, #8]	@ (8069434 <strtoul+0x10>)
 806942c:	6800      	ldr	r0, [r0, #0]
 806942e:	f7ff bf8b 	b.w	8069348 <_strtoul_l.isra.0>
 8069432:	bf00      	nop
 8069434:	24014a18 	.word	0x24014a18

08069438 <std>:
 8069438:	2300      	movs	r3, #0
 806943a:	b510      	push	{r4, lr}
 806943c:	4604      	mov	r4, r0
 806943e:	e9c0 3300 	strd	r3, r3, [r0]
 8069442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8069446:	6083      	str	r3, [r0, #8]
 8069448:	8181      	strh	r1, [r0, #12]
 806944a:	6643      	str	r3, [r0, #100]	@ 0x64
 806944c:	81c2      	strh	r2, [r0, #14]
 806944e:	6183      	str	r3, [r0, #24]
 8069450:	4619      	mov	r1, r3
 8069452:	2208      	movs	r2, #8
 8069454:	305c      	adds	r0, #92	@ 0x5c
 8069456:	f000 f9c5 	bl	80697e4 <memset>
 806945a:	4b0d      	ldr	r3, [pc, #52]	@ (8069490 <std+0x58>)
 806945c:	6263      	str	r3, [r4, #36]	@ 0x24
 806945e:	4b0d      	ldr	r3, [pc, #52]	@ (8069494 <std+0x5c>)
 8069460:	62a3      	str	r3, [r4, #40]	@ 0x28
 8069462:	4b0d      	ldr	r3, [pc, #52]	@ (8069498 <std+0x60>)
 8069464:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8069466:	4b0d      	ldr	r3, [pc, #52]	@ (806949c <std+0x64>)
 8069468:	6323      	str	r3, [r4, #48]	@ 0x30
 806946a:	4b0d      	ldr	r3, [pc, #52]	@ (80694a0 <std+0x68>)
 806946c:	6224      	str	r4, [r4, #32]
 806946e:	429c      	cmp	r4, r3
 8069470:	d006      	beq.n	8069480 <std+0x48>
 8069472:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8069476:	4294      	cmp	r4, r2
 8069478:	d002      	beq.n	8069480 <std+0x48>
 806947a:	33d0      	adds	r3, #208	@ 0xd0
 806947c:	429c      	cmp	r4, r3
 806947e:	d105      	bne.n	806948c <std+0x54>
 8069480:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8069484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8069488:	f000 ba54 	b.w	8069934 <__retarget_lock_init_recursive>
 806948c:	bd10      	pop	{r4, pc}
 806948e:	bf00      	nop
 8069490:	08069691 	.word	0x08069691
 8069494:	080696b3 	.word	0x080696b3
 8069498:	080696eb 	.word	0x080696eb
 806949c:	0806970f 	.word	0x0806970f
 80694a0:	2406e988 	.word	0x2406e988

080694a4 <stdio_exit_handler>:
 80694a4:	4a02      	ldr	r2, [pc, #8]	@ (80694b0 <stdio_exit_handler+0xc>)
 80694a6:	4903      	ldr	r1, [pc, #12]	@ (80694b4 <stdio_exit_handler+0x10>)
 80694a8:	4803      	ldr	r0, [pc, #12]	@ (80694b8 <stdio_exit_handler+0x14>)
 80694aa:	f000 b869 	b.w	8069580 <_fwalk_sglue>
 80694ae:	bf00      	nop
 80694b0:	24014a0c 	.word	0x24014a0c
 80694b4:	0806a4e9 	.word	0x0806a4e9
 80694b8:	24014a1c 	.word	0x24014a1c

080694bc <cleanup_stdio>:
 80694bc:	6841      	ldr	r1, [r0, #4]
 80694be:	4b0c      	ldr	r3, [pc, #48]	@ (80694f0 <cleanup_stdio+0x34>)
 80694c0:	4299      	cmp	r1, r3
 80694c2:	b510      	push	{r4, lr}
 80694c4:	4604      	mov	r4, r0
 80694c6:	d001      	beq.n	80694cc <cleanup_stdio+0x10>
 80694c8:	f001 f80e 	bl	806a4e8 <_fflush_r>
 80694cc:	68a1      	ldr	r1, [r4, #8]
 80694ce:	4b09      	ldr	r3, [pc, #36]	@ (80694f4 <cleanup_stdio+0x38>)
 80694d0:	4299      	cmp	r1, r3
 80694d2:	d002      	beq.n	80694da <cleanup_stdio+0x1e>
 80694d4:	4620      	mov	r0, r4
 80694d6:	f001 f807 	bl	806a4e8 <_fflush_r>
 80694da:	68e1      	ldr	r1, [r4, #12]
 80694dc:	4b06      	ldr	r3, [pc, #24]	@ (80694f8 <cleanup_stdio+0x3c>)
 80694de:	4299      	cmp	r1, r3
 80694e0:	d004      	beq.n	80694ec <cleanup_stdio+0x30>
 80694e2:	4620      	mov	r0, r4
 80694e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80694e8:	f000 bffe 	b.w	806a4e8 <_fflush_r>
 80694ec:	bd10      	pop	{r4, pc}
 80694ee:	bf00      	nop
 80694f0:	2406e988 	.word	0x2406e988
 80694f4:	2406e9f0 	.word	0x2406e9f0
 80694f8:	2406ea58 	.word	0x2406ea58

080694fc <global_stdio_init.part.0>:
 80694fc:	b510      	push	{r4, lr}
 80694fe:	4b0b      	ldr	r3, [pc, #44]	@ (806952c <global_stdio_init.part.0+0x30>)
 8069500:	4c0b      	ldr	r4, [pc, #44]	@ (8069530 <global_stdio_init.part.0+0x34>)
 8069502:	4a0c      	ldr	r2, [pc, #48]	@ (8069534 <global_stdio_init.part.0+0x38>)
 8069504:	601a      	str	r2, [r3, #0]
 8069506:	4620      	mov	r0, r4
 8069508:	2200      	movs	r2, #0
 806950a:	2104      	movs	r1, #4
 806950c:	f7ff ff94 	bl	8069438 <std>
 8069510:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8069514:	2201      	movs	r2, #1
 8069516:	2109      	movs	r1, #9
 8069518:	f7ff ff8e 	bl	8069438 <std>
 806951c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8069520:	2202      	movs	r2, #2
 8069522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8069526:	2112      	movs	r1, #18
 8069528:	f7ff bf86 	b.w	8069438 <std>
 806952c:	2406eac0 	.word	0x2406eac0
 8069530:	2406e988 	.word	0x2406e988
 8069534:	080694a5 	.word	0x080694a5

08069538 <__sfp_lock_acquire>:
 8069538:	4801      	ldr	r0, [pc, #4]	@ (8069540 <__sfp_lock_acquire+0x8>)
 806953a:	f000 b9fc 	b.w	8069936 <__retarget_lock_acquire_recursive>
 806953e:	bf00      	nop
 8069540:	2406eac9 	.word	0x2406eac9

08069544 <__sfp_lock_release>:
 8069544:	4801      	ldr	r0, [pc, #4]	@ (806954c <__sfp_lock_release+0x8>)
 8069546:	f000 b9f7 	b.w	8069938 <__retarget_lock_release_recursive>
 806954a:	bf00      	nop
 806954c:	2406eac9 	.word	0x2406eac9

08069550 <__sinit>:
 8069550:	b510      	push	{r4, lr}
 8069552:	4604      	mov	r4, r0
 8069554:	f7ff fff0 	bl	8069538 <__sfp_lock_acquire>
 8069558:	6a23      	ldr	r3, [r4, #32]
 806955a:	b11b      	cbz	r3, 8069564 <__sinit+0x14>
 806955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8069560:	f7ff bff0 	b.w	8069544 <__sfp_lock_release>
 8069564:	4b04      	ldr	r3, [pc, #16]	@ (8069578 <__sinit+0x28>)
 8069566:	6223      	str	r3, [r4, #32]
 8069568:	4b04      	ldr	r3, [pc, #16]	@ (806957c <__sinit+0x2c>)
 806956a:	681b      	ldr	r3, [r3, #0]
 806956c:	2b00      	cmp	r3, #0
 806956e:	d1f5      	bne.n	806955c <__sinit+0xc>
 8069570:	f7ff ffc4 	bl	80694fc <global_stdio_init.part.0>
 8069574:	e7f2      	b.n	806955c <__sinit+0xc>
 8069576:	bf00      	nop
 8069578:	080694bd 	.word	0x080694bd
 806957c:	2406eac0 	.word	0x2406eac0

08069580 <_fwalk_sglue>:
 8069580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8069584:	4607      	mov	r7, r0
 8069586:	4688      	mov	r8, r1
 8069588:	4614      	mov	r4, r2
 806958a:	2600      	movs	r6, #0
 806958c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8069590:	f1b9 0901 	subs.w	r9, r9, #1
 8069594:	d505      	bpl.n	80695a2 <_fwalk_sglue+0x22>
 8069596:	6824      	ldr	r4, [r4, #0]
 8069598:	2c00      	cmp	r4, #0
 806959a:	d1f7      	bne.n	806958c <_fwalk_sglue+0xc>
 806959c:	4630      	mov	r0, r6
 806959e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80695a2:	89ab      	ldrh	r3, [r5, #12]
 80695a4:	2b01      	cmp	r3, #1
 80695a6:	d907      	bls.n	80695b8 <_fwalk_sglue+0x38>
 80695a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80695ac:	3301      	adds	r3, #1
 80695ae:	d003      	beq.n	80695b8 <_fwalk_sglue+0x38>
 80695b0:	4629      	mov	r1, r5
 80695b2:	4638      	mov	r0, r7
 80695b4:	47c0      	blx	r8
 80695b6:	4306      	orrs	r6, r0
 80695b8:	3568      	adds	r5, #104	@ 0x68
 80695ba:	e7e9      	b.n	8069590 <_fwalk_sglue+0x10>

080695bc <iprintf>:
 80695bc:	b40f      	push	{r0, r1, r2, r3}
 80695be:	b507      	push	{r0, r1, r2, lr}
 80695c0:	4906      	ldr	r1, [pc, #24]	@ (80695dc <iprintf+0x20>)
 80695c2:	ab04      	add	r3, sp, #16
 80695c4:	6808      	ldr	r0, [r1, #0]
 80695c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80695ca:	6881      	ldr	r1, [r0, #8]
 80695cc:	9301      	str	r3, [sp, #4]
 80695ce:	f000 fc63 	bl	8069e98 <_vfiprintf_r>
 80695d2:	b003      	add	sp, #12
 80695d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80695d8:	b004      	add	sp, #16
 80695da:	4770      	bx	lr
 80695dc:	24014a18 	.word	0x24014a18

080695e0 <sniprintf>:
 80695e0:	b40c      	push	{r2, r3}
 80695e2:	b530      	push	{r4, r5, lr}
 80695e4:	4b18      	ldr	r3, [pc, #96]	@ (8069648 <sniprintf+0x68>)
 80695e6:	1e0c      	subs	r4, r1, #0
 80695e8:	681d      	ldr	r5, [r3, #0]
 80695ea:	b09d      	sub	sp, #116	@ 0x74
 80695ec:	da08      	bge.n	8069600 <sniprintf+0x20>
 80695ee:	238b      	movs	r3, #139	@ 0x8b
 80695f0:	602b      	str	r3, [r5, #0]
 80695f2:	f04f 30ff 	mov.w	r0, #4294967295
 80695f6:	b01d      	add	sp, #116	@ 0x74
 80695f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80695fc:	b002      	add	sp, #8
 80695fe:	4770      	bx	lr
 8069600:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8069604:	f8ad 3014 	strh.w	r3, [sp, #20]
 8069608:	f04f 0300 	mov.w	r3, #0
 806960c:	931b      	str	r3, [sp, #108]	@ 0x6c
 806960e:	bf14      	ite	ne
 8069610:	f104 33ff 	addne.w	r3, r4, #4294967295
 8069614:	4623      	moveq	r3, r4
 8069616:	9304      	str	r3, [sp, #16]
 8069618:	9307      	str	r3, [sp, #28]
 806961a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 806961e:	9002      	str	r0, [sp, #8]
 8069620:	9006      	str	r0, [sp, #24]
 8069622:	f8ad 3016 	strh.w	r3, [sp, #22]
 8069626:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8069628:	ab21      	add	r3, sp, #132	@ 0x84
 806962a:	a902      	add	r1, sp, #8
 806962c:	4628      	mov	r0, r5
 806962e:	9301      	str	r3, [sp, #4]
 8069630:	f000 fb0c 	bl	8069c4c <_svfiprintf_r>
 8069634:	1c43      	adds	r3, r0, #1
 8069636:	bfbc      	itt	lt
 8069638:	238b      	movlt	r3, #139	@ 0x8b
 806963a:	602b      	strlt	r3, [r5, #0]
 806963c:	2c00      	cmp	r4, #0
 806963e:	d0da      	beq.n	80695f6 <sniprintf+0x16>
 8069640:	9b02      	ldr	r3, [sp, #8]
 8069642:	2200      	movs	r2, #0
 8069644:	701a      	strb	r2, [r3, #0]
 8069646:	e7d6      	b.n	80695f6 <sniprintf+0x16>
 8069648:	24014a18 	.word	0x24014a18

0806964c <siprintf>:
 806964c:	b40e      	push	{r1, r2, r3}
 806964e:	b510      	push	{r4, lr}
 8069650:	b09d      	sub	sp, #116	@ 0x74
 8069652:	ab1f      	add	r3, sp, #124	@ 0x7c
 8069654:	9002      	str	r0, [sp, #8]
 8069656:	9006      	str	r0, [sp, #24]
 8069658:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 806965c:	480a      	ldr	r0, [pc, #40]	@ (8069688 <siprintf+0x3c>)
 806965e:	9107      	str	r1, [sp, #28]
 8069660:	9104      	str	r1, [sp, #16]
 8069662:	490a      	ldr	r1, [pc, #40]	@ (806968c <siprintf+0x40>)
 8069664:	f853 2b04 	ldr.w	r2, [r3], #4
 8069668:	9105      	str	r1, [sp, #20]
 806966a:	2400      	movs	r4, #0
 806966c:	a902      	add	r1, sp, #8
 806966e:	6800      	ldr	r0, [r0, #0]
 8069670:	9301      	str	r3, [sp, #4]
 8069672:	941b      	str	r4, [sp, #108]	@ 0x6c
 8069674:	f000 faea 	bl	8069c4c <_svfiprintf_r>
 8069678:	9b02      	ldr	r3, [sp, #8]
 806967a:	701c      	strb	r4, [r3, #0]
 806967c:	b01d      	add	sp, #116	@ 0x74
 806967e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8069682:	b003      	add	sp, #12
 8069684:	4770      	bx	lr
 8069686:	bf00      	nop
 8069688:	24014a18 	.word	0x24014a18
 806968c:	ffff0208 	.word	0xffff0208

08069690 <__sread>:
 8069690:	b510      	push	{r4, lr}
 8069692:	460c      	mov	r4, r1
 8069694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8069698:	f000 f8fe 	bl	8069898 <_read_r>
 806969c:	2800      	cmp	r0, #0
 806969e:	bfab      	itete	ge
 80696a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80696a2:	89a3      	ldrhlt	r3, [r4, #12]
 80696a4:	181b      	addge	r3, r3, r0
 80696a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80696aa:	bfac      	ite	ge
 80696ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80696ae:	81a3      	strhlt	r3, [r4, #12]
 80696b0:	bd10      	pop	{r4, pc}

080696b2 <__swrite>:
 80696b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80696b6:	461f      	mov	r7, r3
 80696b8:	898b      	ldrh	r3, [r1, #12]
 80696ba:	05db      	lsls	r3, r3, #23
 80696bc:	4605      	mov	r5, r0
 80696be:	460c      	mov	r4, r1
 80696c0:	4616      	mov	r6, r2
 80696c2:	d505      	bpl.n	80696d0 <__swrite+0x1e>
 80696c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80696c8:	2302      	movs	r3, #2
 80696ca:	2200      	movs	r2, #0
 80696cc:	f000 f8d2 	bl	8069874 <_lseek_r>
 80696d0:	89a3      	ldrh	r3, [r4, #12]
 80696d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80696d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80696da:	81a3      	strh	r3, [r4, #12]
 80696dc:	4632      	mov	r2, r6
 80696de:	463b      	mov	r3, r7
 80696e0:	4628      	mov	r0, r5
 80696e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80696e6:	f000 b8e9 	b.w	80698bc <_write_r>

080696ea <__sseek>:
 80696ea:	b510      	push	{r4, lr}
 80696ec:	460c      	mov	r4, r1
 80696ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80696f2:	f000 f8bf 	bl	8069874 <_lseek_r>
 80696f6:	1c43      	adds	r3, r0, #1
 80696f8:	89a3      	ldrh	r3, [r4, #12]
 80696fa:	bf15      	itete	ne
 80696fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80696fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8069702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8069706:	81a3      	strheq	r3, [r4, #12]
 8069708:	bf18      	it	ne
 806970a:	81a3      	strhne	r3, [r4, #12]
 806970c:	bd10      	pop	{r4, pc}

0806970e <__sclose>:
 806970e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8069712:	f000 b89f 	b.w	8069854 <_close_r>

08069716 <_vsniprintf_r>:
 8069716:	b530      	push	{r4, r5, lr}
 8069718:	4614      	mov	r4, r2
 806971a:	2c00      	cmp	r4, #0
 806971c:	b09b      	sub	sp, #108	@ 0x6c
 806971e:	4605      	mov	r5, r0
 8069720:	461a      	mov	r2, r3
 8069722:	da05      	bge.n	8069730 <_vsniprintf_r+0x1a>
 8069724:	238b      	movs	r3, #139	@ 0x8b
 8069726:	6003      	str	r3, [r0, #0]
 8069728:	f04f 30ff 	mov.w	r0, #4294967295
 806972c:	b01b      	add	sp, #108	@ 0x6c
 806972e:	bd30      	pop	{r4, r5, pc}
 8069730:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8069734:	f8ad 300c 	strh.w	r3, [sp, #12]
 8069738:	f04f 0300 	mov.w	r3, #0
 806973c:	9319      	str	r3, [sp, #100]	@ 0x64
 806973e:	bf14      	ite	ne
 8069740:	f104 33ff 	addne.w	r3, r4, #4294967295
 8069744:	4623      	moveq	r3, r4
 8069746:	9302      	str	r3, [sp, #8]
 8069748:	9305      	str	r3, [sp, #20]
 806974a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 806974e:	9100      	str	r1, [sp, #0]
 8069750:	9104      	str	r1, [sp, #16]
 8069752:	f8ad 300e 	strh.w	r3, [sp, #14]
 8069756:	4669      	mov	r1, sp
 8069758:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 806975a:	f000 fa77 	bl	8069c4c <_svfiprintf_r>
 806975e:	1c43      	adds	r3, r0, #1
 8069760:	bfbc      	itt	lt
 8069762:	238b      	movlt	r3, #139	@ 0x8b
 8069764:	602b      	strlt	r3, [r5, #0]
 8069766:	2c00      	cmp	r4, #0
 8069768:	d0e0      	beq.n	806972c <_vsniprintf_r+0x16>
 806976a:	9b00      	ldr	r3, [sp, #0]
 806976c:	2200      	movs	r2, #0
 806976e:	701a      	strb	r2, [r3, #0]
 8069770:	e7dc      	b.n	806972c <_vsniprintf_r+0x16>
	...

08069774 <vsniprintf>:
 8069774:	b507      	push	{r0, r1, r2, lr}
 8069776:	9300      	str	r3, [sp, #0]
 8069778:	4613      	mov	r3, r2
 806977a:	460a      	mov	r2, r1
 806977c:	4601      	mov	r1, r0
 806977e:	4803      	ldr	r0, [pc, #12]	@ (806978c <vsniprintf+0x18>)
 8069780:	6800      	ldr	r0, [r0, #0]
 8069782:	f7ff ffc8 	bl	8069716 <_vsniprintf_r>
 8069786:	b003      	add	sp, #12
 8069788:	f85d fb04 	ldr.w	pc, [sp], #4
 806978c:	24014a18 	.word	0x24014a18

08069790 <memcmp>:
 8069790:	b510      	push	{r4, lr}
 8069792:	3901      	subs	r1, #1
 8069794:	4402      	add	r2, r0
 8069796:	4290      	cmp	r0, r2
 8069798:	d101      	bne.n	806979e <memcmp+0xe>
 806979a:	2000      	movs	r0, #0
 806979c:	e005      	b.n	80697aa <memcmp+0x1a>
 806979e:	7803      	ldrb	r3, [r0, #0]
 80697a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80697a4:	42a3      	cmp	r3, r4
 80697a6:	d001      	beq.n	80697ac <memcmp+0x1c>
 80697a8:	1b18      	subs	r0, r3, r4
 80697aa:	bd10      	pop	{r4, pc}
 80697ac:	3001      	adds	r0, #1
 80697ae:	e7f2      	b.n	8069796 <memcmp+0x6>

080697b0 <memmove>:
 80697b0:	4288      	cmp	r0, r1
 80697b2:	b510      	push	{r4, lr}
 80697b4:	eb01 0402 	add.w	r4, r1, r2
 80697b8:	d902      	bls.n	80697c0 <memmove+0x10>
 80697ba:	4284      	cmp	r4, r0
 80697bc:	4623      	mov	r3, r4
 80697be:	d807      	bhi.n	80697d0 <memmove+0x20>
 80697c0:	1e43      	subs	r3, r0, #1
 80697c2:	42a1      	cmp	r1, r4
 80697c4:	d008      	beq.n	80697d8 <memmove+0x28>
 80697c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80697ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80697ce:	e7f8      	b.n	80697c2 <memmove+0x12>
 80697d0:	4402      	add	r2, r0
 80697d2:	4601      	mov	r1, r0
 80697d4:	428a      	cmp	r2, r1
 80697d6:	d100      	bne.n	80697da <memmove+0x2a>
 80697d8:	bd10      	pop	{r4, pc}
 80697da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80697de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80697e2:	e7f7      	b.n	80697d4 <memmove+0x24>

080697e4 <memset>:
 80697e4:	4402      	add	r2, r0
 80697e6:	4603      	mov	r3, r0
 80697e8:	4293      	cmp	r3, r2
 80697ea:	d100      	bne.n	80697ee <memset+0xa>
 80697ec:	4770      	bx	lr
 80697ee:	f803 1b01 	strb.w	r1, [r3], #1
 80697f2:	e7f9      	b.n	80697e8 <memset+0x4>

080697f4 <strcat>:
 80697f4:	b510      	push	{r4, lr}
 80697f6:	4602      	mov	r2, r0
 80697f8:	7814      	ldrb	r4, [r2, #0]
 80697fa:	4613      	mov	r3, r2
 80697fc:	3201      	adds	r2, #1
 80697fe:	2c00      	cmp	r4, #0
 8069800:	d1fa      	bne.n	80697f8 <strcat+0x4>
 8069802:	3b01      	subs	r3, #1
 8069804:	f811 2b01 	ldrb.w	r2, [r1], #1
 8069808:	f803 2f01 	strb.w	r2, [r3, #1]!
 806980c:	2a00      	cmp	r2, #0
 806980e:	d1f9      	bne.n	8069804 <strcat+0x10>
 8069810:	bd10      	pop	{r4, pc}

08069812 <strchr>:
 8069812:	b2c9      	uxtb	r1, r1
 8069814:	4603      	mov	r3, r0
 8069816:	4618      	mov	r0, r3
 8069818:	f813 2b01 	ldrb.w	r2, [r3], #1
 806981c:	b112      	cbz	r2, 8069824 <strchr+0x12>
 806981e:	428a      	cmp	r2, r1
 8069820:	d1f9      	bne.n	8069816 <strchr+0x4>
 8069822:	4770      	bx	lr
 8069824:	2900      	cmp	r1, #0
 8069826:	bf18      	it	ne
 8069828:	2000      	movne	r0, #0
 806982a:	4770      	bx	lr

0806982c <strncpy>:
 806982c:	b510      	push	{r4, lr}
 806982e:	3901      	subs	r1, #1
 8069830:	4603      	mov	r3, r0
 8069832:	b132      	cbz	r2, 8069842 <strncpy+0x16>
 8069834:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8069838:	f803 4b01 	strb.w	r4, [r3], #1
 806983c:	3a01      	subs	r2, #1
 806983e:	2c00      	cmp	r4, #0
 8069840:	d1f7      	bne.n	8069832 <strncpy+0x6>
 8069842:	441a      	add	r2, r3
 8069844:	2100      	movs	r1, #0
 8069846:	4293      	cmp	r3, r2
 8069848:	d100      	bne.n	806984c <strncpy+0x20>
 806984a:	bd10      	pop	{r4, pc}
 806984c:	f803 1b01 	strb.w	r1, [r3], #1
 8069850:	e7f9      	b.n	8069846 <strncpy+0x1a>
	...

08069854 <_close_r>:
 8069854:	b538      	push	{r3, r4, r5, lr}
 8069856:	4d06      	ldr	r5, [pc, #24]	@ (8069870 <_close_r+0x1c>)
 8069858:	2300      	movs	r3, #0
 806985a:	4604      	mov	r4, r0
 806985c:	4608      	mov	r0, r1
 806985e:	602b      	str	r3, [r5, #0]
 8069860:	f7f6 fcc7 	bl	80601f2 <_close>
 8069864:	1c43      	adds	r3, r0, #1
 8069866:	d102      	bne.n	806986e <_close_r+0x1a>
 8069868:	682b      	ldr	r3, [r5, #0]
 806986a:	b103      	cbz	r3, 806986e <_close_r+0x1a>
 806986c:	6023      	str	r3, [r4, #0]
 806986e:	bd38      	pop	{r3, r4, r5, pc}
 8069870:	2406eac4 	.word	0x2406eac4

08069874 <_lseek_r>:
 8069874:	b538      	push	{r3, r4, r5, lr}
 8069876:	4d07      	ldr	r5, [pc, #28]	@ (8069894 <_lseek_r+0x20>)
 8069878:	4604      	mov	r4, r0
 806987a:	4608      	mov	r0, r1
 806987c:	4611      	mov	r1, r2
 806987e:	2200      	movs	r2, #0
 8069880:	602a      	str	r2, [r5, #0]
 8069882:	461a      	mov	r2, r3
 8069884:	f7f6 fcdc 	bl	8060240 <_lseek>
 8069888:	1c43      	adds	r3, r0, #1
 806988a:	d102      	bne.n	8069892 <_lseek_r+0x1e>
 806988c:	682b      	ldr	r3, [r5, #0]
 806988e:	b103      	cbz	r3, 8069892 <_lseek_r+0x1e>
 8069890:	6023      	str	r3, [r4, #0]
 8069892:	bd38      	pop	{r3, r4, r5, pc}
 8069894:	2406eac4 	.word	0x2406eac4

08069898 <_read_r>:
 8069898:	b538      	push	{r3, r4, r5, lr}
 806989a:	4d07      	ldr	r5, [pc, #28]	@ (80698b8 <_read_r+0x20>)
 806989c:	4604      	mov	r4, r0
 806989e:	4608      	mov	r0, r1
 80698a0:	4611      	mov	r1, r2
 80698a2:	2200      	movs	r2, #0
 80698a4:	602a      	str	r2, [r5, #0]
 80698a6:	461a      	mov	r2, r3
 80698a8:	f7f6 fc6a 	bl	8060180 <_read>
 80698ac:	1c43      	adds	r3, r0, #1
 80698ae:	d102      	bne.n	80698b6 <_read_r+0x1e>
 80698b0:	682b      	ldr	r3, [r5, #0]
 80698b2:	b103      	cbz	r3, 80698b6 <_read_r+0x1e>
 80698b4:	6023      	str	r3, [r4, #0]
 80698b6:	bd38      	pop	{r3, r4, r5, pc}
 80698b8:	2406eac4 	.word	0x2406eac4

080698bc <_write_r>:
 80698bc:	b538      	push	{r3, r4, r5, lr}
 80698be:	4d07      	ldr	r5, [pc, #28]	@ (80698dc <_write_r+0x20>)
 80698c0:	4604      	mov	r4, r0
 80698c2:	4608      	mov	r0, r1
 80698c4:	4611      	mov	r1, r2
 80698c6:	2200      	movs	r2, #0
 80698c8:	602a      	str	r2, [r5, #0]
 80698ca:	461a      	mov	r2, r3
 80698cc:	f7f6 fc75 	bl	80601ba <_write>
 80698d0:	1c43      	adds	r3, r0, #1
 80698d2:	d102      	bne.n	80698da <_write_r+0x1e>
 80698d4:	682b      	ldr	r3, [r5, #0]
 80698d6:	b103      	cbz	r3, 80698da <_write_r+0x1e>
 80698d8:	6023      	str	r3, [r4, #0]
 80698da:	bd38      	pop	{r3, r4, r5, pc}
 80698dc:	2406eac4 	.word	0x2406eac4

080698e0 <__errno>:
 80698e0:	4b01      	ldr	r3, [pc, #4]	@ (80698e8 <__errno+0x8>)
 80698e2:	6818      	ldr	r0, [r3, #0]
 80698e4:	4770      	bx	lr
 80698e6:	bf00      	nop
 80698e8:	24014a18 	.word	0x24014a18

080698ec <__libc_init_array>:
 80698ec:	b570      	push	{r4, r5, r6, lr}
 80698ee:	4d0d      	ldr	r5, [pc, #52]	@ (8069924 <__libc_init_array+0x38>)
 80698f0:	4c0d      	ldr	r4, [pc, #52]	@ (8069928 <__libc_init_array+0x3c>)
 80698f2:	1b64      	subs	r4, r4, r5
 80698f4:	10a4      	asrs	r4, r4, #2
 80698f6:	2600      	movs	r6, #0
 80698f8:	42a6      	cmp	r6, r4
 80698fa:	d109      	bne.n	8069910 <__libc_init_array+0x24>
 80698fc:	4d0b      	ldr	r5, [pc, #44]	@ (806992c <__libc_init_array+0x40>)
 80698fe:	4c0c      	ldr	r4, [pc, #48]	@ (8069930 <__libc_init_array+0x44>)
 8069900:	f000 ffd6 	bl	806a8b0 <_init>
 8069904:	1b64      	subs	r4, r4, r5
 8069906:	10a4      	asrs	r4, r4, #2
 8069908:	2600      	movs	r6, #0
 806990a:	42a6      	cmp	r6, r4
 806990c:	d105      	bne.n	806991a <__libc_init_array+0x2e>
 806990e:	bd70      	pop	{r4, r5, r6, pc}
 8069910:	f855 3b04 	ldr.w	r3, [r5], #4
 8069914:	4798      	blx	r3
 8069916:	3601      	adds	r6, #1
 8069918:	e7ee      	b.n	80698f8 <__libc_init_array+0xc>
 806991a:	f855 3b04 	ldr.w	r3, [r5], #4
 806991e:	4798      	blx	r3
 8069920:	3601      	adds	r6, #1
 8069922:	e7f2      	b.n	806990a <__libc_init_array+0x1e>
 8069924:	08072738 	.word	0x08072738
 8069928:	08072738 	.word	0x08072738
 806992c:	08072738 	.word	0x08072738
 8069930:	0807273c 	.word	0x0807273c

08069934 <__retarget_lock_init_recursive>:
 8069934:	4770      	bx	lr

08069936 <__retarget_lock_acquire_recursive>:
 8069936:	4770      	bx	lr

08069938 <__retarget_lock_release_recursive>:
 8069938:	4770      	bx	lr

0806993a <memcpy>:
 806993a:	440a      	add	r2, r1
 806993c:	4291      	cmp	r1, r2
 806993e:	f100 33ff 	add.w	r3, r0, #4294967295
 8069942:	d100      	bne.n	8069946 <memcpy+0xc>
 8069944:	4770      	bx	lr
 8069946:	b510      	push	{r4, lr}
 8069948:	f811 4b01 	ldrb.w	r4, [r1], #1
 806994c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8069950:	4291      	cmp	r1, r2
 8069952:	d1f9      	bne.n	8069948 <memcpy+0xe>
 8069954:	bd10      	pop	{r4, pc}
	...

08069958 <__assert_func>:
 8069958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 806995a:	4614      	mov	r4, r2
 806995c:	461a      	mov	r2, r3
 806995e:	4b09      	ldr	r3, [pc, #36]	@ (8069984 <__assert_func+0x2c>)
 8069960:	681b      	ldr	r3, [r3, #0]
 8069962:	4605      	mov	r5, r0
 8069964:	68d8      	ldr	r0, [r3, #12]
 8069966:	b14c      	cbz	r4, 806997c <__assert_func+0x24>
 8069968:	4b07      	ldr	r3, [pc, #28]	@ (8069988 <__assert_func+0x30>)
 806996a:	9100      	str	r1, [sp, #0]
 806996c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8069970:	4906      	ldr	r1, [pc, #24]	@ (806998c <__assert_func+0x34>)
 8069972:	462b      	mov	r3, r5
 8069974:	f000 fde0 	bl	806a538 <fiprintf>
 8069978:	f000 fe94 	bl	806a6a4 <abort>
 806997c:	4b04      	ldr	r3, [pc, #16]	@ (8069990 <__assert_func+0x38>)
 806997e:	461c      	mov	r4, r3
 8069980:	e7f3      	b.n	806996a <__assert_func+0x12>
 8069982:	bf00      	nop
 8069984:	24014a18 	.word	0x24014a18
 8069988:	080725bf 	.word	0x080725bf
 806998c:	080725cc 	.word	0x080725cc
 8069990:	080725fa 	.word	0x080725fa

08069994 <_free_r>:
 8069994:	b538      	push	{r3, r4, r5, lr}
 8069996:	4605      	mov	r5, r0
 8069998:	2900      	cmp	r1, #0
 806999a:	d041      	beq.n	8069a20 <_free_r+0x8c>
 806999c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80699a0:	1f0c      	subs	r4, r1, #4
 80699a2:	2b00      	cmp	r3, #0
 80699a4:	bfb8      	it	lt
 80699a6:	18e4      	addlt	r4, r4, r3
 80699a8:	f000 f8e8 	bl	8069b7c <__malloc_lock>
 80699ac:	4a1d      	ldr	r2, [pc, #116]	@ (8069a24 <_free_r+0x90>)
 80699ae:	6813      	ldr	r3, [r2, #0]
 80699b0:	b933      	cbnz	r3, 80699c0 <_free_r+0x2c>
 80699b2:	6063      	str	r3, [r4, #4]
 80699b4:	6014      	str	r4, [r2, #0]
 80699b6:	4628      	mov	r0, r5
 80699b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80699bc:	f000 b8e4 	b.w	8069b88 <__malloc_unlock>
 80699c0:	42a3      	cmp	r3, r4
 80699c2:	d908      	bls.n	80699d6 <_free_r+0x42>
 80699c4:	6820      	ldr	r0, [r4, #0]
 80699c6:	1821      	adds	r1, r4, r0
 80699c8:	428b      	cmp	r3, r1
 80699ca:	bf01      	itttt	eq
 80699cc:	6819      	ldreq	r1, [r3, #0]
 80699ce:	685b      	ldreq	r3, [r3, #4]
 80699d0:	1809      	addeq	r1, r1, r0
 80699d2:	6021      	streq	r1, [r4, #0]
 80699d4:	e7ed      	b.n	80699b2 <_free_r+0x1e>
 80699d6:	461a      	mov	r2, r3
 80699d8:	685b      	ldr	r3, [r3, #4]
 80699da:	b10b      	cbz	r3, 80699e0 <_free_r+0x4c>
 80699dc:	42a3      	cmp	r3, r4
 80699de:	d9fa      	bls.n	80699d6 <_free_r+0x42>
 80699e0:	6811      	ldr	r1, [r2, #0]
 80699e2:	1850      	adds	r0, r2, r1
 80699e4:	42a0      	cmp	r0, r4
 80699e6:	d10b      	bne.n	8069a00 <_free_r+0x6c>
 80699e8:	6820      	ldr	r0, [r4, #0]
 80699ea:	4401      	add	r1, r0
 80699ec:	1850      	adds	r0, r2, r1
 80699ee:	4283      	cmp	r3, r0
 80699f0:	6011      	str	r1, [r2, #0]
 80699f2:	d1e0      	bne.n	80699b6 <_free_r+0x22>
 80699f4:	6818      	ldr	r0, [r3, #0]
 80699f6:	685b      	ldr	r3, [r3, #4]
 80699f8:	6053      	str	r3, [r2, #4]
 80699fa:	4408      	add	r0, r1
 80699fc:	6010      	str	r0, [r2, #0]
 80699fe:	e7da      	b.n	80699b6 <_free_r+0x22>
 8069a00:	d902      	bls.n	8069a08 <_free_r+0x74>
 8069a02:	230c      	movs	r3, #12
 8069a04:	602b      	str	r3, [r5, #0]
 8069a06:	e7d6      	b.n	80699b6 <_free_r+0x22>
 8069a08:	6820      	ldr	r0, [r4, #0]
 8069a0a:	1821      	adds	r1, r4, r0
 8069a0c:	428b      	cmp	r3, r1
 8069a0e:	bf04      	itt	eq
 8069a10:	6819      	ldreq	r1, [r3, #0]
 8069a12:	685b      	ldreq	r3, [r3, #4]
 8069a14:	6063      	str	r3, [r4, #4]
 8069a16:	bf04      	itt	eq
 8069a18:	1809      	addeq	r1, r1, r0
 8069a1a:	6021      	streq	r1, [r4, #0]
 8069a1c:	6054      	str	r4, [r2, #4]
 8069a1e:	e7ca      	b.n	80699b6 <_free_r+0x22>
 8069a20:	bd38      	pop	{r3, r4, r5, pc}
 8069a22:	bf00      	nop
 8069a24:	2406ead0 	.word	0x2406ead0

08069a28 <malloc>:
 8069a28:	4b02      	ldr	r3, [pc, #8]	@ (8069a34 <malloc+0xc>)
 8069a2a:	4601      	mov	r1, r0
 8069a2c:	6818      	ldr	r0, [r3, #0]
 8069a2e:	f000 b825 	b.w	8069a7c <_malloc_r>
 8069a32:	bf00      	nop
 8069a34:	24014a18 	.word	0x24014a18

08069a38 <sbrk_aligned>:
 8069a38:	b570      	push	{r4, r5, r6, lr}
 8069a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8069a78 <sbrk_aligned+0x40>)
 8069a3c:	460c      	mov	r4, r1
 8069a3e:	6831      	ldr	r1, [r6, #0]
 8069a40:	4605      	mov	r5, r0
 8069a42:	b911      	cbnz	r1, 8069a4a <sbrk_aligned+0x12>
 8069a44:	f000 fe1e 	bl	806a684 <_sbrk_r>
 8069a48:	6030      	str	r0, [r6, #0]
 8069a4a:	4621      	mov	r1, r4
 8069a4c:	4628      	mov	r0, r5
 8069a4e:	f000 fe19 	bl	806a684 <_sbrk_r>
 8069a52:	1c43      	adds	r3, r0, #1
 8069a54:	d103      	bne.n	8069a5e <sbrk_aligned+0x26>
 8069a56:	f04f 34ff 	mov.w	r4, #4294967295
 8069a5a:	4620      	mov	r0, r4
 8069a5c:	bd70      	pop	{r4, r5, r6, pc}
 8069a5e:	1cc4      	adds	r4, r0, #3
 8069a60:	f024 0403 	bic.w	r4, r4, #3
 8069a64:	42a0      	cmp	r0, r4
 8069a66:	d0f8      	beq.n	8069a5a <sbrk_aligned+0x22>
 8069a68:	1a21      	subs	r1, r4, r0
 8069a6a:	4628      	mov	r0, r5
 8069a6c:	f000 fe0a 	bl	806a684 <_sbrk_r>
 8069a70:	3001      	adds	r0, #1
 8069a72:	d1f2      	bne.n	8069a5a <sbrk_aligned+0x22>
 8069a74:	e7ef      	b.n	8069a56 <sbrk_aligned+0x1e>
 8069a76:	bf00      	nop
 8069a78:	2406eacc 	.word	0x2406eacc

08069a7c <_malloc_r>:
 8069a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8069a80:	1ccd      	adds	r5, r1, #3
 8069a82:	f025 0503 	bic.w	r5, r5, #3
 8069a86:	3508      	adds	r5, #8
 8069a88:	2d0c      	cmp	r5, #12
 8069a8a:	bf38      	it	cc
 8069a8c:	250c      	movcc	r5, #12
 8069a8e:	2d00      	cmp	r5, #0
 8069a90:	4606      	mov	r6, r0
 8069a92:	db01      	blt.n	8069a98 <_malloc_r+0x1c>
 8069a94:	42a9      	cmp	r1, r5
 8069a96:	d904      	bls.n	8069aa2 <_malloc_r+0x26>
 8069a98:	230c      	movs	r3, #12
 8069a9a:	6033      	str	r3, [r6, #0]
 8069a9c:	2000      	movs	r0, #0
 8069a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8069aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8069b78 <_malloc_r+0xfc>
 8069aa6:	f000 f869 	bl	8069b7c <__malloc_lock>
 8069aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8069aae:	461c      	mov	r4, r3
 8069ab0:	bb44      	cbnz	r4, 8069b04 <_malloc_r+0x88>
 8069ab2:	4629      	mov	r1, r5
 8069ab4:	4630      	mov	r0, r6
 8069ab6:	f7ff ffbf 	bl	8069a38 <sbrk_aligned>
 8069aba:	1c43      	adds	r3, r0, #1
 8069abc:	4604      	mov	r4, r0
 8069abe:	d158      	bne.n	8069b72 <_malloc_r+0xf6>
 8069ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8069ac4:	4627      	mov	r7, r4
 8069ac6:	2f00      	cmp	r7, #0
 8069ac8:	d143      	bne.n	8069b52 <_malloc_r+0xd6>
 8069aca:	2c00      	cmp	r4, #0
 8069acc:	d04b      	beq.n	8069b66 <_malloc_r+0xea>
 8069ace:	6823      	ldr	r3, [r4, #0]
 8069ad0:	4639      	mov	r1, r7
 8069ad2:	4630      	mov	r0, r6
 8069ad4:	eb04 0903 	add.w	r9, r4, r3
 8069ad8:	f000 fdd4 	bl	806a684 <_sbrk_r>
 8069adc:	4581      	cmp	r9, r0
 8069ade:	d142      	bne.n	8069b66 <_malloc_r+0xea>
 8069ae0:	6821      	ldr	r1, [r4, #0]
 8069ae2:	1a6d      	subs	r5, r5, r1
 8069ae4:	4629      	mov	r1, r5
 8069ae6:	4630      	mov	r0, r6
 8069ae8:	f7ff ffa6 	bl	8069a38 <sbrk_aligned>
 8069aec:	3001      	adds	r0, #1
 8069aee:	d03a      	beq.n	8069b66 <_malloc_r+0xea>
 8069af0:	6823      	ldr	r3, [r4, #0]
 8069af2:	442b      	add	r3, r5
 8069af4:	6023      	str	r3, [r4, #0]
 8069af6:	f8d8 3000 	ldr.w	r3, [r8]
 8069afa:	685a      	ldr	r2, [r3, #4]
 8069afc:	bb62      	cbnz	r2, 8069b58 <_malloc_r+0xdc>
 8069afe:	f8c8 7000 	str.w	r7, [r8]
 8069b02:	e00f      	b.n	8069b24 <_malloc_r+0xa8>
 8069b04:	6822      	ldr	r2, [r4, #0]
 8069b06:	1b52      	subs	r2, r2, r5
 8069b08:	d420      	bmi.n	8069b4c <_malloc_r+0xd0>
 8069b0a:	2a0b      	cmp	r2, #11
 8069b0c:	d917      	bls.n	8069b3e <_malloc_r+0xc2>
 8069b0e:	1961      	adds	r1, r4, r5
 8069b10:	42a3      	cmp	r3, r4
 8069b12:	6025      	str	r5, [r4, #0]
 8069b14:	bf18      	it	ne
 8069b16:	6059      	strne	r1, [r3, #4]
 8069b18:	6863      	ldr	r3, [r4, #4]
 8069b1a:	bf08      	it	eq
 8069b1c:	f8c8 1000 	streq.w	r1, [r8]
 8069b20:	5162      	str	r2, [r4, r5]
 8069b22:	604b      	str	r3, [r1, #4]
 8069b24:	4630      	mov	r0, r6
 8069b26:	f000 f82f 	bl	8069b88 <__malloc_unlock>
 8069b2a:	f104 000b 	add.w	r0, r4, #11
 8069b2e:	1d23      	adds	r3, r4, #4
 8069b30:	f020 0007 	bic.w	r0, r0, #7
 8069b34:	1ac2      	subs	r2, r0, r3
 8069b36:	bf1c      	itt	ne
 8069b38:	1a1b      	subne	r3, r3, r0
 8069b3a:	50a3      	strne	r3, [r4, r2]
 8069b3c:	e7af      	b.n	8069a9e <_malloc_r+0x22>
 8069b3e:	6862      	ldr	r2, [r4, #4]
 8069b40:	42a3      	cmp	r3, r4
 8069b42:	bf0c      	ite	eq
 8069b44:	f8c8 2000 	streq.w	r2, [r8]
 8069b48:	605a      	strne	r2, [r3, #4]
 8069b4a:	e7eb      	b.n	8069b24 <_malloc_r+0xa8>
 8069b4c:	4623      	mov	r3, r4
 8069b4e:	6864      	ldr	r4, [r4, #4]
 8069b50:	e7ae      	b.n	8069ab0 <_malloc_r+0x34>
 8069b52:	463c      	mov	r4, r7
 8069b54:	687f      	ldr	r7, [r7, #4]
 8069b56:	e7b6      	b.n	8069ac6 <_malloc_r+0x4a>
 8069b58:	461a      	mov	r2, r3
 8069b5a:	685b      	ldr	r3, [r3, #4]
 8069b5c:	42a3      	cmp	r3, r4
 8069b5e:	d1fb      	bne.n	8069b58 <_malloc_r+0xdc>
 8069b60:	2300      	movs	r3, #0
 8069b62:	6053      	str	r3, [r2, #4]
 8069b64:	e7de      	b.n	8069b24 <_malloc_r+0xa8>
 8069b66:	230c      	movs	r3, #12
 8069b68:	6033      	str	r3, [r6, #0]
 8069b6a:	4630      	mov	r0, r6
 8069b6c:	f000 f80c 	bl	8069b88 <__malloc_unlock>
 8069b70:	e794      	b.n	8069a9c <_malloc_r+0x20>
 8069b72:	6005      	str	r5, [r0, #0]
 8069b74:	e7d6      	b.n	8069b24 <_malloc_r+0xa8>
 8069b76:	bf00      	nop
 8069b78:	2406ead0 	.word	0x2406ead0

08069b7c <__malloc_lock>:
 8069b7c:	4801      	ldr	r0, [pc, #4]	@ (8069b84 <__malloc_lock+0x8>)
 8069b7e:	f7ff beda 	b.w	8069936 <__retarget_lock_acquire_recursive>
 8069b82:	bf00      	nop
 8069b84:	2406eac8 	.word	0x2406eac8

08069b88 <__malloc_unlock>:
 8069b88:	4801      	ldr	r0, [pc, #4]	@ (8069b90 <__malloc_unlock+0x8>)
 8069b8a:	f7ff bed5 	b.w	8069938 <__retarget_lock_release_recursive>
 8069b8e:	bf00      	nop
 8069b90:	2406eac8 	.word	0x2406eac8

08069b94 <__ssputs_r>:
 8069b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8069b98:	688e      	ldr	r6, [r1, #8]
 8069b9a:	461f      	mov	r7, r3
 8069b9c:	42be      	cmp	r6, r7
 8069b9e:	680b      	ldr	r3, [r1, #0]
 8069ba0:	4682      	mov	sl, r0
 8069ba2:	460c      	mov	r4, r1
 8069ba4:	4690      	mov	r8, r2
 8069ba6:	d82d      	bhi.n	8069c04 <__ssputs_r+0x70>
 8069ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8069bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8069bb0:	d026      	beq.n	8069c00 <__ssputs_r+0x6c>
 8069bb2:	6965      	ldr	r5, [r4, #20]
 8069bb4:	6909      	ldr	r1, [r1, #16]
 8069bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8069bba:	eba3 0901 	sub.w	r9, r3, r1
 8069bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8069bc2:	1c7b      	adds	r3, r7, #1
 8069bc4:	444b      	add	r3, r9
 8069bc6:	106d      	asrs	r5, r5, #1
 8069bc8:	429d      	cmp	r5, r3
 8069bca:	bf38      	it	cc
 8069bcc:	461d      	movcc	r5, r3
 8069bce:	0553      	lsls	r3, r2, #21
 8069bd0:	d527      	bpl.n	8069c22 <__ssputs_r+0x8e>
 8069bd2:	4629      	mov	r1, r5
 8069bd4:	f7ff ff52 	bl	8069a7c <_malloc_r>
 8069bd8:	4606      	mov	r6, r0
 8069bda:	b360      	cbz	r0, 8069c36 <__ssputs_r+0xa2>
 8069bdc:	6921      	ldr	r1, [r4, #16]
 8069bde:	464a      	mov	r2, r9
 8069be0:	f7ff feab 	bl	806993a <memcpy>
 8069be4:	89a3      	ldrh	r3, [r4, #12]
 8069be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8069bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8069bee:	81a3      	strh	r3, [r4, #12]
 8069bf0:	6126      	str	r6, [r4, #16]
 8069bf2:	6165      	str	r5, [r4, #20]
 8069bf4:	444e      	add	r6, r9
 8069bf6:	eba5 0509 	sub.w	r5, r5, r9
 8069bfa:	6026      	str	r6, [r4, #0]
 8069bfc:	60a5      	str	r5, [r4, #8]
 8069bfe:	463e      	mov	r6, r7
 8069c00:	42be      	cmp	r6, r7
 8069c02:	d900      	bls.n	8069c06 <__ssputs_r+0x72>
 8069c04:	463e      	mov	r6, r7
 8069c06:	6820      	ldr	r0, [r4, #0]
 8069c08:	4632      	mov	r2, r6
 8069c0a:	4641      	mov	r1, r8
 8069c0c:	f7ff fdd0 	bl	80697b0 <memmove>
 8069c10:	68a3      	ldr	r3, [r4, #8]
 8069c12:	1b9b      	subs	r3, r3, r6
 8069c14:	60a3      	str	r3, [r4, #8]
 8069c16:	6823      	ldr	r3, [r4, #0]
 8069c18:	4433      	add	r3, r6
 8069c1a:	6023      	str	r3, [r4, #0]
 8069c1c:	2000      	movs	r0, #0
 8069c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8069c22:	462a      	mov	r2, r5
 8069c24:	f000 fd45 	bl	806a6b2 <_realloc_r>
 8069c28:	4606      	mov	r6, r0
 8069c2a:	2800      	cmp	r0, #0
 8069c2c:	d1e0      	bne.n	8069bf0 <__ssputs_r+0x5c>
 8069c2e:	6921      	ldr	r1, [r4, #16]
 8069c30:	4650      	mov	r0, sl
 8069c32:	f7ff feaf 	bl	8069994 <_free_r>
 8069c36:	230c      	movs	r3, #12
 8069c38:	f8ca 3000 	str.w	r3, [sl]
 8069c3c:	89a3      	ldrh	r3, [r4, #12]
 8069c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8069c42:	81a3      	strh	r3, [r4, #12]
 8069c44:	f04f 30ff 	mov.w	r0, #4294967295
 8069c48:	e7e9      	b.n	8069c1e <__ssputs_r+0x8a>
	...

08069c4c <_svfiprintf_r>:
 8069c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8069c50:	4698      	mov	r8, r3
 8069c52:	898b      	ldrh	r3, [r1, #12]
 8069c54:	061b      	lsls	r3, r3, #24
 8069c56:	b09d      	sub	sp, #116	@ 0x74
 8069c58:	4607      	mov	r7, r0
 8069c5a:	460d      	mov	r5, r1
 8069c5c:	4614      	mov	r4, r2
 8069c5e:	d510      	bpl.n	8069c82 <_svfiprintf_r+0x36>
 8069c60:	690b      	ldr	r3, [r1, #16]
 8069c62:	b973      	cbnz	r3, 8069c82 <_svfiprintf_r+0x36>
 8069c64:	2140      	movs	r1, #64	@ 0x40
 8069c66:	f7ff ff09 	bl	8069a7c <_malloc_r>
 8069c6a:	6028      	str	r0, [r5, #0]
 8069c6c:	6128      	str	r0, [r5, #16]
 8069c6e:	b930      	cbnz	r0, 8069c7e <_svfiprintf_r+0x32>
 8069c70:	230c      	movs	r3, #12
 8069c72:	603b      	str	r3, [r7, #0]
 8069c74:	f04f 30ff 	mov.w	r0, #4294967295
 8069c78:	b01d      	add	sp, #116	@ 0x74
 8069c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8069c7e:	2340      	movs	r3, #64	@ 0x40
 8069c80:	616b      	str	r3, [r5, #20]
 8069c82:	2300      	movs	r3, #0
 8069c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8069c86:	2320      	movs	r3, #32
 8069c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8069c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8069c90:	2330      	movs	r3, #48	@ 0x30
 8069c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8069e30 <_svfiprintf_r+0x1e4>
 8069c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8069c9a:	f04f 0901 	mov.w	r9, #1
 8069c9e:	4623      	mov	r3, r4
 8069ca0:	469a      	mov	sl, r3
 8069ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8069ca6:	b10a      	cbz	r2, 8069cac <_svfiprintf_r+0x60>
 8069ca8:	2a25      	cmp	r2, #37	@ 0x25
 8069caa:	d1f9      	bne.n	8069ca0 <_svfiprintf_r+0x54>
 8069cac:	ebba 0b04 	subs.w	fp, sl, r4
 8069cb0:	d00b      	beq.n	8069cca <_svfiprintf_r+0x7e>
 8069cb2:	465b      	mov	r3, fp
 8069cb4:	4622      	mov	r2, r4
 8069cb6:	4629      	mov	r1, r5
 8069cb8:	4638      	mov	r0, r7
 8069cba:	f7ff ff6b 	bl	8069b94 <__ssputs_r>
 8069cbe:	3001      	adds	r0, #1
 8069cc0:	f000 80a7 	beq.w	8069e12 <_svfiprintf_r+0x1c6>
 8069cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8069cc6:	445a      	add	r2, fp
 8069cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8069cca:	f89a 3000 	ldrb.w	r3, [sl]
 8069cce:	2b00      	cmp	r3, #0
 8069cd0:	f000 809f 	beq.w	8069e12 <_svfiprintf_r+0x1c6>
 8069cd4:	2300      	movs	r3, #0
 8069cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8069cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8069cde:	f10a 0a01 	add.w	sl, sl, #1
 8069ce2:	9304      	str	r3, [sp, #16]
 8069ce4:	9307      	str	r3, [sp, #28]
 8069ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8069cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8069cec:	4654      	mov	r4, sl
 8069cee:	2205      	movs	r2, #5
 8069cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8069cf4:	484e      	ldr	r0, [pc, #312]	@ (8069e30 <_svfiprintf_r+0x1e4>)
 8069cf6:	f7d6 fb0b 	bl	8040310 <memchr>
 8069cfa:	9a04      	ldr	r2, [sp, #16]
 8069cfc:	b9d8      	cbnz	r0, 8069d36 <_svfiprintf_r+0xea>
 8069cfe:	06d0      	lsls	r0, r2, #27
 8069d00:	bf44      	itt	mi
 8069d02:	2320      	movmi	r3, #32
 8069d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8069d08:	0711      	lsls	r1, r2, #28
 8069d0a:	bf44      	itt	mi
 8069d0c:	232b      	movmi	r3, #43	@ 0x2b
 8069d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8069d12:	f89a 3000 	ldrb.w	r3, [sl]
 8069d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8069d18:	d015      	beq.n	8069d46 <_svfiprintf_r+0xfa>
 8069d1a:	9a07      	ldr	r2, [sp, #28]
 8069d1c:	4654      	mov	r4, sl
 8069d1e:	2000      	movs	r0, #0
 8069d20:	f04f 0c0a 	mov.w	ip, #10
 8069d24:	4621      	mov	r1, r4
 8069d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8069d2a:	3b30      	subs	r3, #48	@ 0x30
 8069d2c:	2b09      	cmp	r3, #9
 8069d2e:	d94b      	bls.n	8069dc8 <_svfiprintf_r+0x17c>
 8069d30:	b1b0      	cbz	r0, 8069d60 <_svfiprintf_r+0x114>
 8069d32:	9207      	str	r2, [sp, #28]
 8069d34:	e014      	b.n	8069d60 <_svfiprintf_r+0x114>
 8069d36:	eba0 0308 	sub.w	r3, r0, r8
 8069d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8069d3e:	4313      	orrs	r3, r2
 8069d40:	9304      	str	r3, [sp, #16]
 8069d42:	46a2      	mov	sl, r4
 8069d44:	e7d2      	b.n	8069cec <_svfiprintf_r+0xa0>
 8069d46:	9b03      	ldr	r3, [sp, #12]
 8069d48:	1d19      	adds	r1, r3, #4
 8069d4a:	681b      	ldr	r3, [r3, #0]
 8069d4c:	9103      	str	r1, [sp, #12]
 8069d4e:	2b00      	cmp	r3, #0
 8069d50:	bfbb      	ittet	lt
 8069d52:	425b      	neglt	r3, r3
 8069d54:	f042 0202 	orrlt.w	r2, r2, #2
 8069d58:	9307      	strge	r3, [sp, #28]
 8069d5a:	9307      	strlt	r3, [sp, #28]
 8069d5c:	bfb8      	it	lt
 8069d5e:	9204      	strlt	r2, [sp, #16]
 8069d60:	7823      	ldrb	r3, [r4, #0]
 8069d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8069d64:	d10a      	bne.n	8069d7c <_svfiprintf_r+0x130>
 8069d66:	7863      	ldrb	r3, [r4, #1]
 8069d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8069d6a:	d132      	bne.n	8069dd2 <_svfiprintf_r+0x186>
 8069d6c:	9b03      	ldr	r3, [sp, #12]
 8069d6e:	1d1a      	adds	r2, r3, #4
 8069d70:	681b      	ldr	r3, [r3, #0]
 8069d72:	9203      	str	r2, [sp, #12]
 8069d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8069d78:	3402      	adds	r4, #2
 8069d7a:	9305      	str	r3, [sp, #20]
 8069d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8069e40 <_svfiprintf_r+0x1f4>
 8069d80:	7821      	ldrb	r1, [r4, #0]
 8069d82:	2203      	movs	r2, #3
 8069d84:	4650      	mov	r0, sl
 8069d86:	f7d6 fac3 	bl	8040310 <memchr>
 8069d8a:	b138      	cbz	r0, 8069d9c <_svfiprintf_r+0x150>
 8069d8c:	9b04      	ldr	r3, [sp, #16]
 8069d8e:	eba0 000a 	sub.w	r0, r0, sl
 8069d92:	2240      	movs	r2, #64	@ 0x40
 8069d94:	4082      	lsls	r2, r0
 8069d96:	4313      	orrs	r3, r2
 8069d98:	3401      	adds	r4, #1
 8069d9a:	9304      	str	r3, [sp, #16]
 8069d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8069da0:	4824      	ldr	r0, [pc, #144]	@ (8069e34 <_svfiprintf_r+0x1e8>)
 8069da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8069da6:	2206      	movs	r2, #6
 8069da8:	f7d6 fab2 	bl	8040310 <memchr>
 8069dac:	2800      	cmp	r0, #0
 8069dae:	d036      	beq.n	8069e1e <_svfiprintf_r+0x1d2>
 8069db0:	4b21      	ldr	r3, [pc, #132]	@ (8069e38 <_svfiprintf_r+0x1ec>)
 8069db2:	bb1b      	cbnz	r3, 8069dfc <_svfiprintf_r+0x1b0>
 8069db4:	9b03      	ldr	r3, [sp, #12]
 8069db6:	3307      	adds	r3, #7
 8069db8:	f023 0307 	bic.w	r3, r3, #7
 8069dbc:	3308      	adds	r3, #8
 8069dbe:	9303      	str	r3, [sp, #12]
 8069dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8069dc2:	4433      	add	r3, r6
 8069dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8069dc6:	e76a      	b.n	8069c9e <_svfiprintf_r+0x52>
 8069dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8069dcc:	460c      	mov	r4, r1
 8069dce:	2001      	movs	r0, #1
 8069dd0:	e7a8      	b.n	8069d24 <_svfiprintf_r+0xd8>
 8069dd2:	2300      	movs	r3, #0
 8069dd4:	3401      	adds	r4, #1
 8069dd6:	9305      	str	r3, [sp, #20]
 8069dd8:	4619      	mov	r1, r3
 8069dda:	f04f 0c0a 	mov.w	ip, #10
 8069dde:	4620      	mov	r0, r4
 8069de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8069de4:	3a30      	subs	r2, #48	@ 0x30
 8069de6:	2a09      	cmp	r2, #9
 8069de8:	d903      	bls.n	8069df2 <_svfiprintf_r+0x1a6>
 8069dea:	2b00      	cmp	r3, #0
 8069dec:	d0c6      	beq.n	8069d7c <_svfiprintf_r+0x130>
 8069dee:	9105      	str	r1, [sp, #20]
 8069df0:	e7c4      	b.n	8069d7c <_svfiprintf_r+0x130>
 8069df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8069df6:	4604      	mov	r4, r0
 8069df8:	2301      	movs	r3, #1
 8069dfa:	e7f0      	b.n	8069dde <_svfiprintf_r+0x192>
 8069dfc:	ab03      	add	r3, sp, #12
 8069dfe:	9300      	str	r3, [sp, #0]
 8069e00:	462a      	mov	r2, r5
 8069e02:	4b0e      	ldr	r3, [pc, #56]	@ (8069e3c <_svfiprintf_r+0x1f0>)
 8069e04:	a904      	add	r1, sp, #16
 8069e06:	4638      	mov	r0, r7
 8069e08:	f3af 8000 	nop.w
 8069e0c:	1c42      	adds	r2, r0, #1
 8069e0e:	4606      	mov	r6, r0
 8069e10:	d1d6      	bne.n	8069dc0 <_svfiprintf_r+0x174>
 8069e12:	89ab      	ldrh	r3, [r5, #12]
 8069e14:	065b      	lsls	r3, r3, #25
 8069e16:	f53f af2d 	bmi.w	8069c74 <_svfiprintf_r+0x28>
 8069e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8069e1c:	e72c      	b.n	8069c78 <_svfiprintf_r+0x2c>
 8069e1e:	ab03      	add	r3, sp, #12
 8069e20:	9300      	str	r3, [sp, #0]
 8069e22:	462a      	mov	r2, r5
 8069e24:	4b05      	ldr	r3, [pc, #20]	@ (8069e3c <_svfiprintf_r+0x1f0>)
 8069e26:	a904      	add	r1, sp, #16
 8069e28:	4638      	mov	r0, r7
 8069e2a:	f000 f9bb 	bl	806a1a4 <_printf_i>
 8069e2e:	e7ed      	b.n	8069e0c <_svfiprintf_r+0x1c0>
 8069e30:	080725fb 	.word	0x080725fb
 8069e34:	08072605 	.word	0x08072605
 8069e38:	00000000 	.word	0x00000000
 8069e3c:	08069b95 	.word	0x08069b95
 8069e40:	08072601 	.word	0x08072601

08069e44 <__sfputc_r>:
 8069e44:	6893      	ldr	r3, [r2, #8]
 8069e46:	3b01      	subs	r3, #1
 8069e48:	2b00      	cmp	r3, #0
 8069e4a:	b410      	push	{r4}
 8069e4c:	6093      	str	r3, [r2, #8]
 8069e4e:	da08      	bge.n	8069e62 <__sfputc_r+0x1e>
 8069e50:	6994      	ldr	r4, [r2, #24]
 8069e52:	42a3      	cmp	r3, r4
 8069e54:	db01      	blt.n	8069e5a <__sfputc_r+0x16>
 8069e56:	290a      	cmp	r1, #10
 8069e58:	d103      	bne.n	8069e62 <__sfputc_r+0x1e>
 8069e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8069e5e:	f000 bb7d 	b.w	806a55c <__swbuf_r>
 8069e62:	6813      	ldr	r3, [r2, #0]
 8069e64:	1c58      	adds	r0, r3, #1
 8069e66:	6010      	str	r0, [r2, #0]
 8069e68:	7019      	strb	r1, [r3, #0]
 8069e6a:	4608      	mov	r0, r1
 8069e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8069e70:	4770      	bx	lr

08069e72 <__sfputs_r>:
 8069e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8069e74:	4606      	mov	r6, r0
 8069e76:	460f      	mov	r7, r1
 8069e78:	4614      	mov	r4, r2
 8069e7a:	18d5      	adds	r5, r2, r3
 8069e7c:	42ac      	cmp	r4, r5
 8069e7e:	d101      	bne.n	8069e84 <__sfputs_r+0x12>
 8069e80:	2000      	movs	r0, #0
 8069e82:	e007      	b.n	8069e94 <__sfputs_r+0x22>
 8069e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8069e88:	463a      	mov	r2, r7
 8069e8a:	4630      	mov	r0, r6
 8069e8c:	f7ff ffda 	bl	8069e44 <__sfputc_r>
 8069e90:	1c43      	adds	r3, r0, #1
 8069e92:	d1f3      	bne.n	8069e7c <__sfputs_r+0xa>
 8069e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08069e98 <_vfiprintf_r>:
 8069e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8069e9c:	460d      	mov	r5, r1
 8069e9e:	b09d      	sub	sp, #116	@ 0x74
 8069ea0:	4614      	mov	r4, r2
 8069ea2:	4698      	mov	r8, r3
 8069ea4:	4606      	mov	r6, r0
 8069ea6:	b118      	cbz	r0, 8069eb0 <_vfiprintf_r+0x18>
 8069ea8:	6a03      	ldr	r3, [r0, #32]
 8069eaa:	b90b      	cbnz	r3, 8069eb0 <_vfiprintf_r+0x18>
 8069eac:	f7ff fb50 	bl	8069550 <__sinit>
 8069eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8069eb2:	07d9      	lsls	r1, r3, #31
 8069eb4:	d405      	bmi.n	8069ec2 <_vfiprintf_r+0x2a>
 8069eb6:	89ab      	ldrh	r3, [r5, #12]
 8069eb8:	059a      	lsls	r2, r3, #22
 8069eba:	d402      	bmi.n	8069ec2 <_vfiprintf_r+0x2a>
 8069ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8069ebe:	f7ff fd3a 	bl	8069936 <__retarget_lock_acquire_recursive>
 8069ec2:	89ab      	ldrh	r3, [r5, #12]
 8069ec4:	071b      	lsls	r3, r3, #28
 8069ec6:	d501      	bpl.n	8069ecc <_vfiprintf_r+0x34>
 8069ec8:	692b      	ldr	r3, [r5, #16]
 8069eca:	b99b      	cbnz	r3, 8069ef4 <_vfiprintf_r+0x5c>
 8069ecc:	4629      	mov	r1, r5
 8069ece:	4630      	mov	r0, r6
 8069ed0:	f000 fb82 	bl	806a5d8 <__swsetup_r>
 8069ed4:	b170      	cbz	r0, 8069ef4 <_vfiprintf_r+0x5c>
 8069ed6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8069ed8:	07dc      	lsls	r4, r3, #31
 8069eda:	d504      	bpl.n	8069ee6 <_vfiprintf_r+0x4e>
 8069edc:	f04f 30ff 	mov.w	r0, #4294967295
 8069ee0:	b01d      	add	sp, #116	@ 0x74
 8069ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8069ee6:	89ab      	ldrh	r3, [r5, #12]
 8069ee8:	0598      	lsls	r0, r3, #22
 8069eea:	d4f7      	bmi.n	8069edc <_vfiprintf_r+0x44>
 8069eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8069eee:	f7ff fd23 	bl	8069938 <__retarget_lock_release_recursive>
 8069ef2:	e7f3      	b.n	8069edc <_vfiprintf_r+0x44>
 8069ef4:	2300      	movs	r3, #0
 8069ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8069ef8:	2320      	movs	r3, #32
 8069efa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8069efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8069f02:	2330      	movs	r3, #48	@ 0x30
 8069f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 806a0b4 <_vfiprintf_r+0x21c>
 8069f08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8069f0c:	f04f 0901 	mov.w	r9, #1
 8069f10:	4623      	mov	r3, r4
 8069f12:	469a      	mov	sl, r3
 8069f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8069f18:	b10a      	cbz	r2, 8069f1e <_vfiprintf_r+0x86>
 8069f1a:	2a25      	cmp	r2, #37	@ 0x25
 8069f1c:	d1f9      	bne.n	8069f12 <_vfiprintf_r+0x7a>
 8069f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8069f22:	d00b      	beq.n	8069f3c <_vfiprintf_r+0xa4>
 8069f24:	465b      	mov	r3, fp
 8069f26:	4622      	mov	r2, r4
 8069f28:	4629      	mov	r1, r5
 8069f2a:	4630      	mov	r0, r6
 8069f2c:	f7ff ffa1 	bl	8069e72 <__sfputs_r>
 8069f30:	3001      	adds	r0, #1
 8069f32:	f000 80a7 	beq.w	806a084 <_vfiprintf_r+0x1ec>
 8069f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8069f38:	445a      	add	r2, fp
 8069f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8069f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8069f40:	2b00      	cmp	r3, #0
 8069f42:	f000 809f 	beq.w	806a084 <_vfiprintf_r+0x1ec>
 8069f46:	2300      	movs	r3, #0
 8069f48:	f04f 32ff 	mov.w	r2, #4294967295
 8069f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8069f50:	f10a 0a01 	add.w	sl, sl, #1
 8069f54:	9304      	str	r3, [sp, #16]
 8069f56:	9307      	str	r3, [sp, #28]
 8069f58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8069f5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8069f5e:	4654      	mov	r4, sl
 8069f60:	2205      	movs	r2, #5
 8069f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8069f66:	4853      	ldr	r0, [pc, #332]	@ (806a0b4 <_vfiprintf_r+0x21c>)
 8069f68:	f7d6 f9d2 	bl	8040310 <memchr>
 8069f6c:	9a04      	ldr	r2, [sp, #16]
 8069f6e:	b9d8      	cbnz	r0, 8069fa8 <_vfiprintf_r+0x110>
 8069f70:	06d1      	lsls	r1, r2, #27
 8069f72:	bf44      	itt	mi
 8069f74:	2320      	movmi	r3, #32
 8069f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8069f7a:	0713      	lsls	r3, r2, #28
 8069f7c:	bf44      	itt	mi
 8069f7e:	232b      	movmi	r3, #43	@ 0x2b
 8069f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8069f84:	f89a 3000 	ldrb.w	r3, [sl]
 8069f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8069f8a:	d015      	beq.n	8069fb8 <_vfiprintf_r+0x120>
 8069f8c:	9a07      	ldr	r2, [sp, #28]
 8069f8e:	4654      	mov	r4, sl
 8069f90:	2000      	movs	r0, #0
 8069f92:	f04f 0c0a 	mov.w	ip, #10
 8069f96:	4621      	mov	r1, r4
 8069f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8069f9c:	3b30      	subs	r3, #48	@ 0x30
 8069f9e:	2b09      	cmp	r3, #9
 8069fa0:	d94b      	bls.n	806a03a <_vfiprintf_r+0x1a2>
 8069fa2:	b1b0      	cbz	r0, 8069fd2 <_vfiprintf_r+0x13a>
 8069fa4:	9207      	str	r2, [sp, #28]
 8069fa6:	e014      	b.n	8069fd2 <_vfiprintf_r+0x13a>
 8069fa8:	eba0 0308 	sub.w	r3, r0, r8
 8069fac:	fa09 f303 	lsl.w	r3, r9, r3
 8069fb0:	4313      	orrs	r3, r2
 8069fb2:	9304      	str	r3, [sp, #16]
 8069fb4:	46a2      	mov	sl, r4
 8069fb6:	e7d2      	b.n	8069f5e <_vfiprintf_r+0xc6>
 8069fb8:	9b03      	ldr	r3, [sp, #12]
 8069fba:	1d19      	adds	r1, r3, #4
 8069fbc:	681b      	ldr	r3, [r3, #0]
 8069fbe:	9103      	str	r1, [sp, #12]
 8069fc0:	2b00      	cmp	r3, #0
 8069fc2:	bfbb      	ittet	lt
 8069fc4:	425b      	neglt	r3, r3
 8069fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8069fca:	9307      	strge	r3, [sp, #28]
 8069fcc:	9307      	strlt	r3, [sp, #28]
 8069fce:	bfb8      	it	lt
 8069fd0:	9204      	strlt	r2, [sp, #16]
 8069fd2:	7823      	ldrb	r3, [r4, #0]
 8069fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8069fd6:	d10a      	bne.n	8069fee <_vfiprintf_r+0x156>
 8069fd8:	7863      	ldrb	r3, [r4, #1]
 8069fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8069fdc:	d132      	bne.n	806a044 <_vfiprintf_r+0x1ac>
 8069fde:	9b03      	ldr	r3, [sp, #12]
 8069fe0:	1d1a      	adds	r2, r3, #4
 8069fe2:	681b      	ldr	r3, [r3, #0]
 8069fe4:	9203      	str	r2, [sp, #12]
 8069fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8069fea:	3402      	adds	r4, #2
 8069fec:	9305      	str	r3, [sp, #20]
 8069fee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 806a0c4 <_vfiprintf_r+0x22c>
 8069ff2:	7821      	ldrb	r1, [r4, #0]
 8069ff4:	2203      	movs	r2, #3
 8069ff6:	4650      	mov	r0, sl
 8069ff8:	f7d6 f98a 	bl	8040310 <memchr>
 8069ffc:	b138      	cbz	r0, 806a00e <_vfiprintf_r+0x176>
 8069ffe:	9b04      	ldr	r3, [sp, #16]
 806a000:	eba0 000a 	sub.w	r0, r0, sl
 806a004:	2240      	movs	r2, #64	@ 0x40
 806a006:	4082      	lsls	r2, r0
 806a008:	4313      	orrs	r3, r2
 806a00a:	3401      	adds	r4, #1
 806a00c:	9304      	str	r3, [sp, #16]
 806a00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 806a012:	4829      	ldr	r0, [pc, #164]	@ (806a0b8 <_vfiprintf_r+0x220>)
 806a014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 806a018:	2206      	movs	r2, #6
 806a01a:	f7d6 f979 	bl	8040310 <memchr>
 806a01e:	2800      	cmp	r0, #0
 806a020:	d03f      	beq.n	806a0a2 <_vfiprintf_r+0x20a>
 806a022:	4b26      	ldr	r3, [pc, #152]	@ (806a0bc <_vfiprintf_r+0x224>)
 806a024:	bb1b      	cbnz	r3, 806a06e <_vfiprintf_r+0x1d6>
 806a026:	9b03      	ldr	r3, [sp, #12]
 806a028:	3307      	adds	r3, #7
 806a02a:	f023 0307 	bic.w	r3, r3, #7
 806a02e:	3308      	adds	r3, #8
 806a030:	9303      	str	r3, [sp, #12]
 806a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 806a034:	443b      	add	r3, r7
 806a036:	9309      	str	r3, [sp, #36]	@ 0x24
 806a038:	e76a      	b.n	8069f10 <_vfiprintf_r+0x78>
 806a03a:	fb0c 3202 	mla	r2, ip, r2, r3
 806a03e:	460c      	mov	r4, r1
 806a040:	2001      	movs	r0, #1
 806a042:	e7a8      	b.n	8069f96 <_vfiprintf_r+0xfe>
 806a044:	2300      	movs	r3, #0
 806a046:	3401      	adds	r4, #1
 806a048:	9305      	str	r3, [sp, #20]
 806a04a:	4619      	mov	r1, r3
 806a04c:	f04f 0c0a 	mov.w	ip, #10
 806a050:	4620      	mov	r0, r4
 806a052:	f810 2b01 	ldrb.w	r2, [r0], #1
 806a056:	3a30      	subs	r2, #48	@ 0x30
 806a058:	2a09      	cmp	r2, #9
 806a05a:	d903      	bls.n	806a064 <_vfiprintf_r+0x1cc>
 806a05c:	2b00      	cmp	r3, #0
 806a05e:	d0c6      	beq.n	8069fee <_vfiprintf_r+0x156>
 806a060:	9105      	str	r1, [sp, #20]
 806a062:	e7c4      	b.n	8069fee <_vfiprintf_r+0x156>
 806a064:	fb0c 2101 	mla	r1, ip, r1, r2
 806a068:	4604      	mov	r4, r0
 806a06a:	2301      	movs	r3, #1
 806a06c:	e7f0      	b.n	806a050 <_vfiprintf_r+0x1b8>
 806a06e:	ab03      	add	r3, sp, #12
 806a070:	9300      	str	r3, [sp, #0]
 806a072:	462a      	mov	r2, r5
 806a074:	4b12      	ldr	r3, [pc, #72]	@ (806a0c0 <_vfiprintf_r+0x228>)
 806a076:	a904      	add	r1, sp, #16
 806a078:	4630      	mov	r0, r6
 806a07a:	f3af 8000 	nop.w
 806a07e:	4607      	mov	r7, r0
 806a080:	1c78      	adds	r0, r7, #1
 806a082:	d1d6      	bne.n	806a032 <_vfiprintf_r+0x19a>
 806a084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 806a086:	07d9      	lsls	r1, r3, #31
 806a088:	d405      	bmi.n	806a096 <_vfiprintf_r+0x1fe>
 806a08a:	89ab      	ldrh	r3, [r5, #12]
 806a08c:	059a      	lsls	r2, r3, #22
 806a08e:	d402      	bmi.n	806a096 <_vfiprintf_r+0x1fe>
 806a090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 806a092:	f7ff fc51 	bl	8069938 <__retarget_lock_release_recursive>
 806a096:	89ab      	ldrh	r3, [r5, #12]
 806a098:	065b      	lsls	r3, r3, #25
 806a09a:	f53f af1f 	bmi.w	8069edc <_vfiprintf_r+0x44>
 806a09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 806a0a0:	e71e      	b.n	8069ee0 <_vfiprintf_r+0x48>
 806a0a2:	ab03      	add	r3, sp, #12
 806a0a4:	9300      	str	r3, [sp, #0]
 806a0a6:	462a      	mov	r2, r5
 806a0a8:	4b05      	ldr	r3, [pc, #20]	@ (806a0c0 <_vfiprintf_r+0x228>)
 806a0aa:	a904      	add	r1, sp, #16
 806a0ac:	4630      	mov	r0, r6
 806a0ae:	f000 f879 	bl	806a1a4 <_printf_i>
 806a0b2:	e7e4      	b.n	806a07e <_vfiprintf_r+0x1e6>
 806a0b4:	080725fb 	.word	0x080725fb
 806a0b8:	08072605 	.word	0x08072605
 806a0bc:	00000000 	.word	0x00000000
 806a0c0:	08069e73 	.word	0x08069e73
 806a0c4:	08072601 	.word	0x08072601

0806a0c8 <_printf_common>:
 806a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 806a0cc:	4616      	mov	r6, r2
 806a0ce:	4698      	mov	r8, r3
 806a0d0:	688a      	ldr	r2, [r1, #8]
 806a0d2:	690b      	ldr	r3, [r1, #16]
 806a0d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 806a0d8:	4293      	cmp	r3, r2
 806a0da:	bfb8      	it	lt
 806a0dc:	4613      	movlt	r3, r2
 806a0de:	6033      	str	r3, [r6, #0]
 806a0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 806a0e4:	4607      	mov	r7, r0
 806a0e6:	460c      	mov	r4, r1
 806a0e8:	b10a      	cbz	r2, 806a0ee <_printf_common+0x26>
 806a0ea:	3301      	adds	r3, #1
 806a0ec:	6033      	str	r3, [r6, #0]
 806a0ee:	6823      	ldr	r3, [r4, #0]
 806a0f0:	0699      	lsls	r1, r3, #26
 806a0f2:	bf42      	ittt	mi
 806a0f4:	6833      	ldrmi	r3, [r6, #0]
 806a0f6:	3302      	addmi	r3, #2
 806a0f8:	6033      	strmi	r3, [r6, #0]
 806a0fa:	6825      	ldr	r5, [r4, #0]
 806a0fc:	f015 0506 	ands.w	r5, r5, #6
 806a100:	d106      	bne.n	806a110 <_printf_common+0x48>
 806a102:	f104 0a19 	add.w	sl, r4, #25
 806a106:	68e3      	ldr	r3, [r4, #12]
 806a108:	6832      	ldr	r2, [r6, #0]
 806a10a:	1a9b      	subs	r3, r3, r2
 806a10c:	42ab      	cmp	r3, r5
 806a10e:	dc26      	bgt.n	806a15e <_printf_common+0x96>
 806a110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 806a114:	6822      	ldr	r2, [r4, #0]
 806a116:	3b00      	subs	r3, #0
 806a118:	bf18      	it	ne
 806a11a:	2301      	movne	r3, #1
 806a11c:	0692      	lsls	r2, r2, #26
 806a11e:	d42b      	bmi.n	806a178 <_printf_common+0xb0>
 806a120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 806a124:	4641      	mov	r1, r8
 806a126:	4638      	mov	r0, r7
 806a128:	47c8      	blx	r9
 806a12a:	3001      	adds	r0, #1
 806a12c:	d01e      	beq.n	806a16c <_printf_common+0xa4>
 806a12e:	6823      	ldr	r3, [r4, #0]
 806a130:	6922      	ldr	r2, [r4, #16]
 806a132:	f003 0306 	and.w	r3, r3, #6
 806a136:	2b04      	cmp	r3, #4
 806a138:	bf02      	ittt	eq
 806a13a:	68e5      	ldreq	r5, [r4, #12]
 806a13c:	6833      	ldreq	r3, [r6, #0]
 806a13e:	1aed      	subeq	r5, r5, r3
 806a140:	68a3      	ldr	r3, [r4, #8]
 806a142:	bf0c      	ite	eq
 806a144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 806a148:	2500      	movne	r5, #0
 806a14a:	4293      	cmp	r3, r2
 806a14c:	bfc4      	itt	gt
 806a14e:	1a9b      	subgt	r3, r3, r2
 806a150:	18ed      	addgt	r5, r5, r3
 806a152:	2600      	movs	r6, #0
 806a154:	341a      	adds	r4, #26
 806a156:	42b5      	cmp	r5, r6
 806a158:	d11a      	bne.n	806a190 <_printf_common+0xc8>
 806a15a:	2000      	movs	r0, #0
 806a15c:	e008      	b.n	806a170 <_printf_common+0xa8>
 806a15e:	2301      	movs	r3, #1
 806a160:	4652      	mov	r2, sl
 806a162:	4641      	mov	r1, r8
 806a164:	4638      	mov	r0, r7
 806a166:	47c8      	blx	r9
 806a168:	3001      	adds	r0, #1
 806a16a:	d103      	bne.n	806a174 <_printf_common+0xac>
 806a16c:	f04f 30ff 	mov.w	r0, #4294967295
 806a170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806a174:	3501      	adds	r5, #1
 806a176:	e7c6      	b.n	806a106 <_printf_common+0x3e>
 806a178:	18e1      	adds	r1, r4, r3
 806a17a:	1c5a      	adds	r2, r3, #1
 806a17c:	2030      	movs	r0, #48	@ 0x30
 806a17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 806a182:	4422      	add	r2, r4
 806a184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 806a188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 806a18c:	3302      	adds	r3, #2
 806a18e:	e7c7      	b.n	806a120 <_printf_common+0x58>
 806a190:	2301      	movs	r3, #1
 806a192:	4622      	mov	r2, r4
 806a194:	4641      	mov	r1, r8
 806a196:	4638      	mov	r0, r7
 806a198:	47c8      	blx	r9
 806a19a:	3001      	adds	r0, #1
 806a19c:	d0e6      	beq.n	806a16c <_printf_common+0xa4>
 806a19e:	3601      	adds	r6, #1
 806a1a0:	e7d9      	b.n	806a156 <_printf_common+0x8e>
	...

0806a1a4 <_printf_i>:
 806a1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 806a1a8:	7e0f      	ldrb	r7, [r1, #24]
 806a1aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 806a1ac:	2f78      	cmp	r7, #120	@ 0x78
 806a1ae:	4691      	mov	r9, r2
 806a1b0:	4680      	mov	r8, r0
 806a1b2:	460c      	mov	r4, r1
 806a1b4:	469a      	mov	sl, r3
 806a1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 806a1ba:	d807      	bhi.n	806a1cc <_printf_i+0x28>
 806a1bc:	2f62      	cmp	r7, #98	@ 0x62
 806a1be:	d80a      	bhi.n	806a1d6 <_printf_i+0x32>
 806a1c0:	2f00      	cmp	r7, #0
 806a1c2:	f000 80d1 	beq.w	806a368 <_printf_i+0x1c4>
 806a1c6:	2f58      	cmp	r7, #88	@ 0x58
 806a1c8:	f000 80b8 	beq.w	806a33c <_printf_i+0x198>
 806a1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 806a1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 806a1d4:	e03a      	b.n	806a24c <_printf_i+0xa8>
 806a1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 806a1da:	2b15      	cmp	r3, #21
 806a1dc:	d8f6      	bhi.n	806a1cc <_printf_i+0x28>
 806a1de:	a101      	add	r1, pc, #4	@ (adr r1, 806a1e4 <_printf_i+0x40>)
 806a1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 806a1e4:	0806a23d 	.word	0x0806a23d
 806a1e8:	0806a251 	.word	0x0806a251
 806a1ec:	0806a1cd 	.word	0x0806a1cd
 806a1f0:	0806a1cd 	.word	0x0806a1cd
 806a1f4:	0806a1cd 	.word	0x0806a1cd
 806a1f8:	0806a1cd 	.word	0x0806a1cd
 806a1fc:	0806a251 	.word	0x0806a251
 806a200:	0806a1cd 	.word	0x0806a1cd
 806a204:	0806a1cd 	.word	0x0806a1cd
 806a208:	0806a1cd 	.word	0x0806a1cd
 806a20c:	0806a1cd 	.word	0x0806a1cd
 806a210:	0806a34f 	.word	0x0806a34f
 806a214:	0806a27b 	.word	0x0806a27b
 806a218:	0806a309 	.word	0x0806a309
 806a21c:	0806a1cd 	.word	0x0806a1cd
 806a220:	0806a1cd 	.word	0x0806a1cd
 806a224:	0806a371 	.word	0x0806a371
 806a228:	0806a1cd 	.word	0x0806a1cd
 806a22c:	0806a27b 	.word	0x0806a27b
 806a230:	0806a1cd 	.word	0x0806a1cd
 806a234:	0806a1cd 	.word	0x0806a1cd
 806a238:	0806a311 	.word	0x0806a311
 806a23c:	6833      	ldr	r3, [r6, #0]
 806a23e:	1d1a      	adds	r2, r3, #4
 806a240:	681b      	ldr	r3, [r3, #0]
 806a242:	6032      	str	r2, [r6, #0]
 806a244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 806a248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 806a24c:	2301      	movs	r3, #1
 806a24e:	e09c      	b.n	806a38a <_printf_i+0x1e6>
 806a250:	6833      	ldr	r3, [r6, #0]
 806a252:	6820      	ldr	r0, [r4, #0]
 806a254:	1d19      	adds	r1, r3, #4
 806a256:	6031      	str	r1, [r6, #0]
 806a258:	0606      	lsls	r6, r0, #24
 806a25a:	d501      	bpl.n	806a260 <_printf_i+0xbc>
 806a25c:	681d      	ldr	r5, [r3, #0]
 806a25e:	e003      	b.n	806a268 <_printf_i+0xc4>
 806a260:	0645      	lsls	r5, r0, #25
 806a262:	d5fb      	bpl.n	806a25c <_printf_i+0xb8>
 806a264:	f9b3 5000 	ldrsh.w	r5, [r3]
 806a268:	2d00      	cmp	r5, #0
 806a26a:	da03      	bge.n	806a274 <_printf_i+0xd0>
 806a26c:	232d      	movs	r3, #45	@ 0x2d
 806a26e:	426d      	negs	r5, r5
 806a270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 806a274:	4858      	ldr	r0, [pc, #352]	@ (806a3d8 <_printf_i+0x234>)
 806a276:	230a      	movs	r3, #10
 806a278:	e011      	b.n	806a29e <_printf_i+0xfa>
 806a27a:	6821      	ldr	r1, [r4, #0]
 806a27c:	6833      	ldr	r3, [r6, #0]
 806a27e:	0608      	lsls	r0, r1, #24
 806a280:	f853 5b04 	ldr.w	r5, [r3], #4
 806a284:	d402      	bmi.n	806a28c <_printf_i+0xe8>
 806a286:	0649      	lsls	r1, r1, #25
 806a288:	bf48      	it	mi
 806a28a:	b2ad      	uxthmi	r5, r5
 806a28c:	2f6f      	cmp	r7, #111	@ 0x6f
 806a28e:	4852      	ldr	r0, [pc, #328]	@ (806a3d8 <_printf_i+0x234>)
 806a290:	6033      	str	r3, [r6, #0]
 806a292:	bf14      	ite	ne
 806a294:	230a      	movne	r3, #10
 806a296:	2308      	moveq	r3, #8
 806a298:	2100      	movs	r1, #0
 806a29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 806a29e:	6866      	ldr	r6, [r4, #4]
 806a2a0:	60a6      	str	r6, [r4, #8]
 806a2a2:	2e00      	cmp	r6, #0
 806a2a4:	db05      	blt.n	806a2b2 <_printf_i+0x10e>
 806a2a6:	6821      	ldr	r1, [r4, #0]
 806a2a8:	432e      	orrs	r6, r5
 806a2aa:	f021 0104 	bic.w	r1, r1, #4
 806a2ae:	6021      	str	r1, [r4, #0]
 806a2b0:	d04b      	beq.n	806a34a <_printf_i+0x1a6>
 806a2b2:	4616      	mov	r6, r2
 806a2b4:	fbb5 f1f3 	udiv	r1, r5, r3
 806a2b8:	fb03 5711 	mls	r7, r3, r1, r5
 806a2bc:	5dc7      	ldrb	r7, [r0, r7]
 806a2be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 806a2c2:	462f      	mov	r7, r5
 806a2c4:	42bb      	cmp	r3, r7
 806a2c6:	460d      	mov	r5, r1
 806a2c8:	d9f4      	bls.n	806a2b4 <_printf_i+0x110>
 806a2ca:	2b08      	cmp	r3, #8
 806a2cc:	d10b      	bne.n	806a2e6 <_printf_i+0x142>
 806a2ce:	6823      	ldr	r3, [r4, #0]
 806a2d0:	07df      	lsls	r7, r3, #31
 806a2d2:	d508      	bpl.n	806a2e6 <_printf_i+0x142>
 806a2d4:	6923      	ldr	r3, [r4, #16]
 806a2d6:	6861      	ldr	r1, [r4, #4]
 806a2d8:	4299      	cmp	r1, r3
 806a2da:	bfde      	ittt	le
 806a2dc:	2330      	movle	r3, #48	@ 0x30
 806a2de:	f806 3c01 	strble.w	r3, [r6, #-1]
 806a2e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 806a2e6:	1b92      	subs	r2, r2, r6
 806a2e8:	6122      	str	r2, [r4, #16]
 806a2ea:	f8cd a000 	str.w	sl, [sp]
 806a2ee:	464b      	mov	r3, r9
 806a2f0:	aa03      	add	r2, sp, #12
 806a2f2:	4621      	mov	r1, r4
 806a2f4:	4640      	mov	r0, r8
 806a2f6:	f7ff fee7 	bl	806a0c8 <_printf_common>
 806a2fa:	3001      	adds	r0, #1
 806a2fc:	d14a      	bne.n	806a394 <_printf_i+0x1f0>
 806a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 806a302:	b004      	add	sp, #16
 806a304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806a308:	6823      	ldr	r3, [r4, #0]
 806a30a:	f043 0320 	orr.w	r3, r3, #32
 806a30e:	6023      	str	r3, [r4, #0]
 806a310:	4832      	ldr	r0, [pc, #200]	@ (806a3dc <_printf_i+0x238>)
 806a312:	2778      	movs	r7, #120	@ 0x78
 806a314:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 806a318:	6823      	ldr	r3, [r4, #0]
 806a31a:	6831      	ldr	r1, [r6, #0]
 806a31c:	061f      	lsls	r7, r3, #24
 806a31e:	f851 5b04 	ldr.w	r5, [r1], #4
 806a322:	d402      	bmi.n	806a32a <_printf_i+0x186>
 806a324:	065f      	lsls	r7, r3, #25
 806a326:	bf48      	it	mi
 806a328:	b2ad      	uxthmi	r5, r5
 806a32a:	6031      	str	r1, [r6, #0]
 806a32c:	07d9      	lsls	r1, r3, #31
 806a32e:	bf44      	itt	mi
 806a330:	f043 0320 	orrmi.w	r3, r3, #32
 806a334:	6023      	strmi	r3, [r4, #0]
 806a336:	b11d      	cbz	r5, 806a340 <_printf_i+0x19c>
 806a338:	2310      	movs	r3, #16
 806a33a:	e7ad      	b.n	806a298 <_printf_i+0xf4>
 806a33c:	4826      	ldr	r0, [pc, #152]	@ (806a3d8 <_printf_i+0x234>)
 806a33e:	e7e9      	b.n	806a314 <_printf_i+0x170>
 806a340:	6823      	ldr	r3, [r4, #0]
 806a342:	f023 0320 	bic.w	r3, r3, #32
 806a346:	6023      	str	r3, [r4, #0]
 806a348:	e7f6      	b.n	806a338 <_printf_i+0x194>
 806a34a:	4616      	mov	r6, r2
 806a34c:	e7bd      	b.n	806a2ca <_printf_i+0x126>
 806a34e:	6833      	ldr	r3, [r6, #0]
 806a350:	6825      	ldr	r5, [r4, #0]
 806a352:	6961      	ldr	r1, [r4, #20]
 806a354:	1d18      	adds	r0, r3, #4
 806a356:	6030      	str	r0, [r6, #0]
 806a358:	062e      	lsls	r6, r5, #24
 806a35a:	681b      	ldr	r3, [r3, #0]
 806a35c:	d501      	bpl.n	806a362 <_printf_i+0x1be>
 806a35e:	6019      	str	r1, [r3, #0]
 806a360:	e002      	b.n	806a368 <_printf_i+0x1c4>
 806a362:	0668      	lsls	r0, r5, #25
 806a364:	d5fb      	bpl.n	806a35e <_printf_i+0x1ba>
 806a366:	8019      	strh	r1, [r3, #0]
 806a368:	2300      	movs	r3, #0
 806a36a:	6123      	str	r3, [r4, #16]
 806a36c:	4616      	mov	r6, r2
 806a36e:	e7bc      	b.n	806a2ea <_printf_i+0x146>
 806a370:	6833      	ldr	r3, [r6, #0]
 806a372:	1d1a      	adds	r2, r3, #4
 806a374:	6032      	str	r2, [r6, #0]
 806a376:	681e      	ldr	r6, [r3, #0]
 806a378:	6862      	ldr	r2, [r4, #4]
 806a37a:	2100      	movs	r1, #0
 806a37c:	4630      	mov	r0, r6
 806a37e:	f7d5 ffc7 	bl	8040310 <memchr>
 806a382:	b108      	cbz	r0, 806a388 <_printf_i+0x1e4>
 806a384:	1b80      	subs	r0, r0, r6
 806a386:	6060      	str	r0, [r4, #4]
 806a388:	6863      	ldr	r3, [r4, #4]
 806a38a:	6123      	str	r3, [r4, #16]
 806a38c:	2300      	movs	r3, #0
 806a38e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 806a392:	e7aa      	b.n	806a2ea <_printf_i+0x146>
 806a394:	6923      	ldr	r3, [r4, #16]
 806a396:	4632      	mov	r2, r6
 806a398:	4649      	mov	r1, r9
 806a39a:	4640      	mov	r0, r8
 806a39c:	47d0      	blx	sl
 806a39e:	3001      	adds	r0, #1
 806a3a0:	d0ad      	beq.n	806a2fe <_printf_i+0x15a>
 806a3a2:	6823      	ldr	r3, [r4, #0]
 806a3a4:	079b      	lsls	r3, r3, #30
 806a3a6:	d413      	bmi.n	806a3d0 <_printf_i+0x22c>
 806a3a8:	68e0      	ldr	r0, [r4, #12]
 806a3aa:	9b03      	ldr	r3, [sp, #12]
 806a3ac:	4298      	cmp	r0, r3
 806a3ae:	bfb8      	it	lt
 806a3b0:	4618      	movlt	r0, r3
 806a3b2:	e7a6      	b.n	806a302 <_printf_i+0x15e>
 806a3b4:	2301      	movs	r3, #1
 806a3b6:	4632      	mov	r2, r6
 806a3b8:	4649      	mov	r1, r9
 806a3ba:	4640      	mov	r0, r8
 806a3bc:	47d0      	blx	sl
 806a3be:	3001      	adds	r0, #1
 806a3c0:	d09d      	beq.n	806a2fe <_printf_i+0x15a>
 806a3c2:	3501      	adds	r5, #1
 806a3c4:	68e3      	ldr	r3, [r4, #12]
 806a3c6:	9903      	ldr	r1, [sp, #12]
 806a3c8:	1a5b      	subs	r3, r3, r1
 806a3ca:	42ab      	cmp	r3, r5
 806a3cc:	dcf2      	bgt.n	806a3b4 <_printf_i+0x210>
 806a3ce:	e7eb      	b.n	806a3a8 <_printf_i+0x204>
 806a3d0:	2500      	movs	r5, #0
 806a3d2:	f104 0619 	add.w	r6, r4, #25
 806a3d6:	e7f5      	b.n	806a3c4 <_printf_i+0x220>
 806a3d8:	0807260c 	.word	0x0807260c
 806a3dc:	0807261d 	.word	0x0807261d

0806a3e0 <__sflush_r>:
 806a3e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 806a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 806a3e8:	0716      	lsls	r6, r2, #28
 806a3ea:	4605      	mov	r5, r0
 806a3ec:	460c      	mov	r4, r1
 806a3ee:	d454      	bmi.n	806a49a <__sflush_r+0xba>
 806a3f0:	684b      	ldr	r3, [r1, #4]
 806a3f2:	2b00      	cmp	r3, #0
 806a3f4:	dc02      	bgt.n	806a3fc <__sflush_r+0x1c>
 806a3f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 806a3f8:	2b00      	cmp	r3, #0
 806a3fa:	dd48      	ble.n	806a48e <__sflush_r+0xae>
 806a3fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 806a3fe:	2e00      	cmp	r6, #0
 806a400:	d045      	beq.n	806a48e <__sflush_r+0xae>
 806a402:	2300      	movs	r3, #0
 806a404:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 806a408:	682f      	ldr	r7, [r5, #0]
 806a40a:	6a21      	ldr	r1, [r4, #32]
 806a40c:	602b      	str	r3, [r5, #0]
 806a40e:	d030      	beq.n	806a472 <__sflush_r+0x92>
 806a410:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 806a412:	89a3      	ldrh	r3, [r4, #12]
 806a414:	0759      	lsls	r1, r3, #29
 806a416:	d505      	bpl.n	806a424 <__sflush_r+0x44>
 806a418:	6863      	ldr	r3, [r4, #4]
 806a41a:	1ad2      	subs	r2, r2, r3
 806a41c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 806a41e:	b10b      	cbz	r3, 806a424 <__sflush_r+0x44>
 806a420:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 806a422:	1ad2      	subs	r2, r2, r3
 806a424:	2300      	movs	r3, #0
 806a426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 806a428:	6a21      	ldr	r1, [r4, #32]
 806a42a:	4628      	mov	r0, r5
 806a42c:	47b0      	blx	r6
 806a42e:	1c43      	adds	r3, r0, #1
 806a430:	89a3      	ldrh	r3, [r4, #12]
 806a432:	d106      	bne.n	806a442 <__sflush_r+0x62>
 806a434:	6829      	ldr	r1, [r5, #0]
 806a436:	291d      	cmp	r1, #29
 806a438:	d82b      	bhi.n	806a492 <__sflush_r+0xb2>
 806a43a:	4a2a      	ldr	r2, [pc, #168]	@ (806a4e4 <__sflush_r+0x104>)
 806a43c:	40ca      	lsrs	r2, r1
 806a43e:	07d6      	lsls	r6, r2, #31
 806a440:	d527      	bpl.n	806a492 <__sflush_r+0xb2>
 806a442:	2200      	movs	r2, #0
 806a444:	6062      	str	r2, [r4, #4]
 806a446:	04d9      	lsls	r1, r3, #19
 806a448:	6922      	ldr	r2, [r4, #16]
 806a44a:	6022      	str	r2, [r4, #0]
 806a44c:	d504      	bpl.n	806a458 <__sflush_r+0x78>
 806a44e:	1c42      	adds	r2, r0, #1
 806a450:	d101      	bne.n	806a456 <__sflush_r+0x76>
 806a452:	682b      	ldr	r3, [r5, #0]
 806a454:	b903      	cbnz	r3, 806a458 <__sflush_r+0x78>
 806a456:	6560      	str	r0, [r4, #84]	@ 0x54
 806a458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 806a45a:	602f      	str	r7, [r5, #0]
 806a45c:	b1b9      	cbz	r1, 806a48e <__sflush_r+0xae>
 806a45e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 806a462:	4299      	cmp	r1, r3
 806a464:	d002      	beq.n	806a46c <__sflush_r+0x8c>
 806a466:	4628      	mov	r0, r5
 806a468:	f7ff fa94 	bl	8069994 <_free_r>
 806a46c:	2300      	movs	r3, #0
 806a46e:	6363      	str	r3, [r4, #52]	@ 0x34
 806a470:	e00d      	b.n	806a48e <__sflush_r+0xae>
 806a472:	2301      	movs	r3, #1
 806a474:	4628      	mov	r0, r5
 806a476:	47b0      	blx	r6
 806a478:	4602      	mov	r2, r0
 806a47a:	1c50      	adds	r0, r2, #1
 806a47c:	d1c9      	bne.n	806a412 <__sflush_r+0x32>
 806a47e:	682b      	ldr	r3, [r5, #0]
 806a480:	2b00      	cmp	r3, #0
 806a482:	d0c6      	beq.n	806a412 <__sflush_r+0x32>
 806a484:	2b1d      	cmp	r3, #29
 806a486:	d001      	beq.n	806a48c <__sflush_r+0xac>
 806a488:	2b16      	cmp	r3, #22
 806a48a:	d11e      	bne.n	806a4ca <__sflush_r+0xea>
 806a48c:	602f      	str	r7, [r5, #0]
 806a48e:	2000      	movs	r0, #0
 806a490:	e022      	b.n	806a4d8 <__sflush_r+0xf8>
 806a492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 806a496:	b21b      	sxth	r3, r3
 806a498:	e01b      	b.n	806a4d2 <__sflush_r+0xf2>
 806a49a:	690f      	ldr	r7, [r1, #16]
 806a49c:	2f00      	cmp	r7, #0
 806a49e:	d0f6      	beq.n	806a48e <__sflush_r+0xae>
 806a4a0:	0793      	lsls	r3, r2, #30
 806a4a2:	680e      	ldr	r6, [r1, #0]
 806a4a4:	bf08      	it	eq
 806a4a6:	694b      	ldreq	r3, [r1, #20]
 806a4a8:	600f      	str	r7, [r1, #0]
 806a4aa:	bf18      	it	ne
 806a4ac:	2300      	movne	r3, #0
 806a4ae:	eba6 0807 	sub.w	r8, r6, r7
 806a4b2:	608b      	str	r3, [r1, #8]
 806a4b4:	f1b8 0f00 	cmp.w	r8, #0
 806a4b8:	dde9      	ble.n	806a48e <__sflush_r+0xae>
 806a4ba:	6a21      	ldr	r1, [r4, #32]
 806a4bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 806a4be:	4643      	mov	r3, r8
 806a4c0:	463a      	mov	r2, r7
 806a4c2:	4628      	mov	r0, r5
 806a4c4:	47b0      	blx	r6
 806a4c6:	2800      	cmp	r0, #0
 806a4c8:	dc08      	bgt.n	806a4dc <__sflush_r+0xfc>
 806a4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 806a4ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 806a4d2:	81a3      	strh	r3, [r4, #12]
 806a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 806a4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 806a4dc:	4407      	add	r7, r0
 806a4de:	eba8 0800 	sub.w	r8, r8, r0
 806a4e2:	e7e7      	b.n	806a4b4 <__sflush_r+0xd4>
 806a4e4:	20400001 	.word	0x20400001

0806a4e8 <_fflush_r>:
 806a4e8:	b538      	push	{r3, r4, r5, lr}
 806a4ea:	690b      	ldr	r3, [r1, #16]
 806a4ec:	4605      	mov	r5, r0
 806a4ee:	460c      	mov	r4, r1
 806a4f0:	b913      	cbnz	r3, 806a4f8 <_fflush_r+0x10>
 806a4f2:	2500      	movs	r5, #0
 806a4f4:	4628      	mov	r0, r5
 806a4f6:	bd38      	pop	{r3, r4, r5, pc}
 806a4f8:	b118      	cbz	r0, 806a502 <_fflush_r+0x1a>
 806a4fa:	6a03      	ldr	r3, [r0, #32]
 806a4fc:	b90b      	cbnz	r3, 806a502 <_fflush_r+0x1a>
 806a4fe:	f7ff f827 	bl	8069550 <__sinit>
 806a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 806a506:	2b00      	cmp	r3, #0
 806a508:	d0f3      	beq.n	806a4f2 <_fflush_r+0xa>
 806a50a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 806a50c:	07d0      	lsls	r0, r2, #31
 806a50e:	d404      	bmi.n	806a51a <_fflush_r+0x32>
 806a510:	0599      	lsls	r1, r3, #22
 806a512:	d402      	bmi.n	806a51a <_fflush_r+0x32>
 806a514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 806a516:	f7ff fa0e 	bl	8069936 <__retarget_lock_acquire_recursive>
 806a51a:	4628      	mov	r0, r5
 806a51c:	4621      	mov	r1, r4
 806a51e:	f7ff ff5f 	bl	806a3e0 <__sflush_r>
 806a522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 806a524:	07da      	lsls	r2, r3, #31
 806a526:	4605      	mov	r5, r0
 806a528:	d4e4      	bmi.n	806a4f4 <_fflush_r+0xc>
 806a52a:	89a3      	ldrh	r3, [r4, #12]
 806a52c:	059b      	lsls	r3, r3, #22
 806a52e:	d4e1      	bmi.n	806a4f4 <_fflush_r+0xc>
 806a530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 806a532:	f7ff fa01 	bl	8069938 <__retarget_lock_release_recursive>
 806a536:	e7dd      	b.n	806a4f4 <_fflush_r+0xc>

0806a538 <fiprintf>:
 806a538:	b40e      	push	{r1, r2, r3}
 806a53a:	b503      	push	{r0, r1, lr}
 806a53c:	4601      	mov	r1, r0
 806a53e:	ab03      	add	r3, sp, #12
 806a540:	4805      	ldr	r0, [pc, #20]	@ (806a558 <fiprintf+0x20>)
 806a542:	f853 2b04 	ldr.w	r2, [r3], #4
 806a546:	6800      	ldr	r0, [r0, #0]
 806a548:	9301      	str	r3, [sp, #4]
 806a54a:	f7ff fca5 	bl	8069e98 <_vfiprintf_r>
 806a54e:	b002      	add	sp, #8
 806a550:	f85d eb04 	ldr.w	lr, [sp], #4
 806a554:	b003      	add	sp, #12
 806a556:	4770      	bx	lr
 806a558:	24014a18 	.word	0x24014a18

0806a55c <__swbuf_r>:
 806a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806a55e:	460e      	mov	r6, r1
 806a560:	4614      	mov	r4, r2
 806a562:	4605      	mov	r5, r0
 806a564:	b118      	cbz	r0, 806a56e <__swbuf_r+0x12>
 806a566:	6a03      	ldr	r3, [r0, #32]
 806a568:	b90b      	cbnz	r3, 806a56e <__swbuf_r+0x12>
 806a56a:	f7fe fff1 	bl	8069550 <__sinit>
 806a56e:	69a3      	ldr	r3, [r4, #24]
 806a570:	60a3      	str	r3, [r4, #8]
 806a572:	89a3      	ldrh	r3, [r4, #12]
 806a574:	071a      	lsls	r2, r3, #28
 806a576:	d501      	bpl.n	806a57c <__swbuf_r+0x20>
 806a578:	6923      	ldr	r3, [r4, #16]
 806a57a:	b943      	cbnz	r3, 806a58e <__swbuf_r+0x32>
 806a57c:	4621      	mov	r1, r4
 806a57e:	4628      	mov	r0, r5
 806a580:	f000 f82a 	bl	806a5d8 <__swsetup_r>
 806a584:	b118      	cbz	r0, 806a58e <__swbuf_r+0x32>
 806a586:	f04f 37ff 	mov.w	r7, #4294967295
 806a58a:	4638      	mov	r0, r7
 806a58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 806a58e:	6823      	ldr	r3, [r4, #0]
 806a590:	6922      	ldr	r2, [r4, #16]
 806a592:	1a98      	subs	r0, r3, r2
 806a594:	6963      	ldr	r3, [r4, #20]
 806a596:	b2f6      	uxtb	r6, r6
 806a598:	4283      	cmp	r3, r0
 806a59a:	4637      	mov	r7, r6
 806a59c:	dc05      	bgt.n	806a5aa <__swbuf_r+0x4e>
 806a59e:	4621      	mov	r1, r4
 806a5a0:	4628      	mov	r0, r5
 806a5a2:	f7ff ffa1 	bl	806a4e8 <_fflush_r>
 806a5a6:	2800      	cmp	r0, #0
 806a5a8:	d1ed      	bne.n	806a586 <__swbuf_r+0x2a>
 806a5aa:	68a3      	ldr	r3, [r4, #8]
 806a5ac:	3b01      	subs	r3, #1
 806a5ae:	60a3      	str	r3, [r4, #8]
 806a5b0:	6823      	ldr	r3, [r4, #0]
 806a5b2:	1c5a      	adds	r2, r3, #1
 806a5b4:	6022      	str	r2, [r4, #0]
 806a5b6:	701e      	strb	r6, [r3, #0]
 806a5b8:	6962      	ldr	r2, [r4, #20]
 806a5ba:	1c43      	adds	r3, r0, #1
 806a5bc:	429a      	cmp	r2, r3
 806a5be:	d004      	beq.n	806a5ca <__swbuf_r+0x6e>
 806a5c0:	89a3      	ldrh	r3, [r4, #12]
 806a5c2:	07db      	lsls	r3, r3, #31
 806a5c4:	d5e1      	bpl.n	806a58a <__swbuf_r+0x2e>
 806a5c6:	2e0a      	cmp	r6, #10
 806a5c8:	d1df      	bne.n	806a58a <__swbuf_r+0x2e>
 806a5ca:	4621      	mov	r1, r4
 806a5cc:	4628      	mov	r0, r5
 806a5ce:	f7ff ff8b 	bl	806a4e8 <_fflush_r>
 806a5d2:	2800      	cmp	r0, #0
 806a5d4:	d0d9      	beq.n	806a58a <__swbuf_r+0x2e>
 806a5d6:	e7d6      	b.n	806a586 <__swbuf_r+0x2a>

0806a5d8 <__swsetup_r>:
 806a5d8:	b538      	push	{r3, r4, r5, lr}
 806a5da:	4b29      	ldr	r3, [pc, #164]	@ (806a680 <__swsetup_r+0xa8>)
 806a5dc:	4605      	mov	r5, r0
 806a5de:	6818      	ldr	r0, [r3, #0]
 806a5e0:	460c      	mov	r4, r1
 806a5e2:	b118      	cbz	r0, 806a5ec <__swsetup_r+0x14>
 806a5e4:	6a03      	ldr	r3, [r0, #32]
 806a5e6:	b90b      	cbnz	r3, 806a5ec <__swsetup_r+0x14>
 806a5e8:	f7fe ffb2 	bl	8069550 <__sinit>
 806a5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 806a5f0:	0719      	lsls	r1, r3, #28
 806a5f2:	d422      	bmi.n	806a63a <__swsetup_r+0x62>
 806a5f4:	06da      	lsls	r2, r3, #27
 806a5f6:	d407      	bmi.n	806a608 <__swsetup_r+0x30>
 806a5f8:	2209      	movs	r2, #9
 806a5fa:	602a      	str	r2, [r5, #0]
 806a5fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 806a600:	81a3      	strh	r3, [r4, #12]
 806a602:	f04f 30ff 	mov.w	r0, #4294967295
 806a606:	e033      	b.n	806a670 <__swsetup_r+0x98>
 806a608:	0758      	lsls	r0, r3, #29
 806a60a:	d512      	bpl.n	806a632 <__swsetup_r+0x5a>
 806a60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 806a60e:	b141      	cbz	r1, 806a622 <__swsetup_r+0x4a>
 806a610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 806a614:	4299      	cmp	r1, r3
 806a616:	d002      	beq.n	806a61e <__swsetup_r+0x46>
 806a618:	4628      	mov	r0, r5
 806a61a:	f7ff f9bb 	bl	8069994 <_free_r>
 806a61e:	2300      	movs	r3, #0
 806a620:	6363      	str	r3, [r4, #52]	@ 0x34
 806a622:	89a3      	ldrh	r3, [r4, #12]
 806a624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 806a628:	81a3      	strh	r3, [r4, #12]
 806a62a:	2300      	movs	r3, #0
 806a62c:	6063      	str	r3, [r4, #4]
 806a62e:	6923      	ldr	r3, [r4, #16]
 806a630:	6023      	str	r3, [r4, #0]
 806a632:	89a3      	ldrh	r3, [r4, #12]
 806a634:	f043 0308 	orr.w	r3, r3, #8
 806a638:	81a3      	strh	r3, [r4, #12]
 806a63a:	6923      	ldr	r3, [r4, #16]
 806a63c:	b94b      	cbnz	r3, 806a652 <__swsetup_r+0x7a>
 806a63e:	89a3      	ldrh	r3, [r4, #12]
 806a640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 806a644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806a648:	d003      	beq.n	806a652 <__swsetup_r+0x7a>
 806a64a:	4621      	mov	r1, r4
 806a64c:	4628      	mov	r0, r5
 806a64e:	f000 f884 	bl	806a75a <__smakebuf_r>
 806a652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 806a656:	f013 0201 	ands.w	r2, r3, #1
 806a65a:	d00a      	beq.n	806a672 <__swsetup_r+0x9a>
 806a65c:	2200      	movs	r2, #0
 806a65e:	60a2      	str	r2, [r4, #8]
 806a660:	6962      	ldr	r2, [r4, #20]
 806a662:	4252      	negs	r2, r2
 806a664:	61a2      	str	r2, [r4, #24]
 806a666:	6922      	ldr	r2, [r4, #16]
 806a668:	b942      	cbnz	r2, 806a67c <__swsetup_r+0xa4>
 806a66a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 806a66e:	d1c5      	bne.n	806a5fc <__swsetup_r+0x24>
 806a670:	bd38      	pop	{r3, r4, r5, pc}
 806a672:	0799      	lsls	r1, r3, #30
 806a674:	bf58      	it	pl
 806a676:	6962      	ldrpl	r2, [r4, #20]
 806a678:	60a2      	str	r2, [r4, #8]
 806a67a:	e7f4      	b.n	806a666 <__swsetup_r+0x8e>
 806a67c:	2000      	movs	r0, #0
 806a67e:	e7f7      	b.n	806a670 <__swsetup_r+0x98>
 806a680:	24014a18 	.word	0x24014a18

0806a684 <_sbrk_r>:
 806a684:	b538      	push	{r3, r4, r5, lr}
 806a686:	4d06      	ldr	r5, [pc, #24]	@ (806a6a0 <_sbrk_r+0x1c>)
 806a688:	2300      	movs	r3, #0
 806a68a:	4604      	mov	r4, r0
 806a68c:	4608      	mov	r0, r1
 806a68e:	602b      	str	r3, [r5, #0]
 806a690:	f7f5 fde4 	bl	806025c <_sbrk>
 806a694:	1c43      	adds	r3, r0, #1
 806a696:	d102      	bne.n	806a69e <_sbrk_r+0x1a>
 806a698:	682b      	ldr	r3, [r5, #0]
 806a69a:	b103      	cbz	r3, 806a69e <_sbrk_r+0x1a>
 806a69c:	6023      	str	r3, [r4, #0]
 806a69e:	bd38      	pop	{r3, r4, r5, pc}
 806a6a0:	2406eac4 	.word	0x2406eac4

0806a6a4 <abort>:
 806a6a4:	b508      	push	{r3, lr}
 806a6a6:	2006      	movs	r0, #6
 806a6a8:	f000 f8bc 	bl	806a824 <raise>
 806a6ac:	2001      	movs	r0, #1
 806a6ae:	f7f5 fd5c 	bl	806016a <_exit>

0806a6b2 <_realloc_r>:
 806a6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 806a6b6:	4607      	mov	r7, r0
 806a6b8:	4614      	mov	r4, r2
 806a6ba:	460d      	mov	r5, r1
 806a6bc:	b921      	cbnz	r1, 806a6c8 <_realloc_r+0x16>
 806a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 806a6c2:	4611      	mov	r1, r2
 806a6c4:	f7ff b9da 	b.w	8069a7c <_malloc_r>
 806a6c8:	b92a      	cbnz	r2, 806a6d6 <_realloc_r+0x24>
 806a6ca:	f7ff f963 	bl	8069994 <_free_r>
 806a6ce:	4625      	mov	r5, r4
 806a6d0:	4628      	mov	r0, r5
 806a6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 806a6d6:	f000 f8e3 	bl	806a8a0 <_malloc_usable_size_r>
 806a6da:	4284      	cmp	r4, r0
 806a6dc:	4606      	mov	r6, r0
 806a6de:	d802      	bhi.n	806a6e6 <_realloc_r+0x34>
 806a6e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 806a6e4:	d8f4      	bhi.n	806a6d0 <_realloc_r+0x1e>
 806a6e6:	4621      	mov	r1, r4
 806a6e8:	4638      	mov	r0, r7
 806a6ea:	f7ff f9c7 	bl	8069a7c <_malloc_r>
 806a6ee:	4680      	mov	r8, r0
 806a6f0:	b908      	cbnz	r0, 806a6f6 <_realloc_r+0x44>
 806a6f2:	4645      	mov	r5, r8
 806a6f4:	e7ec      	b.n	806a6d0 <_realloc_r+0x1e>
 806a6f6:	42b4      	cmp	r4, r6
 806a6f8:	4622      	mov	r2, r4
 806a6fa:	4629      	mov	r1, r5
 806a6fc:	bf28      	it	cs
 806a6fe:	4632      	movcs	r2, r6
 806a700:	f7ff f91b 	bl	806993a <memcpy>
 806a704:	4629      	mov	r1, r5
 806a706:	4638      	mov	r0, r7
 806a708:	f7ff f944 	bl	8069994 <_free_r>
 806a70c:	e7f1      	b.n	806a6f2 <_realloc_r+0x40>

0806a70e <__swhatbuf_r>:
 806a70e:	b570      	push	{r4, r5, r6, lr}
 806a710:	460c      	mov	r4, r1
 806a712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 806a716:	2900      	cmp	r1, #0
 806a718:	b096      	sub	sp, #88	@ 0x58
 806a71a:	4615      	mov	r5, r2
 806a71c:	461e      	mov	r6, r3
 806a71e:	da0d      	bge.n	806a73c <__swhatbuf_r+0x2e>
 806a720:	89a3      	ldrh	r3, [r4, #12]
 806a722:	f013 0f80 	tst.w	r3, #128	@ 0x80
 806a726:	f04f 0100 	mov.w	r1, #0
 806a72a:	bf14      	ite	ne
 806a72c:	2340      	movne	r3, #64	@ 0x40
 806a72e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 806a732:	2000      	movs	r0, #0
 806a734:	6031      	str	r1, [r6, #0]
 806a736:	602b      	str	r3, [r5, #0]
 806a738:	b016      	add	sp, #88	@ 0x58
 806a73a:	bd70      	pop	{r4, r5, r6, pc}
 806a73c:	466a      	mov	r2, sp
 806a73e:	f000 f879 	bl	806a834 <_fstat_r>
 806a742:	2800      	cmp	r0, #0
 806a744:	dbec      	blt.n	806a720 <__swhatbuf_r+0x12>
 806a746:	9901      	ldr	r1, [sp, #4]
 806a748:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 806a74c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 806a750:	4259      	negs	r1, r3
 806a752:	4159      	adcs	r1, r3
 806a754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 806a758:	e7eb      	b.n	806a732 <__swhatbuf_r+0x24>

0806a75a <__smakebuf_r>:
 806a75a:	898b      	ldrh	r3, [r1, #12]
 806a75c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 806a75e:	079d      	lsls	r5, r3, #30
 806a760:	4606      	mov	r6, r0
 806a762:	460c      	mov	r4, r1
 806a764:	d507      	bpl.n	806a776 <__smakebuf_r+0x1c>
 806a766:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 806a76a:	6023      	str	r3, [r4, #0]
 806a76c:	6123      	str	r3, [r4, #16]
 806a76e:	2301      	movs	r3, #1
 806a770:	6163      	str	r3, [r4, #20]
 806a772:	b003      	add	sp, #12
 806a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 806a776:	ab01      	add	r3, sp, #4
 806a778:	466a      	mov	r2, sp
 806a77a:	f7ff ffc8 	bl	806a70e <__swhatbuf_r>
 806a77e:	9f00      	ldr	r7, [sp, #0]
 806a780:	4605      	mov	r5, r0
 806a782:	4639      	mov	r1, r7
 806a784:	4630      	mov	r0, r6
 806a786:	f7ff f979 	bl	8069a7c <_malloc_r>
 806a78a:	b948      	cbnz	r0, 806a7a0 <__smakebuf_r+0x46>
 806a78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 806a790:	059a      	lsls	r2, r3, #22
 806a792:	d4ee      	bmi.n	806a772 <__smakebuf_r+0x18>
 806a794:	f023 0303 	bic.w	r3, r3, #3
 806a798:	f043 0302 	orr.w	r3, r3, #2
 806a79c:	81a3      	strh	r3, [r4, #12]
 806a79e:	e7e2      	b.n	806a766 <__smakebuf_r+0xc>
 806a7a0:	89a3      	ldrh	r3, [r4, #12]
 806a7a2:	6020      	str	r0, [r4, #0]
 806a7a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 806a7a8:	81a3      	strh	r3, [r4, #12]
 806a7aa:	9b01      	ldr	r3, [sp, #4]
 806a7ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 806a7b0:	b15b      	cbz	r3, 806a7ca <__smakebuf_r+0x70>
 806a7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 806a7b6:	4630      	mov	r0, r6
 806a7b8:	f000 f84e 	bl	806a858 <_isatty_r>
 806a7bc:	b128      	cbz	r0, 806a7ca <__smakebuf_r+0x70>
 806a7be:	89a3      	ldrh	r3, [r4, #12]
 806a7c0:	f023 0303 	bic.w	r3, r3, #3
 806a7c4:	f043 0301 	orr.w	r3, r3, #1
 806a7c8:	81a3      	strh	r3, [r4, #12]
 806a7ca:	89a3      	ldrh	r3, [r4, #12]
 806a7cc:	431d      	orrs	r5, r3
 806a7ce:	81a5      	strh	r5, [r4, #12]
 806a7d0:	e7cf      	b.n	806a772 <__smakebuf_r+0x18>

0806a7d2 <_raise_r>:
 806a7d2:	291f      	cmp	r1, #31
 806a7d4:	b538      	push	{r3, r4, r5, lr}
 806a7d6:	4605      	mov	r5, r0
 806a7d8:	460c      	mov	r4, r1
 806a7da:	d904      	bls.n	806a7e6 <_raise_r+0x14>
 806a7dc:	2316      	movs	r3, #22
 806a7de:	6003      	str	r3, [r0, #0]
 806a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 806a7e4:	bd38      	pop	{r3, r4, r5, pc}
 806a7e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 806a7e8:	b112      	cbz	r2, 806a7f0 <_raise_r+0x1e>
 806a7ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 806a7ee:	b94b      	cbnz	r3, 806a804 <_raise_r+0x32>
 806a7f0:	4628      	mov	r0, r5
 806a7f2:	f000 f853 	bl	806a89c <_getpid_r>
 806a7f6:	4622      	mov	r2, r4
 806a7f8:	4601      	mov	r1, r0
 806a7fa:	4628      	mov	r0, r5
 806a7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 806a800:	f000 b83a 	b.w	806a878 <_kill_r>
 806a804:	2b01      	cmp	r3, #1
 806a806:	d00a      	beq.n	806a81e <_raise_r+0x4c>
 806a808:	1c59      	adds	r1, r3, #1
 806a80a:	d103      	bne.n	806a814 <_raise_r+0x42>
 806a80c:	2316      	movs	r3, #22
 806a80e:	6003      	str	r3, [r0, #0]
 806a810:	2001      	movs	r0, #1
 806a812:	e7e7      	b.n	806a7e4 <_raise_r+0x12>
 806a814:	2100      	movs	r1, #0
 806a816:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 806a81a:	4620      	mov	r0, r4
 806a81c:	4798      	blx	r3
 806a81e:	2000      	movs	r0, #0
 806a820:	e7e0      	b.n	806a7e4 <_raise_r+0x12>
	...

0806a824 <raise>:
 806a824:	4b02      	ldr	r3, [pc, #8]	@ (806a830 <raise+0xc>)
 806a826:	4601      	mov	r1, r0
 806a828:	6818      	ldr	r0, [r3, #0]
 806a82a:	f7ff bfd2 	b.w	806a7d2 <_raise_r>
 806a82e:	bf00      	nop
 806a830:	24014a18 	.word	0x24014a18

0806a834 <_fstat_r>:
 806a834:	b538      	push	{r3, r4, r5, lr}
 806a836:	4d07      	ldr	r5, [pc, #28]	@ (806a854 <_fstat_r+0x20>)
 806a838:	2300      	movs	r3, #0
 806a83a:	4604      	mov	r4, r0
 806a83c:	4608      	mov	r0, r1
 806a83e:	4611      	mov	r1, r2
 806a840:	602b      	str	r3, [r5, #0]
 806a842:	f7f5 fce2 	bl	806020a <_fstat>
 806a846:	1c43      	adds	r3, r0, #1
 806a848:	d102      	bne.n	806a850 <_fstat_r+0x1c>
 806a84a:	682b      	ldr	r3, [r5, #0]
 806a84c:	b103      	cbz	r3, 806a850 <_fstat_r+0x1c>
 806a84e:	6023      	str	r3, [r4, #0]
 806a850:	bd38      	pop	{r3, r4, r5, pc}
 806a852:	bf00      	nop
 806a854:	2406eac4 	.word	0x2406eac4

0806a858 <_isatty_r>:
 806a858:	b538      	push	{r3, r4, r5, lr}
 806a85a:	4d06      	ldr	r5, [pc, #24]	@ (806a874 <_isatty_r+0x1c>)
 806a85c:	2300      	movs	r3, #0
 806a85e:	4604      	mov	r4, r0
 806a860:	4608      	mov	r0, r1
 806a862:	602b      	str	r3, [r5, #0]
 806a864:	f7f5 fce1 	bl	806022a <_isatty>
 806a868:	1c43      	adds	r3, r0, #1
 806a86a:	d102      	bne.n	806a872 <_isatty_r+0x1a>
 806a86c:	682b      	ldr	r3, [r5, #0]
 806a86e:	b103      	cbz	r3, 806a872 <_isatty_r+0x1a>
 806a870:	6023      	str	r3, [r4, #0]
 806a872:	bd38      	pop	{r3, r4, r5, pc}
 806a874:	2406eac4 	.word	0x2406eac4

0806a878 <_kill_r>:
 806a878:	b538      	push	{r3, r4, r5, lr}
 806a87a:	4d07      	ldr	r5, [pc, #28]	@ (806a898 <_kill_r+0x20>)
 806a87c:	2300      	movs	r3, #0
 806a87e:	4604      	mov	r4, r0
 806a880:	4608      	mov	r0, r1
 806a882:	4611      	mov	r1, r2
 806a884:	602b      	str	r3, [r5, #0]
 806a886:	f7f5 fc60 	bl	806014a <_kill>
 806a88a:	1c43      	adds	r3, r0, #1
 806a88c:	d102      	bne.n	806a894 <_kill_r+0x1c>
 806a88e:	682b      	ldr	r3, [r5, #0]
 806a890:	b103      	cbz	r3, 806a894 <_kill_r+0x1c>
 806a892:	6023      	str	r3, [r4, #0]
 806a894:	bd38      	pop	{r3, r4, r5, pc}
 806a896:	bf00      	nop
 806a898:	2406eac4 	.word	0x2406eac4

0806a89c <_getpid_r>:
 806a89c:	f7f5 bc4d 	b.w	806013a <_getpid>

0806a8a0 <_malloc_usable_size_r>:
 806a8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 806a8a4:	1f18      	subs	r0, r3, #4
 806a8a6:	2b00      	cmp	r3, #0
 806a8a8:	bfbc      	itt	lt
 806a8aa:	580b      	ldrlt	r3, [r1, r0]
 806a8ac:	18c0      	addlt	r0, r0, r3
 806a8ae:	4770      	bx	lr

0806a8b0 <_init>:
 806a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806a8b2:	bf00      	nop
 806a8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 806a8b6:	bc08      	pop	{r3}
 806a8b8:	469e      	mov	lr, r3
 806a8ba:	4770      	bx	lr

0806a8bc <_fini>:
 806a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806a8be:	bf00      	nop
 806a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 806a8c2:	bc08      	pop	{r3}
 806a8c4:	469e      	mov	lr, r3
 806a8c6:	4770      	bx	lr
