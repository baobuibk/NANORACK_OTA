
04_obc_v111_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08140000  08140000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e794  08140298  08140298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0814ea2c  0814ea2c  0000fa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0814eb18  0814eb18  0000fb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0814eb1c  0814eb1c  0000fb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001fc  10032000  0814eb20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004980  100321fc  0814ed1c  000101fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000a04  10036b7c  0814ed1c  00010b7c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026da7  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005ae9  00000000  00000000  00036fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000023a0  00000000  00000000  0003cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001b07  00000000  00000000  0003ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00045b12  00000000  00000000  00040967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c5e7  00000000  00000000  00086479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a864d  00000000  00000000  000b2a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0025b0ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009690  00000000  00000000  0025b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000055  00000000  00000000  00264780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08140298 <__do_global_dtors_aux>:
 8140298:	b510      	push	{r4, lr}
 814029a:	4c05      	ldr	r4, [pc, #20]	@ (81402b0 <__do_global_dtors_aux+0x18>)
 814029c:	7823      	ldrb	r3, [r4, #0]
 814029e:	b933      	cbnz	r3, 81402ae <__do_global_dtors_aux+0x16>
 81402a0:	4b04      	ldr	r3, [pc, #16]	@ (81402b4 <__do_global_dtors_aux+0x1c>)
 81402a2:	b113      	cbz	r3, 81402aa <__do_global_dtors_aux+0x12>
 81402a4:	4804      	ldr	r0, [pc, #16]	@ (81402b8 <__do_global_dtors_aux+0x20>)
 81402a6:	f3af 8000 	nop.w
 81402aa:	2301      	movs	r3, #1
 81402ac:	7023      	strb	r3, [r4, #0]
 81402ae:	bd10      	pop	{r4, pc}
 81402b0:	100321fc 	.word	0x100321fc
 81402b4:	00000000 	.word	0x00000000
 81402b8:	0814ea14 	.word	0x0814ea14

081402bc <frame_dummy>:
 81402bc:	b508      	push	{r3, lr}
 81402be:	4b03      	ldr	r3, [pc, #12]	@ (81402cc <frame_dummy+0x10>)
 81402c0:	b11b      	cbz	r3, 81402ca <frame_dummy+0xe>
 81402c2:	4903      	ldr	r1, [pc, #12]	@ (81402d0 <frame_dummy+0x14>)
 81402c4:	4803      	ldr	r0, [pc, #12]	@ (81402d4 <frame_dummy+0x18>)
 81402c6:	f3af 8000 	nop.w
 81402ca:	bd08      	pop	{r3, pc}
 81402cc:	00000000 	.word	0x00000000
 81402d0:	10032200 	.word	0x10032200
 81402d4:	0814ea14 	.word	0x0814ea14

081402d8 <Mgmt_HardwareSystemPreparing>:
//#include "UART_DMA/uart_dma_driver.h"
/*************************************************
 *                   Function                    *
 *************************************************/

void Mgmt_HardwareSystemPreparing(void){
 81402d8:	b580      	push	{r7, lr}
 81402da:	af00      	add	r7, sp, #0
	UART_DMA_Driver_Init();
 81402dc:	f000 fdb6 	bl	8140e4c <UART_DMA_Driver_Init>
	CDC_RingBuffer_Init();
 81402e0:	f000 ff8c 	bl	81411fc <CDC_RingBuffer_Init>
	SharedREG_Init(DIR_M4_TO_M7);
 81402e4:	2001      	movs	r0, #1
 81402e6:	f000 fb93 	bl	8140a10 <SharedREG_Init>
//	UART_Driver_SendString(UART_PORT, "Hello");
}
 81402ea:	bf00      	nop
 81402ec:	bd80      	pop	{r7, pc}

081402ee <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 81402ee:	b580      	push	{r7, lr}
 81402f0:	af00      	add	r7, sp, #0

	  SCH_Initialize();
 81402f2:	f000 f807 	bl	8140304 <SCH_Initialize>

	  SchedulerTasks_Create();
 81402f6:	f000 fb03 	bl	8140900 <SchedulerTasks_Create>

	  SCH_StartScheduler();
 81402fa:	f000 f94d 	bl	8140598 <SCH_StartScheduler>

	  while(1){
			SCH_HandleScheduledTask();
 81402fe:	f000 f957 	bl	81405b0 <SCH_HandleScheduledTask>
 8140302:	e7fc      	b.n	81402fe <Mgmt_SystemStart+0x10>

08140304 <SCH_Initialize>:
 * @brief  Function initializes scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_Initialize(void)
{
 8140304:	b580      	push	{r7, lr}
 8140306:	af00      	add	r7, sp, #0
    s_SystemTick = RESET;
 8140308:	4b17      	ldr	r3, [pc, #92]	@ (8140368 <SCH_Initialize+0x64>)
 814030a:	2200      	movs	r2, #0
 814030c:	601a      	str	r2, [r3, #0]
    s_NumOfTaskScheduled = RESET;
 814030e:	4b17      	ldr	r3, [pc, #92]	@ (814036c <SCH_Initialize+0x68>)
 8140310:	2200      	movs	r2, #0
 8140312:	701a      	strb	r2, [r3, #0]
    s_NumOfTimers = RESET;
 8140314:	4b16      	ldr	r3, [pc, #88]	@ (8140370 <SCH_Initialize+0x6c>)
 8140316:	2200      	movs	r2, #0
 8140318:	701a      	strb	r2, [r3, #0]
    
#ifdef USE_SCH_SEMAPHORE
    s_NumOfSemaphores = RESET;
 814031a:	4b16      	ldr	r3, [pc, #88]	@ (8140374 <SCH_Initialize+0x70>)
 814031c:	2200      	movs	r2, #0
 814031e:	701a      	strb	r2, [r3, #0]
#endif

    s_SchedulerRunning = FALSE;
 8140320:	4b15      	ldr	r3, [pc, #84]	@ (8140378 <SCH_Initialize+0x74>)
 8140322:	2200      	movs	r2, #0
 8140324:	701a      	strb	r2, [r3, #0]

    // Initial Scheduler Context
    memset((uint8_t *)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8140326:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 814032a:	2100      	movs	r1, #0
 814032c:	4813      	ldr	r0, [pc, #76]	@ (814037c <SCH_Initialize+0x78>)
 814032e:	f00e fb23 	bl	814e978 <memset>
    memset((uint8_t *)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8140332:	22a0      	movs	r2, #160	@ 0xa0
 8140334:	2100      	movs	r1, #0
 8140336:	4812      	ldr	r0, [pc, #72]	@ (8140380 <SCH_Initialize+0x7c>)
 8140338:	f00e fb1e 	bl	814e978 <memset>
    memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 814033c:	2208      	movs	r2, #8
 814033e:	2100      	movs	r1, #0
 8140340:	4810      	ldr	r0, [pc, #64]	@ (8140384 <SCH_Initialize+0x80>)
 8140342:	f00e fb19 	bl	814e978 <memset>
    memset((uint8_t *)&s_TaskPending[0], RESET, (sizeof(uint32_t) * NUM_TASK_PENDING_ARRAYS));
 8140346:	2204      	movs	r2, #4
 8140348:	2100      	movs	r1, #0
 814034a:	480f      	ldr	r0, [pc, #60]	@ (8140388 <SCH_Initialize+0x84>)
 814034c:	f00e fb14 	bl	814e978 <memset>
    memset((uint8_t *)&s_TimerPending[0], RESET, (sizeof(uint32_t) * NUM_TIMER_PENDING_ARRAYS));
 8140350:	2204      	movs	r2, #4
 8140352:	2100      	movs	r1, #0
 8140354:	480d      	ldr	r0, [pc, #52]	@ (814038c <SCH_Initialize+0x88>)
 8140356:	f00e fb0f 	bl	814e978 <memset>
#ifdef USE_SCH_SEMAPHORE
    memset((uint8_t *)&s_SemaphoreContext[0], RESET, (sizeof(SCH_SemaphoreTypedef) * MAX_SEMAPHORES));
 814035a:	2204      	movs	r2, #4
 814035c:	2100      	movs	r1, #0
 814035e:	480c      	ldr	r0, [pc, #48]	@ (8140390 <SCH_Initialize+0x8c>)
 8140360:	f00e fb0a 	bl	814e978 <memset>
#endif
}
 8140364:	bf00      	nop
 8140366:	bd80      	pop	{r7, pc}
 8140368:	10032454 	.word	0x10032454
 814036c:	1003239c 	.word	0x1003239c
 8140370:	10032440 	.word	0x10032440
 8140374:	10032448 	.word	0x10032448
 8140378:	10032218 	.word	0x10032218
 814037c:	1003221c 	.word	0x1003221c
 8140380:	100323a0 	.word	0x100323a0
 8140384:	10032458 	.word	0x10032458
 8140388:	1003244c 	.word	0x1003244c
 814038c:	10032450 	.word	0x10032450
 8140390:	10032444 	.word	0x10032444

08140394 <SCH_TASK_CreateTask>:
 * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
 *         SCH_TaskPropertyTypedef TaskProperty
 * @retval status
 *****************************************************************************/
SCH_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE *pHandle, SCH_TaskPropertyTypedef *pTaskProperty)
{
 8140394:	b580      	push	{r7, lr}
 8140396:	b084      	sub	sp, #16
 8140398:	af00      	add	r7, sp, #0
 814039a:	6078      	str	r0, [r7, #4]
 814039c:	6039      	str	r1, [r7, #0]
    SCH_Status status = SCH_ERROR;
 814039e:	2301      	movs	r3, #1
 81403a0:	73fb      	strb	r3, [r7, #15]
    if (pHandle && pTaskProperty)
 81403a2:	687b      	ldr	r3, [r7, #4]
 81403a4:	2b00      	cmp	r3, #0
 81403a6:	d030      	beq.n	814040a <SCH_TASK_CreateTask+0x76>
 81403a8:	683b      	ldr	r3, [r7, #0]
 81403aa:	2b00      	cmp	r3, #0
 81403ac:	d02d      	beq.n	814040a <SCH_TASK_CreateTask+0x76>
    {
        if (s_NumOfTaskScheduled < MAX_TASK)
 81403ae:	4b19      	ldr	r3, [pc, #100]	@ (8140414 <SCH_TASK_CreateTask+0x80>)
 81403b0:	781b      	ldrb	r3, [r3, #0]
 81403b2:	2b0f      	cmp	r3, #15
 81403b4:	d829      	bhi.n	814040a <SCH_TASK_CreateTask+0x76>
        {
            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 81403b6:	4b17      	ldr	r3, [pc, #92]	@ (8140414 <SCH_TASK_CreateTask+0x80>)
 81403b8:	781b      	ldrb	r3, [r3, #0]
 81403ba:	461a      	mov	r2, r3
 81403bc:	4613      	mov	r3, r2
 81403be:	005b      	lsls	r3, r3, #1
 81403c0:	4413      	add	r3, r2
 81403c2:	00db      	lsls	r3, r3, #3
 81403c4:	4a14      	ldr	r2, [pc, #80]	@ (8140418 <SCH_TASK_CreateTask+0x84>)
 81403c6:	4413      	add	r3, r2
 81403c8:	60bb      	str	r3, [r7, #8]
            memcpy(&pTaskContext->taskProperty, pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
 81403ca:	68bb      	ldr	r3, [r7, #8]
 81403cc:	3308      	adds	r3, #8
 81403ce:	2210      	movs	r2, #16
 81403d0:	6839      	ldr	r1, [r7, #0]
 81403d2:	4618      	mov	r0, r3
 81403d4:	f00e fb10 	bl	814e9f8 <memcpy>
            pTaskContext->currentTick = 0;
 81403d8:	68bb      	ldr	r3, [r7, #8]
 81403da:	2200      	movs	r2, #0
 81403dc:	605a      	str	r2, [r3, #4]
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81403de:	683b      	ldr	r3, [r7, #0]
 81403e0:	781b      	ldrb	r3, [r3, #0]
                                                        ? TASK_StateHold : TASK_StateReady;
 81403e2:	2b02      	cmp	r3, #2
 81403e4:	bf14      	ite	ne
 81403e6:	2301      	movne	r3, #1
 81403e8:	2300      	moveq	r3, #0
 81403ea:	b2db      	uxtb	r3, r3
 81403ec:	461a      	mov	r2, r3
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81403ee:	68bb      	ldr	r3, [r7, #8]
 81403f0:	701a      	strb	r2, [r3, #0]

            *pHandle = s_NumOfTaskScheduled;
 81403f2:	4b08      	ldr	r3, [pc, #32]	@ (8140414 <SCH_TASK_CreateTask+0x80>)
 81403f4:	781a      	ldrb	r2, [r3, #0]
 81403f6:	687b      	ldr	r3, [r7, #4]
 81403f8:	701a      	strb	r2, [r3, #0]
            s_NumOfTaskScheduled++;
 81403fa:	4b06      	ldr	r3, [pc, #24]	@ (8140414 <SCH_TASK_CreateTask+0x80>)
 81403fc:	781b      	ldrb	r3, [r3, #0]
 81403fe:	3301      	adds	r3, #1
 8140400:	b2da      	uxtb	r2, r3
 8140402:	4b04      	ldr	r3, [pc, #16]	@ (8140414 <SCH_TASK_CreateTask+0x80>)
 8140404:	701a      	strb	r2, [r3, #0]
            status = SCH_DONE;
 8140406:	2300      	movs	r3, #0
 8140408:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 814040a:	7bfb      	ldrb	r3, [r7, #15]
}
 814040c:	4618      	mov	r0, r3
 814040e:	3710      	adds	r7, #16
 8140410:	46bd      	mov	sp, r7
 8140412:	bd80      	pop	{r7, pc}
 8140414:	1003239c 	.word	0x1003239c
 8140418:	1003221c 	.word	0x1003221c

0814041c <SCH_RunSystemTickTimer>:
 * @brief  Function handles system tick timer
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 814041c:	b480      	push	{r7}
 814041e:	b087      	sub	sp, #28
 8140420:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 8140422:	4b54      	ldr	r3, [pc, #336]	@ (8140574 <SCH_RunSystemTickTimer+0x158>)
 8140424:	781b      	ldrb	r3, [r3, #0]
 8140426:	2b00      	cmp	r3, #0
 8140428:	f000 809e 	beq.w	8140568 <SCH_RunSystemTickTimer+0x14c>
    {
        uint8_t taskIndex;
        SCH_TaskContextTypedef *pTaskContext;
        uint8_t timerIndex;
        SCH_TimerContextTypedef *pTimerContext;
        s_SystemTick++;
 814042c:	4b52      	ldr	r3, [pc, #328]	@ (8140578 <SCH_RunSystemTickTimer+0x15c>)
 814042e:	681b      	ldr	r3, [r3, #0]
 8140430:	3301      	adds	r3, #1
 8140432:	4a51      	ldr	r2, [pc, #324]	@ (8140578 <SCH_RunSystemTickTimer+0x15c>)
 8140434:	6013      	str	r3, [r2, #0]
        // Task
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8140436:	2300      	movs	r3, #0
 8140438:	75fb      	strb	r3, [r7, #23]
 814043a:	e035      	b.n	81404a8 <SCH_RunSystemTickTimer+0x8c>
        {
            pTaskContext = &s_TaskContext[taskIndex];
 814043c:	7dfa      	ldrb	r2, [r7, #23]
 814043e:	4613      	mov	r3, r2
 8140440:	005b      	lsls	r3, r3, #1
 8140442:	4413      	add	r3, r2
 8140444:	00db      	lsls	r3, r3, #3
 8140446:	4a4d      	ldr	r2, [pc, #308]	@ (814057c <SCH_RunSystemTickTimer+0x160>)
 8140448:	4413      	add	r3, r2
 814044a:	60bb      	str	r3, [r7, #8]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 814044c:	68bb      	ldr	r3, [r7, #8]
 814044e:	7a1b      	ldrb	r3, [r3, #8]
 8140450:	2b01      	cmp	r3, #1
 8140452:	d126      	bne.n	81404a2 <SCH_RunSystemTickTimer+0x86>
                pTaskContext->taskState == TASK_StateReady)
 8140454:	68bb      	ldr	r3, [r7, #8]
 8140456:	781b      	ldrb	r3, [r3, #0]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 8140458:	2b01      	cmp	r3, #1
 814045a:	d122      	bne.n	81404a2 <SCH_RunSystemTickTimer+0x86>
            {
                pTaskContext->currentTick += 1;
 814045c:	68bb      	ldr	r3, [r7, #8]
 814045e:	685b      	ldr	r3, [r3, #4]
 8140460:	1c5a      	adds	r2, r3, #1
 8140462:	68bb      	ldr	r3, [r7, #8]
 8140464:	605a      	str	r2, [r3, #4]
                if (pTaskContext->currentTick >= pTaskContext->taskProperty.taskPeriodInMS)
 8140466:	68bb      	ldr	r3, [r7, #8]
 8140468:	685a      	ldr	r2, [r3, #4]
 814046a:	68bb      	ldr	r3, [r7, #8]
 814046c:	68db      	ldr	r3, [r3, #12]
 814046e:	429a      	cmp	r2, r3
 8140470:	d317      	bcc.n	81404a2 <SCH_RunSystemTickTimer+0x86>
                {
                    pTaskContext->currentTick = 0;
 8140472:	68bb      	ldr	r3, [r7, #8]
 8140474:	2200      	movs	r2, #0
 8140476:	605a      	str	r2, [r3, #4]
                    uint8_t index = taskIndex / 32;
 8140478:	7dfb      	ldrb	r3, [r7, #23]
 814047a:	095b      	lsrs	r3, r3, #5
 814047c:	71fb      	strb	r3, [r7, #7]
                    uint8_t bit = taskIndex % 32;
 814047e:	7dfb      	ldrb	r3, [r7, #23]
 8140480:	f003 031f 	and.w	r3, r3, #31
 8140484:	71bb      	strb	r3, [r7, #6]
                    s_TaskPending[index] |= (1 << bit);  // Set bit for task
 8140486:	79fb      	ldrb	r3, [r7, #7]
 8140488:	4a3d      	ldr	r2, [pc, #244]	@ (8140580 <SCH_RunSystemTickTimer+0x164>)
 814048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 814048e:	79bb      	ldrb	r3, [r7, #6]
 8140490:	2101      	movs	r1, #1
 8140492:	fa01 f303 	lsl.w	r3, r1, r3
 8140496:	4619      	mov	r1, r3
 8140498:	79fb      	ldrb	r3, [r7, #7]
 814049a:	430a      	orrs	r2, r1
 814049c:	4938      	ldr	r1, [pc, #224]	@ (8140580 <SCH_RunSystemTickTimer+0x164>)
 814049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 81404a2:	7dfb      	ldrb	r3, [r7, #23]
 81404a4:	3301      	adds	r3, #1
 81404a6:	75fb      	strb	r3, [r7, #23]
 81404a8:	4b36      	ldr	r3, [pc, #216]	@ (8140584 <SCH_RunSystemTickTimer+0x168>)
 81404aa:	781b      	ldrb	r3, [r3, #0]
 81404ac:	7dfa      	ldrb	r2, [r7, #23]
 81404ae:	429a      	cmp	r2, r3
 81404b0:	d3c4      	bcc.n	814043c <SCH_RunSystemTickTimer+0x20>
                }
            }
        }

        // Timer
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81404b2:	2300      	movs	r3, #0
 81404b4:	75bb      	strb	r3, [r7, #22]
 81404b6:	e03b      	b.n	8140530 <SCH_RunSystemTickTimer+0x114>
        {
            pTimerContext = &s_TimerContext[timerIndex];
 81404b8:	7dba      	ldrb	r2, [r7, #22]
 81404ba:	4613      	mov	r3, r2
 81404bc:	009b      	lsls	r3, r3, #2
 81404be:	4413      	add	r3, r2
 81404c0:	009b      	lsls	r3, r3, #2
 81404c2:	4a31      	ldr	r2, [pc, #196]	@ (8140588 <SCH_RunSystemTickTimer+0x16c>)
 81404c4:	4413      	add	r3, r2
 81404c6:	613b      	str	r3, [r7, #16]
            if (TIM_StateRun == pTimerContext->timerState)
 81404c8:	693b      	ldr	r3, [r7, #16]
 81404ca:	781b      	ldrb	r3, [r3, #0]
 81404cc:	2b01      	cmp	r3, #1
 81404ce:	d12c      	bne.n	814052a <SCH_RunSystemTickTimer+0x10e>
            {
                pTimerContext->currentTick += 1;
 81404d0:	693b      	ldr	r3, [r7, #16]
 81404d2:	685b      	ldr	r3, [r3, #4]
 81404d4:	1c5a      	adds	r2, r3, #1
 81404d6:	693b      	ldr	r3, [r7, #16]
 81404d8:	605a      	str	r2, [r3, #4]
                if (pTimerContext->currentTick >= pTimerContext->timerProperty.timerPeriodInMS)
 81404da:	693b      	ldr	r3, [r7, #16]
 81404dc:	685a      	ldr	r2, [r3, #4]
 81404de:	693b      	ldr	r3, [r7, #16]
 81404e0:	68db      	ldr	r3, [r3, #12]
 81404e2:	429a      	cmp	r2, r3
 81404e4:	d321      	bcc.n	814052a <SCH_RunSystemTickTimer+0x10e>
                {
                    uint8_t index = timerIndex / 32;
 81404e6:	7dbb      	ldrb	r3, [r7, #22]
 81404e8:	095b      	lsrs	r3, r3, #5
 81404ea:	73fb      	strb	r3, [r7, #15]
                    uint8_t bit = timerIndex % 32;
 81404ec:	7dbb      	ldrb	r3, [r7, #22]
 81404ee:	f003 031f 	and.w	r3, r3, #31
 81404f2:	73bb      	strb	r3, [r7, #14]
                    s_TimerPending[index] |= (1 << bit);  // Set bit for timer
 81404f4:	7bfb      	ldrb	r3, [r7, #15]
 81404f6:	4a25      	ldr	r2, [pc, #148]	@ (814058c <SCH_RunSystemTickTimer+0x170>)
 81404f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81404fc:	7bbb      	ldrb	r3, [r7, #14]
 81404fe:	2101      	movs	r1, #1
 8140500:	fa01 f303 	lsl.w	r3, r1, r3
 8140504:	4619      	mov	r1, r3
 8140506:	7bfb      	ldrb	r3, [r7, #15]
 8140508:	430a      	orrs	r2, r1
 814050a:	4920      	ldr	r1, [pc, #128]	@ (814058c <SCH_RunSystemTickTimer+0x170>)
 814050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    pTimerContext->currentTick = 0;
 8140510:	693b      	ldr	r3, [r7, #16]
 8140512:	2200      	movs	r2, #0
 8140514:	605a      	str	r2, [r3, #4]
                    pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->timerProperty.timerType) ? TIM_StateRun : TIM_StateStop;
 8140516:	693b      	ldr	r3, [r7, #16]
 8140518:	7a1b      	ldrb	r3, [r3, #8]
 814051a:	2b02      	cmp	r3, #2
 814051c:	bf0c      	ite	eq
 814051e:	2301      	moveq	r3, #1
 8140520:	2300      	movne	r3, #0
 8140522:	b2db      	uxtb	r3, r3
 8140524:	461a      	mov	r2, r3
 8140526:	693b      	ldr	r3, [r7, #16]
 8140528:	701a      	strb	r2, [r3, #0]
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 814052a:	7dbb      	ldrb	r3, [r7, #22]
 814052c:	3301      	adds	r3, #1
 814052e:	75bb      	strb	r3, [r7, #22]
 8140530:	4b17      	ldr	r3, [pc, #92]	@ (8140590 <SCH_RunSystemTickTimer+0x174>)
 8140532:	781b      	ldrb	r3, [r3, #0]
 8140534:	7dba      	ldrb	r2, [r7, #22]
 8140536:	429a      	cmp	r2, r3
 8140538:	d3be      	bcc.n	81404b8 <SCH_RunSystemTickTimer+0x9c>
                }
            }
        }

        // Soft timer
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 814053a:	2300      	movs	r3, #0
 814053c:	75bb      	strb	r3, [r7, #22]
 814053e:	e010      	b.n	8140562 <SCH_RunSystemTickTimer+0x146>
        {
            if (s_SoftTimers[timerIndex] > 0)
 8140540:	7dbb      	ldrb	r3, [r7, #22]
 8140542:	4a14      	ldr	r2, [pc, #80]	@ (8140594 <SCH_RunSystemTickTimer+0x178>)
 8140544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8140548:	2b00      	cmp	r3, #0
 814054a:	d007      	beq.n	814055c <SCH_RunSystemTickTimer+0x140>
                s_SoftTimers[timerIndex]--;
 814054c:	7dbb      	ldrb	r3, [r7, #22]
 814054e:	4a11      	ldr	r2, [pc, #68]	@ (8140594 <SCH_RunSystemTickTimer+0x178>)
 8140550:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8140554:	3a01      	subs	r2, #1
 8140556:	490f      	ldr	r1, [pc, #60]	@ (8140594 <SCH_RunSystemTickTimer+0x178>)
 8140558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 814055c:	7dbb      	ldrb	r3, [r7, #22]
 814055e:	3301      	adds	r3, #1
 8140560:	75bb      	strb	r3, [r7, #22]
 8140562:	7dbb      	ldrb	r3, [r7, #22]
 8140564:	2b01      	cmp	r3, #1
 8140566:	d9eb      	bls.n	8140540 <SCH_RunSystemTickTimer+0x124>
        }
    }
}
 8140568:	bf00      	nop
 814056a:	371c      	adds	r7, #28
 814056c:	46bd      	mov	sp, r7
 814056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140572:	4770      	bx	lr
 8140574:	10032218 	.word	0x10032218
 8140578:	10032454 	.word	0x10032454
 814057c:	1003221c 	.word	0x1003221c
 8140580:	1003244c 	.word	0x1003244c
 8140584:	1003239c 	.word	0x1003239c
 8140588:	100323a0 	.word	0x100323a0
 814058c:	10032450 	.word	0x10032450
 8140590:	10032440 	.word	0x10032440
 8140594:	10032458 	.word	0x10032458

08140598 <SCH_StartScheduler>:
 * @brief  Start scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_StartScheduler(void)
{
 8140598:	b480      	push	{r7}
 814059a:	af00      	add	r7, sp, #0
    s_SchedulerRunning = TRUE;
 814059c:	4b03      	ldr	r3, [pc, #12]	@ (81405ac <SCH_StartScheduler+0x14>)
 814059e:	2201      	movs	r2, #1
 81405a0:	701a      	strb	r2, [r3, #0]
}
 81405a2:	bf00      	nop
 81405a4:	46bd      	mov	sp, r7
 81405a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81405aa:	4770      	bx	lr
 81405ac:	10032218 	.word	0x10032218

081405b0 <SCH_HandleScheduledTask>:
 * @brief  Function handles scheduled task and timer events
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 81405b0:	b580      	push	{r7, lr}
 81405b2:	b088      	sub	sp, #32
 81405b4:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 81405b6:	4b5b      	ldr	r3, [pc, #364]	@ (8140724 <SCH_HandleScheduledTask+0x174>)
 81405b8:	781b      	ldrb	r3, [r3, #0]
 81405ba:	2b00      	cmp	r3, #0
 81405bc:	f000 80ad 	beq.w	814071a <SCH_HandleScheduledTask+0x16a>
    {
        // Task - Process by priority from highest (SCH_TASK_PRIO_3) to lowest (SCH_TASK_PRIO_0)
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 81405c0:	2303      	movs	r3, #3
 81405c2:	77fb      	strb	r3, [r7, #31]
 81405c4:	e05c      	b.n	8140680 <SCH_HandleScheduledTask+0xd0>
        {
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 81405c6:	2300      	movs	r3, #0
 81405c8:	77bb      	strb	r3, [r7, #30]
 81405ca:	e050      	b.n	814066e <SCH_HandleScheduledTask+0xbe>
            {
                uint32_t pending = s_TaskPending[index];
 81405cc:	7fbb      	ldrb	r3, [r7, #30]
 81405ce:	4a56      	ldr	r2, [pc, #344]	@ (8140728 <SCH_HandleScheduledTask+0x178>)
 81405d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81405d4:	60bb      	str	r3, [r7, #8]
                for (uint8_t bit = 0; bit < 32; bit++)
 81405d6:	2300      	movs	r3, #0
 81405d8:	777b      	strb	r3, [r7, #29]
 81405da:	e042      	b.n	8140662 <SCH_HandleScheduledTask+0xb2>
                {
                    if (pending & (1 << bit))
 81405dc:	7f7b      	ldrb	r3, [r7, #29]
 81405de:	2201      	movs	r2, #1
 81405e0:	fa02 f303 	lsl.w	r3, r2, r3
 81405e4:	461a      	mov	r2, r3
 81405e6:	68bb      	ldr	r3, [r7, #8]
 81405e8:	4013      	ands	r3, r2
 81405ea:	2b00      	cmp	r3, #0
 81405ec:	d036      	beq.n	814065c <SCH_HandleScheduledTask+0xac>
                    {
                        uint8_t taskIndex = index * 32 + bit;
 81405ee:	7fbb      	ldrb	r3, [r7, #30]
 81405f0:	015b      	lsls	r3, r3, #5
 81405f2:	b2da      	uxtb	r2, r3
 81405f4:	7f7b      	ldrb	r3, [r7, #29]
 81405f6:	4413      	add	r3, r2
 81405f8:	71fb      	strb	r3, [r7, #7]
                        if (taskIndex < s_NumOfTaskScheduled)
 81405fa:	4b4c      	ldr	r3, [pc, #304]	@ (814072c <SCH_HandleScheduledTask+0x17c>)
 81405fc:	781b      	ldrb	r3, [r3, #0]
 81405fe:	79fa      	ldrb	r2, [r7, #7]
 8140600:	429a      	cmp	r2, r3
 8140602:	d22b      	bcs.n	814065c <SCH_HandleScheduledTask+0xac>
                        {
                            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 8140604:	79fa      	ldrb	r2, [r7, #7]
 8140606:	4613      	mov	r3, r2
 8140608:	005b      	lsls	r3, r3, #1
 814060a:	4413      	add	r3, r2
 814060c:	00db      	lsls	r3, r3, #3
 814060e:	4a48      	ldr	r2, [pc, #288]	@ (8140730 <SCH_HandleScheduledTask+0x180>)
 8140610:	4413      	add	r3, r2
 8140612:	603b      	str	r3, [r7, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8140614:	683b      	ldr	r3, [r7, #0]
 8140616:	7a5b      	ldrb	r3, [r3, #9]
 8140618:	461a      	mov	r2, r3
 814061a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 814061e:	429a      	cmp	r2, r3
 8140620:	d11c      	bne.n	814065c <SCH_HandleScheduledTask+0xac>
                                pTaskContext->taskState == TASK_StateReady)
 8140622:	683b      	ldr	r3, [r7, #0]
 8140624:	781b      	ldrb	r3, [r3, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8140626:	2b01      	cmp	r3, #1
 8140628:	d118      	bne.n	814065c <SCH_HandleScheduledTask+0xac>
                            {
                                s_TaskPending[index] &= ~(1 << bit);  // Clear bit
 814062a:	7fbb      	ldrb	r3, [r7, #30]
 814062c:	4a3e      	ldr	r2, [pc, #248]	@ (8140728 <SCH_HandleScheduledTask+0x178>)
 814062e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8140632:	7f7b      	ldrb	r3, [r7, #29]
 8140634:	2101      	movs	r1, #1
 8140636:	fa01 f303 	lsl.w	r3, r1, r3
 814063a:	43db      	mvns	r3, r3
 814063c:	4619      	mov	r1, r3
 814063e:	7fbb      	ldrb	r3, [r7, #30]
 8140640:	400a      	ands	r2, r1
 8140642:	4939      	ldr	r1, [pc, #228]	@ (8140728 <SCH_HandleScheduledTask+0x178>)
 8140644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                pTaskContext->taskProperty.taskFunction();
 8140648:	683b      	ldr	r3, [r7, #0]
 814064a:	691b      	ldr	r3, [r3, #16]
 814064c:	4798      	blx	r3
                                // Async tasks, set state to Hold after execution
                                if (pTaskContext->taskProperty.taskType == SCH_TASK_ASYNC)
 814064e:	683b      	ldr	r3, [r7, #0]
 8140650:	7a1b      	ldrb	r3, [r3, #8]
 8140652:	2b02      	cmp	r3, #2
 8140654:	d102      	bne.n	814065c <SCH_HandleScheduledTask+0xac>
                                {
                                    pTaskContext->taskState = TASK_StateHold;
 8140656:	683b      	ldr	r3, [r7, #0]
 8140658:	2200      	movs	r2, #0
 814065a:	701a      	strb	r2, [r3, #0]
                for (uint8_t bit = 0; bit < 32; bit++)
 814065c:	7f7b      	ldrb	r3, [r7, #29]
 814065e:	3301      	adds	r3, #1
 8140660:	777b      	strb	r3, [r7, #29]
 8140662:	7f7b      	ldrb	r3, [r7, #29]
 8140664:	2b1f      	cmp	r3, #31
 8140666:	d9b9      	bls.n	81405dc <SCH_HandleScheduledTask+0x2c>
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 8140668:	7fbb      	ldrb	r3, [r7, #30]
 814066a:	3301      	adds	r3, #1
 814066c:	77bb      	strb	r3, [r7, #30]
 814066e:	7fbb      	ldrb	r3, [r7, #30]
 8140670:	2b00      	cmp	r3, #0
 8140672:	d0ab      	beq.n	81405cc <SCH_HandleScheduledTask+0x1c>
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 8140674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8140678:	b2db      	uxtb	r3, r3
 814067a:	3b01      	subs	r3, #1
 814067c:	b2db      	uxtb	r3, r3
 814067e:	77fb      	strb	r3, [r7, #31]
 8140680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8140684:	2b00      	cmp	r3, #0
 8140686:	da9e      	bge.n	81405c6 <SCH_HandleScheduledTask+0x16>
                }
            }
        }

        // Timer
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 8140688:	2300      	movs	r3, #0
 814068a:	773b      	strb	r3, [r7, #28]
 814068c:	e042      	b.n	8140714 <SCH_HandleScheduledTask+0x164>
        {
            uint32_t pending = s_TimerPending[index];
 814068e:	7f3b      	ldrb	r3, [r7, #28]
 8140690:	4a28      	ldr	r2, [pc, #160]	@ (8140734 <SCH_HandleScheduledTask+0x184>)
 8140692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8140696:	617b      	str	r3, [r7, #20]
            for (uint8_t bit = 0; bit < 32; bit++)
 8140698:	2300      	movs	r3, #0
 814069a:	76fb      	strb	r3, [r7, #27]
 814069c:	e034      	b.n	8140708 <SCH_HandleScheduledTask+0x158>
            {
                if (pending & (1 << bit))
 814069e:	7efb      	ldrb	r3, [r7, #27]
 81406a0:	2201      	movs	r2, #1
 81406a2:	fa02 f303 	lsl.w	r3, r2, r3
 81406a6:	461a      	mov	r2, r3
 81406a8:	697b      	ldr	r3, [r7, #20]
 81406aa:	4013      	ands	r3, r2
 81406ac:	2b00      	cmp	r3, #0
 81406ae:	d028      	beq.n	8140702 <SCH_HandleScheduledTask+0x152>
                {
                    uint8_t timerIndex = index * 32 + bit;
 81406b0:	7f3b      	ldrb	r3, [r7, #28]
 81406b2:	015b      	lsls	r3, r3, #5
 81406b4:	b2da      	uxtb	r2, r3
 81406b6:	7efb      	ldrb	r3, [r7, #27]
 81406b8:	4413      	add	r3, r2
 81406ba:	74fb      	strb	r3, [r7, #19]
                    if (timerIndex < s_NumOfTimers)
 81406bc:	4b1e      	ldr	r3, [pc, #120]	@ (8140738 <SCH_HandleScheduledTask+0x188>)
 81406be:	781b      	ldrb	r3, [r3, #0]
 81406c0:	7cfa      	ldrb	r2, [r7, #19]
 81406c2:	429a      	cmp	r2, r3
 81406c4:	d21d      	bcs.n	8140702 <SCH_HandleScheduledTask+0x152>
                    {
                        s_TimerPending[index] &= ~(1 << bit);  // Clear bit
 81406c6:	7f3b      	ldrb	r3, [r7, #28]
 81406c8:	4a1a      	ldr	r2, [pc, #104]	@ (8140734 <SCH_HandleScheduledTask+0x184>)
 81406ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81406ce:	7efb      	ldrb	r3, [r7, #27]
 81406d0:	2101      	movs	r1, #1
 81406d2:	fa01 f303 	lsl.w	r3, r1, r3
 81406d6:	43db      	mvns	r3, r3
 81406d8:	4619      	mov	r1, r3
 81406da:	7f3b      	ldrb	r3, [r7, #28]
 81406dc:	400a      	ands	r2, r1
 81406de:	4915      	ldr	r1, [pc, #84]	@ (8140734 <SCH_HandleScheduledTask+0x184>)
 81406e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 81406e4:	7cfa      	ldrb	r2, [r7, #19]
 81406e6:	4613      	mov	r3, r2
 81406e8:	009b      	lsls	r3, r3, #2
 81406ea:	4413      	add	r3, r2
 81406ec:	009b      	lsls	r3, r3, #2
 81406ee:	4a13      	ldr	r2, [pc, #76]	@ (814073c <SCH_HandleScheduledTask+0x18c>)
 81406f0:	4413      	add	r3, r2
 81406f2:	60fb      	str	r3, [r7, #12]
                        if (pTimerContext->timerProperty.timerCallbackFunction)
 81406f4:	68fb      	ldr	r3, [r7, #12]
 81406f6:	691b      	ldr	r3, [r3, #16]
 81406f8:	2b00      	cmp	r3, #0
 81406fa:	d002      	beq.n	8140702 <SCH_HandleScheduledTask+0x152>
                        {
                            pTimerContext->timerProperty.timerCallbackFunction();
 81406fc:	68fb      	ldr	r3, [r7, #12]
 81406fe:	691b      	ldr	r3, [r3, #16]
 8140700:	4798      	blx	r3
            for (uint8_t bit = 0; bit < 32; bit++)
 8140702:	7efb      	ldrb	r3, [r7, #27]
 8140704:	3301      	adds	r3, #1
 8140706:	76fb      	strb	r3, [r7, #27]
 8140708:	7efb      	ldrb	r3, [r7, #27]
 814070a:	2b1f      	cmp	r3, #31
 814070c:	d9c7      	bls.n	814069e <SCH_HandleScheduledTask+0xee>
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 814070e:	7f3b      	ldrb	r3, [r7, #28]
 8140710:	3301      	adds	r3, #1
 8140712:	773b      	strb	r3, [r7, #28]
 8140714:	7f3b      	ldrb	r3, [r7, #28]
 8140716:	2b00      	cmp	r3, #0
 8140718:	d0b9      	beq.n	814068e <SCH_HandleScheduledTask+0xde>
                    }
                }
            }
        }
    }
}
 814071a:	bf00      	nop
 814071c:	3720      	adds	r7, #32
 814071e:	46bd      	mov	sp, r7
 8140720:	bd80      	pop	{r7, pc}
 8140722:	bf00      	nop
 8140724:	10032218 	.word	0x10032218
 8140728:	1003244c 	.word	0x1003244c
 814072c:	1003239c 	.word	0x1003239c
 8140730:	1003221c 	.word	0x1003221c
 8140734:	10032450 	.word	0x10032450
 8140738:	10032440 	.word	0x10032440
 814073c:	100323a0 	.word	0x100323a0

08140740 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8140740:	b480      	push	{r7}
 8140742:	b083      	sub	sp, #12
 8140744:	af00      	add	r7, sp, #0
 8140746:	6078      	str	r0, [r7, #4]
 8140748:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 814074a:	687b      	ldr	r3, [r7, #4]
 814074c:	683a      	ldr	r2, [r7, #0]
 814074e:	619a      	str	r2, [r3, #24]
}
 8140750:	bf00      	nop
 8140752:	370c      	adds	r7, #12
 8140754:	46bd      	mov	sp, r7
 8140756:	f85d 7b04 	ldr.w	r7, [sp], #4
 814075a:	4770      	bx	lr

0814075c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 814075c:	b480      	push	{r7}
 814075e:	b083      	sub	sp, #12
 8140760:	af00      	add	r7, sp, #0
 8140762:	6078      	str	r0, [r7, #4]
 8140764:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8140766:	683b      	ldr	r3, [r7, #0]
 8140768:	041a      	lsls	r2, r3, #16
 814076a:	687b      	ldr	r3, [r7, #4]
 814076c:	619a      	str	r2, [r3, #24]
}
 814076e:	bf00      	nop
 8140770:	370c      	adds	r7, #12
 8140772:	46bd      	mov	sp, r7
 8140774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140778:	4770      	bx	lr
	...

0814077c <BlinkLed1_Task>:

/*************************************************
 *                    Task List                  *
 *************************************************/
static void BlinkLed1_Task(void)
{
 814077c:	b580      	push	{r7, lr}
 814077e:	af00      	add	r7, sp, #0
    static uint8_t ledState = 0;
    if (ledState == 0)
 8140780:	4b0b      	ldr	r3, [pc, #44]	@ (81407b0 <BlinkLed1_Task+0x34>)
 8140782:	781b      	ldrb	r3, [r3, #0]
 8140784:	2b00      	cmp	r3, #0
 8140786:	d108      	bne.n	814079a <BlinkLed1_Task+0x1e>
    {
        ledState = 1;
 8140788:	4b09      	ldr	r3, [pc, #36]	@ (81407b0 <BlinkLed1_Task+0x34>)
 814078a:	2201      	movs	r2, #1
 814078c:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 814078e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8140792:	4808      	ldr	r0, [pc, #32]	@ (81407b4 <BlinkLed1_Task+0x38>)
 8140794:	f7ff ffd4 	bl	8140740 <LL_GPIO_SetOutputPin>
    else
    {
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
        ledState = 0;
    }
}
 8140798:	e007      	b.n	81407aa <BlinkLed1_Task+0x2e>
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 814079a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 814079e:	4805      	ldr	r0, [pc, #20]	@ (81407b4 <BlinkLed1_Task+0x38>)
 81407a0:	f7ff ffdc 	bl	814075c <LL_GPIO_ResetOutputPin>
        ledState = 0;
 81407a4:	4b02      	ldr	r3, [pc, #8]	@ (81407b0 <BlinkLed1_Task+0x34>)
 81407a6:	2200      	movs	r2, #0
 81407a8:	701a      	strb	r2, [r3, #0]
}
 81407aa:	bf00      	nop
 81407ac:	bd80      	pop	{r7, pc}
 81407ae:	bf00      	nop
 81407b0:	10032461 	.word	0x10032461
 81407b4:	58020c00 	.word	0x58020c00

081407b8 <BlinkLed2_Task>:

static void BlinkLed2_Task(void)
{
 81407b8:	b480      	push	{r7}
 81407ba:	af00      	add	r7, sp, #0
//    else
//    {
//        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
//        ledState = 0;
//    }
}
 81407bc:	bf00      	nop
 81407be:	46bd      	mov	sp, r7
 81407c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81407c4:	4770      	bx	lr
	...

081407c8 <CDC_RxPoll_Task>:

static void CDC_RxPoll_Task(void)
{
 81407c8:	b580      	push	{r7, lr}
 81407ca:	b082      	sub	sp, #8
 81407cc:	af00      	add	r7, sp, #0
    if (!CDC_getRxReady()) return;
 81407ce:	f000 fddb 	bl	8141388 <CDC_getRxReady>
 81407d2:	4603      	mov	r3, r0
 81407d4:	2b00      	cmp	r3, #0
 81407d6:	d010      	beq.n	81407fa <CDC_RxPoll_Task+0x32>
    CDC_setRxReady(0);
 81407d8:	2000      	movs	r0, #0
 81407da:	f000 fde1 	bl	81413a0 <CDC_setRxReady>

    uint8_t ch;
    while (CDC_RX_RingBuffer_Get(&ch))
 81407de:	e004      	b.n	81407ea <CDC_RxPoll_Task+0x22>
    {
        UART_Driver_Write(UART_PORT, ch);
 81407e0:	79fb      	ldrb	r3, [r7, #7]
 81407e2:	4619      	mov	r1, r3
 81407e4:	4807      	ldr	r0, [pc, #28]	@ (8140804 <CDC_RxPoll_Task+0x3c>)
 81407e6:	f000 fc09 	bl	8140ffc <UART_Driver_Write>
    while (CDC_RX_RingBuffer_Get(&ch))
 81407ea:	1dfb      	adds	r3, r7, #7
 81407ec:	4618      	mov	r0, r3
 81407ee:	f000 fda3 	bl	8141338 <CDC_RX_RingBuffer_Get>
 81407f2:	4603      	mov	r3, r0
 81407f4:	2b00      	cmp	r3, #0
 81407f6:	d1f3      	bne.n	81407e0 <CDC_RxPoll_Task+0x18>
 81407f8:	e000      	b.n	81407fc <CDC_RxPoll_Task+0x34>
    if (!CDC_getRxReady()) return;
 81407fa:	bf00      	nop
    }
}
 81407fc:	3708      	adds	r7, #8
 81407fe:	46bd      	mov	sp, r7
 8140800:	bd80      	pop	{r7, pc}
 8140802:	bf00      	nop
 8140804:	40011400 	.word	0x40011400

08140808 <CDC_TxPoll_Task>:

static void CDC_TxPoll_Task(void)
{
 8140808:	b580      	push	{r7, lr}
 814080a:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 814080e:	af00      	add	r7, sp, #0
    if (!CDC_IsTxReady())
 8140810:	f00d fc4c 	bl	814e0ac <CDC_IsTxReady>
 8140814:	4603      	mov	r3, r0
 8140816:	f083 0301 	eor.w	r3, r3, #1
 814081a:	b2db      	uxtb	r3, r3
 814081c:	2b00      	cmp	r3, #0
 814081e:	d125      	bne.n	814086c <CDC_TxPoll_Task+0x64>
    {
        return;
    }

    uint8_t pkt[CDC_USB_MAX_PKT];
    uint16_t cnt = 0;
 8140820:	2300      	movs	r3, #0
 8140822:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8140826:	e004      	b.n	8140832 <CDC_TxPoll_Task+0x2a>
    {
        ++cnt;
 8140828:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 814082c:	3301      	adds	r3, #1
 814082e:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8140832:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8140836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 814083a:	d209      	bcs.n	8140850 <CDC_TxPoll_Task+0x48>
 814083c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8140840:	1d3a      	adds	r2, r7, #4
 8140842:	4413      	add	r3, r2
 8140844:	4618      	mov	r0, r3
 8140846:	f000 fd67 	bl	8141318 <CDC_TX_RingBuffer_Get>
 814084a:	4603      	mov	r3, r0
 814084c:	2b00      	cmp	r3, #0
 814084e:	d1eb      	bne.n	8140828 <CDC_TxPoll_Task+0x20>
    }

    if (cnt == 0)
 8140850:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8140854:	2b00      	cmp	r3, #0
 8140856:	d00b      	beq.n	8140870 <CDC_TxPoll_Task+0x68>
    {
        return;
    }

    if (CDC_Transmit_FS(pkt, cnt) != USBD_OK)
 8140858:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	@ 0x806
 814085c:	1d3b      	adds	r3, r7, #4
 814085e:	4611      	mov	r1, r2
 8140860:	4618      	mov	r0, r3
 8140862:	f00d fbdf 	bl	814e024 <CDC_Transmit_FS>
 8140866:	4603      	mov	r3, r0
 8140868:	2b00      	cmp	r3, #0
 814086a:	e002      	b.n	8140872 <CDC_TxPoll_Task+0x6a>
        return;
 814086c:	bf00      	nop
 814086e:	e000      	b.n	8140872 <CDC_TxPoll_Task+0x6a>
        return;
 8140870:	bf00      	nop
    {
        return;
    }
}
 8140872:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 8140876:	46bd      	mov	sp, r7
 8140878:	bd80      	pop	{r7, pc}
	...

0814087c <USB_Check_Task>:

static void USB_Check_Task(void)
{
 814087c:	b580      	push	{r7, lr}
 814087e:	b082      	sub	sp, #8
 8140880:	af00      	add	r7, sp, #0
    if (USB_checkUSB())
 8140882:	f000 fd9d 	bl	81413c0 <USB_checkUSB>
 8140886:	4603      	mov	r3, r0
 8140888:	2b00      	cmp	r3, #0
 814088a:	d01a      	beq.n	81408c2 <USB_Check_Task+0x46>
    {
    	USB_setCheckFlag(0);
 814088c:	2000      	movs	r0, #0
 814088e:	f000 fda3 	bl	81413d8 <USB_setCheckFlag>
        uint8_t comPortState = CDC_ComPort_IsOpen() ? 1 : 0;
 8140892:	f00d fbff 	bl	814e094 <CDC_ComPort_IsOpen>
 8140896:	4603      	mov	r3, r0
 8140898:	71fb      	strb	r3, [r7, #7]
        if(comPortState){
 814089a:	79fb      	ldrb	r3, [r7, #7]
 814089c:	2b00      	cmp	r3, #0
 814089e:	d005      	beq.n	81408ac <USB_Check_Task+0x30>
        	LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81408a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81408a4:	4809      	ldr	r0, [pc, #36]	@ (81408cc <USB_Check_Task+0x50>)
 81408a6:	f7ff ff59 	bl	814075c <LL_GPIO_ResetOutputPin>
 81408aa:	e004      	b.n	81408b6 <USB_Check_Task+0x3a>
        }else{
        	LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81408ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81408b0:	4806      	ldr	r0, [pc, #24]	@ (81408cc <USB_Check_Task+0x50>)
 81408b2:	f7ff ff45 	bl	8140740 <LL_GPIO_SetOutputPin>
        }
        SharedREG_Write(DIR_M4_TO_M7, 0, comPortState);
 81408b6:	79fb      	ldrb	r3, [r7, #7]
 81408b8:	461a      	mov	r2, r3
 81408ba:	2100      	movs	r1, #0
 81408bc:	2001      	movs	r0, #1
 81408be:	f000 f85b 	bl	8140978 <SharedREG_Write>
    }
}
 81408c2:	bf00      	nop
 81408c4:	3708      	adds	r7, #8
 81408c6:	46bd      	mov	sp, r7
 81408c8:	bd80      	pop	{r7, pc}
 81408ca:	bf00      	nop
 81408cc:	58020c00 	.word	0x58020c00

081408d0 <UART_Port_RxPoll_Task>:
static void UART_Port_RxPoll_Task(void)
{
 81408d0:	b580      	push	{r7, lr}
 81408d2:	b082      	sub	sp, #8
 81408d4:	af00      	add	r7, sp, #0

        int c;
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 81408d6:	e004      	b.n	81408e2 <UART_Port_RxPoll_Task+0x12>
        {
            CDC_SendChar((char)c);
 81408d8:	687b      	ldr	r3, [r7, #4]
 81408da:	b2db      	uxtb	r3, r3
 81408dc:	4618      	mov	r0, r3
 81408de:	f000 fda8 	bl	8141432 <CDC_SendChar>
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 81408e2:	4806      	ldr	r0, [pc, #24]	@ (81408fc <UART_Port_RxPoll_Task+0x2c>)
 81408e4:	f000 fc69 	bl	81411ba <UART_DMA_Driver_Read>
 81408e8:	6078      	str	r0, [r7, #4]
 81408ea:	687b      	ldr	r3, [r7, #4]
 81408ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81408f0:	d1f2      	bne.n	81408d8 <UART_Port_RxPoll_Task+0x8>
        }

}
 81408f2:	bf00      	nop
 81408f4:	bf00      	nop
 81408f6:	3708      	adds	r7, #8
 81408f8:	46bd      	mov	sp, r7
 81408fa:	bd80      	pop	{r7, pc}
 81408fc:	40011400 	.word	0x40011400

08140900 <SchedulerTasks_Create>:
 *************************************************/

#define NUM_SCHEDULER_TASKS (sizeof(schedulerTasks) / sizeof(schedulerTasks[0]))

void SchedulerTasks_Create(void)
{
 8140900:	b580      	push	{r7, lr}
 8140902:	b082      	sub	sp, #8
 8140904:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 8140906:	2300      	movs	r3, #0
 8140908:	71fb      	strb	r3, [r7, #7]
 814090a:	e029      	b.n	8140960 <SchedulerTasks_Create+0x60>
    {
        SCH_TASK_CreateTask(&schedulerTasks[i].taskHandle, &schedulerTasks[i].taskProperty);
 814090c:	79fa      	ldrb	r2, [r7, #7]
 814090e:	4613      	mov	r3, r2
 8140910:	009b      	lsls	r3, r3, #2
 8140912:	4413      	add	r3, r2
 8140914:	009b      	lsls	r3, r3, #2
 8140916:	4a16      	ldr	r2, [pc, #88]	@ (8140970 <SchedulerTasks_Create+0x70>)
 8140918:	1898      	adds	r0, r3, r2
 814091a:	79fa      	ldrb	r2, [r7, #7]
 814091c:	4613      	mov	r3, r2
 814091e:	009b      	lsls	r3, r3, #2
 8140920:	4413      	add	r3, r2
 8140922:	009b      	lsls	r3, r3, #2
 8140924:	4a12      	ldr	r2, [pc, #72]	@ (8140970 <SchedulerTasks_Create+0x70>)
 8140926:	4413      	add	r3, r2
 8140928:	3304      	adds	r3, #4
 814092a:	4619      	mov	r1, r3
 814092c:	f7ff fd32 	bl	8140394 <SCH_TASK_CreateTask>
        if (schedulerTasks[i].taskProperty.taskType == SCH_TASK_ASYNC)
 8140930:	79fa      	ldrb	r2, [r7, #7]
 8140932:	490f      	ldr	r1, [pc, #60]	@ (8140970 <SchedulerTasks_Create+0x70>)
 8140934:	4613      	mov	r3, r2
 8140936:	009b      	lsls	r3, r3, #2
 8140938:	4413      	add	r3, r2
 814093a:	009b      	lsls	r3, r3, #2
 814093c:	440b      	add	r3, r1
 814093e:	3304      	adds	r3, #4
 8140940:	781b      	ldrb	r3, [r3, #0]
 8140942:	2b02      	cmp	r3, #2
 8140944:	d109      	bne.n	814095a <SchedulerTasks_Create+0x5a>
        {
            asyncTaskHandle = schedulerTasks[i].taskHandle;
 8140946:	79fa      	ldrb	r2, [r7, #7]
 8140948:	4909      	ldr	r1, [pc, #36]	@ (8140970 <SchedulerTasks_Create+0x70>)
 814094a:	4613      	mov	r3, r2
 814094c:	009b      	lsls	r3, r3, #2
 814094e:	4413      	add	r3, r2
 8140950:	009b      	lsls	r3, r3, #2
 8140952:	440b      	add	r3, r1
 8140954:	781a      	ldrb	r2, [r3, #0]
 8140956:	4b07      	ldr	r3, [pc, #28]	@ (8140974 <SchedulerTasks_Create+0x74>)
 8140958:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 814095a:	79fb      	ldrb	r3, [r7, #7]
 814095c:	3301      	adds	r3, #1
 814095e:	71fb      	strb	r3, [r7, #7]
 8140960:	79fb      	ldrb	r3, [r7, #7]
 8140962:	2b05      	cmp	r3, #5
 8140964:	d9d2      	bls.n	814090c <SchedulerTasks_Create+0xc>
        }
    }
}
 8140966:	bf00      	nop
 8140968:	bf00      	nop
 814096a:	3708      	adds	r7, #8
 814096c:	46bd      	mov	sp, r7
 814096e:	bd80      	pop	{r7, pc}
 8140970:	10032000 	.word	0x10032000
 8140974:	10032460 	.word	0x10032460

08140978 <SharedREG_Write>:

#include "shared_reg.h"
#include <string.h>

void SharedREG_Write(SharedDir_t dir, uint16_t slot, uint8_t data)
{
 8140978:	b480      	push	{r7}
 814097a:	b083      	sub	sp, #12
 814097c:	af00      	add	r7, sp, #0
 814097e:	4603      	mov	r3, r0
 8140980:	71fb      	strb	r3, [r7, #7]
 8140982:	460b      	mov	r3, r1
 8140984:	80bb      	strh	r3, [r7, #4]
 8140986:	4613      	mov	r3, r2
 8140988:	71bb      	strb	r3, [r7, #6]
    if (slot > SHARED_SLOT_MAX) return;
 814098a:	88bb      	ldrh	r3, [r7, #4]
 814098c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8140990:	d211      	bcs.n	81409b6 <SharedREG_Write+0x3e>
    if (!SHARED_IS_WRITER(dir)) return;
 8140992:	79fb      	ldrb	r3, [r7, #7]
 8140994:	2b01      	cmp	r3, #1
 8140996:	d110      	bne.n	81409ba <SharedREG_Write+0x42>

    if (dir == DIR_M7_TO_M4)
 8140998:	79fb      	ldrb	r3, [r7, #7]
 814099a:	2b00      	cmp	r3, #0
 814099c:	d104      	bne.n	81409a8 <SharedREG_Write+0x30>
        SHARED.M7_to_M4[slot] = data;
 814099e:	490a      	ldr	r1, [pc, #40]	@ (81409c8 <SharedREG_Write+0x50>)
 81409a0:	88bb      	ldrh	r3, [r7, #4]
 81409a2:	79ba      	ldrb	r2, [r7, #6]
 81409a4:	54ca      	strb	r2, [r1, r3]
 81409a6:	e009      	b.n	81409bc <SharedREG_Write+0x44>
    else
        SHARED.M4_to_M7[slot] = data;
 81409a8:	4a07      	ldr	r2, [pc, #28]	@ (81409c8 <SharedREG_Write+0x50>)
 81409aa:	88bb      	ldrh	r3, [r7, #4]
 81409ac:	4413      	add	r3, r2
 81409ae:	79ba      	ldrb	r2, [r7, #6]
 81409b0:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 81409b4:	e002      	b.n	81409bc <SharedREG_Write+0x44>
    if (slot > SHARED_SLOT_MAX) return;
 81409b6:	bf00      	nop
 81409b8:	e000      	b.n	81409bc <SharedREG_Write+0x44>
    if (!SHARED_IS_WRITER(dir)) return;
 81409ba:	bf00      	nop
}
 81409bc:	370c      	adds	r7, #12
 81409be:	46bd      	mov	sp, r7
 81409c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81409c4:	4770      	bx	lr
 81409c6:	bf00      	nop
 81409c8:	3800f800 	.word	0x3800f800

081409cc <SharedREG_Clear>:
            SHARED.M7_to_M4[slot] :
            SHARED.M4_to_M7[slot];
}

void SharedREG_Clear(SharedDir_t dir)
{
 81409cc:	b580      	push	{r7, lr}
 81409ce:	b082      	sub	sp, #8
 81409d0:	af00      	add	r7, sp, #0
 81409d2:	4603      	mov	r3, r0
 81409d4:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 81409d6:	79fb      	ldrb	r3, [r7, #7]
 81409d8:	2b01      	cmp	r3, #1
 81409da:	d110      	bne.n	81409fe <SharedREG_Clear+0x32>

    if (dir == DIR_M7_TO_M4)
 81409dc:	79fb      	ldrb	r3, [r7, #7]
 81409de:	2b00      	cmp	r3, #0
 81409e0:	d106      	bne.n	81409f0 <SharedREG_Clear+0x24>
        memset((void *)SHARED.M7_to_M4, 0, sizeof(SHARED.M7_to_M4));
 81409e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81409e6:	2100      	movs	r1, #0
 81409e8:	4807      	ldr	r0, [pc, #28]	@ (8140a08 <SharedREG_Clear+0x3c>)
 81409ea:	f00d ffc5 	bl	814e978 <memset>
 81409ee:	e007      	b.n	8140a00 <SharedREG_Clear+0x34>
    else
        memset((void *)SHARED.M4_to_M7, 0, sizeof(SHARED.M4_to_M7));
 81409f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81409f4:	2100      	movs	r1, #0
 81409f6:	4805      	ldr	r0, [pc, #20]	@ (8140a0c <SharedREG_Clear+0x40>)
 81409f8:	f00d ffbe 	bl	814e978 <memset>
 81409fc:	e000      	b.n	8140a00 <SharedREG_Clear+0x34>
    if (!SHARED_IS_WRITER(dir)) return;
 81409fe:	bf00      	nop
}
 8140a00:	3708      	adds	r7, #8
 8140a02:	46bd      	mov	sp, r7
 8140a04:	bd80      	pop	{r7, pc}
 8140a06:	bf00      	nop
 8140a08:	3800f800 	.word	0x3800f800
 8140a0c:	3800fc00 	.word	0x3800fc00

08140a10 <SharedREG_Init>:

void SharedREG_Init(SharedDir_t dir)
{
 8140a10:	b580      	push	{r7, lr}
 8140a12:	b082      	sub	sp, #8
 8140a14:	af00      	add	r7, sp, #0
 8140a16:	4603      	mov	r3, r0
 8140a18:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 8140a1a:	79fb      	ldrb	r3, [r7, #7]
 8140a1c:	2b01      	cmp	r3, #1
 8140a1e:	d104      	bne.n	8140a2a <SharedREG_Init+0x1a>

    SharedREG_Clear(dir);
 8140a20:	79fb      	ldrb	r3, [r7, #7]
 8140a22:	4618      	mov	r0, r3
 8140a24:	f7ff ffd2 	bl	81409cc <SharedREG_Clear>
 8140a28:	e000      	b.n	8140a2c <SharedREG_Init+0x1c>
    if (!SHARED_IS_WRITER(dir)) return;
 8140a2a:	bf00      	nop
//    if (dir == DIR_M4_TO_M7)
//    {
//        SharedREG_Write(DIR_M4_TO_M7, 0, 0);
//    }
}
 8140a2c:	3708      	adds	r7, #8
 8140a2e:	46bd      	mov	sp, r7
 8140a30:	bd80      	pop	{r7, pc}

08140a32 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8140a32:	b480      	push	{r7}
 8140a34:	b083      	sub	sp, #12
 8140a36:	af00      	add	r7, sp, #0
 8140a38:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8140a3a:	687b      	ldr	r3, [r7, #4]
 8140a3c:	681b      	ldr	r3, [r3, #0]
 8140a3e:	f043 0201 	orr.w	r2, r3, #1
 8140a42:	687b      	ldr	r3, [r7, #4]
 8140a44:	601a      	str	r2, [r3, #0]
}
 8140a46:	bf00      	nop
 8140a48:	370c      	adds	r7, #12
 8140a4a:	46bd      	mov	sp, r7
 8140a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140a50:	4770      	bx	lr

08140a52 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8140a52:	b480      	push	{r7}
 8140a54:	b083      	sub	sp, #12
 8140a56:	af00      	add	r7, sp, #0
 8140a58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8140a5a:	687b      	ldr	r3, [r7, #4]
 8140a5c:	681b      	ldr	r3, [r3, #0]
 8140a5e:	f023 0201 	bic.w	r2, r3, #1
 8140a62:	687b      	ldr	r3, [r7, #4]
 8140a64:	601a      	str	r2, [r3, #0]
}
 8140a66:	bf00      	nop
 8140a68:	370c      	adds	r7, #12
 8140a6a:	46bd      	mov	sp, r7
 8140a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140a70:	4770      	bx	lr

08140a72 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8140a72:	b480      	push	{r7}
 8140a74:	b083      	sub	sp, #12
 8140a76:	af00      	add	r7, sp, #0
 8140a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8140a7a:	687b      	ldr	r3, [r7, #4]
 8140a7c:	69db      	ldr	r3, [r3, #28]
 8140a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8140a82:	2b80      	cmp	r3, #128	@ 0x80
 8140a84:	d101      	bne.n	8140a8a <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8140a86:	2301      	movs	r3, #1
 8140a88:	e000      	b.n	8140a8c <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8140a8a:	2300      	movs	r3, #0
}
 8140a8c:	4618      	mov	r0, r3
 8140a8e:	370c      	adds	r7, #12
 8140a90:	46bd      	mov	sp, r7
 8140a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140a96:	4770      	bx	lr

08140a98 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8140a98:	b480      	push	{r7}
 8140a9a:	b089      	sub	sp, #36	@ 0x24
 8140a9c:	af00      	add	r7, sp, #0
 8140a9e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8140aa0:	687b      	ldr	r3, [r7, #4]
 8140aa2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8140aa4:	68fb      	ldr	r3, [r7, #12]
 8140aa6:	e853 3f00 	ldrex	r3, [r3]
 8140aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8140aac:	68bb      	ldr	r3, [r7, #8]
 8140aae:	f043 0310 	orr.w	r3, r3, #16
 8140ab2:	61fb      	str	r3, [r7, #28]
 8140ab4:	687b      	ldr	r3, [r7, #4]
 8140ab6:	69fa      	ldr	r2, [r7, #28]
 8140ab8:	61ba      	str	r2, [r7, #24]
 8140aba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8140abc:	6979      	ldr	r1, [r7, #20]
 8140abe:	69ba      	ldr	r2, [r7, #24]
 8140ac0:	e841 2300 	strex	r3, r2, [r1]
 8140ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8140ac6:	693b      	ldr	r3, [r7, #16]
 8140ac8:	2b00      	cmp	r3, #0
 8140aca:	d1e9      	bne.n	8140aa0 <LL_USART_EnableIT_IDLE+0x8>
}
 8140acc:	bf00      	nop
 8140ace:	bf00      	nop
 8140ad0:	3724      	adds	r7, #36	@ 0x24
 8140ad2:	46bd      	mov	sp, r7
 8140ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140ad8:	4770      	bx	lr

08140ada <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8140ada:	b480      	push	{r7}
 8140adc:	b089      	sub	sp, #36	@ 0x24
 8140ade:	af00      	add	r7, sp, #0
 8140ae0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8140ae2:	687b      	ldr	r3, [r7, #4]
 8140ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8140ae6:	68fb      	ldr	r3, [r7, #12]
 8140ae8:	e853 3f00 	ldrex	r3, [r3]
 8140aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8140aee:	68bb      	ldr	r3, [r7, #8]
 8140af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8140af4:	61fb      	str	r3, [r7, #28]
 8140af6:	687b      	ldr	r3, [r7, #4]
 8140af8:	69fa      	ldr	r2, [r7, #28]
 8140afa:	61ba      	str	r2, [r7, #24]
 8140afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8140afe:	6979      	ldr	r1, [r7, #20]
 8140b00:	69ba      	ldr	r2, [r7, #24]
 8140b02:	e841 2300 	strex	r3, r2, [r1]
 8140b06:	613b      	str	r3, [r7, #16]
   return(result);
 8140b08:	693b      	ldr	r3, [r7, #16]
 8140b0a:	2b00      	cmp	r3, #0
 8140b0c:	d1e9      	bne.n	8140ae2 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8140b0e:	bf00      	nop
 8140b10:	bf00      	nop
 8140b12:	3724      	adds	r7, #36	@ 0x24
 8140b14:	46bd      	mov	sp, r7
 8140b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140b1a:	4770      	bx	lr

08140b1c <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8140b1c:	b480      	push	{r7}
 8140b1e:	b089      	sub	sp, #36	@ 0x24
 8140b20:	af00      	add	r7, sp, #0
 8140b22:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8140b24:	687b      	ldr	r3, [r7, #4]
 8140b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8140b28:	68fb      	ldr	r3, [r7, #12]
 8140b2a:	e853 3f00 	ldrex	r3, [r3]
 8140b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8140b30:	68bb      	ldr	r3, [r7, #8]
 8140b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8140b36:	61fb      	str	r3, [r7, #28]
 8140b38:	687b      	ldr	r3, [r7, #4]
 8140b3a:	69fa      	ldr	r2, [r7, #28]
 8140b3c:	61ba      	str	r2, [r7, #24]
 8140b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8140b40:	6979      	ldr	r1, [r7, #20]
 8140b42:	69ba      	ldr	r2, [r7, #24]
 8140b44:	e841 2300 	strex	r3, r2, [r1]
 8140b48:	613b      	str	r3, [r7, #16]
   return(result);
 8140b4a:	693b      	ldr	r3, [r7, #16]
 8140b4c:	2b00      	cmp	r3, #0
 8140b4e:	d1e9      	bne.n	8140b24 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8140b50:	bf00      	nop
 8140b52:	bf00      	nop
 8140b54:	3724      	adds	r7, #36	@ 0x24
 8140b56:	46bd      	mov	sp, r7
 8140b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140b5c:	4770      	bx	lr

08140b5e <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8140b5e:	b480      	push	{r7}
 8140b60:	b083      	sub	sp, #12
 8140b62:	af00      	add	r7, sp, #0
 8140b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8140b66:	687b      	ldr	r3, [r7, #4]
 8140b68:	681b      	ldr	r3, [r3, #0]
 8140b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8140b6e:	2b80      	cmp	r3, #128	@ 0x80
 8140b70:	d101      	bne.n	8140b76 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8140b72:	2301      	movs	r3, #1
 8140b74:	e000      	b.n	8140b78 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8140b76:	2300      	movs	r3, #0
}
 8140b78:	4618      	mov	r0, r3
 8140b7a:	370c      	adds	r7, #12
 8140b7c:	46bd      	mov	sp, r7
 8140b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140b82:	4770      	bx	lr

08140b84 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8140b84:	b480      	push	{r7}
 8140b86:	b089      	sub	sp, #36	@ 0x24
 8140b88:	af00      	add	r7, sp, #0
 8140b8a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8140b8c:	687b      	ldr	r3, [r7, #4]
 8140b8e:	3308      	adds	r3, #8
 8140b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8140b92:	68fb      	ldr	r3, [r7, #12]
 8140b94:	e853 3f00 	ldrex	r3, [r3]
 8140b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8140b9a:	68bb      	ldr	r3, [r7, #8]
 8140b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8140ba0:	61fb      	str	r3, [r7, #28]
 8140ba2:	687b      	ldr	r3, [r7, #4]
 8140ba4:	3308      	adds	r3, #8
 8140ba6:	69fa      	ldr	r2, [r7, #28]
 8140ba8:	61ba      	str	r2, [r7, #24]
 8140baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8140bac:	6979      	ldr	r1, [r7, #20]
 8140bae:	69ba      	ldr	r2, [r7, #24]
 8140bb0:	e841 2300 	strex	r3, r2, [r1]
 8140bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8140bb6:	693b      	ldr	r3, [r7, #16]
 8140bb8:	2b00      	cmp	r3, #0
 8140bba:	d1e7      	bne.n	8140b8c <LL_USART_EnableDMAReq_RX+0x8>
}
 8140bbc:	bf00      	nop
 8140bbe:	bf00      	nop
 8140bc0:	3724      	adds	r7, #36	@ 0x24
 8140bc2:	46bd      	mov	sp, r7
 8140bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140bc8:	4770      	bx	lr

08140bca <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8140bca:	b480      	push	{r7}
 8140bcc:	b085      	sub	sp, #20
 8140bce:	af00      	add	r7, sp, #0
 8140bd0:	6078      	str	r0, [r7, #4]
 8140bd2:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8140bd4:	683b      	ldr	r3, [r7, #0]
 8140bd6:	2b00      	cmp	r3, #0
 8140bd8:	d103      	bne.n	8140be2 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8140bda:	687b      	ldr	r3, [r7, #4]
 8140bdc:	3328      	adds	r3, #40	@ 0x28
 8140bde:	60fb      	str	r3, [r7, #12]
 8140be0:	e002      	b.n	8140be8 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8140be2:	687b      	ldr	r3, [r7, #4]
 8140be4:	3324      	adds	r3, #36	@ 0x24
 8140be6:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8140be8:	68fb      	ldr	r3, [r7, #12]
}
 8140bea:	4618      	mov	r0, r3
 8140bec:	3714      	adds	r7, #20
 8140bee:	46bd      	mov	sp, r7
 8140bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140bf4:	4770      	bx	lr

08140bf6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8140bf6:	b480      	push	{r7}
 8140bf8:	b083      	sub	sp, #12
 8140bfa:	af00      	add	r7, sp, #0
 8140bfc:	6078      	str	r0, [r7, #4]
 8140bfe:	460b      	mov	r3, r1
 8140c00:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8140c02:	78fa      	ldrb	r2, [r7, #3]
 8140c04:	687b      	ldr	r3, [r7, #4]
 8140c06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8140c08:	bf00      	nop
 8140c0a:	370c      	adds	r7, #12
 8140c0c:	46bd      	mov	sp, r7
 8140c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140c12:	4770      	bx	lr

08140c14 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140c14:	b480      	push	{r7}
 8140c16:	b085      	sub	sp, #20
 8140c18:	af00      	add	r7, sp, #0
 8140c1a:	6078      	str	r0, [r7, #4]
 8140c1c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140c1e:	687b      	ldr	r3, [r7, #4]
 8140c20:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8140c22:	4a0c      	ldr	r2, [pc, #48]	@ (8140c54 <LL_DMA_EnableStream+0x40>)
 8140c24:	683b      	ldr	r3, [r7, #0]
 8140c26:	4413      	add	r3, r2
 8140c28:	781b      	ldrb	r3, [r3, #0]
 8140c2a:	461a      	mov	r2, r3
 8140c2c:	68fb      	ldr	r3, [r7, #12]
 8140c2e:	4413      	add	r3, r2
 8140c30:	681b      	ldr	r3, [r3, #0]
 8140c32:	4908      	ldr	r1, [pc, #32]	@ (8140c54 <LL_DMA_EnableStream+0x40>)
 8140c34:	683a      	ldr	r2, [r7, #0]
 8140c36:	440a      	add	r2, r1
 8140c38:	7812      	ldrb	r2, [r2, #0]
 8140c3a:	4611      	mov	r1, r2
 8140c3c:	68fa      	ldr	r2, [r7, #12]
 8140c3e:	440a      	add	r2, r1
 8140c40:	f043 0301 	orr.w	r3, r3, #1
 8140c44:	6013      	str	r3, [r2, #0]
}
 8140c46:	bf00      	nop
 8140c48:	3714      	adds	r7, #20
 8140c4a:	46bd      	mov	sp, r7
 8140c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140c50:	4770      	bx	lr
 8140c52:	bf00      	nop
 8140c54:	0814eab0 	.word	0x0814eab0

08140c58 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140c58:	b480      	push	{r7}
 8140c5a:	b085      	sub	sp, #20
 8140c5c:	af00      	add	r7, sp, #0
 8140c5e:	6078      	str	r0, [r7, #4]
 8140c60:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140c62:	687b      	ldr	r3, [r7, #4]
 8140c64:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8140c66:	4a0c      	ldr	r2, [pc, #48]	@ (8140c98 <LL_DMA_DisableStream+0x40>)
 8140c68:	683b      	ldr	r3, [r7, #0]
 8140c6a:	4413      	add	r3, r2
 8140c6c:	781b      	ldrb	r3, [r3, #0]
 8140c6e:	461a      	mov	r2, r3
 8140c70:	68fb      	ldr	r3, [r7, #12]
 8140c72:	4413      	add	r3, r2
 8140c74:	681b      	ldr	r3, [r3, #0]
 8140c76:	4908      	ldr	r1, [pc, #32]	@ (8140c98 <LL_DMA_DisableStream+0x40>)
 8140c78:	683a      	ldr	r2, [r7, #0]
 8140c7a:	440a      	add	r2, r1
 8140c7c:	7812      	ldrb	r2, [r2, #0]
 8140c7e:	4611      	mov	r1, r2
 8140c80:	68fa      	ldr	r2, [r7, #12]
 8140c82:	440a      	add	r2, r1
 8140c84:	f023 0301 	bic.w	r3, r3, #1
 8140c88:	6013      	str	r3, [r2, #0]
}
 8140c8a:	bf00      	nop
 8140c8c:	3714      	adds	r7, #20
 8140c8e:	46bd      	mov	sp, r7
 8140c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140c94:	4770      	bx	lr
 8140c96:	bf00      	nop
 8140c98:	0814eab0 	.word	0x0814eab0

08140c9c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 8140c9c:	b480      	push	{r7}
 8140c9e:	b087      	sub	sp, #28
 8140ca0:	af00      	add	r7, sp, #0
 8140ca2:	60f8      	str	r0, [r7, #12]
 8140ca4:	60b9      	str	r1, [r7, #8]
 8140ca6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140ca8:	68fb      	ldr	r3, [r7, #12]
 8140caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8140cac:	4a0d      	ldr	r2, [pc, #52]	@ (8140ce4 <LL_DMA_SetDataLength+0x48>)
 8140cae:	68bb      	ldr	r3, [r7, #8]
 8140cb0:	4413      	add	r3, r2
 8140cb2:	781b      	ldrb	r3, [r3, #0]
 8140cb4:	461a      	mov	r2, r3
 8140cb6:	697b      	ldr	r3, [r7, #20]
 8140cb8:	4413      	add	r3, r2
 8140cba:	685b      	ldr	r3, [r3, #4]
 8140cbc:	0c1b      	lsrs	r3, r3, #16
 8140cbe:	041b      	lsls	r3, r3, #16
 8140cc0:	4908      	ldr	r1, [pc, #32]	@ (8140ce4 <LL_DMA_SetDataLength+0x48>)
 8140cc2:	68ba      	ldr	r2, [r7, #8]
 8140cc4:	440a      	add	r2, r1
 8140cc6:	7812      	ldrb	r2, [r2, #0]
 8140cc8:	4611      	mov	r1, r2
 8140cca:	697a      	ldr	r2, [r7, #20]
 8140ccc:	440a      	add	r2, r1
 8140cce:	4611      	mov	r1, r2
 8140cd0:	687a      	ldr	r2, [r7, #4]
 8140cd2:	4313      	orrs	r3, r2
 8140cd4:	604b      	str	r3, [r1, #4]
}
 8140cd6:	bf00      	nop
 8140cd8:	371c      	adds	r7, #28
 8140cda:	46bd      	mov	sp, r7
 8140cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140ce0:	4770      	bx	lr
 8140ce2:	bf00      	nop
 8140ce4:	0814eab0 	.word	0x0814eab0

08140ce8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140ce8:	b480      	push	{r7}
 8140cea:	b085      	sub	sp, #20
 8140cec:	af00      	add	r7, sp, #0
 8140cee:	6078      	str	r0, [r7, #4]
 8140cf0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140cf2:	687b      	ldr	r3, [r7, #4]
 8140cf4:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 8140cf6:	4a07      	ldr	r2, [pc, #28]	@ (8140d14 <LL_DMA_GetDataLength+0x2c>)
 8140cf8:	683b      	ldr	r3, [r7, #0]
 8140cfa:	4413      	add	r3, r2
 8140cfc:	781b      	ldrb	r3, [r3, #0]
 8140cfe:	461a      	mov	r2, r3
 8140d00:	68fb      	ldr	r3, [r7, #12]
 8140d02:	4413      	add	r3, r2
 8140d04:	685b      	ldr	r3, [r3, #4]
 8140d06:	b29b      	uxth	r3, r3
}
 8140d08:	4618      	mov	r0, r3
 8140d0a:	3714      	adds	r7, #20
 8140d0c:	46bd      	mov	sp, r7
 8140d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140d12:	4770      	bx	lr
 8140d14:	0814eab0 	.word	0x0814eab0

08140d18 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8140d18:	b480      	push	{r7}
 8140d1a:	b087      	sub	sp, #28
 8140d1c:	af00      	add	r7, sp, #0
 8140d1e:	60f8      	str	r0, [r7, #12]
 8140d20:	60b9      	str	r1, [r7, #8]
 8140d22:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140d24:	68fb      	ldr	r3, [r7, #12]
 8140d26:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8140d28:	4a07      	ldr	r2, [pc, #28]	@ (8140d48 <LL_DMA_SetMemoryAddress+0x30>)
 8140d2a:	68bb      	ldr	r3, [r7, #8]
 8140d2c:	4413      	add	r3, r2
 8140d2e:	781b      	ldrb	r3, [r3, #0]
 8140d30:	461a      	mov	r2, r3
 8140d32:	697b      	ldr	r3, [r7, #20]
 8140d34:	4413      	add	r3, r2
 8140d36:	461a      	mov	r2, r3
 8140d38:	687b      	ldr	r3, [r7, #4]
 8140d3a:	60d3      	str	r3, [r2, #12]
}
 8140d3c:	bf00      	nop
 8140d3e:	371c      	adds	r7, #28
 8140d40:	46bd      	mov	sp, r7
 8140d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140d46:	4770      	bx	lr
 8140d48:	0814eab0 	.word	0x0814eab0

08140d4c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8140d4c:	b480      	push	{r7}
 8140d4e:	b087      	sub	sp, #28
 8140d50:	af00      	add	r7, sp, #0
 8140d52:	60f8      	str	r0, [r7, #12]
 8140d54:	60b9      	str	r1, [r7, #8]
 8140d56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140d58:	68fb      	ldr	r3, [r7, #12]
 8140d5a:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8140d5c:	4a07      	ldr	r2, [pc, #28]	@ (8140d7c <LL_DMA_SetPeriphAddress+0x30>)
 8140d5e:	68bb      	ldr	r3, [r7, #8]
 8140d60:	4413      	add	r3, r2
 8140d62:	781b      	ldrb	r3, [r3, #0]
 8140d64:	461a      	mov	r2, r3
 8140d66:	697b      	ldr	r3, [r7, #20]
 8140d68:	4413      	add	r3, r2
 8140d6a:	461a      	mov	r2, r3
 8140d6c:	687b      	ldr	r3, [r7, #4]
 8140d6e:	6093      	str	r3, [r2, #8]
}
 8140d70:	bf00      	nop
 8140d72:	371c      	adds	r7, #28
 8140d74:	46bd      	mov	sp, r7
 8140d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140d7a:	4770      	bx	lr
 8140d7c:	0814eab0 	.word	0x0814eab0

08140d80 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140d80:	b480      	push	{r7}
 8140d82:	b085      	sub	sp, #20
 8140d84:	af00      	add	r7, sp, #0
 8140d86:	6078      	str	r0, [r7, #4]
 8140d88:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140d8a:	687b      	ldr	r3, [r7, #4]
 8140d8c:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8140d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8140dc0 <LL_DMA_EnableIT_HT+0x40>)
 8140d90:	683b      	ldr	r3, [r7, #0]
 8140d92:	4413      	add	r3, r2
 8140d94:	781b      	ldrb	r3, [r3, #0]
 8140d96:	461a      	mov	r2, r3
 8140d98:	68fb      	ldr	r3, [r7, #12]
 8140d9a:	4413      	add	r3, r2
 8140d9c:	681b      	ldr	r3, [r3, #0]
 8140d9e:	4908      	ldr	r1, [pc, #32]	@ (8140dc0 <LL_DMA_EnableIT_HT+0x40>)
 8140da0:	683a      	ldr	r2, [r7, #0]
 8140da2:	440a      	add	r2, r1
 8140da4:	7812      	ldrb	r2, [r2, #0]
 8140da6:	4611      	mov	r1, r2
 8140da8:	68fa      	ldr	r2, [r7, #12]
 8140daa:	440a      	add	r2, r1
 8140dac:	f043 0308 	orr.w	r3, r3, #8
 8140db0:	6013      	str	r3, [r2, #0]
}
 8140db2:	bf00      	nop
 8140db4:	3714      	adds	r7, #20
 8140db6:	46bd      	mov	sp, r7
 8140db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140dbc:	4770      	bx	lr
 8140dbe:	bf00      	nop
 8140dc0:	0814eab0 	.word	0x0814eab0

08140dc4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140dc4:	b480      	push	{r7}
 8140dc6:	b085      	sub	sp, #20
 8140dc8:	af00      	add	r7, sp, #0
 8140dca:	6078      	str	r0, [r7, #4]
 8140dcc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140dce:	687b      	ldr	r3, [r7, #4]
 8140dd0:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 8140dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8140e04 <LL_DMA_EnableIT_TE+0x40>)
 8140dd4:	683b      	ldr	r3, [r7, #0]
 8140dd6:	4413      	add	r3, r2
 8140dd8:	781b      	ldrb	r3, [r3, #0]
 8140dda:	461a      	mov	r2, r3
 8140ddc:	68fb      	ldr	r3, [r7, #12]
 8140dde:	4413      	add	r3, r2
 8140de0:	681b      	ldr	r3, [r3, #0]
 8140de2:	4908      	ldr	r1, [pc, #32]	@ (8140e04 <LL_DMA_EnableIT_TE+0x40>)
 8140de4:	683a      	ldr	r2, [r7, #0]
 8140de6:	440a      	add	r2, r1
 8140de8:	7812      	ldrb	r2, [r2, #0]
 8140dea:	4611      	mov	r1, r2
 8140dec:	68fa      	ldr	r2, [r7, #12]
 8140dee:	440a      	add	r2, r1
 8140df0:	f043 0304 	orr.w	r3, r3, #4
 8140df4:	6013      	str	r3, [r2, #0]
}
 8140df6:	bf00      	nop
 8140df8:	3714      	adds	r7, #20
 8140dfa:	46bd      	mov	sp, r7
 8140dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140e00:	4770      	bx	lr
 8140e02:	bf00      	nop
 8140e04:	0814eab0 	.word	0x0814eab0

08140e08 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8140e08:	b480      	push	{r7}
 8140e0a:	b085      	sub	sp, #20
 8140e0c:	af00      	add	r7, sp, #0
 8140e0e:	6078      	str	r0, [r7, #4]
 8140e10:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8140e12:	687b      	ldr	r3, [r7, #4]
 8140e14:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8140e16:	4a0c      	ldr	r2, [pc, #48]	@ (8140e48 <LL_DMA_EnableIT_TC+0x40>)
 8140e18:	683b      	ldr	r3, [r7, #0]
 8140e1a:	4413      	add	r3, r2
 8140e1c:	781b      	ldrb	r3, [r3, #0]
 8140e1e:	461a      	mov	r2, r3
 8140e20:	68fb      	ldr	r3, [r7, #12]
 8140e22:	4413      	add	r3, r2
 8140e24:	681b      	ldr	r3, [r3, #0]
 8140e26:	4908      	ldr	r1, [pc, #32]	@ (8140e48 <LL_DMA_EnableIT_TC+0x40>)
 8140e28:	683a      	ldr	r2, [r7, #0]
 8140e2a:	440a      	add	r2, r1
 8140e2c:	7812      	ldrb	r2, [r2, #0]
 8140e2e:	4611      	mov	r1, r2
 8140e30:	68fa      	ldr	r2, [r7, #12]
 8140e32:	440a      	add	r2, r1
 8140e34:	f043 0310 	orr.w	r3, r3, #16
 8140e38:	6013      	str	r3, [r2, #0]
}
 8140e3a:	bf00      	nop
 8140e3c:	3714      	adds	r7, #20
 8140e3e:	46bd      	mov	sp, r7
 8140e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140e44:	4770      	bx	lr
 8140e46:	bf00      	nop
 8140e48:	0814eab0 	.word	0x0814eab0

08140e4c <UART_DMA_Driver_Init>:
        .old_dma_pos       = 0
    }
};

Std_ReturnType UART_DMA_Driver_Init(void)
{
 8140e4c:	b5b0      	push	{r4, r5, r7, lr}
 8140e4e:	b084      	sub	sp, #16
 8140e50:	af02      	add	r7, sp, #8
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140e52:	2300      	movs	r3, #0
 8140e54:	607b      	str	r3, [r7, #4]
 8140e56:	e022      	b.n	8140e9e <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8140e58:	494b      	ldr	r1, [pc, #300]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140e5a:	687a      	ldr	r2, [r7, #4]
 8140e5c:	4613      	mov	r3, r2
 8140e5e:	011b      	lsls	r3, r3, #4
 8140e60:	1a9b      	subs	r3, r3, r2
 8140e62:	00db      	lsls	r3, r3, #3
 8140e64:	440b      	add	r3, r1
 8140e66:	681b      	ldr	r3, [r3, #0]
 8140e68:	4618      	mov	r0, r3
 8140e6a:	f7ff fdf2 	bl	8140a52 <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 8140e6e:	4946      	ldr	r1, [pc, #280]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140e70:	687a      	ldr	r2, [r7, #4]
 8140e72:	4613      	mov	r3, r2
 8140e74:	011b      	lsls	r3, r3, #4
 8140e76:	1a9b      	subs	r3, r3, r2
 8140e78:	00db      	lsls	r3, r3, #3
 8140e7a:	440b      	add	r3, r1
 8140e7c:	3364      	adds	r3, #100	@ 0x64
 8140e7e:	6818      	ldr	r0, [r3, #0]
 8140e80:	4941      	ldr	r1, [pc, #260]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140e82:	687a      	ldr	r2, [r7, #4]
 8140e84:	4613      	mov	r3, r2
 8140e86:	011b      	lsls	r3, r3, #4
 8140e88:	1a9b      	subs	r3, r3, r2
 8140e8a:	00db      	lsls	r3, r3, #3
 8140e8c:	440b      	add	r3, r1
 8140e8e:	3368      	adds	r3, #104	@ 0x68
 8140e90:	681b      	ldr	r3, [r3, #0]
 8140e92:	4619      	mov	r1, r3
 8140e94:	f7ff fee0 	bl	8140c58 <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140e98:	687b      	ldr	r3, [r7, #4]
 8140e9a:	3301      	adds	r3, #1
 8140e9c:	607b      	str	r3, [r7, #4]
 8140e9e:	687b      	ldr	r3, [r7, #4]
 8140ea0:	2b00      	cmp	r3, #0
 8140ea2:	ddd9      	ble.n	8140e58 <UART_DMA_Driver_Init+0xc>
    }
    /* Index 0 – USART6 ------------------------------------------------- */
    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1,
 8140ea4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8140ea8:	9300      	str	r3, [sp, #0]
 8140eaa:	4b38      	ldr	r3, [pc, #224]	@ (8140f8c <UART_DMA_Driver_Init+0x140>)
 8140eac:	4a38      	ldr	r2, [pc, #224]	@ (8140f90 <UART_DMA_Driver_Init+0x144>)
 8140eae:	2101      	movs	r1, #1
 8140eb0:	4838      	ldr	r0, [pc, #224]	@ (8140f94 <UART_DMA_Driver_Init+0x148>)
 8140eb2:	f000 facc 	bl	814144e <RingBuffer_Create>
                      "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2,
 8140eb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8140eba:	9300      	str	r3, [sp, #0]
 8140ebc:	4b36      	ldr	r3, [pc, #216]	@ (8140f98 <UART_DMA_Driver_Init+0x14c>)
 8140ebe:	4a37      	ldr	r2, [pc, #220]	@ (8140f9c <UART_DMA_Driver_Init+0x150>)
 8140ec0:	2102      	movs	r1, #2
 8140ec2:	4837      	ldr	r0, [pc, #220]	@ (8140fa0 <UART_DMA_Driver_Init+0x154>)
 8140ec4:	f000 fac3 	bl	814144e <RingBuffer_Create>
                      "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);

    /* DMA circular RX --------------------------------------------------- */
    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance,
 8140ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140eca:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8140ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140ece:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8140ed0:	2101      	movs	r1, #1
 8140ed2:	4834      	ldr	r0, [pc, #208]	@ (8140fa4 <UART_DMA_Driver_Init+0x158>)
 8140ed4:	f7ff fe79 	bl	8140bca <LL_USART_DMA_GetRegAddr>
 8140ed8:	4603      	mov	r3, r0
 8140eda:	461a      	mov	r2, r3
 8140edc:	4629      	mov	r1, r5
 8140ede:	4620      	mov	r0, r4
 8140ee0:	f7ff ff34 	bl	8140d4c <LL_DMA_SetPeriphAddress>
                            uart_dma_drivers[0].dma_rx_channel,
                            LL_USART_DMA_GetRegAddr(USART6,
                                LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8140ee4:	4b28      	ldr	r3, [pc, #160]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140ee8:	4a27      	ldr	r2, [pc, #156]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140eea:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                            uart_dma_drivers[0].dma_rx_channel,
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 8140eec:	4a26      	ldr	r2, [pc, #152]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140eee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8140ef0:	4618      	mov	r0, r3
 8140ef2:	f7ff ff11 	bl	8140d18 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8140ef6:	4b24      	ldr	r3, [pc, #144]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140efa:	4a23      	ldr	r2, [pc, #140]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140efc:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                          uart_dma_drivers[0].dma_rx_channel,
                          uart_dma_drivers[0].dma_rx_buffer_size);
 8140efe:	4a22      	ldr	r2, [pc, #136]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f00:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8140f04:	4618      	mov	r0, r3
 8140f06:	f7ff fec9 	bl	8140c9c <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance,
 8140f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f10:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8140f12:	4611      	mov	r1, r2
 8140f14:	4618      	mov	r0, r3
 8140f16:	f7ff ff77 	bl	8140e08 <LL_DMA_EnableIT_TC>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance,
 8140f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f20:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8140f22:	4611      	mov	r1, r2
 8140f24:	4618      	mov	r0, r3
 8140f26:	f7ff ff2b 	bl	8140d80 <LL_DMA_EnableIT_HT>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance,
 8140f2a:	4b17      	ldr	r3, [pc, #92]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140f2e:	4a16      	ldr	r2, [pc, #88]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8140f32:	4611      	mov	r1, r2
 8140f34:	4618      	mov	r0, r3
 8140f36:	f7ff ff45 	bl	8140dc4 <LL_DMA_EnableIT_TE>
                       uart_dma_drivers[0].dma_rx_channel);

    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance,
 8140f3a:	4b13      	ldr	r3, [pc, #76]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8140f3e:	4a12      	ldr	r2, [pc, #72]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f40:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8140f42:	4611      	mov	r1, r2
 8140f44:	4618      	mov	r0, r3
 8140f46:	f7ff fe65 	bl	8140c14 <LL_DMA_EnableStream>
                        uart_dma_drivers[0].dma_rx_channel);

    LL_USART_EnableDMAReq_RX(USART6);
 8140f4a:	4816      	ldr	r0, [pc, #88]	@ (8140fa4 <UART_DMA_Driver_Init+0x158>)
 8140f4c:	f7ff fe1a 	bl	8140b84 <LL_USART_EnableDMAReq_RX>
    LL_USART_EnableIT_IDLE(USART6);
 8140f50:	4814      	ldr	r0, [pc, #80]	@ (8140fa4 <UART_DMA_Driver_Init+0x158>)
 8140f52:	f7ff fda1 	bl	8140a98 <LL_USART_EnableIT_IDLE>

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140f56:	2300      	movs	r3, #0
 8140f58:	603b      	str	r3, [r7, #0]
 8140f5a:	e00d      	b.n	8140f78 <UART_DMA_Driver_Init+0x12c>
        LL_USART_Enable(uart_dma_drivers[i].uart);
 8140f5c:	490a      	ldr	r1, [pc, #40]	@ (8140f88 <UART_DMA_Driver_Init+0x13c>)
 8140f5e:	683a      	ldr	r2, [r7, #0]
 8140f60:	4613      	mov	r3, r2
 8140f62:	011b      	lsls	r3, r3, #4
 8140f64:	1a9b      	subs	r3, r3, r2
 8140f66:	00db      	lsls	r3, r3, #3
 8140f68:	440b      	add	r3, r1
 8140f6a:	681b      	ldr	r3, [r3, #0]
 8140f6c:	4618      	mov	r0, r3
 8140f6e:	f7ff fd60 	bl	8140a32 <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140f72:	683b      	ldr	r3, [r7, #0]
 8140f74:	3301      	adds	r3, #1
 8140f76:	603b      	str	r3, [r7, #0]
 8140f78:	683b      	ldr	r3, [r7, #0]
 8140f7a:	2b00      	cmp	r3, #0
 8140f7c:	ddee      	ble.n	8140f5c <UART_DMA_Driver_Init+0x110>
    }
    return E_OK;
 8140f7e:	2300      	movs	r3, #0
}
 8140f80:	4618      	mov	r0, r3
 8140f82:	3708      	adds	r7, #8
 8140f84:	46bd      	mov	sp, r7
 8140f86:	bdb0      	pop	{r4, r5, r7, pc}
 8140f88:	10032078 	.word	0x10032078
 8140f8c:	10032c64 	.word	0x10032c64
 8140f90:	0814ea2c 	.word	0x0814ea2c
 8140f94:	1003207c 	.word	0x1003207c
 8140f98:	10033464 	.word	0x10033464
 8140f9c:	0814ea38 	.word	0x0814ea38
 8140fa0:	100320ac 	.word	0x100320ac
 8140fa4:	40011400 	.word	0x40011400

08140fa8 <UART_DMA_Driver_Get>:
#define RESET 						    0U
#endif


UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 8140fa8:	b480      	push	{r7}
 8140faa:	b085      	sub	sp, #20
 8140fac:	af00      	add	r7, sp, #0
 8140fae:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140fb0:	2300      	movs	r3, #0
 8140fb2:	60fb      	str	r3, [r7, #12]
 8140fb4:	e015      	b.n	8140fe2 <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 8140fb6:	4910      	ldr	r1, [pc, #64]	@ (8140ff8 <UART_DMA_Driver_Get+0x50>)
 8140fb8:	68fa      	ldr	r2, [r7, #12]
 8140fba:	4613      	mov	r3, r2
 8140fbc:	011b      	lsls	r3, r3, #4
 8140fbe:	1a9b      	subs	r3, r3, r2
 8140fc0:	00db      	lsls	r3, r3, #3
 8140fc2:	440b      	add	r3, r1
 8140fc4:	681b      	ldr	r3, [r3, #0]
 8140fc6:	687a      	ldr	r2, [r7, #4]
 8140fc8:	429a      	cmp	r2, r3
 8140fca:	d107      	bne.n	8140fdc <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 8140fcc:	68fa      	ldr	r2, [r7, #12]
 8140fce:	4613      	mov	r3, r2
 8140fd0:	011b      	lsls	r3, r3, #4
 8140fd2:	1a9b      	subs	r3, r3, r2
 8140fd4:	00db      	lsls	r3, r3, #3
 8140fd6:	4a08      	ldr	r2, [pc, #32]	@ (8140ff8 <UART_DMA_Driver_Get+0x50>)
 8140fd8:	4413      	add	r3, r2
 8140fda:	e006      	b.n	8140fea <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8140fdc:	68fb      	ldr	r3, [r7, #12]
 8140fde:	3301      	adds	r3, #1
 8140fe0:	60fb      	str	r3, [r7, #12]
 8140fe2:	68fb      	ldr	r3, [r7, #12]
 8140fe4:	2b00      	cmp	r3, #0
 8140fe6:	dde6      	ble.n	8140fb6 <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 8140fe8:	2300      	movs	r3, #0
}
 8140fea:	4618      	mov	r0, r3
 8140fec:	3714      	adds	r7, #20
 8140fee:	46bd      	mov	sp, r7
 8140ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8140ff4:	4770      	bx	lr
 8140ff6:	bf00      	nop
 8140ff8:	10032078 	.word	0x10032078

08140ffc <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8140ffc:	b580      	push	{r7, lr}
 8140ffe:	b084      	sub	sp, #16
 8141000:	af00      	add	r7, sp, #0
 8141002:	6078      	str	r0, [r7, #4]
 8141004:	460b      	mov	r3, r1
 8141006:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8141008:	6878      	ldr	r0, [r7, #4]
 814100a:	f7ff ffcd 	bl	8140fa8 <UART_DMA_Driver_Get>
 814100e:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 8141010:	68bb      	ldr	r3, [r7, #8]
 8141012:	2b00      	cmp	r3, #0
 8141014:	d01f      	beq.n	8141056 <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 8141016:	4b13      	ldr	r3, [pc, #76]	@ (8141064 <UART_Driver_Write+0x68>)
 8141018:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 814101a:	e005      	b.n	8141028 <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 814101c:	68fb      	ldr	r3, [r7, #12]
 814101e:	3b01      	subs	r3, #1
 8141020:	60fb      	str	r3, [r7, #12]
 8141022:	68fb      	ldr	r3, [r7, #12]
 8141024:	2b00      	cmp	r3, #0
 8141026:	d018      	beq.n	814105a <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8141028:	68bb      	ldr	r3, [r7, #8]
 814102a:	3334      	adds	r3, #52	@ 0x34
 814102c:	78fa      	ldrb	r2, [r7, #3]
 814102e:	4611      	mov	r1, r2
 8141030:	4618      	mov	r0, r3
 8141032:	f000 fa3f 	bl	81414b4 <RingBuffer_Put>
 8141036:	4603      	mov	r3, r0
 8141038:	f083 0301 	eor.w	r3, r3, #1
 814103c:	b2db      	uxtb	r3, r3
 814103e:	2b00      	cmp	r3, #0
 8141040:	d1ec      	bne.n	814101c <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 8141042:	6878      	ldr	r0, [r7, #4]
 8141044:	f7ff fd8b 	bl	8140b5e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8141048:	4603      	mov	r3, r0
 814104a:	2b00      	cmp	r3, #0
 814104c:	d106      	bne.n	814105c <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 814104e:	6878      	ldr	r0, [r7, #4]
 8141050:	f7ff fd43 	bl	8140ada <LL_USART_EnableIT_TXE_TXFNF>
 8141054:	e002      	b.n	814105c <UART_Driver_Write+0x60>
        return;
 8141056:	bf00      	nop
 8141058:	e000      	b.n	814105c <UART_Driver_Write+0x60>
            return;
 814105a:	bf00      	nop
    }
}
 814105c:	3710      	adds	r7, #16
 814105e:	46bd      	mov	sp, r7
 8141060:	bd80      	pop	{r7, pc}
 8141062:	bf00      	nop
 8141064:	0007a120 	.word	0x0007a120

08141068 <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 8141068:	b580      	push	{r7, lr}
 814106a:	b084      	sub	sp, #16
 814106c:	af00      	add	r7, sp, #0
 814106e:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8141070:	6878      	ldr	r0, [r7, #4]
 8141072:	f7ff ff99 	bl	8140fa8 <UART_DMA_Driver_Get>
 8141076:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8141078:	68fb      	ldr	r3, [r7, #12]
 814107a:	2b00      	cmp	r3, #0
 814107c:	d020      	beq.n	81410c0 <UART_Driver_TX_ISR+0x58>
        return;

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 814107e:	6878      	ldr	r0, [r7, #4]
 8141080:	f7ff fcf7 	bl	8140a72 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8141084:	4603      	mov	r3, r0
 8141086:	2b00      	cmp	r3, #0
 8141088:	d01b      	beq.n	81410c2 <UART_Driver_TX_ISR+0x5a>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 814108a:	6878      	ldr	r0, [r7, #4]
 814108c:	f7ff fd67 	bl	8140b5e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8141090:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8141092:	2b00      	cmp	r3, #0
 8141094:	d015      	beq.n	81410c2 <UART_Driver_TX_ISR+0x5a>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 8141096:	68fb      	ldr	r3, [r7, #12]
 8141098:	3334      	adds	r3, #52	@ 0x34
 814109a:	f107 020b 	add.w	r2, r7, #11
 814109e:	4611      	mov	r1, r2
 81410a0:	4618      	mov	r0, r3
 81410a2:	f000 fa4d 	bl	8141540 <RingBuffer_Get>
 81410a6:	4603      	mov	r3, r0
 81410a8:	2b00      	cmp	r3, #0
 81410aa:	d005      	beq.n	81410b8 <UART_Driver_TX_ISR+0x50>
        {
            LL_USART_TransmitData8(uart, tx_data);
 81410ac:	7afb      	ldrb	r3, [r7, #11]
 81410ae:	4619      	mov	r1, r3
 81410b0:	6878      	ldr	r0, [r7, #4]
 81410b2:	f7ff fda0 	bl	8140bf6 <LL_USART_TransmitData8>
 81410b6:	e004      	b.n	81410c2 <UART_Driver_TX_ISR+0x5a>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 81410b8:	6878      	ldr	r0, [r7, #4]
 81410ba:	f7ff fd2f 	bl	8140b1c <LL_USART_DisableIT_TXE_TXFNF>
 81410be:	e000      	b.n	81410c2 <UART_Driver_TX_ISR+0x5a>
        return;
 81410c0:	bf00      	nop
        }
    }
}
 81410c2:	3710      	adds	r7, #16
 81410c4:	46bd      	mov	sp, r7
 81410c6:	bd80      	pop	{r7, pc}

081410c8 <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart)
{
 81410c8:	b580      	push	{r7, lr}
 81410ca:	b08a      	sub	sp, #40	@ 0x28
 81410cc:	af00      	add	r7, sp, #0
 81410ce:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 81410d0:	6878      	ldr	r0, [r7, #4]
 81410d2:	f7ff ff69 	bl	8140fa8 <UART_DMA_Driver_Get>
 81410d6:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 81410d8:	69bb      	ldr	r3, [r7, #24]
 81410da:	2b00      	cmp	r3, #0
 81410dc:	d069      	beq.n	81411b2 <UART_DMA_Rx_Check+0xea>
        return;

    size_t old_pos = driver->old_dma_pos;
 81410de:	69bb      	ldr	r3, [r7, #24]
 81410e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81410e2:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance,
 81410e4:	69bb      	ldr	r3, [r7, #24]
 81410e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81410e8:	69bb      	ldr	r3, [r7, #24]
 81410ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81410ec:	4619      	mov	r1, r3
 81410ee:	4610      	mov	r0, r2
 81410f0:	f7ff fdfa 	bl	8140ce8 <LL_DMA_GetDataLength>
 81410f4:	4603      	mov	r3, r0
 81410f6:	827b      	strh	r3, [r7, #18]
                                              driver->dma_rx_channel);
    pos = driver->dma_rx_buffer_size - remaining;
 81410f8:	69bb      	ldr	r3, [r7, #24]
 81410fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 81410fe:	461a      	mov	r2, r3
 8141100:	8a7b      	ldrh	r3, [r7, #18]
 8141102:	1ad3      	subs	r3, r2, r3
 8141104:	60fb      	str	r3, [r7, #12]

    if (pos != old_pos)
 8141106:	68fa      	ldr	r2, [r7, #12]
 8141108:	697b      	ldr	r3, [r7, #20]
 814110a:	429a      	cmp	r2, r3
 814110c:	d052      	beq.n	81411b4 <UART_DMA_Rx_Check+0xec>
    {
        if (pos > old_pos) {
 814110e:	68fa      	ldr	r2, [r7, #12]
 8141110:	697b      	ldr	r3, [r7, #20]
 8141112:	429a      	cmp	r2, r3
 8141114:	d914      	bls.n	8141140 <UART_DMA_Rx_Check+0x78>
            for (size_t i = old_pos; i < pos; i++) {
 8141116:	697b      	ldr	r3, [r7, #20]
 8141118:	627b      	str	r3, [r7, #36]	@ 0x24
 814111a:	e00c      	b.n	8141136 <UART_DMA_Rx_Check+0x6e>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 814111c:	69bb      	ldr	r3, [r7, #24]
 814111e:	1d18      	adds	r0, r3, #4
 8141120:	69bb      	ldr	r3, [r7, #24]
 8141122:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8141124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8141126:	4413      	add	r3, r2
 8141128:	781b      	ldrb	r3, [r3, #0]
 814112a:	4619      	mov	r1, r3
 814112c:	f000 f9c2 	bl	81414b4 <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 8141130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8141132:	3301      	adds	r3, #1
 8141134:	627b      	str	r3, [r7, #36]	@ 0x24
 8141136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8141138:	68fb      	ldr	r3, [r7, #12]
 814113a:	429a      	cmp	r2, r3
 814113c:	d3ee      	bcc.n	814111c <UART_DMA_Rx_Check+0x54>
 814113e:	e02a      	b.n	8141196 <UART_DMA_Rx_Check+0xce>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8141140:	697b      	ldr	r3, [r7, #20]
 8141142:	623b      	str	r3, [r7, #32]
 8141144:	e00c      	b.n	8141160 <UART_DMA_Rx_Check+0x98>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8141146:	69bb      	ldr	r3, [r7, #24]
 8141148:	1d18      	adds	r0, r3, #4
 814114a:	69bb      	ldr	r3, [r7, #24]
 814114c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 814114e:	6a3b      	ldr	r3, [r7, #32]
 8141150:	4413      	add	r3, r2
 8141152:	781b      	ldrb	r3, [r3, #0]
 8141154:	4619      	mov	r1, r3
 8141156:	f000 f9ad 	bl	81414b4 <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 814115a:	6a3b      	ldr	r3, [r7, #32]
 814115c:	3301      	adds	r3, #1
 814115e:	623b      	str	r3, [r7, #32]
 8141160:	69bb      	ldr	r3, [r7, #24]
 8141162:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8141166:	461a      	mov	r2, r3
 8141168:	6a3b      	ldr	r3, [r7, #32]
 814116a:	4293      	cmp	r3, r2
 814116c:	d3eb      	bcc.n	8141146 <UART_DMA_Rx_Check+0x7e>
            }
            for (size_t i = 0; i < pos; i++) {
 814116e:	2300      	movs	r3, #0
 8141170:	61fb      	str	r3, [r7, #28]
 8141172:	e00c      	b.n	814118e <UART_DMA_Rx_Check+0xc6>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8141174:	69bb      	ldr	r3, [r7, #24]
 8141176:	1d18      	adds	r0, r3, #4
 8141178:	69bb      	ldr	r3, [r7, #24]
 814117a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 814117c:	69fb      	ldr	r3, [r7, #28]
 814117e:	4413      	add	r3, r2
 8141180:	781b      	ldrb	r3, [r3, #0]
 8141182:	4619      	mov	r1, r3
 8141184:	f000 f996 	bl	81414b4 <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 8141188:	69fb      	ldr	r3, [r7, #28]
 814118a:	3301      	adds	r3, #1
 814118c:	61fb      	str	r3, [r7, #28]
 814118e:	69fa      	ldr	r2, [r7, #28]
 8141190:	68fb      	ldr	r3, [r7, #12]
 8141192:	429a      	cmp	r2, r3
 8141194:	d3ee      	bcc.n	8141174 <UART_DMA_Rx_Check+0xac>
            }
        }
        driver->old_dma_pos = pos;
 8141196:	69bb      	ldr	r3, [r7, #24]
 8141198:	68fa      	ldr	r2, [r7, #12]
 814119a:	675a      	str	r2, [r3, #116]	@ 0x74
        if (driver->old_dma_pos == driver->dma_rx_buffer_size){
 814119c:	69bb      	ldr	r3, [r7, #24]
 814119e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81411a0:	69ba      	ldr	r2, [r7, #24]
 81411a2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 81411a6:	4293      	cmp	r3, r2
 81411a8:	d104      	bne.n	81411b4 <UART_DMA_Rx_Check+0xec>
            driver->old_dma_pos = 0;
 81411aa:	69bb      	ldr	r3, [r7, #24]
 81411ac:	2200      	movs	r2, #0
 81411ae:	675a      	str	r2, [r3, #116]	@ 0x74
 81411b0:	e000      	b.n	81411b4 <UART_DMA_Rx_Check+0xec>
        return;
 81411b2:	bf00      	nop
		}
	}
}
 81411b4:	3728      	adds	r7, #40	@ 0x28
 81411b6:	46bd      	mov	sp, r7
 81411b8:	bd80      	pop	{r7, pc}

081411ba <UART_DMA_Driver_Read>:


int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 81411ba:	b580      	push	{r7, lr}
 81411bc:	b084      	sub	sp, #16
 81411be:	af00      	add	r7, sp, #0
 81411c0:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 81411c2:	6878      	ldr	r0, [r7, #4]
 81411c4:	f7ff fef0 	bl	8140fa8 <UART_DMA_Driver_Get>
 81411c8:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 81411ca:	68fb      	ldr	r3, [r7, #12]
 81411cc:	2b00      	cmp	r3, #0
 81411ce:	d102      	bne.n	81411d6 <UART_DMA_Driver_Read+0x1c>
        return -1;
 81411d0:	f04f 33ff 	mov.w	r3, #4294967295
 81411d4:	e00e      	b.n	81411f4 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 81411d6:	68fb      	ldr	r3, [r7, #12]
 81411d8:	3304      	adds	r3, #4
 81411da:	f107 020b 	add.w	r2, r7, #11
 81411de:	4611      	mov	r1, r2
 81411e0:	4618      	mov	r0, r3
 81411e2:	f000 f9ad 	bl	8141540 <RingBuffer_Get>
 81411e6:	4603      	mov	r3, r0
 81411e8:	2b00      	cmp	r3, #0
 81411ea:	d001      	beq.n	81411f0 <UART_DMA_Driver_Read+0x36>
        return data;
 81411ec:	7afb      	ldrb	r3, [r7, #11]
 81411ee:	e001      	b.n	81411f4 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 81411f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81411f4:	4618      	mov	r0, r3
 81411f6:	3710      	adds	r7, #16
 81411f8:	46bd      	mov	sp, r7
 81411fa:	bd80      	pop	{r7, pc}

081411fc <CDC_RingBuffer_Init>:
/*************************************************
 *                 Function Define               *
 *************************************************/

void CDC_RingBuffer_Init(void)
{
 81411fc:	b580      	push	{r7, lr}
 81411fe:	b082      	sub	sp, #8
 8141200:	af02      	add	r7, sp, #8
	RingBuffer_Create(&cdcTxRingBuffer, 3, "CDC_TX", cdcTxBuffer, CDC_TX_RING_BUFFER_SIZE);
 8141202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8141206:	9300      	str	r3, [sp, #0]
 8141208:	4b08      	ldr	r3, [pc, #32]	@ (814122c <CDC_RingBuffer_Init+0x30>)
 814120a:	4a09      	ldr	r2, [pc, #36]	@ (8141230 <CDC_RingBuffer_Init+0x34>)
 814120c:	2103      	movs	r1, #3
 814120e:	4809      	ldr	r0, [pc, #36]	@ (8141234 <CDC_RingBuffer_Init+0x38>)
 8141210:	f000 f91d 	bl	814144e <RingBuffer_Create>
    RingBuffer_Create(&cdcRxRingBuffer, 4, "CDC_RX", cdcRxBuffer, CDC_RX_RING_BUFFER_SIZE);
 8141214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8141218:	9300      	str	r3, [sp, #0]
 814121a:	4b07      	ldr	r3, [pc, #28]	@ (8141238 <CDC_RingBuffer_Init+0x3c>)
 814121c:	4a07      	ldr	r2, [pc, #28]	@ (814123c <CDC_RingBuffer_Init+0x40>)
 814121e:	2104      	movs	r1, #4
 8141220:	4807      	ldr	r0, [pc, #28]	@ (8141240 <CDC_RingBuffer_Init+0x44>)
 8141222:	f000 f914 	bl	814144e <RingBuffer_Create>
}
 8141226:	bf00      	nop
 8141228:	46bd      	mov	sp, r7
 814122a:	bd80      	pop	{r7, pc}
 814122c:	10034494 	.word	0x10034494
 8141230:	0814ea44 	.word	0x0814ea44
 8141234:	10034c94 	.word	0x10034c94
 8141238:	10033c64 	.word	0x10033c64
 814123c:	0814ea4c 	.word	0x0814ea4c
 8141240:	10034464 	.word	0x10034464

08141244 <CDC_TX_RingBuffer_Put>:
/*************************************************/
static _Bool CDC_TX_RingBuffer_Put(uint8_t data)
{
 8141244:	b580      	push	{r7, lr}
 8141246:	b082      	sub	sp, #8
 8141248:	af00      	add	r7, sp, #0
 814124a:	4603      	mov	r3, r0
 814124c:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcTxRingBuffer, data);
 814124e:	79fb      	ldrb	r3, [r7, #7]
 8141250:	4619      	mov	r1, r3
 8141252:	4804      	ldr	r0, [pc, #16]	@ (8141264 <CDC_TX_RingBuffer_Put+0x20>)
 8141254:	f000 f92e 	bl	81414b4 <RingBuffer_Put>
 8141258:	4603      	mov	r3, r0
}
 814125a:	4618      	mov	r0, r3
 814125c:	3708      	adds	r7, #8
 814125e:	46bd      	mov	sp, r7
 8141260:	bd80      	pop	{r7, pc}
 8141262:	bf00      	nop
 8141264:	10034c94 	.word	0x10034c94

08141268 <CDC_RX_RingBuffer_Put>:

static _Bool CDC_RX_RingBuffer_Put(uint8_t data)
{
 8141268:	b580      	push	{r7, lr}
 814126a:	b082      	sub	sp, #8
 814126c:	af00      	add	r7, sp, #0
 814126e:	4603      	mov	r3, r0
 8141270:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcRxRingBuffer, data);
 8141272:	79fb      	ldrb	r3, [r7, #7]
 8141274:	4619      	mov	r1, r3
 8141276:	4804      	ldr	r0, [pc, #16]	@ (8141288 <CDC_RX_RingBuffer_Put+0x20>)
 8141278:	f000 f91c 	bl	81414b4 <RingBuffer_Put>
 814127c:	4603      	mov	r3, r0
}
 814127e:	4618      	mov	r0, r3
 8141280:	3708      	adds	r7, #8
 8141282:	46bd      	mov	sp, r7
 8141284:	bd80      	pop	{r7, pc}
 8141286:	bf00      	nop
 8141288:	10034464 	.word	0x10034464

0814128c <CDC_TX_RingBuffer_PutBuffer>:
/*************************************************/
uint32_t CDC_TX_RingBuffer_PutBuffer(const uint8_t* data, uint32_t len)
{
 814128c:	b580      	push	{r7, lr}
 814128e:	b084      	sub	sp, #16
 8141290:	af00      	add	r7, sp, #0
 8141292:	6078      	str	r0, [r7, #4]
 8141294:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 8141296:	2300      	movs	r3, #0
 8141298:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 814129a:	2300      	movs	r3, #0
 814129c:	60bb      	str	r3, [r7, #8]
 814129e:	e00f      	b.n	81412c0 <CDC_TX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_TX_RingBuffer_Put(data[i]))
 81412a0:	687a      	ldr	r2, [r7, #4]
 81412a2:	68bb      	ldr	r3, [r7, #8]
 81412a4:	4413      	add	r3, r2
 81412a6:	781b      	ldrb	r3, [r3, #0]
 81412a8:	4618      	mov	r0, r3
 81412aa:	f7ff ffcb 	bl	8141244 <CDC_TX_RingBuffer_Put>
 81412ae:	4603      	mov	r3, r0
 81412b0:	2b00      	cmp	r3, #0
 81412b2:	d002      	beq.n	81412ba <CDC_TX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 81412b4:	68fb      	ldr	r3, [r7, #12]
 81412b6:	3301      	adds	r3, #1
 81412b8:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81412ba:	68bb      	ldr	r3, [r7, #8]
 81412bc:	3301      	adds	r3, #1
 81412be:	60bb      	str	r3, [r7, #8]
 81412c0:	68ba      	ldr	r2, [r7, #8]
 81412c2:	683b      	ldr	r3, [r7, #0]
 81412c4:	429a      	cmp	r2, r3
 81412c6:	d3eb      	bcc.n	81412a0 <CDC_TX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 81412c8:	68fb      	ldr	r3, [r7, #12]
}
 81412ca:	4618      	mov	r0, r3
 81412cc:	3710      	adds	r7, #16
 81412ce:	46bd      	mov	sp, r7
 81412d0:	bd80      	pop	{r7, pc}

081412d2 <CDC_RX_RingBuffer_PutBuffer>:

uint32_t CDC_RX_RingBuffer_PutBuffer(uint8_t* data, uint32_t len)
{
 81412d2:	b580      	push	{r7, lr}
 81412d4:	b084      	sub	sp, #16
 81412d6:	af00      	add	r7, sp, #0
 81412d8:	6078      	str	r0, [r7, #4]
 81412da:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 81412dc:	2300      	movs	r3, #0
 81412de:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81412e0:	2300      	movs	r3, #0
 81412e2:	60bb      	str	r3, [r7, #8]
 81412e4:	e00f      	b.n	8141306 <CDC_RX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_RX_RingBuffer_Put(data[i]))
 81412e6:	687a      	ldr	r2, [r7, #4]
 81412e8:	68bb      	ldr	r3, [r7, #8]
 81412ea:	4413      	add	r3, r2
 81412ec:	781b      	ldrb	r3, [r3, #0]
 81412ee:	4618      	mov	r0, r3
 81412f0:	f7ff ffba 	bl	8141268 <CDC_RX_RingBuffer_Put>
 81412f4:	4603      	mov	r3, r0
 81412f6:	2b00      	cmp	r3, #0
 81412f8:	d002      	beq.n	8141300 <CDC_RX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 81412fa:	68fb      	ldr	r3, [r7, #12]
 81412fc:	3301      	adds	r3, #1
 81412fe:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 8141300:	68bb      	ldr	r3, [r7, #8]
 8141302:	3301      	adds	r3, #1
 8141304:	60bb      	str	r3, [r7, #8]
 8141306:	68ba      	ldr	r2, [r7, #8]
 8141308:	683b      	ldr	r3, [r7, #0]
 814130a:	429a      	cmp	r2, r3
 814130c:	d3eb      	bcc.n	81412e6 <CDC_RX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 814130e:	68fb      	ldr	r3, [r7, #12]
}
 8141310:	4618      	mov	r0, r3
 8141312:	3710      	adds	r7, #16
 8141314:	46bd      	mov	sp, r7
 8141316:	bd80      	pop	{r7, pc}

08141318 <CDC_TX_RingBuffer_Get>:
/*************************************************/
_Bool CDC_TX_RingBuffer_Get(uint8_t* data)
{
 8141318:	b580      	push	{r7, lr}
 814131a:	b082      	sub	sp, #8
 814131c:	af00      	add	r7, sp, #0
 814131e:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcTxRingBuffer, data);
 8141320:	6879      	ldr	r1, [r7, #4]
 8141322:	4804      	ldr	r0, [pc, #16]	@ (8141334 <CDC_TX_RingBuffer_Get+0x1c>)
 8141324:	f000 f90c 	bl	8141540 <RingBuffer_Get>
 8141328:	4603      	mov	r3, r0
}
 814132a:	4618      	mov	r0, r3
 814132c:	3708      	adds	r7, #8
 814132e:	46bd      	mov	sp, r7
 8141330:	bd80      	pop	{r7, pc}
 8141332:	bf00      	nop
 8141334:	10034c94 	.word	0x10034c94

08141338 <CDC_RX_RingBuffer_Get>:

_Bool CDC_RX_RingBuffer_Get(uint8_t* data)
{
 8141338:	b580      	push	{r7, lr}
 814133a:	b082      	sub	sp, #8
 814133c:	af00      	add	r7, sp, #0
 814133e:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcRxRingBuffer, data);
 8141340:	6879      	ldr	r1, [r7, #4]
 8141342:	4804      	ldr	r0, [pc, #16]	@ (8141354 <CDC_RX_RingBuffer_Get+0x1c>)
 8141344:	f000 f8fc 	bl	8141540 <RingBuffer_Get>
 8141348:	4603      	mov	r3, r0
}
 814134a:	4618      	mov	r0, r3
 814134c:	3708      	adds	r7, #8
 814134e:	46bd      	mov	sp, r7
 8141350:	bd80      	pop	{r7, pc}
 8141352:	bf00      	nop
 8141354:	10034464 	.word	0x10034464

08141358 <CDC_ISR_RxNotify>:
/*************************************************/

void CDC_ISR_RxNotify(void)
{
 8141358:	b480      	push	{r7}
 814135a:	af00      	add	r7, sp, #0
    g_cdcRxReady = 1;
 814135c:	4b03      	ldr	r3, [pc, #12]	@ (814136c <CDC_ISR_RxNotify+0x14>)
 814135e:	2201      	movs	r2, #1
 8141360:	701a      	strb	r2, [r3, #0]
}
 8141362:	bf00      	nop
 8141364:	46bd      	mov	sp, r7
 8141366:	f85d 7b04 	ldr.w	r7, [sp], #4
 814136a:	4770      	bx	lr
 814136c:	10034cc4 	.word	0x10034cc4

08141370 <USB_Check_Notify>:

void USB_Check_Notify(void)
{
 8141370:	b480      	push	{r7}
 8141372:	af00      	add	r7, sp, #0
    g_usbCheckEvt = 1;
 8141374:	4b03      	ldr	r3, [pc, #12]	@ (8141384 <USB_Check_Notify+0x14>)
 8141376:	2201      	movs	r2, #1
 8141378:	701a      	strb	r2, [r3, #0]
}
 814137a:	bf00      	nop
 814137c:	46bd      	mov	sp, r7
 814137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141382:	4770      	bx	lr
 8141384:	10034cc5 	.word	0x10034cc5

08141388 <CDC_getRxReady>:

uint8_t CDC_getRxReady(void)
{
 8141388:	b480      	push	{r7}
 814138a:	af00      	add	r7, sp, #0
    return g_cdcRxReady;
 814138c:	4b03      	ldr	r3, [pc, #12]	@ (814139c <CDC_getRxReady+0x14>)
 814138e:	781b      	ldrb	r3, [r3, #0]
 8141390:	b2db      	uxtb	r3, r3
}
 8141392:	4618      	mov	r0, r3
 8141394:	46bd      	mov	sp, r7
 8141396:	f85d 7b04 	ldr.w	r7, [sp], #4
 814139a:	4770      	bx	lr
 814139c:	10034cc4 	.word	0x10034cc4

081413a0 <CDC_setRxReady>:

void CDC_setRxReady(uint8_t value)
{
 81413a0:	b480      	push	{r7}
 81413a2:	b083      	sub	sp, #12
 81413a4:	af00      	add	r7, sp, #0
 81413a6:	4603      	mov	r3, r0
 81413a8:	71fb      	strb	r3, [r7, #7]
    g_cdcRxReady = value;
 81413aa:	4a04      	ldr	r2, [pc, #16]	@ (81413bc <CDC_setRxReady+0x1c>)
 81413ac:	79fb      	ldrb	r3, [r7, #7]
 81413ae:	7013      	strb	r3, [r2, #0]
}
 81413b0:	bf00      	nop
 81413b2:	370c      	adds	r7, #12
 81413b4:	46bd      	mov	sp, r7
 81413b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81413ba:	4770      	bx	lr
 81413bc:	10034cc4 	.word	0x10034cc4

081413c0 <USB_checkUSB>:

uint8_t USB_checkUSB(void)
{
 81413c0:	b480      	push	{r7}
 81413c2:	af00      	add	r7, sp, #0
    return g_usbCheckEvt;
 81413c4:	4b03      	ldr	r3, [pc, #12]	@ (81413d4 <USB_checkUSB+0x14>)
 81413c6:	781b      	ldrb	r3, [r3, #0]
 81413c8:	b2db      	uxtb	r3, r3
}
 81413ca:	4618      	mov	r0, r3
 81413cc:	46bd      	mov	sp, r7
 81413ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81413d2:	4770      	bx	lr
 81413d4:	10034cc5 	.word	0x10034cc5

081413d8 <USB_setCheckFlag>:

void USB_setCheckFlag(uint8_t value)
{
 81413d8:	b480      	push	{r7}
 81413da:	b083      	sub	sp, #12
 81413dc:	af00      	add	r7, sp, #0
 81413de:	4603      	mov	r3, r0
 81413e0:	71fb      	strb	r3, [r7, #7]
    g_usbCheckEvt = value;
 81413e2:	4a04      	ldr	r2, [pc, #16]	@ (81413f4 <USB_setCheckFlag+0x1c>)
 81413e4:	79fb      	ldrb	r3, [r7, #7]
 81413e6:	7013      	strb	r3, [r2, #0]
}
 81413e8:	bf00      	nop
 81413ea:	370c      	adds	r7, #12
 81413ec:	46bd      	mov	sp, r7
 81413ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81413f2:	4770      	bx	lr
 81413f4:	10034cc5 	.word	0x10034cc5

081413f8 <CDC_SendString>:
{
    return RingBuffer_IsDataAvailable(&cdcTxRingBuffer);
}

_Bool CDC_SendString(const char *pStr, uint32_t len)
{
 81413f8:	b580      	push	{r7, lr}
 81413fa:	b084      	sub	sp, #16
 81413fc:	af00      	add	r7, sp, #0
 81413fe:	6078      	str	r0, [r7, #4]
 8141400:	6039      	str	r1, [r7, #0]
    if (len == 0 || pStr == NULL)
 8141402:	683b      	ldr	r3, [r7, #0]
 8141404:	2b00      	cmp	r3, #0
 8141406:	d002      	beq.n	814140e <CDC_SendString+0x16>
 8141408:	687b      	ldr	r3, [r7, #4]
 814140a:	2b00      	cmp	r3, #0
 814140c:	d101      	bne.n	8141412 <CDC_SendString+0x1a>
        return true;
 814140e:	2301      	movs	r3, #1
 8141410:	e00b      	b.n	814142a <CDC_SendString+0x32>
    uint32_t written = CDC_TX_RingBuffer_PutBuffer((const uint8_t *)pStr, len);
 8141412:	6839      	ldr	r1, [r7, #0]
 8141414:	6878      	ldr	r0, [r7, #4]
 8141416:	f7ff ff39 	bl	814128c <CDC_TX_RingBuffer_PutBuffer>
 814141a:	60f8      	str	r0, [r7, #12]
    return (written == len) ? true : false;
 814141c:	68fa      	ldr	r2, [r7, #12]
 814141e:	683b      	ldr	r3, [r7, #0]
 8141420:	429a      	cmp	r2, r3
 8141422:	bf0c      	ite	eq
 8141424:	2301      	moveq	r3, #1
 8141426:	2300      	movne	r3, #0
 8141428:	b2db      	uxtb	r3, r3
}
 814142a:	4618      	mov	r0, r3
 814142c:	3710      	adds	r7, #16
 814142e:	46bd      	mov	sp, r7
 8141430:	bd80      	pop	{r7, pc}

08141432 <CDC_SendChar>:

_Bool CDC_SendChar(char c)
{
 8141432:	b580      	push	{r7, lr}
 8141434:	b082      	sub	sp, #8
 8141436:	af00      	add	r7, sp, #0
 8141438:	4603      	mov	r3, r0
 814143a:	71fb      	strb	r3, [r7, #7]
    return CDC_TX_RingBuffer_Put((uint8_t)c);
 814143c:	79fb      	ldrb	r3, [r7, #7]
 814143e:	4618      	mov	r0, r3
 8141440:	f7ff ff00 	bl	8141244 <CDC_TX_RingBuffer_Put>
 8141444:	4603      	mov	r3, r0
}
 8141446:	4618      	mov	r0, r3
 8141448:	3708      	adds	r7, #8
 814144a:	46bd      	mov	sp, r7
 814144c:	bd80      	pop	{r7, pc}

0814144e <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 814144e:	b580      	push	{r7, lr}
 8141450:	b088      	sub	sp, #32
 8141452:	af00      	add	r7, sp, #0
 8141454:	60f8      	str	r0, [r7, #12]
 8141456:	60b9      	str	r1, [r7, #8]
 8141458:	607a      	str	r2, [r7, #4]
 814145a:	603b      	str	r3, [r7, #0]
    rb->id = id;
 814145c:	68fb      	ldr	r3, [r7, #12]
 814145e:	68ba      	ldr	r2, [r7, #8]
 8141460:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 8141462:	68fb      	ldr	r3, [r7, #12]
 8141464:	3304      	adds	r3, #4
 8141466:	221f      	movs	r2, #31
 8141468:	6879      	ldr	r1, [r7, #4]
 814146a:	4618      	mov	r0, r3
 814146c:	f00d fa8c 	bl	814e988 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 8141470:	68fb      	ldr	r3, [r7, #12]
 8141472:	2200      	movs	r2, #0
 8141474:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 8141478:	68fb      	ldr	r3, [r7, #12]
 814147a:	683a      	ldr	r2, [r7, #0]
 814147c:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 814147e:	68fb      	ldr	r3, [r7, #12]
 8141480:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8141482:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 8141484:	68fb      	ldr	r3, [r7, #12]
 8141486:	332a      	adds	r3, #42	@ 0x2a
 8141488:	61fb      	str	r3, [r7, #28]
 814148a:	2300      	movs	r3, #0
 814148c:	82fb      	strh	r3, [r7, #22]
 814148e:	8afa      	ldrh	r2, [r7, #22]
 8141490:	69fb      	ldr	r3, [r7, #28]
 8141492:	f3bf 8f5b 	dmb	ish
 8141496:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 8141498:	68fb      	ldr	r3, [r7, #12]
 814149a:	332c      	adds	r3, #44	@ 0x2c
 814149c:	61bb      	str	r3, [r7, #24]
 814149e:	2300      	movs	r3, #0
 81414a0:	82bb      	strh	r3, [r7, #20]
 81414a2:	8aba      	ldrh	r2, [r7, #20]
 81414a4:	69bb      	ldr	r3, [r7, #24]
 81414a6:	f3bf 8f5b 	dmb	ish
 81414aa:	801a      	strh	r2, [r3, #0]
}
 81414ac:	bf00      	nop
 81414ae:	3720      	adds	r7, #32
 81414b0:	46bd      	mov	sp, r7
 81414b2:	bd80      	pop	{r7, pc}

081414b4 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 81414b4:	b480      	push	{r7}
 81414b6:	b08b      	sub	sp, #44	@ 0x2c
 81414b8:	af00      	add	r7, sp, #0
 81414ba:	6078      	str	r0, [r7, #4]
 81414bc:	460b      	mov	r3, r1
 81414be:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 81414c0:	687b      	ldr	r3, [r7, #4]
 81414c2:	332a      	adds	r3, #42	@ 0x2a
 81414c4:	623b      	str	r3, [r7, #32]
 81414c6:	6a3b      	ldr	r3, [r7, #32]
 81414c8:	881b      	ldrh	r3, [r3, #0]
 81414ca:	b29b      	uxth	r3, r3
 81414cc:	81fb      	strh	r3, [r7, #14]
 81414ce:	89fb      	ldrh	r3, [r7, #14]
 81414d0:	3301      	adds	r3, #1
 81414d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 81414d4:	687b      	ldr	r3, [r7, #4]
 81414d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81414d8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81414da:	429a      	cmp	r2, r3
 81414dc:	d101      	bne.n	81414e2 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 81414de:	2300      	movs	r3, #0
 81414e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 81414e2:	687b      	ldr	r3, [r7, #4]
 81414e4:	332c      	adds	r3, #44	@ 0x2c
 81414e6:	61fb      	str	r3, [r7, #28]
 81414e8:	69fb      	ldr	r3, [r7, #28]
 81414ea:	881b      	ldrh	r3, [r3, #0]
 81414ec:	f3bf 8f5b 	dmb	ish
 81414f0:	b29b      	uxth	r3, r3
 81414f2:	81bb      	strh	r3, [r7, #12]
 81414f4:	89bb      	ldrh	r3, [r7, #12]
 81414f6:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 81414f8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81414fa:	8b7b      	ldrh	r3, [r7, #26]
 81414fc:	429a      	cmp	r2, r3
 81414fe:	d018      	beq.n	8141532 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 8141500:	687b      	ldr	r3, [r7, #4]
 8141502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8141504:	687a      	ldr	r2, [r7, #4]
 8141506:	322a      	adds	r2, #42	@ 0x2a
 8141508:	617a      	str	r2, [r7, #20]
 814150a:	697a      	ldr	r2, [r7, #20]
 814150c:	8812      	ldrh	r2, [r2, #0]
 814150e:	b292      	uxth	r2, r2
 8141510:	817a      	strh	r2, [r7, #10]
 8141512:	897a      	ldrh	r2, [r7, #10]
 8141514:	4413      	add	r3, r2
 8141516:	78fa      	ldrb	r2, [r7, #3]
 8141518:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 814151a:	687b      	ldr	r3, [r7, #4]
 814151c:	332a      	adds	r3, #42	@ 0x2a
 814151e:	613b      	str	r3, [r7, #16]
 8141520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8141522:	813b      	strh	r3, [r7, #8]
 8141524:	893a      	ldrh	r2, [r7, #8]
 8141526:	693b      	ldr	r3, [r7, #16]
 8141528:	f3bf 8f5b 	dmb	ish
 814152c:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 814152e:	2301      	movs	r3, #1
 8141530:	e000      	b.n	8141534 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 8141532:	2300      	movs	r3, #0
    }
}
 8141534:	4618      	mov	r0, r3
 8141536:	372c      	adds	r7, #44	@ 0x2c
 8141538:	46bd      	mov	sp, r7
 814153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814153e:	4770      	bx	lr

08141540 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 8141540:	b480      	push	{r7}
 8141542:	b08b      	sub	sp, #44	@ 0x2c
 8141544:	af00      	add	r7, sp, #0
 8141546:	6078      	str	r0, [r7, #4]
 8141548:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 814154a:	687b      	ldr	r3, [r7, #4]
 814154c:	332c      	adds	r3, #44	@ 0x2c
 814154e:	623b      	str	r3, [r7, #32]
 8141550:	6a3b      	ldr	r3, [r7, #32]
 8141552:	881b      	ldrh	r3, [r3, #0]
 8141554:	b29b      	uxth	r3, r3
 8141556:	827b      	strh	r3, [r7, #18]
 8141558:	8a7b      	ldrh	r3, [r7, #18]
 814155a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 814155c:	687b      	ldr	r3, [r7, #4]
 814155e:	332a      	adds	r3, #42	@ 0x2a
 8141560:	61fb      	str	r3, [r7, #28]
 8141562:	69fb      	ldr	r3, [r7, #28]
 8141564:	881b      	ldrh	r3, [r3, #0]
 8141566:	f3bf 8f5b 	dmb	ish
 814156a:	b29b      	uxth	r3, r3
 814156c:	823b      	strh	r3, [r7, #16]
 814156e:	8a3b      	ldrh	r3, [r7, #16]
 8141570:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 8141572:	8b7a      	ldrh	r2, [r7, #26]
 8141574:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8141576:	429a      	cmp	r2, r3
 8141578:	d01c      	beq.n	81415b4 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 814157a:	687b      	ldr	r3, [r7, #4]
 814157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 814157e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8141580:	4413      	add	r3, r2
 8141582:	781a      	ldrb	r2, [r3, #0]
 8141584:	683b      	ldr	r3, [r7, #0]
 8141586:	701a      	strb	r2, [r3, #0]
        ++tail;
 8141588:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 814158a:	3301      	adds	r3, #1
 814158c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 814158e:	687b      	ldr	r3, [r7, #4]
 8141590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8141592:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8141594:	429a      	cmp	r2, r3
 8141596:	d101      	bne.n	814159c <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 8141598:	2300      	movs	r3, #0
 814159a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 814159c:	687b      	ldr	r3, [r7, #4]
 814159e:	332c      	adds	r3, #44	@ 0x2c
 81415a0:	617b      	str	r3, [r7, #20]
 81415a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81415a4:	81fb      	strh	r3, [r7, #14]
 81415a6:	89fa      	ldrh	r2, [r7, #14]
 81415a8:	697b      	ldr	r3, [r7, #20]
 81415aa:	f3bf 8f5b 	dmb	ish
 81415ae:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 81415b0:	2301      	movs	r3, #1
 81415b2:	e000      	b.n	81415b6 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 81415b4:	2300      	movs	r3, #0
    }
}
 81415b6:	4618      	mov	r0, r3
 81415b8:	372c      	adds	r7, #44	@ 0x2c
 81415ba:	46bd      	mov	sp, r7
 81415bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81415c0:	4770      	bx	lr

081415c2 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 81415c2:	b480      	push	{r7}
 81415c4:	b083      	sub	sp, #12
 81415c6:	af00      	add	r7, sp, #0
 81415c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 81415ca:	687b      	ldr	r3, [r7, #4]
 81415cc:	f06f 0201 	mvn.w	r2, #1
 81415d0:	611a      	str	r2, [r3, #16]
}
 81415d2:	bf00      	nop
 81415d4:	370c      	adds	r7, #12
 81415d6:	46bd      	mov	sp, r7
 81415d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81415dc:	4770      	bx	lr

081415de <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 81415de:	b480      	push	{r7}
 81415e0:	b083      	sub	sp, #12
 81415e2:	af00      	add	r7, sp, #0
 81415e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 81415e6:	687b      	ldr	r3, [r7, #4]
 81415e8:	691b      	ldr	r3, [r3, #16]
 81415ea:	f003 0301 	and.w	r3, r3, #1
 81415ee:	2b01      	cmp	r3, #1
 81415f0:	d101      	bne.n	81415f6 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 81415f2:	2301      	movs	r3, #1
 81415f4:	e000      	b.n	81415f8 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 81415f6:	2300      	movs	r3, #0
}
 81415f8:	4618      	mov	r0, r3
 81415fa:	370c      	adds	r7, #12
 81415fc:	46bd      	mov	sp, r7
 81415fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141602:	4770      	bx	lr

08141604 <TickTimer_IRQHandler>:
#include "stm32h7xx.h"
#include "stm32h7xx_ll_tim.h"

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 8141604:	b580      	push	{r7, lr}
 8141606:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 8141608:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 814160c:	f7ff ffe7 	bl	81415de <LL_TIM_IsActiveFlag_UPDATE>
 8141610:	4603      	mov	r3, r0
 8141612:	2b00      	cmp	r3, #0
 8141614:	d008      	beq.n	8141628 <TickTimer_IRQHandler+0x24>
        LL_TIM_ClearFlag_UPDATE(TIM2);
 8141616:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 814161a:	f7ff ffd2 	bl	81415c2 <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 814161e:	4b03      	ldr	r3, [pc, #12]	@ (814162c <TickTimer_IRQHandler+0x28>)
 8141620:	681b      	ldr	r3, [r3, #0]
 8141622:	3301      	adds	r3, #1
 8141624:	4a01      	ldr	r2, [pc, #4]	@ (814162c <TickTimer_IRQHandler+0x28>)
 8141626:	6013      	str	r3, [r2, #0]
    }
}
 8141628:	bf00      	nop
 814162a:	bd80      	pop	{r7, pc}
 814162c:	10034cc8 	.word	0x10034cc8

08141630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8141630:	b480      	push	{r7}
 8141632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8141634:	4b09      	ldr	r3, [pc, #36]	@ (814165c <SystemInit+0x2c>)
 8141636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 814163a:	4a08      	ldr	r2, [pc, #32]	@ (814165c <SystemInit+0x2c>)
 814163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8141640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8141644:	4b05      	ldr	r3, [pc, #20]	@ (814165c <SystemInit+0x2c>)
 8141646:	691b      	ldr	r3, [r3, #16]
 8141648:	4a04      	ldr	r2, [pc, #16]	@ (814165c <SystemInit+0x2c>)
 814164a:	f043 0310 	orr.w	r3, r3, #16
 814164e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8141650:	bf00      	nop
 8141652:	46bd      	mov	sp, r7
 8141654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141658:	4770      	bx	lr
 814165a:	bf00      	nop
 814165c:	e000ed00 	.word	0xe000ed00

08141660 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8141660:	b480      	push	{r7}
 8141662:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8141664:	4b0a      	ldr	r3, [pc, #40]	@ (8141690 <ExitRun0Mode+0x30>)
 8141666:	68db      	ldr	r3, [r3, #12]
 8141668:	f023 0306 	bic.w	r3, r3, #6
 814166c:	4a08      	ldr	r2, [pc, #32]	@ (8141690 <ExitRun0Mode+0x30>)
 814166e:	f043 0302 	orr.w	r3, r3, #2
 8141672:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8141674:	bf00      	nop
 8141676:	4b06      	ldr	r3, [pc, #24]	@ (8141690 <ExitRun0Mode+0x30>)
 8141678:	685b      	ldr	r3, [r3, #4]
 814167a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 814167e:	2b00      	cmp	r3, #0
 8141680:	d0f9      	beq.n	8141676 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8141682:	bf00      	nop
 8141684:	bf00      	nop
 8141686:	46bd      	mov	sp, r7
 8141688:	f85d 7b04 	ldr.w	r7, [sp], #4
 814168c:	4770      	bx	lr
 814168e:	bf00      	nop
 8141690:	58024800 	.word	0x58024800

08141694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8141694:	b480      	push	{r7}
 8141696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8141698:	4b04      	ldr	r3, [pc, #16]	@ (81416ac <__NVIC_GetPriorityGrouping+0x18>)
 814169a:	68db      	ldr	r3, [r3, #12]
 814169c:	0a1b      	lsrs	r3, r3, #8
 814169e:	f003 0307 	and.w	r3, r3, #7
}
 81416a2:	4618      	mov	r0, r3
 81416a4:	46bd      	mov	sp, r7
 81416a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81416aa:	4770      	bx	lr
 81416ac:	e000ed00 	.word	0xe000ed00

081416b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81416b0:	b480      	push	{r7}
 81416b2:	b083      	sub	sp, #12
 81416b4:	af00      	add	r7, sp, #0
 81416b6:	4603      	mov	r3, r0
 81416b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81416ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81416be:	2b00      	cmp	r3, #0
 81416c0:	db0b      	blt.n	81416da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81416c2:	88fb      	ldrh	r3, [r7, #6]
 81416c4:	f003 021f 	and.w	r2, r3, #31
 81416c8:	4907      	ldr	r1, [pc, #28]	@ (81416e8 <__NVIC_EnableIRQ+0x38>)
 81416ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81416ce:	095b      	lsrs	r3, r3, #5
 81416d0:	2001      	movs	r0, #1
 81416d2:	fa00 f202 	lsl.w	r2, r0, r2
 81416d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81416da:	bf00      	nop
 81416dc:	370c      	adds	r7, #12
 81416de:	46bd      	mov	sp, r7
 81416e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81416e4:	4770      	bx	lr
 81416e6:	bf00      	nop
 81416e8:	e000e100 	.word	0xe000e100

081416ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81416ec:	b480      	push	{r7}
 81416ee:	b083      	sub	sp, #12
 81416f0:	af00      	add	r7, sp, #0
 81416f2:	4603      	mov	r3, r0
 81416f4:	6039      	str	r1, [r7, #0]
 81416f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81416f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81416fc:	2b00      	cmp	r3, #0
 81416fe:	db0a      	blt.n	8141716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8141700:	683b      	ldr	r3, [r7, #0]
 8141702:	b2da      	uxtb	r2, r3
 8141704:	490c      	ldr	r1, [pc, #48]	@ (8141738 <__NVIC_SetPriority+0x4c>)
 8141706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 814170a:	0112      	lsls	r2, r2, #4
 814170c:	b2d2      	uxtb	r2, r2
 814170e:	440b      	add	r3, r1
 8141710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8141714:	e00a      	b.n	814172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8141716:	683b      	ldr	r3, [r7, #0]
 8141718:	b2da      	uxtb	r2, r3
 814171a:	4908      	ldr	r1, [pc, #32]	@ (814173c <__NVIC_SetPriority+0x50>)
 814171c:	88fb      	ldrh	r3, [r7, #6]
 814171e:	f003 030f 	and.w	r3, r3, #15
 8141722:	3b04      	subs	r3, #4
 8141724:	0112      	lsls	r2, r2, #4
 8141726:	b2d2      	uxtb	r2, r2
 8141728:	440b      	add	r3, r1
 814172a:	761a      	strb	r2, [r3, #24]
}
 814172c:	bf00      	nop
 814172e:	370c      	adds	r7, #12
 8141730:	46bd      	mov	sp, r7
 8141732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141736:	4770      	bx	lr
 8141738:	e000e100 	.word	0xe000e100
 814173c:	e000ed00 	.word	0xe000ed00

08141740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8141740:	b480      	push	{r7}
 8141742:	b089      	sub	sp, #36	@ 0x24
 8141744:	af00      	add	r7, sp, #0
 8141746:	60f8      	str	r0, [r7, #12]
 8141748:	60b9      	str	r1, [r7, #8]
 814174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 814174c:	68fb      	ldr	r3, [r7, #12]
 814174e:	f003 0307 	and.w	r3, r3, #7
 8141752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8141754:	69fb      	ldr	r3, [r7, #28]
 8141756:	f1c3 0307 	rsb	r3, r3, #7
 814175a:	2b04      	cmp	r3, #4
 814175c:	bf28      	it	cs
 814175e:	2304      	movcs	r3, #4
 8141760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8141762:	69fb      	ldr	r3, [r7, #28]
 8141764:	3304      	adds	r3, #4
 8141766:	2b06      	cmp	r3, #6
 8141768:	d902      	bls.n	8141770 <NVIC_EncodePriority+0x30>
 814176a:	69fb      	ldr	r3, [r7, #28]
 814176c:	3b03      	subs	r3, #3
 814176e:	e000      	b.n	8141772 <NVIC_EncodePriority+0x32>
 8141770:	2300      	movs	r3, #0
 8141772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8141774:	f04f 32ff 	mov.w	r2, #4294967295
 8141778:	69bb      	ldr	r3, [r7, #24]
 814177a:	fa02 f303 	lsl.w	r3, r2, r3
 814177e:	43da      	mvns	r2, r3
 8141780:	68bb      	ldr	r3, [r7, #8]
 8141782:	401a      	ands	r2, r3
 8141784:	697b      	ldr	r3, [r7, #20]
 8141786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8141788:	f04f 31ff 	mov.w	r1, #4294967295
 814178c:	697b      	ldr	r3, [r7, #20]
 814178e:	fa01 f303 	lsl.w	r3, r1, r3
 8141792:	43d9      	mvns	r1, r3
 8141794:	687b      	ldr	r3, [r7, #4]
 8141796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8141798:	4313      	orrs	r3, r2
         );
}
 814179a:	4618      	mov	r0, r3
 814179c:	3724      	adds	r7, #36	@ 0x24
 814179e:	46bd      	mov	sp, r7
 81417a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81417a4:	4770      	bx	lr

081417a6 <LL_TIM_EnableCounter>:
{
 81417a6:	b480      	push	{r7}
 81417a8:	b083      	sub	sp, #12
 81417aa:	af00      	add	r7, sp, #0
 81417ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 81417ae:	687b      	ldr	r3, [r7, #4]
 81417b0:	681b      	ldr	r3, [r3, #0]
 81417b2:	f043 0201 	orr.w	r2, r3, #1
 81417b6:	687b      	ldr	r3, [r7, #4]
 81417b8:	601a      	str	r2, [r3, #0]
}
 81417ba:	bf00      	nop
 81417bc:	370c      	adds	r7, #12
 81417be:	46bd      	mov	sp, r7
 81417c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81417c4:	4770      	bx	lr

081417c6 <LL_TIM_EnableUpdateEvent>:
{
 81417c6:	b480      	push	{r7}
 81417c8:	b083      	sub	sp, #12
 81417ca:	af00      	add	r7, sp, #0
 81417cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 81417ce:	687b      	ldr	r3, [r7, #4]
 81417d0:	681b      	ldr	r3, [r3, #0]
 81417d2:	f023 0202 	bic.w	r2, r3, #2
 81417d6:	687b      	ldr	r3, [r7, #4]
 81417d8:	601a      	str	r2, [r3, #0]
}
 81417da:	bf00      	nop
 81417dc:	370c      	adds	r7, #12
 81417de:	46bd      	mov	sp, r7
 81417e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81417e4:	4770      	bx	lr

081417e6 <LL_TIM_EnableARRPreload>:
{
 81417e6:	b480      	push	{r7}
 81417e8:	b083      	sub	sp, #12
 81417ea:	af00      	add	r7, sp, #0
 81417ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 81417ee:	687b      	ldr	r3, [r7, #4]
 81417f0:	681b      	ldr	r3, [r3, #0]
 81417f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81417f6:	687b      	ldr	r3, [r7, #4]
 81417f8:	601a      	str	r2, [r3, #0]
}
 81417fa:	bf00      	nop
 81417fc:	370c      	adds	r7, #12
 81417fe:	46bd      	mov	sp, r7
 8141800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141804:	4770      	bx	lr

08141806 <LL_TIM_SetClockSource>:
{
 8141806:	b480      	push	{r7}
 8141808:	b083      	sub	sp, #12
 814180a:	af00      	add	r7, sp, #0
 814180c:	6078      	str	r0, [r7, #4]
 814180e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8141810:	687b      	ldr	r3, [r7, #4]
 8141812:	689b      	ldr	r3, [r3, #8]
 8141814:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8141818:	f023 0307 	bic.w	r3, r3, #7
 814181c:	683a      	ldr	r2, [r7, #0]
 814181e:	431a      	orrs	r2, r3
 8141820:	687b      	ldr	r3, [r7, #4]
 8141822:	609a      	str	r2, [r3, #8]
}
 8141824:	bf00      	nop
 8141826:	370c      	adds	r7, #12
 8141828:	46bd      	mov	sp, r7
 814182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814182e:	4770      	bx	lr

08141830 <LL_TIM_SetTriggerOutput>:
{
 8141830:	b480      	push	{r7}
 8141832:	b083      	sub	sp, #12
 8141834:	af00      	add	r7, sp, #0
 8141836:	6078      	str	r0, [r7, #4]
 8141838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 814183a:	687b      	ldr	r3, [r7, #4]
 814183c:	685b      	ldr	r3, [r3, #4]
 814183e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8141842:	683b      	ldr	r3, [r7, #0]
 8141844:	431a      	orrs	r2, r3
 8141846:	687b      	ldr	r3, [r7, #4]
 8141848:	605a      	str	r2, [r3, #4]
}
 814184a:	bf00      	nop
 814184c:	370c      	adds	r7, #12
 814184e:	46bd      	mov	sp, r7
 8141850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141854:	4770      	bx	lr

08141856 <LL_TIM_DisableMasterSlaveMode>:
{
 8141856:	b480      	push	{r7}
 8141858:	b083      	sub	sp, #12
 814185a:	af00      	add	r7, sp, #0
 814185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 814185e:	687b      	ldr	r3, [r7, #4]
 8141860:	689b      	ldr	r3, [r3, #8]
 8141862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8141866:	687b      	ldr	r3, [r7, #4]
 8141868:	609a      	str	r2, [r3, #8]
}
 814186a:	bf00      	nop
 814186c:	370c      	adds	r7, #12
 814186e:	46bd      	mov	sp, r7
 8141870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141874:	4770      	bx	lr

08141876 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8141876:	b480      	push	{r7}
 8141878:	b083      	sub	sp, #12
 814187a:	af00      	add	r7, sp, #0
 814187c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 814187e:	687b      	ldr	r3, [r7, #4]
 8141880:	68db      	ldr	r3, [r3, #12]
 8141882:	f043 0201 	orr.w	r2, r3, #1
 8141886:	687b      	ldr	r3, [r7, #4]
 8141888:	60da      	str	r2, [r3, #12]
}
 814188a:	bf00      	nop
 814188c:	370c      	adds	r7, #12
 814188e:	46bd      	mov	sp, r7
 8141890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141894:	4770      	bx	lr

08141896 <LL_USART_Enable>:
{
 8141896:	b480      	push	{r7}
 8141898:	b083      	sub	sp, #12
 814189a:	af00      	add	r7, sp, #0
 814189c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 814189e:	687b      	ldr	r3, [r7, #4]
 81418a0:	681b      	ldr	r3, [r3, #0]
 81418a2:	f043 0201 	orr.w	r2, r3, #1
 81418a6:	687b      	ldr	r3, [r7, #4]
 81418a8:	601a      	str	r2, [r3, #0]
}
 81418aa:	bf00      	nop
 81418ac:	370c      	adds	r7, #12
 81418ae:	46bd      	mov	sp, r7
 81418b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81418b4:	4770      	bx	lr

081418b6 <LL_USART_DisableFIFO>:
{
 81418b6:	b480      	push	{r7}
 81418b8:	b083      	sub	sp, #12
 81418ba:	af00      	add	r7, sp, #0
 81418bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 81418be:	687b      	ldr	r3, [r7, #4]
 81418c0:	681b      	ldr	r3, [r3, #0]
 81418c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81418c6:	687b      	ldr	r3, [r7, #4]
 81418c8:	601a      	str	r2, [r3, #0]
}
 81418ca:	bf00      	nop
 81418cc:	370c      	adds	r7, #12
 81418ce:	46bd      	mov	sp, r7
 81418d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81418d4:	4770      	bx	lr

081418d6 <LL_USART_SetTXFIFOThreshold>:
{
 81418d6:	b480      	push	{r7}
 81418d8:	b089      	sub	sp, #36	@ 0x24
 81418da:	af00      	add	r7, sp, #0
 81418dc:	6078      	str	r0, [r7, #4]
 81418de:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 81418e0:	687b      	ldr	r3, [r7, #4]
 81418e2:	3308      	adds	r3, #8
 81418e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81418e6:	68fb      	ldr	r3, [r7, #12]
 81418e8:	e853 3f00 	ldrex	r3, [r3]
 81418ec:	60bb      	str	r3, [r7, #8]
   return(result);
 81418ee:	68bb      	ldr	r3, [r7, #8]
 81418f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 81418f4:	683b      	ldr	r3, [r7, #0]
 81418f6:	075b      	lsls	r3, r3, #29
 81418f8:	4313      	orrs	r3, r2
 81418fa:	61fb      	str	r3, [r7, #28]
 81418fc:	687b      	ldr	r3, [r7, #4]
 81418fe:	3308      	adds	r3, #8
 8141900:	69fa      	ldr	r2, [r7, #28]
 8141902:	61ba      	str	r2, [r7, #24]
 8141904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8141906:	6979      	ldr	r1, [r7, #20]
 8141908:	69ba      	ldr	r2, [r7, #24]
 814190a:	e841 2300 	strex	r3, r2, [r1]
 814190e:	613b      	str	r3, [r7, #16]
   return(result);
 8141910:	693b      	ldr	r3, [r7, #16]
 8141912:	2b00      	cmp	r3, #0
 8141914:	d1e4      	bne.n	81418e0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8141916:	bf00      	nop
 8141918:	bf00      	nop
 814191a:	3724      	adds	r7, #36	@ 0x24
 814191c:	46bd      	mov	sp, r7
 814191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141922:	4770      	bx	lr

08141924 <LL_USART_SetRXFIFOThreshold>:
{
 8141924:	b480      	push	{r7}
 8141926:	b089      	sub	sp, #36	@ 0x24
 8141928:	af00      	add	r7, sp, #0
 814192a:	6078      	str	r0, [r7, #4]
 814192c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 814192e:	687b      	ldr	r3, [r7, #4]
 8141930:	3308      	adds	r3, #8
 8141932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8141934:	68fb      	ldr	r3, [r7, #12]
 8141936:	e853 3f00 	ldrex	r3, [r3]
 814193a:	60bb      	str	r3, [r7, #8]
   return(result);
 814193c:	68bb      	ldr	r3, [r7, #8]
 814193e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8141942:	683b      	ldr	r3, [r7, #0]
 8141944:	065b      	lsls	r3, r3, #25
 8141946:	4313      	orrs	r3, r2
 8141948:	61fb      	str	r3, [r7, #28]
 814194a:	687b      	ldr	r3, [r7, #4]
 814194c:	3308      	adds	r3, #8
 814194e:	69fa      	ldr	r2, [r7, #28]
 8141950:	61ba      	str	r2, [r7, #24]
 8141952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8141954:	6979      	ldr	r1, [r7, #20]
 8141956:	69ba      	ldr	r2, [r7, #24]
 8141958:	e841 2300 	strex	r3, r2, [r1]
 814195c:	613b      	str	r3, [r7, #16]
   return(result);
 814195e:	693b      	ldr	r3, [r7, #16]
 8141960:	2b00      	cmp	r3, #0
 8141962:	d1e4      	bne.n	814192e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8141964:	bf00      	nop
 8141966:	bf00      	nop
 8141968:	3724      	adds	r7, #36	@ 0x24
 814196a:	46bd      	mov	sp, r7
 814196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141970:	4770      	bx	lr

08141972 <LL_USART_ConfigAsyncMode>:
{
 8141972:	b480      	push	{r7}
 8141974:	b083      	sub	sp, #12
 8141976:	af00      	add	r7, sp, #0
 8141978:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 814197a:	687b      	ldr	r3, [r7, #4]
 814197c:	685b      	ldr	r3, [r3, #4]
 814197e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8141982:	687b      	ldr	r3, [r7, #4]
 8141984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8141986:	687b      	ldr	r3, [r7, #4]
 8141988:	689b      	ldr	r3, [r3, #8]
 814198a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 814198e:	687b      	ldr	r3, [r7, #4]
 8141990:	609a      	str	r2, [r3, #8]
}
 8141992:	bf00      	nop
 8141994:	370c      	adds	r7, #12
 8141996:	46bd      	mov	sp, r7
 8141998:	f85d 7b04 	ldr.w	r7, [sp], #4
 814199c:	4770      	bx	lr

0814199e <LL_USART_IsActiveFlag_TEACK>:
{
 814199e:	b480      	push	{r7}
 81419a0:	b083      	sub	sp, #12
 81419a2:	af00      	add	r7, sp, #0
 81419a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 81419a6:	687b      	ldr	r3, [r7, #4]
 81419a8:	69db      	ldr	r3, [r3, #28]
 81419aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81419ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81419b2:	d101      	bne.n	81419b8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 81419b4:	2301      	movs	r3, #1
 81419b6:	e000      	b.n	81419ba <LL_USART_IsActiveFlag_TEACK+0x1c>
 81419b8:	2300      	movs	r3, #0
}
 81419ba:	4618      	mov	r0, r3
 81419bc:	370c      	adds	r7, #12
 81419be:	46bd      	mov	sp, r7
 81419c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81419c4:	4770      	bx	lr

081419c6 <LL_USART_IsActiveFlag_REACK>:
{
 81419c6:	b480      	push	{r7}
 81419c8:	b083      	sub	sp, #12
 81419ca:	af00      	add	r7, sp, #0
 81419cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 81419ce:	687b      	ldr	r3, [r7, #4]
 81419d0:	69db      	ldr	r3, [r3, #28]
 81419d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81419d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81419da:	d101      	bne.n	81419e0 <LL_USART_IsActiveFlag_REACK+0x1a>
 81419dc:	2301      	movs	r3, #1
 81419de:	e000      	b.n	81419e2 <LL_USART_IsActiveFlag_REACK+0x1c>
 81419e0:	2300      	movs	r3, #0
}
 81419e2:	4618      	mov	r0, r3
 81419e4:	370c      	adds	r7, #12
 81419e6:	46bd      	mov	sp, r7
 81419e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81419ec:	4770      	bx	lr

081419ee <LL_GPIO_ResetOutputPin>:
{
 81419ee:	b480      	push	{r7}
 81419f0:	b083      	sub	sp, #12
 81419f2:	af00      	add	r7, sp, #0
 81419f4:	6078      	str	r0, [r7, #4]
 81419f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 81419f8:	683b      	ldr	r3, [r7, #0]
 81419fa:	041a      	lsls	r2, r3, #16
 81419fc:	687b      	ldr	r3, [r7, #4]
 81419fe:	619a      	str	r2, [r3, #24]
}
 8141a00:	bf00      	nop
 8141a02:	370c      	adds	r7, #12
 8141a04:	46bd      	mov	sp, r7
 8141a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141a0a:	4770      	bx	lr

08141a0c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8141a0c:	b480      	push	{r7}
 8141a0e:	b085      	sub	sp, #20
 8141a10:	af00      	add	r7, sp, #0
 8141a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8141a14:	4b0a      	ldr	r3, [pc, #40]	@ (8141a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8141a16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8141a1a:	4909      	ldr	r1, [pc, #36]	@ (8141a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8141a1c:	687b      	ldr	r3, [r7, #4]
 8141a1e:	4313      	orrs	r3, r2
 8141a20:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8141a24:	4b06      	ldr	r3, [pc, #24]	@ (8141a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8141a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8141a2a:	687b      	ldr	r3, [r7, #4]
 8141a2c:	4013      	ands	r3, r2
 8141a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8141a30:	68fb      	ldr	r3, [r7, #12]
}
 8141a32:	bf00      	nop
 8141a34:	3714      	adds	r7, #20
 8141a36:	46bd      	mov	sp, r7
 8141a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141a3c:	4770      	bx	lr
 8141a3e:	bf00      	nop
 8141a40:	58024400 	.word	0x58024400

08141a44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8141a44:	b480      	push	{r7}
 8141a46:	b085      	sub	sp, #20
 8141a48:	af00      	add	r7, sp, #0
 8141a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8141a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8141a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8141a4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8141a52:	4909      	ldr	r1, [pc, #36]	@ (8141a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8141a54:	687b      	ldr	r3, [r7, #4]
 8141a56:	4313      	orrs	r3, r2
 8141a58:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8141a5c:	4b06      	ldr	r3, [pc, #24]	@ (8141a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8141a5e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8141a62:	687b      	ldr	r3, [r7, #4]
 8141a64:	4013      	ands	r3, r2
 8141a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8141a68:	68fb      	ldr	r3, [r7, #12]
}
 8141a6a:	bf00      	nop
 8141a6c:	3714      	adds	r7, #20
 8141a6e:	46bd      	mov	sp, r7
 8141a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141a74:	4770      	bx	lr
 8141a76:	bf00      	nop
 8141a78:	58024400 	.word	0x58024400

08141a7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8141a7c:	b480      	push	{r7}
 8141a7e:	b085      	sub	sp, #20
 8141a80:	af00      	add	r7, sp, #0
 8141a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8141a84:	4b0a      	ldr	r3, [pc, #40]	@ (8141ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8141a86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8141a8a:	4909      	ldr	r1, [pc, #36]	@ (8141ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8141a8c:	687b      	ldr	r3, [r7, #4]
 8141a8e:	4313      	orrs	r3, r2
 8141a90:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8141a94:	4b06      	ldr	r3, [pc, #24]	@ (8141ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8141a96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8141a9a:	687b      	ldr	r3, [r7, #4]
 8141a9c:	4013      	ands	r3, r2
 8141a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8141aa0:	68fb      	ldr	r3, [r7, #12]
}
 8141aa2:	bf00      	nop
 8141aa4:	3714      	adds	r7, #20
 8141aa6:	46bd      	mov	sp, r7
 8141aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141aac:	4770      	bx	lr
 8141aae:	bf00      	nop
 8141ab0:	58024400 	.word	0x58024400

08141ab4 <LL_DMA_SetDataTransferDirection>:
{
 8141ab4:	b480      	push	{r7}
 8141ab6:	b087      	sub	sp, #28
 8141ab8:	af00      	add	r7, sp, #0
 8141aba:	60f8      	str	r0, [r7, #12]
 8141abc:	60b9      	str	r1, [r7, #8]
 8141abe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141ac0:	68fb      	ldr	r3, [r7, #12]
 8141ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8141ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8141afc <LL_DMA_SetDataTransferDirection+0x48>)
 8141ac6:	68bb      	ldr	r3, [r7, #8]
 8141ac8:	4413      	add	r3, r2
 8141aca:	781b      	ldrb	r3, [r3, #0]
 8141acc:	461a      	mov	r2, r3
 8141ace:	697b      	ldr	r3, [r7, #20]
 8141ad0:	4413      	add	r3, r2
 8141ad2:	681b      	ldr	r3, [r3, #0]
 8141ad4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8141ad8:	4908      	ldr	r1, [pc, #32]	@ (8141afc <LL_DMA_SetDataTransferDirection+0x48>)
 8141ada:	68bb      	ldr	r3, [r7, #8]
 8141adc:	440b      	add	r3, r1
 8141ade:	781b      	ldrb	r3, [r3, #0]
 8141ae0:	4619      	mov	r1, r3
 8141ae2:	697b      	ldr	r3, [r7, #20]
 8141ae4:	440b      	add	r3, r1
 8141ae6:	4619      	mov	r1, r3
 8141ae8:	687b      	ldr	r3, [r7, #4]
 8141aea:	4313      	orrs	r3, r2
 8141aec:	600b      	str	r3, [r1, #0]
}
 8141aee:	bf00      	nop
 8141af0:	371c      	adds	r7, #28
 8141af2:	46bd      	mov	sp, r7
 8141af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141af8:	4770      	bx	lr
 8141afa:	bf00      	nop
 8141afc:	0814eac8 	.word	0x0814eac8

08141b00 <LL_DMA_SetMode>:
{
 8141b00:	b480      	push	{r7}
 8141b02:	b087      	sub	sp, #28
 8141b04:	af00      	add	r7, sp, #0
 8141b06:	60f8      	str	r0, [r7, #12]
 8141b08:	60b9      	str	r1, [r7, #8]
 8141b0a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141b0c:	68fb      	ldr	r3, [r7, #12]
 8141b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8141b10:	4a0d      	ldr	r2, [pc, #52]	@ (8141b48 <LL_DMA_SetMode+0x48>)
 8141b12:	68bb      	ldr	r3, [r7, #8]
 8141b14:	4413      	add	r3, r2
 8141b16:	781b      	ldrb	r3, [r3, #0]
 8141b18:	461a      	mov	r2, r3
 8141b1a:	697b      	ldr	r3, [r7, #20]
 8141b1c:	4413      	add	r3, r2
 8141b1e:	681b      	ldr	r3, [r3, #0]
 8141b20:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8141b24:	4908      	ldr	r1, [pc, #32]	@ (8141b48 <LL_DMA_SetMode+0x48>)
 8141b26:	68bb      	ldr	r3, [r7, #8]
 8141b28:	440b      	add	r3, r1
 8141b2a:	781b      	ldrb	r3, [r3, #0]
 8141b2c:	4619      	mov	r1, r3
 8141b2e:	697b      	ldr	r3, [r7, #20]
 8141b30:	440b      	add	r3, r1
 8141b32:	4619      	mov	r1, r3
 8141b34:	687b      	ldr	r3, [r7, #4]
 8141b36:	4313      	orrs	r3, r2
 8141b38:	600b      	str	r3, [r1, #0]
}
 8141b3a:	bf00      	nop
 8141b3c:	371c      	adds	r7, #28
 8141b3e:	46bd      	mov	sp, r7
 8141b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141b44:	4770      	bx	lr
 8141b46:	bf00      	nop
 8141b48:	0814eac8 	.word	0x0814eac8

08141b4c <LL_DMA_SetPeriphIncMode>:
{
 8141b4c:	b480      	push	{r7}
 8141b4e:	b087      	sub	sp, #28
 8141b50:	af00      	add	r7, sp, #0
 8141b52:	60f8      	str	r0, [r7, #12]
 8141b54:	60b9      	str	r1, [r7, #8]
 8141b56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141b58:	68fb      	ldr	r3, [r7, #12]
 8141b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8141b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8141b94 <LL_DMA_SetPeriphIncMode+0x48>)
 8141b5e:	68bb      	ldr	r3, [r7, #8]
 8141b60:	4413      	add	r3, r2
 8141b62:	781b      	ldrb	r3, [r3, #0]
 8141b64:	461a      	mov	r2, r3
 8141b66:	697b      	ldr	r3, [r7, #20]
 8141b68:	4413      	add	r3, r2
 8141b6a:	681b      	ldr	r3, [r3, #0]
 8141b6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8141b70:	4908      	ldr	r1, [pc, #32]	@ (8141b94 <LL_DMA_SetPeriphIncMode+0x48>)
 8141b72:	68bb      	ldr	r3, [r7, #8]
 8141b74:	440b      	add	r3, r1
 8141b76:	781b      	ldrb	r3, [r3, #0]
 8141b78:	4619      	mov	r1, r3
 8141b7a:	697b      	ldr	r3, [r7, #20]
 8141b7c:	440b      	add	r3, r1
 8141b7e:	4619      	mov	r1, r3
 8141b80:	687b      	ldr	r3, [r7, #4]
 8141b82:	4313      	orrs	r3, r2
 8141b84:	600b      	str	r3, [r1, #0]
}
 8141b86:	bf00      	nop
 8141b88:	371c      	adds	r7, #28
 8141b8a:	46bd      	mov	sp, r7
 8141b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141b90:	4770      	bx	lr
 8141b92:	bf00      	nop
 8141b94:	0814eac8 	.word	0x0814eac8

08141b98 <LL_DMA_SetMemoryIncMode>:
{
 8141b98:	b480      	push	{r7}
 8141b9a:	b087      	sub	sp, #28
 8141b9c:	af00      	add	r7, sp, #0
 8141b9e:	60f8      	str	r0, [r7, #12]
 8141ba0:	60b9      	str	r1, [r7, #8]
 8141ba2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141ba4:	68fb      	ldr	r3, [r7, #12]
 8141ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8141ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8141be0 <LL_DMA_SetMemoryIncMode+0x48>)
 8141baa:	68bb      	ldr	r3, [r7, #8]
 8141bac:	4413      	add	r3, r2
 8141bae:	781b      	ldrb	r3, [r3, #0]
 8141bb0:	461a      	mov	r2, r3
 8141bb2:	697b      	ldr	r3, [r7, #20]
 8141bb4:	4413      	add	r3, r2
 8141bb6:	681b      	ldr	r3, [r3, #0]
 8141bb8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8141bbc:	4908      	ldr	r1, [pc, #32]	@ (8141be0 <LL_DMA_SetMemoryIncMode+0x48>)
 8141bbe:	68bb      	ldr	r3, [r7, #8]
 8141bc0:	440b      	add	r3, r1
 8141bc2:	781b      	ldrb	r3, [r3, #0]
 8141bc4:	4619      	mov	r1, r3
 8141bc6:	697b      	ldr	r3, [r7, #20]
 8141bc8:	440b      	add	r3, r1
 8141bca:	4619      	mov	r1, r3
 8141bcc:	687b      	ldr	r3, [r7, #4]
 8141bce:	4313      	orrs	r3, r2
 8141bd0:	600b      	str	r3, [r1, #0]
}
 8141bd2:	bf00      	nop
 8141bd4:	371c      	adds	r7, #28
 8141bd6:	46bd      	mov	sp, r7
 8141bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141bdc:	4770      	bx	lr
 8141bde:	bf00      	nop
 8141be0:	0814eac8 	.word	0x0814eac8

08141be4 <LL_DMA_SetPeriphSize>:
{
 8141be4:	b480      	push	{r7}
 8141be6:	b087      	sub	sp, #28
 8141be8:	af00      	add	r7, sp, #0
 8141bea:	60f8      	str	r0, [r7, #12]
 8141bec:	60b9      	str	r1, [r7, #8]
 8141bee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141bf0:	68fb      	ldr	r3, [r7, #12]
 8141bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8141bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8141c2c <LL_DMA_SetPeriphSize+0x48>)
 8141bf6:	68bb      	ldr	r3, [r7, #8]
 8141bf8:	4413      	add	r3, r2
 8141bfa:	781b      	ldrb	r3, [r3, #0]
 8141bfc:	461a      	mov	r2, r3
 8141bfe:	697b      	ldr	r3, [r7, #20]
 8141c00:	4413      	add	r3, r2
 8141c02:	681b      	ldr	r3, [r3, #0]
 8141c04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8141c08:	4908      	ldr	r1, [pc, #32]	@ (8141c2c <LL_DMA_SetPeriphSize+0x48>)
 8141c0a:	68bb      	ldr	r3, [r7, #8]
 8141c0c:	440b      	add	r3, r1
 8141c0e:	781b      	ldrb	r3, [r3, #0]
 8141c10:	4619      	mov	r1, r3
 8141c12:	697b      	ldr	r3, [r7, #20]
 8141c14:	440b      	add	r3, r1
 8141c16:	4619      	mov	r1, r3
 8141c18:	687b      	ldr	r3, [r7, #4]
 8141c1a:	4313      	orrs	r3, r2
 8141c1c:	600b      	str	r3, [r1, #0]
}
 8141c1e:	bf00      	nop
 8141c20:	371c      	adds	r7, #28
 8141c22:	46bd      	mov	sp, r7
 8141c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141c28:	4770      	bx	lr
 8141c2a:	bf00      	nop
 8141c2c:	0814eac8 	.word	0x0814eac8

08141c30 <LL_DMA_SetMemorySize>:
{
 8141c30:	b480      	push	{r7}
 8141c32:	b087      	sub	sp, #28
 8141c34:	af00      	add	r7, sp, #0
 8141c36:	60f8      	str	r0, [r7, #12]
 8141c38:	60b9      	str	r1, [r7, #8]
 8141c3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141c3c:	68fb      	ldr	r3, [r7, #12]
 8141c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8141c40:	4a0d      	ldr	r2, [pc, #52]	@ (8141c78 <LL_DMA_SetMemorySize+0x48>)
 8141c42:	68bb      	ldr	r3, [r7, #8]
 8141c44:	4413      	add	r3, r2
 8141c46:	781b      	ldrb	r3, [r3, #0]
 8141c48:	461a      	mov	r2, r3
 8141c4a:	697b      	ldr	r3, [r7, #20]
 8141c4c:	4413      	add	r3, r2
 8141c4e:	681b      	ldr	r3, [r3, #0]
 8141c50:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8141c54:	4908      	ldr	r1, [pc, #32]	@ (8141c78 <LL_DMA_SetMemorySize+0x48>)
 8141c56:	68bb      	ldr	r3, [r7, #8]
 8141c58:	440b      	add	r3, r1
 8141c5a:	781b      	ldrb	r3, [r3, #0]
 8141c5c:	4619      	mov	r1, r3
 8141c5e:	697b      	ldr	r3, [r7, #20]
 8141c60:	440b      	add	r3, r1
 8141c62:	4619      	mov	r1, r3
 8141c64:	687b      	ldr	r3, [r7, #4]
 8141c66:	4313      	orrs	r3, r2
 8141c68:	600b      	str	r3, [r1, #0]
}
 8141c6a:	bf00      	nop
 8141c6c:	371c      	adds	r7, #28
 8141c6e:	46bd      	mov	sp, r7
 8141c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141c74:	4770      	bx	lr
 8141c76:	bf00      	nop
 8141c78:	0814eac8 	.word	0x0814eac8

08141c7c <LL_DMA_SetStreamPriorityLevel>:
{
 8141c7c:	b480      	push	{r7}
 8141c7e:	b087      	sub	sp, #28
 8141c80:	af00      	add	r7, sp, #0
 8141c82:	60f8      	str	r0, [r7, #12]
 8141c84:	60b9      	str	r1, [r7, #8]
 8141c86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141c88:	68fb      	ldr	r3, [r7, #12]
 8141c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8141c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8141cc4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8141c8e:	68bb      	ldr	r3, [r7, #8]
 8141c90:	4413      	add	r3, r2
 8141c92:	781b      	ldrb	r3, [r3, #0]
 8141c94:	461a      	mov	r2, r3
 8141c96:	697b      	ldr	r3, [r7, #20]
 8141c98:	4413      	add	r3, r2
 8141c9a:	681b      	ldr	r3, [r3, #0]
 8141c9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8141ca0:	4908      	ldr	r1, [pc, #32]	@ (8141cc4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8141ca2:	68bb      	ldr	r3, [r7, #8]
 8141ca4:	440b      	add	r3, r1
 8141ca6:	781b      	ldrb	r3, [r3, #0]
 8141ca8:	4619      	mov	r1, r3
 8141caa:	697b      	ldr	r3, [r7, #20]
 8141cac:	440b      	add	r3, r1
 8141cae:	4619      	mov	r1, r3
 8141cb0:	687b      	ldr	r3, [r7, #4]
 8141cb2:	4313      	orrs	r3, r2
 8141cb4:	600b      	str	r3, [r1, #0]
}
 8141cb6:	bf00      	nop
 8141cb8:	371c      	adds	r7, #28
 8141cba:	46bd      	mov	sp, r7
 8141cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141cc0:	4770      	bx	lr
 8141cc2:	bf00      	nop
 8141cc4:	0814eac8 	.word	0x0814eac8

08141cc8 <LL_DMA_SetPeriphRequest>:
{
 8141cc8:	b480      	push	{r7}
 8141cca:	b085      	sub	sp, #20
 8141ccc:	af00      	add	r7, sp, #0
 8141cce:	60f8      	str	r0, [r7, #12]
 8141cd0:	60b9      	str	r1, [r7, #8]
 8141cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8141cd4:	68bb      	ldr	r3, [r7, #8]
 8141cd6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8141cda:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8141cde:	009b      	lsls	r3, r3, #2
 8141ce0:	68fa      	ldr	r2, [r7, #12]
 8141ce2:	4911      	ldr	r1, [pc, #68]	@ (8141d28 <LL_DMA_SetPeriphRequest+0x60>)
 8141ce4:	428a      	cmp	r2, r1
 8141ce6:	d101      	bne.n	8141cec <LL_DMA_SetPeriphRequest+0x24>
 8141ce8:	2200      	movs	r2, #0
 8141cea:	e000      	b.n	8141cee <LL_DMA_SetPeriphRequest+0x26>
 8141cec:	2220      	movs	r2, #32
 8141cee:	4413      	add	r3, r2
 8141cf0:	681b      	ldr	r3, [r3, #0]
 8141cf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8141cf6:	68bb      	ldr	r3, [r7, #8]
 8141cf8:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8141cfc:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8141d00:	009b      	lsls	r3, r3, #2
 8141d02:	68f9      	ldr	r1, [r7, #12]
 8141d04:	4808      	ldr	r0, [pc, #32]	@ (8141d28 <LL_DMA_SetPeriphRequest+0x60>)
 8141d06:	4281      	cmp	r1, r0
 8141d08:	d101      	bne.n	8141d0e <LL_DMA_SetPeriphRequest+0x46>
 8141d0a:	2100      	movs	r1, #0
 8141d0c:	e000      	b.n	8141d10 <LL_DMA_SetPeriphRequest+0x48>
 8141d0e:	2120      	movs	r1, #32
 8141d10:	440b      	add	r3, r1
 8141d12:	4619      	mov	r1, r3
 8141d14:	687b      	ldr	r3, [r7, #4]
 8141d16:	4313      	orrs	r3, r2
 8141d18:	600b      	str	r3, [r1, #0]
}
 8141d1a:	bf00      	nop
 8141d1c:	3714      	adds	r7, #20
 8141d1e:	46bd      	mov	sp, r7
 8141d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141d24:	4770      	bx	lr
 8141d26:	bf00      	nop
 8141d28:	40020000 	.word	0x40020000

08141d2c <LL_DMA_DisableFifoMode>:
{
 8141d2c:	b480      	push	{r7}
 8141d2e:	b085      	sub	sp, #20
 8141d30:	af00      	add	r7, sp, #0
 8141d32:	6078      	str	r0, [r7, #4]
 8141d34:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8141d36:	687b      	ldr	r3, [r7, #4]
 8141d38:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8141d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8141d6c <LL_DMA_DisableFifoMode+0x40>)
 8141d3c:	683b      	ldr	r3, [r7, #0]
 8141d3e:	4413      	add	r3, r2
 8141d40:	781b      	ldrb	r3, [r3, #0]
 8141d42:	461a      	mov	r2, r3
 8141d44:	68fb      	ldr	r3, [r7, #12]
 8141d46:	4413      	add	r3, r2
 8141d48:	695b      	ldr	r3, [r3, #20]
 8141d4a:	4908      	ldr	r1, [pc, #32]	@ (8141d6c <LL_DMA_DisableFifoMode+0x40>)
 8141d4c:	683a      	ldr	r2, [r7, #0]
 8141d4e:	440a      	add	r2, r1
 8141d50:	7812      	ldrb	r2, [r2, #0]
 8141d52:	4611      	mov	r1, r2
 8141d54:	68fa      	ldr	r2, [r7, #12]
 8141d56:	440a      	add	r2, r1
 8141d58:	f023 0304 	bic.w	r3, r3, #4
 8141d5c:	6153      	str	r3, [r2, #20]
}
 8141d5e:	bf00      	nop
 8141d60:	3714      	adds	r7, #20
 8141d62:	46bd      	mov	sp, r7
 8141d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8141d68:	4770      	bx	lr
 8141d6a:	bf00      	nop
 8141d6c:	0814eac8 	.word	0x0814eac8

08141d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8141d70:	b580      	push	{r7, lr}
 8141d72:	b082      	sub	sp, #8
 8141d74:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#ifdef USE_CORE_M4
  __HAL_RCC_HSEM_CLK_ENABLE();
 8141d76:	4b15      	ldr	r3, [pc, #84]	@ (8141dcc <main+0x5c>)
 8141d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8141d7c:	4a13      	ldr	r2, [pc, #76]	@ (8141dcc <main+0x5c>)
 8141d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8141d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8141d86:	4b11      	ldr	r3, [pc, #68]	@ (8141dcc <main+0x5c>)
 8141d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8141d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8141d90:	607b      	str	r3, [r7, #4]
 8141d92:	687b      	ldr	r3, [r7, #4]
  HAL_HSEM_FastTake(0);
 8141d94:	2000      	movs	r0, #0
 8141d96:	f001 f8a3 	bl	8142ee0 <HAL_HSEM_FastTake>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8141d9a:	f000 fd6f 	bl	814287c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8141d9e:	f000 f9ab 	bl	81420f8 <MX_MDMA_Init>
  MX_DMA_Init();
 8141da2:	f000 f971 	bl	8142088 <MX_DMA_Init>
  MX_BDMA_Init();
 8141da6:	f000 f955 	bl	8142054 <MX_BDMA_Init>
  MX_GPIO_Init();
 8141daa:	f000 f9bf 	bl	814212c <MX_GPIO_Init>
  MX_SDMMC2_MMC_Init();
 8141dae:	f000 f80f 	bl	8141dd0 <MX_SDMMC2_MMC_Init>
  MX_USART6_UART_Init();
 8141db2:	f000 f87f 	bl	8141eb4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8141db6:	f000 f82f 	bl	8141e18 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8141dba:	f00c f837 	bl	814de2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Mgmt_HardwareSystemPreparing();
 8141dbe:	f7fe fa8b 	bl	81402d8 <Mgmt_HardwareSystemPreparing>

  Mgmt_SystemStart();
 8141dc2:	f7fe fa94 	bl	81402ee <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8141dc6:	bf00      	nop
 8141dc8:	e7fd      	b.n	8141dc6 <main+0x56>
 8141dca:	bf00      	nop
 8141dcc:	58024400 	.word	0x58024400

08141dd0 <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 8141dd0:	b580      	push	{r7, lr}
 8141dd2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8141dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8141e14 <MX_SDMMC2_MMC_Init+0x44>)
 8141dd8:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8141dda:	4b0d      	ldr	r3, [pc, #52]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141ddc:	2200      	movs	r2, #0
 8141dde:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8141de0:	4b0b      	ldr	r3, [pc, #44]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141de2:	2200      	movs	r2, #0
 8141de4:	609a      	str	r2, [r3, #8]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8141de6:	4b0a      	ldr	r3, [pc, #40]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141de8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8141dec:	60da      	str	r2, [r3, #12]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8141dee:	4b08      	ldr	r3, [pc, #32]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141df0:	2200      	movs	r2, #0
 8141df2:	611a      	str	r2, [r3, #16]
  hmmc2.Init.ClockDiv = 4;
 8141df4:	4b06      	ldr	r3, [pc, #24]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141df6:	2204      	movs	r2, #4
 8141df8:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 8141dfa:	4805      	ldr	r0, [pc, #20]	@ (8141e10 <MX_SDMMC2_MMC_Init+0x40>)
 8141dfc:	f001 f88a 	bl	8142f14 <HAL_MMC_Init>
 8141e00:	4603      	mov	r3, r0
 8141e02:	2b00      	cmp	r3, #0
 8141e04:	d001      	beq.n	8141e0a <MX_SDMMC2_MMC_Init+0x3a>
  {
    Error_Handler();
 8141e06:	f000 f9d9 	bl	81421bc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8141e0a:	bf00      	nop
 8141e0c:	bd80      	pop	{r7, pc}
 8141e0e:	bf00      	nop
 8141e10:	10034ccc 	.word	0x10034ccc
 8141e14:	48022400 	.word	0x48022400

08141e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8141e18:	b580      	push	{r7, lr}
 8141e1a:	b086      	sub	sp, #24
 8141e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8141e1e:	1d3b      	adds	r3, r7, #4
 8141e20:	2200      	movs	r2, #0
 8141e22:	601a      	str	r2, [r3, #0]
 8141e24:	605a      	str	r2, [r3, #4]
 8141e26:	609a      	str	r2, [r3, #8]
 8141e28:	60da      	str	r2, [r3, #12]
 8141e2a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8141e2c:	2001      	movs	r0, #1
 8141e2e:	f7ff fe09 	bl	8141a44 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8141e32:	f7ff fc2f 	bl	8141694 <__NVIC_GetPriorityGrouping>
 8141e36:	4603      	mov	r3, r0
 8141e38:	2200      	movs	r2, #0
 8141e3a:	2100      	movs	r1, #0
 8141e3c:	4618      	mov	r0, r3
 8141e3e:	f7ff fc7f 	bl	8141740 <NVIC_EncodePriority>
 8141e42:	4603      	mov	r3, r0
 8141e44:	4619      	mov	r1, r3
 8141e46:	201c      	movs	r0, #28
 8141e48:	f7ff fc50 	bl	81416ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8141e4c:	201c      	movs	r0, #28
 8141e4e:	f7ff fc2f 	bl	81416b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 8141e52:	2377      	movs	r3, #119	@ 0x77
 8141e54:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8141e56:	2300      	movs	r3, #0
 8141e58:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8141e5a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8141e5e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8141e60:	2300      	movs	r3, #0
 8141e62:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8141e64:	1d3b      	adds	r3, r7, #4
 8141e66:	4619      	mov	r1, r3
 8141e68:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e6c:	f008 fab6 	bl	814a3dc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8141e70:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e74:	f7ff fcb7 	bl	81417e6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8141e78:	2100      	movs	r1, #0
 8141e7a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e7e:	f7ff fcc2 	bl	8141806 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8141e82:	2120      	movs	r1, #32
 8141e84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e88:	f7ff fcd2 	bl	8141830 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8141e8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e90:	f7ff fce1 	bl	8141856 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM2);
 8141e94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141e98:	f7ff fced 	bl	8141876 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM2);
 8141e9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141ea0:	f7ff fc91 	bl	81417c6 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM2);
 8141ea4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8141ea8:	f7ff fc7d 	bl	81417a6 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8141eac:	bf00      	nop
 8141eae:	3718      	adds	r7, #24
 8141eb0:	46bd      	mov	sp, r7
 8141eb2:	bd80      	pop	{r7, pc}

08141eb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8141eb4:	b580      	push	{r7, lr}
 8141eb6:	b0be      	sub	sp, #248	@ 0xf8
 8141eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8141eba:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8141ebe:	2220      	movs	r2, #32
 8141ec0:	2100      	movs	r1, #0
 8141ec2:	4618      	mov	r0, r3
 8141ec4:	f00c fd58 	bl	814e978 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8141ec8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8141ecc:	2200      	movs	r2, #0
 8141ece:	601a      	str	r2, [r3, #0]
 8141ed0:	605a      	str	r2, [r3, #4]
 8141ed2:	609a      	str	r2, [r3, #8]
 8141ed4:	60da      	str	r2, [r3, #12]
 8141ed6:	611a      	str	r2, [r3, #16]
 8141ed8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8141eda:	463b      	mov	r3, r7
 8141edc:	22c0      	movs	r2, #192	@ 0xc0
 8141ede:	2100      	movs	r1, #0
 8141ee0:	4618      	mov	r0, r3
 8141ee2:	f00c fd49 	bl	814e978 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8141ee6:	f04f 0201 	mov.w	r2, #1
 8141eea:	f04f 0300 	mov.w	r3, #0
 8141eee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8141ef2:	2300      	movs	r3, #0
 8141ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8141ef6:	463b      	mov	r3, r7
 8141ef8:	4618      	mov	r0, r3
 8141efa:	f003 fe6f 	bl	8145bdc <HAL_RCCEx_PeriphCLKConfig>
 8141efe:	4603      	mov	r3, r0
 8141f00:	2b00      	cmp	r3, #0
 8141f02:	d001      	beq.n	8141f08 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8141f04:	f000 f95a 	bl	81421bc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8141f08:	2020      	movs	r0, #32
 8141f0a:	f7ff fdb7 	bl	8141a7c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8141f0e:	2040      	movs	r0, #64	@ 0x40
 8141f10:	f7ff fd7c 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PG9   ------> USART6_RX
  PG14   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_14;
 8141f14:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8141f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8141f1c:	2302      	movs	r3, #2
 8141f1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8141f22:	2300      	movs	r3, #0
 8141f24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8141f28:	2300      	movs	r3, #0
 8141f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8141f2e:	2300      	movs	r3, #0
 8141f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8141f34:	2307      	movs	r3, #7
 8141f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8141f3a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8141f3e:	4619      	mov	r1, r3
 8141f40:	4841      	ldr	r0, [pc, #260]	@ (8142048 <MX_USART6_UART_Init+0x194>)
 8141f42:	f006 feeb 	bl	8148d1c <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART6_RX);
 8141f46:	2247      	movs	r2, #71	@ 0x47
 8141f48:	2100      	movs	r1, #0
 8141f4a:	4840      	ldr	r0, [pc, #256]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f4c:	f7ff febc 	bl	8141cc8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8141f50:	2200      	movs	r2, #0
 8141f52:	2100      	movs	r1, #0
 8141f54:	483d      	ldr	r0, [pc, #244]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f56:	f7ff fdad 	bl	8141ab4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8141f5a:	2200      	movs	r2, #0
 8141f5c:	2100      	movs	r1, #0
 8141f5e:	483b      	ldr	r0, [pc, #236]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f60:	f7ff fe8c 	bl	8141c7c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8141f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8141f68:	2100      	movs	r1, #0
 8141f6a:	4838      	ldr	r0, [pc, #224]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f6c:	f7ff fdc8 	bl	8141b00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8141f70:	2200      	movs	r2, #0
 8141f72:	2100      	movs	r1, #0
 8141f74:	4835      	ldr	r0, [pc, #212]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f76:	f7ff fde9 	bl	8141b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8141f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8141f7e:	2100      	movs	r1, #0
 8141f80:	4832      	ldr	r0, [pc, #200]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f82:	f7ff fe09 	bl	8141b98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8141f86:	2200      	movs	r2, #0
 8141f88:	2100      	movs	r1, #0
 8141f8a:	4830      	ldr	r0, [pc, #192]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f8c:	f7ff fe2a 	bl	8141be4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8141f90:	2200      	movs	r2, #0
 8141f92:	2100      	movs	r1, #0
 8141f94:	482d      	ldr	r0, [pc, #180]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f96:	f7ff fe4b 	bl	8141c30 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8141f9a:	2100      	movs	r1, #0
 8141f9c:	482b      	ldr	r0, [pc, #172]	@ (814204c <MX_USART6_UART_Init+0x198>)
 8141f9e:	f7ff fec5 	bl	8141d2c <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8141fa2:	f7ff fb77 	bl	8141694 <__NVIC_GetPriorityGrouping>
 8141fa6:	4603      	mov	r3, r0
 8141fa8:	2200      	movs	r2, #0
 8141faa:	2100      	movs	r1, #0
 8141fac:	4618      	mov	r0, r3
 8141fae:	f7ff fbc7 	bl	8141740 <NVIC_EncodePriority>
 8141fb2:	4603      	mov	r3, r0
 8141fb4:	4619      	mov	r1, r3
 8141fb6:	2047      	movs	r0, #71	@ 0x47
 8141fb8:	f7ff fb98 	bl	81416ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8141fbc:	2047      	movs	r0, #71	@ 0x47
 8141fbe:	f7ff fb77 	bl	81416b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8141fc2:	2300      	movs	r3, #0
 8141fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 8141fc8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8141fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8141fd0:	2300      	movs	r3, #0
 8141fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8141fd6:	2300      	movs	r3, #0
 8141fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8141fdc:	2300      	movs	r3, #0
 8141fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8141fe2:	230c      	movs	r3, #12
 8141fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8141fe8:	2300      	movs	r3, #0
 8141fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8141fee:	2300      	movs	r3, #0
 8141ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART6, &USART_InitStruct);
 8141ff4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8141ff8:	4619      	mov	r1, r3
 8141ffa:	4815      	ldr	r0, [pc, #84]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8141ffc:	f008 fb20 	bl	814a640 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8142000:	2100      	movs	r1, #0
 8142002:	4813      	ldr	r0, [pc, #76]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8142004:	f7ff fc67 	bl	81418d6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8142008:	2100      	movs	r1, #0
 814200a:	4811      	ldr	r0, [pc, #68]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 814200c:	f7ff fc8a 	bl	8141924 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8142010:	480f      	ldr	r0, [pc, #60]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8142012:	f7ff fc50 	bl	81418b6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8142016:	480e      	ldr	r0, [pc, #56]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8142018:	f7ff fcab 	bl	8141972 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 814201c:	480c      	ldr	r0, [pc, #48]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 814201e:	f7ff fc3a 	bl	8141896 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8142022:	bf00      	nop
 8142024:	480a      	ldr	r0, [pc, #40]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8142026:	f7ff fcba 	bl	814199e <LL_USART_IsActiveFlag_TEACK>
 814202a:	4603      	mov	r3, r0
 814202c:	2b00      	cmp	r3, #0
 814202e:	d0f9      	beq.n	8142024 <MX_USART6_UART_Init+0x170>
 8142030:	4807      	ldr	r0, [pc, #28]	@ (8142050 <MX_USART6_UART_Init+0x19c>)
 8142032:	f7ff fcc8 	bl	81419c6 <LL_USART_IsActiveFlag_REACK>
 8142036:	4603      	mov	r3, r0
 8142038:	2b00      	cmp	r3, #0
 814203a:	d0f3      	beq.n	8142024 <MX_USART6_UART_Init+0x170>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 814203c:	bf00      	nop
 814203e:	bf00      	nop
 8142040:	37f8      	adds	r7, #248	@ 0xf8
 8142042:	46bd      	mov	sp, r7
 8142044:	bd80      	pop	{r7, pc}
 8142046:	bf00      	nop
 8142048:	58021800 	.word	0x58021800
 814204c:	40020400 	.word	0x40020400
 8142050:	40011400 	.word	0x40011400

08142054 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8142054:	b480      	push	{r7}
 8142056:	b083      	sub	sp, #12
 8142058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 814205a:	4b0a      	ldr	r3, [pc, #40]	@ (8142084 <MX_BDMA_Init+0x30>)
 814205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8142060:	4a08      	ldr	r2, [pc, #32]	@ (8142084 <MX_BDMA_Init+0x30>)
 8142062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8142066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 814206a:	4b06      	ldr	r3, [pc, #24]	@ (8142084 <MX_BDMA_Init+0x30>)
 814206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8142070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8142074:	607b      	str	r3, [r7, #4]
 8142076:	687b      	ldr	r3, [r7, #4]

}
 8142078:	bf00      	nop
 814207a:	370c      	adds	r7, #12
 814207c:	46bd      	mov	sp, r7
 814207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142082:	4770      	bx	lr
 8142084:	58024400 	.word	0x58024400

08142088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8142088:	b580      	push	{r7, lr}
 814208a:	b082      	sub	sp, #8
 814208c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 814208e:	4b19      	ldr	r3, [pc, #100]	@ (81420f4 <MX_DMA_Init+0x6c>)
 8142090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8142094:	4a17      	ldr	r2, [pc, #92]	@ (81420f4 <MX_DMA_Init+0x6c>)
 8142096:	f043 0302 	orr.w	r3, r3, #2
 814209a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 814209e:	4b15      	ldr	r3, [pc, #84]	@ (81420f4 <MX_DMA_Init+0x6c>)
 81420a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81420a4:	f003 0302 	and.w	r3, r3, #2
 81420a8:	607b      	str	r3, [r7, #4]
 81420aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 81420ac:	4b11      	ldr	r3, [pc, #68]	@ (81420f4 <MX_DMA_Init+0x6c>)
 81420ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81420b2:	4a10      	ldr	r2, [pc, #64]	@ (81420f4 <MX_DMA_Init+0x6c>)
 81420b4:	f043 0301 	orr.w	r3, r3, #1
 81420b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81420bc:	4b0d      	ldr	r3, [pc, #52]	@ (81420f4 <MX_DMA_Init+0x6c>)
 81420be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81420c2:	f003 0301 	and.w	r3, r3, #1
 81420c6:	603b      	str	r3, [r7, #0]
 81420c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 81420ca:	f7ff fae3 	bl	8141694 <__NVIC_GetPriorityGrouping>
 81420ce:	4603      	mov	r3, r0
 81420d0:	2200      	movs	r2, #0
 81420d2:	2100      	movs	r1, #0
 81420d4:	4618      	mov	r0, r3
 81420d6:	f7ff fb33 	bl	8141740 <NVIC_EncodePriority>
 81420da:	4603      	mov	r3, r0
 81420dc:	4619      	mov	r1, r3
 81420de:	2038      	movs	r0, #56	@ 0x38
 81420e0:	f7ff fb04 	bl	81416ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 81420e4:	2038      	movs	r0, #56	@ 0x38
 81420e6:	f7ff fae3 	bl	81416b0 <__NVIC_EnableIRQ>

}
 81420ea:	bf00      	nop
 81420ec:	3708      	adds	r7, #8
 81420ee:	46bd      	mov	sp, r7
 81420f0:	bd80      	pop	{r7, pc}
 81420f2:	bf00      	nop
 81420f4:	58024400 	.word	0x58024400

081420f8 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81420f8:	b480      	push	{r7}
 81420fa:	b083      	sub	sp, #12
 81420fc:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 81420fe:	4b0a      	ldr	r3, [pc, #40]	@ (8142128 <MX_MDMA_Init+0x30>)
 8142100:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8142104:	4a08      	ldr	r2, [pc, #32]	@ (8142128 <MX_MDMA_Init+0x30>)
 8142106:	f043 0301 	orr.w	r3, r3, #1
 814210a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 814210e:	4b06      	ldr	r3, [pc, #24]	@ (8142128 <MX_MDMA_Init+0x30>)
 8142110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8142114:	f003 0301 	and.w	r3, r3, #1
 8142118:	607b      	str	r3, [r7, #4]
 814211a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 814211c:	bf00      	nop
 814211e:	370c      	adds	r7, #12
 8142120:	46bd      	mov	sp, r7
 8142122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142126:	4770      	bx	lr
 8142128:	58024400 	.word	0x58024400

0814212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 814212c:	b580      	push	{r7, lr}
 814212e:	b086      	sub	sp, #24
 8142130:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8142132:	463b      	mov	r3, r7
 8142134:	2200      	movs	r2, #0
 8142136:	601a      	str	r2, [r3, #0]
 8142138:	605a      	str	r2, [r3, #4]
 814213a:	609a      	str	r2, [r3, #8]
 814213c:	60da      	str	r2, [r3, #12]
 814213e:	611a      	str	r2, [r3, #16]
 8142140:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8142142:	2004      	movs	r0, #4
 8142144:	f7ff fc62 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8142148:	2001      	movs	r0, #1
 814214a:	f7ff fc5f 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 814214e:	2002      	movs	r0, #2
 8142150:	f7ff fc5c 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8142154:	2008      	movs	r0, #8
 8142156:	f7ff fc59 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 814215a:	2040      	movs	r0, #64	@ 0x40
 814215c:	f7ff fc56 	bl	8141a0c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin);
 8142160:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8142164:	480b      	ldr	r0, [pc, #44]	@ (8142194 <MX_GPIO_Init+0x68>)
 8142166:	f7ff fc42 	bl	81419ee <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin;
 814216a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 814216e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8142170:	2301      	movs	r3, #1
 8142172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8142174:	2300      	movs	r3, #0
 8142176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8142178:	2300      	movs	r3, #0
 814217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 814217c:	2300      	movs	r3, #0
 814217e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8142180:	463b      	mov	r3, r7
 8142182:	4619      	mov	r1, r3
 8142184:	4803      	ldr	r0, [pc, #12]	@ (8142194 <MX_GPIO_Init+0x68>)
 8142186:	f006 fdc9 	bl	8148d1c <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 814218a:	bf00      	nop
 814218c:	3718      	adds	r7, #24
 814218e:	46bd      	mov	sp, r7
 8142190:	bd80      	pop	{r7, pc}
 8142192:	bf00      	nop
 8142194:	58020c00 	.word	0x58020c00

08142198 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8142198:	b580      	push	{r7, lr}
 814219a:	b082      	sub	sp, #8
 814219c:	af00      	add	r7, sp, #0
 814219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 81421a0:	687b      	ldr	r3, [r7, #4]
 81421a2:	681b      	ldr	r3, [r3, #0]
 81421a4:	4a04      	ldr	r2, [pc, #16]	@ (81421b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81421a6:	4293      	cmp	r3, r2
 81421a8:	d101      	bne.n	81421ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 81421aa:	f000 fbc5 	bl	8142938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81421ae:	bf00      	nop
 81421b0:	3708      	adds	r7, #8
 81421b2:	46bd      	mov	sp, r7
 81421b4:	bd80      	pop	{r7, pc}
 81421b6:	bf00      	nop
 81421b8:	40000800 	.word	0x40000800

081421bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81421bc:	b480      	push	{r7}
 81421be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81421c0:	b672      	cpsid	i
}
 81421c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81421c4:	bf00      	nop
 81421c6:	e7fd      	b.n	81421c4 <Error_Handler+0x8>

081421c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81421c8:	b480      	push	{r7}
 81421ca:	b083      	sub	sp, #12
 81421cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81421ce:	4b0a      	ldr	r3, [pc, #40]	@ (81421f8 <HAL_MspInit+0x30>)
 81421d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81421d4:	4a08      	ldr	r2, [pc, #32]	@ (81421f8 <HAL_MspInit+0x30>)
 81421d6:	f043 0302 	orr.w	r3, r3, #2
 81421da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81421de:	4b06      	ldr	r3, [pc, #24]	@ (81421f8 <HAL_MspInit+0x30>)
 81421e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81421e4:	f003 0302 	and.w	r3, r3, #2
 81421e8:	607b      	str	r3, [r7, #4]
 81421ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81421ec:	bf00      	nop
 81421ee:	370c      	adds	r7, #12
 81421f0:	46bd      	mov	sp, r7
 81421f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81421f6:	4770      	bx	lr
 81421f8:	58024400 	.word	0x58024400

081421fc <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 81421fc:	b580      	push	{r7, lr}
 81421fe:	b0be      	sub	sp, #248	@ 0xf8
 8142200:	af00      	add	r7, sp, #0
 8142202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8142204:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8142208:	2200      	movs	r2, #0
 814220a:	601a      	str	r2, [r3, #0]
 814220c:	605a      	str	r2, [r3, #4]
 814220e:	609a      	str	r2, [r3, #8]
 8142210:	60da      	str	r2, [r3, #12]
 8142212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8142214:	f107 0320 	add.w	r3, r7, #32
 8142218:	22c0      	movs	r2, #192	@ 0xc0
 814221a:	2100      	movs	r1, #0
 814221c:	4618      	mov	r0, r3
 814221e:	f00c fbab 	bl	814e978 <memset>
  if(hmmc->Instance==SDMMC2)
 8142222:	687b      	ldr	r3, [r7, #4]
 8142224:	681b      	ldr	r3, [r3, #0]
 8142226:	4a61      	ldr	r2, [pc, #388]	@ (81423ac <HAL_MMC_MspInit+0x1b0>)
 8142228:	4293      	cmp	r3, r2
 814222a:	f040 80bb 	bne.w	81423a4 <HAL_MMC_MspInit+0x1a8>

    /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 814222e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8142232:	f04f 0300 	mov.w	r3, #0
 8142236:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 814223a:	2300      	movs	r3, #0
 814223c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 814223e:	f107 0320 	add.w	r3, r7, #32
 8142242:	4618      	mov	r0, r3
 8142244:	f003 fcca 	bl	8145bdc <HAL_RCCEx_PeriphCLKConfig>
 8142248:	4603      	mov	r3, r0
 814224a:	2b00      	cmp	r3, #0
 814224c:	d001      	beq.n	8142252 <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 814224e:	f7ff ffb5 	bl	81421bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8142252:	4b57      	ldr	r3, [pc, #348]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142254:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8142258:	4a55      	ldr	r2, [pc, #340]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 814225a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 814225e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8142262:	4b53      	ldr	r3, [pc, #332]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8142268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 814226c:	61fb      	str	r3, [r7, #28]
 814226e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8142270:	4b4f      	ldr	r3, [pc, #316]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8142276:	4a4e      	ldr	r2, [pc, #312]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142278:	f043 0304 	orr.w	r3, r3, #4
 814227c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8142280:	4b4b      	ldr	r3, [pc, #300]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8142286:	f003 0304 	and.w	r3, r3, #4
 814228a:	61bb      	str	r3, [r7, #24]
 814228c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 814228e:	4b48      	ldr	r3, [pc, #288]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8142294:	4a46      	ldr	r2, [pc, #280]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 8142296:	f043 0301 	orr.w	r3, r3, #1
 814229a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 814229e:	4b44      	ldr	r3, [pc, #272]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81422a4:	f003 0301 	and.w	r3, r3, #1
 81422a8:	617b      	str	r3, [r7, #20]
 81422aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81422ac:	4b40      	ldr	r3, [pc, #256]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81422b2:	4a3f      	ldr	r2, [pc, #252]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422b4:	f043 0302 	orr.w	r3, r3, #2
 81422b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81422bc:	4b3c      	ldr	r3, [pc, #240]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81422c2:	f003 0302 	and.w	r3, r3, #2
 81422c6:	613b      	str	r3, [r7, #16]
 81422c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 81422ca:	4b39      	ldr	r3, [pc, #228]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81422d0:	4a37      	ldr	r2, [pc, #220]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81422d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81422da:	4b35      	ldr	r3, [pc, #212]	@ (81423b0 <HAL_MMC_MspInit+0x1b4>)
 81422dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81422e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81422e4:	60fb      	str	r3, [r7, #12]
 81422e6:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 81422e8:	2302      	movs	r3, #2
 81422ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81422ee:	2302      	movs	r3, #2
 81422f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81422f4:	2300      	movs	r3, #0
 81422f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81422fa:	2303      	movs	r3, #3
 81422fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8142300:	2309      	movs	r3, #9
 8142302:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8142306:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 814230a:	4619      	mov	r1, r3
 814230c:	4829      	ldr	r0, [pc, #164]	@ (81423b4 <HAL_MMC_MspInit+0x1b8>)
 814230e:	f000 fc37 	bl	8142b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8142312:	2301      	movs	r3, #1
 8142314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8142318:	2302      	movs	r3, #2
 814231a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 814231e:	2300      	movs	r3, #0
 8142320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8142324:	2303      	movs	r3, #3
 8142326:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 814232a:	2309      	movs	r3, #9
 814232c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8142330:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8142334:	4619      	mov	r1, r3
 8142336:	4820      	ldr	r0, [pc, #128]	@ (81423b8 <HAL_MMC_MspInit+0x1bc>)
 8142338:	f000 fc22 	bl	8142b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 814233c:	f24c 0310 	movw	r3, #49168	@ 0xc010
 8142340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8142344:	2302      	movs	r3, #2
 8142346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 814234a:	2300      	movs	r3, #0
 814234c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8142350:	2303      	movs	r3, #3
 8142352:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8142356:	2309      	movs	r3, #9
 8142358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 814235c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8142360:	4619      	mov	r1, r3
 8142362:	4816      	ldr	r0, [pc, #88]	@ (81423bc <HAL_MMC_MspInit+0x1c0>)
 8142364:	f000 fc0c 	bl	8142b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8142368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 814236c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8142370:	2302      	movs	r3, #2
 8142372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8142376:	2300      	movs	r3, #0
 8142378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 814237c:	2303      	movs	r3, #3
 814237e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDIO2;
 8142382:	230a      	movs	r3, #10
 8142384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8142388:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 814238c:	4619      	mov	r1, r3
 814238e:	480c      	ldr	r0, [pc, #48]	@ (81423c0 <HAL_MMC_MspInit+0x1c4>)
 8142390:	f000 fbf6 	bl	8142b80 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8142394:	2200      	movs	r2, #0
 8142396:	2100      	movs	r1, #0
 8142398:	207c      	movs	r0, #124	@ 0x7c
 814239a:	f000 fbc9 	bl	8142b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 814239e:	207c      	movs	r0, #124	@ 0x7c
 81423a0:	f000 fbe0 	bl	8142b64 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 81423a4:	bf00      	nop
 81423a6:	37f8      	adds	r7, #248	@ 0xf8
 81423a8:	46bd      	mov	sp, r7
 81423aa:	bd80      	pop	{r7, pc}
 81423ac:	48022400 	.word	0x48022400
 81423b0:	58024400 	.word	0x58024400
 81423b4:	58020800 	.word	0x58020800
 81423b8:	58020000 	.word	0x58020000
 81423bc:	58020400 	.word	0x58020400
 81423c0:	58021800 	.word	0x58021800

081423c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81423c4:	b580      	push	{r7, lr}
 81423c6:	b090      	sub	sp, #64	@ 0x40
 81423c8:	af00      	add	r7, sp, #0
 81423ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81423cc:	687b      	ldr	r3, [r7, #4]
 81423ce:	2b0f      	cmp	r3, #15
 81423d0:	d827      	bhi.n	8142422 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 81423d2:	2200      	movs	r2, #0
 81423d4:	6879      	ldr	r1, [r7, #4]
 81423d6:	201e      	movs	r0, #30
 81423d8:	f000 fbaa 	bl	8142b30 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 81423dc:	201e      	movs	r0, #30
 81423de:	f000 fbc1 	bl	8142b64 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81423e2:	4a29      	ldr	r2, [pc, #164]	@ (8142488 <HAL_InitTick+0xc4>)
 81423e4:	687b      	ldr	r3, [r7, #4]
 81423e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 81423e8:	4b28      	ldr	r3, [pc, #160]	@ (814248c <HAL_InitTick+0xc8>)
 81423ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81423ee:	4a27      	ldr	r2, [pc, #156]	@ (814248c <HAL_InitTick+0xc8>)
 81423f0:	f043 0304 	orr.w	r3, r3, #4
 81423f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81423f8:	4b24      	ldr	r3, [pc, #144]	@ (814248c <HAL_InitTick+0xc8>)
 81423fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81423fe:	f003 0304 	and.w	r3, r3, #4
 8142402:	60fb      	str	r3, [r7, #12]
 8142404:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8142406:	f107 0210 	add.w	r2, r7, #16
 814240a:	f107 0314 	add.w	r3, r7, #20
 814240e:	4611      	mov	r1, r2
 8142410:	4618      	mov	r0, r3
 8142412:	f003 fba1 	bl	8145b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8142416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8142418:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 814241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814241c:	2b00      	cmp	r3, #0
 814241e:	d106      	bne.n	814242e <HAL_InitTick+0x6a>
 8142420:	e001      	b.n	8142426 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8142422:	2301      	movs	r3, #1
 8142424:	e02b      	b.n	814247e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8142426:	f003 fb81 	bl	8145b2c <HAL_RCC_GetPCLK1Freq>
 814242a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 814242c:	e004      	b.n	8142438 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 814242e:	f003 fb7d 	bl	8145b2c <HAL_RCC_GetPCLK1Freq>
 8142432:	4603      	mov	r3, r0
 8142434:	005b      	lsls	r3, r3, #1
 8142436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8142438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 814243a:	4a15      	ldr	r2, [pc, #84]	@ (8142490 <HAL_InitTick+0xcc>)
 814243c:	fba2 2303 	umull	r2, r3, r2, r3
 8142440:	0c9b      	lsrs	r3, r3, #18
 8142442:	3b01      	subs	r3, #1
 8142444:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8142446:	4b13      	ldr	r3, [pc, #76]	@ (8142494 <HAL_InitTick+0xd0>)
 8142448:	4a13      	ldr	r2, [pc, #76]	@ (8142498 <HAL_InitTick+0xd4>)
 814244a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 814244c:	4b11      	ldr	r3, [pc, #68]	@ (8142494 <HAL_InitTick+0xd0>)
 814244e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8142452:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8142454:	4a0f      	ldr	r2, [pc, #60]	@ (8142494 <HAL_InitTick+0xd0>)
 8142456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8142458:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 814245a:	4b0e      	ldr	r3, [pc, #56]	@ (8142494 <HAL_InitTick+0xd0>)
 814245c:	2200      	movs	r2, #0
 814245e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8142460:	4b0c      	ldr	r3, [pc, #48]	@ (8142494 <HAL_InitTick+0xd0>)
 8142462:	2200      	movs	r2, #0
 8142464:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8142466:	480b      	ldr	r0, [pc, #44]	@ (8142494 <HAL_InitTick+0xd0>)
 8142468:	f006 f8b6 	bl	81485d8 <HAL_TIM_Base_Init>
 814246c:	4603      	mov	r3, r0
 814246e:	2b00      	cmp	r3, #0
 8142470:	d104      	bne.n	814247c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8142472:	4808      	ldr	r0, [pc, #32]	@ (8142494 <HAL_InitTick+0xd0>)
 8142474:	f006 f912 	bl	814869c <HAL_TIM_Base_Start_IT>
 8142478:	4603      	mov	r3, r0
 814247a:	e000      	b.n	814247e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 814247c:	2301      	movs	r3, #1
}
 814247e:	4618      	mov	r0, r3
 8142480:	3740      	adds	r7, #64	@ 0x40
 8142482:	46bd      	mov	sp, r7
 8142484:	bd80      	pop	{r7, pc}
 8142486:	bf00      	nop
 8142488:	100320f8 	.word	0x100320f8
 814248c:	58024400 	.word	0x58024400
 8142490:	431bde83 	.word	0x431bde83
 8142494:	10034f44 	.word	0x10034f44
 8142498:	40000800 	.word	0x40000800

0814249c <LL_USART_IsActiveFlag_IDLE>:
{
 814249c:	b480      	push	{r7}
 814249e:	b083      	sub	sp, #12
 81424a0:	af00      	add	r7, sp, #0
 81424a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 81424a4:	687b      	ldr	r3, [r7, #4]
 81424a6:	69db      	ldr	r3, [r3, #28]
 81424a8:	f003 0310 	and.w	r3, r3, #16
 81424ac:	2b10      	cmp	r3, #16
 81424ae:	d101      	bne.n	81424b4 <LL_USART_IsActiveFlag_IDLE+0x18>
 81424b0:	2301      	movs	r3, #1
 81424b2:	e000      	b.n	81424b6 <LL_USART_IsActiveFlag_IDLE+0x1a>
 81424b4:	2300      	movs	r3, #0
}
 81424b6:	4618      	mov	r0, r3
 81424b8:	370c      	adds	r7, #12
 81424ba:	46bd      	mov	sp, r7
 81424bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81424c0:	4770      	bx	lr

081424c2 <LL_USART_ClearFlag_IDLE>:
{
 81424c2:	b480      	push	{r7}
 81424c4:	b083      	sub	sp, #12
 81424c6:	af00      	add	r7, sp, #0
 81424c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 81424ca:	687b      	ldr	r3, [r7, #4]
 81424cc:	2210      	movs	r2, #16
 81424ce:	621a      	str	r2, [r3, #32]
}
 81424d0:	bf00      	nop
 81424d2:	370c      	adds	r7, #12
 81424d4:	46bd      	mov	sp, r7
 81424d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81424da:	4770      	bx	lr

081424dc <LL_USART_IsEnabledIT_IDLE>:
{
 81424dc:	b480      	push	{r7}
 81424de:	b083      	sub	sp, #12
 81424e0:	af00      	add	r7, sp, #0
 81424e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 81424e4:	687b      	ldr	r3, [r7, #4]
 81424e6:	681b      	ldr	r3, [r3, #0]
 81424e8:	f003 0310 	and.w	r3, r3, #16
 81424ec:	2b10      	cmp	r3, #16
 81424ee:	d101      	bne.n	81424f4 <LL_USART_IsEnabledIT_IDLE+0x18>
 81424f0:	2301      	movs	r3, #1
 81424f2:	e000      	b.n	81424f6 <LL_USART_IsEnabledIT_IDLE+0x1a>
 81424f4:	2300      	movs	r3, #0
}
 81424f6:	4618      	mov	r0, r3
 81424f8:	370c      	adds	r7, #12
 81424fa:	46bd      	mov	sp, r7
 81424fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142500:	4770      	bx	lr
	...

08142504 <LL_DMA_EnableStream>:
{
 8142504:	b480      	push	{r7}
 8142506:	b085      	sub	sp, #20
 8142508:	af00      	add	r7, sp, #0
 814250a:	6078      	str	r0, [r7, #4]
 814250c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 814250e:	687b      	ldr	r3, [r7, #4]
 8142510:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8142512:	4a0c      	ldr	r2, [pc, #48]	@ (8142544 <LL_DMA_EnableStream+0x40>)
 8142514:	683b      	ldr	r3, [r7, #0]
 8142516:	4413      	add	r3, r2
 8142518:	781b      	ldrb	r3, [r3, #0]
 814251a:	461a      	mov	r2, r3
 814251c:	68fb      	ldr	r3, [r7, #12]
 814251e:	4413      	add	r3, r2
 8142520:	681b      	ldr	r3, [r3, #0]
 8142522:	4908      	ldr	r1, [pc, #32]	@ (8142544 <LL_DMA_EnableStream+0x40>)
 8142524:	683a      	ldr	r2, [r7, #0]
 8142526:	440a      	add	r2, r1
 8142528:	7812      	ldrb	r2, [r2, #0]
 814252a:	4611      	mov	r1, r2
 814252c:	68fa      	ldr	r2, [r7, #12]
 814252e:	440a      	add	r2, r1
 8142530:	f043 0301 	orr.w	r3, r3, #1
 8142534:	6013      	str	r3, [r2, #0]
}
 8142536:	bf00      	nop
 8142538:	3714      	adds	r7, #20
 814253a:	46bd      	mov	sp, r7
 814253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142540:	4770      	bx	lr
 8142542:	bf00      	nop
 8142544:	0814ead0 	.word	0x0814ead0

08142548 <LL_DMA_IsActiveFlag_HT0>:
{
 8142548:	b480      	push	{r7}
 814254a:	b083      	sub	sp, #12
 814254c:	af00      	add	r7, sp, #0
 814254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8142550:	687b      	ldr	r3, [r7, #4]
 8142552:	681b      	ldr	r3, [r3, #0]
 8142554:	f003 0310 	and.w	r3, r3, #16
 8142558:	2b10      	cmp	r3, #16
 814255a:	d101      	bne.n	8142560 <LL_DMA_IsActiveFlag_HT0+0x18>
 814255c:	2301      	movs	r3, #1
 814255e:	e000      	b.n	8142562 <LL_DMA_IsActiveFlag_HT0+0x1a>
 8142560:	2300      	movs	r3, #0
}
 8142562:	4618      	mov	r0, r3
 8142564:	370c      	adds	r7, #12
 8142566:	46bd      	mov	sp, r7
 8142568:	f85d 7b04 	ldr.w	r7, [sp], #4
 814256c:	4770      	bx	lr

0814256e <LL_DMA_IsActiveFlag_TC0>:
{
 814256e:	b480      	push	{r7}
 8142570:	b083      	sub	sp, #12
 8142572:	af00      	add	r7, sp, #0
 8142574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8142576:	687b      	ldr	r3, [r7, #4]
 8142578:	681b      	ldr	r3, [r3, #0]
 814257a:	f003 0320 	and.w	r3, r3, #32
 814257e:	2b20      	cmp	r3, #32
 8142580:	d101      	bne.n	8142586 <LL_DMA_IsActiveFlag_TC0+0x18>
 8142582:	2301      	movs	r3, #1
 8142584:	e000      	b.n	8142588 <LL_DMA_IsActiveFlag_TC0+0x1a>
 8142586:	2300      	movs	r3, #0
}
 8142588:	4618      	mov	r0, r3
 814258a:	370c      	adds	r7, #12
 814258c:	46bd      	mov	sp, r7
 814258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142592:	4770      	bx	lr

08142594 <LL_DMA_IsActiveFlag_TE0>:
{
 8142594:	b480      	push	{r7}
 8142596:	b083      	sub	sp, #12
 8142598:	af00      	add	r7, sp, #0
 814259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 814259c:	687b      	ldr	r3, [r7, #4]
 814259e:	681b      	ldr	r3, [r3, #0]
 81425a0:	f003 0308 	and.w	r3, r3, #8
 81425a4:	2b08      	cmp	r3, #8
 81425a6:	d101      	bne.n	81425ac <LL_DMA_IsActiveFlag_TE0+0x18>
 81425a8:	2301      	movs	r3, #1
 81425aa:	e000      	b.n	81425ae <LL_DMA_IsActiveFlag_TE0+0x1a>
 81425ac:	2300      	movs	r3, #0
}
 81425ae:	4618      	mov	r0, r3
 81425b0:	370c      	adds	r7, #12
 81425b2:	46bd      	mov	sp, r7
 81425b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81425b8:	4770      	bx	lr

081425ba <LL_DMA_ClearFlag_HT0>:
{
 81425ba:	b480      	push	{r7}
 81425bc:	b083      	sub	sp, #12
 81425be:	af00      	add	r7, sp, #0
 81425c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 81425c2:	687b      	ldr	r3, [r7, #4]
 81425c4:	2210      	movs	r2, #16
 81425c6:	609a      	str	r2, [r3, #8]
}
 81425c8:	bf00      	nop
 81425ca:	370c      	adds	r7, #12
 81425cc:	46bd      	mov	sp, r7
 81425ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81425d2:	4770      	bx	lr

081425d4 <LL_DMA_ClearFlag_TC0>:
{
 81425d4:	b480      	push	{r7}
 81425d6:	b083      	sub	sp, #12
 81425d8:	af00      	add	r7, sp, #0
 81425da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 81425dc:	687b      	ldr	r3, [r7, #4]
 81425de:	2220      	movs	r2, #32
 81425e0:	609a      	str	r2, [r3, #8]
}
 81425e2:	bf00      	nop
 81425e4:	370c      	adds	r7, #12
 81425e6:	46bd      	mov	sp, r7
 81425e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81425ec:	4770      	bx	lr

081425ee <LL_DMA_ClearFlag_TE0>:
{
 81425ee:	b480      	push	{r7}
 81425f0:	b083      	sub	sp, #12
 81425f2:	af00      	add	r7, sp, #0
 81425f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 81425f6:	687b      	ldr	r3, [r7, #4]
 81425f8:	2208      	movs	r2, #8
 81425fa:	609a      	str	r2, [r3, #8]
}
 81425fc:	bf00      	nop
 81425fe:	370c      	adds	r7, #12
 8142600:	46bd      	mov	sp, r7
 8142602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142606:	4770      	bx	lr

08142608 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8142608:	b480      	push	{r7}
 814260a:	b085      	sub	sp, #20
 814260c:	af00      	add	r7, sp, #0
 814260e:	6078      	str	r0, [r7, #4]
 8142610:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8142612:	687b      	ldr	r3, [r7, #4]
 8142614:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 8142616:	4a0a      	ldr	r2, [pc, #40]	@ (8142640 <LL_DMA_IsEnabledIT_HT+0x38>)
 8142618:	683b      	ldr	r3, [r7, #0]
 814261a:	4413      	add	r3, r2
 814261c:	781b      	ldrb	r3, [r3, #0]
 814261e:	461a      	mov	r2, r3
 8142620:	68fb      	ldr	r3, [r7, #12]
 8142622:	4413      	add	r3, r2
 8142624:	681b      	ldr	r3, [r3, #0]
 8142626:	f003 0308 	and.w	r3, r3, #8
 814262a:	2b08      	cmp	r3, #8
 814262c:	d101      	bne.n	8142632 <LL_DMA_IsEnabledIT_HT+0x2a>
 814262e:	2301      	movs	r3, #1
 8142630:	e000      	b.n	8142634 <LL_DMA_IsEnabledIT_HT+0x2c>
 8142632:	2300      	movs	r3, #0
}
 8142634:	4618      	mov	r0, r3
 8142636:	3714      	adds	r7, #20
 8142638:	46bd      	mov	sp, r7
 814263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814263e:	4770      	bx	lr
 8142640:	0814ead0 	.word	0x0814ead0

08142644 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8142644:	b480      	push	{r7}
 8142646:	b085      	sub	sp, #20
 8142648:	af00      	add	r7, sp, #0
 814264a:	6078      	str	r0, [r7, #4]
 814264c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 814264e:	687b      	ldr	r3, [r7, #4]
 8142650:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 8142652:	4a0a      	ldr	r2, [pc, #40]	@ (814267c <LL_DMA_IsEnabledIT_TE+0x38>)
 8142654:	683b      	ldr	r3, [r7, #0]
 8142656:	4413      	add	r3, r2
 8142658:	781b      	ldrb	r3, [r3, #0]
 814265a:	461a      	mov	r2, r3
 814265c:	68fb      	ldr	r3, [r7, #12]
 814265e:	4413      	add	r3, r2
 8142660:	681b      	ldr	r3, [r3, #0]
 8142662:	f003 0304 	and.w	r3, r3, #4
 8142666:	2b04      	cmp	r3, #4
 8142668:	d101      	bne.n	814266e <LL_DMA_IsEnabledIT_TE+0x2a>
 814266a:	2301      	movs	r3, #1
 814266c:	e000      	b.n	8142670 <LL_DMA_IsEnabledIT_TE+0x2c>
 814266e:	2300      	movs	r3, #0
}
 8142670:	4618      	mov	r0, r3
 8142672:	3714      	adds	r7, #20
 8142674:	46bd      	mov	sp, r7
 8142676:	f85d 7b04 	ldr.w	r7, [sp], #4
 814267a:	4770      	bx	lr
 814267c:	0814ead0 	.word	0x0814ead0

08142680 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8142680:	b480      	push	{r7}
 8142682:	b085      	sub	sp, #20
 8142684:	af00      	add	r7, sp, #0
 8142686:	6078      	str	r0, [r7, #4]
 8142688:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 814268a:	687b      	ldr	r3, [r7, #4]
 814268c:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 814268e:	4a0a      	ldr	r2, [pc, #40]	@ (81426b8 <LL_DMA_IsEnabledIT_TC+0x38>)
 8142690:	683b      	ldr	r3, [r7, #0]
 8142692:	4413      	add	r3, r2
 8142694:	781b      	ldrb	r3, [r3, #0]
 8142696:	461a      	mov	r2, r3
 8142698:	68fb      	ldr	r3, [r7, #12]
 814269a:	4413      	add	r3, r2
 814269c:	681b      	ldr	r3, [r3, #0]
 814269e:	f003 0310 	and.w	r3, r3, #16
 81426a2:	2b10      	cmp	r3, #16
 81426a4:	d101      	bne.n	81426aa <LL_DMA_IsEnabledIT_TC+0x2a>
 81426a6:	2301      	movs	r3, #1
 81426a8:	e000      	b.n	81426ac <LL_DMA_IsEnabledIT_TC+0x2c>
 81426aa:	2300      	movs	r3, #0
}
 81426ac:	4618      	mov	r0, r3
 81426ae:	3714      	adds	r7, #20
 81426b0:	46bd      	mov	sp, r7
 81426b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81426b6:	4770      	bx	lr
 81426b8:	0814ead0 	.word	0x0814ead0

081426bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81426bc:	b480      	push	{r7}
 81426be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81426c0:	bf00      	nop
 81426c2:	e7fd      	b.n	81426c0 <NMI_Handler+0x4>

081426c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81426c4:	b480      	push	{r7}
 81426c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81426c8:	bf00      	nop
 81426ca:	e7fd      	b.n	81426c8 <HardFault_Handler+0x4>

081426cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81426cc:	b480      	push	{r7}
 81426ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81426d0:	bf00      	nop
 81426d2:	e7fd      	b.n	81426d0 <MemManage_Handler+0x4>

081426d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81426d4:	b480      	push	{r7}
 81426d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81426d8:	bf00      	nop
 81426da:	e7fd      	b.n	81426d8 <BusFault_Handler+0x4>

081426dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81426dc:	b480      	push	{r7}
 81426de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81426e0:	bf00      	nop
 81426e2:	e7fd      	b.n	81426e0 <UsageFault_Handler+0x4>

081426e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81426e4:	b480      	push	{r7}
 81426e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81426e8:	bf00      	nop
 81426ea:	46bd      	mov	sp, r7
 81426ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81426f0:	4770      	bx	lr

081426f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81426f2:	b480      	push	{r7}
 81426f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81426f6:	bf00      	nop
 81426f8:	46bd      	mov	sp, r7
 81426fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81426fe:	4770      	bx	lr

08142700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8142700:	b480      	push	{r7}
 8142702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8142704:	bf00      	nop
 8142706:	46bd      	mov	sp, r7
 8142708:	f85d 7b04 	ldr.w	r7, [sp], #4
 814270c:	4770      	bx	lr

0814270e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 814270e:	b480      	push	{r7}
 8142710:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8142712:	bf00      	nop
 8142714:	46bd      	mov	sp, r7
 8142716:	f85d 7b04 	ldr.w	r7, [sp], #4
 814271a:	4770      	bx	lr

0814271c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 814271c:	b580      	push	{r7, lr}
 814271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  TickTimer_IRQHandler();
 8142720:	f7fe ff70 	bl	8141604 <TickTimer_IRQHandler>
  SCH_RunSystemTickTimer();
 8142724:	f7fd fe7a 	bl	814041c <SCH_RunSystemTickTimer>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8142728:	bf00      	nop
 814272a:	bd80      	pop	{r7, pc}

0814272c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 814272c:	b580      	push	{r7, lr}
 814272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8142730:	4802      	ldr	r0, [pc, #8]	@ (814273c <TIM4_IRQHandler+0x10>)
 8142732:	f006 f82b 	bl	814878c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8142736:	bf00      	nop
 8142738:	bd80      	pop	{r7, pc}
 814273a:	bf00      	nop
 814273c:	10034f44 	.word	0x10034f44

08142740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8142740:	b580      	push	{r7, lr}
 8142742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA2))
 8142744:	2100      	movs	r1, #0
 8142746:	481d      	ldr	r0, [pc, #116]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 8142748:	f7ff ff5e 	bl	8142608 <LL_DMA_IsEnabledIT_HT>
 814274c:	4603      	mov	r3, r0
 814274e:	2b00      	cmp	r3, #0
 8142750:	d00b      	beq.n	814276a <DMA2_Stream0_IRQHandler+0x2a>
 8142752:	481a      	ldr	r0, [pc, #104]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 8142754:	f7ff fef8 	bl	8142548 <LL_DMA_IsActiveFlag_HT0>
 8142758:	4603      	mov	r3, r0
 814275a:	2b00      	cmp	r3, #0
 814275c:	d005      	beq.n	814276a <DMA2_Stream0_IRQHandler+0x2a>
  {
	  LL_DMA_ClearFlag_HT0(DMA2);
 814275e:	4817      	ldr	r0, [pc, #92]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 8142760:	f7ff ff2b 	bl	81425ba <LL_DMA_ClearFlag_HT0>
	  UART_DMA_Rx_Check(USART6);
 8142764:	4816      	ldr	r0, [pc, #88]	@ (81427c0 <DMA2_Stream0_IRQHandler+0x80>)
 8142766:	f7fe fcaf 	bl	81410c8 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA2))
 814276a:	2100      	movs	r1, #0
 814276c:	4813      	ldr	r0, [pc, #76]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 814276e:	f7ff ff87 	bl	8142680 <LL_DMA_IsEnabledIT_TC>
 8142772:	4603      	mov	r3, r0
 8142774:	2b00      	cmp	r3, #0
 8142776:	d00b      	beq.n	8142790 <DMA2_Stream0_IRQHandler+0x50>
 8142778:	4810      	ldr	r0, [pc, #64]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 814277a:	f7ff fef8 	bl	814256e <LL_DMA_IsActiveFlag_TC0>
 814277e:	4603      	mov	r3, r0
 8142780:	2b00      	cmp	r3, #0
 8142782:	d005      	beq.n	8142790 <DMA2_Stream0_IRQHandler+0x50>
  {
	  LL_DMA_ClearFlag_TC0(DMA2);
 8142784:	480d      	ldr	r0, [pc, #52]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 8142786:	f7ff ff25 	bl	81425d4 <LL_DMA_ClearFlag_TC0>
	  UART_DMA_Rx_Check(USART6);
 814278a:	480d      	ldr	r0, [pc, #52]	@ (81427c0 <DMA2_Stream0_IRQHandler+0x80>)
 814278c:	f7fe fc9c 	bl	81410c8 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA2))
 8142790:	2100      	movs	r1, #0
 8142792:	480a      	ldr	r0, [pc, #40]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 8142794:	f7ff ff56 	bl	8142644 <LL_DMA_IsEnabledIT_TE>
 8142798:	4603      	mov	r3, r0
 814279a:	2b00      	cmp	r3, #0
 814279c:	d00c      	beq.n	81427b8 <DMA2_Stream0_IRQHandler+0x78>
 814279e:	4807      	ldr	r0, [pc, #28]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 81427a0:	f7ff fef8 	bl	8142594 <LL_DMA_IsActiveFlag_TE0>
 81427a4:	4603      	mov	r3, r0
 81427a6:	2b00      	cmp	r3, #0
 81427a8:	d006      	beq.n	81427b8 <DMA2_Stream0_IRQHandler+0x78>
  {
	  LL_DMA_ClearFlag_TE0(DMA2);
 81427aa:	4804      	ldr	r0, [pc, #16]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 81427ac:	f7ff ff1f 	bl	81425ee <LL_DMA_ClearFlag_TE0>
	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 81427b0:	2100      	movs	r1, #0
 81427b2:	4802      	ldr	r0, [pc, #8]	@ (81427bc <DMA2_Stream0_IRQHandler+0x7c>)
 81427b4:	f7ff fea6 	bl	8142504 <LL_DMA_EnableStream>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81427b8:	bf00      	nop
 81427ba:	bd80      	pop	{r7, pc}
 81427bc:	40020400 	.word	0x40020400
 81427c0:	40011400 	.word	0x40011400

081427c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 81427c4:	b580      	push	{r7, lr}
 81427c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART6) && LL_USART_IsActiveFlag_IDLE(USART6))
 81427c8:	480b      	ldr	r0, [pc, #44]	@ (81427f8 <USART6_IRQHandler+0x34>)
 81427ca:	f7ff fe87 	bl	81424dc <LL_USART_IsEnabledIT_IDLE>
 81427ce:	4603      	mov	r3, r0
 81427d0:	2b00      	cmp	r3, #0
 81427d2:	d00b      	beq.n	81427ec <USART6_IRQHandler+0x28>
 81427d4:	4808      	ldr	r0, [pc, #32]	@ (81427f8 <USART6_IRQHandler+0x34>)
 81427d6:	f7ff fe61 	bl	814249c <LL_USART_IsActiveFlag_IDLE>
 81427da:	4603      	mov	r3, r0
 81427dc:	2b00      	cmp	r3, #0
 81427de:	d005      	beq.n	81427ec <USART6_IRQHandler+0x28>
  {
	  LL_USART_ClearFlag_IDLE(USART6);
 81427e0:	4805      	ldr	r0, [pc, #20]	@ (81427f8 <USART6_IRQHandler+0x34>)
 81427e2:	f7ff fe6e 	bl	81424c2 <LL_USART_ClearFlag_IDLE>
	  UART_DMA_Rx_Check(USART6);
 81427e6:	4804      	ldr	r0, [pc, #16]	@ (81427f8 <USART6_IRQHandler+0x34>)
 81427e8:	f7fe fc6e 	bl	81410c8 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
  UART_Driver_TX_ISR(USART6);
 81427ec:	4802      	ldr	r0, [pc, #8]	@ (81427f8 <USART6_IRQHandler+0x34>)
 81427ee:	f7fe fc3b 	bl	8141068 <UART_Driver_TX_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 81427f2:	bf00      	nop
 81427f4:	bd80      	pop	{r7, pc}
 81427f6:	bf00      	nop
 81427f8:	40011400 	.word	0x40011400

081427fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81427fc:	b580      	push	{r7, lr}
 81427fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8142800:	4802      	ldr	r0, [pc, #8]	@ (814280c <OTG_FS_IRQHandler+0x10>)
 8142802:	f001 fe78 	bl	81444f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8142806:	bf00      	nop
 8142808:	bd80      	pop	{r7, pc}
 814280a:	bf00      	nop
 814280c:	10036478 	.word	0x10036478

08142810 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8142810:	b580      	push	{r7, lr}
 8142812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc2);
 8142814:	4802      	ldr	r0, [pc, #8]	@ (8142820 <SDMMC2_IRQHandler+0x10>)
 8142816:	f000 fc59 	bl	81430cc <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 814281a:	bf00      	nop
 814281c:	bd80      	pop	{r7, pc}
 814281e:	bf00      	nop
 8142820:	10034ccc 	.word	0x10034ccc

08142824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8142824:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8142860 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8142828:	f7fe ff1a 	bl	8141660 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 814282c:	f7fe ff00 	bl	8141630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8142830:	480c      	ldr	r0, [pc, #48]	@ (8142864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8142832:	490d      	ldr	r1, [pc, #52]	@ (8142868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8142834:	4a0d      	ldr	r2, [pc, #52]	@ (814286c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8142836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8142838:	e002      	b.n	8142840 <LoopCopyDataInit>

0814283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 814283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 814283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 814283e:	3304      	adds	r3, #4

08142840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8142840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8142842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8142844:	d3f9      	bcc.n	814283a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8142846:	4a0a      	ldr	r2, [pc, #40]	@ (8142870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8142848:	4c0a      	ldr	r4, [pc, #40]	@ (8142874 <LoopFillZerobss+0x22>)
  movs r3, #0
 814284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 814284c:	e001      	b.n	8142852 <LoopFillZerobss>

0814284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 814284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8142850:	3204      	adds	r2, #4

08142852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8142852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8142854:	d3fb      	bcc.n	814284e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8142856:	f00c f8ab 	bl	814e9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 814285a:	f7ff fa89 	bl	8141d70 <main>
  bx  lr
 814285e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8142860:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8142864:	10032000 	.word	0x10032000
  ldr r1, =_edata
 8142868:	100321fc 	.word	0x100321fc
  ldr r2, =_sidata
 814286c:	0814eb20 	.word	0x0814eb20
  ldr r2, =_sbss
 8142870:	100321fc 	.word	0x100321fc
  ldr r4, =_ebss
 8142874:	10036b7c 	.word	0x10036b7c

08142878 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8142878:	e7fe      	b.n	8142878 <ADC3_IRQHandler>
	...

0814287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 814287c:	b580      	push	{r7, lr}
 814287e:	b082      	sub	sp, #8
 8142880:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8142882:	4b28      	ldr	r3, [pc, #160]	@ (8142924 <HAL_Init+0xa8>)
 8142884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8142888:	4a26      	ldr	r2, [pc, #152]	@ (8142924 <HAL_Init+0xa8>)
 814288a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 814288e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8142892:	4b24      	ldr	r3, [pc, #144]	@ (8142924 <HAL_Init+0xa8>)
 8142894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8142898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 814289c:	603b      	str	r3, [r7, #0]
 814289e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08140000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81428a0:	4b21      	ldr	r3, [pc, #132]	@ (8142928 <HAL_Init+0xac>)
 81428a2:	681b      	ldr	r3, [r3, #0]
 81428a4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81428a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81428ac:	4a1e      	ldr	r2, [pc, #120]	@ (8142928 <HAL_Init+0xac>)
 81428ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81428b2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81428b4:	4b1c      	ldr	r3, [pc, #112]	@ (8142928 <HAL_Init+0xac>)
 81428b6:	681b      	ldr	r3, [r3, #0]
 81428b8:	4a1b      	ldr	r2, [pc, #108]	@ (8142928 <HAL_Init+0xac>)
 81428ba:	f043 0301 	orr.w	r3, r3, #1
 81428be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81428c0:	2003      	movs	r0, #3
 81428c2:	f000 f92a 	bl	8142b1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81428c6:	f002 ff85 	bl	81457d4 <HAL_RCC_GetSysClockFreq>
 81428ca:	4602      	mov	r2, r0
 81428cc:	4b15      	ldr	r3, [pc, #84]	@ (8142924 <HAL_Init+0xa8>)
 81428ce:	699b      	ldr	r3, [r3, #24]
 81428d0:	0a1b      	lsrs	r3, r3, #8
 81428d2:	f003 030f 	and.w	r3, r3, #15
 81428d6:	4915      	ldr	r1, [pc, #84]	@ (814292c <HAL_Init+0xb0>)
 81428d8:	5ccb      	ldrb	r3, [r1, r3]
 81428da:	f003 031f 	and.w	r3, r3, #31
 81428de:	fa22 f303 	lsr.w	r3, r2, r3
 81428e2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81428e4:	4b0f      	ldr	r3, [pc, #60]	@ (8142924 <HAL_Init+0xa8>)
 81428e6:	699b      	ldr	r3, [r3, #24]
 81428e8:	f003 030f 	and.w	r3, r3, #15
 81428ec:	4a0f      	ldr	r2, [pc, #60]	@ (814292c <HAL_Init+0xb0>)
 81428ee:	5cd3      	ldrb	r3, [r2, r3]
 81428f0:	f003 031f 	and.w	r3, r3, #31
 81428f4:	687a      	ldr	r2, [r7, #4]
 81428f6:	fa22 f303 	lsr.w	r3, r2, r3
 81428fa:	4a0d      	ldr	r2, [pc, #52]	@ (8142930 <HAL_Init+0xb4>)
 81428fc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81428fe:	4b0c      	ldr	r3, [pc, #48]	@ (8142930 <HAL_Init+0xb4>)
 8142900:	681b      	ldr	r3, [r3, #0]
 8142902:	4a0c      	ldr	r2, [pc, #48]	@ (8142934 <HAL_Init+0xb8>)
 8142904:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8142906:	200f      	movs	r0, #15
 8142908:	f7ff fd5c 	bl	81423c4 <HAL_InitTick>
 814290c:	4603      	mov	r3, r0
 814290e:	2b00      	cmp	r3, #0
 8142910:	d001      	beq.n	8142916 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8142912:	2301      	movs	r3, #1
 8142914:	e002      	b.n	814291c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8142916:	f7ff fc57 	bl	81421c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 814291a:	2300      	movs	r3, #0
}
 814291c:	4618      	mov	r0, r3
 814291e:	3708      	adds	r7, #8
 8142920:	46bd      	mov	sp, r7
 8142922:	bd80      	pop	{r7, pc}
 8142924:	58024400 	.word	0x58024400
 8142928:	40024400 	.word	0x40024400
 814292c:	0814eab8 	.word	0x0814eab8
 8142930:	100320f4 	.word	0x100320f4
 8142934:	100320f0 	.word	0x100320f0

08142938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8142938:	b480      	push	{r7}
 814293a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 814293c:	4b06      	ldr	r3, [pc, #24]	@ (8142958 <HAL_IncTick+0x20>)
 814293e:	781b      	ldrb	r3, [r3, #0]
 8142940:	461a      	mov	r2, r3
 8142942:	4b06      	ldr	r3, [pc, #24]	@ (814295c <HAL_IncTick+0x24>)
 8142944:	681b      	ldr	r3, [r3, #0]
 8142946:	4413      	add	r3, r2
 8142948:	4a04      	ldr	r2, [pc, #16]	@ (814295c <HAL_IncTick+0x24>)
 814294a:	6013      	str	r3, [r2, #0]
}
 814294c:	bf00      	nop
 814294e:	46bd      	mov	sp, r7
 8142950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142954:	4770      	bx	lr
 8142956:	bf00      	nop
 8142958:	100320fc 	.word	0x100320fc
 814295c:	10034f90 	.word	0x10034f90

08142960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8142960:	b480      	push	{r7}
 8142962:	af00      	add	r7, sp, #0
  return uwTick;
 8142964:	4b03      	ldr	r3, [pc, #12]	@ (8142974 <HAL_GetTick+0x14>)
 8142966:	681b      	ldr	r3, [r3, #0]
}
 8142968:	4618      	mov	r0, r3
 814296a:	46bd      	mov	sp, r7
 814296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142970:	4770      	bx	lr
 8142972:	bf00      	nop
 8142974:	10034f90 	.word	0x10034f90

08142978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8142978:	b580      	push	{r7, lr}
 814297a:	b084      	sub	sp, #16
 814297c:	af00      	add	r7, sp, #0
 814297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8142980:	f7ff ffee 	bl	8142960 <HAL_GetTick>
 8142984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8142986:	687b      	ldr	r3, [r7, #4]
 8142988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 814298a:	68fb      	ldr	r3, [r7, #12]
 814298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8142990:	d005      	beq.n	814299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8142992:	4b0a      	ldr	r3, [pc, #40]	@ (81429bc <HAL_Delay+0x44>)
 8142994:	781b      	ldrb	r3, [r3, #0]
 8142996:	461a      	mov	r2, r3
 8142998:	68fb      	ldr	r3, [r7, #12]
 814299a:	4413      	add	r3, r2
 814299c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 814299e:	bf00      	nop
 81429a0:	f7ff ffde 	bl	8142960 <HAL_GetTick>
 81429a4:	4602      	mov	r2, r0
 81429a6:	68bb      	ldr	r3, [r7, #8]
 81429a8:	1ad3      	subs	r3, r2, r3
 81429aa:	68fa      	ldr	r2, [r7, #12]
 81429ac:	429a      	cmp	r2, r3
 81429ae:	d8f7      	bhi.n	81429a0 <HAL_Delay+0x28>
  {
  }
}
 81429b0:	bf00      	nop
 81429b2:	bf00      	nop
 81429b4:	3710      	adds	r7, #16
 81429b6:	46bd      	mov	sp, r7
 81429b8:	bd80      	pop	{r7, pc}
 81429ba:	bf00      	nop
 81429bc:	100320fc 	.word	0x100320fc

081429c0 <__NVIC_SetPriorityGrouping>:
{
 81429c0:	b480      	push	{r7}
 81429c2:	b085      	sub	sp, #20
 81429c4:	af00      	add	r7, sp, #0
 81429c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81429c8:	687b      	ldr	r3, [r7, #4]
 81429ca:	f003 0307 	and.w	r3, r3, #7
 81429ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81429d0:	4b0c      	ldr	r3, [pc, #48]	@ (8142a04 <__NVIC_SetPriorityGrouping+0x44>)
 81429d2:	68db      	ldr	r3, [r3, #12]
 81429d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81429d6:	68ba      	ldr	r2, [r7, #8]
 81429d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81429dc:	4013      	ands	r3, r2
 81429de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81429e0:	68fb      	ldr	r3, [r7, #12]
 81429e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81429e4:	68bb      	ldr	r3, [r7, #8]
 81429e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81429e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81429ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81429f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81429f2:	4a04      	ldr	r2, [pc, #16]	@ (8142a04 <__NVIC_SetPriorityGrouping+0x44>)
 81429f4:	68bb      	ldr	r3, [r7, #8]
 81429f6:	60d3      	str	r3, [r2, #12]
}
 81429f8:	bf00      	nop
 81429fa:	3714      	adds	r7, #20
 81429fc:	46bd      	mov	sp, r7
 81429fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142a02:	4770      	bx	lr
 8142a04:	e000ed00 	.word	0xe000ed00

08142a08 <__NVIC_GetPriorityGrouping>:
{
 8142a08:	b480      	push	{r7}
 8142a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8142a0c:	4b04      	ldr	r3, [pc, #16]	@ (8142a20 <__NVIC_GetPriorityGrouping+0x18>)
 8142a0e:	68db      	ldr	r3, [r3, #12]
 8142a10:	0a1b      	lsrs	r3, r3, #8
 8142a12:	f003 0307 	and.w	r3, r3, #7
}
 8142a16:	4618      	mov	r0, r3
 8142a18:	46bd      	mov	sp, r7
 8142a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142a1e:	4770      	bx	lr
 8142a20:	e000ed00 	.word	0xe000ed00

08142a24 <__NVIC_EnableIRQ>:
{
 8142a24:	b480      	push	{r7}
 8142a26:	b083      	sub	sp, #12
 8142a28:	af00      	add	r7, sp, #0
 8142a2a:	4603      	mov	r3, r0
 8142a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8142a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8142a32:	2b00      	cmp	r3, #0
 8142a34:	db0b      	blt.n	8142a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8142a36:	88fb      	ldrh	r3, [r7, #6]
 8142a38:	f003 021f 	and.w	r2, r3, #31
 8142a3c:	4907      	ldr	r1, [pc, #28]	@ (8142a5c <__NVIC_EnableIRQ+0x38>)
 8142a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8142a42:	095b      	lsrs	r3, r3, #5
 8142a44:	2001      	movs	r0, #1
 8142a46:	fa00 f202 	lsl.w	r2, r0, r2
 8142a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8142a4e:	bf00      	nop
 8142a50:	370c      	adds	r7, #12
 8142a52:	46bd      	mov	sp, r7
 8142a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142a58:	4770      	bx	lr
 8142a5a:	bf00      	nop
 8142a5c:	e000e100 	.word	0xe000e100

08142a60 <__NVIC_SetPriority>:
{
 8142a60:	b480      	push	{r7}
 8142a62:	b083      	sub	sp, #12
 8142a64:	af00      	add	r7, sp, #0
 8142a66:	4603      	mov	r3, r0
 8142a68:	6039      	str	r1, [r7, #0]
 8142a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8142a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8142a70:	2b00      	cmp	r3, #0
 8142a72:	db0a      	blt.n	8142a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8142a74:	683b      	ldr	r3, [r7, #0]
 8142a76:	b2da      	uxtb	r2, r3
 8142a78:	490c      	ldr	r1, [pc, #48]	@ (8142aac <__NVIC_SetPriority+0x4c>)
 8142a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8142a7e:	0112      	lsls	r2, r2, #4
 8142a80:	b2d2      	uxtb	r2, r2
 8142a82:	440b      	add	r3, r1
 8142a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8142a88:	e00a      	b.n	8142aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8142a8a:	683b      	ldr	r3, [r7, #0]
 8142a8c:	b2da      	uxtb	r2, r3
 8142a8e:	4908      	ldr	r1, [pc, #32]	@ (8142ab0 <__NVIC_SetPriority+0x50>)
 8142a90:	88fb      	ldrh	r3, [r7, #6]
 8142a92:	f003 030f 	and.w	r3, r3, #15
 8142a96:	3b04      	subs	r3, #4
 8142a98:	0112      	lsls	r2, r2, #4
 8142a9a:	b2d2      	uxtb	r2, r2
 8142a9c:	440b      	add	r3, r1
 8142a9e:	761a      	strb	r2, [r3, #24]
}
 8142aa0:	bf00      	nop
 8142aa2:	370c      	adds	r7, #12
 8142aa4:	46bd      	mov	sp, r7
 8142aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142aaa:	4770      	bx	lr
 8142aac:	e000e100 	.word	0xe000e100
 8142ab0:	e000ed00 	.word	0xe000ed00

08142ab4 <NVIC_EncodePriority>:
{
 8142ab4:	b480      	push	{r7}
 8142ab6:	b089      	sub	sp, #36	@ 0x24
 8142ab8:	af00      	add	r7, sp, #0
 8142aba:	60f8      	str	r0, [r7, #12]
 8142abc:	60b9      	str	r1, [r7, #8]
 8142abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8142ac0:	68fb      	ldr	r3, [r7, #12]
 8142ac2:	f003 0307 	and.w	r3, r3, #7
 8142ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8142ac8:	69fb      	ldr	r3, [r7, #28]
 8142aca:	f1c3 0307 	rsb	r3, r3, #7
 8142ace:	2b04      	cmp	r3, #4
 8142ad0:	bf28      	it	cs
 8142ad2:	2304      	movcs	r3, #4
 8142ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8142ad6:	69fb      	ldr	r3, [r7, #28]
 8142ad8:	3304      	adds	r3, #4
 8142ada:	2b06      	cmp	r3, #6
 8142adc:	d902      	bls.n	8142ae4 <NVIC_EncodePriority+0x30>
 8142ade:	69fb      	ldr	r3, [r7, #28]
 8142ae0:	3b03      	subs	r3, #3
 8142ae2:	e000      	b.n	8142ae6 <NVIC_EncodePriority+0x32>
 8142ae4:	2300      	movs	r3, #0
 8142ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8142ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8142aec:	69bb      	ldr	r3, [r7, #24]
 8142aee:	fa02 f303 	lsl.w	r3, r2, r3
 8142af2:	43da      	mvns	r2, r3
 8142af4:	68bb      	ldr	r3, [r7, #8]
 8142af6:	401a      	ands	r2, r3
 8142af8:	697b      	ldr	r3, [r7, #20]
 8142afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8142afc:	f04f 31ff 	mov.w	r1, #4294967295
 8142b00:	697b      	ldr	r3, [r7, #20]
 8142b02:	fa01 f303 	lsl.w	r3, r1, r3
 8142b06:	43d9      	mvns	r1, r3
 8142b08:	687b      	ldr	r3, [r7, #4]
 8142b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8142b0c:	4313      	orrs	r3, r2
}
 8142b0e:	4618      	mov	r0, r3
 8142b10:	3724      	adds	r7, #36	@ 0x24
 8142b12:	46bd      	mov	sp, r7
 8142b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142b18:	4770      	bx	lr

08142b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8142b1a:	b580      	push	{r7, lr}
 8142b1c:	b082      	sub	sp, #8
 8142b1e:	af00      	add	r7, sp, #0
 8142b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8142b22:	6878      	ldr	r0, [r7, #4]
 8142b24:	f7ff ff4c 	bl	81429c0 <__NVIC_SetPriorityGrouping>
}
 8142b28:	bf00      	nop
 8142b2a:	3708      	adds	r7, #8
 8142b2c:	46bd      	mov	sp, r7
 8142b2e:	bd80      	pop	{r7, pc}

08142b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8142b30:	b580      	push	{r7, lr}
 8142b32:	b086      	sub	sp, #24
 8142b34:	af00      	add	r7, sp, #0
 8142b36:	4603      	mov	r3, r0
 8142b38:	60b9      	str	r1, [r7, #8]
 8142b3a:	607a      	str	r2, [r7, #4]
 8142b3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8142b3e:	f7ff ff63 	bl	8142a08 <__NVIC_GetPriorityGrouping>
 8142b42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8142b44:	687a      	ldr	r2, [r7, #4]
 8142b46:	68b9      	ldr	r1, [r7, #8]
 8142b48:	6978      	ldr	r0, [r7, #20]
 8142b4a:	f7ff ffb3 	bl	8142ab4 <NVIC_EncodePriority>
 8142b4e:	4602      	mov	r2, r0
 8142b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8142b54:	4611      	mov	r1, r2
 8142b56:	4618      	mov	r0, r3
 8142b58:	f7ff ff82 	bl	8142a60 <__NVIC_SetPriority>
}
 8142b5c:	bf00      	nop
 8142b5e:	3718      	adds	r7, #24
 8142b60:	46bd      	mov	sp, r7
 8142b62:	bd80      	pop	{r7, pc}

08142b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8142b64:	b580      	push	{r7, lr}
 8142b66:	b082      	sub	sp, #8
 8142b68:	af00      	add	r7, sp, #0
 8142b6a:	4603      	mov	r3, r0
 8142b6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8142b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8142b72:	4618      	mov	r0, r3
 8142b74:	f7ff ff56 	bl	8142a24 <__NVIC_EnableIRQ>
}
 8142b78:	bf00      	nop
 8142b7a:	3708      	adds	r7, #8
 8142b7c:	46bd      	mov	sp, r7
 8142b7e:	bd80      	pop	{r7, pc}

08142b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8142b80:	b480      	push	{r7}
 8142b82:	b089      	sub	sp, #36	@ 0x24
 8142b84:	af00      	add	r7, sp, #0
 8142b86:	6078      	str	r0, [r7, #4]
 8142b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8142b8a:	2300      	movs	r3, #0
 8142b8c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8142b8e:	4b89      	ldr	r3, [pc, #548]	@ (8142db4 <HAL_GPIO_Init+0x234>)
 8142b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8142b92:	e194      	b.n	8142ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8142b94:	683b      	ldr	r3, [r7, #0]
 8142b96:	681a      	ldr	r2, [r3, #0]
 8142b98:	2101      	movs	r1, #1
 8142b9a:	69fb      	ldr	r3, [r7, #28]
 8142b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8142ba0:	4013      	ands	r3, r2
 8142ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8142ba4:	693b      	ldr	r3, [r7, #16]
 8142ba6:	2b00      	cmp	r3, #0
 8142ba8:	f000 8186 	beq.w	8142eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8142bac:	683b      	ldr	r3, [r7, #0]
 8142bae:	685b      	ldr	r3, [r3, #4]
 8142bb0:	f003 0303 	and.w	r3, r3, #3
 8142bb4:	2b01      	cmp	r3, #1
 8142bb6:	d005      	beq.n	8142bc4 <HAL_GPIO_Init+0x44>
 8142bb8:	683b      	ldr	r3, [r7, #0]
 8142bba:	685b      	ldr	r3, [r3, #4]
 8142bbc:	f003 0303 	and.w	r3, r3, #3
 8142bc0:	2b02      	cmp	r3, #2
 8142bc2:	d130      	bne.n	8142c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8142bc4:	687b      	ldr	r3, [r7, #4]
 8142bc6:	689b      	ldr	r3, [r3, #8]
 8142bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8142bca:	69fb      	ldr	r3, [r7, #28]
 8142bcc:	005b      	lsls	r3, r3, #1
 8142bce:	2203      	movs	r2, #3
 8142bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8142bd4:	43db      	mvns	r3, r3
 8142bd6:	69ba      	ldr	r2, [r7, #24]
 8142bd8:	4013      	ands	r3, r2
 8142bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8142bdc:	683b      	ldr	r3, [r7, #0]
 8142bde:	68da      	ldr	r2, [r3, #12]
 8142be0:	69fb      	ldr	r3, [r7, #28]
 8142be2:	005b      	lsls	r3, r3, #1
 8142be4:	fa02 f303 	lsl.w	r3, r2, r3
 8142be8:	69ba      	ldr	r2, [r7, #24]
 8142bea:	4313      	orrs	r3, r2
 8142bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8142bee:	687b      	ldr	r3, [r7, #4]
 8142bf0:	69ba      	ldr	r2, [r7, #24]
 8142bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8142bf4:	687b      	ldr	r3, [r7, #4]
 8142bf6:	685b      	ldr	r3, [r3, #4]
 8142bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8142bfa:	2201      	movs	r2, #1
 8142bfc:	69fb      	ldr	r3, [r7, #28]
 8142bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8142c02:	43db      	mvns	r3, r3
 8142c04:	69ba      	ldr	r2, [r7, #24]
 8142c06:	4013      	ands	r3, r2
 8142c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8142c0a:	683b      	ldr	r3, [r7, #0]
 8142c0c:	685b      	ldr	r3, [r3, #4]
 8142c0e:	091b      	lsrs	r3, r3, #4
 8142c10:	f003 0201 	and.w	r2, r3, #1
 8142c14:	69fb      	ldr	r3, [r7, #28]
 8142c16:	fa02 f303 	lsl.w	r3, r2, r3
 8142c1a:	69ba      	ldr	r2, [r7, #24]
 8142c1c:	4313      	orrs	r3, r2
 8142c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8142c20:	687b      	ldr	r3, [r7, #4]
 8142c22:	69ba      	ldr	r2, [r7, #24]
 8142c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8142c26:	683b      	ldr	r3, [r7, #0]
 8142c28:	685b      	ldr	r3, [r3, #4]
 8142c2a:	f003 0303 	and.w	r3, r3, #3
 8142c2e:	2b03      	cmp	r3, #3
 8142c30:	d017      	beq.n	8142c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8142c32:	687b      	ldr	r3, [r7, #4]
 8142c34:	68db      	ldr	r3, [r3, #12]
 8142c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8142c38:	69fb      	ldr	r3, [r7, #28]
 8142c3a:	005b      	lsls	r3, r3, #1
 8142c3c:	2203      	movs	r2, #3
 8142c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8142c42:	43db      	mvns	r3, r3
 8142c44:	69ba      	ldr	r2, [r7, #24]
 8142c46:	4013      	ands	r3, r2
 8142c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8142c4a:	683b      	ldr	r3, [r7, #0]
 8142c4c:	689a      	ldr	r2, [r3, #8]
 8142c4e:	69fb      	ldr	r3, [r7, #28]
 8142c50:	005b      	lsls	r3, r3, #1
 8142c52:	fa02 f303 	lsl.w	r3, r2, r3
 8142c56:	69ba      	ldr	r2, [r7, #24]
 8142c58:	4313      	orrs	r3, r2
 8142c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8142c5c:	687b      	ldr	r3, [r7, #4]
 8142c5e:	69ba      	ldr	r2, [r7, #24]
 8142c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8142c62:	683b      	ldr	r3, [r7, #0]
 8142c64:	685b      	ldr	r3, [r3, #4]
 8142c66:	f003 0303 	and.w	r3, r3, #3
 8142c6a:	2b02      	cmp	r3, #2
 8142c6c:	d123      	bne.n	8142cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8142c6e:	69fb      	ldr	r3, [r7, #28]
 8142c70:	08da      	lsrs	r2, r3, #3
 8142c72:	687b      	ldr	r3, [r7, #4]
 8142c74:	3208      	adds	r2, #8
 8142c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8142c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8142c7c:	69fb      	ldr	r3, [r7, #28]
 8142c7e:	f003 0307 	and.w	r3, r3, #7
 8142c82:	009b      	lsls	r3, r3, #2
 8142c84:	220f      	movs	r2, #15
 8142c86:	fa02 f303 	lsl.w	r3, r2, r3
 8142c8a:	43db      	mvns	r3, r3
 8142c8c:	69ba      	ldr	r2, [r7, #24]
 8142c8e:	4013      	ands	r3, r2
 8142c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8142c92:	683b      	ldr	r3, [r7, #0]
 8142c94:	691a      	ldr	r2, [r3, #16]
 8142c96:	69fb      	ldr	r3, [r7, #28]
 8142c98:	f003 0307 	and.w	r3, r3, #7
 8142c9c:	009b      	lsls	r3, r3, #2
 8142c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8142ca2:	69ba      	ldr	r2, [r7, #24]
 8142ca4:	4313      	orrs	r3, r2
 8142ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8142ca8:	69fb      	ldr	r3, [r7, #28]
 8142caa:	08da      	lsrs	r2, r3, #3
 8142cac:	687b      	ldr	r3, [r7, #4]
 8142cae:	3208      	adds	r2, #8
 8142cb0:	69b9      	ldr	r1, [r7, #24]
 8142cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8142cb6:	687b      	ldr	r3, [r7, #4]
 8142cb8:	681b      	ldr	r3, [r3, #0]
 8142cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8142cbc:	69fb      	ldr	r3, [r7, #28]
 8142cbe:	005b      	lsls	r3, r3, #1
 8142cc0:	2203      	movs	r2, #3
 8142cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8142cc6:	43db      	mvns	r3, r3
 8142cc8:	69ba      	ldr	r2, [r7, #24]
 8142cca:	4013      	ands	r3, r2
 8142ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8142cce:	683b      	ldr	r3, [r7, #0]
 8142cd0:	685b      	ldr	r3, [r3, #4]
 8142cd2:	f003 0203 	and.w	r2, r3, #3
 8142cd6:	69fb      	ldr	r3, [r7, #28]
 8142cd8:	005b      	lsls	r3, r3, #1
 8142cda:	fa02 f303 	lsl.w	r3, r2, r3
 8142cde:	69ba      	ldr	r2, [r7, #24]
 8142ce0:	4313      	orrs	r3, r2
 8142ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8142ce4:	687b      	ldr	r3, [r7, #4]
 8142ce6:	69ba      	ldr	r2, [r7, #24]
 8142ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8142cea:	683b      	ldr	r3, [r7, #0]
 8142cec:	685b      	ldr	r3, [r3, #4]
 8142cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8142cf2:	2b00      	cmp	r3, #0
 8142cf4:	f000 80e0 	beq.w	8142eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8142cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8142db8 <HAL_GPIO_Init+0x238>)
 8142cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8142cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8142db8 <HAL_GPIO_Init+0x238>)
 8142d00:	f043 0302 	orr.w	r3, r3, #2
 8142d04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8142d08:	4b2b      	ldr	r3, [pc, #172]	@ (8142db8 <HAL_GPIO_Init+0x238>)
 8142d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8142d0e:	f003 0302 	and.w	r3, r3, #2
 8142d12:	60fb      	str	r3, [r7, #12]
 8142d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8142d16:	4a29      	ldr	r2, [pc, #164]	@ (8142dbc <HAL_GPIO_Init+0x23c>)
 8142d18:	69fb      	ldr	r3, [r7, #28]
 8142d1a:	089b      	lsrs	r3, r3, #2
 8142d1c:	3302      	adds	r3, #2
 8142d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8142d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8142d24:	69fb      	ldr	r3, [r7, #28]
 8142d26:	f003 0303 	and.w	r3, r3, #3
 8142d2a:	009b      	lsls	r3, r3, #2
 8142d2c:	220f      	movs	r2, #15
 8142d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8142d32:	43db      	mvns	r3, r3
 8142d34:	69ba      	ldr	r2, [r7, #24]
 8142d36:	4013      	ands	r3, r2
 8142d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8142d3a:	687b      	ldr	r3, [r7, #4]
 8142d3c:	4a20      	ldr	r2, [pc, #128]	@ (8142dc0 <HAL_GPIO_Init+0x240>)
 8142d3e:	4293      	cmp	r3, r2
 8142d40:	d052      	beq.n	8142de8 <HAL_GPIO_Init+0x268>
 8142d42:	687b      	ldr	r3, [r7, #4]
 8142d44:	4a1f      	ldr	r2, [pc, #124]	@ (8142dc4 <HAL_GPIO_Init+0x244>)
 8142d46:	4293      	cmp	r3, r2
 8142d48:	d031      	beq.n	8142dae <HAL_GPIO_Init+0x22e>
 8142d4a:	687b      	ldr	r3, [r7, #4]
 8142d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8142dc8 <HAL_GPIO_Init+0x248>)
 8142d4e:	4293      	cmp	r3, r2
 8142d50:	d02b      	beq.n	8142daa <HAL_GPIO_Init+0x22a>
 8142d52:	687b      	ldr	r3, [r7, #4]
 8142d54:	4a1d      	ldr	r2, [pc, #116]	@ (8142dcc <HAL_GPIO_Init+0x24c>)
 8142d56:	4293      	cmp	r3, r2
 8142d58:	d025      	beq.n	8142da6 <HAL_GPIO_Init+0x226>
 8142d5a:	687b      	ldr	r3, [r7, #4]
 8142d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8142dd0 <HAL_GPIO_Init+0x250>)
 8142d5e:	4293      	cmp	r3, r2
 8142d60:	d01f      	beq.n	8142da2 <HAL_GPIO_Init+0x222>
 8142d62:	687b      	ldr	r3, [r7, #4]
 8142d64:	4a1b      	ldr	r2, [pc, #108]	@ (8142dd4 <HAL_GPIO_Init+0x254>)
 8142d66:	4293      	cmp	r3, r2
 8142d68:	d019      	beq.n	8142d9e <HAL_GPIO_Init+0x21e>
 8142d6a:	687b      	ldr	r3, [r7, #4]
 8142d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8142dd8 <HAL_GPIO_Init+0x258>)
 8142d6e:	4293      	cmp	r3, r2
 8142d70:	d013      	beq.n	8142d9a <HAL_GPIO_Init+0x21a>
 8142d72:	687b      	ldr	r3, [r7, #4]
 8142d74:	4a19      	ldr	r2, [pc, #100]	@ (8142ddc <HAL_GPIO_Init+0x25c>)
 8142d76:	4293      	cmp	r3, r2
 8142d78:	d00d      	beq.n	8142d96 <HAL_GPIO_Init+0x216>
 8142d7a:	687b      	ldr	r3, [r7, #4]
 8142d7c:	4a18      	ldr	r2, [pc, #96]	@ (8142de0 <HAL_GPIO_Init+0x260>)
 8142d7e:	4293      	cmp	r3, r2
 8142d80:	d007      	beq.n	8142d92 <HAL_GPIO_Init+0x212>
 8142d82:	687b      	ldr	r3, [r7, #4]
 8142d84:	4a17      	ldr	r2, [pc, #92]	@ (8142de4 <HAL_GPIO_Init+0x264>)
 8142d86:	4293      	cmp	r3, r2
 8142d88:	d101      	bne.n	8142d8e <HAL_GPIO_Init+0x20e>
 8142d8a:	2309      	movs	r3, #9
 8142d8c:	e02d      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142d8e:	230a      	movs	r3, #10
 8142d90:	e02b      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142d92:	2308      	movs	r3, #8
 8142d94:	e029      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142d96:	2307      	movs	r3, #7
 8142d98:	e027      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142d9a:	2306      	movs	r3, #6
 8142d9c:	e025      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142d9e:	2305      	movs	r3, #5
 8142da0:	e023      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142da2:	2304      	movs	r3, #4
 8142da4:	e021      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142da6:	2303      	movs	r3, #3
 8142da8:	e01f      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142daa:	2302      	movs	r3, #2
 8142dac:	e01d      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142dae:	2301      	movs	r3, #1
 8142db0:	e01b      	b.n	8142dea <HAL_GPIO_Init+0x26a>
 8142db2:	bf00      	nop
 8142db4:	580000c0 	.word	0x580000c0
 8142db8:	58024400 	.word	0x58024400
 8142dbc:	58000400 	.word	0x58000400
 8142dc0:	58020000 	.word	0x58020000
 8142dc4:	58020400 	.word	0x58020400
 8142dc8:	58020800 	.word	0x58020800
 8142dcc:	58020c00 	.word	0x58020c00
 8142dd0:	58021000 	.word	0x58021000
 8142dd4:	58021400 	.word	0x58021400
 8142dd8:	58021800 	.word	0x58021800
 8142ddc:	58021c00 	.word	0x58021c00
 8142de0:	58022000 	.word	0x58022000
 8142de4:	58022400 	.word	0x58022400
 8142de8:	2300      	movs	r3, #0
 8142dea:	69fa      	ldr	r2, [r7, #28]
 8142dec:	f002 0203 	and.w	r2, r2, #3
 8142df0:	0092      	lsls	r2, r2, #2
 8142df2:	4093      	lsls	r3, r2
 8142df4:	69ba      	ldr	r2, [r7, #24]
 8142df6:	4313      	orrs	r3, r2
 8142df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8142dfa:	4938      	ldr	r1, [pc, #224]	@ (8142edc <HAL_GPIO_Init+0x35c>)
 8142dfc:	69fb      	ldr	r3, [r7, #28]
 8142dfe:	089b      	lsrs	r3, r3, #2
 8142e00:	3302      	adds	r3, #2
 8142e02:	69ba      	ldr	r2, [r7, #24]
 8142e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8142e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8142e0c:	681b      	ldr	r3, [r3, #0]
 8142e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8142e10:	693b      	ldr	r3, [r7, #16]
 8142e12:	43db      	mvns	r3, r3
 8142e14:	69ba      	ldr	r2, [r7, #24]
 8142e16:	4013      	ands	r3, r2
 8142e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8142e1a:	683b      	ldr	r3, [r7, #0]
 8142e1c:	685b      	ldr	r3, [r3, #4]
 8142e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8142e22:	2b00      	cmp	r3, #0
 8142e24:	d003      	beq.n	8142e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8142e26:	69ba      	ldr	r2, [r7, #24]
 8142e28:	693b      	ldr	r3, [r7, #16]
 8142e2a:	4313      	orrs	r3, r2
 8142e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8142e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8142e32:	69bb      	ldr	r3, [r7, #24]
 8142e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8142e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8142e3a:	685b      	ldr	r3, [r3, #4]
 8142e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8142e3e:	693b      	ldr	r3, [r7, #16]
 8142e40:	43db      	mvns	r3, r3
 8142e42:	69ba      	ldr	r2, [r7, #24]
 8142e44:	4013      	ands	r3, r2
 8142e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8142e48:	683b      	ldr	r3, [r7, #0]
 8142e4a:	685b      	ldr	r3, [r3, #4]
 8142e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8142e50:	2b00      	cmp	r3, #0
 8142e52:	d003      	beq.n	8142e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8142e54:	69ba      	ldr	r2, [r7, #24]
 8142e56:	693b      	ldr	r3, [r7, #16]
 8142e58:	4313      	orrs	r3, r2
 8142e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8142e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8142e60:	69bb      	ldr	r3, [r7, #24]
 8142e62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8142e64:	697b      	ldr	r3, [r7, #20]
 8142e66:	685b      	ldr	r3, [r3, #4]
 8142e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8142e6a:	693b      	ldr	r3, [r7, #16]
 8142e6c:	43db      	mvns	r3, r3
 8142e6e:	69ba      	ldr	r2, [r7, #24]
 8142e70:	4013      	ands	r3, r2
 8142e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8142e74:	683b      	ldr	r3, [r7, #0]
 8142e76:	685b      	ldr	r3, [r3, #4]
 8142e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8142e7c:	2b00      	cmp	r3, #0
 8142e7e:	d003      	beq.n	8142e88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8142e80:	69ba      	ldr	r2, [r7, #24]
 8142e82:	693b      	ldr	r3, [r7, #16]
 8142e84:	4313      	orrs	r3, r2
 8142e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8142e88:	697b      	ldr	r3, [r7, #20]
 8142e8a:	69ba      	ldr	r2, [r7, #24]
 8142e8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8142e8e:	697b      	ldr	r3, [r7, #20]
 8142e90:	681b      	ldr	r3, [r3, #0]
 8142e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8142e94:	693b      	ldr	r3, [r7, #16]
 8142e96:	43db      	mvns	r3, r3
 8142e98:	69ba      	ldr	r2, [r7, #24]
 8142e9a:	4013      	ands	r3, r2
 8142e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8142e9e:	683b      	ldr	r3, [r7, #0]
 8142ea0:	685b      	ldr	r3, [r3, #4]
 8142ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8142ea6:	2b00      	cmp	r3, #0
 8142ea8:	d003      	beq.n	8142eb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8142eaa:	69ba      	ldr	r2, [r7, #24]
 8142eac:	693b      	ldr	r3, [r7, #16]
 8142eae:	4313      	orrs	r3, r2
 8142eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8142eb2:	697b      	ldr	r3, [r7, #20]
 8142eb4:	69ba      	ldr	r2, [r7, #24]
 8142eb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8142eb8:	69fb      	ldr	r3, [r7, #28]
 8142eba:	3301      	adds	r3, #1
 8142ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8142ebe:	683b      	ldr	r3, [r7, #0]
 8142ec0:	681a      	ldr	r2, [r3, #0]
 8142ec2:	69fb      	ldr	r3, [r7, #28]
 8142ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8142ec8:	2b00      	cmp	r3, #0
 8142eca:	f47f ae63 	bne.w	8142b94 <HAL_GPIO_Init+0x14>
  }
}
 8142ece:	bf00      	nop
 8142ed0:	bf00      	nop
 8142ed2:	3724      	adds	r7, #36	@ 0x24
 8142ed4:	46bd      	mov	sp, r7
 8142ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142eda:	4770      	bx	lr
 8142edc:	58000400 	.word	0x58000400

08142ee0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8142ee0:	b480      	push	{r7}
 8142ee2:	b083      	sub	sp, #12
 8142ee4:	af00      	add	r7, sp, #0
 8142ee6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8142ee8:	4a08      	ldr	r2, [pc, #32]	@ (8142f0c <HAL_HSEM_FastTake+0x2c>)
 8142eea:	687b      	ldr	r3, [r7, #4]
 8142eec:	3320      	adds	r3, #32
 8142eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8142ef2:	4a07      	ldr	r2, [pc, #28]	@ (8142f10 <HAL_HSEM_FastTake+0x30>)
 8142ef4:	4293      	cmp	r3, r2
 8142ef6:	d101      	bne.n	8142efc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8142ef8:	2300      	movs	r3, #0
 8142efa:	e000      	b.n	8142efe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8142efc:	2301      	movs	r3, #1
}
 8142efe:	4618      	mov	r0, r3
 8142f00:	370c      	adds	r7, #12
 8142f02:	46bd      	mov	sp, r7
 8142f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8142f08:	4770      	bx	lr
 8142f0a:	bf00      	nop
 8142f0c:	58026400 	.word	0x58026400
 8142f10:	80000100 	.word	0x80000100

08142f14 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8142f14:	b580      	push	{r7, lr}
 8142f16:	b082      	sub	sp, #8
 8142f18:	af00      	add	r7, sp, #0
 8142f1a:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8142f1c:	687b      	ldr	r3, [r7, #4]
 8142f1e:	2b00      	cmp	r3, #0
 8142f20:	d101      	bne.n	8142f26 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8142f22:	2301      	movs	r3, #1
 8142f24:	e031      	b.n	8142f8a <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8142f26:	687b      	ldr	r3, [r7, #4]
 8142f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8142f2c:	b2db      	uxtb	r3, r3
 8142f2e:	2b00      	cmp	r3, #0
 8142f30:	d105      	bne.n	8142f3e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8142f32:	687b      	ldr	r3, [r7, #4]
 8142f34:	2200      	movs	r2, #0
 8142f36:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8142f38:	6878      	ldr	r0, [r7, #4]
 8142f3a:	f7ff f95f 	bl	81421fc <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8142f3e:	687b      	ldr	r3, [r7, #4]
 8142f40:	2203      	movs	r2, #3
 8142f42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8142f46:	6878      	ldr	r0, [r7, #4]
 8142f48:	f000 f824 	bl	8142f94 <HAL_MMC_InitCard>
 8142f4c:	4603      	mov	r3, r0
 8142f4e:	2b01      	cmp	r3, #1
 8142f50:	d101      	bne.n	8142f56 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8142f52:	2301      	movs	r3, #1
 8142f54:	e019      	b.n	8142f8a <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8142f56:	687b      	ldr	r3, [r7, #4]
 8142f58:	2200      	movs	r2, #0
 8142f5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8142f5c:	687b      	ldr	r3, [r7, #4]
 8142f5e:	2200      	movs	r2, #0
 8142f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8142f62:	687b      	ldr	r3, [r7, #4]
 8142f64:	2201      	movs	r2, #1
 8142f66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8142f6a:	687b      	ldr	r3, [r7, #4]
 8142f6c:	68db      	ldr	r3, [r3, #12]
 8142f6e:	2b00      	cmp	r3, #0
 8142f70:	d00a      	beq.n	8142f88 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8142f72:	687b      	ldr	r3, [r7, #4]
 8142f74:	68db      	ldr	r3, [r3, #12]
 8142f76:	4619      	mov	r1, r3
 8142f78:	6878      	ldr	r0, [r7, #4]
 8142f7a:	f000 fd15 	bl	81439a8 <HAL_MMC_ConfigWideBusOperation>
 8142f7e:	4603      	mov	r3, r0
 8142f80:	2b00      	cmp	r3, #0
 8142f82:	d001      	beq.n	8142f88 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8142f84:	2301      	movs	r3, #1
 8142f86:	e000      	b.n	8142f8a <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8142f88:	2300      	movs	r3, #0
}
 8142f8a:	4618      	mov	r0, r3
 8142f8c:	3708      	adds	r7, #8
 8142f8e:	46bd      	mov	sp, r7
 8142f90:	bd80      	pop	{r7, pc}
	...

08142f94 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8142f94:	b590      	push	{r4, r7, lr}
 8142f96:	b08d      	sub	sp, #52	@ 0x34
 8142f98:	af02      	add	r7, sp, #8
 8142f9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8142f9c:	2300      	movs	r3, #0
 8142f9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8142fa0:	2300      	movs	r3, #0
 8142fa2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8142fa4:	2300      	movs	r3, #0
 8142fa6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8142fa8:	2300      	movs	r3, #0
 8142faa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8142fac:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8142fb0:	f04f 0100 	mov.w	r1, #0
 8142fb4:	f004 f81c 	bl	8146ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8142fb8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8142fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8142fbc:	2b00      	cmp	r3, #0
 8142fbe:	d109      	bne.n	8142fd4 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8142fc0:	687b      	ldr	r3, [r7, #4]
 8142fc2:	2201      	movs	r2, #1
 8142fc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8142fc8:	687b      	ldr	r3, [r7, #4]
 8142fca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8142fce:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8142fd0:	2301      	movs	r3, #1
 8142fd2:	e070      	b.n	81430b6 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8142fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8142fd6:	0a1b      	lsrs	r3, r3, #8
 8142fd8:	4a39      	ldr	r2, [pc, #228]	@ (81430c0 <HAL_MMC_InitCard+0x12c>)
 8142fda:	fba2 2303 	umull	r2, r3, r2, r3
 8142fde:	091b      	lsrs	r3, r3, #4
 8142fe0:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8142fe2:	687b      	ldr	r3, [r7, #4]
 8142fe4:	681c      	ldr	r4, [r3, #0]
 8142fe6:	466a      	mov	r2, sp
 8142fe8:	f107 0318 	add.w	r3, r7, #24
 8142fec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8142ff0:	e882 0003 	stmia.w	r2, {r0, r1}
 8142ff4:	f107 030c 	add.w	r3, r7, #12
 8142ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8142ffa:	4620      	mov	r0, r4
 8142ffc:	f006 fd9e 	bl	8149b3c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8143000:	687b      	ldr	r3, [r7, #4]
 8143002:	681b      	ldr	r3, [r3, #0]
 8143004:	4618      	mov	r0, r3
 8143006:	f006 fde1 	bl	8149bcc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 814300a:	69fb      	ldr	r3, [r7, #28]
 814300c:	2b00      	cmp	r3, #0
 814300e:	d005      	beq.n	814301c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8143010:	69fb      	ldr	r3, [r7, #28]
 8143012:	005b      	lsls	r3, r3, #1
 8143014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8143016:	fbb2 f3f3 	udiv	r3, r2, r3
 814301a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 814301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814301e:	2b00      	cmp	r3, #0
 8143020:	d007      	beq.n	8143032 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8143022:	4a28      	ldr	r2, [pc, #160]	@ (81430c4 <HAL_MMC_InitCard+0x130>)
 8143024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8143026:	fbb2 f3f3 	udiv	r3, r2, r3
 814302a:	3301      	adds	r3, #1
 814302c:	4618      	mov	r0, r3
 814302e:	f7ff fca3 	bl	8142978 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8143032:	6878      	ldr	r0, [r7, #4]
 8143034:	f000 fe82 	bl	8143d3c <MMC_PowerON>
 8143038:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 814303a:	6a3b      	ldr	r3, [r7, #32]
 814303c:	2b00      	cmp	r3, #0
 814303e:	d00b      	beq.n	8143058 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8143040:	687b      	ldr	r3, [r7, #4]
 8143042:	2201      	movs	r2, #1
 8143044:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8143048:	687b      	ldr	r3, [r7, #4]
 814304a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 814304c:	6a3b      	ldr	r3, [r7, #32]
 814304e:	431a      	orrs	r2, r3
 8143050:	687b      	ldr	r3, [r7, #4]
 8143052:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8143054:	2301      	movs	r3, #1
 8143056:	e02e      	b.n	81430b6 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8143058:	6878      	ldr	r0, [r7, #4]
 814305a:	f000 fd71 	bl	8143b40 <MMC_InitCard>
 814305e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143060:	6a3b      	ldr	r3, [r7, #32]
 8143062:	2b00      	cmp	r3, #0
 8143064:	d00b      	beq.n	814307e <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8143066:	687b      	ldr	r3, [r7, #4]
 8143068:	2201      	movs	r2, #1
 814306a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 814306e:	687b      	ldr	r3, [r7, #4]
 8143070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143072:	6a3b      	ldr	r3, [r7, #32]
 8143074:	431a      	orrs	r2, r3
 8143076:	687b      	ldr	r3, [r7, #4]
 8143078:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 814307a:	2301      	movs	r3, #1
 814307c:	e01b      	b.n	81430b6 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 814307e:	687b      	ldr	r3, [r7, #4]
 8143080:	681b      	ldr	r3, [r3, #0]
 8143082:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8143086:	4618      	mov	r0, r3
 8143088:	f006 fe36 	bl	8149cf8 <SDMMC_CmdBlockLength>
 814308c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 814308e:	6a3b      	ldr	r3, [r7, #32]
 8143090:	2b00      	cmp	r3, #0
 8143092:	d00f      	beq.n	81430b4 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143094:	687b      	ldr	r3, [r7, #4]
 8143096:	681b      	ldr	r3, [r3, #0]
 8143098:	4a0b      	ldr	r2, [pc, #44]	@ (81430c8 <HAL_MMC_InitCard+0x134>)
 814309a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 814309c:	687b      	ldr	r3, [r7, #4]
 814309e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81430a0:	6a3b      	ldr	r3, [r7, #32]
 81430a2:	431a      	orrs	r2, r3
 81430a4:	687b      	ldr	r3, [r7, #4]
 81430a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 81430a8:	687b      	ldr	r3, [r7, #4]
 81430aa:	2201      	movs	r2, #1
 81430ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81430b0:	2301      	movs	r3, #1
 81430b2:	e000      	b.n	81430b6 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 81430b4:	2300      	movs	r3, #0
}
 81430b6:	4618      	mov	r0, r3
 81430b8:	372c      	adds	r7, #44	@ 0x2c
 81430ba:	46bd      	mov	sp, r7
 81430bc:	bd90      	pop	{r4, r7, pc}
 81430be:	bf00      	nop
 81430c0:	014f8b59 	.word	0x014f8b59
 81430c4:	00012110 	.word	0x00012110
 81430c8:	1fe00fff 	.word	0x1fe00fff

081430cc <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 81430cc:	b580      	push	{r7, lr}
 81430ce:	b084      	sub	sp, #16
 81430d0:	af00      	add	r7, sp, #0
 81430d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 81430d4:	687b      	ldr	r3, [r7, #4]
 81430d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81430d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 81430da:	687b      	ldr	r3, [r7, #4]
 81430dc:	681b      	ldr	r3, [r3, #0]
 81430de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81430e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81430e4:	2b00      	cmp	r3, #0
 81430e6:	d008      	beq.n	81430fa <HAL_MMC_IRQHandler+0x2e>
 81430e8:	68fb      	ldr	r3, [r7, #12]
 81430ea:	f003 0308 	and.w	r3, r3, #8
 81430ee:	2b00      	cmp	r3, #0
 81430f0:	d003      	beq.n	81430fa <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 81430f2:	6878      	ldr	r0, [r7, #4]
 81430f4:	f000 ff66 	bl	8143fc4 <MMC_Read_IT>
 81430f8:	e194      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 81430fa:	687b      	ldr	r3, [r7, #4]
 81430fc:	681b      	ldr	r3, [r3, #0]
 81430fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8143104:	2b00      	cmp	r3, #0
 8143106:	f000 80ac 	beq.w	8143262 <HAL_MMC_IRQHandler+0x196>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 814310a:	687b      	ldr	r3, [r7, #4]
 814310c:	681b      	ldr	r3, [r3, #0]
 814310e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8143112:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8143114:	687b      	ldr	r3, [r7, #4]
 8143116:	681b      	ldr	r3, [r3, #0]
 8143118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 814311a:	687a      	ldr	r2, [r7, #4]
 814311c:	6812      	ldr	r2, [r2, #0]
 814311e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8143122:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8143126:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8143128:	687b      	ldr	r3, [r7, #4]
 814312a:	681b      	ldr	r3, [r3, #0]
 814312c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 814312e:	687b      	ldr	r3, [r7, #4]
 8143130:	681b      	ldr	r3, [r3, #0]
 8143132:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8143136:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8143138:	687b      	ldr	r3, [r7, #4]
 814313a:	681b      	ldr	r3, [r3, #0]
 814313c:	68da      	ldr	r2, [r3, #12]
 814313e:	687b      	ldr	r3, [r7, #4]
 8143140:	681b      	ldr	r3, [r3, #0]
 8143142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8143146:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 8143148:	68fb      	ldr	r3, [r7, #12]
 814314a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 814314e:	2b00      	cmp	r3, #0
 8143150:	d04b      	beq.n	81431ea <HAL_MMC_IRQHandler+0x11e>
    {
      hmmc->Instance->DLEN = 0;
 8143152:	687b      	ldr	r3, [r7, #4]
 8143154:	681b      	ldr	r3, [r3, #0]
 8143156:	2200      	movs	r2, #0
 8143158:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 814315a:	687b      	ldr	r3, [r7, #4]
 814315c:	681b      	ldr	r3, [r3, #0]
 814315e:	2200      	movs	r2, #0
 8143160:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 8143162:	687b      	ldr	r3, [r7, #4]
 8143164:	681b      	ldr	r3, [r3, #0]
 8143166:	2200      	movs	r2, #0
 8143168:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 814316a:	68fb      	ldr	r3, [r7, #12]
 814316c:	f003 0302 	and.w	r3, r3, #2
 8143170:	2b00      	cmp	r3, #0
 8143172:	d104      	bne.n	814317e <HAL_MMC_IRQHandler+0xb2>
 8143174:	68fb      	ldr	r3, [r7, #12]
 8143176:	f003 0320 	and.w	r3, r3, #32
 814317a:	2b00      	cmp	r3, #0
 814317c:	d011      	beq.n	81431a2 <HAL_MMC_IRQHandler+0xd6>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 814317e:	687b      	ldr	r3, [r7, #4]
 8143180:	681b      	ldr	r3, [r3, #0]
 8143182:	4618      	mov	r0, r3
 8143184:	f006 fddc 	bl	8149d40 <SDMMC_CmdStopTransfer>
 8143188:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 814318a:	68bb      	ldr	r3, [r7, #8]
 814318c:	2b00      	cmp	r3, #0
 814318e:	d008      	beq.n	81431a2 <HAL_MMC_IRQHandler+0xd6>
        {
          hmmc->ErrorCode |= errorstate;
 8143190:	687b      	ldr	r3, [r7, #4]
 8143192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143194:	68bb      	ldr	r3, [r7, #8]
 8143196:	431a      	orrs	r2, r3
 8143198:	687b      	ldr	r3, [r7, #4]
 814319a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 814319c:	6878      	ldr	r0, [r7, #4]
 814319e:	f000 f959 	bl	8143454 <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81431a2:	687b      	ldr	r3, [r7, #4]
 81431a4:	681b      	ldr	r3, [r3, #0]
 81431a6:	4a9c      	ldr	r2, [pc, #624]	@ (8143418 <HAL_MMC_IRQHandler+0x34c>)
 81431a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 81431aa:	687b      	ldr	r3, [r7, #4]
 81431ac:	2201      	movs	r2, #1
 81431ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 81431b2:	68fb      	ldr	r3, [r7, #12]
 81431b4:	f003 0310 	and.w	r3, r3, #16
 81431b8:	2b00      	cmp	r3, #0
 81431ba:	d104      	bne.n	81431c6 <HAL_MMC_IRQHandler+0xfa>
 81431bc:	68fb      	ldr	r3, [r7, #12]
 81431be:	f003 0320 	and.w	r3, r3, #32
 81431c2:	2b00      	cmp	r3, #0
 81431c4:	d002      	beq.n	81431cc <HAL_MMC_IRQHandler+0x100>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 81431c6:	6878      	ldr	r0, [r7, #4]
 81431c8:	f000 f930 	bl	814342c <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 81431cc:	68fb      	ldr	r3, [r7, #12]
 81431ce:	f003 0301 	and.w	r3, r3, #1
 81431d2:	2b00      	cmp	r3, #0
 81431d4:	d105      	bne.n	81431e2 <HAL_MMC_IRQHandler+0x116>
 81431d6:	68fb      	ldr	r3, [r7, #12]
 81431d8:	f003 0302 	and.w	r3, r3, #2
 81431dc:	2b00      	cmp	r3, #0
 81431de:	f000 8121 	beq.w	8143424 <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 81431e2:	6878      	ldr	r0, [r7, #4]
 81431e4:	f000 f92c 	bl	8143440 <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 81431e8:	e11c      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 81431ea:	68fb      	ldr	r3, [r7, #12]
 81431ec:	f003 0308 	and.w	r3, r3, #8
 81431f0:	2b00      	cmp	r3, #0
 81431f2:	f000 8117 	beq.w	8143424 <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 81431f6:	68fb      	ldr	r3, [r7, #12]
 81431f8:	f003 0302 	and.w	r3, r3, #2
 81431fc:	2b00      	cmp	r3, #0
 81431fe:	d104      	bne.n	814320a <HAL_MMC_IRQHandler+0x13e>
 8143200:	68fb      	ldr	r3, [r7, #12]
 8143202:	f003 0320 	and.w	r3, r3, #32
 8143206:	2b00      	cmp	r3, #0
 8143208:	d011      	beq.n	814322e <HAL_MMC_IRQHandler+0x162>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 814320a:	687b      	ldr	r3, [r7, #4]
 814320c:	681b      	ldr	r3, [r3, #0]
 814320e:	4618      	mov	r0, r3
 8143210:	f006 fd96 	bl	8149d40 <SDMMC_CmdStopTransfer>
 8143214:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8143216:	68bb      	ldr	r3, [r7, #8]
 8143218:	2b00      	cmp	r3, #0
 814321a:	d008      	beq.n	814322e <HAL_MMC_IRQHandler+0x162>
          hmmc->ErrorCode |= errorstate;
 814321c:	687b      	ldr	r3, [r7, #4]
 814321e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143220:	68bb      	ldr	r3, [r7, #8]
 8143222:	431a      	orrs	r2, r3
 8143224:	687b      	ldr	r3, [r7, #4]
 8143226:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 8143228:	6878      	ldr	r0, [r7, #4]
 814322a:	f000 f913 	bl	8143454 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 814322e:	687b      	ldr	r3, [r7, #4]
 8143230:	681b      	ldr	r3, [r3, #0]
 8143232:	4a79      	ldr	r2, [pc, #484]	@ (8143418 <HAL_MMC_IRQHandler+0x34c>)
 8143234:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8143236:	687b      	ldr	r3, [r7, #4]
 8143238:	2201      	movs	r2, #1
 814323a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 814323e:	68fb      	ldr	r3, [r7, #12]
 8143240:	f003 0301 	and.w	r3, r3, #1
 8143244:	2b00      	cmp	r3, #0
 8143246:	d104      	bne.n	8143252 <HAL_MMC_IRQHandler+0x186>
 8143248:	68fb      	ldr	r3, [r7, #12]
 814324a:	f003 0302 	and.w	r3, r3, #2
 814324e:	2b00      	cmp	r3, #0
 8143250:	d003      	beq.n	814325a <HAL_MMC_IRQHandler+0x18e>
        HAL_MMC_RxCpltCallback(hmmc);
 8143252:	6878      	ldr	r0, [r7, #4]
 8143254:	f000 f8f4 	bl	8143440 <HAL_MMC_RxCpltCallback>
 8143258:	e0e4      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 814325a:	6878      	ldr	r0, [r7, #4]
 814325c:	f000 f8e6 	bl	814342c <HAL_MMC_TxCpltCallback>
}
 8143260:	e0e0      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8143262:	687b      	ldr	r3, [r7, #4]
 8143264:	681b      	ldr	r3, [r3, #0]
 8143266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 814326c:	2b00      	cmp	r3, #0
 814326e:	d008      	beq.n	8143282 <HAL_MMC_IRQHandler+0x1b6>
 8143270:	68fb      	ldr	r3, [r7, #12]
 8143272:	f003 0308 	and.w	r3, r3, #8
 8143276:	2b00      	cmp	r3, #0
 8143278:	d003      	beq.n	8143282 <HAL_MMC_IRQHandler+0x1b6>
    MMC_Write_IT(hmmc);
 814327a:	6878      	ldr	r0, [r7, #4]
 814327c:	f000 fee8 	bl	8144050 <MMC_Write_IT>
 8143280:	e0d0      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 8143282:	687b      	ldr	r3, [r7, #4]
 8143284:	681b      	ldr	r3, [r3, #0]
 8143286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143288:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 814328c:	2b00      	cmp	r3, #0
 814328e:	f000 809a 	beq.w	81433c6 <HAL_MMC_IRQHandler+0x2fa>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 8143292:	687b      	ldr	r3, [r7, #4]
 8143294:	681b      	ldr	r3, [r3, #0]
 8143296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143298:	f003 0302 	and.w	r3, r3, #2
 814329c:	2b00      	cmp	r3, #0
 814329e:	d005      	beq.n	81432ac <HAL_MMC_IRQHandler+0x1e0>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 81432a0:	687b      	ldr	r3, [r7, #4]
 81432a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432a4:	f043 0202 	orr.w	r2, r3, #2
 81432a8:	687b      	ldr	r3, [r7, #4]
 81432aa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 81432ac:	687b      	ldr	r3, [r7, #4]
 81432ae:	681b      	ldr	r3, [r3, #0]
 81432b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432b2:	f003 0308 	and.w	r3, r3, #8
 81432b6:	2b00      	cmp	r3, #0
 81432b8:	d005      	beq.n	81432c6 <HAL_MMC_IRQHandler+0x1fa>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 81432ba:	687b      	ldr	r3, [r7, #4]
 81432bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432be:	f043 0208 	orr.w	r2, r3, #8
 81432c2:	687b      	ldr	r3, [r7, #4]
 81432c4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 81432c6:	687b      	ldr	r3, [r7, #4]
 81432c8:	681b      	ldr	r3, [r3, #0]
 81432ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432cc:	f003 0320 	and.w	r3, r3, #32
 81432d0:	2b00      	cmp	r3, #0
 81432d2:	d005      	beq.n	81432e0 <HAL_MMC_IRQHandler+0x214>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 81432d4:	687b      	ldr	r3, [r7, #4]
 81432d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432d8:	f043 0220 	orr.w	r2, r3, #32
 81432dc:	687b      	ldr	r3, [r7, #4]
 81432de:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 81432e0:	687b      	ldr	r3, [r7, #4]
 81432e2:	681b      	ldr	r3, [r3, #0]
 81432e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432e6:	f003 0310 	and.w	r3, r3, #16
 81432ea:	2b00      	cmp	r3, #0
 81432ec:	d005      	beq.n	81432fa <HAL_MMC_IRQHandler+0x22e>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 81432ee:	687b      	ldr	r3, [r7, #4]
 81432f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81432f2:	f043 0210 	orr.w	r2, r3, #16
 81432f6:	687b      	ldr	r3, [r7, #4]
 81432f8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81432fa:	687b      	ldr	r3, [r7, #4]
 81432fc:	681b      	ldr	r3, [r3, #0]
 81432fe:	4a46      	ldr	r2, [pc, #280]	@ (8143418 <HAL_MMC_IRQHandler+0x34c>)
 8143300:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8143302:	687b      	ldr	r3, [r7, #4]
 8143304:	681b      	ldr	r3, [r3, #0]
 8143306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8143308:	687b      	ldr	r3, [r7, #4]
 814330a:	681b      	ldr	r3, [r3, #0]
 814330c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8143310:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8143312:	687b      	ldr	r3, [r7, #4]
 8143314:	681b      	ldr	r3, [r3, #0]
 8143316:	68da      	ldr	r2, [r3, #12]
 8143318:	687b      	ldr	r3, [r7, #4]
 814331a:	681b      	ldr	r3, [r3, #0]
 814331c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8143320:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8143322:	687b      	ldr	r3, [r7, #4]
 8143324:	681b      	ldr	r3, [r3, #0]
 8143326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8143328:	687b      	ldr	r3, [r7, #4]
 814332a:	681b      	ldr	r3, [r3, #0]
 814332c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8143330:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8143332:	687b      	ldr	r3, [r7, #4]
 8143334:	681b      	ldr	r3, [r3, #0]
 8143336:	68da      	ldr	r2, [r3, #12]
 8143338:	687b      	ldr	r3, [r7, #4]
 814333a:	681b      	ldr	r3, [r3, #0]
 814333c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8143340:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 8143342:	687b      	ldr	r3, [r7, #4]
 8143344:	681b      	ldr	r3, [r3, #0]
 8143346:	4618      	mov	r0, r3
 8143348:	f006 fcfa 	bl	8149d40 <SDMMC_CmdStopTransfer>
 814334c:	4602      	mov	r2, r0
 814334e:	687b      	ldr	r3, [r7, #4]
 8143350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143352:	431a      	orrs	r2, r3
 8143354:	687b      	ldr	r3, [r7, #4]
 8143356:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8143358:	687b      	ldr	r3, [r7, #4]
 814335a:	681b      	ldr	r3, [r3, #0]
 814335c:	68da      	ldr	r2, [r3, #12]
 814335e:	687b      	ldr	r3, [r7, #4]
 8143360:	681b      	ldr	r3, [r3, #0]
 8143362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8143366:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 8143368:	687b      	ldr	r3, [r7, #4]
 814336a:	681b      	ldr	r3, [r3, #0]
 814336c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8143370:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 8143372:	68fb      	ldr	r3, [r7, #12]
 8143374:	f003 0308 	and.w	r3, r3, #8
 8143378:	2b00      	cmp	r3, #0
 814337a:	d007      	beq.n	814338c <HAL_MMC_IRQHandler+0x2c0>
      hmmc->State = HAL_MMC_STATE_READY;
 814337c:	687b      	ldr	r3, [r7, #4]
 814337e:	2201      	movs	r2, #1
 8143380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 8143384:	6878      	ldr	r0, [r7, #4]
 8143386:	f000 f865 	bl	8143454 <HAL_MMC_ErrorCallback>
}
 814338a:	e04b      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 814338c:	68fb      	ldr	r3, [r7, #12]
 814338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8143392:	2b00      	cmp	r3, #0
 8143394:	d046      	beq.n	8143424 <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 8143396:	687b      	ldr	r3, [r7, #4]
 8143398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814339a:	2b00      	cmp	r3, #0
 814339c:	d042      	beq.n	8143424 <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 814339e:	687b      	ldr	r3, [r7, #4]
 81433a0:	681b      	ldr	r3, [r3, #0]
 81433a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81433a4:	687b      	ldr	r3, [r7, #4]
 81433a6:	681b      	ldr	r3, [r3, #0]
 81433a8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 81433ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 81433ae:	687b      	ldr	r3, [r7, #4]
 81433b0:	681b      	ldr	r3, [r3, #0]
 81433b2:	2200      	movs	r2, #0
 81433b4:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 81433b6:	687b      	ldr	r3, [r7, #4]
 81433b8:	2201      	movs	r2, #1
 81433ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 81433be:	6878      	ldr	r0, [r7, #4]
 81433c0:	f000 f848 	bl	8143454 <HAL_MMC_ErrorCallback>
}
 81433c4:	e02e      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 81433c6:	687b      	ldr	r3, [r7, #4]
 81433c8:	681b      	ldr	r3, [r3, #0]
 81433ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81433cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81433d0:	2b00      	cmp	r3, #0
 81433d2:	d027      	beq.n	8143424 <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 81433d4:	687b      	ldr	r3, [r7, #4]
 81433d6:	681b      	ldr	r3, [r3, #0]
 81433d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81433dc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 81433de:	687b      	ldr	r3, [r7, #4]
 81433e0:	681b      	ldr	r3, [r3, #0]
 81433e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81433e4:	f003 0304 	and.w	r3, r3, #4
 81433e8:	2b00      	cmp	r3, #0
 81433ea:	d10c      	bne.n	8143406 <HAL_MMC_IRQHandler+0x33a>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 81433ec:	68fb      	ldr	r3, [r7, #12]
 81433ee:	f003 0320 	and.w	r3, r3, #32
 81433f2:	2b00      	cmp	r3, #0
 81433f4:	d003      	beq.n	81433fe <HAL_MMC_IRQHandler+0x332>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 81433f6:	6878      	ldr	r0, [r7, #4]
 81433f8:	f000 ff32 	bl	8144260 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 81433fc:	e012      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 81433fe:	6878      	ldr	r0, [r7, #4]
 8143400:	f000 ff1a 	bl	8144238 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 8143404:	e00e      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8143406:	68fb      	ldr	r3, [r7, #12]
 8143408:	f003 0320 	and.w	r3, r3, #32
 814340c:	2b00      	cmp	r3, #0
 814340e:	d005      	beq.n	814341c <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 8143410:	6878      	ldr	r0, [r7, #4]
 8143412:	f000 ff1b 	bl	814424c <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 8143416:	e005      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
 8143418:	18000f3a 	.word	0x18000f3a
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 814341c:	6878      	ldr	r0, [r7, #4]
 814341e:	f000 ff01 	bl	8144224 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 8143422:	e7ff      	b.n	8143424 <HAL_MMC_IRQHandler+0x358>
 8143424:	bf00      	nop
 8143426:	3710      	adds	r7, #16
 8143428:	46bd      	mov	sp, r7
 814342a:	bd80      	pop	{r7, pc}

0814342c <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: Pointer to MMC handle
  * @retval None
  */
__weak void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 814342c:	b480      	push	{r7}
 814342e:	b083      	sub	sp, #12
 8143430:	af00      	add	r7, sp, #0
 8143432:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_TxCpltCallback can be implemented in the user file
   */
}
 8143434:	bf00      	nop
 8143436:	370c      	adds	r7, #12
 8143438:	46bd      	mov	sp, r7
 814343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814343e:	4770      	bx	lr

08143440 <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8143440:	b480      	push	{r7}
 8143442:	b083      	sub	sp, #12
 8143444:	af00      	add	r7, sp, #0
 8143446:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_RxCpltCallback can be implemented in the user file
   */
}
 8143448:	bf00      	nop
 814344a:	370c      	adds	r7, #12
 814344c:	46bd      	mov	sp, r7
 814344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8143452:	4770      	bx	lr

08143454 <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 8143454:	b480      	push	{r7}
 8143456:	b083      	sub	sp, #12
 8143458:	af00      	add	r7, sp, #0
 814345a:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 814345c:	bf00      	nop
 814345e:	370c      	adds	r7, #12
 8143460:	46bd      	mov	sp, r7
 8143462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8143466:	4770      	bx	lr

08143468 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8143468:	b580      	push	{r7, lr}
 814346a:	b084      	sub	sp, #16
 814346c:	af00      	add	r7, sp, #0
 814346e:	6078      	str	r0, [r7, #4]
 8143470:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8143472:	2300      	movs	r3, #0
 8143474:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8143476:	687b      	ldr	r3, [r7, #4]
 8143478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 814347a:	0f9b      	lsrs	r3, r3, #30
 814347c:	b2da      	uxtb	r2, r3
 814347e:	683b      	ldr	r3, [r7, #0]
 8143480:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8143482:	687b      	ldr	r3, [r7, #4]
 8143484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8143486:	0e9b      	lsrs	r3, r3, #26
 8143488:	b2db      	uxtb	r3, r3
 814348a:	f003 030f 	and.w	r3, r3, #15
 814348e:	b2da      	uxtb	r2, r3
 8143490:	683b      	ldr	r3, [r7, #0]
 8143492:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8143494:	687b      	ldr	r3, [r7, #4]
 8143496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8143498:	0e1b      	lsrs	r3, r3, #24
 814349a:	b2db      	uxtb	r3, r3
 814349c:	f003 0303 	and.w	r3, r3, #3
 81434a0:	b2da      	uxtb	r2, r3
 81434a2:	683b      	ldr	r3, [r7, #0]
 81434a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81434a6:	687b      	ldr	r3, [r7, #4]
 81434a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81434aa:	0c1b      	lsrs	r3, r3, #16
 81434ac:	b2da      	uxtb	r2, r3
 81434ae:	683b      	ldr	r3, [r7, #0]
 81434b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 81434b2:	687b      	ldr	r3, [r7, #4]
 81434b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81434b6:	0a1b      	lsrs	r3, r3, #8
 81434b8:	b2da      	uxtb	r2, r3
 81434ba:	683b      	ldr	r3, [r7, #0]
 81434bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 81434be:	687b      	ldr	r3, [r7, #4]
 81434c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81434c2:	b2da      	uxtb	r2, r3
 81434c4:	683b      	ldr	r3, [r7, #0]
 81434c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 81434c8:	687b      	ldr	r3, [r7, #4]
 81434ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81434cc:	0d1b      	lsrs	r3, r3, #20
 81434ce:	b29a      	uxth	r2, r3
 81434d0:	683b      	ldr	r3, [r7, #0]
 81434d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 81434d4:	687b      	ldr	r3, [r7, #4]
 81434d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81434d8:	0c1b      	lsrs	r3, r3, #16
 81434da:	b2db      	uxtb	r3, r3
 81434dc:	f003 030f 	and.w	r3, r3, #15
 81434e0:	b2da      	uxtb	r2, r3
 81434e2:	683b      	ldr	r3, [r7, #0]
 81434e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 81434e6:	687b      	ldr	r3, [r7, #4]
 81434e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81434ea:	0bdb      	lsrs	r3, r3, #15
 81434ec:	b2db      	uxtb	r3, r3
 81434ee:	f003 0301 	and.w	r3, r3, #1
 81434f2:	b2da      	uxtb	r2, r3
 81434f4:	683b      	ldr	r3, [r7, #0]
 81434f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 81434f8:	687b      	ldr	r3, [r7, #4]
 81434fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81434fc:	0b9b      	lsrs	r3, r3, #14
 81434fe:	b2db      	uxtb	r3, r3
 8143500:	f003 0301 	and.w	r3, r3, #1
 8143504:	b2da      	uxtb	r2, r3
 8143506:	683b      	ldr	r3, [r7, #0]
 8143508:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 814350a:	687b      	ldr	r3, [r7, #4]
 814350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 814350e:	0b5b      	lsrs	r3, r3, #13
 8143510:	b2db      	uxtb	r3, r3
 8143512:	f003 0301 	and.w	r3, r3, #1
 8143516:	b2da      	uxtb	r2, r3
 8143518:	683b      	ldr	r3, [r7, #0]
 814351a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 814351c:	687b      	ldr	r3, [r7, #4]
 814351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8143520:	0b1b      	lsrs	r3, r3, #12
 8143522:	b2db      	uxtb	r3, r3
 8143524:	f003 0301 	and.w	r3, r3, #1
 8143528:	b2da      	uxtb	r2, r3
 814352a:	683b      	ldr	r3, [r7, #0]
 814352c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 814352e:	683b      	ldr	r3, [r7, #0]
 8143530:	2200      	movs	r2, #0
 8143532:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8143534:	f107 010c 	add.w	r1, r7, #12
 8143538:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 814353c:	22d4      	movs	r2, #212	@ 0xd4
 814353e:	6878      	ldr	r0, [r7, #4]
 8143540:	f000 fc4c 	bl	8143ddc <MMC_ReadExtCSD>
 8143544:	4603      	mov	r3, r0
 8143546:	2b00      	cmp	r3, #0
 8143548:	d001      	beq.n	814354e <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 814354a:	2301      	movs	r3, #1
 814354c:	e129      	b.n	81437a2 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 814354e:	687b      	ldr	r3, [r7, #4]
 8143550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8143552:	2b00      	cmp	r3, #0
 8143554:	d163      	bne.n	814361e <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8143556:	687b      	ldr	r3, [r7, #4]
 8143558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 814355a:	009a      	lsls	r2, r3, #2
 814355c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8143560:	4013      	ands	r3, r2
 8143562:	687a      	ldr	r2, [r7, #4]
 8143564:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8143566:	0f92      	lsrs	r2, r2, #30
 8143568:	431a      	orrs	r2, r3
 814356a:	683b      	ldr	r3, [r7, #0]
 814356c:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 814356e:	687b      	ldr	r3, [r7, #4]
 8143570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8143572:	0edb      	lsrs	r3, r3, #27
 8143574:	b2db      	uxtb	r3, r3
 8143576:	f003 0307 	and.w	r3, r3, #7
 814357a:	b2da      	uxtb	r2, r3
 814357c:	683b      	ldr	r3, [r7, #0]
 814357e:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8143580:	687b      	ldr	r3, [r7, #4]
 8143582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8143584:	0e1b      	lsrs	r3, r3, #24
 8143586:	b2db      	uxtb	r3, r3
 8143588:	f003 0307 	and.w	r3, r3, #7
 814358c:	b2da      	uxtb	r2, r3
 814358e:	683b      	ldr	r3, [r7, #0]
 8143590:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8143592:	687b      	ldr	r3, [r7, #4]
 8143594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8143596:	0d5b      	lsrs	r3, r3, #21
 8143598:	b2db      	uxtb	r3, r3
 814359a:	f003 0307 	and.w	r3, r3, #7
 814359e:	b2da      	uxtb	r2, r3
 81435a0:	683b      	ldr	r3, [r7, #0]
 81435a2:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 81435a4:	687b      	ldr	r3, [r7, #4]
 81435a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81435a8:	0c9b      	lsrs	r3, r3, #18
 81435aa:	b2db      	uxtb	r3, r3
 81435ac:	f003 0307 	and.w	r3, r3, #7
 81435b0:	b2da      	uxtb	r2, r3
 81435b2:	683b      	ldr	r3, [r7, #0]
 81435b4:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 81435b6:	687b      	ldr	r3, [r7, #4]
 81435b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81435ba:	0bdb      	lsrs	r3, r3, #15
 81435bc:	b2db      	uxtb	r3, r3
 81435be:	f003 0307 	and.w	r3, r3, #7
 81435c2:	b2da      	uxtb	r2, r3
 81435c4:	683b      	ldr	r3, [r7, #0]
 81435c6:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81435c8:	683b      	ldr	r3, [r7, #0]
 81435ca:	691b      	ldr	r3, [r3, #16]
 81435cc:	1c5a      	adds	r2, r3, #1
 81435ce:	687b      	ldr	r3, [r7, #4]
 81435d0:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 81435d2:	683b      	ldr	r3, [r7, #0]
 81435d4:	7e1b      	ldrb	r3, [r3, #24]
 81435d6:	b2db      	uxtb	r3, r3
 81435d8:	f003 0307 	and.w	r3, r3, #7
 81435dc:	3302      	adds	r3, #2
 81435de:	2201      	movs	r2, #1
 81435e0:	fa02 f303 	lsl.w	r3, r2, r3
 81435e4:	687a      	ldr	r2, [r7, #4]
 81435e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81435e8:	fb03 f202 	mul.w	r2, r3, r2
 81435ec:	687b      	ldr	r3, [r7, #4]
 81435ee:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 81435f0:	683b      	ldr	r3, [r7, #0]
 81435f2:	7a1b      	ldrb	r3, [r3, #8]
 81435f4:	b2db      	uxtb	r3, r3
 81435f6:	f003 030f 	and.w	r3, r3, #15
 81435fa:	2201      	movs	r2, #1
 81435fc:	409a      	lsls	r2, r3
 81435fe:	687b      	ldr	r3, [r7, #4]
 8143600:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8143602:	687b      	ldr	r3, [r7, #4]
 8143604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8143606:	687a      	ldr	r2, [r7, #4]
 8143608:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 814360a:	0a52      	lsrs	r2, r2, #9
 814360c:	fb03 f202 	mul.w	r2, r3, r2
 8143610:	687b      	ldr	r3, [r7, #4]
 8143612:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8143614:	687b      	ldr	r3, [r7, #4]
 8143616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 814361a:	655a      	str	r2, [r3, #84]	@ 0x54
 814361c:	e023      	b.n	8143666 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 814361e:	687b      	ldr	r3, [r7, #4]
 8143620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8143622:	2b01      	cmp	r3, #1
 8143624:	d10f      	bne.n	8143646 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8143626:	68fa      	ldr	r2, [r7, #12]
 8143628:	687b      	ldr	r3, [r7, #4]
 814362a:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 814362c:	687b      	ldr	r3, [r7, #4]
 814362e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8143630:	687b      	ldr	r3, [r7, #4]
 8143632:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8143634:	687b      	ldr	r3, [r7, #4]
 8143636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 814363a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 814363c:	687b      	ldr	r3, [r7, #4]
 814363e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8143640:	687b      	ldr	r3, [r7, #4]
 8143642:	655a      	str	r2, [r3, #84]	@ 0x54
 8143644:	e00f      	b.n	8143666 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143646:	687b      	ldr	r3, [r7, #4]
 8143648:	681b      	ldr	r3, [r3, #0]
 814364a:	4a58      	ldr	r2, [pc, #352]	@ (81437ac <HAL_MMC_GetCardCSD+0x344>)
 814364c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 814364e:	687b      	ldr	r3, [r7, #4]
 8143650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143652:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8143656:	687b      	ldr	r3, [r7, #4]
 8143658:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 814365a:	687b      	ldr	r3, [r7, #4]
 814365c:	2201      	movs	r2, #1
 814365e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8143662:	2301      	movs	r3, #1
 8143664:	e09d      	b.n	81437a2 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8143666:	687b      	ldr	r3, [r7, #4]
 8143668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 814366a:	0b9b      	lsrs	r3, r3, #14
 814366c:	b2db      	uxtb	r3, r3
 814366e:	f003 0301 	and.w	r3, r3, #1
 8143672:	b2da      	uxtb	r2, r3
 8143674:	683b      	ldr	r3, [r7, #0]
 8143676:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8143678:	687b      	ldr	r3, [r7, #4]
 814367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 814367c:	09db      	lsrs	r3, r3, #7
 814367e:	b2db      	uxtb	r3, r3
 8143680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8143684:	b2da      	uxtb	r2, r3
 8143686:	683b      	ldr	r3, [r7, #0]
 8143688:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 814368a:	687b      	ldr	r3, [r7, #4]
 814368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 814368e:	b2db      	uxtb	r3, r3
 8143690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8143694:	b2da      	uxtb	r2, r3
 8143696:	683b      	ldr	r3, [r7, #0]
 8143698:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 814369a:	687b      	ldr	r3, [r7, #4]
 814369c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 814369e:	0fdb      	lsrs	r3, r3, #31
 81436a0:	b2da      	uxtb	r2, r3
 81436a2:	683b      	ldr	r3, [r7, #0]
 81436a4:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 81436a6:	687b      	ldr	r3, [r7, #4]
 81436a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81436aa:	0f5b      	lsrs	r3, r3, #29
 81436ac:	b2db      	uxtb	r3, r3
 81436ae:	f003 0303 	and.w	r3, r3, #3
 81436b2:	b2da      	uxtb	r2, r3
 81436b4:	683b      	ldr	r3, [r7, #0]
 81436b6:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 81436b8:	687b      	ldr	r3, [r7, #4]
 81436ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81436bc:	0e9b      	lsrs	r3, r3, #26
 81436be:	b2db      	uxtb	r3, r3
 81436c0:	f003 0307 	and.w	r3, r3, #7
 81436c4:	b2da      	uxtb	r2, r3
 81436c6:	683b      	ldr	r3, [r7, #0]
 81436c8:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 81436ca:	687b      	ldr	r3, [r7, #4]
 81436cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81436ce:	0d9b      	lsrs	r3, r3, #22
 81436d0:	b2db      	uxtb	r3, r3
 81436d2:	f003 030f 	and.w	r3, r3, #15
 81436d6:	b2da      	uxtb	r2, r3
 81436d8:	683b      	ldr	r3, [r7, #0]
 81436da:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 81436dc:	687b      	ldr	r3, [r7, #4]
 81436de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81436e0:	0d5b      	lsrs	r3, r3, #21
 81436e2:	b2db      	uxtb	r3, r3
 81436e4:	f003 0301 	and.w	r3, r3, #1
 81436e8:	b2da      	uxtb	r2, r3
 81436ea:	683b      	ldr	r3, [r7, #0]
 81436ec:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81436f0:	683b      	ldr	r3, [r7, #0]
 81436f2:	2200      	movs	r2, #0
 81436f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 81436f8:	687b      	ldr	r3, [r7, #4]
 81436fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81436fc:	0c1b      	lsrs	r3, r3, #16
 81436fe:	b2db      	uxtb	r3, r3
 8143700:	f003 0301 	and.w	r3, r3, #1
 8143704:	b2da      	uxtb	r2, r3
 8143706:	683b      	ldr	r3, [r7, #0]
 8143708:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 814370c:	687b      	ldr	r3, [r7, #4]
 814370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143710:	0bdb      	lsrs	r3, r3, #15
 8143712:	b2db      	uxtb	r3, r3
 8143714:	f003 0301 	and.w	r3, r3, #1
 8143718:	b2da      	uxtb	r2, r3
 814371a:	683b      	ldr	r3, [r7, #0]
 814371c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8143720:	687b      	ldr	r3, [r7, #4]
 8143722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143724:	0b9b      	lsrs	r3, r3, #14
 8143726:	b2db      	uxtb	r3, r3
 8143728:	f003 0301 	and.w	r3, r3, #1
 814372c:	b2da      	uxtb	r2, r3
 814372e:	683b      	ldr	r3, [r7, #0]
 8143730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8143734:	687b      	ldr	r3, [r7, #4]
 8143736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143738:	0b5b      	lsrs	r3, r3, #13
 814373a:	b2db      	uxtb	r3, r3
 814373c:	f003 0301 	and.w	r3, r3, #1
 8143740:	b2da      	uxtb	r2, r3
 8143742:	683b      	ldr	r3, [r7, #0]
 8143744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8143748:	687b      	ldr	r3, [r7, #4]
 814374a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 814374c:	0b1b      	lsrs	r3, r3, #12
 814374e:	b2db      	uxtb	r3, r3
 8143750:	f003 0301 	and.w	r3, r3, #1
 8143754:	b2da      	uxtb	r2, r3
 8143756:	683b      	ldr	r3, [r7, #0]
 8143758:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 814375c:	687b      	ldr	r3, [r7, #4]
 814375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143760:	0a9b      	lsrs	r3, r3, #10
 8143762:	b2db      	uxtb	r3, r3
 8143764:	f003 0303 	and.w	r3, r3, #3
 8143768:	b2da      	uxtb	r2, r3
 814376a:	683b      	ldr	r3, [r7, #0]
 814376c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8143770:	687b      	ldr	r3, [r7, #4]
 8143772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143774:	0a1b      	lsrs	r3, r3, #8
 8143776:	b2db      	uxtb	r3, r3
 8143778:	f003 0303 	and.w	r3, r3, #3
 814377c:	b2da      	uxtb	r2, r3
 814377e:	683b      	ldr	r3, [r7, #0]
 8143780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8143784:	687b      	ldr	r3, [r7, #4]
 8143786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8143788:	085b      	lsrs	r3, r3, #1
 814378a:	b2db      	uxtb	r3, r3
 814378c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8143790:	b2da      	uxtb	r2, r3
 8143792:	683b      	ldr	r3, [r7, #0]
 8143794:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8143798:	683b      	ldr	r3, [r7, #0]
 814379a:	2201      	movs	r2, #1
 814379c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 81437a0:	2300      	movs	r3, #0
}
 81437a2:	4618      	mov	r0, r3
 81437a4:	3710      	adds	r7, #16
 81437a6:	46bd      	mov	sp, r7
 81437a8:	bd80      	pop	{r7, pc}
 81437aa:	bf00      	nop
 81437ac:	1fe00fff 	.word	0x1fe00fff

081437b0 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 81437b0:	b580      	push	{r7, lr}
 81437b2:	b08e      	sub	sp, #56	@ 0x38
 81437b4:	af00      	add	r7, sp, #0
 81437b6:	60f8      	str	r0, [r7, #12]
 81437b8:	60b9      	str	r1, [r7, #8]
 81437ba:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81437bc:	f7ff f8d0 	bl	8142960 <HAL_GetTick>
 81437c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 81437c2:	68bb      	ldr	r3, [r7, #8]
 81437c4:	2b00      	cmp	r3, #0
 81437c6:	d107      	bne.n	81437d8 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 81437c8:	68fb      	ldr	r3, [r7, #12]
 81437ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81437cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81437d0:	68fb      	ldr	r3, [r7, #12]
 81437d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81437d4:	2301      	movs	r3, #1
 81437d6:	e0de      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 81437d8:	68fb      	ldr	r3, [r7, #12]
 81437da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81437de:	b2db      	uxtb	r3, r3
 81437e0:	2b01      	cmp	r3, #1
 81437e2:	f040 80d7 	bne.w	8143994 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 81437e6:	68fb      	ldr	r3, [r7, #12]
 81437e8:	2200      	movs	r2, #0
 81437ea:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 81437ec:	68fb      	ldr	r3, [r7, #12]
 81437ee:	2203      	movs	r2, #3
 81437f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 81437f4:	68fb      	ldr	r3, [r7, #12]
 81437f6:	681b      	ldr	r3, [r3, #0]
 81437f8:	2200      	movs	r2, #0
 81437fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 81437fc:	68bb      	ldr	r3, [r7, #8]
 81437fe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8143800:	f04f 33ff 	mov.w	r3, #4294967295
 8143804:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 8143806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814380a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 814380c:	2390      	movs	r3, #144	@ 0x90
 814380e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8143810:	2302      	movs	r3, #2
 8143812:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8143814:	2300      	movs	r3, #0
 8143816:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8143818:	2300      	movs	r3, #0
 814381a:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 814381c:	68fb      	ldr	r3, [r7, #12]
 814381e:	681b      	ldr	r3, [r3, #0]
 8143820:	f107 0210 	add.w	r2, r7, #16
 8143824:	4611      	mov	r1, r2
 8143826:	4618      	mov	r0, r3
 8143828:	f006 fa3a 	bl	8149ca0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 814382c:	68fb      	ldr	r3, [r7, #12]
 814382e:	681b      	ldr	r3, [r3, #0]
 8143830:	68da      	ldr	r2, [r3, #12]
 8143832:	68fb      	ldr	r3, [r7, #12]
 8143834:	681b      	ldr	r3, [r3, #0]
 8143836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 814383a:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 814383c:	68fb      	ldr	r3, [r7, #12]
 814383e:	681b      	ldr	r3, [r3, #0]
 8143840:	2100      	movs	r1, #0
 8143842:	4618      	mov	r0, r3
 8143844:	f006 fbc3 	bl	8149fce <SDMMC_CmdSendEXTCSD>
 8143848:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 814384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 814384c:	2b00      	cmp	r3, #0
 814384e:	d045      	beq.n	81438dc <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143850:	68fb      	ldr	r3, [r7, #12]
 8143852:	681b      	ldr	r3, [r3, #0]
 8143854:	4a52      	ldr	r2, [pc, #328]	@ (81439a0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8143856:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8143858:	68fb      	ldr	r3, [r7, #12]
 814385a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 814385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 814385e:	431a      	orrs	r2, r3
 8143860:	68fb      	ldr	r3, [r7, #12]
 8143862:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8143864:	68fb      	ldr	r3, [r7, #12]
 8143866:	2201      	movs	r2, #1
 8143868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 814386c:	2301      	movs	r3, #1
 814386e:	e092      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8143870:	68fb      	ldr	r3, [r7, #12]
 8143872:	681b      	ldr	r3, [r3, #0]
 8143874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 814387a:	2b00      	cmp	r3, #0
 814387c:	d013      	beq.n	81438a6 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 814387e:	2300      	movs	r3, #0
 8143880:	637b      	str	r3, [r7, #52]	@ 0x34
 8143882:	e00d      	b.n	81438a0 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8143884:	68fb      	ldr	r3, [r7, #12]
 8143886:	681b      	ldr	r3, [r3, #0]
 8143888:	4618      	mov	r0, r3
 814388a:	f006 f981 	bl	8149b90 <SDMMC_ReadFIFO>
 814388e:	4602      	mov	r2, r0
 8143890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143892:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8143894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143896:	3304      	adds	r3, #4
 8143898:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 814389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814389c:	3301      	adds	r3, #1
 814389e:	637b      	str	r3, [r7, #52]	@ 0x34
 81438a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81438a2:	2b07      	cmp	r3, #7
 81438a4:	d9ee      	bls.n	8143884 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81438a6:	f7ff f85b 	bl	8142960 <HAL_GetTick>
 81438aa:	4602      	mov	r2, r0
 81438ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81438ae:	1ad3      	subs	r3, r2, r3
 81438b0:	687a      	ldr	r2, [r7, #4]
 81438b2:	429a      	cmp	r2, r3
 81438b4:	d902      	bls.n	81438bc <HAL_MMC_GetCardExtCSD+0x10c>
 81438b6:	687b      	ldr	r3, [r7, #4]
 81438b8:	2b00      	cmp	r3, #0
 81438ba:	d10f      	bne.n	81438dc <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81438bc:	68fb      	ldr	r3, [r7, #12]
 81438be:	681b      	ldr	r3, [r3, #0]
 81438c0:	4a37      	ldr	r2, [pc, #220]	@ (81439a0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81438c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 81438c4:	68fb      	ldr	r3, [r7, #12]
 81438c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81438c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81438cc:	68fb      	ldr	r3, [r7, #12]
 81438ce:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 81438d0:	68fb      	ldr	r3, [r7, #12]
 81438d2:	2201      	movs	r2, #1
 81438d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 81438d8:	2303      	movs	r3, #3
 81438da:	e05c      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 81438dc:	68fb      	ldr	r3, [r7, #12]
 81438de:	681b      	ldr	r3, [r3, #0]
 81438e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81438e2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 81438e6:	2b00      	cmp	r3, #0
 81438e8:	d0c2      	beq.n	8143870 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 81438ea:	68fb      	ldr	r3, [r7, #12]
 81438ec:	681b      	ldr	r3, [r3, #0]
 81438ee:	68da      	ldr	r2, [r3, #12]
 81438f0:	68fb      	ldr	r3, [r7, #12]
 81438f2:	681b      	ldr	r3, [r3, #0]
 81438f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81438f8:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 81438fa:	68fb      	ldr	r3, [r7, #12]
 81438fc:	681b      	ldr	r3, [r3, #0]
 81438fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143900:	f003 0308 	and.w	r3, r3, #8
 8143904:	2b00      	cmp	r3, #0
 8143906:	d00f      	beq.n	8143928 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143908:	68fb      	ldr	r3, [r7, #12]
 814390a:	681b      	ldr	r3, [r3, #0]
 814390c:	4a24      	ldr	r2, [pc, #144]	@ (81439a0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 814390e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8143910:	68fb      	ldr	r3, [r7, #12]
 8143912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143914:	f043 0208 	orr.w	r2, r3, #8
 8143918:	68fb      	ldr	r3, [r7, #12]
 814391a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 814391c:	68fb      	ldr	r3, [r7, #12]
 814391e:	2201      	movs	r2, #1
 8143920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8143924:	2301      	movs	r3, #1
 8143926:	e036      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8143928:	68fb      	ldr	r3, [r7, #12]
 814392a:	681b      	ldr	r3, [r3, #0]
 814392c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814392e:	f003 0302 	and.w	r3, r3, #2
 8143932:	2b00      	cmp	r3, #0
 8143934:	d00f      	beq.n	8143956 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143936:	68fb      	ldr	r3, [r7, #12]
 8143938:	681b      	ldr	r3, [r3, #0]
 814393a:	4a19      	ldr	r2, [pc, #100]	@ (81439a0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 814393c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 814393e:	68fb      	ldr	r3, [r7, #12]
 8143940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143942:	f043 0202 	orr.w	r2, r3, #2
 8143946:	68fb      	ldr	r3, [r7, #12]
 8143948:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 814394a:	68fb      	ldr	r3, [r7, #12]
 814394c:	2201      	movs	r2, #1
 814394e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8143952:	2301      	movs	r3, #1
 8143954:	e01f      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8143956:	68fb      	ldr	r3, [r7, #12]
 8143958:	681b      	ldr	r3, [r3, #0]
 814395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814395c:	f003 0320 	and.w	r3, r3, #32
 8143960:	2b00      	cmp	r3, #0
 8143962:	d00f      	beq.n	8143984 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143964:	68fb      	ldr	r3, [r7, #12]
 8143966:	681b      	ldr	r3, [r3, #0]
 8143968:	4a0d      	ldr	r2, [pc, #52]	@ (81439a0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 814396a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 814396c:	68fb      	ldr	r3, [r7, #12]
 814396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143970:	f043 0220 	orr.w	r2, r3, #32
 8143974:	68fb      	ldr	r3, [r7, #12]
 8143976:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8143978:	68fb      	ldr	r3, [r7, #12]
 814397a:	2201      	movs	r2, #1
 814397c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8143980:	2301      	movs	r3, #1
 8143982:	e008      	b.n	8143996 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8143984:	68fb      	ldr	r3, [r7, #12]
 8143986:	681b      	ldr	r3, [r3, #0]
 8143988:	4a06      	ldr	r2, [pc, #24]	@ (81439a4 <HAL_MMC_GetCardExtCSD+0x1f4>)
 814398a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 814398c:	68fb      	ldr	r3, [r7, #12]
 814398e:	2201      	movs	r2, #1
 8143990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8143994:	2300      	movs	r3, #0
}
 8143996:	4618      	mov	r0, r3
 8143998:	3738      	adds	r7, #56	@ 0x38
 814399a:	46bd      	mov	sp, r7
 814399c:	bd80      	pop	{r7, pc}
 814399e:	bf00      	nop
 81439a0:	1fe00fff 	.word	0x1fe00fff
 81439a4:	18000f3a 	.word	0x18000f3a

081439a8 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 81439a8:	b5b0      	push	{r4, r5, r7, lr}
 81439aa:	b08c      	sub	sp, #48	@ 0x30
 81439ac:	af02      	add	r7, sp, #8
 81439ae:	6078      	str	r0, [r7, #4]
 81439b0:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 81439b2:	2300      	movs	r3, #0
 81439b4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 81439b6:	687b      	ldr	r3, [r7, #4]
 81439b8:	2203      	movs	r2, #3
 81439ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 81439be:	687b      	ldr	r3, [r7, #4]
 81439c0:	681b      	ldr	r3, [r3, #0]
 81439c2:	685b      	ldr	r3, [r3, #4]
 81439c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81439c8:	2b00      	cmp	r3, #0
 81439ca:	d014      	beq.n	81439f6 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 81439cc:	687b      	ldr	r3, [r7, #4]
 81439ce:	681b      	ldr	r3, [r3, #0]
 81439d0:	685b      	ldr	r3, [r3, #4]
 81439d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81439d6:	2b00      	cmp	r3, #0
 81439d8:	d006      	beq.n	81439e8 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 81439da:	2204      	movs	r2, #4
 81439dc:	6839      	ldr	r1, [r7, #0]
 81439de:	6878      	ldr	r0, [r7, #4]
 81439e0:	f000 fb80 	bl	81440e4 <MMC_PwrClassUpdate>
 81439e4:	6238      	str	r0, [r7, #32]
 81439e6:	e00c      	b.n	8143a02 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 81439e8:	2202      	movs	r2, #2
 81439ea:	6839      	ldr	r1, [r7, #0]
 81439ec:	6878      	ldr	r0, [r7, #4]
 81439ee:	f000 fb79 	bl	81440e4 <MMC_PwrClassUpdate>
 81439f2:	6238      	str	r0, [r7, #32]
 81439f4:	e005      	b.n	8143a02 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 81439f6:	2201      	movs	r2, #1
 81439f8:	6839      	ldr	r1, [r7, #0]
 81439fa:	6878      	ldr	r0, [r7, #4]
 81439fc:	f000 fb72 	bl	81440e4 <MMC_PwrClassUpdate>
 8143a00:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8143a02:	6a3b      	ldr	r3, [r7, #32]
 8143a04:	2b00      	cmp	r3, #0
 8143a06:	d17b      	bne.n	8143b00 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8143a08:	683b      	ldr	r3, [r7, #0]
 8143a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8143a0e:	d107      	bne.n	8143a20 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8143a10:	687b      	ldr	r3, [r7, #4]
 8143a12:	681b      	ldr	r3, [r3, #0]
 8143a14:	4946      	ldr	r1, [pc, #280]	@ (8143b30 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8143a16:	4618      	mov	r0, r3
 8143a18:	f006 fab6 	bl	8149f88 <SDMMC_CmdSwitch>
 8143a1c:	6238      	str	r0, [r7, #32]
 8143a1e:	e019      	b.n	8143a54 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8143a20:	683b      	ldr	r3, [r7, #0]
 8143a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8143a26:	d107      	bne.n	8143a38 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8143a28:	687b      	ldr	r3, [r7, #4]
 8143a2a:	681b      	ldr	r3, [r3, #0]
 8143a2c:	4941      	ldr	r1, [pc, #260]	@ (8143b34 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8143a2e:	4618      	mov	r0, r3
 8143a30:	f006 faaa 	bl	8149f88 <SDMMC_CmdSwitch>
 8143a34:	6238      	str	r0, [r7, #32]
 8143a36:	e00d      	b.n	8143a54 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8143a38:	683b      	ldr	r3, [r7, #0]
 8143a3a:	2b00      	cmp	r3, #0
 8143a3c:	d107      	bne.n	8143a4e <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8143a3e:	687b      	ldr	r3, [r7, #4]
 8143a40:	681b      	ldr	r3, [r3, #0]
 8143a42:	493d      	ldr	r1, [pc, #244]	@ (8143b38 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8143a44:	4618      	mov	r0, r3
 8143a46:	f006 fa9f 	bl	8149f88 <SDMMC_CmdSwitch>
 8143a4a:	6238      	str	r0, [r7, #32]
 8143a4c:	e002      	b.n	8143a54 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8143a4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8143a52:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8143a54:	6a3b      	ldr	r3, [r7, #32]
 8143a56:	2b00      	cmp	r3, #0
 8143a58:	d152      	bne.n	8143b00 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8143a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8143a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8143a60:	687b      	ldr	r3, [r7, #4]
 8143a62:	681a      	ldr	r2, [r3, #0]
 8143a64:	687b      	ldr	r3, [r7, #4]
 8143a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143a68:	041b      	lsls	r3, r3, #16
 8143a6a:	4619      	mov	r1, r3
 8143a6c:	4610      	mov	r0, r2
 8143a6e:	f006 fa48 	bl	8149f02 <SDMMC_CmdSendStatus>
 8143a72:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8143a74:	6a3b      	ldr	r3, [r7, #32]
 8143a76:	2b00      	cmp	r3, #0
 8143a78:	d112      	bne.n	8143aa0 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8143a7a:	687b      	ldr	r3, [r7, #4]
 8143a7c:	681b      	ldr	r3, [r3, #0]
 8143a7e:	2100      	movs	r1, #0
 8143a80:	4618      	mov	r0, r3
 8143a82:	f006 f8fa 	bl	8149c7a <SDMMC_GetResponse>
 8143a86:	61f8      	str	r0, [r7, #28]
        count--;
 8143a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8143a8a:	3b01      	subs	r3, #1
 8143a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8143a8e:	69fb      	ldr	r3, [r7, #28]
 8143a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8143a94:	2b00      	cmp	r3, #0
 8143a96:	d104      	bne.n	8143aa2 <HAL_MMC_ConfigWideBusOperation+0xfa>
 8143a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8143a9a:	2b00      	cmp	r3, #0
 8143a9c:	d1e0      	bne.n	8143a60 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8143a9e:	e000      	b.n	8143aa2 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8143aa0:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8143aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8143aa4:	2b00      	cmp	r3, #0
 8143aa6:	d025      	beq.n	8143af4 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8143aa8:	6a3b      	ldr	r3, [r7, #32]
 8143aaa:	2b00      	cmp	r3, #0
 8143aac:	d122      	bne.n	8143af4 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8143aae:	69fb      	ldr	r3, [r7, #28]
 8143ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8143ab4:	2b00      	cmp	r3, #0
 8143ab6:	d003      	beq.n	8143ac0 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8143ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8143abc:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8143abe:	e01f      	b.n	8143b00 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8143ac0:	687b      	ldr	r3, [r7, #4]
 8143ac2:	f107 0408 	add.w	r4, r7, #8
 8143ac6:	1d1d      	adds	r5, r3, #4
 8143ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8143aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8143acc:	682b      	ldr	r3, [r5, #0]
 8143ace:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8143ad0:	683b      	ldr	r3, [r7, #0]
 8143ad2:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8143ad4:	687b      	ldr	r3, [r7, #4]
 8143ad6:	681c      	ldr	r4, [r3, #0]
 8143ad8:	466a      	mov	r2, sp
 8143ada:	f107 0314 	add.w	r3, r7, #20
 8143ade:	e893 0003 	ldmia.w	r3, {r0, r1}
 8143ae2:	e882 0003 	stmia.w	r2, {r0, r1}
 8143ae6:	f107 0308 	add.w	r3, r7, #8
 8143aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8143aec:	4620      	mov	r0, r4
 8143aee:	f006 f825 	bl	8149b3c <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8143af2:	e005      	b.n	8143b00 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8143af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8143af6:	2b00      	cmp	r3, #0
 8143af8:	d102      	bne.n	8143b00 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8143afa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8143afe:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8143b00:	687b      	ldr	r3, [r7, #4]
 8143b02:	2201      	movs	r2, #1
 8143b04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8143b08:	6a3b      	ldr	r3, [r7, #32]
 8143b0a:	2b00      	cmp	r3, #0
 8143b0c:	d00b      	beq.n	8143b26 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143b0e:	687b      	ldr	r3, [r7, #4]
 8143b10:	681b      	ldr	r3, [r3, #0]
 8143b12:	4a0a      	ldr	r2, [pc, #40]	@ (8143b3c <HAL_MMC_ConfigWideBusOperation+0x194>)
 8143b14:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8143b16:	687b      	ldr	r3, [r7, #4]
 8143b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143b1a:	6a3b      	ldr	r3, [r7, #32]
 8143b1c:	431a      	orrs	r2, r3
 8143b1e:	687b      	ldr	r3, [r7, #4]
 8143b20:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8143b22:	2301      	movs	r3, #1
 8143b24:	e000      	b.n	8143b28 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8143b26:	2300      	movs	r3, #0
}
 8143b28:	4618      	mov	r0, r3
 8143b2a:	3728      	adds	r7, #40	@ 0x28
 8143b2c:	46bd      	mov	sp, r7
 8143b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8143b30:	03b70200 	.word	0x03b70200
 8143b34:	03b70100 	.word	0x03b70100
 8143b38:	03b70000 	.word	0x03b70000
 8143b3c:	1fe00fff 	.word	0x1fe00fff

08143b40 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8143b40:	b5b0      	push	{r4, r5, r7, lr}
 8143b42:	b096      	sub	sp, #88	@ 0x58
 8143b44:	af02      	add	r7, sp, #8
 8143b46:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8143b48:	2302      	movs	r3, #2
 8143b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8143b4e:	687b      	ldr	r3, [r7, #4]
 8143b50:	681b      	ldr	r3, [r3, #0]
 8143b52:	4618      	mov	r0, r3
 8143b54:	f006 f84b 	bl	8149bee <SDMMC_GetPowerState>
 8143b58:	4603      	mov	r3, r0
 8143b5a:	2b00      	cmp	r3, #0
 8143b5c:	d102      	bne.n	8143b64 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8143b5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8143b62:	e0e6      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8143b64:	687b      	ldr	r3, [r7, #4]
 8143b66:	681b      	ldr	r3, [r3, #0]
 8143b68:	4618      	mov	r0, r3
 8143b6a:	f006 f966 	bl	8149e3a <SDMMC_CmdSendCID>
 8143b6e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143b72:	2b00      	cmp	r3, #0
 8143b74:	d001      	beq.n	8143b7a <MMC_InitCard+0x3a>
  {
    return errorstate;
 8143b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143b78:	e0db      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8143b7a:	687b      	ldr	r3, [r7, #4]
 8143b7c:	681b      	ldr	r3, [r3, #0]
 8143b7e:	2100      	movs	r1, #0
 8143b80:	4618      	mov	r0, r3
 8143b82:	f006 f87a 	bl	8149c7a <SDMMC_GetResponse>
 8143b86:	4602      	mov	r2, r0
 8143b88:	687b      	ldr	r3, [r7, #4]
 8143b8a:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8143b8c:	687b      	ldr	r3, [r7, #4]
 8143b8e:	681b      	ldr	r3, [r3, #0]
 8143b90:	2104      	movs	r1, #4
 8143b92:	4618      	mov	r0, r3
 8143b94:	f006 f871 	bl	8149c7a <SDMMC_GetResponse>
 8143b98:	4602      	mov	r2, r0
 8143b9a:	687b      	ldr	r3, [r7, #4]
 8143b9c:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8143b9e:	687b      	ldr	r3, [r7, #4]
 8143ba0:	681b      	ldr	r3, [r3, #0]
 8143ba2:	2108      	movs	r1, #8
 8143ba4:	4618      	mov	r0, r3
 8143ba6:	f006 f868 	bl	8149c7a <SDMMC_GetResponse>
 8143baa:	4602      	mov	r2, r0
 8143bac:	687b      	ldr	r3, [r7, #4]
 8143bae:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8143bb0:	687b      	ldr	r3, [r7, #4]
 8143bb2:	681b      	ldr	r3, [r3, #0]
 8143bb4:	210c      	movs	r1, #12
 8143bb6:	4618      	mov	r0, r3
 8143bb8:	f006 f85f 	bl	8149c7a <SDMMC_GetResponse>
 8143bbc:	4602      	mov	r2, r0
 8143bbe:	687b      	ldr	r3, [r7, #4]
 8143bc0:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8143bc2:	687b      	ldr	r3, [r7, #4]
 8143bc4:	681b      	ldr	r3, [r3, #0]
 8143bc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8143bca:	4611      	mov	r1, r2
 8143bcc:	4618      	mov	r0, r3
 8143bce:	f006 f973 	bl	8149eb8 <SDMMC_CmdSetRelAddMmc>
 8143bd2:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143bd6:	2b00      	cmp	r3, #0
 8143bd8:	d001      	beq.n	8143bde <MMC_InitCard+0x9e>
  {
    return errorstate;
 8143bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143bdc:	e0a9      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8143bde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8143be2:	687b      	ldr	r3, [r7, #4]
 8143be4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8143be6:	687b      	ldr	r3, [r7, #4]
 8143be8:	681a      	ldr	r2, [r3, #0]
 8143bea:	687b      	ldr	r3, [r7, #4]
 8143bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143bee:	041b      	lsls	r3, r3, #16
 8143bf0:	4619      	mov	r1, r3
 8143bf2:	4610      	mov	r0, r2
 8143bf4:	f006 f940 	bl	8149e78 <SDMMC_CmdSendCSD>
 8143bf8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143bfc:	2b00      	cmp	r3, #0
 8143bfe:	d001      	beq.n	8143c04 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8143c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143c02:	e096      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8143c04:	687b      	ldr	r3, [r7, #4]
 8143c06:	681b      	ldr	r3, [r3, #0]
 8143c08:	2100      	movs	r1, #0
 8143c0a:	4618      	mov	r0, r3
 8143c0c:	f006 f835 	bl	8149c7a <SDMMC_GetResponse>
 8143c10:	4602      	mov	r2, r0
 8143c12:	687b      	ldr	r3, [r7, #4]
 8143c14:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8143c16:	687b      	ldr	r3, [r7, #4]
 8143c18:	681b      	ldr	r3, [r3, #0]
 8143c1a:	2104      	movs	r1, #4
 8143c1c:	4618      	mov	r0, r3
 8143c1e:	f006 f82c 	bl	8149c7a <SDMMC_GetResponse>
 8143c22:	4602      	mov	r2, r0
 8143c24:	687b      	ldr	r3, [r7, #4]
 8143c26:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8143c28:	687b      	ldr	r3, [r7, #4]
 8143c2a:	681b      	ldr	r3, [r3, #0]
 8143c2c:	2108      	movs	r1, #8
 8143c2e:	4618      	mov	r0, r3
 8143c30:	f006 f823 	bl	8149c7a <SDMMC_GetResponse>
 8143c34:	4602      	mov	r2, r0
 8143c36:	687b      	ldr	r3, [r7, #4]
 8143c38:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8143c3a:	687b      	ldr	r3, [r7, #4]
 8143c3c:	681b      	ldr	r3, [r3, #0]
 8143c3e:	210c      	movs	r1, #12
 8143c40:	4618      	mov	r0, r3
 8143c42:	f006 f81a 	bl	8149c7a <SDMMC_GetResponse>
 8143c46:	4602      	mov	r2, r0
 8143c48:	687b      	ldr	r3, [r7, #4]
 8143c4a:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8143c4c:	687b      	ldr	r3, [r7, #4]
 8143c4e:	681b      	ldr	r3, [r3, #0]
 8143c50:	2104      	movs	r1, #4
 8143c52:	4618      	mov	r0, r3
 8143c54:	f006 f811 	bl	8149c7a <SDMMC_GetResponse>
 8143c58:	4603      	mov	r3, r0
 8143c5a:	0d1a      	lsrs	r2, r3, #20
 8143c5c:	687b      	ldr	r3, [r7, #4]
 8143c5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8143c60:	687b      	ldr	r3, [r7, #4]
 8143c62:	681a      	ldr	r2, [r3, #0]
 8143c64:	687b      	ldr	r3, [r7, #4]
 8143c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143c68:	041b      	lsls	r3, r3, #16
 8143c6a:	4619      	mov	r1, r3
 8143c6c:	4610      	mov	r0, r2
 8143c6e:	f006 f8a3 	bl	8149db8 <SDMMC_CmdSelDesel>
 8143c72:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143c76:	2b00      	cmp	r3, #0
 8143c78:	d001      	beq.n	8143c7e <MMC_InitCard+0x13e>
  {
    return errorstate;
 8143c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143c7c:	e059      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8143c7e:	f107 031c 	add.w	r3, r7, #28
 8143c82:	4619      	mov	r1, r3
 8143c84:	6878      	ldr	r0, [r7, #4]
 8143c86:	f7ff fbef 	bl	8143468 <HAL_MMC_GetCardCSD>
 8143c8a:	4603      	mov	r3, r0
 8143c8c:	2b00      	cmp	r3, #0
 8143c8e:	d002      	beq.n	8143c96 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8143c90:	687b      	ldr	r3, [r7, #4]
 8143c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143c94:	e04d      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8143c96:	687b      	ldr	r3, [r7, #4]
 8143c98:	681a      	ldr	r2, [r3, #0]
 8143c9a:	687b      	ldr	r3, [r7, #4]
 8143c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143c9e:	041b      	lsls	r3, r3, #16
 8143ca0:	4619      	mov	r1, r3
 8143ca2:	4610      	mov	r0, r2
 8143ca4:	f006 f92d 	bl	8149f02 <SDMMC_CmdSendStatus>
 8143ca8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143cac:	2b00      	cmp	r3, #0
 8143cae:	d005      	beq.n	8143cbc <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8143cb0:	687b      	ldr	r3, [r7, #4]
 8143cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143cb6:	431a      	orrs	r2, r3
 8143cb8:	687b      	ldr	r3, [r7, #4]
 8143cba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8143cbc:	687b      	ldr	r3, [r7, #4]
 8143cbe:	3378      	adds	r3, #120	@ 0x78
 8143cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8143cc4:	4619      	mov	r1, r3
 8143cc6:	6878      	ldr	r0, [r7, #4]
 8143cc8:	f7ff fd72 	bl	81437b0 <HAL_MMC_GetCardExtCSD>
 8143ccc:	4603      	mov	r3, r0
 8143cce:	2b00      	cmp	r3, #0
 8143cd0:	d002      	beq.n	8143cd8 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8143cd2:	687b      	ldr	r3, [r7, #4]
 8143cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143cd6:	e02c      	b.n	8143d32 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8143cd8:	687b      	ldr	r3, [r7, #4]
 8143cda:	681a      	ldr	r2, [r3, #0]
 8143cdc:	687b      	ldr	r3, [r7, #4]
 8143cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143ce0:	041b      	lsls	r3, r3, #16
 8143ce2:	4619      	mov	r1, r3
 8143ce4:	4610      	mov	r0, r2
 8143ce6:	f006 f90c 	bl	8149f02 <SDMMC_CmdSendStatus>
 8143cea:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143cee:	2b00      	cmp	r3, #0
 8143cf0:	d005      	beq.n	8143cfe <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8143cf2:	687b      	ldr	r3, [r7, #4]
 8143cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8143cf8:	431a      	orrs	r2, r3
 8143cfa:	687b      	ldr	r3, [r7, #4]
 8143cfc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8143cfe:	687b      	ldr	r3, [r7, #4]
 8143d00:	f107 0408 	add.w	r4, r7, #8
 8143d04:	1d1d      	adds	r5, r3, #4
 8143d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8143d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8143d0a:	682b      	ldr	r3, [r5, #0]
 8143d0c:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8143d0e:	2300      	movs	r3, #0
 8143d10:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8143d12:	687b      	ldr	r3, [r7, #4]
 8143d14:	681c      	ldr	r4, [r3, #0]
 8143d16:	466a      	mov	r2, sp
 8143d18:	f107 0314 	add.w	r3, r7, #20
 8143d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8143d20:	e882 0003 	stmia.w	r2, {r0, r1}
 8143d24:	f107 0308 	add.w	r3, r7, #8
 8143d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8143d2a:	4620      	mov	r0, r4
 8143d2c:	f005 ff06 	bl	8149b3c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8143d30:	2300      	movs	r3, #0
}
 8143d32:	4618      	mov	r0, r3
 8143d34:	3750      	adds	r7, #80	@ 0x50
 8143d36:	46bd      	mov	sp, r7
 8143d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08143d3c <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8143d3c:	b580      	push	{r7, lr}
 8143d3e:	b086      	sub	sp, #24
 8143d40:	af00      	add	r7, sp, #0
 8143d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8143d44:	2300      	movs	r3, #0
 8143d46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8143d48:	2300      	movs	r3, #0
 8143d4a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8143d4c:	2300      	movs	r3, #0
 8143d4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8143d50:	687b      	ldr	r3, [r7, #4]
 8143d52:	681b      	ldr	r3, [r3, #0]
 8143d54:	4618      	mov	r0, r3
 8143d56:	f006 f852 	bl	8149dfe <SDMMC_CmdGoIdleState>
 8143d5a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143d5c:	68fb      	ldr	r3, [r7, #12]
 8143d5e:	2b00      	cmp	r3, #0
 8143d60:	d027      	beq.n	8143db2 <MMC_PowerON+0x76>
  {
    return errorstate;
 8143d62:	68fb      	ldr	r3, [r7, #12]
 8143d64:	e034      	b.n	8143dd0 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8143d66:	68bb      	ldr	r3, [r7, #8]
 8143d68:	1c5a      	adds	r2, r3, #1
 8143d6a:	60ba      	str	r2, [r7, #8]
 8143d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8143d70:	4293      	cmp	r3, r2
 8143d72:	d102      	bne.n	8143d7a <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8143d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8143d78:	e02a      	b.n	8143dd0 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8143d7a:	687b      	ldr	r3, [r7, #4]
 8143d7c:	681b      	ldr	r3, [r3, #0]
 8143d7e:	4916      	ldr	r1, [pc, #88]	@ (8143dd8 <MMC_PowerON+0x9c>)
 8143d80:	4618      	mov	r0, r3
 8143d82:	f006 f8e1 	bl	8149f48 <SDMMC_CmdOpCondition>
 8143d86:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8143d88:	68fb      	ldr	r3, [r7, #12]
 8143d8a:	2b00      	cmp	r3, #0
 8143d8c:	d002      	beq.n	8143d94 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8143d8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8143d92:	e01d      	b.n	8143dd0 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8143d94:	687b      	ldr	r3, [r7, #4]
 8143d96:	681b      	ldr	r3, [r3, #0]
 8143d98:	2100      	movs	r1, #0
 8143d9a:	4618      	mov	r0, r3
 8143d9c:	f005 ff6d 	bl	8149c7a <SDMMC_GetResponse>
 8143da0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8143da2:	697b      	ldr	r3, [r7, #20]
 8143da4:	0fdb      	lsrs	r3, r3, #31
 8143da6:	2b01      	cmp	r3, #1
 8143da8:	d101      	bne.n	8143dae <MMC_PowerON+0x72>
 8143daa:	2301      	movs	r3, #1
 8143dac:	e000      	b.n	8143db0 <MMC_PowerON+0x74>
 8143dae:	2300      	movs	r3, #0
 8143db0:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8143db2:	693b      	ldr	r3, [r7, #16]
 8143db4:	2b00      	cmp	r3, #0
 8143db6:	d0d6      	beq.n	8143d66 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8143db8:	697b      	ldr	r3, [r7, #20]
 8143dba:	0e1b      	lsrs	r3, r3, #24
 8143dbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8143dbe:	d103      	bne.n	8143dc8 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8143dc0:	687b      	ldr	r3, [r7, #4]
 8143dc2:	2201      	movs	r2, #1
 8143dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8143dc6:	e002      	b.n	8143dce <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8143dc8:	687b      	ldr	r3, [r7, #4]
 8143dca:	2200      	movs	r2, #0
 8143dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8143dce:	2300      	movs	r3, #0
}
 8143dd0:	4618      	mov	r0, r3
 8143dd2:	3718      	adds	r7, #24
 8143dd4:	46bd      	mov	sp, r7
 8143dd6:	bd80      	pop	{r7, pc}
 8143dd8:	c0ff8000 	.word	0xc0ff8000

08143ddc <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8143ddc:	b580      	push	{r7, lr}
 8143dde:	b090      	sub	sp, #64	@ 0x40
 8143de0:	af00      	add	r7, sp, #0
 8143de2:	60f8      	str	r0, [r7, #12]
 8143de4:	60b9      	str	r1, [r7, #8]
 8143de6:	603b      	str	r3, [r7, #0]
 8143de8:	4613      	mov	r3, r2
 8143dea:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8143dec:	f7fe fdb8 	bl	8142960 <HAL_GetTick>
 8143df0:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8143df2:	2300      	movs	r3, #0
 8143df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8143df6:	68fb      	ldr	r3, [r7, #12]
 8143df8:	2200      	movs	r2, #0
 8143dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8143dfc:	68fb      	ldr	r3, [r7, #12]
 8143dfe:	681b      	ldr	r3, [r3, #0]
 8143e00:	2200      	movs	r2, #0
 8143e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8143e04:	f04f 33ff 	mov.w	r3, #4294967295
 8143e08:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8143e0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8143e0e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8143e10:	2390      	movs	r3, #144	@ 0x90
 8143e12:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8143e14:	2302      	movs	r3, #2
 8143e16:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8143e18:	2300      	movs	r3, #0
 8143e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8143e1c:	2301      	movs	r3, #1
 8143e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8143e20:	68fb      	ldr	r3, [r7, #12]
 8143e22:	681b      	ldr	r3, [r3, #0]
 8143e24:	f107 0214 	add.w	r2, r7, #20
 8143e28:	4611      	mov	r1, r2
 8143e2a:	4618      	mov	r0, r3
 8143e2c:	f005 ff38 	bl	8149ca0 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8143e30:	68fb      	ldr	r3, [r7, #12]
 8143e32:	681b      	ldr	r3, [r3, #0]
 8143e34:	2100      	movs	r1, #0
 8143e36:	4618      	mov	r0, r3
 8143e38:	f006 f8c9 	bl	8149fce <SDMMC_CmdSendEXTCSD>
 8143e3c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143e40:	2b00      	cmp	r3, #0
 8143e42:	d04e      	beq.n	8143ee2 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143e44:	68fb      	ldr	r3, [r7, #12]
 8143e46:	681b      	ldr	r3, [r3, #0]
 8143e48:	4a5c      	ldr	r2, [pc, #368]	@ (8143fbc <MMC_ReadExtCSD+0x1e0>)
 8143e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8143e4c:	68fb      	ldr	r3, [r7, #12]
 8143e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143e52:	431a      	orrs	r2, r3
 8143e54:	68fb      	ldr	r3, [r7, #12]
 8143e56:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8143e58:	68fb      	ldr	r3, [r7, #12]
 8143e5a:	2201      	movs	r2, #1
 8143e5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8143e60:	2301      	movs	r3, #1
 8143e62:	e0a6      	b.n	8143fb2 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8143e64:	68fb      	ldr	r3, [r7, #12]
 8143e66:	681b      	ldr	r3, [r3, #0]
 8143e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8143e6e:	2b00      	cmp	r3, #0
 8143e70:	d01c      	beq.n	8143eac <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8143e72:	2300      	movs	r3, #0
 8143e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8143e76:	e013      	b.n	8143ea0 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8143e78:	68fb      	ldr	r3, [r7, #12]
 8143e7a:	681b      	ldr	r3, [r3, #0]
 8143e7c:	4618      	mov	r0, r3
 8143e7e:	f005 fe87 	bl	8149b90 <SDMMC_ReadFIFO>
 8143e82:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8143e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8143e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8143e88:	4413      	add	r3, r2
 8143e8a:	88fa      	ldrh	r2, [r7, #6]
 8143e8c:	0892      	lsrs	r2, r2, #2
 8143e8e:	b292      	uxth	r2, r2
 8143e90:	4293      	cmp	r3, r2
 8143e92:	d102      	bne.n	8143e9a <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8143e94:	68bb      	ldr	r3, [r7, #8]
 8143e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8143e98:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8143e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8143e9c:	3301      	adds	r3, #1
 8143e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8143ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8143ea2:	2b07      	cmp	r3, #7
 8143ea4:	d9e8      	bls.n	8143e78 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8143ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8143ea8:	3308      	adds	r3, #8
 8143eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8143eac:	f7fe fd58 	bl	8142960 <HAL_GetTick>
 8143eb0:	4602      	mov	r2, r0
 8143eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8143eb4:	1ad3      	subs	r3, r2, r3
 8143eb6:	683a      	ldr	r2, [r7, #0]
 8143eb8:	429a      	cmp	r2, r3
 8143eba:	d902      	bls.n	8143ec2 <MMC_ReadExtCSD+0xe6>
 8143ebc:	683b      	ldr	r3, [r7, #0]
 8143ebe:	2b00      	cmp	r3, #0
 8143ec0:	d10f      	bne.n	8143ee2 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143ec2:	68fb      	ldr	r3, [r7, #12]
 8143ec4:	681b      	ldr	r3, [r3, #0]
 8143ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8143fbc <MMC_ReadExtCSD+0x1e0>)
 8143ec8:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8143eca:	68fb      	ldr	r3, [r7, #12]
 8143ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143ece:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8143ed2:	68fb      	ldr	r3, [r7, #12]
 8143ed4:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8143ed6:	68fb      	ldr	r3, [r7, #12]
 8143ed8:	2201      	movs	r2, #1
 8143eda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8143ede:	2303      	movs	r3, #3
 8143ee0:	e067      	b.n	8143fb2 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8143ee2:	68fb      	ldr	r3, [r7, #12]
 8143ee4:	681b      	ldr	r3, [r3, #0]
 8143ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143ee8:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8143eec:	2b00      	cmp	r3, #0
 8143eee:	d0b9      	beq.n	8143e64 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8143ef0:	68fb      	ldr	r3, [r7, #12]
 8143ef2:	681b      	ldr	r3, [r3, #0]
 8143ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143ef6:	f003 0308 	and.w	r3, r3, #8
 8143efa:	2b00      	cmp	r3, #0
 8143efc:	d00f      	beq.n	8143f1e <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143efe:	68fb      	ldr	r3, [r7, #12]
 8143f00:	681b      	ldr	r3, [r3, #0]
 8143f02:	4a2e      	ldr	r2, [pc, #184]	@ (8143fbc <MMC_ReadExtCSD+0x1e0>)
 8143f04:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8143f06:	68fb      	ldr	r3, [r7, #12]
 8143f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143f0a:	f043 0208 	orr.w	r2, r3, #8
 8143f0e:	68fb      	ldr	r3, [r7, #12]
 8143f10:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8143f12:	68fb      	ldr	r3, [r7, #12]
 8143f14:	2201      	movs	r2, #1
 8143f16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8143f1a:	2301      	movs	r3, #1
 8143f1c:	e049      	b.n	8143fb2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8143f1e:	68fb      	ldr	r3, [r7, #12]
 8143f20:	681b      	ldr	r3, [r3, #0]
 8143f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143f24:	f003 0302 	and.w	r3, r3, #2
 8143f28:	2b00      	cmp	r3, #0
 8143f2a:	d00f      	beq.n	8143f4c <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143f2c:	68fb      	ldr	r3, [r7, #12]
 8143f2e:	681b      	ldr	r3, [r3, #0]
 8143f30:	4a22      	ldr	r2, [pc, #136]	@ (8143fbc <MMC_ReadExtCSD+0x1e0>)
 8143f32:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8143f34:	68fb      	ldr	r3, [r7, #12]
 8143f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143f38:	f043 0202 	orr.w	r2, r3, #2
 8143f3c:	68fb      	ldr	r3, [r7, #12]
 8143f3e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8143f40:	68fb      	ldr	r3, [r7, #12]
 8143f42:	2201      	movs	r2, #1
 8143f44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8143f48:	2301      	movs	r3, #1
 8143f4a:	e032      	b.n	8143fb2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8143f4c:	68fb      	ldr	r3, [r7, #12]
 8143f4e:	681b      	ldr	r3, [r3, #0]
 8143f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143f52:	f003 0320 	and.w	r3, r3, #32
 8143f56:	2b00      	cmp	r3, #0
 8143f58:	d00f      	beq.n	8143f7a <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8143f5a:	68fb      	ldr	r3, [r7, #12]
 8143f5c:	681b      	ldr	r3, [r3, #0]
 8143f5e:	4a17      	ldr	r2, [pc, #92]	@ (8143fbc <MMC_ReadExtCSD+0x1e0>)
 8143f60:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8143f62:	68fb      	ldr	r3, [r7, #12]
 8143f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8143f66:	f043 0220 	orr.w	r2, r3, #32
 8143f6a:	68fb      	ldr	r3, [r7, #12]
 8143f6c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8143f6e:	68fb      	ldr	r3, [r7, #12]
 8143f70:	2201      	movs	r2, #1
 8143f72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8143f76:	2301      	movs	r3, #1
 8143f78:	e01b      	b.n	8143fb2 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8143f7a:	68fb      	ldr	r3, [r7, #12]
 8143f7c:	681a      	ldr	r2, [r3, #0]
 8143f7e:	68fb      	ldr	r3, [r7, #12]
 8143f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8143f82:	041b      	lsls	r3, r3, #16
 8143f84:	4619      	mov	r1, r3
 8143f86:	4610      	mov	r0, r2
 8143f88:	f005 ffbb 	bl	8149f02 <SDMMC_CmdSendStatus>
 8143f8c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8143f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143f90:	2b00      	cmp	r3, #0
 8143f92:	d005      	beq.n	8143fa0 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8143f94:	68fb      	ldr	r3, [r7, #12]
 8143f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8143f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8143f9a:	431a      	orrs	r2, r3
 8143f9c:	68fb      	ldr	r3, [r7, #12]
 8143f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8143fa0:	68fb      	ldr	r3, [r7, #12]
 8143fa2:	681b      	ldr	r3, [r3, #0]
 8143fa4:	4a06      	ldr	r2, [pc, #24]	@ (8143fc0 <MMC_ReadExtCSD+0x1e4>)
 8143fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8143fa8:	68fb      	ldr	r3, [r7, #12]
 8143faa:	2201      	movs	r2, #1
 8143fac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8143fb0:	2300      	movs	r3, #0
}
 8143fb2:	4618      	mov	r0, r3
 8143fb4:	3740      	adds	r7, #64	@ 0x40
 8143fb6:	46bd      	mov	sp, r7
 8143fb8:	bd80      	pop	{r7, pc}
 8143fba:	bf00      	nop
 8143fbc:	1fe00fff 	.word	0x1fe00fff
 8143fc0:	18000f3a 	.word	0x18000f3a

08143fc4 <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 8143fc4:	b580      	push	{r7, lr}
 8143fc6:	b086      	sub	sp, #24
 8143fc8:	af00      	add	r7, sp, #0
 8143fca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 8143fcc:	687b      	ldr	r3, [r7, #4]
 8143fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8143fd0:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 8143fd2:	687b      	ldr	r3, [r7, #4]
 8143fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8143fd6:	2b1f      	cmp	r3, #31
 8143fd8:	d936      	bls.n	8144048 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8143fda:	2300      	movs	r3, #0
 8143fdc:	617b      	str	r3, [r7, #20]
 8143fde:	e027      	b.n	8144030 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 8143fe0:	687b      	ldr	r3, [r7, #4]
 8143fe2:	681b      	ldr	r3, [r3, #0]
 8143fe4:	4618      	mov	r0, r3
 8143fe6:	f005 fdd3 	bl	8149b90 <SDMMC_ReadFIFO>
 8143fea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8143fec:	68fb      	ldr	r3, [r7, #12]
 8143fee:	b2da      	uxtb	r2, r3
 8143ff0:	693b      	ldr	r3, [r7, #16]
 8143ff2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8143ff4:	693b      	ldr	r3, [r7, #16]
 8143ff6:	3301      	adds	r3, #1
 8143ff8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8143ffa:	68fb      	ldr	r3, [r7, #12]
 8143ffc:	0a1b      	lsrs	r3, r3, #8
 8143ffe:	b2da      	uxtb	r2, r3
 8144000:	693b      	ldr	r3, [r7, #16]
 8144002:	701a      	strb	r2, [r3, #0]
      tmp++;
 8144004:	693b      	ldr	r3, [r7, #16]
 8144006:	3301      	adds	r3, #1
 8144008:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 814400a:	68fb      	ldr	r3, [r7, #12]
 814400c:	0c1b      	lsrs	r3, r3, #16
 814400e:	b2da      	uxtb	r2, r3
 8144010:	693b      	ldr	r3, [r7, #16]
 8144012:	701a      	strb	r2, [r3, #0]
      tmp++;
 8144014:	693b      	ldr	r3, [r7, #16]
 8144016:	3301      	adds	r3, #1
 8144018:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 814401a:	68fb      	ldr	r3, [r7, #12]
 814401c:	0e1b      	lsrs	r3, r3, #24
 814401e:	b2da      	uxtb	r2, r3
 8144020:	693b      	ldr	r3, [r7, #16]
 8144022:	701a      	strb	r2, [r3, #0]
      tmp++;
 8144024:	693b      	ldr	r3, [r7, #16]
 8144026:	3301      	adds	r3, #1
 8144028:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 814402a:	697b      	ldr	r3, [r7, #20]
 814402c:	3301      	adds	r3, #1
 814402e:	617b      	str	r3, [r7, #20]
 8144030:	697b      	ldr	r3, [r7, #20]
 8144032:	2b07      	cmp	r3, #7
 8144034:	d9d4      	bls.n	8143fe0 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 8144036:	687b      	ldr	r3, [r7, #4]
 8144038:	693a      	ldr	r2, [r7, #16]
 814403a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 814403c:	687b      	ldr	r3, [r7, #4]
 814403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8144040:	f1a3 0220 	sub.w	r2, r3, #32
 8144044:	687b      	ldr	r3, [r7, #4]
 8144046:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8144048:	bf00      	nop
 814404a:	3718      	adds	r7, #24
 814404c:	46bd      	mov	sp, r7
 814404e:	bd80      	pop	{r7, pc}

08144050 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 8144050:	b580      	push	{r7, lr}
 8144052:	b086      	sub	sp, #24
 8144054:	af00      	add	r7, sp, #0
 8144056:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 8144058:	687b      	ldr	r3, [r7, #4]
 814405a:	69db      	ldr	r3, [r3, #28]
 814405c:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 814405e:	687b      	ldr	r3, [r7, #4]
 8144060:	6a1b      	ldr	r3, [r3, #32]
 8144062:	2b1f      	cmp	r3, #31
 8144064:	d93a      	bls.n	81440dc <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8144066:	2300      	movs	r3, #0
 8144068:	617b      	str	r3, [r7, #20]
 814406a:	e02b      	b.n	81440c4 <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 814406c:	693b      	ldr	r3, [r7, #16]
 814406e:	781b      	ldrb	r3, [r3, #0]
 8144070:	60fb      	str	r3, [r7, #12]
      tmp++;
 8144072:	693b      	ldr	r3, [r7, #16]
 8144074:	3301      	adds	r3, #1
 8144076:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8144078:	693b      	ldr	r3, [r7, #16]
 814407a:	781b      	ldrb	r3, [r3, #0]
 814407c:	021a      	lsls	r2, r3, #8
 814407e:	68fb      	ldr	r3, [r7, #12]
 8144080:	4313      	orrs	r3, r2
 8144082:	60fb      	str	r3, [r7, #12]
      tmp++;
 8144084:	693b      	ldr	r3, [r7, #16]
 8144086:	3301      	adds	r3, #1
 8144088:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 814408a:	693b      	ldr	r3, [r7, #16]
 814408c:	781b      	ldrb	r3, [r3, #0]
 814408e:	041a      	lsls	r2, r3, #16
 8144090:	68fb      	ldr	r3, [r7, #12]
 8144092:	4313      	orrs	r3, r2
 8144094:	60fb      	str	r3, [r7, #12]
      tmp++;
 8144096:	693b      	ldr	r3, [r7, #16]
 8144098:	3301      	adds	r3, #1
 814409a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 814409c:	693b      	ldr	r3, [r7, #16]
 814409e:	781b      	ldrb	r3, [r3, #0]
 81440a0:	061a      	lsls	r2, r3, #24
 81440a2:	68fb      	ldr	r3, [r7, #12]
 81440a4:	4313      	orrs	r3, r2
 81440a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 81440a8:	693b      	ldr	r3, [r7, #16]
 81440aa:	3301      	adds	r3, #1
 81440ac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 81440ae:	687b      	ldr	r3, [r7, #4]
 81440b0:	681b      	ldr	r3, [r3, #0]
 81440b2:	f107 020c 	add.w	r2, r7, #12
 81440b6:	4611      	mov	r1, r2
 81440b8:	4618      	mov	r0, r3
 81440ba:	f005 fd76 	bl	8149baa <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81440be:	697b      	ldr	r3, [r7, #20]
 81440c0:	3301      	adds	r3, #1
 81440c2:	617b      	str	r3, [r7, #20]
 81440c4:	697b      	ldr	r3, [r7, #20]
 81440c6:	2b07      	cmp	r3, #7
 81440c8:	d9d0      	bls.n	814406c <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 81440ca:	687b      	ldr	r3, [r7, #4]
 81440cc:	693a      	ldr	r2, [r7, #16]
 81440ce:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 81440d0:	687b      	ldr	r3, [r7, #4]
 81440d2:	6a1b      	ldr	r3, [r3, #32]
 81440d4:	f1a3 0220 	sub.w	r2, r3, #32
 81440d8:	687b      	ldr	r3, [r7, #4]
 81440da:	621a      	str	r2, [r3, #32]
  }
}
 81440dc:	bf00      	nop
 81440de:	3718      	adds	r7, #24
 81440e0:	46bd      	mov	sp, r7
 81440e2:	bd80      	pop	{r7, pc}

081440e4 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 81440e4:	b580      	push	{r7, lr}
 81440e6:	b08a      	sub	sp, #40	@ 0x28
 81440e8:	af00      	add	r7, sp, #0
 81440ea:	60f8      	str	r0, [r7, #12]
 81440ec:	60b9      	str	r1, [r7, #8]
 81440ee:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 81440f0:	2300      	movs	r3, #0
 81440f2:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 81440f4:	2300      	movs	r3, #0
 81440f6:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 81440f8:	68bb      	ldr	r3, [r7, #8]
 81440fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81440fe:	d004      	beq.n	814410a <MMC_PwrClassUpdate+0x26>
 8144100:	68bb      	ldr	r3, [r7, #8]
 8144102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8144106:	f040 8088 	bne.w	814421a <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 814410a:	2300      	movs	r3, #0
 814410c:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 814410e:	f107 0114 	add.w	r1, r7, #20
 8144112:	f04f 33ff 	mov.w	r3, #4294967295
 8144116:	22bb      	movs	r2, #187	@ 0xbb
 8144118:	68f8      	ldr	r0, [r7, #12]
 814411a:	f7ff fe5f 	bl	8143ddc <MMC_ReadExtCSD>
 814411e:	4603      	mov	r3, r0
 8144120:	2b00      	cmp	r3, #0
 8144122:	d003      	beq.n	814412c <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8144124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8144128:	61fb      	str	r3, [r7, #28]
 814412a:	e002      	b.n	8144132 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 814412c:	697b      	ldr	r3, [r7, #20]
 814412e:	0e1b      	lsrs	r3, r3, #24
 8144130:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8144132:	687b      	ldr	r3, [r7, #4]
 8144134:	2b04      	cmp	r3, #4
 8144136:	d105      	bne.n	8144144 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8144138:	68fb      	ldr	r3, [r7, #12]
 814413a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 814413e:	0e1b      	lsrs	r3, r3, #24
 8144140:	61bb      	str	r3, [r7, #24]
 8144142:	e00e      	b.n	8144162 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8144144:	687b      	ldr	r3, [r7, #4]
 8144146:	2b02      	cmp	r3, #2
 8144148:	d106      	bne.n	8144158 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 814414a:	68fb      	ldr	r3, [r7, #12]
 814414c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8144150:	0c1b      	lsrs	r3, r3, #16
 8144152:	b2db      	uxtb	r3, r3
 8144154:	61bb      	str	r3, [r7, #24]
 8144156:	e004      	b.n	8144162 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8144158:	68fb      	ldr	r3, [r7, #12]
 814415a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 814415e:	0e1b      	lsrs	r3, r3, #24
 8144160:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8144162:	69fb      	ldr	r3, [r7, #28]
 8144164:	2b00      	cmp	r3, #0
 8144166:	d158      	bne.n	814421a <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8144168:	68bb      	ldr	r3, [r7, #8]
 814416a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 814416e:	d102      	bne.n	8144176 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8144170:	69bb      	ldr	r3, [r7, #24]
 8144172:	091b      	lsrs	r3, r3, #4
 8144174:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8144176:	697a      	ldr	r2, [r7, #20]
 8144178:	69bb      	ldr	r3, [r7, #24]
 814417a:	4053      	eors	r3, r2
 814417c:	f003 030f 	and.w	r3, r3, #15
 8144180:	2b00      	cmp	r3, #0
 8144182:	d04a      	beq.n	814421a <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8144184:	68fb      	ldr	r3, [r7, #12]
 8144186:	681a      	ldr	r2, [r3, #0]
 8144188:	69bb      	ldr	r3, [r7, #24]
 814418a:	021b      	lsls	r3, r3, #8
 814418c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8144190:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8144194:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8144198:	4619      	mov	r1, r3
 814419a:	4610      	mov	r0, r2
 814419c:	f005 fef4 	bl	8149f88 <SDMMC_CmdSwitch>
 81441a0:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 81441a2:	69fb      	ldr	r3, [r7, #28]
 81441a4:	2b00      	cmp	r3, #0
 81441a6:	d138      	bne.n	814421a <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 81441a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81441ac:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 81441ae:	68fb      	ldr	r3, [r7, #12]
 81441b0:	681a      	ldr	r2, [r3, #0]
 81441b2:	68fb      	ldr	r3, [r7, #12]
 81441b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81441b6:	041b      	lsls	r3, r3, #16
 81441b8:	4619      	mov	r1, r3
 81441ba:	4610      	mov	r0, r2
 81441bc:	f005 fea1 	bl	8149f02 <SDMMC_CmdSendStatus>
 81441c0:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 81441c2:	69fb      	ldr	r3, [r7, #28]
 81441c4:	2b00      	cmp	r3, #0
 81441c6:	d112      	bne.n	81441ee <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81441c8:	68fb      	ldr	r3, [r7, #12]
 81441ca:	681b      	ldr	r3, [r3, #0]
 81441cc:	2100      	movs	r1, #0
 81441ce:	4618      	mov	r0, r3
 81441d0:	f005 fd53 	bl	8149c7a <SDMMC_GetResponse>
 81441d4:	6238      	str	r0, [r7, #32]
            count--;
 81441d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81441d8:	3b01      	subs	r3, #1
 81441da:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 81441dc:	6a3b      	ldr	r3, [r7, #32]
 81441de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81441e2:	2b00      	cmp	r3, #0
 81441e4:	d104      	bne.n	81441f0 <MMC_PwrClassUpdate+0x10c>
 81441e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81441e8:	2b00      	cmp	r3, #0
 81441ea:	d1e0      	bne.n	81441ae <MMC_PwrClassUpdate+0xca>
 81441ec:	e000      	b.n	81441f0 <MMC_PwrClassUpdate+0x10c>
              break;
 81441ee:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 81441f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81441f2:	2b00      	cmp	r3, #0
 81441f4:	d00b      	beq.n	814420e <MMC_PwrClassUpdate+0x12a>
 81441f6:	69fb      	ldr	r3, [r7, #28]
 81441f8:	2b00      	cmp	r3, #0
 81441fa:	d108      	bne.n	814420e <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 81441fc:	6a3b      	ldr	r3, [r7, #32]
 81441fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8144202:	2b00      	cmp	r3, #0
 8144204:	d009      	beq.n	814421a <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8144206:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 814420a:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 814420c:	e005      	b.n	814421a <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 814420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144210:	2b00      	cmp	r3, #0
 8144212:	d102      	bne.n	814421a <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8144214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8144218:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 814421a:	69fb      	ldr	r3, [r7, #28]
}
 814421c:	4618      	mov	r0, r3
 814421e:	3728      	adds	r7, #40	@ 0x28
 8144220:	46bd      	mov	sp, r7
 8144222:	bd80      	pop	{r7, pc}

08144224 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8144224:	b480      	push	{r7}
 8144226:	b083      	sub	sp, #12
 8144228:	af00      	add	r7, sp, #0
 814422a:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 814422c:	bf00      	nop
 814422e:	370c      	adds	r7, #12
 8144230:	46bd      	mov	sp, r7
 8144232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8144236:	4770      	bx	lr

08144238 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8144238:	b480      	push	{r7}
 814423a:	b083      	sub	sp, #12
 814423c:	af00      	add	r7, sp, #0
 814423e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8144240:	bf00      	nop
 8144242:	370c      	adds	r7, #12
 8144244:	46bd      	mov	sp, r7
 8144246:	f85d 7b04 	ldr.w	r7, [sp], #4
 814424a:	4770      	bx	lr

0814424c <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 814424c:	b480      	push	{r7}
 814424e:	b083      	sub	sp, #12
 8144250:	af00      	add	r7, sp, #0
 8144252:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8144254:	bf00      	nop
 8144256:	370c      	adds	r7, #12
 8144258:	46bd      	mov	sp, r7
 814425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814425e:	4770      	bx	lr

08144260 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8144260:	b480      	push	{r7}
 8144262:	b083      	sub	sp, #12
 8144264:	af00      	add	r7, sp, #0
 8144266:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8144268:	bf00      	nop
 814426a:	370c      	adds	r7, #12
 814426c:	46bd      	mov	sp, r7
 814426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8144272:	4770      	bx	lr

08144274 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8144274:	b580      	push	{r7, lr}
 8144276:	b086      	sub	sp, #24
 8144278:	af02      	add	r7, sp, #8
 814427a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 814427c:	687b      	ldr	r3, [r7, #4]
 814427e:	2b00      	cmp	r3, #0
 8144280:	d101      	bne.n	8144286 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8144282:	2301      	movs	r3, #1
 8144284:	e0fe      	b.n	8144484 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8144286:	687b      	ldr	r3, [r7, #4]
 8144288:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 814428c:	b2db      	uxtb	r3, r3
 814428e:	2b00      	cmp	r3, #0
 8144290:	d106      	bne.n	81442a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8144292:	687b      	ldr	r3, [r7, #4]
 8144294:	2200      	movs	r2, #0
 8144296:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 814429a:	6878      	ldr	r0, [r7, #4]
 814429c:	f00a f824 	bl	814e2e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81442a0:	687b      	ldr	r3, [r7, #4]
 81442a2:	2203      	movs	r2, #3
 81442a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 81442a8:	687b      	ldr	r3, [r7, #4]
 81442aa:	681b      	ldr	r3, [r3, #0]
 81442ac:	4618      	mov	r0, r3
 81442ae:	f006 fb96 	bl	814a9de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81442b2:	687b      	ldr	r3, [r7, #4]
 81442b4:	6818      	ldr	r0, [r3, #0]
 81442b6:	687b      	ldr	r3, [r7, #4]
 81442b8:	7c1a      	ldrb	r2, [r3, #16]
 81442ba:	f88d 2000 	strb.w	r2, [sp]
 81442be:	3304      	adds	r3, #4
 81442c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81442c2:	f006 fa67 	bl	814a794 <USB_CoreInit>
 81442c6:	4603      	mov	r3, r0
 81442c8:	2b00      	cmp	r3, #0
 81442ca:	d005      	beq.n	81442d8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81442cc:	687b      	ldr	r3, [r7, #4]
 81442ce:	2202      	movs	r2, #2
 81442d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81442d4:	2301      	movs	r3, #1
 81442d6:	e0d5      	b.n	8144484 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 81442d8:	687b      	ldr	r3, [r7, #4]
 81442da:	681b      	ldr	r3, [r3, #0]
 81442dc:	2100      	movs	r1, #0
 81442de:	4618      	mov	r0, r3
 81442e0:	f006 fb8e 	bl	814aa00 <USB_SetCurrentMode>
 81442e4:	4603      	mov	r3, r0
 81442e6:	2b00      	cmp	r3, #0
 81442e8:	d005      	beq.n	81442f6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81442ea:	687b      	ldr	r3, [r7, #4]
 81442ec:	2202      	movs	r2, #2
 81442ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81442f2:	2301      	movs	r3, #1
 81442f4:	e0c6      	b.n	8144484 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81442f6:	2300      	movs	r3, #0
 81442f8:	73fb      	strb	r3, [r7, #15]
 81442fa:	e04a      	b.n	8144392 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81442fc:	7bfa      	ldrb	r2, [r7, #15]
 81442fe:	6879      	ldr	r1, [r7, #4]
 8144300:	4613      	mov	r3, r2
 8144302:	00db      	lsls	r3, r3, #3
 8144304:	4413      	add	r3, r2
 8144306:	009b      	lsls	r3, r3, #2
 8144308:	440b      	add	r3, r1
 814430a:	3315      	adds	r3, #21
 814430c:	2201      	movs	r2, #1
 814430e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8144310:	7bfa      	ldrb	r2, [r7, #15]
 8144312:	6879      	ldr	r1, [r7, #4]
 8144314:	4613      	mov	r3, r2
 8144316:	00db      	lsls	r3, r3, #3
 8144318:	4413      	add	r3, r2
 814431a:	009b      	lsls	r3, r3, #2
 814431c:	440b      	add	r3, r1
 814431e:	3314      	adds	r3, #20
 8144320:	7bfa      	ldrb	r2, [r7, #15]
 8144322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8144324:	7bfa      	ldrb	r2, [r7, #15]
 8144326:	7bfb      	ldrb	r3, [r7, #15]
 8144328:	b298      	uxth	r0, r3
 814432a:	6879      	ldr	r1, [r7, #4]
 814432c:	4613      	mov	r3, r2
 814432e:	00db      	lsls	r3, r3, #3
 8144330:	4413      	add	r3, r2
 8144332:	009b      	lsls	r3, r3, #2
 8144334:	440b      	add	r3, r1
 8144336:	332e      	adds	r3, #46	@ 0x2e
 8144338:	4602      	mov	r2, r0
 814433a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 814433c:	7bfa      	ldrb	r2, [r7, #15]
 814433e:	6879      	ldr	r1, [r7, #4]
 8144340:	4613      	mov	r3, r2
 8144342:	00db      	lsls	r3, r3, #3
 8144344:	4413      	add	r3, r2
 8144346:	009b      	lsls	r3, r3, #2
 8144348:	440b      	add	r3, r1
 814434a:	3318      	adds	r3, #24
 814434c:	2200      	movs	r2, #0
 814434e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8144350:	7bfa      	ldrb	r2, [r7, #15]
 8144352:	6879      	ldr	r1, [r7, #4]
 8144354:	4613      	mov	r3, r2
 8144356:	00db      	lsls	r3, r3, #3
 8144358:	4413      	add	r3, r2
 814435a:	009b      	lsls	r3, r3, #2
 814435c:	440b      	add	r3, r1
 814435e:	331c      	adds	r3, #28
 8144360:	2200      	movs	r2, #0
 8144362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8144364:	7bfa      	ldrb	r2, [r7, #15]
 8144366:	6879      	ldr	r1, [r7, #4]
 8144368:	4613      	mov	r3, r2
 814436a:	00db      	lsls	r3, r3, #3
 814436c:	4413      	add	r3, r2
 814436e:	009b      	lsls	r3, r3, #2
 8144370:	440b      	add	r3, r1
 8144372:	3320      	adds	r3, #32
 8144374:	2200      	movs	r2, #0
 8144376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8144378:	7bfa      	ldrb	r2, [r7, #15]
 814437a:	6879      	ldr	r1, [r7, #4]
 814437c:	4613      	mov	r3, r2
 814437e:	00db      	lsls	r3, r3, #3
 8144380:	4413      	add	r3, r2
 8144382:	009b      	lsls	r3, r3, #2
 8144384:	440b      	add	r3, r1
 8144386:	3324      	adds	r3, #36	@ 0x24
 8144388:	2200      	movs	r2, #0
 814438a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 814438c:	7bfb      	ldrb	r3, [r7, #15]
 814438e:	3301      	adds	r3, #1
 8144390:	73fb      	strb	r3, [r7, #15]
 8144392:	687b      	ldr	r3, [r7, #4]
 8144394:	791b      	ldrb	r3, [r3, #4]
 8144396:	7bfa      	ldrb	r2, [r7, #15]
 8144398:	429a      	cmp	r2, r3
 814439a:	d3af      	bcc.n	81442fc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 814439c:	2300      	movs	r3, #0
 814439e:	73fb      	strb	r3, [r7, #15]
 81443a0:	e044      	b.n	814442c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81443a2:	7bfa      	ldrb	r2, [r7, #15]
 81443a4:	6879      	ldr	r1, [r7, #4]
 81443a6:	4613      	mov	r3, r2
 81443a8:	00db      	lsls	r3, r3, #3
 81443aa:	4413      	add	r3, r2
 81443ac:	009b      	lsls	r3, r3, #2
 81443ae:	440b      	add	r3, r1
 81443b0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 81443b4:	2200      	movs	r2, #0
 81443b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 81443b8:	7bfa      	ldrb	r2, [r7, #15]
 81443ba:	6879      	ldr	r1, [r7, #4]
 81443bc:	4613      	mov	r3, r2
 81443be:	00db      	lsls	r3, r3, #3
 81443c0:	4413      	add	r3, r2
 81443c2:	009b      	lsls	r3, r3, #2
 81443c4:	440b      	add	r3, r1
 81443c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 81443ca:	7bfa      	ldrb	r2, [r7, #15]
 81443cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81443ce:	7bfa      	ldrb	r2, [r7, #15]
 81443d0:	6879      	ldr	r1, [r7, #4]
 81443d2:	4613      	mov	r3, r2
 81443d4:	00db      	lsls	r3, r3, #3
 81443d6:	4413      	add	r3, r2
 81443d8:	009b      	lsls	r3, r3, #2
 81443da:	440b      	add	r3, r1
 81443dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 81443e0:	2200      	movs	r2, #0
 81443e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81443e4:	7bfa      	ldrb	r2, [r7, #15]
 81443e6:	6879      	ldr	r1, [r7, #4]
 81443e8:	4613      	mov	r3, r2
 81443ea:	00db      	lsls	r3, r3, #3
 81443ec:	4413      	add	r3, r2
 81443ee:	009b      	lsls	r3, r3, #2
 81443f0:	440b      	add	r3, r1
 81443f2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 81443f6:	2200      	movs	r2, #0
 81443f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81443fa:	7bfa      	ldrb	r2, [r7, #15]
 81443fc:	6879      	ldr	r1, [r7, #4]
 81443fe:	4613      	mov	r3, r2
 8144400:	00db      	lsls	r3, r3, #3
 8144402:	4413      	add	r3, r2
 8144404:	009b      	lsls	r3, r3, #2
 8144406:	440b      	add	r3, r1
 8144408:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 814440c:	2200      	movs	r2, #0
 814440e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8144410:	7bfa      	ldrb	r2, [r7, #15]
 8144412:	6879      	ldr	r1, [r7, #4]
 8144414:	4613      	mov	r3, r2
 8144416:	00db      	lsls	r3, r3, #3
 8144418:	4413      	add	r3, r2
 814441a:	009b      	lsls	r3, r3, #2
 814441c:	440b      	add	r3, r1
 814441e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8144422:	2200      	movs	r2, #0
 8144424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8144426:	7bfb      	ldrb	r3, [r7, #15]
 8144428:	3301      	adds	r3, #1
 814442a:	73fb      	strb	r3, [r7, #15]
 814442c:	687b      	ldr	r3, [r7, #4]
 814442e:	791b      	ldrb	r3, [r3, #4]
 8144430:	7bfa      	ldrb	r2, [r7, #15]
 8144432:	429a      	cmp	r2, r3
 8144434:	d3b5      	bcc.n	81443a2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8144436:	687b      	ldr	r3, [r7, #4]
 8144438:	6818      	ldr	r0, [r3, #0]
 814443a:	687b      	ldr	r3, [r7, #4]
 814443c:	7c1a      	ldrb	r2, [r3, #16]
 814443e:	f88d 2000 	strb.w	r2, [sp]
 8144442:	3304      	adds	r3, #4
 8144444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8144446:	f006 fb27 	bl	814aa98 <USB_DevInit>
 814444a:	4603      	mov	r3, r0
 814444c:	2b00      	cmp	r3, #0
 814444e:	d005      	beq.n	814445c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8144450:	687b      	ldr	r3, [r7, #4]
 8144452:	2202      	movs	r2, #2
 8144454:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8144458:	2301      	movs	r3, #1
 814445a:	e013      	b.n	8144484 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 814445c:	687b      	ldr	r3, [r7, #4]
 814445e:	2200      	movs	r2, #0
 8144460:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8144462:	687b      	ldr	r3, [r7, #4]
 8144464:	2201      	movs	r2, #1
 8144466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 814446a:	687b      	ldr	r3, [r7, #4]
 814446c:	7b1b      	ldrb	r3, [r3, #12]
 814446e:	2b01      	cmp	r3, #1
 8144470:	d102      	bne.n	8144478 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8144472:	6878      	ldr	r0, [r7, #4]
 8144474:	f001 f96e 	bl	8145754 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8144478:	687b      	ldr	r3, [r7, #4]
 814447a:	681b      	ldr	r3, [r3, #0]
 814447c:	4618      	mov	r0, r3
 814447e:	f007 fb64 	bl	814bb4a <USB_DevDisconnect>

  return HAL_OK;
 8144482:	2300      	movs	r3, #0
}
 8144484:	4618      	mov	r0, r3
 8144486:	3710      	adds	r7, #16
 8144488:	46bd      	mov	sp, r7
 814448a:	bd80      	pop	{r7, pc}

0814448c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 814448c:	b580      	push	{r7, lr}
 814448e:	b084      	sub	sp, #16
 8144490:	af00      	add	r7, sp, #0
 8144492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8144494:	687b      	ldr	r3, [r7, #4]
 8144496:	681b      	ldr	r3, [r3, #0]
 8144498:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 814449a:	687b      	ldr	r3, [r7, #4]
 814449c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 81444a0:	2b01      	cmp	r3, #1
 81444a2:	d101      	bne.n	81444a8 <HAL_PCD_Start+0x1c>
 81444a4:	2302      	movs	r3, #2
 81444a6:	e022      	b.n	81444ee <HAL_PCD_Start+0x62>
 81444a8:	687b      	ldr	r3, [r7, #4]
 81444aa:	2201      	movs	r2, #1
 81444ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 81444b0:	68fb      	ldr	r3, [r7, #12]
 81444b2:	68db      	ldr	r3, [r3, #12]
 81444b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81444b8:	2b00      	cmp	r3, #0
 81444ba:	d009      	beq.n	81444d0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 81444bc:	687b      	ldr	r3, [r7, #4]
 81444be:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 81444c0:	2b01      	cmp	r3, #1
 81444c2:	d105      	bne.n	81444d0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81444c4:	68fb      	ldr	r3, [r7, #12]
 81444c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81444c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 81444cc:	68fb      	ldr	r3, [r7, #12]
 81444ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 81444d0:	687b      	ldr	r3, [r7, #4]
 81444d2:	681b      	ldr	r3, [r3, #0]
 81444d4:	4618      	mov	r0, r3
 81444d6:	f006 fa71 	bl	814a9bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 81444da:	687b      	ldr	r3, [r7, #4]
 81444dc:	681b      	ldr	r3, [r3, #0]
 81444de:	4618      	mov	r0, r3
 81444e0:	f007 fb12 	bl	814bb08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 81444e4:	687b      	ldr	r3, [r7, #4]
 81444e6:	2200      	movs	r2, #0
 81444e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 81444ec:	2300      	movs	r3, #0
}
 81444ee:	4618      	mov	r0, r3
 81444f0:	3710      	adds	r7, #16
 81444f2:	46bd      	mov	sp, r7
 81444f4:	bd80      	pop	{r7, pc}

081444f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 81444f6:	b590      	push	{r4, r7, lr}
 81444f8:	b08d      	sub	sp, #52	@ 0x34
 81444fa:	af00      	add	r7, sp, #0
 81444fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81444fe:	687b      	ldr	r3, [r7, #4]
 8144500:	681b      	ldr	r3, [r3, #0]
 8144502:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8144504:	6a3b      	ldr	r3, [r7, #32]
 8144506:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8144508:	687b      	ldr	r3, [r7, #4]
 814450a:	681b      	ldr	r3, [r3, #0]
 814450c:	4618      	mov	r0, r3
 814450e:	f007 fbd0 	bl	814bcb2 <USB_GetMode>
 8144512:	4603      	mov	r3, r0
 8144514:	2b00      	cmp	r3, #0
 8144516:	f040 84b9 	bne.w	8144e8c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 814451a:	687b      	ldr	r3, [r7, #4]
 814451c:	681b      	ldr	r3, [r3, #0]
 814451e:	4618      	mov	r0, r3
 8144520:	f007 fb34 	bl	814bb8c <USB_ReadInterrupts>
 8144524:	4603      	mov	r3, r0
 8144526:	2b00      	cmp	r3, #0
 8144528:	f000 84af 	beq.w	8144e8a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 814452c:	69fb      	ldr	r3, [r7, #28]
 814452e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144532:	689b      	ldr	r3, [r3, #8]
 8144534:	0a1b      	lsrs	r3, r3, #8
 8144536:	f3c3 020d 	ubfx	r2, r3, #0, #14
 814453a:	687b      	ldr	r3, [r7, #4]
 814453c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8144540:	687b      	ldr	r3, [r7, #4]
 8144542:	681b      	ldr	r3, [r3, #0]
 8144544:	4618      	mov	r0, r3
 8144546:	f007 fb21 	bl	814bb8c <USB_ReadInterrupts>
 814454a:	4603      	mov	r3, r0
 814454c:	f003 0302 	and.w	r3, r3, #2
 8144550:	2b02      	cmp	r3, #2
 8144552:	d107      	bne.n	8144564 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8144554:	687b      	ldr	r3, [r7, #4]
 8144556:	681b      	ldr	r3, [r3, #0]
 8144558:	695a      	ldr	r2, [r3, #20]
 814455a:	687b      	ldr	r3, [r7, #4]
 814455c:	681b      	ldr	r3, [r3, #0]
 814455e:	f002 0202 	and.w	r2, r2, #2
 8144562:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8144564:	687b      	ldr	r3, [r7, #4]
 8144566:	681b      	ldr	r3, [r3, #0]
 8144568:	4618      	mov	r0, r3
 814456a:	f007 fb0f 	bl	814bb8c <USB_ReadInterrupts>
 814456e:	4603      	mov	r3, r0
 8144570:	f003 0310 	and.w	r3, r3, #16
 8144574:	2b10      	cmp	r3, #16
 8144576:	d161      	bne.n	814463c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8144578:	687b      	ldr	r3, [r7, #4]
 814457a:	681b      	ldr	r3, [r3, #0]
 814457c:	699a      	ldr	r2, [r3, #24]
 814457e:	687b      	ldr	r3, [r7, #4]
 8144580:	681b      	ldr	r3, [r3, #0]
 8144582:	f022 0210 	bic.w	r2, r2, #16
 8144586:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8144588:	6a3b      	ldr	r3, [r7, #32]
 814458a:	6a1b      	ldr	r3, [r3, #32]
 814458c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 814458e:	69bb      	ldr	r3, [r7, #24]
 8144590:	f003 020f 	and.w	r2, r3, #15
 8144594:	4613      	mov	r3, r2
 8144596:	00db      	lsls	r3, r3, #3
 8144598:	4413      	add	r3, r2
 814459a:	009b      	lsls	r3, r3, #2
 814459c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81445a0:	687a      	ldr	r2, [r7, #4]
 81445a2:	4413      	add	r3, r2
 81445a4:	3304      	adds	r3, #4
 81445a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 81445a8:	69bb      	ldr	r3, [r7, #24]
 81445aa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 81445ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81445b2:	d124      	bne.n	81445fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 81445b4:	69ba      	ldr	r2, [r7, #24]
 81445b6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 81445ba:	4013      	ands	r3, r2
 81445bc:	2b00      	cmp	r3, #0
 81445be:	d035      	beq.n	814462c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81445c0:	697b      	ldr	r3, [r7, #20]
 81445c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 81445c4:	69bb      	ldr	r3, [r7, #24]
 81445c6:	091b      	lsrs	r3, r3, #4
 81445c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81445ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81445ce:	b29b      	uxth	r3, r3
 81445d0:	461a      	mov	r2, r3
 81445d2:	6a38      	ldr	r0, [r7, #32]
 81445d4:	f007 f946 	bl	814b864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81445d8:	697b      	ldr	r3, [r7, #20]
 81445da:	68da      	ldr	r2, [r3, #12]
 81445dc:	69bb      	ldr	r3, [r7, #24]
 81445de:	091b      	lsrs	r3, r3, #4
 81445e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81445e4:	441a      	add	r2, r3
 81445e6:	697b      	ldr	r3, [r7, #20]
 81445e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81445ea:	697b      	ldr	r3, [r7, #20]
 81445ec:	695a      	ldr	r2, [r3, #20]
 81445ee:	69bb      	ldr	r3, [r7, #24]
 81445f0:	091b      	lsrs	r3, r3, #4
 81445f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81445f6:	441a      	add	r2, r3
 81445f8:	697b      	ldr	r3, [r7, #20]
 81445fa:	615a      	str	r2, [r3, #20]
 81445fc:	e016      	b.n	814462c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 81445fe:	69bb      	ldr	r3, [r7, #24]
 8144600:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8144604:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8144608:	d110      	bne.n	814462c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 814460a:	687b      	ldr	r3, [r7, #4]
 814460c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8144610:	2208      	movs	r2, #8
 8144612:	4619      	mov	r1, r3
 8144614:	6a38      	ldr	r0, [r7, #32]
 8144616:	f007 f925 	bl	814b864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 814461a:	697b      	ldr	r3, [r7, #20]
 814461c:	695a      	ldr	r2, [r3, #20]
 814461e:	69bb      	ldr	r3, [r7, #24]
 8144620:	091b      	lsrs	r3, r3, #4
 8144622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8144626:	441a      	add	r2, r3
 8144628:	697b      	ldr	r3, [r7, #20]
 814462a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 814462c:	687b      	ldr	r3, [r7, #4]
 814462e:	681b      	ldr	r3, [r3, #0]
 8144630:	699a      	ldr	r2, [r3, #24]
 8144632:	687b      	ldr	r3, [r7, #4]
 8144634:	681b      	ldr	r3, [r3, #0]
 8144636:	f042 0210 	orr.w	r2, r2, #16
 814463a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 814463c:	687b      	ldr	r3, [r7, #4]
 814463e:	681b      	ldr	r3, [r3, #0]
 8144640:	4618      	mov	r0, r3
 8144642:	f007 faa3 	bl	814bb8c <USB_ReadInterrupts>
 8144646:	4603      	mov	r3, r0
 8144648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 814464c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8144650:	f040 80a7 	bne.w	81447a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8144654:	2300      	movs	r3, #0
 8144656:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8144658:	687b      	ldr	r3, [r7, #4]
 814465a:	681b      	ldr	r3, [r3, #0]
 814465c:	4618      	mov	r0, r3
 814465e:	f007 faa8 	bl	814bbb2 <USB_ReadDevAllOutEpInterrupt>
 8144662:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8144664:	e099      	b.n	814479a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8144666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8144668:	f003 0301 	and.w	r3, r3, #1
 814466c:	2b00      	cmp	r3, #0
 814466e:	f000 808e 	beq.w	814478e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8144672:	687b      	ldr	r3, [r7, #4]
 8144674:	681b      	ldr	r3, [r3, #0]
 8144676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144678:	b2d2      	uxtb	r2, r2
 814467a:	4611      	mov	r1, r2
 814467c:	4618      	mov	r0, r3
 814467e:	f007 facc 	bl	814bc1a <USB_ReadDevOutEPInterrupt>
 8144682:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8144684:	693b      	ldr	r3, [r7, #16]
 8144686:	f003 0301 	and.w	r3, r3, #1
 814468a:	2b00      	cmp	r3, #0
 814468c:	d00c      	beq.n	81446a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 814468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144690:	015a      	lsls	r2, r3, #5
 8144692:	69fb      	ldr	r3, [r7, #28]
 8144694:	4413      	add	r3, r2
 8144696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814469a:	461a      	mov	r2, r3
 814469c:	2301      	movs	r3, #1
 814469e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 81446a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81446a2:	6878      	ldr	r0, [r7, #4]
 81446a4:	f000 fed0 	bl	8145448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 81446a8:	693b      	ldr	r3, [r7, #16]
 81446aa:	f003 0308 	and.w	r3, r3, #8
 81446ae:	2b00      	cmp	r3, #0
 81446b0:	d00c      	beq.n	81446cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 81446b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81446b4:	015a      	lsls	r2, r3, #5
 81446b6:	69fb      	ldr	r3, [r7, #28]
 81446b8:	4413      	add	r3, r2
 81446ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81446be:	461a      	mov	r2, r3
 81446c0:	2308      	movs	r3, #8
 81446c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 81446c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81446c6:	6878      	ldr	r0, [r7, #4]
 81446c8:	f000 ffa6 	bl	8145618 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 81446cc:	693b      	ldr	r3, [r7, #16]
 81446ce:	f003 0310 	and.w	r3, r3, #16
 81446d2:	2b00      	cmp	r3, #0
 81446d4:	d008      	beq.n	81446e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 81446d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81446d8:	015a      	lsls	r2, r3, #5
 81446da:	69fb      	ldr	r3, [r7, #28]
 81446dc:	4413      	add	r3, r2
 81446de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81446e2:	461a      	mov	r2, r3
 81446e4:	2310      	movs	r3, #16
 81446e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 81446e8:	693b      	ldr	r3, [r7, #16]
 81446ea:	f003 0302 	and.w	r3, r3, #2
 81446ee:	2b00      	cmp	r3, #0
 81446f0:	d030      	beq.n	8144754 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 81446f2:	6a3b      	ldr	r3, [r7, #32]
 81446f4:	695b      	ldr	r3, [r3, #20]
 81446f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81446fa:	2b80      	cmp	r3, #128	@ 0x80
 81446fc:	d109      	bne.n	8144712 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 81446fe:	69fb      	ldr	r3, [r7, #28]
 8144700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144704:	685b      	ldr	r3, [r3, #4]
 8144706:	69fa      	ldr	r2, [r7, #28]
 8144708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814470c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8144710:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8144712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144714:	4613      	mov	r3, r2
 8144716:	00db      	lsls	r3, r3, #3
 8144718:	4413      	add	r3, r2
 814471a:	009b      	lsls	r3, r3, #2
 814471c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8144720:	687a      	ldr	r2, [r7, #4]
 8144722:	4413      	add	r3, r2
 8144724:	3304      	adds	r3, #4
 8144726:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8144728:	697b      	ldr	r3, [r7, #20]
 814472a:	78db      	ldrb	r3, [r3, #3]
 814472c:	2b01      	cmp	r3, #1
 814472e:	d108      	bne.n	8144742 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8144730:	697b      	ldr	r3, [r7, #20]
 8144732:	2200      	movs	r2, #0
 8144734:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8144736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144738:	b2db      	uxtb	r3, r3
 814473a:	4619      	mov	r1, r3
 814473c:	6878      	ldr	r0, [r7, #4]
 814473e:	f009 ff09 	bl	814e554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8144742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144744:	015a      	lsls	r2, r3, #5
 8144746:	69fb      	ldr	r3, [r7, #28]
 8144748:	4413      	add	r3, r2
 814474a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814474e:	461a      	mov	r2, r3
 8144750:	2302      	movs	r3, #2
 8144752:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8144754:	693b      	ldr	r3, [r7, #16]
 8144756:	f003 0320 	and.w	r3, r3, #32
 814475a:	2b00      	cmp	r3, #0
 814475c:	d008      	beq.n	8144770 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 814475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144760:	015a      	lsls	r2, r3, #5
 8144762:	69fb      	ldr	r3, [r7, #28]
 8144764:	4413      	add	r3, r2
 8144766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814476a:	461a      	mov	r2, r3
 814476c:	2320      	movs	r3, #32
 814476e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8144770:	693b      	ldr	r3, [r7, #16]
 8144772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8144776:	2b00      	cmp	r3, #0
 8144778:	d009      	beq.n	814478e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 814477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814477c:	015a      	lsls	r2, r3, #5
 814477e:	69fb      	ldr	r3, [r7, #28]
 8144780:	4413      	add	r3, r2
 8144782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8144786:	461a      	mov	r2, r3
 8144788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 814478c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 814478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144790:	3301      	adds	r3, #1
 8144792:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8144794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8144796:	085b      	lsrs	r3, r3, #1
 8144798:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 814479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 814479c:	2b00      	cmp	r3, #0
 814479e:	f47f af62 	bne.w	8144666 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 81447a2:	687b      	ldr	r3, [r7, #4]
 81447a4:	681b      	ldr	r3, [r3, #0]
 81447a6:	4618      	mov	r0, r3
 81447a8:	f007 f9f0 	bl	814bb8c <USB_ReadInterrupts>
 81447ac:	4603      	mov	r3, r0
 81447ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81447b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81447b6:	f040 80db 	bne.w	8144970 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 81447ba:	687b      	ldr	r3, [r7, #4]
 81447bc:	681b      	ldr	r3, [r3, #0]
 81447be:	4618      	mov	r0, r3
 81447c0:	f007 fa11 	bl	814bbe6 <USB_ReadDevAllInEpInterrupt>
 81447c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 81447c6:	2300      	movs	r3, #0
 81447c8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 81447ca:	e0cd      	b.n	8144968 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 81447cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81447ce:	f003 0301 	and.w	r3, r3, #1
 81447d2:	2b00      	cmp	r3, #0
 81447d4:	f000 80c2 	beq.w	814495c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81447d8:	687b      	ldr	r3, [r7, #4]
 81447da:	681b      	ldr	r3, [r3, #0]
 81447dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81447de:	b2d2      	uxtb	r2, r2
 81447e0:	4611      	mov	r1, r2
 81447e2:	4618      	mov	r0, r3
 81447e4:	f007 fa37 	bl	814bc56 <USB_ReadDevInEPInterrupt>
 81447e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 81447ea:	693b      	ldr	r3, [r7, #16]
 81447ec:	f003 0301 	and.w	r3, r3, #1
 81447f0:	2b00      	cmp	r3, #0
 81447f2:	d057      	beq.n	81448a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 81447f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81447f6:	f003 030f 	and.w	r3, r3, #15
 81447fa:	2201      	movs	r2, #1
 81447fc:	fa02 f303 	lsl.w	r3, r2, r3
 8144800:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8144802:	69fb      	ldr	r3, [r7, #28]
 8144804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 814480a:	68fb      	ldr	r3, [r7, #12]
 814480c:	43db      	mvns	r3, r3
 814480e:	69f9      	ldr	r1, [r7, #28]
 8144810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8144814:	4013      	ands	r3, r2
 8144816:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8144818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814481a:	015a      	lsls	r2, r3, #5
 814481c:	69fb      	ldr	r3, [r7, #28]
 814481e:	4413      	add	r3, r2
 8144820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8144824:	461a      	mov	r2, r3
 8144826:	2301      	movs	r3, #1
 8144828:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 814482a:	687b      	ldr	r3, [r7, #4]
 814482c:	799b      	ldrb	r3, [r3, #6]
 814482e:	2b01      	cmp	r3, #1
 8144830:	d132      	bne.n	8144898 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8144832:	6879      	ldr	r1, [r7, #4]
 8144834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144836:	4613      	mov	r3, r2
 8144838:	00db      	lsls	r3, r3, #3
 814483a:	4413      	add	r3, r2
 814483c:	009b      	lsls	r3, r3, #2
 814483e:	440b      	add	r3, r1
 8144840:	3320      	adds	r3, #32
 8144842:	6819      	ldr	r1, [r3, #0]
 8144844:	6878      	ldr	r0, [r7, #4]
 8144846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144848:	4613      	mov	r3, r2
 814484a:	00db      	lsls	r3, r3, #3
 814484c:	4413      	add	r3, r2
 814484e:	009b      	lsls	r3, r3, #2
 8144850:	4403      	add	r3, r0
 8144852:	331c      	adds	r3, #28
 8144854:	681b      	ldr	r3, [r3, #0]
 8144856:	4419      	add	r1, r3
 8144858:	6878      	ldr	r0, [r7, #4]
 814485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 814485c:	4613      	mov	r3, r2
 814485e:	00db      	lsls	r3, r3, #3
 8144860:	4413      	add	r3, r2
 8144862:	009b      	lsls	r3, r3, #2
 8144864:	4403      	add	r3, r0
 8144866:	3320      	adds	r3, #32
 8144868:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 814486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814486c:	2b00      	cmp	r3, #0
 814486e:	d113      	bne.n	8144898 <HAL_PCD_IRQHandler+0x3a2>
 8144870:	6879      	ldr	r1, [r7, #4]
 8144872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144874:	4613      	mov	r3, r2
 8144876:	00db      	lsls	r3, r3, #3
 8144878:	4413      	add	r3, r2
 814487a:	009b      	lsls	r3, r3, #2
 814487c:	440b      	add	r3, r1
 814487e:	3324      	adds	r3, #36	@ 0x24
 8144880:	681b      	ldr	r3, [r3, #0]
 8144882:	2b00      	cmp	r3, #0
 8144884:	d108      	bne.n	8144898 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8144886:	687b      	ldr	r3, [r7, #4]
 8144888:	6818      	ldr	r0, [r3, #0]
 814488a:	687b      	ldr	r3, [r7, #4]
 814488c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8144890:	461a      	mov	r2, r3
 8144892:	2101      	movs	r1, #1
 8144894:	f007 fa3e 	bl	814bd14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8144898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814489a:	b2db      	uxtb	r3, r3
 814489c:	4619      	mov	r1, r3
 814489e:	6878      	ldr	r0, [r7, #4]
 81448a0:	f009 fdd3 	bl	814e44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 81448a4:	693b      	ldr	r3, [r7, #16]
 81448a6:	f003 0308 	and.w	r3, r3, #8
 81448aa:	2b00      	cmp	r3, #0
 81448ac:	d008      	beq.n	81448c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 81448ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81448b0:	015a      	lsls	r2, r3, #5
 81448b2:	69fb      	ldr	r3, [r7, #28]
 81448b4:	4413      	add	r3, r2
 81448b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81448ba:	461a      	mov	r2, r3
 81448bc:	2308      	movs	r3, #8
 81448be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 81448c0:	693b      	ldr	r3, [r7, #16]
 81448c2:	f003 0310 	and.w	r3, r3, #16
 81448c6:	2b00      	cmp	r3, #0
 81448c8:	d008      	beq.n	81448dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 81448ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81448cc:	015a      	lsls	r2, r3, #5
 81448ce:	69fb      	ldr	r3, [r7, #28]
 81448d0:	4413      	add	r3, r2
 81448d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81448d6:	461a      	mov	r2, r3
 81448d8:	2310      	movs	r3, #16
 81448da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 81448dc:	693b      	ldr	r3, [r7, #16]
 81448de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81448e2:	2b00      	cmp	r3, #0
 81448e4:	d008      	beq.n	81448f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 81448e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81448e8:	015a      	lsls	r2, r3, #5
 81448ea:	69fb      	ldr	r3, [r7, #28]
 81448ec:	4413      	add	r3, r2
 81448ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81448f2:	461a      	mov	r2, r3
 81448f4:	2340      	movs	r3, #64	@ 0x40
 81448f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 81448f8:	693b      	ldr	r3, [r7, #16]
 81448fa:	f003 0302 	and.w	r3, r3, #2
 81448fe:	2b00      	cmp	r3, #0
 8144900:	d023      	beq.n	814494a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8144902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8144904:	6a38      	ldr	r0, [r7, #32]
 8144906:	f006 fa25 	bl	814ad54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 814490a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 814490c:	4613      	mov	r3, r2
 814490e:	00db      	lsls	r3, r3, #3
 8144910:	4413      	add	r3, r2
 8144912:	009b      	lsls	r3, r3, #2
 8144914:	3310      	adds	r3, #16
 8144916:	687a      	ldr	r2, [r7, #4]
 8144918:	4413      	add	r3, r2
 814491a:	3304      	adds	r3, #4
 814491c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 814491e:	697b      	ldr	r3, [r7, #20]
 8144920:	78db      	ldrb	r3, [r3, #3]
 8144922:	2b01      	cmp	r3, #1
 8144924:	d108      	bne.n	8144938 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8144926:	697b      	ldr	r3, [r7, #20]
 8144928:	2200      	movs	r2, #0
 814492a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 814492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814492e:	b2db      	uxtb	r3, r3
 8144930:	4619      	mov	r1, r3
 8144932:	6878      	ldr	r0, [r7, #4]
 8144934:	f009 fe20 	bl	814e578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8144938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814493a:	015a      	lsls	r2, r3, #5
 814493c:	69fb      	ldr	r3, [r7, #28]
 814493e:	4413      	add	r3, r2
 8144940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8144944:	461a      	mov	r2, r3
 8144946:	2302      	movs	r3, #2
 8144948:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 814494a:	693b      	ldr	r3, [r7, #16]
 814494c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8144950:	2b00      	cmp	r3, #0
 8144952:	d003      	beq.n	814495c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8144954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8144956:	6878      	ldr	r0, [r7, #4]
 8144958:	f000 fcea 	bl	8145330 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 814495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814495e:	3301      	adds	r3, #1
 8144960:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8144962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8144964:	085b      	lsrs	r3, r3, #1
 8144966:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8144968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 814496a:	2b00      	cmp	r3, #0
 814496c:	f47f af2e 	bne.w	81447cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8144970:	687b      	ldr	r3, [r7, #4]
 8144972:	681b      	ldr	r3, [r3, #0]
 8144974:	4618      	mov	r0, r3
 8144976:	f007 f909 	bl	814bb8c <USB_ReadInterrupts>
 814497a:	4603      	mov	r3, r0
 814497c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8144980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8144984:	d122      	bne.n	81449cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8144986:	69fb      	ldr	r3, [r7, #28]
 8144988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814498c:	685b      	ldr	r3, [r3, #4]
 814498e:	69fa      	ldr	r2, [r7, #28]
 8144990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144994:	f023 0301 	bic.w	r3, r3, #1
 8144998:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 814499a:	687b      	ldr	r3, [r7, #4]
 814499c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 81449a0:	2b01      	cmp	r3, #1
 81449a2:	d108      	bne.n	81449b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 81449a4:	687b      	ldr	r3, [r7, #4]
 81449a6:	2200      	movs	r2, #0
 81449a8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 81449ac:	2100      	movs	r1, #0
 81449ae:	6878      	ldr	r0, [r7, #4]
 81449b0:	f000 fef4 	bl	814579c <HAL_PCDEx_LPM_Callback>
 81449b4:	e002      	b.n	81449bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 81449b6:	6878      	ldr	r0, [r7, #4]
 81449b8:	f009 fdbe 	bl	814e538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 81449bc:	687b      	ldr	r3, [r7, #4]
 81449be:	681b      	ldr	r3, [r3, #0]
 81449c0:	695a      	ldr	r2, [r3, #20]
 81449c2:	687b      	ldr	r3, [r7, #4]
 81449c4:	681b      	ldr	r3, [r3, #0]
 81449c6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 81449ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 81449cc:	687b      	ldr	r3, [r7, #4]
 81449ce:	681b      	ldr	r3, [r3, #0]
 81449d0:	4618      	mov	r0, r3
 81449d2:	f007 f8db 	bl	814bb8c <USB_ReadInterrupts>
 81449d6:	4603      	mov	r3, r0
 81449d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81449dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81449e0:	d112      	bne.n	8144a08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 81449e2:	69fb      	ldr	r3, [r7, #28]
 81449e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81449e8:	689b      	ldr	r3, [r3, #8]
 81449ea:	f003 0301 	and.w	r3, r3, #1
 81449ee:	2b01      	cmp	r3, #1
 81449f0:	d102      	bne.n	81449f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 81449f2:	6878      	ldr	r0, [r7, #4]
 81449f4:	f009 fd7a 	bl	814e4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 81449f8:	687b      	ldr	r3, [r7, #4]
 81449fa:	681b      	ldr	r3, [r3, #0]
 81449fc:	695a      	ldr	r2, [r3, #20]
 81449fe:	687b      	ldr	r3, [r7, #4]
 8144a00:	681b      	ldr	r3, [r3, #0]
 8144a02:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8144a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8144a08:	687b      	ldr	r3, [r7, #4]
 8144a0a:	681b      	ldr	r3, [r3, #0]
 8144a0c:	4618      	mov	r0, r3
 8144a0e:	f007 f8bd 	bl	814bb8c <USB_ReadInterrupts>
 8144a12:	4603      	mov	r3, r0
 8144a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8144a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8144a1c:	d121      	bne.n	8144a62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8144a1e:	687b      	ldr	r3, [r7, #4]
 8144a20:	681b      	ldr	r3, [r3, #0]
 8144a22:	695a      	ldr	r2, [r3, #20]
 8144a24:	687b      	ldr	r3, [r7, #4]
 8144a26:	681b      	ldr	r3, [r3, #0]
 8144a28:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8144a2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8144a2e:	687b      	ldr	r3, [r7, #4]
 8144a30:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8144a34:	2b00      	cmp	r3, #0
 8144a36:	d111      	bne.n	8144a5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8144a38:	687b      	ldr	r3, [r7, #4]
 8144a3a:	2201      	movs	r2, #1
 8144a3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8144a40:	687b      	ldr	r3, [r7, #4]
 8144a42:	681b      	ldr	r3, [r3, #0]
 8144a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8144a46:	089b      	lsrs	r3, r3, #2
 8144a48:	f003 020f 	and.w	r2, r3, #15
 8144a4c:	687b      	ldr	r3, [r7, #4]
 8144a4e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8144a52:	2101      	movs	r1, #1
 8144a54:	6878      	ldr	r0, [r7, #4]
 8144a56:	f000 fea1 	bl	814579c <HAL_PCDEx_LPM_Callback>
 8144a5a:	e002      	b.n	8144a62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8144a5c:	6878      	ldr	r0, [r7, #4]
 8144a5e:	f009 fd45 	bl	814e4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8144a62:	687b      	ldr	r3, [r7, #4]
 8144a64:	681b      	ldr	r3, [r3, #0]
 8144a66:	4618      	mov	r0, r3
 8144a68:	f007 f890 	bl	814bb8c <USB_ReadInterrupts>
 8144a6c:	4603      	mov	r3, r0
 8144a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8144a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8144a76:	f040 80b7 	bne.w	8144be8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8144a7a:	69fb      	ldr	r3, [r7, #28]
 8144a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144a80:	685b      	ldr	r3, [r3, #4]
 8144a82:	69fa      	ldr	r2, [r7, #28]
 8144a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144a88:	f023 0301 	bic.w	r3, r3, #1
 8144a8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8144a8e:	687b      	ldr	r3, [r7, #4]
 8144a90:	681b      	ldr	r3, [r3, #0]
 8144a92:	2110      	movs	r1, #16
 8144a94:	4618      	mov	r0, r3
 8144a96:	f006 f95d 	bl	814ad54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8144a9a:	2300      	movs	r3, #0
 8144a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8144a9e:	e046      	b.n	8144b2e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8144aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144aa2:	015a      	lsls	r2, r3, #5
 8144aa4:	69fb      	ldr	r3, [r7, #28]
 8144aa6:	4413      	add	r3, r2
 8144aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8144aac:	461a      	mov	r2, r3
 8144aae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8144ab2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8144ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144ab6:	015a      	lsls	r2, r3, #5
 8144ab8:	69fb      	ldr	r3, [r7, #28]
 8144aba:	4413      	add	r3, r2
 8144abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8144ac0:	681b      	ldr	r3, [r3, #0]
 8144ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8144ac4:	0151      	lsls	r1, r2, #5
 8144ac6:	69fa      	ldr	r2, [r7, #28]
 8144ac8:	440a      	add	r2, r1
 8144aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8144ace:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8144ad2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8144ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144ad6:	015a      	lsls	r2, r3, #5
 8144ad8:	69fb      	ldr	r3, [r7, #28]
 8144ada:	4413      	add	r3, r2
 8144adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8144ae0:	461a      	mov	r2, r3
 8144ae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8144ae6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8144ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144aea:	015a      	lsls	r2, r3, #5
 8144aec:	69fb      	ldr	r3, [r7, #28]
 8144aee:	4413      	add	r3, r2
 8144af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8144af4:	681b      	ldr	r3, [r3, #0]
 8144af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8144af8:	0151      	lsls	r1, r2, #5
 8144afa:	69fa      	ldr	r2, [r7, #28]
 8144afc:	440a      	add	r2, r1
 8144afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8144b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8144b06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8144b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144b0a:	015a      	lsls	r2, r3, #5
 8144b0c:	69fb      	ldr	r3, [r7, #28]
 8144b0e:	4413      	add	r3, r2
 8144b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8144b14:	681b      	ldr	r3, [r3, #0]
 8144b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8144b18:	0151      	lsls	r1, r2, #5
 8144b1a:	69fa      	ldr	r2, [r7, #28]
 8144b1c:	440a      	add	r2, r1
 8144b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8144b22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8144b26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8144b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144b2a:	3301      	adds	r3, #1
 8144b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8144b2e:	687b      	ldr	r3, [r7, #4]
 8144b30:	791b      	ldrb	r3, [r3, #4]
 8144b32:	461a      	mov	r2, r3
 8144b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8144b36:	4293      	cmp	r3, r2
 8144b38:	d3b2      	bcc.n	8144aa0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8144b3a:	69fb      	ldr	r3, [r7, #28]
 8144b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144b40:	69db      	ldr	r3, [r3, #28]
 8144b42:	69fa      	ldr	r2, [r7, #28]
 8144b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144b48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8144b4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8144b4e:	687b      	ldr	r3, [r7, #4]
 8144b50:	7bdb      	ldrb	r3, [r3, #15]
 8144b52:	2b00      	cmp	r3, #0
 8144b54:	d016      	beq.n	8144b84 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8144b56:	69fb      	ldr	r3, [r7, #28]
 8144b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8144b60:	69fa      	ldr	r2, [r7, #28]
 8144b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144b66:	f043 030b 	orr.w	r3, r3, #11
 8144b6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8144b6e:	69fb      	ldr	r3, [r7, #28]
 8144b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8144b76:	69fa      	ldr	r2, [r7, #28]
 8144b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144b7c:	f043 030b 	orr.w	r3, r3, #11
 8144b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8144b82:	e015      	b.n	8144bb0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8144b84:	69fb      	ldr	r3, [r7, #28]
 8144b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144b8a:	695b      	ldr	r3, [r3, #20]
 8144b8c:	69fa      	ldr	r2, [r7, #28]
 8144b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144b92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8144b96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8144b9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8144b9c:	69fb      	ldr	r3, [r7, #28]
 8144b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144ba2:	691b      	ldr	r3, [r3, #16]
 8144ba4:	69fa      	ldr	r2, [r7, #28]
 8144ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144baa:	f043 030b 	orr.w	r3, r3, #11
 8144bae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8144bb0:	69fb      	ldr	r3, [r7, #28]
 8144bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144bb6:	681b      	ldr	r3, [r3, #0]
 8144bb8:	69fa      	ldr	r2, [r7, #28]
 8144bba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144bbe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8144bc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8144bc4:	687b      	ldr	r3, [r7, #4]
 8144bc6:	6818      	ldr	r0, [r3, #0]
 8144bc8:	687b      	ldr	r3, [r7, #4]
 8144bca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8144bcc:	687b      	ldr	r3, [r7, #4]
 8144bce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8144bd2:	461a      	mov	r2, r3
 8144bd4:	f007 f89e 	bl	814bd14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8144bd8:	687b      	ldr	r3, [r7, #4]
 8144bda:	681b      	ldr	r3, [r3, #0]
 8144bdc:	695a      	ldr	r2, [r3, #20]
 8144bde:	687b      	ldr	r3, [r7, #4]
 8144be0:	681b      	ldr	r3, [r3, #0]
 8144be2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8144be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8144be8:	687b      	ldr	r3, [r7, #4]
 8144bea:	681b      	ldr	r3, [r3, #0]
 8144bec:	4618      	mov	r0, r3
 8144bee:	f006 ffcd 	bl	814bb8c <USB_ReadInterrupts>
 8144bf2:	4603      	mov	r3, r0
 8144bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8144bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8144bfc:	d123      	bne.n	8144c46 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8144bfe:	687b      	ldr	r3, [r7, #4]
 8144c00:	681b      	ldr	r3, [r3, #0]
 8144c02:	4618      	mov	r0, r3
 8144c04:	f007 f863 	bl	814bcce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8144c08:	687b      	ldr	r3, [r7, #4]
 8144c0a:	681b      	ldr	r3, [r3, #0]
 8144c0c:	4618      	mov	r0, r3
 8144c0e:	f006 f91a 	bl	814ae46 <USB_GetDevSpeed>
 8144c12:	4603      	mov	r3, r0
 8144c14:	461a      	mov	r2, r3
 8144c16:	687b      	ldr	r3, [r7, #4]
 8144c18:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8144c1a:	687b      	ldr	r3, [r7, #4]
 8144c1c:	681c      	ldr	r4, [r3, #0]
 8144c1e:	f000 ff53 	bl	8145ac8 <HAL_RCC_GetHCLKFreq>
 8144c22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8144c24:	687b      	ldr	r3, [r7, #4]
 8144c26:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8144c28:	461a      	mov	r2, r3
 8144c2a:	4620      	mov	r0, r4
 8144c2c:	f005 fe24 	bl	814a878 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8144c30:	6878      	ldr	r0, [r7, #4]
 8144c32:	f009 fc32 	bl	814e49a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8144c36:	687b      	ldr	r3, [r7, #4]
 8144c38:	681b      	ldr	r3, [r3, #0]
 8144c3a:	695a      	ldr	r2, [r3, #20]
 8144c3c:	687b      	ldr	r3, [r7, #4]
 8144c3e:	681b      	ldr	r3, [r3, #0]
 8144c40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8144c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8144c46:	687b      	ldr	r3, [r7, #4]
 8144c48:	681b      	ldr	r3, [r3, #0]
 8144c4a:	4618      	mov	r0, r3
 8144c4c:	f006 ff9e 	bl	814bb8c <USB_ReadInterrupts>
 8144c50:	4603      	mov	r3, r0
 8144c52:	f003 0308 	and.w	r3, r3, #8
 8144c56:	2b08      	cmp	r3, #8
 8144c58:	d10a      	bne.n	8144c70 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8144c5a:	6878      	ldr	r0, [r7, #4]
 8144c5c:	f009 fc0f 	bl	814e47e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8144c60:	687b      	ldr	r3, [r7, #4]
 8144c62:	681b      	ldr	r3, [r3, #0]
 8144c64:	695a      	ldr	r2, [r3, #20]
 8144c66:	687b      	ldr	r3, [r7, #4]
 8144c68:	681b      	ldr	r3, [r3, #0]
 8144c6a:	f002 0208 	and.w	r2, r2, #8
 8144c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8144c70:	687b      	ldr	r3, [r7, #4]
 8144c72:	681b      	ldr	r3, [r3, #0]
 8144c74:	4618      	mov	r0, r3
 8144c76:	f006 ff89 	bl	814bb8c <USB_ReadInterrupts>
 8144c7a:	4603      	mov	r3, r0
 8144c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8144c80:	2b80      	cmp	r3, #128	@ 0x80
 8144c82:	d123      	bne.n	8144ccc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8144c84:	6a3b      	ldr	r3, [r7, #32]
 8144c86:	699b      	ldr	r3, [r3, #24]
 8144c88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8144c8c:	6a3b      	ldr	r3, [r7, #32]
 8144c8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144c90:	2301      	movs	r3, #1
 8144c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8144c94:	e014      	b.n	8144cc0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8144c96:	6879      	ldr	r1, [r7, #4]
 8144c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144c9a:	4613      	mov	r3, r2
 8144c9c:	00db      	lsls	r3, r3, #3
 8144c9e:	4413      	add	r3, r2
 8144ca0:	009b      	lsls	r3, r3, #2
 8144ca2:	440b      	add	r3, r1
 8144ca4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8144ca8:	781b      	ldrb	r3, [r3, #0]
 8144caa:	2b01      	cmp	r3, #1
 8144cac:	d105      	bne.n	8144cba <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8144cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144cb0:	b2db      	uxtb	r3, r3
 8144cb2:	4619      	mov	r1, r3
 8144cb4:	6878      	ldr	r0, [r7, #4]
 8144cb6:	f000 fb0a 	bl	81452ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144cbc:	3301      	adds	r3, #1
 8144cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8144cc0:	687b      	ldr	r3, [r7, #4]
 8144cc2:	791b      	ldrb	r3, [r3, #4]
 8144cc4:	461a      	mov	r2, r3
 8144cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144cc8:	4293      	cmp	r3, r2
 8144cca:	d3e4      	bcc.n	8144c96 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8144ccc:	687b      	ldr	r3, [r7, #4]
 8144cce:	681b      	ldr	r3, [r3, #0]
 8144cd0:	4618      	mov	r0, r3
 8144cd2:	f006 ff5b 	bl	814bb8c <USB_ReadInterrupts>
 8144cd6:	4603      	mov	r3, r0
 8144cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8144cdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8144ce0:	d13c      	bne.n	8144d5c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144ce2:	2301      	movs	r3, #1
 8144ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8144ce6:	e02b      	b.n	8144d40 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8144ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144cea:	015a      	lsls	r2, r3, #5
 8144cec:	69fb      	ldr	r3, [r7, #28]
 8144cee:	4413      	add	r3, r2
 8144cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8144cf4:	681b      	ldr	r3, [r3, #0]
 8144cf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8144cf8:	6879      	ldr	r1, [r7, #4]
 8144cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144cfc:	4613      	mov	r3, r2
 8144cfe:	00db      	lsls	r3, r3, #3
 8144d00:	4413      	add	r3, r2
 8144d02:	009b      	lsls	r3, r3, #2
 8144d04:	440b      	add	r3, r1
 8144d06:	3318      	adds	r3, #24
 8144d08:	781b      	ldrb	r3, [r3, #0]
 8144d0a:	2b01      	cmp	r3, #1
 8144d0c:	d115      	bne.n	8144d3a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8144d0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8144d10:	2b00      	cmp	r3, #0
 8144d12:	da12      	bge.n	8144d3a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8144d14:	6879      	ldr	r1, [r7, #4]
 8144d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144d18:	4613      	mov	r3, r2
 8144d1a:	00db      	lsls	r3, r3, #3
 8144d1c:	4413      	add	r3, r2
 8144d1e:	009b      	lsls	r3, r3, #2
 8144d20:	440b      	add	r3, r1
 8144d22:	3317      	adds	r3, #23
 8144d24:	2201      	movs	r2, #1
 8144d26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8144d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144d2a:	b2db      	uxtb	r3, r3
 8144d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8144d30:	b2db      	uxtb	r3, r3
 8144d32:	4619      	mov	r1, r3
 8144d34:	6878      	ldr	r0, [r7, #4]
 8144d36:	f000 faca 	bl	81452ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144d3c:	3301      	adds	r3, #1
 8144d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8144d40:	687b      	ldr	r3, [r7, #4]
 8144d42:	791b      	ldrb	r3, [r3, #4]
 8144d44:	461a      	mov	r2, r3
 8144d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144d48:	4293      	cmp	r3, r2
 8144d4a:	d3cd      	bcc.n	8144ce8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8144d4c:	687b      	ldr	r3, [r7, #4]
 8144d4e:	681b      	ldr	r3, [r3, #0]
 8144d50:	695a      	ldr	r2, [r3, #20]
 8144d52:	687b      	ldr	r3, [r7, #4]
 8144d54:	681b      	ldr	r3, [r3, #0]
 8144d56:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8144d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8144d5c:	687b      	ldr	r3, [r7, #4]
 8144d5e:	681b      	ldr	r3, [r3, #0]
 8144d60:	4618      	mov	r0, r3
 8144d62:	f006 ff13 	bl	814bb8c <USB_ReadInterrupts>
 8144d66:	4603      	mov	r3, r0
 8144d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8144d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8144d70:	d156      	bne.n	8144e20 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144d72:	2301      	movs	r3, #1
 8144d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8144d76:	e045      	b.n	8144e04 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8144d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144d7a:	015a      	lsls	r2, r3, #5
 8144d7c:	69fb      	ldr	r3, [r7, #28]
 8144d7e:	4413      	add	r3, r2
 8144d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8144d84:	681b      	ldr	r3, [r3, #0]
 8144d86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8144d88:	6879      	ldr	r1, [r7, #4]
 8144d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144d8c:	4613      	mov	r3, r2
 8144d8e:	00db      	lsls	r3, r3, #3
 8144d90:	4413      	add	r3, r2
 8144d92:	009b      	lsls	r3, r3, #2
 8144d94:	440b      	add	r3, r1
 8144d96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8144d9a:	781b      	ldrb	r3, [r3, #0]
 8144d9c:	2b01      	cmp	r3, #1
 8144d9e:	d12e      	bne.n	8144dfe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8144da0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8144da2:	2b00      	cmp	r3, #0
 8144da4:	da2b      	bge.n	8144dfe <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8144da6:	69bb      	ldr	r3, [r7, #24]
 8144da8:	0c1a      	lsrs	r2, r3, #16
 8144daa:	687b      	ldr	r3, [r7, #4]
 8144dac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8144db0:	4053      	eors	r3, r2
 8144db2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8144db6:	2b00      	cmp	r3, #0
 8144db8:	d121      	bne.n	8144dfe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8144dba:	6879      	ldr	r1, [r7, #4]
 8144dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8144dbe:	4613      	mov	r3, r2
 8144dc0:	00db      	lsls	r3, r3, #3
 8144dc2:	4413      	add	r3, r2
 8144dc4:	009b      	lsls	r3, r3, #2
 8144dc6:	440b      	add	r3, r1
 8144dc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8144dcc:	2201      	movs	r2, #1
 8144dce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8144dd0:	6a3b      	ldr	r3, [r7, #32]
 8144dd2:	699b      	ldr	r3, [r3, #24]
 8144dd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8144dd8:	6a3b      	ldr	r3, [r7, #32]
 8144dda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8144ddc:	6a3b      	ldr	r3, [r7, #32]
 8144dde:	695b      	ldr	r3, [r3, #20]
 8144de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8144de4:	2b00      	cmp	r3, #0
 8144de6:	d10a      	bne.n	8144dfe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8144de8:	69fb      	ldr	r3, [r7, #28]
 8144dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8144dee:	685b      	ldr	r3, [r3, #4]
 8144df0:	69fa      	ldr	r2, [r7, #28]
 8144df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8144df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8144dfa:	6053      	str	r3, [r2, #4]
            break;
 8144dfc:	e008      	b.n	8144e10 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8144dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144e00:	3301      	adds	r3, #1
 8144e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8144e04:	687b      	ldr	r3, [r7, #4]
 8144e06:	791b      	ldrb	r3, [r3, #4]
 8144e08:	461a      	mov	r2, r3
 8144e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8144e0c:	4293      	cmp	r3, r2
 8144e0e:	d3b3      	bcc.n	8144d78 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8144e10:	687b      	ldr	r3, [r7, #4]
 8144e12:	681b      	ldr	r3, [r3, #0]
 8144e14:	695a      	ldr	r2, [r3, #20]
 8144e16:	687b      	ldr	r3, [r7, #4]
 8144e18:	681b      	ldr	r3, [r3, #0]
 8144e1a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8144e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8144e20:	687b      	ldr	r3, [r7, #4]
 8144e22:	681b      	ldr	r3, [r3, #0]
 8144e24:	4618      	mov	r0, r3
 8144e26:	f006 feb1 	bl	814bb8c <USB_ReadInterrupts>
 8144e2a:	4603      	mov	r3, r0
 8144e2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8144e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8144e34:	d10a      	bne.n	8144e4c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8144e36:	6878      	ldr	r0, [r7, #4]
 8144e38:	f009 fbb0 	bl	814e59c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8144e3c:	687b      	ldr	r3, [r7, #4]
 8144e3e:	681b      	ldr	r3, [r3, #0]
 8144e40:	695a      	ldr	r2, [r3, #20]
 8144e42:	687b      	ldr	r3, [r7, #4]
 8144e44:	681b      	ldr	r3, [r3, #0]
 8144e46:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8144e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8144e4c:	687b      	ldr	r3, [r7, #4]
 8144e4e:	681b      	ldr	r3, [r3, #0]
 8144e50:	4618      	mov	r0, r3
 8144e52:	f006 fe9b 	bl	814bb8c <USB_ReadInterrupts>
 8144e56:	4603      	mov	r3, r0
 8144e58:	f003 0304 	and.w	r3, r3, #4
 8144e5c:	2b04      	cmp	r3, #4
 8144e5e:	d115      	bne.n	8144e8c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8144e60:	687b      	ldr	r3, [r7, #4]
 8144e62:	681b      	ldr	r3, [r3, #0]
 8144e64:	685b      	ldr	r3, [r3, #4]
 8144e66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8144e68:	69bb      	ldr	r3, [r7, #24]
 8144e6a:	f003 0304 	and.w	r3, r3, #4
 8144e6e:	2b00      	cmp	r3, #0
 8144e70:	d002      	beq.n	8144e78 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8144e72:	6878      	ldr	r0, [r7, #4]
 8144e74:	f009 fba0 	bl	814e5b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8144e78:	687b      	ldr	r3, [r7, #4]
 8144e7a:	681b      	ldr	r3, [r3, #0]
 8144e7c:	6859      	ldr	r1, [r3, #4]
 8144e7e:	687b      	ldr	r3, [r7, #4]
 8144e80:	681b      	ldr	r3, [r3, #0]
 8144e82:	69ba      	ldr	r2, [r7, #24]
 8144e84:	430a      	orrs	r2, r1
 8144e86:	605a      	str	r2, [r3, #4]
 8144e88:	e000      	b.n	8144e8c <HAL_PCD_IRQHandler+0x996>
      return;
 8144e8a:	bf00      	nop
    }
  }
}
 8144e8c:	3734      	adds	r7, #52	@ 0x34
 8144e8e:	46bd      	mov	sp, r7
 8144e90:	bd90      	pop	{r4, r7, pc}

08144e92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8144e92:	b580      	push	{r7, lr}
 8144e94:	b082      	sub	sp, #8
 8144e96:	af00      	add	r7, sp, #0
 8144e98:	6078      	str	r0, [r7, #4]
 8144e9a:	460b      	mov	r3, r1
 8144e9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8144e9e:	687b      	ldr	r3, [r7, #4]
 8144ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8144ea4:	2b01      	cmp	r3, #1
 8144ea6:	d101      	bne.n	8144eac <HAL_PCD_SetAddress+0x1a>
 8144ea8:	2302      	movs	r3, #2
 8144eaa:	e012      	b.n	8144ed2 <HAL_PCD_SetAddress+0x40>
 8144eac:	687b      	ldr	r3, [r7, #4]
 8144eae:	2201      	movs	r2, #1
 8144eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8144eb4:	687b      	ldr	r3, [r7, #4]
 8144eb6:	78fa      	ldrb	r2, [r7, #3]
 8144eb8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8144eba:	687b      	ldr	r3, [r7, #4]
 8144ebc:	681b      	ldr	r3, [r3, #0]
 8144ebe:	78fa      	ldrb	r2, [r7, #3]
 8144ec0:	4611      	mov	r1, r2
 8144ec2:	4618      	mov	r0, r3
 8144ec4:	f006 fdfa 	bl	814babc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8144ec8:	687b      	ldr	r3, [r7, #4]
 8144eca:	2200      	movs	r2, #0
 8144ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8144ed0:	2300      	movs	r3, #0
}
 8144ed2:	4618      	mov	r0, r3
 8144ed4:	3708      	adds	r7, #8
 8144ed6:	46bd      	mov	sp, r7
 8144ed8:	bd80      	pop	{r7, pc}

08144eda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8144eda:	b580      	push	{r7, lr}
 8144edc:	b084      	sub	sp, #16
 8144ede:	af00      	add	r7, sp, #0
 8144ee0:	6078      	str	r0, [r7, #4]
 8144ee2:	4608      	mov	r0, r1
 8144ee4:	4611      	mov	r1, r2
 8144ee6:	461a      	mov	r2, r3
 8144ee8:	4603      	mov	r3, r0
 8144eea:	70fb      	strb	r3, [r7, #3]
 8144eec:	460b      	mov	r3, r1
 8144eee:	803b      	strh	r3, [r7, #0]
 8144ef0:	4613      	mov	r3, r2
 8144ef2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8144ef4:	2300      	movs	r3, #0
 8144ef6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8144ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8144efc:	2b00      	cmp	r3, #0
 8144efe:	da0f      	bge.n	8144f20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8144f00:	78fb      	ldrb	r3, [r7, #3]
 8144f02:	f003 020f 	and.w	r2, r3, #15
 8144f06:	4613      	mov	r3, r2
 8144f08:	00db      	lsls	r3, r3, #3
 8144f0a:	4413      	add	r3, r2
 8144f0c:	009b      	lsls	r3, r3, #2
 8144f0e:	3310      	adds	r3, #16
 8144f10:	687a      	ldr	r2, [r7, #4]
 8144f12:	4413      	add	r3, r2
 8144f14:	3304      	adds	r3, #4
 8144f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8144f18:	68fb      	ldr	r3, [r7, #12]
 8144f1a:	2201      	movs	r2, #1
 8144f1c:	705a      	strb	r2, [r3, #1]
 8144f1e:	e00f      	b.n	8144f40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8144f20:	78fb      	ldrb	r3, [r7, #3]
 8144f22:	f003 020f 	and.w	r2, r3, #15
 8144f26:	4613      	mov	r3, r2
 8144f28:	00db      	lsls	r3, r3, #3
 8144f2a:	4413      	add	r3, r2
 8144f2c:	009b      	lsls	r3, r3, #2
 8144f2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8144f32:	687a      	ldr	r2, [r7, #4]
 8144f34:	4413      	add	r3, r2
 8144f36:	3304      	adds	r3, #4
 8144f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8144f3a:	68fb      	ldr	r3, [r7, #12]
 8144f3c:	2200      	movs	r2, #0
 8144f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8144f40:	78fb      	ldrb	r3, [r7, #3]
 8144f42:	f003 030f 	and.w	r3, r3, #15
 8144f46:	b2da      	uxtb	r2, r3
 8144f48:	68fb      	ldr	r3, [r7, #12]
 8144f4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8144f4c:	883b      	ldrh	r3, [r7, #0]
 8144f4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8144f52:	68fb      	ldr	r3, [r7, #12]
 8144f54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8144f56:	68fb      	ldr	r3, [r7, #12]
 8144f58:	78ba      	ldrb	r2, [r7, #2]
 8144f5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8144f5c:	68fb      	ldr	r3, [r7, #12]
 8144f5e:	785b      	ldrb	r3, [r3, #1]
 8144f60:	2b00      	cmp	r3, #0
 8144f62:	d004      	beq.n	8144f6e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8144f64:	68fb      	ldr	r3, [r7, #12]
 8144f66:	781b      	ldrb	r3, [r3, #0]
 8144f68:	461a      	mov	r2, r3
 8144f6a:	68fb      	ldr	r3, [r7, #12]
 8144f6c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8144f6e:	78bb      	ldrb	r3, [r7, #2]
 8144f70:	2b02      	cmp	r3, #2
 8144f72:	d102      	bne.n	8144f7a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8144f74:	68fb      	ldr	r3, [r7, #12]
 8144f76:	2200      	movs	r2, #0
 8144f78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8144f7a:	687b      	ldr	r3, [r7, #4]
 8144f7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8144f80:	2b01      	cmp	r3, #1
 8144f82:	d101      	bne.n	8144f88 <HAL_PCD_EP_Open+0xae>
 8144f84:	2302      	movs	r3, #2
 8144f86:	e00e      	b.n	8144fa6 <HAL_PCD_EP_Open+0xcc>
 8144f88:	687b      	ldr	r3, [r7, #4]
 8144f8a:	2201      	movs	r2, #1
 8144f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8144f90:	687b      	ldr	r3, [r7, #4]
 8144f92:	681b      	ldr	r3, [r3, #0]
 8144f94:	68f9      	ldr	r1, [r7, #12]
 8144f96:	4618      	mov	r0, r3
 8144f98:	f005 ff7a 	bl	814ae90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8144f9c:	687b      	ldr	r3, [r7, #4]
 8144f9e:	2200      	movs	r2, #0
 8144fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8144fa4:	7afb      	ldrb	r3, [r7, #11]
}
 8144fa6:	4618      	mov	r0, r3
 8144fa8:	3710      	adds	r7, #16
 8144faa:	46bd      	mov	sp, r7
 8144fac:	bd80      	pop	{r7, pc}

08144fae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8144fae:	b580      	push	{r7, lr}
 8144fb0:	b084      	sub	sp, #16
 8144fb2:	af00      	add	r7, sp, #0
 8144fb4:	6078      	str	r0, [r7, #4]
 8144fb6:	460b      	mov	r3, r1
 8144fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8144fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8144fbe:	2b00      	cmp	r3, #0
 8144fc0:	da0f      	bge.n	8144fe2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8144fc2:	78fb      	ldrb	r3, [r7, #3]
 8144fc4:	f003 020f 	and.w	r2, r3, #15
 8144fc8:	4613      	mov	r3, r2
 8144fca:	00db      	lsls	r3, r3, #3
 8144fcc:	4413      	add	r3, r2
 8144fce:	009b      	lsls	r3, r3, #2
 8144fd0:	3310      	adds	r3, #16
 8144fd2:	687a      	ldr	r2, [r7, #4]
 8144fd4:	4413      	add	r3, r2
 8144fd6:	3304      	adds	r3, #4
 8144fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8144fda:	68fb      	ldr	r3, [r7, #12]
 8144fdc:	2201      	movs	r2, #1
 8144fde:	705a      	strb	r2, [r3, #1]
 8144fe0:	e00f      	b.n	8145002 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8144fe2:	78fb      	ldrb	r3, [r7, #3]
 8144fe4:	f003 020f 	and.w	r2, r3, #15
 8144fe8:	4613      	mov	r3, r2
 8144fea:	00db      	lsls	r3, r3, #3
 8144fec:	4413      	add	r3, r2
 8144fee:	009b      	lsls	r3, r3, #2
 8144ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8144ff4:	687a      	ldr	r2, [r7, #4]
 8144ff6:	4413      	add	r3, r2
 8144ff8:	3304      	adds	r3, #4
 8144ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8144ffc:	68fb      	ldr	r3, [r7, #12]
 8144ffe:	2200      	movs	r2, #0
 8145000:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8145002:	78fb      	ldrb	r3, [r7, #3]
 8145004:	f003 030f 	and.w	r3, r3, #15
 8145008:	b2da      	uxtb	r2, r3
 814500a:	68fb      	ldr	r3, [r7, #12]
 814500c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 814500e:	687b      	ldr	r3, [r7, #4]
 8145010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8145014:	2b01      	cmp	r3, #1
 8145016:	d101      	bne.n	814501c <HAL_PCD_EP_Close+0x6e>
 8145018:	2302      	movs	r3, #2
 814501a:	e00e      	b.n	814503a <HAL_PCD_EP_Close+0x8c>
 814501c:	687b      	ldr	r3, [r7, #4]
 814501e:	2201      	movs	r2, #1
 8145020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8145024:	687b      	ldr	r3, [r7, #4]
 8145026:	681b      	ldr	r3, [r3, #0]
 8145028:	68f9      	ldr	r1, [r7, #12]
 814502a:	4618      	mov	r0, r3
 814502c:	f005 ffb8 	bl	814afa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8145030:	687b      	ldr	r3, [r7, #4]
 8145032:	2200      	movs	r2, #0
 8145034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8145038:	2300      	movs	r3, #0
}
 814503a:	4618      	mov	r0, r3
 814503c:	3710      	adds	r7, #16
 814503e:	46bd      	mov	sp, r7
 8145040:	bd80      	pop	{r7, pc}

08145042 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8145042:	b580      	push	{r7, lr}
 8145044:	b086      	sub	sp, #24
 8145046:	af00      	add	r7, sp, #0
 8145048:	60f8      	str	r0, [r7, #12]
 814504a:	607a      	str	r2, [r7, #4]
 814504c:	603b      	str	r3, [r7, #0]
 814504e:	460b      	mov	r3, r1
 8145050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8145052:	7afb      	ldrb	r3, [r7, #11]
 8145054:	f003 020f 	and.w	r2, r3, #15
 8145058:	4613      	mov	r3, r2
 814505a:	00db      	lsls	r3, r3, #3
 814505c:	4413      	add	r3, r2
 814505e:	009b      	lsls	r3, r3, #2
 8145060:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8145064:	68fa      	ldr	r2, [r7, #12]
 8145066:	4413      	add	r3, r2
 8145068:	3304      	adds	r3, #4
 814506a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 814506c:	697b      	ldr	r3, [r7, #20]
 814506e:	687a      	ldr	r2, [r7, #4]
 8145070:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8145072:	697b      	ldr	r3, [r7, #20]
 8145074:	683a      	ldr	r2, [r7, #0]
 8145076:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8145078:	697b      	ldr	r3, [r7, #20]
 814507a:	2200      	movs	r2, #0
 814507c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 814507e:	697b      	ldr	r3, [r7, #20]
 8145080:	2200      	movs	r2, #0
 8145082:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8145084:	7afb      	ldrb	r3, [r7, #11]
 8145086:	f003 030f 	and.w	r3, r3, #15
 814508a:	b2da      	uxtb	r2, r3
 814508c:	697b      	ldr	r3, [r7, #20]
 814508e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8145090:	68fb      	ldr	r3, [r7, #12]
 8145092:	799b      	ldrb	r3, [r3, #6]
 8145094:	2b01      	cmp	r3, #1
 8145096:	d102      	bne.n	814509e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8145098:	687a      	ldr	r2, [r7, #4]
 814509a:	697b      	ldr	r3, [r7, #20]
 814509c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 814509e:	68fb      	ldr	r3, [r7, #12]
 81450a0:	6818      	ldr	r0, [r3, #0]
 81450a2:	68fb      	ldr	r3, [r7, #12]
 81450a4:	799b      	ldrb	r3, [r3, #6]
 81450a6:	461a      	mov	r2, r3
 81450a8:	6979      	ldr	r1, [r7, #20]
 81450aa:	f006 f855 	bl	814b158 <USB_EPStartXfer>

  return HAL_OK;
 81450ae:	2300      	movs	r3, #0
}
 81450b0:	4618      	mov	r0, r3
 81450b2:	3718      	adds	r7, #24
 81450b4:	46bd      	mov	sp, r7
 81450b6:	bd80      	pop	{r7, pc}

081450b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 81450b8:	b480      	push	{r7}
 81450ba:	b083      	sub	sp, #12
 81450bc:	af00      	add	r7, sp, #0
 81450be:	6078      	str	r0, [r7, #4]
 81450c0:	460b      	mov	r3, r1
 81450c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 81450c4:	78fb      	ldrb	r3, [r7, #3]
 81450c6:	f003 020f 	and.w	r2, r3, #15
 81450ca:	6879      	ldr	r1, [r7, #4]
 81450cc:	4613      	mov	r3, r2
 81450ce:	00db      	lsls	r3, r3, #3
 81450d0:	4413      	add	r3, r2
 81450d2:	009b      	lsls	r3, r3, #2
 81450d4:	440b      	add	r3, r1
 81450d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 81450da:	681b      	ldr	r3, [r3, #0]
}
 81450dc:	4618      	mov	r0, r3
 81450de:	370c      	adds	r7, #12
 81450e0:	46bd      	mov	sp, r7
 81450e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81450e6:	4770      	bx	lr

081450e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 81450e8:	b580      	push	{r7, lr}
 81450ea:	b086      	sub	sp, #24
 81450ec:	af00      	add	r7, sp, #0
 81450ee:	60f8      	str	r0, [r7, #12]
 81450f0:	607a      	str	r2, [r7, #4]
 81450f2:	603b      	str	r3, [r7, #0]
 81450f4:	460b      	mov	r3, r1
 81450f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81450f8:	7afb      	ldrb	r3, [r7, #11]
 81450fa:	f003 020f 	and.w	r2, r3, #15
 81450fe:	4613      	mov	r3, r2
 8145100:	00db      	lsls	r3, r3, #3
 8145102:	4413      	add	r3, r2
 8145104:	009b      	lsls	r3, r3, #2
 8145106:	3310      	adds	r3, #16
 8145108:	68fa      	ldr	r2, [r7, #12]
 814510a:	4413      	add	r3, r2
 814510c:	3304      	adds	r3, #4
 814510e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8145110:	697b      	ldr	r3, [r7, #20]
 8145112:	687a      	ldr	r2, [r7, #4]
 8145114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8145116:	697b      	ldr	r3, [r7, #20]
 8145118:	683a      	ldr	r2, [r7, #0]
 814511a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 814511c:	697b      	ldr	r3, [r7, #20]
 814511e:	2200      	movs	r2, #0
 8145120:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8145122:	697b      	ldr	r3, [r7, #20]
 8145124:	2201      	movs	r2, #1
 8145126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8145128:	7afb      	ldrb	r3, [r7, #11]
 814512a:	f003 030f 	and.w	r3, r3, #15
 814512e:	b2da      	uxtb	r2, r3
 8145130:	697b      	ldr	r3, [r7, #20]
 8145132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8145134:	68fb      	ldr	r3, [r7, #12]
 8145136:	799b      	ldrb	r3, [r3, #6]
 8145138:	2b01      	cmp	r3, #1
 814513a:	d102      	bne.n	8145142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 814513c:	687a      	ldr	r2, [r7, #4]
 814513e:	697b      	ldr	r3, [r7, #20]
 8145140:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8145142:	68fb      	ldr	r3, [r7, #12]
 8145144:	6818      	ldr	r0, [r3, #0]
 8145146:	68fb      	ldr	r3, [r7, #12]
 8145148:	799b      	ldrb	r3, [r3, #6]
 814514a:	461a      	mov	r2, r3
 814514c:	6979      	ldr	r1, [r7, #20]
 814514e:	f006 f803 	bl	814b158 <USB_EPStartXfer>

  return HAL_OK;
 8145152:	2300      	movs	r3, #0
}
 8145154:	4618      	mov	r0, r3
 8145156:	3718      	adds	r7, #24
 8145158:	46bd      	mov	sp, r7
 814515a:	bd80      	pop	{r7, pc}

0814515c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 814515c:	b580      	push	{r7, lr}
 814515e:	b084      	sub	sp, #16
 8145160:	af00      	add	r7, sp, #0
 8145162:	6078      	str	r0, [r7, #4]
 8145164:	460b      	mov	r3, r1
 8145166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8145168:	78fb      	ldrb	r3, [r7, #3]
 814516a:	f003 030f 	and.w	r3, r3, #15
 814516e:	687a      	ldr	r2, [r7, #4]
 8145170:	7912      	ldrb	r2, [r2, #4]
 8145172:	4293      	cmp	r3, r2
 8145174:	d901      	bls.n	814517a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8145176:	2301      	movs	r3, #1
 8145178:	e04f      	b.n	814521a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 814517a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 814517e:	2b00      	cmp	r3, #0
 8145180:	da0f      	bge.n	81451a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8145182:	78fb      	ldrb	r3, [r7, #3]
 8145184:	f003 020f 	and.w	r2, r3, #15
 8145188:	4613      	mov	r3, r2
 814518a:	00db      	lsls	r3, r3, #3
 814518c:	4413      	add	r3, r2
 814518e:	009b      	lsls	r3, r3, #2
 8145190:	3310      	adds	r3, #16
 8145192:	687a      	ldr	r2, [r7, #4]
 8145194:	4413      	add	r3, r2
 8145196:	3304      	adds	r3, #4
 8145198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 814519a:	68fb      	ldr	r3, [r7, #12]
 814519c:	2201      	movs	r2, #1
 814519e:	705a      	strb	r2, [r3, #1]
 81451a0:	e00d      	b.n	81451be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 81451a2:	78fa      	ldrb	r2, [r7, #3]
 81451a4:	4613      	mov	r3, r2
 81451a6:	00db      	lsls	r3, r3, #3
 81451a8:	4413      	add	r3, r2
 81451aa:	009b      	lsls	r3, r3, #2
 81451ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81451b0:	687a      	ldr	r2, [r7, #4]
 81451b2:	4413      	add	r3, r2
 81451b4:	3304      	adds	r3, #4
 81451b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81451b8:	68fb      	ldr	r3, [r7, #12]
 81451ba:	2200      	movs	r2, #0
 81451bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 81451be:	68fb      	ldr	r3, [r7, #12]
 81451c0:	2201      	movs	r2, #1
 81451c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81451c4:	78fb      	ldrb	r3, [r7, #3]
 81451c6:	f003 030f 	and.w	r3, r3, #15
 81451ca:	b2da      	uxtb	r2, r3
 81451cc:	68fb      	ldr	r3, [r7, #12]
 81451ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 81451d0:	687b      	ldr	r3, [r7, #4]
 81451d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 81451d6:	2b01      	cmp	r3, #1
 81451d8:	d101      	bne.n	81451de <HAL_PCD_EP_SetStall+0x82>
 81451da:	2302      	movs	r3, #2
 81451dc:	e01d      	b.n	814521a <HAL_PCD_EP_SetStall+0xbe>
 81451de:	687b      	ldr	r3, [r7, #4]
 81451e0:	2201      	movs	r2, #1
 81451e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 81451e6:	687b      	ldr	r3, [r7, #4]
 81451e8:	681b      	ldr	r3, [r3, #0]
 81451ea:	68f9      	ldr	r1, [r7, #12]
 81451ec:	4618      	mov	r0, r3
 81451ee:	f006 fb91 	bl	814b914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 81451f2:	78fb      	ldrb	r3, [r7, #3]
 81451f4:	f003 030f 	and.w	r3, r3, #15
 81451f8:	2b00      	cmp	r3, #0
 81451fa:	d109      	bne.n	8145210 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 81451fc:	687b      	ldr	r3, [r7, #4]
 81451fe:	6818      	ldr	r0, [r3, #0]
 8145200:	687b      	ldr	r3, [r7, #4]
 8145202:	7999      	ldrb	r1, [r3, #6]
 8145204:	687b      	ldr	r3, [r7, #4]
 8145206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 814520a:	461a      	mov	r2, r3
 814520c:	f006 fd82 	bl	814bd14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8145210:	687b      	ldr	r3, [r7, #4]
 8145212:	2200      	movs	r2, #0
 8145214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8145218:	2300      	movs	r3, #0
}
 814521a:	4618      	mov	r0, r3
 814521c:	3710      	adds	r7, #16
 814521e:	46bd      	mov	sp, r7
 8145220:	bd80      	pop	{r7, pc}

08145222 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8145222:	b580      	push	{r7, lr}
 8145224:	b084      	sub	sp, #16
 8145226:	af00      	add	r7, sp, #0
 8145228:	6078      	str	r0, [r7, #4]
 814522a:	460b      	mov	r3, r1
 814522c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 814522e:	78fb      	ldrb	r3, [r7, #3]
 8145230:	f003 030f 	and.w	r3, r3, #15
 8145234:	687a      	ldr	r2, [r7, #4]
 8145236:	7912      	ldrb	r2, [r2, #4]
 8145238:	4293      	cmp	r3, r2
 814523a:	d901      	bls.n	8145240 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 814523c:	2301      	movs	r3, #1
 814523e:	e042      	b.n	81452c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8145240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8145244:	2b00      	cmp	r3, #0
 8145246:	da0f      	bge.n	8145268 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8145248:	78fb      	ldrb	r3, [r7, #3]
 814524a:	f003 020f 	and.w	r2, r3, #15
 814524e:	4613      	mov	r3, r2
 8145250:	00db      	lsls	r3, r3, #3
 8145252:	4413      	add	r3, r2
 8145254:	009b      	lsls	r3, r3, #2
 8145256:	3310      	adds	r3, #16
 8145258:	687a      	ldr	r2, [r7, #4]
 814525a:	4413      	add	r3, r2
 814525c:	3304      	adds	r3, #4
 814525e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8145260:	68fb      	ldr	r3, [r7, #12]
 8145262:	2201      	movs	r2, #1
 8145264:	705a      	strb	r2, [r3, #1]
 8145266:	e00f      	b.n	8145288 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8145268:	78fb      	ldrb	r3, [r7, #3]
 814526a:	f003 020f 	and.w	r2, r3, #15
 814526e:	4613      	mov	r3, r2
 8145270:	00db      	lsls	r3, r3, #3
 8145272:	4413      	add	r3, r2
 8145274:	009b      	lsls	r3, r3, #2
 8145276:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 814527a:	687a      	ldr	r2, [r7, #4]
 814527c:	4413      	add	r3, r2
 814527e:	3304      	adds	r3, #4
 8145280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8145282:	68fb      	ldr	r3, [r7, #12]
 8145284:	2200      	movs	r2, #0
 8145286:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8145288:	68fb      	ldr	r3, [r7, #12]
 814528a:	2200      	movs	r2, #0
 814528c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 814528e:	78fb      	ldrb	r3, [r7, #3]
 8145290:	f003 030f 	and.w	r3, r3, #15
 8145294:	b2da      	uxtb	r2, r3
 8145296:	68fb      	ldr	r3, [r7, #12]
 8145298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 814529a:	687b      	ldr	r3, [r7, #4]
 814529c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 81452a0:	2b01      	cmp	r3, #1
 81452a2:	d101      	bne.n	81452a8 <HAL_PCD_EP_ClrStall+0x86>
 81452a4:	2302      	movs	r3, #2
 81452a6:	e00e      	b.n	81452c6 <HAL_PCD_EP_ClrStall+0xa4>
 81452a8:	687b      	ldr	r3, [r7, #4]
 81452aa:	2201      	movs	r2, #1
 81452ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 81452b0:	687b      	ldr	r3, [r7, #4]
 81452b2:	681b      	ldr	r3, [r3, #0]
 81452b4:	68f9      	ldr	r1, [r7, #12]
 81452b6:	4618      	mov	r0, r3
 81452b8:	f006 fb9a 	bl	814b9f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 81452bc:	687b      	ldr	r3, [r7, #4]
 81452be:	2200      	movs	r2, #0
 81452c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 81452c4:	2300      	movs	r3, #0
}
 81452c6:	4618      	mov	r0, r3
 81452c8:	3710      	adds	r7, #16
 81452ca:	46bd      	mov	sp, r7
 81452cc:	bd80      	pop	{r7, pc}

081452ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 81452ce:	b580      	push	{r7, lr}
 81452d0:	b084      	sub	sp, #16
 81452d2:	af00      	add	r7, sp, #0
 81452d4:	6078      	str	r0, [r7, #4]
 81452d6:	460b      	mov	r3, r1
 81452d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 81452da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81452de:	2b00      	cmp	r3, #0
 81452e0:	da0c      	bge.n	81452fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81452e2:	78fb      	ldrb	r3, [r7, #3]
 81452e4:	f003 020f 	and.w	r2, r3, #15
 81452e8:	4613      	mov	r3, r2
 81452ea:	00db      	lsls	r3, r3, #3
 81452ec:	4413      	add	r3, r2
 81452ee:	009b      	lsls	r3, r3, #2
 81452f0:	3310      	adds	r3, #16
 81452f2:	687a      	ldr	r2, [r7, #4]
 81452f4:	4413      	add	r3, r2
 81452f6:	3304      	adds	r3, #4
 81452f8:	60fb      	str	r3, [r7, #12]
 81452fa:	e00c      	b.n	8145316 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81452fc:	78fb      	ldrb	r3, [r7, #3]
 81452fe:	f003 020f 	and.w	r2, r3, #15
 8145302:	4613      	mov	r3, r2
 8145304:	00db      	lsls	r3, r3, #3
 8145306:	4413      	add	r3, r2
 8145308:	009b      	lsls	r3, r3, #2
 814530a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 814530e:	687a      	ldr	r2, [r7, #4]
 8145310:	4413      	add	r3, r2
 8145312:	3304      	adds	r3, #4
 8145314:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8145316:	687b      	ldr	r3, [r7, #4]
 8145318:	681b      	ldr	r3, [r3, #0]
 814531a:	68f9      	ldr	r1, [r7, #12]
 814531c:	4618      	mov	r0, r3
 814531e:	f006 f9b9 	bl	814b694 <USB_EPStopXfer>
 8145322:	4603      	mov	r3, r0
 8145324:	72fb      	strb	r3, [r7, #11]

  return ret;
 8145326:	7afb      	ldrb	r3, [r7, #11]
}
 8145328:	4618      	mov	r0, r3
 814532a:	3710      	adds	r7, #16
 814532c:	46bd      	mov	sp, r7
 814532e:	bd80      	pop	{r7, pc}

08145330 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8145330:	b580      	push	{r7, lr}
 8145332:	b08a      	sub	sp, #40	@ 0x28
 8145334:	af02      	add	r7, sp, #8
 8145336:	6078      	str	r0, [r7, #4]
 8145338:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 814533a:	687b      	ldr	r3, [r7, #4]
 814533c:	681b      	ldr	r3, [r3, #0]
 814533e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8145340:	697b      	ldr	r3, [r7, #20]
 8145342:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8145344:	683a      	ldr	r2, [r7, #0]
 8145346:	4613      	mov	r3, r2
 8145348:	00db      	lsls	r3, r3, #3
 814534a:	4413      	add	r3, r2
 814534c:	009b      	lsls	r3, r3, #2
 814534e:	3310      	adds	r3, #16
 8145350:	687a      	ldr	r2, [r7, #4]
 8145352:	4413      	add	r3, r2
 8145354:	3304      	adds	r3, #4
 8145356:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8145358:	68fb      	ldr	r3, [r7, #12]
 814535a:	695a      	ldr	r2, [r3, #20]
 814535c:	68fb      	ldr	r3, [r7, #12]
 814535e:	691b      	ldr	r3, [r3, #16]
 8145360:	429a      	cmp	r2, r3
 8145362:	d901      	bls.n	8145368 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8145364:	2301      	movs	r3, #1
 8145366:	e06b      	b.n	8145440 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8145368:	68fb      	ldr	r3, [r7, #12]
 814536a:	691a      	ldr	r2, [r3, #16]
 814536c:	68fb      	ldr	r3, [r7, #12]
 814536e:	695b      	ldr	r3, [r3, #20]
 8145370:	1ad3      	subs	r3, r2, r3
 8145372:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8145374:	68fb      	ldr	r3, [r7, #12]
 8145376:	689b      	ldr	r3, [r3, #8]
 8145378:	69fa      	ldr	r2, [r7, #28]
 814537a:	429a      	cmp	r2, r3
 814537c:	d902      	bls.n	8145384 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 814537e:	68fb      	ldr	r3, [r7, #12]
 8145380:	689b      	ldr	r3, [r3, #8]
 8145382:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8145384:	69fb      	ldr	r3, [r7, #28]
 8145386:	3303      	adds	r3, #3
 8145388:	089b      	lsrs	r3, r3, #2
 814538a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 814538c:	e02a      	b.n	81453e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 814538e:	68fb      	ldr	r3, [r7, #12]
 8145390:	691a      	ldr	r2, [r3, #16]
 8145392:	68fb      	ldr	r3, [r7, #12]
 8145394:	695b      	ldr	r3, [r3, #20]
 8145396:	1ad3      	subs	r3, r2, r3
 8145398:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 814539a:	68fb      	ldr	r3, [r7, #12]
 814539c:	689b      	ldr	r3, [r3, #8]
 814539e:	69fa      	ldr	r2, [r7, #28]
 81453a0:	429a      	cmp	r2, r3
 81453a2:	d902      	bls.n	81453aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 81453a4:	68fb      	ldr	r3, [r7, #12]
 81453a6:	689b      	ldr	r3, [r3, #8]
 81453a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 81453aa:	69fb      	ldr	r3, [r7, #28]
 81453ac:	3303      	adds	r3, #3
 81453ae:	089b      	lsrs	r3, r3, #2
 81453b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 81453b2:	68fb      	ldr	r3, [r7, #12]
 81453b4:	68d9      	ldr	r1, [r3, #12]
 81453b6:	683b      	ldr	r3, [r7, #0]
 81453b8:	b2da      	uxtb	r2, r3
 81453ba:	69fb      	ldr	r3, [r7, #28]
 81453bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 81453be:	687b      	ldr	r3, [r7, #4]
 81453c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 81453c2:	9300      	str	r3, [sp, #0]
 81453c4:	4603      	mov	r3, r0
 81453c6:	6978      	ldr	r0, [r7, #20]
 81453c8:	f006 fa0e 	bl	814b7e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 81453cc:	68fb      	ldr	r3, [r7, #12]
 81453ce:	68da      	ldr	r2, [r3, #12]
 81453d0:	69fb      	ldr	r3, [r7, #28]
 81453d2:	441a      	add	r2, r3
 81453d4:	68fb      	ldr	r3, [r7, #12]
 81453d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 81453d8:	68fb      	ldr	r3, [r7, #12]
 81453da:	695a      	ldr	r2, [r3, #20]
 81453dc:	69fb      	ldr	r3, [r7, #28]
 81453de:	441a      	add	r2, r3
 81453e0:	68fb      	ldr	r3, [r7, #12]
 81453e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81453e4:	683b      	ldr	r3, [r7, #0]
 81453e6:	015a      	lsls	r2, r3, #5
 81453e8:	693b      	ldr	r3, [r7, #16]
 81453ea:	4413      	add	r3, r2
 81453ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81453f0:	699b      	ldr	r3, [r3, #24]
 81453f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 81453f4:	69ba      	ldr	r2, [r7, #24]
 81453f6:	429a      	cmp	r2, r3
 81453f8:	d809      	bhi.n	814540e <PCD_WriteEmptyTxFifo+0xde>
 81453fa:	68fb      	ldr	r3, [r7, #12]
 81453fc:	695a      	ldr	r2, [r3, #20]
 81453fe:	68fb      	ldr	r3, [r7, #12]
 8145400:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8145402:	429a      	cmp	r2, r3
 8145404:	d203      	bcs.n	814540e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8145406:	68fb      	ldr	r3, [r7, #12]
 8145408:	691b      	ldr	r3, [r3, #16]
 814540a:	2b00      	cmp	r3, #0
 814540c:	d1bf      	bne.n	814538e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 814540e:	68fb      	ldr	r3, [r7, #12]
 8145410:	691a      	ldr	r2, [r3, #16]
 8145412:	68fb      	ldr	r3, [r7, #12]
 8145414:	695b      	ldr	r3, [r3, #20]
 8145416:	429a      	cmp	r2, r3
 8145418:	d811      	bhi.n	814543e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 814541a:	683b      	ldr	r3, [r7, #0]
 814541c:	f003 030f 	and.w	r3, r3, #15
 8145420:	2201      	movs	r2, #1
 8145422:	fa02 f303 	lsl.w	r3, r2, r3
 8145426:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8145428:	693b      	ldr	r3, [r7, #16]
 814542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814542e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8145430:	68bb      	ldr	r3, [r7, #8]
 8145432:	43db      	mvns	r3, r3
 8145434:	6939      	ldr	r1, [r7, #16]
 8145436:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814543a:	4013      	ands	r3, r2
 814543c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 814543e:	2300      	movs	r3, #0
}
 8145440:	4618      	mov	r0, r3
 8145442:	3720      	adds	r7, #32
 8145444:	46bd      	mov	sp, r7
 8145446:	bd80      	pop	{r7, pc}

08145448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8145448:	b580      	push	{r7, lr}
 814544a:	b088      	sub	sp, #32
 814544c:	af00      	add	r7, sp, #0
 814544e:	6078      	str	r0, [r7, #4]
 8145450:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8145452:	687b      	ldr	r3, [r7, #4]
 8145454:	681b      	ldr	r3, [r3, #0]
 8145456:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8145458:	69fb      	ldr	r3, [r7, #28]
 814545a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 814545c:	69fb      	ldr	r3, [r7, #28]
 814545e:	333c      	adds	r3, #60	@ 0x3c
 8145460:	3304      	adds	r3, #4
 8145462:	681b      	ldr	r3, [r3, #0]
 8145464:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8145466:	683b      	ldr	r3, [r7, #0]
 8145468:	015a      	lsls	r2, r3, #5
 814546a:	69bb      	ldr	r3, [r7, #24]
 814546c:	4413      	add	r3, r2
 814546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8145472:	689b      	ldr	r3, [r3, #8]
 8145474:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8145476:	687b      	ldr	r3, [r7, #4]
 8145478:	799b      	ldrb	r3, [r3, #6]
 814547a:	2b01      	cmp	r3, #1
 814547c:	d17b      	bne.n	8145576 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 814547e:	693b      	ldr	r3, [r7, #16]
 8145480:	f003 0308 	and.w	r3, r3, #8
 8145484:	2b00      	cmp	r3, #0
 8145486:	d015      	beq.n	81454b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8145488:	697b      	ldr	r3, [r7, #20]
 814548a:	4a61      	ldr	r2, [pc, #388]	@ (8145610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 814548c:	4293      	cmp	r3, r2
 814548e:	f240 80b9 	bls.w	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8145492:	693b      	ldr	r3, [r7, #16]
 8145494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8145498:	2b00      	cmp	r3, #0
 814549a:	f000 80b3 	beq.w	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 814549e:	683b      	ldr	r3, [r7, #0]
 81454a0:	015a      	lsls	r2, r3, #5
 81454a2:	69bb      	ldr	r3, [r7, #24]
 81454a4:	4413      	add	r3, r2
 81454a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81454aa:	461a      	mov	r2, r3
 81454ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81454b0:	6093      	str	r3, [r2, #8]
 81454b2:	e0a7      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 81454b4:	693b      	ldr	r3, [r7, #16]
 81454b6:	f003 0320 	and.w	r3, r3, #32
 81454ba:	2b00      	cmp	r3, #0
 81454bc:	d009      	beq.n	81454d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81454be:	683b      	ldr	r3, [r7, #0]
 81454c0:	015a      	lsls	r2, r3, #5
 81454c2:	69bb      	ldr	r3, [r7, #24]
 81454c4:	4413      	add	r3, r2
 81454c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81454ca:	461a      	mov	r2, r3
 81454cc:	2320      	movs	r3, #32
 81454ce:	6093      	str	r3, [r2, #8]
 81454d0:	e098      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 81454d2:	693b      	ldr	r3, [r7, #16]
 81454d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 81454d8:	2b00      	cmp	r3, #0
 81454da:	f040 8093 	bne.w	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81454de:	697b      	ldr	r3, [r7, #20]
 81454e0:	4a4b      	ldr	r2, [pc, #300]	@ (8145610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 81454e2:	4293      	cmp	r3, r2
 81454e4:	d90f      	bls.n	8145506 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 81454e6:	693b      	ldr	r3, [r7, #16]
 81454e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81454ec:	2b00      	cmp	r3, #0
 81454ee:	d00a      	beq.n	8145506 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81454f0:	683b      	ldr	r3, [r7, #0]
 81454f2:	015a      	lsls	r2, r3, #5
 81454f4:	69bb      	ldr	r3, [r7, #24]
 81454f6:	4413      	add	r3, r2
 81454f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81454fc:	461a      	mov	r2, r3
 81454fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8145502:	6093      	str	r3, [r2, #8]
 8145504:	e07e      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8145506:	683a      	ldr	r2, [r7, #0]
 8145508:	4613      	mov	r3, r2
 814550a:	00db      	lsls	r3, r3, #3
 814550c:	4413      	add	r3, r2
 814550e:	009b      	lsls	r3, r3, #2
 8145510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8145514:	687a      	ldr	r2, [r7, #4]
 8145516:	4413      	add	r3, r2
 8145518:	3304      	adds	r3, #4
 814551a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 814551c:	68fb      	ldr	r3, [r7, #12]
 814551e:	6a1a      	ldr	r2, [r3, #32]
 8145520:	683b      	ldr	r3, [r7, #0]
 8145522:	0159      	lsls	r1, r3, #5
 8145524:	69bb      	ldr	r3, [r7, #24]
 8145526:	440b      	add	r3, r1
 8145528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814552c:	691b      	ldr	r3, [r3, #16]
 814552e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8145532:	1ad2      	subs	r2, r2, r3
 8145534:	68fb      	ldr	r3, [r7, #12]
 8145536:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8145538:	683b      	ldr	r3, [r7, #0]
 814553a:	2b00      	cmp	r3, #0
 814553c:	d114      	bne.n	8145568 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 814553e:	68fb      	ldr	r3, [r7, #12]
 8145540:	691b      	ldr	r3, [r3, #16]
 8145542:	2b00      	cmp	r3, #0
 8145544:	d109      	bne.n	814555a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8145546:	687b      	ldr	r3, [r7, #4]
 8145548:	6818      	ldr	r0, [r3, #0]
 814554a:	687b      	ldr	r3, [r7, #4]
 814554c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8145550:	461a      	mov	r2, r3
 8145552:	2101      	movs	r1, #1
 8145554:	f006 fbde 	bl	814bd14 <USB_EP0_OutStart>
 8145558:	e006      	b.n	8145568 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 814555a:	68fb      	ldr	r3, [r7, #12]
 814555c:	68da      	ldr	r2, [r3, #12]
 814555e:	68fb      	ldr	r3, [r7, #12]
 8145560:	695b      	ldr	r3, [r3, #20]
 8145562:	441a      	add	r2, r3
 8145564:	68fb      	ldr	r3, [r7, #12]
 8145566:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8145568:	683b      	ldr	r3, [r7, #0]
 814556a:	b2db      	uxtb	r3, r3
 814556c:	4619      	mov	r1, r3
 814556e:	6878      	ldr	r0, [r7, #4]
 8145570:	f008 ff50 	bl	814e414 <HAL_PCD_DataOutStageCallback>
 8145574:	e046      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8145576:	697b      	ldr	r3, [r7, #20]
 8145578:	4a26      	ldr	r2, [pc, #152]	@ (8145614 <PCD_EP_OutXfrComplete_int+0x1cc>)
 814557a:	4293      	cmp	r3, r2
 814557c:	d124      	bne.n	81455c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 814557e:	693b      	ldr	r3, [r7, #16]
 8145580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8145584:	2b00      	cmp	r3, #0
 8145586:	d00a      	beq.n	814559e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8145588:	683b      	ldr	r3, [r7, #0]
 814558a:	015a      	lsls	r2, r3, #5
 814558c:	69bb      	ldr	r3, [r7, #24]
 814558e:	4413      	add	r3, r2
 8145590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8145594:	461a      	mov	r2, r3
 8145596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 814559a:	6093      	str	r3, [r2, #8]
 814559c:	e032      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 814559e:	693b      	ldr	r3, [r7, #16]
 81455a0:	f003 0320 	and.w	r3, r3, #32
 81455a4:	2b00      	cmp	r3, #0
 81455a6:	d008      	beq.n	81455ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81455a8:	683b      	ldr	r3, [r7, #0]
 81455aa:	015a      	lsls	r2, r3, #5
 81455ac:	69bb      	ldr	r3, [r7, #24]
 81455ae:	4413      	add	r3, r2
 81455b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81455b4:	461a      	mov	r2, r3
 81455b6:	2320      	movs	r3, #32
 81455b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81455ba:	683b      	ldr	r3, [r7, #0]
 81455bc:	b2db      	uxtb	r3, r3
 81455be:	4619      	mov	r1, r3
 81455c0:	6878      	ldr	r0, [r7, #4]
 81455c2:	f008 ff27 	bl	814e414 <HAL_PCD_DataOutStageCallback>
 81455c6:	e01d      	b.n	8145604 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 81455c8:	683b      	ldr	r3, [r7, #0]
 81455ca:	2b00      	cmp	r3, #0
 81455cc:	d114      	bne.n	81455f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 81455ce:	6879      	ldr	r1, [r7, #4]
 81455d0:	683a      	ldr	r2, [r7, #0]
 81455d2:	4613      	mov	r3, r2
 81455d4:	00db      	lsls	r3, r3, #3
 81455d6:	4413      	add	r3, r2
 81455d8:	009b      	lsls	r3, r3, #2
 81455da:	440b      	add	r3, r1
 81455dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 81455e0:	681b      	ldr	r3, [r3, #0]
 81455e2:	2b00      	cmp	r3, #0
 81455e4:	d108      	bne.n	81455f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 81455e6:	687b      	ldr	r3, [r7, #4]
 81455e8:	6818      	ldr	r0, [r3, #0]
 81455ea:	687b      	ldr	r3, [r7, #4]
 81455ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 81455f0:	461a      	mov	r2, r3
 81455f2:	2100      	movs	r1, #0
 81455f4:	f006 fb8e 	bl	814bd14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81455f8:	683b      	ldr	r3, [r7, #0]
 81455fa:	b2db      	uxtb	r3, r3
 81455fc:	4619      	mov	r1, r3
 81455fe:	6878      	ldr	r0, [r7, #4]
 8145600:	f008 ff08 	bl	814e414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8145604:	2300      	movs	r3, #0
}
 8145606:	4618      	mov	r0, r3
 8145608:	3720      	adds	r7, #32
 814560a:	46bd      	mov	sp, r7
 814560c:	bd80      	pop	{r7, pc}
 814560e:	bf00      	nop
 8145610:	4f54300a 	.word	0x4f54300a
 8145614:	4f54310a 	.word	0x4f54310a

08145618 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8145618:	b580      	push	{r7, lr}
 814561a:	b086      	sub	sp, #24
 814561c:	af00      	add	r7, sp, #0
 814561e:	6078      	str	r0, [r7, #4]
 8145620:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8145622:	687b      	ldr	r3, [r7, #4]
 8145624:	681b      	ldr	r3, [r3, #0]
 8145626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8145628:	697b      	ldr	r3, [r7, #20]
 814562a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 814562c:	697b      	ldr	r3, [r7, #20]
 814562e:	333c      	adds	r3, #60	@ 0x3c
 8145630:	3304      	adds	r3, #4
 8145632:	681b      	ldr	r3, [r3, #0]
 8145634:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8145636:	683b      	ldr	r3, [r7, #0]
 8145638:	015a      	lsls	r2, r3, #5
 814563a:	693b      	ldr	r3, [r7, #16]
 814563c:	4413      	add	r3, r2
 814563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8145642:	689b      	ldr	r3, [r3, #8]
 8145644:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8145646:	68fb      	ldr	r3, [r7, #12]
 8145648:	4a15      	ldr	r2, [pc, #84]	@ (81456a0 <PCD_EP_OutSetupPacket_int+0x88>)
 814564a:	4293      	cmp	r3, r2
 814564c:	d90e      	bls.n	814566c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 814564e:	68bb      	ldr	r3, [r7, #8]
 8145650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8145654:	2b00      	cmp	r3, #0
 8145656:	d009      	beq.n	814566c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8145658:	683b      	ldr	r3, [r7, #0]
 814565a:	015a      	lsls	r2, r3, #5
 814565c:	693b      	ldr	r3, [r7, #16]
 814565e:	4413      	add	r3, r2
 8145660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8145664:	461a      	mov	r2, r3
 8145666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 814566a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 814566c:	6878      	ldr	r0, [r7, #4]
 814566e:	f008 febf 	bl	814e3f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8145672:	68fb      	ldr	r3, [r7, #12]
 8145674:	4a0a      	ldr	r2, [pc, #40]	@ (81456a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8145676:	4293      	cmp	r3, r2
 8145678:	d90c      	bls.n	8145694 <PCD_EP_OutSetupPacket_int+0x7c>
 814567a:	687b      	ldr	r3, [r7, #4]
 814567c:	799b      	ldrb	r3, [r3, #6]
 814567e:	2b01      	cmp	r3, #1
 8145680:	d108      	bne.n	8145694 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8145682:	687b      	ldr	r3, [r7, #4]
 8145684:	6818      	ldr	r0, [r3, #0]
 8145686:	687b      	ldr	r3, [r7, #4]
 8145688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 814568c:	461a      	mov	r2, r3
 814568e:	2101      	movs	r1, #1
 8145690:	f006 fb40 	bl	814bd14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8145694:	2300      	movs	r3, #0
}
 8145696:	4618      	mov	r0, r3
 8145698:	3718      	adds	r7, #24
 814569a:	46bd      	mov	sp, r7
 814569c:	bd80      	pop	{r7, pc}
 814569e:	bf00      	nop
 81456a0:	4f54300a 	.word	0x4f54300a

081456a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 81456a4:	b480      	push	{r7}
 81456a6:	b085      	sub	sp, #20
 81456a8:	af00      	add	r7, sp, #0
 81456aa:	6078      	str	r0, [r7, #4]
 81456ac:	460b      	mov	r3, r1
 81456ae:	70fb      	strb	r3, [r7, #3]
 81456b0:	4613      	mov	r3, r2
 81456b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 81456b4:	687b      	ldr	r3, [r7, #4]
 81456b6:	681b      	ldr	r3, [r3, #0]
 81456b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81456ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 81456bc:	78fb      	ldrb	r3, [r7, #3]
 81456be:	2b00      	cmp	r3, #0
 81456c0:	d107      	bne.n	81456d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 81456c2:	883b      	ldrh	r3, [r7, #0]
 81456c4:	0419      	lsls	r1, r3, #16
 81456c6:	687b      	ldr	r3, [r7, #4]
 81456c8:	681b      	ldr	r3, [r3, #0]
 81456ca:	68ba      	ldr	r2, [r7, #8]
 81456cc:	430a      	orrs	r2, r1
 81456ce:	629a      	str	r2, [r3, #40]	@ 0x28
 81456d0:	e028      	b.n	8145724 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 81456d2:	687b      	ldr	r3, [r7, #4]
 81456d4:	681b      	ldr	r3, [r3, #0]
 81456d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81456d8:	0c1b      	lsrs	r3, r3, #16
 81456da:	68ba      	ldr	r2, [r7, #8]
 81456dc:	4413      	add	r3, r2
 81456de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81456e0:	2300      	movs	r3, #0
 81456e2:	73fb      	strb	r3, [r7, #15]
 81456e4:	e00d      	b.n	8145702 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 81456e6:	687b      	ldr	r3, [r7, #4]
 81456e8:	681a      	ldr	r2, [r3, #0]
 81456ea:	7bfb      	ldrb	r3, [r7, #15]
 81456ec:	3340      	adds	r3, #64	@ 0x40
 81456ee:	009b      	lsls	r3, r3, #2
 81456f0:	4413      	add	r3, r2
 81456f2:	685b      	ldr	r3, [r3, #4]
 81456f4:	0c1b      	lsrs	r3, r3, #16
 81456f6:	68ba      	ldr	r2, [r7, #8]
 81456f8:	4413      	add	r3, r2
 81456fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81456fc:	7bfb      	ldrb	r3, [r7, #15]
 81456fe:	3301      	adds	r3, #1
 8145700:	73fb      	strb	r3, [r7, #15]
 8145702:	7bfa      	ldrb	r2, [r7, #15]
 8145704:	78fb      	ldrb	r3, [r7, #3]
 8145706:	3b01      	subs	r3, #1
 8145708:	429a      	cmp	r2, r3
 814570a:	d3ec      	bcc.n	81456e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 814570c:	883b      	ldrh	r3, [r7, #0]
 814570e:	0418      	lsls	r0, r3, #16
 8145710:	687b      	ldr	r3, [r7, #4]
 8145712:	6819      	ldr	r1, [r3, #0]
 8145714:	78fb      	ldrb	r3, [r7, #3]
 8145716:	3b01      	subs	r3, #1
 8145718:	68ba      	ldr	r2, [r7, #8]
 814571a:	4302      	orrs	r2, r0
 814571c:	3340      	adds	r3, #64	@ 0x40
 814571e:	009b      	lsls	r3, r3, #2
 8145720:	440b      	add	r3, r1
 8145722:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8145724:	2300      	movs	r3, #0
}
 8145726:	4618      	mov	r0, r3
 8145728:	3714      	adds	r7, #20
 814572a:	46bd      	mov	sp, r7
 814572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8145730:	4770      	bx	lr

08145732 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8145732:	b480      	push	{r7}
 8145734:	b083      	sub	sp, #12
 8145736:	af00      	add	r7, sp, #0
 8145738:	6078      	str	r0, [r7, #4]
 814573a:	460b      	mov	r3, r1
 814573c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 814573e:	687b      	ldr	r3, [r7, #4]
 8145740:	681b      	ldr	r3, [r3, #0]
 8145742:	887a      	ldrh	r2, [r7, #2]
 8145744:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8145746:	2300      	movs	r3, #0
}
 8145748:	4618      	mov	r0, r3
 814574a:	370c      	adds	r7, #12
 814574c:	46bd      	mov	sp, r7
 814574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8145752:	4770      	bx	lr

08145754 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8145754:	b480      	push	{r7}
 8145756:	b085      	sub	sp, #20
 8145758:	af00      	add	r7, sp, #0
 814575a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 814575c:	687b      	ldr	r3, [r7, #4]
 814575e:	681b      	ldr	r3, [r3, #0]
 8145760:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8145762:	687b      	ldr	r3, [r7, #4]
 8145764:	2201      	movs	r2, #1
 8145766:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 814576a:	687b      	ldr	r3, [r7, #4]
 814576c:	2200      	movs	r2, #0
 814576e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8145772:	68fb      	ldr	r3, [r7, #12]
 8145774:	699b      	ldr	r3, [r3, #24]
 8145776:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 814577a:	68fb      	ldr	r3, [r7, #12]
 814577c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 814577e:	68fb      	ldr	r3, [r7, #12]
 8145780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8145782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8145786:	f043 0303 	orr.w	r3, r3, #3
 814578a:	68fa      	ldr	r2, [r7, #12]
 814578c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 814578e:	2300      	movs	r3, #0
}
 8145790:	4618      	mov	r0, r3
 8145792:	3714      	adds	r7, #20
 8145794:	46bd      	mov	sp, r7
 8145796:	f85d 7b04 	ldr.w	r7, [sp], #4
 814579a:	4770      	bx	lr

0814579c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 814579c:	b480      	push	{r7}
 814579e:	b083      	sub	sp, #12
 81457a0:	af00      	add	r7, sp, #0
 81457a2:	6078      	str	r0, [r7, #4]
 81457a4:	460b      	mov	r3, r1
 81457a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 81457a8:	bf00      	nop
 81457aa:	370c      	adds	r7, #12
 81457ac:	46bd      	mov	sp, r7
 81457ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81457b2:	4770      	bx	lr

081457b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81457b4:	b480      	push	{r7}
 81457b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81457b8:	4b05      	ldr	r3, [pc, #20]	@ (81457d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81457ba:	68db      	ldr	r3, [r3, #12]
 81457bc:	4a04      	ldr	r2, [pc, #16]	@ (81457d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81457be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81457c2:	60d3      	str	r3, [r2, #12]
}
 81457c4:	bf00      	nop
 81457c6:	46bd      	mov	sp, r7
 81457c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81457cc:	4770      	bx	lr
 81457ce:	bf00      	nop
 81457d0:	58024800 	.word	0x58024800

081457d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81457d4:	b480      	push	{r7}
 81457d6:	b089      	sub	sp, #36	@ 0x24
 81457d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81457da:	4bb3      	ldr	r3, [pc, #716]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81457dc:	691b      	ldr	r3, [r3, #16]
 81457de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81457e2:	2b18      	cmp	r3, #24
 81457e4:	f200 8155 	bhi.w	8145a92 <HAL_RCC_GetSysClockFreq+0x2be>
 81457e8:	a201      	add	r2, pc, #4	@ (adr r2, 81457f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81457ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81457ee:	bf00      	nop
 81457f0:	08145855 	.word	0x08145855
 81457f4:	08145a93 	.word	0x08145a93
 81457f8:	08145a93 	.word	0x08145a93
 81457fc:	08145a93 	.word	0x08145a93
 8145800:	08145a93 	.word	0x08145a93
 8145804:	08145a93 	.word	0x08145a93
 8145808:	08145a93 	.word	0x08145a93
 814580c:	08145a93 	.word	0x08145a93
 8145810:	0814587b 	.word	0x0814587b
 8145814:	08145a93 	.word	0x08145a93
 8145818:	08145a93 	.word	0x08145a93
 814581c:	08145a93 	.word	0x08145a93
 8145820:	08145a93 	.word	0x08145a93
 8145824:	08145a93 	.word	0x08145a93
 8145828:	08145a93 	.word	0x08145a93
 814582c:	08145a93 	.word	0x08145a93
 8145830:	08145881 	.word	0x08145881
 8145834:	08145a93 	.word	0x08145a93
 8145838:	08145a93 	.word	0x08145a93
 814583c:	08145a93 	.word	0x08145a93
 8145840:	08145a93 	.word	0x08145a93
 8145844:	08145a93 	.word	0x08145a93
 8145848:	08145a93 	.word	0x08145a93
 814584c:	08145a93 	.word	0x08145a93
 8145850:	08145887 	.word	0x08145887
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8145854:	4b94      	ldr	r3, [pc, #592]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145856:	681b      	ldr	r3, [r3, #0]
 8145858:	f003 0320 	and.w	r3, r3, #32
 814585c:	2b00      	cmp	r3, #0
 814585e:	d009      	beq.n	8145874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8145860:	4b91      	ldr	r3, [pc, #580]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145862:	681b      	ldr	r3, [r3, #0]
 8145864:	08db      	lsrs	r3, r3, #3
 8145866:	f003 0303 	and.w	r3, r3, #3
 814586a:	4a90      	ldr	r2, [pc, #576]	@ (8145aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 814586c:	fa22 f303 	lsr.w	r3, r2, r3
 8145870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8145872:	e111      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8145874:	4b8d      	ldr	r3, [pc, #564]	@ (8145aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8145876:	61bb      	str	r3, [r7, #24]
      break;
 8145878:	e10e      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 814587a:	4b8d      	ldr	r3, [pc, #564]	@ (8145ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 814587c:	61bb      	str	r3, [r7, #24]
      break;
 814587e:	e10b      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8145880:	4b8c      	ldr	r3, [pc, #560]	@ (8145ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8145882:	61bb      	str	r3, [r7, #24]
      break;
 8145884:	e108      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8145886:	4b88      	ldr	r3, [pc, #544]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 814588a:	f003 0303 	and.w	r3, r3, #3
 814588e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8145890:	4b85      	ldr	r3, [pc, #532]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8145894:	091b      	lsrs	r3, r3, #4
 8145896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 814589a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 814589c:	4b82      	ldr	r3, [pc, #520]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 814589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81458a0:	f003 0301 	and.w	r3, r3, #1
 81458a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81458a6:	4b80      	ldr	r3, [pc, #512]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81458a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81458aa:	08db      	lsrs	r3, r3, #3
 81458ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81458b0:	68fa      	ldr	r2, [r7, #12]
 81458b2:	fb02 f303 	mul.w	r3, r2, r3
 81458b6:	ee07 3a90 	vmov	s15, r3
 81458ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81458be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81458c2:	693b      	ldr	r3, [r7, #16]
 81458c4:	2b00      	cmp	r3, #0
 81458c6:	f000 80e1 	beq.w	8145a8c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81458ca:	697b      	ldr	r3, [r7, #20]
 81458cc:	2b02      	cmp	r3, #2
 81458ce:	f000 8083 	beq.w	81459d8 <HAL_RCC_GetSysClockFreq+0x204>
 81458d2:	697b      	ldr	r3, [r7, #20]
 81458d4:	2b02      	cmp	r3, #2
 81458d6:	f200 80a1 	bhi.w	8145a1c <HAL_RCC_GetSysClockFreq+0x248>
 81458da:	697b      	ldr	r3, [r7, #20]
 81458dc:	2b00      	cmp	r3, #0
 81458de:	d003      	beq.n	81458e8 <HAL_RCC_GetSysClockFreq+0x114>
 81458e0:	697b      	ldr	r3, [r7, #20]
 81458e2:	2b01      	cmp	r3, #1
 81458e4:	d056      	beq.n	8145994 <HAL_RCC_GetSysClockFreq+0x1c0>
 81458e6:	e099      	b.n	8145a1c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81458e8:	4b6f      	ldr	r3, [pc, #444]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81458ea:	681b      	ldr	r3, [r3, #0]
 81458ec:	f003 0320 	and.w	r3, r3, #32
 81458f0:	2b00      	cmp	r3, #0
 81458f2:	d02d      	beq.n	8145950 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81458f4:	4b6c      	ldr	r3, [pc, #432]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81458f6:	681b      	ldr	r3, [r3, #0]
 81458f8:	08db      	lsrs	r3, r3, #3
 81458fa:	f003 0303 	and.w	r3, r3, #3
 81458fe:	4a6b      	ldr	r2, [pc, #428]	@ (8145aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8145900:	fa22 f303 	lsr.w	r3, r2, r3
 8145904:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8145906:	687b      	ldr	r3, [r7, #4]
 8145908:	ee07 3a90 	vmov	s15, r3
 814590c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8145910:	693b      	ldr	r3, [r7, #16]
 8145912:	ee07 3a90 	vmov	s15, r3
 8145916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 814591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 814591e:	4b62      	ldr	r3, [pc, #392]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8145922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8145926:	ee07 3a90 	vmov	s15, r3
 814592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 814592e:	ed97 6a02 	vldr	s12, [r7, #8]
 8145932:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8145ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8145936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 814593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 814593e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8145942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8145946:	ee67 7a27 	vmul.f32	s15, s14, s15
 814594a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 814594e:	e087      	b.n	8145a60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8145950:	693b      	ldr	r3, [r7, #16]
 8145952:	ee07 3a90 	vmov	s15, r3
 8145956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 814595a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8145abc <HAL_RCC_GetSysClockFreq+0x2e8>
 814595e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8145962:	4b51      	ldr	r3, [pc, #324]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8145966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 814596a:	ee07 3a90 	vmov	s15, r3
 814596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8145972:	ed97 6a02 	vldr	s12, [r7, #8]
 8145976:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8145ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 814597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 814597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8145982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8145986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 814598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 814598e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8145992:	e065      	b.n	8145a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8145994:	693b      	ldr	r3, [r7, #16]
 8145996:	ee07 3a90 	vmov	s15, r3
 814599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 814599e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8145ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81459a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81459a6:	4b40      	ldr	r3, [pc, #256]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81459a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81459aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81459ae:	ee07 3a90 	vmov	s15, r3
 81459b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81459b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81459ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8145ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81459be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81459c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81459c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81459ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81459ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81459d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81459d6:	e043      	b.n	8145a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81459d8:	693b      	ldr	r3, [r7, #16]
 81459da:	ee07 3a90 	vmov	s15, r3
 81459de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81459e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8145ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81459e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81459ea:	4b2f      	ldr	r3, [pc, #188]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81459ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81459ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81459f2:	ee07 3a90 	vmov	s15, r3
 81459f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81459fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81459fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8145ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8145a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8145a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8145a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8145a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8145a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8145a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8145a1a:	e021      	b.n	8145a60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8145a1c:	693b      	ldr	r3, [r7, #16]
 8145a1e:	ee07 3a90 	vmov	s15, r3
 8145a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8145a26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8145ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8145a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8145a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8145a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8145a36:	ee07 3a90 	vmov	s15, r3
 8145a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8145a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8145a42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8145ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8145a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8145a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8145a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8145a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8145a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8145a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8145a5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8145a60:	4b11      	ldr	r3, [pc, #68]	@ (8145aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8145a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8145a64:	0a5b      	lsrs	r3, r3, #9
 8145a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8145a6a:	3301      	adds	r3, #1
 8145a6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8145a6e:	683b      	ldr	r3, [r7, #0]
 8145a70:	ee07 3a90 	vmov	s15, r3
 8145a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8145a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8145a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8145a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8145a84:	ee17 3a90 	vmov	r3, s15
 8145a88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8145a8a:	e005      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8145a8c:	2300      	movs	r3, #0
 8145a8e:	61bb      	str	r3, [r7, #24]
      break;
 8145a90:	e002      	b.n	8145a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8145a92:	4b07      	ldr	r3, [pc, #28]	@ (8145ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8145a94:	61bb      	str	r3, [r7, #24]
      break;
 8145a96:	bf00      	nop
  }

  return sysclockfreq;
 8145a98:	69bb      	ldr	r3, [r7, #24]
}
 8145a9a:	4618      	mov	r0, r3
 8145a9c:	3724      	adds	r7, #36	@ 0x24
 8145a9e:	46bd      	mov	sp, r7
 8145aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8145aa4:	4770      	bx	lr
 8145aa6:	bf00      	nop
 8145aa8:	58024400 	.word	0x58024400
 8145aac:	03d09000 	.word	0x03d09000
 8145ab0:	003d0900 	.word	0x003d0900
 8145ab4:	017d7840 	.word	0x017d7840
 8145ab8:	46000000 	.word	0x46000000
 8145abc:	4c742400 	.word	0x4c742400
 8145ac0:	4a742400 	.word	0x4a742400
 8145ac4:	4bbebc20 	.word	0x4bbebc20

08145ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8145ac8:	b580      	push	{r7, lr}
 8145aca:	b082      	sub	sp, #8
 8145acc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8145ace:	f7ff fe81 	bl	81457d4 <HAL_RCC_GetSysClockFreq>
 8145ad2:	4602      	mov	r2, r0
 8145ad4:	4b11      	ldr	r3, [pc, #68]	@ (8145b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8145ad6:	699b      	ldr	r3, [r3, #24]
 8145ad8:	0a1b      	lsrs	r3, r3, #8
 8145ada:	f003 030f 	and.w	r3, r3, #15
 8145ade:	4910      	ldr	r1, [pc, #64]	@ (8145b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8145ae0:	5ccb      	ldrb	r3, [r1, r3]
 8145ae2:	f003 031f 	and.w	r3, r3, #31
 8145ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8145aea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8145aec:	4b0b      	ldr	r3, [pc, #44]	@ (8145b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8145aee:	699b      	ldr	r3, [r3, #24]
 8145af0:	f003 030f 	and.w	r3, r3, #15
 8145af4:	4a0a      	ldr	r2, [pc, #40]	@ (8145b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8145af6:	5cd3      	ldrb	r3, [r2, r3]
 8145af8:	f003 031f 	and.w	r3, r3, #31
 8145afc:	687a      	ldr	r2, [r7, #4]
 8145afe:	fa22 f303 	lsr.w	r3, r2, r3
 8145b02:	4a08      	ldr	r2, [pc, #32]	@ (8145b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8145b04:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8145b06:	4b07      	ldr	r3, [pc, #28]	@ (8145b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8145b08:	681b      	ldr	r3, [r3, #0]
 8145b0a:	4a07      	ldr	r2, [pc, #28]	@ (8145b28 <HAL_RCC_GetHCLKFreq+0x60>)
 8145b0c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8145b0e:	4b05      	ldr	r3, [pc, #20]	@ (8145b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8145b10:	681b      	ldr	r3, [r3, #0]
}
 8145b12:	4618      	mov	r0, r3
 8145b14:	3708      	adds	r7, #8
 8145b16:	46bd      	mov	sp, r7
 8145b18:	bd80      	pop	{r7, pc}
 8145b1a:	bf00      	nop
 8145b1c:	58024400 	.word	0x58024400
 8145b20:	0814eab8 	.word	0x0814eab8
 8145b24:	100320f4 	.word	0x100320f4
 8145b28:	100320f0 	.word	0x100320f0

08145b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8145b2c:	b580      	push	{r7, lr}
 8145b2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8145b30:	f7ff ffca 	bl	8145ac8 <HAL_RCC_GetHCLKFreq>
 8145b34:	4602      	mov	r2, r0
 8145b36:	4b06      	ldr	r3, [pc, #24]	@ (8145b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8145b38:	69db      	ldr	r3, [r3, #28]
 8145b3a:	091b      	lsrs	r3, r3, #4
 8145b3c:	f003 0307 	and.w	r3, r3, #7
 8145b40:	4904      	ldr	r1, [pc, #16]	@ (8145b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8145b42:	5ccb      	ldrb	r3, [r1, r3]
 8145b44:	f003 031f 	and.w	r3, r3, #31
 8145b48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8145b4c:	4618      	mov	r0, r3
 8145b4e:	bd80      	pop	{r7, pc}
 8145b50:	58024400 	.word	0x58024400
 8145b54:	0814eab8 	.word	0x0814eab8

08145b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8145b58:	b480      	push	{r7}
 8145b5a:	b083      	sub	sp, #12
 8145b5c:	af00      	add	r7, sp, #0
 8145b5e:	6078      	str	r0, [r7, #4]
 8145b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8145b62:	687b      	ldr	r3, [r7, #4]
 8145b64:	223f      	movs	r2, #63	@ 0x3f
 8145b66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8145b68:	4b1a      	ldr	r3, [pc, #104]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145b6a:	691b      	ldr	r3, [r3, #16]
 8145b6c:	f003 0207 	and.w	r2, r3, #7
 8145b70:	687b      	ldr	r3, [r7, #4]
 8145b72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8145b74:	4b17      	ldr	r3, [pc, #92]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145b76:	699b      	ldr	r3, [r3, #24]
 8145b78:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8145b7c:	687b      	ldr	r3, [r7, #4]
 8145b7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8145b80:	4b14      	ldr	r3, [pc, #80]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145b82:	699b      	ldr	r3, [r3, #24]
 8145b84:	f003 020f 	and.w	r2, r3, #15
 8145b88:	687b      	ldr	r3, [r7, #4]
 8145b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8145b8c:	4b11      	ldr	r3, [pc, #68]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145b8e:	699b      	ldr	r3, [r3, #24]
 8145b90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8145b94:	687b      	ldr	r3, [r7, #4]
 8145b96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8145b98:	4b0e      	ldr	r3, [pc, #56]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145b9a:	69db      	ldr	r3, [r3, #28]
 8145b9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8145ba0:	687b      	ldr	r3, [r7, #4]
 8145ba2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8145ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145ba6:	69db      	ldr	r3, [r3, #28]
 8145ba8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8145bac:	687b      	ldr	r3, [r7, #4]
 8145bae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8145bb0:	4b08      	ldr	r3, [pc, #32]	@ (8145bd4 <HAL_RCC_GetClockConfig+0x7c>)
 8145bb2:	6a1b      	ldr	r3, [r3, #32]
 8145bb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8145bb8:	687b      	ldr	r3, [r7, #4]
 8145bba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8145bbc:	4b06      	ldr	r3, [pc, #24]	@ (8145bd8 <HAL_RCC_GetClockConfig+0x80>)
 8145bbe:	681b      	ldr	r3, [r3, #0]
 8145bc0:	f003 020f 	and.w	r2, r3, #15
 8145bc4:	683b      	ldr	r3, [r7, #0]
 8145bc6:	601a      	str	r2, [r3, #0]
}
 8145bc8:	bf00      	nop
 8145bca:	370c      	adds	r7, #12
 8145bcc:	46bd      	mov	sp, r7
 8145bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8145bd2:	4770      	bx	lr
 8145bd4:	58024400 	.word	0x58024400
 8145bd8:	52002000 	.word	0x52002000

08145bdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8145bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8145be0:	b0ca      	sub	sp, #296	@ 0x128
 8145be2:	af00      	add	r7, sp, #0
 8145be4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8145be8:	2300      	movs	r3, #0
 8145bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8145bee:	2300      	movs	r3, #0
 8145bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8145bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145bfc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8145c00:	2500      	movs	r5, #0
 8145c02:	ea54 0305 	orrs.w	r3, r4, r5
 8145c06:	d049      	beq.n	8145c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8145c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8145c0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8145c12:	d02f      	beq.n	8145c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8145c14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8145c18:	d828      	bhi.n	8145c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8145c1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8145c1e:	d01a      	beq.n	8145c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8145c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8145c24:	d822      	bhi.n	8145c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8145c26:	2b00      	cmp	r3, #0
 8145c28:	d003      	beq.n	8145c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8145c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8145c2e:	d007      	beq.n	8145c40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8145c30:	e01c      	b.n	8145c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145c32:	4bb8      	ldr	r3, [pc, #736]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145c36:	4ab7      	ldr	r2, [pc, #732]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8145c3e:	e01a      	b.n	8145c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8145c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145c44:	3308      	adds	r3, #8
 8145c46:	2102      	movs	r1, #2
 8145c48:	4618      	mov	r0, r3
 8145c4a:	f002 fb61 	bl	8148310 <RCCEx_PLL2_Config>
 8145c4e:	4603      	mov	r3, r0
 8145c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8145c54:	e00f      	b.n	8145c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8145c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145c5a:	3328      	adds	r3, #40	@ 0x28
 8145c5c:	2102      	movs	r1, #2
 8145c5e:	4618      	mov	r0, r3
 8145c60:	f002 fc08 	bl	8148474 <RCCEx_PLL3_Config>
 8145c64:	4603      	mov	r3, r0
 8145c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8145c6a:	e004      	b.n	8145c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8145c6c:	2301      	movs	r3, #1
 8145c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145c72:	e000      	b.n	8145c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8145c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145c7a:	2b00      	cmp	r3, #0
 8145c7c:	d10a      	bne.n	8145c94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8145c7e:	4ba5      	ldr	r3, [pc, #660]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8145c82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8145c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8145c8c:	4aa1      	ldr	r2, [pc, #644]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145c8e:	430b      	orrs	r3, r1
 8145c90:	6513      	str	r3, [r2, #80]	@ 0x50
 8145c92:	e003      	b.n	8145c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8145c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8145c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145ca4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8145ca8:	f04f 0900 	mov.w	r9, #0
 8145cac:	ea58 0309 	orrs.w	r3, r8, r9
 8145cb0:	d047      	beq.n	8145d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8145cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8145cb8:	2b04      	cmp	r3, #4
 8145cba:	d82a      	bhi.n	8145d12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8145cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8145cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8145cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8145cc2:	bf00      	nop
 8145cc4:	08145cd9 	.word	0x08145cd9
 8145cc8:	08145ce7 	.word	0x08145ce7
 8145ccc:	08145cfd 	.word	0x08145cfd
 8145cd0:	08145d1b 	.word	0x08145d1b
 8145cd4:	08145d1b 	.word	0x08145d1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145cdc:	4a8d      	ldr	r2, [pc, #564]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145ce4:	e01a      	b.n	8145d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8145ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145cea:	3308      	adds	r3, #8
 8145cec:	2100      	movs	r1, #0
 8145cee:	4618      	mov	r0, r3
 8145cf0:	f002 fb0e 	bl	8148310 <RCCEx_PLL2_Config>
 8145cf4:	4603      	mov	r3, r0
 8145cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145cfa:	e00f      	b.n	8145d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8145cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145d00:	3328      	adds	r3, #40	@ 0x28
 8145d02:	2100      	movs	r1, #0
 8145d04:	4618      	mov	r0, r3
 8145d06:	f002 fbb5 	bl	8148474 <RCCEx_PLL3_Config>
 8145d0a:	4603      	mov	r3, r0
 8145d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145d10:	e004      	b.n	8145d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8145d12:	2301      	movs	r3, #1
 8145d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145d18:	e000      	b.n	8145d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8145d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145d20:	2b00      	cmp	r3, #0
 8145d22:	d10a      	bne.n	8145d3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8145d24:	4b7b      	ldr	r3, [pc, #492]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8145d28:	f023 0107 	bic.w	r1, r3, #7
 8145d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8145d32:	4a78      	ldr	r2, [pc, #480]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145d34:	430b      	orrs	r3, r1
 8145d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8145d38:	e003      	b.n	8145d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8145d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8145d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145d4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8145d4e:	f04f 0b00 	mov.w	fp, #0
 8145d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8145d56:	d04c      	beq.n	8145df2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8145d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8145d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8145d62:	d030      	beq.n	8145dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8145d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8145d68:	d829      	bhi.n	8145dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8145d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8145d6c:	d02d      	beq.n	8145dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8145d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8145d70:	d825      	bhi.n	8145dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8145d72:	2b80      	cmp	r3, #128	@ 0x80
 8145d74:	d018      	beq.n	8145da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8145d76:	2b80      	cmp	r3, #128	@ 0x80
 8145d78:	d821      	bhi.n	8145dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8145d7a:	2b00      	cmp	r3, #0
 8145d7c:	d002      	beq.n	8145d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8145d7e:	2b40      	cmp	r3, #64	@ 0x40
 8145d80:	d007      	beq.n	8145d92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8145d82:	e01c      	b.n	8145dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145d84:	4b63      	ldr	r3, [pc, #396]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145d88:	4a62      	ldr	r2, [pc, #392]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8145d90:	e01c      	b.n	8145dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8145d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145d96:	3308      	adds	r3, #8
 8145d98:	2100      	movs	r1, #0
 8145d9a:	4618      	mov	r0, r3
 8145d9c:	f002 fab8 	bl	8148310 <RCCEx_PLL2_Config>
 8145da0:	4603      	mov	r3, r0
 8145da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8145da6:	e011      	b.n	8145dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8145da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145dac:	3328      	adds	r3, #40	@ 0x28
 8145dae:	2100      	movs	r1, #0
 8145db0:	4618      	mov	r0, r3
 8145db2:	f002 fb5f 	bl	8148474 <RCCEx_PLL3_Config>
 8145db6:	4603      	mov	r3, r0
 8145db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8145dbc:	e006      	b.n	8145dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8145dbe:	2301      	movs	r3, #1
 8145dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145dc4:	e002      	b.n	8145dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8145dc6:	bf00      	nop
 8145dc8:	e000      	b.n	8145dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8145dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145dd0:	2b00      	cmp	r3, #0
 8145dd2:	d10a      	bne.n	8145dea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8145dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8145dd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8145ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8145de2:	4a4c      	ldr	r2, [pc, #304]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145de4:	430b      	orrs	r3, r1
 8145de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8145de8:	e003      	b.n	8145df2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8145dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8145df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145dfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8145dfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8145e02:	2300      	movs	r3, #0
 8145e04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8145e08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8145e0c:	460b      	mov	r3, r1
 8145e0e:	4313      	orrs	r3, r2
 8145e10:	d053      	beq.n	8145eba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8145e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8145e1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8145e1e:	d035      	beq.n	8145e8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8145e20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8145e24:	d82e      	bhi.n	8145e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8145e26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8145e2a:	d031      	beq.n	8145e90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8145e2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8145e30:	d828      	bhi.n	8145e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8145e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8145e36:	d01a      	beq.n	8145e6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8145e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8145e3c:	d822      	bhi.n	8145e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8145e3e:	2b00      	cmp	r3, #0
 8145e40:	d003      	beq.n	8145e4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8145e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8145e46:	d007      	beq.n	8145e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8145e48:	e01c      	b.n	8145e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145e4a:	4b32      	ldr	r3, [pc, #200]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145e4e:	4a31      	ldr	r2, [pc, #196]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145e56:	e01c      	b.n	8145e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8145e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145e5c:	3308      	adds	r3, #8
 8145e5e:	2100      	movs	r1, #0
 8145e60:	4618      	mov	r0, r3
 8145e62:	f002 fa55 	bl	8148310 <RCCEx_PLL2_Config>
 8145e66:	4603      	mov	r3, r0
 8145e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8145e6c:	e011      	b.n	8145e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8145e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145e72:	3328      	adds	r3, #40	@ 0x28
 8145e74:	2100      	movs	r1, #0
 8145e76:	4618      	mov	r0, r3
 8145e78:	f002 fafc 	bl	8148474 <RCCEx_PLL3_Config>
 8145e7c:	4603      	mov	r3, r0
 8145e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145e82:	e006      	b.n	8145e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8145e84:	2301      	movs	r3, #1
 8145e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145e8a:	e002      	b.n	8145e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8145e8c:	bf00      	nop
 8145e8e:	e000      	b.n	8145e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8145e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145e96:	2b00      	cmp	r3, #0
 8145e98:	d10b      	bne.n	8145eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8145e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8145e9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8145ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8145eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8145f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8145eac:	430b      	orrs	r3, r1
 8145eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8145eb0:	e003      	b.n	8145eba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8145eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8145eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145ec2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8145ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8145eca:	2300      	movs	r3, #0
 8145ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8145ed0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8145ed4:	460b      	mov	r3, r1
 8145ed6:	4313      	orrs	r3, r2
 8145ed8:	d056      	beq.n	8145f88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8145eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145ede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8145ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8145ee6:	d038      	beq.n	8145f5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8145ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8145eec:	d831      	bhi.n	8145f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8145eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8145ef2:	d034      	beq.n	8145f5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8145ef4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8145ef8:	d82b      	bhi.n	8145f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8145efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8145efe:	d01d      	beq.n	8145f3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8145f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8145f04:	d825      	bhi.n	8145f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8145f06:	2b00      	cmp	r3, #0
 8145f08:	d006      	beq.n	8145f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8145f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8145f0e:	d00a      	beq.n	8145f26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8145f10:	e01f      	b.n	8145f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8145f12:	bf00      	nop
 8145f14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145f18:	4ba2      	ldr	r3, [pc, #648]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145f1c:	4aa1      	ldr	r2, [pc, #644]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145f24:	e01c      	b.n	8145f60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8145f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145f2a:	3308      	adds	r3, #8
 8145f2c:	2100      	movs	r1, #0
 8145f2e:	4618      	mov	r0, r3
 8145f30:	f002 f9ee 	bl	8148310 <RCCEx_PLL2_Config>
 8145f34:	4603      	mov	r3, r0
 8145f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8145f3a:	e011      	b.n	8145f60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8145f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145f40:	3328      	adds	r3, #40	@ 0x28
 8145f42:	2100      	movs	r1, #0
 8145f44:	4618      	mov	r0, r3
 8145f46:	f002 fa95 	bl	8148474 <RCCEx_PLL3_Config>
 8145f4a:	4603      	mov	r3, r0
 8145f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8145f50:	e006      	b.n	8145f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8145f52:	2301      	movs	r3, #1
 8145f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145f58:	e002      	b.n	8145f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8145f5a:	bf00      	nop
 8145f5c:	e000      	b.n	8145f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8145f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145f64:	2b00      	cmp	r3, #0
 8145f66:	d10b      	bne.n	8145f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8145f68:	4b8e      	ldr	r3, [pc, #568]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8145f6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8145f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8145f78:	4a8a      	ldr	r2, [pc, #552]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145f7a:	430b      	orrs	r3, r1
 8145f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8145f7e:	e003      	b.n	8145f88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8145f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8145f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8145f90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8145f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8145f98:	2300      	movs	r3, #0
 8145f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8145f9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8145fa2:	460b      	mov	r3, r1
 8145fa4:	4313      	orrs	r3, r2
 8145fa6:	d03a      	beq.n	814601e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8145fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8145fae:	2b30      	cmp	r3, #48	@ 0x30
 8145fb0:	d01f      	beq.n	8145ff2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8145fb2:	2b30      	cmp	r3, #48	@ 0x30
 8145fb4:	d819      	bhi.n	8145fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8145fb6:	2b20      	cmp	r3, #32
 8145fb8:	d00c      	beq.n	8145fd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8145fba:	2b20      	cmp	r3, #32
 8145fbc:	d815      	bhi.n	8145fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8145fbe:	2b00      	cmp	r3, #0
 8145fc0:	d019      	beq.n	8145ff6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8145fc2:	2b10      	cmp	r3, #16
 8145fc4:	d111      	bne.n	8145fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8145fc6:	4b77      	ldr	r3, [pc, #476]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8145fca:	4a76      	ldr	r2, [pc, #472]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8145fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8145fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8145fd2:	e011      	b.n	8145ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8145fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8145fd8:	3308      	adds	r3, #8
 8145fda:	2102      	movs	r1, #2
 8145fdc:	4618      	mov	r0, r3
 8145fde:	f002 f997 	bl	8148310 <RCCEx_PLL2_Config>
 8145fe2:	4603      	mov	r3, r0
 8145fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8145fe8:	e006      	b.n	8145ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8145fea:	2301      	movs	r3, #1
 8145fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8145ff0:	e002      	b.n	8145ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8145ff2:	bf00      	nop
 8145ff4:	e000      	b.n	8145ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8145ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8145ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8145ffc:	2b00      	cmp	r3, #0
 8145ffe:	d10a      	bne.n	8146016 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8146000:	4b68      	ldr	r3, [pc, #416]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8146002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8146004:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8146008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814600c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 814600e:	4a65      	ldr	r2, [pc, #404]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8146010:	430b      	orrs	r3, r1
 8146012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8146014:	e003      	b.n	814601e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814601a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 814601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146026:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 814602a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 814602e:	2300      	movs	r3, #0
 8146030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8146034:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8146038:	460b      	mov	r3, r1
 814603a:	4313      	orrs	r3, r2
 814603c:	d051      	beq.n	81460e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 814603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8146044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8146048:	d035      	beq.n	81460b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 814604a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 814604e:	d82e      	bhi.n	81460ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8146050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8146054:	d031      	beq.n	81460ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8146056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 814605a:	d828      	bhi.n	81460ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 814605c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8146060:	d01a      	beq.n	8146098 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8146062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8146066:	d822      	bhi.n	81460ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8146068:	2b00      	cmp	r3, #0
 814606a:	d003      	beq.n	8146074 <HAL_RCCEx_PeriphCLKConfig+0x498>
 814606c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8146070:	d007      	beq.n	8146082 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8146072:	e01c      	b.n	81460ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8146074:	4b4b      	ldr	r3, [pc, #300]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8146076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8146078:	4a4a      	ldr	r2, [pc, #296]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 814607a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 814607e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8146080:	e01c      	b.n	81460bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8146082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146086:	3308      	adds	r3, #8
 8146088:	2100      	movs	r1, #0
 814608a:	4618      	mov	r0, r3
 814608c:	f002 f940 	bl	8148310 <RCCEx_PLL2_Config>
 8146090:	4603      	mov	r3, r0
 8146092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8146096:	e011      	b.n	81460bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8146098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814609c:	3328      	adds	r3, #40	@ 0x28
 814609e:	2100      	movs	r1, #0
 81460a0:	4618      	mov	r0, r3
 81460a2:	f002 f9e7 	bl	8148474 <RCCEx_PLL3_Config>
 81460a6:	4603      	mov	r3, r0
 81460a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81460ac:	e006      	b.n	81460bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81460ae:	2301      	movs	r3, #1
 81460b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81460b4:	e002      	b.n	81460bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81460b6:	bf00      	nop
 81460b8:	e000      	b.n	81460bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81460ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81460bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81460c0:	2b00      	cmp	r3, #0
 81460c2:	d10a      	bne.n	81460da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81460c4:	4b37      	ldr	r3, [pc, #220]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81460c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81460c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81460cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81460d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81460d2:	4a34      	ldr	r2, [pc, #208]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81460d4:	430b      	orrs	r3, r1
 81460d6:	6513      	str	r3, [r2, #80]	@ 0x50
 81460d8:	e003      	b.n	81460e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81460da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81460de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81460e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81460e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81460ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81460ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81460f2:	2300      	movs	r3, #0
 81460f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81460f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81460fc:	460b      	mov	r3, r1
 81460fe:	4313      	orrs	r3, r2
 8146100:	d056      	beq.n	81461b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8146102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8146108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 814610c:	d033      	beq.n	8146176 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 814610e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8146112:	d82c      	bhi.n	814616e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8146114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8146118:	d02f      	beq.n	814617a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 814611a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 814611e:	d826      	bhi.n	814616e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8146120:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8146124:	d02b      	beq.n	814617e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8146126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 814612a:	d820      	bhi.n	814616e <HAL_RCCEx_PeriphCLKConfig+0x592>
 814612c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8146130:	d012      	beq.n	8146158 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8146132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8146136:	d81a      	bhi.n	814616e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8146138:	2b00      	cmp	r3, #0
 814613a:	d022      	beq.n	8146182 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 814613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8146140:	d115      	bne.n	814616e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8146142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146146:	3308      	adds	r3, #8
 8146148:	2101      	movs	r1, #1
 814614a:	4618      	mov	r0, r3
 814614c:	f002 f8e0 	bl	8148310 <RCCEx_PLL2_Config>
 8146150:	4603      	mov	r3, r0
 8146152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8146156:	e015      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8146158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814615c:	3328      	adds	r3, #40	@ 0x28
 814615e:	2101      	movs	r1, #1
 8146160:	4618      	mov	r0, r3
 8146162:	f002 f987 	bl	8148474 <RCCEx_PLL3_Config>
 8146166:	4603      	mov	r3, r0
 8146168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 814616c:	e00a      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 814616e:	2301      	movs	r3, #1
 8146170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146174:	e006      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8146176:	bf00      	nop
 8146178:	e004      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 814617a:	bf00      	nop
 814617c:	e002      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 814617e:	bf00      	nop
 8146180:	e000      	b.n	8146184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8146182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146188:	2b00      	cmp	r3, #0
 814618a:	d10d      	bne.n	81461a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 814618c:	4b05      	ldr	r3, [pc, #20]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 814618e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8146190:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8146194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 814619a:	4a02      	ldr	r2, [pc, #8]	@ (81461a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 814619c:	430b      	orrs	r3, r1
 814619e:	6513      	str	r3, [r2, #80]	@ 0x50
 81461a0:	e006      	b.n	81461b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81461a2:	bf00      	nop
 81461a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81461a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81461ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81461b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81461b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81461b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81461bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81461c0:	2300      	movs	r3, #0
 81461c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81461c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81461ca:	460b      	mov	r3, r1
 81461cc:	4313      	orrs	r3, r2
 81461ce:	d055      	beq.n	814627c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81461d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81461d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81461d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81461dc:	d033      	beq.n	8146246 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81461de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81461e2:	d82c      	bhi.n	814623e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81461e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81461e8:	d02f      	beq.n	814624a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81461ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81461ee:	d826      	bhi.n	814623e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81461f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81461f4:	d02b      	beq.n	814624e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81461f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81461fa:	d820      	bhi.n	814623e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81461fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8146200:	d012      	beq.n	8146228 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8146202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8146206:	d81a      	bhi.n	814623e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8146208:	2b00      	cmp	r3, #0
 814620a:	d022      	beq.n	8146252 <HAL_RCCEx_PeriphCLKConfig+0x676>
 814620c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8146210:	d115      	bne.n	814623e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8146212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146216:	3308      	adds	r3, #8
 8146218:	2101      	movs	r1, #1
 814621a:	4618      	mov	r0, r3
 814621c:	f002 f878 	bl	8148310 <RCCEx_PLL2_Config>
 8146220:	4603      	mov	r3, r0
 8146222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8146226:	e015      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8146228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814622c:	3328      	adds	r3, #40	@ 0x28
 814622e:	2101      	movs	r1, #1
 8146230:	4618      	mov	r0, r3
 8146232:	f002 f91f 	bl	8148474 <RCCEx_PLL3_Config>
 8146236:	4603      	mov	r3, r0
 8146238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 814623c:	e00a      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 814623e:	2301      	movs	r3, #1
 8146240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146244:	e006      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8146246:	bf00      	nop
 8146248:	e004      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 814624a:	bf00      	nop
 814624c:	e002      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 814624e:	bf00      	nop
 8146250:	e000      	b.n	8146254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8146252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146258:	2b00      	cmp	r3, #0
 814625a:	d10b      	bne.n	8146274 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 814625c:	4ba4      	ldr	r3, [pc, #656]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814625e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8146260:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8146264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 814626c:	4aa0      	ldr	r2, [pc, #640]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814626e:	430b      	orrs	r3, r1
 8146270:	6593      	str	r3, [r2, #88]	@ 0x58
 8146272:	e003      	b.n	814627c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 814627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146284:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8146288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 814628c:	2300      	movs	r3, #0
 814628e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8146292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8146296:	460b      	mov	r3, r1
 8146298:	4313      	orrs	r3, r2
 814629a:	d037      	beq.n	814630c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 814629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81462a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81462a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81462a6:	d00e      	beq.n	81462c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81462a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81462ac:	d816      	bhi.n	81462dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 81462ae:	2b00      	cmp	r3, #0
 81462b0:	d018      	beq.n	81462e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81462b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81462b6:	d111      	bne.n	81462dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81462b8:	4b8d      	ldr	r3, [pc, #564]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81462ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81462bc:	4a8c      	ldr	r2, [pc, #560]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81462be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81462c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81462c4:	e00f      	b.n	81462e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81462c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81462ca:	3308      	adds	r3, #8
 81462cc:	2101      	movs	r1, #1
 81462ce:	4618      	mov	r0, r3
 81462d0:	f002 f81e 	bl	8148310 <RCCEx_PLL2_Config>
 81462d4:	4603      	mov	r3, r0
 81462d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81462da:	e004      	b.n	81462e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81462dc:	2301      	movs	r3, #1
 81462de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81462e2:	e000      	b.n	81462e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81462e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81462e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81462ea:	2b00      	cmp	r3, #0
 81462ec:	d10a      	bne.n	8146304 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81462ee:	4b80      	ldr	r3, [pc, #512]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81462f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81462f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81462f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81462fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81462fc:	4a7c      	ldr	r2, [pc, #496]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81462fe:	430b      	orrs	r3, r1
 8146300:	6513      	str	r3, [r2, #80]	@ 0x50
 8146302:	e003      	b.n	814630c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 814630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146314:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8146318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 814631c:	2300      	movs	r3, #0
 814631e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8146322:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8146326:	460b      	mov	r3, r1
 8146328:	4313      	orrs	r3, r2
 814632a:	d039      	beq.n	81463a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 814632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8146332:	2b03      	cmp	r3, #3
 8146334:	d81c      	bhi.n	8146370 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8146336:	a201      	add	r2, pc, #4	@ (adr r2, 814633c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8146338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814633c:	08146379 	.word	0x08146379
 8146340:	0814634d 	.word	0x0814634d
 8146344:	0814635b 	.word	0x0814635b
 8146348:	08146379 	.word	0x08146379
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 814634c:	4b68      	ldr	r3, [pc, #416]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8146350:	4a67      	ldr	r2, [pc, #412]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8146356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8146358:	e00f      	b.n	814637a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 814635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814635e:	3308      	adds	r3, #8
 8146360:	2102      	movs	r1, #2
 8146362:	4618      	mov	r0, r3
 8146364:	f001 ffd4 	bl	8148310 <RCCEx_PLL2_Config>
 8146368:	4603      	mov	r3, r0
 814636a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 814636e:	e004      	b.n	814637a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8146370:	2301      	movs	r3, #1
 8146372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146376:	e000      	b.n	814637a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8146378:	bf00      	nop
    }

    if (ret == HAL_OK)
 814637a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814637e:	2b00      	cmp	r3, #0
 8146380:	d10a      	bne.n	8146398 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8146382:	4b5b      	ldr	r3, [pc, #364]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8146386:	f023 0103 	bic.w	r1, r3, #3
 814638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814638e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8146390:	4a57      	ldr	r2, [pc, #348]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146392:	430b      	orrs	r3, r1
 8146394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8146396:	e003      	b.n	81463a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814639c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81463a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81463a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81463a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81463ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81463b0:	2300      	movs	r3, #0
 81463b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81463b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81463ba:	460b      	mov	r3, r1
 81463bc:	4313      	orrs	r3, r2
 81463be:	f000 809f 	beq.w	8146500 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81463c2:	4b4c      	ldr	r3, [pc, #304]	@ (81464f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81463c4:	681b      	ldr	r3, [r3, #0]
 81463c6:	4a4b      	ldr	r2, [pc, #300]	@ (81464f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81463c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81463cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81463ce:	f7fc fac7 	bl	8142960 <HAL_GetTick>
 81463d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81463d6:	e00b      	b.n	81463f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81463d8:	f7fc fac2 	bl	8142960 <HAL_GetTick>
 81463dc:	4602      	mov	r2, r0
 81463de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81463e2:	1ad3      	subs	r3, r2, r3
 81463e4:	2b64      	cmp	r3, #100	@ 0x64
 81463e6:	d903      	bls.n	81463f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81463e8:	2303      	movs	r3, #3
 81463ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81463ee:	e005      	b.n	81463fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81463f0:	4b40      	ldr	r3, [pc, #256]	@ (81464f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81463f2:	681b      	ldr	r3, [r3, #0]
 81463f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81463f8:	2b00      	cmp	r3, #0
 81463fa:	d0ed      	beq.n	81463d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81463fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146400:	2b00      	cmp	r3, #0
 8146402:	d179      	bne.n	81464f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8146404:	4b3a      	ldr	r3, [pc, #232]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146406:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8146408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814640c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8146410:	4053      	eors	r3, r2
 8146412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8146416:	2b00      	cmp	r3, #0
 8146418:	d015      	beq.n	8146446 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 814641a:	4b35      	ldr	r3, [pc, #212]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814641c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 814641e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8146422:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8146426:	4b32      	ldr	r3, [pc, #200]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 814642a:	4a31      	ldr	r2, [pc, #196]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8146430:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8146432:	4b2f      	ldr	r3, [pc, #188]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8146436:	4a2e      	ldr	r2, [pc, #184]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 814643c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 814643e:	4a2c      	ldr	r2, [pc, #176]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8146440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8146444:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8146446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814644a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 814644e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8146452:	d118      	bne.n	8146486 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8146454:	f7fc fa84 	bl	8142960 <HAL_GetTick>
 8146458:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 814645c:	e00d      	b.n	814647a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 814645e:	f7fc fa7f 	bl	8142960 <HAL_GetTick>
 8146462:	4602      	mov	r2, r0
 8146464:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8146468:	1ad2      	subs	r2, r2, r3
 814646a:	f241 3388 	movw	r3, #5000	@ 0x1388
 814646e:	429a      	cmp	r2, r3
 8146470:	d903      	bls.n	814647a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8146472:	2303      	movs	r3, #3
 8146474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8146478:	e005      	b.n	8146486 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 814647a:	4b1d      	ldr	r3, [pc, #116]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 814647c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 814647e:	f003 0302 	and.w	r3, r3, #2
 8146482:	2b00      	cmp	r3, #0
 8146484:	d0eb      	beq.n	814645e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8146486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814648a:	2b00      	cmp	r3, #0
 814648c:	d12b      	bne.n	81464e6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 814648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8146496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 814649a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 814649e:	d110      	bne.n	81464c2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81464a0:	4b13      	ldr	r3, [pc, #76]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464a2:	691b      	ldr	r3, [r3, #16]
 81464a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81464a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81464ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81464b0:	091b      	lsrs	r3, r3, #4
 81464b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81464b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81464ba:	4a0d      	ldr	r2, [pc, #52]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464bc:	430b      	orrs	r3, r1
 81464be:	6113      	str	r3, [r2, #16]
 81464c0:	e005      	b.n	81464ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81464c2:	4b0b      	ldr	r3, [pc, #44]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464c4:	691b      	ldr	r3, [r3, #16]
 81464c6:	4a0a      	ldr	r2, [pc, #40]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81464cc:	6113      	str	r3, [r2, #16]
 81464ce:	4b08      	ldr	r3, [pc, #32]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81464d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81464d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81464da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81464de:	4a04      	ldr	r2, [pc, #16]	@ (81464f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81464e0:	430b      	orrs	r3, r1
 81464e2:	6713      	str	r3, [r2, #112]	@ 0x70
 81464e4:	e00c      	b.n	8146500 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81464e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81464ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81464ee:	e007      	b.n	8146500 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81464f0:	58024400 	.word	0x58024400
 81464f4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81464f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81464fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8146500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146508:	f002 0301 	and.w	r3, r2, #1
 814650c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8146510:	2300      	movs	r3, #0
 8146512:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8146516:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 814651a:	460b      	mov	r3, r1
 814651c:	4313      	orrs	r3, r2
 814651e:	f000 8089 	beq.w	8146634 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8146522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8146528:	2b28      	cmp	r3, #40	@ 0x28
 814652a:	d86b      	bhi.n	8146604 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 814652c:	a201      	add	r2, pc, #4	@ (adr r2, 8146534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 814652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8146532:	bf00      	nop
 8146534:	0814660d 	.word	0x0814660d
 8146538:	08146605 	.word	0x08146605
 814653c:	08146605 	.word	0x08146605
 8146540:	08146605 	.word	0x08146605
 8146544:	08146605 	.word	0x08146605
 8146548:	08146605 	.word	0x08146605
 814654c:	08146605 	.word	0x08146605
 8146550:	08146605 	.word	0x08146605
 8146554:	081465d9 	.word	0x081465d9
 8146558:	08146605 	.word	0x08146605
 814655c:	08146605 	.word	0x08146605
 8146560:	08146605 	.word	0x08146605
 8146564:	08146605 	.word	0x08146605
 8146568:	08146605 	.word	0x08146605
 814656c:	08146605 	.word	0x08146605
 8146570:	08146605 	.word	0x08146605
 8146574:	081465ef 	.word	0x081465ef
 8146578:	08146605 	.word	0x08146605
 814657c:	08146605 	.word	0x08146605
 8146580:	08146605 	.word	0x08146605
 8146584:	08146605 	.word	0x08146605
 8146588:	08146605 	.word	0x08146605
 814658c:	08146605 	.word	0x08146605
 8146590:	08146605 	.word	0x08146605
 8146594:	0814660d 	.word	0x0814660d
 8146598:	08146605 	.word	0x08146605
 814659c:	08146605 	.word	0x08146605
 81465a0:	08146605 	.word	0x08146605
 81465a4:	08146605 	.word	0x08146605
 81465a8:	08146605 	.word	0x08146605
 81465ac:	08146605 	.word	0x08146605
 81465b0:	08146605 	.word	0x08146605
 81465b4:	0814660d 	.word	0x0814660d
 81465b8:	08146605 	.word	0x08146605
 81465bc:	08146605 	.word	0x08146605
 81465c0:	08146605 	.word	0x08146605
 81465c4:	08146605 	.word	0x08146605
 81465c8:	08146605 	.word	0x08146605
 81465cc:	08146605 	.word	0x08146605
 81465d0:	08146605 	.word	0x08146605
 81465d4:	0814660d 	.word	0x0814660d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81465d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81465dc:	3308      	adds	r3, #8
 81465de:	2101      	movs	r1, #1
 81465e0:	4618      	mov	r0, r3
 81465e2:	f001 fe95 	bl	8148310 <RCCEx_PLL2_Config>
 81465e6:	4603      	mov	r3, r0
 81465e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81465ec:	e00f      	b.n	814660e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81465ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81465f2:	3328      	adds	r3, #40	@ 0x28
 81465f4:	2101      	movs	r1, #1
 81465f6:	4618      	mov	r0, r3
 81465f8:	f001 ff3c 	bl	8148474 <RCCEx_PLL3_Config>
 81465fc:	4603      	mov	r3, r0
 81465fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8146602:	e004      	b.n	814660e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146604:	2301      	movs	r3, #1
 8146606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 814660a:	e000      	b.n	814660e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 814660c:	bf00      	nop
    }

    if (ret == HAL_OK)
 814660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146612:	2b00      	cmp	r3, #0
 8146614:	d10a      	bne.n	814662c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8146616:	4bbf      	ldr	r3, [pc, #764]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 814661a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 814661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8146624:	4abb      	ldr	r2, [pc, #748]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146626:	430b      	orrs	r3, r1
 8146628:	6553      	str	r3, [r2, #84]	@ 0x54
 814662a:	e003      	b.n	8146634 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 814662c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8146634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146638:	e9d3 2300 	ldrd	r2, r3, [r3]
 814663c:	f002 0302 	and.w	r3, r2, #2
 8146640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8146644:	2300      	movs	r3, #0
 8146646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 814664a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 814664e:	460b      	mov	r3, r1
 8146650:	4313      	orrs	r3, r2
 8146652:	d041      	beq.n	81466d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8146654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 814665a:	2b05      	cmp	r3, #5
 814665c:	d824      	bhi.n	81466a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 814665e:	a201      	add	r2, pc, #4	@ (adr r2, 8146664 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8146660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8146664:	081466b1 	.word	0x081466b1
 8146668:	0814667d 	.word	0x0814667d
 814666c:	08146693 	.word	0x08146693
 8146670:	081466b1 	.word	0x081466b1
 8146674:	081466b1 	.word	0x081466b1
 8146678:	081466b1 	.word	0x081466b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 814667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146680:	3308      	adds	r3, #8
 8146682:	2101      	movs	r1, #1
 8146684:	4618      	mov	r0, r3
 8146686:	f001 fe43 	bl	8148310 <RCCEx_PLL2_Config>
 814668a:	4603      	mov	r3, r0
 814668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8146690:	e00f      	b.n	81466b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8146692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146696:	3328      	adds	r3, #40	@ 0x28
 8146698:	2101      	movs	r1, #1
 814669a:	4618      	mov	r0, r3
 814669c:	f001 feea 	bl	8148474 <RCCEx_PLL3_Config>
 81466a0:	4603      	mov	r3, r0
 81466a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81466a6:	e004      	b.n	81466b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81466a8:	2301      	movs	r3, #1
 81466aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81466ae:	e000      	b.n	81466b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81466b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81466b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81466b6:	2b00      	cmp	r3, #0
 81466b8:	d10a      	bne.n	81466d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81466ba:	4b96      	ldr	r3, [pc, #600]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81466bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81466be:	f023 0107 	bic.w	r1, r3, #7
 81466c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81466c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81466c8:	4a92      	ldr	r2, [pc, #584]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81466ca:	430b      	orrs	r3, r1
 81466cc:	6553      	str	r3, [r2, #84]	@ 0x54
 81466ce:	e003      	b.n	81466d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81466d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81466d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81466d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81466dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81466e0:	f002 0304 	and.w	r3, r2, #4
 81466e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81466e8:	2300      	movs	r3, #0
 81466ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81466ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81466f2:	460b      	mov	r3, r1
 81466f4:	4313      	orrs	r3, r2
 81466f6:	d044      	beq.n	8146782 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81466f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81466fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8146700:	2b05      	cmp	r3, #5
 8146702:	d825      	bhi.n	8146750 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8146704:	a201      	add	r2, pc, #4	@ (adr r2, 814670c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8146706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814670a:	bf00      	nop
 814670c:	08146759 	.word	0x08146759
 8146710:	08146725 	.word	0x08146725
 8146714:	0814673b 	.word	0x0814673b
 8146718:	08146759 	.word	0x08146759
 814671c:	08146759 	.word	0x08146759
 8146720:	08146759 	.word	0x08146759
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8146724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146728:	3308      	adds	r3, #8
 814672a:	2101      	movs	r1, #1
 814672c:	4618      	mov	r0, r3
 814672e:	f001 fdef 	bl	8148310 <RCCEx_PLL2_Config>
 8146732:	4603      	mov	r3, r0
 8146734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8146738:	e00f      	b.n	814675a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 814673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814673e:	3328      	adds	r3, #40	@ 0x28
 8146740:	2101      	movs	r1, #1
 8146742:	4618      	mov	r0, r3
 8146744:	f001 fe96 	bl	8148474 <RCCEx_PLL3_Config>
 8146748:	4603      	mov	r3, r0
 814674a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 814674e:	e004      	b.n	814675a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146750:	2301      	movs	r3, #1
 8146752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146756:	e000      	b.n	814675a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8146758:	bf00      	nop
    }

    if (ret == HAL_OK)
 814675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814675e:	2b00      	cmp	r3, #0
 8146760:	d10b      	bne.n	814677a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8146762:	4b6c      	ldr	r3, [pc, #432]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8146766:	f023 0107 	bic.w	r1, r3, #7
 814676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814676e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8146772:	4a68      	ldr	r2, [pc, #416]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146774:	430b      	orrs	r3, r1
 8146776:	6593      	str	r3, [r2, #88]	@ 0x58
 8146778:	e003      	b.n	8146782 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 814677a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814677e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8146782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146786:	e9d3 2300 	ldrd	r2, r3, [r3]
 814678a:	f002 0320 	and.w	r3, r2, #32
 814678e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8146792:	2300      	movs	r3, #0
 8146794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8146798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 814679c:	460b      	mov	r3, r1
 814679e:	4313      	orrs	r3, r2
 81467a0:	d055      	beq.n	814684e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81467a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81467a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81467aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81467ae:	d033      	beq.n	8146818 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81467b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81467b4:	d82c      	bhi.n	8146810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81467b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81467ba:	d02f      	beq.n	814681c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81467bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81467c0:	d826      	bhi.n	8146810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81467c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81467c6:	d02b      	beq.n	8146820 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81467c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81467cc:	d820      	bhi.n	8146810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81467ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81467d2:	d012      	beq.n	81467fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81467d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81467d8:	d81a      	bhi.n	8146810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81467da:	2b00      	cmp	r3, #0
 81467dc:	d022      	beq.n	8146824 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81467de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81467e2:	d115      	bne.n	8146810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81467e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81467e8:	3308      	adds	r3, #8
 81467ea:	2100      	movs	r1, #0
 81467ec:	4618      	mov	r0, r3
 81467ee:	f001 fd8f 	bl	8148310 <RCCEx_PLL2_Config>
 81467f2:	4603      	mov	r3, r0
 81467f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81467f8:	e015      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81467fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81467fe:	3328      	adds	r3, #40	@ 0x28
 8146800:	2102      	movs	r1, #2
 8146802:	4618      	mov	r0, r3
 8146804:	f001 fe36 	bl	8148474 <RCCEx_PLL3_Config>
 8146808:	4603      	mov	r3, r0
 814680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 814680e:	e00a      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146810:	2301      	movs	r3, #1
 8146812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146816:	e006      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8146818:	bf00      	nop
 814681a:	e004      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 814681c:	bf00      	nop
 814681e:	e002      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8146820:	bf00      	nop
 8146822:	e000      	b.n	8146826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8146824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814682a:	2b00      	cmp	r3, #0
 814682c:	d10b      	bne.n	8146846 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 814682e:	4b39      	ldr	r3, [pc, #228]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146832:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8146836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 814683e:	4a35      	ldr	r2, [pc, #212]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8146840:	430b      	orrs	r3, r1
 8146842:	6553      	str	r3, [r2, #84]	@ 0x54
 8146844:	e003      	b.n	814684e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814684a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 814684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146856:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 814685a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 814685e:	2300      	movs	r3, #0
 8146860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8146864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8146868:	460b      	mov	r3, r1
 814686a:	4313      	orrs	r3, r2
 814686c:	d058      	beq.n	8146920 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 814686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8146876:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 814687a:	d033      	beq.n	81468e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 814687c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8146880:	d82c      	bhi.n	81468dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8146882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8146886:	d02f      	beq.n	81468e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8146888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 814688c:	d826      	bhi.n	81468dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 814688e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8146892:	d02b      	beq.n	81468ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8146894:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8146898:	d820      	bhi.n	81468dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 814689a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 814689e:	d012      	beq.n	81468c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81468a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81468a4:	d81a      	bhi.n	81468dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81468a6:	2b00      	cmp	r3, #0
 81468a8:	d022      	beq.n	81468f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81468aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81468ae:	d115      	bne.n	81468dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81468b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81468b4:	3308      	adds	r3, #8
 81468b6:	2100      	movs	r1, #0
 81468b8:	4618      	mov	r0, r3
 81468ba:	f001 fd29 	bl	8148310 <RCCEx_PLL2_Config>
 81468be:	4603      	mov	r3, r0
 81468c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81468c4:	e015      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81468c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81468ca:	3328      	adds	r3, #40	@ 0x28
 81468cc:	2102      	movs	r1, #2
 81468ce:	4618      	mov	r0, r3
 81468d0:	f001 fdd0 	bl	8148474 <RCCEx_PLL3_Config>
 81468d4:	4603      	mov	r3, r0
 81468d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81468da:	e00a      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81468dc:	2301      	movs	r3, #1
 81468de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81468e2:	e006      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81468e4:	bf00      	nop
 81468e6:	e004      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81468e8:	bf00      	nop
 81468ea:	e002      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81468ec:	bf00      	nop
 81468ee:	e000      	b.n	81468f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81468f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81468f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81468f6:	2b00      	cmp	r3, #0
 81468f8:	d10e      	bne.n	8146918 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81468fa:	4b06      	ldr	r3, [pc, #24]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81468fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81468fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8146902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 814690a:	4a02      	ldr	r2, [pc, #8]	@ (8146914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 814690c:	430b      	orrs	r3, r1
 814690e:	6593      	str	r3, [r2, #88]	@ 0x58
 8146910:	e006      	b.n	8146920 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8146912:	bf00      	nop
 8146914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 814691c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8146920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146928:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 814692c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8146930:	2300      	movs	r3, #0
 8146932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8146936:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 814693a:	460b      	mov	r3, r1
 814693c:	4313      	orrs	r3, r2
 814693e:	d055      	beq.n	81469ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8146940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146944:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8146948:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 814694c:	d033      	beq.n	81469b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 814694e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8146952:	d82c      	bhi.n	81469ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8146954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8146958:	d02f      	beq.n	81469ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 814695a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 814695e:	d826      	bhi.n	81469ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8146960:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8146964:	d02b      	beq.n	81469be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8146966:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 814696a:	d820      	bhi.n	81469ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 814696c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8146970:	d012      	beq.n	8146998 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8146972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8146976:	d81a      	bhi.n	81469ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8146978:	2b00      	cmp	r3, #0
 814697a:	d022      	beq.n	81469c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 814697c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8146980:	d115      	bne.n	81469ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8146982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146986:	3308      	adds	r3, #8
 8146988:	2100      	movs	r1, #0
 814698a:	4618      	mov	r0, r3
 814698c:	f001 fcc0 	bl	8148310 <RCCEx_PLL2_Config>
 8146990:	4603      	mov	r3, r0
 8146992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8146996:	e015      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8146998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 814699c:	3328      	adds	r3, #40	@ 0x28
 814699e:	2102      	movs	r1, #2
 81469a0:	4618      	mov	r0, r3
 81469a2:	f001 fd67 	bl	8148474 <RCCEx_PLL3_Config>
 81469a6:	4603      	mov	r3, r0
 81469a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81469ac:	e00a      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81469ae:	2301      	movs	r3, #1
 81469b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81469b4:	e006      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81469b6:	bf00      	nop
 81469b8:	e004      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81469ba:	bf00      	nop
 81469bc:	e002      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81469be:	bf00      	nop
 81469c0:	e000      	b.n	81469c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81469c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81469c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81469c8:	2b00      	cmp	r3, #0
 81469ca:	d10b      	bne.n	81469e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81469cc:	4ba1      	ldr	r3, [pc, #644]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81469ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81469d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81469d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81469d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81469dc:	4a9d      	ldr	r2, [pc, #628]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81469de:	430b      	orrs	r3, r1
 81469e0:	6593      	str	r3, [r2, #88]	@ 0x58
 81469e2:	e003      	b.n	81469ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81469e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81469e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81469ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81469f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81469f4:	f002 0308 	and.w	r3, r2, #8
 81469f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81469fc:	2300      	movs	r3, #0
 81469fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8146a02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8146a06:	460b      	mov	r3, r1
 8146a08:	4313      	orrs	r3, r2
 8146a0a:	d01e      	beq.n	8146a4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8146a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8146a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8146a18:	d10c      	bne.n	8146a34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8146a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a1e:	3328      	adds	r3, #40	@ 0x28
 8146a20:	2102      	movs	r1, #2
 8146a22:	4618      	mov	r0, r3
 8146a24:	f001 fd26 	bl	8148474 <RCCEx_PLL3_Config>
 8146a28:	4603      	mov	r3, r0
 8146a2a:	2b00      	cmp	r3, #0
 8146a2c:	d002      	beq.n	8146a34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8146a2e:	2301      	movs	r3, #1
 8146a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8146a34:	4b87      	ldr	r3, [pc, #540]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146a38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8146a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8146a44:	4a83      	ldr	r2, [pc, #524]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146a46:	430b      	orrs	r3, r1
 8146a48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8146a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146a52:	f002 0310 	and.w	r3, r2, #16
 8146a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8146a5a:	2300      	movs	r3, #0
 8146a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8146a60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8146a64:	460b      	mov	r3, r1
 8146a66:	4313      	orrs	r3, r2
 8146a68:	d01e      	beq.n	8146aa8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8146a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8146a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8146a76:	d10c      	bne.n	8146a92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8146a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a7c:	3328      	adds	r3, #40	@ 0x28
 8146a7e:	2102      	movs	r1, #2
 8146a80:	4618      	mov	r0, r3
 8146a82:	f001 fcf7 	bl	8148474 <RCCEx_PLL3_Config>
 8146a86:	4603      	mov	r3, r0
 8146a88:	2b00      	cmp	r3, #0
 8146a8a:	d002      	beq.n	8146a92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8146a8c:	2301      	movs	r3, #1
 8146a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8146a92:	4b70      	ldr	r3, [pc, #448]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8146a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8146a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8146aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146aa4:	430b      	orrs	r3, r1
 8146aa6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8146aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146ab0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8146ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8146ab8:	2300      	movs	r3, #0
 8146aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8146abe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8146ac2:	460b      	mov	r3, r1
 8146ac4:	4313      	orrs	r3, r2
 8146ac6:	d03e      	beq.n	8146b46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8146ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146acc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8146ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8146ad4:	d022      	beq.n	8146b1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8146ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8146ada:	d81b      	bhi.n	8146b14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8146adc:	2b00      	cmp	r3, #0
 8146ade:	d003      	beq.n	8146ae8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8146ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8146ae4:	d00b      	beq.n	8146afe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8146ae6:	e015      	b.n	8146b14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8146ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146aec:	3308      	adds	r3, #8
 8146aee:	2100      	movs	r1, #0
 8146af0:	4618      	mov	r0, r3
 8146af2:	f001 fc0d 	bl	8148310 <RCCEx_PLL2_Config>
 8146af6:	4603      	mov	r3, r0
 8146af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8146afc:	e00f      	b.n	8146b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8146afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146b02:	3328      	adds	r3, #40	@ 0x28
 8146b04:	2102      	movs	r1, #2
 8146b06:	4618      	mov	r0, r3
 8146b08:	f001 fcb4 	bl	8148474 <RCCEx_PLL3_Config>
 8146b0c:	4603      	mov	r3, r0
 8146b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8146b12:	e004      	b.n	8146b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146b14:	2301      	movs	r3, #1
 8146b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146b1a:	e000      	b.n	8146b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8146b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146b22:	2b00      	cmp	r3, #0
 8146b24:	d10b      	bne.n	8146b3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8146b26:	4b4b      	ldr	r3, [pc, #300]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8146b2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8146b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8146b36:	4a47      	ldr	r2, [pc, #284]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146b38:	430b      	orrs	r3, r1
 8146b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8146b3c:	e003      	b.n	8146b46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8146b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146b4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8146b52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8146b54:	2300      	movs	r3, #0
 8146b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8146b58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8146b5c:	460b      	mov	r3, r1
 8146b5e:	4313      	orrs	r3, r2
 8146b60:	d03b      	beq.n	8146bda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8146b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8146b6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8146b6e:	d01f      	beq.n	8146bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8146b70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8146b74:	d818      	bhi.n	8146ba8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8146b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8146b7a:	d003      	beq.n	8146b84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8146b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8146b80:	d007      	beq.n	8146b92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8146b82:	e011      	b.n	8146ba8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8146b84:	4b33      	ldr	r3, [pc, #204]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8146b88:	4a32      	ldr	r2, [pc, #200]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8146b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8146b90:	e00f      	b.n	8146bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8146b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146b96:	3328      	adds	r3, #40	@ 0x28
 8146b98:	2101      	movs	r1, #1
 8146b9a:	4618      	mov	r0, r3
 8146b9c:	f001 fc6a 	bl	8148474 <RCCEx_PLL3_Config>
 8146ba0:	4603      	mov	r3, r0
 8146ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8146ba6:	e004      	b.n	8146bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146ba8:	2301      	movs	r3, #1
 8146baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146bae:	e000      	b.n	8146bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8146bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146bb6:	2b00      	cmp	r3, #0
 8146bb8:	d10b      	bne.n	8146bd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8146bba:	4b26      	ldr	r3, [pc, #152]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146bbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8146bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8146bca:	4a22      	ldr	r2, [pc, #136]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146bcc:	430b      	orrs	r3, r1
 8146bce:	6553      	str	r3, [r2, #84]	@ 0x54
 8146bd0:	e003      	b.n	8146bda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8146bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146be2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8146be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8146be8:	2300      	movs	r3, #0
 8146bea:	677b      	str	r3, [r7, #116]	@ 0x74
 8146bec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8146bf0:	460b      	mov	r3, r1
 8146bf2:	4313      	orrs	r3, r2
 8146bf4:	d034      	beq.n	8146c60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8146bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8146bfc:	2b00      	cmp	r3, #0
 8146bfe:	d003      	beq.n	8146c08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8146c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8146c04:	d007      	beq.n	8146c16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8146c06:	e011      	b.n	8146c2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8146c08:	4b12      	ldr	r3, [pc, #72]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8146c0c:	4a11      	ldr	r2, [pc, #68]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8146c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8146c14:	e00e      	b.n	8146c34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8146c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146c1a:	3308      	adds	r3, #8
 8146c1c:	2102      	movs	r1, #2
 8146c1e:	4618      	mov	r0, r3
 8146c20:	f001 fb76 	bl	8148310 <RCCEx_PLL2_Config>
 8146c24:	4603      	mov	r3, r0
 8146c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8146c2a:	e003      	b.n	8146c34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8146c2c:	2301      	movs	r3, #1
 8146c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146c38:	2b00      	cmp	r3, #0
 8146c3a:	d10d      	bne.n	8146c58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8146c3c:	4b05      	ldr	r3, [pc, #20]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8146c40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8146c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8146c4a:	4a02      	ldr	r2, [pc, #8]	@ (8146c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8146c4c:	430b      	orrs	r3, r1
 8146c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8146c50:	e006      	b.n	8146c60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8146c52:	bf00      	nop
 8146c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8146c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146c68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8146c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8146c6e:	2300      	movs	r3, #0
 8146c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8146c72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8146c76:	460b      	mov	r3, r1
 8146c78:	4313      	orrs	r3, r2
 8146c7a:	d00c      	beq.n	8146c96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8146c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146c80:	3328      	adds	r3, #40	@ 0x28
 8146c82:	2102      	movs	r1, #2
 8146c84:	4618      	mov	r0, r3
 8146c86:	f001 fbf5 	bl	8148474 <RCCEx_PLL3_Config>
 8146c8a:	4603      	mov	r3, r0
 8146c8c:	2b00      	cmp	r3, #0
 8146c8e:	d002      	beq.n	8146c96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8146c90:	2301      	movs	r3, #1
 8146c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8146c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146c9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8146ca2:	663b      	str	r3, [r7, #96]	@ 0x60
 8146ca4:	2300      	movs	r3, #0
 8146ca6:	667b      	str	r3, [r7, #100]	@ 0x64
 8146ca8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8146cac:	460b      	mov	r3, r1
 8146cae:	4313      	orrs	r3, r2
 8146cb0:	d038      	beq.n	8146d24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8146cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8146cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8146cbe:	d018      	beq.n	8146cf2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8146cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8146cc4:	d811      	bhi.n	8146cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8146cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8146cca:	d014      	beq.n	8146cf6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8146ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8146cd0:	d80b      	bhi.n	8146cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8146cd2:	2b00      	cmp	r3, #0
 8146cd4:	d011      	beq.n	8146cfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8146cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8146cda:	d106      	bne.n	8146cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8146cdc:	4bc3      	ldr	r3, [pc, #780]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8146ce0:	4ac2      	ldr	r2, [pc, #776]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8146ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8146ce8:	e008      	b.n	8146cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8146cea:	2301      	movs	r3, #1
 8146cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8146cf0:	e004      	b.n	8146cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8146cf2:	bf00      	nop
 8146cf4:	e002      	b.n	8146cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8146cf6:	bf00      	nop
 8146cf8:	e000      	b.n	8146cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8146cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8146cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146d00:	2b00      	cmp	r3, #0
 8146d02:	d10b      	bne.n	8146d1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8146d04:	4bb9      	ldr	r3, [pc, #740]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146d08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8146d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8146d14:	4ab5      	ldr	r2, [pc, #724]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d16:	430b      	orrs	r3, r1
 8146d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8146d1a:	e003      	b.n	8146d24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8146d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146d2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8146d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8146d32:	2300      	movs	r3, #0
 8146d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8146d36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8146d3a:	460b      	mov	r3, r1
 8146d3c:	4313      	orrs	r3, r2
 8146d3e:	d009      	beq.n	8146d54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8146d40:	4baa      	ldr	r3, [pc, #680]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8146d44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8146d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8146d4e:	4aa7      	ldr	r2, [pc, #668]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d50:	430b      	orrs	r3, r1
 8146d52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8146d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146d5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8146d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8146d62:	2300      	movs	r3, #0
 8146d64:	657b      	str	r3, [r7, #84]	@ 0x54
 8146d66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8146d6a:	460b      	mov	r3, r1
 8146d6c:	4313      	orrs	r3, r2
 8146d6e:	d00a      	beq.n	8146d86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8146d70:	4b9e      	ldr	r3, [pc, #632]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d72:	691b      	ldr	r3, [r3, #16]
 8146d74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8146d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8146d80:	4a9a      	ldr	r2, [pc, #616]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146d82:	430b      	orrs	r3, r1
 8146d84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8146d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146d8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8146d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8146d94:	2300      	movs	r3, #0
 8146d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8146d98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8146d9c:	460b      	mov	r3, r1
 8146d9e:	4313      	orrs	r3, r2
 8146da0:	d009      	beq.n	8146db6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8146da2:	4b92      	ldr	r3, [pc, #584]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8146da6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8146daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8146db0:	4a8e      	ldr	r2, [pc, #568]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146db2:	430b      	orrs	r3, r1
 8146db4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8146db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146dbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8146dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8146dc4:	2300      	movs	r3, #0
 8146dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8146dc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8146dcc:	460b      	mov	r3, r1
 8146dce:	4313      	orrs	r3, r2
 8146dd0:	d00e      	beq.n	8146df0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8146dd2:	4b86      	ldr	r3, [pc, #536]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146dd4:	691b      	ldr	r3, [r3, #16]
 8146dd6:	4a85      	ldr	r2, [pc, #532]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146dd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8146ddc:	6113      	str	r3, [r2, #16]
 8146dde:	4b83      	ldr	r3, [pc, #524]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146de0:	6919      	ldr	r1, [r3, #16]
 8146de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146de6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8146dea:	4a80      	ldr	r2, [pc, #512]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146dec:	430b      	orrs	r3, r1
 8146dee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8146df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146df8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8146dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8146dfe:	2300      	movs	r3, #0
 8146e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8146e02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8146e06:	460b      	mov	r3, r1
 8146e08:	4313      	orrs	r3, r2
 8146e0a:	d009      	beq.n	8146e20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8146e0c:	4b77      	ldr	r3, [pc, #476]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8146e10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8146e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146e1a:	4a74      	ldr	r2, [pc, #464]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146e1c:	430b      	orrs	r3, r1
 8146e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8146e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146e28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8146e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8146e2e:	2300      	movs	r3, #0
 8146e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8146e32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8146e36:	460b      	mov	r3, r1
 8146e38:	4313      	orrs	r3, r2
 8146e3a:	d00a      	beq.n	8146e52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8146e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8146e40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8146e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8146e4c:	4a67      	ldr	r2, [pc, #412]	@ (8146fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8146e4e:	430b      	orrs	r3, r1
 8146e50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8146e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146e5a:	2100      	movs	r1, #0
 8146e5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8146e5e:	f003 0301 	and.w	r3, r3, #1
 8146e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8146e64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8146e68:	460b      	mov	r3, r1
 8146e6a:	4313      	orrs	r3, r2
 8146e6c:	d011      	beq.n	8146e92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8146e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e72:	3308      	adds	r3, #8
 8146e74:	2100      	movs	r1, #0
 8146e76:	4618      	mov	r0, r3
 8146e78:	f001 fa4a 	bl	8148310 <RCCEx_PLL2_Config>
 8146e7c:	4603      	mov	r3, r0
 8146e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8146e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146e86:	2b00      	cmp	r3, #0
 8146e88:	d003      	beq.n	8146e92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8146e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146e9a:	2100      	movs	r1, #0
 8146e9c:	6239      	str	r1, [r7, #32]
 8146e9e:	f003 0302 	and.w	r3, r3, #2
 8146ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8146ea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8146ea8:	460b      	mov	r3, r1
 8146eaa:	4313      	orrs	r3, r2
 8146eac:	d011      	beq.n	8146ed2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8146eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146eb2:	3308      	adds	r3, #8
 8146eb4:	2101      	movs	r1, #1
 8146eb6:	4618      	mov	r0, r3
 8146eb8:	f001 fa2a 	bl	8148310 <RCCEx_PLL2_Config>
 8146ebc:	4603      	mov	r3, r0
 8146ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8146ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146ec6:	2b00      	cmp	r3, #0
 8146ec8:	d003      	beq.n	8146ed2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8146ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146eda:	2100      	movs	r1, #0
 8146edc:	61b9      	str	r1, [r7, #24]
 8146ede:	f003 0304 	and.w	r3, r3, #4
 8146ee2:	61fb      	str	r3, [r7, #28]
 8146ee4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8146ee8:	460b      	mov	r3, r1
 8146eea:	4313      	orrs	r3, r2
 8146eec:	d011      	beq.n	8146f12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8146eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146ef2:	3308      	adds	r3, #8
 8146ef4:	2102      	movs	r1, #2
 8146ef6:	4618      	mov	r0, r3
 8146ef8:	f001 fa0a 	bl	8148310 <RCCEx_PLL2_Config>
 8146efc:	4603      	mov	r3, r0
 8146efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8146f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f06:	2b00      	cmp	r3, #0
 8146f08:	d003      	beq.n	8146f12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8146f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146f1a:	2100      	movs	r1, #0
 8146f1c:	6139      	str	r1, [r7, #16]
 8146f1e:	f003 0308 	and.w	r3, r3, #8
 8146f22:	617b      	str	r3, [r7, #20]
 8146f24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8146f28:	460b      	mov	r3, r1
 8146f2a:	4313      	orrs	r3, r2
 8146f2c:	d011      	beq.n	8146f52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8146f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146f32:	3328      	adds	r3, #40	@ 0x28
 8146f34:	2100      	movs	r1, #0
 8146f36:	4618      	mov	r0, r3
 8146f38:	f001 fa9c 	bl	8148474 <RCCEx_PLL3_Config>
 8146f3c:	4603      	mov	r3, r0
 8146f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8146f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f46:	2b00      	cmp	r3, #0
 8146f48:	d003      	beq.n	8146f52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8146f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146f5a:	2100      	movs	r1, #0
 8146f5c:	60b9      	str	r1, [r7, #8]
 8146f5e:	f003 0310 	and.w	r3, r3, #16
 8146f62:	60fb      	str	r3, [r7, #12]
 8146f64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8146f68:	460b      	mov	r3, r1
 8146f6a:	4313      	orrs	r3, r2
 8146f6c:	d011      	beq.n	8146f92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8146f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146f72:	3328      	adds	r3, #40	@ 0x28
 8146f74:	2101      	movs	r1, #1
 8146f76:	4618      	mov	r0, r3
 8146f78:	f001 fa7c 	bl	8148474 <RCCEx_PLL3_Config>
 8146f7c:	4603      	mov	r3, r0
 8146f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8146f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f86:	2b00      	cmp	r3, #0
 8146f88:	d003      	beq.n	8146f92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8146f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8146f9a:	2100      	movs	r1, #0
 8146f9c:	6039      	str	r1, [r7, #0]
 8146f9e:	f003 0320 	and.w	r3, r3, #32
 8146fa2:	607b      	str	r3, [r7, #4]
 8146fa4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8146fa8:	460b      	mov	r3, r1
 8146faa:	4313      	orrs	r3, r2
 8146fac:	d011      	beq.n	8146fd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8146fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8146fb2:	3328      	adds	r3, #40	@ 0x28
 8146fb4:	2102      	movs	r1, #2
 8146fb6:	4618      	mov	r0, r3
 8146fb8:	f001 fa5c 	bl	8148474 <RCCEx_PLL3_Config>
 8146fbc:	4603      	mov	r3, r0
 8146fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8146fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146fc6:	2b00      	cmp	r3, #0
 8146fc8:	d003      	beq.n	8146fd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8146fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8146fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8146fd2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8146fd6:	2b00      	cmp	r3, #0
 8146fd8:	d101      	bne.n	8146fde <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8146fda:	2300      	movs	r3, #0
 8146fdc:	e000      	b.n	8146fe0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8146fde:	2301      	movs	r3, #1
}
 8146fe0:	4618      	mov	r0, r3
 8146fe2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8146fe6:	46bd      	mov	sp, r7
 8146fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8146fec:	58024400 	.word	0x58024400

08146ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8146ff0:	b580      	push	{r7, lr}
 8146ff2:	b090      	sub	sp, #64	@ 0x40
 8146ff4:	af00      	add	r7, sp, #0
 8146ff6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8146ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8146ffe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8147002:	430b      	orrs	r3, r1
 8147004:	f040 8094 	bne.w	8147130 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8147008:	4b9e      	ldr	r3, [pc, #632]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 814700a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 814700c:	f003 0307 	and.w	r3, r3, #7
 8147010:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8147012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147014:	2b04      	cmp	r3, #4
 8147016:	f200 8087 	bhi.w	8147128 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 814701a:	a201      	add	r2, pc, #4	@ (adr r2, 8147020 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 814701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8147020:	08147035 	.word	0x08147035
 8147024:	0814705d 	.word	0x0814705d
 8147028:	08147085 	.word	0x08147085
 814702c:	08147121 	.word	0x08147121
 8147030:	081470ad 	.word	0x081470ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8147034:	4b93      	ldr	r3, [pc, #588]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147036:	681b      	ldr	r3, [r3, #0]
 8147038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 814703c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8147040:	d108      	bne.n	8147054 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8147042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8147046:	4618      	mov	r0, r3
 8147048:	f001 f810 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 814704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 814704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147050:	f000 bd45 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147054:	2300      	movs	r3, #0
 8147056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147058:	f000 bd41 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 814705c:	4b89      	ldr	r3, [pc, #548]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 814705e:	681b      	ldr	r3, [r3, #0]
 8147060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8147064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8147068:	d108      	bne.n	814707c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 814706a:	f107 0318 	add.w	r3, r7, #24
 814706e:	4618      	mov	r0, r3
 8147070:	f000 fd54 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8147074:	69bb      	ldr	r3, [r7, #24]
 8147076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147078:	f000 bd31 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 814707c:	2300      	movs	r3, #0
 814707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147080:	f000 bd2d 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8147084:	4b7f      	ldr	r3, [pc, #508]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147086:	681b      	ldr	r3, [r3, #0]
 8147088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814708c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147090:	d108      	bne.n	81470a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8147092:	f107 030c 	add.w	r3, r7, #12
 8147096:	4618      	mov	r0, r3
 8147098:	f000 fe94 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 814709c:	68fb      	ldr	r3, [r7, #12]
 814709e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81470a0:	f000 bd1d 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81470a4:	2300      	movs	r3, #0
 81470a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81470a8:	f000 bd19 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81470ac:	4b75      	ldr	r3, [pc, #468]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81470ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81470b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81470b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81470b6:	4b73      	ldr	r3, [pc, #460]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81470b8:	681b      	ldr	r3, [r3, #0]
 81470ba:	f003 0304 	and.w	r3, r3, #4
 81470be:	2b04      	cmp	r3, #4
 81470c0:	d10c      	bne.n	81470dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81470c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81470c4:	2b00      	cmp	r3, #0
 81470c6:	d109      	bne.n	81470dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81470c8:	4b6e      	ldr	r3, [pc, #440]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81470ca:	681b      	ldr	r3, [r3, #0]
 81470cc:	08db      	lsrs	r3, r3, #3
 81470ce:	f003 0303 	and.w	r3, r3, #3
 81470d2:	4a6d      	ldr	r2, [pc, #436]	@ (8147288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81470d4:	fa22 f303 	lsr.w	r3, r2, r3
 81470d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81470da:	e01f      	b.n	814711c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81470dc:	4b69      	ldr	r3, [pc, #420]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81470de:	681b      	ldr	r3, [r3, #0]
 81470e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81470e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81470e8:	d106      	bne.n	81470f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81470ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81470ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81470f0:	d102      	bne.n	81470f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81470f2:	4b66      	ldr	r3, [pc, #408]	@ (814728c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81470f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81470f6:	e011      	b.n	814711c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81470f8:	4b62      	ldr	r3, [pc, #392]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81470fa:	681b      	ldr	r3, [r3, #0]
 81470fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147104:	d106      	bne.n	8147114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8147106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814710c:	d102      	bne.n	8147114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 814710e:	4b60      	ldr	r3, [pc, #384]	@ (8147290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8147110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147112:	e003      	b.n	814711c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8147114:	2300      	movs	r3, #0
 8147116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8147118:	f000 bce1 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 814711c:	f000 bcdf 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8147120:	4b5c      	ldr	r3, [pc, #368]	@ (8147294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8147122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147124:	f000 bcdb 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8147128:	2300      	movs	r3, #0
 814712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814712c:	f000 bcd7 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8147130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8147134:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8147138:	430b      	orrs	r3, r1
 814713a:	f040 80ad 	bne.w	8147298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 814713e:	4b51      	ldr	r3, [pc, #324]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8147142:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8147146:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8147148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814714a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 814714e:	d056      	beq.n	81471fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8147150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8147156:	f200 8090 	bhi.w	814727a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 814715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814715c:	2bc0      	cmp	r3, #192	@ 0xc0
 814715e:	f000 8088 	beq.w	8147272 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8147162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147164:	2bc0      	cmp	r3, #192	@ 0xc0
 8147166:	f200 8088 	bhi.w	814727a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 814716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814716c:	2b80      	cmp	r3, #128	@ 0x80
 814716e:	d032      	beq.n	81471d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8147170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147172:	2b80      	cmp	r3, #128	@ 0x80
 8147174:	f200 8081 	bhi.w	814727a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8147178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814717a:	2b00      	cmp	r3, #0
 814717c:	d003      	beq.n	8147186 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 814717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147180:	2b40      	cmp	r3, #64	@ 0x40
 8147182:	d014      	beq.n	81471ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8147184:	e079      	b.n	814727a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8147186:	4b3f      	ldr	r3, [pc, #252]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147188:	681b      	ldr	r3, [r3, #0]
 814718a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 814718e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8147192:	d108      	bne.n	81471a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8147194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8147198:	4618      	mov	r0, r3
 814719a:	f000 ff67 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 814719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81471a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81471a2:	f000 bc9c 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81471a6:	2300      	movs	r3, #0
 81471a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81471aa:	f000 bc98 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81471ae:	4b35      	ldr	r3, [pc, #212]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81471b0:	681b      	ldr	r3, [r3, #0]
 81471b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81471b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81471ba:	d108      	bne.n	81471ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81471bc:	f107 0318 	add.w	r3, r7, #24
 81471c0:	4618      	mov	r0, r3
 81471c2:	f000 fcab 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81471c6:	69bb      	ldr	r3, [r7, #24]
 81471c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81471ca:	f000 bc88 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81471ce:	2300      	movs	r3, #0
 81471d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81471d2:	f000 bc84 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81471d6:	4b2b      	ldr	r3, [pc, #172]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81471d8:	681b      	ldr	r3, [r3, #0]
 81471da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81471de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81471e2:	d108      	bne.n	81471f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81471e4:	f107 030c 	add.w	r3, r7, #12
 81471e8:	4618      	mov	r0, r3
 81471ea:	f000 fdeb 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81471ee:	68fb      	ldr	r3, [r7, #12]
 81471f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81471f2:	f000 bc74 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81471f6:	2300      	movs	r3, #0
 81471f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81471fa:	f000 bc70 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81471fe:	4b21      	ldr	r3, [pc, #132]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8147202:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8147206:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8147208:	4b1e      	ldr	r3, [pc, #120]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 814720a:	681b      	ldr	r3, [r3, #0]
 814720c:	f003 0304 	and.w	r3, r3, #4
 8147210:	2b04      	cmp	r3, #4
 8147212:	d10c      	bne.n	814722e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8147214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147216:	2b00      	cmp	r3, #0
 8147218:	d109      	bne.n	814722e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 814721a:	4b1a      	ldr	r3, [pc, #104]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 814721c:	681b      	ldr	r3, [r3, #0]
 814721e:	08db      	lsrs	r3, r3, #3
 8147220:	f003 0303 	and.w	r3, r3, #3
 8147224:	4a18      	ldr	r2, [pc, #96]	@ (8147288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8147226:	fa22 f303 	lsr.w	r3, r2, r3
 814722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 814722c:	e01f      	b.n	814726e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 814722e:	4b15      	ldr	r3, [pc, #84]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8147230:	681b      	ldr	r3, [r3, #0]
 8147232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8147236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 814723a:	d106      	bne.n	814724a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 814723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814723e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8147242:	d102      	bne.n	814724a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8147244:	4b11      	ldr	r3, [pc, #68]	@ (814728c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8147246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147248:	e011      	b.n	814726e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 814724a:	4b0e      	ldr	r3, [pc, #56]	@ (8147284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 814724c:	681b      	ldr	r3, [r3, #0]
 814724e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147256:	d106      	bne.n	8147266 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8147258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814725a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814725e:	d102      	bne.n	8147266 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8147260:	4b0b      	ldr	r3, [pc, #44]	@ (8147290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8147262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147264:	e003      	b.n	814726e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8147266:	2300      	movs	r3, #0
 8147268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 814726a:	f000 bc38 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 814726e:	f000 bc36 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8147272:	4b08      	ldr	r3, [pc, #32]	@ (8147294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8147274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147276:	f000 bc32 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 814727a:	2300      	movs	r3, #0
 814727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814727e:	f000 bc2e 	b.w	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147282:	bf00      	nop
 8147284:	58024400 	.word	0x58024400
 8147288:	03d09000 	.word	0x03d09000
 814728c:	003d0900 	.word	0x003d0900
 8147290:	017d7840 	.word	0x017d7840
 8147294:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8147298:	e9d7 2300 	ldrd	r2, r3, [r7]
 814729c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81472a0:	430b      	orrs	r3, r1
 81472a2:	f040 809c 	bne.w	81473de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81472a6:	4b9e      	ldr	r3, [pc, #632]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81472a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81472aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81472ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81472b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81472b6:	d054      	beq.n	8147362 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81472b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81472be:	f200 808b 	bhi.w	81473d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81472c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81472c8:	f000 8083 	beq.w	81473d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81472cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81472d2:	f200 8081 	bhi.w	81473d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81472d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81472dc:	d02f      	beq.n	814733e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81472de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81472e4:	d878      	bhi.n	81473d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81472e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472e8:	2b00      	cmp	r3, #0
 81472ea:	d004      	beq.n	81472f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81472ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81472ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81472f2:	d012      	beq.n	814731a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81472f4:	e070      	b.n	81473d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81472f6:	4b8a      	ldr	r3, [pc, #552]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81472f8:	681b      	ldr	r3, [r3, #0]
 81472fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81472fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8147302:	d107      	bne.n	8147314 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8147304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8147308:	4618      	mov	r0, r3
 814730a:	f000 feaf 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 814730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8147310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147312:	e3e4      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147314:	2300      	movs	r3, #0
 8147316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147318:	e3e1      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 814731a:	4b81      	ldr	r3, [pc, #516]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 814731c:	681b      	ldr	r3, [r3, #0]
 814731e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8147322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8147326:	d107      	bne.n	8147338 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8147328:	f107 0318 	add.w	r3, r7, #24
 814732c:	4618      	mov	r0, r3
 814732e:	f000 fbf5 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8147332:	69bb      	ldr	r3, [r7, #24]
 8147334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147336:	e3d2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147338:	2300      	movs	r3, #0
 814733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814733c:	e3cf      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 814733e:	4b78      	ldr	r3, [pc, #480]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147340:	681b      	ldr	r3, [r3, #0]
 8147342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8147346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814734a:	d107      	bne.n	814735c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 814734c:	f107 030c 	add.w	r3, r7, #12
 8147350:	4618      	mov	r0, r3
 8147352:	f000 fd37 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8147356:	68fb      	ldr	r3, [r7, #12]
 8147358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 814735a:	e3c0      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 814735c:	2300      	movs	r3, #0
 814735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147360:	e3bd      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8147362:	4b6f      	ldr	r3, [pc, #444]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8147366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 814736a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 814736c:	4b6c      	ldr	r3, [pc, #432]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 814736e:	681b      	ldr	r3, [r3, #0]
 8147370:	f003 0304 	and.w	r3, r3, #4
 8147374:	2b04      	cmp	r3, #4
 8147376:	d10c      	bne.n	8147392 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8147378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814737a:	2b00      	cmp	r3, #0
 814737c:	d109      	bne.n	8147392 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 814737e:	4b68      	ldr	r3, [pc, #416]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147380:	681b      	ldr	r3, [r3, #0]
 8147382:	08db      	lsrs	r3, r3, #3
 8147384:	f003 0303 	and.w	r3, r3, #3
 8147388:	4a66      	ldr	r2, [pc, #408]	@ (8147524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 814738a:	fa22 f303 	lsr.w	r3, r2, r3
 814738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147390:	e01e      	b.n	81473d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8147392:	4b63      	ldr	r3, [pc, #396]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147394:	681b      	ldr	r3, [r3, #0]
 8147396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814739a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 814739e:	d106      	bne.n	81473ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81473a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81473a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81473a6:	d102      	bne.n	81473ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81473a8:	4b5f      	ldr	r3, [pc, #380]	@ (8147528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81473aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81473ac:	e010      	b.n	81473d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81473ae:	4b5c      	ldr	r3, [pc, #368]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81473b0:	681b      	ldr	r3, [r3, #0]
 81473b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81473b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81473ba:	d106      	bne.n	81473ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81473bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81473be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81473c2:	d102      	bne.n	81473ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81473c4:	4b59      	ldr	r3, [pc, #356]	@ (814752c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81473c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81473c8:	e002      	b.n	81473d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81473ca:	2300      	movs	r3, #0
 81473cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81473ce:	e386      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81473d0:	e385      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81473d2:	4b57      	ldr	r3, [pc, #348]	@ (8147530 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81473d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81473d6:	e382      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81473d8:	2300      	movs	r3, #0
 81473da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81473dc:	e37f      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81473de:	e9d7 2300 	ldrd	r2, r3, [r7]
 81473e2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81473e6:	430b      	orrs	r3, r1
 81473e8:	f040 80a7 	bne.w	814753a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81473ec:	4b4c      	ldr	r3, [pc, #304]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81473ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81473f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81473f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81473f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81473f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81473fc:	d055      	beq.n	81474aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81473fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8147404:	f200 8096 	bhi.w	8147534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8147408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814740a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 814740e:	f000 8084 	beq.w	814751a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8147412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147414:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8147418:	f200 808c 	bhi.w	8147534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 814741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 814741e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8147422:	d030      	beq.n	8147486 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8147424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 814742a:	f200 8083 	bhi.w	8147534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 814742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147430:	2b00      	cmp	r3, #0
 8147432:	d004      	beq.n	814743e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8147434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8147436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 814743a:	d012      	beq.n	8147462 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 814743c:	e07a      	b.n	8147534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 814743e:	4b38      	ldr	r3, [pc, #224]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147440:	681b      	ldr	r3, [r3, #0]
 8147442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8147446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 814744a:	d107      	bne.n	814745c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 814744c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8147450:	4618      	mov	r0, r3
 8147452:	f000 fe0b 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8147456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8147458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 814745a:	e340      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 814745c:	2300      	movs	r3, #0
 814745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147460:	e33d      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8147462:	4b2f      	ldr	r3, [pc, #188]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147464:	681b      	ldr	r3, [r3, #0]
 8147466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 814746a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 814746e:	d107      	bne.n	8147480 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8147470:	f107 0318 	add.w	r3, r7, #24
 8147474:	4618      	mov	r0, r3
 8147476:	f000 fb51 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 814747a:	69bb      	ldr	r3, [r7, #24]
 814747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 814747e:	e32e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147480:	2300      	movs	r3, #0
 8147482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147484:	e32b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8147486:	4b26      	ldr	r3, [pc, #152]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8147488:	681b      	ldr	r3, [r3, #0]
 814748a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814748e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147492:	d107      	bne.n	81474a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8147494:	f107 030c 	add.w	r3, r7, #12
 8147498:	4618      	mov	r0, r3
 814749a:	f000 fc93 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 814749e:	68fb      	ldr	r3, [r7, #12]
 81474a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81474a2:	e31c      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81474a4:	2300      	movs	r3, #0
 81474a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81474a8:	e319      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81474aa:	4b1d      	ldr	r3, [pc, #116]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81474ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81474ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81474b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81474b4:	4b1a      	ldr	r3, [pc, #104]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81474b6:	681b      	ldr	r3, [r3, #0]
 81474b8:	f003 0304 	and.w	r3, r3, #4
 81474bc:	2b04      	cmp	r3, #4
 81474be:	d10c      	bne.n	81474da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81474c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81474c2:	2b00      	cmp	r3, #0
 81474c4:	d109      	bne.n	81474da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81474c6:	4b16      	ldr	r3, [pc, #88]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81474c8:	681b      	ldr	r3, [r3, #0]
 81474ca:	08db      	lsrs	r3, r3, #3
 81474cc:	f003 0303 	and.w	r3, r3, #3
 81474d0:	4a14      	ldr	r2, [pc, #80]	@ (8147524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81474d2:	fa22 f303 	lsr.w	r3, r2, r3
 81474d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81474d8:	e01e      	b.n	8147518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81474da:	4b11      	ldr	r3, [pc, #68]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81474dc:	681b      	ldr	r3, [r3, #0]
 81474de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81474e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81474e6:	d106      	bne.n	81474f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81474e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81474ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81474ee:	d102      	bne.n	81474f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81474f0:	4b0d      	ldr	r3, [pc, #52]	@ (8147528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81474f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81474f4:	e010      	b.n	8147518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81474f6:	4b0a      	ldr	r3, [pc, #40]	@ (8147520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81474f8:	681b      	ldr	r3, [r3, #0]
 81474fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81474fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147502:	d106      	bne.n	8147512 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8147504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814750a:	d102      	bne.n	8147512 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 814750c:	4b07      	ldr	r3, [pc, #28]	@ (814752c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 814750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147510:	e002      	b.n	8147518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8147512:	2300      	movs	r3, #0
 8147514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8147516:	e2e2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147518:	e2e1      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 814751a:	4b05      	ldr	r3, [pc, #20]	@ (8147530 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 814751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814751e:	e2de      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147520:	58024400 	.word	0x58024400
 8147524:	03d09000 	.word	0x03d09000
 8147528:	003d0900 	.word	0x003d0900
 814752c:	017d7840 	.word	0x017d7840
 8147530:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8147534:	2300      	movs	r3, #0
 8147536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147538:	e2d1      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 814753a:	e9d7 2300 	ldrd	r2, r3, [r7]
 814753e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8147542:	430b      	orrs	r3, r1
 8147544:	f040 809c 	bne.w	8147680 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8147548:	4b93      	ldr	r3, [pc, #588]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 814754a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 814754c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8147550:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8147552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8147558:	d054      	beq.n	8147604 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 814755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814755c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8147560:	f200 808b 	bhi.w	814767a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8147564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147566:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 814756a:	f000 8083 	beq.w	8147674 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 814756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8147574:	f200 8081 	bhi.w	814767a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8147578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814757a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 814757e:	d02f      	beq.n	81475e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8147580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8147586:	d878      	bhi.n	814767a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8147588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814758a:	2b00      	cmp	r3, #0
 814758c:	d004      	beq.n	8147598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 814758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8147594:	d012      	beq.n	81475bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8147596:	e070      	b.n	814767a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8147598:	4b7f      	ldr	r3, [pc, #508]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 814759a:	681b      	ldr	r3, [r3, #0]
 814759c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81475a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81475a4:	d107      	bne.n	81475b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81475a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81475aa:	4618      	mov	r0, r3
 81475ac:	f000 fd5e 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81475b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81475b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81475b4:	e293      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81475b6:	2300      	movs	r3, #0
 81475b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81475ba:	e290      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81475bc:	4b76      	ldr	r3, [pc, #472]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81475be:	681b      	ldr	r3, [r3, #0]
 81475c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81475c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81475c8:	d107      	bne.n	81475da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81475ca:	f107 0318 	add.w	r3, r7, #24
 81475ce:	4618      	mov	r0, r3
 81475d0:	f000 faa4 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81475d4:	69bb      	ldr	r3, [r7, #24]
 81475d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81475d8:	e281      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81475da:	2300      	movs	r3, #0
 81475dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81475de:	e27e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81475e0:	4b6d      	ldr	r3, [pc, #436]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81475e2:	681b      	ldr	r3, [r3, #0]
 81475e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81475e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81475ec:	d107      	bne.n	81475fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81475ee:	f107 030c 	add.w	r3, r7, #12
 81475f2:	4618      	mov	r0, r3
 81475f4:	f000 fbe6 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81475f8:	68fb      	ldr	r3, [r7, #12]
 81475fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81475fc:	e26f      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81475fe:	2300      	movs	r3, #0
 8147600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147602:	e26c      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8147604:	4b64      	ldr	r3, [pc, #400]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8147608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 814760c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 814760e:	4b62      	ldr	r3, [pc, #392]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147610:	681b      	ldr	r3, [r3, #0]
 8147612:	f003 0304 	and.w	r3, r3, #4
 8147616:	2b04      	cmp	r3, #4
 8147618:	d10c      	bne.n	8147634 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 814761a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814761c:	2b00      	cmp	r3, #0
 814761e:	d109      	bne.n	8147634 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8147620:	4b5d      	ldr	r3, [pc, #372]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147622:	681b      	ldr	r3, [r3, #0]
 8147624:	08db      	lsrs	r3, r3, #3
 8147626:	f003 0303 	and.w	r3, r3, #3
 814762a:	4a5c      	ldr	r2, [pc, #368]	@ (814779c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 814762c:	fa22 f303 	lsr.w	r3, r2, r3
 8147630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147632:	e01e      	b.n	8147672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8147634:	4b58      	ldr	r3, [pc, #352]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147636:	681b      	ldr	r3, [r3, #0]
 8147638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814763c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8147640:	d106      	bne.n	8147650 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8147642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8147648:	d102      	bne.n	8147650 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 814764a:	4b55      	ldr	r3, [pc, #340]	@ (81477a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 814764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 814764e:	e010      	b.n	8147672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8147650:	4b51      	ldr	r3, [pc, #324]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147652:	681b      	ldr	r3, [r3, #0]
 8147654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 814765c:	d106      	bne.n	814766c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 814765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147664:	d102      	bne.n	814766c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8147666:	4b4f      	ldr	r3, [pc, #316]	@ (81477a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8147668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 814766a:	e002      	b.n	8147672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 814766c:	2300      	movs	r3, #0
 814766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8147670:	e235      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147672:	e234      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8147674:	4b4c      	ldr	r3, [pc, #304]	@ (81477a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8147676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147678:	e231      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 814767a:	2300      	movs	r3, #0
 814767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814767e:	e22e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8147680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8147684:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8147688:	430b      	orrs	r3, r1
 814768a:	f040 808f 	bne.w	81477ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 814768e:	4b42      	ldr	r3, [pc, #264]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8147692:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8147696:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8147698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814769a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 814769e:	d06b      	beq.n	8147778 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81476a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81476a6:	d874      	bhi.n	8147792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81476a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81476ae:	d056      	beq.n	814775e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81476b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81476b6:	d86c      	bhi.n	8147792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81476b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81476be:	d03b      	beq.n	8147738 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81476c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81476c6:	d864      	bhi.n	8147792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81476c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81476ce:	d021      	beq.n	8147714 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81476d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81476d6:	d85c      	bhi.n	8147792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81476d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476da:	2b00      	cmp	r3, #0
 81476dc:	d004      	beq.n	81476e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81476de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81476e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81476e4:	d004      	beq.n	81476f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81476e6:	e054      	b.n	8147792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81476e8:	f7fe fa20 	bl	8145b2c <HAL_RCC_GetPCLK1Freq>
 81476ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81476ee:	e1f6      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81476f0:	4b29      	ldr	r3, [pc, #164]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81476f2:	681b      	ldr	r3, [r3, #0]
 81476f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81476f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81476fc:	d107      	bne.n	814770e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81476fe:	f107 0318 	add.w	r3, r7, #24
 8147702:	4618      	mov	r0, r3
 8147704:	f000 fa0a 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8147708:	69fb      	ldr	r3, [r7, #28]
 814770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 814770c:	e1e7      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 814770e:	2300      	movs	r3, #0
 8147710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147712:	e1e4      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8147714:	4b20      	ldr	r3, [pc, #128]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147716:	681b      	ldr	r3, [r3, #0]
 8147718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814771c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147720:	d107      	bne.n	8147732 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8147722:	f107 030c 	add.w	r3, r7, #12
 8147726:	4618      	mov	r0, r3
 8147728:	f000 fb4c 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 814772c:	693b      	ldr	r3, [r7, #16]
 814772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147730:	e1d5      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147732:	2300      	movs	r3, #0
 8147734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147736:	e1d2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8147738:	4b17      	ldr	r3, [pc, #92]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 814773a:	681b      	ldr	r3, [r3, #0]
 814773c:	f003 0304 	and.w	r3, r3, #4
 8147740:	2b04      	cmp	r3, #4
 8147742:	d109      	bne.n	8147758 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8147744:	4b14      	ldr	r3, [pc, #80]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147746:	681b      	ldr	r3, [r3, #0]
 8147748:	08db      	lsrs	r3, r3, #3
 814774a:	f003 0303 	and.w	r3, r3, #3
 814774e:	4a13      	ldr	r2, [pc, #76]	@ (814779c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8147750:	fa22 f303 	lsr.w	r3, r2, r3
 8147754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147756:	e1c2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147758:	2300      	movs	r3, #0
 814775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814775c:	e1bf      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 814775e:	4b0e      	ldr	r3, [pc, #56]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8147760:	681b      	ldr	r3, [r3, #0]
 8147762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8147766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 814776a:	d102      	bne.n	8147772 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 814776c:	4b0c      	ldr	r3, [pc, #48]	@ (81477a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 814776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147770:	e1b5      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147772:	2300      	movs	r3, #0
 8147774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147776:	e1b2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8147778:	4b07      	ldr	r3, [pc, #28]	@ (8147798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 814777a:	681b      	ldr	r3, [r3, #0]
 814777c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147784:	d102      	bne.n	814778c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8147786:	4b07      	ldr	r3, [pc, #28]	@ (81477a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8147788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 814778a:	e1a8      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 814778c:	2300      	movs	r3, #0
 814778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147790:	e1a5      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8147792:	2300      	movs	r3, #0
 8147794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147796:	e1a2      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147798:	58024400 	.word	0x58024400
 814779c:	03d09000 	.word	0x03d09000
 81477a0:	003d0900 	.word	0x003d0900
 81477a4:	017d7840 	.word	0x017d7840
 81477a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81477ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 81477b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81477b4:	430b      	orrs	r3, r1
 81477b6:	d173      	bne.n	81478a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81477b8:	4b9c      	ldr	r3, [pc, #624]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81477ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81477bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81477c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81477c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81477c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81477c8:	d02f      	beq.n	814782a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81477ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81477cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81477d0:	d863      	bhi.n	814789a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81477d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81477d4:	2b00      	cmp	r3, #0
 81477d6:	d004      	beq.n	81477e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81477d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81477da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81477de:	d012      	beq.n	8147806 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81477e0:	e05b      	b.n	814789a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81477e2:	4b92      	ldr	r3, [pc, #584]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81477e4:	681b      	ldr	r3, [r3, #0]
 81477e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81477ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81477ee:	d107      	bne.n	8147800 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81477f0:	f107 0318 	add.w	r3, r7, #24
 81477f4:	4618      	mov	r0, r3
 81477f6:	f000 f991 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81477fa:	69bb      	ldr	r3, [r7, #24]
 81477fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81477fe:	e16e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147800:	2300      	movs	r3, #0
 8147802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147804:	e16b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8147806:	4b89      	ldr	r3, [pc, #548]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147808:	681b      	ldr	r3, [r3, #0]
 814780a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814780e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147812:	d107      	bne.n	8147824 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8147814:	f107 030c 	add.w	r3, r7, #12
 8147818:	4618      	mov	r0, r3
 814781a:	f000 fad3 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 814781e:	697b      	ldr	r3, [r7, #20]
 8147820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147822:	e15c      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147824:	2300      	movs	r3, #0
 8147826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147828:	e159      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 814782a:	4b80      	ldr	r3, [pc, #512]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 814782c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 814782e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8147832:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8147834:	4b7d      	ldr	r3, [pc, #500]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147836:	681b      	ldr	r3, [r3, #0]
 8147838:	f003 0304 	and.w	r3, r3, #4
 814783c:	2b04      	cmp	r3, #4
 814783e:	d10c      	bne.n	814785a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8147840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147842:	2b00      	cmp	r3, #0
 8147844:	d109      	bne.n	814785a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8147846:	4b79      	ldr	r3, [pc, #484]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147848:	681b      	ldr	r3, [r3, #0]
 814784a:	08db      	lsrs	r3, r3, #3
 814784c:	f003 0303 	and.w	r3, r3, #3
 8147850:	4a77      	ldr	r2, [pc, #476]	@ (8147a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8147852:	fa22 f303 	lsr.w	r3, r2, r3
 8147856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147858:	e01e      	b.n	8147898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 814785a:	4b74      	ldr	r3, [pc, #464]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 814785c:	681b      	ldr	r3, [r3, #0]
 814785e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8147862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8147866:	d106      	bne.n	8147876 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8147868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 814786a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 814786e:	d102      	bne.n	8147876 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8147870:	4b70      	ldr	r3, [pc, #448]	@ (8147a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8147872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147874:	e010      	b.n	8147898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8147876:	4b6d      	ldr	r3, [pc, #436]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147878:	681b      	ldr	r3, [r3, #0]
 814787a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 814787e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147882:	d106      	bne.n	8147892 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8147884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8147886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814788a:	d102      	bne.n	8147892 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 814788c:	4b6a      	ldr	r3, [pc, #424]	@ (8147a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 814788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8147890:	e002      	b.n	8147898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8147892:	2300      	movs	r3, #0
 8147894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8147896:	e122      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147898:	e121      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 814789a:	2300      	movs	r3, #0
 814789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814789e:	e11e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81478a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81478a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81478a8:	430b      	orrs	r3, r1
 81478aa:	d133      	bne.n	8147914 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81478ac:	4b5f      	ldr	r3, [pc, #380]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81478ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81478b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81478b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81478b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81478b8:	2b00      	cmp	r3, #0
 81478ba:	d004      	beq.n	81478c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81478bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81478be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81478c2:	d012      	beq.n	81478ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81478c4:	e023      	b.n	814790e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81478c6:	4b59      	ldr	r3, [pc, #356]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81478c8:	681b      	ldr	r3, [r3, #0]
 81478ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81478ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81478d2:	d107      	bne.n	81478e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81478d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81478d8:	4618      	mov	r0, r3
 81478da:	f000 fbc7 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81478de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81478e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81478e2:	e0fc      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81478e4:	2300      	movs	r3, #0
 81478e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81478e8:	e0f9      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81478ea:	4b50      	ldr	r3, [pc, #320]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81478ec:	681b      	ldr	r3, [r3, #0]
 81478ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81478f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81478f6:	d107      	bne.n	8147908 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81478f8:	f107 0318 	add.w	r3, r7, #24
 81478fc:	4618      	mov	r0, r3
 81478fe:	f000 f90d 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8147902:	6a3b      	ldr	r3, [r7, #32]
 8147904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147906:	e0ea      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147908:	2300      	movs	r3, #0
 814790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 814790c:	e0e7      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 814790e:	2300      	movs	r3, #0
 8147910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147912:	e0e4      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8147914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8147918:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 814791c:	430b      	orrs	r3, r1
 814791e:	f040 808d 	bne.w	8147a3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8147922:	4b42      	ldr	r3, [pc, #264]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8147926:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 814792a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 814792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814792e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8147932:	d06b      	beq.n	8147a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8147934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 814793a:	d874      	bhi.n	8147a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 814793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8147942:	d056      	beq.n	81479f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8147944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 814794a:	d86c      	bhi.n	8147a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 814794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814794e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8147952:	d03b      	beq.n	81479cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8147954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 814795a:	d864      	bhi.n	8147a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 814795c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814795e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147962:	d021      	beq.n	81479a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8147964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 814796a:	d85c      	bhi.n	8147a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 814796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 814796e:	2b00      	cmp	r3, #0
 8147970:	d004      	beq.n	814797c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8147972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8147978:	d004      	beq.n	8147984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 814797a:	e054      	b.n	8147a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 814797c:	f000 f8b8 	bl	8147af0 <HAL_RCCEx_GetD3PCLK1Freq>
 8147980:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8147982:	e0ac      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8147984:	4b29      	ldr	r3, [pc, #164]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147986:	681b      	ldr	r3, [r3, #0]
 8147988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 814798c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8147990:	d107      	bne.n	81479a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8147992:	f107 0318 	add.w	r3, r7, #24
 8147996:	4618      	mov	r0, r3
 8147998:	f000 f8c0 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 814799c:	69fb      	ldr	r3, [r7, #28]
 814799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81479a0:	e09d      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81479a2:	2300      	movs	r3, #0
 81479a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81479a6:	e09a      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81479a8:	4b20      	ldr	r3, [pc, #128]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81479aa:	681b      	ldr	r3, [r3, #0]
 81479ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81479b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81479b4:	d107      	bne.n	81479c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81479b6:	f107 030c 	add.w	r3, r7, #12
 81479ba:	4618      	mov	r0, r3
 81479bc:	f000 fa02 	bl	8147dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81479c0:	693b      	ldr	r3, [r7, #16]
 81479c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81479c4:	e08b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81479c6:	2300      	movs	r3, #0
 81479c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81479ca:	e088      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81479cc:	4b17      	ldr	r3, [pc, #92]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81479ce:	681b      	ldr	r3, [r3, #0]
 81479d0:	f003 0304 	and.w	r3, r3, #4
 81479d4:	2b04      	cmp	r3, #4
 81479d6:	d109      	bne.n	81479ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81479d8:	4b14      	ldr	r3, [pc, #80]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81479da:	681b      	ldr	r3, [r3, #0]
 81479dc:	08db      	lsrs	r3, r3, #3
 81479de:	f003 0303 	and.w	r3, r3, #3
 81479e2:	4a13      	ldr	r2, [pc, #76]	@ (8147a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81479e4:	fa22 f303 	lsr.w	r3, r2, r3
 81479e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81479ea:	e078      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81479ec:	2300      	movs	r3, #0
 81479ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81479f0:	e075      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81479f2:	4b0e      	ldr	r3, [pc, #56]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81479f4:	681b      	ldr	r3, [r3, #0]
 81479f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81479fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81479fe:	d102      	bne.n	8147a06 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8147a00:	4b0c      	ldr	r3, [pc, #48]	@ (8147a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8147a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147a04:	e06b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147a06:	2300      	movs	r3, #0
 8147a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147a0a:	e068      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8147a0c:	4b07      	ldr	r3, [pc, #28]	@ (8147a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8147a0e:	681b      	ldr	r3, [r3, #0]
 8147a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147a18:	d102      	bne.n	8147a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8147a1a:	4b07      	ldr	r3, [pc, #28]	@ (8147a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8147a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147a1e:	e05e      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147a20:	2300      	movs	r3, #0
 8147a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147a24:	e05b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8147a26:	2300      	movs	r3, #0
 8147a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147a2a:	e058      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8147a2c:	58024400 	.word	0x58024400
 8147a30:	03d09000 	.word	0x03d09000
 8147a34:	003d0900 	.word	0x003d0900
 8147a38:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8147a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8147a40:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8147a44:	430b      	orrs	r3, r1
 8147a46:	d148      	bne.n	8147ada <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8147a48:	4b27      	ldr	r3, [pc, #156]	@ (8147ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8147a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8147a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8147a50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8147a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147a58:	d02a      	beq.n	8147ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8147a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8147a60:	d838      	bhi.n	8147ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8147a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147a64:	2b00      	cmp	r3, #0
 8147a66:	d004      	beq.n	8147a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8147a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8147a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8147a6e:	d00d      	beq.n	8147a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8147a70:	e030      	b.n	8147ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8147a72:	4b1d      	ldr	r3, [pc, #116]	@ (8147ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8147a74:	681b      	ldr	r3, [r3, #0]
 8147a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8147a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8147a7e:	d102      	bne.n	8147a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8147a80:	4b1a      	ldr	r3, [pc, #104]	@ (8147aec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8147a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147a84:	e02b      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147a86:	2300      	movs	r3, #0
 8147a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147a8a:	e028      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8147a8c:	4b16      	ldr	r3, [pc, #88]	@ (8147ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8147a8e:	681b      	ldr	r3, [r3, #0]
 8147a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8147a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8147a98:	d107      	bne.n	8147aaa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8147a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8147a9e:	4618      	mov	r0, r3
 8147aa0:	f000 fae4 	bl	814806c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8147aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8147aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147aa8:	e019      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147aaa:	2300      	movs	r3, #0
 8147aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147aae:	e016      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8147ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8147ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8147ab2:	681b      	ldr	r3, [r3, #0]
 8147ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8147ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8147abc:	d107      	bne.n	8147ace <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8147abe:	f107 0318 	add.w	r3, r7, #24
 8147ac2:	4618      	mov	r0, r3
 8147ac4:	f000 f82a 	bl	8147b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8147ac8:	69fb      	ldr	r3, [r7, #28]
 8147aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8147acc:	e007      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8147ace:	2300      	movs	r3, #0
 8147ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147ad2:	e004      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8147ad4:	2300      	movs	r3, #0
 8147ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8147ad8:	e001      	b.n	8147ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8147ada:	2300      	movs	r3, #0
 8147adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8147ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8147ae0:	4618      	mov	r0, r3
 8147ae2:	3740      	adds	r7, #64	@ 0x40
 8147ae4:	46bd      	mov	sp, r7
 8147ae6:	bd80      	pop	{r7, pc}
 8147ae8:	58024400 	.word	0x58024400
 8147aec:	017d7840 	.word	0x017d7840

08147af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8147af0:	b580      	push	{r7, lr}
 8147af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8147af4:	f7fd ffe8 	bl	8145ac8 <HAL_RCC_GetHCLKFreq>
 8147af8:	4602      	mov	r2, r0
 8147afa:	4b06      	ldr	r3, [pc, #24]	@ (8147b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8147afc:	6a1b      	ldr	r3, [r3, #32]
 8147afe:	091b      	lsrs	r3, r3, #4
 8147b00:	f003 0307 	and.w	r3, r3, #7
 8147b04:	4904      	ldr	r1, [pc, #16]	@ (8147b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8147b06:	5ccb      	ldrb	r3, [r1, r3]
 8147b08:	f003 031f 	and.w	r3, r3, #31
 8147b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8147b10:	4618      	mov	r0, r3
 8147b12:	bd80      	pop	{r7, pc}
 8147b14:	58024400 	.word	0x58024400
 8147b18:	0814eab8 	.word	0x0814eab8

08147b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8147b1c:	b480      	push	{r7}
 8147b1e:	b089      	sub	sp, #36	@ 0x24
 8147b20:	af00      	add	r7, sp, #0
 8147b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8147b24:	4ba1      	ldr	r3, [pc, #644]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8147b28:	f003 0303 	and.w	r3, r3, #3
 8147b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8147b2e:	4b9f      	ldr	r3, [pc, #636]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8147b32:	0b1b      	lsrs	r3, r3, #12
 8147b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8147b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8147b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8147b3e:	091b      	lsrs	r3, r3, #4
 8147b40:	f003 0301 	and.w	r3, r3, #1
 8147b44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8147b46:	4b99      	ldr	r3, [pc, #612]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8147b4a:	08db      	lsrs	r3, r3, #3
 8147b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8147b50:	693a      	ldr	r2, [r7, #16]
 8147b52:	fb02 f303 	mul.w	r3, r2, r3
 8147b56:	ee07 3a90 	vmov	s15, r3
 8147b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8147b62:	697b      	ldr	r3, [r7, #20]
 8147b64:	2b00      	cmp	r3, #0
 8147b66:	f000 8111 	beq.w	8147d8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8147b6a:	69bb      	ldr	r3, [r7, #24]
 8147b6c:	2b02      	cmp	r3, #2
 8147b6e:	f000 8083 	beq.w	8147c78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8147b72:	69bb      	ldr	r3, [r7, #24]
 8147b74:	2b02      	cmp	r3, #2
 8147b76:	f200 80a1 	bhi.w	8147cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8147b7a:	69bb      	ldr	r3, [r7, #24]
 8147b7c:	2b00      	cmp	r3, #0
 8147b7e:	d003      	beq.n	8147b88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8147b80:	69bb      	ldr	r3, [r7, #24]
 8147b82:	2b01      	cmp	r3, #1
 8147b84:	d056      	beq.n	8147c34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8147b86:	e099      	b.n	8147cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8147b88:	4b88      	ldr	r3, [pc, #544]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b8a:	681b      	ldr	r3, [r3, #0]
 8147b8c:	f003 0320 	and.w	r3, r3, #32
 8147b90:	2b00      	cmp	r3, #0
 8147b92:	d02d      	beq.n	8147bf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8147b94:	4b85      	ldr	r3, [pc, #532]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147b96:	681b      	ldr	r3, [r3, #0]
 8147b98:	08db      	lsrs	r3, r3, #3
 8147b9a:	f003 0303 	and.w	r3, r3, #3
 8147b9e:	4a84      	ldr	r2, [pc, #528]	@ (8147db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8147ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8147ba4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8147ba6:	68bb      	ldr	r3, [r7, #8]
 8147ba8:	ee07 3a90 	vmov	s15, r3
 8147bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147bb0:	697b      	ldr	r3, [r7, #20]
 8147bb2:	ee07 3a90 	vmov	s15, r3
 8147bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147bc6:	ee07 3a90 	vmov	s15, r3
 8147bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8147bd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8147db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8147bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8147bee:	e087      	b.n	8147d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8147bf0:	697b      	ldr	r3, [r7, #20]
 8147bf2:	ee07 3a90 	vmov	s15, r3
 8147bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8147db8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8147bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147c02:	4b6a      	ldr	r3, [pc, #424]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147c0a:	ee07 3a90 	vmov	s15, r3
 8147c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8147c16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8147db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8147c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147c32:	e065      	b.n	8147d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8147c34:	697b      	ldr	r3, [r7, #20]
 8147c36:	ee07 3a90 	vmov	s15, r3
 8147c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8147dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8147c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147c46:	4b59      	ldr	r3, [pc, #356]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147c4e:	ee07 3a90 	vmov	s15, r3
 8147c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8147c5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8147db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8147c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147c76:	e043      	b.n	8147d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8147c78:	697b      	ldr	r3, [r7, #20]
 8147c7a:	ee07 3a90 	vmov	s15, r3
 8147c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147c82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8147dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8147c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147c8a:	4b48      	ldr	r3, [pc, #288]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147c92:	ee07 3a90 	vmov	s15, r3
 8147c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8147c9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8147db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8147ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147cba:	e021      	b.n	8147d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8147cbc:	697b      	ldr	r3, [r7, #20]
 8147cbe:	ee07 3a90 	vmov	s15, r3
 8147cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8147dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8147cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147cce:	4b37      	ldr	r3, [pc, #220]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147cd6:	ee07 3a90 	vmov	s15, r3
 8147cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8147ce2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8147db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8147ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147cfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8147d00:	4b2a      	ldr	r3, [pc, #168]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147d04:	0a5b      	lsrs	r3, r3, #9
 8147d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8147d0a:	ee07 3a90 	vmov	s15, r3
 8147d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8147d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8147d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8147d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8147d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8147d26:	ee17 2a90 	vmov	r2, s15
 8147d2a:	687b      	ldr	r3, [r7, #4]
 8147d2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8147d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147d32:	0c1b      	lsrs	r3, r3, #16
 8147d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8147d38:	ee07 3a90 	vmov	s15, r3
 8147d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8147d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8147d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8147d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8147d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8147d54:	ee17 2a90 	vmov	r2, s15
 8147d58:	687b      	ldr	r3, [r7, #4]
 8147d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8147d5c:	4b13      	ldr	r3, [pc, #76]	@ (8147dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8147d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8147d60:	0e1b      	lsrs	r3, r3, #24
 8147d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8147d66:	ee07 3a90 	vmov	s15, r3
 8147d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8147d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8147d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8147d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8147d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8147d82:	ee17 2a90 	vmov	r2, s15
 8147d86:	687b      	ldr	r3, [r7, #4]
 8147d88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8147d8a:	e008      	b.n	8147d9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8147d8c:	687b      	ldr	r3, [r7, #4]
 8147d8e:	2200      	movs	r2, #0
 8147d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8147d92:	687b      	ldr	r3, [r7, #4]
 8147d94:	2200      	movs	r2, #0
 8147d96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8147d98:	687b      	ldr	r3, [r7, #4]
 8147d9a:	2200      	movs	r2, #0
 8147d9c:	609a      	str	r2, [r3, #8]
}
 8147d9e:	bf00      	nop
 8147da0:	3724      	adds	r7, #36	@ 0x24
 8147da2:	46bd      	mov	sp, r7
 8147da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8147da8:	4770      	bx	lr
 8147daa:	bf00      	nop
 8147dac:	58024400 	.word	0x58024400
 8147db0:	03d09000 	.word	0x03d09000
 8147db4:	46000000 	.word	0x46000000
 8147db8:	4c742400 	.word	0x4c742400
 8147dbc:	4a742400 	.word	0x4a742400
 8147dc0:	4bbebc20 	.word	0x4bbebc20

08147dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8147dc4:	b480      	push	{r7}
 8147dc6:	b089      	sub	sp, #36	@ 0x24
 8147dc8:	af00      	add	r7, sp, #0
 8147dca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8147dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8147dd0:	f003 0303 	and.w	r3, r3, #3
 8147dd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8147dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8147dda:	0d1b      	lsrs	r3, r3, #20
 8147ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8147de0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8147de2:	4b9c      	ldr	r3, [pc, #624]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8147de6:	0a1b      	lsrs	r3, r3, #8
 8147de8:	f003 0301 	and.w	r3, r3, #1
 8147dec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8147dee:	4b99      	ldr	r3, [pc, #612]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8147df2:	08db      	lsrs	r3, r3, #3
 8147df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8147df8:	693a      	ldr	r2, [r7, #16]
 8147dfa:	fb02 f303 	mul.w	r3, r2, r3
 8147dfe:	ee07 3a90 	vmov	s15, r3
 8147e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8147e0a:	697b      	ldr	r3, [r7, #20]
 8147e0c:	2b00      	cmp	r3, #0
 8147e0e:	f000 8111 	beq.w	8148034 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8147e12:	69bb      	ldr	r3, [r7, #24]
 8147e14:	2b02      	cmp	r3, #2
 8147e16:	f000 8083 	beq.w	8147f20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8147e1a:	69bb      	ldr	r3, [r7, #24]
 8147e1c:	2b02      	cmp	r3, #2
 8147e1e:	f200 80a1 	bhi.w	8147f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8147e22:	69bb      	ldr	r3, [r7, #24]
 8147e24:	2b00      	cmp	r3, #0
 8147e26:	d003      	beq.n	8147e30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8147e28:	69bb      	ldr	r3, [r7, #24]
 8147e2a:	2b01      	cmp	r3, #1
 8147e2c:	d056      	beq.n	8147edc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8147e2e:	e099      	b.n	8147f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8147e30:	4b88      	ldr	r3, [pc, #544]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147e32:	681b      	ldr	r3, [r3, #0]
 8147e34:	f003 0320 	and.w	r3, r3, #32
 8147e38:	2b00      	cmp	r3, #0
 8147e3a:	d02d      	beq.n	8147e98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8147e3c:	4b85      	ldr	r3, [pc, #532]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147e3e:	681b      	ldr	r3, [r3, #0]
 8147e40:	08db      	lsrs	r3, r3, #3
 8147e42:	f003 0303 	and.w	r3, r3, #3
 8147e46:	4a84      	ldr	r2, [pc, #528]	@ (8148058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8147e48:	fa22 f303 	lsr.w	r3, r2, r3
 8147e4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8147e4e:	68bb      	ldr	r3, [r7, #8]
 8147e50:	ee07 3a90 	vmov	s15, r3
 8147e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147e58:	697b      	ldr	r3, [r7, #20]
 8147e5a:	ee07 3a90 	vmov	s15, r3
 8147e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147e66:	4b7b      	ldr	r3, [pc, #492]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147e6e:	ee07 3a90 	vmov	s15, r3
 8147e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8147e7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 814805c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8147e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8147e96:	e087      	b.n	8147fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8147e98:	697b      	ldr	r3, [r7, #20]
 8147e9a:	ee07 3a90 	vmov	s15, r3
 8147e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8148060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8147ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147eb2:	ee07 3a90 	vmov	s15, r3
 8147eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8147ebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 814805c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8147ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147eda:	e065      	b.n	8147fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8147edc:	697b      	ldr	r3, [r7, #20]
 8147ede:	ee07 3a90 	vmov	s15, r3
 8147ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8148064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8147eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147eee:	4b59      	ldr	r3, [pc, #356]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147ef6:	ee07 3a90 	vmov	s15, r3
 8147efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8147f02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 814805c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8147f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147f1e:	e043      	b.n	8147fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8147f20:	697b      	ldr	r3, [r7, #20]
 8147f22:	ee07 3a90 	vmov	s15, r3
 8147f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8148068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8147f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147f32:	4b48      	ldr	r3, [pc, #288]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147f3a:	ee07 3a90 	vmov	s15, r3
 8147f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8147f46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 814805c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8147f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147f62:	e021      	b.n	8147fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8147f64:	697b      	ldr	r3, [r7, #20]
 8147f66:	ee07 3a90 	vmov	s15, r3
 8147f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8148064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8147f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8147f76:	4b37      	ldr	r3, [pc, #220]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8147f7e:	ee07 3a90 	vmov	s15, r3
 8147f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8147f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8147f8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 814805c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8147f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8147f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8147f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8147f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8147f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8147fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8147fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8147fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147fac:	0a5b      	lsrs	r3, r3, #9
 8147fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8147fb2:	ee07 3a90 	vmov	s15, r3
 8147fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8147fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8147fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8147fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8147fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8147fce:	ee17 2a90 	vmov	r2, s15
 8147fd2:	687b      	ldr	r3, [r7, #4]
 8147fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8147fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8147fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8147fda:	0c1b      	lsrs	r3, r3, #16
 8147fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8147fe0:	ee07 3a90 	vmov	s15, r3
 8147fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8147fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8147fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8147ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8147ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8147ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8147ffc:	ee17 2a90 	vmov	r2, s15
 8148000:	687b      	ldr	r3, [r7, #4]
 8148002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8148004:	4b13      	ldr	r3, [pc, #76]	@ (8148054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8148006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8148008:	0e1b      	lsrs	r3, r3, #24
 814800a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814800e:	ee07 3a90 	vmov	s15, r3
 8148012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8148016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 814801a:	ee37 7a87 	vadd.f32	s14, s15, s14
 814801e:	edd7 6a07 	vldr	s13, [r7, #28]
 8148022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8148026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 814802a:	ee17 2a90 	vmov	r2, s15
 814802e:	687b      	ldr	r3, [r7, #4]
 8148030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8148032:	e008      	b.n	8148046 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8148034:	687b      	ldr	r3, [r7, #4]
 8148036:	2200      	movs	r2, #0
 8148038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 814803a:	687b      	ldr	r3, [r7, #4]
 814803c:	2200      	movs	r2, #0
 814803e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8148040:	687b      	ldr	r3, [r7, #4]
 8148042:	2200      	movs	r2, #0
 8148044:	609a      	str	r2, [r3, #8]
}
 8148046:	bf00      	nop
 8148048:	3724      	adds	r7, #36	@ 0x24
 814804a:	46bd      	mov	sp, r7
 814804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148050:	4770      	bx	lr
 8148052:	bf00      	nop
 8148054:	58024400 	.word	0x58024400
 8148058:	03d09000 	.word	0x03d09000
 814805c:	46000000 	.word	0x46000000
 8148060:	4c742400 	.word	0x4c742400
 8148064:	4a742400 	.word	0x4a742400
 8148068:	4bbebc20 	.word	0x4bbebc20

0814806c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 814806c:	b480      	push	{r7}
 814806e:	b089      	sub	sp, #36	@ 0x24
 8148070:	af00      	add	r7, sp, #0
 8148072:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8148074:	4ba0      	ldr	r3, [pc, #640]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148078:	f003 0303 	and.w	r3, r3, #3
 814807c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 814807e:	4b9e      	ldr	r3, [pc, #632]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148082:	091b      	lsrs	r3, r3, #4
 8148084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8148088:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 814808a:	4b9b      	ldr	r3, [pc, #620]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 814808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814808e:	f003 0301 	and.w	r3, r3, #1
 8148092:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8148094:	4b98      	ldr	r3, [pc, #608]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8148098:	08db      	lsrs	r3, r3, #3
 814809a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 814809e:	693a      	ldr	r2, [r7, #16]
 81480a0:	fb02 f303 	mul.w	r3, r2, r3
 81480a4:	ee07 3a90 	vmov	s15, r3
 81480a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81480ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81480b0:	697b      	ldr	r3, [r7, #20]
 81480b2:	2b00      	cmp	r3, #0
 81480b4:	f000 8111 	beq.w	81482da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81480b8:	69bb      	ldr	r3, [r7, #24]
 81480ba:	2b02      	cmp	r3, #2
 81480bc:	f000 8083 	beq.w	81481c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81480c0:	69bb      	ldr	r3, [r7, #24]
 81480c2:	2b02      	cmp	r3, #2
 81480c4:	f200 80a1 	bhi.w	814820a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81480c8:	69bb      	ldr	r3, [r7, #24]
 81480ca:	2b00      	cmp	r3, #0
 81480cc:	d003      	beq.n	81480d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81480ce:	69bb      	ldr	r3, [r7, #24]
 81480d0:	2b01      	cmp	r3, #1
 81480d2:	d056      	beq.n	8148182 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81480d4:	e099      	b.n	814820a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81480d6:	4b88      	ldr	r3, [pc, #544]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81480d8:	681b      	ldr	r3, [r3, #0]
 81480da:	f003 0320 	and.w	r3, r3, #32
 81480de:	2b00      	cmp	r3, #0
 81480e0:	d02d      	beq.n	814813e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81480e2:	4b85      	ldr	r3, [pc, #532]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81480e4:	681b      	ldr	r3, [r3, #0]
 81480e6:	08db      	lsrs	r3, r3, #3
 81480e8:	f003 0303 	and.w	r3, r3, #3
 81480ec:	4a83      	ldr	r2, [pc, #524]	@ (81482fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81480ee:	fa22 f303 	lsr.w	r3, r2, r3
 81480f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81480f4:	68bb      	ldr	r3, [r7, #8]
 81480f6:	ee07 3a90 	vmov	s15, r3
 81480fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81480fe:	697b      	ldr	r3, [r7, #20]
 8148100:	ee07 3a90 	vmov	s15, r3
 8148104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8148108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 814810c:	4b7a      	ldr	r3, [pc, #488]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 814810e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8148114:	ee07 3a90 	vmov	s15, r3
 8148118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 814811c:	ed97 6a03 	vldr	s12, [r7, #12]
 8148120:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8148300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8148124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8148128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 814812c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8148130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8148134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8148138:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 814813c:	e087      	b.n	814824e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 814813e:	697b      	ldr	r3, [r7, #20]
 8148140:	ee07 3a90 	vmov	s15, r3
 8148144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8148148:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8148304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 814814c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8148150:	4b69      	ldr	r3, [pc, #420]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8148158:	ee07 3a90 	vmov	s15, r3
 814815c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8148160:	ed97 6a03 	vldr	s12, [r7, #12]
 8148164:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8148300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8148168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 814816c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8148170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8148174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8148178:	ee67 7a27 	vmul.f32	s15, s14, s15
 814817c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8148180:	e065      	b.n	814824e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8148182:	697b      	ldr	r3, [r7, #20]
 8148184:	ee07 3a90 	vmov	s15, r3
 8148188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 814818c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8148308 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8148190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8148194:	4b58      	ldr	r3, [pc, #352]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 814819c:	ee07 3a90 	vmov	s15, r3
 81481a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81481a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81481a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8148300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81481ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81481b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81481b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81481b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81481bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81481c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81481c4:	e043      	b.n	814824e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81481c6:	697b      	ldr	r3, [r7, #20]
 81481c8:	ee07 3a90 	vmov	s15, r3
 81481cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81481d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 814830c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81481d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81481d8:	4b47      	ldr	r3, [pc, #284]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81481da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81481dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81481e0:	ee07 3a90 	vmov	s15, r3
 81481e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81481e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81481ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8148300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81481f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81481f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81481f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81481fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8148200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8148204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8148208:	e021      	b.n	814824e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 814820a:	697b      	ldr	r3, [r7, #20]
 814820c:	ee07 3a90 	vmov	s15, r3
 8148210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8148214:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8148304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8148218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 814821c:	4b36      	ldr	r3, [pc, #216]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 814821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8148224:	ee07 3a90 	vmov	s15, r3
 8148228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 814822c:	ed97 6a03 	vldr	s12, [r7, #12]
 8148230:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8148300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8148234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8148238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 814823c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8148240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8148244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8148248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 814824c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 814824e:	4b2a      	ldr	r3, [pc, #168]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8148250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148252:	0a5b      	lsrs	r3, r3, #9
 8148254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8148258:	ee07 3a90 	vmov	s15, r3
 814825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8148260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8148264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8148268:	edd7 6a07 	vldr	s13, [r7, #28]
 814826c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8148270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8148274:	ee17 2a90 	vmov	r2, s15
 8148278:	687b      	ldr	r3, [r7, #4]
 814827a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 814827c:	4b1e      	ldr	r3, [pc, #120]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 814827e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8148280:	0c1b      	lsrs	r3, r3, #16
 8148282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8148286:	ee07 3a90 	vmov	s15, r3
 814828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 814828e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8148292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8148296:	edd7 6a07 	vldr	s13, [r7, #28]
 814829a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 814829e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81482a2:	ee17 2a90 	vmov	r2, s15
 81482a6:	687b      	ldr	r3, [r7, #4]
 81482a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81482aa:	4b13      	ldr	r3, [pc, #76]	@ (81482f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81482ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81482ae:	0e1b      	lsrs	r3, r3, #24
 81482b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81482b4:	ee07 3a90 	vmov	s15, r3
 81482b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81482bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81482c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81482c4:	edd7 6a07 	vldr	s13, [r7, #28]
 81482c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81482cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81482d0:	ee17 2a90 	vmov	r2, s15
 81482d4:	687b      	ldr	r3, [r7, #4]
 81482d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81482d8:	e008      	b.n	81482ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81482da:	687b      	ldr	r3, [r7, #4]
 81482dc:	2200      	movs	r2, #0
 81482de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81482e0:	687b      	ldr	r3, [r7, #4]
 81482e2:	2200      	movs	r2, #0
 81482e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81482e6:	687b      	ldr	r3, [r7, #4]
 81482e8:	2200      	movs	r2, #0
 81482ea:	609a      	str	r2, [r3, #8]
}
 81482ec:	bf00      	nop
 81482ee:	3724      	adds	r7, #36	@ 0x24
 81482f0:	46bd      	mov	sp, r7
 81482f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81482f6:	4770      	bx	lr
 81482f8:	58024400 	.word	0x58024400
 81482fc:	03d09000 	.word	0x03d09000
 8148300:	46000000 	.word	0x46000000
 8148304:	4c742400 	.word	0x4c742400
 8148308:	4a742400 	.word	0x4a742400
 814830c:	4bbebc20 	.word	0x4bbebc20

08148310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8148310:	b580      	push	{r7, lr}
 8148312:	b084      	sub	sp, #16
 8148314:	af00      	add	r7, sp, #0
 8148316:	6078      	str	r0, [r7, #4]
 8148318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 814831a:	2300      	movs	r3, #0
 814831c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 814831e:	4b54      	ldr	r3, [pc, #336]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148322:	f003 0303 	and.w	r3, r3, #3
 8148326:	2b03      	cmp	r3, #3
 8148328:	d101      	bne.n	814832e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 814832a:	2301      	movs	r3, #1
 814832c:	e09b      	b.n	8148466 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 814832e:	4b50      	ldr	r3, [pc, #320]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148330:	681b      	ldr	r3, [r3, #0]
 8148332:	4a4f      	ldr	r2, [pc, #316]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148334:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8148338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 814833a:	f7fa fb11 	bl	8142960 <HAL_GetTick>
 814833e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8148340:	e008      	b.n	8148354 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8148342:	f7fa fb0d 	bl	8142960 <HAL_GetTick>
 8148346:	4602      	mov	r2, r0
 8148348:	68bb      	ldr	r3, [r7, #8]
 814834a:	1ad3      	subs	r3, r2, r3
 814834c:	2b02      	cmp	r3, #2
 814834e:	d901      	bls.n	8148354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8148350:	2303      	movs	r3, #3
 8148352:	e088      	b.n	8148466 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8148354:	4b46      	ldr	r3, [pc, #280]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148356:	681b      	ldr	r3, [r3, #0]
 8148358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 814835c:	2b00      	cmp	r3, #0
 814835e:	d1f0      	bne.n	8148342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8148360:	4b43      	ldr	r3, [pc, #268]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148364:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8148368:	687b      	ldr	r3, [r7, #4]
 814836a:	681b      	ldr	r3, [r3, #0]
 814836c:	031b      	lsls	r3, r3, #12
 814836e:	4940      	ldr	r1, [pc, #256]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148370:	4313      	orrs	r3, r2
 8148372:	628b      	str	r3, [r1, #40]	@ 0x28
 8148374:	687b      	ldr	r3, [r7, #4]
 8148376:	685b      	ldr	r3, [r3, #4]
 8148378:	3b01      	subs	r3, #1
 814837a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 814837e:	687b      	ldr	r3, [r7, #4]
 8148380:	689b      	ldr	r3, [r3, #8]
 8148382:	3b01      	subs	r3, #1
 8148384:	025b      	lsls	r3, r3, #9
 8148386:	b29b      	uxth	r3, r3
 8148388:	431a      	orrs	r2, r3
 814838a:	687b      	ldr	r3, [r7, #4]
 814838c:	68db      	ldr	r3, [r3, #12]
 814838e:	3b01      	subs	r3, #1
 8148390:	041b      	lsls	r3, r3, #16
 8148392:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8148396:	431a      	orrs	r2, r3
 8148398:	687b      	ldr	r3, [r7, #4]
 814839a:	691b      	ldr	r3, [r3, #16]
 814839c:	3b01      	subs	r3, #1
 814839e:	061b      	lsls	r3, r3, #24
 81483a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81483a4:	4932      	ldr	r1, [pc, #200]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483a6:	4313      	orrs	r3, r2
 81483a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81483aa:	4b31      	ldr	r3, [pc, #196]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81483ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81483b2:	687b      	ldr	r3, [r7, #4]
 81483b4:	695b      	ldr	r3, [r3, #20]
 81483b6:	492e      	ldr	r1, [pc, #184]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483b8:	4313      	orrs	r3, r2
 81483ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81483bc:	4b2c      	ldr	r3, [pc, #176]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81483c0:	f023 0220 	bic.w	r2, r3, #32
 81483c4:	687b      	ldr	r3, [r7, #4]
 81483c6:	699b      	ldr	r3, [r3, #24]
 81483c8:	4929      	ldr	r1, [pc, #164]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483ca:	4313      	orrs	r3, r2
 81483cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81483ce:	4b28      	ldr	r3, [pc, #160]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81483d2:	4a27      	ldr	r2, [pc, #156]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483d4:	f023 0310 	bic.w	r3, r3, #16
 81483d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81483da:	4b25      	ldr	r3, [pc, #148]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81483de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81483e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81483e6:	687a      	ldr	r2, [r7, #4]
 81483e8:	69d2      	ldr	r2, [r2, #28]
 81483ea:	00d2      	lsls	r2, r2, #3
 81483ec:	4920      	ldr	r1, [pc, #128]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483ee:	4313      	orrs	r3, r2
 81483f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81483f2:	4b1f      	ldr	r3, [pc, #124]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81483f6:	4a1e      	ldr	r2, [pc, #120]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 81483f8:	f043 0310 	orr.w	r3, r3, #16
 81483fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81483fe:	683b      	ldr	r3, [r7, #0]
 8148400:	2b00      	cmp	r3, #0
 8148402:	d106      	bne.n	8148412 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8148404:	4b1a      	ldr	r3, [pc, #104]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148408:	4a19      	ldr	r2, [pc, #100]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 814840a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814840e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8148410:	e00f      	b.n	8148432 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8148412:	683b      	ldr	r3, [r7, #0]
 8148414:	2b01      	cmp	r3, #1
 8148416:	d106      	bne.n	8148426 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8148418:	4b15      	ldr	r3, [pc, #84]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 814841a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814841c:	4a14      	ldr	r2, [pc, #80]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 814841e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8148422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8148424:	e005      	b.n	8148432 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8148426:	4b12      	ldr	r3, [pc, #72]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814842a:	4a11      	ldr	r2, [pc, #68]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 814842c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8148430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8148432:	4b0f      	ldr	r3, [pc, #60]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148434:	681b      	ldr	r3, [r3, #0]
 8148436:	4a0e      	ldr	r2, [pc, #56]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 8148438:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 814843c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 814843e:	f7fa fa8f 	bl	8142960 <HAL_GetTick>
 8148442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8148444:	e008      	b.n	8148458 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8148446:	f7fa fa8b 	bl	8142960 <HAL_GetTick>
 814844a:	4602      	mov	r2, r0
 814844c:	68bb      	ldr	r3, [r7, #8]
 814844e:	1ad3      	subs	r3, r2, r3
 8148450:	2b02      	cmp	r3, #2
 8148452:	d901      	bls.n	8148458 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8148454:	2303      	movs	r3, #3
 8148456:	e006      	b.n	8148466 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8148458:	4b05      	ldr	r3, [pc, #20]	@ (8148470 <RCCEx_PLL2_Config+0x160>)
 814845a:	681b      	ldr	r3, [r3, #0]
 814845c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8148460:	2b00      	cmp	r3, #0
 8148462:	d0f0      	beq.n	8148446 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8148464:	7bfb      	ldrb	r3, [r7, #15]
}
 8148466:	4618      	mov	r0, r3
 8148468:	3710      	adds	r7, #16
 814846a:	46bd      	mov	sp, r7
 814846c:	bd80      	pop	{r7, pc}
 814846e:	bf00      	nop
 8148470:	58024400 	.word	0x58024400

08148474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8148474:	b580      	push	{r7, lr}
 8148476:	b084      	sub	sp, #16
 8148478:	af00      	add	r7, sp, #0
 814847a:	6078      	str	r0, [r7, #4]
 814847c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 814847e:	2300      	movs	r3, #0
 8148480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8148482:	4b54      	ldr	r3, [pc, #336]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148486:	f003 0303 	and.w	r3, r3, #3
 814848a:	2b03      	cmp	r3, #3
 814848c:	d101      	bne.n	8148492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 814848e:	2301      	movs	r3, #1
 8148490:	e09b      	b.n	81485ca <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8148492:	4b50      	ldr	r3, [pc, #320]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148494:	681b      	ldr	r3, [r3, #0]
 8148496:	4a4f      	ldr	r2, [pc, #316]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 814849c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 814849e:	f7fa fa5f 	bl	8142960 <HAL_GetTick>
 81484a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81484a4:	e008      	b.n	81484b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81484a6:	f7fa fa5b 	bl	8142960 <HAL_GetTick>
 81484aa:	4602      	mov	r2, r0
 81484ac:	68bb      	ldr	r3, [r7, #8]
 81484ae:	1ad3      	subs	r3, r2, r3
 81484b0:	2b02      	cmp	r3, #2
 81484b2:	d901      	bls.n	81484b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81484b4:	2303      	movs	r3, #3
 81484b6:	e088      	b.n	81485ca <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81484b8:	4b46      	ldr	r3, [pc, #280]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 81484ba:	681b      	ldr	r3, [r3, #0]
 81484bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81484c0:	2b00      	cmp	r3, #0
 81484c2:	d1f0      	bne.n	81484a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81484c4:	4b43      	ldr	r3, [pc, #268]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 81484c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81484c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81484cc:	687b      	ldr	r3, [r7, #4]
 81484ce:	681b      	ldr	r3, [r3, #0]
 81484d0:	051b      	lsls	r3, r3, #20
 81484d2:	4940      	ldr	r1, [pc, #256]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 81484d4:	4313      	orrs	r3, r2
 81484d6:	628b      	str	r3, [r1, #40]	@ 0x28
 81484d8:	687b      	ldr	r3, [r7, #4]
 81484da:	685b      	ldr	r3, [r3, #4]
 81484dc:	3b01      	subs	r3, #1
 81484de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81484e2:	687b      	ldr	r3, [r7, #4]
 81484e4:	689b      	ldr	r3, [r3, #8]
 81484e6:	3b01      	subs	r3, #1
 81484e8:	025b      	lsls	r3, r3, #9
 81484ea:	b29b      	uxth	r3, r3
 81484ec:	431a      	orrs	r2, r3
 81484ee:	687b      	ldr	r3, [r7, #4]
 81484f0:	68db      	ldr	r3, [r3, #12]
 81484f2:	3b01      	subs	r3, #1
 81484f4:	041b      	lsls	r3, r3, #16
 81484f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81484fa:	431a      	orrs	r2, r3
 81484fc:	687b      	ldr	r3, [r7, #4]
 81484fe:	691b      	ldr	r3, [r3, #16]
 8148500:	3b01      	subs	r3, #1
 8148502:	061b      	lsls	r3, r3, #24
 8148504:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8148508:	4932      	ldr	r1, [pc, #200]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814850a:	4313      	orrs	r3, r2
 814850c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 814850e:	4b31      	ldr	r3, [pc, #196]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8148516:	687b      	ldr	r3, [r7, #4]
 8148518:	695b      	ldr	r3, [r3, #20]
 814851a:	492e      	ldr	r1, [pc, #184]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814851c:	4313      	orrs	r3, r2
 814851e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8148520:	4b2c      	ldr	r3, [pc, #176]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148524:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8148528:	687b      	ldr	r3, [r7, #4]
 814852a:	699b      	ldr	r3, [r3, #24]
 814852c:	4929      	ldr	r1, [pc, #164]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814852e:	4313      	orrs	r3, r2
 8148530:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8148532:	4b28      	ldr	r3, [pc, #160]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148536:	4a27      	ldr	r2, [pc, #156]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 814853c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 814853e:	4b25      	ldr	r3, [pc, #148]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8148542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8148546:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 814854a:	687a      	ldr	r2, [r7, #4]
 814854c:	69d2      	ldr	r2, [r2, #28]
 814854e:	00d2      	lsls	r2, r2, #3
 8148550:	4920      	ldr	r1, [pc, #128]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148552:	4313      	orrs	r3, r2
 8148554:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8148556:	4b1f      	ldr	r3, [pc, #124]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814855a:	4a1e      	ldr	r2, [pc, #120]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814855c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8148560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8148562:	683b      	ldr	r3, [r7, #0]
 8148564:	2b00      	cmp	r3, #0
 8148566:	d106      	bne.n	8148576 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8148568:	4b1a      	ldr	r3, [pc, #104]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814856c:	4a19      	ldr	r2, [pc, #100]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814856e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8148572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8148574:	e00f      	b.n	8148596 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8148576:	683b      	ldr	r3, [r7, #0]
 8148578:	2b01      	cmp	r3, #1
 814857a:	d106      	bne.n	814858a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 814857c:	4b15      	ldr	r3, [pc, #84]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148580:	4a14      	ldr	r2, [pc, #80]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148582:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8148586:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8148588:	e005      	b.n	8148596 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 814858a:	4b12      	ldr	r3, [pc, #72]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814858e:	4a11      	ldr	r2, [pc, #68]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8148594:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8148596:	4b0f      	ldr	r3, [pc, #60]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 8148598:	681b      	ldr	r3, [r3, #0]
 814859a:	4a0e      	ldr	r2, [pc, #56]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 814859c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81485a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81485a2:	f7fa f9dd 	bl	8142960 <HAL_GetTick>
 81485a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81485a8:	e008      	b.n	81485bc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81485aa:	f7fa f9d9 	bl	8142960 <HAL_GetTick>
 81485ae:	4602      	mov	r2, r0
 81485b0:	68bb      	ldr	r3, [r7, #8]
 81485b2:	1ad3      	subs	r3, r2, r3
 81485b4:	2b02      	cmp	r3, #2
 81485b6:	d901      	bls.n	81485bc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81485b8:	2303      	movs	r3, #3
 81485ba:	e006      	b.n	81485ca <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81485bc:	4b05      	ldr	r3, [pc, #20]	@ (81485d4 <RCCEx_PLL3_Config+0x160>)
 81485be:	681b      	ldr	r3, [r3, #0]
 81485c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81485c4:	2b00      	cmp	r3, #0
 81485c6:	d0f0      	beq.n	81485aa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81485c8:	7bfb      	ldrb	r3, [r7, #15]
}
 81485ca:	4618      	mov	r0, r3
 81485cc:	3710      	adds	r7, #16
 81485ce:	46bd      	mov	sp, r7
 81485d0:	bd80      	pop	{r7, pc}
 81485d2:	bf00      	nop
 81485d4:	58024400 	.word	0x58024400

081485d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81485d8:	b580      	push	{r7, lr}
 81485da:	b082      	sub	sp, #8
 81485dc:	af00      	add	r7, sp, #0
 81485de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81485e0:	687b      	ldr	r3, [r7, #4]
 81485e2:	2b00      	cmp	r3, #0
 81485e4:	d101      	bne.n	81485ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81485e6:	2301      	movs	r3, #1
 81485e8:	e049      	b.n	814867e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81485ea:	687b      	ldr	r3, [r7, #4]
 81485ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81485f0:	b2db      	uxtb	r3, r3
 81485f2:	2b00      	cmp	r3, #0
 81485f4:	d106      	bne.n	8148604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81485f6:	687b      	ldr	r3, [r7, #4]
 81485f8:	2200      	movs	r2, #0
 81485fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81485fe:	6878      	ldr	r0, [r7, #4]
 8148600:	f000 f841 	bl	8148686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8148604:	687b      	ldr	r3, [r7, #4]
 8148606:	2202      	movs	r2, #2
 8148608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 814860c:	687b      	ldr	r3, [r7, #4]
 814860e:	681a      	ldr	r2, [r3, #0]
 8148610:	687b      	ldr	r3, [r7, #4]
 8148612:	3304      	adds	r3, #4
 8148614:	4619      	mov	r1, r3
 8148616:	4610      	mov	r0, r2
 8148618:	f000 f9e8 	bl	81489ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 814861c:	687b      	ldr	r3, [r7, #4]
 814861e:	2201      	movs	r2, #1
 8148620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8148624:	687b      	ldr	r3, [r7, #4]
 8148626:	2201      	movs	r2, #1
 8148628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 814862c:	687b      	ldr	r3, [r7, #4]
 814862e:	2201      	movs	r2, #1
 8148630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8148634:	687b      	ldr	r3, [r7, #4]
 8148636:	2201      	movs	r2, #1
 8148638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 814863c:	687b      	ldr	r3, [r7, #4]
 814863e:	2201      	movs	r2, #1
 8148640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8148644:	687b      	ldr	r3, [r7, #4]
 8148646:	2201      	movs	r2, #1
 8148648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 814864c:	687b      	ldr	r3, [r7, #4]
 814864e:	2201      	movs	r2, #1
 8148650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8148654:	687b      	ldr	r3, [r7, #4]
 8148656:	2201      	movs	r2, #1
 8148658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 814865c:	687b      	ldr	r3, [r7, #4]
 814865e:	2201      	movs	r2, #1
 8148660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8148664:	687b      	ldr	r3, [r7, #4]
 8148666:	2201      	movs	r2, #1
 8148668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 814866c:	687b      	ldr	r3, [r7, #4]
 814866e:	2201      	movs	r2, #1
 8148670:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8148674:	687b      	ldr	r3, [r7, #4]
 8148676:	2201      	movs	r2, #1
 8148678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 814867c:	2300      	movs	r3, #0
}
 814867e:	4618      	mov	r0, r3
 8148680:	3708      	adds	r7, #8
 8148682:	46bd      	mov	sp, r7
 8148684:	bd80      	pop	{r7, pc}

08148686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8148686:	b480      	push	{r7}
 8148688:	b083      	sub	sp, #12
 814868a:	af00      	add	r7, sp, #0
 814868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 814868e:	bf00      	nop
 8148690:	370c      	adds	r7, #12
 8148692:	46bd      	mov	sp, r7
 8148694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148698:	4770      	bx	lr
	...

0814869c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 814869c:	b480      	push	{r7}
 814869e:	b085      	sub	sp, #20
 81486a0:	af00      	add	r7, sp, #0
 81486a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81486a4:	687b      	ldr	r3, [r7, #4]
 81486a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81486aa:	b2db      	uxtb	r3, r3
 81486ac:	2b01      	cmp	r3, #1
 81486ae:	d001      	beq.n	81486b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81486b0:	2301      	movs	r3, #1
 81486b2:	e054      	b.n	814875e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81486b4:	687b      	ldr	r3, [r7, #4]
 81486b6:	2202      	movs	r2, #2
 81486b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81486bc:	687b      	ldr	r3, [r7, #4]
 81486be:	681b      	ldr	r3, [r3, #0]
 81486c0:	68da      	ldr	r2, [r3, #12]
 81486c2:	687b      	ldr	r3, [r7, #4]
 81486c4:	681b      	ldr	r3, [r3, #0]
 81486c6:	f042 0201 	orr.w	r2, r2, #1
 81486ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81486cc:	687b      	ldr	r3, [r7, #4]
 81486ce:	681b      	ldr	r3, [r3, #0]
 81486d0:	4a26      	ldr	r2, [pc, #152]	@ (814876c <HAL_TIM_Base_Start_IT+0xd0>)
 81486d2:	4293      	cmp	r3, r2
 81486d4:	d022      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 81486d6:	687b      	ldr	r3, [r7, #4]
 81486d8:	681b      	ldr	r3, [r3, #0]
 81486da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81486de:	d01d      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 81486e0:	687b      	ldr	r3, [r7, #4]
 81486e2:	681b      	ldr	r3, [r3, #0]
 81486e4:	4a22      	ldr	r2, [pc, #136]	@ (8148770 <HAL_TIM_Base_Start_IT+0xd4>)
 81486e6:	4293      	cmp	r3, r2
 81486e8:	d018      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 81486ea:	687b      	ldr	r3, [r7, #4]
 81486ec:	681b      	ldr	r3, [r3, #0]
 81486ee:	4a21      	ldr	r2, [pc, #132]	@ (8148774 <HAL_TIM_Base_Start_IT+0xd8>)
 81486f0:	4293      	cmp	r3, r2
 81486f2:	d013      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 81486f4:	687b      	ldr	r3, [r7, #4]
 81486f6:	681b      	ldr	r3, [r3, #0]
 81486f8:	4a1f      	ldr	r2, [pc, #124]	@ (8148778 <HAL_TIM_Base_Start_IT+0xdc>)
 81486fa:	4293      	cmp	r3, r2
 81486fc:	d00e      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 81486fe:	687b      	ldr	r3, [r7, #4]
 8148700:	681b      	ldr	r3, [r3, #0]
 8148702:	4a1e      	ldr	r2, [pc, #120]	@ (814877c <HAL_TIM_Base_Start_IT+0xe0>)
 8148704:	4293      	cmp	r3, r2
 8148706:	d009      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 8148708:	687b      	ldr	r3, [r7, #4]
 814870a:	681b      	ldr	r3, [r3, #0]
 814870c:	4a1c      	ldr	r2, [pc, #112]	@ (8148780 <HAL_TIM_Base_Start_IT+0xe4>)
 814870e:	4293      	cmp	r3, r2
 8148710:	d004      	beq.n	814871c <HAL_TIM_Base_Start_IT+0x80>
 8148712:	687b      	ldr	r3, [r7, #4]
 8148714:	681b      	ldr	r3, [r3, #0]
 8148716:	4a1b      	ldr	r2, [pc, #108]	@ (8148784 <HAL_TIM_Base_Start_IT+0xe8>)
 8148718:	4293      	cmp	r3, r2
 814871a:	d115      	bne.n	8148748 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 814871c:	687b      	ldr	r3, [r7, #4]
 814871e:	681b      	ldr	r3, [r3, #0]
 8148720:	689a      	ldr	r2, [r3, #8]
 8148722:	4b19      	ldr	r3, [pc, #100]	@ (8148788 <HAL_TIM_Base_Start_IT+0xec>)
 8148724:	4013      	ands	r3, r2
 8148726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8148728:	68fb      	ldr	r3, [r7, #12]
 814872a:	2b06      	cmp	r3, #6
 814872c:	d015      	beq.n	814875a <HAL_TIM_Base_Start_IT+0xbe>
 814872e:	68fb      	ldr	r3, [r7, #12]
 8148730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8148734:	d011      	beq.n	814875a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8148736:	687b      	ldr	r3, [r7, #4]
 8148738:	681b      	ldr	r3, [r3, #0]
 814873a:	681a      	ldr	r2, [r3, #0]
 814873c:	687b      	ldr	r3, [r7, #4]
 814873e:	681b      	ldr	r3, [r3, #0]
 8148740:	f042 0201 	orr.w	r2, r2, #1
 8148744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8148746:	e008      	b.n	814875a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8148748:	687b      	ldr	r3, [r7, #4]
 814874a:	681b      	ldr	r3, [r3, #0]
 814874c:	681a      	ldr	r2, [r3, #0]
 814874e:	687b      	ldr	r3, [r7, #4]
 8148750:	681b      	ldr	r3, [r3, #0]
 8148752:	f042 0201 	orr.w	r2, r2, #1
 8148756:	601a      	str	r2, [r3, #0]
 8148758:	e000      	b.n	814875c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 814875a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 814875c:	2300      	movs	r3, #0
}
 814875e:	4618      	mov	r0, r3
 8148760:	3714      	adds	r7, #20
 8148762:	46bd      	mov	sp, r7
 8148764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148768:	4770      	bx	lr
 814876a:	bf00      	nop
 814876c:	40010000 	.word	0x40010000
 8148770:	40000400 	.word	0x40000400
 8148774:	40000800 	.word	0x40000800
 8148778:	40000c00 	.word	0x40000c00
 814877c:	40010400 	.word	0x40010400
 8148780:	40001800 	.word	0x40001800
 8148784:	40014000 	.word	0x40014000
 8148788:	00010007 	.word	0x00010007

0814878c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 814878c:	b580      	push	{r7, lr}
 814878e:	b084      	sub	sp, #16
 8148790:	af00      	add	r7, sp, #0
 8148792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8148794:	687b      	ldr	r3, [r7, #4]
 8148796:	681b      	ldr	r3, [r3, #0]
 8148798:	68db      	ldr	r3, [r3, #12]
 814879a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 814879c:	687b      	ldr	r3, [r7, #4]
 814879e:	681b      	ldr	r3, [r3, #0]
 81487a0:	691b      	ldr	r3, [r3, #16]
 81487a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81487a4:	68bb      	ldr	r3, [r7, #8]
 81487a6:	f003 0302 	and.w	r3, r3, #2
 81487aa:	2b00      	cmp	r3, #0
 81487ac:	d020      	beq.n	81487f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81487ae:	68fb      	ldr	r3, [r7, #12]
 81487b0:	f003 0302 	and.w	r3, r3, #2
 81487b4:	2b00      	cmp	r3, #0
 81487b6:	d01b      	beq.n	81487f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81487b8:	687b      	ldr	r3, [r7, #4]
 81487ba:	681b      	ldr	r3, [r3, #0]
 81487bc:	f06f 0202 	mvn.w	r2, #2
 81487c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81487c2:	687b      	ldr	r3, [r7, #4]
 81487c4:	2201      	movs	r2, #1
 81487c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81487c8:	687b      	ldr	r3, [r7, #4]
 81487ca:	681b      	ldr	r3, [r3, #0]
 81487cc:	699b      	ldr	r3, [r3, #24]
 81487ce:	f003 0303 	and.w	r3, r3, #3
 81487d2:	2b00      	cmp	r3, #0
 81487d4:	d003      	beq.n	81487de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81487d6:	6878      	ldr	r0, [r7, #4]
 81487d8:	f000 f8e9 	bl	81489ae <HAL_TIM_IC_CaptureCallback>
 81487dc:	e005      	b.n	81487ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81487de:	6878      	ldr	r0, [r7, #4]
 81487e0:	f000 f8db 	bl	814899a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81487e4:	6878      	ldr	r0, [r7, #4]
 81487e6:	f000 f8ec 	bl	81489c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81487ea:	687b      	ldr	r3, [r7, #4]
 81487ec:	2200      	movs	r2, #0
 81487ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81487f0:	68bb      	ldr	r3, [r7, #8]
 81487f2:	f003 0304 	and.w	r3, r3, #4
 81487f6:	2b00      	cmp	r3, #0
 81487f8:	d020      	beq.n	814883c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81487fa:	68fb      	ldr	r3, [r7, #12]
 81487fc:	f003 0304 	and.w	r3, r3, #4
 8148800:	2b00      	cmp	r3, #0
 8148802:	d01b      	beq.n	814883c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8148804:	687b      	ldr	r3, [r7, #4]
 8148806:	681b      	ldr	r3, [r3, #0]
 8148808:	f06f 0204 	mvn.w	r2, #4
 814880c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 814880e:	687b      	ldr	r3, [r7, #4]
 8148810:	2202      	movs	r2, #2
 8148812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8148814:	687b      	ldr	r3, [r7, #4]
 8148816:	681b      	ldr	r3, [r3, #0]
 8148818:	699b      	ldr	r3, [r3, #24]
 814881a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 814881e:	2b00      	cmp	r3, #0
 8148820:	d003      	beq.n	814882a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8148822:	6878      	ldr	r0, [r7, #4]
 8148824:	f000 f8c3 	bl	81489ae <HAL_TIM_IC_CaptureCallback>
 8148828:	e005      	b.n	8148836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 814882a:	6878      	ldr	r0, [r7, #4]
 814882c:	f000 f8b5 	bl	814899a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8148830:	6878      	ldr	r0, [r7, #4]
 8148832:	f000 f8c6 	bl	81489c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8148836:	687b      	ldr	r3, [r7, #4]
 8148838:	2200      	movs	r2, #0
 814883a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 814883c:	68bb      	ldr	r3, [r7, #8]
 814883e:	f003 0308 	and.w	r3, r3, #8
 8148842:	2b00      	cmp	r3, #0
 8148844:	d020      	beq.n	8148888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8148846:	68fb      	ldr	r3, [r7, #12]
 8148848:	f003 0308 	and.w	r3, r3, #8
 814884c:	2b00      	cmp	r3, #0
 814884e:	d01b      	beq.n	8148888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8148850:	687b      	ldr	r3, [r7, #4]
 8148852:	681b      	ldr	r3, [r3, #0]
 8148854:	f06f 0208 	mvn.w	r2, #8
 8148858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 814885a:	687b      	ldr	r3, [r7, #4]
 814885c:	2204      	movs	r2, #4
 814885e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8148860:	687b      	ldr	r3, [r7, #4]
 8148862:	681b      	ldr	r3, [r3, #0]
 8148864:	69db      	ldr	r3, [r3, #28]
 8148866:	f003 0303 	and.w	r3, r3, #3
 814886a:	2b00      	cmp	r3, #0
 814886c:	d003      	beq.n	8148876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 814886e:	6878      	ldr	r0, [r7, #4]
 8148870:	f000 f89d 	bl	81489ae <HAL_TIM_IC_CaptureCallback>
 8148874:	e005      	b.n	8148882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8148876:	6878      	ldr	r0, [r7, #4]
 8148878:	f000 f88f 	bl	814899a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 814887c:	6878      	ldr	r0, [r7, #4]
 814887e:	f000 f8a0 	bl	81489c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8148882:	687b      	ldr	r3, [r7, #4]
 8148884:	2200      	movs	r2, #0
 8148886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8148888:	68bb      	ldr	r3, [r7, #8]
 814888a:	f003 0310 	and.w	r3, r3, #16
 814888e:	2b00      	cmp	r3, #0
 8148890:	d020      	beq.n	81488d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8148892:	68fb      	ldr	r3, [r7, #12]
 8148894:	f003 0310 	and.w	r3, r3, #16
 8148898:	2b00      	cmp	r3, #0
 814889a:	d01b      	beq.n	81488d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 814889c:	687b      	ldr	r3, [r7, #4]
 814889e:	681b      	ldr	r3, [r3, #0]
 81488a0:	f06f 0210 	mvn.w	r2, #16
 81488a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81488a6:	687b      	ldr	r3, [r7, #4]
 81488a8:	2208      	movs	r2, #8
 81488aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81488ac:	687b      	ldr	r3, [r7, #4]
 81488ae:	681b      	ldr	r3, [r3, #0]
 81488b0:	69db      	ldr	r3, [r3, #28]
 81488b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81488b6:	2b00      	cmp	r3, #0
 81488b8:	d003      	beq.n	81488c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81488ba:	6878      	ldr	r0, [r7, #4]
 81488bc:	f000 f877 	bl	81489ae <HAL_TIM_IC_CaptureCallback>
 81488c0:	e005      	b.n	81488ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81488c2:	6878      	ldr	r0, [r7, #4]
 81488c4:	f000 f869 	bl	814899a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81488c8:	6878      	ldr	r0, [r7, #4]
 81488ca:	f000 f87a 	bl	81489c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81488ce:	687b      	ldr	r3, [r7, #4]
 81488d0:	2200      	movs	r2, #0
 81488d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81488d4:	68bb      	ldr	r3, [r7, #8]
 81488d6:	f003 0301 	and.w	r3, r3, #1
 81488da:	2b00      	cmp	r3, #0
 81488dc:	d00c      	beq.n	81488f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81488de:	68fb      	ldr	r3, [r7, #12]
 81488e0:	f003 0301 	and.w	r3, r3, #1
 81488e4:	2b00      	cmp	r3, #0
 81488e6:	d007      	beq.n	81488f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81488e8:	687b      	ldr	r3, [r7, #4]
 81488ea:	681b      	ldr	r3, [r3, #0]
 81488ec:	f06f 0201 	mvn.w	r2, #1
 81488f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81488f2:	6878      	ldr	r0, [r7, #4]
 81488f4:	f7f9 fc50 	bl	8142198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81488f8:	68bb      	ldr	r3, [r7, #8]
 81488fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81488fe:	2b00      	cmp	r3, #0
 8148900:	d104      	bne.n	814890c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8148902:	68bb      	ldr	r3, [r7, #8]
 8148904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8148908:	2b00      	cmp	r3, #0
 814890a:	d00c      	beq.n	8148926 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 814890c:	68fb      	ldr	r3, [r7, #12]
 814890e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8148912:	2b00      	cmp	r3, #0
 8148914:	d007      	beq.n	8148926 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8148916:	687b      	ldr	r3, [r7, #4]
 8148918:	681b      	ldr	r3, [r3, #0]
 814891a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 814891e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8148920:	6878      	ldr	r0, [r7, #4]
 8148922:	f000 f90d 	bl	8148b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8148926:	68bb      	ldr	r3, [r7, #8]
 8148928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814892c:	2b00      	cmp	r3, #0
 814892e:	d00c      	beq.n	814894a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8148930:	68fb      	ldr	r3, [r7, #12]
 8148932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8148936:	2b00      	cmp	r3, #0
 8148938:	d007      	beq.n	814894a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 814893a:	687b      	ldr	r3, [r7, #4]
 814893c:	681b      	ldr	r3, [r3, #0]
 814893e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8148942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8148944:	6878      	ldr	r0, [r7, #4]
 8148946:	f000 f905 	bl	8148b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 814894a:	68bb      	ldr	r3, [r7, #8]
 814894c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8148950:	2b00      	cmp	r3, #0
 8148952:	d00c      	beq.n	814896e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8148954:	68fb      	ldr	r3, [r7, #12]
 8148956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 814895a:	2b00      	cmp	r3, #0
 814895c:	d007      	beq.n	814896e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 814895e:	687b      	ldr	r3, [r7, #4]
 8148960:	681b      	ldr	r3, [r3, #0]
 8148962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8148966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8148968:	6878      	ldr	r0, [r7, #4]
 814896a:	f000 f834 	bl	81489d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 814896e:	68bb      	ldr	r3, [r7, #8]
 8148970:	f003 0320 	and.w	r3, r3, #32
 8148974:	2b00      	cmp	r3, #0
 8148976:	d00c      	beq.n	8148992 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8148978:	68fb      	ldr	r3, [r7, #12]
 814897a:	f003 0320 	and.w	r3, r3, #32
 814897e:	2b00      	cmp	r3, #0
 8148980:	d007      	beq.n	8148992 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8148982:	687b      	ldr	r3, [r7, #4]
 8148984:	681b      	ldr	r3, [r3, #0]
 8148986:	f06f 0220 	mvn.w	r2, #32
 814898a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 814898c:	6878      	ldr	r0, [r7, #4]
 814898e:	f000 f8cd 	bl	8148b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8148992:	bf00      	nop
 8148994:	3710      	adds	r7, #16
 8148996:	46bd      	mov	sp, r7
 8148998:	bd80      	pop	{r7, pc}

0814899a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 814899a:	b480      	push	{r7}
 814899c:	b083      	sub	sp, #12
 814899e:	af00      	add	r7, sp, #0
 81489a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81489a2:	bf00      	nop
 81489a4:	370c      	adds	r7, #12
 81489a6:	46bd      	mov	sp, r7
 81489a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81489ac:	4770      	bx	lr

081489ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81489ae:	b480      	push	{r7}
 81489b0:	b083      	sub	sp, #12
 81489b2:	af00      	add	r7, sp, #0
 81489b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81489b6:	bf00      	nop
 81489b8:	370c      	adds	r7, #12
 81489ba:	46bd      	mov	sp, r7
 81489bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81489c0:	4770      	bx	lr

081489c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81489c2:	b480      	push	{r7}
 81489c4:	b083      	sub	sp, #12
 81489c6:	af00      	add	r7, sp, #0
 81489c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81489ca:	bf00      	nop
 81489cc:	370c      	adds	r7, #12
 81489ce:	46bd      	mov	sp, r7
 81489d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81489d4:	4770      	bx	lr

081489d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81489d6:	b480      	push	{r7}
 81489d8:	b083      	sub	sp, #12
 81489da:	af00      	add	r7, sp, #0
 81489dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81489de:	bf00      	nop
 81489e0:	370c      	adds	r7, #12
 81489e2:	46bd      	mov	sp, r7
 81489e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81489e8:	4770      	bx	lr
	...

081489ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81489ec:	b480      	push	{r7}
 81489ee:	b085      	sub	sp, #20
 81489f0:	af00      	add	r7, sp, #0
 81489f2:	6078      	str	r0, [r7, #4]
 81489f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81489f6:	687b      	ldr	r3, [r7, #4]
 81489f8:	681b      	ldr	r3, [r3, #0]
 81489fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81489fc:	687b      	ldr	r3, [r7, #4]
 81489fe:	4a43      	ldr	r2, [pc, #268]	@ (8148b0c <TIM_Base_SetConfig+0x120>)
 8148a00:	4293      	cmp	r3, r2
 8148a02:	d013      	beq.n	8148a2c <TIM_Base_SetConfig+0x40>
 8148a04:	687b      	ldr	r3, [r7, #4]
 8148a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8148a0a:	d00f      	beq.n	8148a2c <TIM_Base_SetConfig+0x40>
 8148a0c:	687b      	ldr	r3, [r7, #4]
 8148a0e:	4a40      	ldr	r2, [pc, #256]	@ (8148b10 <TIM_Base_SetConfig+0x124>)
 8148a10:	4293      	cmp	r3, r2
 8148a12:	d00b      	beq.n	8148a2c <TIM_Base_SetConfig+0x40>
 8148a14:	687b      	ldr	r3, [r7, #4]
 8148a16:	4a3f      	ldr	r2, [pc, #252]	@ (8148b14 <TIM_Base_SetConfig+0x128>)
 8148a18:	4293      	cmp	r3, r2
 8148a1a:	d007      	beq.n	8148a2c <TIM_Base_SetConfig+0x40>
 8148a1c:	687b      	ldr	r3, [r7, #4]
 8148a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8148b18 <TIM_Base_SetConfig+0x12c>)
 8148a20:	4293      	cmp	r3, r2
 8148a22:	d003      	beq.n	8148a2c <TIM_Base_SetConfig+0x40>
 8148a24:	687b      	ldr	r3, [r7, #4]
 8148a26:	4a3d      	ldr	r2, [pc, #244]	@ (8148b1c <TIM_Base_SetConfig+0x130>)
 8148a28:	4293      	cmp	r3, r2
 8148a2a:	d108      	bne.n	8148a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8148a2c:	68fb      	ldr	r3, [r7, #12]
 8148a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8148a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8148a34:	683b      	ldr	r3, [r7, #0]
 8148a36:	685b      	ldr	r3, [r3, #4]
 8148a38:	68fa      	ldr	r2, [r7, #12]
 8148a3a:	4313      	orrs	r3, r2
 8148a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8148a3e:	687b      	ldr	r3, [r7, #4]
 8148a40:	4a32      	ldr	r2, [pc, #200]	@ (8148b0c <TIM_Base_SetConfig+0x120>)
 8148a42:	4293      	cmp	r3, r2
 8148a44:	d01f      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a46:	687b      	ldr	r3, [r7, #4]
 8148a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8148a4c:	d01b      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a4e:	687b      	ldr	r3, [r7, #4]
 8148a50:	4a2f      	ldr	r2, [pc, #188]	@ (8148b10 <TIM_Base_SetConfig+0x124>)
 8148a52:	4293      	cmp	r3, r2
 8148a54:	d017      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a56:	687b      	ldr	r3, [r7, #4]
 8148a58:	4a2e      	ldr	r2, [pc, #184]	@ (8148b14 <TIM_Base_SetConfig+0x128>)
 8148a5a:	4293      	cmp	r3, r2
 8148a5c:	d013      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a5e:	687b      	ldr	r3, [r7, #4]
 8148a60:	4a2d      	ldr	r2, [pc, #180]	@ (8148b18 <TIM_Base_SetConfig+0x12c>)
 8148a62:	4293      	cmp	r3, r2
 8148a64:	d00f      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a66:	687b      	ldr	r3, [r7, #4]
 8148a68:	4a2c      	ldr	r2, [pc, #176]	@ (8148b1c <TIM_Base_SetConfig+0x130>)
 8148a6a:	4293      	cmp	r3, r2
 8148a6c:	d00b      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a6e:	687b      	ldr	r3, [r7, #4]
 8148a70:	4a2b      	ldr	r2, [pc, #172]	@ (8148b20 <TIM_Base_SetConfig+0x134>)
 8148a72:	4293      	cmp	r3, r2
 8148a74:	d007      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a76:	687b      	ldr	r3, [r7, #4]
 8148a78:	4a2a      	ldr	r2, [pc, #168]	@ (8148b24 <TIM_Base_SetConfig+0x138>)
 8148a7a:	4293      	cmp	r3, r2
 8148a7c:	d003      	beq.n	8148a86 <TIM_Base_SetConfig+0x9a>
 8148a7e:	687b      	ldr	r3, [r7, #4]
 8148a80:	4a29      	ldr	r2, [pc, #164]	@ (8148b28 <TIM_Base_SetConfig+0x13c>)
 8148a82:	4293      	cmp	r3, r2
 8148a84:	d108      	bne.n	8148a98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8148a86:	68fb      	ldr	r3, [r7, #12]
 8148a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8148a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8148a8e:	683b      	ldr	r3, [r7, #0]
 8148a90:	68db      	ldr	r3, [r3, #12]
 8148a92:	68fa      	ldr	r2, [r7, #12]
 8148a94:	4313      	orrs	r3, r2
 8148a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8148a98:	68fb      	ldr	r3, [r7, #12]
 8148a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8148a9e:	683b      	ldr	r3, [r7, #0]
 8148aa0:	695b      	ldr	r3, [r3, #20]
 8148aa2:	4313      	orrs	r3, r2
 8148aa4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8148aa6:	683b      	ldr	r3, [r7, #0]
 8148aa8:	689a      	ldr	r2, [r3, #8]
 8148aaa:	687b      	ldr	r3, [r7, #4]
 8148aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8148aae:	683b      	ldr	r3, [r7, #0]
 8148ab0:	681a      	ldr	r2, [r3, #0]
 8148ab2:	687b      	ldr	r3, [r7, #4]
 8148ab4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8148ab6:	687b      	ldr	r3, [r7, #4]
 8148ab8:	4a14      	ldr	r2, [pc, #80]	@ (8148b0c <TIM_Base_SetConfig+0x120>)
 8148aba:	4293      	cmp	r3, r2
 8148abc:	d00f      	beq.n	8148ade <TIM_Base_SetConfig+0xf2>
 8148abe:	687b      	ldr	r3, [r7, #4]
 8148ac0:	4a16      	ldr	r2, [pc, #88]	@ (8148b1c <TIM_Base_SetConfig+0x130>)
 8148ac2:	4293      	cmp	r3, r2
 8148ac4:	d00b      	beq.n	8148ade <TIM_Base_SetConfig+0xf2>
 8148ac6:	687b      	ldr	r3, [r7, #4]
 8148ac8:	4a15      	ldr	r2, [pc, #84]	@ (8148b20 <TIM_Base_SetConfig+0x134>)
 8148aca:	4293      	cmp	r3, r2
 8148acc:	d007      	beq.n	8148ade <TIM_Base_SetConfig+0xf2>
 8148ace:	687b      	ldr	r3, [r7, #4]
 8148ad0:	4a14      	ldr	r2, [pc, #80]	@ (8148b24 <TIM_Base_SetConfig+0x138>)
 8148ad2:	4293      	cmp	r3, r2
 8148ad4:	d003      	beq.n	8148ade <TIM_Base_SetConfig+0xf2>
 8148ad6:	687b      	ldr	r3, [r7, #4]
 8148ad8:	4a13      	ldr	r2, [pc, #76]	@ (8148b28 <TIM_Base_SetConfig+0x13c>)
 8148ada:	4293      	cmp	r3, r2
 8148adc:	d103      	bne.n	8148ae6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8148ade:	683b      	ldr	r3, [r7, #0]
 8148ae0:	691a      	ldr	r2, [r3, #16]
 8148ae2:	687b      	ldr	r3, [r7, #4]
 8148ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8148ae6:	687b      	ldr	r3, [r7, #4]
 8148ae8:	681b      	ldr	r3, [r3, #0]
 8148aea:	f043 0204 	orr.w	r2, r3, #4
 8148aee:	687b      	ldr	r3, [r7, #4]
 8148af0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8148af2:	687b      	ldr	r3, [r7, #4]
 8148af4:	2201      	movs	r2, #1
 8148af6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8148af8:	687b      	ldr	r3, [r7, #4]
 8148afa:	68fa      	ldr	r2, [r7, #12]
 8148afc:	601a      	str	r2, [r3, #0]
}
 8148afe:	bf00      	nop
 8148b00:	3714      	adds	r7, #20
 8148b02:	46bd      	mov	sp, r7
 8148b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148b08:	4770      	bx	lr
 8148b0a:	bf00      	nop
 8148b0c:	40010000 	.word	0x40010000
 8148b10:	40000400 	.word	0x40000400
 8148b14:	40000800 	.word	0x40000800
 8148b18:	40000c00 	.word	0x40000c00
 8148b1c:	40010400 	.word	0x40010400
 8148b20:	40014000 	.word	0x40014000
 8148b24:	40014400 	.word	0x40014400
 8148b28:	40014800 	.word	0x40014800

08148b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8148b2c:	b480      	push	{r7}
 8148b2e:	b083      	sub	sp, #12
 8148b30:	af00      	add	r7, sp, #0
 8148b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8148b34:	bf00      	nop
 8148b36:	370c      	adds	r7, #12
 8148b38:	46bd      	mov	sp, r7
 8148b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148b3e:	4770      	bx	lr

08148b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8148b40:	b480      	push	{r7}
 8148b42:	b083      	sub	sp, #12
 8148b44:	af00      	add	r7, sp, #0
 8148b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8148b48:	bf00      	nop
 8148b4a:	370c      	adds	r7, #12
 8148b4c:	46bd      	mov	sp, r7
 8148b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148b52:	4770      	bx	lr

08148b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8148b54:	b480      	push	{r7}
 8148b56:	b083      	sub	sp, #12
 8148b58:	af00      	add	r7, sp, #0
 8148b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8148b5c:	bf00      	nop
 8148b5e:	370c      	adds	r7, #12
 8148b60:	46bd      	mov	sp, r7
 8148b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148b66:	4770      	bx	lr

08148b68 <LL_GPIO_SetPinMode>:
{
 8148b68:	b480      	push	{r7}
 8148b6a:	b085      	sub	sp, #20
 8148b6c:	af00      	add	r7, sp, #0
 8148b6e:	60f8      	str	r0, [r7, #12]
 8148b70:	60b9      	str	r1, [r7, #8]
 8148b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8148b74:	68fb      	ldr	r3, [r7, #12]
 8148b76:	6819      	ldr	r1, [r3, #0]
 8148b78:	68bb      	ldr	r3, [r7, #8]
 8148b7a:	fb03 f203 	mul.w	r2, r3, r3
 8148b7e:	4613      	mov	r3, r2
 8148b80:	005b      	lsls	r3, r3, #1
 8148b82:	4413      	add	r3, r2
 8148b84:	43db      	mvns	r3, r3
 8148b86:	ea01 0203 	and.w	r2, r1, r3
 8148b8a:	68bb      	ldr	r3, [r7, #8]
 8148b8c:	fb03 f303 	mul.w	r3, r3, r3
 8148b90:	6879      	ldr	r1, [r7, #4]
 8148b92:	fb01 f303 	mul.w	r3, r1, r3
 8148b96:	431a      	orrs	r2, r3
 8148b98:	68fb      	ldr	r3, [r7, #12]
 8148b9a:	601a      	str	r2, [r3, #0]
}
 8148b9c:	bf00      	nop
 8148b9e:	3714      	adds	r7, #20
 8148ba0:	46bd      	mov	sp, r7
 8148ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148ba6:	4770      	bx	lr

08148ba8 <LL_GPIO_SetPinOutputType>:
{
 8148ba8:	b480      	push	{r7}
 8148baa:	b085      	sub	sp, #20
 8148bac:	af00      	add	r7, sp, #0
 8148bae:	60f8      	str	r0, [r7, #12]
 8148bb0:	60b9      	str	r1, [r7, #8]
 8148bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8148bb4:	68fb      	ldr	r3, [r7, #12]
 8148bb6:	685a      	ldr	r2, [r3, #4]
 8148bb8:	68bb      	ldr	r3, [r7, #8]
 8148bba:	43db      	mvns	r3, r3
 8148bbc:	401a      	ands	r2, r3
 8148bbe:	68bb      	ldr	r3, [r7, #8]
 8148bc0:	6879      	ldr	r1, [r7, #4]
 8148bc2:	fb01 f303 	mul.w	r3, r1, r3
 8148bc6:	431a      	orrs	r2, r3
 8148bc8:	68fb      	ldr	r3, [r7, #12]
 8148bca:	605a      	str	r2, [r3, #4]
}
 8148bcc:	bf00      	nop
 8148bce:	3714      	adds	r7, #20
 8148bd0:	46bd      	mov	sp, r7
 8148bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148bd6:	4770      	bx	lr

08148bd8 <LL_GPIO_SetPinSpeed>:
{
 8148bd8:	b480      	push	{r7}
 8148bda:	b085      	sub	sp, #20
 8148bdc:	af00      	add	r7, sp, #0
 8148bde:	60f8      	str	r0, [r7, #12]
 8148be0:	60b9      	str	r1, [r7, #8]
 8148be2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8148be4:	68fb      	ldr	r3, [r7, #12]
 8148be6:	6899      	ldr	r1, [r3, #8]
 8148be8:	68bb      	ldr	r3, [r7, #8]
 8148bea:	fb03 f203 	mul.w	r2, r3, r3
 8148bee:	4613      	mov	r3, r2
 8148bf0:	005b      	lsls	r3, r3, #1
 8148bf2:	4413      	add	r3, r2
 8148bf4:	43db      	mvns	r3, r3
 8148bf6:	ea01 0203 	and.w	r2, r1, r3
 8148bfa:	68bb      	ldr	r3, [r7, #8]
 8148bfc:	fb03 f303 	mul.w	r3, r3, r3
 8148c00:	6879      	ldr	r1, [r7, #4]
 8148c02:	fb01 f303 	mul.w	r3, r1, r3
 8148c06:	431a      	orrs	r2, r3
 8148c08:	68fb      	ldr	r3, [r7, #12]
 8148c0a:	609a      	str	r2, [r3, #8]
}
 8148c0c:	bf00      	nop
 8148c0e:	3714      	adds	r7, #20
 8148c10:	46bd      	mov	sp, r7
 8148c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148c16:	4770      	bx	lr

08148c18 <LL_GPIO_SetPinPull>:
{
 8148c18:	b480      	push	{r7}
 8148c1a:	b085      	sub	sp, #20
 8148c1c:	af00      	add	r7, sp, #0
 8148c1e:	60f8      	str	r0, [r7, #12]
 8148c20:	60b9      	str	r1, [r7, #8]
 8148c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8148c24:	68fb      	ldr	r3, [r7, #12]
 8148c26:	68d9      	ldr	r1, [r3, #12]
 8148c28:	68bb      	ldr	r3, [r7, #8]
 8148c2a:	fb03 f203 	mul.w	r2, r3, r3
 8148c2e:	4613      	mov	r3, r2
 8148c30:	005b      	lsls	r3, r3, #1
 8148c32:	4413      	add	r3, r2
 8148c34:	43db      	mvns	r3, r3
 8148c36:	ea01 0203 	and.w	r2, r1, r3
 8148c3a:	68bb      	ldr	r3, [r7, #8]
 8148c3c:	fb03 f303 	mul.w	r3, r3, r3
 8148c40:	6879      	ldr	r1, [r7, #4]
 8148c42:	fb01 f303 	mul.w	r3, r1, r3
 8148c46:	431a      	orrs	r2, r3
 8148c48:	68fb      	ldr	r3, [r7, #12]
 8148c4a:	60da      	str	r2, [r3, #12]
}
 8148c4c:	bf00      	nop
 8148c4e:	3714      	adds	r7, #20
 8148c50:	46bd      	mov	sp, r7
 8148c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148c56:	4770      	bx	lr

08148c58 <LL_GPIO_SetAFPin_0_7>:
{
 8148c58:	b480      	push	{r7}
 8148c5a:	b085      	sub	sp, #20
 8148c5c:	af00      	add	r7, sp, #0
 8148c5e:	60f8      	str	r0, [r7, #12]
 8148c60:	60b9      	str	r1, [r7, #8]
 8148c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8148c64:	68fb      	ldr	r3, [r7, #12]
 8148c66:	6a19      	ldr	r1, [r3, #32]
 8148c68:	68bb      	ldr	r3, [r7, #8]
 8148c6a:	fb03 f303 	mul.w	r3, r3, r3
 8148c6e:	68ba      	ldr	r2, [r7, #8]
 8148c70:	fb02 f303 	mul.w	r3, r2, r3
 8148c74:	68ba      	ldr	r2, [r7, #8]
 8148c76:	fb03 f202 	mul.w	r2, r3, r2
 8148c7a:	4613      	mov	r3, r2
 8148c7c:	011b      	lsls	r3, r3, #4
 8148c7e:	1a9b      	subs	r3, r3, r2
 8148c80:	43db      	mvns	r3, r3
 8148c82:	ea01 0203 	and.w	r2, r1, r3
 8148c86:	68bb      	ldr	r3, [r7, #8]
 8148c88:	fb03 f303 	mul.w	r3, r3, r3
 8148c8c:	68b9      	ldr	r1, [r7, #8]
 8148c8e:	fb01 f303 	mul.w	r3, r1, r3
 8148c92:	68b9      	ldr	r1, [r7, #8]
 8148c94:	fb01 f303 	mul.w	r3, r1, r3
 8148c98:	6879      	ldr	r1, [r7, #4]
 8148c9a:	fb01 f303 	mul.w	r3, r1, r3
 8148c9e:	431a      	orrs	r2, r3
 8148ca0:	68fb      	ldr	r3, [r7, #12]
 8148ca2:	621a      	str	r2, [r3, #32]
}
 8148ca4:	bf00      	nop
 8148ca6:	3714      	adds	r7, #20
 8148ca8:	46bd      	mov	sp, r7
 8148caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148cae:	4770      	bx	lr

08148cb0 <LL_GPIO_SetAFPin_8_15>:
{
 8148cb0:	b480      	push	{r7}
 8148cb2:	b085      	sub	sp, #20
 8148cb4:	af00      	add	r7, sp, #0
 8148cb6:	60f8      	str	r0, [r7, #12]
 8148cb8:	60b9      	str	r1, [r7, #8]
 8148cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8148cbc:	68fb      	ldr	r3, [r7, #12]
 8148cbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8148cc0:	68bb      	ldr	r3, [r7, #8]
 8148cc2:	0a1b      	lsrs	r3, r3, #8
 8148cc4:	68ba      	ldr	r2, [r7, #8]
 8148cc6:	0a12      	lsrs	r2, r2, #8
 8148cc8:	fb02 f303 	mul.w	r3, r2, r3
 8148ccc:	68ba      	ldr	r2, [r7, #8]
 8148cce:	0a12      	lsrs	r2, r2, #8
 8148cd0:	fb02 f303 	mul.w	r3, r2, r3
 8148cd4:	68ba      	ldr	r2, [r7, #8]
 8148cd6:	0a12      	lsrs	r2, r2, #8
 8148cd8:	fb03 f202 	mul.w	r2, r3, r2
 8148cdc:	4613      	mov	r3, r2
 8148cde:	011b      	lsls	r3, r3, #4
 8148ce0:	1a9b      	subs	r3, r3, r2
 8148ce2:	43db      	mvns	r3, r3
 8148ce4:	ea01 0203 	and.w	r2, r1, r3
 8148ce8:	68bb      	ldr	r3, [r7, #8]
 8148cea:	0a1b      	lsrs	r3, r3, #8
 8148cec:	68b9      	ldr	r1, [r7, #8]
 8148cee:	0a09      	lsrs	r1, r1, #8
 8148cf0:	fb01 f303 	mul.w	r3, r1, r3
 8148cf4:	68b9      	ldr	r1, [r7, #8]
 8148cf6:	0a09      	lsrs	r1, r1, #8
 8148cf8:	fb01 f303 	mul.w	r3, r1, r3
 8148cfc:	68b9      	ldr	r1, [r7, #8]
 8148cfe:	0a09      	lsrs	r1, r1, #8
 8148d00:	fb01 f303 	mul.w	r3, r1, r3
 8148d04:	6879      	ldr	r1, [r7, #4]
 8148d06:	fb01 f303 	mul.w	r3, r1, r3
 8148d0a:	431a      	orrs	r2, r3
 8148d0c:	68fb      	ldr	r3, [r7, #12]
 8148d0e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8148d10:	bf00      	nop
 8148d12:	3714      	adds	r7, #20
 8148d14:	46bd      	mov	sp, r7
 8148d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148d1a:	4770      	bx	lr

08148d1c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8148d1c:	b580      	push	{r7, lr}
 8148d1e:	b088      	sub	sp, #32
 8148d20:	af00      	add	r7, sp, #0
 8148d22:	6078      	str	r0, [r7, #4]
 8148d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8148d26:	683b      	ldr	r3, [r7, #0]
 8148d28:	681b      	ldr	r3, [r3, #0]
 8148d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8148d2c:	693b      	ldr	r3, [r7, #16]
 8148d2e:	fa93 f3a3 	rbit	r3, r3
 8148d32:	60fb      	str	r3, [r7, #12]
  return result;
 8148d34:	68fb      	ldr	r3, [r7, #12]
 8148d36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8148d38:	697b      	ldr	r3, [r7, #20]
 8148d3a:	2b00      	cmp	r3, #0
 8148d3c:	d101      	bne.n	8148d42 <LL_GPIO_Init+0x26>
    return 32U;
 8148d3e:	2320      	movs	r3, #32
 8148d40:	e003      	b.n	8148d4a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8148d42:	697b      	ldr	r3, [r7, #20]
 8148d44:	fab3 f383 	clz	r3, r3
 8148d48:	b2db      	uxtb	r3, r3
 8148d4a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8148d4c:	e048      	b.n	8148de0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8148d4e:	683b      	ldr	r3, [r7, #0]
 8148d50:	681a      	ldr	r2, [r3, #0]
 8148d52:	2101      	movs	r1, #1
 8148d54:	69fb      	ldr	r3, [r7, #28]
 8148d56:	fa01 f303 	lsl.w	r3, r1, r3
 8148d5a:	4013      	ands	r3, r2
 8148d5c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8148d5e:	69bb      	ldr	r3, [r7, #24]
 8148d60:	2b00      	cmp	r3, #0
 8148d62:	d03a      	beq.n	8148dda <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8148d64:	683b      	ldr	r3, [r7, #0]
 8148d66:	685b      	ldr	r3, [r3, #4]
 8148d68:	2b01      	cmp	r3, #1
 8148d6a:	d003      	beq.n	8148d74 <LL_GPIO_Init+0x58>
 8148d6c:	683b      	ldr	r3, [r7, #0]
 8148d6e:	685b      	ldr	r3, [r3, #4]
 8148d70:	2b02      	cmp	r3, #2
 8148d72:	d10e      	bne.n	8148d92 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8148d74:	683b      	ldr	r3, [r7, #0]
 8148d76:	689b      	ldr	r3, [r3, #8]
 8148d78:	461a      	mov	r2, r3
 8148d7a:	69b9      	ldr	r1, [r7, #24]
 8148d7c:	6878      	ldr	r0, [r7, #4]
 8148d7e:	f7ff ff2b 	bl	8148bd8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8148d82:	683b      	ldr	r3, [r7, #0]
 8148d84:	6819      	ldr	r1, [r3, #0]
 8148d86:	683b      	ldr	r3, [r7, #0]
 8148d88:	68db      	ldr	r3, [r3, #12]
 8148d8a:	461a      	mov	r2, r3
 8148d8c:	6878      	ldr	r0, [r7, #4]
 8148d8e:	f7ff ff0b 	bl	8148ba8 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8148d92:	683b      	ldr	r3, [r7, #0]
 8148d94:	691b      	ldr	r3, [r3, #16]
 8148d96:	461a      	mov	r2, r3
 8148d98:	69b9      	ldr	r1, [r7, #24]
 8148d9a:	6878      	ldr	r0, [r7, #4]
 8148d9c:	f7ff ff3c 	bl	8148c18 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8148da0:	683b      	ldr	r3, [r7, #0]
 8148da2:	685b      	ldr	r3, [r3, #4]
 8148da4:	2b02      	cmp	r3, #2
 8148da6:	d111      	bne.n	8148dcc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8148da8:	69bb      	ldr	r3, [r7, #24]
 8148daa:	2bff      	cmp	r3, #255	@ 0xff
 8148dac:	d807      	bhi.n	8148dbe <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8148dae:	683b      	ldr	r3, [r7, #0]
 8148db0:	695b      	ldr	r3, [r3, #20]
 8148db2:	461a      	mov	r2, r3
 8148db4:	69b9      	ldr	r1, [r7, #24]
 8148db6:	6878      	ldr	r0, [r7, #4]
 8148db8:	f7ff ff4e 	bl	8148c58 <LL_GPIO_SetAFPin_0_7>
 8148dbc:	e006      	b.n	8148dcc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8148dbe:	683b      	ldr	r3, [r7, #0]
 8148dc0:	695b      	ldr	r3, [r3, #20]
 8148dc2:	461a      	mov	r2, r3
 8148dc4:	69b9      	ldr	r1, [r7, #24]
 8148dc6:	6878      	ldr	r0, [r7, #4]
 8148dc8:	f7ff ff72 	bl	8148cb0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8148dcc:	683b      	ldr	r3, [r7, #0]
 8148dce:	685b      	ldr	r3, [r3, #4]
 8148dd0:	461a      	mov	r2, r3
 8148dd2:	69b9      	ldr	r1, [r7, #24]
 8148dd4:	6878      	ldr	r0, [r7, #4]
 8148dd6:	f7ff fec7 	bl	8148b68 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8148dda:	69fb      	ldr	r3, [r7, #28]
 8148ddc:	3301      	adds	r3, #1
 8148dde:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8148de0:	683b      	ldr	r3, [r7, #0]
 8148de2:	681a      	ldr	r2, [r3, #0]
 8148de4:	69fb      	ldr	r3, [r7, #28]
 8148de6:	fa22 f303 	lsr.w	r3, r2, r3
 8148dea:	2b00      	cmp	r3, #0
 8148dec:	d1af      	bne.n	8148d4e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8148dee:	2300      	movs	r3, #0
}
 8148df0:	4618      	mov	r0, r3
 8148df2:	3720      	adds	r7, #32
 8148df4:	46bd      	mov	sp, r7
 8148df6:	bd80      	pop	{r7, pc}

08148df8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8148df8:	b480      	push	{r7}
 8148dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8148dfc:	4b07      	ldr	r3, [pc, #28]	@ (8148e1c <LL_RCC_HSE_IsReady+0x24>)
 8148dfe:	681b      	ldr	r3, [r3, #0]
 8148e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8148e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8148e08:	d101      	bne.n	8148e0e <LL_RCC_HSE_IsReady+0x16>
 8148e0a:	2301      	movs	r3, #1
 8148e0c:	e000      	b.n	8148e10 <LL_RCC_HSE_IsReady+0x18>
 8148e0e:	2300      	movs	r3, #0
}
 8148e10:	4618      	mov	r0, r3
 8148e12:	46bd      	mov	sp, r7
 8148e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148e18:	4770      	bx	lr
 8148e1a:	bf00      	nop
 8148e1c:	58024400 	.word	0x58024400

08148e20 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8148e20:	b480      	push	{r7}
 8148e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8148e24:	4b06      	ldr	r3, [pc, #24]	@ (8148e40 <LL_RCC_HSI_IsReady+0x20>)
 8148e26:	681b      	ldr	r3, [r3, #0]
 8148e28:	f003 0304 	and.w	r3, r3, #4
 8148e2c:	2b04      	cmp	r3, #4
 8148e2e:	d101      	bne.n	8148e34 <LL_RCC_HSI_IsReady+0x14>
 8148e30:	2301      	movs	r3, #1
 8148e32:	e000      	b.n	8148e36 <LL_RCC_HSI_IsReady+0x16>
 8148e34:	2300      	movs	r3, #0
}
 8148e36:	4618      	mov	r0, r3
 8148e38:	46bd      	mov	sp, r7
 8148e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148e3e:	4770      	bx	lr
 8148e40:	58024400 	.word	0x58024400

08148e44 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8148e44:	b480      	push	{r7}
 8148e46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8148e48:	4b04      	ldr	r3, [pc, #16]	@ (8148e5c <LL_RCC_HSI_GetDivider+0x18>)
 8148e4a:	681b      	ldr	r3, [r3, #0]
 8148e4c:	f003 0318 	and.w	r3, r3, #24
}
 8148e50:	4618      	mov	r0, r3
 8148e52:	46bd      	mov	sp, r7
 8148e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148e58:	4770      	bx	lr
 8148e5a:	bf00      	nop
 8148e5c:	58024400 	.word	0x58024400

08148e60 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8148e60:	b480      	push	{r7}
 8148e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8148e64:	4b07      	ldr	r3, [pc, #28]	@ (8148e84 <LL_RCC_CSI_IsReady+0x24>)
 8148e66:	681b      	ldr	r3, [r3, #0]
 8148e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8148e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8148e70:	d101      	bne.n	8148e76 <LL_RCC_CSI_IsReady+0x16>
 8148e72:	2301      	movs	r3, #1
 8148e74:	e000      	b.n	8148e78 <LL_RCC_CSI_IsReady+0x18>
 8148e76:	2300      	movs	r3, #0
}
 8148e78:	4618      	mov	r0, r3
 8148e7a:	46bd      	mov	sp, r7
 8148e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148e80:	4770      	bx	lr
 8148e82:	bf00      	nop
 8148e84:	58024400 	.word	0x58024400

08148e88 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8148e88:	b480      	push	{r7}
 8148e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8148e8c:	4b06      	ldr	r3, [pc, #24]	@ (8148ea8 <LL_RCC_LSE_IsReady+0x20>)
 8148e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8148e90:	f003 0302 	and.w	r3, r3, #2
 8148e94:	2b02      	cmp	r3, #2
 8148e96:	d101      	bne.n	8148e9c <LL_RCC_LSE_IsReady+0x14>
 8148e98:	2301      	movs	r3, #1
 8148e9a:	e000      	b.n	8148e9e <LL_RCC_LSE_IsReady+0x16>
 8148e9c:	2300      	movs	r3, #0
}
 8148e9e:	4618      	mov	r0, r3
 8148ea0:	46bd      	mov	sp, r7
 8148ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148ea6:	4770      	bx	lr
 8148ea8:	58024400 	.word	0x58024400

08148eac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8148eac:	b480      	push	{r7}
 8148eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8148eb0:	4b04      	ldr	r3, [pc, #16]	@ (8148ec4 <LL_RCC_GetSysClkSource+0x18>)
 8148eb2:	691b      	ldr	r3, [r3, #16]
 8148eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8148eb8:	4618      	mov	r0, r3
 8148eba:	46bd      	mov	sp, r7
 8148ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148ec0:	4770      	bx	lr
 8148ec2:	bf00      	nop
 8148ec4:	58024400 	.word	0x58024400

08148ec8 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8148ec8:	b480      	push	{r7}
 8148eca:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8148ecc:	4b04      	ldr	r3, [pc, #16]	@ (8148ee0 <LL_RCC_GetSysPrescaler+0x18>)
 8148ece:	699b      	ldr	r3, [r3, #24]
 8148ed0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8148ed4:	4618      	mov	r0, r3
 8148ed6:	46bd      	mov	sp, r7
 8148ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148edc:	4770      	bx	lr
 8148ede:	bf00      	nop
 8148ee0:	58024400 	.word	0x58024400

08148ee4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8148ee4:	b480      	push	{r7}
 8148ee6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8148ee8:	4b04      	ldr	r3, [pc, #16]	@ (8148efc <LL_RCC_GetAHBPrescaler+0x18>)
 8148eea:	699b      	ldr	r3, [r3, #24]
 8148eec:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8148ef0:	4618      	mov	r0, r3
 8148ef2:	46bd      	mov	sp, r7
 8148ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148ef8:	4770      	bx	lr
 8148efa:	bf00      	nop
 8148efc:	58024400 	.word	0x58024400

08148f00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8148f00:	b480      	push	{r7}
 8148f02:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8148f04:	4b04      	ldr	r3, [pc, #16]	@ (8148f18 <LL_RCC_GetAPB1Prescaler+0x18>)
 8148f06:	69db      	ldr	r3, [r3, #28]
 8148f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8148f0c:	4618      	mov	r0, r3
 8148f0e:	46bd      	mov	sp, r7
 8148f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148f14:	4770      	bx	lr
 8148f16:	bf00      	nop
 8148f18:	58024400 	.word	0x58024400

08148f1c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8148f1c:	b480      	push	{r7}
 8148f1e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8148f20:	4b04      	ldr	r3, [pc, #16]	@ (8148f34 <LL_RCC_GetAPB2Prescaler+0x18>)
 8148f22:	69db      	ldr	r3, [r3, #28]
 8148f24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8148f28:	4618      	mov	r0, r3
 8148f2a:	46bd      	mov	sp, r7
 8148f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148f30:	4770      	bx	lr
 8148f32:	bf00      	nop
 8148f34:	58024400 	.word	0x58024400

08148f38 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8148f38:	b480      	push	{r7}
 8148f3a:	b085      	sub	sp, #20
 8148f3c:	af00      	add	r7, sp, #0
 8148f3e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8148f40:	687b      	ldr	r3, [r7, #4]
 8148f42:	b2da      	uxtb	r2, r3
 8148f44:	4b0e      	ldr	r3, [pc, #56]	@ (8148f80 <LL_RCC_GetClockSource+0x48>)
 8148f46:	4413      	add	r3, r2
 8148f48:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8148f4a:	68fb      	ldr	r3, [r7, #12]
 8148f4c:	681a      	ldr	r2, [r3, #0]
 8148f4e:	687b      	ldr	r3, [r7, #4]
 8148f50:	0e19      	lsrs	r1, r3, #24
 8148f52:	687b      	ldr	r3, [r7, #4]
 8148f54:	0a1b      	lsrs	r3, r3, #8
 8148f56:	f003 031f 	and.w	r3, r3, #31
 8148f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8148f5e:	401a      	ands	r2, r3
 8148f60:	687b      	ldr	r3, [r7, #4]
 8148f62:	0a1b      	lsrs	r3, r3, #8
 8148f64:	f003 031f 	and.w	r3, r3, #31
 8148f68:	fa22 f303 	lsr.w	r3, r2, r3
 8148f6c:	041a      	lsls	r2, r3, #16
 8148f6e:	687b      	ldr	r3, [r7, #4]
 8148f70:	4313      	orrs	r3, r2
}
 8148f72:	4618      	mov	r0, r3
 8148f74:	3714      	adds	r7, #20
 8148f76:	46bd      	mov	sp, r7
 8148f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148f7c:	4770      	bx	lr
 8148f7e:	bf00      	nop
 8148f80:	5802444c 	.word	0x5802444c

08148f84 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8148f84:	b580      	push	{r7, lr}
 8148f86:	b082      	sub	sp, #8
 8148f88:	af00      	add	r7, sp, #0
 8148f8a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8148f8c:	6878      	ldr	r0, [r7, #4]
 8148f8e:	f7ff ffd3 	bl	8148f38 <LL_RCC_GetClockSource>
 8148f92:	4603      	mov	r3, r0
}
 8148f94:	4618      	mov	r0, r3
 8148f96:	3708      	adds	r7, #8
 8148f98:	46bd      	mov	sp, r7
 8148f9a:	bd80      	pop	{r7, pc}

08148f9c <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8148f9c:	b480      	push	{r7}
 8148f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8148fa0:	4b04      	ldr	r3, [pc, #16]	@ (8148fb4 <LL_RCC_PLL_GetSource+0x18>)
 8148fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8148fa4:	f003 0303 	and.w	r3, r3, #3
}
 8148fa8:	4618      	mov	r0, r3
 8148faa:	46bd      	mov	sp, r7
 8148fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148fb0:	4770      	bx	lr
 8148fb2:	bf00      	nop
 8148fb4:	58024400 	.word	0x58024400

08148fb8 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8148fb8:	b480      	push	{r7}
 8148fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8148fbc:	4b07      	ldr	r3, [pc, #28]	@ (8148fdc <LL_RCC_PLL1P_IsEnabled+0x24>)
 8148fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8148fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8148fc8:	d101      	bne.n	8148fce <LL_RCC_PLL1P_IsEnabled+0x16>
 8148fca:	2301      	movs	r3, #1
 8148fcc:	e000      	b.n	8148fd0 <LL_RCC_PLL1P_IsEnabled+0x18>
 8148fce:	2300      	movs	r3, #0
}
 8148fd0:	4618      	mov	r0, r3
 8148fd2:	46bd      	mov	sp, r7
 8148fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8148fd8:	4770      	bx	lr
 8148fda:	bf00      	nop
 8148fdc:	58024400 	.word	0x58024400

08148fe0 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8148fe0:	b480      	push	{r7}
 8148fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8148fe4:	4b07      	ldr	r3, [pc, #28]	@ (8149004 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8148fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8148fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8148fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8148ff0:	d101      	bne.n	8148ff6 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8148ff2:	2301      	movs	r3, #1
 8148ff4:	e000      	b.n	8148ff8 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8148ff6:	2300      	movs	r3, #0
}
 8148ff8:	4618      	mov	r0, r3
 8148ffa:	46bd      	mov	sp, r7
 8148ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149000:	4770      	bx	lr
 8149002:	bf00      	nop
 8149004:	58024400 	.word	0x58024400

08149008 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8149008:	b480      	push	{r7}
 814900a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 814900c:	4b07      	ldr	r3, [pc, #28]	@ (814902c <LL_RCC_PLL1R_IsEnabled+0x24>)
 814900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8149014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8149018:	d101      	bne.n	814901e <LL_RCC_PLL1R_IsEnabled+0x16>
 814901a:	2301      	movs	r3, #1
 814901c:	e000      	b.n	8149020 <LL_RCC_PLL1R_IsEnabled+0x18>
 814901e:	2300      	movs	r3, #0
}
 8149020:	4618      	mov	r0, r3
 8149022:	46bd      	mov	sp, r7
 8149024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149028:	4770      	bx	lr
 814902a:	bf00      	nop
 814902c:	58024400 	.word	0x58024400

08149030 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8149030:	b480      	push	{r7}
 8149032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8149034:	4b06      	ldr	r3, [pc, #24]	@ (8149050 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8149036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149038:	f003 0301 	and.w	r3, r3, #1
 814903c:	2b01      	cmp	r3, #1
 814903e:	d101      	bne.n	8149044 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8149040:	2301      	movs	r3, #1
 8149042:	e000      	b.n	8149046 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8149044:	2300      	movs	r3, #0
}
 8149046:	4618      	mov	r0, r3
 8149048:	46bd      	mov	sp, r7
 814904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814904e:	4770      	bx	lr
 8149050:	58024400 	.word	0x58024400

08149054 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8149054:	b480      	push	{r7}
 8149056:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8149058:	4b04      	ldr	r3, [pc, #16]	@ (814906c <LL_RCC_PLL1_GetN+0x18>)
 814905a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 814905c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8149060:	3301      	adds	r3, #1
}
 8149062:	4618      	mov	r0, r3
 8149064:	46bd      	mov	sp, r7
 8149066:	f85d 7b04 	ldr.w	r7, [sp], #4
 814906a:	4770      	bx	lr
 814906c:	58024400 	.word	0x58024400

08149070 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8149070:	b480      	push	{r7}
 8149072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8149074:	4b04      	ldr	r3, [pc, #16]	@ (8149088 <LL_RCC_PLL1_GetM+0x18>)
 8149076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8149078:	091b      	lsrs	r3, r3, #4
 814907a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 814907e:	4618      	mov	r0, r3
 8149080:	46bd      	mov	sp, r7
 8149082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149086:	4770      	bx	lr
 8149088:	58024400 	.word	0x58024400

0814908c <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 814908c:	b480      	push	{r7}
 814908e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8149090:	4b05      	ldr	r3, [pc, #20]	@ (81490a8 <LL_RCC_PLL1_GetP+0x1c>)
 8149092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8149094:	0a5b      	lsrs	r3, r3, #9
 8149096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814909a:	3301      	adds	r3, #1
}
 814909c:	4618      	mov	r0, r3
 814909e:	46bd      	mov	sp, r7
 81490a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81490a4:	4770      	bx	lr
 81490a6:	bf00      	nop
 81490a8:	58024400 	.word	0x58024400

081490ac <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 81490ac:	b480      	push	{r7}
 81490ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 81490b0:	4b05      	ldr	r3, [pc, #20]	@ (81490c8 <LL_RCC_PLL1_GetQ+0x1c>)
 81490b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81490b4:	0c1b      	lsrs	r3, r3, #16
 81490b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81490ba:	3301      	adds	r3, #1
}
 81490bc:	4618      	mov	r0, r3
 81490be:	46bd      	mov	sp, r7
 81490c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81490c4:	4770      	bx	lr
 81490c6:	bf00      	nop
 81490c8:	58024400 	.word	0x58024400

081490cc <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 81490cc:	b480      	push	{r7}
 81490ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 81490d0:	4b05      	ldr	r3, [pc, #20]	@ (81490e8 <LL_RCC_PLL1_GetR+0x1c>)
 81490d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81490d4:	0e1b      	lsrs	r3, r3, #24
 81490d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81490da:	3301      	adds	r3, #1
}
 81490dc:	4618      	mov	r0, r3
 81490de:	46bd      	mov	sp, r7
 81490e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81490e4:	4770      	bx	lr
 81490e6:	bf00      	nop
 81490e8:	58024400 	.word	0x58024400

081490ec <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 81490ec:	b480      	push	{r7}
 81490ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 81490f0:	4b04      	ldr	r3, [pc, #16]	@ (8149104 <LL_RCC_PLL1_GetFRACN+0x18>)
 81490f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81490f4:	08db      	lsrs	r3, r3, #3
 81490f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 81490fa:	4618      	mov	r0, r3
 81490fc:	46bd      	mov	sp, r7
 81490fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149102:	4770      	bx	lr
 8149104:	58024400 	.word	0x58024400

08149108 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8149108:	b480      	push	{r7}
 814910a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 814910c:	4b07      	ldr	r3, [pc, #28]	@ (814912c <LL_RCC_PLL2_IsReady+0x24>)
 814910e:	681b      	ldr	r3, [r3, #0]
 8149110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8149114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8149118:	d101      	bne.n	814911e <LL_RCC_PLL2_IsReady+0x16>
 814911a:	2301      	movs	r3, #1
 814911c:	e000      	b.n	8149120 <LL_RCC_PLL2_IsReady+0x18>
 814911e:	2300      	movs	r3, #0
}
 8149120:	4618      	mov	r0, r3
 8149122:	46bd      	mov	sp, r7
 8149124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149128:	4770      	bx	lr
 814912a:	bf00      	nop
 814912c:	58024400 	.word	0x58024400

08149130 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8149130:	b480      	push	{r7}
 8149132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8149134:	4b07      	ldr	r3, [pc, #28]	@ (8149154 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8149136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 814913c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8149140:	d101      	bne.n	8149146 <LL_RCC_PLL2P_IsEnabled+0x16>
 8149142:	2301      	movs	r3, #1
 8149144:	e000      	b.n	8149148 <LL_RCC_PLL2P_IsEnabled+0x18>
 8149146:	2300      	movs	r3, #0
}
 8149148:	4618      	mov	r0, r3
 814914a:	46bd      	mov	sp, r7
 814914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149150:	4770      	bx	lr
 8149152:	bf00      	nop
 8149154:	58024400 	.word	0x58024400

08149158 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8149158:	b480      	push	{r7}
 814915a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 814915c:	4b07      	ldr	r3, [pc, #28]	@ (814917c <LL_RCC_PLL2Q_IsEnabled+0x24>)
 814915e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8149164:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8149168:	d101      	bne.n	814916e <LL_RCC_PLL2Q_IsEnabled+0x16>
 814916a:	2301      	movs	r3, #1
 814916c:	e000      	b.n	8149170 <LL_RCC_PLL2Q_IsEnabled+0x18>
 814916e:	2300      	movs	r3, #0
}
 8149170:	4618      	mov	r0, r3
 8149172:	46bd      	mov	sp, r7
 8149174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149178:	4770      	bx	lr
 814917a:	bf00      	nop
 814917c:	58024400 	.word	0x58024400

08149180 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8149180:	b480      	push	{r7}
 8149182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8149184:	4b07      	ldr	r3, [pc, #28]	@ (81491a4 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8149186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 814918c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8149190:	d101      	bne.n	8149196 <LL_RCC_PLL2R_IsEnabled+0x16>
 8149192:	2301      	movs	r3, #1
 8149194:	e000      	b.n	8149198 <LL_RCC_PLL2R_IsEnabled+0x18>
 8149196:	2300      	movs	r3, #0
}
 8149198:	4618      	mov	r0, r3
 814919a:	46bd      	mov	sp, r7
 814919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81491a0:	4770      	bx	lr
 81491a2:	bf00      	nop
 81491a4:	58024400 	.word	0x58024400

081491a8 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 81491a8:	b480      	push	{r7}
 81491aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 81491ac:	4b06      	ldr	r3, [pc, #24]	@ (81491c8 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 81491ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81491b0:	f003 0310 	and.w	r3, r3, #16
 81491b4:	2b10      	cmp	r3, #16
 81491b6:	d101      	bne.n	81491bc <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 81491b8:	2301      	movs	r3, #1
 81491ba:	e000      	b.n	81491be <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 81491bc:	2300      	movs	r3, #0
}
 81491be:	4618      	mov	r0, r3
 81491c0:	46bd      	mov	sp, r7
 81491c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81491c6:	4770      	bx	lr
 81491c8:	58024400 	.word	0x58024400

081491cc <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 81491cc:	b480      	push	{r7}
 81491ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 81491d0:	4b04      	ldr	r3, [pc, #16]	@ (81491e4 <LL_RCC_PLL2_GetN+0x18>)
 81491d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81491d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81491d8:	3301      	adds	r3, #1
}
 81491da:	4618      	mov	r0, r3
 81491dc:	46bd      	mov	sp, r7
 81491de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81491e2:	4770      	bx	lr
 81491e4:	58024400 	.word	0x58024400

081491e8 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 81491e8:	b480      	push	{r7}
 81491ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 81491ec:	4b04      	ldr	r3, [pc, #16]	@ (8149200 <LL_RCC_PLL2_GetM+0x18>)
 81491ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81491f0:	0b1b      	lsrs	r3, r3, #12
 81491f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 81491f6:	4618      	mov	r0, r3
 81491f8:	46bd      	mov	sp, r7
 81491fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81491fe:	4770      	bx	lr
 8149200:	58024400 	.word	0x58024400

08149204 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8149204:	b480      	push	{r7}
 8149206:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8149208:	4b05      	ldr	r3, [pc, #20]	@ (8149220 <LL_RCC_PLL2_GetP+0x1c>)
 814920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814920c:	0a5b      	lsrs	r3, r3, #9
 814920e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8149212:	3301      	adds	r3, #1
}
 8149214:	4618      	mov	r0, r3
 8149216:	46bd      	mov	sp, r7
 8149218:	f85d 7b04 	ldr.w	r7, [sp], #4
 814921c:	4770      	bx	lr
 814921e:	bf00      	nop
 8149220:	58024400 	.word	0x58024400

08149224 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8149224:	b480      	push	{r7}
 8149226:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8149228:	4b05      	ldr	r3, [pc, #20]	@ (8149240 <LL_RCC_PLL2_GetQ+0x1c>)
 814922a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814922c:	0c1b      	lsrs	r3, r3, #16
 814922e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8149232:	3301      	adds	r3, #1
}
 8149234:	4618      	mov	r0, r3
 8149236:	46bd      	mov	sp, r7
 8149238:	f85d 7b04 	ldr.w	r7, [sp], #4
 814923c:	4770      	bx	lr
 814923e:	bf00      	nop
 8149240:	58024400 	.word	0x58024400

08149244 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8149244:	b480      	push	{r7}
 8149246:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8149248:	4b05      	ldr	r3, [pc, #20]	@ (8149260 <LL_RCC_PLL2_GetR+0x1c>)
 814924a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814924c:	0e1b      	lsrs	r3, r3, #24
 814924e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8149252:	3301      	adds	r3, #1
}
 8149254:	4618      	mov	r0, r3
 8149256:	46bd      	mov	sp, r7
 8149258:	f85d 7b04 	ldr.w	r7, [sp], #4
 814925c:	4770      	bx	lr
 814925e:	bf00      	nop
 8149260:	58024400 	.word	0x58024400

08149264 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8149264:	b480      	push	{r7}
 8149266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8149268:	4b04      	ldr	r3, [pc, #16]	@ (814927c <LL_RCC_PLL2_GetFRACN+0x18>)
 814926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 814926c:	08db      	lsrs	r3, r3, #3
 814926e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8149272:	4618      	mov	r0, r3
 8149274:	46bd      	mov	sp, r7
 8149276:	f85d 7b04 	ldr.w	r7, [sp], #4
 814927a:	4770      	bx	lr
 814927c:	58024400 	.word	0x58024400

08149280 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8149280:	b480      	push	{r7}
 8149282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8149284:	4b07      	ldr	r3, [pc, #28]	@ (81492a4 <LL_RCC_PLL3_IsReady+0x24>)
 8149286:	681b      	ldr	r3, [r3, #0]
 8149288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814928c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8149290:	d101      	bne.n	8149296 <LL_RCC_PLL3_IsReady+0x16>
 8149292:	2301      	movs	r3, #1
 8149294:	e000      	b.n	8149298 <LL_RCC_PLL3_IsReady+0x18>
 8149296:	2300      	movs	r3, #0
}
 8149298:	4618      	mov	r0, r3
 814929a:	46bd      	mov	sp, r7
 814929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81492a0:	4770      	bx	lr
 81492a2:	bf00      	nop
 81492a4:	58024400 	.word	0x58024400

081492a8 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 81492a8:	b480      	push	{r7}
 81492aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 81492ac:	4b07      	ldr	r3, [pc, #28]	@ (81492cc <LL_RCC_PLL3P_IsEnabled+0x24>)
 81492ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81492b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81492b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81492b8:	d101      	bne.n	81492be <LL_RCC_PLL3P_IsEnabled+0x16>
 81492ba:	2301      	movs	r3, #1
 81492bc:	e000      	b.n	81492c0 <LL_RCC_PLL3P_IsEnabled+0x18>
 81492be:	2300      	movs	r3, #0
}
 81492c0:	4618      	mov	r0, r3
 81492c2:	46bd      	mov	sp, r7
 81492c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81492c8:	4770      	bx	lr
 81492ca:	bf00      	nop
 81492cc:	58024400 	.word	0x58024400

081492d0 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 81492d0:	b480      	push	{r7}
 81492d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 81492d4:	4b07      	ldr	r3, [pc, #28]	@ (81492f4 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 81492d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81492d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81492dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81492e0:	d101      	bne.n	81492e6 <LL_RCC_PLL3Q_IsEnabled+0x16>
 81492e2:	2301      	movs	r3, #1
 81492e4:	e000      	b.n	81492e8 <LL_RCC_PLL3Q_IsEnabled+0x18>
 81492e6:	2300      	movs	r3, #0
}
 81492e8:	4618      	mov	r0, r3
 81492ea:	46bd      	mov	sp, r7
 81492ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81492f0:	4770      	bx	lr
 81492f2:	bf00      	nop
 81492f4:	58024400 	.word	0x58024400

081492f8 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 81492f8:	b480      	push	{r7}
 81492fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 81492fc:	4b07      	ldr	r3, [pc, #28]	@ (814931c <LL_RCC_PLL3R_IsEnabled+0x24>)
 81492fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8149304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8149308:	d101      	bne.n	814930e <LL_RCC_PLL3R_IsEnabled+0x16>
 814930a:	2301      	movs	r3, #1
 814930c:	e000      	b.n	8149310 <LL_RCC_PLL3R_IsEnabled+0x18>
 814930e:	2300      	movs	r3, #0
}
 8149310:	4618      	mov	r0, r3
 8149312:	46bd      	mov	sp, r7
 8149314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149318:	4770      	bx	lr
 814931a:	bf00      	nop
 814931c:	58024400 	.word	0x58024400

08149320 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8149320:	b480      	push	{r7}
 8149322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8149324:	4b07      	ldr	r3, [pc, #28]	@ (8149344 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8149326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814932c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8149330:	d101      	bne.n	8149336 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8149332:	2301      	movs	r3, #1
 8149334:	e000      	b.n	8149338 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8149336:	2300      	movs	r3, #0
}
 8149338:	4618      	mov	r0, r3
 814933a:	46bd      	mov	sp, r7
 814933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149340:	4770      	bx	lr
 8149342:	bf00      	nop
 8149344:	58024400 	.word	0x58024400

08149348 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8149348:	b480      	push	{r7}
 814934a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 814934c:	4b04      	ldr	r3, [pc, #16]	@ (8149360 <LL_RCC_PLL3_GetN+0x18>)
 814934e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8149350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8149354:	3301      	adds	r3, #1
}
 8149356:	4618      	mov	r0, r3
 8149358:	46bd      	mov	sp, r7
 814935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814935e:	4770      	bx	lr
 8149360:	58024400 	.word	0x58024400

08149364 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8149364:	b480      	push	{r7}
 8149366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8149368:	4b04      	ldr	r3, [pc, #16]	@ (814937c <LL_RCC_PLL3_GetM+0x18>)
 814936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 814936c:	0d1b      	lsrs	r3, r3, #20
 814936e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8149372:	4618      	mov	r0, r3
 8149374:	46bd      	mov	sp, r7
 8149376:	f85d 7b04 	ldr.w	r7, [sp], #4
 814937a:	4770      	bx	lr
 814937c:	58024400 	.word	0x58024400

08149380 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8149380:	b480      	push	{r7}
 8149382:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8149384:	4b05      	ldr	r3, [pc, #20]	@ (814939c <LL_RCC_PLL3_GetP+0x1c>)
 8149386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8149388:	0a5b      	lsrs	r3, r3, #9
 814938a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814938e:	3301      	adds	r3, #1
}
 8149390:	4618      	mov	r0, r3
 8149392:	46bd      	mov	sp, r7
 8149394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149398:	4770      	bx	lr
 814939a:	bf00      	nop
 814939c:	58024400 	.word	0x58024400

081493a0 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 81493a0:	b480      	push	{r7}
 81493a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 81493a4:	4b05      	ldr	r3, [pc, #20]	@ (81493bc <LL_RCC_PLL3_GetQ+0x1c>)
 81493a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81493a8:	0c1b      	lsrs	r3, r3, #16
 81493aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81493ae:	3301      	adds	r3, #1
}
 81493b0:	4618      	mov	r0, r3
 81493b2:	46bd      	mov	sp, r7
 81493b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81493b8:	4770      	bx	lr
 81493ba:	bf00      	nop
 81493bc:	58024400 	.word	0x58024400

081493c0 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 81493c0:	b480      	push	{r7}
 81493c2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 81493c4:	4b05      	ldr	r3, [pc, #20]	@ (81493dc <LL_RCC_PLL3_GetR+0x1c>)
 81493c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81493c8:	0e1b      	lsrs	r3, r3, #24
 81493ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81493ce:	3301      	adds	r3, #1
}
 81493d0:	4618      	mov	r0, r3
 81493d2:	46bd      	mov	sp, r7
 81493d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81493d8:	4770      	bx	lr
 81493da:	bf00      	nop
 81493dc:	58024400 	.word	0x58024400

081493e0 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 81493e0:	b480      	push	{r7}
 81493e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 81493e4:	4b04      	ldr	r3, [pc, #16]	@ (81493f8 <LL_RCC_PLL3_GetFRACN+0x18>)
 81493e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81493e8:	08db      	lsrs	r3, r3, #3
 81493ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 81493ee:	4618      	mov	r0, r3
 81493f0:	46bd      	mov	sp, r7
 81493f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81493f6:	4770      	bx	lr
 81493f8:	58024400 	.word	0x58024400

081493fc <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 81493fc:	b580      	push	{r7, lr}
 81493fe:	b08a      	sub	sp, #40	@ 0x28
 8149400:	af02      	add	r7, sp, #8
 8149402:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8149404:	2300      	movs	r3, #0
 8149406:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8149408:	2300      	movs	r3, #0
 814940a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 814940c:	f7ff fdc6 	bl	8148f9c <LL_RCC_PLL_GetSource>
 8149410:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8149412:	697b      	ldr	r3, [r7, #20]
 8149414:	2b02      	cmp	r3, #2
 8149416:	d01f      	beq.n	8149458 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8149418:	697b      	ldr	r3, [r7, #20]
 814941a:	2b02      	cmp	r3, #2
 814941c:	d824      	bhi.n	8149468 <LL_RCC_GetPLL1ClockFreq+0x6c>
 814941e:	697b      	ldr	r3, [r7, #20]
 8149420:	2b00      	cmp	r3, #0
 8149422:	d003      	beq.n	814942c <LL_RCC_GetPLL1ClockFreq+0x30>
 8149424:	697b      	ldr	r3, [r7, #20]
 8149426:	2b01      	cmp	r3, #1
 8149428:	d00e      	beq.n	8149448 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 814942a:	e01d      	b.n	8149468 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 814942c:	f7ff fcf8 	bl	8148e20 <LL_RCC_HSI_IsReady>
 8149430:	4603      	mov	r3, r0
 8149432:	2b00      	cmp	r3, #0
 8149434:	d01a      	beq.n	814946c <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8149436:	f7ff fd05 	bl	8148e44 <LL_RCC_HSI_GetDivider>
 814943a:	4603      	mov	r3, r0
 814943c:	08db      	lsrs	r3, r3, #3
 814943e:	4a38      	ldr	r2, [pc, #224]	@ (8149520 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8149440:	fa22 f303 	lsr.w	r3, r2, r3
 8149444:	61fb      	str	r3, [r7, #28]
      break;
 8149446:	e011      	b.n	814946c <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8149448:	f7ff fd0a 	bl	8148e60 <LL_RCC_CSI_IsReady>
 814944c:	4603      	mov	r3, r0
 814944e:	2b00      	cmp	r3, #0
 8149450:	d00e      	beq.n	8149470 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8149452:	4b34      	ldr	r3, [pc, #208]	@ (8149524 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8149454:	61fb      	str	r3, [r7, #28]
      break;
 8149456:	e00b      	b.n	8149470 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8149458:	f7ff fcce 	bl	8148df8 <LL_RCC_HSE_IsReady>
 814945c:	4603      	mov	r3, r0
 814945e:	2b00      	cmp	r3, #0
 8149460:	d008      	beq.n	8149474 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8149462:	4b31      	ldr	r3, [pc, #196]	@ (8149528 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8149464:	61fb      	str	r3, [r7, #28]
      break;
 8149466:	e005      	b.n	8149474 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8149468:	bf00      	nop
 814946a:	e004      	b.n	8149476 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 814946c:	bf00      	nop
 814946e:	e002      	b.n	8149476 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8149470:	bf00      	nop
 8149472:	e000      	b.n	8149476 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8149474:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8149476:	687b      	ldr	r3, [r7, #4]
 8149478:	2200      	movs	r2, #0
 814947a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 814947c:	687b      	ldr	r3, [r7, #4]
 814947e:	2200      	movs	r2, #0
 8149480:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8149482:	687b      	ldr	r3, [r7, #4]
 8149484:	2200      	movs	r2, #0
 8149486:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8149488:	f7ff fdf2 	bl	8149070 <LL_RCC_PLL1_GetM>
 814948c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 814948e:	f7ff fde1 	bl	8149054 <LL_RCC_PLL1_GetN>
 8149492:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8149494:	f7ff fdcc 	bl	8149030 <LL_RCC_PLL1FRACN_IsEnabled>
 8149498:	4603      	mov	r3, r0
 814949a:	2b00      	cmp	r3, #0
 814949c:	d002      	beq.n	81494a4 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 814949e:	f7ff fe25 	bl	81490ec <LL_RCC_PLL1_GetFRACN>
 81494a2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 81494a4:	693b      	ldr	r3, [r7, #16]
 81494a6:	2b00      	cmp	r3, #0
 81494a8:	d035      	beq.n	8149516 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 81494aa:	f7ff fd85 	bl	8148fb8 <LL_RCC_PLL1P_IsEnabled>
 81494ae:	4603      	mov	r3, r0
 81494b0:	2b00      	cmp	r3, #0
 81494b2:	d00c      	beq.n	81494ce <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 81494b4:	f7ff fdea 	bl	814908c <LL_RCC_PLL1_GetP>
 81494b8:	4603      	mov	r3, r0
 81494ba:	9300      	str	r3, [sp, #0]
 81494bc:	69bb      	ldr	r3, [r7, #24]
 81494be:	68fa      	ldr	r2, [r7, #12]
 81494c0:	6939      	ldr	r1, [r7, #16]
 81494c2:	69f8      	ldr	r0, [r7, #28]
 81494c4:	f000 f964 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 81494c8:	4602      	mov	r2, r0
 81494ca:	687b      	ldr	r3, [r7, #4]
 81494cc:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 81494ce:	f7ff fd87 	bl	8148fe0 <LL_RCC_PLL1Q_IsEnabled>
 81494d2:	4603      	mov	r3, r0
 81494d4:	2b00      	cmp	r3, #0
 81494d6:	d00c      	beq.n	81494f2 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 81494d8:	f7ff fde8 	bl	81490ac <LL_RCC_PLL1_GetQ>
 81494dc:	4603      	mov	r3, r0
 81494de:	9300      	str	r3, [sp, #0]
 81494e0:	69bb      	ldr	r3, [r7, #24]
 81494e2:	68fa      	ldr	r2, [r7, #12]
 81494e4:	6939      	ldr	r1, [r7, #16]
 81494e6:	69f8      	ldr	r0, [r7, #28]
 81494e8:	f000 f952 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 81494ec:	4602      	mov	r2, r0
 81494ee:	687b      	ldr	r3, [r7, #4]
 81494f0:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 81494f2:	f7ff fd89 	bl	8149008 <LL_RCC_PLL1R_IsEnabled>
 81494f6:	4603      	mov	r3, r0
 81494f8:	2b00      	cmp	r3, #0
 81494fa:	d00c      	beq.n	8149516 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 81494fc:	f7ff fde6 	bl	81490cc <LL_RCC_PLL1_GetR>
 8149500:	4603      	mov	r3, r0
 8149502:	9300      	str	r3, [sp, #0]
 8149504:	69bb      	ldr	r3, [r7, #24]
 8149506:	68fa      	ldr	r2, [r7, #12]
 8149508:	6939      	ldr	r1, [r7, #16]
 814950a:	69f8      	ldr	r0, [r7, #28]
 814950c:	f000 f940 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 8149510:	4602      	mov	r2, r0
 8149512:	687b      	ldr	r3, [r7, #4]
 8149514:	609a      	str	r2, [r3, #8]
    }
  }
}
 8149516:	bf00      	nop
 8149518:	3720      	adds	r7, #32
 814951a:	46bd      	mov	sp, r7
 814951c:	bd80      	pop	{r7, pc}
 814951e:	bf00      	nop
 8149520:	03d09000 	.word	0x03d09000
 8149524:	003d0900 	.word	0x003d0900
 8149528:	017d7840 	.word	0x017d7840

0814952c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 814952c:	b580      	push	{r7, lr}
 814952e:	b08a      	sub	sp, #40	@ 0x28
 8149530:	af02      	add	r7, sp, #8
 8149532:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8149534:	2300      	movs	r3, #0
 8149536:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8149538:	2300      	movs	r3, #0
 814953a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 814953c:	f7ff fd2e 	bl	8148f9c <LL_RCC_PLL_GetSource>
 8149540:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8149542:	697b      	ldr	r3, [r7, #20]
 8149544:	2b02      	cmp	r3, #2
 8149546:	d01f      	beq.n	8149588 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8149548:	697b      	ldr	r3, [r7, #20]
 814954a:	2b02      	cmp	r3, #2
 814954c:	d824      	bhi.n	8149598 <LL_RCC_GetPLL2ClockFreq+0x6c>
 814954e:	697b      	ldr	r3, [r7, #20]
 8149550:	2b00      	cmp	r3, #0
 8149552:	d003      	beq.n	814955c <LL_RCC_GetPLL2ClockFreq+0x30>
 8149554:	697b      	ldr	r3, [r7, #20]
 8149556:	2b01      	cmp	r3, #1
 8149558:	d00e      	beq.n	8149578 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 814955a:	e01d      	b.n	8149598 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 814955c:	f7ff fc60 	bl	8148e20 <LL_RCC_HSI_IsReady>
 8149560:	4603      	mov	r3, r0
 8149562:	2b00      	cmp	r3, #0
 8149564:	d01a      	beq.n	814959c <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8149566:	f7ff fc6d 	bl	8148e44 <LL_RCC_HSI_GetDivider>
 814956a:	4603      	mov	r3, r0
 814956c:	08db      	lsrs	r3, r3, #3
 814956e:	4a38      	ldr	r2, [pc, #224]	@ (8149650 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8149570:	fa22 f303 	lsr.w	r3, r2, r3
 8149574:	61fb      	str	r3, [r7, #28]
      break;
 8149576:	e011      	b.n	814959c <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8149578:	f7ff fc72 	bl	8148e60 <LL_RCC_CSI_IsReady>
 814957c:	4603      	mov	r3, r0
 814957e:	2b00      	cmp	r3, #0
 8149580:	d00e      	beq.n	81495a0 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8149582:	4b34      	ldr	r3, [pc, #208]	@ (8149654 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8149584:	61fb      	str	r3, [r7, #28]
      break;
 8149586:	e00b      	b.n	81495a0 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8149588:	f7ff fc36 	bl	8148df8 <LL_RCC_HSE_IsReady>
 814958c:	4603      	mov	r3, r0
 814958e:	2b00      	cmp	r3, #0
 8149590:	d008      	beq.n	81495a4 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8149592:	4b31      	ldr	r3, [pc, #196]	@ (8149658 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8149594:	61fb      	str	r3, [r7, #28]
      break;
 8149596:	e005      	b.n	81495a4 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8149598:	bf00      	nop
 814959a:	e004      	b.n	81495a6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 814959c:	bf00      	nop
 814959e:	e002      	b.n	81495a6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 81495a0:	bf00      	nop
 81495a2:	e000      	b.n	81495a6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 81495a4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81495a6:	687b      	ldr	r3, [r7, #4]
 81495a8:	2200      	movs	r2, #0
 81495aa:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81495ac:	687b      	ldr	r3, [r7, #4]
 81495ae:	2200      	movs	r2, #0
 81495b0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81495b2:	687b      	ldr	r3, [r7, #4]
 81495b4:	2200      	movs	r2, #0
 81495b6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 81495b8:	f7ff fe16 	bl	81491e8 <LL_RCC_PLL2_GetM>
 81495bc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 81495be:	f7ff fe05 	bl	81491cc <LL_RCC_PLL2_GetN>
 81495c2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 81495c4:	f7ff fdf0 	bl	81491a8 <LL_RCC_PLL2FRACN_IsEnabled>
 81495c8:	4603      	mov	r3, r0
 81495ca:	2b00      	cmp	r3, #0
 81495cc:	d002      	beq.n	81495d4 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 81495ce:	f7ff fe49 	bl	8149264 <LL_RCC_PLL2_GetFRACN>
 81495d2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 81495d4:	693b      	ldr	r3, [r7, #16]
 81495d6:	2b00      	cmp	r3, #0
 81495d8:	d035      	beq.n	8149646 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 81495da:	f7ff fda9 	bl	8149130 <LL_RCC_PLL2P_IsEnabled>
 81495de:	4603      	mov	r3, r0
 81495e0:	2b00      	cmp	r3, #0
 81495e2:	d00c      	beq.n	81495fe <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 81495e4:	f7ff fe0e 	bl	8149204 <LL_RCC_PLL2_GetP>
 81495e8:	4603      	mov	r3, r0
 81495ea:	9300      	str	r3, [sp, #0]
 81495ec:	69bb      	ldr	r3, [r7, #24]
 81495ee:	68fa      	ldr	r2, [r7, #12]
 81495f0:	6939      	ldr	r1, [r7, #16]
 81495f2:	69f8      	ldr	r0, [r7, #28]
 81495f4:	f000 f8cc 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 81495f8:	4602      	mov	r2, r0
 81495fa:	687b      	ldr	r3, [r7, #4]
 81495fc:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 81495fe:	f7ff fdab 	bl	8149158 <LL_RCC_PLL2Q_IsEnabled>
 8149602:	4603      	mov	r3, r0
 8149604:	2b00      	cmp	r3, #0
 8149606:	d00c      	beq.n	8149622 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8149608:	f7ff fe0c 	bl	8149224 <LL_RCC_PLL2_GetQ>
 814960c:	4603      	mov	r3, r0
 814960e:	9300      	str	r3, [sp, #0]
 8149610:	69bb      	ldr	r3, [r7, #24]
 8149612:	68fa      	ldr	r2, [r7, #12]
 8149614:	6939      	ldr	r1, [r7, #16]
 8149616:	69f8      	ldr	r0, [r7, #28]
 8149618:	f000 f8ba 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 814961c:	4602      	mov	r2, r0
 814961e:	687b      	ldr	r3, [r7, #4]
 8149620:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8149622:	f7ff fdad 	bl	8149180 <LL_RCC_PLL2R_IsEnabled>
 8149626:	4603      	mov	r3, r0
 8149628:	2b00      	cmp	r3, #0
 814962a:	d00c      	beq.n	8149646 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 814962c:	f7ff fe0a 	bl	8149244 <LL_RCC_PLL2_GetR>
 8149630:	4603      	mov	r3, r0
 8149632:	9300      	str	r3, [sp, #0]
 8149634:	69bb      	ldr	r3, [r7, #24]
 8149636:	68fa      	ldr	r2, [r7, #12]
 8149638:	6939      	ldr	r1, [r7, #16]
 814963a:	69f8      	ldr	r0, [r7, #28]
 814963c:	f000 f8a8 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 8149640:	4602      	mov	r2, r0
 8149642:	687b      	ldr	r3, [r7, #4]
 8149644:	609a      	str	r2, [r3, #8]
    }
  }
}
 8149646:	bf00      	nop
 8149648:	3720      	adds	r7, #32
 814964a:	46bd      	mov	sp, r7
 814964c:	bd80      	pop	{r7, pc}
 814964e:	bf00      	nop
 8149650:	03d09000 	.word	0x03d09000
 8149654:	003d0900 	.word	0x003d0900
 8149658:	017d7840 	.word	0x017d7840

0814965c <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 814965c:	b580      	push	{r7, lr}
 814965e:	b08a      	sub	sp, #40	@ 0x28
 8149660:	af02      	add	r7, sp, #8
 8149662:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8149664:	2300      	movs	r3, #0
 8149666:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8149668:	2300      	movs	r3, #0
 814966a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 814966c:	f7ff fc96 	bl	8148f9c <LL_RCC_PLL_GetSource>
 8149670:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8149672:	697b      	ldr	r3, [r7, #20]
 8149674:	2b02      	cmp	r3, #2
 8149676:	d01f      	beq.n	81496b8 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8149678:	697b      	ldr	r3, [r7, #20]
 814967a:	2b02      	cmp	r3, #2
 814967c:	d824      	bhi.n	81496c8 <LL_RCC_GetPLL3ClockFreq+0x6c>
 814967e:	697b      	ldr	r3, [r7, #20]
 8149680:	2b00      	cmp	r3, #0
 8149682:	d003      	beq.n	814968c <LL_RCC_GetPLL3ClockFreq+0x30>
 8149684:	697b      	ldr	r3, [r7, #20]
 8149686:	2b01      	cmp	r3, #1
 8149688:	d00e      	beq.n	81496a8 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 814968a:	e01d      	b.n	81496c8 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 814968c:	f7ff fbc8 	bl	8148e20 <LL_RCC_HSI_IsReady>
 8149690:	4603      	mov	r3, r0
 8149692:	2b00      	cmp	r3, #0
 8149694:	d01a      	beq.n	81496cc <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8149696:	f7ff fbd5 	bl	8148e44 <LL_RCC_HSI_GetDivider>
 814969a:	4603      	mov	r3, r0
 814969c:	08db      	lsrs	r3, r3, #3
 814969e:	4a39      	ldr	r2, [pc, #228]	@ (8149784 <LL_RCC_GetPLL3ClockFreq+0x128>)
 81496a0:	fa22 f303 	lsr.w	r3, r2, r3
 81496a4:	61fb      	str	r3, [r7, #28]
      break;
 81496a6:	e011      	b.n	81496cc <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81496a8:	f7ff fbda 	bl	8148e60 <LL_RCC_CSI_IsReady>
 81496ac:	4603      	mov	r3, r0
 81496ae:	2b00      	cmp	r3, #0
 81496b0:	d00e      	beq.n	81496d0 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81496b2:	4b35      	ldr	r3, [pc, #212]	@ (8149788 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 81496b4:	61fb      	str	r3, [r7, #28]
      break;
 81496b6:	e00b      	b.n	81496d0 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81496b8:	f7ff fb9e 	bl	8148df8 <LL_RCC_HSE_IsReady>
 81496bc:	4603      	mov	r3, r0
 81496be:	2b00      	cmp	r3, #0
 81496c0:	d008      	beq.n	81496d4 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81496c2:	4b32      	ldr	r3, [pc, #200]	@ (814978c <LL_RCC_GetPLL3ClockFreq+0x130>)
 81496c4:	61fb      	str	r3, [r7, #28]
      break;
 81496c6:	e005      	b.n	81496d4 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 81496c8:	bf00      	nop
 81496ca:	e004      	b.n	81496d6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 81496cc:	bf00      	nop
 81496ce:	e002      	b.n	81496d6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 81496d0:	bf00      	nop
 81496d2:	e000      	b.n	81496d6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 81496d4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81496d6:	687b      	ldr	r3, [r7, #4]
 81496d8:	2200      	movs	r2, #0
 81496da:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81496dc:	687b      	ldr	r3, [r7, #4]
 81496de:	2200      	movs	r2, #0
 81496e0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81496e2:	687b      	ldr	r3, [r7, #4]
 81496e4:	2200      	movs	r2, #0
 81496e6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 81496e8:	f7ff fe3c 	bl	8149364 <LL_RCC_PLL3_GetM>
 81496ec:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 81496ee:	f7ff fe2b 	bl	8149348 <LL_RCC_PLL3_GetN>
 81496f2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 81496f4:	f7ff fe14 	bl	8149320 <LL_RCC_PLL3FRACN_IsEnabled>
 81496f8:	4603      	mov	r3, r0
 81496fa:	2b00      	cmp	r3, #0
 81496fc:	d002      	beq.n	8149704 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 81496fe:	f7ff fe6f 	bl	81493e0 <LL_RCC_PLL3_GetFRACN>
 8149702:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8149704:	693b      	ldr	r3, [r7, #16]
 8149706:	2b00      	cmp	r3, #0
 8149708:	d038      	beq.n	814977c <LL_RCC_GetPLL3ClockFreq+0x120>
 814970a:	69fb      	ldr	r3, [r7, #28]
 814970c:	2b00      	cmp	r3, #0
 814970e:	d035      	beq.n	814977c <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8149710:	f7ff fdca 	bl	81492a8 <LL_RCC_PLL3P_IsEnabled>
 8149714:	4603      	mov	r3, r0
 8149716:	2b00      	cmp	r3, #0
 8149718:	d00c      	beq.n	8149734 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 814971a:	f7ff fe31 	bl	8149380 <LL_RCC_PLL3_GetP>
 814971e:	4603      	mov	r3, r0
 8149720:	9300      	str	r3, [sp, #0]
 8149722:	69bb      	ldr	r3, [r7, #24]
 8149724:	68fa      	ldr	r2, [r7, #12]
 8149726:	6939      	ldr	r1, [r7, #16]
 8149728:	69f8      	ldr	r0, [r7, #28]
 814972a:	f000 f831 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 814972e:	4602      	mov	r2, r0
 8149730:	687b      	ldr	r3, [r7, #4]
 8149732:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8149734:	f7ff fdcc 	bl	81492d0 <LL_RCC_PLL3Q_IsEnabled>
 8149738:	4603      	mov	r3, r0
 814973a:	2b00      	cmp	r3, #0
 814973c:	d00c      	beq.n	8149758 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 814973e:	f7ff fe2f 	bl	81493a0 <LL_RCC_PLL3_GetQ>
 8149742:	4603      	mov	r3, r0
 8149744:	9300      	str	r3, [sp, #0]
 8149746:	69bb      	ldr	r3, [r7, #24]
 8149748:	68fa      	ldr	r2, [r7, #12]
 814974a:	6939      	ldr	r1, [r7, #16]
 814974c:	69f8      	ldr	r0, [r7, #28]
 814974e:	f000 f81f 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 8149752:	4602      	mov	r2, r0
 8149754:	687b      	ldr	r3, [r7, #4]
 8149756:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8149758:	f7ff fdce 	bl	81492f8 <LL_RCC_PLL3R_IsEnabled>
 814975c:	4603      	mov	r3, r0
 814975e:	2b00      	cmp	r3, #0
 8149760:	d00c      	beq.n	814977c <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8149762:	f7ff fe2d 	bl	81493c0 <LL_RCC_PLL3_GetR>
 8149766:	4603      	mov	r3, r0
 8149768:	9300      	str	r3, [sp, #0]
 814976a:	69bb      	ldr	r3, [r7, #24]
 814976c:	68fa      	ldr	r2, [r7, #12]
 814976e:	6939      	ldr	r1, [r7, #16]
 8149770:	69f8      	ldr	r0, [r7, #28]
 8149772:	f000 f80d 	bl	8149790 <LL_RCC_CalcPLLClockFreq>
 8149776:	4602      	mov	r2, r0
 8149778:	687b      	ldr	r3, [r7, #4]
 814977a:	609a      	str	r2, [r3, #8]
    }
  }
}
 814977c:	bf00      	nop
 814977e:	3720      	adds	r7, #32
 8149780:	46bd      	mov	sp, r7
 8149782:	bd80      	pop	{r7, pc}
 8149784:	03d09000 	.word	0x03d09000
 8149788:	003d0900 	.word	0x003d0900
 814978c:	017d7840 	.word	0x017d7840

08149790 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8149790:	b480      	push	{r7}
 8149792:	b087      	sub	sp, #28
 8149794:	af00      	add	r7, sp, #0
 8149796:	60f8      	str	r0, [r7, #12]
 8149798:	60b9      	str	r1, [r7, #8]
 814979a:	607a      	str	r2, [r7, #4]
 814979c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 814979e:	68fb      	ldr	r3, [r7, #12]
 81497a0:	ee07 3a90 	vmov	s15, r3
 81497a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81497a8:	68bb      	ldr	r3, [r7, #8]
 81497aa:	ee07 3a90 	vmov	s15, r3
 81497ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81497b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81497b6:	687b      	ldr	r3, [r7, #4]
 81497b8:	ee07 3a90 	vmov	s15, r3
 81497bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81497c0:	683b      	ldr	r3, [r7, #0]
 81497c2:	ee07 3a90 	vmov	s15, r3
 81497c6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 81497ca:	eddf 5a10 	vldr	s11, [pc, #64]	@ 814980c <LL_RCC_CalcPLLClockFreq+0x7c>
 81497ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81497d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81497d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81497da:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 81497de:	6a3b      	ldr	r3, [r7, #32]
 81497e0:	ee07 3a90 	vmov	s15, r3
 81497e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81497e8:	edd7 6a05 	vldr	s13, [r7, #20]
 81497ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81497f0:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 81497f4:	edd7 7a05 	vldr	s15, [r7, #20]
 81497f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81497fc:	ee17 3a90 	vmov	r3, s15
}
 8149800:	4618      	mov	r0, r3
 8149802:	371c      	adds	r7, #28
 8149804:	46bd      	mov	sp, r7
 8149806:	f85d 7b04 	ldr.w	r7, [sp], #4
 814980a:	4770      	bx	lr
 814980c:	46000000 	.word	0x46000000

08149810 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8149810:	b590      	push	{r4, r7, lr}
 8149812:	b087      	sub	sp, #28
 8149814:	af00      	add	r7, sp, #0
 8149816:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8149818:	2300      	movs	r3, #0
 814981a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 814981c:	6878      	ldr	r0, [r7, #4]
 814981e:	f7ff fbb1 	bl	8148f84 <LL_RCC_GetUSARTClockSource>
 8149822:	4603      	mov	r3, r0
 8149824:	4a62      	ldr	r2, [pc, #392]	@ (81499b0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8149826:	4293      	cmp	r3, r2
 8149828:	f000 80a9 	beq.w	814997e <LL_RCC_GetUSARTClockFreq+0x16e>
 814982c:	4a60      	ldr	r2, [pc, #384]	@ (81499b0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 814982e:	4293      	cmp	r3, r2
 8149830:	f200 80ae 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149834:	4a5f      	ldr	r2, [pc, #380]	@ (81499b4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8149836:	4293      	cmp	r3, r2
 8149838:	f000 80a1 	beq.w	814997e <LL_RCC_GetUSARTClockFreq+0x16e>
 814983c:	4a5d      	ldr	r2, [pc, #372]	@ (81499b4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 814983e:	4293      	cmp	r3, r2
 8149840:	f200 80a6 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149844:	4a5c      	ldr	r2, [pc, #368]	@ (81499b8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8149846:	4293      	cmp	r3, r2
 8149848:	f000 8091 	beq.w	814996e <LL_RCC_GetUSARTClockFreq+0x15e>
 814984c:	4a5a      	ldr	r2, [pc, #360]	@ (81499b8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 814984e:	4293      	cmp	r3, r2
 8149850:	f200 809e 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149854:	4a59      	ldr	r2, [pc, #356]	@ (81499bc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8149856:	4293      	cmp	r3, r2
 8149858:	f000 8089 	beq.w	814996e <LL_RCC_GetUSARTClockFreq+0x15e>
 814985c:	4a57      	ldr	r2, [pc, #348]	@ (81499bc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 814985e:	4293      	cmp	r3, r2
 8149860:	f200 8096 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149864:	4a56      	ldr	r2, [pc, #344]	@ (81499c0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8149866:	4293      	cmp	r3, r2
 8149868:	d073      	beq.n	8149952 <LL_RCC_GetUSARTClockFreq+0x142>
 814986a:	4a55      	ldr	r2, [pc, #340]	@ (81499c0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 814986c:	4293      	cmp	r3, r2
 814986e:	f200 808f 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149872:	4a54      	ldr	r2, [pc, #336]	@ (81499c4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8149874:	4293      	cmp	r3, r2
 8149876:	d06c      	beq.n	8149952 <LL_RCC_GetUSARTClockFreq+0x142>
 8149878:	4a52      	ldr	r2, [pc, #328]	@ (81499c4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 814987a:	4293      	cmp	r3, r2
 814987c:	f200 8088 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 8149880:	4a51      	ldr	r2, [pc, #324]	@ (81499c8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8149882:	4293      	cmp	r3, r2
 8149884:	d058      	beq.n	8149938 <LL_RCC_GetUSARTClockFreq+0x128>
 8149886:	4a50      	ldr	r2, [pc, #320]	@ (81499c8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8149888:	4293      	cmp	r3, r2
 814988a:	f200 8081 	bhi.w	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 814988e:	4a4f      	ldr	r2, [pc, #316]	@ (81499cc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8149890:	4293      	cmp	r3, r2
 8149892:	d051      	beq.n	8149938 <LL_RCC_GetUSARTClockFreq+0x128>
 8149894:	4a4d      	ldr	r2, [pc, #308]	@ (81499cc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8149896:	4293      	cmp	r3, r2
 8149898:	d87a      	bhi.n	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 814989a:	4a4d      	ldr	r2, [pc, #308]	@ (81499d0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 814989c:	4293      	cmp	r3, r2
 814989e:	d03e      	beq.n	814991e <LL_RCC_GetUSARTClockFreq+0x10e>
 81498a0:	4a4b      	ldr	r2, [pc, #300]	@ (81499d0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 81498a2:	4293      	cmp	r3, r2
 81498a4:	d874      	bhi.n	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 81498a6:	4a4b      	ldr	r2, [pc, #300]	@ (81499d4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 81498a8:	4293      	cmp	r3, r2
 81498aa:	d038      	beq.n	814991e <LL_RCC_GetUSARTClockFreq+0x10e>
 81498ac:	4a49      	ldr	r2, [pc, #292]	@ (81499d4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 81498ae:	4293      	cmp	r3, r2
 81498b0:	d86e      	bhi.n	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
 81498b2:	4a49      	ldr	r2, [pc, #292]	@ (81499d8 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 81498b4:	4293      	cmp	r3, r2
 81498b6:	d01a      	beq.n	81498ee <LL_RCC_GetUSARTClockFreq+0xde>
 81498b8:	4a48      	ldr	r2, [pc, #288]	@ (81499dc <LL_RCC_GetUSARTClockFreq+0x1cc>)
 81498ba:	4293      	cmp	r3, r2
 81498bc:	d168      	bne.n	8149990 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 81498be:	f000 f895 	bl	81499ec <RCC_GetSystemClockFreq>
 81498c2:	4604      	mov	r4, r0
 81498c4:	f7ff fb00 	bl	8148ec8 <LL_RCC_GetSysPrescaler>
 81498c8:	4603      	mov	r3, r0
 81498ca:	0a1b      	lsrs	r3, r3, #8
 81498cc:	f003 030f 	and.w	r3, r3, #15
 81498d0:	4a43      	ldr	r2, [pc, #268]	@ (81499e0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 81498d2:	5cd3      	ldrb	r3, [r2, r3]
 81498d4:	f003 031f 	and.w	r3, r3, #31
 81498d8:	fa24 f303 	lsr.w	r3, r4, r3
 81498dc:	4618      	mov	r0, r3
 81498de:	f000 f8e7 	bl	8149ab0 <RCC_GetHCLKClockFreq>
 81498e2:	4603      	mov	r3, r0
 81498e4:	4618      	mov	r0, r3
 81498e6:	f000 f911 	bl	8149b0c <RCC_GetPCLK2ClockFreq>
 81498ea:	6178      	str	r0, [r7, #20]
      break;
 81498ec:	e05b      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 81498ee:	f000 f87d 	bl	81499ec <RCC_GetSystemClockFreq>
 81498f2:	4604      	mov	r4, r0
 81498f4:	f7ff fae8 	bl	8148ec8 <LL_RCC_GetSysPrescaler>
 81498f8:	4603      	mov	r3, r0
 81498fa:	0a1b      	lsrs	r3, r3, #8
 81498fc:	f003 030f 	and.w	r3, r3, #15
 8149900:	4a37      	ldr	r2, [pc, #220]	@ (81499e0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8149902:	5cd3      	ldrb	r3, [r2, r3]
 8149904:	f003 031f 	and.w	r3, r3, #31
 8149908:	fa24 f303 	lsr.w	r3, r4, r3
 814990c:	4618      	mov	r0, r3
 814990e:	f000 f8cf 	bl	8149ab0 <RCC_GetHCLKClockFreq>
 8149912:	4603      	mov	r3, r0
 8149914:	4618      	mov	r0, r3
 8149916:	f000 f8e1 	bl	8149adc <RCC_GetPCLK1ClockFreq>
 814991a:	6178      	str	r0, [r7, #20]
      break;
 814991c:	e043      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 814991e:	f7ff fbf3 	bl	8149108 <LL_RCC_PLL2_IsReady>
 8149922:	4603      	mov	r3, r0
 8149924:	2b00      	cmp	r3, #0
 8149926:	d035      	beq.n	8149994 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8149928:	f107 0308 	add.w	r3, r7, #8
 814992c:	4618      	mov	r0, r3
 814992e:	f7ff fdfd 	bl	814952c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8149932:	68fb      	ldr	r3, [r7, #12]
 8149934:	617b      	str	r3, [r7, #20]
      }
      break;
 8149936:	e02d      	b.n	8149994 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8149938:	f7ff fca2 	bl	8149280 <LL_RCC_PLL3_IsReady>
 814993c:	4603      	mov	r3, r0
 814993e:	2b00      	cmp	r3, #0
 8149940:	d02a      	beq.n	8149998 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8149942:	f107 0308 	add.w	r3, r7, #8
 8149946:	4618      	mov	r0, r3
 8149948:	f7ff fe88 	bl	814965c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 814994c:	68fb      	ldr	r3, [r7, #12]
 814994e:	617b      	str	r3, [r7, #20]
      }
      break;
 8149950:	e022      	b.n	8149998 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8149952:	f7ff fa65 	bl	8148e20 <LL_RCC_HSI_IsReady>
 8149956:	4603      	mov	r3, r0
 8149958:	2b00      	cmp	r3, #0
 814995a:	d01f      	beq.n	814999c <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 814995c:	f7ff fa72 	bl	8148e44 <LL_RCC_HSI_GetDivider>
 8149960:	4603      	mov	r3, r0
 8149962:	08db      	lsrs	r3, r3, #3
 8149964:	4a1f      	ldr	r2, [pc, #124]	@ (81499e4 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8149966:	fa22 f303 	lsr.w	r3, r2, r3
 814996a:	617b      	str	r3, [r7, #20]
      }
      break;
 814996c:	e016      	b.n	814999c <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 814996e:	f7ff fa77 	bl	8148e60 <LL_RCC_CSI_IsReady>
 8149972:	4603      	mov	r3, r0
 8149974:	2b00      	cmp	r3, #0
 8149976:	d013      	beq.n	81499a0 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8149978:	4b1b      	ldr	r3, [pc, #108]	@ (81499e8 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 814997a:	617b      	str	r3, [r7, #20]
      }
      break;
 814997c:	e010      	b.n	81499a0 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 814997e:	f7ff fa83 	bl	8148e88 <LL_RCC_LSE_IsReady>
 8149982:	4603      	mov	r3, r0
 8149984:	2b00      	cmp	r3, #0
 8149986:	d00d      	beq.n	81499a4 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8149988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 814998c:	617b      	str	r3, [r7, #20]
      }
      break;
 814998e:	e009      	b.n	81499a4 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8149990:	bf00      	nop
 8149992:	e008      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8149994:	bf00      	nop
 8149996:	e006      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8149998:	bf00      	nop
 814999a:	e004      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 814999c:	bf00      	nop
 814999e:	e002      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81499a0:	bf00      	nop
 81499a2:	e000      	b.n	81499a6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81499a4:	bf00      	nop
  }

  return usart_frequency;
 81499a6:	697b      	ldr	r3, [r7, #20]
}
 81499a8:	4618      	mov	r0, r3
 81499aa:	371c      	adds	r7, #28
 81499ac:	46bd      	mov	sp, r7
 81499ae:	bd90      	pop	{r4, r7, pc}
 81499b0:	07050308 	.word	0x07050308
 81499b4:	07050008 	.word	0x07050008
 81499b8:	07040308 	.word	0x07040308
 81499bc:	07040008 	.word	0x07040008
 81499c0:	07030308 	.word	0x07030308
 81499c4:	07030008 	.word	0x07030008
 81499c8:	07020308 	.word	0x07020308
 81499cc:	07020008 	.word	0x07020008
 81499d0:	07010308 	.word	0x07010308
 81499d4:	07010008 	.word	0x07010008
 81499d8:	07000008 	.word	0x07000008
 81499dc:	07000308 	.word	0x07000308
 81499e0:	0814ead8 	.word	0x0814ead8
 81499e4:	03d09000 	.word	0x03d09000
 81499e8:	003d0900 	.word	0x003d0900

081499ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 81499ec:	b580      	push	{r7, lr}
 81499ee:	b084      	sub	sp, #16
 81499f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 81499f2:	2300      	movs	r3, #0
 81499f4:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 81499f6:	f7ff fa59 	bl	8148eac <LL_RCC_GetSysClkSource>
 81499fa:	4603      	mov	r3, r0
 81499fc:	2b18      	cmp	r3, #24
 81499fe:	d84b      	bhi.n	8149a98 <RCC_GetSystemClockFreq+0xac>
 8149a00:	a201      	add	r2, pc, #4	@ (adr r2, 8149a08 <RCC_GetSystemClockFreq+0x1c>)
 8149a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8149a06:	bf00      	nop
 8149a08:	08149a6d 	.word	0x08149a6d
 8149a0c:	08149a99 	.word	0x08149a99
 8149a10:	08149a99 	.word	0x08149a99
 8149a14:	08149a99 	.word	0x08149a99
 8149a18:	08149a99 	.word	0x08149a99
 8149a1c:	08149a99 	.word	0x08149a99
 8149a20:	08149a99 	.word	0x08149a99
 8149a24:	08149a99 	.word	0x08149a99
 8149a28:	08149a7f 	.word	0x08149a7f
 8149a2c:	08149a99 	.word	0x08149a99
 8149a30:	08149a99 	.word	0x08149a99
 8149a34:	08149a99 	.word	0x08149a99
 8149a38:	08149a99 	.word	0x08149a99
 8149a3c:	08149a99 	.word	0x08149a99
 8149a40:	08149a99 	.word	0x08149a99
 8149a44:	08149a99 	.word	0x08149a99
 8149a48:	08149a85 	.word	0x08149a85
 8149a4c:	08149a99 	.word	0x08149a99
 8149a50:	08149a99 	.word	0x08149a99
 8149a54:	08149a99 	.word	0x08149a99
 8149a58:	08149a99 	.word	0x08149a99
 8149a5c:	08149a99 	.word	0x08149a99
 8149a60:	08149a99 	.word	0x08149a99
 8149a64:	08149a99 	.word	0x08149a99
 8149a68:	08149a8b 	.word	0x08149a8b
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8149a6c:	f7ff f9ea 	bl	8148e44 <LL_RCC_HSI_GetDivider>
 8149a70:	4603      	mov	r3, r0
 8149a72:	08db      	lsrs	r3, r3, #3
 8149a74:	4a0b      	ldr	r2, [pc, #44]	@ (8149aa4 <RCC_GetSystemClockFreq+0xb8>)
 8149a76:	fa22 f303 	lsr.w	r3, r2, r3
 8149a7a:	60fb      	str	r3, [r7, #12]
      break;
 8149a7c:	e00d      	b.n	8149a9a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8149a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8149aa8 <RCC_GetSystemClockFreq+0xbc>)
 8149a80:	60fb      	str	r3, [r7, #12]
      break;
 8149a82:	e00a      	b.n	8149a9a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8149a84:	4b09      	ldr	r3, [pc, #36]	@ (8149aac <RCC_GetSystemClockFreq+0xc0>)
 8149a86:	60fb      	str	r3, [r7, #12]
      break;
 8149a88:	e007      	b.n	8149a9a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8149a8a:	463b      	mov	r3, r7
 8149a8c:	4618      	mov	r0, r3
 8149a8e:	f7ff fcb5 	bl	81493fc <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8149a92:	683b      	ldr	r3, [r7, #0]
 8149a94:	60fb      	str	r3, [r7, #12]
      break;
 8149a96:	e000      	b.n	8149a9a <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8149a98:	bf00      	nop
  }

  return frequency;
 8149a9a:	68fb      	ldr	r3, [r7, #12]
}
 8149a9c:	4618      	mov	r0, r3
 8149a9e:	3710      	adds	r7, #16
 8149aa0:	46bd      	mov	sp, r7
 8149aa2:	bd80      	pop	{r7, pc}
 8149aa4:	03d09000 	.word	0x03d09000
 8149aa8:	003d0900 	.word	0x003d0900
 8149aac:	017d7840 	.word	0x017d7840

08149ab0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8149ab0:	b580      	push	{r7, lr}
 8149ab2:	b082      	sub	sp, #8
 8149ab4:	af00      	add	r7, sp, #0
 8149ab6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8149ab8:	f7ff fa14 	bl	8148ee4 <LL_RCC_GetAHBPrescaler>
 8149abc:	4603      	mov	r3, r0
 8149abe:	f003 030f 	and.w	r3, r3, #15
 8149ac2:	4a05      	ldr	r2, [pc, #20]	@ (8149ad8 <RCC_GetHCLKClockFreq+0x28>)
 8149ac4:	5cd3      	ldrb	r3, [r2, r3]
 8149ac6:	f003 031f 	and.w	r3, r3, #31
 8149aca:	687a      	ldr	r2, [r7, #4]
 8149acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8149ad0:	4618      	mov	r0, r3
 8149ad2:	3708      	adds	r7, #8
 8149ad4:	46bd      	mov	sp, r7
 8149ad6:	bd80      	pop	{r7, pc}
 8149ad8:	0814ead8 	.word	0x0814ead8

08149adc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8149adc:	b580      	push	{r7, lr}
 8149ade:	b082      	sub	sp, #8
 8149ae0:	af00      	add	r7, sp, #0
 8149ae2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8149ae4:	f7ff fa0c 	bl	8148f00 <LL_RCC_GetAPB1Prescaler>
 8149ae8:	4603      	mov	r3, r0
 8149aea:	091b      	lsrs	r3, r3, #4
 8149aec:	f003 0307 	and.w	r3, r3, #7
 8149af0:	4a05      	ldr	r2, [pc, #20]	@ (8149b08 <RCC_GetPCLK1ClockFreq+0x2c>)
 8149af2:	5cd3      	ldrb	r3, [r2, r3]
 8149af4:	f003 031f 	and.w	r3, r3, #31
 8149af8:	687a      	ldr	r2, [r7, #4]
 8149afa:	fa22 f303 	lsr.w	r3, r2, r3
}
 8149afe:	4618      	mov	r0, r3
 8149b00:	3708      	adds	r7, #8
 8149b02:	46bd      	mov	sp, r7
 8149b04:	bd80      	pop	{r7, pc}
 8149b06:	bf00      	nop
 8149b08:	0814ead8 	.word	0x0814ead8

08149b0c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8149b0c:	b580      	push	{r7, lr}
 8149b0e:	b082      	sub	sp, #8
 8149b10:	af00      	add	r7, sp, #0
 8149b12:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8149b14:	f7ff fa02 	bl	8148f1c <LL_RCC_GetAPB2Prescaler>
 8149b18:	4603      	mov	r3, r0
 8149b1a:	0a1b      	lsrs	r3, r3, #8
 8149b1c:	f003 0307 	and.w	r3, r3, #7
 8149b20:	4a05      	ldr	r2, [pc, #20]	@ (8149b38 <RCC_GetPCLK2ClockFreq+0x2c>)
 8149b22:	5cd3      	ldrb	r3, [r2, r3]
 8149b24:	f003 031f 	and.w	r3, r3, #31
 8149b28:	687a      	ldr	r2, [r7, #4]
 8149b2a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8149b2e:	4618      	mov	r0, r3
 8149b30:	3708      	adds	r7, #8
 8149b32:	46bd      	mov	sp, r7
 8149b34:	bd80      	pop	{r7, pc}
 8149b36:	bf00      	nop
 8149b38:	0814ead8 	.word	0x0814ead8

08149b3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8149b3c:	b084      	sub	sp, #16
 8149b3e:	b480      	push	{r7}
 8149b40:	b085      	sub	sp, #20
 8149b42:	af00      	add	r7, sp, #0
 8149b44:	6078      	str	r0, [r7, #4]
 8149b46:	f107 001c 	add.w	r0, r7, #28
 8149b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8149b4e:	2300      	movs	r3, #0
 8149b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8149b52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8149b54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8149b56:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8149b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8149b5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8149b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8149b5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8149b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8149b62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8149b64:	68fa      	ldr	r2, [r7, #12]
 8149b66:	4313      	orrs	r3, r2
 8149b68:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8149b6a:	687b      	ldr	r3, [r7, #4]
 8149b6c:	685a      	ldr	r2, [r3, #4]
 8149b6e:	4b07      	ldr	r3, [pc, #28]	@ (8149b8c <SDMMC_Init+0x50>)
 8149b70:	4013      	ands	r3, r2
 8149b72:	68fa      	ldr	r2, [r7, #12]
 8149b74:	431a      	orrs	r2, r3
 8149b76:	687b      	ldr	r3, [r7, #4]
 8149b78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8149b7a:	2300      	movs	r3, #0
}
 8149b7c:	4618      	mov	r0, r3
 8149b7e:	3714      	adds	r7, #20
 8149b80:	46bd      	mov	sp, r7
 8149b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149b86:	b004      	add	sp, #16
 8149b88:	4770      	bx	lr
 8149b8a:	bf00      	nop
 8149b8c:	ffc02c00 	.word	0xffc02c00

08149b90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8149b90:	b480      	push	{r7}
 8149b92:	b083      	sub	sp, #12
 8149b94:	af00      	add	r7, sp, #0
 8149b96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8149b98:	687b      	ldr	r3, [r7, #4]
 8149b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8149b9e:	4618      	mov	r0, r3
 8149ba0:	370c      	adds	r7, #12
 8149ba2:	46bd      	mov	sp, r7
 8149ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149ba8:	4770      	bx	lr

08149baa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8149baa:	b480      	push	{r7}
 8149bac:	b083      	sub	sp, #12
 8149bae:	af00      	add	r7, sp, #0
 8149bb0:	6078      	str	r0, [r7, #4]
 8149bb2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8149bb4:	683b      	ldr	r3, [r7, #0]
 8149bb6:	681a      	ldr	r2, [r3, #0]
 8149bb8:	687b      	ldr	r3, [r7, #4]
 8149bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8149bbe:	2300      	movs	r3, #0
}
 8149bc0:	4618      	mov	r0, r3
 8149bc2:	370c      	adds	r7, #12
 8149bc4:	46bd      	mov	sp, r7
 8149bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149bca:	4770      	bx	lr

08149bcc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8149bcc:	b480      	push	{r7}
 8149bce:	b083      	sub	sp, #12
 8149bd0:	af00      	add	r7, sp, #0
 8149bd2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8149bd4:	687b      	ldr	r3, [r7, #4]
 8149bd6:	681b      	ldr	r3, [r3, #0]
 8149bd8:	f043 0203 	orr.w	r2, r3, #3
 8149bdc:	687b      	ldr	r3, [r7, #4]
 8149bde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8149be0:	2300      	movs	r3, #0
}
 8149be2:	4618      	mov	r0, r3
 8149be4:	370c      	adds	r7, #12
 8149be6:	46bd      	mov	sp, r7
 8149be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149bec:	4770      	bx	lr

08149bee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8149bee:	b480      	push	{r7}
 8149bf0:	b083      	sub	sp, #12
 8149bf2:	af00      	add	r7, sp, #0
 8149bf4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8149bf6:	687b      	ldr	r3, [r7, #4]
 8149bf8:	681b      	ldr	r3, [r3, #0]
 8149bfa:	f003 0303 	and.w	r3, r3, #3
}
 8149bfe:	4618      	mov	r0, r3
 8149c00:	370c      	adds	r7, #12
 8149c02:	46bd      	mov	sp, r7
 8149c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149c08:	4770      	bx	lr
	...

08149c0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8149c0c:	b480      	push	{r7}
 8149c0e:	b085      	sub	sp, #20
 8149c10:	af00      	add	r7, sp, #0
 8149c12:	6078      	str	r0, [r7, #4]
 8149c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8149c16:	2300      	movs	r3, #0
 8149c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8149c1a:	683b      	ldr	r3, [r7, #0]
 8149c1c:	681a      	ldr	r2, [r3, #0]
 8149c1e:	687b      	ldr	r3, [r7, #4]
 8149c20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8149c22:	683b      	ldr	r3, [r7, #0]
 8149c24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8149c26:	683b      	ldr	r3, [r7, #0]
 8149c28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8149c2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8149c2c:	683b      	ldr	r3, [r7, #0]
 8149c2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8149c30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8149c32:	683b      	ldr	r3, [r7, #0]
 8149c34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8149c36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8149c38:	68fa      	ldr	r2, [r7, #12]
 8149c3a:	4313      	orrs	r3, r2
 8149c3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8149c3e:	687b      	ldr	r3, [r7, #4]
 8149c40:	68da      	ldr	r2, [r3, #12]
 8149c42:	4b06      	ldr	r3, [pc, #24]	@ (8149c5c <SDMMC_SendCommand+0x50>)
 8149c44:	4013      	ands	r3, r2
 8149c46:	68fa      	ldr	r2, [r7, #12]
 8149c48:	431a      	orrs	r2, r3
 8149c4a:	687b      	ldr	r3, [r7, #4]
 8149c4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8149c4e:	2300      	movs	r3, #0
}
 8149c50:	4618      	mov	r0, r3
 8149c52:	3714      	adds	r7, #20
 8149c54:	46bd      	mov	sp, r7
 8149c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149c5a:	4770      	bx	lr
 8149c5c:	fffee0c0 	.word	0xfffee0c0

08149c60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8149c60:	b480      	push	{r7}
 8149c62:	b083      	sub	sp, #12
 8149c64:	af00      	add	r7, sp, #0
 8149c66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8149c68:	687b      	ldr	r3, [r7, #4]
 8149c6a:	691b      	ldr	r3, [r3, #16]
 8149c6c:	b2db      	uxtb	r3, r3
}
 8149c6e:	4618      	mov	r0, r3
 8149c70:	370c      	adds	r7, #12
 8149c72:	46bd      	mov	sp, r7
 8149c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149c78:	4770      	bx	lr

08149c7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8149c7a:	b480      	push	{r7}
 8149c7c:	b085      	sub	sp, #20
 8149c7e:	af00      	add	r7, sp, #0
 8149c80:	6078      	str	r0, [r7, #4]
 8149c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8149c84:	687b      	ldr	r3, [r7, #4]
 8149c86:	3314      	adds	r3, #20
 8149c88:	461a      	mov	r2, r3
 8149c8a:	683b      	ldr	r3, [r7, #0]
 8149c8c:	4413      	add	r3, r2
 8149c8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8149c90:	68fb      	ldr	r3, [r7, #12]
 8149c92:	681b      	ldr	r3, [r3, #0]
}
 8149c94:	4618      	mov	r0, r3
 8149c96:	3714      	adds	r7, #20
 8149c98:	46bd      	mov	sp, r7
 8149c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149c9e:	4770      	bx	lr

08149ca0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8149ca0:	b480      	push	{r7}
 8149ca2:	b085      	sub	sp, #20
 8149ca4:	af00      	add	r7, sp, #0
 8149ca6:	6078      	str	r0, [r7, #4]
 8149ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8149caa:	2300      	movs	r3, #0
 8149cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8149cae:	683b      	ldr	r3, [r7, #0]
 8149cb0:	681a      	ldr	r2, [r3, #0]
 8149cb2:	687b      	ldr	r3, [r7, #4]
 8149cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8149cb6:	683b      	ldr	r3, [r7, #0]
 8149cb8:	685a      	ldr	r2, [r3, #4]
 8149cba:	687b      	ldr	r3, [r7, #4]
 8149cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8149cbe:	683b      	ldr	r3, [r7, #0]
 8149cc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8149cc2:	683b      	ldr	r3, [r7, #0]
 8149cc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8149cc6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8149cc8:	683b      	ldr	r3, [r7, #0]
 8149cca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8149ccc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8149cce:	683b      	ldr	r3, [r7, #0]
 8149cd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8149cd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8149cd4:	68fa      	ldr	r2, [r7, #12]
 8149cd6:	4313      	orrs	r3, r2
 8149cd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8149cda:	687b      	ldr	r3, [r7, #4]
 8149cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8149cde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8149ce2:	68fb      	ldr	r3, [r7, #12]
 8149ce4:	431a      	orrs	r2, r3
 8149ce6:	687b      	ldr	r3, [r7, #4]
 8149ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8149cea:	2300      	movs	r3, #0

}
 8149cec:	4618      	mov	r0, r3
 8149cee:	3714      	adds	r7, #20
 8149cf0:	46bd      	mov	sp, r7
 8149cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8149cf6:	4770      	bx	lr

08149cf8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8149cf8:	b580      	push	{r7, lr}
 8149cfa:	b088      	sub	sp, #32
 8149cfc:	af00      	add	r7, sp, #0
 8149cfe:	6078      	str	r0, [r7, #4]
 8149d00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8149d02:	683b      	ldr	r3, [r7, #0]
 8149d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8149d06:	2310      	movs	r3, #16
 8149d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149d0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149d10:	2300      	movs	r3, #0
 8149d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149d18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149d1a:	f107 0308 	add.w	r3, r7, #8
 8149d1e:	4619      	mov	r1, r3
 8149d20:	6878      	ldr	r0, [r7, #4]
 8149d22:	f7ff ff73 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8149d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8149d2a:	2110      	movs	r1, #16
 8149d2c:	6878      	ldr	r0, [r7, #4]
 8149d2e:	f000 f971 	bl	814a014 <SDMMC_GetCmdResp1>
 8149d32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149d34:	69fb      	ldr	r3, [r7, #28]
}
 8149d36:	4618      	mov	r0, r3
 8149d38:	3720      	adds	r7, #32
 8149d3a:	46bd      	mov	sp, r7
 8149d3c:	bd80      	pop	{r7, pc}
	...

08149d40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8149d40:	b580      	push	{r7, lr}
 8149d42:	b088      	sub	sp, #32
 8149d44:	af00      	add	r7, sp, #0
 8149d46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8149d48:	2300      	movs	r3, #0
 8149d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8149d4c:	230c      	movs	r3, #12
 8149d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149d56:	2300      	movs	r3, #0
 8149d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149d5e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8149d60:	687b      	ldr	r3, [r7, #4]
 8149d62:	68db      	ldr	r3, [r3, #12]
 8149d64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8149d68:	687b      	ldr	r3, [r7, #4]
 8149d6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8149d6c:	687b      	ldr	r3, [r7, #4]
 8149d6e:	68db      	ldr	r3, [r3, #12]
 8149d70:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8149d74:	687b      	ldr	r3, [r7, #4]
 8149d76:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149d78:	f107 0308 	add.w	r3, r7, #8
 8149d7c:	4619      	mov	r1, r3
 8149d7e:	6878      	ldr	r0, [r7, #4]
 8149d80:	f7ff ff44 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8149d84:	4a0b      	ldr	r2, [pc, #44]	@ (8149db4 <SDMMC_CmdStopTransfer+0x74>)
 8149d86:	210c      	movs	r1, #12
 8149d88:	6878      	ldr	r0, [r7, #4]
 8149d8a:	f000 f943 	bl	814a014 <SDMMC_GetCmdResp1>
 8149d8e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8149d90:	687b      	ldr	r3, [r7, #4]
 8149d92:	68db      	ldr	r3, [r3, #12]
 8149d94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8149d98:	687b      	ldr	r3, [r7, #4]
 8149d9a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8149d9c:	69fb      	ldr	r3, [r7, #28]
 8149d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8149da2:	d101      	bne.n	8149da8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8149da4:	2300      	movs	r3, #0
 8149da6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8149da8:	69fb      	ldr	r3, [r7, #28]
}
 8149daa:	4618      	mov	r0, r3
 8149dac:	3720      	adds	r7, #32
 8149dae:	46bd      	mov	sp, r7
 8149db0:	bd80      	pop	{r7, pc}
 8149db2:	bf00      	nop
 8149db4:	05f5e100 	.word	0x05f5e100

08149db8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8149db8:	b580      	push	{r7, lr}
 8149dba:	b088      	sub	sp, #32
 8149dbc:	af00      	add	r7, sp, #0
 8149dbe:	6078      	str	r0, [r7, #4]
 8149dc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8149dc2:	683b      	ldr	r3, [r7, #0]
 8149dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8149dc6:	2307      	movs	r3, #7
 8149dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149dce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149dd0:	2300      	movs	r3, #0
 8149dd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149dd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149dda:	f107 0308 	add.w	r3, r7, #8
 8149dde:	4619      	mov	r1, r3
 8149de0:	6878      	ldr	r0, [r7, #4]
 8149de2:	f7ff ff13 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8149de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8149dea:	2107      	movs	r1, #7
 8149dec:	6878      	ldr	r0, [r7, #4]
 8149dee:	f000 f911 	bl	814a014 <SDMMC_GetCmdResp1>
 8149df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149df4:	69fb      	ldr	r3, [r7, #28]
}
 8149df6:	4618      	mov	r0, r3
 8149df8:	3720      	adds	r7, #32
 8149dfa:	46bd      	mov	sp, r7
 8149dfc:	bd80      	pop	{r7, pc}

08149dfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8149dfe:	b580      	push	{r7, lr}
 8149e00:	b088      	sub	sp, #32
 8149e02:	af00      	add	r7, sp, #0
 8149e04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8149e06:	2300      	movs	r3, #0
 8149e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8149e0a:	2300      	movs	r3, #0
 8149e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8149e0e:	2300      	movs	r3, #0
 8149e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149e12:	2300      	movs	r3, #0
 8149e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149e1c:	f107 0308 	add.w	r3, r7, #8
 8149e20:	4619      	mov	r1, r3
 8149e22:	6878      	ldr	r0, [r7, #4]
 8149e24:	f7ff fef2 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8149e28:	6878      	ldr	r0, [r7, #4]
 8149e2a:	f000 fa6f 	bl	814a30c <SDMMC_GetCmdError>
 8149e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149e30:	69fb      	ldr	r3, [r7, #28]
}
 8149e32:	4618      	mov	r0, r3
 8149e34:	3720      	adds	r7, #32
 8149e36:	46bd      	mov	sp, r7
 8149e38:	bd80      	pop	{r7, pc}

08149e3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8149e3a:	b580      	push	{r7, lr}
 8149e3c:	b088      	sub	sp, #32
 8149e3e:	af00      	add	r7, sp, #0
 8149e40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8149e42:	2300      	movs	r3, #0
 8149e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8149e46:	2302      	movs	r3, #2
 8149e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8149e4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8149e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149e50:	2300      	movs	r3, #0
 8149e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149e58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149e5a:	f107 0308 	add.w	r3, r7, #8
 8149e5e:	4619      	mov	r1, r3
 8149e60:	6878      	ldr	r0, [r7, #4]
 8149e62:	f7ff fed3 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8149e66:	6878      	ldr	r0, [r7, #4]
 8149e68:	f000 f9c6 	bl	814a1f8 <SDMMC_GetCmdResp2>
 8149e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149e6e:	69fb      	ldr	r3, [r7, #28]
}
 8149e70:	4618      	mov	r0, r3
 8149e72:	3720      	adds	r7, #32
 8149e74:	46bd      	mov	sp, r7
 8149e76:	bd80      	pop	{r7, pc}

08149e78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8149e78:	b580      	push	{r7, lr}
 8149e7a:	b088      	sub	sp, #32
 8149e7c:	af00      	add	r7, sp, #0
 8149e7e:	6078      	str	r0, [r7, #4]
 8149e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8149e82:	683b      	ldr	r3, [r7, #0]
 8149e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8149e86:	2309      	movs	r3, #9
 8149e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8149e8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8149e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149e90:	2300      	movs	r3, #0
 8149e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149e9a:	f107 0308 	add.w	r3, r7, #8
 8149e9e:	4619      	mov	r1, r3
 8149ea0:	6878      	ldr	r0, [r7, #4]
 8149ea2:	f7ff feb3 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8149ea6:	6878      	ldr	r0, [r7, #4]
 8149ea8:	f000 f9a6 	bl	814a1f8 <SDMMC_GetCmdResp2>
 8149eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149eae:	69fb      	ldr	r3, [r7, #28]
}
 8149eb0:	4618      	mov	r0, r3
 8149eb2:	3720      	adds	r7, #32
 8149eb4:	46bd      	mov	sp, r7
 8149eb6:	bd80      	pop	{r7, pc}

08149eb8 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8149eb8:	b580      	push	{r7, lr}
 8149eba:	b088      	sub	sp, #32
 8149ebc:	af00      	add	r7, sp, #0
 8149ebe:	6078      	str	r0, [r7, #4]
 8149ec0:	460b      	mov	r3, r1
 8149ec2:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8149ec4:	887b      	ldrh	r3, [r7, #2]
 8149ec6:	041b      	lsls	r3, r3, #16
 8149ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8149eca:	2303      	movs	r3, #3
 8149ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149ed4:	2300      	movs	r3, #0
 8149ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149edc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149ede:	f107 0308 	add.w	r3, r7, #8
 8149ee2:	4619      	mov	r1, r3
 8149ee4:	6878      	ldr	r0, [r7, #4]
 8149ee6:	f7ff fe91 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8149eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8149eee:	2103      	movs	r1, #3
 8149ef0:	6878      	ldr	r0, [r7, #4]
 8149ef2:	f000 f88f 	bl	814a014 <SDMMC_GetCmdResp1>
 8149ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149ef8:	69fb      	ldr	r3, [r7, #28]
}
 8149efa:	4618      	mov	r0, r3
 8149efc:	3720      	adds	r7, #32
 8149efe:	46bd      	mov	sp, r7
 8149f00:	bd80      	pop	{r7, pc}

08149f02 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8149f02:	b580      	push	{r7, lr}
 8149f04:	b088      	sub	sp, #32
 8149f06:	af00      	add	r7, sp, #0
 8149f08:	6078      	str	r0, [r7, #4]
 8149f0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8149f0c:	683b      	ldr	r3, [r7, #0]
 8149f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8149f10:	230d      	movs	r3, #13
 8149f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149f1a:	2300      	movs	r3, #0
 8149f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149f24:	f107 0308 	add.w	r3, r7, #8
 8149f28:	4619      	mov	r1, r3
 8149f2a:	6878      	ldr	r0, [r7, #4]
 8149f2c:	f7ff fe6e 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8149f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8149f34:	210d      	movs	r1, #13
 8149f36:	6878      	ldr	r0, [r7, #4]
 8149f38:	f000 f86c 	bl	814a014 <SDMMC_GetCmdResp1>
 8149f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149f3e:	69fb      	ldr	r3, [r7, #28]
}
 8149f40:	4618      	mov	r0, r3
 8149f42:	3720      	adds	r7, #32
 8149f44:	46bd      	mov	sp, r7
 8149f46:	bd80      	pop	{r7, pc}

08149f48 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8149f48:	b580      	push	{r7, lr}
 8149f4a:	b088      	sub	sp, #32
 8149f4c:	af00      	add	r7, sp, #0
 8149f4e:	6078      	str	r0, [r7, #4]
 8149f50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8149f52:	683b      	ldr	r3, [r7, #0]
 8149f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8149f56:	2301      	movs	r3, #1
 8149f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149f5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149f60:	2300      	movs	r3, #0
 8149f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149f6a:	f107 0308 	add.w	r3, r7, #8
 8149f6e:	4619      	mov	r1, r3
 8149f70:	6878      	ldr	r0, [r7, #4]
 8149f72:	f7ff fe4b 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8149f76:	6878      	ldr	r0, [r7, #4]
 8149f78:	f000 f988 	bl	814a28c <SDMMC_GetCmdResp3>
 8149f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149f7e:	69fb      	ldr	r3, [r7, #28]
}
 8149f80:	4618      	mov	r0, r3
 8149f82:	3720      	adds	r7, #32
 8149f84:	46bd      	mov	sp, r7
 8149f86:	bd80      	pop	{r7, pc}

08149f88 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8149f88:	b580      	push	{r7, lr}
 8149f8a:	b088      	sub	sp, #32
 8149f8c:	af00      	add	r7, sp, #0
 8149f8e:	6078      	str	r0, [r7, #4]
 8149f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8149f92:	683b      	ldr	r3, [r7, #0]
 8149f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8149f96:	2306      	movs	r3, #6
 8149f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149fa0:	2300      	movs	r3, #0
 8149fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149fa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149faa:	f107 0308 	add.w	r3, r7, #8
 8149fae:	4619      	mov	r1, r3
 8149fb0:	6878      	ldr	r0, [r7, #4]
 8149fb2:	f7ff fe2b 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8149fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8149fba:	2106      	movs	r1, #6
 8149fbc:	6878      	ldr	r0, [r7, #4]
 8149fbe:	f000 f829 	bl	814a014 <SDMMC_GetCmdResp1>
 8149fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8149fc4:	69fb      	ldr	r3, [r7, #28]
}
 8149fc6:	4618      	mov	r0, r3
 8149fc8:	3720      	adds	r7, #32
 8149fca:	46bd      	mov	sp, r7
 8149fcc:	bd80      	pop	{r7, pc}

08149fce <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8149fce:	b580      	push	{r7, lr}
 8149fd0:	b088      	sub	sp, #32
 8149fd2:	af00      	add	r7, sp, #0
 8149fd4:	6078      	str	r0, [r7, #4]
 8149fd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8149fd8:	683b      	ldr	r3, [r7, #0]
 8149fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8149fdc:	2308      	movs	r3, #8
 8149fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8149fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8149fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8149fe6:	2300      	movs	r3, #0
 8149fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8149fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8149fee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8149ff0:	f107 0308 	add.w	r3, r7, #8
 8149ff4:	4619      	mov	r1, r3
 8149ff6:	6878      	ldr	r0, [r7, #4]
 8149ff8:	f7ff fe08 	bl	8149c0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8149ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 814a000:	2108      	movs	r1, #8
 814a002:	6878      	ldr	r0, [r7, #4]
 814a004:	f000 f806 	bl	814a014 <SDMMC_GetCmdResp1>
 814a008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 814a00a:	69fb      	ldr	r3, [r7, #28]
}
 814a00c:	4618      	mov	r0, r3
 814a00e:	3720      	adds	r7, #32
 814a010:	46bd      	mov	sp, r7
 814a012:	bd80      	pop	{r7, pc}

0814a014 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 814a014:	b580      	push	{r7, lr}
 814a016:	b088      	sub	sp, #32
 814a018:	af00      	add	r7, sp, #0
 814a01a:	60f8      	str	r0, [r7, #12]
 814a01c:	460b      	mov	r3, r1
 814a01e:	607a      	str	r2, [r7, #4]
 814a020:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 814a022:	4b70      	ldr	r3, [pc, #448]	@ (814a1e4 <SDMMC_GetCmdResp1+0x1d0>)
 814a024:	681b      	ldr	r3, [r3, #0]
 814a026:	4a70      	ldr	r2, [pc, #448]	@ (814a1e8 <SDMMC_GetCmdResp1+0x1d4>)
 814a028:	fba2 2303 	umull	r2, r3, r2, r3
 814a02c:	0a5a      	lsrs	r2, r3, #9
 814a02e:	687b      	ldr	r3, [r7, #4]
 814a030:	fb02 f303 	mul.w	r3, r2, r3
 814a034:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 814a036:	69fb      	ldr	r3, [r7, #28]
 814a038:	1e5a      	subs	r2, r3, #1
 814a03a:	61fa      	str	r2, [r7, #28]
 814a03c:	2b00      	cmp	r3, #0
 814a03e:	d102      	bne.n	814a046 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 814a040:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 814a044:	e0c9      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 814a046:	68fb      	ldr	r3, [r7, #12]
 814a048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a04a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 814a04c:	69ba      	ldr	r2, [r7, #24]
 814a04e:	4b67      	ldr	r3, [pc, #412]	@ (814a1ec <SDMMC_GetCmdResp1+0x1d8>)
 814a050:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 814a052:	2b00      	cmp	r3, #0
 814a054:	d0ef      	beq.n	814a036 <SDMMC_GetCmdResp1+0x22>
 814a056:	69bb      	ldr	r3, [r7, #24]
 814a058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 814a05c:	2b00      	cmp	r3, #0
 814a05e:	d1ea      	bne.n	814a036 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 814a060:	68fb      	ldr	r3, [r7, #12]
 814a062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a064:	f003 0304 	and.w	r3, r3, #4
 814a068:	2b00      	cmp	r3, #0
 814a06a:	d004      	beq.n	814a076 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 814a06c:	68fb      	ldr	r3, [r7, #12]
 814a06e:	2204      	movs	r2, #4
 814a070:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 814a072:	2304      	movs	r3, #4
 814a074:	e0b1      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 814a076:	68fb      	ldr	r3, [r7, #12]
 814a078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a07a:	f003 0301 	and.w	r3, r3, #1
 814a07e:	2b00      	cmp	r3, #0
 814a080:	d004      	beq.n	814a08c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 814a082:	68fb      	ldr	r3, [r7, #12]
 814a084:	2201      	movs	r2, #1
 814a086:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 814a088:	2301      	movs	r3, #1
 814a08a:	e0a6      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 814a08c:	68fb      	ldr	r3, [r7, #12]
 814a08e:	4a58      	ldr	r2, [pc, #352]	@ (814a1f0 <SDMMC_GetCmdResp1+0x1dc>)
 814a090:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 814a092:	68f8      	ldr	r0, [r7, #12]
 814a094:	f7ff fde4 	bl	8149c60 <SDMMC_GetCommandResponse>
 814a098:	4603      	mov	r3, r0
 814a09a:	461a      	mov	r2, r3
 814a09c:	7afb      	ldrb	r3, [r7, #11]
 814a09e:	4293      	cmp	r3, r2
 814a0a0:	d001      	beq.n	814a0a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 814a0a2:	2301      	movs	r3, #1
 814a0a4:	e099      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 814a0a6:	2100      	movs	r1, #0
 814a0a8:	68f8      	ldr	r0, [r7, #12]
 814a0aa:	f7ff fde6 	bl	8149c7a <SDMMC_GetResponse>
 814a0ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 814a0b0:	697a      	ldr	r2, [r7, #20]
 814a0b2:	4b50      	ldr	r3, [pc, #320]	@ (814a1f4 <SDMMC_GetCmdResp1+0x1e0>)
 814a0b4:	4013      	ands	r3, r2
 814a0b6:	2b00      	cmp	r3, #0
 814a0b8:	d101      	bne.n	814a0be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 814a0ba:	2300      	movs	r3, #0
 814a0bc:	e08d      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 814a0be:	697b      	ldr	r3, [r7, #20]
 814a0c0:	2b00      	cmp	r3, #0
 814a0c2:	da02      	bge.n	814a0ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 814a0c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 814a0c8:	e087      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 814a0ca:	697b      	ldr	r3, [r7, #20]
 814a0cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 814a0d0:	2b00      	cmp	r3, #0
 814a0d2:	d001      	beq.n	814a0d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 814a0d4:	2340      	movs	r3, #64	@ 0x40
 814a0d6:	e080      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 814a0d8:	697b      	ldr	r3, [r7, #20]
 814a0da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 814a0de:	2b00      	cmp	r3, #0
 814a0e0:	d001      	beq.n	814a0e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 814a0e2:	2380      	movs	r3, #128	@ 0x80
 814a0e4:	e079      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 814a0e6:	697b      	ldr	r3, [r7, #20]
 814a0e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 814a0ec:	2b00      	cmp	r3, #0
 814a0ee:	d002      	beq.n	814a0f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 814a0f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 814a0f4:	e071      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 814a0f6:	697b      	ldr	r3, [r7, #20]
 814a0f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 814a0fc:	2b00      	cmp	r3, #0
 814a0fe:	d002      	beq.n	814a106 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 814a100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814a104:	e069      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 814a106:	697b      	ldr	r3, [r7, #20]
 814a108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 814a10c:	2b00      	cmp	r3, #0
 814a10e:	d002      	beq.n	814a116 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 814a110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 814a114:	e061      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 814a116:	697b      	ldr	r3, [r7, #20]
 814a118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 814a11c:	2b00      	cmp	r3, #0
 814a11e:	d002      	beq.n	814a126 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 814a120:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 814a124:	e059      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 814a126:	697b      	ldr	r3, [r7, #20]
 814a128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 814a12c:	2b00      	cmp	r3, #0
 814a12e:	d002      	beq.n	814a136 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 814a130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 814a134:	e051      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 814a136:	697b      	ldr	r3, [r7, #20]
 814a138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 814a13c:	2b00      	cmp	r3, #0
 814a13e:	d002      	beq.n	814a146 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 814a140:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 814a144:	e049      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 814a146:	697b      	ldr	r3, [r7, #20]
 814a148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 814a14c:	2b00      	cmp	r3, #0
 814a14e:	d002      	beq.n	814a156 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 814a150:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 814a154:	e041      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 814a156:	697b      	ldr	r3, [r7, #20]
 814a158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 814a15c:	2b00      	cmp	r3, #0
 814a15e:	d002      	beq.n	814a166 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 814a160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 814a164:	e039      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 814a166:	697b      	ldr	r3, [r7, #20]
 814a168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 814a16c:	2b00      	cmp	r3, #0
 814a16e:	d002      	beq.n	814a176 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 814a170:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 814a174:	e031      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 814a176:	697b      	ldr	r3, [r7, #20]
 814a178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 814a17c:	2b00      	cmp	r3, #0
 814a17e:	d002      	beq.n	814a186 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 814a180:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 814a184:	e029      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 814a186:	697b      	ldr	r3, [r7, #20]
 814a188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 814a18c:	2b00      	cmp	r3, #0
 814a18e:	d002      	beq.n	814a196 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 814a190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 814a194:	e021      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 814a196:	697b      	ldr	r3, [r7, #20]
 814a198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 814a19c:	2b00      	cmp	r3, #0
 814a19e:	d002      	beq.n	814a1a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 814a1a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 814a1a4:	e019      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 814a1a6:	697b      	ldr	r3, [r7, #20]
 814a1a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 814a1ac:	2b00      	cmp	r3, #0
 814a1ae:	d002      	beq.n	814a1b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 814a1b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 814a1b4:	e011      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 814a1b6:	697b      	ldr	r3, [r7, #20]
 814a1b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 814a1bc:	2b00      	cmp	r3, #0
 814a1be:	d002      	beq.n	814a1c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 814a1c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 814a1c4:	e009      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 814a1c6:	697b      	ldr	r3, [r7, #20]
 814a1c8:	f003 0308 	and.w	r3, r3, #8
 814a1cc:	2b00      	cmp	r3, #0
 814a1ce:	d002      	beq.n	814a1d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 814a1d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 814a1d4:	e001      	b.n	814a1da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 814a1d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 814a1da:	4618      	mov	r0, r3
 814a1dc:	3720      	adds	r7, #32
 814a1de:	46bd      	mov	sp, r7
 814a1e0:	bd80      	pop	{r7, pc}
 814a1e2:	bf00      	nop
 814a1e4:	100320f0 	.word	0x100320f0
 814a1e8:	10624dd3 	.word	0x10624dd3
 814a1ec:	00200045 	.word	0x00200045
 814a1f0:	002000c5 	.word	0x002000c5
 814a1f4:	fdffe008 	.word	0xfdffe008

0814a1f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 814a1f8:	b480      	push	{r7}
 814a1fa:	b085      	sub	sp, #20
 814a1fc:	af00      	add	r7, sp, #0
 814a1fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 814a200:	4b1f      	ldr	r3, [pc, #124]	@ (814a280 <SDMMC_GetCmdResp2+0x88>)
 814a202:	681b      	ldr	r3, [r3, #0]
 814a204:	4a1f      	ldr	r2, [pc, #124]	@ (814a284 <SDMMC_GetCmdResp2+0x8c>)
 814a206:	fba2 2303 	umull	r2, r3, r2, r3
 814a20a:	0a5b      	lsrs	r3, r3, #9
 814a20c:	f241 3288 	movw	r2, #5000	@ 0x1388
 814a210:	fb02 f303 	mul.w	r3, r2, r3
 814a214:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 814a216:	68fb      	ldr	r3, [r7, #12]
 814a218:	1e5a      	subs	r2, r3, #1
 814a21a:	60fa      	str	r2, [r7, #12]
 814a21c:	2b00      	cmp	r3, #0
 814a21e:	d102      	bne.n	814a226 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 814a220:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 814a224:	e026      	b.n	814a274 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 814a226:	687b      	ldr	r3, [r7, #4]
 814a228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a22a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 814a22c:	68bb      	ldr	r3, [r7, #8]
 814a22e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 814a232:	2b00      	cmp	r3, #0
 814a234:	d0ef      	beq.n	814a216 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 814a236:	68bb      	ldr	r3, [r7, #8]
 814a238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 814a23c:	2b00      	cmp	r3, #0
 814a23e:	d1ea      	bne.n	814a216 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 814a240:	687b      	ldr	r3, [r7, #4]
 814a242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a244:	f003 0304 	and.w	r3, r3, #4
 814a248:	2b00      	cmp	r3, #0
 814a24a:	d004      	beq.n	814a256 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 814a24c:	687b      	ldr	r3, [r7, #4]
 814a24e:	2204      	movs	r2, #4
 814a250:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 814a252:	2304      	movs	r3, #4
 814a254:	e00e      	b.n	814a274 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 814a256:	687b      	ldr	r3, [r7, #4]
 814a258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a25a:	f003 0301 	and.w	r3, r3, #1
 814a25e:	2b00      	cmp	r3, #0
 814a260:	d004      	beq.n	814a26c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 814a262:	687b      	ldr	r3, [r7, #4]
 814a264:	2201      	movs	r2, #1
 814a266:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 814a268:	2301      	movs	r3, #1
 814a26a:	e003      	b.n	814a274 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 814a26c:	687b      	ldr	r3, [r7, #4]
 814a26e:	4a06      	ldr	r2, [pc, #24]	@ (814a288 <SDMMC_GetCmdResp2+0x90>)
 814a270:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 814a272:	2300      	movs	r3, #0
}
 814a274:	4618      	mov	r0, r3
 814a276:	3714      	adds	r7, #20
 814a278:	46bd      	mov	sp, r7
 814a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a27e:	4770      	bx	lr
 814a280:	100320f0 	.word	0x100320f0
 814a284:	10624dd3 	.word	0x10624dd3
 814a288:	002000c5 	.word	0x002000c5

0814a28c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 814a28c:	b480      	push	{r7}
 814a28e:	b085      	sub	sp, #20
 814a290:	af00      	add	r7, sp, #0
 814a292:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 814a294:	4b1a      	ldr	r3, [pc, #104]	@ (814a300 <SDMMC_GetCmdResp3+0x74>)
 814a296:	681b      	ldr	r3, [r3, #0]
 814a298:	4a1a      	ldr	r2, [pc, #104]	@ (814a304 <SDMMC_GetCmdResp3+0x78>)
 814a29a:	fba2 2303 	umull	r2, r3, r2, r3
 814a29e:	0a5b      	lsrs	r3, r3, #9
 814a2a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 814a2a4:	fb02 f303 	mul.w	r3, r2, r3
 814a2a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 814a2aa:	68fb      	ldr	r3, [r7, #12]
 814a2ac:	1e5a      	subs	r2, r3, #1
 814a2ae:	60fa      	str	r2, [r7, #12]
 814a2b0:	2b00      	cmp	r3, #0
 814a2b2:	d102      	bne.n	814a2ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 814a2b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 814a2b8:	e01b      	b.n	814a2f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 814a2ba:	687b      	ldr	r3, [r7, #4]
 814a2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a2be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 814a2c0:	68bb      	ldr	r3, [r7, #8]
 814a2c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 814a2c6:	2b00      	cmp	r3, #0
 814a2c8:	d0ef      	beq.n	814a2aa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 814a2ca:	68bb      	ldr	r3, [r7, #8]
 814a2cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 814a2d0:	2b00      	cmp	r3, #0
 814a2d2:	d1ea      	bne.n	814a2aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 814a2d4:	687b      	ldr	r3, [r7, #4]
 814a2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a2d8:	f003 0304 	and.w	r3, r3, #4
 814a2dc:	2b00      	cmp	r3, #0
 814a2de:	d004      	beq.n	814a2ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 814a2e0:	687b      	ldr	r3, [r7, #4]
 814a2e2:	2204      	movs	r2, #4
 814a2e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 814a2e6:	2304      	movs	r3, #4
 814a2e8:	e003      	b.n	814a2f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 814a2ea:	687b      	ldr	r3, [r7, #4]
 814a2ec:	4a06      	ldr	r2, [pc, #24]	@ (814a308 <SDMMC_GetCmdResp3+0x7c>)
 814a2ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 814a2f0:	2300      	movs	r3, #0
}
 814a2f2:	4618      	mov	r0, r3
 814a2f4:	3714      	adds	r7, #20
 814a2f6:	46bd      	mov	sp, r7
 814a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a2fc:	4770      	bx	lr
 814a2fe:	bf00      	nop
 814a300:	100320f0 	.word	0x100320f0
 814a304:	10624dd3 	.word	0x10624dd3
 814a308:	002000c5 	.word	0x002000c5

0814a30c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 814a30c:	b480      	push	{r7}
 814a30e:	b085      	sub	sp, #20
 814a310:	af00      	add	r7, sp, #0
 814a312:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 814a314:	4b11      	ldr	r3, [pc, #68]	@ (814a35c <SDMMC_GetCmdError+0x50>)
 814a316:	681b      	ldr	r3, [r3, #0]
 814a318:	4a11      	ldr	r2, [pc, #68]	@ (814a360 <SDMMC_GetCmdError+0x54>)
 814a31a:	fba2 2303 	umull	r2, r3, r2, r3
 814a31e:	0a5b      	lsrs	r3, r3, #9
 814a320:	f241 3288 	movw	r2, #5000	@ 0x1388
 814a324:	fb02 f303 	mul.w	r3, r2, r3
 814a328:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 814a32a:	68fb      	ldr	r3, [r7, #12]
 814a32c:	1e5a      	subs	r2, r3, #1
 814a32e:	60fa      	str	r2, [r7, #12]
 814a330:	2b00      	cmp	r3, #0
 814a332:	d102      	bne.n	814a33a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 814a334:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 814a338:	e009      	b.n	814a34e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 814a33a:	687b      	ldr	r3, [r7, #4]
 814a33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814a33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 814a342:	2b00      	cmp	r3, #0
 814a344:	d0f1      	beq.n	814a32a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 814a346:	687b      	ldr	r3, [r7, #4]
 814a348:	4a06      	ldr	r2, [pc, #24]	@ (814a364 <SDMMC_GetCmdError+0x58>)
 814a34a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 814a34c:	2300      	movs	r3, #0
}
 814a34e:	4618      	mov	r0, r3
 814a350:	3714      	adds	r7, #20
 814a352:	46bd      	mov	sp, r7
 814a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a358:	4770      	bx	lr
 814a35a:	bf00      	nop
 814a35c:	100320f0 	.word	0x100320f0
 814a360:	10624dd3 	.word	0x10624dd3
 814a364:	002000c5 	.word	0x002000c5

0814a368 <LL_TIM_SetPrescaler>:
{
 814a368:	b480      	push	{r7}
 814a36a:	b083      	sub	sp, #12
 814a36c:	af00      	add	r7, sp, #0
 814a36e:	6078      	str	r0, [r7, #4]
 814a370:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 814a372:	687b      	ldr	r3, [r7, #4]
 814a374:	683a      	ldr	r2, [r7, #0]
 814a376:	629a      	str	r2, [r3, #40]	@ 0x28
}
 814a378:	bf00      	nop
 814a37a:	370c      	adds	r7, #12
 814a37c:	46bd      	mov	sp, r7
 814a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a382:	4770      	bx	lr

0814a384 <LL_TIM_SetAutoReload>:
{
 814a384:	b480      	push	{r7}
 814a386:	b083      	sub	sp, #12
 814a388:	af00      	add	r7, sp, #0
 814a38a:	6078      	str	r0, [r7, #4]
 814a38c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 814a38e:	687b      	ldr	r3, [r7, #4]
 814a390:	683a      	ldr	r2, [r7, #0]
 814a392:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 814a394:	bf00      	nop
 814a396:	370c      	adds	r7, #12
 814a398:	46bd      	mov	sp, r7
 814a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a39e:	4770      	bx	lr

0814a3a0 <LL_TIM_SetRepetitionCounter>:
{
 814a3a0:	b480      	push	{r7}
 814a3a2:	b083      	sub	sp, #12
 814a3a4:	af00      	add	r7, sp, #0
 814a3a6:	6078      	str	r0, [r7, #4]
 814a3a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 814a3aa:	687b      	ldr	r3, [r7, #4]
 814a3ac:	683a      	ldr	r2, [r7, #0]
 814a3ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 814a3b0:	bf00      	nop
 814a3b2:	370c      	adds	r7, #12
 814a3b4:	46bd      	mov	sp, r7
 814a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a3ba:	4770      	bx	lr

0814a3bc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 814a3bc:	b480      	push	{r7}
 814a3be:	b083      	sub	sp, #12
 814a3c0:	af00      	add	r7, sp, #0
 814a3c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 814a3c4:	687b      	ldr	r3, [r7, #4]
 814a3c6:	695b      	ldr	r3, [r3, #20]
 814a3c8:	f043 0201 	orr.w	r2, r3, #1
 814a3cc:	687b      	ldr	r3, [r7, #4]
 814a3ce:	615a      	str	r2, [r3, #20]
}
 814a3d0:	bf00      	nop
 814a3d2:	370c      	adds	r7, #12
 814a3d4:	46bd      	mov	sp, r7
 814a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a3da:	4770      	bx	lr

0814a3dc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 814a3dc:	b580      	push	{r7, lr}
 814a3de:	b084      	sub	sp, #16
 814a3e0:	af00      	add	r7, sp, #0
 814a3e2:	6078      	str	r0, [r7, #4]
 814a3e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 814a3e6:	687b      	ldr	r3, [r7, #4]
 814a3e8:	681b      	ldr	r3, [r3, #0]
 814a3ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 814a3ec:	687b      	ldr	r3, [r7, #4]
 814a3ee:	4a3d      	ldr	r2, [pc, #244]	@ (814a4e4 <LL_TIM_Init+0x108>)
 814a3f0:	4293      	cmp	r3, r2
 814a3f2:	d013      	beq.n	814a41c <LL_TIM_Init+0x40>
 814a3f4:	687b      	ldr	r3, [r7, #4]
 814a3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 814a3fa:	d00f      	beq.n	814a41c <LL_TIM_Init+0x40>
 814a3fc:	687b      	ldr	r3, [r7, #4]
 814a3fe:	4a3a      	ldr	r2, [pc, #232]	@ (814a4e8 <LL_TIM_Init+0x10c>)
 814a400:	4293      	cmp	r3, r2
 814a402:	d00b      	beq.n	814a41c <LL_TIM_Init+0x40>
 814a404:	687b      	ldr	r3, [r7, #4]
 814a406:	4a39      	ldr	r2, [pc, #228]	@ (814a4ec <LL_TIM_Init+0x110>)
 814a408:	4293      	cmp	r3, r2
 814a40a:	d007      	beq.n	814a41c <LL_TIM_Init+0x40>
 814a40c:	687b      	ldr	r3, [r7, #4]
 814a40e:	4a38      	ldr	r2, [pc, #224]	@ (814a4f0 <LL_TIM_Init+0x114>)
 814a410:	4293      	cmp	r3, r2
 814a412:	d003      	beq.n	814a41c <LL_TIM_Init+0x40>
 814a414:	687b      	ldr	r3, [r7, #4]
 814a416:	4a37      	ldr	r2, [pc, #220]	@ (814a4f4 <LL_TIM_Init+0x118>)
 814a418:	4293      	cmp	r3, r2
 814a41a:	d106      	bne.n	814a42a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 814a41c:	68fb      	ldr	r3, [r7, #12]
 814a41e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 814a422:	683b      	ldr	r3, [r7, #0]
 814a424:	685b      	ldr	r3, [r3, #4]
 814a426:	4313      	orrs	r3, r2
 814a428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 814a42a:	687b      	ldr	r3, [r7, #4]
 814a42c:	4a2d      	ldr	r2, [pc, #180]	@ (814a4e4 <LL_TIM_Init+0x108>)
 814a42e:	4293      	cmp	r3, r2
 814a430:	d01f      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a432:	687b      	ldr	r3, [r7, #4]
 814a434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 814a438:	d01b      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a43a:	687b      	ldr	r3, [r7, #4]
 814a43c:	4a2a      	ldr	r2, [pc, #168]	@ (814a4e8 <LL_TIM_Init+0x10c>)
 814a43e:	4293      	cmp	r3, r2
 814a440:	d017      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a442:	687b      	ldr	r3, [r7, #4]
 814a444:	4a29      	ldr	r2, [pc, #164]	@ (814a4ec <LL_TIM_Init+0x110>)
 814a446:	4293      	cmp	r3, r2
 814a448:	d013      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a44a:	687b      	ldr	r3, [r7, #4]
 814a44c:	4a28      	ldr	r2, [pc, #160]	@ (814a4f0 <LL_TIM_Init+0x114>)
 814a44e:	4293      	cmp	r3, r2
 814a450:	d00f      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a452:	687b      	ldr	r3, [r7, #4]
 814a454:	4a27      	ldr	r2, [pc, #156]	@ (814a4f4 <LL_TIM_Init+0x118>)
 814a456:	4293      	cmp	r3, r2
 814a458:	d00b      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a45a:	687b      	ldr	r3, [r7, #4]
 814a45c:	4a26      	ldr	r2, [pc, #152]	@ (814a4f8 <LL_TIM_Init+0x11c>)
 814a45e:	4293      	cmp	r3, r2
 814a460:	d007      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a462:	687b      	ldr	r3, [r7, #4]
 814a464:	4a25      	ldr	r2, [pc, #148]	@ (814a4fc <LL_TIM_Init+0x120>)
 814a466:	4293      	cmp	r3, r2
 814a468:	d003      	beq.n	814a472 <LL_TIM_Init+0x96>
 814a46a:	687b      	ldr	r3, [r7, #4]
 814a46c:	4a24      	ldr	r2, [pc, #144]	@ (814a500 <LL_TIM_Init+0x124>)
 814a46e:	4293      	cmp	r3, r2
 814a470:	d106      	bne.n	814a480 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 814a472:	68fb      	ldr	r3, [r7, #12]
 814a474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 814a478:	683b      	ldr	r3, [r7, #0]
 814a47a:	68db      	ldr	r3, [r3, #12]
 814a47c:	4313      	orrs	r3, r2
 814a47e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 814a480:	687b      	ldr	r3, [r7, #4]
 814a482:	68fa      	ldr	r2, [r7, #12]
 814a484:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 814a486:	683b      	ldr	r3, [r7, #0]
 814a488:	689b      	ldr	r3, [r3, #8]
 814a48a:	4619      	mov	r1, r3
 814a48c:	6878      	ldr	r0, [r7, #4]
 814a48e:	f7ff ff79 	bl	814a384 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 814a492:	683b      	ldr	r3, [r7, #0]
 814a494:	881b      	ldrh	r3, [r3, #0]
 814a496:	4619      	mov	r1, r3
 814a498:	6878      	ldr	r0, [r7, #4]
 814a49a:	f7ff ff65 	bl	814a368 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 814a49e:	687b      	ldr	r3, [r7, #4]
 814a4a0:	4a10      	ldr	r2, [pc, #64]	@ (814a4e4 <LL_TIM_Init+0x108>)
 814a4a2:	4293      	cmp	r3, r2
 814a4a4:	d00f      	beq.n	814a4c6 <LL_TIM_Init+0xea>
 814a4a6:	687b      	ldr	r3, [r7, #4]
 814a4a8:	4a12      	ldr	r2, [pc, #72]	@ (814a4f4 <LL_TIM_Init+0x118>)
 814a4aa:	4293      	cmp	r3, r2
 814a4ac:	d00b      	beq.n	814a4c6 <LL_TIM_Init+0xea>
 814a4ae:	687b      	ldr	r3, [r7, #4]
 814a4b0:	4a11      	ldr	r2, [pc, #68]	@ (814a4f8 <LL_TIM_Init+0x11c>)
 814a4b2:	4293      	cmp	r3, r2
 814a4b4:	d007      	beq.n	814a4c6 <LL_TIM_Init+0xea>
 814a4b6:	687b      	ldr	r3, [r7, #4]
 814a4b8:	4a10      	ldr	r2, [pc, #64]	@ (814a4fc <LL_TIM_Init+0x120>)
 814a4ba:	4293      	cmp	r3, r2
 814a4bc:	d003      	beq.n	814a4c6 <LL_TIM_Init+0xea>
 814a4be:	687b      	ldr	r3, [r7, #4]
 814a4c0:	4a0f      	ldr	r2, [pc, #60]	@ (814a500 <LL_TIM_Init+0x124>)
 814a4c2:	4293      	cmp	r3, r2
 814a4c4:	d105      	bne.n	814a4d2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 814a4c6:	683b      	ldr	r3, [r7, #0]
 814a4c8:	691b      	ldr	r3, [r3, #16]
 814a4ca:	4619      	mov	r1, r3
 814a4cc:	6878      	ldr	r0, [r7, #4]
 814a4ce:	f7ff ff67 	bl	814a3a0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 814a4d2:	6878      	ldr	r0, [r7, #4]
 814a4d4:	f7ff ff72 	bl	814a3bc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 814a4d8:	2300      	movs	r3, #0
}
 814a4da:	4618      	mov	r0, r3
 814a4dc:	3710      	adds	r7, #16
 814a4de:	46bd      	mov	sp, r7
 814a4e0:	bd80      	pop	{r7, pc}
 814a4e2:	bf00      	nop
 814a4e4:	40010000 	.word	0x40010000
 814a4e8:	40000400 	.word	0x40000400
 814a4ec:	40000800 	.word	0x40000800
 814a4f0:	40000c00 	.word	0x40000c00
 814a4f4:	40010400 	.word	0x40010400
 814a4f8:	40014000 	.word	0x40014000
 814a4fc:	40014400 	.word	0x40014400
 814a500:	40014800 	.word	0x40014800

0814a504 <LL_USART_IsEnabled>:
{
 814a504:	b480      	push	{r7}
 814a506:	b083      	sub	sp, #12
 814a508:	af00      	add	r7, sp, #0
 814a50a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 814a50c:	687b      	ldr	r3, [r7, #4]
 814a50e:	681b      	ldr	r3, [r3, #0]
 814a510:	f003 0301 	and.w	r3, r3, #1
 814a514:	2b01      	cmp	r3, #1
 814a516:	d101      	bne.n	814a51c <LL_USART_IsEnabled+0x18>
 814a518:	2301      	movs	r3, #1
 814a51a:	e000      	b.n	814a51e <LL_USART_IsEnabled+0x1a>
 814a51c:	2300      	movs	r3, #0
}
 814a51e:	4618      	mov	r0, r3
 814a520:	370c      	adds	r7, #12
 814a522:	46bd      	mov	sp, r7
 814a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a528:	4770      	bx	lr

0814a52a <LL_USART_SetPrescaler>:
{
 814a52a:	b480      	push	{r7}
 814a52c:	b083      	sub	sp, #12
 814a52e:	af00      	add	r7, sp, #0
 814a530:	6078      	str	r0, [r7, #4]
 814a532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 814a534:	687b      	ldr	r3, [r7, #4]
 814a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814a538:	f023 030f 	bic.w	r3, r3, #15
 814a53c:	683a      	ldr	r2, [r7, #0]
 814a53e:	b292      	uxth	r2, r2
 814a540:	431a      	orrs	r2, r3
 814a542:	687b      	ldr	r3, [r7, #4]
 814a544:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 814a546:	bf00      	nop
 814a548:	370c      	adds	r7, #12
 814a54a:	46bd      	mov	sp, r7
 814a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a550:	4770      	bx	lr

0814a552 <LL_USART_SetStopBitsLength>:
{
 814a552:	b480      	push	{r7}
 814a554:	b083      	sub	sp, #12
 814a556:	af00      	add	r7, sp, #0
 814a558:	6078      	str	r0, [r7, #4]
 814a55a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 814a55c:	687b      	ldr	r3, [r7, #4]
 814a55e:	685b      	ldr	r3, [r3, #4]
 814a560:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 814a564:	683b      	ldr	r3, [r7, #0]
 814a566:	431a      	orrs	r2, r3
 814a568:	687b      	ldr	r3, [r7, #4]
 814a56a:	605a      	str	r2, [r3, #4]
}
 814a56c:	bf00      	nop
 814a56e:	370c      	adds	r7, #12
 814a570:	46bd      	mov	sp, r7
 814a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a576:	4770      	bx	lr

0814a578 <LL_USART_SetHWFlowCtrl>:
{
 814a578:	b480      	push	{r7}
 814a57a:	b083      	sub	sp, #12
 814a57c:	af00      	add	r7, sp, #0
 814a57e:	6078      	str	r0, [r7, #4]
 814a580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 814a582:	687b      	ldr	r3, [r7, #4]
 814a584:	689b      	ldr	r3, [r3, #8]
 814a586:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 814a58a:	683b      	ldr	r3, [r7, #0]
 814a58c:	431a      	orrs	r2, r3
 814a58e:	687b      	ldr	r3, [r7, #4]
 814a590:	609a      	str	r2, [r3, #8]
}
 814a592:	bf00      	nop
 814a594:	370c      	adds	r7, #12
 814a596:	46bd      	mov	sp, r7
 814a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a59c:	4770      	bx	lr
	...

0814a5a0 <LL_USART_SetBaudRate>:
{
 814a5a0:	b480      	push	{r7}
 814a5a2:	b087      	sub	sp, #28
 814a5a4:	af00      	add	r7, sp, #0
 814a5a6:	60f8      	str	r0, [r7, #12]
 814a5a8:	60b9      	str	r1, [r7, #8]
 814a5aa:	607a      	str	r2, [r7, #4]
 814a5ac:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 814a5ae:	687b      	ldr	r3, [r7, #4]
 814a5b0:	2b0b      	cmp	r3, #11
 814a5b2:	d83c      	bhi.n	814a62e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 814a5b4:	6a3b      	ldr	r3, [r7, #32]
 814a5b6:	2b00      	cmp	r3, #0
 814a5b8:	d039      	beq.n	814a62e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 814a5ba:	683b      	ldr	r3, [r7, #0]
 814a5bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 814a5c0:	d122      	bne.n	814a608 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 814a5c2:	687b      	ldr	r3, [r7, #4]
 814a5c4:	b2db      	uxtb	r3, r3
 814a5c6:	461a      	mov	r2, r3
 814a5c8:	4b1c      	ldr	r3, [pc, #112]	@ (814a63c <LL_USART_SetBaudRate+0x9c>)
 814a5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814a5ce:	68ba      	ldr	r2, [r7, #8]
 814a5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 814a5d4:	005a      	lsls	r2, r3, #1
 814a5d6:	6a3b      	ldr	r3, [r7, #32]
 814a5d8:	085b      	lsrs	r3, r3, #1
 814a5da:	441a      	add	r2, r3
 814a5dc:	6a3b      	ldr	r3, [r7, #32]
 814a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 814a5e2:	b29b      	uxth	r3, r3
 814a5e4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 814a5e6:	697a      	ldr	r2, [r7, #20]
 814a5e8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 814a5ec:	4013      	ands	r3, r2
 814a5ee:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 814a5f0:	697b      	ldr	r3, [r7, #20]
 814a5f2:	085b      	lsrs	r3, r3, #1
 814a5f4:	b29b      	uxth	r3, r3
 814a5f6:	f003 0307 	and.w	r3, r3, #7
 814a5fa:	693a      	ldr	r2, [r7, #16]
 814a5fc:	4313      	orrs	r3, r2
 814a5fe:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 814a600:	68fb      	ldr	r3, [r7, #12]
 814a602:	693a      	ldr	r2, [r7, #16]
 814a604:	60da      	str	r2, [r3, #12]
}
 814a606:	e012      	b.n	814a62e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 814a608:	687b      	ldr	r3, [r7, #4]
 814a60a:	b2db      	uxtb	r3, r3
 814a60c:	461a      	mov	r2, r3
 814a60e:	4b0b      	ldr	r3, [pc, #44]	@ (814a63c <LL_USART_SetBaudRate+0x9c>)
 814a610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814a614:	68ba      	ldr	r2, [r7, #8]
 814a616:	fbb2 f2f3 	udiv	r2, r2, r3
 814a61a:	6a3b      	ldr	r3, [r7, #32]
 814a61c:	085b      	lsrs	r3, r3, #1
 814a61e:	441a      	add	r2, r3
 814a620:	6a3b      	ldr	r3, [r7, #32]
 814a622:	fbb2 f3f3 	udiv	r3, r2, r3
 814a626:	b29b      	uxth	r3, r3
 814a628:	461a      	mov	r2, r3
 814a62a:	68fb      	ldr	r3, [r7, #12]
 814a62c:	60da      	str	r2, [r3, #12]
}
 814a62e:	bf00      	nop
 814a630:	371c      	adds	r7, #28
 814a632:	46bd      	mov	sp, r7
 814a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a638:	4770      	bx	lr
 814a63a:	bf00      	nop
 814a63c:	0814eae8 	.word	0x0814eae8

0814a640 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 814a640:	b580      	push	{r7, lr}
 814a642:	b086      	sub	sp, #24
 814a644:	af02      	add	r7, sp, #8
 814a646:	6078      	str	r0, [r7, #4]
 814a648:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 814a64a:	2301      	movs	r3, #1
 814a64c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 814a64e:	2300      	movs	r3, #0
 814a650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 814a652:	6878      	ldr	r0, [r7, #4]
 814a654:	f7ff ff56 	bl	814a504 <LL_USART_IsEnabled>
 814a658:	4603      	mov	r3, r0
 814a65a:	2b00      	cmp	r3, #0
 814a65c:	d17f      	bne.n	814a75e <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 814a65e:	687b      	ldr	r3, [r7, #4]
 814a660:	681a      	ldr	r2, [r3, #0]
 814a662:	4b41      	ldr	r3, [pc, #260]	@ (814a768 <LL_USART_Init+0x128>)
 814a664:	4013      	ands	r3, r2
 814a666:	683a      	ldr	r2, [r7, #0]
 814a668:	6891      	ldr	r1, [r2, #8]
 814a66a:	683a      	ldr	r2, [r7, #0]
 814a66c:	6912      	ldr	r2, [r2, #16]
 814a66e:	4311      	orrs	r1, r2
 814a670:	683a      	ldr	r2, [r7, #0]
 814a672:	6952      	ldr	r2, [r2, #20]
 814a674:	4311      	orrs	r1, r2
 814a676:	683a      	ldr	r2, [r7, #0]
 814a678:	69d2      	ldr	r2, [r2, #28]
 814a67a:	430a      	orrs	r2, r1
 814a67c:	431a      	orrs	r2, r3
 814a67e:	687b      	ldr	r3, [r7, #4]
 814a680:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 814a682:	683b      	ldr	r3, [r7, #0]
 814a684:	68db      	ldr	r3, [r3, #12]
 814a686:	4619      	mov	r1, r3
 814a688:	6878      	ldr	r0, [r7, #4]
 814a68a:	f7ff ff62 	bl	814a552 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 814a68e:	683b      	ldr	r3, [r7, #0]
 814a690:	699b      	ldr	r3, [r3, #24]
 814a692:	4619      	mov	r1, r3
 814a694:	6878      	ldr	r0, [r7, #4]
 814a696:	f7ff ff6f 	bl	814a578 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 814a69a:	687b      	ldr	r3, [r7, #4]
 814a69c:	4a33      	ldr	r2, [pc, #204]	@ (814a76c <LL_USART_Init+0x12c>)
 814a69e:	4293      	cmp	r3, r2
 814a6a0:	d104      	bne.n	814a6ac <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 814a6a2:	4833      	ldr	r0, [pc, #204]	@ (814a770 <LL_USART_Init+0x130>)
 814a6a4:	f7ff f8b4 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a6a8:	60b8      	str	r0, [r7, #8]
 814a6aa:	e03d      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 814a6ac:	687b      	ldr	r3, [r7, #4]
 814a6ae:	4a31      	ldr	r2, [pc, #196]	@ (814a774 <LL_USART_Init+0x134>)
 814a6b0:	4293      	cmp	r3, r2
 814a6b2:	d104      	bne.n	814a6be <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a6b4:	4830      	ldr	r0, [pc, #192]	@ (814a778 <LL_USART_Init+0x138>)
 814a6b6:	f7ff f8ab 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a6ba:	60b8      	str	r0, [r7, #8]
 814a6bc:	e034      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 814a6be:	687b      	ldr	r3, [r7, #4]
 814a6c0:	4a2e      	ldr	r2, [pc, #184]	@ (814a77c <LL_USART_Init+0x13c>)
 814a6c2:	4293      	cmp	r3, r2
 814a6c4:	d104      	bne.n	814a6d0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a6c6:	482c      	ldr	r0, [pc, #176]	@ (814a778 <LL_USART_Init+0x138>)
 814a6c8:	f7ff f8a2 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a6cc:	60b8      	str	r0, [r7, #8]
 814a6ce:	e02b      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 814a6d0:	687b      	ldr	r3, [r7, #4]
 814a6d2:	4a2b      	ldr	r2, [pc, #172]	@ (814a780 <LL_USART_Init+0x140>)
 814a6d4:	4293      	cmp	r3, r2
 814a6d6:	d104      	bne.n	814a6e2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a6d8:	4827      	ldr	r0, [pc, #156]	@ (814a778 <LL_USART_Init+0x138>)
 814a6da:	f7ff f899 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a6de:	60b8      	str	r0, [r7, #8]
 814a6e0:	e022      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 814a6e2:	687b      	ldr	r3, [r7, #4]
 814a6e4:	4a27      	ldr	r2, [pc, #156]	@ (814a784 <LL_USART_Init+0x144>)
 814a6e6:	4293      	cmp	r3, r2
 814a6e8:	d104      	bne.n	814a6f4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a6ea:	4823      	ldr	r0, [pc, #140]	@ (814a778 <LL_USART_Init+0x138>)
 814a6ec:	f7ff f890 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a6f0:	60b8      	str	r0, [r7, #8]
 814a6f2:	e019      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 814a6f4:	687b      	ldr	r3, [r7, #4]
 814a6f6:	4a24      	ldr	r2, [pc, #144]	@ (814a788 <LL_USART_Init+0x148>)
 814a6f8:	4293      	cmp	r3, r2
 814a6fa:	d104      	bne.n	814a706 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 814a6fc:	481c      	ldr	r0, [pc, #112]	@ (814a770 <LL_USART_Init+0x130>)
 814a6fe:	f7ff f887 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a702:	60b8      	str	r0, [r7, #8]
 814a704:	e010      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 814a706:	687b      	ldr	r3, [r7, #4]
 814a708:	4a20      	ldr	r2, [pc, #128]	@ (814a78c <LL_USART_Init+0x14c>)
 814a70a:	4293      	cmp	r3, r2
 814a70c:	d104      	bne.n	814a718 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a70e:	481a      	ldr	r0, [pc, #104]	@ (814a778 <LL_USART_Init+0x138>)
 814a710:	f7ff f87e 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a714:	60b8      	str	r0, [r7, #8]
 814a716:	e007      	b.n	814a728 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 814a718:	687b      	ldr	r3, [r7, #4]
 814a71a:	4a1d      	ldr	r2, [pc, #116]	@ (814a790 <LL_USART_Init+0x150>)
 814a71c:	4293      	cmp	r3, r2
 814a71e:	d103      	bne.n	814a728 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 814a720:	4815      	ldr	r0, [pc, #84]	@ (814a778 <LL_USART_Init+0x138>)
 814a722:	f7ff f875 	bl	8149810 <LL_RCC_GetUSARTClockFreq>
 814a726:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 814a728:	68bb      	ldr	r3, [r7, #8]
 814a72a:	2b00      	cmp	r3, #0
 814a72c:	d011      	beq.n	814a752 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 814a72e:	683b      	ldr	r3, [r7, #0]
 814a730:	685b      	ldr	r3, [r3, #4]
 814a732:	2b00      	cmp	r3, #0
 814a734:	d00d      	beq.n	814a752 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 814a736:	2300      	movs	r3, #0
 814a738:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 814a73a:	683b      	ldr	r3, [r7, #0]
 814a73c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 814a73e:	683b      	ldr	r3, [r7, #0]
 814a740:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 814a742:	683b      	ldr	r3, [r7, #0]
 814a744:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 814a746:	9300      	str	r3, [sp, #0]
 814a748:	460b      	mov	r3, r1
 814a74a:	68b9      	ldr	r1, [r7, #8]
 814a74c:	6878      	ldr	r0, [r7, #4]
 814a74e:	f7ff ff27 	bl	814a5a0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 814a752:	683b      	ldr	r3, [r7, #0]
 814a754:	681b      	ldr	r3, [r3, #0]
 814a756:	4619      	mov	r1, r3
 814a758:	6878      	ldr	r0, [r7, #4]
 814a75a:	f7ff fee6 	bl	814a52a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 814a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 814a760:	4618      	mov	r0, r3
 814a762:	3710      	adds	r7, #16
 814a764:	46bd      	mov	sp, r7
 814a766:	bd80      	pop	{r7, pc}
 814a768:	efff69f3 	.word	0xefff69f3
 814a76c:	40011000 	.word	0x40011000
 814a770:	07000308 	.word	0x07000308
 814a774:	40004400 	.word	0x40004400
 814a778:	07000008 	.word	0x07000008
 814a77c:	40004800 	.word	0x40004800
 814a780:	40004c00 	.word	0x40004c00
 814a784:	40005000 	.word	0x40005000
 814a788:	40011400 	.word	0x40011400
 814a78c:	40007800 	.word	0x40007800
 814a790:	40007c00 	.word	0x40007c00

0814a794 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 814a794:	b084      	sub	sp, #16
 814a796:	b580      	push	{r7, lr}
 814a798:	b084      	sub	sp, #16
 814a79a:	af00      	add	r7, sp, #0
 814a79c:	6078      	str	r0, [r7, #4]
 814a79e:	f107 001c 	add.w	r0, r7, #28
 814a7a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 814a7a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 814a7aa:	2b01      	cmp	r3, #1
 814a7ac:	d123      	bne.n	814a7f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 814a7ae:	687b      	ldr	r3, [r7, #4]
 814a7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814a7b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 814a7b6:	687b      	ldr	r3, [r7, #4]
 814a7b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 814a7ba:	687b      	ldr	r3, [r7, #4]
 814a7bc:	68db      	ldr	r3, [r3, #12]
 814a7be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 814a7c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 814a7c6:	687a      	ldr	r2, [r7, #4]
 814a7c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 814a7ca:	687b      	ldr	r3, [r7, #4]
 814a7cc:	68db      	ldr	r3, [r3, #12]
 814a7ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 814a7d2:	687b      	ldr	r3, [r7, #4]
 814a7d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 814a7d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 814a7da:	2b01      	cmp	r3, #1
 814a7dc:	d105      	bne.n	814a7ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 814a7de:	687b      	ldr	r3, [r7, #4]
 814a7e0:	68db      	ldr	r3, [r3, #12]
 814a7e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 814a7e6:	687b      	ldr	r3, [r7, #4]
 814a7e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 814a7ea:	6878      	ldr	r0, [r7, #4]
 814a7ec:	f001 faf0 	bl	814bdd0 <USB_CoreReset>
 814a7f0:	4603      	mov	r3, r0
 814a7f2:	73fb      	strb	r3, [r7, #15]
 814a7f4:	e01b      	b.n	814a82e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 814a7f6:	687b      	ldr	r3, [r7, #4]
 814a7f8:	68db      	ldr	r3, [r3, #12]
 814a7fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 814a7fe:	687b      	ldr	r3, [r7, #4]
 814a800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 814a802:	6878      	ldr	r0, [r7, #4]
 814a804:	f001 fae4 	bl	814bdd0 <USB_CoreReset>
 814a808:	4603      	mov	r3, r0
 814a80a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 814a80c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 814a810:	2b00      	cmp	r3, #0
 814a812:	d106      	bne.n	814a822 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 814a814:	687b      	ldr	r3, [r7, #4]
 814a816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814a818:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 814a81c:	687b      	ldr	r3, [r7, #4]
 814a81e:	639a      	str	r2, [r3, #56]	@ 0x38
 814a820:	e005      	b.n	814a82e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 814a822:	687b      	ldr	r3, [r7, #4]
 814a824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814a826:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 814a82a:	687b      	ldr	r3, [r7, #4]
 814a82c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 814a82e:	7fbb      	ldrb	r3, [r7, #30]
 814a830:	2b01      	cmp	r3, #1
 814a832:	d118      	bne.n	814a866 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 814a834:	687b      	ldr	r3, [r7, #4]
 814a836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 814a838:	b29a      	uxth	r2, r3
 814a83a:	687b      	ldr	r3, [r7, #4]
 814a83c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 814a83e:	687b      	ldr	r3, [r7, #4]
 814a840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 814a842:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 814a846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 814a84a:	687a      	ldr	r2, [r7, #4]
 814a84c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 814a84e:	687b      	ldr	r3, [r7, #4]
 814a850:	689b      	ldr	r3, [r3, #8]
 814a852:	f043 0206 	orr.w	r2, r3, #6
 814a856:	687b      	ldr	r3, [r7, #4]
 814a858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 814a85a:	687b      	ldr	r3, [r7, #4]
 814a85c:	689b      	ldr	r3, [r3, #8]
 814a85e:	f043 0220 	orr.w	r2, r3, #32
 814a862:	687b      	ldr	r3, [r7, #4]
 814a864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 814a866:	7bfb      	ldrb	r3, [r7, #15]
}
 814a868:	4618      	mov	r0, r3
 814a86a:	3710      	adds	r7, #16
 814a86c:	46bd      	mov	sp, r7
 814a86e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 814a872:	b004      	add	sp, #16
 814a874:	4770      	bx	lr
	...

0814a878 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 814a878:	b480      	push	{r7}
 814a87a:	b087      	sub	sp, #28
 814a87c:	af00      	add	r7, sp, #0
 814a87e:	60f8      	str	r0, [r7, #12]
 814a880:	60b9      	str	r1, [r7, #8]
 814a882:	4613      	mov	r3, r2
 814a884:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 814a886:	79fb      	ldrb	r3, [r7, #7]
 814a888:	2b02      	cmp	r3, #2
 814a88a:	d165      	bne.n	814a958 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 814a88c:	68bb      	ldr	r3, [r7, #8]
 814a88e:	4a41      	ldr	r2, [pc, #260]	@ (814a994 <USB_SetTurnaroundTime+0x11c>)
 814a890:	4293      	cmp	r3, r2
 814a892:	d906      	bls.n	814a8a2 <USB_SetTurnaroundTime+0x2a>
 814a894:	68bb      	ldr	r3, [r7, #8]
 814a896:	4a40      	ldr	r2, [pc, #256]	@ (814a998 <USB_SetTurnaroundTime+0x120>)
 814a898:	4293      	cmp	r3, r2
 814a89a:	d202      	bcs.n	814a8a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 814a89c:	230f      	movs	r3, #15
 814a89e:	617b      	str	r3, [r7, #20]
 814a8a0:	e062      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 814a8a2:	68bb      	ldr	r3, [r7, #8]
 814a8a4:	4a3c      	ldr	r2, [pc, #240]	@ (814a998 <USB_SetTurnaroundTime+0x120>)
 814a8a6:	4293      	cmp	r3, r2
 814a8a8:	d306      	bcc.n	814a8b8 <USB_SetTurnaroundTime+0x40>
 814a8aa:	68bb      	ldr	r3, [r7, #8]
 814a8ac:	4a3b      	ldr	r2, [pc, #236]	@ (814a99c <USB_SetTurnaroundTime+0x124>)
 814a8ae:	4293      	cmp	r3, r2
 814a8b0:	d202      	bcs.n	814a8b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 814a8b2:	230e      	movs	r3, #14
 814a8b4:	617b      	str	r3, [r7, #20]
 814a8b6:	e057      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 814a8b8:	68bb      	ldr	r3, [r7, #8]
 814a8ba:	4a38      	ldr	r2, [pc, #224]	@ (814a99c <USB_SetTurnaroundTime+0x124>)
 814a8bc:	4293      	cmp	r3, r2
 814a8be:	d306      	bcc.n	814a8ce <USB_SetTurnaroundTime+0x56>
 814a8c0:	68bb      	ldr	r3, [r7, #8]
 814a8c2:	4a37      	ldr	r2, [pc, #220]	@ (814a9a0 <USB_SetTurnaroundTime+0x128>)
 814a8c4:	4293      	cmp	r3, r2
 814a8c6:	d202      	bcs.n	814a8ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 814a8c8:	230d      	movs	r3, #13
 814a8ca:	617b      	str	r3, [r7, #20]
 814a8cc:	e04c      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 814a8ce:	68bb      	ldr	r3, [r7, #8]
 814a8d0:	4a33      	ldr	r2, [pc, #204]	@ (814a9a0 <USB_SetTurnaroundTime+0x128>)
 814a8d2:	4293      	cmp	r3, r2
 814a8d4:	d306      	bcc.n	814a8e4 <USB_SetTurnaroundTime+0x6c>
 814a8d6:	68bb      	ldr	r3, [r7, #8]
 814a8d8:	4a32      	ldr	r2, [pc, #200]	@ (814a9a4 <USB_SetTurnaroundTime+0x12c>)
 814a8da:	4293      	cmp	r3, r2
 814a8dc:	d802      	bhi.n	814a8e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 814a8de:	230c      	movs	r3, #12
 814a8e0:	617b      	str	r3, [r7, #20]
 814a8e2:	e041      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 814a8e4:	68bb      	ldr	r3, [r7, #8]
 814a8e6:	4a2f      	ldr	r2, [pc, #188]	@ (814a9a4 <USB_SetTurnaroundTime+0x12c>)
 814a8e8:	4293      	cmp	r3, r2
 814a8ea:	d906      	bls.n	814a8fa <USB_SetTurnaroundTime+0x82>
 814a8ec:	68bb      	ldr	r3, [r7, #8]
 814a8ee:	4a2e      	ldr	r2, [pc, #184]	@ (814a9a8 <USB_SetTurnaroundTime+0x130>)
 814a8f0:	4293      	cmp	r3, r2
 814a8f2:	d802      	bhi.n	814a8fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 814a8f4:	230b      	movs	r3, #11
 814a8f6:	617b      	str	r3, [r7, #20]
 814a8f8:	e036      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 814a8fa:	68bb      	ldr	r3, [r7, #8]
 814a8fc:	4a2a      	ldr	r2, [pc, #168]	@ (814a9a8 <USB_SetTurnaroundTime+0x130>)
 814a8fe:	4293      	cmp	r3, r2
 814a900:	d906      	bls.n	814a910 <USB_SetTurnaroundTime+0x98>
 814a902:	68bb      	ldr	r3, [r7, #8]
 814a904:	4a29      	ldr	r2, [pc, #164]	@ (814a9ac <USB_SetTurnaroundTime+0x134>)
 814a906:	4293      	cmp	r3, r2
 814a908:	d802      	bhi.n	814a910 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 814a90a:	230a      	movs	r3, #10
 814a90c:	617b      	str	r3, [r7, #20]
 814a90e:	e02b      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 814a910:	68bb      	ldr	r3, [r7, #8]
 814a912:	4a26      	ldr	r2, [pc, #152]	@ (814a9ac <USB_SetTurnaroundTime+0x134>)
 814a914:	4293      	cmp	r3, r2
 814a916:	d906      	bls.n	814a926 <USB_SetTurnaroundTime+0xae>
 814a918:	68bb      	ldr	r3, [r7, #8]
 814a91a:	4a25      	ldr	r2, [pc, #148]	@ (814a9b0 <USB_SetTurnaroundTime+0x138>)
 814a91c:	4293      	cmp	r3, r2
 814a91e:	d202      	bcs.n	814a926 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 814a920:	2309      	movs	r3, #9
 814a922:	617b      	str	r3, [r7, #20]
 814a924:	e020      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 814a926:	68bb      	ldr	r3, [r7, #8]
 814a928:	4a21      	ldr	r2, [pc, #132]	@ (814a9b0 <USB_SetTurnaroundTime+0x138>)
 814a92a:	4293      	cmp	r3, r2
 814a92c:	d306      	bcc.n	814a93c <USB_SetTurnaroundTime+0xc4>
 814a92e:	68bb      	ldr	r3, [r7, #8]
 814a930:	4a20      	ldr	r2, [pc, #128]	@ (814a9b4 <USB_SetTurnaroundTime+0x13c>)
 814a932:	4293      	cmp	r3, r2
 814a934:	d802      	bhi.n	814a93c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 814a936:	2308      	movs	r3, #8
 814a938:	617b      	str	r3, [r7, #20]
 814a93a:	e015      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 814a93c:	68bb      	ldr	r3, [r7, #8]
 814a93e:	4a1d      	ldr	r2, [pc, #116]	@ (814a9b4 <USB_SetTurnaroundTime+0x13c>)
 814a940:	4293      	cmp	r3, r2
 814a942:	d906      	bls.n	814a952 <USB_SetTurnaroundTime+0xda>
 814a944:	68bb      	ldr	r3, [r7, #8]
 814a946:	4a1c      	ldr	r2, [pc, #112]	@ (814a9b8 <USB_SetTurnaroundTime+0x140>)
 814a948:	4293      	cmp	r3, r2
 814a94a:	d202      	bcs.n	814a952 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 814a94c:	2307      	movs	r3, #7
 814a94e:	617b      	str	r3, [r7, #20]
 814a950:	e00a      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 814a952:	2306      	movs	r3, #6
 814a954:	617b      	str	r3, [r7, #20]
 814a956:	e007      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 814a958:	79fb      	ldrb	r3, [r7, #7]
 814a95a:	2b00      	cmp	r3, #0
 814a95c:	d102      	bne.n	814a964 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 814a95e:	2309      	movs	r3, #9
 814a960:	617b      	str	r3, [r7, #20]
 814a962:	e001      	b.n	814a968 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 814a964:	2309      	movs	r3, #9
 814a966:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 814a968:	68fb      	ldr	r3, [r7, #12]
 814a96a:	68db      	ldr	r3, [r3, #12]
 814a96c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 814a970:	68fb      	ldr	r3, [r7, #12]
 814a972:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 814a974:	68fb      	ldr	r3, [r7, #12]
 814a976:	68da      	ldr	r2, [r3, #12]
 814a978:	697b      	ldr	r3, [r7, #20]
 814a97a:	029b      	lsls	r3, r3, #10
 814a97c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 814a980:	431a      	orrs	r2, r3
 814a982:	68fb      	ldr	r3, [r7, #12]
 814a984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 814a986:	2300      	movs	r3, #0
}
 814a988:	4618      	mov	r0, r3
 814a98a:	371c      	adds	r7, #28
 814a98c:	46bd      	mov	sp, r7
 814a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a992:	4770      	bx	lr
 814a994:	00d8acbf 	.word	0x00d8acbf
 814a998:	00e4e1c0 	.word	0x00e4e1c0
 814a99c:	00f42400 	.word	0x00f42400
 814a9a0:	01067380 	.word	0x01067380
 814a9a4:	011a499f 	.word	0x011a499f
 814a9a8:	01312cff 	.word	0x01312cff
 814a9ac:	014ca43f 	.word	0x014ca43f
 814a9b0:	016e3600 	.word	0x016e3600
 814a9b4:	01a6ab1f 	.word	0x01a6ab1f
 814a9b8:	01e84800 	.word	0x01e84800

0814a9bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 814a9bc:	b480      	push	{r7}
 814a9be:	b083      	sub	sp, #12
 814a9c0:	af00      	add	r7, sp, #0
 814a9c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 814a9c4:	687b      	ldr	r3, [r7, #4]
 814a9c6:	689b      	ldr	r3, [r3, #8]
 814a9c8:	f043 0201 	orr.w	r2, r3, #1
 814a9cc:	687b      	ldr	r3, [r7, #4]
 814a9ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 814a9d0:	2300      	movs	r3, #0
}
 814a9d2:	4618      	mov	r0, r3
 814a9d4:	370c      	adds	r7, #12
 814a9d6:	46bd      	mov	sp, r7
 814a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a9dc:	4770      	bx	lr

0814a9de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 814a9de:	b480      	push	{r7}
 814a9e0:	b083      	sub	sp, #12
 814a9e2:	af00      	add	r7, sp, #0
 814a9e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 814a9e6:	687b      	ldr	r3, [r7, #4]
 814a9e8:	689b      	ldr	r3, [r3, #8]
 814a9ea:	f023 0201 	bic.w	r2, r3, #1
 814a9ee:	687b      	ldr	r3, [r7, #4]
 814a9f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 814a9f2:	2300      	movs	r3, #0
}
 814a9f4:	4618      	mov	r0, r3
 814a9f6:	370c      	adds	r7, #12
 814a9f8:	46bd      	mov	sp, r7
 814a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 814a9fe:	4770      	bx	lr

0814aa00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 814aa00:	b580      	push	{r7, lr}
 814aa02:	b084      	sub	sp, #16
 814aa04:	af00      	add	r7, sp, #0
 814aa06:	6078      	str	r0, [r7, #4]
 814aa08:	460b      	mov	r3, r1
 814aa0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 814aa0c:	2300      	movs	r3, #0
 814aa0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 814aa10:	687b      	ldr	r3, [r7, #4]
 814aa12:	68db      	ldr	r3, [r3, #12]
 814aa14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 814aa18:	687b      	ldr	r3, [r7, #4]
 814aa1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 814aa1c:	78fb      	ldrb	r3, [r7, #3]
 814aa1e:	2b01      	cmp	r3, #1
 814aa20:	d115      	bne.n	814aa4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 814aa22:	687b      	ldr	r3, [r7, #4]
 814aa24:	68db      	ldr	r3, [r3, #12]
 814aa26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 814aa2a:	687b      	ldr	r3, [r7, #4]
 814aa2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 814aa2e:	200a      	movs	r0, #10
 814aa30:	f7f7 ffa2 	bl	8142978 <HAL_Delay>
      ms += 10U;
 814aa34:	68fb      	ldr	r3, [r7, #12]
 814aa36:	330a      	adds	r3, #10
 814aa38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 814aa3a:	6878      	ldr	r0, [r7, #4]
 814aa3c:	f001 f939 	bl	814bcb2 <USB_GetMode>
 814aa40:	4603      	mov	r3, r0
 814aa42:	2b01      	cmp	r3, #1
 814aa44:	d01e      	beq.n	814aa84 <USB_SetCurrentMode+0x84>
 814aa46:	68fb      	ldr	r3, [r7, #12]
 814aa48:	2bc7      	cmp	r3, #199	@ 0xc7
 814aa4a:	d9f0      	bls.n	814aa2e <USB_SetCurrentMode+0x2e>
 814aa4c:	e01a      	b.n	814aa84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 814aa4e:	78fb      	ldrb	r3, [r7, #3]
 814aa50:	2b00      	cmp	r3, #0
 814aa52:	d115      	bne.n	814aa80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 814aa54:	687b      	ldr	r3, [r7, #4]
 814aa56:	68db      	ldr	r3, [r3, #12]
 814aa58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 814aa5c:	687b      	ldr	r3, [r7, #4]
 814aa5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 814aa60:	200a      	movs	r0, #10
 814aa62:	f7f7 ff89 	bl	8142978 <HAL_Delay>
      ms += 10U;
 814aa66:	68fb      	ldr	r3, [r7, #12]
 814aa68:	330a      	adds	r3, #10
 814aa6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 814aa6c:	6878      	ldr	r0, [r7, #4]
 814aa6e:	f001 f920 	bl	814bcb2 <USB_GetMode>
 814aa72:	4603      	mov	r3, r0
 814aa74:	2b00      	cmp	r3, #0
 814aa76:	d005      	beq.n	814aa84 <USB_SetCurrentMode+0x84>
 814aa78:	68fb      	ldr	r3, [r7, #12]
 814aa7a:	2bc7      	cmp	r3, #199	@ 0xc7
 814aa7c:	d9f0      	bls.n	814aa60 <USB_SetCurrentMode+0x60>
 814aa7e:	e001      	b.n	814aa84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 814aa80:	2301      	movs	r3, #1
 814aa82:	e005      	b.n	814aa90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 814aa84:	68fb      	ldr	r3, [r7, #12]
 814aa86:	2bc8      	cmp	r3, #200	@ 0xc8
 814aa88:	d101      	bne.n	814aa8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 814aa8a:	2301      	movs	r3, #1
 814aa8c:	e000      	b.n	814aa90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 814aa8e:	2300      	movs	r3, #0
}
 814aa90:	4618      	mov	r0, r3
 814aa92:	3710      	adds	r7, #16
 814aa94:	46bd      	mov	sp, r7
 814aa96:	bd80      	pop	{r7, pc}

0814aa98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 814aa98:	b084      	sub	sp, #16
 814aa9a:	b580      	push	{r7, lr}
 814aa9c:	b086      	sub	sp, #24
 814aa9e:	af00      	add	r7, sp, #0
 814aaa0:	6078      	str	r0, [r7, #4]
 814aaa2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 814aaa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 814aaaa:	2300      	movs	r3, #0
 814aaac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814aaae:	687b      	ldr	r3, [r7, #4]
 814aab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 814aab2:	2300      	movs	r3, #0
 814aab4:	613b      	str	r3, [r7, #16]
 814aab6:	e009      	b.n	814aacc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 814aab8:	687a      	ldr	r2, [r7, #4]
 814aaba:	693b      	ldr	r3, [r7, #16]
 814aabc:	3340      	adds	r3, #64	@ 0x40
 814aabe:	009b      	lsls	r3, r3, #2
 814aac0:	4413      	add	r3, r2
 814aac2:	2200      	movs	r2, #0
 814aac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 814aac6:	693b      	ldr	r3, [r7, #16]
 814aac8:	3301      	adds	r3, #1
 814aaca:	613b      	str	r3, [r7, #16]
 814aacc:	693b      	ldr	r3, [r7, #16]
 814aace:	2b0e      	cmp	r3, #14
 814aad0:	d9f2      	bls.n	814aab8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 814aad2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 814aad6:	2b00      	cmp	r3, #0
 814aad8:	d11c      	bne.n	814ab14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 814aada:	68fb      	ldr	r3, [r7, #12]
 814aadc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814aae0:	685b      	ldr	r3, [r3, #4]
 814aae2:	68fa      	ldr	r2, [r7, #12]
 814aae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814aae8:	f043 0302 	orr.w	r3, r3, #2
 814aaec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 814aaee:	687b      	ldr	r3, [r7, #4]
 814aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814aaf2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 814aaf6:	687b      	ldr	r3, [r7, #4]
 814aaf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 814aafa:	687b      	ldr	r3, [r7, #4]
 814aafc:	681b      	ldr	r3, [r3, #0]
 814aafe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 814ab02:	687b      	ldr	r3, [r7, #4]
 814ab04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 814ab06:	687b      	ldr	r3, [r7, #4]
 814ab08:	681b      	ldr	r3, [r3, #0]
 814ab0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 814ab0e:	687b      	ldr	r3, [r7, #4]
 814ab10:	601a      	str	r2, [r3, #0]
 814ab12:	e005      	b.n	814ab20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 814ab14:	687b      	ldr	r3, [r7, #4]
 814ab16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 814ab18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 814ab1c:	687b      	ldr	r3, [r7, #4]
 814ab1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 814ab20:	68fb      	ldr	r3, [r7, #12]
 814ab22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 814ab26:	461a      	mov	r2, r3
 814ab28:	2300      	movs	r3, #0
 814ab2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 814ab2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 814ab30:	2b01      	cmp	r3, #1
 814ab32:	d10d      	bne.n	814ab50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 814ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 814ab38:	2b00      	cmp	r3, #0
 814ab3a:	d104      	bne.n	814ab46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 814ab3c:	2100      	movs	r1, #0
 814ab3e:	6878      	ldr	r0, [r7, #4]
 814ab40:	f000 f968 	bl	814ae14 <USB_SetDevSpeed>
 814ab44:	e008      	b.n	814ab58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 814ab46:	2101      	movs	r1, #1
 814ab48:	6878      	ldr	r0, [r7, #4]
 814ab4a:	f000 f963 	bl	814ae14 <USB_SetDevSpeed>
 814ab4e:	e003      	b.n	814ab58 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 814ab50:	2103      	movs	r1, #3
 814ab52:	6878      	ldr	r0, [r7, #4]
 814ab54:	f000 f95e 	bl	814ae14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 814ab58:	2110      	movs	r1, #16
 814ab5a:	6878      	ldr	r0, [r7, #4]
 814ab5c:	f000 f8fa 	bl	814ad54 <USB_FlushTxFifo>
 814ab60:	4603      	mov	r3, r0
 814ab62:	2b00      	cmp	r3, #0
 814ab64:	d001      	beq.n	814ab6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 814ab66:	2301      	movs	r3, #1
 814ab68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 814ab6a:	6878      	ldr	r0, [r7, #4]
 814ab6c:	f000 f924 	bl	814adb8 <USB_FlushRxFifo>
 814ab70:	4603      	mov	r3, r0
 814ab72:	2b00      	cmp	r3, #0
 814ab74:	d001      	beq.n	814ab7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 814ab76:	2301      	movs	r3, #1
 814ab78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 814ab7a:	68fb      	ldr	r3, [r7, #12]
 814ab7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814ab80:	461a      	mov	r2, r3
 814ab82:	2300      	movs	r3, #0
 814ab84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 814ab86:	68fb      	ldr	r3, [r7, #12]
 814ab88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814ab8c:	461a      	mov	r2, r3
 814ab8e:	2300      	movs	r3, #0
 814ab90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 814ab92:	68fb      	ldr	r3, [r7, #12]
 814ab94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814ab98:	461a      	mov	r2, r3
 814ab9a:	2300      	movs	r3, #0
 814ab9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 814ab9e:	2300      	movs	r3, #0
 814aba0:	613b      	str	r3, [r7, #16]
 814aba2:	e043      	b.n	814ac2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 814aba4:	693b      	ldr	r3, [r7, #16]
 814aba6:	015a      	lsls	r2, r3, #5
 814aba8:	68fb      	ldr	r3, [r7, #12]
 814abaa:	4413      	add	r3, r2
 814abac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814abb0:	681b      	ldr	r3, [r3, #0]
 814abb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814abb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814abba:	d118      	bne.n	814abee <USB_DevInit+0x156>
    {
      if (i == 0U)
 814abbc:	693b      	ldr	r3, [r7, #16]
 814abbe:	2b00      	cmp	r3, #0
 814abc0:	d10a      	bne.n	814abd8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 814abc2:	693b      	ldr	r3, [r7, #16]
 814abc4:	015a      	lsls	r2, r3, #5
 814abc6:	68fb      	ldr	r3, [r7, #12]
 814abc8:	4413      	add	r3, r2
 814abca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814abce:	461a      	mov	r2, r3
 814abd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 814abd4:	6013      	str	r3, [r2, #0]
 814abd6:	e013      	b.n	814ac00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 814abd8:	693b      	ldr	r3, [r7, #16]
 814abda:	015a      	lsls	r2, r3, #5
 814abdc:	68fb      	ldr	r3, [r7, #12]
 814abde:	4413      	add	r3, r2
 814abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814abe4:	461a      	mov	r2, r3
 814abe6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 814abea:	6013      	str	r3, [r2, #0]
 814abec:	e008      	b.n	814ac00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 814abee:	693b      	ldr	r3, [r7, #16]
 814abf0:	015a      	lsls	r2, r3, #5
 814abf2:	68fb      	ldr	r3, [r7, #12]
 814abf4:	4413      	add	r3, r2
 814abf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814abfa:	461a      	mov	r2, r3
 814abfc:	2300      	movs	r3, #0
 814abfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 814ac00:	693b      	ldr	r3, [r7, #16]
 814ac02:	015a      	lsls	r2, r3, #5
 814ac04:	68fb      	ldr	r3, [r7, #12]
 814ac06:	4413      	add	r3, r2
 814ac08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814ac0c:	461a      	mov	r2, r3
 814ac0e:	2300      	movs	r3, #0
 814ac10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 814ac12:	693b      	ldr	r3, [r7, #16]
 814ac14:	015a      	lsls	r2, r3, #5
 814ac16:	68fb      	ldr	r3, [r7, #12]
 814ac18:	4413      	add	r3, r2
 814ac1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814ac1e:	461a      	mov	r2, r3
 814ac20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 814ac24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 814ac26:	693b      	ldr	r3, [r7, #16]
 814ac28:	3301      	adds	r3, #1
 814ac2a:	613b      	str	r3, [r7, #16]
 814ac2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 814ac30:	461a      	mov	r2, r3
 814ac32:	693b      	ldr	r3, [r7, #16]
 814ac34:	4293      	cmp	r3, r2
 814ac36:	d3b5      	bcc.n	814aba4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 814ac38:	2300      	movs	r3, #0
 814ac3a:	613b      	str	r3, [r7, #16]
 814ac3c:	e043      	b.n	814acc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 814ac3e:	693b      	ldr	r3, [r7, #16]
 814ac40:	015a      	lsls	r2, r3, #5
 814ac42:	68fb      	ldr	r3, [r7, #12]
 814ac44:	4413      	add	r3, r2
 814ac46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ac4a:	681b      	ldr	r3, [r3, #0]
 814ac4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814ac50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814ac54:	d118      	bne.n	814ac88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 814ac56:	693b      	ldr	r3, [r7, #16]
 814ac58:	2b00      	cmp	r3, #0
 814ac5a:	d10a      	bne.n	814ac72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 814ac5c:	693b      	ldr	r3, [r7, #16]
 814ac5e:	015a      	lsls	r2, r3, #5
 814ac60:	68fb      	ldr	r3, [r7, #12]
 814ac62:	4413      	add	r3, r2
 814ac64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ac68:	461a      	mov	r2, r3
 814ac6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 814ac6e:	6013      	str	r3, [r2, #0]
 814ac70:	e013      	b.n	814ac9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 814ac72:	693b      	ldr	r3, [r7, #16]
 814ac74:	015a      	lsls	r2, r3, #5
 814ac76:	68fb      	ldr	r3, [r7, #12]
 814ac78:	4413      	add	r3, r2
 814ac7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ac7e:	461a      	mov	r2, r3
 814ac80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 814ac84:	6013      	str	r3, [r2, #0]
 814ac86:	e008      	b.n	814ac9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 814ac88:	693b      	ldr	r3, [r7, #16]
 814ac8a:	015a      	lsls	r2, r3, #5
 814ac8c:	68fb      	ldr	r3, [r7, #12]
 814ac8e:	4413      	add	r3, r2
 814ac90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ac94:	461a      	mov	r2, r3
 814ac96:	2300      	movs	r3, #0
 814ac98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 814ac9a:	693b      	ldr	r3, [r7, #16]
 814ac9c:	015a      	lsls	r2, r3, #5
 814ac9e:	68fb      	ldr	r3, [r7, #12]
 814aca0:	4413      	add	r3, r2
 814aca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814aca6:	461a      	mov	r2, r3
 814aca8:	2300      	movs	r3, #0
 814acaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 814acac:	693b      	ldr	r3, [r7, #16]
 814acae:	015a      	lsls	r2, r3, #5
 814acb0:	68fb      	ldr	r3, [r7, #12]
 814acb2:	4413      	add	r3, r2
 814acb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814acb8:	461a      	mov	r2, r3
 814acba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 814acbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 814acc0:	693b      	ldr	r3, [r7, #16]
 814acc2:	3301      	adds	r3, #1
 814acc4:	613b      	str	r3, [r7, #16]
 814acc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 814acca:	461a      	mov	r2, r3
 814accc:	693b      	ldr	r3, [r7, #16]
 814acce:	4293      	cmp	r3, r2
 814acd0:	d3b5      	bcc.n	814ac3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 814acd2:	68fb      	ldr	r3, [r7, #12]
 814acd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814acd8:	691b      	ldr	r3, [r3, #16]
 814acda:	68fa      	ldr	r2, [r7, #12]
 814acdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814ace0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 814ace4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 814ace6:	687b      	ldr	r3, [r7, #4]
 814ace8:	2200      	movs	r2, #0
 814acea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 814acec:	687b      	ldr	r3, [r7, #4]
 814acee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 814acf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 814acf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 814acf8:	2b00      	cmp	r3, #0
 814acfa:	d105      	bne.n	814ad08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 814acfc:	687b      	ldr	r3, [r7, #4]
 814acfe:	699b      	ldr	r3, [r3, #24]
 814ad00:	f043 0210 	orr.w	r2, r3, #16
 814ad04:	687b      	ldr	r3, [r7, #4]
 814ad06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 814ad08:	687b      	ldr	r3, [r7, #4]
 814ad0a:	699a      	ldr	r2, [r3, #24]
 814ad0c:	4b10      	ldr	r3, [pc, #64]	@ (814ad50 <USB_DevInit+0x2b8>)
 814ad0e:	4313      	orrs	r3, r2
 814ad10:	687a      	ldr	r2, [r7, #4]
 814ad12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 814ad14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 814ad18:	2b00      	cmp	r3, #0
 814ad1a:	d005      	beq.n	814ad28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 814ad1c:	687b      	ldr	r3, [r7, #4]
 814ad1e:	699b      	ldr	r3, [r3, #24]
 814ad20:	f043 0208 	orr.w	r2, r3, #8
 814ad24:	687b      	ldr	r3, [r7, #4]
 814ad26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 814ad28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 814ad2c:	2b01      	cmp	r3, #1
 814ad2e:	d107      	bne.n	814ad40 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 814ad30:	687b      	ldr	r3, [r7, #4]
 814ad32:	699b      	ldr	r3, [r3, #24]
 814ad34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 814ad38:	f043 0304 	orr.w	r3, r3, #4
 814ad3c:	687a      	ldr	r2, [r7, #4]
 814ad3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 814ad40:	7dfb      	ldrb	r3, [r7, #23]
}
 814ad42:	4618      	mov	r0, r3
 814ad44:	3718      	adds	r7, #24
 814ad46:	46bd      	mov	sp, r7
 814ad48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 814ad4c:	b004      	add	sp, #16
 814ad4e:	4770      	bx	lr
 814ad50:	803c3800 	.word	0x803c3800

0814ad54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 814ad54:	b480      	push	{r7}
 814ad56:	b085      	sub	sp, #20
 814ad58:	af00      	add	r7, sp, #0
 814ad5a:	6078      	str	r0, [r7, #4]
 814ad5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 814ad5e:	2300      	movs	r3, #0
 814ad60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 814ad62:	68fb      	ldr	r3, [r7, #12]
 814ad64:	3301      	adds	r3, #1
 814ad66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814ad68:	68fb      	ldr	r3, [r7, #12]
 814ad6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814ad6e:	d901      	bls.n	814ad74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 814ad70:	2303      	movs	r3, #3
 814ad72:	e01b      	b.n	814adac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 814ad74:	687b      	ldr	r3, [r7, #4]
 814ad76:	691b      	ldr	r3, [r3, #16]
 814ad78:	2b00      	cmp	r3, #0
 814ad7a:	daf2      	bge.n	814ad62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 814ad7c:	2300      	movs	r3, #0
 814ad7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 814ad80:	683b      	ldr	r3, [r7, #0]
 814ad82:	019b      	lsls	r3, r3, #6
 814ad84:	f043 0220 	orr.w	r2, r3, #32
 814ad88:	687b      	ldr	r3, [r7, #4]
 814ad8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 814ad8c:	68fb      	ldr	r3, [r7, #12]
 814ad8e:	3301      	adds	r3, #1
 814ad90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814ad92:	68fb      	ldr	r3, [r7, #12]
 814ad94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814ad98:	d901      	bls.n	814ad9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 814ad9a:	2303      	movs	r3, #3
 814ad9c:	e006      	b.n	814adac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 814ad9e:	687b      	ldr	r3, [r7, #4]
 814ada0:	691b      	ldr	r3, [r3, #16]
 814ada2:	f003 0320 	and.w	r3, r3, #32
 814ada6:	2b20      	cmp	r3, #32
 814ada8:	d0f0      	beq.n	814ad8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 814adaa:	2300      	movs	r3, #0
}
 814adac:	4618      	mov	r0, r3
 814adae:	3714      	adds	r7, #20
 814adb0:	46bd      	mov	sp, r7
 814adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 814adb6:	4770      	bx	lr

0814adb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 814adb8:	b480      	push	{r7}
 814adba:	b085      	sub	sp, #20
 814adbc:	af00      	add	r7, sp, #0
 814adbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 814adc0:	2300      	movs	r3, #0
 814adc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 814adc4:	68fb      	ldr	r3, [r7, #12]
 814adc6:	3301      	adds	r3, #1
 814adc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814adca:	68fb      	ldr	r3, [r7, #12]
 814adcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814add0:	d901      	bls.n	814add6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 814add2:	2303      	movs	r3, #3
 814add4:	e018      	b.n	814ae08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 814add6:	687b      	ldr	r3, [r7, #4]
 814add8:	691b      	ldr	r3, [r3, #16]
 814adda:	2b00      	cmp	r3, #0
 814addc:	daf2      	bge.n	814adc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 814adde:	2300      	movs	r3, #0
 814ade0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 814ade2:	687b      	ldr	r3, [r7, #4]
 814ade4:	2210      	movs	r2, #16
 814ade6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 814ade8:	68fb      	ldr	r3, [r7, #12]
 814adea:	3301      	adds	r3, #1
 814adec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814adee:	68fb      	ldr	r3, [r7, #12]
 814adf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814adf4:	d901      	bls.n	814adfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 814adf6:	2303      	movs	r3, #3
 814adf8:	e006      	b.n	814ae08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 814adfa:	687b      	ldr	r3, [r7, #4]
 814adfc:	691b      	ldr	r3, [r3, #16]
 814adfe:	f003 0310 	and.w	r3, r3, #16
 814ae02:	2b10      	cmp	r3, #16
 814ae04:	d0f0      	beq.n	814ade8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 814ae06:	2300      	movs	r3, #0
}
 814ae08:	4618      	mov	r0, r3
 814ae0a:	3714      	adds	r7, #20
 814ae0c:	46bd      	mov	sp, r7
 814ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814ae12:	4770      	bx	lr

0814ae14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 814ae14:	b480      	push	{r7}
 814ae16:	b085      	sub	sp, #20
 814ae18:	af00      	add	r7, sp, #0
 814ae1a:	6078      	str	r0, [r7, #4]
 814ae1c:	460b      	mov	r3, r1
 814ae1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814ae20:	687b      	ldr	r3, [r7, #4]
 814ae22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 814ae24:	68fb      	ldr	r3, [r7, #12]
 814ae26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814ae2a:	681a      	ldr	r2, [r3, #0]
 814ae2c:	78fb      	ldrb	r3, [r7, #3]
 814ae2e:	68f9      	ldr	r1, [r7, #12]
 814ae30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814ae34:	4313      	orrs	r3, r2
 814ae36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 814ae38:	2300      	movs	r3, #0
}
 814ae3a:	4618      	mov	r0, r3
 814ae3c:	3714      	adds	r7, #20
 814ae3e:	46bd      	mov	sp, r7
 814ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 814ae44:	4770      	bx	lr

0814ae46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 814ae46:	b480      	push	{r7}
 814ae48:	b087      	sub	sp, #28
 814ae4a:	af00      	add	r7, sp, #0
 814ae4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814ae4e:	687b      	ldr	r3, [r7, #4]
 814ae50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 814ae52:	693b      	ldr	r3, [r7, #16]
 814ae54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814ae58:	689b      	ldr	r3, [r3, #8]
 814ae5a:	f003 0306 	and.w	r3, r3, #6
 814ae5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 814ae60:	68fb      	ldr	r3, [r7, #12]
 814ae62:	2b00      	cmp	r3, #0
 814ae64:	d102      	bne.n	814ae6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 814ae66:	2300      	movs	r3, #0
 814ae68:	75fb      	strb	r3, [r7, #23]
 814ae6a:	e00a      	b.n	814ae82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 814ae6c:	68fb      	ldr	r3, [r7, #12]
 814ae6e:	2b02      	cmp	r3, #2
 814ae70:	d002      	beq.n	814ae78 <USB_GetDevSpeed+0x32>
 814ae72:	68fb      	ldr	r3, [r7, #12]
 814ae74:	2b06      	cmp	r3, #6
 814ae76:	d102      	bne.n	814ae7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 814ae78:	2302      	movs	r3, #2
 814ae7a:	75fb      	strb	r3, [r7, #23]
 814ae7c:	e001      	b.n	814ae82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 814ae7e:	230f      	movs	r3, #15
 814ae80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 814ae82:	7dfb      	ldrb	r3, [r7, #23]
}
 814ae84:	4618      	mov	r0, r3
 814ae86:	371c      	adds	r7, #28
 814ae88:	46bd      	mov	sp, r7
 814ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814ae8e:	4770      	bx	lr

0814ae90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 814ae90:	b480      	push	{r7}
 814ae92:	b085      	sub	sp, #20
 814ae94:	af00      	add	r7, sp, #0
 814ae96:	6078      	str	r0, [r7, #4]
 814ae98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814ae9a:	687b      	ldr	r3, [r7, #4]
 814ae9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 814ae9e:	683b      	ldr	r3, [r7, #0]
 814aea0:	781b      	ldrb	r3, [r3, #0]
 814aea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 814aea4:	683b      	ldr	r3, [r7, #0]
 814aea6:	785b      	ldrb	r3, [r3, #1]
 814aea8:	2b01      	cmp	r3, #1
 814aeaa:	d13a      	bne.n	814af22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 814aeac:	68fb      	ldr	r3, [r7, #12]
 814aeae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814aeb2:	69da      	ldr	r2, [r3, #28]
 814aeb4:	683b      	ldr	r3, [r7, #0]
 814aeb6:	781b      	ldrb	r3, [r3, #0]
 814aeb8:	f003 030f 	and.w	r3, r3, #15
 814aebc:	2101      	movs	r1, #1
 814aebe:	fa01 f303 	lsl.w	r3, r1, r3
 814aec2:	b29b      	uxth	r3, r3
 814aec4:	68f9      	ldr	r1, [r7, #12]
 814aec6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814aeca:	4313      	orrs	r3, r2
 814aecc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 814aece:	68bb      	ldr	r3, [r7, #8]
 814aed0:	015a      	lsls	r2, r3, #5
 814aed2:	68fb      	ldr	r3, [r7, #12]
 814aed4:	4413      	add	r3, r2
 814aed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814aeda:	681b      	ldr	r3, [r3, #0]
 814aedc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 814aee0:	2b00      	cmp	r3, #0
 814aee2:	d155      	bne.n	814af90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 814aee4:	68bb      	ldr	r3, [r7, #8]
 814aee6:	015a      	lsls	r2, r3, #5
 814aee8:	68fb      	ldr	r3, [r7, #12]
 814aeea:	4413      	add	r3, r2
 814aeec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814aef0:	681a      	ldr	r2, [r3, #0]
 814aef2:	683b      	ldr	r3, [r7, #0]
 814aef4:	689b      	ldr	r3, [r3, #8]
 814aef6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 814aefa:	683b      	ldr	r3, [r7, #0]
 814aefc:	791b      	ldrb	r3, [r3, #4]
 814aefe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 814af00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 814af02:	68bb      	ldr	r3, [r7, #8]
 814af04:	059b      	lsls	r3, r3, #22
 814af06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 814af08:	4313      	orrs	r3, r2
 814af0a:	68ba      	ldr	r2, [r7, #8]
 814af0c:	0151      	lsls	r1, r2, #5
 814af0e:	68fa      	ldr	r2, [r7, #12]
 814af10:	440a      	add	r2, r1
 814af12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814af16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814af1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 814af1e:	6013      	str	r3, [r2, #0]
 814af20:	e036      	b.n	814af90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 814af22:	68fb      	ldr	r3, [r7, #12]
 814af24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814af28:	69da      	ldr	r2, [r3, #28]
 814af2a:	683b      	ldr	r3, [r7, #0]
 814af2c:	781b      	ldrb	r3, [r3, #0]
 814af2e:	f003 030f 	and.w	r3, r3, #15
 814af32:	2101      	movs	r1, #1
 814af34:	fa01 f303 	lsl.w	r3, r1, r3
 814af38:	041b      	lsls	r3, r3, #16
 814af3a:	68f9      	ldr	r1, [r7, #12]
 814af3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814af40:	4313      	orrs	r3, r2
 814af42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 814af44:	68bb      	ldr	r3, [r7, #8]
 814af46:	015a      	lsls	r2, r3, #5
 814af48:	68fb      	ldr	r3, [r7, #12]
 814af4a:	4413      	add	r3, r2
 814af4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814af50:	681b      	ldr	r3, [r3, #0]
 814af52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 814af56:	2b00      	cmp	r3, #0
 814af58:	d11a      	bne.n	814af90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 814af5a:	68bb      	ldr	r3, [r7, #8]
 814af5c:	015a      	lsls	r2, r3, #5
 814af5e:	68fb      	ldr	r3, [r7, #12]
 814af60:	4413      	add	r3, r2
 814af62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814af66:	681a      	ldr	r2, [r3, #0]
 814af68:	683b      	ldr	r3, [r7, #0]
 814af6a:	689b      	ldr	r3, [r3, #8]
 814af6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 814af70:	683b      	ldr	r3, [r7, #0]
 814af72:	791b      	ldrb	r3, [r3, #4]
 814af74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 814af76:	430b      	orrs	r3, r1
 814af78:	4313      	orrs	r3, r2
 814af7a:	68ba      	ldr	r2, [r7, #8]
 814af7c:	0151      	lsls	r1, r2, #5
 814af7e:	68fa      	ldr	r2, [r7, #12]
 814af80:	440a      	add	r2, r1
 814af82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814af86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814af8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 814af8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 814af90:	2300      	movs	r3, #0
}
 814af92:	4618      	mov	r0, r3
 814af94:	3714      	adds	r7, #20
 814af96:	46bd      	mov	sp, r7
 814af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 814af9c:	4770      	bx	lr
	...

0814afa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 814afa0:	b480      	push	{r7}
 814afa2:	b085      	sub	sp, #20
 814afa4:	af00      	add	r7, sp, #0
 814afa6:	6078      	str	r0, [r7, #4]
 814afa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814afaa:	687b      	ldr	r3, [r7, #4]
 814afac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 814afae:	683b      	ldr	r3, [r7, #0]
 814afb0:	781b      	ldrb	r3, [r3, #0]
 814afb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 814afb4:	683b      	ldr	r3, [r7, #0]
 814afb6:	785b      	ldrb	r3, [r3, #1]
 814afb8:	2b01      	cmp	r3, #1
 814afba:	d161      	bne.n	814b080 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 814afbc:	68bb      	ldr	r3, [r7, #8]
 814afbe:	015a      	lsls	r2, r3, #5
 814afc0:	68fb      	ldr	r3, [r7, #12]
 814afc2:	4413      	add	r3, r2
 814afc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814afc8:	681b      	ldr	r3, [r3, #0]
 814afca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814afce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814afd2:	d11f      	bne.n	814b014 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 814afd4:	68bb      	ldr	r3, [r7, #8]
 814afd6:	015a      	lsls	r2, r3, #5
 814afd8:	68fb      	ldr	r3, [r7, #12]
 814afda:	4413      	add	r3, r2
 814afdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814afe0:	681b      	ldr	r3, [r3, #0]
 814afe2:	68ba      	ldr	r2, [r7, #8]
 814afe4:	0151      	lsls	r1, r2, #5
 814afe6:	68fa      	ldr	r2, [r7, #12]
 814afe8:	440a      	add	r2, r1
 814afea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814afee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 814aff2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 814aff4:	68bb      	ldr	r3, [r7, #8]
 814aff6:	015a      	lsls	r2, r3, #5
 814aff8:	68fb      	ldr	r3, [r7, #12]
 814affa:	4413      	add	r3, r2
 814affc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b000:	681b      	ldr	r3, [r3, #0]
 814b002:	68ba      	ldr	r2, [r7, #8]
 814b004:	0151      	lsls	r1, r2, #5
 814b006:	68fa      	ldr	r2, [r7, #12]
 814b008:	440a      	add	r2, r1
 814b00a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b00e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 814b012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 814b014:	68fb      	ldr	r3, [r7, #12]
 814b016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 814b01c:	683b      	ldr	r3, [r7, #0]
 814b01e:	781b      	ldrb	r3, [r3, #0]
 814b020:	f003 030f 	and.w	r3, r3, #15
 814b024:	2101      	movs	r1, #1
 814b026:	fa01 f303 	lsl.w	r3, r1, r3
 814b02a:	b29b      	uxth	r3, r3
 814b02c:	43db      	mvns	r3, r3
 814b02e:	68f9      	ldr	r1, [r7, #12]
 814b030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814b034:	4013      	ands	r3, r2
 814b036:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 814b038:	68fb      	ldr	r3, [r7, #12]
 814b03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b03e:	69da      	ldr	r2, [r3, #28]
 814b040:	683b      	ldr	r3, [r7, #0]
 814b042:	781b      	ldrb	r3, [r3, #0]
 814b044:	f003 030f 	and.w	r3, r3, #15
 814b048:	2101      	movs	r1, #1
 814b04a:	fa01 f303 	lsl.w	r3, r1, r3
 814b04e:	b29b      	uxth	r3, r3
 814b050:	43db      	mvns	r3, r3
 814b052:	68f9      	ldr	r1, [r7, #12]
 814b054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814b058:	4013      	ands	r3, r2
 814b05a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 814b05c:	68bb      	ldr	r3, [r7, #8]
 814b05e:	015a      	lsls	r2, r3, #5
 814b060:	68fb      	ldr	r3, [r7, #12]
 814b062:	4413      	add	r3, r2
 814b064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b068:	681a      	ldr	r2, [r3, #0]
 814b06a:	68bb      	ldr	r3, [r7, #8]
 814b06c:	0159      	lsls	r1, r3, #5
 814b06e:	68fb      	ldr	r3, [r7, #12]
 814b070:	440b      	add	r3, r1
 814b072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b076:	4619      	mov	r1, r3
 814b078:	4b35      	ldr	r3, [pc, #212]	@ (814b150 <USB_DeactivateEndpoint+0x1b0>)
 814b07a:	4013      	ands	r3, r2
 814b07c:	600b      	str	r3, [r1, #0]
 814b07e:	e060      	b.n	814b142 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 814b080:	68bb      	ldr	r3, [r7, #8]
 814b082:	015a      	lsls	r2, r3, #5
 814b084:	68fb      	ldr	r3, [r7, #12]
 814b086:	4413      	add	r3, r2
 814b088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b08c:	681b      	ldr	r3, [r3, #0]
 814b08e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814b092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814b096:	d11f      	bne.n	814b0d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 814b098:	68bb      	ldr	r3, [r7, #8]
 814b09a:	015a      	lsls	r2, r3, #5
 814b09c:	68fb      	ldr	r3, [r7, #12]
 814b09e:	4413      	add	r3, r2
 814b0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b0a4:	681b      	ldr	r3, [r3, #0]
 814b0a6:	68ba      	ldr	r2, [r7, #8]
 814b0a8:	0151      	lsls	r1, r2, #5
 814b0aa:	68fa      	ldr	r2, [r7, #12]
 814b0ac:	440a      	add	r2, r1
 814b0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b0b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 814b0b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 814b0b8:	68bb      	ldr	r3, [r7, #8]
 814b0ba:	015a      	lsls	r2, r3, #5
 814b0bc:	68fb      	ldr	r3, [r7, #12]
 814b0be:	4413      	add	r3, r2
 814b0c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b0c4:	681b      	ldr	r3, [r3, #0]
 814b0c6:	68ba      	ldr	r2, [r7, #8]
 814b0c8:	0151      	lsls	r1, r2, #5
 814b0ca:	68fa      	ldr	r2, [r7, #12]
 814b0cc:	440a      	add	r2, r1
 814b0ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b0d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 814b0d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 814b0d8:	68fb      	ldr	r3, [r7, #12]
 814b0da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b0de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 814b0e0:	683b      	ldr	r3, [r7, #0]
 814b0e2:	781b      	ldrb	r3, [r3, #0]
 814b0e4:	f003 030f 	and.w	r3, r3, #15
 814b0e8:	2101      	movs	r1, #1
 814b0ea:	fa01 f303 	lsl.w	r3, r1, r3
 814b0ee:	041b      	lsls	r3, r3, #16
 814b0f0:	43db      	mvns	r3, r3
 814b0f2:	68f9      	ldr	r1, [r7, #12]
 814b0f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814b0f8:	4013      	ands	r3, r2
 814b0fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 814b0fc:	68fb      	ldr	r3, [r7, #12]
 814b0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b102:	69da      	ldr	r2, [r3, #28]
 814b104:	683b      	ldr	r3, [r7, #0]
 814b106:	781b      	ldrb	r3, [r3, #0]
 814b108:	f003 030f 	and.w	r3, r3, #15
 814b10c:	2101      	movs	r1, #1
 814b10e:	fa01 f303 	lsl.w	r3, r1, r3
 814b112:	041b      	lsls	r3, r3, #16
 814b114:	43db      	mvns	r3, r3
 814b116:	68f9      	ldr	r1, [r7, #12]
 814b118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814b11c:	4013      	ands	r3, r2
 814b11e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 814b120:	68bb      	ldr	r3, [r7, #8]
 814b122:	015a      	lsls	r2, r3, #5
 814b124:	68fb      	ldr	r3, [r7, #12]
 814b126:	4413      	add	r3, r2
 814b128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b12c:	681a      	ldr	r2, [r3, #0]
 814b12e:	68bb      	ldr	r3, [r7, #8]
 814b130:	0159      	lsls	r1, r3, #5
 814b132:	68fb      	ldr	r3, [r7, #12]
 814b134:	440b      	add	r3, r1
 814b136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b13a:	4619      	mov	r1, r3
 814b13c:	4b05      	ldr	r3, [pc, #20]	@ (814b154 <USB_DeactivateEndpoint+0x1b4>)
 814b13e:	4013      	ands	r3, r2
 814b140:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 814b142:	2300      	movs	r3, #0
}
 814b144:	4618      	mov	r0, r3
 814b146:	3714      	adds	r7, #20
 814b148:	46bd      	mov	sp, r7
 814b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814b14e:	4770      	bx	lr
 814b150:	ec337800 	.word	0xec337800
 814b154:	eff37800 	.word	0xeff37800

0814b158 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 814b158:	b580      	push	{r7, lr}
 814b15a:	b08a      	sub	sp, #40	@ 0x28
 814b15c:	af02      	add	r7, sp, #8
 814b15e:	60f8      	str	r0, [r7, #12]
 814b160:	60b9      	str	r1, [r7, #8]
 814b162:	4613      	mov	r3, r2
 814b164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b166:	68fb      	ldr	r3, [r7, #12]
 814b168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 814b16a:	68bb      	ldr	r3, [r7, #8]
 814b16c:	781b      	ldrb	r3, [r3, #0]
 814b16e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 814b170:	68bb      	ldr	r3, [r7, #8]
 814b172:	785b      	ldrb	r3, [r3, #1]
 814b174:	2b01      	cmp	r3, #1
 814b176:	f040 817f 	bne.w	814b478 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 814b17a:	68bb      	ldr	r3, [r7, #8]
 814b17c:	691b      	ldr	r3, [r3, #16]
 814b17e:	2b00      	cmp	r3, #0
 814b180:	d132      	bne.n	814b1e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 814b182:	69bb      	ldr	r3, [r7, #24]
 814b184:	015a      	lsls	r2, r3, #5
 814b186:	69fb      	ldr	r3, [r7, #28]
 814b188:	4413      	add	r3, r2
 814b18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b18e:	691b      	ldr	r3, [r3, #16]
 814b190:	69ba      	ldr	r2, [r7, #24]
 814b192:	0151      	lsls	r1, r2, #5
 814b194:	69fa      	ldr	r2, [r7, #28]
 814b196:	440a      	add	r2, r1
 814b198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b19c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 814b1a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 814b1a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 814b1a6:	69bb      	ldr	r3, [r7, #24]
 814b1a8:	015a      	lsls	r2, r3, #5
 814b1aa:	69fb      	ldr	r3, [r7, #28]
 814b1ac:	4413      	add	r3, r2
 814b1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b1b2:	691b      	ldr	r3, [r3, #16]
 814b1b4:	69ba      	ldr	r2, [r7, #24]
 814b1b6:	0151      	lsls	r1, r2, #5
 814b1b8:	69fa      	ldr	r2, [r7, #28]
 814b1ba:	440a      	add	r2, r1
 814b1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b1c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814b1c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 814b1c6:	69bb      	ldr	r3, [r7, #24]
 814b1c8:	015a      	lsls	r2, r3, #5
 814b1ca:	69fb      	ldr	r3, [r7, #28]
 814b1cc:	4413      	add	r3, r2
 814b1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b1d2:	691b      	ldr	r3, [r3, #16]
 814b1d4:	69ba      	ldr	r2, [r7, #24]
 814b1d6:	0151      	lsls	r1, r2, #5
 814b1d8:	69fa      	ldr	r2, [r7, #28]
 814b1da:	440a      	add	r2, r1
 814b1dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b1e0:	0cdb      	lsrs	r3, r3, #19
 814b1e2:	04db      	lsls	r3, r3, #19
 814b1e4:	6113      	str	r3, [r2, #16]
 814b1e6:	e097      	b.n	814b318 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 814b1e8:	69bb      	ldr	r3, [r7, #24]
 814b1ea:	015a      	lsls	r2, r3, #5
 814b1ec:	69fb      	ldr	r3, [r7, #28]
 814b1ee:	4413      	add	r3, r2
 814b1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b1f4:	691b      	ldr	r3, [r3, #16]
 814b1f6:	69ba      	ldr	r2, [r7, #24]
 814b1f8:	0151      	lsls	r1, r2, #5
 814b1fa:	69fa      	ldr	r2, [r7, #28]
 814b1fc:	440a      	add	r2, r1
 814b1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b202:	0cdb      	lsrs	r3, r3, #19
 814b204:	04db      	lsls	r3, r3, #19
 814b206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 814b208:	69bb      	ldr	r3, [r7, #24]
 814b20a:	015a      	lsls	r2, r3, #5
 814b20c:	69fb      	ldr	r3, [r7, #28]
 814b20e:	4413      	add	r3, r2
 814b210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b214:	691b      	ldr	r3, [r3, #16]
 814b216:	69ba      	ldr	r2, [r7, #24]
 814b218:	0151      	lsls	r1, r2, #5
 814b21a:	69fa      	ldr	r2, [r7, #28]
 814b21c:	440a      	add	r2, r1
 814b21e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b222:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 814b226:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 814b22a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 814b22c:	69bb      	ldr	r3, [r7, #24]
 814b22e:	2b00      	cmp	r3, #0
 814b230:	d11a      	bne.n	814b268 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 814b232:	68bb      	ldr	r3, [r7, #8]
 814b234:	691a      	ldr	r2, [r3, #16]
 814b236:	68bb      	ldr	r3, [r7, #8]
 814b238:	689b      	ldr	r3, [r3, #8]
 814b23a:	429a      	cmp	r2, r3
 814b23c:	d903      	bls.n	814b246 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 814b23e:	68bb      	ldr	r3, [r7, #8]
 814b240:	689a      	ldr	r2, [r3, #8]
 814b242:	68bb      	ldr	r3, [r7, #8]
 814b244:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 814b246:	69bb      	ldr	r3, [r7, #24]
 814b248:	015a      	lsls	r2, r3, #5
 814b24a:	69fb      	ldr	r3, [r7, #28]
 814b24c:	4413      	add	r3, r2
 814b24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b252:	691b      	ldr	r3, [r3, #16]
 814b254:	69ba      	ldr	r2, [r7, #24]
 814b256:	0151      	lsls	r1, r2, #5
 814b258:	69fa      	ldr	r2, [r7, #28]
 814b25a:	440a      	add	r2, r1
 814b25c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b260:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814b264:	6113      	str	r3, [r2, #16]
 814b266:	e044      	b.n	814b2f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 814b268:	68bb      	ldr	r3, [r7, #8]
 814b26a:	691a      	ldr	r2, [r3, #16]
 814b26c:	68bb      	ldr	r3, [r7, #8]
 814b26e:	689b      	ldr	r3, [r3, #8]
 814b270:	4413      	add	r3, r2
 814b272:	1e5a      	subs	r2, r3, #1
 814b274:	68bb      	ldr	r3, [r7, #8]
 814b276:	689b      	ldr	r3, [r3, #8]
 814b278:	fbb2 f3f3 	udiv	r3, r2, r3
 814b27c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 814b27e:	69bb      	ldr	r3, [r7, #24]
 814b280:	015a      	lsls	r2, r3, #5
 814b282:	69fb      	ldr	r3, [r7, #28]
 814b284:	4413      	add	r3, r2
 814b286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b28a:	691a      	ldr	r2, [r3, #16]
 814b28c:	8afb      	ldrh	r3, [r7, #22]
 814b28e:	04d9      	lsls	r1, r3, #19
 814b290:	4ba4      	ldr	r3, [pc, #656]	@ (814b524 <USB_EPStartXfer+0x3cc>)
 814b292:	400b      	ands	r3, r1
 814b294:	69b9      	ldr	r1, [r7, #24]
 814b296:	0148      	lsls	r0, r1, #5
 814b298:	69f9      	ldr	r1, [r7, #28]
 814b29a:	4401      	add	r1, r0
 814b29c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 814b2a0:	4313      	orrs	r3, r2
 814b2a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 814b2a4:	68bb      	ldr	r3, [r7, #8]
 814b2a6:	791b      	ldrb	r3, [r3, #4]
 814b2a8:	2b01      	cmp	r3, #1
 814b2aa:	d122      	bne.n	814b2f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 814b2ac:	69bb      	ldr	r3, [r7, #24]
 814b2ae:	015a      	lsls	r2, r3, #5
 814b2b0:	69fb      	ldr	r3, [r7, #28]
 814b2b2:	4413      	add	r3, r2
 814b2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b2b8:	691b      	ldr	r3, [r3, #16]
 814b2ba:	69ba      	ldr	r2, [r7, #24]
 814b2bc:	0151      	lsls	r1, r2, #5
 814b2be:	69fa      	ldr	r2, [r7, #28]
 814b2c0:	440a      	add	r2, r1
 814b2c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b2c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 814b2ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 814b2cc:	69bb      	ldr	r3, [r7, #24]
 814b2ce:	015a      	lsls	r2, r3, #5
 814b2d0:	69fb      	ldr	r3, [r7, #28]
 814b2d2:	4413      	add	r3, r2
 814b2d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b2d8:	691a      	ldr	r2, [r3, #16]
 814b2da:	8afb      	ldrh	r3, [r7, #22]
 814b2dc:	075b      	lsls	r3, r3, #29
 814b2de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 814b2e2:	69b9      	ldr	r1, [r7, #24]
 814b2e4:	0148      	lsls	r0, r1, #5
 814b2e6:	69f9      	ldr	r1, [r7, #28]
 814b2e8:	4401      	add	r1, r0
 814b2ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 814b2ee:	4313      	orrs	r3, r2
 814b2f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 814b2f2:	69bb      	ldr	r3, [r7, #24]
 814b2f4:	015a      	lsls	r2, r3, #5
 814b2f6:	69fb      	ldr	r3, [r7, #28]
 814b2f8:	4413      	add	r3, r2
 814b2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b2fe:	691a      	ldr	r2, [r3, #16]
 814b300:	68bb      	ldr	r3, [r7, #8]
 814b302:	691b      	ldr	r3, [r3, #16]
 814b304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 814b308:	69b9      	ldr	r1, [r7, #24]
 814b30a:	0148      	lsls	r0, r1, #5
 814b30c:	69f9      	ldr	r1, [r7, #28]
 814b30e:	4401      	add	r1, r0
 814b310:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 814b314:	4313      	orrs	r3, r2
 814b316:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 814b318:	79fb      	ldrb	r3, [r7, #7]
 814b31a:	2b01      	cmp	r3, #1
 814b31c:	d14b      	bne.n	814b3b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 814b31e:	68bb      	ldr	r3, [r7, #8]
 814b320:	69db      	ldr	r3, [r3, #28]
 814b322:	2b00      	cmp	r3, #0
 814b324:	d009      	beq.n	814b33a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 814b326:	69bb      	ldr	r3, [r7, #24]
 814b328:	015a      	lsls	r2, r3, #5
 814b32a:	69fb      	ldr	r3, [r7, #28]
 814b32c:	4413      	add	r3, r2
 814b32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b332:	461a      	mov	r2, r3
 814b334:	68bb      	ldr	r3, [r7, #8]
 814b336:	69db      	ldr	r3, [r3, #28]
 814b338:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 814b33a:	68bb      	ldr	r3, [r7, #8]
 814b33c:	791b      	ldrb	r3, [r3, #4]
 814b33e:	2b01      	cmp	r3, #1
 814b340:	d128      	bne.n	814b394 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 814b342:	69fb      	ldr	r3, [r7, #28]
 814b344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b348:	689b      	ldr	r3, [r3, #8]
 814b34a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814b34e:	2b00      	cmp	r3, #0
 814b350:	d110      	bne.n	814b374 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 814b352:	69bb      	ldr	r3, [r7, #24]
 814b354:	015a      	lsls	r2, r3, #5
 814b356:	69fb      	ldr	r3, [r7, #28]
 814b358:	4413      	add	r3, r2
 814b35a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b35e:	681b      	ldr	r3, [r3, #0]
 814b360:	69ba      	ldr	r2, [r7, #24]
 814b362:	0151      	lsls	r1, r2, #5
 814b364:	69fa      	ldr	r2, [r7, #28]
 814b366:	440a      	add	r2, r1
 814b368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b36c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 814b370:	6013      	str	r3, [r2, #0]
 814b372:	e00f      	b.n	814b394 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 814b374:	69bb      	ldr	r3, [r7, #24]
 814b376:	015a      	lsls	r2, r3, #5
 814b378:	69fb      	ldr	r3, [r7, #28]
 814b37a:	4413      	add	r3, r2
 814b37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b380:	681b      	ldr	r3, [r3, #0]
 814b382:	69ba      	ldr	r2, [r7, #24]
 814b384:	0151      	lsls	r1, r2, #5
 814b386:	69fa      	ldr	r2, [r7, #28]
 814b388:	440a      	add	r2, r1
 814b38a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b38e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814b392:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 814b394:	69bb      	ldr	r3, [r7, #24]
 814b396:	015a      	lsls	r2, r3, #5
 814b398:	69fb      	ldr	r3, [r7, #28]
 814b39a:	4413      	add	r3, r2
 814b39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b3a0:	681b      	ldr	r3, [r3, #0]
 814b3a2:	69ba      	ldr	r2, [r7, #24]
 814b3a4:	0151      	lsls	r1, r2, #5
 814b3a6:	69fa      	ldr	r2, [r7, #28]
 814b3a8:	440a      	add	r2, r1
 814b3aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b3ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 814b3b2:	6013      	str	r3, [r2, #0]
 814b3b4:	e166      	b.n	814b684 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 814b3b6:	69bb      	ldr	r3, [r7, #24]
 814b3b8:	015a      	lsls	r2, r3, #5
 814b3ba:	69fb      	ldr	r3, [r7, #28]
 814b3bc:	4413      	add	r3, r2
 814b3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b3c2:	681b      	ldr	r3, [r3, #0]
 814b3c4:	69ba      	ldr	r2, [r7, #24]
 814b3c6:	0151      	lsls	r1, r2, #5
 814b3c8:	69fa      	ldr	r2, [r7, #28]
 814b3ca:	440a      	add	r2, r1
 814b3cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b3d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 814b3d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 814b3d6:	68bb      	ldr	r3, [r7, #8]
 814b3d8:	791b      	ldrb	r3, [r3, #4]
 814b3da:	2b01      	cmp	r3, #1
 814b3dc:	d015      	beq.n	814b40a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 814b3de:	68bb      	ldr	r3, [r7, #8]
 814b3e0:	691b      	ldr	r3, [r3, #16]
 814b3e2:	2b00      	cmp	r3, #0
 814b3e4:	f000 814e 	beq.w	814b684 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 814b3e8:	69fb      	ldr	r3, [r7, #28]
 814b3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b3ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 814b3f0:	68bb      	ldr	r3, [r7, #8]
 814b3f2:	781b      	ldrb	r3, [r3, #0]
 814b3f4:	f003 030f 	and.w	r3, r3, #15
 814b3f8:	2101      	movs	r1, #1
 814b3fa:	fa01 f303 	lsl.w	r3, r1, r3
 814b3fe:	69f9      	ldr	r1, [r7, #28]
 814b400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814b404:	4313      	orrs	r3, r2
 814b406:	634b      	str	r3, [r1, #52]	@ 0x34
 814b408:	e13c      	b.n	814b684 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 814b40a:	69fb      	ldr	r3, [r7, #28]
 814b40c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b410:	689b      	ldr	r3, [r3, #8]
 814b412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814b416:	2b00      	cmp	r3, #0
 814b418:	d110      	bne.n	814b43c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 814b41a:	69bb      	ldr	r3, [r7, #24]
 814b41c:	015a      	lsls	r2, r3, #5
 814b41e:	69fb      	ldr	r3, [r7, #28]
 814b420:	4413      	add	r3, r2
 814b422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b426:	681b      	ldr	r3, [r3, #0]
 814b428:	69ba      	ldr	r2, [r7, #24]
 814b42a:	0151      	lsls	r1, r2, #5
 814b42c:	69fa      	ldr	r2, [r7, #28]
 814b42e:	440a      	add	r2, r1
 814b430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 814b438:	6013      	str	r3, [r2, #0]
 814b43a:	e00f      	b.n	814b45c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 814b43c:	69bb      	ldr	r3, [r7, #24]
 814b43e:	015a      	lsls	r2, r3, #5
 814b440:	69fb      	ldr	r3, [r7, #28]
 814b442:	4413      	add	r3, r2
 814b444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b448:	681b      	ldr	r3, [r3, #0]
 814b44a:	69ba      	ldr	r2, [r7, #24]
 814b44c:	0151      	lsls	r1, r2, #5
 814b44e:	69fa      	ldr	r2, [r7, #28]
 814b450:	440a      	add	r2, r1
 814b452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814b45a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 814b45c:	68bb      	ldr	r3, [r7, #8]
 814b45e:	68d9      	ldr	r1, [r3, #12]
 814b460:	68bb      	ldr	r3, [r7, #8]
 814b462:	781a      	ldrb	r2, [r3, #0]
 814b464:	68bb      	ldr	r3, [r7, #8]
 814b466:	691b      	ldr	r3, [r3, #16]
 814b468:	b298      	uxth	r0, r3
 814b46a:	79fb      	ldrb	r3, [r7, #7]
 814b46c:	9300      	str	r3, [sp, #0]
 814b46e:	4603      	mov	r3, r0
 814b470:	68f8      	ldr	r0, [r7, #12]
 814b472:	f000 f9b9 	bl	814b7e8 <USB_WritePacket>
 814b476:	e105      	b.n	814b684 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 814b478:	69bb      	ldr	r3, [r7, #24]
 814b47a:	015a      	lsls	r2, r3, #5
 814b47c:	69fb      	ldr	r3, [r7, #28]
 814b47e:	4413      	add	r3, r2
 814b480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b484:	691b      	ldr	r3, [r3, #16]
 814b486:	69ba      	ldr	r2, [r7, #24]
 814b488:	0151      	lsls	r1, r2, #5
 814b48a:	69fa      	ldr	r2, [r7, #28]
 814b48c:	440a      	add	r2, r1
 814b48e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b492:	0cdb      	lsrs	r3, r3, #19
 814b494:	04db      	lsls	r3, r3, #19
 814b496:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 814b498:	69bb      	ldr	r3, [r7, #24]
 814b49a:	015a      	lsls	r2, r3, #5
 814b49c:	69fb      	ldr	r3, [r7, #28]
 814b49e:	4413      	add	r3, r2
 814b4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b4a4:	691b      	ldr	r3, [r3, #16]
 814b4a6:	69ba      	ldr	r2, [r7, #24]
 814b4a8:	0151      	lsls	r1, r2, #5
 814b4aa:	69fa      	ldr	r2, [r7, #28]
 814b4ac:	440a      	add	r2, r1
 814b4ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b4b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 814b4b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 814b4ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 814b4bc:	69bb      	ldr	r3, [r7, #24]
 814b4be:	2b00      	cmp	r3, #0
 814b4c0:	d132      	bne.n	814b528 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 814b4c2:	68bb      	ldr	r3, [r7, #8]
 814b4c4:	691b      	ldr	r3, [r3, #16]
 814b4c6:	2b00      	cmp	r3, #0
 814b4c8:	d003      	beq.n	814b4d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 814b4ca:	68bb      	ldr	r3, [r7, #8]
 814b4cc:	689a      	ldr	r2, [r3, #8]
 814b4ce:	68bb      	ldr	r3, [r7, #8]
 814b4d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 814b4d2:	68bb      	ldr	r3, [r7, #8]
 814b4d4:	689a      	ldr	r2, [r3, #8]
 814b4d6:	68bb      	ldr	r3, [r7, #8]
 814b4d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 814b4da:	69bb      	ldr	r3, [r7, #24]
 814b4dc:	015a      	lsls	r2, r3, #5
 814b4de:	69fb      	ldr	r3, [r7, #28]
 814b4e0:	4413      	add	r3, r2
 814b4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b4e6:	691a      	ldr	r2, [r3, #16]
 814b4e8:	68bb      	ldr	r3, [r7, #8]
 814b4ea:	6a1b      	ldr	r3, [r3, #32]
 814b4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 814b4f0:	69b9      	ldr	r1, [r7, #24]
 814b4f2:	0148      	lsls	r0, r1, #5
 814b4f4:	69f9      	ldr	r1, [r7, #28]
 814b4f6:	4401      	add	r1, r0
 814b4f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 814b4fc:	4313      	orrs	r3, r2
 814b4fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 814b500:	69bb      	ldr	r3, [r7, #24]
 814b502:	015a      	lsls	r2, r3, #5
 814b504:	69fb      	ldr	r3, [r7, #28]
 814b506:	4413      	add	r3, r2
 814b508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b50c:	691b      	ldr	r3, [r3, #16]
 814b50e:	69ba      	ldr	r2, [r7, #24]
 814b510:	0151      	lsls	r1, r2, #5
 814b512:	69fa      	ldr	r2, [r7, #28]
 814b514:	440a      	add	r2, r1
 814b516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b51a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814b51e:	6113      	str	r3, [r2, #16]
 814b520:	e062      	b.n	814b5e8 <USB_EPStartXfer+0x490>
 814b522:	bf00      	nop
 814b524:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 814b528:	68bb      	ldr	r3, [r7, #8]
 814b52a:	691b      	ldr	r3, [r3, #16]
 814b52c:	2b00      	cmp	r3, #0
 814b52e:	d123      	bne.n	814b578 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 814b530:	69bb      	ldr	r3, [r7, #24]
 814b532:	015a      	lsls	r2, r3, #5
 814b534:	69fb      	ldr	r3, [r7, #28]
 814b536:	4413      	add	r3, r2
 814b538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b53c:	691a      	ldr	r2, [r3, #16]
 814b53e:	68bb      	ldr	r3, [r7, #8]
 814b540:	689b      	ldr	r3, [r3, #8]
 814b542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 814b546:	69b9      	ldr	r1, [r7, #24]
 814b548:	0148      	lsls	r0, r1, #5
 814b54a:	69f9      	ldr	r1, [r7, #28]
 814b54c:	4401      	add	r1, r0
 814b54e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 814b552:	4313      	orrs	r3, r2
 814b554:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 814b556:	69bb      	ldr	r3, [r7, #24]
 814b558:	015a      	lsls	r2, r3, #5
 814b55a:	69fb      	ldr	r3, [r7, #28]
 814b55c:	4413      	add	r3, r2
 814b55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b562:	691b      	ldr	r3, [r3, #16]
 814b564:	69ba      	ldr	r2, [r7, #24]
 814b566:	0151      	lsls	r1, r2, #5
 814b568:	69fa      	ldr	r2, [r7, #28]
 814b56a:	440a      	add	r2, r1
 814b56c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b570:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814b574:	6113      	str	r3, [r2, #16]
 814b576:	e037      	b.n	814b5e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 814b578:	68bb      	ldr	r3, [r7, #8]
 814b57a:	691a      	ldr	r2, [r3, #16]
 814b57c:	68bb      	ldr	r3, [r7, #8]
 814b57e:	689b      	ldr	r3, [r3, #8]
 814b580:	4413      	add	r3, r2
 814b582:	1e5a      	subs	r2, r3, #1
 814b584:	68bb      	ldr	r3, [r7, #8]
 814b586:	689b      	ldr	r3, [r3, #8]
 814b588:	fbb2 f3f3 	udiv	r3, r2, r3
 814b58c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 814b58e:	68bb      	ldr	r3, [r7, #8]
 814b590:	689b      	ldr	r3, [r3, #8]
 814b592:	8afa      	ldrh	r2, [r7, #22]
 814b594:	fb03 f202 	mul.w	r2, r3, r2
 814b598:	68bb      	ldr	r3, [r7, #8]
 814b59a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 814b59c:	69bb      	ldr	r3, [r7, #24]
 814b59e:	015a      	lsls	r2, r3, #5
 814b5a0:	69fb      	ldr	r3, [r7, #28]
 814b5a2:	4413      	add	r3, r2
 814b5a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b5a8:	691a      	ldr	r2, [r3, #16]
 814b5aa:	8afb      	ldrh	r3, [r7, #22]
 814b5ac:	04d9      	lsls	r1, r3, #19
 814b5ae:	4b38      	ldr	r3, [pc, #224]	@ (814b690 <USB_EPStartXfer+0x538>)
 814b5b0:	400b      	ands	r3, r1
 814b5b2:	69b9      	ldr	r1, [r7, #24]
 814b5b4:	0148      	lsls	r0, r1, #5
 814b5b6:	69f9      	ldr	r1, [r7, #28]
 814b5b8:	4401      	add	r1, r0
 814b5ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 814b5be:	4313      	orrs	r3, r2
 814b5c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 814b5c2:	69bb      	ldr	r3, [r7, #24]
 814b5c4:	015a      	lsls	r2, r3, #5
 814b5c6:	69fb      	ldr	r3, [r7, #28]
 814b5c8:	4413      	add	r3, r2
 814b5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b5ce:	691a      	ldr	r2, [r3, #16]
 814b5d0:	68bb      	ldr	r3, [r7, #8]
 814b5d2:	6a1b      	ldr	r3, [r3, #32]
 814b5d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 814b5d8:	69b9      	ldr	r1, [r7, #24]
 814b5da:	0148      	lsls	r0, r1, #5
 814b5dc:	69f9      	ldr	r1, [r7, #28]
 814b5de:	4401      	add	r1, r0
 814b5e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 814b5e4:	4313      	orrs	r3, r2
 814b5e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 814b5e8:	79fb      	ldrb	r3, [r7, #7]
 814b5ea:	2b01      	cmp	r3, #1
 814b5ec:	d10d      	bne.n	814b60a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 814b5ee:	68bb      	ldr	r3, [r7, #8]
 814b5f0:	68db      	ldr	r3, [r3, #12]
 814b5f2:	2b00      	cmp	r3, #0
 814b5f4:	d009      	beq.n	814b60a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 814b5f6:	68bb      	ldr	r3, [r7, #8]
 814b5f8:	68d9      	ldr	r1, [r3, #12]
 814b5fa:	69bb      	ldr	r3, [r7, #24]
 814b5fc:	015a      	lsls	r2, r3, #5
 814b5fe:	69fb      	ldr	r3, [r7, #28]
 814b600:	4413      	add	r3, r2
 814b602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b606:	460a      	mov	r2, r1
 814b608:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 814b60a:	68bb      	ldr	r3, [r7, #8]
 814b60c:	791b      	ldrb	r3, [r3, #4]
 814b60e:	2b01      	cmp	r3, #1
 814b610:	d128      	bne.n	814b664 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 814b612:	69fb      	ldr	r3, [r7, #28]
 814b614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814b618:	689b      	ldr	r3, [r3, #8]
 814b61a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 814b61e:	2b00      	cmp	r3, #0
 814b620:	d110      	bne.n	814b644 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 814b622:	69bb      	ldr	r3, [r7, #24]
 814b624:	015a      	lsls	r2, r3, #5
 814b626:	69fb      	ldr	r3, [r7, #28]
 814b628:	4413      	add	r3, r2
 814b62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b62e:	681b      	ldr	r3, [r3, #0]
 814b630:	69ba      	ldr	r2, [r7, #24]
 814b632:	0151      	lsls	r1, r2, #5
 814b634:	69fa      	ldr	r2, [r7, #28]
 814b636:	440a      	add	r2, r1
 814b638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b63c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 814b640:	6013      	str	r3, [r2, #0]
 814b642:	e00f      	b.n	814b664 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 814b644:	69bb      	ldr	r3, [r7, #24]
 814b646:	015a      	lsls	r2, r3, #5
 814b648:	69fb      	ldr	r3, [r7, #28]
 814b64a:	4413      	add	r3, r2
 814b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b650:	681b      	ldr	r3, [r3, #0]
 814b652:	69ba      	ldr	r2, [r7, #24]
 814b654:	0151      	lsls	r1, r2, #5
 814b656:	69fa      	ldr	r2, [r7, #28]
 814b658:	440a      	add	r2, r1
 814b65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b65e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814b662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 814b664:	69bb      	ldr	r3, [r7, #24]
 814b666:	015a      	lsls	r2, r3, #5
 814b668:	69fb      	ldr	r3, [r7, #28]
 814b66a:	4413      	add	r3, r2
 814b66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b670:	681b      	ldr	r3, [r3, #0]
 814b672:	69ba      	ldr	r2, [r7, #24]
 814b674:	0151      	lsls	r1, r2, #5
 814b676:	69fa      	ldr	r2, [r7, #28]
 814b678:	440a      	add	r2, r1
 814b67a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b67e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 814b682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 814b684:	2300      	movs	r3, #0
}
 814b686:	4618      	mov	r0, r3
 814b688:	3720      	adds	r7, #32
 814b68a:	46bd      	mov	sp, r7
 814b68c:	bd80      	pop	{r7, pc}
 814b68e:	bf00      	nop
 814b690:	1ff80000 	.word	0x1ff80000

0814b694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 814b694:	b480      	push	{r7}
 814b696:	b087      	sub	sp, #28
 814b698:	af00      	add	r7, sp, #0
 814b69a:	6078      	str	r0, [r7, #4]
 814b69c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 814b69e:	2300      	movs	r3, #0
 814b6a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 814b6a2:	2300      	movs	r3, #0
 814b6a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b6a6:	687b      	ldr	r3, [r7, #4]
 814b6a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 814b6aa:	683b      	ldr	r3, [r7, #0]
 814b6ac:	785b      	ldrb	r3, [r3, #1]
 814b6ae:	2b01      	cmp	r3, #1
 814b6b0:	d14a      	bne.n	814b748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 814b6b2:	683b      	ldr	r3, [r7, #0]
 814b6b4:	781b      	ldrb	r3, [r3, #0]
 814b6b6:	015a      	lsls	r2, r3, #5
 814b6b8:	693b      	ldr	r3, [r7, #16]
 814b6ba:	4413      	add	r3, r2
 814b6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b6c0:	681b      	ldr	r3, [r3, #0]
 814b6c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814b6c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814b6ca:	f040 8086 	bne.w	814b7da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 814b6ce:	683b      	ldr	r3, [r7, #0]
 814b6d0:	781b      	ldrb	r3, [r3, #0]
 814b6d2:	015a      	lsls	r2, r3, #5
 814b6d4:	693b      	ldr	r3, [r7, #16]
 814b6d6:	4413      	add	r3, r2
 814b6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b6dc:	681b      	ldr	r3, [r3, #0]
 814b6de:	683a      	ldr	r2, [r7, #0]
 814b6e0:	7812      	ldrb	r2, [r2, #0]
 814b6e2:	0151      	lsls	r1, r2, #5
 814b6e4:	693a      	ldr	r2, [r7, #16]
 814b6e6:	440a      	add	r2, r1
 814b6e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b6ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 814b6f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 814b6f2:	683b      	ldr	r3, [r7, #0]
 814b6f4:	781b      	ldrb	r3, [r3, #0]
 814b6f6:	015a      	lsls	r2, r3, #5
 814b6f8:	693b      	ldr	r3, [r7, #16]
 814b6fa:	4413      	add	r3, r2
 814b6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b700:	681b      	ldr	r3, [r3, #0]
 814b702:	683a      	ldr	r2, [r7, #0]
 814b704:	7812      	ldrb	r2, [r2, #0]
 814b706:	0151      	lsls	r1, r2, #5
 814b708:	693a      	ldr	r2, [r7, #16]
 814b70a:	440a      	add	r2, r1
 814b70c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 814b714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 814b716:	68fb      	ldr	r3, [r7, #12]
 814b718:	3301      	adds	r3, #1
 814b71a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 814b71c:	68fb      	ldr	r3, [r7, #12]
 814b71e:	f242 7210 	movw	r2, #10000	@ 0x2710
 814b722:	4293      	cmp	r3, r2
 814b724:	d902      	bls.n	814b72c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 814b726:	2301      	movs	r3, #1
 814b728:	75fb      	strb	r3, [r7, #23]
          break;
 814b72a:	e056      	b.n	814b7da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 814b72c:	683b      	ldr	r3, [r7, #0]
 814b72e:	781b      	ldrb	r3, [r3, #0]
 814b730:	015a      	lsls	r2, r3, #5
 814b732:	693b      	ldr	r3, [r7, #16]
 814b734:	4413      	add	r3, r2
 814b736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b73a:	681b      	ldr	r3, [r3, #0]
 814b73c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814b740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814b744:	d0e7      	beq.n	814b716 <USB_EPStopXfer+0x82>
 814b746:	e048      	b.n	814b7da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 814b748:	683b      	ldr	r3, [r7, #0]
 814b74a:	781b      	ldrb	r3, [r3, #0]
 814b74c:	015a      	lsls	r2, r3, #5
 814b74e:	693b      	ldr	r3, [r7, #16]
 814b750:	4413      	add	r3, r2
 814b752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b756:	681b      	ldr	r3, [r3, #0]
 814b758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814b75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814b760:	d13b      	bne.n	814b7da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 814b762:	683b      	ldr	r3, [r7, #0]
 814b764:	781b      	ldrb	r3, [r3, #0]
 814b766:	015a      	lsls	r2, r3, #5
 814b768:	693b      	ldr	r3, [r7, #16]
 814b76a:	4413      	add	r3, r2
 814b76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b770:	681b      	ldr	r3, [r3, #0]
 814b772:	683a      	ldr	r2, [r7, #0]
 814b774:	7812      	ldrb	r2, [r2, #0]
 814b776:	0151      	lsls	r1, r2, #5
 814b778:	693a      	ldr	r2, [r7, #16]
 814b77a:	440a      	add	r2, r1
 814b77c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b780:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 814b784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 814b786:	683b      	ldr	r3, [r7, #0]
 814b788:	781b      	ldrb	r3, [r3, #0]
 814b78a:	015a      	lsls	r2, r3, #5
 814b78c:	693b      	ldr	r3, [r7, #16]
 814b78e:	4413      	add	r3, r2
 814b790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b794:	681b      	ldr	r3, [r3, #0]
 814b796:	683a      	ldr	r2, [r7, #0]
 814b798:	7812      	ldrb	r2, [r2, #0]
 814b79a:	0151      	lsls	r1, r2, #5
 814b79c:	693a      	ldr	r2, [r7, #16]
 814b79e:	440a      	add	r2, r1
 814b7a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b7a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 814b7a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 814b7aa:	68fb      	ldr	r3, [r7, #12]
 814b7ac:	3301      	adds	r3, #1
 814b7ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 814b7b0:	68fb      	ldr	r3, [r7, #12]
 814b7b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 814b7b6:	4293      	cmp	r3, r2
 814b7b8:	d902      	bls.n	814b7c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 814b7ba:	2301      	movs	r3, #1
 814b7bc:	75fb      	strb	r3, [r7, #23]
          break;
 814b7be:	e00c      	b.n	814b7da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 814b7c0:	683b      	ldr	r3, [r7, #0]
 814b7c2:	781b      	ldrb	r3, [r3, #0]
 814b7c4:	015a      	lsls	r2, r3, #5
 814b7c6:	693b      	ldr	r3, [r7, #16]
 814b7c8:	4413      	add	r3, r2
 814b7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b7ce:	681b      	ldr	r3, [r3, #0]
 814b7d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814b7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814b7d8:	d0e7      	beq.n	814b7aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 814b7da:	7dfb      	ldrb	r3, [r7, #23]
}
 814b7dc:	4618      	mov	r0, r3
 814b7de:	371c      	adds	r7, #28
 814b7e0:	46bd      	mov	sp, r7
 814b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 814b7e6:	4770      	bx	lr

0814b7e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 814b7e8:	b480      	push	{r7}
 814b7ea:	b089      	sub	sp, #36	@ 0x24
 814b7ec:	af00      	add	r7, sp, #0
 814b7ee:	60f8      	str	r0, [r7, #12]
 814b7f0:	60b9      	str	r1, [r7, #8]
 814b7f2:	4611      	mov	r1, r2
 814b7f4:	461a      	mov	r2, r3
 814b7f6:	460b      	mov	r3, r1
 814b7f8:	71fb      	strb	r3, [r7, #7]
 814b7fa:	4613      	mov	r3, r2
 814b7fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b7fe:	68fb      	ldr	r3, [r7, #12]
 814b800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 814b802:	68bb      	ldr	r3, [r7, #8]
 814b804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 814b806:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 814b80a:	2b00      	cmp	r3, #0
 814b80c:	d123      	bne.n	814b856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 814b80e:	88bb      	ldrh	r3, [r7, #4]
 814b810:	3303      	adds	r3, #3
 814b812:	089b      	lsrs	r3, r3, #2
 814b814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 814b816:	2300      	movs	r3, #0
 814b818:	61bb      	str	r3, [r7, #24]
 814b81a:	e018      	b.n	814b84e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 814b81c:	79fb      	ldrb	r3, [r7, #7]
 814b81e:	031a      	lsls	r2, r3, #12
 814b820:	697b      	ldr	r3, [r7, #20]
 814b822:	4413      	add	r3, r2
 814b824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 814b828:	461a      	mov	r2, r3
 814b82a:	69fb      	ldr	r3, [r7, #28]
 814b82c:	681b      	ldr	r3, [r3, #0]
 814b82e:	6013      	str	r3, [r2, #0]
      pSrc++;
 814b830:	69fb      	ldr	r3, [r7, #28]
 814b832:	3301      	adds	r3, #1
 814b834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 814b836:	69fb      	ldr	r3, [r7, #28]
 814b838:	3301      	adds	r3, #1
 814b83a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 814b83c:	69fb      	ldr	r3, [r7, #28]
 814b83e:	3301      	adds	r3, #1
 814b840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 814b842:	69fb      	ldr	r3, [r7, #28]
 814b844:	3301      	adds	r3, #1
 814b846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 814b848:	69bb      	ldr	r3, [r7, #24]
 814b84a:	3301      	adds	r3, #1
 814b84c:	61bb      	str	r3, [r7, #24]
 814b84e:	69ba      	ldr	r2, [r7, #24]
 814b850:	693b      	ldr	r3, [r7, #16]
 814b852:	429a      	cmp	r2, r3
 814b854:	d3e2      	bcc.n	814b81c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 814b856:	2300      	movs	r3, #0
}
 814b858:	4618      	mov	r0, r3
 814b85a:	3724      	adds	r7, #36	@ 0x24
 814b85c:	46bd      	mov	sp, r7
 814b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814b862:	4770      	bx	lr

0814b864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 814b864:	b480      	push	{r7}
 814b866:	b08b      	sub	sp, #44	@ 0x2c
 814b868:	af00      	add	r7, sp, #0
 814b86a:	60f8      	str	r0, [r7, #12]
 814b86c:	60b9      	str	r1, [r7, #8]
 814b86e:	4613      	mov	r3, r2
 814b870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b872:	68fb      	ldr	r3, [r7, #12]
 814b874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 814b876:	68bb      	ldr	r3, [r7, #8]
 814b878:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 814b87a:	88fb      	ldrh	r3, [r7, #6]
 814b87c:	089b      	lsrs	r3, r3, #2
 814b87e:	b29b      	uxth	r3, r3
 814b880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 814b882:	88fb      	ldrh	r3, [r7, #6]
 814b884:	f003 0303 	and.w	r3, r3, #3
 814b888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 814b88a:	2300      	movs	r3, #0
 814b88c:	623b      	str	r3, [r7, #32]
 814b88e:	e014      	b.n	814b8ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 814b890:	69bb      	ldr	r3, [r7, #24]
 814b892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 814b896:	681a      	ldr	r2, [r3, #0]
 814b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b89a:	601a      	str	r2, [r3, #0]
    pDest++;
 814b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b89e:	3301      	adds	r3, #1
 814b8a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 814b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b8a4:	3301      	adds	r3, #1
 814b8a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 814b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b8aa:	3301      	adds	r3, #1
 814b8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 814b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b8b0:	3301      	adds	r3, #1
 814b8b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 814b8b4:	6a3b      	ldr	r3, [r7, #32]
 814b8b6:	3301      	adds	r3, #1
 814b8b8:	623b      	str	r3, [r7, #32]
 814b8ba:	6a3a      	ldr	r2, [r7, #32]
 814b8bc:	697b      	ldr	r3, [r7, #20]
 814b8be:	429a      	cmp	r2, r3
 814b8c0:	d3e6      	bcc.n	814b890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 814b8c2:	8bfb      	ldrh	r3, [r7, #30]
 814b8c4:	2b00      	cmp	r3, #0
 814b8c6:	d01e      	beq.n	814b906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 814b8c8:	2300      	movs	r3, #0
 814b8ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 814b8cc:	69bb      	ldr	r3, [r7, #24]
 814b8ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 814b8d2:	461a      	mov	r2, r3
 814b8d4:	f107 0310 	add.w	r3, r7, #16
 814b8d8:	6812      	ldr	r2, [r2, #0]
 814b8da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 814b8dc:	693a      	ldr	r2, [r7, #16]
 814b8de:	6a3b      	ldr	r3, [r7, #32]
 814b8e0:	b2db      	uxtb	r3, r3
 814b8e2:	00db      	lsls	r3, r3, #3
 814b8e4:	fa22 f303 	lsr.w	r3, r2, r3
 814b8e8:	b2da      	uxtb	r2, r3
 814b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b8ec:	701a      	strb	r2, [r3, #0]
      i++;
 814b8ee:	6a3b      	ldr	r3, [r7, #32]
 814b8f0:	3301      	adds	r3, #1
 814b8f2:	623b      	str	r3, [r7, #32]
      pDest++;
 814b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 814b8f6:	3301      	adds	r3, #1
 814b8f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 814b8fa:	8bfb      	ldrh	r3, [r7, #30]
 814b8fc:	3b01      	subs	r3, #1
 814b8fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 814b900:	8bfb      	ldrh	r3, [r7, #30]
 814b902:	2b00      	cmp	r3, #0
 814b904:	d1ea      	bne.n	814b8dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 814b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 814b908:	4618      	mov	r0, r3
 814b90a:	372c      	adds	r7, #44	@ 0x2c
 814b90c:	46bd      	mov	sp, r7
 814b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814b912:	4770      	bx	lr

0814b914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 814b914:	b480      	push	{r7}
 814b916:	b085      	sub	sp, #20
 814b918:	af00      	add	r7, sp, #0
 814b91a:	6078      	str	r0, [r7, #4]
 814b91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b91e:	687b      	ldr	r3, [r7, #4]
 814b920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 814b922:	683b      	ldr	r3, [r7, #0]
 814b924:	781b      	ldrb	r3, [r3, #0]
 814b926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 814b928:	683b      	ldr	r3, [r7, #0]
 814b92a:	785b      	ldrb	r3, [r3, #1]
 814b92c:	2b01      	cmp	r3, #1
 814b92e:	d12c      	bne.n	814b98a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 814b930:	68bb      	ldr	r3, [r7, #8]
 814b932:	015a      	lsls	r2, r3, #5
 814b934:	68fb      	ldr	r3, [r7, #12]
 814b936:	4413      	add	r3, r2
 814b938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b93c:	681b      	ldr	r3, [r3, #0]
 814b93e:	2b00      	cmp	r3, #0
 814b940:	db12      	blt.n	814b968 <USB_EPSetStall+0x54>
 814b942:	68bb      	ldr	r3, [r7, #8]
 814b944:	2b00      	cmp	r3, #0
 814b946:	d00f      	beq.n	814b968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 814b948:	68bb      	ldr	r3, [r7, #8]
 814b94a:	015a      	lsls	r2, r3, #5
 814b94c:	68fb      	ldr	r3, [r7, #12]
 814b94e:	4413      	add	r3, r2
 814b950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b954:	681b      	ldr	r3, [r3, #0]
 814b956:	68ba      	ldr	r2, [r7, #8]
 814b958:	0151      	lsls	r1, r2, #5
 814b95a:	68fa      	ldr	r2, [r7, #12]
 814b95c:	440a      	add	r2, r1
 814b95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b962:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 814b966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 814b968:	68bb      	ldr	r3, [r7, #8]
 814b96a:	015a      	lsls	r2, r3, #5
 814b96c:	68fb      	ldr	r3, [r7, #12]
 814b96e:	4413      	add	r3, r2
 814b970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814b974:	681b      	ldr	r3, [r3, #0]
 814b976:	68ba      	ldr	r2, [r7, #8]
 814b978:	0151      	lsls	r1, r2, #5
 814b97a:	68fa      	ldr	r2, [r7, #12]
 814b97c:	440a      	add	r2, r1
 814b97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814b982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 814b986:	6013      	str	r3, [r2, #0]
 814b988:	e02b      	b.n	814b9e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 814b98a:	68bb      	ldr	r3, [r7, #8]
 814b98c:	015a      	lsls	r2, r3, #5
 814b98e:	68fb      	ldr	r3, [r7, #12]
 814b990:	4413      	add	r3, r2
 814b992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b996:	681b      	ldr	r3, [r3, #0]
 814b998:	2b00      	cmp	r3, #0
 814b99a:	db12      	blt.n	814b9c2 <USB_EPSetStall+0xae>
 814b99c:	68bb      	ldr	r3, [r7, #8]
 814b99e:	2b00      	cmp	r3, #0
 814b9a0:	d00f      	beq.n	814b9c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 814b9a2:	68bb      	ldr	r3, [r7, #8]
 814b9a4:	015a      	lsls	r2, r3, #5
 814b9a6:	68fb      	ldr	r3, [r7, #12]
 814b9a8:	4413      	add	r3, r2
 814b9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b9ae:	681b      	ldr	r3, [r3, #0]
 814b9b0:	68ba      	ldr	r2, [r7, #8]
 814b9b2:	0151      	lsls	r1, r2, #5
 814b9b4:	68fa      	ldr	r2, [r7, #12]
 814b9b6:	440a      	add	r2, r1
 814b9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b9bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 814b9c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 814b9c2:	68bb      	ldr	r3, [r7, #8]
 814b9c4:	015a      	lsls	r2, r3, #5
 814b9c6:	68fb      	ldr	r3, [r7, #12]
 814b9c8:	4413      	add	r3, r2
 814b9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814b9ce:	681b      	ldr	r3, [r3, #0]
 814b9d0:	68ba      	ldr	r2, [r7, #8]
 814b9d2:	0151      	lsls	r1, r2, #5
 814b9d4:	68fa      	ldr	r2, [r7, #12]
 814b9d6:	440a      	add	r2, r1
 814b9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814b9dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 814b9e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 814b9e2:	2300      	movs	r3, #0
}
 814b9e4:	4618      	mov	r0, r3
 814b9e6:	3714      	adds	r7, #20
 814b9e8:	46bd      	mov	sp, r7
 814b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 814b9ee:	4770      	bx	lr

0814b9f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 814b9f0:	b480      	push	{r7}
 814b9f2:	b085      	sub	sp, #20
 814b9f4:	af00      	add	r7, sp, #0
 814b9f6:	6078      	str	r0, [r7, #4]
 814b9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814b9fa:	687b      	ldr	r3, [r7, #4]
 814b9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 814b9fe:	683b      	ldr	r3, [r7, #0]
 814ba00:	781b      	ldrb	r3, [r3, #0]
 814ba02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 814ba04:	683b      	ldr	r3, [r7, #0]
 814ba06:	785b      	ldrb	r3, [r3, #1]
 814ba08:	2b01      	cmp	r3, #1
 814ba0a:	d128      	bne.n	814ba5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 814ba0c:	68bb      	ldr	r3, [r7, #8]
 814ba0e:	015a      	lsls	r2, r3, #5
 814ba10:	68fb      	ldr	r3, [r7, #12]
 814ba12:	4413      	add	r3, r2
 814ba14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814ba18:	681b      	ldr	r3, [r3, #0]
 814ba1a:	68ba      	ldr	r2, [r7, #8]
 814ba1c:	0151      	lsls	r1, r2, #5
 814ba1e:	68fa      	ldr	r2, [r7, #12]
 814ba20:	440a      	add	r2, r1
 814ba22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814ba26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 814ba2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 814ba2c:	683b      	ldr	r3, [r7, #0]
 814ba2e:	791b      	ldrb	r3, [r3, #4]
 814ba30:	2b03      	cmp	r3, #3
 814ba32:	d003      	beq.n	814ba3c <USB_EPClearStall+0x4c>
 814ba34:	683b      	ldr	r3, [r7, #0]
 814ba36:	791b      	ldrb	r3, [r3, #4]
 814ba38:	2b02      	cmp	r3, #2
 814ba3a:	d138      	bne.n	814baae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 814ba3c:	68bb      	ldr	r3, [r7, #8]
 814ba3e:	015a      	lsls	r2, r3, #5
 814ba40:	68fb      	ldr	r3, [r7, #12]
 814ba42:	4413      	add	r3, r2
 814ba44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814ba48:	681b      	ldr	r3, [r3, #0]
 814ba4a:	68ba      	ldr	r2, [r7, #8]
 814ba4c:	0151      	lsls	r1, r2, #5
 814ba4e:	68fa      	ldr	r2, [r7, #12]
 814ba50:	440a      	add	r2, r1
 814ba52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814ba56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814ba5a:	6013      	str	r3, [r2, #0]
 814ba5c:	e027      	b.n	814baae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 814ba5e:	68bb      	ldr	r3, [r7, #8]
 814ba60:	015a      	lsls	r2, r3, #5
 814ba62:	68fb      	ldr	r3, [r7, #12]
 814ba64:	4413      	add	r3, r2
 814ba66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ba6a:	681b      	ldr	r3, [r3, #0]
 814ba6c:	68ba      	ldr	r2, [r7, #8]
 814ba6e:	0151      	lsls	r1, r2, #5
 814ba70:	68fa      	ldr	r2, [r7, #12]
 814ba72:	440a      	add	r2, r1
 814ba74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814ba78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 814ba7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 814ba7e:	683b      	ldr	r3, [r7, #0]
 814ba80:	791b      	ldrb	r3, [r3, #4]
 814ba82:	2b03      	cmp	r3, #3
 814ba84:	d003      	beq.n	814ba8e <USB_EPClearStall+0x9e>
 814ba86:	683b      	ldr	r3, [r7, #0]
 814ba88:	791b      	ldrb	r3, [r3, #4]
 814ba8a:	2b02      	cmp	r3, #2
 814ba8c:	d10f      	bne.n	814baae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 814ba8e:	68bb      	ldr	r3, [r7, #8]
 814ba90:	015a      	lsls	r2, r3, #5
 814ba92:	68fb      	ldr	r3, [r7, #12]
 814ba94:	4413      	add	r3, r2
 814ba96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814ba9a:	681b      	ldr	r3, [r3, #0]
 814ba9c:	68ba      	ldr	r2, [r7, #8]
 814ba9e:	0151      	lsls	r1, r2, #5
 814baa0:	68fa      	ldr	r2, [r7, #12]
 814baa2:	440a      	add	r2, r1
 814baa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814baa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 814baac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 814baae:	2300      	movs	r3, #0
}
 814bab0:	4618      	mov	r0, r3
 814bab2:	3714      	adds	r7, #20
 814bab4:	46bd      	mov	sp, r7
 814bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 814baba:	4770      	bx	lr

0814babc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 814babc:	b480      	push	{r7}
 814babe:	b085      	sub	sp, #20
 814bac0:	af00      	add	r7, sp, #0
 814bac2:	6078      	str	r0, [r7, #4]
 814bac4:	460b      	mov	r3, r1
 814bac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bac8:	687b      	ldr	r3, [r7, #4]
 814baca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 814bacc:	68fb      	ldr	r3, [r7, #12]
 814bace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bad2:	681b      	ldr	r3, [r3, #0]
 814bad4:	68fa      	ldr	r2, [r7, #12]
 814bad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814bada:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 814bade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 814bae0:	68fb      	ldr	r3, [r7, #12]
 814bae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bae6:	681a      	ldr	r2, [r3, #0]
 814bae8:	78fb      	ldrb	r3, [r7, #3]
 814baea:	011b      	lsls	r3, r3, #4
 814baec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 814baf0:	68f9      	ldr	r1, [r7, #12]
 814baf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 814baf6:	4313      	orrs	r3, r2
 814baf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 814bafa:	2300      	movs	r3, #0
}
 814bafc:	4618      	mov	r0, r3
 814bafe:	3714      	adds	r7, #20
 814bb00:	46bd      	mov	sp, r7
 814bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bb06:	4770      	bx	lr

0814bb08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 814bb08:	b480      	push	{r7}
 814bb0a:	b085      	sub	sp, #20
 814bb0c:	af00      	add	r7, sp, #0
 814bb0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bb10:	687b      	ldr	r3, [r7, #4]
 814bb12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 814bb14:	68fb      	ldr	r3, [r7, #12]
 814bb16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 814bb1a:	681b      	ldr	r3, [r3, #0]
 814bb1c:	68fa      	ldr	r2, [r7, #12]
 814bb1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 814bb22:	f023 0303 	bic.w	r3, r3, #3
 814bb26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 814bb28:	68fb      	ldr	r3, [r7, #12]
 814bb2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bb2e:	685b      	ldr	r3, [r3, #4]
 814bb30:	68fa      	ldr	r2, [r7, #12]
 814bb32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814bb36:	f023 0302 	bic.w	r3, r3, #2
 814bb3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 814bb3c:	2300      	movs	r3, #0
}
 814bb3e:	4618      	mov	r0, r3
 814bb40:	3714      	adds	r7, #20
 814bb42:	46bd      	mov	sp, r7
 814bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bb48:	4770      	bx	lr

0814bb4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 814bb4a:	b480      	push	{r7}
 814bb4c:	b085      	sub	sp, #20
 814bb4e:	af00      	add	r7, sp, #0
 814bb50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bb52:	687b      	ldr	r3, [r7, #4]
 814bb54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 814bb56:	68fb      	ldr	r3, [r7, #12]
 814bb58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 814bb5c:	681b      	ldr	r3, [r3, #0]
 814bb5e:	68fa      	ldr	r2, [r7, #12]
 814bb60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 814bb64:	f023 0303 	bic.w	r3, r3, #3
 814bb68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 814bb6a:	68fb      	ldr	r3, [r7, #12]
 814bb6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bb70:	685b      	ldr	r3, [r3, #4]
 814bb72:	68fa      	ldr	r2, [r7, #12]
 814bb74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814bb78:	f043 0302 	orr.w	r3, r3, #2
 814bb7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 814bb7e:	2300      	movs	r3, #0
}
 814bb80:	4618      	mov	r0, r3
 814bb82:	3714      	adds	r7, #20
 814bb84:	46bd      	mov	sp, r7
 814bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bb8a:	4770      	bx	lr

0814bb8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 814bb8c:	b480      	push	{r7}
 814bb8e:	b085      	sub	sp, #20
 814bb90:	af00      	add	r7, sp, #0
 814bb92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 814bb94:	687b      	ldr	r3, [r7, #4]
 814bb96:	695b      	ldr	r3, [r3, #20]
 814bb98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 814bb9a:	687b      	ldr	r3, [r7, #4]
 814bb9c:	699b      	ldr	r3, [r3, #24]
 814bb9e:	68fa      	ldr	r2, [r7, #12]
 814bba0:	4013      	ands	r3, r2
 814bba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 814bba4:	68fb      	ldr	r3, [r7, #12]
}
 814bba6:	4618      	mov	r0, r3
 814bba8:	3714      	adds	r7, #20
 814bbaa:	46bd      	mov	sp, r7
 814bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bbb0:	4770      	bx	lr

0814bbb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 814bbb2:	b480      	push	{r7}
 814bbb4:	b085      	sub	sp, #20
 814bbb6:	af00      	add	r7, sp, #0
 814bbb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bbba:	687b      	ldr	r3, [r7, #4]
 814bbbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 814bbbe:	68fb      	ldr	r3, [r7, #12]
 814bbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bbc4:	699b      	ldr	r3, [r3, #24]
 814bbc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 814bbc8:	68fb      	ldr	r3, [r7, #12]
 814bbca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bbce:	69db      	ldr	r3, [r3, #28]
 814bbd0:	68ba      	ldr	r2, [r7, #8]
 814bbd2:	4013      	ands	r3, r2
 814bbd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 814bbd6:	68bb      	ldr	r3, [r7, #8]
 814bbd8:	0c1b      	lsrs	r3, r3, #16
}
 814bbda:	4618      	mov	r0, r3
 814bbdc:	3714      	adds	r7, #20
 814bbde:	46bd      	mov	sp, r7
 814bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bbe4:	4770      	bx	lr

0814bbe6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 814bbe6:	b480      	push	{r7}
 814bbe8:	b085      	sub	sp, #20
 814bbea:	af00      	add	r7, sp, #0
 814bbec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bbee:	687b      	ldr	r3, [r7, #4]
 814bbf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 814bbf2:	68fb      	ldr	r3, [r7, #12]
 814bbf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bbf8:	699b      	ldr	r3, [r3, #24]
 814bbfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 814bbfc:	68fb      	ldr	r3, [r7, #12]
 814bbfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bc02:	69db      	ldr	r3, [r3, #28]
 814bc04:	68ba      	ldr	r2, [r7, #8]
 814bc06:	4013      	ands	r3, r2
 814bc08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 814bc0a:	68bb      	ldr	r3, [r7, #8]
 814bc0c:	b29b      	uxth	r3, r3
}
 814bc0e:	4618      	mov	r0, r3
 814bc10:	3714      	adds	r7, #20
 814bc12:	46bd      	mov	sp, r7
 814bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bc18:	4770      	bx	lr

0814bc1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 814bc1a:	b480      	push	{r7}
 814bc1c:	b085      	sub	sp, #20
 814bc1e:	af00      	add	r7, sp, #0
 814bc20:	6078      	str	r0, [r7, #4]
 814bc22:	460b      	mov	r3, r1
 814bc24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bc26:	687b      	ldr	r3, [r7, #4]
 814bc28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 814bc2a:	78fb      	ldrb	r3, [r7, #3]
 814bc2c:	015a      	lsls	r2, r3, #5
 814bc2e:	68fb      	ldr	r3, [r7, #12]
 814bc30:	4413      	add	r3, r2
 814bc32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bc36:	689b      	ldr	r3, [r3, #8]
 814bc38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 814bc3a:	68fb      	ldr	r3, [r7, #12]
 814bc3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bc40:	695b      	ldr	r3, [r3, #20]
 814bc42:	68ba      	ldr	r2, [r7, #8]
 814bc44:	4013      	ands	r3, r2
 814bc46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 814bc48:	68bb      	ldr	r3, [r7, #8]
}
 814bc4a:	4618      	mov	r0, r3
 814bc4c:	3714      	adds	r7, #20
 814bc4e:	46bd      	mov	sp, r7
 814bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bc54:	4770      	bx	lr

0814bc56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 814bc56:	b480      	push	{r7}
 814bc58:	b087      	sub	sp, #28
 814bc5a:	af00      	add	r7, sp, #0
 814bc5c:	6078      	str	r0, [r7, #4]
 814bc5e:	460b      	mov	r3, r1
 814bc60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bc62:	687b      	ldr	r3, [r7, #4]
 814bc64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 814bc66:	697b      	ldr	r3, [r7, #20]
 814bc68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bc6c:	691b      	ldr	r3, [r3, #16]
 814bc6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 814bc70:	697b      	ldr	r3, [r7, #20]
 814bc72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bc76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814bc78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 814bc7a:	78fb      	ldrb	r3, [r7, #3]
 814bc7c:	f003 030f 	and.w	r3, r3, #15
 814bc80:	68fa      	ldr	r2, [r7, #12]
 814bc82:	fa22 f303 	lsr.w	r3, r2, r3
 814bc86:	01db      	lsls	r3, r3, #7
 814bc88:	b2db      	uxtb	r3, r3
 814bc8a:	693a      	ldr	r2, [r7, #16]
 814bc8c:	4313      	orrs	r3, r2
 814bc8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 814bc90:	78fb      	ldrb	r3, [r7, #3]
 814bc92:	015a      	lsls	r2, r3, #5
 814bc94:	697b      	ldr	r3, [r7, #20]
 814bc96:	4413      	add	r3, r2
 814bc98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814bc9c:	689b      	ldr	r3, [r3, #8]
 814bc9e:	693a      	ldr	r2, [r7, #16]
 814bca0:	4013      	ands	r3, r2
 814bca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 814bca4:	68bb      	ldr	r3, [r7, #8]
}
 814bca6:	4618      	mov	r0, r3
 814bca8:	371c      	adds	r7, #28
 814bcaa:	46bd      	mov	sp, r7
 814bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bcb0:	4770      	bx	lr

0814bcb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 814bcb2:	b480      	push	{r7}
 814bcb4:	b083      	sub	sp, #12
 814bcb6:	af00      	add	r7, sp, #0
 814bcb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 814bcba:	687b      	ldr	r3, [r7, #4]
 814bcbc:	695b      	ldr	r3, [r3, #20]
 814bcbe:	f003 0301 	and.w	r3, r3, #1
}
 814bcc2:	4618      	mov	r0, r3
 814bcc4:	370c      	adds	r7, #12
 814bcc6:	46bd      	mov	sp, r7
 814bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bccc:	4770      	bx	lr

0814bcce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 814bcce:	b480      	push	{r7}
 814bcd0:	b085      	sub	sp, #20
 814bcd2:	af00      	add	r7, sp, #0
 814bcd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bcd6:	687b      	ldr	r3, [r7, #4]
 814bcd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 814bcda:	68fb      	ldr	r3, [r7, #12]
 814bcdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 814bce0:	681b      	ldr	r3, [r3, #0]
 814bce2:	68fa      	ldr	r2, [r7, #12]
 814bce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 814bce8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 814bcec:	f023 0307 	bic.w	r3, r3, #7
 814bcf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 814bcf2:	68fb      	ldr	r3, [r7, #12]
 814bcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 814bcf8:	685b      	ldr	r3, [r3, #4]
 814bcfa:	68fa      	ldr	r2, [r7, #12]
 814bcfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 814bd00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 814bd04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 814bd06:	2300      	movs	r3, #0
}
 814bd08:	4618      	mov	r0, r3
 814bd0a:	3714      	adds	r7, #20
 814bd0c:	46bd      	mov	sp, r7
 814bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bd12:	4770      	bx	lr

0814bd14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 814bd14:	b480      	push	{r7}
 814bd16:	b087      	sub	sp, #28
 814bd18:	af00      	add	r7, sp, #0
 814bd1a:	60f8      	str	r0, [r7, #12]
 814bd1c:	460b      	mov	r3, r1
 814bd1e:	607a      	str	r2, [r7, #4]
 814bd20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 814bd22:	68fb      	ldr	r3, [r7, #12]
 814bd24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 814bd26:	68fb      	ldr	r3, [r7, #12]
 814bd28:	333c      	adds	r3, #60	@ 0x3c
 814bd2a:	3304      	adds	r3, #4
 814bd2c:	681b      	ldr	r3, [r3, #0]
 814bd2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 814bd30:	693b      	ldr	r3, [r7, #16]
 814bd32:	4a26      	ldr	r2, [pc, #152]	@ (814bdcc <USB_EP0_OutStart+0xb8>)
 814bd34:	4293      	cmp	r3, r2
 814bd36:	d90a      	bls.n	814bd4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 814bd38:	697b      	ldr	r3, [r7, #20]
 814bd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bd3e:	681b      	ldr	r3, [r3, #0]
 814bd40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 814bd44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 814bd48:	d101      	bne.n	814bd4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 814bd4a:	2300      	movs	r3, #0
 814bd4c:	e037      	b.n	814bdbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 814bd4e:	697b      	ldr	r3, [r7, #20]
 814bd50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bd54:	461a      	mov	r2, r3
 814bd56:	2300      	movs	r3, #0
 814bd58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 814bd5a:	697b      	ldr	r3, [r7, #20]
 814bd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bd60:	691b      	ldr	r3, [r3, #16]
 814bd62:	697a      	ldr	r2, [r7, #20]
 814bd64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814bd68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 814bd6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 814bd6e:	697b      	ldr	r3, [r7, #20]
 814bd70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bd74:	691b      	ldr	r3, [r3, #16]
 814bd76:	697a      	ldr	r2, [r7, #20]
 814bd78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814bd7c:	f043 0318 	orr.w	r3, r3, #24
 814bd80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 814bd82:	697b      	ldr	r3, [r7, #20]
 814bd84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bd88:	691b      	ldr	r3, [r3, #16]
 814bd8a:	697a      	ldr	r2, [r7, #20]
 814bd8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814bd90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 814bd94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 814bd96:	7afb      	ldrb	r3, [r7, #11]
 814bd98:	2b01      	cmp	r3, #1
 814bd9a:	d10f      	bne.n	814bdbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 814bd9c:	697b      	ldr	r3, [r7, #20]
 814bd9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bda2:	461a      	mov	r2, r3
 814bda4:	687b      	ldr	r3, [r7, #4]
 814bda6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 814bda8:	697b      	ldr	r3, [r7, #20]
 814bdaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 814bdae:	681b      	ldr	r3, [r3, #0]
 814bdb0:	697a      	ldr	r2, [r7, #20]
 814bdb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 814bdb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 814bdba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 814bdbc:	2300      	movs	r3, #0
}
 814bdbe:	4618      	mov	r0, r3
 814bdc0:	371c      	adds	r7, #28
 814bdc2:	46bd      	mov	sp, r7
 814bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 814bdc8:	4770      	bx	lr
 814bdca:	bf00      	nop
 814bdcc:	4f54300a 	.word	0x4f54300a

0814bdd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 814bdd0:	b480      	push	{r7}
 814bdd2:	b085      	sub	sp, #20
 814bdd4:	af00      	add	r7, sp, #0
 814bdd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 814bdd8:	2300      	movs	r3, #0
 814bdda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 814bddc:	68fb      	ldr	r3, [r7, #12]
 814bdde:	3301      	adds	r3, #1
 814bde0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814bde2:	68fb      	ldr	r3, [r7, #12]
 814bde4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814bde8:	d901      	bls.n	814bdee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 814bdea:	2303      	movs	r3, #3
 814bdec:	e01b      	b.n	814be26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 814bdee:	687b      	ldr	r3, [r7, #4]
 814bdf0:	691b      	ldr	r3, [r3, #16]
 814bdf2:	2b00      	cmp	r3, #0
 814bdf4:	daf2      	bge.n	814bddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 814bdf6:	2300      	movs	r3, #0
 814bdf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 814bdfa:	687b      	ldr	r3, [r7, #4]
 814bdfc:	691b      	ldr	r3, [r3, #16]
 814bdfe:	f043 0201 	orr.w	r2, r3, #1
 814be02:	687b      	ldr	r3, [r7, #4]
 814be04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 814be06:	68fb      	ldr	r3, [r7, #12]
 814be08:	3301      	adds	r3, #1
 814be0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 814be0c:	68fb      	ldr	r3, [r7, #12]
 814be0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 814be12:	d901      	bls.n	814be18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 814be14:	2303      	movs	r3, #3
 814be16:	e006      	b.n	814be26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 814be18:	687b      	ldr	r3, [r7, #4]
 814be1a:	691b      	ldr	r3, [r3, #16]
 814be1c:	f003 0301 	and.w	r3, r3, #1
 814be20:	2b01      	cmp	r3, #1
 814be22:	d0f0      	beq.n	814be06 <USB_CoreReset+0x36>

  return HAL_OK;
 814be24:	2300      	movs	r3, #0
}
 814be26:	4618      	mov	r0, r3
 814be28:	3714      	adds	r7, #20
 814be2a:	46bd      	mov	sp, r7
 814be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 814be30:	4770      	bx	lr
	...

0814be34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 814be34:	b580      	push	{r7, lr}
 814be36:	b084      	sub	sp, #16
 814be38:	af00      	add	r7, sp, #0
 814be3a:	6078      	str	r0, [r7, #4]
 814be3c:	460b      	mov	r3, r1
 814be3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 814be40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 814be44:	f002 fd54 	bl	814e8f0 <USBD_static_malloc>
 814be48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 814be4a:	68fb      	ldr	r3, [r7, #12]
 814be4c:	2b00      	cmp	r3, #0
 814be4e:	d109      	bne.n	814be64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 814be50:	687b      	ldr	r3, [r7, #4]
 814be52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814be56:	687b      	ldr	r3, [r7, #4]
 814be58:	32b0      	adds	r2, #176	@ 0xb0
 814be5a:	2100      	movs	r1, #0
 814be5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 814be60:	2302      	movs	r3, #2
 814be62:	e0d4      	b.n	814c00e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 814be64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 814be68:	2100      	movs	r1, #0
 814be6a:	68f8      	ldr	r0, [r7, #12]
 814be6c:	f002 fd84 	bl	814e978 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 814be70:	687b      	ldr	r3, [r7, #4]
 814be72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814be76:	687b      	ldr	r3, [r7, #4]
 814be78:	32b0      	adds	r2, #176	@ 0xb0
 814be7a:	68f9      	ldr	r1, [r7, #12]
 814be7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 814be80:	687b      	ldr	r3, [r7, #4]
 814be82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814be86:	687b      	ldr	r3, [r7, #4]
 814be88:	32b0      	adds	r2, #176	@ 0xb0
 814be8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 814be8e:	687b      	ldr	r3, [r7, #4]
 814be90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 814be94:	687b      	ldr	r3, [r7, #4]
 814be96:	7c1b      	ldrb	r3, [r3, #16]
 814be98:	2b00      	cmp	r3, #0
 814be9a:	d138      	bne.n	814bf0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 814be9c:	4b5e      	ldr	r3, [pc, #376]	@ (814c018 <USBD_CDC_Init+0x1e4>)
 814be9e:	7819      	ldrb	r1, [r3, #0]
 814bea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814bea4:	2202      	movs	r2, #2
 814bea6:	6878      	ldr	r0, [r7, #4]
 814bea8:	f002 fbff 	bl	814e6aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 814beac:	4b5a      	ldr	r3, [pc, #360]	@ (814c018 <USBD_CDC_Init+0x1e4>)
 814beae:	781b      	ldrb	r3, [r3, #0]
 814beb0:	f003 020f 	and.w	r2, r3, #15
 814beb4:	6879      	ldr	r1, [r7, #4]
 814beb6:	4613      	mov	r3, r2
 814beb8:	009b      	lsls	r3, r3, #2
 814beba:	4413      	add	r3, r2
 814bebc:	009b      	lsls	r3, r3, #2
 814bebe:	440b      	add	r3, r1
 814bec0:	3324      	adds	r3, #36	@ 0x24
 814bec2:	2201      	movs	r2, #1
 814bec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 814bec6:	4b55      	ldr	r3, [pc, #340]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bec8:	7819      	ldrb	r1, [r3, #0]
 814beca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814bece:	2202      	movs	r2, #2
 814bed0:	6878      	ldr	r0, [r7, #4]
 814bed2:	f002 fbea 	bl	814e6aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 814bed6:	4b51      	ldr	r3, [pc, #324]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bed8:	781b      	ldrb	r3, [r3, #0]
 814beda:	f003 020f 	and.w	r2, r3, #15
 814bede:	6879      	ldr	r1, [r7, #4]
 814bee0:	4613      	mov	r3, r2
 814bee2:	009b      	lsls	r3, r3, #2
 814bee4:	4413      	add	r3, r2
 814bee6:	009b      	lsls	r3, r3, #2
 814bee8:	440b      	add	r3, r1
 814beea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 814beee:	2201      	movs	r2, #1
 814bef0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 814bef2:	4b4b      	ldr	r3, [pc, #300]	@ (814c020 <USBD_CDC_Init+0x1ec>)
 814bef4:	781b      	ldrb	r3, [r3, #0]
 814bef6:	f003 020f 	and.w	r2, r3, #15
 814befa:	6879      	ldr	r1, [r7, #4]
 814befc:	4613      	mov	r3, r2
 814befe:	009b      	lsls	r3, r3, #2
 814bf00:	4413      	add	r3, r2
 814bf02:	009b      	lsls	r3, r3, #2
 814bf04:	440b      	add	r3, r1
 814bf06:	3326      	adds	r3, #38	@ 0x26
 814bf08:	2210      	movs	r2, #16
 814bf0a:	801a      	strh	r2, [r3, #0]
 814bf0c:	e035      	b.n	814bf7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 814bf0e:	4b42      	ldr	r3, [pc, #264]	@ (814c018 <USBD_CDC_Init+0x1e4>)
 814bf10:	7819      	ldrb	r1, [r3, #0]
 814bf12:	2340      	movs	r3, #64	@ 0x40
 814bf14:	2202      	movs	r2, #2
 814bf16:	6878      	ldr	r0, [r7, #4]
 814bf18:	f002 fbc7 	bl	814e6aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 814bf1c:	4b3e      	ldr	r3, [pc, #248]	@ (814c018 <USBD_CDC_Init+0x1e4>)
 814bf1e:	781b      	ldrb	r3, [r3, #0]
 814bf20:	f003 020f 	and.w	r2, r3, #15
 814bf24:	6879      	ldr	r1, [r7, #4]
 814bf26:	4613      	mov	r3, r2
 814bf28:	009b      	lsls	r3, r3, #2
 814bf2a:	4413      	add	r3, r2
 814bf2c:	009b      	lsls	r3, r3, #2
 814bf2e:	440b      	add	r3, r1
 814bf30:	3324      	adds	r3, #36	@ 0x24
 814bf32:	2201      	movs	r2, #1
 814bf34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 814bf36:	4b39      	ldr	r3, [pc, #228]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bf38:	7819      	ldrb	r1, [r3, #0]
 814bf3a:	2340      	movs	r3, #64	@ 0x40
 814bf3c:	2202      	movs	r2, #2
 814bf3e:	6878      	ldr	r0, [r7, #4]
 814bf40:	f002 fbb3 	bl	814e6aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 814bf44:	4b35      	ldr	r3, [pc, #212]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bf46:	781b      	ldrb	r3, [r3, #0]
 814bf48:	f003 020f 	and.w	r2, r3, #15
 814bf4c:	6879      	ldr	r1, [r7, #4]
 814bf4e:	4613      	mov	r3, r2
 814bf50:	009b      	lsls	r3, r3, #2
 814bf52:	4413      	add	r3, r2
 814bf54:	009b      	lsls	r3, r3, #2
 814bf56:	440b      	add	r3, r1
 814bf58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 814bf5c:	2201      	movs	r2, #1
 814bf5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 814bf60:	4b2f      	ldr	r3, [pc, #188]	@ (814c020 <USBD_CDC_Init+0x1ec>)
 814bf62:	781b      	ldrb	r3, [r3, #0]
 814bf64:	f003 020f 	and.w	r2, r3, #15
 814bf68:	6879      	ldr	r1, [r7, #4]
 814bf6a:	4613      	mov	r3, r2
 814bf6c:	009b      	lsls	r3, r3, #2
 814bf6e:	4413      	add	r3, r2
 814bf70:	009b      	lsls	r3, r3, #2
 814bf72:	440b      	add	r3, r1
 814bf74:	3326      	adds	r3, #38	@ 0x26
 814bf76:	2210      	movs	r2, #16
 814bf78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 814bf7a:	4b29      	ldr	r3, [pc, #164]	@ (814c020 <USBD_CDC_Init+0x1ec>)
 814bf7c:	7819      	ldrb	r1, [r3, #0]
 814bf7e:	2308      	movs	r3, #8
 814bf80:	2203      	movs	r2, #3
 814bf82:	6878      	ldr	r0, [r7, #4]
 814bf84:	f002 fb91 	bl	814e6aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 814bf88:	4b25      	ldr	r3, [pc, #148]	@ (814c020 <USBD_CDC_Init+0x1ec>)
 814bf8a:	781b      	ldrb	r3, [r3, #0]
 814bf8c:	f003 020f 	and.w	r2, r3, #15
 814bf90:	6879      	ldr	r1, [r7, #4]
 814bf92:	4613      	mov	r3, r2
 814bf94:	009b      	lsls	r3, r3, #2
 814bf96:	4413      	add	r3, r2
 814bf98:	009b      	lsls	r3, r3, #2
 814bf9a:	440b      	add	r3, r1
 814bf9c:	3324      	adds	r3, #36	@ 0x24
 814bf9e:	2201      	movs	r2, #1
 814bfa0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 814bfa2:	68fb      	ldr	r3, [r7, #12]
 814bfa4:	2200      	movs	r2, #0
 814bfa6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 814bfaa:	687b      	ldr	r3, [r7, #4]
 814bfac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814bfb0:	687a      	ldr	r2, [r7, #4]
 814bfb2:	33b0      	adds	r3, #176	@ 0xb0
 814bfb4:	009b      	lsls	r3, r3, #2
 814bfb6:	4413      	add	r3, r2
 814bfb8:	685b      	ldr	r3, [r3, #4]
 814bfba:	681b      	ldr	r3, [r3, #0]
 814bfbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 814bfbe:	68fb      	ldr	r3, [r7, #12]
 814bfc0:	2200      	movs	r2, #0
 814bfc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 814bfc6:	68fb      	ldr	r3, [r7, #12]
 814bfc8:	2200      	movs	r2, #0
 814bfca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 814bfce:	68fb      	ldr	r3, [r7, #12]
 814bfd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 814bfd4:	2b00      	cmp	r3, #0
 814bfd6:	d101      	bne.n	814bfdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 814bfd8:	2302      	movs	r3, #2
 814bfda:	e018      	b.n	814c00e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 814bfdc:	687b      	ldr	r3, [r7, #4]
 814bfde:	7c1b      	ldrb	r3, [r3, #16]
 814bfe0:	2b00      	cmp	r3, #0
 814bfe2:	d10a      	bne.n	814bffa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 814bfe4:	4b0d      	ldr	r3, [pc, #52]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bfe6:	7819      	ldrb	r1, [r3, #0]
 814bfe8:	68fb      	ldr	r3, [r7, #12]
 814bfea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 814bfee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814bff2:	6878      	ldr	r0, [r7, #4]
 814bff4:	f002 fc48 	bl	814e888 <USBD_LL_PrepareReceive>
 814bff8:	e008      	b.n	814c00c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 814bffa:	4b08      	ldr	r3, [pc, #32]	@ (814c01c <USBD_CDC_Init+0x1e8>)
 814bffc:	7819      	ldrb	r1, [r3, #0]
 814bffe:	68fb      	ldr	r3, [r7, #12]
 814c000:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 814c004:	2340      	movs	r3, #64	@ 0x40
 814c006:	6878      	ldr	r0, [r7, #4]
 814c008:	f002 fc3e 	bl	814e888 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 814c00c:	2300      	movs	r3, #0
}
 814c00e:	4618      	mov	r0, r3
 814c010:	3710      	adds	r7, #16
 814c012:	46bd      	mov	sp, r7
 814c014:	bd80      	pop	{r7, pc}
 814c016:	bf00      	nop
 814c018:	10032187 	.word	0x10032187
 814c01c:	10032188 	.word	0x10032188
 814c020:	10032189 	.word	0x10032189

0814c024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 814c024:	b580      	push	{r7, lr}
 814c026:	b082      	sub	sp, #8
 814c028:	af00      	add	r7, sp, #0
 814c02a:	6078      	str	r0, [r7, #4]
 814c02c:	460b      	mov	r3, r1
 814c02e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 814c030:	4b3a      	ldr	r3, [pc, #232]	@ (814c11c <USBD_CDC_DeInit+0xf8>)
 814c032:	781b      	ldrb	r3, [r3, #0]
 814c034:	4619      	mov	r1, r3
 814c036:	6878      	ldr	r0, [r7, #4]
 814c038:	f002 fb5d 	bl	814e6f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 814c03c:	4b37      	ldr	r3, [pc, #220]	@ (814c11c <USBD_CDC_DeInit+0xf8>)
 814c03e:	781b      	ldrb	r3, [r3, #0]
 814c040:	f003 020f 	and.w	r2, r3, #15
 814c044:	6879      	ldr	r1, [r7, #4]
 814c046:	4613      	mov	r3, r2
 814c048:	009b      	lsls	r3, r3, #2
 814c04a:	4413      	add	r3, r2
 814c04c:	009b      	lsls	r3, r3, #2
 814c04e:	440b      	add	r3, r1
 814c050:	3324      	adds	r3, #36	@ 0x24
 814c052:	2200      	movs	r2, #0
 814c054:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 814c056:	4b32      	ldr	r3, [pc, #200]	@ (814c120 <USBD_CDC_DeInit+0xfc>)
 814c058:	781b      	ldrb	r3, [r3, #0]
 814c05a:	4619      	mov	r1, r3
 814c05c:	6878      	ldr	r0, [r7, #4]
 814c05e:	f002 fb4a 	bl	814e6f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 814c062:	4b2f      	ldr	r3, [pc, #188]	@ (814c120 <USBD_CDC_DeInit+0xfc>)
 814c064:	781b      	ldrb	r3, [r3, #0]
 814c066:	f003 020f 	and.w	r2, r3, #15
 814c06a:	6879      	ldr	r1, [r7, #4]
 814c06c:	4613      	mov	r3, r2
 814c06e:	009b      	lsls	r3, r3, #2
 814c070:	4413      	add	r3, r2
 814c072:	009b      	lsls	r3, r3, #2
 814c074:	440b      	add	r3, r1
 814c076:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 814c07a:	2200      	movs	r2, #0
 814c07c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 814c07e:	4b29      	ldr	r3, [pc, #164]	@ (814c124 <USBD_CDC_DeInit+0x100>)
 814c080:	781b      	ldrb	r3, [r3, #0]
 814c082:	4619      	mov	r1, r3
 814c084:	6878      	ldr	r0, [r7, #4]
 814c086:	f002 fb36 	bl	814e6f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 814c08a:	4b26      	ldr	r3, [pc, #152]	@ (814c124 <USBD_CDC_DeInit+0x100>)
 814c08c:	781b      	ldrb	r3, [r3, #0]
 814c08e:	f003 020f 	and.w	r2, r3, #15
 814c092:	6879      	ldr	r1, [r7, #4]
 814c094:	4613      	mov	r3, r2
 814c096:	009b      	lsls	r3, r3, #2
 814c098:	4413      	add	r3, r2
 814c09a:	009b      	lsls	r3, r3, #2
 814c09c:	440b      	add	r3, r1
 814c09e:	3324      	adds	r3, #36	@ 0x24
 814c0a0:	2200      	movs	r2, #0
 814c0a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 814c0a4:	4b1f      	ldr	r3, [pc, #124]	@ (814c124 <USBD_CDC_DeInit+0x100>)
 814c0a6:	781b      	ldrb	r3, [r3, #0]
 814c0a8:	f003 020f 	and.w	r2, r3, #15
 814c0ac:	6879      	ldr	r1, [r7, #4]
 814c0ae:	4613      	mov	r3, r2
 814c0b0:	009b      	lsls	r3, r3, #2
 814c0b2:	4413      	add	r3, r2
 814c0b4:	009b      	lsls	r3, r3, #2
 814c0b6:	440b      	add	r3, r1
 814c0b8:	3326      	adds	r3, #38	@ 0x26
 814c0ba:	2200      	movs	r2, #0
 814c0bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 814c0be:	687b      	ldr	r3, [r7, #4]
 814c0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c0c4:	687b      	ldr	r3, [r7, #4]
 814c0c6:	32b0      	adds	r2, #176	@ 0xb0
 814c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c0cc:	2b00      	cmp	r3, #0
 814c0ce:	d01f      	beq.n	814c110 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 814c0d0:	687b      	ldr	r3, [r7, #4]
 814c0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c0d6:	687a      	ldr	r2, [r7, #4]
 814c0d8:	33b0      	adds	r3, #176	@ 0xb0
 814c0da:	009b      	lsls	r3, r3, #2
 814c0dc:	4413      	add	r3, r2
 814c0de:	685b      	ldr	r3, [r3, #4]
 814c0e0:	685b      	ldr	r3, [r3, #4]
 814c0e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 814c0e4:	687b      	ldr	r3, [r7, #4]
 814c0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c0ea:	687b      	ldr	r3, [r7, #4]
 814c0ec:	32b0      	adds	r2, #176	@ 0xb0
 814c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c0f2:	4618      	mov	r0, r3
 814c0f4:	f002 fc0a 	bl	814e90c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 814c0f8:	687b      	ldr	r3, [r7, #4]
 814c0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c0fe:	687b      	ldr	r3, [r7, #4]
 814c100:	32b0      	adds	r2, #176	@ 0xb0
 814c102:	2100      	movs	r1, #0
 814c104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 814c108:	687b      	ldr	r3, [r7, #4]
 814c10a:	2200      	movs	r2, #0
 814c10c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 814c110:	2300      	movs	r3, #0
}
 814c112:	4618      	mov	r0, r3
 814c114:	3708      	adds	r7, #8
 814c116:	46bd      	mov	sp, r7
 814c118:	bd80      	pop	{r7, pc}
 814c11a:	bf00      	nop
 814c11c:	10032187 	.word	0x10032187
 814c120:	10032188 	.word	0x10032188
 814c124:	10032189 	.word	0x10032189

0814c128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 814c128:	b580      	push	{r7, lr}
 814c12a:	b086      	sub	sp, #24
 814c12c:	af00      	add	r7, sp, #0
 814c12e:	6078      	str	r0, [r7, #4]
 814c130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c132:	687b      	ldr	r3, [r7, #4]
 814c134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c138:	687b      	ldr	r3, [r7, #4]
 814c13a:	32b0      	adds	r2, #176	@ 0xb0
 814c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c140:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 814c142:	2300      	movs	r3, #0
 814c144:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 814c146:	2300      	movs	r3, #0
 814c148:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 814c14a:	2300      	movs	r3, #0
 814c14c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 814c14e:	693b      	ldr	r3, [r7, #16]
 814c150:	2b00      	cmp	r3, #0
 814c152:	d101      	bne.n	814c158 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 814c154:	2303      	movs	r3, #3
 814c156:	e0bf      	b.n	814c2d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 814c158:	683b      	ldr	r3, [r7, #0]
 814c15a:	781b      	ldrb	r3, [r3, #0]
 814c15c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 814c160:	2b00      	cmp	r3, #0
 814c162:	d050      	beq.n	814c206 <USBD_CDC_Setup+0xde>
 814c164:	2b20      	cmp	r3, #32
 814c166:	f040 80af 	bne.w	814c2c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 814c16a:	683b      	ldr	r3, [r7, #0]
 814c16c:	88db      	ldrh	r3, [r3, #6]
 814c16e:	2b00      	cmp	r3, #0
 814c170:	d03a      	beq.n	814c1e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 814c172:	683b      	ldr	r3, [r7, #0]
 814c174:	781b      	ldrb	r3, [r3, #0]
 814c176:	b25b      	sxtb	r3, r3
 814c178:	2b00      	cmp	r3, #0
 814c17a:	da1b      	bge.n	814c1b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 814c17c:	687b      	ldr	r3, [r7, #4]
 814c17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c182:	687a      	ldr	r2, [r7, #4]
 814c184:	33b0      	adds	r3, #176	@ 0xb0
 814c186:	009b      	lsls	r3, r3, #2
 814c188:	4413      	add	r3, r2
 814c18a:	685b      	ldr	r3, [r3, #4]
 814c18c:	689b      	ldr	r3, [r3, #8]
 814c18e:	683a      	ldr	r2, [r7, #0]
 814c190:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 814c192:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 814c194:	683a      	ldr	r2, [r7, #0]
 814c196:	88d2      	ldrh	r2, [r2, #6]
 814c198:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 814c19a:	683b      	ldr	r3, [r7, #0]
 814c19c:	88db      	ldrh	r3, [r3, #6]
 814c19e:	2b07      	cmp	r3, #7
 814c1a0:	bf28      	it	cs
 814c1a2:	2307      	movcs	r3, #7
 814c1a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 814c1a6:	693b      	ldr	r3, [r7, #16]
 814c1a8:	89fa      	ldrh	r2, [r7, #14]
 814c1aa:	4619      	mov	r1, r3
 814c1ac:	6878      	ldr	r0, [r7, #4]
 814c1ae:	f001 fdbd 	bl	814dd2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 814c1b2:	e090      	b.n	814c2d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 814c1b4:	683b      	ldr	r3, [r7, #0]
 814c1b6:	785a      	ldrb	r2, [r3, #1]
 814c1b8:	693b      	ldr	r3, [r7, #16]
 814c1ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 814c1be:	683b      	ldr	r3, [r7, #0]
 814c1c0:	88db      	ldrh	r3, [r3, #6]
 814c1c2:	2b3f      	cmp	r3, #63	@ 0x3f
 814c1c4:	d803      	bhi.n	814c1ce <USBD_CDC_Setup+0xa6>
 814c1c6:	683b      	ldr	r3, [r7, #0]
 814c1c8:	88db      	ldrh	r3, [r3, #6]
 814c1ca:	b2da      	uxtb	r2, r3
 814c1cc:	e000      	b.n	814c1d0 <USBD_CDC_Setup+0xa8>
 814c1ce:	2240      	movs	r2, #64	@ 0x40
 814c1d0:	693b      	ldr	r3, [r7, #16]
 814c1d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 814c1d6:	6939      	ldr	r1, [r7, #16]
 814c1d8:	693b      	ldr	r3, [r7, #16]
 814c1da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 814c1de:	461a      	mov	r2, r3
 814c1e0:	6878      	ldr	r0, [r7, #4]
 814c1e2:	f001 fdcf 	bl	814dd84 <USBD_CtlPrepareRx>
      break;
 814c1e6:	e076      	b.n	814c2d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 814c1e8:	687b      	ldr	r3, [r7, #4]
 814c1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c1ee:	687a      	ldr	r2, [r7, #4]
 814c1f0:	33b0      	adds	r3, #176	@ 0xb0
 814c1f2:	009b      	lsls	r3, r3, #2
 814c1f4:	4413      	add	r3, r2
 814c1f6:	685b      	ldr	r3, [r3, #4]
 814c1f8:	689b      	ldr	r3, [r3, #8]
 814c1fa:	683a      	ldr	r2, [r7, #0]
 814c1fc:	7850      	ldrb	r0, [r2, #1]
 814c1fe:	2200      	movs	r2, #0
 814c200:	6839      	ldr	r1, [r7, #0]
 814c202:	4798      	blx	r3
      break;
 814c204:	e067      	b.n	814c2d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 814c206:	683b      	ldr	r3, [r7, #0]
 814c208:	785b      	ldrb	r3, [r3, #1]
 814c20a:	2b0b      	cmp	r3, #11
 814c20c:	d851      	bhi.n	814c2b2 <USBD_CDC_Setup+0x18a>
 814c20e:	a201      	add	r2, pc, #4	@ (adr r2, 814c214 <USBD_CDC_Setup+0xec>)
 814c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814c214:	0814c245 	.word	0x0814c245
 814c218:	0814c2c1 	.word	0x0814c2c1
 814c21c:	0814c2b3 	.word	0x0814c2b3
 814c220:	0814c2b3 	.word	0x0814c2b3
 814c224:	0814c2b3 	.word	0x0814c2b3
 814c228:	0814c2b3 	.word	0x0814c2b3
 814c22c:	0814c2b3 	.word	0x0814c2b3
 814c230:	0814c2b3 	.word	0x0814c2b3
 814c234:	0814c2b3 	.word	0x0814c2b3
 814c238:	0814c2b3 	.word	0x0814c2b3
 814c23c:	0814c26f 	.word	0x0814c26f
 814c240:	0814c299 	.word	0x0814c299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814c244:	687b      	ldr	r3, [r7, #4]
 814c246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814c24a:	b2db      	uxtb	r3, r3
 814c24c:	2b03      	cmp	r3, #3
 814c24e:	d107      	bne.n	814c260 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 814c250:	f107 030a 	add.w	r3, r7, #10
 814c254:	2202      	movs	r2, #2
 814c256:	4619      	mov	r1, r3
 814c258:	6878      	ldr	r0, [r7, #4]
 814c25a:	f001 fd67 	bl	814dd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 814c25e:	e032      	b.n	814c2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 814c260:	6839      	ldr	r1, [r7, #0]
 814c262:	6878      	ldr	r0, [r7, #4]
 814c264:	f001 fce5 	bl	814dc32 <USBD_CtlError>
            ret = USBD_FAIL;
 814c268:	2303      	movs	r3, #3
 814c26a:	75fb      	strb	r3, [r7, #23]
          break;
 814c26c:	e02b      	b.n	814c2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814c26e:	687b      	ldr	r3, [r7, #4]
 814c270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814c274:	b2db      	uxtb	r3, r3
 814c276:	2b03      	cmp	r3, #3
 814c278:	d107      	bne.n	814c28a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 814c27a:	f107 030d 	add.w	r3, r7, #13
 814c27e:	2201      	movs	r2, #1
 814c280:	4619      	mov	r1, r3
 814c282:	6878      	ldr	r0, [r7, #4]
 814c284:	f001 fd52 	bl	814dd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 814c288:	e01d      	b.n	814c2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 814c28a:	6839      	ldr	r1, [r7, #0]
 814c28c:	6878      	ldr	r0, [r7, #4]
 814c28e:	f001 fcd0 	bl	814dc32 <USBD_CtlError>
            ret = USBD_FAIL;
 814c292:	2303      	movs	r3, #3
 814c294:	75fb      	strb	r3, [r7, #23]
          break;
 814c296:	e016      	b.n	814c2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 814c298:	687b      	ldr	r3, [r7, #4]
 814c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814c29e:	b2db      	uxtb	r3, r3
 814c2a0:	2b03      	cmp	r3, #3
 814c2a2:	d00f      	beq.n	814c2c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 814c2a4:	6839      	ldr	r1, [r7, #0]
 814c2a6:	6878      	ldr	r0, [r7, #4]
 814c2a8:	f001 fcc3 	bl	814dc32 <USBD_CtlError>
            ret = USBD_FAIL;
 814c2ac:	2303      	movs	r3, #3
 814c2ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 814c2b0:	e008      	b.n	814c2c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 814c2b2:	6839      	ldr	r1, [r7, #0]
 814c2b4:	6878      	ldr	r0, [r7, #4]
 814c2b6:	f001 fcbc 	bl	814dc32 <USBD_CtlError>
          ret = USBD_FAIL;
 814c2ba:	2303      	movs	r3, #3
 814c2bc:	75fb      	strb	r3, [r7, #23]
          break;
 814c2be:	e002      	b.n	814c2c6 <USBD_CDC_Setup+0x19e>
          break;
 814c2c0:	bf00      	nop
 814c2c2:	e008      	b.n	814c2d6 <USBD_CDC_Setup+0x1ae>
          break;
 814c2c4:	bf00      	nop
      }
      break;
 814c2c6:	e006      	b.n	814c2d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 814c2c8:	6839      	ldr	r1, [r7, #0]
 814c2ca:	6878      	ldr	r0, [r7, #4]
 814c2cc:	f001 fcb1 	bl	814dc32 <USBD_CtlError>
      ret = USBD_FAIL;
 814c2d0:	2303      	movs	r3, #3
 814c2d2:	75fb      	strb	r3, [r7, #23]
      break;
 814c2d4:	bf00      	nop
  }

  return (uint8_t)ret;
 814c2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 814c2d8:	4618      	mov	r0, r3
 814c2da:	3718      	adds	r7, #24
 814c2dc:	46bd      	mov	sp, r7
 814c2de:	bd80      	pop	{r7, pc}

0814c2e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 814c2e0:	b580      	push	{r7, lr}
 814c2e2:	b084      	sub	sp, #16
 814c2e4:	af00      	add	r7, sp, #0
 814c2e6:	6078      	str	r0, [r7, #4]
 814c2e8:	460b      	mov	r3, r1
 814c2ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 814c2ec:	687b      	ldr	r3, [r7, #4]
 814c2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814c2f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 814c2f4:	687b      	ldr	r3, [r7, #4]
 814c2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c2fa:	687b      	ldr	r3, [r7, #4]
 814c2fc:	32b0      	adds	r2, #176	@ 0xb0
 814c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c302:	2b00      	cmp	r3, #0
 814c304:	d101      	bne.n	814c30a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 814c306:	2303      	movs	r3, #3
 814c308:	e065      	b.n	814c3d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c30a:	687b      	ldr	r3, [r7, #4]
 814c30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c310:	687b      	ldr	r3, [r7, #4]
 814c312:	32b0      	adds	r2, #176	@ 0xb0
 814c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 814c31a:	78fb      	ldrb	r3, [r7, #3]
 814c31c:	f003 020f 	and.w	r2, r3, #15
 814c320:	6879      	ldr	r1, [r7, #4]
 814c322:	4613      	mov	r3, r2
 814c324:	009b      	lsls	r3, r3, #2
 814c326:	4413      	add	r3, r2
 814c328:	009b      	lsls	r3, r3, #2
 814c32a:	440b      	add	r3, r1
 814c32c:	3318      	adds	r3, #24
 814c32e:	681b      	ldr	r3, [r3, #0]
 814c330:	2b00      	cmp	r3, #0
 814c332:	d02f      	beq.n	814c394 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 814c334:	78fb      	ldrb	r3, [r7, #3]
 814c336:	f003 020f 	and.w	r2, r3, #15
 814c33a:	6879      	ldr	r1, [r7, #4]
 814c33c:	4613      	mov	r3, r2
 814c33e:	009b      	lsls	r3, r3, #2
 814c340:	4413      	add	r3, r2
 814c342:	009b      	lsls	r3, r3, #2
 814c344:	440b      	add	r3, r1
 814c346:	3318      	adds	r3, #24
 814c348:	681a      	ldr	r2, [r3, #0]
 814c34a:	78fb      	ldrb	r3, [r7, #3]
 814c34c:	f003 010f 	and.w	r1, r3, #15
 814c350:	68f8      	ldr	r0, [r7, #12]
 814c352:	460b      	mov	r3, r1
 814c354:	00db      	lsls	r3, r3, #3
 814c356:	440b      	add	r3, r1
 814c358:	009b      	lsls	r3, r3, #2
 814c35a:	4403      	add	r3, r0
 814c35c:	331c      	adds	r3, #28
 814c35e:	681b      	ldr	r3, [r3, #0]
 814c360:	fbb2 f1f3 	udiv	r1, r2, r3
 814c364:	fb01 f303 	mul.w	r3, r1, r3
 814c368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 814c36a:	2b00      	cmp	r3, #0
 814c36c:	d112      	bne.n	814c394 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 814c36e:	78fb      	ldrb	r3, [r7, #3]
 814c370:	f003 020f 	and.w	r2, r3, #15
 814c374:	6879      	ldr	r1, [r7, #4]
 814c376:	4613      	mov	r3, r2
 814c378:	009b      	lsls	r3, r3, #2
 814c37a:	4413      	add	r3, r2
 814c37c:	009b      	lsls	r3, r3, #2
 814c37e:	440b      	add	r3, r1
 814c380:	3318      	adds	r3, #24
 814c382:	2200      	movs	r2, #0
 814c384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 814c386:	78f9      	ldrb	r1, [r7, #3]
 814c388:	2300      	movs	r3, #0
 814c38a:	2200      	movs	r2, #0
 814c38c:	6878      	ldr	r0, [r7, #4]
 814c38e:	f002 fa5a 	bl	814e846 <USBD_LL_Transmit>
 814c392:	e01f      	b.n	814c3d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 814c394:	68bb      	ldr	r3, [r7, #8]
 814c396:	2200      	movs	r2, #0
 814c398:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 814c39c:	687b      	ldr	r3, [r7, #4]
 814c39e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c3a2:	687a      	ldr	r2, [r7, #4]
 814c3a4:	33b0      	adds	r3, #176	@ 0xb0
 814c3a6:	009b      	lsls	r3, r3, #2
 814c3a8:	4413      	add	r3, r2
 814c3aa:	685b      	ldr	r3, [r3, #4]
 814c3ac:	691b      	ldr	r3, [r3, #16]
 814c3ae:	2b00      	cmp	r3, #0
 814c3b0:	d010      	beq.n	814c3d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 814c3b2:	687b      	ldr	r3, [r7, #4]
 814c3b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c3b8:	687a      	ldr	r2, [r7, #4]
 814c3ba:	33b0      	adds	r3, #176	@ 0xb0
 814c3bc:	009b      	lsls	r3, r3, #2
 814c3be:	4413      	add	r3, r2
 814c3c0:	685b      	ldr	r3, [r3, #4]
 814c3c2:	691b      	ldr	r3, [r3, #16]
 814c3c4:	68ba      	ldr	r2, [r7, #8]
 814c3c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 814c3ca:	68ba      	ldr	r2, [r7, #8]
 814c3cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 814c3d0:	78fa      	ldrb	r2, [r7, #3]
 814c3d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 814c3d4:	2300      	movs	r3, #0
}
 814c3d6:	4618      	mov	r0, r3
 814c3d8:	3710      	adds	r7, #16
 814c3da:	46bd      	mov	sp, r7
 814c3dc:	bd80      	pop	{r7, pc}

0814c3de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 814c3de:	b580      	push	{r7, lr}
 814c3e0:	b084      	sub	sp, #16
 814c3e2:	af00      	add	r7, sp, #0
 814c3e4:	6078      	str	r0, [r7, #4]
 814c3e6:	460b      	mov	r3, r1
 814c3e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c3ea:	687b      	ldr	r3, [r7, #4]
 814c3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c3f0:	687b      	ldr	r3, [r7, #4]
 814c3f2:	32b0      	adds	r2, #176	@ 0xb0
 814c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c3f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 814c3fa:	687b      	ldr	r3, [r7, #4]
 814c3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c400:	687b      	ldr	r3, [r7, #4]
 814c402:	32b0      	adds	r2, #176	@ 0xb0
 814c404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c408:	2b00      	cmp	r3, #0
 814c40a:	d101      	bne.n	814c410 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 814c40c:	2303      	movs	r3, #3
 814c40e:	e01a      	b.n	814c446 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 814c410:	78fb      	ldrb	r3, [r7, #3]
 814c412:	4619      	mov	r1, r3
 814c414:	6878      	ldr	r0, [r7, #4]
 814c416:	f002 fa58 	bl	814e8ca <USBD_LL_GetRxDataSize>
 814c41a:	4602      	mov	r2, r0
 814c41c:	68fb      	ldr	r3, [r7, #12]
 814c41e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 814c422:	687b      	ldr	r3, [r7, #4]
 814c424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c428:	687a      	ldr	r2, [r7, #4]
 814c42a:	33b0      	adds	r3, #176	@ 0xb0
 814c42c:	009b      	lsls	r3, r3, #2
 814c42e:	4413      	add	r3, r2
 814c430:	685b      	ldr	r3, [r3, #4]
 814c432:	68db      	ldr	r3, [r3, #12]
 814c434:	68fa      	ldr	r2, [r7, #12]
 814c436:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 814c43a:	68fa      	ldr	r2, [r7, #12]
 814c43c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 814c440:	4611      	mov	r1, r2
 814c442:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 814c444:	2300      	movs	r3, #0
}
 814c446:	4618      	mov	r0, r3
 814c448:	3710      	adds	r7, #16
 814c44a:	46bd      	mov	sp, r7
 814c44c:	bd80      	pop	{r7, pc}

0814c44e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 814c44e:	b580      	push	{r7, lr}
 814c450:	b084      	sub	sp, #16
 814c452:	af00      	add	r7, sp, #0
 814c454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c456:	687b      	ldr	r3, [r7, #4]
 814c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c45c:	687b      	ldr	r3, [r7, #4]
 814c45e:	32b0      	adds	r2, #176	@ 0xb0
 814c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 814c466:	68fb      	ldr	r3, [r7, #12]
 814c468:	2b00      	cmp	r3, #0
 814c46a:	d101      	bne.n	814c470 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 814c46c:	2303      	movs	r3, #3
 814c46e:	e024      	b.n	814c4ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 814c470:	687b      	ldr	r3, [r7, #4]
 814c472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c476:	687a      	ldr	r2, [r7, #4]
 814c478:	33b0      	adds	r3, #176	@ 0xb0
 814c47a:	009b      	lsls	r3, r3, #2
 814c47c:	4413      	add	r3, r2
 814c47e:	685b      	ldr	r3, [r3, #4]
 814c480:	2b00      	cmp	r3, #0
 814c482:	d019      	beq.n	814c4b8 <USBD_CDC_EP0_RxReady+0x6a>
 814c484:	68fb      	ldr	r3, [r7, #12]
 814c486:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 814c48a:	2bff      	cmp	r3, #255	@ 0xff
 814c48c:	d014      	beq.n	814c4b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 814c48e:	687b      	ldr	r3, [r7, #4]
 814c490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c494:	687a      	ldr	r2, [r7, #4]
 814c496:	33b0      	adds	r3, #176	@ 0xb0
 814c498:	009b      	lsls	r3, r3, #2
 814c49a:	4413      	add	r3, r2
 814c49c:	685b      	ldr	r3, [r3, #4]
 814c49e:	689b      	ldr	r3, [r3, #8]
 814c4a0:	68fa      	ldr	r2, [r7, #12]
 814c4a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 814c4a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 814c4a8:	68fa      	ldr	r2, [r7, #12]
 814c4aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 814c4ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 814c4b0:	68fb      	ldr	r3, [r7, #12]
 814c4b2:	22ff      	movs	r2, #255	@ 0xff
 814c4b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 814c4b8:	2300      	movs	r3, #0
}
 814c4ba:	4618      	mov	r0, r3
 814c4bc:	3710      	adds	r7, #16
 814c4be:	46bd      	mov	sp, r7
 814c4c0:	bd80      	pop	{r7, pc}
	...

0814c4c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 814c4c4:	b580      	push	{r7, lr}
 814c4c6:	b086      	sub	sp, #24
 814c4c8:	af00      	add	r7, sp, #0
 814c4ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 814c4cc:	2182      	movs	r1, #130	@ 0x82
 814c4ce:	4818      	ldr	r0, [pc, #96]	@ (814c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 814c4d0:	f000 fd4f 	bl	814cf72 <USBD_GetEpDesc>
 814c4d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 814c4d6:	2101      	movs	r1, #1
 814c4d8:	4815      	ldr	r0, [pc, #84]	@ (814c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 814c4da:	f000 fd4a 	bl	814cf72 <USBD_GetEpDesc>
 814c4de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 814c4e0:	2181      	movs	r1, #129	@ 0x81
 814c4e2:	4813      	ldr	r0, [pc, #76]	@ (814c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 814c4e4:	f000 fd45 	bl	814cf72 <USBD_GetEpDesc>
 814c4e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 814c4ea:	697b      	ldr	r3, [r7, #20]
 814c4ec:	2b00      	cmp	r3, #0
 814c4ee:	d002      	beq.n	814c4f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 814c4f0:	697b      	ldr	r3, [r7, #20]
 814c4f2:	2210      	movs	r2, #16
 814c4f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 814c4f6:	693b      	ldr	r3, [r7, #16]
 814c4f8:	2b00      	cmp	r3, #0
 814c4fa:	d006      	beq.n	814c50a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 814c4fc:	693b      	ldr	r3, [r7, #16]
 814c4fe:	2200      	movs	r2, #0
 814c500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 814c504:	711a      	strb	r2, [r3, #4]
 814c506:	2200      	movs	r2, #0
 814c508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 814c50a:	68fb      	ldr	r3, [r7, #12]
 814c50c:	2b00      	cmp	r3, #0
 814c50e:	d006      	beq.n	814c51e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 814c510:	68fb      	ldr	r3, [r7, #12]
 814c512:	2200      	movs	r2, #0
 814c514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 814c518:	711a      	strb	r2, [r3, #4]
 814c51a:	2200      	movs	r2, #0
 814c51c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 814c51e:	687b      	ldr	r3, [r7, #4]
 814c520:	2243      	movs	r2, #67	@ 0x43
 814c522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 814c524:	4b02      	ldr	r3, [pc, #8]	@ (814c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 814c526:	4618      	mov	r0, r3
 814c528:	3718      	adds	r7, #24
 814c52a:	46bd      	mov	sp, r7
 814c52c:	bd80      	pop	{r7, pc}
 814c52e:	bf00      	nop
 814c530:	10032144 	.word	0x10032144

0814c534 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 814c534:	b580      	push	{r7, lr}
 814c536:	b086      	sub	sp, #24
 814c538:	af00      	add	r7, sp, #0
 814c53a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 814c53c:	2182      	movs	r1, #130	@ 0x82
 814c53e:	4818      	ldr	r0, [pc, #96]	@ (814c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 814c540:	f000 fd17 	bl	814cf72 <USBD_GetEpDesc>
 814c544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 814c546:	2101      	movs	r1, #1
 814c548:	4815      	ldr	r0, [pc, #84]	@ (814c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 814c54a:	f000 fd12 	bl	814cf72 <USBD_GetEpDesc>
 814c54e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 814c550:	2181      	movs	r1, #129	@ 0x81
 814c552:	4813      	ldr	r0, [pc, #76]	@ (814c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 814c554:	f000 fd0d 	bl	814cf72 <USBD_GetEpDesc>
 814c558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 814c55a:	697b      	ldr	r3, [r7, #20]
 814c55c:	2b00      	cmp	r3, #0
 814c55e:	d002      	beq.n	814c566 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 814c560:	697b      	ldr	r3, [r7, #20]
 814c562:	2210      	movs	r2, #16
 814c564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 814c566:	693b      	ldr	r3, [r7, #16]
 814c568:	2b00      	cmp	r3, #0
 814c56a:	d006      	beq.n	814c57a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 814c56c:	693b      	ldr	r3, [r7, #16]
 814c56e:	2200      	movs	r2, #0
 814c570:	711a      	strb	r2, [r3, #4]
 814c572:	2200      	movs	r2, #0
 814c574:	f042 0202 	orr.w	r2, r2, #2
 814c578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 814c57a:	68fb      	ldr	r3, [r7, #12]
 814c57c:	2b00      	cmp	r3, #0
 814c57e:	d006      	beq.n	814c58e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 814c580:	68fb      	ldr	r3, [r7, #12]
 814c582:	2200      	movs	r2, #0
 814c584:	711a      	strb	r2, [r3, #4]
 814c586:	2200      	movs	r2, #0
 814c588:	f042 0202 	orr.w	r2, r2, #2
 814c58c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 814c58e:	687b      	ldr	r3, [r7, #4]
 814c590:	2243      	movs	r2, #67	@ 0x43
 814c592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 814c594:	4b02      	ldr	r3, [pc, #8]	@ (814c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 814c596:	4618      	mov	r0, r3
 814c598:	3718      	adds	r7, #24
 814c59a:	46bd      	mov	sp, r7
 814c59c:	bd80      	pop	{r7, pc}
 814c59e:	bf00      	nop
 814c5a0:	10032144 	.word	0x10032144

0814c5a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 814c5a4:	b580      	push	{r7, lr}
 814c5a6:	b086      	sub	sp, #24
 814c5a8:	af00      	add	r7, sp, #0
 814c5aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 814c5ac:	2182      	movs	r1, #130	@ 0x82
 814c5ae:	4818      	ldr	r0, [pc, #96]	@ (814c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 814c5b0:	f000 fcdf 	bl	814cf72 <USBD_GetEpDesc>
 814c5b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 814c5b6:	2101      	movs	r1, #1
 814c5b8:	4815      	ldr	r0, [pc, #84]	@ (814c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 814c5ba:	f000 fcda 	bl	814cf72 <USBD_GetEpDesc>
 814c5be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 814c5c0:	2181      	movs	r1, #129	@ 0x81
 814c5c2:	4813      	ldr	r0, [pc, #76]	@ (814c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 814c5c4:	f000 fcd5 	bl	814cf72 <USBD_GetEpDesc>
 814c5c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 814c5ca:	697b      	ldr	r3, [r7, #20]
 814c5cc:	2b00      	cmp	r3, #0
 814c5ce:	d002      	beq.n	814c5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 814c5d0:	697b      	ldr	r3, [r7, #20]
 814c5d2:	2210      	movs	r2, #16
 814c5d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 814c5d6:	693b      	ldr	r3, [r7, #16]
 814c5d8:	2b00      	cmp	r3, #0
 814c5da:	d006      	beq.n	814c5ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 814c5dc:	693b      	ldr	r3, [r7, #16]
 814c5de:	2200      	movs	r2, #0
 814c5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 814c5e4:	711a      	strb	r2, [r3, #4]
 814c5e6:	2200      	movs	r2, #0
 814c5e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 814c5ea:	68fb      	ldr	r3, [r7, #12]
 814c5ec:	2b00      	cmp	r3, #0
 814c5ee:	d006      	beq.n	814c5fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 814c5f0:	68fb      	ldr	r3, [r7, #12]
 814c5f2:	2200      	movs	r2, #0
 814c5f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 814c5f8:	711a      	strb	r2, [r3, #4]
 814c5fa:	2200      	movs	r2, #0
 814c5fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 814c5fe:	687b      	ldr	r3, [r7, #4]
 814c600:	2243      	movs	r2, #67	@ 0x43
 814c602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 814c604:	4b02      	ldr	r3, [pc, #8]	@ (814c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 814c606:	4618      	mov	r0, r3
 814c608:	3718      	adds	r7, #24
 814c60a:	46bd      	mov	sp, r7
 814c60c:	bd80      	pop	{r7, pc}
 814c60e:	bf00      	nop
 814c610:	10032144 	.word	0x10032144

0814c614 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 814c614:	b480      	push	{r7}
 814c616:	b083      	sub	sp, #12
 814c618:	af00      	add	r7, sp, #0
 814c61a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 814c61c:	687b      	ldr	r3, [r7, #4]
 814c61e:	220a      	movs	r2, #10
 814c620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 814c622:	4b03      	ldr	r3, [pc, #12]	@ (814c630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 814c624:	4618      	mov	r0, r3
 814c626:	370c      	adds	r7, #12
 814c628:	46bd      	mov	sp, r7
 814c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814c62e:	4770      	bx	lr
 814c630:	10032100 	.word	0x10032100

0814c634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 814c634:	b480      	push	{r7}
 814c636:	b083      	sub	sp, #12
 814c638:	af00      	add	r7, sp, #0
 814c63a:	6078      	str	r0, [r7, #4]
 814c63c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 814c63e:	683b      	ldr	r3, [r7, #0]
 814c640:	2b00      	cmp	r3, #0
 814c642:	d101      	bne.n	814c648 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 814c644:	2303      	movs	r3, #3
 814c646:	e009      	b.n	814c65c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 814c648:	687b      	ldr	r3, [r7, #4]
 814c64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 814c64e:	687a      	ldr	r2, [r7, #4]
 814c650:	33b0      	adds	r3, #176	@ 0xb0
 814c652:	009b      	lsls	r3, r3, #2
 814c654:	4413      	add	r3, r2
 814c656:	683a      	ldr	r2, [r7, #0]
 814c658:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 814c65a:	2300      	movs	r3, #0
}
 814c65c:	4618      	mov	r0, r3
 814c65e:	370c      	adds	r7, #12
 814c660:	46bd      	mov	sp, r7
 814c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 814c666:	4770      	bx	lr

0814c668 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 814c668:	b480      	push	{r7}
 814c66a:	b087      	sub	sp, #28
 814c66c:	af00      	add	r7, sp, #0
 814c66e:	60f8      	str	r0, [r7, #12]
 814c670:	60b9      	str	r1, [r7, #8]
 814c672:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c674:	68fb      	ldr	r3, [r7, #12]
 814c676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c67a:	68fb      	ldr	r3, [r7, #12]
 814c67c:	32b0      	adds	r2, #176	@ 0xb0
 814c67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c682:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 814c684:	697b      	ldr	r3, [r7, #20]
 814c686:	2b00      	cmp	r3, #0
 814c688:	d101      	bne.n	814c68e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 814c68a:	2303      	movs	r3, #3
 814c68c:	e008      	b.n	814c6a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 814c68e:	697b      	ldr	r3, [r7, #20]
 814c690:	68ba      	ldr	r2, [r7, #8]
 814c692:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 814c696:	697b      	ldr	r3, [r7, #20]
 814c698:	687a      	ldr	r2, [r7, #4]
 814c69a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 814c69e:	2300      	movs	r3, #0
}
 814c6a0:	4618      	mov	r0, r3
 814c6a2:	371c      	adds	r7, #28
 814c6a4:	46bd      	mov	sp, r7
 814c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 814c6aa:	4770      	bx	lr

0814c6ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 814c6ac:	b480      	push	{r7}
 814c6ae:	b085      	sub	sp, #20
 814c6b0:	af00      	add	r7, sp, #0
 814c6b2:	6078      	str	r0, [r7, #4]
 814c6b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c6b6:	687b      	ldr	r3, [r7, #4]
 814c6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c6bc:	687b      	ldr	r3, [r7, #4]
 814c6be:	32b0      	adds	r2, #176	@ 0xb0
 814c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c6c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 814c6c6:	68fb      	ldr	r3, [r7, #12]
 814c6c8:	2b00      	cmp	r3, #0
 814c6ca:	d101      	bne.n	814c6d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 814c6cc:	2303      	movs	r3, #3
 814c6ce:	e004      	b.n	814c6da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 814c6d0:	68fb      	ldr	r3, [r7, #12]
 814c6d2:	683a      	ldr	r2, [r7, #0]
 814c6d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 814c6d8:	2300      	movs	r3, #0
}
 814c6da:	4618      	mov	r0, r3
 814c6dc:	3714      	adds	r7, #20
 814c6de:	46bd      	mov	sp, r7
 814c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 814c6e4:	4770      	bx	lr
	...

0814c6e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 814c6e8:	b580      	push	{r7, lr}
 814c6ea:	b084      	sub	sp, #16
 814c6ec:	af00      	add	r7, sp, #0
 814c6ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c6f0:	687b      	ldr	r3, [r7, #4]
 814c6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c6f6:	687b      	ldr	r3, [r7, #4]
 814c6f8:	32b0      	adds	r2, #176	@ 0xb0
 814c6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c6fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 814c700:	2301      	movs	r3, #1
 814c702:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 814c704:	68bb      	ldr	r3, [r7, #8]
 814c706:	2b00      	cmp	r3, #0
 814c708:	d101      	bne.n	814c70e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 814c70a:	2303      	movs	r3, #3
 814c70c:	e025      	b.n	814c75a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 814c70e:	68bb      	ldr	r3, [r7, #8]
 814c710:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 814c714:	2b00      	cmp	r3, #0
 814c716:	d11f      	bne.n	814c758 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 814c718:	68bb      	ldr	r3, [r7, #8]
 814c71a:	2201      	movs	r2, #1
 814c71c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 814c720:	4b10      	ldr	r3, [pc, #64]	@ (814c764 <USBD_CDC_TransmitPacket+0x7c>)
 814c722:	781b      	ldrb	r3, [r3, #0]
 814c724:	f003 020f 	and.w	r2, r3, #15
 814c728:	68bb      	ldr	r3, [r7, #8]
 814c72a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 814c72e:	6878      	ldr	r0, [r7, #4]
 814c730:	4613      	mov	r3, r2
 814c732:	009b      	lsls	r3, r3, #2
 814c734:	4413      	add	r3, r2
 814c736:	009b      	lsls	r3, r3, #2
 814c738:	4403      	add	r3, r0
 814c73a:	3318      	adds	r3, #24
 814c73c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 814c73e:	4b09      	ldr	r3, [pc, #36]	@ (814c764 <USBD_CDC_TransmitPacket+0x7c>)
 814c740:	7819      	ldrb	r1, [r3, #0]
 814c742:	68bb      	ldr	r3, [r7, #8]
 814c744:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 814c748:	68bb      	ldr	r3, [r7, #8]
 814c74a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 814c74e:	6878      	ldr	r0, [r7, #4]
 814c750:	f002 f879 	bl	814e846 <USBD_LL_Transmit>

    ret = USBD_OK;
 814c754:	2300      	movs	r3, #0
 814c756:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 814c758:	7bfb      	ldrb	r3, [r7, #15]
}
 814c75a:	4618      	mov	r0, r3
 814c75c:	3710      	adds	r7, #16
 814c75e:	46bd      	mov	sp, r7
 814c760:	bd80      	pop	{r7, pc}
 814c762:	bf00      	nop
 814c764:	10032187 	.word	0x10032187

0814c768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 814c768:	b580      	push	{r7, lr}
 814c76a:	b084      	sub	sp, #16
 814c76c:	af00      	add	r7, sp, #0
 814c76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 814c770:	687b      	ldr	r3, [r7, #4]
 814c772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c776:	687b      	ldr	r3, [r7, #4]
 814c778:	32b0      	adds	r2, #176	@ 0xb0
 814c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c77e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 814c780:	687b      	ldr	r3, [r7, #4]
 814c782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c786:	687b      	ldr	r3, [r7, #4]
 814c788:	32b0      	adds	r2, #176	@ 0xb0
 814c78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c78e:	2b00      	cmp	r3, #0
 814c790:	d101      	bne.n	814c796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 814c792:	2303      	movs	r3, #3
 814c794:	e018      	b.n	814c7c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 814c796:	687b      	ldr	r3, [r7, #4]
 814c798:	7c1b      	ldrb	r3, [r3, #16]
 814c79a:	2b00      	cmp	r3, #0
 814c79c:	d10a      	bne.n	814c7b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 814c79e:	4b0c      	ldr	r3, [pc, #48]	@ (814c7d0 <USBD_CDC_ReceivePacket+0x68>)
 814c7a0:	7819      	ldrb	r1, [r3, #0]
 814c7a2:	68fb      	ldr	r3, [r7, #12]
 814c7a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 814c7a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 814c7ac:	6878      	ldr	r0, [r7, #4]
 814c7ae:	f002 f86b 	bl	814e888 <USBD_LL_PrepareReceive>
 814c7b2:	e008      	b.n	814c7c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 814c7b4:	4b06      	ldr	r3, [pc, #24]	@ (814c7d0 <USBD_CDC_ReceivePacket+0x68>)
 814c7b6:	7819      	ldrb	r1, [r3, #0]
 814c7b8:	68fb      	ldr	r3, [r7, #12]
 814c7ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 814c7be:	2340      	movs	r3, #64	@ 0x40
 814c7c0:	6878      	ldr	r0, [r7, #4]
 814c7c2:	f002 f861 	bl	814e888 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 814c7c6:	2300      	movs	r3, #0
}
 814c7c8:	4618      	mov	r0, r3
 814c7ca:	3710      	adds	r7, #16
 814c7cc:	46bd      	mov	sp, r7
 814c7ce:	bd80      	pop	{r7, pc}
 814c7d0:	10032188 	.word	0x10032188

0814c7d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 814c7d4:	b580      	push	{r7, lr}
 814c7d6:	b086      	sub	sp, #24
 814c7d8:	af00      	add	r7, sp, #0
 814c7da:	60f8      	str	r0, [r7, #12]
 814c7dc:	60b9      	str	r1, [r7, #8]
 814c7de:	4613      	mov	r3, r2
 814c7e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 814c7e2:	68fb      	ldr	r3, [r7, #12]
 814c7e4:	2b00      	cmp	r3, #0
 814c7e6:	d101      	bne.n	814c7ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 814c7e8:	2303      	movs	r3, #3
 814c7ea:	e01f      	b.n	814c82c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 814c7ec:	68fb      	ldr	r3, [r7, #12]
 814c7ee:	2200      	movs	r2, #0
 814c7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 814c7f4:	68fb      	ldr	r3, [r7, #12]
 814c7f6:	2200      	movs	r2, #0
 814c7f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 814c7fc:	68fb      	ldr	r3, [r7, #12]
 814c7fe:	2200      	movs	r2, #0
 814c800:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 814c804:	68bb      	ldr	r3, [r7, #8]
 814c806:	2b00      	cmp	r3, #0
 814c808:	d003      	beq.n	814c812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 814c80a:	68fb      	ldr	r3, [r7, #12]
 814c80c:	68ba      	ldr	r2, [r7, #8]
 814c80e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 814c812:	68fb      	ldr	r3, [r7, #12]
 814c814:	2201      	movs	r2, #1
 814c816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 814c81a:	68fb      	ldr	r3, [r7, #12]
 814c81c:	79fa      	ldrb	r2, [r7, #7]
 814c81e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 814c820:	68f8      	ldr	r0, [r7, #12]
 814c822:	f001 fed7 	bl	814e5d4 <USBD_LL_Init>
 814c826:	4603      	mov	r3, r0
 814c828:	75fb      	strb	r3, [r7, #23]

  return ret;
 814c82a:	7dfb      	ldrb	r3, [r7, #23]
}
 814c82c:	4618      	mov	r0, r3
 814c82e:	3718      	adds	r7, #24
 814c830:	46bd      	mov	sp, r7
 814c832:	bd80      	pop	{r7, pc}

0814c834 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 814c834:	b580      	push	{r7, lr}
 814c836:	b084      	sub	sp, #16
 814c838:	af00      	add	r7, sp, #0
 814c83a:	6078      	str	r0, [r7, #4]
 814c83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 814c83e:	2300      	movs	r3, #0
 814c840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 814c842:	683b      	ldr	r3, [r7, #0]
 814c844:	2b00      	cmp	r3, #0
 814c846:	d101      	bne.n	814c84c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 814c848:	2303      	movs	r3, #3
 814c84a:	e025      	b.n	814c898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 814c84c:	687b      	ldr	r3, [r7, #4]
 814c84e:	683a      	ldr	r2, [r7, #0]
 814c850:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 814c854:	687b      	ldr	r3, [r7, #4]
 814c856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c85a:	687b      	ldr	r3, [r7, #4]
 814c85c:	32ae      	adds	r2, #174	@ 0xae
 814c85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814c864:	2b00      	cmp	r3, #0
 814c866:	d00f      	beq.n	814c888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 814c868:	687b      	ldr	r3, [r7, #4]
 814c86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814c86e:	687b      	ldr	r3, [r7, #4]
 814c870:	32ae      	adds	r2, #174	@ 0xae
 814c872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814c876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814c878:	f107 020e 	add.w	r2, r7, #14
 814c87c:	4610      	mov	r0, r2
 814c87e:	4798      	blx	r3
 814c880:	4602      	mov	r2, r0
 814c882:	687b      	ldr	r3, [r7, #4]
 814c884:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 814c888:	687b      	ldr	r3, [r7, #4]
 814c88a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 814c88e:	1c5a      	adds	r2, r3, #1
 814c890:	687b      	ldr	r3, [r7, #4]
 814c892:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 814c896:	2300      	movs	r3, #0
}
 814c898:	4618      	mov	r0, r3
 814c89a:	3710      	adds	r7, #16
 814c89c:	46bd      	mov	sp, r7
 814c89e:	bd80      	pop	{r7, pc}

0814c8a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 814c8a0:	b580      	push	{r7, lr}
 814c8a2:	b082      	sub	sp, #8
 814c8a4:	af00      	add	r7, sp, #0
 814c8a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 814c8a8:	6878      	ldr	r0, [r7, #4]
 814c8aa:	f001 fee3 	bl	814e674 <USBD_LL_Start>
 814c8ae:	4603      	mov	r3, r0
}
 814c8b0:	4618      	mov	r0, r3
 814c8b2:	3708      	adds	r7, #8
 814c8b4:	46bd      	mov	sp, r7
 814c8b6:	bd80      	pop	{r7, pc}

0814c8b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 814c8b8:	b480      	push	{r7}
 814c8ba:	b083      	sub	sp, #12
 814c8bc:	af00      	add	r7, sp, #0
 814c8be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 814c8c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 814c8c2:	4618      	mov	r0, r3
 814c8c4:	370c      	adds	r7, #12
 814c8c6:	46bd      	mov	sp, r7
 814c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 814c8cc:	4770      	bx	lr

0814c8ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 814c8ce:	b580      	push	{r7, lr}
 814c8d0:	b084      	sub	sp, #16
 814c8d2:	af00      	add	r7, sp, #0
 814c8d4:	6078      	str	r0, [r7, #4]
 814c8d6:	460b      	mov	r3, r1
 814c8d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 814c8da:	2300      	movs	r3, #0
 814c8dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 814c8de:	687b      	ldr	r3, [r7, #4]
 814c8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814c8e4:	2b00      	cmp	r3, #0
 814c8e6:	d009      	beq.n	814c8fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 814c8e8:	687b      	ldr	r3, [r7, #4]
 814c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814c8ee:	681b      	ldr	r3, [r3, #0]
 814c8f0:	78fa      	ldrb	r2, [r7, #3]
 814c8f2:	4611      	mov	r1, r2
 814c8f4:	6878      	ldr	r0, [r7, #4]
 814c8f6:	4798      	blx	r3
 814c8f8:	4603      	mov	r3, r0
 814c8fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 814c8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 814c8fe:	4618      	mov	r0, r3
 814c900:	3710      	adds	r7, #16
 814c902:	46bd      	mov	sp, r7
 814c904:	bd80      	pop	{r7, pc}

0814c906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 814c906:	b580      	push	{r7, lr}
 814c908:	b084      	sub	sp, #16
 814c90a:	af00      	add	r7, sp, #0
 814c90c:	6078      	str	r0, [r7, #4]
 814c90e:	460b      	mov	r3, r1
 814c910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 814c912:	2300      	movs	r3, #0
 814c914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 814c916:	687b      	ldr	r3, [r7, #4]
 814c918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814c91c:	685b      	ldr	r3, [r3, #4]
 814c91e:	78fa      	ldrb	r2, [r7, #3]
 814c920:	4611      	mov	r1, r2
 814c922:	6878      	ldr	r0, [r7, #4]
 814c924:	4798      	blx	r3
 814c926:	4603      	mov	r3, r0
 814c928:	2b00      	cmp	r3, #0
 814c92a:	d001      	beq.n	814c930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 814c92c:	2303      	movs	r3, #3
 814c92e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 814c930:	7bfb      	ldrb	r3, [r7, #15]
}
 814c932:	4618      	mov	r0, r3
 814c934:	3710      	adds	r7, #16
 814c936:	46bd      	mov	sp, r7
 814c938:	bd80      	pop	{r7, pc}

0814c93a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 814c93a:	b580      	push	{r7, lr}
 814c93c:	b084      	sub	sp, #16
 814c93e:	af00      	add	r7, sp, #0
 814c940:	6078      	str	r0, [r7, #4]
 814c942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 814c944:	687b      	ldr	r3, [r7, #4]
 814c946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 814c94a:	6839      	ldr	r1, [r7, #0]
 814c94c:	4618      	mov	r0, r3
 814c94e:	f001 f936 	bl	814dbbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 814c952:	687b      	ldr	r3, [r7, #4]
 814c954:	2201      	movs	r2, #1
 814c956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 814c95a:	687b      	ldr	r3, [r7, #4]
 814c95c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 814c960:	461a      	mov	r2, r3
 814c962:	687b      	ldr	r3, [r7, #4]
 814c964:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 814c968:	687b      	ldr	r3, [r7, #4]
 814c96a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 814c96e:	f003 031f 	and.w	r3, r3, #31
 814c972:	2b02      	cmp	r3, #2
 814c974:	d01a      	beq.n	814c9ac <USBD_LL_SetupStage+0x72>
 814c976:	2b02      	cmp	r3, #2
 814c978:	d822      	bhi.n	814c9c0 <USBD_LL_SetupStage+0x86>
 814c97a:	2b00      	cmp	r3, #0
 814c97c:	d002      	beq.n	814c984 <USBD_LL_SetupStage+0x4a>
 814c97e:	2b01      	cmp	r3, #1
 814c980:	d00a      	beq.n	814c998 <USBD_LL_SetupStage+0x5e>
 814c982:	e01d      	b.n	814c9c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 814c984:	687b      	ldr	r3, [r7, #4]
 814c986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 814c98a:	4619      	mov	r1, r3
 814c98c:	6878      	ldr	r0, [r7, #4]
 814c98e:	f000 fb63 	bl	814d058 <USBD_StdDevReq>
 814c992:	4603      	mov	r3, r0
 814c994:	73fb      	strb	r3, [r7, #15]
      break;
 814c996:	e020      	b.n	814c9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 814c998:	687b      	ldr	r3, [r7, #4]
 814c99a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 814c99e:	4619      	mov	r1, r3
 814c9a0:	6878      	ldr	r0, [r7, #4]
 814c9a2:	f000 fbcb 	bl	814d13c <USBD_StdItfReq>
 814c9a6:	4603      	mov	r3, r0
 814c9a8:	73fb      	strb	r3, [r7, #15]
      break;
 814c9aa:	e016      	b.n	814c9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 814c9ac:	687b      	ldr	r3, [r7, #4]
 814c9ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 814c9b2:	4619      	mov	r1, r3
 814c9b4:	6878      	ldr	r0, [r7, #4]
 814c9b6:	f000 fc2d 	bl	814d214 <USBD_StdEPReq>
 814c9ba:	4603      	mov	r3, r0
 814c9bc:	73fb      	strb	r3, [r7, #15]
      break;
 814c9be:	e00c      	b.n	814c9da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 814c9c0:	687b      	ldr	r3, [r7, #4]
 814c9c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 814c9c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 814c9ca:	b2db      	uxtb	r3, r3
 814c9cc:	4619      	mov	r1, r3
 814c9ce:	6878      	ldr	r0, [r7, #4]
 814c9d0:	f001 feb0 	bl	814e734 <USBD_LL_StallEP>
 814c9d4:	4603      	mov	r3, r0
 814c9d6:	73fb      	strb	r3, [r7, #15]
      break;
 814c9d8:	bf00      	nop
  }

  return ret;
 814c9da:	7bfb      	ldrb	r3, [r7, #15]
}
 814c9dc:	4618      	mov	r0, r3
 814c9de:	3710      	adds	r7, #16
 814c9e0:	46bd      	mov	sp, r7
 814c9e2:	bd80      	pop	{r7, pc}

0814c9e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 814c9e4:	b580      	push	{r7, lr}
 814c9e6:	b086      	sub	sp, #24
 814c9e8:	af00      	add	r7, sp, #0
 814c9ea:	60f8      	str	r0, [r7, #12]
 814c9ec:	460b      	mov	r3, r1
 814c9ee:	607a      	str	r2, [r7, #4]
 814c9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 814c9f2:	2300      	movs	r3, #0
 814c9f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 814c9f6:	7afb      	ldrb	r3, [r7, #11]
 814c9f8:	2b00      	cmp	r3, #0
 814c9fa:	d16e      	bne.n	814cada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 814c9fc:	68fb      	ldr	r3, [r7, #12]
 814c9fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 814ca02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 814ca04:	68fb      	ldr	r3, [r7, #12]
 814ca06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 814ca0a:	2b03      	cmp	r3, #3
 814ca0c:	f040 8098 	bne.w	814cb40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 814ca10:	693b      	ldr	r3, [r7, #16]
 814ca12:	689a      	ldr	r2, [r3, #8]
 814ca14:	693b      	ldr	r3, [r7, #16]
 814ca16:	68db      	ldr	r3, [r3, #12]
 814ca18:	429a      	cmp	r2, r3
 814ca1a:	d913      	bls.n	814ca44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 814ca1c:	693b      	ldr	r3, [r7, #16]
 814ca1e:	689a      	ldr	r2, [r3, #8]
 814ca20:	693b      	ldr	r3, [r7, #16]
 814ca22:	68db      	ldr	r3, [r3, #12]
 814ca24:	1ad2      	subs	r2, r2, r3
 814ca26:	693b      	ldr	r3, [r7, #16]
 814ca28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 814ca2a:	693b      	ldr	r3, [r7, #16]
 814ca2c:	68da      	ldr	r2, [r3, #12]
 814ca2e:	693b      	ldr	r3, [r7, #16]
 814ca30:	689b      	ldr	r3, [r3, #8]
 814ca32:	4293      	cmp	r3, r2
 814ca34:	bf28      	it	cs
 814ca36:	4613      	movcs	r3, r2
 814ca38:	461a      	mov	r2, r3
 814ca3a:	6879      	ldr	r1, [r7, #4]
 814ca3c:	68f8      	ldr	r0, [r7, #12]
 814ca3e:	f001 f9be 	bl	814ddbe <USBD_CtlContinueRx>
 814ca42:	e07d      	b.n	814cb40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 814ca44:	68fb      	ldr	r3, [r7, #12]
 814ca46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 814ca4a:	f003 031f 	and.w	r3, r3, #31
 814ca4e:	2b02      	cmp	r3, #2
 814ca50:	d014      	beq.n	814ca7c <USBD_LL_DataOutStage+0x98>
 814ca52:	2b02      	cmp	r3, #2
 814ca54:	d81d      	bhi.n	814ca92 <USBD_LL_DataOutStage+0xae>
 814ca56:	2b00      	cmp	r3, #0
 814ca58:	d002      	beq.n	814ca60 <USBD_LL_DataOutStage+0x7c>
 814ca5a:	2b01      	cmp	r3, #1
 814ca5c:	d003      	beq.n	814ca66 <USBD_LL_DataOutStage+0x82>
 814ca5e:	e018      	b.n	814ca92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 814ca60:	2300      	movs	r3, #0
 814ca62:	75bb      	strb	r3, [r7, #22]
            break;
 814ca64:	e018      	b.n	814ca98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 814ca66:	68fb      	ldr	r3, [r7, #12]
 814ca68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 814ca6c:	b2db      	uxtb	r3, r3
 814ca6e:	4619      	mov	r1, r3
 814ca70:	68f8      	ldr	r0, [r7, #12]
 814ca72:	f000 fa64 	bl	814cf3e <USBD_CoreFindIF>
 814ca76:	4603      	mov	r3, r0
 814ca78:	75bb      	strb	r3, [r7, #22]
            break;
 814ca7a:	e00d      	b.n	814ca98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 814ca7c:	68fb      	ldr	r3, [r7, #12]
 814ca7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 814ca82:	b2db      	uxtb	r3, r3
 814ca84:	4619      	mov	r1, r3
 814ca86:	68f8      	ldr	r0, [r7, #12]
 814ca88:	f000 fa66 	bl	814cf58 <USBD_CoreFindEP>
 814ca8c:	4603      	mov	r3, r0
 814ca8e:	75bb      	strb	r3, [r7, #22]
            break;
 814ca90:	e002      	b.n	814ca98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 814ca92:	2300      	movs	r3, #0
 814ca94:	75bb      	strb	r3, [r7, #22]
            break;
 814ca96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 814ca98:	7dbb      	ldrb	r3, [r7, #22]
 814ca9a:	2b00      	cmp	r3, #0
 814ca9c:	d119      	bne.n	814cad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814ca9e:	68fb      	ldr	r3, [r7, #12]
 814caa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814caa4:	b2db      	uxtb	r3, r3
 814caa6:	2b03      	cmp	r3, #3
 814caa8:	d113      	bne.n	814cad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 814caaa:	7dba      	ldrb	r2, [r7, #22]
 814caac:	68fb      	ldr	r3, [r7, #12]
 814caae:	32ae      	adds	r2, #174	@ 0xae
 814cab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cab4:	691b      	ldr	r3, [r3, #16]
 814cab6:	2b00      	cmp	r3, #0
 814cab8:	d00b      	beq.n	814cad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 814caba:	7dba      	ldrb	r2, [r7, #22]
 814cabc:	68fb      	ldr	r3, [r7, #12]
 814cabe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 814cac2:	7dba      	ldrb	r2, [r7, #22]
 814cac4:	68fb      	ldr	r3, [r7, #12]
 814cac6:	32ae      	adds	r2, #174	@ 0xae
 814cac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cacc:	691b      	ldr	r3, [r3, #16]
 814cace:	68f8      	ldr	r0, [r7, #12]
 814cad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 814cad2:	68f8      	ldr	r0, [r7, #12]
 814cad4:	f001 f984 	bl	814dde0 <USBD_CtlSendStatus>
 814cad8:	e032      	b.n	814cb40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 814cada:	7afb      	ldrb	r3, [r7, #11]
 814cadc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814cae0:	b2db      	uxtb	r3, r3
 814cae2:	4619      	mov	r1, r3
 814cae4:	68f8      	ldr	r0, [r7, #12]
 814cae6:	f000 fa37 	bl	814cf58 <USBD_CoreFindEP>
 814caea:	4603      	mov	r3, r0
 814caec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 814caee:	7dbb      	ldrb	r3, [r7, #22]
 814caf0:	2bff      	cmp	r3, #255	@ 0xff
 814caf2:	d025      	beq.n	814cb40 <USBD_LL_DataOutStage+0x15c>
 814caf4:	7dbb      	ldrb	r3, [r7, #22]
 814caf6:	2b00      	cmp	r3, #0
 814caf8:	d122      	bne.n	814cb40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814cafa:	68fb      	ldr	r3, [r7, #12]
 814cafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cb00:	b2db      	uxtb	r3, r3
 814cb02:	2b03      	cmp	r3, #3
 814cb04:	d117      	bne.n	814cb36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 814cb06:	7dba      	ldrb	r2, [r7, #22]
 814cb08:	68fb      	ldr	r3, [r7, #12]
 814cb0a:	32ae      	adds	r2, #174	@ 0xae
 814cb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cb10:	699b      	ldr	r3, [r3, #24]
 814cb12:	2b00      	cmp	r3, #0
 814cb14:	d00f      	beq.n	814cb36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 814cb16:	7dba      	ldrb	r2, [r7, #22]
 814cb18:	68fb      	ldr	r3, [r7, #12]
 814cb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 814cb1e:	7dba      	ldrb	r2, [r7, #22]
 814cb20:	68fb      	ldr	r3, [r7, #12]
 814cb22:	32ae      	adds	r2, #174	@ 0xae
 814cb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cb28:	699b      	ldr	r3, [r3, #24]
 814cb2a:	7afa      	ldrb	r2, [r7, #11]
 814cb2c:	4611      	mov	r1, r2
 814cb2e:	68f8      	ldr	r0, [r7, #12]
 814cb30:	4798      	blx	r3
 814cb32:	4603      	mov	r3, r0
 814cb34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 814cb36:	7dfb      	ldrb	r3, [r7, #23]
 814cb38:	2b00      	cmp	r3, #0
 814cb3a:	d001      	beq.n	814cb40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 814cb3c:	7dfb      	ldrb	r3, [r7, #23]
 814cb3e:	e000      	b.n	814cb42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 814cb40:	2300      	movs	r3, #0
}
 814cb42:	4618      	mov	r0, r3
 814cb44:	3718      	adds	r7, #24
 814cb46:	46bd      	mov	sp, r7
 814cb48:	bd80      	pop	{r7, pc}

0814cb4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 814cb4a:	b580      	push	{r7, lr}
 814cb4c:	b086      	sub	sp, #24
 814cb4e:	af00      	add	r7, sp, #0
 814cb50:	60f8      	str	r0, [r7, #12]
 814cb52:	460b      	mov	r3, r1
 814cb54:	607a      	str	r2, [r7, #4]
 814cb56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 814cb58:	7afb      	ldrb	r3, [r7, #11]
 814cb5a:	2b00      	cmp	r3, #0
 814cb5c:	d16f      	bne.n	814cc3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 814cb5e:	68fb      	ldr	r3, [r7, #12]
 814cb60:	3314      	adds	r3, #20
 814cb62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 814cb64:	68fb      	ldr	r3, [r7, #12]
 814cb66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 814cb6a:	2b02      	cmp	r3, #2
 814cb6c:	d15a      	bne.n	814cc24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 814cb6e:	693b      	ldr	r3, [r7, #16]
 814cb70:	689a      	ldr	r2, [r3, #8]
 814cb72:	693b      	ldr	r3, [r7, #16]
 814cb74:	68db      	ldr	r3, [r3, #12]
 814cb76:	429a      	cmp	r2, r3
 814cb78:	d914      	bls.n	814cba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 814cb7a:	693b      	ldr	r3, [r7, #16]
 814cb7c:	689a      	ldr	r2, [r3, #8]
 814cb7e:	693b      	ldr	r3, [r7, #16]
 814cb80:	68db      	ldr	r3, [r3, #12]
 814cb82:	1ad2      	subs	r2, r2, r3
 814cb84:	693b      	ldr	r3, [r7, #16]
 814cb86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 814cb88:	693b      	ldr	r3, [r7, #16]
 814cb8a:	689b      	ldr	r3, [r3, #8]
 814cb8c:	461a      	mov	r2, r3
 814cb8e:	6879      	ldr	r1, [r7, #4]
 814cb90:	68f8      	ldr	r0, [r7, #12]
 814cb92:	f001 f8e6 	bl	814dd62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 814cb96:	2300      	movs	r3, #0
 814cb98:	2200      	movs	r2, #0
 814cb9a:	2100      	movs	r1, #0
 814cb9c:	68f8      	ldr	r0, [r7, #12]
 814cb9e:	f001 fe73 	bl	814e888 <USBD_LL_PrepareReceive>
 814cba2:	e03f      	b.n	814cc24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 814cba4:	693b      	ldr	r3, [r7, #16]
 814cba6:	68da      	ldr	r2, [r3, #12]
 814cba8:	693b      	ldr	r3, [r7, #16]
 814cbaa:	689b      	ldr	r3, [r3, #8]
 814cbac:	429a      	cmp	r2, r3
 814cbae:	d11c      	bne.n	814cbea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 814cbb0:	693b      	ldr	r3, [r7, #16]
 814cbb2:	685a      	ldr	r2, [r3, #4]
 814cbb4:	693b      	ldr	r3, [r7, #16]
 814cbb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 814cbb8:	429a      	cmp	r2, r3
 814cbba:	d316      	bcc.n	814cbea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 814cbbc:	693b      	ldr	r3, [r7, #16]
 814cbbe:	685a      	ldr	r2, [r3, #4]
 814cbc0:	68fb      	ldr	r3, [r7, #12]
 814cbc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 814cbc6:	429a      	cmp	r2, r3
 814cbc8:	d20f      	bcs.n	814cbea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 814cbca:	2200      	movs	r2, #0
 814cbcc:	2100      	movs	r1, #0
 814cbce:	68f8      	ldr	r0, [r7, #12]
 814cbd0:	f001 f8c7 	bl	814dd62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 814cbd4:	68fb      	ldr	r3, [r7, #12]
 814cbd6:	2200      	movs	r2, #0
 814cbd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 814cbdc:	2300      	movs	r3, #0
 814cbde:	2200      	movs	r2, #0
 814cbe0:	2100      	movs	r1, #0
 814cbe2:	68f8      	ldr	r0, [r7, #12]
 814cbe4:	f001 fe50 	bl	814e888 <USBD_LL_PrepareReceive>
 814cbe8:	e01c      	b.n	814cc24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814cbea:	68fb      	ldr	r3, [r7, #12]
 814cbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cbf0:	b2db      	uxtb	r3, r3
 814cbf2:	2b03      	cmp	r3, #3
 814cbf4:	d10f      	bne.n	814cc16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 814cbf6:	68fb      	ldr	r3, [r7, #12]
 814cbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cbfc:	68db      	ldr	r3, [r3, #12]
 814cbfe:	2b00      	cmp	r3, #0
 814cc00:	d009      	beq.n	814cc16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 814cc02:	68fb      	ldr	r3, [r7, #12]
 814cc04:	2200      	movs	r2, #0
 814cc06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 814cc0a:	68fb      	ldr	r3, [r7, #12]
 814cc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cc10:	68db      	ldr	r3, [r3, #12]
 814cc12:	68f8      	ldr	r0, [r7, #12]
 814cc14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 814cc16:	2180      	movs	r1, #128	@ 0x80
 814cc18:	68f8      	ldr	r0, [r7, #12]
 814cc1a:	f001 fd8b 	bl	814e734 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 814cc1e:	68f8      	ldr	r0, [r7, #12]
 814cc20:	f001 f8f1 	bl	814de06 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 814cc24:	68fb      	ldr	r3, [r7, #12]
 814cc26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 814cc2a:	2b00      	cmp	r3, #0
 814cc2c:	d03a      	beq.n	814cca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 814cc2e:	68f8      	ldr	r0, [r7, #12]
 814cc30:	f7ff fe42 	bl	814c8b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 814cc34:	68fb      	ldr	r3, [r7, #12]
 814cc36:	2200      	movs	r2, #0
 814cc38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 814cc3c:	e032      	b.n	814cca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 814cc3e:	7afb      	ldrb	r3, [r7, #11]
 814cc40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 814cc44:	b2db      	uxtb	r3, r3
 814cc46:	4619      	mov	r1, r3
 814cc48:	68f8      	ldr	r0, [r7, #12]
 814cc4a:	f000 f985 	bl	814cf58 <USBD_CoreFindEP>
 814cc4e:	4603      	mov	r3, r0
 814cc50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 814cc52:	7dfb      	ldrb	r3, [r7, #23]
 814cc54:	2bff      	cmp	r3, #255	@ 0xff
 814cc56:	d025      	beq.n	814cca4 <USBD_LL_DataInStage+0x15a>
 814cc58:	7dfb      	ldrb	r3, [r7, #23]
 814cc5a:	2b00      	cmp	r3, #0
 814cc5c:	d122      	bne.n	814cca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814cc5e:	68fb      	ldr	r3, [r7, #12]
 814cc60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cc64:	b2db      	uxtb	r3, r3
 814cc66:	2b03      	cmp	r3, #3
 814cc68:	d11c      	bne.n	814cca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 814cc6a:	7dfa      	ldrb	r2, [r7, #23]
 814cc6c:	68fb      	ldr	r3, [r7, #12]
 814cc6e:	32ae      	adds	r2, #174	@ 0xae
 814cc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cc74:	695b      	ldr	r3, [r3, #20]
 814cc76:	2b00      	cmp	r3, #0
 814cc78:	d014      	beq.n	814cca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 814cc7a:	7dfa      	ldrb	r2, [r7, #23]
 814cc7c:	68fb      	ldr	r3, [r7, #12]
 814cc7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 814cc82:	7dfa      	ldrb	r2, [r7, #23]
 814cc84:	68fb      	ldr	r3, [r7, #12]
 814cc86:	32ae      	adds	r2, #174	@ 0xae
 814cc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cc8c:	695b      	ldr	r3, [r3, #20]
 814cc8e:	7afa      	ldrb	r2, [r7, #11]
 814cc90:	4611      	mov	r1, r2
 814cc92:	68f8      	ldr	r0, [r7, #12]
 814cc94:	4798      	blx	r3
 814cc96:	4603      	mov	r3, r0
 814cc98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 814cc9a:	7dbb      	ldrb	r3, [r7, #22]
 814cc9c:	2b00      	cmp	r3, #0
 814cc9e:	d001      	beq.n	814cca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 814cca0:	7dbb      	ldrb	r3, [r7, #22]
 814cca2:	e000      	b.n	814cca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 814cca4:	2300      	movs	r3, #0
}
 814cca6:	4618      	mov	r0, r3
 814cca8:	3718      	adds	r7, #24
 814ccaa:	46bd      	mov	sp, r7
 814ccac:	bd80      	pop	{r7, pc}

0814ccae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 814ccae:	b580      	push	{r7, lr}
 814ccb0:	b084      	sub	sp, #16
 814ccb2:	af00      	add	r7, sp, #0
 814ccb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 814ccb6:	2300      	movs	r3, #0
 814ccb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 814ccba:	687b      	ldr	r3, [r7, #4]
 814ccbc:	2201      	movs	r2, #1
 814ccbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 814ccc2:	687b      	ldr	r3, [r7, #4]
 814ccc4:	2200      	movs	r2, #0
 814ccc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 814ccca:	687b      	ldr	r3, [r7, #4]
 814cccc:	2200      	movs	r2, #0
 814ccce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 814ccd0:	687b      	ldr	r3, [r7, #4]
 814ccd2:	2200      	movs	r2, #0
 814ccd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 814ccd8:	687b      	ldr	r3, [r7, #4]
 814ccda:	2200      	movs	r2, #0
 814ccdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 814cce0:	687b      	ldr	r3, [r7, #4]
 814cce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cce6:	2b00      	cmp	r3, #0
 814cce8:	d014      	beq.n	814cd14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 814ccea:	687b      	ldr	r3, [r7, #4]
 814ccec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814ccf0:	685b      	ldr	r3, [r3, #4]
 814ccf2:	2b00      	cmp	r3, #0
 814ccf4:	d00e      	beq.n	814cd14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 814ccf6:	687b      	ldr	r3, [r7, #4]
 814ccf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814ccfc:	685b      	ldr	r3, [r3, #4]
 814ccfe:	687a      	ldr	r2, [r7, #4]
 814cd00:	6852      	ldr	r2, [r2, #4]
 814cd02:	b2d2      	uxtb	r2, r2
 814cd04:	4611      	mov	r1, r2
 814cd06:	6878      	ldr	r0, [r7, #4]
 814cd08:	4798      	blx	r3
 814cd0a:	4603      	mov	r3, r0
 814cd0c:	2b00      	cmp	r3, #0
 814cd0e:	d001      	beq.n	814cd14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 814cd10:	2303      	movs	r3, #3
 814cd12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 814cd14:	2340      	movs	r3, #64	@ 0x40
 814cd16:	2200      	movs	r2, #0
 814cd18:	2100      	movs	r1, #0
 814cd1a:	6878      	ldr	r0, [r7, #4]
 814cd1c:	f001 fcc5 	bl	814e6aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 814cd20:	687b      	ldr	r3, [r7, #4]
 814cd22:	2201      	movs	r2, #1
 814cd24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 814cd28:	687b      	ldr	r3, [r7, #4]
 814cd2a:	2240      	movs	r2, #64	@ 0x40
 814cd2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 814cd30:	2340      	movs	r3, #64	@ 0x40
 814cd32:	2200      	movs	r2, #0
 814cd34:	2180      	movs	r1, #128	@ 0x80
 814cd36:	6878      	ldr	r0, [r7, #4]
 814cd38:	f001 fcb7 	bl	814e6aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 814cd3c:	687b      	ldr	r3, [r7, #4]
 814cd3e:	2201      	movs	r2, #1
 814cd40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 814cd42:	687b      	ldr	r3, [r7, #4]
 814cd44:	2240      	movs	r2, #64	@ 0x40
 814cd46:	621a      	str	r2, [r3, #32]

  return ret;
 814cd48:	7bfb      	ldrb	r3, [r7, #15]
}
 814cd4a:	4618      	mov	r0, r3
 814cd4c:	3710      	adds	r7, #16
 814cd4e:	46bd      	mov	sp, r7
 814cd50:	bd80      	pop	{r7, pc}

0814cd52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 814cd52:	b480      	push	{r7}
 814cd54:	b083      	sub	sp, #12
 814cd56:	af00      	add	r7, sp, #0
 814cd58:	6078      	str	r0, [r7, #4]
 814cd5a:	460b      	mov	r3, r1
 814cd5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 814cd5e:	687b      	ldr	r3, [r7, #4]
 814cd60:	78fa      	ldrb	r2, [r7, #3]
 814cd62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 814cd64:	2300      	movs	r3, #0
}
 814cd66:	4618      	mov	r0, r3
 814cd68:	370c      	adds	r7, #12
 814cd6a:	46bd      	mov	sp, r7
 814cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cd70:	4770      	bx	lr

0814cd72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 814cd72:	b480      	push	{r7}
 814cd74:	b083      	sub	sp, #12
 814cd76:	af00      	add	r7, sp, #0
 814cd78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 814cd7a:	687b      	ldr	r3, [r7, #4]
 814cd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cd80:	b2db      	uxtb	r3, r3
 814cd82:	2b04      	cmp	r3, #4
 814cd84:	d006      	beq.n	814cd94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 814cd86:	687b      	ldr	r3, [r7, #4]
 814cd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cd8c:	b2da      	uxtb	r2, r3
 814cd8e:	687b      	ldr	r3, [r7, #4]
 814cd90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 814cd94:	687b      	ldr	r3, [r7, #4]
 814cd96:	2204      	movs	r2, #4
 814cd98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 814cd9c:	2300      	movs	r3, #0
}
 814cd9e:	4618      	mov	r0, r3
 814cda0:	370c      	adds	r7, #12
 814cda2:	46bd      	mov	sp, r7
 814cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cda8:	4770      	bx	lr

0814cdaa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 814cdaa:	b480      	push	{r7}
 814cdac:	b083      	sub	sp, #12
 814cdae:	af00      	add	r7, sp, #0
 814cdb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 814cdb2:	687b      	ldr	r3, [r7, #4]
 814cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cdb8:	b2db      	uxtb	r3, r3
 814cdba:	2b04      	cmp	r3, #4
 814cdbc:	d106      	bne.n	814cdcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 814cdbe:	687b      	ldr	r3, [r7, #4]
 814cdc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 814cdc4:	b2da      	uxtb	r2, r3
 814cdc6:	687b      	ldr	r3, [r7, #4]
 814cdc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 814cdcc:	2300      	movs	r3, #0
}
 814cdce:	4618      	mov	r0, r3
 814cdd0:	370c      	adds	r7, #12
 814cdd2:	46bd      	mov	sp, r7
 814cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cdd8:	4770      	bx	lr

0814cdda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 814cdda:	b580      	push	{r7, lr}
 814cddc:	b082      	sub	sp, #8
 814cdde:	af00      	add	r7, sp, #0
 814cde0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814cde2:	687b      	ldr	r3, [r7, #4]
 814cde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cde8:	b2db      	uxtb	r3, r3
 814cdea:	2b03      	cmp	r3, #3
 814cdec:	d110      	bne.n	814ce10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 814cdee:	687b      	ldr	r3, [r7, #4]
 814cdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cdf4:	2b00      	cmp	r3, #0
 814cdf6:	d00b      	beq.n	814ce10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 814cdf8:	687b      	ldr	r3, [r7, #4]
 814cdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cdfe:	69db      	ldr	r3, [r3, #28]
 814ce00:	2b00      	cmp	r3, #0
 814ce02:	d005      	beq.n	814ce10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 814ce04:	687b      	ldr	r3, [r7, #4]
 814ce06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814ce0a:	69db      	ldr	r3, [r3, #28]
 814ce0c:	6878      	ldr	r0, [r7, #4]
 814ce0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 814ce10:	2300      	movs	r3, #0
}
 814ce12:	4618      	mov	r0, r3
 814ce14:	3708      	adds	r7, #8
 814ce16:	46bd      	mov	sp, r7
 814ce18:	bd80      	pop	{r7, pc}

0814ce1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 814ce1a:	b580      	push	{r7, lr}
 814ce1c:	b082      	sub	sp, #8
 814ce1e:	af00      	add	r7, sp, #0
 814ce20:	6078      	str	r0, [r7, #4]
 814ce22:	460b      	mov	r3, r1
 814ce24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 814ce26:	687b      	ldr	r3, [r7, #4]
 814ce28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814ce2c:	687b      	ldr	r3, [r7, #4]
 814ce2e:	32ae      	adds	r2, #174	@ 0xae
 814ce30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814ce34:	2b00      	cmp	r3, #0
 814ce36:	d101      	bne.n	814ce3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 814ce38:	2303      	movs	r3, #3
 814ce3a:	e01c      	b.n	814ce76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814ce3c:	687b      	ldr	r3, [r7, #4]
 814ce3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814ce42:	b2db      	uxtb	r3, r3
 814ce44:	2b03      	cmp	r3, #3
 814ce46:	d115      	bne.n	814ce74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 814ce48:	687b      	ldr	r3, [r7, #4]
 814ce4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814ce4e:	687b      	ldr	r3, [r7, #4]
 814ce50:	32ae      	adds	r2, #174	@ 0xae
 814ce52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814ce56:	6a1b      	ldr	r3, [r3, #32]
 814ce58:	2b00      	cmp	r3, #0
 814ce5a:	d00b      	beq.n	814ce74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 814ce5c:	687b      	ldr	r3, [r7, #4]
 814ce5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814ce62:	687b      	ldr	r3, [r7, #4]
 814ce64:	32ae      	adds	r2, #174	@ 0xae
 814ce66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814ce6a:	6a1b      	ldr	r3, [r3, #32]
 814ce6c:	78fa      	ldrb	r2, [r7, #3]
 814ce6e:	4611      	mov	r1, r2
 814ce70:	6878      	ldr	r0, [r7, #4]
 814ce72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 814ce74:	2300      	movs	r3, #0
}
 814ce76:	4618      	mov	r0, r3
 814ce78:	3708      	adds	r7, #8
 814ce7a:	46bd      	mov	sp, r7
 814ce7c:	bd80      	pop	{r7, pc}

0814ce7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 814ce7e:	b580      	push	{r7, lr}
 814ce80:	b082      	sub	sp, #8
 814ce82:	af00      	add	r7, sp, #0
 814ce84:	6078      	str	r0, [r7, #4]
 814ce86:	460b      	mov	r3, r1
 814ce88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 814ce8a:	687b      	ldr	r3, [r7, #4]
 814ce8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814ce90:	687b      	ldr	r3, [r7, #4]
 814ce92:	32ae      	adds	r2, #174	@ 0xae
 814ce94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814ce98:	2b00      	cmp	r3, #0
 814ce9a:	d101      	bne.n	814cea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 814ce9c:	2303      	movs	r3, #3
 814ce9e:	e01c      	b.n	814ceda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814cea0:	687b      	ldr	r3, [r7, #4]
 814cea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814cea6:	b2db      	uxtb	r3, r3
 814cea8:	2b03      	cmp	r3, #3
 814ceaa:	d115      	bne.n	814ced8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 814ceac:	687b      	ldr	r3, [r7, #4]
 814ceae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814ceb2:	687b      	ldr	r3, [r7, #4]
 814ceb4:	32ae      	adds	r2, #174	@ 0xae
 814ceb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814ceba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 814cebc:	2b00      	cmp	r3, #0
 814cebe:	d00b      	beq.n	814ced8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 814cec0:	687b      	ldr	r3, [r7, #4]
 814cec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814cec6:	687b      	ldr	r3, [r7, #4]
 814cec8:	32ae      	adds	r2, #174	@ 0xae
 814ceca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814cece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 814ced0:	78fa      	ldrb	r2, [r7, #3]
 814ced2:	4611      	mov	r1, r2
 814ced4:	6878      	ldr	r0, [r7, #4]
 814ced6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 814ced8:	2300      	movs	r3, #0
}
 814ceda:	4618      	mov	r0, r3
 814cedc:	3708      	adds	r7, #8
 814cede:	46bd      	mov	sp, r7
 814cee0:	bd80      	pop	{r7, pc}

0814cee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 814cee2:	b480      	push	{r7}
 814cee4:	b083      	sub	sp, #12
 814cee6:	af00      	add	r7, sp, #0
 814cee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 814ceea:	2300      	movs	r3, #0
}
 814ceec:	4618      	mov	r0, r3
 814ceee:	370c      	adds	r7, #12
 814cef0:	46bd      	mov	sp, r7
 814cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cef6:	4770      	bx	lr

0814cef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 814cef8:	b580      	push	{r7, lr}
 814cefa:	b084      	sub	sp, #16
 814cefc:	af00      	add	r7, sp, #0
 814cefe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 814cf00:	2300      	movs	r3, #0
 814cf02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 814cf04:	687b      	ldr	r3, [r7, #4]
 814cf06:	2201      	movs	r2, #1
 814cf08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 814cf0c:	687b      	ldr	r3, [r7, #4]
 814cf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cf12:	2b00      	cmp	r3, #0
 814cf14:	d00e      	beq.n	814cf34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 814cf16:	687b      	ldr	r3, [r7, #4]
 814cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814cf1c:	685b      	ldr	r3, [r3, #4]
 814cf1e:	687a      	ldr	r2, [r7, #4]
 814cf20:	6852      	ldr	r2, [r2, #4]
 814cf22:	b2d2      	uxtb	r2, r2
 814cf24:	4611      	mov	r1, r2
 814cf26:	6878      	ldr	r0, [r7, #4]
 814cf28:	4798      	blx	r3
 814cf2a:	4603      	mov	r3, r0
 814cf2c:	2b00      	cmp	r3, #0
 814cf2e:	d001      	beq.n	814cf34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 814cf30:	2303      	movs	r3, #3
 814cf32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 814cf34:	7bfb      	ldrb	r3, [r7, #15]
}
 814cf36:	4618      	mov	r0, r3
 814cf38:	3710      	adds	r7, #16
 814cf3a:	46bd      	mov	sp, r7
 814cf3c:	bd80      	pop	{r7, pc}

0814cf3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 814cf3e:	b480      	push	{r7}
 814cf40:	b083      	sub	sp, #12
 814cf42:	af00      	add	r7, sp, #0
 814cf44:	6078      	str	r0, [r7, #4]
 814cf46:	460b      	mov	r3, r1
 814cf48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 814cf4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 814cf4c:	4618      	mov	r0, r3
 814cf4e:	370c      	adds	r7, #12
 814cf50:	46bd      	mov	sp, r7
 814cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cf56:	4770      	bx	lr

0814cf58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 814cf58:	b480      	push	{r7}
 814cf5a:	b083      	sub	sp, #12
 814cf5c:	af00      	add	r7, sp, #0
 814cf5e:	6078      	str	r0, [r7, #4]
 814cf60:	460b      	mov	r3, r1
 814cf62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 814cf64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 814cf66:	4618      	mov	r0, r3
 814cf68:	370c      	adds	r7, #12
 814cf6a:	46bd      	mov	sp, r7
 814cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 814cf70:	4770      	bx	lr

0814cf72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 814cf72:	b580      	push	{r7, lr}
 814cf74:	b086      	sub	sp, #24
 814cf76:	af00      	add	r7, sp, #0
 814cf78:	6078      	str	r0, [r7, #4]
 814cf7a:	460b      	mov	r3, r1
 814cf7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 814cf7e:	687b      	ldr	r3, [r7, #4]
 814cf80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 814cf82:	687b      	ldr	r3, [r7, #4]
 814cf84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 814cf86:	2300      	movs	r3, #0
 814cf88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 814cf8a:	68fb      	ldr	r3, [r7, #12]
 814cf8c:	885b      	ldrh	r3, [r3, #2]
 814cf8e:	b29b      	uxth	r3, r3
 814cf90:	68fa      	ldr	r2, [r7, #12]
 814cf92:	7812      	ldrb	r2, [r2, #0]
 814cf94:	4293      	cmp	r3, r2
 814cf96:	d91f      	bls.n	814cfd8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 814cf98:	68fb      	ldr	r3, [r7, #12]
 814cf9a:	781b      	ldrb	r3, [r3, #0]
 814cf9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 814cf9e:	e013      	b.n	814cfc8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 814cfa0:	f107 030a 	add.w	r3, r7, #10
 814cfa4:	4619      	mov	r1, r3
 814cfa6:	6978      	ldr	r0, [r7, #20]
 814cfa8:	f000 f81b 	bl	814cfe2 <USBD_GetNextDesc>
 814cfac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 814cfae:	697b      	ldr	r3, [r7, #20]
 814cfb0:	785b      	ldrb	r3, [r3, #1]
 814cfb2:	2b05      	cmp	r3, #5
 814cfb4:	d108      	bne.n	814cfc8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 814cfb6:	697b      	ldr	r3, [r7, #20]
 814cfb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 814cfba:	693b      	ldr	r3, [r7, #16]
 814cfbc:	789b      	ldrb	r3, [r3, #2]
 814cfbe:	78fa      	ldrb	r2, [r7, #3]
 814cfc0:	429a      	cmp	r2, r3
 814cfc2:	d008      	beq.n	814cfd6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 814cfc4:	2300      	movs	r3, #0
 814cfc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 814cfc8:	68fb      	ldr	r3, [r7, #12]
 814cfca:	885b      	ldrh	r3, [r3, #2]
 814cfcc:	b29a      	uxth	r2, r3
 814cfce:	897b      	ldrh	r3, [r7, #10]
 814cfd0:	429a      	cmp	r2, r3
 814cfd2:	d8e5      	bhi.n	814cfa0 <USBD_GetEpDesc+0x2e>
 814cfd4:	e000      	b.n	814cfd8 <USBD_GetEpDesc+0x66>
          break;
 814cfd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 814cfd8:	693b      	ldr	r3, [r7, #16]
}
 814cfda:	4618      	mov	r0, r3
 814cfdc:	3718      	adds	r7, #24
 814cfde:	46bd      	mov	sp, r7
 814cfe0:	bd80      	pop	{r7, pc}

0814cfe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 814cfe2:	b480      	push	{r7}
 814cfe4:	b085      	sub	sp, #20
 814cfe6:	af00      	add	r7, sp, #0
 814cfe8:	6078      	str	r0, [r7, #4]
 814cfea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 814cfec:	687b      	ldr	r3, [r7, #4]
 814cfee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 814cff0:	683b      	ldr	r3, [r7, #0]
 814cff2:	881b      	ldrh	r3, [r3, #0]
 814cff4:	68fa      	ldr	r2, [r7, #12]
 814cff6:	7812      	ldrb	r2, [r2, #0]
 814cff8:	4413      	add	r3, r2
 814cffa:	b29a      	uxth	r2, r3
 814cffc:	683b      	ldr	r3, [r7, #0]
 814cffe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 814d000:	68fb      	ldr	r3, [r7, #12]
 814d002:	781b      	ldrb	r3, [r3, #0]
 814d004:	461a      	mov	r2, r3
 814d006:	687b      	ldr	r3, [r7, #4]
 814d008:	4413      	add	r3, r2
 814d00a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 814d00c:	68fb      	ldr	r3, [r7, #12]
}
 814d00e:	4618      	mov	r0, r3
 814d010:	3714      	adds	r7, #20
 814d012:	46bd      	mov	sp, r7
 814d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 814d018:	4770      	bx	lr

0814d01a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 814d01a:	b480      	push	{r7}
 814d01c:	b087      	sub	sp, #28
 814d01e:	af00      	add	r7, sp, #0
 814d020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 814d022:	687b      	ldr	r3, [r7, #4]
 814d024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 814d026:	697b      	ldr	r3, [r7, #20]
 814d028:	781b      	ldrb	r3, [r3, #0]
 814d02a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 814d02c:	697b      	ldr	r3, [r7, #20]
 814d02e:	3301      	adds	r3, #1
 814d030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 814d032:	697b      	ldr	r3, [r7, #20]
 814d034:	781b      	ldrb	r3, [r3, #0]
 814d036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 814d038:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 814d03c:	021b      	lsls	r3, r3, #8
 814d03e:	b21a      	sxth	r2, r3
 814d040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 814d044:	4313      	orrs	r3, r2
 814d046:	b21b      	sxth	r3, r3
 814d048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 814d04a:	89fb      	ldrh	r3, [r7, #14]
}
 814d04c:	4618      	mov	r0, r3
 814d04e:	371c      	adds	r7, #28
 814d050:	46bd      	mov	sp, r7
 814d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 814d056:	4770      	bx	lr

0814d058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d058:	b580      	push	{r7, lr}
 814d05a:	b084      	sub	sp, #16
 814d05c:	af00      	add	r7, sp, #0
 814d05e:	6078      	str	r0, [r7, #4]
 814d060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 814d062:	2300      	movs	r3, #0
 814d064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 814d066:	683b      	ldr	r3, [r7, #0]
 814d068:	781b      	ldrb	r3, [r3, #0]
 814d06a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 814d06e:	2b40      	cmp	r3, #64	@ 0x40
 814d070:	d005      	beq.n	814d07e <USBD_StdDevReq+0x26>
 814d072:	2b40      	cmp	r3, #64	@ 0x40
 814d074:	d857      	bhi.n	814d126 <USBD_StdDevReq+0xce>
 814d076:	2b00      	cmp	r3, #0
 814d078:	d00f      	beq.n	814d09a <USBD_StdDevReq+0x42>
 814d07a:	2b20      	cmp	r3, #32
 814d07c:	d153      	bne.n	814d126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 814d07e:	687b      	ldr	r3, [r7, #4]
 814d080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 814d084:	687b      	ldr	r3, [r7, #4]
 814d086:	32ae      	adds	r2, #174	@ 0xae
 814d088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d08c:	689b      	ldr	r3, [r3, #8]
 814d08e:	6839      	ldr	r1, [r7, #0]
 814d090:	6878      	ldr	r0, [r7, #4]
 814d092:	4798      	blx	r3
 814d094:	4603      	mov	r3, r0
 814d096:	73fb      	strb	r3, [r7, #15]
      break;
 814d098:	e04a      	b.n	814d130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 814d09a:	683b      	ldr	r3, [r7, #0]
 814d09c:	785b      	ldrb	r3, [r3, #1]
 814d09e:	2b09      	cmp	r3, #9
 814d0a0:	d83b      	bhi.n	814d11a <USBD_StdDevReq+0xc2>
 814d0a2:	a201      	add	r2, pc, #4	@ (adr r2, 814d0a8 <USBD_StdDevReq+0x50>)
 814d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814d0a8:	0814d0fd 	.word	0x0814d0fd
 814d0ac:	0814d111 	.word	0x0814d111
 814d0b0:	0814d11b 	.word	0x0814d11b
 814d0b4:	0814d107 	.word	0x0814d107
 814d0b8:	0814d11b 	.word	0x0814d11b
 814d0bc:	0814d0db 	.word	0x0814d0db
 814d0c0:	0814d0d1 	.word	0x0814d0d1
 814d0c4:	0814d11b 	.word	0x0814d11b
 814d0c8:	0814d0f3 	.word	0x0814d0f3
 814d0cc:	0814d0e5 	.word	0x0814d0e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 814d0d0:	6839      	ldr	r1, [r7, #0]
 814d0d2:	6878      	ldr	r0, [r7, #4]
 814d0d4:	f000 fa3c 	bl	814d550 <USBD_GetDescriptor>
          break;
 814d0d8:	e024      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 814d0da:	6839      	ldr	r1, [r7, #0]
 814d0dc:	6878      	ldr	r0, [r7, #4]
 814d0de:	f000 fbcb 	bl	814d878 <USBD_SetAddress>
          break;
 814d0e2:	e01f      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 814d0e4:	6839      	ldr	r1, [r7, #0]
 814d0e6:	6878      	ldr	r0, [r7, #4]
 814d0e8:	f000 fc0a 	bl	814d900 <USBD_SetConfig>
 814d0ec:	4603      	mov	r3, r0
 814d0ee:	73fb      	strb	r3, [r7, #15]
          break;
 814d0f0:	e018      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 814d0f2:	6839      	ldr	r1, [r7, #0]
 814d0f4:	6878      	ldr	r0, [r7, #4]
 814d0f6:	f000 fcad 	bl	814da54 <USBD_GetConfig>
          break;
 814d0fa:	e013      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 814d0fc:	6839      	ldr	r1, [r7, #0]
 814d0fe:	6878      	ldr	r0, [r7, #4]
 814d100:	f000 fcde 	bl	814dac0 <USBD_GetStatus>
          break;
 814d104:	e00e      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 814d106:	6839      	ldr	r1, [r7, #0]
 814d108:	6878      	ldr	r0, [r7, #4]
 814d10a:	f000 fd0d 	bl	814db28 <USBD_SetFeature>
          break;
 814d10e:	e009      	b.n	814d124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 814d110:	6839      	ldr	r1, [r7, #0]
 814d112:	6878      	ldr	r0, [r7, #4]
 814d114:	f000 fd31 	bl	814db7a <USBD_ClrFeature>
          break;
 814d118:	e004      	b.n	814d124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 814d11a:	6839      	ldr	r1, [r7, #0]
 814d11c:	6878      	ldr	r0, [r7, #4]
 814d11e:	f000 fd88 	bl	814dc32 <USBD_CtlError>
          break;
 814d122:	bf00      	nop
      }
      break;
 814d124:	e004      	b.n	814d130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 814d126:	6839      	ldr	r1, [r7, #0]
 814d128:	6878      	ldr	r0, [r7, #4]
 814d12a:	f000 fd82 	bl	814dc32 <USBD_CtlError>
      break;
 814d12e:	bf00      	nop
  }

  return ret;
 814d130:	7bfb      	ldrb	r3, [r7, #15]
}
 814d132:	4618      	mov	r0, r3
 814d134:	3710      	adds	r7, #16
 814d136:	46bd      	mov	sp, r7
 814d138:	bd80      	pop	{r7, pc}
 814d13a:	bf00      	nop

0814d13c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d13c:	b580      	push	{r7, lr}
 814d13e:	b084      	sub	sp, #16
 814d140:	af00      	add	r7, sp, #0
 814d142:	6078      	str	r0, [r7, #4]
 814d144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 814d146:	2300      	movs	r3, #0
 814d148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 814d14a:	683b      	ldr	r3, [r7, #0]
 814d14c:	781b      	ldrb	r3, [r3, #0]
 814d14e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 814d152:	2b40      	cmp	r3, #64	@ 0x40
 814d154:	d005      	beq.n	814d162 <USBD_StdItfReq+0x26>
 814d156:	2b40      	cmp	r3, #64	@ 0x40
 814d158:	d852      	bhi.n	814d200 <USBD_StdItfReq+0xc4>
 814d15a:	2b00      	cmp	r3, #0
 814d15c:	d001      	beq.n	814d162 <USBD_StdItfReq+0x26>
 814d15e:	2b20      	cmp	r3, #32
 814d160:	d14e      	bne.n	814d200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 814d162:	687b      	ldr	r3, [r7, #4]
 814d164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d168:	b2db      	uxtb	r3, r3
 814d16a:	3b01      	subs	r3, #1
 814d16c:	2b02      	cmp	r3, #2
 814d16e:	d840      	bhi.n	814d1f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 814d170:	683b      	ldr	r3, [r7, #0]
 814d172:	889b      	ldrh	r3, [r3, #4]
 814d174:	b2db      	uxtb	r3, r3
 814d176:	2b01      	cmp	r3, #1
 814d178:	d836      	bhi.n	814d1e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 814d17a:	683b      	ldr	r3, [r7, #0]
 814d17c:	889b      	ldrh	r3, [r3, #4]
 814d17e:	b2db      	uxtb	r3, r3
 814d180:	4619      	mov	r1, r3
 814d182:	6878      	ldr	r0, [r7, #4]
 814d184:	f7ff fedb 	bl	814cf3e <USBD_CoreFindIF>
 814d188:	4603      	mov	r3, r0
 814d18a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 814d18c:	7bbb      	ldrb	r3, [r7, #14]
 814d18e:	2bff      	cmp	r3, #255	@ 0xff
 814d190:	d01d      	beq.n	814d1ce <USBD_StdItfReq+0x92>
 814d192:	7bbb      	ldrb	r3, [r7, #14]
 814d194:	2b00      	cmp	r3, #0
 814d196:	d11a      	bne.n	814d1ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 814d198:	7bba      	ldrb	r2, [r7, #14]
 814d19a:	687b      	ldr	r3, [r7, #4]
 814d19c:	32ae      	adds	r2, #174	@ 0xae
 814d19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d1a2:	689b      	ldr	r3, [r3, #8]
 814d1a4:	2b00      	cmp	r3, #0
 814d1a6:	d00f      	beq.n	814d1c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 814d1a8:	7bba      	ldrb	r2, [r7, #14]
 814d1aa:	687b      	ldr	r3, [r7, #4]
 814d1ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 814d1b0:	7bba      	ldrb	r2, [r7, #14]
 814d1b2:	687b      	ldr	r3, [r7, #4]
 814d1b4:	32ae      	adds	r2, #174	@ 0xae
 814d1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d1ba:	689b      	ldr	r3, [r3, #8]
 814d1bc:	6839      	ldr	r1, [r7, #0]
 814d1be:	6878      	ldr	r0, [r7, #4]
 814d1c0:	4798      	blx	r3
 814d1c2:	4603      	mov	r3, r0
 814d1c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 814d1c6:	e004      	b.n	814d1d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 814d1c8:	2303      	movs	r3, #3
 814d1ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 814d1cc:	e001      	b.n	814d1d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 814d1ce:	2303      	movs	r3, #3
 814d1d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 814d1d2:	683b      	ldr	r3, [r7, #0]
 814d1d4:	88db      	ldrh	r3, [r3, #6]
 814d1d6:	2b00      	cmp	r3, #0
 814d1d8:	d110      	bne.n	814d1fc <USBD_StdItfReq+0xc0>
 814d1da:	7bfb      	ldrb	r3, [r7, #15]
 814d1dc:	2b00      	cmp	r3, #0
 814d1de:	d10d      	bne.n	814d1fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 814d1e0:	6878      	ldr	r0, [r7, #4]
 814d1e2:	f000 fdfd 	bl	814dde0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 814d1e6:	e009      	b.n	814d1fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 814d1e8:	6839      	ldr	r1, [r7, #0]
 814d1ea:	6878      	ldr	r0, [r7, #4]
 814d1ec:	f000 fd21 	bl	814dc32 <USBD_CtlError>
          break;
 814d1f0:	e004      	b.n	814d1fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 814d1f2:	6839      	ldr	r1, [r7, #0]
 814d1f4:	6878      	ldr	r0, [r7, #4]
 814d1f6:	f000 fd1c 	bl	814dc32 <USBD_CtlError>
          break;
 814d1fa:	e000      	b.n	814d1fe <USBD_StdItfReq+0xc2>
          break;
 814d1fc:	bf00      	nop
      }
      break;
 814d1fe:	e004      	b.n	814d20a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 814d200:	6839      	ldr	r1, [r7, #0]
 814d202:	6878      	ldr	r0, [r7, #4]
 814d204:	f000 fd15 	bl	814dc32 <USBD_CtlError>
      break;
 814d208:	bf00      	nop
  }

  return ret;
 814d20a:	7bfb      	ldrb	r3, [r7, #15]
}
 814d20c:	4618      	mov	r0, r3
 814d20e:	3710      	adds	r7, #16
 814d210:	46bd      	mov	sp, r7
 814d212:	bd80      	pop	{r7, pc}

0814d214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d214:	b580      	push	{r7, lr}
 814d216:	b084      	sub	sp, #16
 814d218:	af00      	add	r7, sp, #0
 814d21a:	6078      	str	r0, [r7, #4]
 814d21c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 814d21e:	2300      	movs	r3, #0
 814d220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 814d222:	683b      	ldr	r3, [r7, #0]
 814d224:	889b      	ldrh	r3, [r3, #4]
 814d226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 814d228:	683b      	ldr	r3, [r7, #0]
 814d22a:	781b      	ldrb	r3, [r3, #0]
 814d22c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 814d230:	2b40      	cmp	r3, #64	@ 0x40
 814d232:	d007      	beq.n	814d244 <USBD_StdEPReq+0x30>
 814d234:	2b40      	cmp	r3, #64	@ 0x40
 814d236:	f200 817f 	bhi.w	814d538 <USBD_StdEPReq+0x324>
 814d23a:	2b00      	cmp	r3, #0
 814d23c:	d02a      	beq.n	814d294 <USBD_StdEPReq+0x80>
 814d23e:	2b20      	cmp	r3, #32
 814d240:	f040 817a 	bne.w	814d538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 814d244:	7bbb      	ldrb	r3, [r7, #14]
 814d246:	4619      	mov	r1, r3
 814d248:	6878      	ldr	r0, [r7, #4]
 814d24a:	f7ff fe85 	bl	814cf58 <USBD_CoreFindEP>
 814d24e:	4603      	mov	r3, r0
 814d250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 814d252:	7b7b      	ldrb	r3, [r7, #13]
 814d254:	2bff      	cmp	r3, #255	@ 0xff
 814d256:	f000 8174 	beq.w	814d542 <USBD_StdEPReq+0x32e>
 814d25a:	7b7b      	ldrb	r3, [r7, #13]
 814d25c:	2b00      	cmp	r3, #0
 814d25e:	f040 8170 	bne.w	814d542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 814d262:	7b7a      	ldrb	r2, [r7, #13]
 814d264:	687b      	ldr	r3, [r7, #4]
 814d266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 814d26a:	7b7a      	ldrb	r2, [r7, #13]
 814d26c:	687b      	ldr	r3, [r7, #4]
 814d26e:	32ae      	adds	r2, #174	@ 0xae
 814d270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d274:	689b      	ldr	r3, [r3, #8]
 814d276:	2b00      	cmp	r3, #0
 814d278:	f000 8163 	beq.w	814d542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 814d27c:	7b7a      	ldrb	r2, [r7, #13]
 814d27e:	687b      	ldr	r3, [r7, #4]
 814d280:	32ae      	adds	r2, #174	@ 0xae
 814d282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d286:	689b      	ldr	r3, [r3, #8]
 814d288:	6839      	ldr	r1, [r7, #0]
 814d28a:	6878      	ldr	r0, [r7, #4]
 814d28c:	4798      	blx	r3
 814d28e:	4603      	mov	r3, r0
 814d290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 814d292:	e156      	b.n	814d542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 814d294:	683b      	ldr	r3, [r7, #0]
 814d296:	785b      	ldrb	r3, [r3, #1]
 814d298:	2b03      	cmp	r3, #3
 814d29a:	d008      	beq.n	814d2ae <USBD_StdEPReq+0x9a>
 814d29c:	2b03      	cmp	r3, #3
 814d29e:	f300 8145 	bgt.w	814d52c <USBD_StdEPReq+0x318>
 814d2a2:	2b00      	cmp	r3, #0
 814d2a4:	f000 809b 	beq.w	814d3de <USBD_StdEPReq+0x1ca>
 814d2a8:	2b01      	cmp	r3, #1
 814d2aa:	d03c      	beq.n	814d326 <USBD_StdEPReq+0x112>
 814d2ac:	e13e      	b.n	814d52c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 814d2ae:	687b      	ldr	r3, [r7, #4]
 814d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d2b4:	b2db      	uxtb	r3, r3
 814d2b6:	2b02      	cmp	r3, #2
 814d2b8:	d002      	beq.n	814d2c0 <USBD_StdEPReq+0xac>
 814d2ba:	2b03      	cmp	r3, #3
 814d2bc:	d016      	beq.n	814d2ec <USBD_StdEPReq+0xd8>
 814d2be:	e02c      	b.n	814d31a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 814d2c0:	7bbb      	ldrb	r3, [r7, #14]
 814d2c2:	2b00      	cmp	r3, #0
 814d2c4:	d00d      	beq.n	814d2e2 <USBD_StdEPReq+0xce>
 814d2c6:	7bbb      	ldrb	r3, [r7, #14]
 814d2c8:	2b80      	cmp	r3, #128	@ 0x80
 814d2ca:	d00a      	beq.n	814d2e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 814d2cc:	7bbb      	ldrb	r3, [r7, #14]
 814d2ce:	4619      	mov	r1, r3
 814d2d0:	6878      	ldr	r0, [r7, #4]
 814d2d2:	f001 fa2f 	bl	814e734 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 814d2d6:	2180      	movs	r1, #128	@ 0x80
 814d2d8:	6878      	ldr	r0, [r7, #4]
 814d2da:	f001 fa2b 	bl	814e734 <USBD_LL_StallEP>
 814d2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 814d2e0:	e020      	b.n	814d324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 814d2e2:	6839      	ldr	r1, [r7, #0]
 814d2e4:	6878      	ldr	r0, [r7, #4]
 814d2e6:	f000 fca4 	bl	814dc32 <USBD_CtlError>
              break;
 814d2ea:	e01b      	b.n	814d324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 814d2ec:	683b      	ldr	r3, [r7, #0]
 814d2ee:	885b      	ldrh	r3, [r3, #2]
 814d2f0:	2b00      	cmp	r3, #0
 814d2f2:	d10e      	bne.n	814d312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 814d2f4:	7bbb      	ldrb	r3, [r7, #14]
 814d2f6:	2b00      	cmp	r3, #0
 814d2f8:	d00b      	beq.n	814d312 <USBD_StdEPReq+0xfe>
 814d2fa:	7bbb      	ldrb	r3, [r7, #14]
 814d2fc:	2b80      	cmp	r3, #128	@ 0x80
 814d2fe:	d008      	beq.n	814d312 <USBD_StdEPReq+0xfe>
 814d300:	683b      	ldr	r3, [r7, #0]
 814d302:	88db      	ldrh	r3, [r3, #6]
 814d304:	2b00      	cmp	r3, #0
 814d306:	d104      	bne.n	814d312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 814d308:	7bbb      	ldrb	r3, [r7, #14]
 814d30a:	4619      	mov	r1, r3
 814d30c:	6878      	ldr	r0, [r7, #4]
 814d30e:	f001 fa11 	bl	814e734 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 814d312:	6878      	ldr	r0, [r7, #4]
 814d314:	f000 fd64 	bl	814dde0 <USBD_CtlSendStatus>

              break;
 814d318:	e004      	b.n	814d324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 814d31a:	6839      	ldr	r1, [r7, #0]
 814d31c:	6878      	ldr	r0, [r7, #4]
 814d31e:	f000 fc88 	bl	814dc32 <USBD_CtlError>
              break;
 814d322:	bf00      	nop
          }
          break;
 814d324:	e107      	b.n	814d536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 814d326:	687b      	ldr	r3, [r7, #4]
 814d328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d32c:	b2db      	uxtb	r3, r3
 814d32e:	2b02      	cmp	r3, #2
 814d330:	d002      	beq.n	814d338 <USBD_StdEPReq+0x124>
 814d332:	2b03      	cmp	r3, #3
 814d334:	d016      	beq.n	814d364 <USBD_StdEPReq+0x150>
 814d336:	e04b      	b.n	814d3d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 814d338:	7bbb      	ldrb	r3, [r7, #14]
 814d33a:	2b00      	cmp	r3, #0
 814d33c:	d00d      	beq.n	814d35a <USBD_StdEPReq+0x146>
 814d33e:	7bbb      	ldrb	r3, [r7, #14]
 814d340:	2b80      	cmp	r3, #128	@ 0x80
 814d342:	d00a      	beq.n	814d35a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 814d344:	7bbb      	ldrb	r3, [r7, #14]
 814d346:	4619      	mov	r1, r3
 814d348:	6878      	ldr	r0, [r7, #4]
 814d34a:	f001 f9f3 	bl	814e734 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 814d34e:	2180      	movs	r1, #128	@ 0x80
 814d350:	6878      	ldr	r0, [r7, #4]
 814d352:	f001 f9ef 	bl	814e734 <USBD_LL_StallEP>
 814d356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 814d358:	e040      	b.n	814d3dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 814d35a:	6839      	ldr	r1, [r7, #0]
 814d35c:	6878      	ldr	r0, [r7, #4]
 814d35e:	f000 fc68 	bl	814dc32 <USBD_CtlError>
              break;
 814d362:	e03b      	b.n	814d3dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 814d364:	683b      	ldr	r3, [r7, #0]
 814d366:	885b      	ldrh	r3, [r3, #2]
 814d368:	2b00      	cmp	r3, #0
 814d36a:	d136      	bne.n	814d3da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 814d36c:	7bbb      	ldrb	r3, [r7, #14]
 814d36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814d372:	2b00      	cmp	r3, #0
 814d374:	d004      	beq.n	814d380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 814d376:	7bbb      	ldrb	r3, [r7, #14]
 814d378:	4619      	mov	r1, r3
 814d37a:	6878      	ldr	r0, [r7, #4]
 814d37c:	f001 f9f9 	bl	814e772 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 814d380:	6878      	ldr	r0, [r7, #4]
 814d382:	f000 fd2d 	bl	814dde0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 814d386:	7bbb      	ldrb	r3, [r7, #14]
 814d388:	4619      	mov	r1, r3
 814d38a:	6878      	ldr	r0, [r7, #4]
 814d38c:	f7ff fde4 	bl	814cf58 <USBD_CoreFindEP>
 814d390:	4603      	mov	r3, r0
 814d392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 814d394:	7b7b      	ldrb	r3, [r7, #13]
 814d396:	2bff      	cmp	r3, #255	@ 0xff
 814d398:	d01f      	beq.n	814d3da <USBD_StdEPReq+0x1c6>
 814d39a:	7b7b      	ldrb	r3, [r7, #13]
 814d39c:	2b00      	cmp	r3, #0
 814d39e:	d11c      	bne.n	814d3da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 814d3a0:	7b7a      	ldrb	r2, [r7, #13]
 814d3a2:	687b      	ldr	r3, [r7, #4]
 814d3a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 814d3a8:	7b7a      	ldrb	r2, [r7, #13]
 814d3aa:	687b      	ldr	r3, [r7, #4]
 814d3ac:	32ae      	adds	r2, #174	@ 0xae
 814d3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d3b2:	689b      	ldr	r3, [r3, #8]
 814d3b4:	2b00      	cmp	r3, #0
 814d3b6:	d010      	beq.n	814d3da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 814d3b8:	7b7a      	ldrb	r2, [r7, #13]
 814d3ba:	687b      	ldr	r3, [r7, #4]
 814d3bc:	32ae      	adds	r2, #174	@ 0xae
 814d3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 814d3c2:	689b      	ldr	r3, [r3, #8]
 814d3c4:	6839      	ldr	r1, [r7, #0]
 814d3c6:	6878      	ldr	r0, [r7, #4]
 814d3c8:	4798      	blx	r3
 814d3ca:	4603      	mov	r3, r0
 814d3cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 814d3ce:	e004      	b.n	814d3da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 814d3d0:	6839      	ldr	r1, [r7, #0]
 814d3d2:	6878      	ldr	r0, [r7, #4]
 814d3d4:	f000 fc2d 	bl	814dc32 <USBD_CtlError>
              break;
 814d3d8:	e000      	b.n	814d3dc <USBD_StdEPReq+0x1c8>
              break;
 814d3da:	bf00      	nop
          }
          break;
 814d3dc:	e0ab      	b.n	814d536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 814d3de:	687b      	ldr	r3, [r7, #4]
 814d3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d3e4:	b2db      	uxtb	r3, r3
 814d3e6:	2b02      	cmp	r3, #2
 814d3e8:	d002      	beq.n	814d3f0 <USBD_StdEPReq+0x1dc>
 814d3ea:	2b03      	cmp	r3, #3
 814d3ec:	d032      	beq.n	814d454 <USBD_StdEPReq+0x240>
 814d3ee:	e097      	b.n	814d520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 814d3f0:	7bbb      	ldrb	r3, [r7, #14]
 814d3f2:	2b00      	cmp	r3, #0
 814d3f4:	d007      	beq.n	814d406 <USBD_StdEPReq+0x1f2>
 814d3f6:	7bbb      	ldrb	r3, [r7, #14]
 814d3f8:	2b80      	cmp	r3, #128	@ 0x80
 814d3fa:	d004      	beq.n	814d406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 814d3fc:	6839      	ldr	r1, [r7, #0]
 814d3fe:	6878      	ldr	r0, [r7, #4]
 814d400:	f000 fc17 	bl	814dc32 <USBD_CtlError>
                break;
 814d404:	e091      	b.n	814d52a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 814d406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 814d40a:	2b00      	cmp	r3, #0
 814d40c:	da0b      	bge.n	814d426 <USBD_StdEPReq+0x212>
 814d40e:	7bbb      	ldrb	r3, [r7, #14]
 814d410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 814d414:	4613      	mov	r3, r2
 814d416:	009b      	lsls	r3, r3, #2
 814d418:	4413      	add	r3, r2
 814d41a:	009b      	lsls	r3, r3, #2
 814d41c:	3310      	adds	r3, #16
 814d41e:	687a      	ldr	r2, [r7, #4]
 814d420:	4413      	add	r3, r2
 814d422:	3304      	adds	r3, #4
 814d424:	e00b      	b.n	814d43e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 814d426:	7bbb      	ldrb	r3, [r7, #14]
 814d428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 814d42c:	4613      	mov	r3, r2
 814d42e:	009b      	lsls	r3, r3, #2
 814d430:	4413      	add	r3, r2
 814d432:	009b      	lsls	r3, r3, #2
 814d434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 814d438:	687a      	ldr	r2, [r7, #4]
 814d43a:	4413      	add	r3, r2
 814d43c:	3304      	adds	r3, #4
 814d43e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 814d440:	68bb      	ldr	r3, [r7, #8]
 814d442:	2200      	movs	r2, #0
 814d444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 814d446:	68bb      	ldr	r3, [r7, #8]
 814d448:	2202      	movs	r2, #2
 814d44a:	4619      	mov	r1, r3
 814d44c:	6878      	ldr	r0, [r7, #4]
 814d44e:	f000 fc6d 	bl	814dd2c <USBD_CtlSendData>
              break;
 814d452:	e06a      	b.n	814d52a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 814d454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 814d458:	2b00      	cmp	r3, #0
 814d45a:	da11      	bge.n	814d480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 814d45c:	7bbb      	ldrb	r3, [r7, #14]
 814d45e:	f003 020f 	and.w	r2, r3, #15
 814d462:	6879      	ldr	r1, [r7, #4]
 814d464:	4613      	mov	r3, r2
 814d466:	009b      	lsls	r3, r3, #2
 814d468:	4413      	add	r3, r2
 814d46a:	009b      	lsls	r3, r3, #2
 814d46c:	440b      	add	r3, r1
 814d46e:	3324      	adds	r3, #36	@ 0x24
 814d470:	881b      	ldrh	r3, [r3, #0]
 814d472:	2b00      	cmp	r3, #0
 814d474:	d117      	bne.n	814d4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 814d476:	6839      	ldr	r1, [r7, #0]
 814d478:	6878      	ldr	r0, [r7, #4]
 814d47a:	f000 fbda 	bl	814dc32 <USBD_CtlError>
                  break;
 814d47e:	e054      	b.n	814d52a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 814d480:	7bbb      	ldrb	r3, [r7, #14]
 814d482:	f003 020f 	and.w	r2, r3, #15
 814d486:	6879      	ldr	r1, [r7, #4]
 814d488:	4613      	mov	r3, r2
 814d48a:	009b      	lsls	r3, r3, #2
 814d48c:	4413      	add	r3, r2
 814d48e:	009b      	lsls	r3, r3, #2
 814d490:	440b      	add	r3, r1
 814d492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 814d496:	881b      	ldrh	r3, [r3, #0]
 814d498:	2b00      	cmp	r3, #0
 814d49a:	d104      	bne.n	814d4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 814d49c:	6839      	ldr	r1, [r7, #0]
 814d49e:	6878      	ldr	r0, [r7, #4]
 814d4a0:	f000 fbc7 	bl	814dc32 <USBD_CtlError>
                  break;
 814d4a4:	e041      	b.n	814d52a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 814d4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 814d4aa:	2b00      	cmp	r3, #0
 814d4ac:	da0b      	bge.n	814d4c6 <USBD_StdEPReq+0x2b2>
 814d4ae:	7bbb      	ldrb	r3, [r7, #14]
 814d4b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 814d4b4:	4613      	mov	r3, r2
 814d4b6:	009b      	lsls	r3, r3, #2
 814d4b8:	4413      	add	r3, r2
 814d4ba:	009b      	lsls	r3, r3, #2
 814d4bc:	3310      	adds	r3, #16
 814d4be:	687a      	ldr	r2, [r7, #4]
 814d4c0:	4413      	add	r3, r2
 814d4c2:	3304      	adds	r3, #4
 814d4c4:	e00b      	b.n	814d4de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 814d4c6:	7bbb      	ldrb	r3, [r7, #14]
 814d4c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 814d4cc:	4613      	mov	r3, r2
 814d4ce:	009b      	lsls	r3, r3, #2
 814d4d0:	4413      	add	r3, r2
 814d4d2:	009b      	lsls	r3, r3, #2
 814d4d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 814d4d8:	687a      	ldr	r2, [r7, #4]
 814d4da:	4413      	add	r3, r2
 814d4dc:	3304      	adds	r3, #4
 814d4de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 814d4e0:	7bbb      	ldrb	r3, [r7, #14]
 814d4e2:	2b00      	cmp	r3, #0
 814d4e4:	d002      	beq.n	814d4ec <USBD_StdEPReq+0x2d8>
 814d4e6:	7bbb      	ldrb	r3, [r7, #14]
 814d4e8:	2b80      	cmp	r3, #128	@ 0x80
 814d4ea:	d103      	bne.n	814d4f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 814d4ec:	68bb      	ldr	r3, [r7, #8]
 814d4ee:	2200      	movs	r2, #0
 814d4f0:	601a      	str	r2, [r3, #0]
 814d4f2:	e00e      	b.n	814d512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 814d4f4:	7bbb      	ldrb	r3, [r7, #14]
 814d4f6:	4619      	mov	r1, r3
 814d4f8:	6878      	ldr	r0, [r7, #4]
 814d4fa:	f001 f959 	bl	814e7b0 <USBD_LL_IsStallEP>
 814d4fe:	4603      	mov	r3, r0
 814d500:	2b00      	cmp	r3, #0
 814d502:	d003      	beq.n	814d50c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 814d504:	68bb      	ldr	r3, [r7, #8]
 814d506:	2201      	movs	r2, #1
 814d508:	601a      	str	r2, [r3, #0]
 814d50a:	e002      	b.n	814d512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 814d50c:	68bb      	ldr	r3, [r7, #8]
 814d50e:	2200      	movs	r2, #0
 814d510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 814d512:	68bb      	ldr	r3, [r7, #8]
 814d514:	2202      	movs	r2, #2
 814d516:	4619      	mov	r1, r3
 814d518:	6878      	ldr	r0, [r7, #4]
 814d51a:	f000 fc07 	bl	814dd2c <USBD_CtlSendData>
              break;
 814d51e:	e004      	b.n	814d52a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 814d520:	6839      	ldr	r1, [r7, #0]
 814d522:	6878      	ldr	r0, [r7, #4]
 814d524:	f000 fb85 	bl	814dc32 <USBD_CtlError>
              break;
 814d528:	bf00      	nop
          }
          break;
 814d52a:	e004      	b.n	814d536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 814d52c:	6839      	ldr	r1, [r7, #0]
 814d52e:	6878      	ldr	r0, [r7, #4]
 814d530:	f000 fb7f 	bl	814dc32 <USBD_CtlError>
          break;
 814d534:	bf00      	nop
      }
      break;
 814d536:	e005      	b.n	814d544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 814d538:	6839      	ldr	r1, [r7, #0]
 814d53a:	6878      	ldr	r0, [r7, #4]
 814d53c:	f000 fb79 	bl	814dc32 <USBD_CtlError>
      break;
 814d540:	e000      	b.n	814d544 <USBD_StdEPReq+0x330>
      break;
 814d542:	bf00      	nop
  }

  return ret;
 814d544:	7bfb      	ldrb	r3, [r7, #15]
}
 814d546:	4618      	mov	r0, r3
 814d548:	3710      	adds	r7, #16
 814d54a:	46bd      	mov	sp, r7
 814d54c:	bd80      	pop	{r7, pc}
	...

0814d550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d550:	b580      	push	{r7, lr}
 814d552:	b084      	sub	sp, #16
 814d554:	af00      	add	r7, sp, #0
 814d556:	6078      	str	r0, [r7, #4]
 814d558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 814d55a:	2300      	movs	r3, #0
 814d55c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 814d55e:	2300      	movs	r3, #0
 814d560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 814d562:	2300      	movs	r3, #0
 814d564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 814d566:	683b      	ldr	r3, [r7, #0]
 814d568:	885b      	ldrh	r3, [r3, #2]
 814d56a:	0a1b      	lsrs	r3, r3, #8
 814d56c:	b29b      	uxth	r3, r3
 814d56e:	3b01      	subs	r3, #1
 814d570:	2b0e      	cmp	r3, #14
 814d572:	f200 8152 	bhi.w	814d81a <USBD_GetDescriptor+0x2ca>
 814d576:	a201      	add	r2, pc, #4	@ (adr r2, 814d57c <USBD_GetDescriptor+0x2c>)
 814d578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814d57c:	0814d5ed 	.word	0x0814d5ed
 814d580:	0814d605 	.word	0x0814d605
 814d584:	0814d645 	.word	0x0814d645
 814d588:	0814d81b 	.word	0x0814d81b
 814d58c:	0814d81b 	.word	0x0814d81b
 814d590:	0814d7bb 	.word	0x0814d7bb
 814d594:	0814d7e7 	.word	0x0814d7e7
 814d598:	0814d81b 	.word	0x0814d81b
 814d59c:	0814d81b 	.word	0x0814d81b
 814d5a0:	0814d81b 	.word	0x0814d81b
 814d5a4:	0814d81b 	.word	0x0814d81b
 814d5a8:	0814d81b 	.word	0x0814d81b
 814d5ac:	0814d81b 	.word	0x0814d81b
 814d5b0:	0814d81b 	.word	0x0814d81b
 814d5b4:	0814d5b9 	.word	0x0814d5b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 814d5b8:	687b      	ldr	r3, [r7, #4]
 814d5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d5be:	69db      	ldr	r3, [r3, #28]
 814d5c0:	2b00      	cmp	r3, #0
 814d5c2:	d00b      	beq.n	814d5dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 814d5c4:	687b      	ldr	r3, [r7, #4]
 814d5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d5ca:	69db      	ldr	r3, [r3, #28]
 814d5cc:	687a      	ldr	r2, [r7, #4]
 814d5ce:	7c12      	ldrb	r2, [r2, #16]
 814d5d0:	f107 0108 	add.w	r1, r7, #8
 814d5d4:	4610      	mov	r0, r2
 814d5d6:	4798      	blx	r3
 814d5d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 814d5da:	e126      	b.n	814d82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 814d5dc:	6839      	ldr	r1, [r7, #0]
 814d5de:	6878      	ldr	r0, [r7, #4]
 814d5e0:	f000 fb27 	bl	814dc32 <USBD_CtlError>
        err++;
 814d5e4:	7afb      	ldrb	r3, [r7, #11]
 814d5e6:	3301      	adds	r3, #1
 814d5e8:	72fb      	strb	r3, [r7, #11]
      break;
 814d5ea:	e11e      	b.n	814d82a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 814d5ec:	687b      	ldr	r3, [r7, #4]
 814d5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d5f2:	681b      	ldr	r3, [r3, #0]
 814d5f4:	687a      	ldr	r2, [r7, #4]
 814d5f6:	7c12      	ldrb	r2, [r2, #16]
 814d5f8:	f107 0108 	add.w	r1, r7, #8
 814d5fc:	4610      	mov	r0, r2
 814d5fe:	4798      	blx	r3
 814d600:	60f8      	str	r0, [r7, #12]
      break;
 814d602:	e112      	b.n	814d82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 814d604:	687b      	ldr	r3, [r7, #4]
 814d606:	7c1b      	ldrb	r3, [r3, #16]
 814d608:	2b00      	cmp	r3, #0
 814d60a:	d10d      	bne.n	814d628 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 814d60c:	687b      	ldr	r3, [r7, #4]
 814d60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814d612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 814d614:	f107 0208 	add.w	r2, r7, #8
 814d618:	4610      	mov	r0, r2
 814d61a:	4798      	blx	r3
 814d61c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 814d61e:	68fb      	ldr	r3, [r7, #12]
 814d620:	3301      	adds	r3, #1
 814d622:	2202      	movs	r2, #2
 814d624:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 814d626:	e100      	b.n	814d82a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 814d628:	687b      	ldr	r3, [r7, #4]
 814d62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814d62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 814d630:	f107 0208 	add.w	r2, r7, #8
 814d634:	4610      	mov	r0, r2
 814d636:	4798      	blx	r3
 814d638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 814d63a:	68fb      	ldr	r3, [r7, #12]
 814d63c:	3301      	adds	r3, #1
 814d63e:	2202      	movs	r2, #2
 814d640:	701a      	strb	r2, [r3, #0]
      break;
 814d642:	e0f2      	b.n	814d82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 814d644:	683b      	ldr	r3, [r7, #0]
 814d646:	885b      	ldrh	r3, [r3, #2]
 814d648:	b2db      	uxtb	r3, r3
 814d64a:	2b05      	cmp	r3, #5
 814d64c:	f200 80ac 	bhi.w	814d7a8 <USBD_GetDescriptor+0x258>
 814d650:	a201      	add	r2, pc, #4	@ (adr r2, 814d658 <USBD_GetDescriptor+0x108>)
 814d652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814d656:	bf00      	nop
 814d658:	0814d671 	.word	0x0814d671
 814d65c:	0814d6a5 	.word	0x0814d6a5
 814d660:	0814d6d9 	.word	0x0814d6d9
 814d664:	0814d70d 	.word	0x0814d70d
 814d668:	0814d741 	.word	0x0814d741
 814d66c:	0814d775 	.word	0x0814d775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 814d670:	687b      	ldr	r3, [r7, #4]
 814d672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d676:	685b      	ldr	r3, [r3, #4]
 814d678:	2b00      	cmp	r3, #0
 814d67a:	d00b      	beq.n	814d694 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 814d67c:	687b      	ldr	r3, [r7, #4]
 814d67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d682:	685b      	ldr	r3, [r3, #4]
 814d684:	687a      	ldr	r2, [r7, #4]
 814d686:	7c12      	ldrb	r2, [r2, #16]
 814d688:	f107 0108 	add.w	r1, r7, #8
 814d68c:	4610      	mov	r0, r2
 814d68e:	4798      	blx	r3
 814d690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d692:	e091      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d694:	6839      	ldr	r1, [r7, #0]
 814d696:	6878      	ldr	r0, [r7, #4]
 814d698:	f000 facb 	bl	814dc32 <USBD_CtlError>
            err++;
 814d69c:	7afb      	ldrb	r3, [r7, #11]
 814d69e:	3301      	adds	r3, #1
 814d6a0:	72fb      	strb	r3, [r7, #11]
          break;
 814d6a2:	e089      	b.n	814d7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 814d6a4:	687b      	ldr	r3, [r7, #4]
 814d6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d6aa:	689b      	ldr	r3, [r3, #8]
 814d6ac:	2b00      	cmp	r3, #0
 814d6ae:	d00b      	beq.n	814d6c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 814d6b0:	687b      	ldr	r3, [r7, #4]
 814d6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d6b6:	689b      	ldr	r3, [r3, #8]
 814d6b8:	687a      	ldr	r2, [r7, #4]
 814d6ba:	7c12      	ldrb	r2, [r2, #16]
 814d6bc:	f107 0108 	add.w	r1, r7, #8
 814d6c0:	4610      	mov	r0, r2
 814d6c2:	4798      	blx	r3
 814d6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d6c6:	e077      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d6c8:	6839      	ldr	r1, [r7, #0]
 814d6ca:	6878      	ldr	r0, [r7, #4]
 814d6cc:	f000 fab1 	bl	814dc32 <USBD_CtlError>
            err++;
 814d6d0:	7afb      	ldrb	r3, [r7, #11]
 814d6d2:	3301      	adds	r3, #1
 814d6d4:	72fb      	strb	r3, [r7, #11]
          break;
 814d6d6:	e06f      	b.n	814d7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 814d6d8:	687b      	ldr	r3, [r7, #4]
 814d6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d6de:	68db      	ldr	r3, [r3, #12]
 814d6e0:	2b00      	cmp	r3, #0
 814d6e2:	d00b      	beq.n	814d6fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 814d6e4:	687b      	ldr	r3, [r7, #4]
 814d6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d6ea:	68db      	ldr	r3, [r3, #12]
 814d6ec:	687a      	ldr	r2, [r7, #4]
 814d6ee:	7c12      	ldrb	r2, [r2, #16]
 814d6f0:	f107 0108 	add.w	r1, r7, #8
 814d6f4:	4610      	mov	r0, r2
 814d6f6:	4798      	blx	r3
 814d6f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d6fa:	e05d      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d6fc:	6839      	ldr	r1, [r7, #0]
 814d6fe:	6878      	ldr	r0, [r7, #4]
 814d700:	f000 fa97 	bl	814dc32 <USBD_CtlError>
            err++;
 814d704:	7afb      	ldrb	r3, [r7, #11]
 814d706:	3301      	adds	r3, #1
 814d708:	72fb      	strb	r3, [r7, #11]
          break;
 814d70a:	e055      	b.n	814d7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 814d70c:	687b      	ldr	r3, [r7, #4]
 814d70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d712:	691b      	ldr	r3, [r3, #16]
 814d714:	2b00      	cmp	r3, #0
 814d716:	d00b      	beq.n	814d730 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 814d718:	687b      	ldr	r3, [r7, #4]
 814d71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d71e:	691b      	ldr	r3, [r3, #16]
 814d720:	687a      	ldr	r2, [r7, #4]
 814d722:	7c12      	ldrb	r2, [r2, #16]
 814d724:	f107 0108 	add.w	r1, r7, #8
 814d728:	4610      	mov	r0, r2
 814d72a:	4798      	blx	r3
 814d72c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d72e:	e043      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d730:	6839      	ldr	r1, [r7, #0]
 814d732:	6878      	ldr	r0, [r7, #4]
 814d734:	f000 fa7d 	bl	814dc32 <USBD_CtlError>
            err++;
 814d738:	7afb      	ldrb	r3, [r7, #11]
 814d73a:	3301      	adds	r3, #1
 814d73c:	72fb      	strb	r3, [r7, #11]
          break;
 814d73e:	e03b      	b.n	814d7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 814d740:	687b      	ldr	r3, [r7, #4]
 814d742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d746:	695b      	ldr	r3, [r3, #20]
 814d748:	2b00      	cmp	r3, #0
 814d74a:	d00b      	beq.n	814d764 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 814d74c:	687b      	ldr	r3, [r7, #4]
 814d74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d752:	695b      	ldr	r3, [r3, #20]
 814d754:	687a      	ldr	r2, [r7, #4]
 814d756:	7c12      	ldrb	r2, [r2, #16]
 814d758:	f107 0108 	add.w	r1, r7, #8
 814d75c:	4610      	mov	r0, r2
 814d75e:	4798      	blx	r3
 814d760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d762:	e029      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d764:	6839      	ldr	r1, [r7, #0]
 814d766:	6878      	ldr	r0, [r7, #4]
 814d768:	f000 fa63 	bl	814dc32 <USBD_CtlError>
            err++;
 814d76c:	7afb      	ldrb	r3, [r7, #11]
 814d76e:	3301      	adds	r3, #1
 814d770:	72fb      	strb	r3, [r7, #11]
          break;
 814d772:	e021      	b.n	814d7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 814d774:	687b      	ldr	r3, [r7, #4]
 814d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d77a:	699b      	ldr	r3, [r3, #24]
 814d77c:	2b00      	cmp	r3, #0
 814d77e:	d00b      	beq.n	814d798 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 814d780:	687b      	ldr	r3, [r7, #4]
 814d782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 814d786:	699b      	ldr	r3, [r3, #24]
 814d788:	687a      	ldr	r2, [r7, #4]
 814d78a:	7c12      	ldrb	r2, [r2, #16]
 814d78c:	f107 0108 	add.w	r1, r7, #8
 814d790:	4610      	mov	r0, r2
 814d792:	4798      	blx	r3
 814d794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 814d796:	e00f      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 814d798:	6839      	ldr	r1, [r7, #0]
 814d79a:	6878      	ldr	r0, [r7, #4]
 814d79c:	f000 fa49 	bl	814dc32 <USBD_CtlError>
            err++;
 814d7a0:	7afb      	ldrb	r3, [r7, #11]
 814d7a2:	3301      	adds	r3, #1
 814d7a4:	72fb      	strb	r3, [r7, #11]
          break;
 814d7a6:	e007      	b.n	814d7b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 814d7a8:	6839      	ldr	r1, [r7, #0]
 814d7aa:	6878      	ldr	r0, [r7, #4]
 814d7ac:	f000 fa41 	bl	814dc32 <USBD_CtlError>
          err++;
 814d7b0:	7afb      	ldrb	r3, [r7, #11]
 814d7b2:	3301      	adds	r3, #1
 814d7b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 814d7b6:	bf00      	nop
      }
      break;
 814d7b8:	e037      	b.n	814d82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 814d7ba:	687b      	ldr	r3, [r7, #4]
 814d7bc:	7c1b      	ldrb	r3, [r3, #16]
 814d7be:	2b00      	cmp	r3, #0
 814d7c0:	d109      	bne.n	814d7d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 814d7c2:	687b      	ldr	r3, [r7, #4]
 814d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814d7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 814d7ca:	f107 0208 	add.w	r2, r7, #8
 814d7ce:	4610      	mov	r0, r2
 814d7d0:	4798      	blx	r3
 814d7d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 814d7d4:	e029      	b.n	814d82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 814d7d6:	6839      	ldr	r1, [r7, #0]
 814d7d8:	6878      	ldr	r0, [r7, #4]
 814d7da:	f000 fa2a 	bl	814dc32 <USBD_CtlError>
        err++;
 814d7de:	7afb      	ldrb	r3, [r7, #11]
 814d7e0:	3301      	adds	r3, #1
 814d7e2:	72fb      	strb	r3, [r7, #11]
      break;
 814d7e4:	e021      	b.n	814d82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 814d7e6:	687b      	ldr	r3, [r7, #4]
 814d7e8:	7c1b      	ldrb	r3, [r3, #16]
 814d7ea:	2b00      	cmp	r3, #0
 814d7ec:	d10d      	bne.n	814d80a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 814d7ee:	687b      	ldr	r3, [r7, #4]
 814d7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 814d7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 814d7f6:	f107 0208 	add.w	r2, r7, #8
 814d7fa:	4610      	mov	r0, r2
 814d7fc:	4798      	blx	r3
 814d7fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 814d800:	68fb      	ldr	r3, [r7, #12]
 814d802:	3301      	adds	r3, #1
 814d804:	2207      	movs	r2, #7
 814d806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 814d808:	e00f      	b.n	814d82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 814d80a:	6839      	ldr	r1, [r7, #0]
 814d80c:	6878      	ldr	r0, [r7, #4]
 814d80e:	f000 fa10 	bl	814dc32 <USBD_CtlError>
        err++;
 814d812:	7afb      	ldrb	r3, [r7, #11]
 814d814:	3301      	adds	r3, #1
 814d816:	72fb      	strb	r3, [r7, #11]
      break;
 814d818:	e007      	b.n	814d82a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 814d81a:	6839      	ldr	r1, [r7, #0]
 814d81c:	6878      	ldr	r0, [r7, #4]
 814d81e:	f000 fa08 	bl	814dc32 <USBD_CtlError>
      err++;
 814d822:	7afb      	ldrb	r3, [r7, #11]
 814d824:	3301      	adds	r3, #1
 814d826:	72fb      	strb	r3, [r7, #11]
      break;
 814d828:	bf00      	nop
  }

  if (err != 0U)
 814d82a:	7afb      	ldrb	r3, [r7, #11]
 814d82c:	2b00      	cmp	r3, #0
 814d82e:	d11e      	bne.n	814d86e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 814d830:	683b      	ldr	r3, [r7, #0]
 814d832:	88db      	ldrh	r3, [r3, #6]
 814d834:	2b00      	cmp	r3, #0
 814d836:	d016      	beq.n	814d866 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 814d838:	893b      	ldrh	r3, [r7, #8]
 814d83a:	2b00      	cmp	r3, #0
 814d83c:	d00e      	beq.n	814d85c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 814d83e:	683b      	ldr	r3, [r7, #0]
 814d840:	88da      	ldrh	r2, [r3, #6]
 814d842:	893b      	ldrh	r3, [r7, #8]
 814d844:	4293      	cmp	r3, r2
 814d846:	bf28      	it	cs
 814d848:	4613      	movcs	r3, r2
 814d84a:	b29b      	uxth	r3, r3
 814d84c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 814d84e:	893b      	ldrh	r3, [r7, #8]
 814d850:	461a      	mov	r2, r3
 814d852:	68f9      	ldr	r1, [r7, #12]
 814d854:	6878      	ldr	r0, [r7, #4]
 814d856:	f000 fa69 	bl	814dd2c <USBD_CtlSendData>
 814d85a:	e009      	b.n	814d870 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 814d85c:	6839      	ldr	r1, [r7, #0]
 814d85e:	6878      	ldr	r0, [r7, #4]
 814d860:	f000 f9e7 	bl	814dc32 <USBD_CtlError>
 814d864:	e004      	b.n	814d870 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 814d866:	6878      	ldr	r0, [r7, #4]
 814d868:	f000 faba 	bl	814dde0 <USBD_CtlSendStatus>
 814d86c:	e000      	b.n	814d870 <USBD_GetDescriptor+0x320>
    return;
 814d86e:	bf00      	nop
  }
}
 814d870:	3710      	adds	r7, #16
 814d872:	46bd      	mov	sp, r7
 814d874:	bd80      	pop	{r7, pc}
 814d876:	bf00      	nop

0814d878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d878:	b580      	push	{r7, lr}
 814d87a:	b084      	sub	sp, #16
 814d87c:	af00      	add	r7, sp, #0
 814d87e:	6078      	str	r0, [r7, #4]
 814d880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 814d882:	683b      	ldr	r3, [r7, #0]
 814d884:	889b      	ldrh	r3, [r3, #4]
 814d886:	2b00      	cmp	r3, #0
 814d888:	d131      	bne.n	814d8ee <USBD_SetAddress+0x76>
 814d88a:	683b      	ldr	r3, [r7, #0]
 814d88c:	88db      	ldrh	r3, [r3, #6]
 814d88e:	2b00      	cmp	r3, #0
 814d890:	d12d      	bne.n	814d8ee <USBD_SetAddress+0x76>
 814d892:	683b      	ldr	r3, [r7, #0]
 814d894:	885b      	ldrh	r3, [r3, #2]
 814d896:	2b7f      	cmp	r3, #127	@ 0x7f
 814d898:	d829      	bhi.n	814d8ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 814d89a:	683b      	ldr	r3, [r7, #0]
 814d89c:	885b      	ldrh	r3, [r3, #2]
 814d89e:	b2db      	uxtb	r3, r3
 814d8a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 814d8a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814d8a6:	687b      	ldr	r3, [r7, #4]
 814d8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d8ac:	b2db      	uxtb	r3, r3
 814d8ae:	2b03      	cmp	r3, #3
 814d8b0:	d104      	bne.n	814d8bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 814d8b2:	6839      	ldr	r1, [r7, #0]
 814d8b4:	6878      	ldr	r0, [r7, #4]
 814d8b6:	f000 f9bc 	bl	814dc32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814d8ba:	e01d      	b.n	814d8f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 814d8bc:	687b      	ldr	r3, [r7, #4]
 814d8be:	7bfa      	ldrb	r2, [r7, #15]
 814d8c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 814d8c4:	7bfb      	ldrb	r3, [r7, #15]
 814d8c6:	4619      	mov	r1, r3
 814d8c8:	6878      	ldr	r0, [r7, #4]
 814d8ca:	f000 ff9d 	bl	814e808 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 814d8ce:	6878      	ldr	r0, [r7, #4]
 814d8d0:	f000 fa86 	bl	814dde0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 814d8d4:	7bfb      	ldrb	r3, [r7, #15]
 814d8d6:	2b00      	cmp	r3, #0
 814d8d8:	d004      	beq.n	814d8e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 814d8da:	687b      	ldr	r3, [r7, #4]
 814d8dc:	2202      	movs	r2, #2
 814d8de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814d8e2:	e009      	b.n	814d8f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 814d8e4:	687b      	ldr	r3, [r7, #4]
 814d8e6:	2201      	movs	r2, #1
 814d8e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 814d8ec:	e004      	b.n	814d8f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 814d8ee:	6839      	ldr	r1, [r7, #0]
 814d8f0:	6878      	ldr	r0, [r7, #4]
 814d8f2:	f000 f99e 	bl	814dc32 <USBD_CtlError>
  }
}
 814d8f6:	bf00      	nop
 814d8f8:	bf00      	nop
 814d8fa:	3710      	adds	r7, #16
 814d8fc:	46bd      	mov	sp, r7
 814d8fe:	bd80      	pop	{r7, pc}

0814d900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814d900:	b580      	push	{r7, lr}
 814d902:	b084      	sub	sp, #16
 814d904:	af00      	add	r7, sp, #0
 814d906:	6078      	str	r0, [r7, #4]
 814d908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 814d90a:	2300      	movs	r3, #0
 814d90c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 814d90e:	683b      	ldr	r3, [r7, #0]
 814d910:	885b      	ldrh	r3, [r3, #2]
 814d912:	b2da      	uxtb	r2, r3
 814d914:	4b4e      	ldr	r3, [pc, #312]	@ (814da50 <USBD_SetConfig+0x150>)
 814d916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 814d918:	4b4d      	ldr	r3, [pc, #308]	@ (814da50 <USBD_SetConfig+0x150>)
 814d91a:	781b      	ldrb	r3, [r3, #0]
 814d91c:	2b01      	cmp	r3, #1
 814d91e:	d905      	bls.n	814d92c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 814d920:	6839      	ldr	r1, [r7, #0]
 814d922:	6878      	ldr	r0, [r7, #4]
 814d924:	f000 f985 	bl	814dc32 <USBD_CtlError>
    return USBD_FAIL;
 814d928:	2303      	movs	r3, #3
 814d92a:	e08c      	b.n	814da46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 814d92c:	687b      	ldr	r3, [r7, #4]
 814d92e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814d932:	b2db      	uxtb	r3, r3
 814d934:	2b02      	cmp	r3, #2
 814d936:	d002      	beq.n	814d93e <USBD_SetConfig+0x3e>
 814d938:	2b03      	cmp	r3, #3
 814d93a:	d029      	beq.n	814d990 <USBD_SetConfig+0x90>
 814d93c:	e075      	b.n	814da2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 814d93e:	4b44      	ldr	r3, [pc, #272]	@ (814da50 <USBD_SetConfig+0x150>)
 814d940:	781b      	ldrb	r3, [r3, #0]
 814d942:	2b00      	cmp	r3, #0
 814d944:	d020      	beq.n	814d988 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 814d946:	4b42      	ldr	r3, [pc, #264]	@ (814da50 <USBD_SetConfig+0x150>)
 814d948:	781b      	ldrb	r3, [r3, #0]
 814d94a:	461a      	mov	r2, r3
 814d94c:	687b      	ldr	r3, [r7, #4]
 814d94e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 814d950:	4b3f      	ldr	r3, [pc, #252]	@ (814da50 <USBD_SetConfig+0x150>)
 814d952:	781b      	ldrb	r3, [r3, #0]
 814d954:	4619      	mov	r1, r3
 814d956:	6878      	ldr	r0, [r7, #4]
 814d958:	f7fe ffb9 	bl	814c8ce <USBD_SetClassConfig>
 814d95c:	4603      	mov	r3, r0
 814d95e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 814d960:	7bfb      	ldrb	r3, [r7, #15]
 814d962:	2b00      	cmp	r3, #0
 814d964:	d008      	beq.n	814d978 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 814d966:	6839      	ldr	r1, [r7, #0]
 814d968:	6878      	ldr	r0, [r7, #4]
 814d96a:	f000 f962 	bl	814dc32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 814d96e:	687b      	ldr	r3, [r7, #4]
 814d970:	2202      	movs	r2, #2
 814d972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 814d976:	e065      	b.n	814da44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 814d978:	6878      	ldr	r0, [r7, #4]
 814d97a:	f000 fa31 	bl	814dde0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 814d97e:	687b      	ldr	r3, [r7, #4]
 814d980:	2203      	movs	r2, #3
 814d982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 814d986:	e05d      	b.n	814da44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 814d988:	6878      	ldr	r0, [r7, #4]
 814d98a:	f000 fa29 	bl	814dde0 <USBD_CtlSendStatus>
      break;
 814d98e:	e059      	b.n	814da44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 814d990:	4b2f      	ldr	r3, [pc, #188]	@ (814da50 <USBD_SetConfig+0x150>)
 814d992:	781b      	ldrb	r3, [r3, #0]
 814d994:	2b00      	cmp	r3, #0
 814d996:	d112      	bne.n	814d9be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 814d998:	687b      	ldr	r3, [r7, #4]
 814d99a:	2202      	movs	r2, #2
 814d99c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 814d9a0:	4b2b      	ldr	r3, [pc, #172]	@ (814da50 <USBD_SetConfig+0x150>)
 814d9a2:	781b      	ldrb	r3, [r3, #0]
 814d9a4:	461a      	mov	r2, r3
 814d9a6:	687b      	ldr	r3, [r7, #4]
 814d9a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 814d9aa:	4b29      	ldr	r3, [pc, #164]	@ (814da50 <USBD_SetConfig+0x150>)
 814d9ac:	781b      	ldrb	r3, [r3, #0]
 814d9ae:	4619      	mov	r1, r3
 814d9b0:	6878      	ldr	r0, [r7, #4]
 814d9b2:	f7fe ffa8 	bl	814c906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 814d9b6:	6878      	ldr	r0, [r7, #4]
 814d9b8:	f000 fa12 	bl	814dde0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 814d9bc:	e042      	b.n	814da44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 814d9be:	4b24      	ldr	r3, [pc, #144]	@ (814da50 <USBD_SetConfig+0x150>)
 814d9c0:	781b      	ldrb	r3, [r3, #0]
 814d9c2:	461a      	mov	r2, r3
 814d9c4:	687b      	ldr	r3, [r7, #4]
 814d9c6:	685b      	ldr	r3, [r3, #4]
 814d9c8:	429a      	cmp	r2, r3
 814d9ca:	d02a      	beq.n	814da22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 814d9cc:	687b      	ldr	r3, [r7, #4]
 814d9ce:	685b      	ldr	r3, [r3, #4]
 814d9d0:	b2db      	uxtb	r3, r3
 814d9d2:	4619      	mov	r1, r3
 814d9d4:	6878      	ldr	r0, [r7, #4]
 814d9d6:	f7fe ff96 	bl	814c906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 814d9da:	4b1d      	ldr	r3, [pc, #116]	@ (814da50 <USBD_SetConfig+0x150>)
 814d9dc:	781b      	ldrb	r3, [r3, #0]
 814d9de:	461a      	mov	r2, r3
 814d9e0:	687b      	ldr	r3, [r7, #4]
 814d9e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 814d9e4:	4b1a      	ldr	r3, [pc, #104]	@ (814da50 <USBD_SetConfig+0x150>)
 814d9e6:	781b      	ldrb	r3, [r3, #0]
 814d9e8:	4619      	mov	r1, r3
 814d9ea:	6878      	ldr	r0, [r7, #4]
 814d9ec:	f7fe ff6f 	bl	814c8ce <USBD_SetClassConfig>
 814d9f0:	4603      	mov	r3, r0
 814d9f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 814d9f4:	7bfb      	ldrb	r3, [r7, #15]
 814d9f6:	2b00      	cmp	r3, #0
 814d9f8:	d00f      	beq.n	814da1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 814d9fa:	6839      	ldr	r1, [r7, #0]
 814d9fc:	6878      	ldr	r0, [r7, #4]
 814d9fe:	f000 f918 	bl	814dc32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 814da02:	687b      	ldr	r3, [r7, #4]
 814da04:	685b      	ldr	r3, [r3, #4]
 814da06:	b2db      	uxtb	r3, r3
 814da08:	4619      	mov	r1, r3
 814da0a:	6878      	ldr	r0, [r7, #4]
 814da0c:	f7fe ff7b 	bl	814c906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 814da10:	687b      	ldr	r3, [r7, #4]
 814da12:	2202      	movs	r2, #2
 814da14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 814da18:	e014      	b.n	814da44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 814da1a:	6878      	ldr	r0, [r7, #4]
 814da1c:	f000 f9e0 	bl	814dde0 <USBD_CtlSendStatus>
      break;
 814da20:	e010      	b.n	814da44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 814da22:	6878      	ldr	r0, [r7, #4]
 814da24:	f000 f9dc 	bl	814dde0 <USBD_CtlSendStatus>
      break;
 814da28:	e00c      	b.n	814da44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 814da2a:	6839      	ldr	r1, [r7, #0]
 814da2c:	6878      	ldr	r0, [r7, #4]
 814da2e:	f000 f900 	bl	814dc32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 814da32:	4b07      	ldr	r3, [pc, #28]	@ (814da50 <USBD_SetConfig+0x150>)
 814da34:	781b      	ldrb	r3, [r3, #0]
 814da36:	4619      	mov	r1, r3
 814da38:	6878      	ldr	r0, [r7, #4]
 814da3a:	f7fe ff64 	bl	814c906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 814da3e:	2303      	movs	r3, #3
 814da40:	73fb      	strb	r3, [r7, #15]
      break;
 814da42:	bf00      	nop
  }

  return ret;
 814da44:	7bfb      	ldrb	r3, [r7, #15]
}
 814da46:	4618      	mov	r0, r3
 814da48:	3710      	adds	r7, #16
 814da4a:	46bd      	mov	sp, r7
 814da4c:	bd80      	pop	{r7, pc}
 814da4e:	bf00      	nop
 814da50:	10034f94 	.word	0x10034f94

0814da54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814da54:	b580      	push	{r7, lr}
 814da56:	b082      	sub	sp, #8
 814da58:	af00      	add	r7, sp, #0
 814da5a:	6078      	str	r0, [r7, #4]
 814da5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 814da5e:	683b      	ldr	r3, [r7, #0]
 814da60:	88db      	ldrh	r3, [r3, #6]
 814da62:	2b01      	cmp	r3, #1
 814da64:	d004      	beq.n	814da70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 814da66:	6839      	ldr	r1, [r7, #0]
 814da68:	6878      	ldr	r0, [r7, #4]
 814da6a:	f000 f8e2 	bl	814dc32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 814da6e:	e023      	b.n	814dab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 814da70:	687b      	ldr	r3, [r7, #4]
 814da72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814da76:	b2db      	uxtb	r3, r3
 814da78:	2b02      	cmp	r3, #2
 814da7a:	dc02      	bgt.n	814da82 <USBD_GetConfig+0x2e>
 814da7c:	2b00      	cmp	r3, #0
 814da7e:	dc03      	bgt.n	814da88 <USBD_GetConfig+0x34>
 814da80:	e015      	b.n	814daae <USBD_GetConfig+0x5a>
 814da82:	2b03      	cmp	r3, #3
 814da84:	d00b      	beq.n	814da9e <USBD_GetConfig+0x4a>
 814da86:	e012      	b.n	814daae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 814da88:	687b      	ldr	r3, [r7, #4]
 814da8a:	2200      	movs	r2, #0
 814da8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 814da8e:	687b      	ldr	r3, [r7, #4]
 814da90:	3308      	adds	r3, #8
 814da92:	2201      	movs	r2, #1
 814da94:	4619      	mov	r1, r3
 814da96:	6878      	ldr	r0, [r7, #4]
 814da98:	f000 f948 	bl	814dd2c <USBD_CtlSendData>
        break;
 814da9c:	e00c      	b.n	814dab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 814da9e:	687b      	ldr	r3, [r7, #4]
 814daa0:	3304      	adds	r3, #4
 814daa2:	2201      	movs	r2, #1
 814daa4:	4619      	mov	r1, r3
 814daa6:	6878      	ldr	r0, [r7, #4]
 814daa8:	f000 f940 	bl	814dd2c <USBD_CtlSendData>
        break;
 814daac:	e004      	b.n	814dab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 814daae:	6839      	ldr	r1, [r7, #0]
 814dab0:	6878      	ldr	r0, [r7, #4]
 814dab2:	f000 f8be 	bl	814dc32 <USBD_CtlError>
        break;
 814dab6:	bf00      	nop
}
 814dab8:	bf00      	nop
 814daba:	3708      	adds	r7, #8
 814dabc:	46bd      	mov	sp, r7
 814dabe:	bd80      	pop	{r7, pc}

0814dac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814dac0:	b580      	push	{r7, lr}
 814dac2:	b082      	sub	sp, #8
 814dac4:	af00      	add	r7, sp, #0
 814dac6:	6078      	str	r0, [r7, #4]
 814dac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 814daca:	687b      	ldr	r3, [r7, #4]
 814dacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814dad0:	b2db      	uxtb	r3, r3
 814dad2:	3b01      	subs	r3, #1
 814dad4:	2b02      	cmp	r3, #2
 814dad6:	d81e      	bhi.n	814db16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 814dad8:	683b      	ldr	r3, [r7, #0]
 814dada:	88db      	ldrh	r3, [r3, #6]
 814dadc:	2b02      	cmp	r3, #2
 814dade:	d004      	beq.n	814daea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 814dae0:	6839      	ldr	r1, [r7, #0]
 814dae2:	6878      	ldr	r0, [r7, #4]
 814dae4:	f000 f8a5 	bl	814dc32 <USBD_CtlError>
        break;
 814dae8:	e01a      	b.n	814db20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 814daea:	687b      	ldr	r3, [r7, #4]
 814daec:	2201      	movs	r2, #1
 814daee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 814daf0:	687b      	ldr	r3, [r7, #4]
 814daf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 814daf6:	2b00      	cmp	r3, #0
 814daf8:	d005      	beq.n	814db06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 814dafa:	687b      	ldr	r3, [r7, #4]
 814dafc:	68db      	ldr	r3, [r3, #12]
 814dafe:	f043 0202 	orr.w	r2, r3, #2
 814db02:	687b      	ldr	r3, [r7, #4]
 814db04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 814db06:	687b      	ldr	r3, [r7, #4]
 814db08:	330c      	adds	r3, #12
 814db0a:	2202      	movs	r2, #2
 814db0c:	4619      	mov	r1, r3
 814db0e:	6878      	ldr	r0, [r7, #4]
 814db10:	f000 f90c 	bl	814dd2c <USBD_CtlSendData>
      break;
 814db14:	e004      	b.n	814db20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 814db16:	6839      	ldr	r1, [r7, #0]
 814db18:	6878      	ldr	r0, [r7, #4]
 814db1a:	f000 f88a 	bl	814dc32 <USBD_CtlError>
      break;
 814db1e:	bf00      	nop
  }
}
 814db20:	bf00      	nop
 814db22:	3708      	adds	r7, #8
 814db24:	46bd      	mov	sp, r7
 814db26:	bd80      	pop	{r7, pc}

0814db28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814db28:	b580      	push	{r7, lr}
 814db2a:	b082      	sub	sp, #8
 814db2c:	af00      	add	r7, sp, #0
 814db2e:	6078      	str	r0, [r7, #4]
 814db30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 814db32:	683b      	ldr	r3, [r7, #0]
 814db34:	885b      	ldrh	r3, [r3, #2]
 814db36:	2b01      	cmp	r3, #1
 814db38:	d107      	bne.n	814db4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 814db3a:	687b      	ldr	r3, [r7, #4]
 814db3c:	2201      	movs	r2, #1
 814db3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 814db42:	6878      	ldr	r0, [r7, #4]
 814db44:	f000 f94c 	bl	814dde0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 814db48:	e013      	b.n	814db72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 814db4a:	683b      	ldr	r3, [r7, #0]
 814db4c:	885b      	ldrh	r3, [r3, #2]
 814db4e:	2b02      	cmp	r3, #2
 814db50:	d10b      	bne.n	814db6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 814db52:	683b      	ldr	r3, [r7, #0]
 814db54:	889b      	ldrh	r3, [r3, #4]
 814db56:	0a1b      	lsrs	r3, r3, #8
 814db58:	b29b      	uxth	r3, r3
 814db5a:	b2da      	uxtb	r2, r3
 814db5c:	687b      	ldr	r3, [r7, #4]
 814db5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 814db62:	6878      	ldr	r0, [r7, #4]
 814db64:	f000 f93c 	bl	814dde0 <USBD_CtlSendStatus>
}
 814db68:	e003      	b.n	814db72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 814db6a:	6839      	ldr	r1, [r7, #0]
 814db6c:	6878      	ldr	r0, [r7, #4]
 814db6e:	f000 f860 	bl	814dc32 <USBD_CtlError>
}
 814db72:	bf00      	nop
 814db74:	3708      	adds	r7, #8
 814db76:	46bd      	mov	sp, r7
 814db78:	bd80      	pop	{r7, pc}

0814db7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814db7a:	b580      	push	{r7, lr}
 814db7c:	b082      	sub	sp, #8
 814db7e:	af00      	add	r7, sp, #0
 814db80:	6078      	str	r0, [r7, #4]
 814db82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 814db84:	687b      	ldr	r3, [r7, #4]
 814db86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 814db8a:	b2db      	uxtb	r3, r3
 814db8c:	3b01      	subs	r3, #1
 814db8e:	2b02      	cmp	r3, #2
 814db90:	d80b      	bhi.n	814dbaa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 814db92:	683b      	ldr	r3, [r7, #0]
 814db94:	885b      	ldrh	r3, [r3, #2]
 814db96:	2b01      	cmp	r3, #1
 814db98:	d10c      	bne.n	814dbb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 814db9a:	687b      	ldr	r3, [r7, #4]
 814db9c:	2200      	movs	r2, #0
 814db9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 814dba2:	6878      	ldr	r0, [r7, #4]
 814dba4:	f000 f91c 	bl	814dde0 <USBD_CtlSendStatus>
      }
      break;
 814dba8:	e004      	b.n	814dbb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 814dbaa:	6839      	ldr	r1, [r7, #0]
 814dbac:	6878      	ldr	r0, [r7, #4]
 814dbae:	f000 f840 	bl	814dc32 <USBD_CtlError>
      break;
 814dbb2:	e000      	b.n	814dbb6 <USBD_ClrFeature+0x3c>
      break;
 814dbb4:	bf00      	nop
  }
}
 814dbb6:	bf00      	nop
 814dbb8:	3708      	adds	r7, #8
 814dbba:	46bd      	mov	sp, r7
 814dbbc:	bd80      	pop	{r7, pc}

0814dbbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 814dbbe:	b580      	push	{r7, lr}
 814dbc0:	b084      	sub	sp, #16
 814dbc2:	af00      	add	r7, sp, #0
 814dbc4:	6078      	str	r0, [r7, #4]
 814dbc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 814dbc8:	683b      	ldr	r3, [r7, #0]
 814dbca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 814dbcc:	68fb      	ldr	r3, [r7, #12]
 814dbce:	781a      	ldrb	r2, [r3, #0]
 814dbd0:	687b      	ldr	r3, [r7, #4]
 814dbd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 814dbd4:	68fb      	ldr	r3, [r7, #12]
 814dbd6:	3301      	adds	r3, #1
 814dbd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 814dbda:	68fb      	ldr	r3, [r7, #12]
 814dbdc:	781a      	ldrb	r2, [r3, #0]
 814dbde:	687b      	ldr	r3, [r7, #4]
 814dbe0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 814dbe2:	68fb      	ldr	r3, [r7, #12]
 814dbe4:	3301      	adds	r3, #1
 814dbe6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 814dbe8:	68f8      	ldr	r0, [r7, #12]
 814dbea:	f7ff fa16 	bl	814d01a <SWAPBYTE>
 814dbee:	4603      	mov	r3, r0
 814dbf0:	461a      	mov	r2, r3
 814dbf2:	687b      	ldr	r3, [r7, #4]
 814dbf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 814dbf6:	68fb      	ldr	r3, [r7, #12]
 814dbf8:	3301      	adds	r3, #1
 814dbfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 814dbfc:	68fb      	ldr	r3, [r7, #12]
 814dbfe:	3301      	adds	r3, #1
 814dc00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 814dc02:	68f8      	ldr	r0, [r7, #12]
 814dc04:	f7ff fa09 	bl	814d01a <SWAPBYTE>
 814dc08:	4603      	mov	r3, r0
 814dc0a:	461a      	mov	r2, r3
 814dc0c:	687b      	ldr	r3, [r7, #4]
 814dc0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 814dc10:	68fb      	ldr	r3, [r7, #12]
 814dc12:	3301      	adds	r3, #1
 814dc14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 814dc16:	68fb      	ldr	r3, [r7, #12]
 814dc18:	3301      	adds	r3, #1
 814dc1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 814dc1c:	68f8      	ldr	r0, [r7, #12]
 814dc1e:	f7ff f9fc 	bl	814d01a <SWAPBYTE>
 814dc22:	4603      	mov	r3, r0
 814dc24:	461a      	mov	r2, r3
 814dc26:	687b      	ldr	r3, [r7, #4]
 814dc28:	80da      	strh	r2, [r3, #6]
}
 814dc2a:	bf00      	nop
 814dc2c:	3710      	adds	r7, #16
 814dc2e:	46bd      	mov	sp, r7
 814dc30:	bd80      	pop	{r7, pc}

0814dc32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 814dc32:	b580      	push	{r7, lr}
 814dc34:	b082      	sub	sp, #8
 814dc36:	af00      	add	r7, sp, #0
 814dc38:	6078      	str	r0, [r7, #4]
 814dc3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 814dc3c:	2180      	movs	r1, #128	@ 0x80
 814dc3e:	6878      	ldr	r0, [r7, #4]
 814dc40:	f000 fd78 	bl	814e734 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 814dc44:	2100      	movs	r1, #0
 814dc46:	6878      	ldr	r0, [r7, #4]
 814dc48:	f000 fd74 	bl	814e734 <USBD_LL_StallEP>
}
 814dc4c:	bf00      	nop
 814dc4e:	3708      	adds	r7, #8
 814dc50:	46bd      	mov	sp, r7
 814dc52:	bd80      	pop	{r7, pc}

0814dc54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 814dc54:	b580      	push	{r7, lr}
 814dc56:	b086      	sub	sp, #24
 814dc58:	af00      	add	r7, sp, #0
 814dc5a:	60f8      	str	r0, [r7, #12]
 814dc5c:	60b9      	str	r1, [r7, #8]
 814dc5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 814dc60:	2300      	movs	r3, #0
 814dc62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 814dc64:	68fb      	ldr	r3, [r7, #12]
 814dc66:	2b00      	cmp	r3, #0
 814dc68:	d042      	beq.n	814dcf0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 814dc6a:	68fb      	ldr	r3, [r7, #12]
 814dc6c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 814dc6e:	6938      	ldr	r0, [r7, #16]
 814dc70:	f000 f842 	bl	814dcf8 <USBD_GetLen>
 814dc74:	4603      	mov	r3, r0
 814dc76:	3301      	adds	r3, #1
 814dc78:	005b      	lsls	r3, r3, #1
 814dc7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 814dc7e:	d808      	bhi.n	814dc92 <USBD_GetString+0x3e>
 814dc80:	6938      	ldr	r0, [r7, #16]
 814dc82:	f000 f839 	bl	814dcf8 <USBD_GetLen>
 814dc86:	4603      	mov	r3, r0
 814dc88:	3301      	adds	r3, #1
 814dc8a:	b29b      	uxth	r3, r3
 814dc8c:	005b      	lsls	r3, r3, #1
 814dc8e:	b29a      	uxth	r2, r3
 814dc90:	e001      	b.n	814dc96 <USBD_GetString+0x42>
 814dc92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 814dc96:	687b      	ldr	r3, [r7, #4]
 814dc98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 814dc9a:	7dfb      	ldrb	r3, [r7, #23]
 814dc9c:	68ba      	ldr	r2, [r7, #8]
 814dc9e:	4413      	add	r3, r2
 814dca0:	687a      	ldr	r2, [r7, #4]
 814dca2:	7812      	ldrb	r2, [r2, #0]
 814dca4:	701a      	strb	r2, [r3, #0]
  idx++;
 814dca6:	7dfb      	ldrb	r3, [r7, #23]
 814dca8:	3301      	adds	r3, #1
 814dcaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 814dcac:	7dfb      	ldrb	r3, [r7, #23]
 814dcae:	68ba      	ldr	r2, [r7, #8]
 814dcb0:	4413      	add	r3, r2
 814dcb2:	2203      	movs	r2, #3
 814dcb4:	701a      	strb	r2, [r3, #0]
  idx++;
 814dcb6:	7dfb      	ldrb	r3, [r7, #23]
 814dcb8:	3301      	adds	r3, #1
 814dcba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 814dcbc:	e013      	b.n	814dce6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 814dcbe:	7dfb      	ldrb	r3, [r7, #23]
 814dcc0:	68ba      	ldr	r2, [r7, #8]
 814dcc2:	4413      	add	r3, r2
 814dcc4:	693a      	ldr	r2, [r7, #16]
 814dcc6:	7812      	ldrb	r2, [r2, #0]
 814dcc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 814dcca:	693b      	ldr	r3, [r7, #16]
 814dccc:	3301      	adds	r3, #1
 814dcce:	613b      	str	r3, [r7, #16]
    idx++;
 814dcd0:	7dfb      	ldrb	r3, [r7, #23]
 814dcd2:	3301      	adds	r3, #1
 814dcd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 814dcd6:	7dfb      	ldrb	r3, [r7, #23]
 814dcd8:	68ba      	ldr	r2, [r7, #8]
 814dcda:	4413      	add	r3, r2
 814dcdc:	2200      	movs	r2, #0
 814dcde:	701a      	strb	r2, [r3, #0]
    idx++;
 814dce0:	7dfb      	ldrb	r3, [r7, #23]
 814dce2:	3301      	adds	r3, #1
 814dce4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 814dce6:	693b      	ldr	r3, [r7, #16]
 814dce8:	781b      	ldrb	r3, [r3, #0]
 814dcea:	2b00      	cmp	r3, #0
 814dcec:	d1e7      	bne.n	814dcbe <USBD_GetString+0x6a>
 814dcee:	e000      	b.n	814dcf2 <USBD_GetString+0x9e>
    return;
 814dcf0:	bf00      	nop
  }
}
 814dcf2:	3718      	adds	r7, #24
 814dcf4:	46bd      	mov	sp, r7
 814dcf6:	bd80      	pop	{r7, pc}

0814dcf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 814dcf8:	b480      	push	{r7}
 814dcfa:	b085      	sub	sp, #20
 814dcfc:	af00      	add	r7, sp, #0
 814dcfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 814dd00:	2300      	movs	r3, #0
 814dd02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 814dd04:	687b      	ldr	r3, [r7, #4]
 814dd06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 814dd08:	e005      	b.n	814dd16 <USBD_GetLen+0x1e>
  {
    len++;
 814dd0a:	7bfb      	ldrb	r3, [r7, #15]
 814dd0c:	3301      	adds	r3, #1
 814dd0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 814dd10:	68bb      	ldr	r3, [r7, #8]
 814dd12:	3301      	adds	r3, #1
 814dd14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 814dd16:	68bb      	ldr	r3, [r7, #8]
 814dd18:	781b      	ldrb	r3, [r3, #0]
 814dd1a:	2b00      	cmp	r3, #0
 814dd1c:	d1f5      	bne.n	814dd0a <USBD_GetLen+0x12>
  }

  return len;
 814dd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 814dd20:	4618      	mov	r0, r3
 814dd22:	3714      	adds	r7, #20
 814dd24:	46bd      	mov	sp, r7
 814dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 814dd2a:	4770      	bx	lr

0814dd2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 814dd2c:	b580      	push	{r7, lr}
 814dd2e:	b084      	sub	sp, #16
 814dd30:	af00      	add	r7, sp, #0
 814dd32:	60f8      	str	r0, [r7, #12]
 814dd34:	60b9      	str	r1, [r7, #8]
 814dd36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 814dd38:	68fb      	ldr	r3, [r7, #12]
 814dd3a:	2202      	movs	r2, #2
 814dd3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 814dd40:	68fb      	ldr	r3, [r7, #12]
 814dd42:	687a      	ldr	r2, [r7, #4]
 814dd44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 814dd46:	68fb      	ldr	r3, [r7, #12]
 814dd48:	687a      	ldr	r2, [r7, #4]
 814dd4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 814dd4c:	687b      	ldr	r3, [r7, #4]
 814dd4e:	68ba      	ldr	r2, [r7, #8]
 814dd50:	2100      	movs	r1, #0
 814dd52:	68f8      	ldr	r0, [r7, #12]
 814dd54:	f000 fd77 	bl	814e846 <USBD_LL_Transmit>

  return USBD_OK;
 814dd58:	2300      	movs	r3, #0
}
 814dd5a:	4618      	mov	r0, r3
 814dd5c:	3710      	adds	r7, #16
 814dd5e:	46bd      	mov	sp, r7
 814dd60:	bd80      	pop	{r7, pc}

0814dd62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 814dd62:	b580      	push	{r7, lr}
 814dd64:	b084      	sub	sp, #16
 814dd66:	af00      	add	r7, sp, #0
 814dd68:	60f8      	str	r0, [r7, #12]
 814dd6a:	60b9      	str	r1, [r7, #8]
 814dd6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 814dd6e:	687b      	ldr	r3, [r7, #4]
 814dd70:	68ba      	ldr	r2, [r7, #8]
 814dd72:	2100      	movs	r1, #0
 814dd74:	68f8      	ldr	r0, [r7, #12]
 814dd76:	f000 fd66 	bl	814e846 <USBD_LL_Transmit>

  return USBD_OK;
 814dd7a:	2300      	movs	r3, #0
}
 814dd7c:	4618      	mov	r0, r3
 814dd7e:	3710      	adds	r7, #16
 814dd80:	46bd      	mov	sp, r7
 814dd82:	bd80      	pop	{r7, pc}

0814dd84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 814dd84:	b580      	push	{r7, lr}
 814dd86:	b084      	sub	sp, #16
 814dd88:	af00      	add	r7, sp, #0
 814dd8a:	60f8      	str	r0, [r7, #12]
 814dd8c:	60b9      	str	r1, [r7, #8]
 814dd8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 814dd90:	68fb      	ldr	r3, [r7, #12]
 814dd92:	2203      	movs	r2, #3
 814dd94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 814dd98:	68fb      	ldr	r3, [r7, #12]
 814dd9a:	687a      	ldr	r2, [r7, #4]
 814dd9c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 814dda0:	68fb      	ldr	r3, [r7, #12]
 814dda2:	687a      	ldr	r2, [r7, #4]
 814dda4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 814dda8:	687b      	ldr	r3, [r7, #4]
 814ddaa:	68ba      	ldr	r2, [r7, #8]
 814ddac:	2100      	movs	r1, #0
 814ddae:	68f8      	ldr	r0, [r7, #12]
 814ddb0:	f000 fd6a 	bl	814e888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 814ddb4:	2300      	movs	r3, #0
}
 814ddb6:	4618      	mov	r0, r3
 814ddb8:	3710      	adds	r7, #16
 814ddba:	46bd      	mov	sp, r7
 814ddbc:	bd80      	pop	{r7, pc}

0814ddbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 814ddbe:	b580      	push	{r7, lr}
 814ddc0:	b084      	sub	sp, #16
 814ddc2:	af00      	add	r7, sp, #0
 814ddc4:	60f8      	str	r0, [r7, #12]
 814ddc6:	60b9      	str	r1, [r7, #8]
 814ddc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 814ddca:	687b      	ldr	r3, [r7, #4]
 814ddcc:	68ba      	ldr	r2, [r7, #8]
 814ddce:	2100      	movs	r1, #0
 814ddd0:	68f8      	ldr	r0, [r7, #12]
 814ddd2:	f000 fd59 	bl	814e888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 814ddd6:	2300      	movs	r3, #0
}
 814ddd8:	4618      	mov	r0, r3
 814ddda:	3710      	adds	r7, #16
 814dddc:	46bd      	mov	sp, r7
 814ddde:	bd80      	pop	{r7, pc}

0814dde0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 814dde0:	b580      	push	{r7, lr}
 814dde2:	b082      	sub	sp, #8
 814dde4:	af00      	add	r7, sp, #0
 814dde6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 814dde8:	687b      	ldr	r3, [r7, #4]
 814ddea:	2204      	movs	r2, #4
 814ddec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 814ddf0:	2300      	movs	r3, #0
 814ddf2:	2200      	movs	r2, #0
 814ddf4:	2100      	movs	r1, #0
 814ddf6:	6878      	ldr	r0, [r7, #4]
 814ddf8:	f000 fd25 	bl	814e846 <USBD_LL_Transmit>

  return USBD_OK;
 814ddfc:	2300      	movs	r3, #0
}
 814ddfe:	4618      	mov	r0, r3
 814de00:	3708      	adds	r7, #8
 814de02:	46bd      	mov	sp, r7
 814de04:	bd80      	pop	{r7, pc}

0814de06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 814de06:	b580      	push	{r7, lr}
 814de08:	b082      	sub	sp, #8
 814de0a:	af00      	add	r7, sp, #0
 814de0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 814de0e:	687b      	ldr	r3, [r7, #4]
 814de10:	2205      	movs	r2, #5
 814de12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 814de16:	2300      	movs	r3, #0
 814de18:	2200      	movs	r2, #0
 814de1a:	2100      	movs	r1, #0
 814de1c:	6878      	ldr	r0, [r7, #4]
 814de1e:	f000 fd33 	bl	814e888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 814de22:	2300      	movs	r3, #0
}
 814de24:	4618      	mov	r0, r3
 814de26:	3708      	adds	r7, #8
 814de28:	46bd      	mov	sp, r7
 814de2a:	bd80      	pop	{r7, pc}

0814de2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 814de2c:	b580      	push	{r7, lr}
 814de2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 814de30:	2200      	movs	r2, #0
 814de32:	4913      	ldr	r1, [pc, #76]	@ (814de80 <MX_USB_DEVICE_Init+0x54>)
 814de34:	4813      	ldr	r0, [pc, #76]	@ (814de84 <MX_USB_DEVICE_Init+0x58>)
 814de36:	f7fe fccd 	bl	814c7d4 <USBD_Init>
 814de3a:	4603      	mov	r3, r0
 814de3c:	2b00      	cmp	r3, #0
 814de3e:	d001      	beq.n	814de44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 814de40:	f7f4 f9bc 	bl	81421bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 814de44:	4910      	ldr	r1, [pc, #64]	@ (814de88 <MX_USB_DEVICE_Init+0x5c>)
 814de46:	480f      	ldr	r0, [pc, #60]	@ (814de84 <MX_USB_DEVICE_Init+0x58>)
 814de48:	f7fe fcf4 	bl	814c834 <USBD_RegisterClass>
 814de4c:	4603      	mov	r3, r0
 814de4e:	2b00      	cmp	r3, #0
 814de50:	d001      	beq.n	814de56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 814de52:	f7f4 f9b3 	bl	81421bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 814de56:	490d      	ldr	r1, [pc, #52]	@ (814de8c <MX_USB_DEVICE_Init+0x60>)
 814de58:	480a      	ldr	r0, [pc, #40]	@ (814de84 <MX_USB_DEVICE_Init+0x58>)
 814de5a:	f7fe fbeb 	bl	814c634 <USBD_CDC_RegisterInterface>
 814de5e:	4603      	mov	r3, r0
 814de60:	2b00      	cmp	r3, #0
 814de62:	d001      	beq.n	814de68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 814de64:	f7f4 f9aa 	bl	81421bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 814de68:	4806      	ldr	r0, [pc, #24]	@ (814de84 <MX_USB_DEVICE_Init+0x58>)
 814de6a:	f7fe fd19 	bl	814c8a0 <USBD_Start>
 814de6e:	4603      	mov	r3, r0
 814de70:	2b00      	cmp	r3, #0
 814de72:	d001      	beq.n	814de78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 814de74:	f7f4 f9a2 	bl	81421bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 814de78:	f7f7 fc9c 	bl	81457b4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 814de7c:	bf00      	nop
 814de7e:	bd80      	pop	{r7, pc}
 814de80:	100321a8 	.word	0x100321a8
 814de84:	10034f98 	.word	0x10034f98
 814de88:	1003210c 	.word	0x1003210c
 814de8c:	1003218c 	.word	0x1003218c

0814de90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 814de90:	b580      	push	{r7, lr}
 814de92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 814de94:	2200      	movs	r2, #0
 814de96:	4905      	ldr	r1, [pc, #20]	@ (814deac <CDC_Init_FS+0x1c>)
 814de98:	4805      	ldr	r0, [pc, #20]	@ (814deb0 <CDC_Init_FS+0x20>)
 814de9a:	f7fe fbe5 	bl	814c668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 814de9e:	4905      	ldr	r1, [pc, #20]	@ (814deb4 <CDC_Init_FS+0x24>)
 814dea0:	4803      	ldr	r0, [pc, #12]	@ (814deb0 <CDC_Init_FS+0x20>)
 814dea2:	f7fe fc03 	bl	814c6ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 814dea6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 814dea8:	4618      	mov	r0, r3
 814deaa:	bd80      	pop	{r7, pc}
 814deac:	10035a78 	.word	0x10035a78
 814deb0:	10034f98 	.word	0x10034f98
 814deb4:	10035278 	.word	0x10035278

0814deb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 814deb8:	b480      	push	{r7}
 814deba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 814debc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 814debe:	4618      	mov	r0, r3
 814dec0:	46bd      	mov	sp, r7
 814dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 814dec6:	4770      	bx	lr

0814dec8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 814dec8:	b580      	push	{r7, lr}
 814deca:	b084      	sub	sp, #16
 814decc:	af00      	add	r7, sp, #0
 814dece:	4603      	mov	r3, r0
 814ded0:	6039      	str	r1, [r7, #0]
 814ded2:	71fb      	strb	r3, [r7, #7]
 814ded4:	4613      	mov	r3, r2
 814ded6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef * req;
  static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
			    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
  switch(cmd)
 814ded8:	79fb      	ldrb	r3, [r7, #7]
 814deda:	2b23      	cmp	r3, #35	@ 0x23
 814dedc:	d86e      	bhi.n	814dfbc <CDC_Control_FS+0xf4>
 814dede:	a201      	add	r2, pc, #4	@ (adr r2, 814dee4 <CDC_Control_FS+0x1c>)
 814dee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814dee4:	0814dfbd 	.word	0x0814dfbd
 814dee8:	0814dfbd 	.word	0x0814dfbd
 814deec:	0814dfbd 	.word	0x0814dfbd
 814def0:	0814dfbd 	.word	0x0814dfbd
 814def4:	0814dfbd 	.word	0x0814dfbd
 814def8:	0814dfbd 	.word	0x0814dfbd
 814defc:	0814dfbd 	.word	0x0814dfbd
 814df00:	0814dfbd 	.word	0x0814dfbd
 814df04:	0814dfbd 	.word	0x0814dfbd
 814df08:	0814dfbd 	.word	0x0814dfbd
 814df0c:	0814dfbd 	.word	0x0814dfbd
 814df10:	0814dfbd 	.word	0x0814dfbd
 814df14:	0814dfbd 	.word	0x0814dfbd
 814df18:	0814dfbd 	.word	0x0814dfbd
 814df1c:	0814dfbd 	.word	0x0814dfbd
 814df20:	0814dfbd 	.word	0x0814dfbd
 814df24:	0814dfbd 	.word	0x0814dfbd
 814df28:	0814dfbd 	.word	0x0814dfbd
 814df2c:	0814dfbd 	.word	0x0814dfbd
 814df30:	0814dfbd 	.word	0x0814dfbd
 814df34:	0814dfbd 	.word	0x0814dfbd
 814df38:	0814dfbd 	.word	0x0814dfbd
 814df3c:	0814dfbd 	.word	0x0814dfbd
 814df40:	0814dfbd 	.word	0x0814dfbd
 814df44:	0814dfbd 	.word	0x0814dfbd
 814df48:	0814dfbd 	.word	0x0814dfbd
 814df4c:	0814dfbd 	.word	0x0814dfbd
 814df50:	0814dfbd 	.word	0x0814dfbd
 814df54:	0814dfbd 	.word	0x0814dfbd
 814df58:	0814dfbd 	.word	0x0814dfbd
 814df5c:	0814dfbd 	.word	0x0814dfbd
 814df60:	0814dfbd 	.word	0x0814dfbd
 814df64:	0814df75 	.word	0x0814df75
 814df68:	0814df87 	.word	0x0814df87
 814df6c:	0814df99 	.word	0x0814df99
 814df70:	0814dfbd 	.word	0x0814dfbd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 814df74:	4b14      	ldr	r3, [pc, #80]	@ (814dfc8 <CDC_Control_FS+0x100>)
 814df76:	683a      	ldr	r2, [r7, #0]
 814df78:	6810      	ldr	r0, [r2, #0]
 814df7a:	6018      	str	r0, [r3, #0]
 814df7c:	8891      	ldrh	r1, [r2, #4]
 814df7e:	7992      	ldrb	r2, [r2, #6]
 814df80:	8099      	strh	r1, [r3, #4]
 814df82:	719a      	strb	r2, [r3, #6]
    break;
 814df84:	e01b      	b.n	814dfbe <CDC_Control_FS+0xf6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 814df86:	683b      	ldr	r3, [r7, #0]
 814df88:	4a0f      	ldr	r2, [pc, #60]	@ (814dfc8 <CDC_Control_FS+0x100>)
 814df8a:	6810      	ldr	r0, [r2, #0]
 814df8c:	6018      	str	r0, [r3, #0]
 814df8e:	8891      	ldrh	r1, [r2, #4]
 814df90:	7992      	ldrb	r2, [r2, #6]
 814df92:	8099      	strh	r1, [r3, #4]
 814df94:	719a      	strb	r2, [r3, #6]
    break;
 814df96:	e012      	b.n	814dfbe <CDC_Control_FS+0xf6>

    case CDC_SET_CONTROL_LINE_STATE:
        req = (USBD_SetupReqTypedef *)pbuf;
 814df98:	683b      	ldr	r3, [r7, #0]
 814df9a:	60fb      	str	r3, [r7, #12]
    	if((req->wValue & 0x0001) != 0)
 814df9c:	68fb      	ldr	r3, [r7, #12]
 814df9e:	885b      	ldrh	r3, [r3, #2]
 814dfa0:	f003 0301 	and.w	r3, r3, #1
 814dfa4:	2b00      	cmp	r3, #0
 814dfa6:	d003      	beq.n	814dfb0 <CDC_Control_FS+0xe8>
    	{
    		hostComPort_isOpen = true;
 814dfa8:	4b08      	ldr	r3, [pc, #32]	@ (814dfcc <CDC_Control_FS+0x104>)
 814dfaa:	2201      	movs	r2, #1
 814dfac:	701a      	strb	r2, [r3, #0]
 814dfae:	e002      	b.n	814dfb6 <CDC_Control_FS+0xee>
    	}
    	else
    	{
    		hostComPort_isOpen = false;
 814dfb0:	4b06      	ldr	r3, [pc, #24]	@ (814dfcc <CDC_Control_FS+0x104>)
 814dfb2:	2200      	movs	r2, #0
 814dfb4:	701a      	strb	r2, [r3, #0]
    	}
    	USB_Check_Notify();
 814dfb6:	f7f3 f9db 	bl	8141370 <USB_Check_Notify>
    break;
 814dfba:	e000      	b.n	814dfbe <CDC_Control_FS+0xf6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 814dfbc:	bf00      	nop
  }

  return (USBD_OK);
 814dfbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 814dfc0:	4618      	mov	r0, r3
 814dfc2:	3710      	adds	r7, #16
 814dfc4:	46bd      	mov	sp, r7
 814dfc6:	bd80      	pop	{r7, pc}
 814dfc8:	100321a0 	.word	0x100321a0
 814dfcc:	10035274 	.word	0x10035274

0814dfd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 814dfd0:	b580      	push	{r7, lr}
 814dfd2:	b084      	sub	sp, #16
 814dfd4:	af00      	add	r7, sp, #0
 814dfd6:	6078      	str	r0, [r7, #4]
 814dfd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 814dfda:	6879      	ldr	r1, [r7, #4]
 814dfdc:	480f      	ldr	r0, [pc, #60]	@ (814e01c <CDC_Receive_FS+0x4c>)
 814dfde:	f7fe fb65 	bl	814c6ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 814dfe2:	480e      	ldr	r0, [pc, #56]	@ (814e01c <CDC_Receive_FS+0x4c>)
 814dfe4:	f7fe fbc0 	bl	814c768 <USBD_CDC_ReceivePacket>

  uint32_t written = CDC_RX_RingBuffer_PutBuffer(Buf, *Len);
 814dfe8:	683b      	ldr	r3, [r7, #0]
 814dfea:	681b      	ldr	r3, [r3, #0]
 814dfec:	4619      	mov	r1, r3
 814dfee:	6878      	ldr	r0, [r7, #4]
 814dff0:	f7f3 f96f 	bl	81412d2 <CDC_RX_RingBuffer_PutBuffer>
 814dff4:	60f8      	str	r0, [r7, #12]
  if (written != *Len) {
 814dff6:	683b      	ldr	r3, [r7, #0]
 814dff8:	681b      	ldr	r3, [r3, #0]
 814dffa:	68fa      	ldr	r2, [r7, #12]
 814dffc:	429a      	cmp	r2, r3
 814dffe:	d003      	beq.n	814e008 <CDC_Receive_FS+0x38>
      (void)CDC_SendString("CDC RX Buffer Full!!!\r\n", 24);
 814e000:	2118      	movs	r1, #24
 814e002:	4807      	ldr	r0, [pc, #28]	@ (814e020 <CDC_Receive_FS+0x50>)
 814e004:	f7f3 f9f8 	bl	81413f8 <CDC_SendString>
  }
  if (written) {
 814e008:	68fb      	ldr	r3, [r7, #12]
 814e00a:	2b00      	cmp	r3, #0
 814e00c:	d001      	beq.n	814e012 <CDC_Receive_FS+0x42>
      CDC_ISR_RxNotify();
 814e00e:	f7f3 f9a3 	bl	8141358 <CDC_ISR_RxNotify>
  }

  return (USBD_OK);
 814e012:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 814e014:	4618      	mov	r0, r3
 814e016:	3710      	adds	r7, #16
 814e018:	46bd      	mov	sp, r7
 814e01a:	bd80      	pop	{r7, pc}
 814e01c:	10034f98 	.word	0x10034f98
 814e020:	0814ea54 	.word	0x0814ea54

0814e024 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 814e024:	b580      	push	{r7, lr}
 814e026:	b084      	sub	sp, #16
 814e028:	af00      	add	r7, sp, #0
 814e02a:	6078      	str	r0, [r7, #4]
 814e02c:	460b      	mov	r3, r1
 814e02e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 814e030:	2300      	movs	r3, #0
 814e032:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 814e034:	4b0d      	ldr	r3, [pc, #52]	@ (814e06c <CDC_Transmit_FS+0x48>)
 814e036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 814e03a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 814e03c:	68bb      	ldr	r3, [r7, #8]
 814e03e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 814e042:	2b00      	cmp	r3, #0
 814e044:	d001      	beq.n	814e04a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 814e046:	2301      	movs	r3, #1
 814e048:	e00b      	b.n	814e062 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 814e04a:	887b      	ldrh	r3, [r7, #2]
 814e04c:	461a      	mov	r2, r3
 814e04e:	6879      	ldr	r1, [r7, #4]
 814e050:	4806      	ldr	r0, [pc, #24]	@ (814e06c <CDC_Transmit_FS+0x48>)
 814e052:	f7fe fb09 	bl	814c668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 814e056:	4805      	ldr	r0, [pc, #20]	@ (814e06c <CDC_Transmit_FS+0x48>)
 814e058:	f7fe fb46 	bl	814c6e8 <USBD_CDC_TransmitPacket>
 814e05c:	4603      	mov	r3, r0
 814e05e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 814e060:	7bfb      	ldrb	r3, [r7, #15]
}
 814e062:	4618      	mov	r0, r3
 814e064:	3710      	adds	r7, #16
 814e066:	46bd      	mov	sp, r7
 814e068:	bd80      	pop	{r7, pc}
 814e06a:	bf00      	nop
 814e06c:	10034f98 	.word	0x10034f98

0814e070 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 814e070:	b480      	push	{r7}
 814e072:	b087      	sub	sp, #28
 814e074:	af00      	add	r7, sp, #0
 814e076:	60f8      	str	r0, [r7, #12]
 814e078:	60b9      	str	r1, [r7, #8]
 814e07a:	4613      	mov	r3, r2
 814e07c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 814e07e:	2300      	movs	r3, #0
 814e080:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 814e082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 814e086:	4618      	mov	r0, r3
 814e088:	371c      	adds	r7, #28
 814e08a:	46bd      	mov	sp, r7
 814e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e090:	4770      	bx	lr
	...

0814e094 <CDC_ComPort_IsOpen>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
_Bool CDC_ComPort_IsOpen()
{
 814e094:	b480      	push	{r7}
 814e096:	af00      	add	r7, sp, #0
	return(hostComPort_isOpen);
 814e098:	4b03      	ldr	r3, [pc, #12]	@ (814e0a8 <CDC_ComPort_IsOpen+0x14>)
 814e09a:	781b      	ldrb	r3, [r3, #0]
}
 814e09c:	4618      	mov	r0, r3
 814e09e:	46bd      	mov	sp, r7
 814e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e0a4:	4770      	bx	lr
 814e0a6:	bf00      	nop
 814e0a8:	10035274 	.word	0x10035274

0814e0ac <CDC_IsTxReady>:

_Bool CDC_IsTxReady(void)
{
 814e0ac:	b480      	push	{r7}
 814e0ae:	b083      	sub	sp, #12
 814e0b0:	af00      	add	r7, sp, #0
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 814e0b2:	4b09      	ldr	r3, [pc, #36]	@ (814e0d8 <CDC_IsTxReady+0x2c>)
 814e0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 814e0b8:	607b      	str	r3, [r7, #4]
    return (hcdc->TxState == 0);
 814e0ba:	687b      	ldr	r3, [r7, #4]
 814e0bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 814e0c0:	2b00      	cmp	r3, #0
 814e0c2:	bf0c      	ite	eq
 814e0c4:	2301      	moveq	r3, #1
 814e0c6:	2300      	movne	r3, #0
 814e0c8:	b2db      	uxtb	r3, r3
}
 814e0ca:	4618      	mov	r0, r3
 814e0cc:	370c      	adds	r7, #12
 814e0ce:	46bd      	mov	sp, r7
 814e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e0d4:	4770      	bx	lr
 814e0d6:	bf00      	nop
 814e0d8:	10034f98 	.word	0x10034f98

0814e0dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e0dc:	b480      	push	{r7}
 814e0de:	b083      	sub	sp, #12
 814e0e0:	af00      	add	r7, sp, #0
 814e0e2:	4603      	mov	r3, r0
 814e0e4:	6039      	str	r1, [r7, #0]
 814e0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 814e0e8:	683b      	ldr	r3, [r7, #0]
 814e0ea:	2212      	movs	r2, #18
 814e0ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 814e0ee:	4b03      	ldr	r3, [pc, #12]	@ (814e0fc <USBD_FS_DeviceDescriptor+0x20>)
}
 814e0f0:	4618      	mov	r0, r3
 814e0f2:	370c      	adds	r7, #12
 814e0f4:	46bd      	mov	sp, r7
 814e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e0fa:	4770      	bx	lr
 814e0fc:	100321c8 	.word	0x100321c8

0814e100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e100:	b480      	push	{r7}
 814e102:	b083      	sub	sp, #12
 814e104:	af00      	add	r7, sp, #0
 814e106:	4603      	mov	r3, r0
 814e108:	6039      	str	r1, [r7, #0]
 814e10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 814e10c:	683b      	ldr	r3, [r7, #0]
 814e10e:	2204      	movs	r2, #4
 814e110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 814e112:	4b03      	ldr	r3, [pc, #12]	@ (814e120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 814e114:	4618      	mov	r0, r3
 814e116:	370c      	adds	r7, #12
 814e118:	46bd      	mov	sp, r7
 814e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e11e:	4770      	bx	lr
 814e120:	100321dc 	.word	0x100321dc

0814e124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e124:	b580      	push	{r7, lr}
 814e126:	b082      	sub	sp, #8
 814e128:	af00      	add	r7, sp, #0
 814e12a:	4603      	mov	r3, r0
 814e12c:	6039      	str	r1, [r7, #0]
 814e12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 814e130:	79fb      	ldrb	r3, [r7, #7]
 814e132:	2b00      	cmp	r3, #0
 814e134:	d105      	bne.n	814e142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 814e136:	683a      	ldr	r2, [r7, #0]
 814e138:	4907      	ldr	r1, [pc, #28]	@ (814e158 <USBD_FS_ProductStrDescriptor+0x34>)
 814e13a:	4808      	ldr	r0, [pc, #32]	@ (814e15c <USBD_FS_ProductStrDescriptor+0x38>)
 814e13c:	f7ff fd8a 	bl	814dc54 <USBD_GetString>
 814e140:	e004      	b.n	814e14c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 814e142:	683a      	ldr	r2, [r7, #0]
 814e144:	4904      	ldr	r1, [pc, #16]	@ (814e158 <USBD_FS_ProductStrDescriptor+0x34>)
 814e146:	4805      	ldr	r0, [pc, #20]	@ (814e15c <USBD_FS_ProductStrDescriptor+0x38>)
 814e148:	f7ff fd84 	bl	814dc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 814e14c:	4b02      	ldr	r3, [pc, #8]	@ (814e158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 814e14e:	4618      	mov	r0, r3
 814e150:	3708      	adds	r7, #8
 814e152:	46bd      	mov	sp, r7
 814e154:	bd80      	pop	{r7, pc}
 814e156:	bf00      	nop
 814e158:	10036278 	.word	0x10036278
 814e15c:	0814ea6c 	.word	0x0814ea6c

0814e160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e160:	b580      	push	{r7, lr}
 814e162:	b082      	sub	sp, #8
 814e164:	af00      	add	r7, sp, #0
 814e166:	4603      	mov	r3, r0
 814e168:	6039      	str	r1, [r7, #0]
 814e16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 814e16c:	683a      	ldr	r2, [r7, #0]
 814e16e:	4904      	ldr	r1, [pc, #16]	@ (814e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 814e170:	4804      	ldr	r0, [pc, #16]	@ (814e184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 814e172:	f7ff fd6f 	bl	814dc54 <USBD_GetString>
  return USBD_StrDesc;
 814e176:	4b02      	ldr	r3, [pc, #8]	@ (814e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 814e178:	4618      	mov	r0, r3
 814e17a:	3708      	adds	r7, #8
 814e17c:	46bd      	mov	sp, r7
 814e17e:	bd80      	pop	{r7, pc}
 814e180:	10036278 	.word	0x10036278
 814e184:	0814ea84 	.word	0x0814ea84

0814e188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e188:	b580      	push	{r7, lr}
 814e18a:	b082      	sub	sp, #8
 814e18c:	af00      	add	r7, sp, #0
 814e18e:	4603      	mov	r3, r0
 814e190:	6039      	str	r1, [r7, #0]
 814e192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 814e194:	683b      	ldr	r3, [r7, #0]
 814e196:	221a      	movs	r2, #26
 814e198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 814e19a:	f000 f843 	bl	814e224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 814e19e:	4b02      	ldr	r3, [pc, #8]	@ (814e1a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 814e1a0:	4618      	mov	r0, r3
 814e1a2:	3708      	adds	r7, #8
 814e1a4:	46bd      	mov	sp, r7
 814e1a6:	bd80      	pop	{r7, pc}
 814e1a8:	100321e0 	.word	0x100321e0

0814e1ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e1ac:	b580      	push	{r7, lr}
 814e1ae:	b082      	sub	sp, #8
 814e1b0:	af00      	add	r7, sp, #0
 814e1b2:	4603      	mov	r3, r0
 814e1b4:	6039      	str	r1, [r7, #0]
 814e1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 814e1b8:	79fb      	ldrb	r3, [r7, #7]
 814e1ba:	2b00      	cmp	r3, #0
 814e1bc:	d105      	bne.n	814e1ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 814e1be:	683a      	ldr	r2, [r7, #0]
 814e1c0:	4907      	ldr	r1, [pc, #28]	@ (814e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 814e1c2:	4808      	ldr	r0, [pc, #32]	@ (814e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 814e1c4:	f7ff fd46 	bl	814dc54 <USBD_GetString>
 814e1c8:	e004      	b.n	814e1d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 814e1ca:	683a      	ldr	r2, [r7, #0]
 814e1cc:	4904      	ldr	r1, [pc, #16]	@ (814e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 814e1ce:	4805      	ldr	r0, [pc, #20]	@ (814e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 814e1d0:	f7ff fd40 	bl	814dc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 814e1d4:	4b02      	ldr	r3, [pc, #8]	@ (814e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 814e1d6:	4618      	mov	r0, r3
 814e1d8:	3708      	adds	r7, #8
 814e1da:	46bd      	mov	sp, r7
 814e1dc:	bd80      	pop	{r7, pc}
 814e1de:	bf00      	nop
 814e1e0:	10036278 	.word	0x10036278
 814e1e4:	0814ea94 	.word	0x0814ea94

0814e1e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 814e1e8:	b580      	push	{r7, lr}
 814e1ea:	b082      	sub	sp, #8
 814e1ec:	af00      	add	r7, sp, #0
 814e1ee:	4603      	mov	r3, r0
 814e1f0:	6039      	str	r1, [r7, #0]
 814e1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 814e1f4:	79fb      	ldrb	r3, [r7, #7]
 814e1f6:	2b00      	cmp	r3, #0
 814e1f8:	d105      	bne.n	814e206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 814e1fa:	683a      	ldr	r2, [r7, #0]
 814e1fc:	4907      	ldr	r1, [pc, #28]	@ (814e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 814e1fe:	4808      	ldr	r0, [pc, #32]	@ (814e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 814e200:	f7ff fd28 	bl	814dc54 <USBD_GetString>
 814e204:	e004      	b.n	814e210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 814e206:	683a      	ldr	r2, [r7, #0]
 814e208:	4904      	ldr	r1, [pc, #16]	@ (814e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 814e20a:	4805      	ldr	r0, [pc, #20]	@ (814e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 814e20c:	f7ff fd22 	bl	814dc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 814e210:	4b02      	ldr	r3, [pc, #8]	@ (814e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 814e212:	4618      	mov	r0, r3
 814e214:	3708      	adds	r7, #8
 814e216:	46bd      	mov	sp, r7
 814e218:	bd80      	pop	{r7, pc}
 814e21a:	bf00      	nop
 814e21c:	10036278 	.word	0x10036278
 814e220:	0814eaa0 	.word	0x0814eaa0

0814e224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 814e224:	b580      	push	{r7, lr}
 814e226:	b084      	sub	sp, #16
 814e228:	af00      	add	r7, sp, #0

//  deviceserial0 = DEVICE_SERIAL0;
//  deviceserial1 = DEVICE_SERIALW1;
//  deviceserial2 = DEVICE_SERIAL2;

  deviceserial0 = 0xAA;//*(uint32_t *) DEVICE_ID1;
 814e22a:	23aa      	movs	r3, #170	@ 0xaa
 814e22c:	60fb      	str	r3, [r7, #12]
  deviceserial1 = 0xAA;//*(uint32_t *) DEVICE_ID2;
 814e22e:	23aa      	movs	r3, #170	@ 0xaa
 814e230:	60bb      	str	r3, [r7, #8]
  deviceserial2 = 0xAA;//*(uint32_t *) DEVICE_ID3;
 814e232:	23aa      	movs	r3, #170	@ 0xaa
 814e234:	607b      	str	r3, [r7, #4]

/* USER CODE END SerialNum */

  deviceserial0 += deviceserial2;
 814e236:	68fa      	ldr	r2, [r7, #12]
 814e238:	687b      	ldr	r3, [r7, #4]
 814e23a:	4413      	add	r3, r2
 814e23c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 814e23e:	68fb      	ldr	r3, [r7, #12]
 814e240:	2b00      	cmp	r3, #0
 814e242:	d009      	beq.n	814e258 <Get_SerialNum+0x34>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 814e244:	2208      	movs	r2, #8
 814e246:	4906      	ldr	r1, [pc, #24]	@ (814e260 <Get_SerialNum+0x3c>)
 814e248:	68f8      	ldr	r0, [r7, #12]
 814e24a:	f000 f80d 	bl	814e268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 814e24e:	2204      	movs	r2, #4
 814e250:	4904      	ldr	r1, [pc, #16]	@ (814e264 <Get_SerialNum+0x40>)
 814e252:	68b8      	ldr	r0, [r7, #8]
 814e254:	f000 f808 	bl	814e268 <IntToUnicode>
  }
}
 814e258:	bf00      	nop
 814e25a:	3710      	adds	r7, #16
 814e25c:	46bd      	mov	sp, r7
 814e25e:	bd80      	pop	{r7, pc}
 814e260:	100321e2 	.word	0x100321e2
 814e264:	100321f2 	.word	0x100321f2

0814e268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 814e268:	b480      	push	{r7}
 814e26a:	b087      	sub	sp, #28
 814e26c:	af00      	add	r7, sp, #0
 814e26e:	60f8      	str	r0, [r7, #12]
 814e270:	60b9      	str	r1, [r7, #8]
 814e272:	4613      	mov	r3, r2
 814e274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 814e276:	2300      	movs	r3, #0
 814e278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 814e27a:	2300      	movs	r3, #0
 814e27c:	75fb      	strb	r3, [r7, #23]
 814e27e:	e027      	b.n	814e2d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 814e280:	68fb      	ldr	r3, [r7, #12]
 814e282:	0f1b      	lsrs	r3, r3, #28
 814e284:	2b09      	cmp	r3, #9
 814e286:	d80b      	bhi.n	814e2a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 814e288:	68fb      	ldr	r3, [r7, #12]
 814e28a:	0f1b      	lsrs	r3, r3, #28
 814e28c:	b2da      	uxtb	r2, r3
 814e28e:	7dfb      	ldrb	r3, [r7, #23]
 814e290:	005b      	lsls	r3, r3, #1
 814e292:	4619      	mov	r1, r3
 814e294:	68bb      	ldr	r3, [r7, #8]
 814e296:	440b      	add	r3, r1
 814e298:	3230      	adds	r2, #48	@ 0x30
 814e29a:	b2d2      	uxtb	r2, r2
 814e29c:	701a      	strb	r2, [r3, #0]
 814e29e:	e00a      	b.n	814e2b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 814e2a0:	68fb      	ldr	r3, [r7, #12]
 814e2a2:	0f1b      	lsrs	r3, r3, #28
 814e2a4:	b2da      	uxtb	r2, r3
 814e2a6:	7dfb      	ldrb	r3, [r7, #23]
 814e2a8:	005b      	lsls	r3, r3, #1
 814e2aa:	4619      	mov	r1, r3
 814e2ac:	68bb      	ldr	r3, [r7, #8]
 814e2ae:	440b      	add	r3, r1
 814e2b0:	3237      	adds	r2, #55	@ 0x37
 814e2b2:	b2d2      	uxtb	r2, r2
 814e2b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 814e2b6:	68fb      	ldr	r3, [r7, #12]
 814e2b8:	011b      	lsls	r3, r3, #4
 814e2ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 814e2bc:	7dfb      	ldrb	r3, [r7, #23]
 814e2be:	005b      	lsls	r3, r3, #1
 814e2c0:	3301      	adds	r3, #1
 814e2c2:	68ba      	ldr	r2, [r7, #8]
 814e2c4:	4413      	add	r3, r2
 814e2c6:	2200      	movs	r2, #0
 814e2c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 814e2ca:	7dfb      	ldrb	r3, [r7, #23]
 814e2cc:	3301      	adds	r3, #1
 814e2ce:	75fb      	strb	r3, [r7, #23]
 814e2d0:	7dfa      	ldrb	r2, [r7, #23]
 814e2d2:	79fb      	ldrb	r3, [r7, #7]
 814e2d4:	429a      	cmp	r2, r3
 814e2d6:	d3d3      	bcc.n	814e280 <IntToUnicode+0x18>
  }
}
 814e2d8:	bf00      	nop
 814e2da:	bf00      	nop
 814e2dc:	371c      	adds	r7, #28
 814e2de:	46bd      	mov	sp, r7
 814e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e2e4:	4770      	bx	lr
	...

0814e2e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 814e2e8:	b580      	push	{r7, lr}
 814e2ea:	b0ba      	sub	sp, #232	@ 0xe8
 814e2ec:	af00      	add	r7, sp, #0
 814e2ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 814e2f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 814e2f4:	2200      	movs	r2, #0
 814e2f6:	601a      	str	r2, [r3, #0]
 814e2f8:	605a      	str	r2, [r3, #4]
 814e2fa:	609a      	str	r2, [r3, #8]
 814e2fc:	60da      	str	r2, [r3, #12]
 814e2fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 814e300:	f107 0310 	add.w	r3, r7, #16
 814e304:	22c0      	movs	r2, #192	@ 0xc0
 814e306:	2100      	movs	r1, #0
 814e308:	4618      	mov	r0, r3
 814e30a:	f000 fb35 	bl	814e978 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 814e30e:	687b      	ldr	r3, [r7, #4]
 814e310:	681b      	ldr	r3, [r3, #0]
 814e312:	4a34      	ldr	r2, [pc, #208]	@ (814e3e4 <HAL_PCD_MspInit+0xfc>)
 814e314:	4293      	cmp	r3, r2
 814e316:	d160      	bne.n	814e3da <HAL_PCD_MspInit+0xf2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 814e318:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 814e31c:	f04f 0300 	mov.w	r3, #0
 814e320:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 814e324:	2305      	movs	r3, #5
 814e326:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 814e328:	2330      	movs	r3, #48	@ 0x30
 814e32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 814e32c:	2302      	movs	r3, #2
 814e32e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 5;
 814e330:	2305      	movs	r3, #5
 814e332:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 814e334:	2304      	movs	r3, #4
 814e336:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 814e338:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 814e33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 814e33e:	2300      	movs	r3, #0
 814e340:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 814e342:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 814e346:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 814e34a:	f107 0310 	add.w	r3, r7, #16
 814e34e:	4618      	mov	r0, r3
 814e350:	f7f7 fc44 	bl	8145bdc <HAL_RCCEx_PeriphCLKConfig>
 814e354:	4603      	mov	r3, r0
 814e356:	2b00      	cmp	r3, #0
 814e358:	d001      	beq.n	814e35e <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 814e35a:	f7f3 ff2f 	bl	81421bc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 814e35e:	f7f7 fa29 	bl	81457b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 814e362:	4b21      	ldr	r3, [pc, #132]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 814e368:	4a1f      	ldr	r2, [pc, #124]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e36a:	f043 0301 	orr.w	r3, r3, #1
 814e36e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 814e372:	4b1d      	ldr	r3, [pc, #116]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 814e378:	f003 0301 	and.w	r3, r3, #1
 814e37c:	60fb      	str	r3, [r7, #12]
 814e37e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 814e380:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 814e384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 814e388:	2302      	movs	r3, #2
 814e38a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 814e38e:	2300      	movs	r3, #0
 814e390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 814e394:	2303      	movs	r3, #3
 814e396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 814e39a:	230a      	movs	r3, #10
 814e39c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 814e3a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 814e3a4:	4619      	mov	r1, r3
 814e3a6:	4811      	ldr	r0, [pc, #68]	@ (814e3ec <HAL_PCD_MspInit+0x104>)
 814e3a8:	f7f4 fbea 	bl	8142b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 814e3ac:	4b0e      	ldr	r3, [pc, #56]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e3ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 814e3b2:	4a0d      	ldr	r2, [pc, #52]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e3b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 814e3b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 814e3bc:	4b0a      	ldr	r3, [pc, #40]	@ (814e3e8 <HAL_PCD_MspInit+0x100>)
 814e3be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 814e3c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 814e3c6:	60bb      	str	r3, [r7, #8]
 814e3c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 814e3ca:	2200      	movs	r2, #0
 814e3cc:	2100      	movs	r1, #0
 814e3ce:	2065      	movs	r0, #101	@ 0x65
 814e3d0:	f7f4 fbae 	bl	8142b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 814e3d4:	2065      	movs	r0, #101	@ 0x65
 814e3d6:	f7f4 fbc5 	bl	8142b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 814e3da:	bf00      	nop
 814e3dc:	37e8      	adds	r7, #232	@ 0xe8
 814e3de:	46bd      	mov	sp, r7
 814e3e0:	bd80      	pop	{r7, pc}
 814e3e2:	bf00      	nop
 814e3e4:	40080000 	.word	0x40080000
 814e3e8:	58024400 	.word	0x58024400
 814e3ec:	58020000 	.word	0x58020000

0814e3f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e3f0:	b580      	push	{r7, lr}
 814e3f2:	b082      	sub	sp, #8
 814e3f4:	af00      	add	r7, sp, #0
 814e3f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 814e3f8:	687b      	ldr	r3, [r7, #4]
 814e3fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 814e3fe:	687b      	ldr	r3, [r7, #4]
 814e400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 814e404:	4619      	mov	r1, r3
 814e406:	4610      	mov	r0, r2
 814e408:	f7fe fa97 	bl	814c93a <USBD_LL_SetupStage>
}
 814e40c:	bf00      	nop
 814e40e:	3708      	adds	r7, #8
 814e410:	46bd      	mov	sp, r7
 814e412:	bd80      	pop	{r7, pc}

0814e414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e414:	b580      	push	{r7, lr}
 814e416:	b082      	sub	sp, #8
 814e418:	af00      	add	r7, sp, #0
 814e41a:	6078      	str	r0, [r7, #4]
 814e41c:	460b      	mov	r3, r1
 814e41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 814e420:	687b      	ldr	r3, [r7, #4]
 814e422:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 814e426:	78fa      	ldrb	r2, [r7, #3]
 814e428:	6879      	ldr	r1, [r7, #4]
 814e42a:	4613      	mov	r3, r2
 814e42c:	00db      	lsls	r3, r3, #3
 814e42e:	4413      	add	r3, r2
 814e430:	009b      	lsls	r3, r3, #2
 814e432:	440b      	add	r3, r1
 814e434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 814e438:	681a      	ldr	r2, [r3, #0]
 814e43a:	78fb      	ldrb	r3, [r7, #3]
 814e43c:	4619      	mov	r1, r3
 814e43e:	f7fe fad1 	bl	814c9e4 <USBD_LL_DataOutStage>
}
 814e442:	bf00      	nop
 814e444:	3708      	adds	r7, #8
 814e446:	46bd      	mov	sp, r7
 814e448:	bd80      	pop	{r7, pc}

0814e44a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e44a:	b580      	push	{r7, lr}
 814e44c:	b082      	sub	sp, #8
 814e44e:	af00      	add	r7, sp, #0
 814e450:	6078      	str	r0, [r7, #4]
 814e452:	460b      	mov	r3, r1
 814e454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 814e456:	687b      	ldr	r3, [r7, #4]
 814e458:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 814e45c:	78fa      	ldrb	r2, [r7, #3]
 814e45e:	6879      	ldr	r1, [r7, #4]
 814e460:	4613      	mov	r3, r2
 814e462:	00db      	lsls	r3, r3, #3
 814e464:	4413      	add	r3, r2
 814e466:	009b      	lsls	r3, r3, #2
 814e468:	440b      	add	r3, r1
 814e46a:	3320      	adds	r3, #32
 814e46c:	681a      	ldr	r2, [r3, #0]
 814e46e:	78fb      	ldrb	r3, [r7, #3]
 814e470:	4619      	mov	r1, r3
 814e472:	f7fe fb6a 	bl	814cb4a <USBD_LL_DataInStage>
}
 814e476:	bf00      	nop
 814e478:	3708      	adds	r7, #8
 814e47a:	46bd      	mov	sp, r7
 814e47c:	bd80      	pop	{r7, pc}

0814e47e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e47e:	b580      	push	{r7, lr}
 814e480:	b082      	sub	sp, #8
 814e482:	af00      	add	r7, sp, #0
 814e484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 814e486:	687b      	ldr	r3, [r7, #4]
 814e488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e48c:	4618      	mov	r0, r3
 814e48e:	f7fe fca4 	bl	814cdda <USBD_LL_SOF>
}
 814e492:	bf00      	nop
 814e494:	3708      	adds	r7, #8
 814e496:	46bd      	mov	sp, r7
 814e498:	bd80      	pop	{r7, pc}

0814e49a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e49a:	b580      	push	{r7, lr}
 814e49c:	b084      	sub	sp, #16
 814e49e:	af00      	add	r7, sp, #0
 814e4a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 814e4a2:	2301      	movs	r3, #1
 814e4a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 814e4a6:	687b      	ldr	r3, [r7, #4]
 814e4a8:	79db      	ldrb	r3, [r3, #7]
 814e4aa:	2b00      	cmp	r3, #0
 814e4ac:	d102      	bne.n	814e4b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 814e4ae:	2300      	movs	r3, #0
 814e4b0:	73fb      	strb	r3, [r7, #15]
 814e4b2:	e008      	b.n	814e4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 814e4b4:	687b      	ldr	r3, [r7, #4]
 814e4b6:	79db      	ldrb	r3, [r3, #7]
 814e4b8:	2b02      	cmp	r3, #2
 814e4ba:	d102      	bne.n	814e4c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 814e4bc:	2301      	movs	r3, #1
 814e4be:	73fb      	strb	r3, [r7, #15]
 814e4c0:	e001      	b.n	814e4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 814e4c2:	f7f3 fe7b 	bl	81421bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 814e4c6:	687b      	ldr	r3, [r7, #4]
 814e4c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e4cc:	7bfa      	ldrb	r2, [r7, #15]
 814e4ce:	4611      	mov	r1, r2
 814e4d0:	4618      	mov	r0, r3
 814e4d2:	f7fe fc3e 	bl	814cd52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 814e4d6:	687b      	ldr	r3, [r7, #4]
 814e4d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e4dc:	4618      	mov	r0, r3
 814e4de:	f7fe fbe6 	bl	814ccae <USBD_LL_Reset>
}
 814e4e2:	bf00      	nop
 814e4e4:	3710      	adds	r7, #16
 814e4e6:	46bd      	mov	sp, r7
 814e4e8:	bd80      	pop	{r7, pc}
	...

0814e4ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e4ec:	b580      	push	{r7, lr}
 814e4ee:	b082      	sub	sp, #8
 814e4f0:	af00      	add	r7, sp, #0
 814e4f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 814e4f4:	687b      	ldr	r3, [r7, #4]
 814e4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e4fa:	4618      	mov	r0, r3
 814e4fc:	f7fe fc39 	bl	814cd72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 814e500:	687b      	ldr	r3, [r7, #4]
 814e502:	681b      	ldr	r3, [r3, #0]
 814e504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 814e508:	681b      	ldr	r3, [r3, #0]
 814e50a:	687a      	ldr	r2, [r7, #4]
 814e50c:	6812      	ldr	r2, [r2, #0]
 814e50e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 814e512:	f043 0301 	orr.w	r3, r3, #1
 814e516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 814e518:	687b      	ldr	r3, [r7, #4]
 814e51a:	7adb      	ldrb	r3, [r3, #11]
 814e51c:	2b00      	cmp	r3, #0
 814e51e:	d005      	beq.n	814e52c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 814e520:	4b04      	ldr	r3, [pc, #16]	@ (814e534 <HAL_PCD_SuspendCallback+0x48>)
 814e522:	691b      	ldr	r3, [r3, #16]
 814e524:	4a03      	ldr	r2, [pc, #12]	@ (814e534 <HAL_PCD_SuspendCallback+0x48>)
 814e526:	f043 0306 	orr.w	r3, r3, #6
 814e52a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 814e52c:	bf00      	nop
 814e52e:	3708      	adds	r7, #8
 814e530:	46bd      	mov	sp, r7
 814e532:	bd80      	pop	{r7, pc}
 814e534:	e000ed00 	.word	0xe000ed00

0814e538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e538:	b580      	push	{r7, lr}
 814e53a:	b082      	sub	sp, #8
 814e53c:	af00      	add	r7, sp, #0
 814e53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 814e540:	687b      	ldr	r3, [r7, #4]
 814e542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e546:	4618      	mov	r0, r3
 814e548:	f7fe fc2f 	bl	814cdaa <USBD_LL_Resume>
}
 814e54c:	bf00      	nop
 814e54e:	3708      	adds	r7, #8
 814e550:	46bd      	mov	sp, r7
 814e552:	bd80      	pop	{r7, pc}

0814e554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e554:	b580      	push	{r7, lr}
 814e556:	b082      	sub	sp, #8
 814e558:	af00      	add	r7, sp, #0
 814e55a:	6078      	str	r0, [r7, #4]
 814e55c:	460b      	mov	r3, r1
 814e55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 814e560:	687b      	ldr	r3, [r7, #4]
 814e562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e566:	78fa      	ldrb	r2, [r7, #3]
 814e568:	4611      	mov	r1, r2
 814e56a:	4618      	mov	r0, r3
 814e56c:	f7fe fc87 	bl	814ce7e <USBD_LL_IsoOUTIncomplete>
}
 814e570:	bf00      	nop
 814e572:	3708      	adds	r7, #8
 814e574:	46bd      	mov	sp, r7
 814e576:	bd80      	pop	{r7, pc}

0814e578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e578:	b580      	push	{r7, lr}
 814e57a:	b082      	sub	sp, #8
 814e57c:	af00      	add	r7, sp, #0
 814e57e:	6078      	str	r0, [r7, #4]
 814e580:	460b      	mov	r3, r1
 814e582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 814e584:	687b      	ldr	r3, [r7, #4]
 814e586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e58a:	78fa      	ldrb	r2, [r7, #3]
 814e58c:	4611      	mov	r1, r2
 814e58e:	4618      	mov	r0, r3
 814e590:	f7fe fc43 	bl	814ce1a <USBD_LL_IsoINIncomplete>
}
 814e594:	bf00      	nop
 814e596:	3708      	adds	r7, #8
 814e598:	46bd      	mov	sp, r7
 814e59a:	bd80      	pop	{r7, pc}

0814e59c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e59c:	b580      	push	{r7, lr}
 814e59e:	b082      	sub	sp, #8
 814e5a0:	af00      	add	r7, sp, #0
 814e5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 814e5a4:	687b      	ldr	r3, [r7, #4]
 814e5a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e5aa:	4618      	mov	r0, r3
 814e5ac:	f7fe fc99 	bl	814cee2 <USBD_LL_DevConnected>
}
 814e5b0:	bf00      	nop
 814e5b2:	3708      	adds	r7, #8
 814e5b4:	46bd      	mov	sp, r7
 814e5b6:	bd80      	pop	{r7, pc}

0814e5b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 814e5b8:	b580      	push	{r7, lr}
 814e5ba:	b082      	sub	sp, #8
 814e5bc:	af00      	add	r7, sp, #0
 814e5be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 814e5c0:	687b      	ldr	r3, [r7, #4]
 814e5c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 814e5c6:	4618      	mov	r0, r3
 814e5c8:	f7fe fc96 	bl	814cef8 <USBD_LL_DevDisconnected>
}
 814e5cc:	bf00      	nop
 814e5ce:	3708      	adds	r7, #8
 814e5d0:	46bd      	mov	sp, r7
 814e5d2:	bd80      	pop	{r7, pc}

0814e5d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 814e5d4:	b580      	push	{r7, lr}
 814e5d6:	b082      	sub	sp, #8
 814e5d8:	af00      	add	r7, sp, #0
 814e5da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 814e5dc:	687b      	ldr	r3, [r7, #4]
 814e5de:	781b      	ldrb	r3, [r3, #0]
 814e5e0:	2b00      	cmp	r3, #0
 814e5e2:	d13e      	bne.n	814e662 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 814e5e4:	4a21      	ldr	r2, [pc, #132]	@ (814e66c <USBD_LL_Init+0x98>)
 814e5e6:	687b      	ldr	r3, [r7, #4]
 814e5e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 814e5ec:	687b      	ldr	r3, [r7, #4]
 814e5ee:	4a1f      	ldr	r2, [pc, #124]	@ (814e66c <USBD_LL_Init+0x98>)
 814e5f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 814e5f4:	4b1d      	ldr	r3, [pc, #116]	@ (814e66c <USBD_LL_Init+0x98>)
 814e5f6:	4a1e      	ldr	r2, [pc, #120]	@ (814e670 <USBD_LL_Init+0x9c>)
 814e5f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 814e5fa:	4b1c      	ldr	r3, [pc, #112]	@ (814e66c <USBD_LL_Init+0x98>)
 814e5fc:	2209      	movs	r2, #9
 814e5fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 814e600:	4b1a      	ldr	r3, [pc, #104]	@ (814e66c <USBD_LL_Init+0x98>)
 814e602:	2202      	movs	r2, #2
 814e604:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 814e606:	4b19      	ldr	r3, [pc, #100]	@ (814e66c <USBD_LL_Init+0x98>)
 814e608:	2201      	movs	r2, #1
 814e60a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 814e60c:	4b17      	ldr	r3, [pc, #92]	@ (814e66c <USBD_LL_Init+0x98>)
 814e60e:	2202      	movs	r2, #2
 814e610:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 814e612:	4b16      	ldr	r3, [pc, #88]	@ (814e66c <USBD_LL_Init+0x98>)
 814e614:	2200      	movs	r2, #0
 814e616:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 814e618:	4b14      	ldr	r3, [pc, #80]	@ (814e66c <USBD_LL_Init+0x98>)
 814e61a:	2200      	movs	r2, #0
 814e61c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 814e61e:	4b13      	ldr	r3, [pc, #76]	@ (814e66c <USBD_LL_Init+0x98>)
 814e620:	2200      	movs	r2, #0
 814e622:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 814e624:	4b11      	ldr	r3, [pc, #68]	@ (814e66c <USBD_LL_Init+0x98>)
 814e626:	2200      	movs	r2, #0
 814e628:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 814e62a:	4b10      	ldr	r3, [pc, #64]	@ (814e66c <USBD_LL_Init+0x98>)
 814e62c:	2200      	movs	r2, #0
 814e62e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 814e630:	4b0e      	ldr	r3, [pc, #56]	@ (814e66c <USBD_LL_Init+0x98>)
 814e632:	2200      	movs	r2, #0
 814e634:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 814e636:	480d      	ldr	r0, [pc, #52]	@ (814e66c <USBD_LL_Init+0x98>)
 814e638:	f7f5 fe1c 	bl	8144274 <HAL_PCD_Init>
 814e63c:	4603      	mov	r3, r0
 814e63e:	2b00      	cmp	r3, #0
 814e640:	d001      	beq.n	814e646 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 814e642:	f7f3 fdbb 	bl	81421bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 814e646:	2180      	movs	r1, #128	@ 0x80
 814e648:	4808      	ldr	r0, [pc, #32]	@ (814e66c <USBD_LL_Init+0x98>)
 814e64a:	f7f7 f872 	bl	8145732 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 814e64e:	2240      	movs	r2, #64	@ 0x40
 814e650:	2100      	movs	r1, #0
 814e652:	4806      	ldr	r0, [pc, #24]	@ (814e66c <USBD_LL_Init+0x98>)
 814e654:	f7f7 f826 	bl	81456a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 814e658:	2280      	movs	r2, #128	@ 0x80
 814e65a:	2101      	movs	r1, #1
 814e65c:	4803      	ldr	r0, [pc, #12]	@ (814e66c <USBD_LL_Init+0x98>)
 814e65e:	f7f7 f821 	bl	81456a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 814e662:	2300      	movs	r3, #0
}
 814e664:	4618      	mov	r0, r3
 814e666:	3708      	adds	r7, #8
 814e668:	46bd      	mov	sp, r7
 814e66a:	bd80      	pop	{r7, pc}
 814e66c:	10036478 	.word	0x10036478
 814e670:	40080000 	.word	0x40080000

0814e674 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 814e674:	b580      	push	{r7, lr}
 814e676:	b084      	sub	sp, #16
 814e678:	af00      	add	r7, sp, #0
 814e67a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e67c:	2300      	movs	r3, #0
 814e67e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e680:	2300      	movs	r3, #0
 814e682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 814e684:	687b      	ldr	r3, [r7, #4]
 814e686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e68a:	4618      	mov	r0, r3
 814e68c:	f7f5 fefe 	bl	814448c <HAL_PCD_Start>
 814e690:	4603      	mov	r3, r0
 814e692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e694:	7bfb      	ldrb	r3, [r7, #15]
 814e696:	4618      	mov	r0, r3
 814e698:	f000 f942 	bl	814e920 <USBD_Get_USB_Status>
 814e69c:	4603      	mov	r3, r0
 814e69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 814e6a2:	4618      	mov	r0, r3
 814e6a4:	3710      	adds	r7, #16
 814e6a6:	46bd      	mov	sp, r7
 814e6a8:	bd80      	pop	{r7, pc}

0814e6aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 814e6aa:	b580      	push	{r7, lr}
 814e6ac:	b084      	sub	sp, #16
 814e6ae:	af00      	add	r7, sp, #0
 814e6b0:	6078      	str	r0, [r7, #4]
 814e6b2:	4608      	mov	r0, r1
 814e6b4:	4611      	mov	r1, r2
 814e6b6:	461a      	mov	r2, r3
 814e6b8:	4603      	mov	r3, r0
 814e6ba:	70fb      	strb	r3, [r7, #3]
 814e6bc:	460b      	mov	r3, r1
 814e6be:	70bb      	strb	r3, [r7, #2]
 814e6c0:	4613      	mov	r3, r2
 814e6c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e6c4:	2300      	movs	r3, #0
 814e6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e6c8:	2300      	movs	r3, #0
 814e6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 814e6cc:	687b      	ldr	r3, [r7, #4]
 814e6ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 814e6d2:	78bb      	ldrb	r3, [r7, #2]
 814e6d4:	883a      	ldrh	r2, [r7, #0]
 814e6d6:	78f9      	ldrb	r1, [r7, #3]
 814e6d8:	f7f6 fbff 	bl	8144eda <HAL_PCD_EP_Open>
 814e6dc:	4603      	mov	r3, r0
 814e6de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e6e0:	7bfb      	ldrb	r3, [r7, #15]
 814e6e2:	4618      	mov	r0, r3
 814e6e4:	f000 f91c 	bl	814e920 <USBD_Get_USB_Status>
 814e6e8:	4603      	mov	r3, r0
 814e6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 814e6ee:	4618      	mov	r0, r3
 814e6f0:	3710      	adds	r7, #16
 814e6f2:	46bd      	mov	sp, r7
 814e6f4:	bd80      	pop	{r7, pc}

0814e6f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 814e6f6:	b580      	push	{r7, lr}
 814e6f8:	b084      	sub	sp, #16
 814e6fa:	af00      	add	r7, sp, #0
 814e6fc:	6078      	str	r0, [r7, #4]
 814e6fe:	460b      	mov	r3, r1
 814e700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e702:	2300      	movs	r3, #0
 814e704:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e706:	2300      	movs	r3, #0
 814e708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 814e70a:	687b      	ldr	r3, [r7, #4]
 814e70c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e710:	78fa      	ldrb	r2, [r7, #3]
 814e712:	4611      	mov	r1, r2
 814e714:	4618      	mov	r0, r3
 814e716:	f7f6 fc4a 	bl	8144fae <HAL_PCD_EP_Close>
 814e71a:	4603      	mov	r3, r0
 814e71c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e71e:	7bfb      	ldrb	r3, [r7, #15]
 814e720:	4618      	mov	r0, r3
 814e722:	f000 f8fd 	bl	814e920 <USBD_Get_USB_Status>
 814e726:	4603      	mov	r3, r0
 814e728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e72a:	7bbb      	ldrb	r3, [r7, #14]
}
 814e72c:	4618      	mov	r0, r3
 814e72e:	3710      	adds	r7, #16
 814e730:	46bd      	mov	sp, r7
 814e732:	bd80      	pop	{r7, pc}

0814e734 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 814e734:	b580      	push	{r7, lr}
 814e736:	b084      	sub	sp, #16
 814e738:	af00      	add	r7, sp, #0
 814e73a:	6078      	str	r0, [r7, #4]
 814e73c:	460b      	mov	r3, r1
 814e73e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e740:	2300      	movs	r3, #0
 814e742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e744:	2300      	movs	r3, #0
 814e746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 814e748:	687b      	ldr	r3, [r7, #4]
 814e74a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e74e:	78fa      	ldrb	r2, [r7, #3]
 814e750:	4611      	mov	r1, r2
 814e752:	4618      	mov	r0, r3
 814e754:	f7f6 fd02 	bl	814515c <HAL_PCD_EP_SetStall>
 814e758:	4603      	mov	r3, r0
 814e75a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e75c:	7bfb      	ldrb	r3, [r7, #15]
 814e75e:	4618      	mov	r0, r3
 814e760:	f000 f8de 	bl	814e920 <USBD_Get_USB_Status>
 814e764:	4603      	mov	r3, r0
 814e766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e768:	7bbb      	ldrb	r3, [r7, #14]
}
 814e76a:	4618      	mov	r0, r3
 814e76c:	3710      	adds	r7, #16
 814e76e:	46bd      	mov	sp, r7
 814e770:	bd80      	pop	{r7, pc}

0814e772 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 814e772:	b580      	push	{r7, lr}
 814e774:	b084      	sub	sp, #16
 814e776:	af00      	add	r7, sp, #0
 814e778:	6078      	str	r0, [r7, #4]
 814e77a:	460b      	mov	r3, r1
 814e77c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e77e:	2300      	movs	r3, #0
 814e780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e782:	2300      	movs	r3, #0
 814e784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 814e786:	687b      	ldr	r3, [r7, #4]
 814e788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e78c:	78fa      	ldrb	r2, [r7, #3]
 814e78e:	4611      	mov	r1, r2
 814e790:	4618      	mov	r0, r3
 814e792:	f7f6 fd46 	bl	8145222 <HAL_PCD_EP_ClrStall>
 814e796:	4603      	mov	r3, r0
 814e798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e79a:	7bfb      	ldrb	r3, [r7, #15]
 814e79c:	4618      	mov	r0, r3
 814e79e:	f000 f8bf 	bl	814e920 <USBD_Get_USB_Status>
 814e7a2:	4603      	mov	r3, r0
 814e7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 814e7a8:	4618      	mov	r0, r3
 814e7aa:	3710      	adds	r7, #16
 814e7ac:	46bd      	mov	sp, r7
 814e7ae:	bd80      	pop	{r7, pc}

0814e7b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 814e7b0:	b480      	push	{r7}
 814e7b2:	b085      	sub	sp, #20
 814e7b4:	af00      	add	r7, sp, #0
 814e7b6:	6078      	str	r0, [r7, #4]
 814e7b8:	460b      	mov	r3, r1
 814e7ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 814e7bc:	687b      	ldr	r3, [r7, #4]
 814e7be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e7c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 814e7c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 814e7c8:	2b00      	cmp	r3, #0
 814e7ca:	da0b      	bge.n	814e7e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 814e7cc:	78fb      	ldrb	r3, [r7, #3]
 814e7ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 814e7d2:	68f9      	ldr	r1, [r7, #12]
 814e7d4:	4613      	mov	r3, r2
 814e7d6:	00db      	lsls	r3, r3, #3
 814e7d8:	4413      	add	r3, r2
 814e7da:	009b      	lsls	r3, r3, #2
 814e7dc:	440b      	add	r3, r1
 814e7de:	3316      	adds	r3, #22
 814e7e0:	781b      	ldrb	r3, [r3, #0]
 814e7e2:	e00b      	b.n	814e7fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 814e7e4:	78fb      	ldrb	r3, [r7, #3]
 814e7e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 814e7ea:	68f9      	ldr	r1, [r7, #12]
 814e7ec:	4613      	mov	r3, r2
 814e7ee:	00db      	lsls	r3, r3, #3
 814e7f0:	4413      	add	r3, r2
 814e7f2:	009b      	lsls	r3, r3, #2
 814e7f4:	440b      	add	r3, r1
 814e7f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 814e7fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 814e7fc:	4618      	mov	r0, r3
 814e7fe:	3714      	adds	r7, #20
 814e800:	46bd      	mov	sp, r7
 814e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e806:	4770      	bx	lr

0814e808 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 814e808:	b580      	push	{r7, lr}
 814e80a:	b084      	sub	sp, #16
 814e80c:	af00      	add	r7, sp, #0
 814e80e:	6078      	str	r0, [r7, #4]
 814e810:	460b      	mov	r3, r1
 814e812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e814:	2300      	movs	r3, #0
 814e816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e818:	2300      	movs	r3, #0
 814e81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 814e81c:	687b      	ldr	r3, [r7, #4]
 814e81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e822:	78fa      	ldrb	r2, [r7, #3]
 814e824:	4611      	mov	r1, r2
 814e826:	4618      	mov	r0, r3
 814e828:	f7f6 fb33 	bl	8144e92 <HAL_PCD_SetAddress>
 814e82c:	4603      	mov	r3, r0
 814e82e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e830:	7bfb      	ldrb	r3, [r7, #15]
 814e832:	4618      	mov	r0, r3
 814e834:	f000 f874 	bl	814e920 <USBD_Get_USB_Status>
 814e838:	4603      	mov	r3, r0
 814e83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 814e83c:	7bbb      	ldrb	r3, [r7, #14]
}
 814e83e:	4618      	mov	r0, r3
 814e840:	3710      	adds	r7, #16
 814e842:	46bd      	mov	sp, r7
 814e844:	bd80      	pop	{r7, pc}

0814e846 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 814e846:	b580      	push	{r7, lr}
 814e848:	b086      	sub	sp, #24
 814e84a:	af00      	add	r7, sp, #0
 814e84c:	60f8      	str	r0, [r7, #12]
 814e84e:	607a      	str	r2, [r7, #4]
 814e850:	603b      	str	r3, [r7, #0]
 814e852:	460b      	mov	r3, r1
 814e854:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e856:	2300      	movs	r3, #0
 814e858:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e85a:	2300      	movs	r3, #0
 814e85c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 814e85e:	68fb      	ldr	r3, [r7, #12]
 814e860:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 814e864:	7af9      	ldrb	r1, [r7, #11]
 814e866:	683b      	ldr	r3, [r7, #0]
 814e868:	687a      	ldr	r2, [r7, #4]
 814e86a:	f7f6 fc3d 	bl	81450e8 <HAL_PCD_EP_Transmit>
 814e86e:	4603      	mov	r3, r0
 814e870:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e872:	7dfb      	ldrb	r3, [r7, #23]
 814e874:	4618      	mov	r0, r3
 814e876:	f000 f853 	bl	814e920 <USBD_Get_USB_Status>
 814e87a:	4603      	mov	r3, r0
 814e87c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 814e87e:	7dbb      	ldrb	r3, [r7, #22]
}
 814e880:	4618      	mov	r0, r3
 814e882:	3718      	adds	r7, #24
 814e884:	46bd      	mov	sp, r7
 814e886:	bd80      	pop	{r7, pc}

0814e888 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 814e888:	b580      	push	{r7, lr}
 814e88a:	b086      	sub	sp, #24
 814e88c:	af00      	add	r7, sp, #0
 814e88e:	60f8      	str	r0, [r7, #12]
 814e890:	607a      	str	r2, [r7, #4]
 814e892:	603b      	str	r3, [r7, #0]
 814e894:	460b      	mov	r3, r1
 814e896:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 814e898:	2300      	movs	r3, #0
 814e89a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e89c:	2300      	movs	r3, #0
 814e89e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 814e8a0:	68fb      	ldr	r3, [r7, #12]
 814e8a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 814e8a6:	7af9      	ldrb	r1, [r7, #11]
 814e8a8:	683b      	ldr	r3, [r7, #0]
 814e8aa:	687a      	ldr	r2, [r7, #4]
 814e8ac:	f7f6 fbc9 	bl	8145042 <HAL_PCD_EP_Receive>
 814e8b0:	4603      	mov	r3, r0
 814e8b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 814e8b4:	7dfb      	ldrb	r3, [r7, #23]
 814e8b6:	4618      	mov	r0, r3
 814e8b8:	f000 f832 	bl	814e920 <USBD_Get_USB_Status>
 814e8bc:	4603      	mov	r3, r0
 814e8be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 814e8c0:	7dbb      	ldrb	r3, [r7, #22]
}
 814e8c2:	4618      	mov	r0, r3
 814e8c4:	3718      	adds	r7, #24
 814e8c6:	46bd      	mov	sp, r7
 814e8c8:	bd80      	pop	{r7, pc}

0814e8ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 814e8ca:	b580      	push	{r7, lr}
 814e8cc:	b082      	sub	sp, #8
 814e8ce:	af00      	add	r7, sp, #0
 814e8d0:	6078      	str	r0, [r7, #4]
 814e8d2:	460b      	mov	r3, r1
 814e8d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 814e8d6:	687b      	ldr	r3, [r7, #4]
 814e8d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 814e8dc:	78fa      	ldrb	r2, [r7, #3]
 814e8de:	4611      	mov	r1, r2
 814e8e0:	4618      	mov	r0, r3
 814e8e2:	f7f6 fbe9 	bl	81450b8 <HAL_PCD_EP_GetRxCount>
 814e8e6:	4603      	mov	r3, r0
}
 814e8e8:	4618      	mov	r0, r3
 814e8ea:	3708      	adds	r7, #8
 814e8ec:	46bd      	mov	sp, r7
 814e8ee:	bd80      	pop	{r7, pc}

0814e8f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 814e8f0:	b480      	push	{r7}
 814e8f2:	b083      	sub	sp, #12
 814e8f4:	af00      	add	r7, sp, #0
 814e8f6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 814e8f8:	4b03      	ldr	r3, [pc, #12]	@ (814e908 <USBD_static_malloc+0x18>)
}
 814e8fa:	4618      	mov	r0, r3
 814e8fc:	370c      	adds	r7, #12
 814e8fe:	46bd      	mov	sp, r7
 814e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e904:	4770      	bx	lr
 814e906:	bf00      	nop
 814e908:	1003695c 	.word	0x1003695c

0814e90c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 814e90c:	b480      	push	{r7}
 814e90e:	b083      	sub	sp, #12
 814e910:	af00      	add	r7, sp, #0
 814e912:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 814e914:	bf00      	nop
 814e916:	370c      	adds	r7, #12
 814e918:	46bd      	mov	sp, r7
 814e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e91e:	4770      	bx	lr

0814e920 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 814e920:	b480      	push	{r7}
 814e922:	b085      	sub	sp, #20
 814e924:	af00      	add	r7, sp, #0
 814e926:	4603      	mov	r3, r0
 814e928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 814e92a:	2300      	movs	r3, #0
 814e92c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 814e92e:	79fb      	ldrb	r3, [r7, #7]
 814e930:	2b03      	cmp	r3, #3
 814e932:	d817      	bhi.n	814e964 <USBD_Get_USB_Status+0x44>
 814e934:	a201      	add	r2, pc, #4	@ (adr r2, 814e93c <USBD_Get_USB_Status+0x1c>)
 814e936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 814e93a:	bf00      	nop
 814e93c:	0814e94d 	.word	0x0814e94d
 814e940:	0814e953 	.word	0x0814e953
 814e944:	0814e959 	.word	0x0814e959
 814e948:	0814e95f 	.word	0x0814e95f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 814e94c:	2300      	movs	r3, #0
 814e94e:	73fb      	strb	r3, [r7, #15]
    break;
 814e950:	e00b      	b.n	814e96a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 814e952:	2303      	movs	r3, #3
 814e954:	73fb      	strb	r3, [r7, #15]
    break;
 814e956:	e008      	b.n	814e96a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 814e958:	2301      	movs	r3, #1
 814e95a:	73fb      	strb	r3, [r7, #15]
    break;
 814e95c:	e005      	b.n	814e96a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 814e95e:	2303      	movs	r3, #3
 814e960:	73fb      	strb	r3, [r7, #15]
    break;
 814e962:	e002      	b.n	814e96a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 814e964:	2303      	movs	r3, #3
 814e966:	73fb      	strb	r3, [r7, #15]
    break;
 814e968:	bf00      	nop
  }
  return usb_status;
 814e96a:	7bfb      	ldrb	r3, [r7, #15]
}
 814e96c:	4618      	mov	r0, r3
 814e96e:	3714      	adds	r7, #20
 814e970:	46bd      	mov	sp, r7
 814e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 814e976:	4770      	bx	lr

0814e978 <memset>:
 814e978:	4402      	add	r2, r0
 814e97a:	4603      	mov	r3, r0
 814e97c:	4293      	cmp	r3, r2
 814e97e:	d100      	bne.n	814e982 <memset+0xa>
 814e980:	4770      	bx	lr
 814e982:	f803 1b01 	strb.w	r1, [r3], #1
 814e986:	e7f9      	b.n	814e97c <memset+0x4>

0814e988 <strncpy>:
 814e988:	b510      	push	{r4, lr}
 814e98a:	3901      	subs	r1, #1
 814e98c:	4603      	mov	r3, r0
 814e98e:	b132      	cbz	r2, 814e99e <strncpy+0x16>
 814e990:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 814e994:	f803 4b01 	strb.w	r4, [r3], #1
 814e998:	3a01      	subs	r2, #1
 814e99a:	2c00      	cmp	r4, #0
 814e99c:	d1f7      	bne.n	814e98e <strncpy+0x6>
 814e99e:	441a      	add	r2, r3
 814e9a0:	2100      	movs	r1, #0
 814e9a2:	4293      	cmp	r3, r2
 814e9a4:	d100      	bne.n	814e9a8 <strncpy+0x20>
 814e9a6:	bd10      	pop	{r4, pc}
 814e9a8:	f803 1b01 	strb.w	r1, [r3], #1
 814e9ac:	e7f9      	b.n	814e9a2 <strncpy+0x1a>
	...

0814e9b0 <__libc_init_array>:
 814e9b0:	b570      	push	{r4, r5, r6, lr}
 814e9b2:	4d0d      	ldr	r5, [pc, #52]	@ (814e9e8 <__libc_init_array+0x38>)
 814e9b4:	4c0d      	ldr	r4, [pc, #52]	@ (814e9ec <__libc_init_array+0x3c>)
 814e9b6:	1b64      	subs	r4, r4, r5
 814e9b8:	10a4      	asrs	r4, r4, #2
 814e9ba:	2600      	movs	r6, #0
 814e9bc:	42a6      	cmp	r6, r4
 814e9be:	d109      	bne.n	814e9d4 <__libc_init_array+0x24>
 814e9c0:	4d0b      	ldr	r5, [pc, #44]	@ (814e9f0 <__libc_init_array+0x40>)
 814e9c2:	4c0c      	ldr	r4, [pc, #48]	@ (814e9f4 <__libc_init_array+0x44>)
 814e9c4:	f000 f826 	bl	814ea14 <_init>
 814e9c8:	1b64      	subs	r4, r4, r5
 814e9ca:	10a4      	asrs	r4, r4, #2
 814e9cc:	2600      	movs	r6, #0
 814e9ce:	42a6      	cmp	r6, r4
 814e9d0:	d105      	bne.n	814e9de <__libc_init_array+0x2e>
 814e9d2:	bd70      	pop	{r4, r5, r6, pc}
 814e9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 814e9d8:	4798      	blx	r3
 814e9da:	3601      	adds	r6, #1
 814e9dc:	e7ee      	b.n	814e9bc <__libc_init_array+0xc>
 814e9de:	f855 3b04 	ldr.w	r3, [r5], #4
 814e9e2:	4798      	blx	r3
 814e9e4:	3601      	adds	r6, #1
 814e9e6:	e7f2      	b.n	814e9ce <__libc_init_array+0x1e>
 814e9e8:	0814eb18 	.word	0x0814eb18
 814e9ec:	0814eb18 	.word	0x0814eb18
 814e9f0:	0814eb18 	.word	0x0814eb18
 814e9f4:	0814eb1c 	.word	0x0814eb1c

0814e9f8 <memcpy>:
 814e9f8:	440a      	add	r2, r1
 814e9fa:	4291      	cmp	r1, r2
 814e9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 814ea00:	d100      	bne.n	814ea04 <memcpy+0xc>
 814ea02:	4770      	bx	lr
 814ea04:	b510      	push	{r4, lr}
 814ea06:	f811 4b01 	ldrb.w	r4, [r1], #1
 814ea0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 814ea0e:	4291      	cmp	r1, r2
 814ea10:	d1f9      	bne.n	814ea06 <memcpy+0xe>
 814ea12:	bd10      	pop	{r4, pc}

0814ea14 <_init>:
 814ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 814ea16:	bf00      	nop
 814ea18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 814ea1a:	bc08      	pop	{r3}
 814ea1c:	469e      	mov	lr, r3
 814ea1e:	4770      	bx	lr

0814ea20 <_fini>:
 814ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 814ea22:	bf00      	nop
 814ea24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 814ea26:	bc08      	pop	{r3}
 814ea28:	469e      	mov	lr, r3
 814ea2a:	4770      	bx	lr
