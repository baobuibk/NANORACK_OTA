
FOTA_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fc4  08002fc4  00003fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fdc  08002fdc  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002fdc  08002fdc  00003fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fe4  08002fe4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe4  08002fe4  00003fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fe8  08002fe8  00003fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002fec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000068  08003054  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08003054  0000438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e246  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328f  00000000  00000000  000122de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00004a22  00000000  00000000  0001556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00019f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000956  00000000  00000000  0001a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e40  00000000  00000000  0001b116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010419  00000000  00000000  00042f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f20d1  00000000  00000000  0005336f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145440  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001278  00000000  00000000  00145484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001466fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002fac 	.word	0x08002fac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	08002fac 	.word	0x08002fac

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b988 	b.w	8000530 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	468e      	mov	lr, r1
 8000240:	4604      	mov	r4, r0
 8000242:	4688      	mov	r8, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d962      	bls.n	8000314 <__udivmoddi4+0xdc>
 800024e:	fab2 f682 	clz	r6, r2
 8000252:	b14e      	cbz	r6, 8000268 <__udivmoddi4+0x30>
 8000254:	f1c6 0320 	rsb	r3, r6, #32
 8000258:	fa01 f806 	lsl.w	r8, r1, r6
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	40b7      	lsls	r7, r6
 8000262:	ea43 0808 	orr.w	r8, r3, r8
 8000266:	40b4      	lsls	r4, r6
 8000268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026c:	fa1f fc87 	uxth.w	ip, r7
 8000270:	fbb8 f1fe 	udiv	r1, r8, lr
 8000274:	0c23      	lsrs	r3, r4, #16
 8000276:	fb0e 8811 	mls	r8, lr, r1, r8
 800027a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027e:	fb01 f20c 	mul.w	r2, r1, ip
 8000282:	429a      	cmp	r2, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x62>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f101 30ff 	add.w	r0, r1, #4294967295
 800028c:	f080 80ea 	bcs.w	8000464 <__udivmoddi4+0x22c>
 8000290:	429a      	cmp	r2, r3
 8000292:	f240 80e7 	bls.w	8000464 <__udivmoddi4+0x22c>
 8000296:	3902      	subs	r1, #2
 8000298:	443b      	add	r3, r7
 800029a:	1a9a      	subs	r2, r3, r2
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ae:	459c      	cmp	ip, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x8e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b8:	f080 80d6 	bcs.w	8000468 <__udivmoddi4+0x230>
 80002bc:	459c      	cmp	ip, r3
 80002be:	f240 80d3 	bls.w	8000468 <__udivmoddi4+0x230>
 80002c2:	443b      	add	r3, r7
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ca:	eba3 030c 	sub.w	r3, r3, ip
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa2>
 80002d2:	40f3      	lsrs	r3, r6
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xb6>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb0>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa2>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x14c>
 80002f6:	4573      	cmp	r3, lr
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xc8>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 8105 	bhi.w	800050a <__udivmoddi4+0x2d2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb6e 0203 	sbc.w	r2, lr, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4690      	mov	r8, r2
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e5      	beq.n	80002da <__udivmoddi4+0xa2>
 800030e:	e9c5 4800 	strd	r4, r8, [r5]
 8000312:	e7e2      	b.n	80002da <__udivmoddi4+0xa2>
 8000314:	2a00      	cmp	r2, #0
 8000316:	f000 8090 	beq.w	800043a <__udivmoddi4+0x202>
 800031a:	fab2 f682 	clz	r6, r2
 800031e:	2e00      	cmp	r6, #0
 8000320:	f040 80a4 	bne.w	800046c <__udivmoddi4+0x234>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800032c:	b280      	uxth	r0, r0
 800032e:	b2bc      	uxth	r4, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb2 fcfe 	udiv	ip, r2, lr
 8000336:	fb0e 221c 	mls	r2, lr, ip, r2
 800033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033e:	fb04 f20c 	mul.w	r2, r4, ip
 8000342:	429a      	cmp	r2, r3
 8000344:	d907      	bls.n	8000356 <__udivmoddi4+0x11e>
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	f10c 38ff 	add.w	r8, ip, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x11c>
 800034e:	429a      	cmp	r2, r3
 8000350:	f200 80e0 	bhi.w	8000514 <__udivmoddi4+0x2dc>
 8000354:	46c4      	mov	ip, r8
 8000356:	1a9b      	subs	r3, r3, r2
 8000358:	fbb3 f2fe 	udiv	r2, r3, lr
 800035c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000360:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000364:	fb02 f404 	mul.w	r4, r2, r4
 8000368:	429c      	cmp	r4, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x144>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x142>
 8000374:	429c      	cmp	r4, r3
 8000376:	f200 80ca 	bhi.w	800050e <__udivmoddi4+0x2d6>
 800037a:	4602      	mov	r2, r0
 800037c:	1b1b      	subs	r3, r3, r4
 800037e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x98>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa0e f401 	lsl.w	r4, lr, r1
 8000394:	fa20 f306 	lsr.w	r3, r0, r6
 8000398:	fa2e fe06 	lsr.w	lr, lr, r6
 800039c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	fa1f fc87 	uxth.w	ip, r7
 80003aa:	fbbe f0f9 	udiv	r0, lr, r9
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003bc:	45a6      	cmp	lr, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1a0>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ca:	f080 809c 	bcs.w	8000506 <__udivmoddi4+0x2ce>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8099 	bls.w	8000506 <__udivmoddi4+0x2ce>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	fa1f fe83 	uxth.w	lr, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1ce>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003fa:	f080 8082 	bcs.w	8000502 <__udivmoddi4+0x2ca>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d97f      	bls.n	8000502 <__udivmoddi4+0x2ca>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000412:	4564      	cmp	r4, ip
 8000414:	4673      	mov	r3, lr
 8000416:	46e1      	mov	r9, ip
 8000418:	d362      	bcc.n	80004e0 <__udivmoddi4+0x2a8>
 800041a:	d05f      	beq.n	80004dc <__udivmoddi4+0x2a4>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x1fe>
 800041e:	ebb8 0203 	subs.w	r2, r8, r3
 8000422:	eb64 0409 	sbc.w	r4, r4, r9
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	fa22 f301 	lsr.w	r3, r2, r1
 800042e:	431e      	orrs	r6, r3
 8000430:	40cc      	lsrs	r4, r1
 8000432:	e9c5 6400 	strd	r6, r4, [r5]
 8000436:	2100      	movs	r1, #0
 8000438:	e74f      	b.n	80002da <__udivmoddi4+0xa2>
 800043a:	fbb1 fcf2 	udiv	ip, r1, r2
 800043e:	0c01      	lsrs	r1, r0, #16
 8000440:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000444:	b280      	uxth	r0, r0
 8000446:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800044a:	463b      	mov	r3, r7
 800044c:	4638      	mov	r0, r7
 800044e:	463c      	mov	r4, r7
 8000450:	46b8      	mov	r8, r7
 8000452:	46be      	mov	lr, r7
 8000454:	2620      	movs	r6, #32
 8000456:	fbb1 f1f7 	udiv	r1, r1, r7
 800045a:	eba2 0208 	sub.w	r2, r2, r8
 800045e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000462:	e766      	b.n	8000332 <__udivmoddi4+0xfa>
 8000464:	4601      	mov	r1, r0
 8000466:	e718      	b.n	800029a <__udivmoddi4+0x62>
 8000468:	4610      	mov	r0, r2
 800046a:	e72c      	b.n	80002c6 <__udivmoddi4+0x8e>
 800046c:	f1c6 0220 	rsb	r2, r6, #32
 8000470:	fa2e f302 	lsr.w	r3, lr, r2
 8000474:	40b7      	lsls	r7, r6
 8000476:	40b1      	lsls	r1, r6
 8000478:	fa20 f202 	lsr.w	r2, r0, r2
 800047c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000480:	430a      	orrs	r2, r1
 8000482:	fbb3 f8fe 	udiv	r8, r3, lr
 8000486:	b2bc      	uxth	r4, r7
 8000488:	fb0e 3318 	mls	r3, lr, r8, r3
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb08 f904 	mul.w	r9, r8, r4
 8000496:	40b0      	lsls	r0, r6
 8000498:	4589      	cmp	r9, r1
 800049a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049e:	b280      	uxth	r0, r0
 80004a0:	d93e      	bls.n	8000520 <__udivmoddi4+0x2e8>
 80004a2:	1879      	adds	r1, r7, r1
 80004a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x276>
 80004aa:	4589      	cmp	r9, r1
 80004ac:	d81f      	bhi.n	80004ee <__udivmoddi4+0x2b6>
 80004ae:	eba1 0109 	sub.w	r1, r1, r9
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	b292      	uxth	r2, r2
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2e4>
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ce:	d2c4      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d2c2      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d4:	f1a9 0102 	sub.w	r1, r9, #2
 80004d8:	443a      	add	r2, r7
 80004da:	e7be      	b.n	800045a <__udivmoddi4+0x222>
 80004dc:	45f0      	cmp	r8, lr
 80004de:	d29d      	bcs.n	800041c <__udivmoddi4+0x1e4>
 80004e0:	ebbe 0302 	subs.w	r3, lr, r2
 80004e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	46e1      	mov	r9, ip
 80004ec:	e796      	b.n	800041c <__udivmoddi4+0x1e4>
 80004ee:	eba7 0909 	sub.w	r9, r7, r9
 80004f2:	4449      	add	r1, r9
 80004f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fc:	fb09 f804 	mul.w	r8, r9, r4
 8000500:	e7db      	b.n	80004ba <__udivmoddi4+0x282>
 8000502:	4673      	mov	r3, lr
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1ce>
 8000506:	4650      	mov	r0, sl
 8000508:	e766      	b.n	80003d8 <__udivmoddi4+0x1a0>
 800050a:	4608      	mov	r0, r1
 800050c:	e6fd      	b.n	800030a <__udivmoddi4+0xd2>
 800050e:	443b      	add	r3, r7
 8000510:	3a02      	subs	r2, #2
 8000512:	e733      	b.n	800037c <__udivmoddi4+0x144>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443b      	add	r3, r7
 800051a:	e71c      	b.n	8000356 <__udivmoddi4+0x11e>
 800051c:	4649      	mov	r1, r9
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x222>
 8000520:	eba1 0109 	sub.w	r1, r1, r9
 8000524:	46c4      	mov	ip, r8
 8000526:	fbb1 f9fe 	udiv	r9, r1, lr
 800052a:	fb09 f804 	mul.w	r8, r9, r4
 800052e:	e7c4      	b.n	80004ba <__udivmoddi4+0x282>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <Status_Led>:
		}, { &BL_UART_Fetch_Host_Command, (void*) 0, 10,        //call every 2mS
				0,                          //count from start
				true                        //is active
		}, };

static void Status_Led(void*) {
 8000534:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(BL_LED_GPIO_Port, BL_LED_Pin);
 8000536:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053a:	4802      	ldr	r0, [pc, #8]	@ (8000544 <Status_Led+0x10>)
 800053c:	f000 fe70 	bl	8001220 <HAL_GPIO_TogglePin>
	//USART2_send_string("Hello from bootloader\n\r");
}
 8000540:	bd08      	pop	{r3, pc}
 8000542:	bf00      	nop
 8000544:	40020400 	.word	0x40020400

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b500      	push	{lr}
 800054a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054c:	2230      	movs	r2, #48	@ 0x30
 800054e:	2100      	movs	r1, #0
 8000550:	a808      	add	r0, sp, #32
 8000552:	f002 fcf1 	bl	8002f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	2300      	movs	r3, #0
 8000558:	9303      	str	r3, [sp, #12]
 800055a:	9304      	str	r3, [sp, #16]
 800055c:	9305      	str	r3, [sp, #20]
 800055e:	9306      	str	r3, [sp, #24]
 8000560:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <SystemClock_Config+0x9c>)
 8000564:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000566:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800056a:	6411      	str	r1, [r2, #64]	@ 0x40
 800056c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800056e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000572:	9201      	str	r2, [sp, #4]
 8000574:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000576:	491c      	ldr	r1, [pc, #112]	@ (80005e8 <SystemClock_Config+0xa0>)
 8000578:	680a      	ldr	r2, [r1, #0]
 800057a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800057e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000582:	600a      	str	r2, [r1, #0]
 8000584:	680a      	ldr	r2, [r1, #0]
 8000586:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800058a:	9202      	str	r2, [sp, #8]
 800058c:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	2202      	movs	r2, #2
 8000590:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2101      	movs	r1, #1
 8000594:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2110      	movs	r1, #16
 8000598:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059e:	2308      	movs	r3, #8
 80005a0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005a2:	2350      	movs	r3, #80	@ 0x50
 80005a4:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a8:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	a808      	add	r0, sp, #32
 80005ac:	f000 feec 	bl	8001388 <HAL_RCC_OscConfig>
 80005b0:	b998      	cbnz	r0, 80005da <SystemClock_Config+0x92>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005ba:	2390      	movs	r3, #144	@ 0x90
 80005bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c8:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	2100      	movs	r1, #0
 80005cc:	a803      	add	r0, sp, #12
 80005ce:	f001 f94b 	bl	8001868 <HAL_RCC_ClockConfig>
 80005d2:	b920      	cbnz	r0, 80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
}
 80005d4:	b015      	add	sp, #84	@ 0x54
 80005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005da:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <SystemClock_Config+0x94>
 80005de:	b672      	cpsid	i
 80005e0:	e7fe      	b.n	80005e0 <SystemClock_Config+0x98>
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <main>:
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0b4      	sub	sp, #208	@ 0xd0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005f0:	2400      	movs	r4, #0
 80005f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80005f4:	9414      	str	r4, [sp, #80]	@ 0x50
 80005f6:	9415      	str	r4, [sp, #84]	@ 0x54
 80005f8:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_MPU_Disable();
 80005fa:	f000 fa3b 	bl	8000a74 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005fe:	2501      	movs	r5, #1
 8000600:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000604:	f88d 404d 	strb.w	r4, [sp, #77]	@ 0x4d
  MPU_InitStruct.BaseAddress = 0x0;
 8000608:	9414      	str	r4, [sp, #80]	@ 0x50
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800060a:	231f      	movs	r3, #31
 800060c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000610:	2387      	movs	r3, #135	@ 0x87
 8000612:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000616:	f88d 4056 	strb.w	r4, [sp, #86]	@ 0x56
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800061a:	f88d 4057 	strb.w	r4, [sp, #87]	@ 0x57
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800061e:	f88d 5058 	strb.w	r5, [sp, #88]	@ 0x58
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000622:	f88d 5059 	strb.w	r5, [sp, #89]	@ 0x59
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000626:	f88d 405a 	strb.w	r4, [sp, #90]	@ 0x5a
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800062a:	f88d 405b 	strb.w	r4, [sp, #91]	@ 0x5b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800062e:	a813      	add	r0, sp, #76	@ 0x4c
 8000630:	f000 fa3e 	bl	8000ab0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000634:	2004      	movs	r0, #4
 8000636:	f000 fa2b 	bl	8000a90 <HAL_MPU_Enable>
  HAL_Init();
 800063a:	f000 f98f 	bl	800095c <HAL_Init>
  SystemClock_Config();
 800063e:	f7ff ff83 	bl	8000548 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	9413      	str	r4, [sp, #76]	@ 0x4c
 8000644:	9414      	str	r4, [sp, #80]	@ 0x50
 8000646:	9415      	str	r4, [sp, #84]	@ 0x54
 8000648:	9416      	str	r4, [sp, #88]	@ 0x58
 800064a:	9417      	str	r4, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b63      	ldr	r3, [pc, #396]	@ (80007dc <main+0x1f0>)
 800064e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000650:	432a      	orrs	r2, r5
 8000652:	631a      	str	r2, [r3, #48]	@ 0x30
 8000654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000656:	402a      	ands	r2, r5
 8000658:	9202      	str	r2, [sp, #8]
 800065a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800065c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
 8000664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000666:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800066a:	9203      	str	r2, [sp, #12]
 800066c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000670:	f042 0204 	orr.w	r2, r2, #4
 8000674:	631a      	str	r2, [r3, #48]	@ 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000678:	f002 0204 	and.w	r2, r2, #4
 800067c:	9204      	str	r2, [sp, #16]
 800067e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000682:	f042 0202 	orr.w	r2, r2, #2
 8000686:	631a      	str	r2, [r3, #48]	@ 0x30
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	9305      	str	r3, [sp, #20]
 8000690:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000692:	4f53      	ldr	r7, [pc, #332]	@ (80007e0 <main+0x1f4>)
 8000694:	4622      	mov	r2, r4
 8000696:	2102      	movs	r1, #2
 8000698:	4638      	mov	r0, r7
 800069a:	f000 fdbb 	bl	8001214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BL_LED_GPIO_Port, BL_LED_Pin, GPIO_PIN_RESET);
 800069e:	4e51      	ldr	r6, [pc, #324]	@ (80007e4 <main+0x1f8>)
 80006a0:	4622      	mov	r2, r4
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	4630      	mov	r0, r6
 80006a8:	f000 fdb4 	bl	8001214 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80006ac:	2302      	movs	r3, #2
 80006ae:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80006b6:	a913      	add	r1, sp, #76	@ 0x4c
 80006b8:	4638      	mov	r0, r7
 80006ba:	f000 fcaf 	bl	800101c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BL_LED_Pin;
 80006be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(BL_LED_GPIO_Port, &GPIO_InitStruct);
 80006ca:	a913      	add	r1, sp, #76	@ 0x4c
 80006cc:	4630      	mov	r0, r6
 80006ce:	f000 fca5 	bl	800101c <HAL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006d2:	940c      	str	r4, [sp, #48]	@ 0x30
 80006d4:	940d      	str	r4, [sp, #52]	@ 0x34
 80006d6:	940e      	str	r4, [sp, #56]	@ 0x38
 80006d8:	940f      	str	r4, [sp, #60]	@ 0x3c
 80006da:	9410      	str	r4, [sp, #64]	@ 0x40
 80006dc:	9411      	str	r4, [sp, #68]	@ 0x44
 80006de:	9412      	str	r4, [sp, #72]	@ 0x48
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	9406      	str	r4, [sp, #24]
 80006e2:	9407      	str	r4, [sp, #28]
 80006e4:	9408      	str	r4, [sp, #32]
 80006e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80006e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80006ea:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	4621      	mov	r1, r4
 80006f0:	a814      	add	r0, sp, #80	@ 0x50
 80006f2:	f002 fc21 	bl	8002f38 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80006f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006fa:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fc:	a813      	add	r0, sp, #76	@ 0x4c
 80006fe:	f001 f96b 	bl	80019d8 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	2800      	cmp	r0, #0
 8000704:	d165      	bne.n	80007d2 <main+0x1e6>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <main+0x1f0>)
 8000708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800070a:	f042 0220 	orr.w	r2, r2, #32
 800070e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000712:	f002 0220 	and.w	r2, r2, #32
 8000716:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000718:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800071a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071c:	f042 0204 	orr.w	r2, r2, #4
 8000720:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800072a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800072c:	2580      	movs	r5, #128	@ 0x80
 800072e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000730:	f04f 0902 	mov.w	r9, #2
 8000734:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	f04f 0803 	mov.w	r8, #3
 800073c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000740:	2400      	movs	r4, #0
 8000742:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000744:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000746:	2708      	movs	r7, #8
 8000748:	970b      	str	r7, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	4e27      	ldr	r6, [pc, #156]	@ (80007e8 <main+0x1fc>)
 800074c:	a906      	add	r1, sp, #24
 800074e:	4630      	mov	r0, r6
 8000750:	f001 fc12 	bl	8001f78 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000754:	2340      	movs	r3, #64	@ 0x40
 8000756:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000758:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000760:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000762:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000764:	970b      	str	r7, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	a906      	add	r1, sp, #24
 8000768:	4630      	mov	r0, r6
 800076a:	f001 fc05 	bl	8001f78 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <main+0x200>)
 8000770:	68db      	ldr	r3, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <main+0x204>)
 8000774:	f883 4347 	strb.w	r4, [r3, #839]	@ 0x347
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000778:	609d      	str	r5, [r3, #8]
  USART_InitStruct.BaudRate = 115200;
 800077a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800077e:	930c      	str	r3, [sp, #48]	@ 0x30
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000780:	940d      	str	r4, [sp, #52]	@ 0x34
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000782:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000784:	940f      	str	r4, [sp, #60]	@ 0x3c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000786:	230c      	movs	r3, #12
 8000788:	9310      	str	r3, [sp, #64]	@ 0x40
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800078a:	9411      	str	r4, [sp, #68]	@ 0x44
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800078c:	9412      	str	r4, [sp, #72]	@ 0x48
  LL_USART_Init(USART6, &USART_InitStruct);
 800078e:	4d19      	ldr	r5, [pc, #100]	@ (80007f4 <main+0x208>)
 8000790:	a90c      	add	r1, sp, #48	@ 0x30
 8000792:	4628      	mov	r0, r5
 8000794:	f001 fe58 	bl	8002448 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000798:	686b      	ldr	r3, [r5, #4]
 800079a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800079e:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80007a0:	68ab      	ldr	r3, [r5, #8]
 80007a2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80007a6:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	602b      	str	r3, [r5, #0]
  hcrc.Instance = CRC;
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <main+0x20c>)
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <main+0x210>)
 80007b4:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007b6:	7104      	strb	r4, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007b8:	7144      	strb	r4, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ba:	6144      	str	r4, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007bc:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007be:	2301      	movs	r3, #1
 80007c0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c2:	f000 f9a1 	bl	8000b08 <HAL_CRC_Init>
 80007c6:	b930      	cbnz	r0, 80007d6 <main+0x1ea>
  USART6_init();
 80007c8:	f001 ff6a 	bl	80026a0 <USART6_init>
	  SchedulerRun();
 80007cc:	f002 fb90 	bl	8002ef0 <SchedulerRun>
  while (1)
 80007d0:	e7fc      	b.n	80007cc <main+0x1e0>
 80007d2:	b672      	cpsid	i
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x1e8>
 80007d6:	b672      	cpsid	i
 80007d8:	e7fe      	b.n	80007d8 <main+0x1ec>
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40022000 	.word	0x40022000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	40011400 	.word	0x40011400
 80007f8:	20000084 	.word	0x20000084
 80007fc:	40023000 	.word	0x40023000

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_MspInit+0x2c>)
 8000804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000806:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
 800080c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800081c:	645a      	str	r2, [r3, #68]	@ 0x44
 800081e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	b002      	add	sp, #8
 800082a:	4770      	bx	lr
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000830:	6802      	ldr	r2, [r0, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_CRC_MspInit+0x28>)
 8000834:	429a      	cmp	r2, r3
 8000836:	d000      	beq.n	800083a <HAL_CRC_MspInit+0xa>
 8000838:	4770      	bx	lr
{
 800083a:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800083c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000842:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000846:	631a      	str	r2, [r3, #48]	@ 0x30
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000852:	b002      	add	sp, #8
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023000 	.word	0x40023000

0800085c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler>

0800085e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler>

08000860 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler>

08000862 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler>

08000864 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler>

08000866 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 800086e:	f002 fb37 	bl	8002ee0 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f87f 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bd08      	pop	{r3, pc}

08000878 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	USART6_IRQ();
 800087a:	f001 feb9 	bl	80025f0 <USART6_IRQ>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800087e:	bd08      	pop	{r3, pc}

08000880 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4a03      	ldr	r2, [pc, #12]	@ (8000890 <SystemInit+0x10>)
 8000882:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000886:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000898:	f7ff fff2 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f002 fb41 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe91 	bl	80005ec <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008d8:	08002fec 	.word	0x08002fec
  ldr r2, =_sbss
 80008dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008e0:	2000038c 	.word	0x2000038c

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>

080008e6 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80008e6:	4770      	bx	lr

080008e8 <HAL_DeInit>:
{
 80008e8:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_DeInit+0x28>)
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80008f2:	2400      	movs	r4, #0
 80008f4:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80008f8:	625c      	str	r4, [r3, #36]	@ 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 80008fa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80008fc:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 80008fe:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000900:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8000902:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000904:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8000906:	f7ff ffee 	bl	80008e6 <HAL_MspDeInit>
}
 800090a:	4620      	mov	r0, r4
 800090c:	bd10      	pop	{r4, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b510      	push	{r4, lr}
 8000916:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <HAL_InitTick+0x3c>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000920:	fbb3 f3f2 	udiv	r3, r3, r2
 8000924:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_InitTick+0x40>)
 8000926:	6810      	ldr	r0, [r2, #0]
 8000928:	fbb0 f0f3 	udiv	r0, r0, r3
 800092c:	f000 f88e 	bl	8000a4c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000930:	2c0f      	cmp	r4, #15
 8000932:	d800      	bhi.n	8000936 <HAL_InitTick+0x22>
 8000934:	b108      	cbz	r0, 800093a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000936:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000938:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	2200      	movs	r2, #0
 800093c:	4621      	mov	r1, r4
 800093e:	f04f 30ff 	mov.w	r0, #4294967295
 8000942:	f000 f84f 	bl	80009e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <HAL_InitTick+0x44>)
 8000948:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800094a:	2000      	movs	r0, #0
 800094c:	e7f4      	b.n	8000938 <HAL_InitTick+0x24>
 800094e:	bf00      	nop
 8000950:	20000030 	.word	0x20000030
 8000954:	2000002c 	.word	0x2000002c
 8000958:	20000034 	.word	0x20000034

0800095c <HAL_Init>:
{
 800095c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f82e 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000964:	200f      	movs	r0, #15
 8000966:	f7ff ffd5 	bl	8000914 <HAL_InitTick>
  HAL_MspInit();
 800096a:	f7ff ff49 	bl	8000800 <HAL_MspInit>
}
 800096e:	2000      	movs	r0, #0
 8000970:	bd08      	pop	{r3, pc}
	...

08000974 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000974:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <HAL_IncTick+0x10>)
 8000976:	6811      	ldr	r1, [r2, #0]
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <HAL_IncTick+0x14>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	440b      	add	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200000a8 	.word	0x200000a8
 8000988:	20000030 	.word	0x20000030

0800098c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800098c:	4b01      	ldr	r3, [pc, #4]	@ (8000994 <HAL_GetTick+0x8>)
 800098e:	6818      	ldr	r0, [r3, #0]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200000a8 	.word	0x200000a8

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff6 	bl	800098c <HAL_GetTick>
 80009a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009a6:	d002      	beq.n	80009ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <HAL_Delay+0x24>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	f7ff ffed 	bl	800098c <HAL_GetTick>
 80009b2:	1b40      	subs	r0, r0, r5
 80009b4:	42a0      	cmp	r0, r4
 80009b6:	d3fa      	bcc.n	80009ae <HAL_Delay+0x16>
  {
  }
}
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
 80009ba:	bf00      	nop
 80009bc:	20000030 	.word	0x20000030

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4a06      	ldr	r2, [pc, #24]	@ (80009dc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009c2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	0200      	lsls	r0, r0, #8
 80009c6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80009ce:	041b      	lsls	r3, r3, #16
 80009d0:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80009d4:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009d8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	05fa0000 	.word	0x05fa0000

080009e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <HAL_NVIC_SetPriority+0x5c>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ee:	f1c3 0c07 	rsb	ip, r3, #7
 80009f2:	f1bc 0f04 	cmp.w	ip, #4
 80009f6:	bf28      	it	cs
 80009f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	f103 0e04 	add.w	lr, r3, #4
 8000a00:	f1be 0f06 	cmp.w	lr, #6
 8000a04:	bf8c      	ite	hi
 8000a06:	3b03      	subhi	r3, #3
 8000a08:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0a:	f04f 3eff 	mov.w	lr, #4294967295
 8000a0e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a12:	ea21 010c 	bic.w	r1, r1, ip
 8000a16:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a1c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000a22:	2800      	cmp	r0, #0
 8000a24:	db05      	blt.n	8000a32 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	0109      	lsls	r1, r1, #4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_NVIC_SetPriority+0x60>)
 8000a2c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	f000 000f 	and.w	r0, r0, #15
 8000a36:	0109      	lsls	r1, r1, #4
 8000a38:	b2c9      	uxtb	r1, r1
 8000a3a:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_NVIC_SetPriority+0x64>)
 8000a3c:	5419      	strb	r1, [r3, r0]
 8000a3e:	e7f6      	b.n	8000a2e <HAL_NVIC_SetPriority+0x4a>
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	e000e400 	.word	0xe000e400
 8000a48:	e000ed14 	.word	0xe000ed14

08000a4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a52:	d20b      	bcs.n	8000a6c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000a58:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <HAL_SYSTICK_Config+0x24>)
 8000a5c:	21f0      	movs	r1, #240	@ 0xf0
 8000a5e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a62:	2000      	movs	r0, #0
 8000a64:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	2207      	movs	r2, #7
 8000a68:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a6c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a74:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <HAL_MPU_Disable+0x18>)
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a7c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a82:	2200      	movs	r2, #0
 8000a84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a90:	f040 0001 	orr.w	r0, r0, #1
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_MPU_Enable+0x1c>)
 8000a96:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aa6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ab0:	7843      	ldrb	r3, [r0, #1]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <HAL_MPU_ConfigRegion+0x54>)
 8000ab4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ab8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ac4:	6843      	ldr	r3, [r0, #4]
 8000ac6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000aca:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000acc:	7ac3      	ldrb	r3, [r0, #11]
 8000ace:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ad0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ad4:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ad6:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ad8:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ada:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ade:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ae0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ae4:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ae6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000aea:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000af0:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000af2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000af6:	7a01      	ldrb	r1, [r0, #8]
 8000af8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000afc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d038      	beq.n	8000b7e <HAL_CRC_Init+0x76>
{
 8000b0c:	b510      	push	{r4, lr}
 8000b0e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b10:	7f43      	ldrb	r3, [r0, #29]
 8000b12:	b31b      	cbz	r3, 8000b5c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000b14:	2302      	movs	r3, #2
 8000b16:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000b18:	7923      	ldrb	r3, [r4, #4]
 8000b1a:	bb1b      	cbnz	r3, 8000b64 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <HAL_CRC_Init+0x7c>)
 8000b20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	6893      	ldr	r3, [r2, #8]
 8000b26:	f023 0318 	bic.w	r3, r3, #24
 8000b2a:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b2c:	7963      	ldrb	r3, [r4, #5]
 8000b2e:	bb13      	cbnz	r3, 8000b76 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	f04f 32ff 	mov.w	r2, #4294967295
 8000b36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	6893      	ldr	r3, [r2, #8]
 8000b3c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000b40:	6961      	ldr	r1, [r4, #20]
 8000b42:	430b      	orrs	r3, r1
 8000b44:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000b46:	6822      	ldr	r2, [r4, #0]
 8000b48:	6893      	ldr	r3, [r2, #8]
 8000b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b4e:	69a1      	ldr	r1, [r4, #24]
 8000b50:	430b      	orrs	r3, r1
 8000b52:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b54:	2301      	movs	r3, #1
 8000b56:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8000b58:	2000      	movs	r0, #0
}
 8000b5a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000b5c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000b5e:	f7ff fe67 	bl	8000830 <HAL_CRC_MspInit>
 8000b62:	e7d7      	b.n	8000b14 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b64:	68e2      	ldr	r2, [r4, #12]
 8000b66:	68a1      	ldr	r1, [r4, #8]
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f000 f80d 	bl	8000b88 <HAL_CRCEx_Polynomial_Set>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d0dc      	beq.n	8000b2c <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	e7f1      	b.n	8000b5a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	6922      	ldr	r2, [r4, #16]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	e7dc      	b.n	8000b38 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	04c11db7 	.word	0x04c11db7

08000b88 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000b88:	f011 0f01 	tst.w	r1, #1
 8000b8c:	d030      	beq.n	8000bf0 <HAL_CRCEx_Polynomial_Set+0x68>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b8e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000b90:	3b01      	subs	r3, #1
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	d033      	beq.n	8000c00 <HAL_CRCEx_Polynomial_Set+0x78>
 8000b98:	f003 0c1f 	and.w	ip, r3, #31
 8000b9c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000ba0:	f01c 0f01 	tst.w	ip, #1
 8000ba4:	d0f4      	beq.n	8000b90 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8000ba6:	2a18      	cmp	r2, #24
 8000ba8:	d824      	bhi.n	8000bf4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000baa:	e8df f002 	tbb	[pc, r2]
 8000bae:	230f      	.short	0x230f
 8000bb0:	23232323 	.word	0x23232323
 8000bb4:	231d2323 	.word	0x231d2323
 8000bb8:	23232323 	.word	0x23232323
 8000bbc:	23192323 	.word	0x23192323
 8000bc0:	23232323 	.word	0x23232323
 8000bc4:	2323      	.short	0x2323
 8000bc6:	0d          	.byte	0x0d
 8000bc7:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d815      	bhi.n	8000bf8 <HAL_CRCEx_Polynomial_Set+0x70>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000bd0:	6801      	ldr	r1, [r0, #0]
 8000bd2:	688b      	ldr	r3, [r1, #8]
 8000bd4:	f023 0318 	bic.w	r3, r3, #24
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d9f3      	bls.n	8000bcc <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
 8000be6:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_16B)
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d9ef      	bls.n	8000bcc <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
 8000bee:	4770      	bx	lr
    status =  HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4770      	bx	lr
    switch (PolyLength)
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4770      	bx	lr
          status =   HAL_ERROR;
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	4770      	bx	lr
    switch (PolyLength)
 8000bfc:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8000bfe:	4770      	bx	lr
    switch (PolyLength)
 8000c00:	2a18      	cmp	r2, #24
 8000c02:	d8fb      	bhi.n	8000bfc <HAL_CRCEx_Polynomial_Set+0x74>
 8000c04:	f20f 0c04 	addw	ip, pc, #4
 8000c08:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
 8000c0c:	08000bcd 	.word	0x08000bcd
 8000c10:	08000bfd 	.word	0x08000bfd
 8000c14:	08000bfd 	.word	0x08000bfd
 8000c18:	08000bfd 	.word	0x08000bfd
 8000c1c:	08000bfd 	.word	0x08000bfd
 8000c20:	08000bfd 	.word	0x08000bfd
 8000c24:	08000bfd 	.word	0x08000bfd
 8000c28:	08000bfd 	.word	0x08000bfd
 8000c2c:	08000bfd 	.word	0x08000bfd
 8000c30:	08000bfd 	.word	0x08000bfd
 8000c34:	08000bfd 	.word	0x08000bfd
 8000c38:	08000bfd 	.word	0x08000bfd
 8000c3c:	08000bfd 	.word	0x08000bfd
 8000c40:	08000bfd 	.word	0x08000bfd
 8000c44:	08000bfd 	.word	0x08000bfd
 8000c48:	08000bfd 	.word	0x08000bfd
 8000c4c:	08000be1 	.word	0x08000be1
 8000c50:	08000bfd 	.word	0x08000bfd
 8000c54:	08000bfd 	.word	0x08000bfd
 8000c58:	08000bfd 	.word	0x08000bfd
 8000c5c:	08000bfd 	.word	0x08000bfd
 8000c60:	08000bfd 	.word	0x08000bfd
 8000c64:	08000bfd 	.word	0x08000bfd
 8000c68:	08000bfd 	.word	0x08000bfd
 8000c6c:	08000bc9 	.word	0x08000bc9

08000c70 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000c70:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000c72:	490b      	ldr	r1, [pc, #44]	@ (8000ca0 <FLASH_Program_DoubleWord+0x30>)
 8000c74:	690c      	ldr	r4, [r1, #16]
 8000c76:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8000c7a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000c7c:	690c      	ldr	r4, [r1, #16]
 8000c7e:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8000c82:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c84:	690c      	ldr	r4, [r1, #16]
 8000c86:	f044 0401 	orr.w	r4, r4, #1
 8000c8a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c8c:	6002      	str	r2, [r0, #0]
 8000c8e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c92:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c94:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <FLASH_Program_Word+0x24>)
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000cac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000cb4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	f042 0201 	orr.w	r2, r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cbe:	6001      	str	r1, [r0, #0]
 8000cc0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <FLASH_Program_HalfWord+0x24>)
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000cd4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000ce6:	8001      	strh	r1, [r0, #0]
 8000ce8:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <FLASH_Program_Byte+0x20>)
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000cfc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	f042 0201 	orr.w	r2, r2, #1
 8000d08:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d0a:	7001      	strb	r1, [r0, #0]
 8000d0c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f013 0f02 	tst.w	r3, #2
 8000d20:	d004      	beq.n	8000d2c <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d22:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <FLASH_SetErrorCode+0x70>)
 8000d24:	6993      	ldr	r3, [r2, #24]
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f013 0f10 	tst.w	r3, #16
 8000d34:	d004      	beq.n	8000d40 <FLASH_SetErrorCode+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d36:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <FLASH_SetErrorCode+0x70>)
 8000d38:	6993      	ldr	r3, [r2, #24]
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	f013 0f20 	tst.w	r3, #32
 8000d48:	d004      	beq.n	8000d54 <FLASH_SetErrorCode+0x3c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <FLASH_SetErrorCode+0x70>)
 8000d4c:	6993      	ldr	r3, [r2, #24]
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000d5c:	d004      	beq.n	8000d68 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <FLASH_SetErrorCode+0x70>)
 8000d60:	6993      	ldr	r3, [r2, #24]
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d70:	d004      	beq.n	8000d7c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <FLASH_SetErrorCode+0x70>)
 8000d74:	6993      	ldr	r3, [r2, #24]
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000d7c:	4b01      	ldr	r3, [pc, #4]	@ (8000d84 <FLASH_SetErrorCode+0x6c>)
 8000d7e:	22f2      	movs	r2, #242	@ 0xf2
 8000d80:	60da      	str	r2, [r3, #12]
}
 8000d82:	4770      	bx	lr
 8000d84:	40023c00 	.word	0x40023c00
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_FLASH_Unlock+0x20>)
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db01      	blt.n	8000d98 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8000d94:	2000      	movs	r0, #0
}
 8000d96:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_FLASH_Unlock+0x20>)
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <HAL_FLASH_Unlock+0x24>)
 8000d9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d9e:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000da2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000da4:	6918      	ldr	r0, [r3, #16]
 8000da6:	0fc0      	lsrs	r0, r0, #31
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00
 8000db0:	45670123 	.word	0x45670123

08000db4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000db4:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_FLASH_Lock+0x10>)
 8000db6:	6913      	ldr	r3, [r2, #16]
 8000db8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dbc:	6113      	str	r3, [r2, #16]
}
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <FLASH_WaitForLastOperation>:
{ 
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <FLASH_WaitForLastOperation+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8000dd2:	f7ff fddb 	bl	800098c <HAL_GetTick>
 8000dd6:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dd8:	4d14      	ldr	r5, [pc, #80]	@ (8000e2c <FLASH_WaitForLastOperation+0x64>)
 8000dda:	68eb      	ldr	r3, [r5, #12]
 8000ddc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000de0:	d00a      	beq.n	8000df8 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8000de2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000de6:	d0f8      	beq.n	8000dda <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000de8:	b1cc      	cbz	r4, 8000e1e <FLASH_WaitForLastOperation+0x56>
 8000dea:	f7ff fdcf 	bl	800098c <HAL_GetTick>
 8000dee:	1b80      	subs	r0, r0, r6
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d9f2      	bls.n	8000dda <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
 8000df6:	e00d      	b.n	8000e14 <FLASH_WaitForLastOperation+0x4c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <FLASH_WaitForLastOperation+0x64>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8000e00:	d109      	bne.n	8000e16 <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <FLASH_WaitForLastOperation+0x64>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	f013 0f01 	tst.w	r3, #1
 8000e0a:	d00a      	beq.n	8000e22 <FLASH_WaitForLastOperation+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <FLASH_WaitForLastOperation+0x64>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
}  
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 8000e16:	f7ff ff7f 	bl	8000d18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	e7fa      	b.n	8000e14 <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8000e1e:	2003      	movs	r0, #3
 8000e20:	e7f8      	b.n	8000e14 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	e7f6      	b.n	8000e14 <FLASH_WaitForLastOperation+0x4c>
 8000e26:	bf00      	nop
 8000e28:	200000ac 	.word	0x200000ac
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_FLASH_Program>:
{
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000e34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <HAL_FLASH_Program+0x74>)
 8000e36:	7d12      	ldrb	r2, [r2, #20]
 8000e38:	2a01      	cmp	r2, #1
 8000e3a:	d031      	beq.n	8000ea0 <HAL_FLASH_Program+0x70>
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	460d      	mov	r5, r1
 8000e40:	461f      	mov	r7, r3
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_FLASH_Program+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e48:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e4c:	f7ff ffbc 	bl	8000dc8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e50:	b990      	cbnz	r0, 8000e78 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 8000e52:	2c03      	cmp	r4, #3
 8000e54:	d807      	bhi.n	8000e66 <HAL_FLASH_Program+0x36>
 8000e56:	e8df f004 	tbb	[pc, r4]
 8000e5a:	1302      	.short	0x1302
 8000e5c:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e5e:	b2f1      	uxtb	r1, r6
 8000e60:	4628      	mov	r0, r5
 8000e62:	f7ff ff47 	bl	8000cf4 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e66:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e6a:	f7ff ffad 	bl	8000dc8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_FLASH_Program+0x78>)
 8000e70:	6913      	ldr	r3, [r2, #16]
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_FLASH_Program+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	751a      	strb	r2, [r3, #20]
}
 8000e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e80:	b2b1      	uxth	r1, r6
 8000e82:	4628      	mov	r0, r5
 8000e84:	f7ff ff22 	bl	8000ccc <FLASH_Program_HalfWord>
        break;
 8000e88:	e7ed      	b.n	8000e66 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f7ff ff09 	bl	8000ca4 <FLASH_Program_Word>
        break;
 8000e92:	e7e8      	b.n	8000e66 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 8000e94:	4632      	mov	r2, r6
 8000e96:	463b      	mov	r3, r7
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f7ff fee9 	bl	8000c70 <FLASH_Program_DoubleWord>
        break;
 8000e9e:	e7e2      	b.n	8000e66 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	e7ec      	b.n	8000e7e <HAL_FLASH_Program+0x4e>
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <FLASH_MassErase+0x24>)
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000eb4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	f042 0204 	orr.w	r2, r2, #4
 8000ebc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000ec4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000ece:	4770      	bx	lr
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8000ed4:	233f      	movs	r3, #63	@ 0x3f
 8000ed6:	6003      	str	r3, [r0, #0]
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x00FF0000));
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <HAL_FLASHEx_OBGetConfig+0x50>)
 8000eda:	6953      	ldr	r3, [r2, #20]
 8000edc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 8000ee0:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 8000ee2:	7d53      	ldrb	r3, [r2, #21]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2baa      	cmp	r3, #170	@ 0xaa
 8000ee8:	d004      	beq.n	8000ef4 <HAL_FLASHEx_OBGetConfig+0x20>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 8000eea:	7d53      	ldrb	r3, [r2, #21]
 8000eec:	b2db      	uxtb	r3, r3
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8000eee:	2bcc      	cmp	r3, #204	@ 0xcc
 8000ef0:	bf18      	it	ne
 8000ef2:	2355      	movne	r3, #85	@ 0x55
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000ef4:	60c3      	str	r3, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xC00000F0U));
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_FLASHEx_OBGetConfig+0x50>)
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	f022 527f 	bic.w	r2, r2, #1069547520	@ 0x3fc00000
 8000efe:	f422 127f 	bic.w	r2, r2, #4177920	@ 0x3fc000
 8000f02:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8000f06:	f022 020f 	bic.w	r2, r2, #15
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000f0a:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8000f12:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8000f18:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8000f1e:	61c3      	str	r3, [r0, #28]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000f28:	2901      	cmp	r1, #1
 8000f2a:	d01f      	beq.n	8000f6c <FLASH_Erase_Sector+0x44>
 8000f2c:	2902      	cmp	r1, #2
 8000f2e:	d020      	beq.n	8000f72 <FLASH_Erase_Sector+0x4a>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf0c      	ite	eq
 8000f34:	2100      	moveq	r1, #0
 8000f36:	f44f 7140 	movne.w	r1, #768	@ 0x300
  FLASH->CR &= CR_PSIZE_MASK;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <FLASH_Erase_Sector+0x50>)
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000f42:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK;
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000f50:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000f58:	f040 0002 	orr.w	r0, r0, #2
 8000f5c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	f3bf 8f4f 	dsb	sy
}
 8000f6a:	4770      	bx	lr
{
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	e7e3      	b.n	8000f3a <FLASH_Erase_Sector+0x12>
 8000f72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f76:	e7e0      	b.n	8000f3a <FLASH_Erase_Sector+0x12>
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <HAL_FLASHEx_Erase+0x98>)
 8000f7e:	7d1b      	ldrb	r3, [r3, #20]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d043      	beq.n	800100c <HAL_FLASHEx_Erase+0x90>
{
 8000f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f88:	4604      	mov	r4, r0
 8000f8a:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_FLASHEx_Erase+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f96:	f7ff ff17 	bl	8000dc8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	bb80      	cbnz	r0, 8001000 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d01b      	beq.n	8000fe2 <HAL_FLASHEx_Erase+0x66>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000faa:	6865      	ldr	r5, [r4, #4]
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	442b      	add	r3, r5
 8000fb0:	429d      	cmp	r5, r3
 8000fb2:	d225      	bcs.n	8001000 <HAL_FLASHEx_Erase+0x84>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb4:	f24c 3850 	movw	r8, #50000	@ 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fb8:	4e17      	ldr	r6, [pc, #92]	@ (8001018 <HAL_FLASHEx_Erase+0x9c>)
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fba:	7b21      	ldrb	r1, [r4, #12]
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f7ff ffb3 	bl	8000f28 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	f7ff ff00 	bl	8000dc8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000fc8:	6933      	ldr	r3, [r6, #16]
 8000fca:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8000fce:	6133      	str	r3, [r6, #16]
        if(status != HAL_OK) 
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	b9a0      	cbnz	r0, 8000ffe <HAL_FLASHEx_Erase+0x82>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	6862      	ldr	r2, [r4, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	42ab      	cmp	r3, r5
 8000fde:	d8ec      	bhi.n	8000fba <HAL_FLASHEx_Erase+0x3e>
 8000fe0:	e00e      	b.n	8001000 <HAL_FLASHEx_Erase+0x84>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8000fe2:	7b20      	ldrb	r0, [r4, #12]
 8000fe4:	f7ff ff62 	bl	8000eac <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000fec:	f7ff feec 	bl	8000dc8 <FLASH_WaitForLastOperation>
 8000ff0:	4601      	mov	r1, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_FLASHEx_Erase+0x9c>)
 8000ff4:	6913      	ldr	r3, [r2, #16]
 8000ff6:	f023 0304 	bic.w	r3, r3, #4
 8000ffa:	6113      	str	r3, [r2, #16]
 8000ffc:	e000      	b.n	8001000 <HAL_FLASHEx_Erase+0x84>
          *SectorError = index;
 8000ffe:	603d      	str	r5, [r7, #0]
  __HAL_UNLOCK(&pFlash);
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <HAL_FLASHEx_Erase+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	751a      	strb	r2, [r3, #20]
}
 8001006:	4608      	mov	r0, r1
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 800100c:	2102      	movs	r1, #2
}
 800100e:	4608      	mov	r0, r1
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200000ac 	.word	0x200000ac
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	b083      	sub	sp, #12
 8001022:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001024:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001026:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800102a:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800102c:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001030:	4c75      	ldr	r4, [pc, #468]	@ (8001208 <HAL_GPIO_Init+0x1ec>)
 8001032:	e04a      	b.n	80010ca <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001034:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001036:	fa05 fa02 	lsl.w	sl, r5, r2
 800103a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2));
 800103e:	68cf      	ldr	r7, [r1, #12]
 8001040:	4097      	lsls	r7, r2
 8001042:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001046:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001048:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104e:	684f      	ldr	r7, [r1, #4]
 8001050:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001054:	409f      	lsls	r7, r3
 8001056:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800105a:	6047      	str	r7, [r0, #4]
 800105c:	e043      	b.n	80010e6 <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800105e:	2700      	movs	r7, #0
 8001060:	fa07 f70b 	lsl.w	r7, r7, fp
 8001064:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001068:	f8cc 7008 	str.w	r7, [ip, #8]
        temp = EXTI->RTSR;
 800106c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800106e:	ea6f 0c09 	mvn.w	ip, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001072:	684e      	ldr	r6, [r1, #4]
 8001074:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001078:	bf0c      	ite	eq
 800107a:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800107e:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001082:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001084:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001086:	684e      	ldr	r6, [r1, #4]
 8001088:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800108c:	bf0c      	ite	eq
 800108e:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001092:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001096:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001098:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109a:	684e      	ldr	r6, [r1, #4]
 800109c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80010a0:	bf0c      	ite	eq
 80010a2:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80010a6:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 80010aa:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ae:	684e      	ldr	r6, [r1, #4]
 80010b0:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80010b4:	bf0c      	ite	eq
 80010b6:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80010ba:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 80010be:	6027      	str	r7, [r4, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80010c0:	3301      	adds	r3, #1
 80010c2:	3202      	adds	r2, #2
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	f000 809c 	beq.w	8001202 <HAL_GPIO_Init+0x1e6>
    ioposition = ((uint32_t)0x01) << position;
 80010ca:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	680f      	ldr	r7, [r1, #0]
 80010d0:	ea0c 0907 	and.w	r9, ip, r7
    if (iocurrent == ioposition)
 80010d4:	ea3c 0707 	bics.w	r7, ip, r7
 80010d8:	d1f2      	bne.n	80010c0 <HAL_GPIO_Init+0xa4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010da:	684f      	ldr	r7, [r1, #4]
 80010dc:	f007 0703 	and.w	r7, r7, #3
 80010e0:	3f01      	subs	r7, #1
 80010e2:	2f01      	cmp	r7, #1
 80010e4:	d9a6      	bls.n	8001034 <HAL_GPIO_Init+0x18>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	684f      	ldr	r7, [r1, #4]
 80010e8:	f007 0703 	and.w	r7, r7, #3
 80010ec:	2f03      	cmp	r7, #3
 80010ee:	d023      	beq.n	8001138 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->PUPDR;
 80010f0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010f2:	fa05 fc02 	lsl.w	ip, r5, r2
 80010f6:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010fa:	688f      	ldr	r7, [r1, #8]
 80010fc:	4097      	lsls	r7, r2
 80010fe:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001102:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	684f      	ldr	r7, [r1, #4]
 8001106:	f007 0703 	and.w	r7, r7, #3
 800110a:	2f02      	cmp	r7, #2
 800110c:	d114      	bne.n	8001138 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->AFR[position >> 3];
 800110e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001112:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001116:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800111a:	f003 0b07 	and.w	fp, r3, #7
 800111e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001122:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001126:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800112a:	690f      	ldr	r7, [r1, #16]
 800112c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001130:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3] = temp;
 8001134:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001138:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800113a:	fa05 fc02 	lsl.w	ip, r5, r2
 800113e:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001142:	684f      	ldr	r7, [r1, #4]
 8001144:	f007 0703 	and.w	r7, r7, #3
 8001148:	4097      	lsls	r7, r2
 800114a:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 800114e:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001150:	684f      	ldr	r7, [r1, #4]
 8001152:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8001156:	d0b3      	beq.n	80010c0 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4e2c      	ldr	r6, [pc, #176]	@ (800120c <HAL_GPIO_Init+0x1f0>)
 800115a:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800115c:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8001160:	6477      	str	r7, [r6, #68]	@ 0x44
 8001162:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8001164:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8001168:	9701      	str	r7, [sp, #4]
 800116a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800116c:	f023 0c03 	bic.w	ip, r3, #3
 8001170:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8001174:	f50c 3c9c 	add.w	ip, ip, #79872	@ 0x13800
 8001178:	f8dc 7008 	ldr.w	r7, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800117c:	f003 0b03 	and.w	fp, r3, #3
 8001180:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001184:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001188:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800118c:	4f20      	ldr	r7, [pc, #128]	@ (8001210 <HAL_GPIO_Init+0x1f4>)
 800118e:	42b8      	cmp	r0, r7
 8001190:	f43f af65 	beq.w	800105e <HAL_GPIO_Init+0x42>
 8001194:	f5a6 5650 	sub.w	r6, r6, #13312	@ 0x3400
 8001198:	42b0      	cmp	r0, r6
 800119a:	d022      	beq.n	80011e2 <HAL_GPIO_Init+0x1c6>
 800119c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80011a0:	42b0      	cmp	r0, r6
 80011a2:	d020      	beq.n	80011e6 <HAL_GPIO_Init+0x1ca>
 80011a4:	f507 6740 	add.w	r7, r7, #3072	@ 0xc00
 80011a8:	42b8      	cmp	r0, r7
 80011aa:	d01e      	beq.n	80011ea <HAL_GPIO_Init+0x1ce>
 80011ac:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011b0:	42b8      	cmp	r0, r7
 80011b2:	d01c      	beq.n	80011ee <HAL_GPIO_Init+0x1d2>
 80011b4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011b8:	42b8      	cmp	r0, r7
 80011ba:	d01a      	beq.n	80011f2 <HAL_GPIO_Init+0x1d6>
 80011bc:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011c0:	42b8      	cmp	r0, r7
 80011c2:	d018      	beq.n	80011f6 <HAL_GPIO_Init+0x1da>
 80011c4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011c8:	42b8      	cmp	r0, r7
 80011ca:	d016      	beq.n	80011fa <HAL_GPIO_Init+0x1de>
 80011cc:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011d0:	42b8      	cmp	r0, r7
 80011d2:	d014      	beq.n	80011fe <HAL_GPIO_Init+0x1e2>
 80011d4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80011d8:	42b8      	cmp	r0, r7
 80011da:	bf14      	ite	ne
 80011dc:	270a      	movne	r7, #10
 80011de:	2709      	moveq	r7, #9
 80011e0:	e73e      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011e2:	2701      	movs	r7, #1
 80011e4:	e73c      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011e6:	2702      	movs	r7, #2
 80011e8:	e73a      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011ea:	2703      	movs	r7, #3
 80011ec:	e738      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011ee:	2704      	movs	r7, #4
 80011f0:	e736      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011f2:	2705      	movs	r7, #5
 80011f4:	e734      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011f6:	2706      	movs	r7, #6
 80011f8:	e732      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011fa:	2707      	movs	r7, #7
 80011fc:	e730      	b.n	8001060 <HAL_GPIO_Init+0x44>
 80011fe:	2708      	movs	r7, #8
 8001200:	e72e      	b.n	8001060 <HAL_GPIO_Init+0x44>
      }
    }
  }
}
 8001202:	b003      	add	sp, #12
 8001204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001208:	40013c00 	.word	0x40013c00
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001214:	b10a      	cbz	r2, 800121a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	6181      	str	r1, [r0, #24]
 8001218:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800121a:	0409      	lsls	r1, r1, #16
 800121c:	6181      	str	r1, [r0, #24]
  }
}
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001220:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001222:	ea01 0203 	and.w	r2, r1, r3
 8001226:	ea21 0103 	bic.w	r1, r1, r3
 800122a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800122e:	6181      	str	r1, [r0, #24]
}
 8001230:	4770      	bx	lr
	...

08001234 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001234:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001236:	f7ff fba9 	bl	800098c <HAL_GetTick>
 800123a:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001246:	4615      	mov	r5, r2
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	f013 0f02 	tst.w	r3, #2
 800124e:	d106      	bne.n	800125e <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fb9c 	bl	800098c <HAL_GetTick>
 8001254:	1b00      	subs	r0, r0, r4
 8001256:	2802      	cmp	r0, #2
 8001258:	d9f6      	bls.n	8001248 <HAL_RCC_DeInit+0x14>
    {
      return HAL_TIMEOUT;
 800125a:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800125e:	4d45      	ldr	r5, [pc, #276]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001266:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8001268:	f7ff fb90 	bl	800098c <HAL_GetTick>
 800126c:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 800126e:	2300      	movs	r3, #0
 8001270:	60ab      	str	r3, [r5, #8]
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001272:	f241 3688 	movw	r6, #5000	@ 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001276:	68ab      	ldr	r3, [r5, #8]
 8001278:	f013 0f0c 	tst.w	r3, #12
 800127c:	d006      	beq.n	800128c <HAL_RCC_DeInit+0x58>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f7ff fb85 	bl	800098c <HAL_GetTick>
 8001282:	1b00      	subs	r0, r0, r4
 8001284:	42b0      	cmp	r0, r6
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_DeInit+0x42>
      return HAL_TIMEOUT;
 8001288:	2003      	movs	r0, #3
 800128a:	e7e7      	b.n	800125c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800128c:	f7ff fb7e 	bl	800098c <HAL_GetTick>
 8001290:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001292:	4a38      	ldr	r2, [pc, #224]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800129a:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800129c:	4615      	mov	r5, r2
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80012a4:	d006      	beq.n	80012b4 <HAL_RCC_DeInit+0x80>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb71 	bl	800098c <HAL_GetTick>
 80012aa:	1b00      	subs	r0, r0, r4
 80012ac:	2864      	cmp	r0, #100	@ 0x64
 80012ae:	d9f6      	bls.n	800129e <HAL_RCC_DeInit+0x6a>
      return HAL_TIMEOUT;
 80012b0:	2003      	movs	r0, #3
 80012b2:	e7d3      	b.n	800125c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80012b4:	f7ff fb6a 	bl	800098c <HAL_GetTick>
 80012b8:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80012ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012c2:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80012c4:	4615      	mov	r5, r2
 80012c6:	682b      	ldr	r3, [r5, #0]
 80012c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012cc:	d006      	beq.n	80012dc <HAL_RCC_DeInit+0xa8>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fb5d 	bl	800098c <HAL_GetTick>
 80012d2:	1b00      	subs	r0, r0, r4
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
 80012d8:	2003      	movs	r0, #3
 80012da:	e7bf      	b.n	800125c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80012dc:	f7ff fb56 	bl	800098c <HAL_GetTick>
 80012e0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80012e2:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80012ec:	4615      	mov	r5, r2
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80012f4:	d006      	beq.n	8001304 <HAL_RCC_DeInit+0xd0>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80012f6:	f7ff fb49 	bl	800098c <HAL_GetTick>
 80012fa:	1b00      	subs	r0, r0, r4
 80012fc:	2864      	cmp	r0, #100	@ 0x64
 80012fe:	d9f6      	bls.n	80012ee <HAL_RCC_DeInit+0xba>
      return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e7ab      	b.n	800125c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8001304:	f7ff fb42 	bl	800098c <HAL_GetTick>
 8001308:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800130a:	4a1a      	ldr	r2, [pc, #104]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001314:	4615      	mov	r5, r2
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800131c:	d006      	beq.n	800132c <HAL_RCC_DeInit+0xf8>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800131e:	f7ff fb35 	bl	800098c <HAL_GetTick>
 8001322:	1b00      	subs	r0, r0, r4
 8001324:	2864      	cmp	r0, #100	@ 0x64
 8001326:	d9f6      	bls.n	8001316 <HAL_RCC_DeInit+0xe2>
      return HAL_TIMEOUT;
 8001328:	2003      	movs	r0, #3
 800132a:	e797      	b.n	800125c <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_RCC_DeInit+0x140>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_RCC_DeInit+0x144>)
 8001330:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001332:	3a10      	subs	r2, #16
 8001334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8001338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8001342:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
 800134a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800134c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	675a      	str	r2, [r3, #116]	@ 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001354:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001356:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800135a:	675a      	str	r2, [r3, #116]	@ 0x74
  SystemCoreClock = HSI_VALUE;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_RCC_DeInit+0x148>)
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_RCC_DeInit+0x14c>)
 8001360:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_RCC_DeInit+0x150>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f7ff fad5 	bl	8000914 <HAL_InitTick>
 800136a:	3800      	subs	r0, #0
 800136c:	bf18      	it	ne
 800136e:	2001      	movne	r0, #1
 8001370:	e774      	b.n	800125c <HAL_RCC_DeInit+0x28>
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	24003010 	.word	0x24003010
 800137c:	2000002c 	.word	0x2000002c
 8001380:	00f42400 	.word	0x00f42400
 8001384:	20000034 	.word	0x20000034

08001388 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	2800      	cmp	r0, #0
 800138a:	f000 8202 	beq.w	8001792 <HAL_RCC_OscConfig+0x40a>
{
 800138e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	6803      	ldr	r3, [r0, #0]
 8001398:	f013 0f01 	tst.w	r3, #1
 800139c:	d029      	beq.n	80013f2 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800139e:	4b96      	ldr	r3, [pc, #600]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d01a      	beq.n	80013e0 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b93      	ldr	r3, [pc, #588]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d00f      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	6863      	ldr	r3, [r4, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013bc:	d040      	beq.n	8001440 <HAL_RCC_OscConfig+0xb8>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d154      	bne.n	800146c <HAL_RCC_OscConfig+0xe4>
 80013c2:	4b8d      	ldr	r3, [pc, #564]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e039      	b.n	800144a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b88      	ldr	r3, [pc, #544]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80013de:	d0ea      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b85      	ldr	r3, [pc, #532]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_OscConfig+0x6a>
 80013ea:	6863      	ldr	r3, [r4, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 81d2 	beq.w	8001796 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f013 0f02 	tst.w	r3, #2
 80013f8:	d074      	beq.n	80014e4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b7f      	ldr	r3, [pc, #508]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f013 0f0c 	tst.w	r3, #12
 8001402:	d05e      	beq.n	80014c2 <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001404:	4b7c      	ldr	r3, [pc, #496]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d053      	beq.n	80014b8 <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001410:	68e3      	ldr	r3, [r4, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8089 	beq.w	800152a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4a77      	ldr	r2, [pc, #476]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fab3 	bl	800098c <HAL_GetTick>
 8001426:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4e73      	ldr	r6, [pc, #460]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800142a:	6833      	ldr	r3, [r6, #0]
 800142c:	f013 0f02 	tst.w	r3, #2
 8001430:	d172      	bne.n	8001518 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff faab 	bl	800098c <HAL_GetTick>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	2802      	cmp	r0, #2
 800143a:	d9f6      	bls.n	800142a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e1af      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001440:	4a6d      	ldr	r2, [pc, #436]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144a:	6863      	ldr	r3, [r4, #4]
 800144c:	b32b      	cbz	r3, 800149a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800144e:	f7ff fa9d 	bl	800098c <HAL_GetTick>
 8001452:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	4e68      	ldr	r6, [pc, #416]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001456:	6833      	ldr	r3, [r6, #0]
 8001458:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800145c:	d1c9      	bne.n	80013f2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff fa95 	bl	800098c <HAL_GetTick>
 8001462:	1b40      	subs	r0, r0, r5
 8001464:	2864      	cmp	r0, #100	@ 0x64
 8001466:	d9f6      	bls.n	8001456 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8001468:	2003      	movs	r0, #3
 800146a:	e199      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001470:	d009      	beq.n	8001486 <HAL_RCC_OscConfig+0xfe>
 8001472:	4b61      	ldr	r3, [pc, #388]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e7e1      	b.n	800144a <HAL_RCC_OscConfig+0xc2>
 8001486:	4b5c      	ldr	r3, [pc, #368]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e7d7      	b.n	800144a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800149a:	f7ff fa77 	bl	800098c <HAL_GetTick>
 800149e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a0:	4e55      	ldr	r6, [pc, #340]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014a2:	6833      	ldr	r3, [r6, #0]
 80014a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80014a8:	d0a3      	beq.n	80013f2 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014aa:	f7ff fa6f 	bl	800098c <HAL_GetTick>
 80014ae:	1b40      	subs	r0, r0, r5
 80014b0:	2864      	cmp	r0, #100	@ 0x64
 80014b2:	d9f6      	bls.n	80014a2 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
 80014b6:	e173      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b8:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014c0:	d1a6      	bne.n	8001410 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b4d      	ldr	r3, [pc, #308]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f013 0f02 	tst.w	r3, #2
 80014ca:	d003      	beq.n	80014d4 <HAL_RCC_OscConfig+0x14c>
 80014cc:	68e3      	ldr	r3, [r4, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	f040 8163 	bne.w	800179a <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4a48      	ldr	r2, [pc, #288]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	6921      	ldr	r1, [r4, #16]
 80014da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014e2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f013 0f08 	tst.w	r3, #8
 80014ea:	d046      	beq.n	800157a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ec:	6963      	ldr	r3, [r4, #20]
 80014ee:	b383      	cbz	r3, 8001552 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f0:	4a41      	ldr	r2, [pc, #260]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014f2:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa47 	bl	800098c <HAL_GetTick>
 80014fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001500:	4e3d      	ldr	r6, [pc, #244]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001502:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001504:	f013 0f02 	tst.w	r3, #2
 8001508:	d137      	bne.n	800157a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fa3f 	bl	800098c <HAL_GetTick>
 800150e:	1b40      	subs	r0, r0, r5
 8001510:	2802      	cmp	r0, #2
 8001512:	d9f6      	bls.n	8001502 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001514:	2003      	movs	r0, #3
 8001516:	e143      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4a37      	ldr	r2, [pc, #220]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	6921      	ldr	r1, [r4, #16]
 800151e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001522:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e7dc      	b.n	80014e4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800152a:	4a33      	ldr	r2, [pc, #204]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001534:	f7ff fa2a 	bl	800098c <HAL_GetTick>
 8001538:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4e2f      	ldr	r6, [pc, #188]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	f013 0f02 	tst.w	r3, #2
 8001542:	d0cf      	beq.n	80014e4 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fa22 	bl	800098c <HAL_GetTick>
 8001548:	1b40      	subs	r0, r0, r5
 800154a:	2802      	cmp	r0, #2
 800154c:	d9f6      	bls.n	800153c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800154e:	2003      	movs	r0, #3
 8001550:	e126      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	4a29      	ldr	r2, [pc, #164]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001554:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fa16 	bl	800098c <HAL_GetTick>
 8001560:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	4e25      	ldr	r6, [pc, #148]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001564:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001566:	f013 0f02 	tst.w	r3, #2
 800156a:	d006      	beq.n	800157a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa0e 	bl	800098c <HAL_GetTick>
 8001570:	1b40      	subs	r0, r0, r5
 8001572:	2802      	cmp	r0, #2
 8001574:	d9f6      	bls.n	8001564 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8001576:	2003      	movs	r0, #3
 8001578:	e112      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f013 0f04 	tst.w	r3, #4
 8001580:	d07e      	beq.n	8001680 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800158a:	d11e      	bne.n	80015ca <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800158e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001590:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015a0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015aa:	d010      	beq.n	80015ce <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	68a3      	ldr	r3, [r4, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d026      	beq.n	8001600 <HAL_RCC_OscConfig+0x278>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13c      	bne.n	8001630 <HAL_RCC_OscConfig+0x2a8>
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	671a      	str	r2, [r3, #112]	@ 0x70
 80015c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80015c8:	e01f      	b.n	800160a <HAL_RCC_OscConfig+0x282>
  FlagStatus pwrclkchanged = RESET;
 80015ca:	2500      	movs	r5, #0
 80015cc:	e7e9      	b.n	80015a2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9d8 	bl	800098c <HAL_GetTick>
 80015dc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4f07      	ldr	r7, [pc, #28]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015e6:	d1e1      	bne.n	80015ac <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e8:	f7ff f9d0 	bl	800098c <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	2864      	cmp	r0, #100	@ 0x64
 80015f0:	d9f6      	bls.n	80015e0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80015f2:	2003      	movs	r0, #3
 80015f4:	e0d4      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	4a6e      	ldr	r2, [pc, #440]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 8001602:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	b333      	cbz	r3, 800165c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff f9bd 	bl	800098c <HAL_GetTick>
 8001612:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4f69      	ldr	r7, [pc, #420]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800161c:	f013 0f02 	tst.w	r3, #2
 8001620:	d12d      	bne.n	800167e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f9b3 	bl	800098c <HAL_GetTick>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	4540      	cmp	r0, r8
 800162a:	d9f6      	bls.n	800161a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800162c:	2003      	movs	r0, #3
 800162e:	e0b7      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	2b05      	cmp	r3, #5
 8001632:	d009      	beq.n	8001648 <HAL_RCC_OscConfig+0x2c0>
 8001634:	4b61      	ldr	r3, [pc, #388]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 8001636:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	671a      	str	r2, [r3, #112]	@ 0x70
 800163e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001640:	f022 0204 	bic.w	r2, r2, #4
 8001644:	671a      	str	r2, [r3, #112]	@ 0x70
 8001646:	e7e0      	b.n	800160a <HAL_RCC_OscConfig+0x282>
 8001648:	4b5c      	ldr	r3, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 800164a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800164c:	f042 0204 	orr.w	r2, r2, #4
 8001650:	671a      	str	r2, [r3, #112]	@ 0x70
 8001652:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	671a      	str	r2, [r3, #112]	@ 0x70
 800165a:	e7d6      	b.n	800160a <HAL_RCC_OscConfig+0x282>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff f996 	bl	800098c <HAL_GetTick>
 8001660:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	4f56      	ldr	r7, [pc, #344]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800166a:	f013 0f02 	tst.w	r3, #2
 800166e:	d006      	beq.n	800167e <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff f98c 	bl	800098c <HAL_GetTick>
 8001674:	1b80      	subs	r0, r0, r6
 8001676:	4540      	cmp	r0, r8
 8001678:	d9f6      	bls.n	8001668 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
 800167c:	e090      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800167e:	b9fd      	cbnz	r5, 80016c0 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	69a3      	ldr	r3, [r4, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 808b 	beq.w	800179e <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4a4c      	ldr	r2, [pc, #304]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 800168a:	6892      	ldr	r2, [r2, #8]
 800168c:	f002 020c 	and.w	r2, r2, #12
 8001690:	2a08      	cmp	r2, #8
 8001692:	d058      	beq.n	8001746 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	2b02      	cmp	r3, #2
 8001696:	d019      	beq.n	80016cc <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4a48      	ldr	r2, [pc, #288]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f973 	bl	800098c <HAL_GetTick>
 80016a6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	4d44      	ldr	r5, [pc, #272]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016b0:	d047      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff f96b 	bl	800098c <HAL_GetTick>
 80016b6:	1b00      	subs	r0, r0, r4
 80016b8:	2802      	cmp	r0, #2
 80016ba:	d9f6      	bls.n	80016aa <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 80016bc:	2003      	movs	r0, #3
 80016be:	e06f      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4a3e      	ldr	r2, [pc, #248]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 80016c2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	e7d9      	b.n	8001680 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4a3b      	ldr	r2, [pc, #236]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016d6:	f7ff f959 	bl	800098c <HAL_GetTick>
 80016da:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016dc:	4e37      	ldr	r6, [pc, #220]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016e4:	d006      	beq.n	80016f4 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff f951 	bl	800098c <HAL_GetTick>
 80016ea:	1b40      	subs	r0, r0, r5
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d9f6      	bls.n	80016de <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e055      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	69e3      	ldr	r3, [r4, #28]
 80016fc:	6a21      	ldr	r1, [r4, #32]
 80016fe:	430b      	orrs	r3, r1
 8001700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001704:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001706:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800170a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800170c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001714:	4a29      	ldr	r2, [pc, #164]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 8001716:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001720:	f7ff f934 	bl	800098c <HAL_GetTick>
 8001724:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4d25      	ldr	r5, [pc, #148]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff f92c 	bl	800098c <HAL_GetTick>
 8001734:	1b00      	subs	r0, r0, r4
 8001736:	2802      	cmp	r0, #2
 8001738:	d9f6      	bls.n	8001728 <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 800173a:	2003      	movs	r0, #3
 800173c:	e030      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800173e:	2000      	movs	r0, #0
 8001740:	e02e      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 8001742:	2000      	movs	r0, #0
 8001744:	e02c      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
      pll_config = RCC->PLLCFGR;
 8001746:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_RCC_OscConfig+0x434>)
 8001748:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	2b01      	cmp	r3, #1
 800174c:	d02b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	69e1      	ldr	r1, [r4, #28]
 8001754:	428b      	cmp	r3, r1
 8001756:	d128      	bne.n	80017aa <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001758:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	6a21      	ldr	r1, [r4, #32]
 800175e:	428b      	cmp	r3, r1
 8001760:	d125      	bne.n	80017ae <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001762:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800176e:	d120      	bne.n	80017b2 <HAL_RCC_OscConfig+0x42a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001770:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8001774:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800177e:	d11a      	bne.n	80017b6 <HAL_RCC_OscConfig+0x42e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001780:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001782:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001786:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800178a:	bf14      	ite	ne
 800178c:	2001      	movne	r0, #1
 800178e:	2000      	moveq	r0, #0
 8001790:	e006      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
    return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
}
 8001794:	4770      	bx	lr
        return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
 8001798:	e002      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
        return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
  return HAL_OK;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	b002      	add	sp, #8
 80017a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
 80017a8:	e7fa      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80017aa:	2001      	movs	r0, #1
 80017ac:	e7f8      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80017ae:	2001      	movs	r0, #1
 80017b0:	e7f6      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80017b2:	2001      	movs	r0, #1
 80017b4:	e7f4      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80017b6:	2001      	movs	r0, #1
 80017b8:	e7f2      	b.n	80017a0 <HAL_RCC_OscConfig+0x418>
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d041      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x92>
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d141      	bne.n	8001856 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80017e0:	d012      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80017ea:	481d      	ldr	r0, [pc, #116]	@ (8001860 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ec:	2300      	movs	r3, #0
 80017ee:	fba1 0100 	umull	r0, r1, r1, r0
 80017f2:	f7fe fd09 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80017fe:	3301      	adds	r3, #1
 8001800:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001802:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001806:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 800180a:	6858      	ldr	r0, [r3, #4]
 800180c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001810:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001814:	ebbc 0c00 	subs.w	ip, ip, r0
 8001818:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800181c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001820:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001824:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001828:	ebb1 010c 	subs.w	r1, r1, ip
 800182c:	eb63 030e 	sbc.w	r3, r3, lr
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001836:	00c9      	lsls	r1, r1, #3
 8001838:	eb11 0c00 	adds.w	ip, r1, r0
 800183c:	f143 0300 	adc.w	r3, r3, #0
 8001840:	0299      	lsls	r1, r3, #10
 8001842:	2300      	movs	r3, #0
 8001844:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001848:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800184c:	f7fe fcdc 	bl	8000208 <__aeabi_uldivmod>
 8001850:	e7d1      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001852:	4803      	ldr	r0, [pc, #12]	@ (8001860 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001854:	e7d7      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001858:	e7d5      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x46>
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	017d7840 	.word	0x017d7840
 8001864:	00f42400 	.word	0x00f42400

08001868 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001868:	2800      	cmp	r0, #0
 800186a:	f000 80a2 	beq.w	80019b2 <HAL_RCC_ClockConfig+0x14a>
{
 800186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001872:	460d      	mov	r5, r1
 8001874:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001876:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_ClockConfig+0x15c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	428b      	cmp	r3, r1
 8001880:	d20b      	bcs.n	800189a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4a50      	ldr	r2, [pc, #320]	@ (80019c4 <HAL_RCC_ClockConfig+0x15c>)
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	f023 030f 	bic.w	r3, r3, #15
 800188a:	430b      	orrs	r3, r1
 800188c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	428b      	cmp	r3, r1
 8001896:	f040 808e 	bne.w	80019b6 <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	f013 0f02 	tst.w	r3, #2
 80018a0:	d017      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	f013 0f04 	tst.w	r3, #4
 80018a6:	d004      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4a47      	ldr	r2, [pc, #284]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 80018aa:	6893      	ldr	r3, [r2, #8]
 80018ac:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018b0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	f013 0f08 	tst.w	r3, #8
 80018b8:	d004      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ba:	4a43      	ldr	r2, [pc, #268]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 80018bc:	6893      	ldr	r3, [r2, #8]
 80018be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 80018c6:	6893      	ldr	r3, [r2, #8]
 80018c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018cc:	68a1      	ldr	r1, [r4, #8]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f013 0f01 	tst.w	r3, #1
 80018d8:	d031      	beq.n	800193e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	6862      	ldr	r2, [r4, #4]
 80018dc:	2a01      	cmp	r2, #1
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e0:	2a02      	cmp	r2, #2
 80018e2:	d025      	beq.n	8001930 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f013 0f02 	tst.w	r3, #2
 80018ec:	d065      	beq.n	80019ba <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4936      	ldr	r1, [pc, #216]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 80018f0:	688b      	ldr	r3, [r1, #8]
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80018fa:	f7ff f847 	bl	800098c <HAL_GetTick>
 80018fe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001900:	4f31      	ldr	r7, [pc, #196]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	6862      	ldr	r2, [r4, #4]
 800190e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001912:	d014      	beq.n	800193e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f83a 	bl	800098c <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	4540      	cmp	r0, r8
 800191c:	d9f3      	bls.n	8001906 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
 8001920:	e045      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800192a:	d1e0      	bne.n	80018ee <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800192c:	2001      	movs	r0, #1
 800192e:	e03e      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001938:	d1d9      	bne.n	80018ee <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	e037      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_RCC_ClockConfig+0x15c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	42ab      	cmp	r3, r5
 8001948:	d90a      	bls.n	8001960 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_RCC_ClockConfig+0x15c>)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f023 030f 	bic.w	r3, r3, #15
 8001952:	432b      	orrs	r3, r5
 8001954:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	42ab      	cmp	r3, r5
 800195e:	d12e      	bne.n	80019be <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	f013 0f04 	tst.w	r3, #4
 8001966:	d006      	beq.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 800196a:	6893      	ldr	r3, [r2, #8]
 800196c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001970:	68e1      	ldr	r1, [r4, #12]
 8001972:	430b      	orrs	r3, r1
 8001974:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	f013 0f08 	tst.w	r3, #8
 800197c:	d007      	beq.n	800198e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 8001980:	6893      	ldr	r3, [r2, #8]
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001988:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800198c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198e:	f7ff ff17 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_RCC_ClockConfig+0x160>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_RCC_ClockConfig+0x164>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	40d8      	lsrs	r0, r3
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_ClockConfig+0x168>)
 80019a2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_RCC_ClockConfig+0x16c>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	f7fe ffb4 	bl	8000914 <HAL_InitTick>
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
}
 80019ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
}
 80019b4:	4770      	bx	lr
      return HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
 80019b8:	e7f9      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e7f7      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
 80019c0:	e7f5      	b.n	80019ae <HAL_RCC_ClockConfig+0x146>
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08002fcc 	.word	0x08002fcc
 80019d0:	2000002c 	.word	0x2000002c
 80019d4:	20000034 	.word	0x20000034

080019d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019dc:	b083      	sub	sp, #12
 80019de:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019e0:	6806      	ldr	r6, [r0, #0]
 80019e2:	f016 0601 	ands.w	r6, r6, #1
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80019fa:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80019fc:	fab6 f686 	clz	r6, r6
 8001a00:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a02:	6825      	ldr	r5, [r4, #0]
 8001a04:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 8001a08:	d010      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a0a:	4aab      	ldr	r2, [pc, #684]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001a0c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8001a10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001a14:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001a16:	430b      	orrs	r3, r1
 8001a18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a1c:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    {
      plli2sused = 1;
 8001a1e:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8001a22:	bf08      	it	eq
 8001a24:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a26:	fab5 f585 	clz	r5, r5
 8001a2a:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001a32:	d010      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a34:	4aa0      	ldr	r2, [pc, #640]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001a36:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8001a3a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a3e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001a40:	430b      	orrs	r3, r1
 8001a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a4c:	f000 8112 	beq.w	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf08      	it	eq
 8001a54:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a56:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8001a58:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a5c:	bf18      	it	ne
 8001a5e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a60:	f013 0f20 	tst.w	r3, #32
 8001a64:	f040 8108 	bne.w	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f013 0f10 	tst.w	r3, #16
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a70:	4b91      	ldr	r3, [pc, #580]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001a72:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001a76:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8001a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001a7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001a82:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001a84:	430a      	orrs	r2, r1
 8001a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8001a90:	d008      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a92:	4a89      	ldr	r2, [pc, #548]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001a94:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001a98:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001a9c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001aaa:	d008      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001aac:	4a82      	ldr	r2, [pc, #520]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001aae:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001ab2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001ab6:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001ac8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001acc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001ad0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ade:	d008      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ae0:	4a75      	ldr	r2, [pc, #468]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001ae2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001ae6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001aea:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001aec:	430b      	orrs	r3, r1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001af8:	d008      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001afa:	4a6f      	ldr	r2, [pc, #444]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001afc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b00:	f023 0303 	bic.w	r3, r3, #3
 8001b04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001b06:	430b      	orrs	r3, r1
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b12:	d008      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b14:	4a68      	ldr	r2, [pc, #416]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b16:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b1a:	f023 030c 	bic.w	r3, r3, #12
 8001b1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001b20:	430b      	orrs	r3, r1
 8001b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b2c:	d008      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b2e:	4a62      	ldr	r2, [pc, #392]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b30:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b34:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001b46:	d008      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b48:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001b52:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001b54:	430b      	orrs	r3, r1
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b60:	d008      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b62:	4a55      	ldr	r2, [pc, #340]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b64:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b6c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b82:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001b86:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001b94:	d008      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001b96:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b98:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001b9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ba0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001bb0:	4a41      	ldr	r2, [pc, #260]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001bb2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001bb6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bba:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001bc8:	d008      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bca:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001bcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001bd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001bd4:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001be2:	d00d      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001be4:	4a34      	ldr	r2, [pc, #208]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001be6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001bea:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001bee:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001bf6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    {
      pllsaiused = 1;
 8001bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bfc:	bf08      	it	eq
 8001bfe:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c00:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 8001c02:	f013 0f08 	tst.w	r3, #8
 8001c06:	bf18      	it	ne
 8001c08:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c0a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c10:	4a29      	ldr	r2, [pc, #164]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c12:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001c16:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001c1a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c3e:	2e01      	cmp	r6, #1
 8001c40:	d004      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c48:	f000 8102 	beq.w	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c56:	f7fe fe99 	bl	800098c <HAL_GetTick>
 8001c5a:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c5c:	4f16      	ldr	r7, [pc, #88]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001c64:	d076      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c66:	f7fe fe91 	bl	800098c <HAL_GetTick>
 8001c6a:	1b80      	subs	r0, r0, r6
 8001c6c:	2864      	cmp	r0, #100	@ 0x64
 8001c6e:	d9f6      	bls.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x286>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	e0f0      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      plli2sused = 1;
 8001c74:	2601      	movs	r6, #1
 8001c76:	e6ee      	b.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c96:	f7fe fe79 	bl	800098c <HAL_GetTick>
 8001c9a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c9c:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ca4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7fe fe6f 	bl	800098c <HAL_GetTick>
 8001cae:	1bc0      	subs	r0, r0, r7
 8001cb0:	2864      	cmp	r0, #100	@ 0x64
 8001cb2:	d9f5      	bls.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        return HAL_TIMEOUT;
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	e0ce      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc0:	4bab      	ldr	r3, [pc, #684]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001cc8:	d015      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001cca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001ccc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cd4:	4ba6      	ldr	r3, [pc, #664]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8001cde:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8001ce2:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8001ce6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001cea:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8001cec:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf0:	f013 0f01 	tst.w	r3, #1
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cf8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8001cfc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8001d00:	d01f      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8001d02:	4a9b      	ldr	r2, [pc, #620]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001d04:	6893      	ldr	r3, [r2, #8]
 8001d06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d0a:	6093      	str	r3, [r2, #8]
 8001d0c:	4a98      	ldr	r2, [pc, #608]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001d0e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8001d10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1a:	e6a5      	b.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fe36 	bl	800098c <HAL_GetTick>
 8001d20:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	f8df 824c 	ldr.w	r8, [pc, #588]	@ 8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8001d2e:	f013 0f02 	tst.w	r3, #2
 8001d32:	d1e0      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7fe fe2a 	bl	800098c <HAL_GetTick>
 8001d38:	1bc0      	subs	r0, r0, r7
 8001d3a:	4548      	cmp	r0, r9
 8001d3c:	d9f5      	bls.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8001d3e:	2003      	movs	r0, #3
 8001d40:	e089      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d42:	488b      	ldr	r0, [pc, #556]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001d44:	6882      	ldr	r2, [r0, #8]
 8001d46:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8001d4a:	498a      	ldr	r1, [pc, #552]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8001d4c:	4019      	ands	r1, r3
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	6082      	str	r2, [r0, #8]
 8001d52:	e7db      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x334>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f013 0f01 	tst.w	r3, #1
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8001d5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d5e:	b98b      	cbnz	r3, 8001d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d60:	4a83      	ldr	r2, [pc, #524]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001d62:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d66:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8001d72:	430b      	orrs	r3, r1
 8001d74:	6861      	ldr	r1, [r4, #4]
 8001d76:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001d7a:	68a1      	ldr	r1, [r4, #8]
 8001d7c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001d80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8001d8c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d8e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8001d92:	d006      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8001d94:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001d98:	d01e      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x400>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001da0:	d11a      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001da2:	4a73      	ldr	r2, [pc, #460]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001da4:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001da8:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6861      	ldr	r1, [r4, #4]
 8001db8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001dbc:	68e1      	ldr	r1, [r4, #12]
 8001dbe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001dc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dc6:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8001dca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	f021 011f 	bic.w	r1, r1, #31
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001dde:	d011      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001de0:	4a63      	ldr	r2, [pc, #396]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001de2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001de6:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001dea:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001dee:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8001df2:	430b      	orrs	r3, r1
 8001df4:	6861      	ldr	r1, [r4, #4]
 8001df6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001dfa:	6921      	ldr	r1, [r4, #16]
 8001dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001e00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e0a:	d00d      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e0c:	6862      	ldr	r2, [r4, #4]
 8001e0e:	6923      	ldr	r3, [r4, #16]
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e16:	68e2      	ldr	r2, [r4, #12]
 8001e18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e1c:	68a2      	ldr	r2, [r4, #8]
 8001e1e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001e22:	4a53      	ldr	r2, [pc, #332]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e28:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e32:	f7fe fdab 	bl	800098c <HAL_GetTick>
 8001e36:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e38:	4f4d      	ldr	r7, [pc, #308]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001e40:	d106      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e42:	f7fe fda3 	bl	800098c <HAL_GetTick>
 8001e46:	1b80      	subs	r0, r0, r6
 8001e48:	2864      	cmp	r0, #100	@ 0x64
 8001e4a:	d9f6      	bls.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	e002      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e50:	2d01      	cmp	r5, #1
 8001e52:	d003      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x484>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
}
 8001e56:	b003      	add	sp, #12
 8001e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8001e5c:	4a44      	ldr	r2, [pc, #272]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e66:	f7fe fd91 	bl	800098c <HAL_GetTick>
 8001e6a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e6c:	4e40      	ldr	r6, [pc, #256]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e6e:	6833      	ldr	r3, [r6, #0]
 8001e70:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001e74:	d006      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e76:	f7fe fd89 	bl	800098c <HAL_GetTick>
 8001e7a:	1b40      	subs	r0, r0, r5
 8001e7c:	2864      	cmp	r0, #100	@ 0x64
 8001e7e:	d9f6      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8001e80:	2003      	movs	r0, #3
 8001e82:	e7e8      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8001e8c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001e8e:	b122      	cbz	r2, 8001e9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001e90:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001e94:	d01d      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e98:	b9db      	cbnz	r3, 8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e9a:	4a35      	ldr	r2, [pc, #212]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001e9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ea0:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6961      	ldr	r1, [r4, #20]
 8001eb0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001eb4:	69a1      	ldr	r1, [r4, #24]
 8001eb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001eba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ebe:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8001ec2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ec4:	3901      	subs	r1, #1
 8001ec6:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001eca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001eda:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8001edc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ee0:	d031      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f013 0f08 	tst.w	r3, #8
 8001ee8:	d019      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x546>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001eec:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ef0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef8:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6961      	ldr	r1, [r4, #20]
 8001f00:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f04:	69e1      	ldr	r1, [r4, #28]
 8001f06:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001f0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001f0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8001f12:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001f16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001f1e:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f28:	f7fe fd30 	bl	800098c <HAL_GetTick>
 8001f2c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f2e:	4d10      	ldr	r5, [pc, #64]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001f36:	d119      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x594>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f38:	f7fe fd28 	bl	800098c <HAL_GetTick>
 8001f3c:	1b00      	subs	r0, r0, r4
 8001f3e:	2864      	cmp	r0, #100	@ 0x64
 8001f40:	d9f6      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x558>
        return HAL_TIMEOUT;
 8001f42:	2003      	movs	r0, #3
 8001f44:	e787      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8001f48:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f4c:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001f50:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001f54:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6961      	ldr	r1, [r4, #20]
 8001f5c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f60:	6a21      	ldr	r1, [r4, #32]
 8001f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f6a:	e7ba      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  return HAL_OK;
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	e772      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	0ffffcff 	.word	0x0ffffcff

08001f78 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f7a:	680b      	ldr	r3, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f84:	fa33 f402 	lsrs.w	r4, r3, r2
 8001f88:	f000 8090 	beq.w	80020ac <LL_GPIO_Init+0x134>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f8c:	2401      	movs	r4, #1
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f8e:	f04f 0e03 	mov.w	lr, #3
 8001f92:	e04e      	b.n	8002032 <LL_GPIO_Init+0xba>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f94:	6886      	ldr	r6, [r0, #8]
 8001f96:	fa93 f5a3 	rbit	r5, r3
 8001f9a:	fab5 f585 	clz	r5, r5
 8001f9e:	fa93 fca3 	rbit	ip, r3
 8001fa2:	fabc fc8c 	clz	ip, ip
 8001fa6:	006d      	lsls	r5, r5, #1
 8001fa8:	fa0e f505 	lsl.w	r5, lr, r5
 8001fac:	ea26 0505 	bic.w	r5, r6, r5
 8001fb0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001fb4:	688e      	ldr	r6, [r1, #8]
 8001fb6:	fa06 f60c 	lsl.w	r6, r6, ip
 8001fba:	4335      	orrs	r5, r6
 8001fbc:	6085      	str	r5, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fbe:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fc0:	6845      	ldr	r5, [r0, #4]
 8001fc2:	ea25 0507 	bic.w	r5, r5, r7
 8001fc6:	68ce      	ldr	r6, [r1, #12]
 8001fc8:	fb06 f707 	mul.w	r7, r6, r7
 8001fcc:	433d      	orrs	r5, r7
 8001fce:	6045      	str	r5, [r0, #4]
}
 8001fd0:	e037      	b.n	8002042 <LL_GPIO_Init+0xca>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001fd2:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 8001fd4:	0a1d      	lsrs	r5, r3, #8
 8001fd6:	fa95 f6a5 	rbit	r6, r5
 8001fda:	fab6 f686 	clz	r6, r6
 8001fde:	fa95 f5a5 	rbit	r5, r5
 8001fe2:	fab5 f585 	clz	r5, r5
 8001fe6:	00b6      	lsls	r6, r6, #2
 8001fe8:	f04f 0c0f 	mov.w	ip, #15
 8001fec:	fa0c f606 	lsl.w	r6, ip, r6
 8001ff0:	ea27 0706 	bic.w	r7, r7, r6
 8001ff4:	00ad      	lsls	r5, r5, #2
 8001ff6:	694e      	ldr	r6, [r1, #20]
 8001ff8:	40ae      	lsls	r6, r5
 8001ffa:	433e      	orrs	r6, r7
 8001ffc:	6246      	str	r6, [r0, #36]	@ 0x24
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ffe:	6805      	ldr	r5, [r0, #0]
 8002000:	fa93 fca3 	rbit	ip, r3
 8002004:	fabc fc8c 	clz	ip, ip
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002014:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002018:	ea25 0c0c 	bic.w	ip, r5, ip
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	684d      	ldr	r5, [r1, #4]
 8002020:	409d      	lsls	r5, r3
 8002022:	ea4c 0505 	orr.w	r5, ip, r5
 8002026:	6005      	str	r5, [r0, #0]
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8002028:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800202a:	680b      	ldr	r3, [r1, #0]
 800202c:	fa33 f502 	lsrs.w	r5, r3, r2
 8002030:	d03c      	beq.n	80020ac <LL_GPIO_Init+0x134>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002032:	fa04 f502 	lsl.w	r5, r4, r2
    if (currentpin)
 8002036:	402b      	ands	r3, r5
 8002038:	d0f6      	beq.n	8002028 <LL_GPIO_Init+0xb0>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800203a:	684d      	ldr	r5, [r1, #4]
 800203c:	3d01      	subs	r5, #1
 800203e:	2d01      	cmp	r5, #1
 8002040:	d9a8      	bls.n	8001f94 <LL_GPIO_Init+0x1c>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002042:	68c5      	ldr	r5, [r0, #12]
 8002044:	fa93 fca3 	rbit	ip, r3
 8002048:	fabc fc8c 	clz	ip, ip
 800204c:	fa93 f6a3 	rbit	r6, r3
 8002050:	fab6 f686 	clz	r6, r6
 8002054:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002058:	fa0e fc0c 	lsl.w	ip, lr, ip
 800205c:	ea25 050c 	bic.w	r5, r5, ip
 8002060:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 8002064:	690e      	ldr	r6, [r1, #16]
 8002066:	fa06 f60c 	lsl.w	r6, r6, ip
 800206a:	4335      	orrs	r5, r6
 800206c:	60c5      	str	r5, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800206e:	684d      	ldr	r5, [r1, #4]
 8002070:	2d02      	cmp	r5, #2
 8002072:	d1c4      	bne.n	8001ffe <LL_GPIO_Init+0x86>
 8002074:	fa93 f5a3 	rbit	r5, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002078:	fab5 f585 	clz	r5, r5
 800207c:	2d07      	cmp	r5, #7
 800207e:	d8a8      	bhi.n	8001fd2 <LL_GPIO_Init+0x5a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002080:	6a05      	ldr	r5, [r0, #32]
 8002082:	fa93 f6a3 	rbit	r6, r3
 8002086:	fab6 f686 	clz	r6, r6
 800208a:	fa93 f7a3 	rbit	r7, r3
 800208e:	fab7 f787 	clz	r7, r7
 8002092:	00b6      	lsls	r6, r6, #2
 8002094:	f04f 0c0f 	mov.w	ip, #15
 8002098:	fa0c f606 	lsl.w	r6, ip, r6
 800209c:	ea25 0506 	bic.w	r5, r5, r6
 80020a0:	00bf      	lsls	r7, r7, #2
 80020a2:	694e      	ldr	r6, [r1, #20]
 80020a4:	40be      	lsls	r6, r7
 80020a6:	4335      	orrs	r5, r6
 80020a8:	6205      	str	r5, [r0, #32]
}
 80020aa:	e7a8      	b.n	8001ffe <LL_GPIO_Init+0x86>
  }
  return (SUCCESS);
}
 80020ac:	2000      	movs	r0, #0
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b0 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <RCC_GetHCLKClockFreq+0x10>)
 80020b2:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80020b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020b8:	4a02      	ldr	r2, [pc, #8]	@ (80020c4 <RCC_GetHCLKClockFreq+0x14>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80020bc:	40d8      	lsrs	r0, r3
 80020be:	4770      	bx	lr
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08002fcc 	.word	0x08002fcc

080020c8 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <RCC_GetPCLK1ClockFreq+0x10>)
 80020ca:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80020cc:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020d0:	4a02      	ldr	r2, [pc, #8]	@ (80020dc <RCC_GetPCLK1ClockFreq+0x14>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80020d4:	40d8      	lsrs	r0, r3
 80020d6:	4770      	bx	lr
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08002fc4 	.word	0x08002fc4

080020e0 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <RCC_GetPCLK2ClockFreq+0x10>)
 80020e2:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80020e4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020e8:	4a02      	ldr	r2, [pc, #8]	@ (80020f4 <RCC_GetPCLK2ClockFreq+0x14>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08002fc4 	.word	0x08002fc4

080020f8 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 80020fa:	685b      	ldr	r3, [r3, #4]
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80020fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002104:	bf08      	it	eq
 8002106:	4618      	moveq	r0, r3
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800210a:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800210c:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800210e:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002110:	f001 013f 	and.w	r1, r1, #63	@ 0x3f

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002114:	fbb0 f0f1 	udiv	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002118:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800211c:	fb02 f000 	mul.w	r0, r2, r0
 8002120:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002124:	3301      	adds	r3, #1
 8002126:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8002128:	fbb0 f0f3 	udiv	r0, r0, r3
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	017d7840 	.word	0x017d7840
 8002138:	00f42400 	.word	0x00f42400

0800213c <RCC_GetSystemClockFreq>:
{
 800213c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <RCC_GetSystemClockFreq+0x20>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002146:	2b04      	cmp	r3, #4
 8002148:	d004      	beq.n	8002154 <RCC_GetSystemClockFreq+0x18>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d104      	bne.n	8002158 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800214e:	f7ff ffd3 	bl	80020f8 <RCC_PLL_GetFreqDomain_SYS>
}
 8002152:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetSysClkSource())
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <RCC_GetSystemClockFreq+0x24>)
 8002156:	e7fc      	b.n	8002152 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 800215a:	e7fa      	b.n	8002152 <RCC_GetSystemClockFreq+0x16>
 800215c:	40023800 	.word	0x40023800
 8002160:	017d7840 	.word	0x017d7840
 8002164:	00f42400 	.word	0x00f42400

08002168 <LL_RCC_GetUSARTClockFreq>:
{
 8002168:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800216a:	2803      	cmp	r0, #3
 800216c:	d008      	beq.n	8002180 <LL_RCC_GetUSARTClockFreq+0x18>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800216e:	280c      	cmp	r0, #12
 8002170:	d02d      	beq.n	80021ce <LL_RCC_GetUSARTClockFreq+0x66>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8002172:	f5b0 6f40 	cmp.w	r0, #3072	@ 0xc00
 8002176:	d051      	beq.n	800221c <LL_RCC_GetUSARTClockFreq+0xb4>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002178:	2830      	cmp	r0, #48	@ 0x30
 800217a:	d077      	beq.n	800226c <LL_RCC_GetUSARTClockFreq+0x104>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8002180:	4b4e      	ldr	r3, [pc, #312]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800218e:	4a4c      	ldr	r2, [pc, #304]	@ (80022c0 <LL_RCC_GetUSARTClockFreq+0x158>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d008      	beq.n	80021a6 <LL_RCC_GetUSARTClockFreq+0x3e>
 8002194:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8002198:	d00c      	beq.n	80021b4 <LL_RCC_GetUSARTClockFreq+0x4c>
 800219a:	3a01      	subs	r2, #1
 800219c:	4293      	cmp	r3, r2
 800219e:	d10f      	bne.n	80021c0 <LL_RCC_GetUSARTClockFreq+0x58>
        usart_frequency = RCC_GetSystemClockFreq();
 80021a0:	f7ff ffcc 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 80021a4:	e7eb      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80021a6:	4b45      	ldr	r3, [pc, #276]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80021a8:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80021aa:	f010 0002 	ands.w	r0, r0, #2
 80021ae:	d0e6      	beq.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 80021b0:	4844      	ldr	r0, [pc, #272]	@ (80022c4 <LL_RCC_GetUSARTClockFreq+0x15c>)
 80021b2:	e7e4      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80021b4:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80021b6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 80021b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80021bc:	03c0      	lsls	r0, r0, #15
 80021be:	e7de      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021c0:	f7ff ffbc 	bl	800213c <RCC_GetSystemClockFreq>
 80021c4:	f7ff ff74 	bl	80020b0 <RCC_GetHCLKClockFreq>
 80021c8:	f7ff ff8a 	bl	80020e0 <RCC_GetPCLK2ClockFreq>
        break;
 80021cc:	e7d7      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80021ce:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80021dc:	4a3a      	ldr	r2, [pc, #232]	@ (80022c8 <LL_RCC_GetUSARTClockFreq+0x160>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d008      	beq.n	80021f4 <LL_RCC_GetUSARTClockFreq+0x8c>
 80021e2:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 80021e6:	d00c      	beq.n	8002202 <LL_RCC_GetUSARTClockFreq+0x9a>
 80021e8:	3a04      	subs	r2, #4
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10f      	bne.n	800220e <LL_RCC_GetUSARTClockFreq+0xa6>
        usart_frequency = RCC_GetSystemClockFreq();
 80021ee:	f7ff ffa5 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 80021f2:	e7c4      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80021f6:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80021f8:	f010 0002 	ands.w	r0, r0, #2
 80021fc:	d0bf      	beq.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 80021fe:	4831      	ldr	r0, [pc, #196]	@ (80022c4 <LL_RCC_GetUSARTClockFreq+0x15c>)
 8002200:	e7bd      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002202:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 8002204:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 8002206:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800220a:	03c0      	lsls	r0, r0, #15
 800220c:	e7b7      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800220e:	f7ff ff95 	bl	800213c <RCC_GetSystemClockFreq>
 8002212:	f7ff ff4d 	bl	80020b0 <RCC_GetHCLKClockFreq>
 8002216:	f7ff ff57 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
        break;
 800221a:	e7b0      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800221c:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002222:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002226:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800222a:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <LL_RCC_GetUSARTClockFreq+0x164>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <LL_RCC_GetUSARTClockFreq+0xdc>
 8002230:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8002234:	d00d      	beq.n	8002252 <LL_RCC_GetUSARTClockFreq+0xea>
 8002236:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800223a:	4293      	cmp	r3, r2
 800223c:	d10f      	bne.n	800225e <LL_RCC_GetUSARTClockFreq+0xf6>
        usart_frequency = RCC_GetSystemClockFreq();
 800223e:	f7ff ff7d 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 8002242:	e79c      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 8002246:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8002248:	f010 0002 	ands.w	r0, r0, #2
 800224c:	d097      	beq.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 800224e:	481d      	ldr	r0, [pc, #116]	@ (80022c4 <LL_RCC_GetUSARTClockFreq+0x15c>)
 8002250:	e795      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 8002254:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 8002256:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800225a:	03c0      	lsls	r0, r0, #15
 800225c:	e78f      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800225e:	f7ff ff6d 	bl	800213c <RCC_GetSystemClockFreq>
 8002262:	f7ff ff25 	bl	80020b0 <RCC_GetHCLKClockFreq>
 8002266:	f7ff ff3b 	bl	80020e0 <RCC_GetPCLK2ClockFreq>
        break;
 800226a:	e788      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002276:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800227a:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <LL_RCC_GetUSARTClockFreq+0x168>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d008      	beq.n	8002292 <LL_RCC_GetUSARTClockFreq+0x12a>
 8002280:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002284:	d00d      	beq.n	80022a2 <LL_RCC_GetUSARTClockFreq+0x13a>
 8002286:	3a10      	subs	r2, #16
 8002288:	4293      	cmp	r3, r2
 800228a:	d110      	bne.n	80022ae <LL_RCC_GetUSARTClockFreq+0x146>
          usart_frequency = RCC_GetSystemClockFreq();
 800228c:	f7ff ff56 	bl	800213c <RCC_GetSystemClockFreq>
          break;
 8002290:	e775      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 8002294:	6818      	ldr	r0, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 8002296:	f010 0002 	ands.w	r0, r0, #2
 800229a:	f43f af70 	beq.w	800217e <LL_RCC_GetUSARTClockFreq+0x16>
            usart_frequency = HSI_VALUE;
 800229e:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <LL_RCC_GetUSARTClockFreq+0x15c>)
  return usart_frequency;
 80022a0:	e76d      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80022a4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
          if (LL_RCC_LSE_IsReady())
 80022a6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80022aa:	03c0      	lsls	r0, r0, #15
 80022ac:	e767      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80022ae:	f7ff ff45 	bl	800213c <RCC_GetSystemClockFreq>
 80022b2:	f7ff fefd 	bl	80020b0 <RCC_GetHCLKClockFreq>
 80022b6:	f7ff ff07 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
          break;
 80022ba:	e760      	b.n	800217e <LL_RCC_GetUSARTClockFreq+0x16>
 80022bc:	40023800 	.word	0x40023800
 80022c0:	00030002 	.word	0x00030002
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	000c0008 	.word	0x000c0008
 80022cc:	0c000800 	.word	0x0c000800
 80022d0:	00300020 	.word	0x00300020

080022d4 <LL_RCC_GetUARTClockFreq>:
{
 80022d4:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80022d6:	28c0      	cmp	r0, #192	@ 0xc0
 80022d8:	d00a      	beq.n	80022f0 <LL_RCC_GetUARTClockFreq+0x1c>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80022da:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
 80022de:	d02e      	beq.n	800233e <LL_RCC_GetUARTClockFreq+0x6a>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 80022e0:	f5b0 5f40 	cmp.w	r0, #12288	@ 0x3000
 80022e4:	d053      	beq.n	800238e <LL_RCC_GetUARTClockFreq+0xba>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 80022e6:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 80022ea:	d078      	beq.n	80023de <LL_RCC_GetUARTClockFreq+0x10a>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80022ec:	2000      	movs	r0, #0
}
 80022ee:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80022f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022fa:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80022fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002434 <LL_RCC_GetUARTClockFreq+0x160>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d008      	beq.n	8002316 <LL_RCC_GetUARTClockFreq+0x42>
 8002304:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002308:	d00c      	beq.n	8002324 <LL_RCC_GetUARTClockFreq+0x50>
 800230a:	3a40      	subs	r2, #64	@ 0x40
 800230c:	4293      	cmp	r3, r2
 800230e:	d10f      	bne.n	8002330 <LL_RCC_GetUARTClockFreq+0x5c>
        uart_frequency = RCC_GetSystemClockFreq();
 8002310:	f7ff ff14 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 8002314:	e7eb      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002316:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002318:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 800231a:	f010 0002 	ands.w	r0, r0, #2
 800231e:	d0e6      	beq.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8002320:	4845      	ldr	r0, [pc, #276]	@ (8002438 <LL_RCC_GetUARTClockFreq+0x164>)
 8002322:	e7e4      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002324:	4b42      	ldr	r3, [pc, #264]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002326:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 8002328:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800232c:	03c0      	lsls	r0, r0, #15
 800232e:	e7de      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002330:	f7ff ff04 	bl	800213c <RCC_GetSystemClockFreq>
 8002334:	f7ff febc 	bl	80020b0 <RCC_GetHCLKClockFreq>
 8002338:	f7ff fec6 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
        break;
 800233c:	e7d7      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002348:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800234c:	4a3b      	ldr	r2, [pc, #236]	@ (800243c <LL_RCC_GetUARTClockFreq+0x168>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d009      	beq.n	8002366 <LL_RCC_GetUARTClockFreq+0x92>
 8002352:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002356:	d00d      	beq.n	8002374 <LL_RCC_GetUARTClockFreq+0xa0>
 8002358:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800235c:	4293      	cmp	r3, r2
 800235e:	d10f      	bne.n	8002380 <LL_RCC_GetUARTClockFreq+0xac>
        uart_frequency = RCC_GetSystemClockFreq();
 8002360:	f7ff feec 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 8002364:	e7c3      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002366:	4b32      	ldr	r3, [pc, #200]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002368:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 800236a:	f010 0002 	ands.w	r0, r0, #2
 800236e:	d0be      	beq.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8002370:	4831      	ldr	r0, [pc, #196]	@ (8002438 <LL_RCC_GetUARTClockFreq+0x164>)
 8002372:	e7bc      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002376:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 8002378:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800237c:	03c0      	lsls	r0, r0, #15
 800237e:	e7b6      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002380:	f7ff fedc 	bl	800213c <RCC_GetSystemClockFreq>
 8002384:	f7ff fe94 	bl	80020b0 <RCC_GetHCLKClockFreq>
 8002388:	f7ff fe9e 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
        break;
 800238c:	e7af      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 800238e:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002394:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002398:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800239c:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <LL_RCC_GetUARTClockFreq+0x16c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <LL_RCC_GetUARTClockFreq+0xe2>
 80023a2:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 80023a6:	d00d      	beq.n	80023c4 <LL_RCC_GetUARTClockFreq+0xf0>
 80023a8:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10f      	bne.n	80023d0 <LL_RCC_GetUARTClockFreq+0xfc>
        uart_frequency = RCC_GetSystemClockFreq();
 80023b0:	f7ff fec4 	bl	800213c <RCC_GetSystemClockFreq>
        break;
 80023b4:	e79b      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 80023b8:	6818      	ldr	r0, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80023ba:	f010 0002 	ands.w	r0, r0, #2
 80023be:	d096      	beq.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 80023c0:	481d      	ldr	r0, [pc, #116]	@ (8002438 <LL_RCC_GetUARTClockFreq+0x164>)
 80023c2:	e794      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 80023c6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
        if (LL_RCC_LSE_IsReady())
 80023c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80023cc:	03c0      	lsls	r0, r0, #15
 80023ce:	e78e      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023d0:	f7ff feb4 	bl	800213c <RCC_GetSystemClockFreq>
 80023d4:	f7ff fe6c 	bl	80020b0 <RCC_GetHCLKClockFreq>
 80023d8:	f7ff fe76 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
        break;
 80023dc:	e787      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80023ec:	4a15      	ldr	r2, [pc, #84]	@ (8002444 <LL_RCC_GetUARTClockFreq+0x170>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <LL_RCC_GetUARTClockFreq+0x132>
 80023f2:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80023f6:	d00e      	beq.n	8002416 <LL_RCC_GetUARTClockFreq+0x142>
 80023f8:	f5a2 4280 	sub.w	r2, r2, #16384	@ 0x4000
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d110      	bne.n	8002422 <LL_RCC_GetUARTClockFreq+0x14e>
          uart_frequency = RCC_GetSystemClockFreq();
 8002400:	f7ff fe9c 	bl	800213c <RCC_GetSystemClockFreq>
          break;
 8002404:	e773      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002408:	6818      	ldr	r0, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 800240a:	f010 0002 	ands.w	r0, r0, #2
 800240e:	f43f af6e 	beq.w	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
            uart_frequency = HSI_VALUE;
 8002412:	4809      	ldr	r0, [pc, #36]	@ (8002438 <LL_RCC_GetUARTClockFreq+0x164>)
  return uart_frequency;
 8002414:	e76b      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <LL_RCC_GetUARTClockFreq+0x15c>)
 8002418:	6f18      	ldr	r0, [r3, #112]	@ 0x70
          if (LL_RCC_LSE_IsReady())
 800241a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800241e:	03c0      	lsls	r0, r0, #15
 8002420:	e765      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002422:	f7ff fe8b 	bl	800213c <RCC_GetSystemClockFreq>
 8002426:	f7ff fe43 	bl	80020b0 <RCC_GetHCLKClockFreq>
 800242a:	f7ff fe4d 	bl	80020c8 <RCC_GetPCLK1ClockFreq>
          break;
 800242e:	e75e      	b.n	80022ee <LL_RCC_GetUARTClockFreq+0x1a>
 8002430:	40023800 	.word	0x40023800
 8002434:	00c00080 	.word	0x00c00080
 8002438:	00f42400 	.word	0x00f42400
 800243c:	03000200 	.word	0x03000200
 8002440:	30002000 	.word	0x30002000
 8002444:	c0008000 	.word	0xc0008000

08002448 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002448:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800244a:	6803      	ldr	r3, [r0, #0]
 800244c:	f013 0f01 	tst.w	r3, #1
 8002450:	d176      	bne.n	8002540 <LL_USART_Init+0xf8>
 8002452:	4604      	mov	r4, r0
 8002454:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002456:	6801      	ldr	r1, [r0, #0]
 8002458:	686b      	ldr	r3, [r5, #4]
 800245a:	68ea      	ldr	r2, [r5, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	692a      	ldr	r2, [r5, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	69aa      	ldr	r2, [r5, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	4a38      	ldr	r2, [pc, #224]	@ (8002548 <LL_USART_Init+0x100>)
 8002468:	400a      	ands	r2, r1
 800246a:	4313      	orrs	r3, r2
 800246c:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800246e:	6843      	ldr	r3, [r0, #4]
 8002470:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002474:	68aa      	ldr	r2, [r5, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800247a:	6883      	ldr	r3, [r0, #8]
 800247c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002480:	696a      	ldr	r2, [r5, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <LL_USART_Init+0x104>)
 8002488:	4298      	cmp	r0, r3
 800248a:	d016      	beq.n	80024ba <LL_USART_Init+0x72>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800248c:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <LL_USART_Init+0x108>)
 800248e:	4298      	cmp	r0, r3
 8002490:	d01c      	beq.n	80024cc <LL_USART_Init+0x84>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8002492:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <LL_USART_Init+0x10c>)
 8002494:	4298      	cmp	r0, r3
 8002496:	d01d      	beq.n	80024d4 <LL_USART_Init+0x8c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
    else if (USARTx == UART4)
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <LL_USART_Init+0x110>)
 800249a:	4298      	cmp	r0, r3
 800249c:	d01e      	beq.n	80024dc <LL_USART_Init+0x94>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
    else if (USARTx == UART5)
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <LL_USART_Init+0x114>)
 80024a0:	4298      	cmp	r0, r3
 80024a2:	d01f      	beq.n	80024e4 <LL_USART_Init+0x9c>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
    }
    else if (USARTx == USART6)
 80024a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002560 <LL_USART_Init+0x118>)
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d021      	beq.n	80024ee <LL_USART_Init+0xa6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
    }
    else if (USARTx == UART7)
 80024aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <LL_USART_Init+0x11c>)
 80024ac:	4298      	cmp	r0, r3
 80024ae:	d023      	beq.n	80024f8 <LL_USART_Init+0xb0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
    }
    else if (USARTx == UART8)
 80024b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <LL_USART_Init+0x120>)
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d025      	beq.n	8002502 <LL_USART_Init+0xba>
  ErrorStatus status = ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	e043      	b.n	8002542 <LL_USART_Init+0xfa>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f7ff fe54 	bl	8002168 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d03f      	beq.n	8002544 <LL_USART_Init+0xfc>
        && (USART_InitStruct->BaudRate != 0U))
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	bb0b      	cbnz	r3, 800250c <LL_USART_Init+0xc4>
  ErrorStatus status = ERROR;
 80024c8:	2001      	movs	r0, #1
 80024ca:	e03a      	b.n	8002542 <LL_USART_Init+0xfa>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80024cc:	200c      	movs	r0, #12
 80024ce:	f7ff fe4b 	bl	8002168 <LL_RCC_GetUSARTClockFreq>
 80024d2:	e7f5      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80024d4:	2030      	movs	r0, #48	@ 0x30
 80024d6:	f7ff fe47 	bl	8002168 <LL_RCC_GetUSARTClockFreq>
 80024da:	e7f1      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80024dc:	20c0      	movs	r0, #192	@ 0xc0
 80024de:	f7ff fef9 	bl	80022d4 <LL_RCC_GetUARTClockFreq>
 80024e2:	e7ed      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80024e4:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80024e8:	f7ff fef4 	bl	80022d4 <LL_RCC_GetUARTClockFreq>
 80024ec:	e7e8      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 80024ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80024f2:	f7ff fe39 	bl	8002168 <LL_RCC_GetUSARTClockFreq>
 80024f6:	e7e3      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 80024f8:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 80024fc:	f7ff feea 	bl	80022d4 <LL_RCC_GetUARTClockFreq>
 8002500:	e7de      	b.n	80024c0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8002502:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8002506:	f7ff fee5 	bl	80022d4 <LL_RCC_GetUARTClockFreq>
 800250a:	e7d9      	b.n	80024c0 <LL_USART_Init+0x78>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800250c:	69aa      	ldr	r2, [r5, #24]
 800250e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002512:	d007      	beq.n	8002524 <LL_USART_Init+0xdc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002514:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002518:	fbb0 f3f3 	udiv	r3, r0, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	60e3      	str	r3, [r4, #12]
    {
      status = SUCCESS;
 8002520:	2000      	movs	r0, #0
 8002522:	e00e      	b.n	8002542 <LL_USART_Init+0xfa>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002524:	085a      	lsrs	r2, r3, #1
 8002526:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
    brrtemp = usartdiv & 0xFFF0U;
 800252e:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002532:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002534:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002538:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800253a:	60e3      	str	r3, [r4, #12]
 800253c:	2000      	movs	r0, #0
 800253e:	e000      	b.n	8002542 <LL_USART_Init+0xfa>
  ErrorStatus status = ERROR;
 8002540:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002542:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8002544:	2001      	movs	r0, #1
 8002546:	e7fc      	b.n	8002542 <LL_USART_Init+0xfa>
 8002548:	efff69f3 	.word	0xefff69f3
 800254c:	40011000 	.word	0x40011000
 8002550:	40004400 	.word	0x40004400
 8002554:	40004800 	.word	0x40004800
 8002558:	40004c00 	.word	0x40004c00
 800255c:	40005000 	.word	0x40005000
 8002560:	40011400 	.word	0x40011400
 8002564:	40007800 	.word	0x40007800
 8002568:	40007c00 	.word	0x40007c00

0800256c <rbuffer_init>:
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
	__disable_irq();
	rb->in = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
	rb->out = 0;
 8002574:	f8a0 3102 	strh.w	r3, [r0, #258]	@ 0x102
	rb->count = 0;
 8002578:	f8a0 3104 	strh.w	r3, [r0, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 800257c:	b662      	cpsie	i
	__enable_irq();
}
 800257e:	4770      	bx	lr

08002580 <rbuffer_full>:
uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
	return (rb->count == (uint16_t) RingBufferSize);
 8002580:	f8b0 0104 	ldrh.w	r0, [r0, #260]	@ 0x104
 8002584:	b280      	uxth	r0, r0
}
 8002586:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800258a:	bf14      	ite	ne
 800258c:	2000      	movne	r0, #0
 800258e:	2001      	moveq	r0, #1
 8002590:	4770      	bx	lr

08002592 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
	return (rb->count == 0);
 8002592:	f8b0 0104 	ldrh.w	r0, [r0, #260]	@ 0x104
 8002596:	b280      	uxth	r0, r0
}
 8002598:	fab0 f080 	clz	r0, r0
 800259c:	0940      	lsrs	r0, r0, #5
 800259e:	4770      	bx	lr

080025a0 <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
	*(rb->buffer + rb->in) = data;
 80025a0:	f8b1 3100 	ldrh.w	r3, [r1, #256]	@ 0x100
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	54c8      	strb	r0, [r1, r3]
  __ASM volatile ("cpsid i" : : : "memory");
 80025a8:	b672      	cpsid	i
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 80025aa:	f8b1 3100 	ldrh.w	r3, [r1, #256]	@ 0x100
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f8a1 3100 	strh.w	r3, [r1, #256]	@ 0x100
	rb->count++;
 80025b6:	f8b1 3104 	ldrh.w	r3, [r1, #260]	@ 0x104
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f8a1 3104 	strh.w	r3, [r1, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80025c2:	b662      	cpsie	i
	__enable_irq();
}
 80025c4:	4770      	bx	lr

080025c6 <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 80025c6:	4603      	mov	r3, r0
	char data = *(rb->buffer + rb->out);
 80025c8:	f8b0 2102 	ldrh.w	r2, [r0, #258]	@ 0x102
 80025cc:	b292      	uxth	r2, r2
 80025ce:	5c80      	ldrb	r0, [r0, r2]
 80025d0:	b2c0      	uxtb	r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80025d2:	b672      	cpsid	i
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 80025d4:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 80025d8:	3201      	adds	r2, #1
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 80025e0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80025e4:	3a01      	subs	r2, #1
 80025e6:	b292      	uxth	r2, r2
 80025e8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80025ec:	b662      	cpsie	i
	__enable_irq();
	return data;
}
 80025ee:	4770      	bx	lr

080025f0 <USART6_IRQ>:
usart_meta_t *p_USART6_meta = &USART6_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART6_IRQ(void) {
 80025f0:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <USART6_IRQ+0xa4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80025fa:	d014      	beq.n	8002626 <USART6_IRQ+0x36>
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART6)) {
        if (!rbuffer_empty(&p_USART6_meta->rb_tx)) {
 80025fc:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <USART6_IRQ+0xa8>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 8002604:	f7ff ffc5 	bl	8002592 <rbuffer_empty>
 8002608:	2800      	cmp	r0, #0
 800260a:	d031      	beq.n	8002670 <USART6_IRQ+0x80>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	4a23      	ldr	r2, [pc, #140]	@ (800269c <USART6_IRQ+0xac>)
 800260e:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8002612:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 800261e:	e840 3100 	strex	r1, r3, [r0]
 8002622:	2900      	cmp	r1, #0
 8002624:	d1f3      	bne.n	800260e <USART6_IRQ+0x1e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <USART6_IRQ+0xa4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f013 0f20 	tst.w	r3, #32
 800262e:	d02f      	beq.n	8002690 <USART6_IRQ+0xa0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8002630:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <USART6_IRQ+0xa4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f013 0f20 	tst.w	r3, #32
 8002638:	d02a      	beq.n	8002690 <USART6_IRQ+0xa0>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <USART6_IRQ+0xa4>)
 800263c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f013 0f08 	tst.w	r3, #8
 8002644:	d11d      	bne.n	8002682 <USART6_IRQ+0x92>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <USART6_IRQ+0xa4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f013 0f02 	tst.w	r3, #2
 800264e:	d118      	bne.n	8002682 <USART6_IRQ+0x92>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <USART6_IRQ+0xa4>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f013 0f04 	tst.w	r3, #4
 8002658:	d113      	bne.n	8002682 <USART6_IRQ+0x92>
            (LL_USART_IsActiveFlag_NE(USART6) != RESET)) {
            LL_USART_ClearFlag_ORE(USART6);
            LL_USART_ClearFlag_FE(USART6);
            LL_USART_ClearFlag_NE(USART6);
        } else {
            if (!rbuffer_full(&p_USART6_meta->rb_rx)) {
 800265a:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <USART6_IRQ+0xa8>)
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	f7ff ff8f 	bl	8002580 <rbuffer_full>
 8002662:	b9a8      	cbnz	r0, 8002690 <USART6_IRQ+0xa0>
                rbuffer_insert(data, &p_USART6_meta->rb_rx);
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <USART6_IRQ+0xa8>)
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	b2e0      	uxtb	r0, r4
 800266a:	f7ff ff99 	bl	80025a0 <rbuffer_insert>
 800266e:	e00f      	b.n	8002690 <USART6_IRQ+0xa0>
            data = rbuffer_remove(&p_USART6_meta->rb_tx);
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <USART6_IRQ+0xa8>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 8002678:	f7ff ffa5 	bl	80025c6 <rbuffer_remove>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <USART6_IRQ+0xa4>)
 800267e:	6298      	str	r0, [r3, #40]	@ 0x28
}
 8002680:	e7d1      	b.n	8002626 <USART6_IRQ+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <USART6_IRQ+0xa4>)
 8002684:	2208      	movs	r2, #8
 8002686:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002688:	2202      	movs	r2, #2
 800268a:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800268c:	2204      	movs	r2, #4
 800268e:	621a      	str	r2, [r3, #32]
            }
        }
        return;
    }
}
 8002690:	bd10      	pop	{r4, pc}
 8002692:	bf00      	nop
 8002694:	40011400 	.word	0x40011400
 8002698:	20000038 	.word	0x20000038
 800269c:	40011000 	.word	0x40011000

080026a0 <USART6_init>:

void USART6_init(void) {
 80026a0:	b510      	push	{r4, lr}
    rbuffer_init(&p_USART6_meta->rb_tx); // Init Tx buffer
 80026a2:	4c0b      	ldr	r4, [pc, #44]	@ (80026d0 <USART6_init+0x30>)
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 80026aa:	f7ff ff5f 	bl	800256c <rbuffer_init>
    rbuffer_init(&p_USART6_meta->rb_rx); // Init Rx buffer
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	f7ff ff5c 	bl	800256c <rbuffer_init>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <USART6_init+0x34>)
 80026b6:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 80026ba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80026be:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 80026c6:	e840 3100 	strex	r1, r3, [r0]
 80026ca:	2900      	cmp	r1, #0
 80026cc:	d1f3      	bne.n	80026b6 <USART6_init+0x16>
    LL_USART_EnableIT_RXNE(USART6);
}
 80026ce:	bd10      	pop	{r4, pc}
 80026d0:	20000038 	.word	0x20000038
 80026d4:	40011000 	.word	0x40011000

080026d8 <USART6_send_char>:

void USART6_send_char(char c) {
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4605      	mov	r5, r0
    while (rbuffer_full(&p_USART6_meta->rb_tx))
 80026dc:	4c0e      	ldr	r4, [pc, #56]	@ (8002718 <USART6_send_char+0x40>)
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 80026e4:	f7ff ff4c 	bl	8002580 <rbuffer_full>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d1f8      	bne.n	80026de <USART6_send_char+0x6>
        ;
    rbuffer_insert(c, &p_USART6_meta->rb_tx);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <USART6_send_char+0x40>)
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	f501 7183 	add.w	r1, r1, #262	@ 0x106
 80026f4:	4628      	mov	r0, r5
 80026f6:	f7ff ff53 	bl	80025a0 <rbuffer_insert>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <USART6_send_char+0x44>)
 80026fc:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8002700:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 800270c:	e840 3100 	strex	r1, r3, [r0]
 8002710:	2900      	cmp	r1, #0
 8002712:	d1f3      	bne.n	80026fc <USART6_send_char+0x24>
    LL_USART_EnableIT_TXE(USART6);
}
 8002714:	bd38      	pop	{r3, r4, r5, pc}
 8002716:	bf00      	nop
 8002718:	20000038 	.word	0x20000038
 800271c:	40011000 	.word	0x40011000

08002720 <USART6_send_array>:
    }
}

void USART6_send_array(const char *str, uint8_t len) {
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 8002720:	b151      	cbz	r1, 8002738 <USART6_send_array+0x18>
void USART6_send_array(const char *str, uint8_t len) {
 8002722:	b538      	push	{r3, r4, r5, lr}
 8002724:	4604      	mov	r4, r0
 8002726:	460d      	mov	r5, r1
 8002728:	4405      	add	r5, r0
        USART6_send_char(*str++);
 800272a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800272e:	f7ff ffd3 	bl	80026d8 <USART6_send_char>
    for (udx = 0; udx < len; udx++) {
 8002732:	42a5      	cmp	r5, r4
 8002734:	d1f9      	bne.n	800272a <USART6_send_array+0xa>
    }
}
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	4770      	bx	lr
	...

0800273c <Firmware_CRC_Verification>:
 * @param start_address: Địa chỉ bắt đầu
 * @param length: Độ dài firmware
 * @return Giá trị CRC
 */
static uint32_t Firmware_CRC_Verification(uint32_t start_address, uint32_t length) {
    if (length == 0) return 0;
 800273c:	460a      	mov	r2, r1
 800273e:	b1d1      	cbz	r1, 8002776 <Firmware_CRC_Verification+0x3a>

    uint32_t address = start_address;
    uint32_t end_address = start_address + length;
 8002740:	4402      	add	r2, r0
    uint32_t data = 0;

    CRC->CR = CRC_CR_RESET;
 8002742:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <Firmware_CRC_Verification+0x54>)
 8002744:	2101      	movs	r1, #1
 8002746:	6099      	str	r1, [r3, #8]

    while (address < end_address - 3) {
 8002748:	1ed1      	subs	r1, r2, #3
 800274a:	4288      	cmp	r0, r1
 800274c:	d215      	bcs.n	800277a <Firmware_CRC_Verification+0x3e>
static uint32_t Firmware_CRC_Verification(uint32_t start_address, uint32_t length) {
 800274e:	b410      	push	{r4}
        data = *(uint32_t*)address;
        CRC->DR = data;
 8002750:	461c      	mov	r4, r3
        data = *(uint32_t*)address;
 8002752:	f850 3b04 	ldr.w	r3, [r0], #4
        CRC->DR = data;
 8002756:	6023      	str	r3, [r4, #0]
    while (address < end_address - 3) {
 8002758:	4288      	cmp	r0, r1
 800275a:	d3fa      	bcc.n	8002752 <Firmware_CRC_Verification+0x16>
        address += 4;
    }

    while (address < end_address) {
 800275c:	4282      	cmp	r2, r0
 800275e:	d905      	bls.n	800276c <Firmware_CRC_Verification+0x30>
        uint8_t byte = *(uint8_t*)address;
        CRC->DR = (uint32_t)byte;
 8002760:	490b      	ldr	r1, [pc, #44]	@ (8002790 <Firmware_CRC_Verification+0x54>)
 8002762:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002766:	600b      	str	r3, [r1, #0]
    while (address < end_address) {
 8002768:	4282      	cmp	r2, r0
 800276a:	d1fa      	bne.n	8002762 <Firmware_CRC_Verification+0x26>
        address++;
    }

    return CRC->DR;
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <Firmware_CRC_Verification+0x54>)
 800276e:	6818      	ldr	r0, [r3, #0]
}
 8002770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002774:	4770      	bx	lr
    if (length == 0) return 0;
 8002776:	4608      	mov	r0, r1
 8002778:	4770      	bx	lr
    while (address < end_address) {
 800277a:	4282      	cmp	r2, r0
 800277c:	d905      	bls.n	800278a <Firmware_CRC_Verification+0x4e>
        CRC->DR = (uint32_t)byte;
 800277e:	4904      	ldr	r1, [pc, #16]	@ (8002790 <Firmware_CRC_Verification+0x54>)
 8002780:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002784:	600b      	str	r3, [r1, #0]
    while (address < end_address) {
 8002786:	4282      	cmp	r2, r0
 8002788:	d1fa      	bne.n	8002780 <Firmware_CRC_Verification+0x44>
    return CRC->DR;
 800278a:	4b01      	ldr	r3, [pc, #4]	@ (8002790 <Firmware_CRC_Verification+0x54>)
 800278c:	6818      	ldr	r0, [r3, #0]
}
 800278e:	4770      	bx	lr
 8002790:	40023000 	.word	0x40023000

08002794 <Flash_Write_All_Metadata>:
//    }
//
//    HAL_FLASH_Lock();
//    return FLASH_OK;
//}
static FLASH_StatusTypeDef Flash_Write_All_Metadata(s_firmware_info* fw1, s_firmware_info* fw2, uint8_t fw_select) {
 8002794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002798:	b09b      	sub	sp, #108	@ 0x6c
 800279a:	4606      	mov	r6, r0
 800279c:	460d      	mov	r5, r1
 800279e:	4617      	mov	r7, r2
    uint32_t metadata_bases[] = {METADATA_BANK1_BASE, METADATA_BANK2_BASE};
 80027a0:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <Flash_Write_All_Metadata+0xd4>)
 80027a2:	9318      	str	r3, [sp, #96]	@ 0x60
 80027a4:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80027a8:	9319      	str	r3, [sp, #100]	@ 0x64
    uint8_t banks[] = {FLASH_BANK_1, FLASH_BANK_2};
 80027aa:	f240 2301 	movw	r3, #513	@ 0x201
 80027ae:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c

    uint8_t data[64] __attribute__((aligned(4)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
    uint32_t offset = 0;
    memset(data, 0xFF, sizeof(data));
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80027b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80027ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80027bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80027be:	9315      	str	r3, [sp, #84]	@ 0x54
 80027c0:	9316      	str	r3, [sp, #88]	@ 0x58

    memcpy(&data[offset], fw1, fw_info_size);
 80027c2:	ac07      	add	r4, sp, #28
 80027c4:	6800      	ldr	r0, [r0, #0]
 80027c6:	6871      	ldr	r1, [r6, #4]
 80027c8:	68b2      	ldr	r2, [r6, #8]
 80027ca:	68f3      	ldr	r3, [r6, #12]
 80027cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ce:	6930      	ldr	r0, [r6, #16]
 80027d0:	6020      	str	r0, [r4, #0]
    offset += fw_info_size;
    memcpy(&data[offset], fw2, fw_info_size);
 80027d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80027d4:	6828      	ldr	r0, [r5, #0]
 80027d6:	6869      	ldr	r1, [r5, #4]
 80027d8:	68aa      	ldr	r2, [r5, #8]
 80027da:	68eb      	ldr	r3, [r5, #12]
 80027dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027de:	6928      	ldr	r0, [r5, #16]
 80027e0:	6020      	str	r0, [r4, #0]
    offset += fw_info_size;
    data[offset] = fw_select;
 80027e2:	f88d 7044 	strb.w	r7, [sp, #68]	@ 0x44

    HAL_FLASH_Unlock();
 80027e6:	f7fe fad1 	bl	8000d8c <HAL_FLASH_Unlock>

    for (uint8_t b = 0; b < 2; b++) {
 80027ea:	f10d 0b60 	add.w	fp, sp, #96	@ 0x60
 80027ee:	ae17      	add	r6, sp, #92	@ 0x5c
        uint32_t metadata_addr = metadata_bases[b];
        uint8_t bank = banks[b];

        FLASH_EraseInitTypeDef EraseInitStruct = {0};
 80027f0:	f04f 0a00 	mov.w	sl, #0
        uint32_t metadata_addr = metadata_bases[b];
 80027f4:	f8db 5000 	ldr.w	r5, [fp]
        uint8_t bank = banks[b];
 80027f8:	f816 3b01 	ldrb.w	r3, [r6], #1
        FLASH_EraseInitTypeDef EraseInitStruct = {0};
 80027fc:	f8cd a008 	str.w	sl, [sp, #8]
 8002800:	f8cd a018 	str.w	sl, [sp, #24]
        uint32_t SectorError = 0;
 8002804:	f8cd a004 	str.w	sl, [sp, #4]
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
        EraseInitStruct.Banks = bank;
 8002808:	9303      	str	r3, [sp, #12]
        EraseInitStruct.Sector = 1; // Metadata ở Sector 1
 800280a:	2301      	movs	r3, #1
 800280c:	9304      	str	r3, [sp, #16]
        EraseInitStruct.NbSectors = 1;
 800280e:	9305      	str	r3, [sp, #20]

        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8002810:	a901      	add	r1, sp, #4
 8002812:	a802      	add	r0, sp, #8
 8002814:	f7fe fbb2 	bl	8000f7c <HAL_FLASHEx_Erase>
 8002818:	b9d0      	cbnz	r0, 8002850 <Flash_Write_All_Metadata+0xbc>
 800281a:	ab07      	add	r3, sp, #28
 800281c:	f10d 095c 	add.w	r9, sp, #92	@ 0x5c
 8002820:	461c      	mov	r4, r3
            HAL_FLASH_Lock();
            return FLASH_ERROR;
        }

        for (uint32_t i = 0; i < sizeof(data); i += 4) {
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, metadata_addr + i, *(uint32_t *)&data[i]) != HAL_OK) {
 8002822:	1aed      	subs	r5, r5, r3
 8002824:	f04f 0800 	mov.w	r8, #0
 8002828:	2702      	movs	r7, #2
 800282a:	1929      	adds	r1, r5, r4
 800282c:	f854 2b04 	ldr.w	r2, [r4], #4
 8002830:	4643      	mov	r3, r8
 8002832:	4638      	mov	r0, r7
 8002834:	f7fe fafc 	bl	8000e30 <HAL_FLASH_Program>
 8002838:	b968      	cbnz	r0, 8002856 <Flash_Write_All_Metadata+0xc2>
        for (uint32_t i = 0; i < sizeof(data); i += 4) {
 800283a:	454c      	cmp	r4, r9
 800283c:	d1f5      	bne.n	800282a <Flash_Write_All_Metadata+0x96>
 800283e:	f10b 0b04 	add.w	fp, fp, #4
    for (uint8_t b = 0; b < 2; b++) {
 8002842:	aa1a      	add	r2, sp, #104	@ 0x68
 8002844:	4593      	cmp	fp, r2
 8002846:	d1d5      	bne.n	80027f4 <Flash_Write_All_Metadata+0x60>
 8002848:	4604      	mov	r4, r0
                return FLASH_ERROR;
            }
        }
    }

    HAL_FLASH_Lock();
 800284a:	f7fe fab3 	bl	8000db4 <HAL_FLASH_Lock>
    return FLASH_OK;
 800284e:	e006      	b.n	800285e <Flash_Write_All_Metadata+0xca>
            HAL_FLASH_Lock();
 8002850:	f7fe fab0 	bl	8000db4 <HAL_FLASH_Lock>
            return FLASH_ERROR;
 8002854:	e001      	b.n	800285a <Flash_Write_All_Metadata+0xc6>
                HAL_FLASH_Lock();
 8002856:	f7fe faad 	bl	8000db4 <HAL_FLASH_Lock>
            return FLASH_ERROR;
 800285a:	2302      	movs	r3, #2
 800285c:	461c      	mov	r4, r3
}
 800285e:	4620      	mov	r0, r4
 8002860:	b01b      	add	sp, #108	@ 0x6c
 8002862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	08008000 	.word	0x08008000

0800286c <Jump_To_App>:
_Bool Jump_To_App(uint32_t app_address) {
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	b082      	sub	sp, #8
    if (*((volatile uint32_t*)app_address) != 0xFFFFFFFF) {
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d103      	bne.n	8002880 <Jump_To_App+0x14>
    return false;
 8002878:	2500      	movs	r5, #0
}
 800287a:	4628      	mov	r0, r5
 800287c:	b002      	add	sp, #8
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	4604      	mov	r4, r0
        uint8_t appExists = 1;
 8002882:	2501      	movs	r5, #1
 8002884:	f88d 5007 	strb.w	r5, [sp, #7]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002888:	4629      	mov	r1, r5
 800288a:	f10d 0007 	add.w	r0, sp, #7
 800288e:	f7ff ff47 	bl	8002720 <USART6_send_array>
        HAL_Delay(1);
 8002892:	4628      	mov	r0, r5
 8002894:	f7fe f880 	bl	8000998 <HAL_Delay>
        while (!rbuffer_empty(&p_USART6_meta->rb_tx));
 8002898:	4e5a      	ldr	r6, [pc, #360]	@ (8002a04 <Jump_To_App+0x198>)
 800289a:	6830      	ldr	r0, [r6, #0]
 800289c:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 80028a0:	f7ff fe77 	bl	8002592 <rbuffer_empty>
 80028a4:	4605      	mov	r5, r0
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d0f7      	beq.n	800289a <Jump_To_App+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80028aa:	b672      	cpsid	i
 80028ac:	2300      	movs	r3, #0
 80028ae:	4856      	ldr	r0, [pc, #344]	@ (8002a08 <Jump_To_App+0x19c>)
            NVIC->ICER[i] = 0xFFFFFFFF;
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80028b8:	f8c2 1080 	str.w	r1, [r2, #128]	@ 0x80
            NVIC->ICPR[i] = 0xFFFFFFFF;
 80028bc:	f8c2 1180 	str.w	r1, [r2, #384]	@ 0x180
        for (uint8_t i = 0; i < 8; i++) {
 80028c0:	3301      	adds	r3, #1
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d1f6      	bne.n	80028b4 <Jump_To_App+0x48>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 80028c6:	4b51      	ldr	r3, [pc, #324]	@ (8002a0c <Jump_To_App+0x1a0>)
 80028c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ca:	f042 0220 	orr.w	r2, r2, #32
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80028d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d2:	f022 0220 	bic.w	r2, r2, #32
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (SCB->CCR & SCB_CCR_DC_Msk) {
 80028d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <Jump_To_App+0x1a4>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80028e0:	d123      	bne.n	800292a <Jump_To_App+0xbe>
        if (SCB->CCR & SCB_CCR_IC_Msk) {
 80028e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002a10 <Jump_To_App+0x1a4>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028ea:	d16f      	bne.n	80029cc <Jump_To_App+0x160>
        HAL_RCC_DeInit();
 80028ec:	f7fe fca2 	bl	8001234 <HAL_RCC_DeInit>
        HAL_DeInit();
 80028f0:	f7fd fffa 	bl	80008e8 <HAL_DeInit>
        SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk | SCB_ICSR_PENDSTCLR_Msk;
 80028f4:	4b46      	ldr	r3, [pc, #280]	@ (8002a10 <Jump_To_App+0x1a4>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	f042 6220 	orr.w	r2, r2, #167772160	@ 0xa000000
 80028fc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80028fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002902:	f3bf 8f6f 	isb	sy
        __set_MSP(*((volatile uint32_t*)app_address));
 8002906:	6822      	ldr	r2, [r4, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002908:	f382 8808 	msr	MSP, r2
        SCB->VTOR = app_address;
 800290c:	609c      	str	r4, [r3, #8]
        SysTick->CTRL = 0;
 800290e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
        SysTick->LOAD = 0;
 8002916:	615a      	str	r2, [r3, #20]
        SysTick->VAL = 0;
 8002918:	619a      	str	r2, [r3, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800291a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800291e:	f3bf 8f6f 	isb	sy
        uint32_t MainAppAddr = *((volatile uint32_t*)(app_address + 4));
 8002922:	6863      	ldr	r3, [r4, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002924:	b662      	cpsie	i
        reset_handler();
 8002926:	4798      	blx	r3
        return true;
 8002928:	e7a7      	b.n	800287a <Jump_To_App+0xe>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800292a:	4b39      	ldr	r3, [pc, #228]	@ (8002a10 <Jump_To_App+0x1a4>)
 800292c:	2200      	movs	r2, #0
 800292e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002932:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800293a:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800293e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002942:	ea4f 1c43 	mov.w	ip, r3, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002946:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
 800294a:	4831      	ldr	r0, [pc, #196]	@ (8002a10 <Jump_To_App+0x1a4>)
 800294c:	ea0c 0106 	and.w	r1, ip, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002950:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002952:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 8002956:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d1f7      	bne.n	8002952 <Jump_To_App+0xe6>
    } while(sets-- != 0U);
 8002962:	f1ac 0c20 	sub.w	ip, ip, #32
 8002966:	f11c 0f20 	cmn.w	ip, #32
 800296a:	d1ef      	bne.n	800294c <Jump_To_App+0xe0>
 800296c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002970:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <Jump_To_App+0x1a4>)
 8002976:	2200      	movs	r2, #0
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800297c:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800298c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002990:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002994:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002998:	ea4f 1c43 	mov.w	ip, r3, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800299c:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
 80029a0:	481b      	ldr	r0, [pc, #108]	@ (8002a10 <Jump_To_App+0x1a4>)
 80029a2:	ea0c 0106 	and.w	r1, ip, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80029a6:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80029a8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 80029ac:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 80029b0:	3b01      	subs	r3, #1
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d1f7      	bne.n	80029a8 <Jump_To_App+0x13c>
    } while(sets-- != 0U);
 80029b8:	f1ac 0c20 	sub.w	ip, ip, #32
 80029bc:	f11c 0f20 	cmn.w	ip, #32
 80029c0:	d1ef      	bne.n	80029a2 <Jump_To_App+0x136>
 80029c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029c6:	f3bf 8f6f 	isb	sy
}
 80029ca:	e78a      	b.n	80028e2 <Jump_To_App+0x76>
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029d0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <Jump_To_App+0x1a4>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	f8c3 1250 	str.w	r1, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80029dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029e0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80029e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029e8:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80029f2:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80029f4:	f8c3 1250 	str.w	r1, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80029f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029fc:	f3bf 8f6f 	isb	sy
}
 8002a00:	e774      	b.n	80028ec <Jump_To_App+0x80>
 8002a02:	bf00      	nop
 8002a04:	20000038 	.word	0x20000038
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <BL_UART_Fetch_Host_Command>:
void BL_UART_Fetch_Host_Command(void) {
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	b08f      	sub	sp, #60	@ 0x3c
    if (receiving_frame) {
 8002a1a:	4ba4      	ldr	r3, [pc, #656]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b17b      	cbz	r3, 8002a40 <BL_UART_Fetch_Host_Command+0x2c>
        if (frame_timeout++ > 1000) {
 8002a20:	4aa3      	ldr	r2, [pc, #652]	@ (8002cb0 <BL_UART_Fetch_Host_Command+0x29c>)
 8002a22:	8813      	ldrh	r3, [r2, #0]
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	8011      	strh	r1, [r2, #0]
 8002a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a2c:	d908      	bls.n	8002a40 <BL_UART_Fetch_Host_Command+0x2c>
            receiving_frame = false;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4a9e      	ldr	r2, [pc, #632]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002a32:	7013      	strb	r3, [r2, #0]
            frame_length = 0;
 8002a34:	4a9f      	ldr	r2, [pc, #636]	@ (8002cb4 <BL_UART_Fetch_Host_Command+0x2a0>)
 8002a36:	7013      	strb	r3, [r2, #0]
            frame_index = 0;
 8002a38:	4a9f      	ldr	r2, [pc, #636]	@ (8002cb8 <BL_UART_Fetch_Host_Command+0x2a4>)
 8002a3a:	7013      	strb	r3, [r2, #0]
            frame_timeout = 0;
 8002a3c:	4a9c      	ldr	r2, [pc, #624]	@ (8002cb0 <BL_UART_Fetch_Host_Command+0x29c>)
 8002a3e:	8013      	strh	r3, [r2, #0]
    while (!rbuffer_empty(&p_USART6_meta->rb_rx)) {
 8002a40:	4c9e      	ldr	r4, [pc, #632]	@ (8002cbc <BL_UART_Fetch_Host_Command+0x2a8>)
            BL_Host_Buffer[frame_index++] = data;
 8002a42:	4d9f      	ldr	r5, [pc, #636]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
                Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer
 8002a44:	f1a5 0b04 	sub.w	fp, r5, #4
 8002a48:	e00f      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
                frame_index = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4a9a      	ldr	r2, [pc, #616]	@ (8002cb8 <BL_UART_Fetch_Host_Command+0x2a4>)
 8002a4e:	7013      	strb	r3, [r2, #0]
                receiving_frame = false;
 8002a50:	4a96      	ldr	r2, [pc, #600]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002a52:	7013      	strb	r3, [r2, #0]
 8002a54:	e009      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
            BL_Host_Buffer[frame_index++] = data;
 8002a56:	4998      	ldr	r1, [pc, #608]	@ (8002cb8 <BL_UART_Fetch_Host_Command+0x2a4>)
 8002a58:	780a      	ldrb	r2, [r1, #0]
 8002a5a:	1c53      	adds	r3, r2, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	700b      	strb	r3, [r1, #0]
 8002a60:	54a8      	strb	r0, [r5, r2]
            if (frame_index >= frame_length + 1) {
 8002a62:	4a94      	ldr	r2, [pc, #592]	@ (8002cb4 <BL_UART_Fetch_Host_Command+0x2a0>)
 8002a64:	7812      	ldrb	r2, [r2, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d31c      	bcc.n	8002aa4 <BL_UART_Fetch_Host_Command+0x90>
    while (!rbuffer_empty(&p_USART6_meta->rb_rx)) {
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	f7ff fd91 	bl	8002592 <rbuffer_empty>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	f040 8219 	bne.w	8002ea8 <BL_UART_Fetch_Host_Command+0x494>
        data = rbuffer_remove(&p_USART6_meta->rb_rx);
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	f7ff fda5 	bl	80025c6 <rbuffer_remove>
        if (!receiving_frame) {
 8002a7c:	4b8b      	ldr	r3, [pc, #556]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e8      	bne.n	8002a56 <BL_UART_Fetch_Host_Command+0x42>
            frame_timeout = 0;
 8002a84:	4b8a      	ldr	r3, [pc, #552]	@ (8002cb0 <BL_UART_Fetch_Host_Command+0x29c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
            frame_length = data;
 8002a8a:	4b8a      	ldr	r3, [pc, #552]	@ (8002cb4 <BL_UART_Fetch_Host_Command+0x2a0>)
 8002a8c:	7018      	strb	r0, [r3, #0]
            if (frame_length > 0 && frame_length < 255) {
 8002a8e:	1e43      	subs	r3, r0, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2bfd      	cmp	r3, #253	@ 0xfd
 8002a94:	d8d9      	bhi.n	8002a4a <BL_UART_Fetch_Host_Command+0x36>
                BL_Host_Buffer[0] = frame_length;
 8002a96:	7028      	strb	r0, [r5, #0]
                frame_index = 1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4a87      	ldr	r2, [pc, #540]	@ (8002cb8 <BL_UART_Fetch_Host_Command+0x2a4>)
 8002a9c:	7013      	strb	r3, [r2, #0]
                receiving_frame = true;
 8002a9e:	4a83      	ldr	r2, [pc, #524]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002aa0:	7013      	strb	r3, [r2, #0]
 8002aa2:	e7e2      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
                receiving_frame = false;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4a81      	ldr	r2, [pc, #516]	@ (8002cac <BL_UART_Fetch_Host_Command+0x298>)
 8002aa8:	7013      	strb	r3, [r2, #0]
                frame_length = 0;
 8002aaa:	4a82      	ldr	r2, [pc, #520]	@ (8002cb4 <BL_UART_Fetch_Host_Command+0x2a0>)
 8002aac:	7013      	strb	r3, [r2, #0]
                Host_CMD_Packet_Len = BL_Host_Buffer[0] + 1;
 8002aae:	782a      	ldrb	r2, [r5, #0]
 8002ab0:	1c53      	adds	r3, r2, #1
                Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer
 8002ab2:	f85b 6003 	ldr.w	r6, [fp, r3]
                                Host_CMD_Packet_Len - 4, Host_CRC32)) {
 8002ab6:	1ed1      	subs	r1, r2, #3
    if (Data_Len == 0xFFFFFFFF)
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d01e      	beq.n	8002afa <BL_UART_Fetch_Host_Command+0xe6>
    CRC->CR = CRC_CR_RESET;
 8002abc:	4b81      	ldr	r3, [pc, #516]	@ (8002cc4 <BL_UART_Fetch_Host_Command+0x2b0>)
 8002abe:	2001      	movs	r0, #1
 8002ac0:	6098      	str	r0, [r3, #8]
    for (unsigned int i = 0; i < Data_Len; i++)
 8002ac2:	b141      	cbz	r1, 8002ad6 <BL_UART_Fetch_Host_Command+0xc2>
 8002ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
 8002ac6:	1ed9      	subs	r1, r3, #3
 8002ac8:	4411      	add	r1, r2
        CRC->DR = (uint32_t) pData[i];
 8002aca:	487e      	ldr	r0, [pc, #504]	@ (8002cc4 <BL_UART_Fetch_Host_Command+0x2b0>)
 8002acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad0:	6002      	str	r2, [r0, #0]
    for (unsigned int i = 0; i < Data_Len; i++)
 8002ad2:	4299      	cmp	r1, r3
 8002ad4:	d1fa      	bne.n	8002acc <BL_UART_Fetch_Host_Command+0xb8>
    if (CRC->DR == Host_CRC) {
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc4 <BL_UART_Fetch_Host_Command+0x2b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
                if (CRC_VERIFICATION_FAILED
 8002ada:	429e      	cmp	r6, r3
 8002adc:	d10d      	bne.n	8002afa <BL_UART_Fetch_Host_Command+0xe6>
                switch (BL_Host_Buffer[1]) {
 8002ade:	786b      	ldrb	r3, [r5, #1]
 8002ae0:	3b10      	subs	r3, #16
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	d8c1      	bhi.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
 8002ae6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002aea:	0010      	.short	0x0010
 8002aec:	0032001b 	.word	0x0032001b
 8002af0:	00b80057 	.word	0x00b80057
 8002af4:	01c00171 	.word	0x01c00171
 8002af8:	0196      	.short	0x0196
    uint8_t Ack_Value = CBL_SEND_NACK;
 8002afa:	23ab      	movs	r3, #171	@ 0xab
 8002afc:	f88d 3018 	strb.w	r3, [sp, #24]
    USART6_send_array((const char*) &Ack_Value, 1);
 8002b00:	2101      	movs	r1, #1
 8002b02:	a806      	add	r0, sp, #24
 8002b04:	f7ff fe0c 	bl	8002720 <USART6_send_array>
}
 8002b08:	e7e9      	b.n	8002ade <BL_UART_Fetch_Host_Command+0xca>
    MCU_Identification_Number = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc8 <BL_UART_Fetch_Host_Command+0x2b4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f8ad 3018 	strh.w	r3, [sp, #24]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002b16:	2102      	movs	r1, #2
 8002b18:	a806      	add	r0, sp, #24
 8002b1a:	f7ff fe01 	bl	8002720 <USART6_send_array>
}
 8002b1e:	e7a4      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
    uint8_t RDP_Level = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8002b26:	a806      	add	r0, sp, #24
 8002b28:	f7fe f9d4 	bl	8000ed4 <HAL_FLASHEx_OBGetConfig>
    RDP_Level = (uint8_t) (FLASH_OBProgram.RDPLevel);
 8002b2c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
    if (RDP_Level == 0xAA) {
 8002b30:	2baa      	cmp	r3, #170	@ 0xaa
 8002b32:	d00a      	beq.n	8002b4a <BL_UART_Fetch_Host_Command+0x136>
    } else if (RDP_Level == 0xCC) {
 8002b34:	2bcc      	cmp	r3, #204	@ 0xcc
 8002b36:	bf0c      	ite	eq
 8002b38:	2302      	moveq	r3, #2
 8002b3a:	2301      	movne	r3, #1
        RDP_Level = CBL_ROP_LEVEL_0;  // Level 0
 8002b3c:	f88d 3014 	strb.w	r3, [sp, #20]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002b40:	2101      	movs	r1, #1
 8002b42:	a805      	add	r0, sp, #20
 8002b44:	f7ff fdec 	bl	8002720 <USART6_send_array>
}
 8002b48:	e78f      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e7f6      	b.n	8002b3c <BL_UART_Fetch_Host_Command+0x128>
    uint32_t app_address = ((uint32_t)Host_Buffer[2] << 24) |
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
 8002b50:	789a      	ldrb	r2, [r3, #2]
                           ((uint32_t)Host_Buffer[3] << 16) |
 8002b52:	78d8      	ldrb	r0, [r3, #3]
 8002b54:	0400      	lsls	r0, r0, #16
    uint32_t app_address = ((uint32_t)Host_Buffer[2] << 24) |
 8002b56:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
                           ((uint32_t)Host_Buffer[5]);
 8002b5a:	795a      	ldrb	r2, [r3, #5]
    uint32_t app_address = ((uint32_t)Host_Buffer[2] << 24) |
 8002b5c:	4310      	orrs	r0, r2
                           ((uint32_t)Host_Buffer[4] << 8)  |
 8002b5e:	791b      	ldrb	r3, [r3, #4]
    uint32_t app_address = ((uint32_t)Host_Buffer[2] << 24) |
 8002b60:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    if (app_address == FIRMWARE_BANK1_BASE || app_address == FIRMWARE_BANK2_BASE) {
 8002b64:	f420 1280 	bic.w	r2, r0, #1048576	@ 0x100000
 8002b68:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <BL_UART_Fetch_Host_Command+0x2b8>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10c      	bne.n	8002b88 <BL_UART_Fetch_Host_Command+0x174>
        if (!Jump_To_App(app_address)) {
 8002b6e:	f7ff fe7d 	bl	800286c <Jump_To_App>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	f47f af79 	bne.w	8002a6a <BL_UART_Fetch_Host_Command+0x56>
            uint8_t appExists = ADDRESS_IS_INVALID;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f88d 3018 	strb.w	r3, [sp, #24]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002b7e:	2101      	movs	r1, #1
 8002b80:	a806      	add	r0, sp, #24
 8002b82:	f7ff fdcd 	bl	8002720 <USART6_send_array>
 8002b86:	e770      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
        uint8_t appExists = ADDRESS_IS_INVALID;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f88d 3018 	strb.w	r3, [sp, #24]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002b8e:	2101      	movs	r1, #1
 8002b90:	a806      	add	r0, sp, #24
 8002b92:	f7ff fdc5 	bl	8002720 <USART6_send_array>
 8002b96:	e768      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
    uint8_t Erase_Status = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f88d 3013 	strb.w	r3, [sp, #19]
    switch (Host_Buffer[2]) {
 8002b9e:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d007      	beq.n	8002bb6 <BL_UART_Fetch_Host_Command+0x1a2>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d02e      	beq.n	8002c08 <BL_UART_Fetch_Host_Command+0x1f4>
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002baa:	2101      	movs	r1, #1
 8002bac:	f10d 0013 	add.w	r0, sp, #19
 8002bb0:	f7ff fdb6 	bl	8002720 <USART6_send_array>
}
 8002bb4:	e759      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	9606      	str	r6, [sp, #24]
 8002bba:	9607      	str	r6, [sp, #28]
 8002bbc:	9608      	str	r6, [sp, #32]
 8002bbe:	9609      	str	r6, [sp, #36]	@ 0x24
 8002bc0:	960a      	str	r6, [sp, #40]	@ 0x28
    uint32_t SectorError = 0;
 8002bc2:	9605      	str	r6, [sp, #20]
    HAL_FLASH_Unlock(); // Mở khóa flash
 8002bc4:	f7fe f8e2 	bl	8000d8c <HAL_FLASH_Unlock>
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002bc8:	9606      	str	r6, [sp, #24]
        EraseInitStruct.Banks = FLASH_BANK_1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9307      	str	r3, [sp, #28]
        EraseInitStruct.Sector = Sector_Number;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	9308      	str	r3, [sp, #32]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002bd2:	930a      	str	r3, [sp, #40]	@ 0x28
    EraseInitStruct.NbSectors = Number_Of_Sectors;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8002bd8:	a905      	add	r1, sp, #20
 8002bda:	a806      	add	r0, sp, #24
 8002bdc:	f7fe f9ce 	bl	8000f7c <HAL_FLASHEx_Erase>
 8002be0:	b960      	cbnz	r0, 8002bfc <BL_UART_Fetch_Host_Command+0x1e8>
    HAL_FLASH_Lock();
 8002be2:	f7fe f8e7 	bl	8000db4 <HAL_FLASH_Lock>
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_SECTOR, FIRMWARE_NUM_SECTORS);
 8002be6:	2303      	movs	r3, #3
 8002be8:	f88d 3013 	strb.w	r3, [sp, #19]
                Firmware1.is_Available = false;
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <BL_UART_Fetch_Host_Command+0x2bc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
                Firmware1.address = FIRMWARE_BANK1_BASE;
 8002bf2:	4936      	ldr	r1, [pc, #216]	@ (8002ccc <BL_UART_Fetch_Host_Command+0x2b8>)
 8002bf4:	6059      	str	r1, [r3, #4]
                Firmware1.length = 0;
 8002bf6:	609a      	str	r2, [r3, #8]
                Firmware1.crc = 0;
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e7d6      	b.n	8002baa <BL_UART_Fetch_Host_Command+0x196>
        HAL_FLASH_Lock();
 8002bfc:	f7fe f8da 	bl	8000db4 <HAL_FLASH_Lock>
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_SECTOR, FIRMWARE_NUM_SECTORS);
 8002c00:	2302      	movs	r3, #2
 8002c02:	f88d 3013 	strb.w	r3, [sp, #19]
            if (Erase_Status == SUCCESSFUL_ERASE) {
 8002c06:	e7d0      	b.n	8002baa <BL_UART_Fetch_Host_Command+0x196>
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8002c08:	2600      	movs	r6, #0
 8002c0a:	9606      	str	r6, [sp, #24]
 8002c0c:	9607      	str	r6, [sp, #28]
 8002c0e:	9608      	str	r6, [sp, #32]
 8002c10:	9609      	str	r6, [sp, #36]	@ 0x24
 8002c12:	960a      	str	r6, [sp, #40]	@ 0x28
    uint32_t SectorError = 0;
 8002c14:	9605      	str	r6, [sp, #20]
    HAL_FLASH_Unlock(); // Mở khóa flash
 8002c16:	f7fe f8b9 	bl	8000d8c <HAL_FLASH_Unlock>
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002c1a:	9606      	str	r6, [sp, #24]
        EraseInitStruct.Banks = FLASH_BANK_1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	9307      	str	r3, [sp, #28]
        EraseInitStruct.Sector = Sector_Number;
 8002c20:	2302      	movs	r3, #2
 8002c22:	9308      	str	r3, [sp, #32]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002c24:	930a      	str	r3, [sp, #40]	@ 0x28
    EraseInitStruct.NbSectors = Number_Of_Sectors;
 8002c26:	2304      	movs	r3, #4
 8002c28:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8002c2a:	a905      	add	r1, sp, #20
 8002c2c:	a806      	add	r0, sp, #24
 8002c2e:	f7fe f9a5 	bl	8000f7c <HAL_FLASHEx_Erase>
 8002c32:	b960      	cbnz	r0, 8002c4e <BL_UART_Fetch_Host_Command+0x23a>
    HAL_FLASH_Lock();
 8002c34:	f7fe f8be 	bl	8000db4 <HAL_FLASH_Lock>
            Erase_Status = Perform_Flash_Erase(FIRMWARE2_SECTOR, FIRMWARE_NUM_SECTORS);
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f88d 3013 	strb.w	r3, [sp, #19]
                Firmware2.is_Available = false;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <BL_UART_Fetch_Host_Command+0x2c0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
                Firmware2.address = FIRMWARE_BANK2_BASE;
 8002c44:	4924      	ldr	r1, [pc, #144]	@ (8002cd8 <BL_UART_Fetch_Host_Command+0x2c4>)
 8002c46:	6059      	str	r1, [r3, #4]
                Firmware2.length = 0;
 8002c48:	609a      	str	r2, [r3, #8]
                Firmware2.crc = 0;
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	e7ad      	b.n	8002baa <BL_UART_Fetch_Host_Command+0x196>
        HAL_FLASH_Lock();
 8002c4e:	f7fe f8b1 	bl	8000db4 <HAL_FLASH_Lock>
            Erase_Status = Perform_Flash_Erase(FIRMWARE2_SECTOR, FIRMWARE_NUM_SECTORS);
 8002c52:	2302      	movs	r3, #2
 8002c54:	f88d 3013 	strb.w	r3, [sp, #19]
            if (Erase_Status == SUCCESSFUL_ERASE) {
 8002c58:	e7a7      	b.n	8002baa <BL_UART_Fetch_Host_Command+0x196>
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8002c5a:	2300      	movs	r3, #0
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8002c5c:	f88d 3014 	strb.w	r3, [sp, #20]
	Frame_Index = *((uint16_t*) (&Host_Buffer[7]));
 8002c60:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
 8002c62:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 8002c66:	9202      	str	r2, [sp, #8]
	Total_Frame = *((uint16_t*) (&Host_Buffer[9]));
 8002c68:	f8b3 2009 	ldrh.w	r2, [r3, #9]
 8002c6c:	9203      	str	r2, [sp, #12]
	HOST_Address = *((uint32_t*) (&Host_Buffer[2]));
 8002c6e:	f8d3 7002 	ldr.w	r7, [r3, #2]
	if ((HOST_Address == FIRMWARE_BANK1_BASE)
 8002c72:	f427 1280 	bic.w	r2, r7, #1048576	@ 0x100000
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <BL_UART_Fetch_Host_Command+0x2b8>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d104      	bne.n	8002c86 <BL_UART_Fetch_Host_Command+0x272>
		Temp_Firmware.address = HOST_Address;
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <BL_UART_Fetch_Host_Command+0x2c8>)
 8002c7e:	605f      	str	r7, [r3, #4]
		Temp_Firmware.crc = 0;
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
		Temp_Firmware.length = 0;
 8002c84:	609a      	str	r2, [r3, #8]
	Payload_Len = Host_Buffer[6];
 8002c86:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <BL_UART_Fetch_Host_Command+0x2ac>)
 8002c88:	f893 8006 	ldrb.w	r8, [r3, #6]
    if ((physical_addr >= FLASH_BASE) && (physical_addr <= STM32F746_FLASH_END)) {
 8002c8c:	f107 4378 	add.w	r3, r7, #4160749568	@ 0xf8000000
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c94:	bf94      	ite	ls
 8002c96:	2301      	movls	r3, #1
 8002c98:	2300      	movhi	r3, #0
 8002c9a:	f88d 3013 	strb.w	r3, [sp, #19]
	if (ADDRESS_IS_VALID == Address_Verification) {
 8002c9e:	d91f      	bls.n	8002ce0 <BL_UART_Fetch_Host_Command+0x2cc>
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	f10d 0013 	add.w	r0, sp, #19
 8002ca6:	f7ff fd3b 	bl	8002720 <USART6_send_array>
}
 8002caa:	e6de      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
 8002cac:	200002d8 	.word	0x200002d8
 8002cb0:	200002d6 	.word	0x200002d6
 8002cb4:	200002d9 	.word	0x200002d9
 8002cb8:	200002da 	.word	0x200002da
 8002cbc:	20000038 	.word	0x20000038
 8002cc0:	200002dc 	.word	0x200002dc
 8002cc4:	40023000 	.word	0x40023000
 8002cc8:	e0042000 	.word	0xe0042000
 8002ccc:	08010000 	.word	0x08010000
 8002cd0:	20000054 	.word	0x20000054
 8002cd4:	20000040 	.word	0x20000040
 8002cd8:	08110000 	.word	0x08110000
 8002cdc:	20000374 	.word	0x20000374
	HAL_FLASH_Unlock(); // Mở khóa flash
 8002ce0:	f7fe f854 	bl	8000d8c <HAL_FLASH_Unlock>
    while (i < Payload_Len) {
 8002ce4:	f1b8 0f00 	cmp.w	r8, #0
 8002ce8:	d027      	beq.n	8002d3a <BL_UART_Fetch_Host_Command+0x326>
 8002cea:	f1a8 0204 	sub.w	r2, r8, #4
 8002cee:	f108 33ff 	add.w	r3, r8, #4294967295
 8002cf2:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002cf6:	eba2 0a83 	sub.w	sl, r2, r3, lsl #2
 8002cfa:	4646      	mov	r6, r8
        memcpy(buffer, &Host_Payload[i], bytes_to_write);
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <BL_UART_Fetch_Host_Command+0x49c>)
 8002cfe:	eb03 0908 	add.w	r9, r3, r8
        memset(buffer, 0xFF, sizeof(buffer)); // Padding mặc định là 0xFF
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	9306      	str	r3, [sp, #24]
        uint16_t bytes_to_write = (Payload_Len - i > 4) ? 4 : (Payload_Len - i);
 8002d08:	4632      	mov	r2, r6
 8002d0a:	2e04      	cmp	r6, #4
 8002d0c:	bfa8      	it	ge
 8002d0e:	2204      	movge	r2, #4
        memcpy(buffer, &Host_Payload[i], bytes_to_write);
 8002d10:	b292      	uxth	r2, r2
 8002d12:	eba9 0106 	sub.w	r1, r9, r6
 8002d16:	a806      	add	r0, sp, #24
 8002d18:	f000 f93a 	bl	8002f90 <memcpy>
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);
 8002d1c:	4b65      	ldr	r3, [pc, #404]	@ (8002eb4 <BL_UART_Fetch_Host_Command+0x4a0>)
 8002d1e:	2233      	movs	r2, #51	@ 0x33
 8002d20:	60da      	str	r2, [r3, #12]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Payload_Start_Address + i, *(uint32_t *)buffer) != HAL_OK) {
 8002d22:	eb08 0107 	add.w	r1, r8, r7
 8002d26:	9a06      	ldr	r2, [sp, #24]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	1b89      	subs	r1, r1, r6
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f7fe f87f 	bl	8000e30 <HAL_FLASH_Program>
 8002d32:	b9b0      	cbnz	r0, 8002d62 <BL_UART_Fetch_Host_Command+0x34e>
    while (i < Payload_Len) {
 8002d34:	3e04      	subs	r6, #4
 8002d36:	45b2      	cmp	sl, r6
 8002d38:	d1e3      	bne.n	8002d02 <BL_UART_Fetch_Host_Command+0x2ee>
    HAL_FLASH_Lock();
 8002d3a:	f7fe f83b 	bl	8000db4 <HAL_FLASH_Lock>
		Flash_Payload_Write_Status = Flash_Memory_Write_Payload(
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f88d 3014 	strb.w	r3, [sp, #20]
			Temp_Firmware.length += Payload_Len;
 8002d44:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb8 <BL_UART_Fetch_Host_Command+0x4a4>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	eb08 0102 	add.w	r1, r8, r2
 8002d4c:	6099      	str	r1, [r3, #8]
			if (Frame_Index == (Total_Frame - 1)) {
 8002d4e:	9b03      	ldr	r3, [sp, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	9a02      	ldr	r2, [sp, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d00e      	beq.n	8002d76 <BL_UART_Fetch_Host_Command+0x362>
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	a805      	add	r0, sp, #20
 8002d5c:	f7ff fce0 	bl	8002720 <USART6_send_array>
}
 8002d60:	e683      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
            HAL_FLASH_Lock();
 8002d62:	f7fe f827 	bl	8000db4 <HAL_FLASH_Lock>
		Flash_Payload_Write_Status = Flash_Memory_Write_Payload(
 8002d66:	2300      	movs	r3, #0
 8002d68:	f88d 3014 	strb.w	r3, [sp, #20]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	a805      	add	r0, sp, #20
 8002d70:	f7ff fcd6 	bl	8002720 <USART6_send_array>
}
 8002d74:	e679      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
				Temp_Firmware.crc = Firmware_CRC_Verification(Temp_Firmware.address, Temp_Firmware.length);
 8002d76:	4e50      	ldr	r6, [pc, #320]	@ (8002eb8 <BL_UART_Fetch_Host_Command+0x4a4>)
 8002d78:	6870      	ldr	r0, [r6, #4]
 8002d7a:	f7ff fcdf 	bl	800273c <Firmware_CRC_Verification>
 8002d7e:	60f0      	str	r0, [r6, #12]
				if (Temp_Firmware.address == FIRMWARE_BANK1_BASE) {
 8002d80:	6873      	ldr	r3, [r6, #4]
 8002d82:	4a4e      	ldr	r2, [pc, #312]	@ (8002ebc <BL_UART_Fetch_Host_Command+0x4a8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <BL_UART_Fetch_Host_Command+0x388>
				} else if (Temp_Firmware.address == FIRMWARE_BANK2_BASE) {
 8002d88:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec0 <BL_UART_Fetch_Host_Command+0x4ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d012      	beq.n	8002db4 <BL_UART_Fetch_Host_Command+0x3a0>
				Flash_Write_All_Metadata(&Firmware1, &Firmware2, Firmware_Select);
 8002d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec4 <BL_UART_Fetch_Host_Command+0x4b0>)
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	494d      	ldr	r1, [pc, #308]	@ (8002ec8 <BL_UART_Fetch_Host_Command+0x4b4>)
 8002d94:	484d      	ldr	r0, [pc, #308]	@ (8002ecc <BL_UART_Fetch_Host_Command+0x4b8>)
 8002d96:	f7ff fcfd 	bl	8002794 <Flash_Write_All_Metadata>
 8002d9a:	e7dd      	b.n	8002d58 <BL_UART_Fetch_Host_Command+0x344>
					Firmware1 = Temp_Firmware;
 8002d9c:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8002ecc <BL_UART_Fetch_Host_Command+0x4b8>
 8002da0:	4666      	mov	r6, ip
 8002da2:	4f45      	ldr	r7, [pc, #276]	@ (8002eb8 <BL_UART_Fetch_Host_Command+0x4a4>)
 8002da4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002da6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6033      	str	r3, [r6, #0]
					Firmware1.is_Available = true;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f88c 3000 	strb.w	r3, [ip]
 8002db2:	e7ec      	b.n	8002d8e <BL_UART_Fetch_Host_Command+0x37a>
					Firmware2 = Temp_Firmware;
 8002db4:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8002ec8 <BL_UART_Fetch_Host_Command+0x4b4>
 8002db8:	4666      	mov	r6, ip
 8002dba:	4f3f      	ldr	r7, [pc, #252]	@ (8002eb8 <BL_UART_Fetch_Host_Command+0x4a4>)
 8002dbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002dbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6033      	str	r3, [r6, #0]
					Firmware2.is_Available = true;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f88c 3000 	strb.w	r3, [ip]
 8002dca:	e7e0      	b.n	8002d8e <BL_UART_Fetch_Host_Command+0x37a>
    uint8_t appExists = 1;
 8002dcc:	2401      	movs	r4, #1
 8002dce:	f88d 4018 	strb.w	r4, [sp, #24]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	a806      	add	r0, sp, #24
 8002dd6:	f7ff fca3 	bl	8002720 <USART6_send_array>
    HAL_Delay(1);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7fd fddc 	bl	8000998 <HAL_Delay>
    while (!rbuffer_empty(&p_USART6_meta->rb_tx));
 8002de0:	4c3b      	ldr	r4, [pc, #236]	@ (8002ed0 <BL_UART_Fetch_Host_Command+0x4bc>)
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	f500 7083 	add.w	r0, r0, #262	@ 0x106
 8002de8:	f7ff fbd3 	bl	8002592 <rbuffer_empty>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d0f8      	beq.n	8002de2 <BL_UART_Fetch_Host_Command+0x3ce>
  __ASM volatile ("cpsid i" : : : "memory");
 8002df0:	b672      	cpsid	i
    SysTick->CTRL = 0;
 8002df2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
    SysTick->LOAD = 0;
 8002dfa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dfc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e00:	4934      	ldr	r1, [pc, #208]	@ (8002ed4 <BL_UART_Fetch_Host_Command+0x4c0>)
 8002e02:	68ca      	ldr	r2, [r1, #12]
 8002e04:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e08:	4b33      	ldr	r3, [pc, #204]	@ (8002ed8 <BL_UART_Fetch_Host_Command+0x4c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60cb      	str	r3, [r1, #12]
 8002e0e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002e12:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002e14:	e7fd      	b.n	8002e12 <BL_UART_Fetch_Host_Command+0x3fe>
    uint8_t status = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t Major = Host_Buffer[3];
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <BL_UART_Fetch_Host_Command+0x4c8>)
 8002e1e:	78df      	ldrb	r7, [r3, #3]
    uint8_t Minor = Host_Buffer[4];
 8002e20:	791e      	ldrb	r6, [r3, #4]
    uint8_t Patch = Host_Buffer[5];
 8002e22:	795a      	ldrb	r2, [r3, #5]
    if (Host_Buffer[2] == 1) {
 8002e24:	789b      	ldrb	r3, [r3, #2]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d006      	beq.n	8002e38 <BL_UART_Fetch_Host_Command+0x424>
    } else if (Host_Buffer[2] == 2) {
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d010      	beq.n	8002e50 <BL_UART_Fetch_Host_Command+0x43c>
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	a806      	add	r0, sp, #24
 8002e32:	f7ff fc75 	bl	8002720 <USART6_send_array>
}
 8002e36:	e618      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
        status = 1;
 8002e38:	f88d 3018 	strb.w	r3, [sp, #24]
        Firmware1.version_major = Major;
 8002e3c:	4823      	ldr	r0, [pc, #140]	@ (8002ecc <BL_UART_Fetch_Host_Command+0x4b8>)
 8002e3e:	7447      	strb	r7, [r0, #17]
        Firmware1.version_minor = Minor;
 8002e40:	7486      	strb	r6, [r0, #18]
        Firmware1.version_patch = Patch;
 8002e42:	74c2      	strb	r2, [r0, #19]
        Flash_Write_All_Metadata(&Firmware1, &Firmware2, Firmware_Select);
 8002e44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <BL_UART_Fetch_Host_Command+0x4b0>)
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	491f      	ldr	r1, [pc, #124]	@ (8002ec8 <BL_UART_Fetch_Host_Command+0x4b4>)
 8002e4a:	f7ff fca3 	bl	8002794 <Flash_Write_All_Metadata>
 8002e4e:	e7ee      	b.n	8002e2e <BL_UART_Fetch_Host_Command+0x41a>
        status = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f88d 3018 	strb.w	r3, [sp, #24]
        Firmware2.version_major = Major;
 8002e56:	491c      	ldr	r1, [pc, #112]	@ (8002ec8 <BL_UART_Fetch_Host_Command+0x4b4>)
 8002e58:	744f      	strb	r7, [r1, #17]
        Firmware2.version_minor = Minor;
 8002e5a:	748e      	strb	r6, [r1, #18]
        Firmware2.version_patch = Patch;
 8002e5c:	74ca      	strb	r2, [r1, #19]
        Flash_Write_All_Metadata(&Firmware1, &Firmware2, Firmware_Select);
 8002e5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <BL_UART_Fetch_Host_Command+0x4b0>)
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	481a      	ldr	r0, [pc, #104]	@ (8002ecc <BL_UART_Fetch_Host_Command+0x4b8>)
 8002e64:	f7ff fc96 	bl	8002794 <Flash_Write_All_Metadata>
 8002e68:	e7e1      	b.n	8002e2e <BL_UART_Fetch_Host_Command+0x41a>
    if (Host_Buffer[2] == 1) {
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <BL_UART_Fetch_Host_Command+0x4c8>)
 8002e6c:	789b      	ldrb	r3, [r3, #2]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d013      	beq.n	8002e9a <BL_UART_Fetch_Host_Command+0x486>
    } else if (Host_Buffer[2] == 2) {
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d014      	beq.n	8002ea0 <BL_UART_Fetch_Host_Command+0x48c>
 8002e76:	2300      	movs	r3, #0
        tmp[0] = 1;
 8002e78:	f88d 3018 	strb.w	r3, [sp, #24]
    tmp[1] = fw_tmp->version_major;
 8002e7c:	9a01      	ldr	r2, [sp, #4]
 8002e7e:	7c53      	ldrb	r3, [r2, #17]
 8002e80:	f88d 3019 	strb.w	r3, [sp, #25]
    tmp[2] = fw_tmp->version_minor;
 8002e84:	7c93      	ldrb	r3, [r2, #18]
 8002e86:	f88d 301a 	strb.w	r3, [sp, #26]
    tmp[3] = fw_tmp->version_patch;
 8002e8a:	7cd3      	ldrb	r3, [r2, #19]
 8002e8c:	f88d 301b 	strb.w	r3, [sp, #27]
    USART6_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8002e90:	2104      	movs	r1, #4
 8002e92:	a806      	add	r0, sp, #24
 8002e94:	f7ff fc44 	bl	8002720 <USART6_send_array>
}
 8002e98:	e5e7      	b.n	8002a6a <BL_UART_Fetch_Host_Command+0x56>
        fw_tmp = &Firmware1;
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ecc <BL_UART_Fetch_Host_Command+0x4b8>)
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	e7eb      	b.n	8002e78 <BL_UART_Fetch_Host_Command+0x464>
 8002ea0:	2301      	movs	r3, #1
        fw_tmp = &Firmware2;
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <BL_UART_Fetch_Host_Command+0x4b4>)
 8002ea4:	9201      	str	r2, [sp, #4]
 8002ea6:	e7e7      	b.n	8002e78 <BL_UART_Fetch_Host_Command+0x464>
}
 8002ea8:	b00f      	add	sp, #60	@ 0x3c
 8002eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	200002e7 	.word	0x200002e7
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	20000374 	.word	0x20000374
 8002ebc:	08010000 	.word	0x08010000
 8002ec0:	08110000 	.word	0x08110000
 8002ec4:	2000003c 	.word	0x2000003c
 8002ec8:	20000040 	.word	0x20000040
 8002ecc:	20000054 	.word	0x20000054
 8002ed0:	20000038 	.word	0x20000038
 8002ed4:	e000ed00 	.word	0xe000ed00
 8002ed8:	05fa0004 	.word	0x05fa0004
 8002edc:	200002dc 	.word	0x200002dc

08002ee0 <SchedulerSysTickIntHandler>:
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
    g_ui32SchedulerTickCount++;
 8002ee0:	4a02      	ldr	r2, [pc, #8]	@ (8002eec <SchedulerSysTickIntHandler+0xc>)
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000388 	.word	0x20000388

08002ef0 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <SchedulerRun+0x3c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b1c3      	cbz	r3, 8002f2a <SchedulerRun+0x3a>
 8002ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8002f30 <SchedulerRun+0x40>)
 8002efa:	2500      	movs	r5, #0
{
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8002efc:	4f0d      	ldr	r7, [pc, #52]	@ (8002f34 <SchedulerRun+0x44>)
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8002efe:	4e0b      	ldr	r6, [pc, #44]	@ (8002f2c <SchedulerRun+0x3c>)
 8002f00:	e004      	b.n	8002f0c <SchedulerRun+0x1c>
 8002f02:	3501      	adds	r5, #1
 8002f04:	3414      	adds	r4, #20
 8002f06:	6833      	ldr	r3, [r6, #0]
 8002f08:	42ab      	cmp	r3, r5
 8002f0a:	d90e      	bls.n	8002f2a <SchedulerRun+0x3a>
        if(pi16Task->bActive &&
 8002f0c:	7c23      	ldrb	r3, [r4, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f7      	beq.n	8002f02 <SchedulerRun+0x12>
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8002f12:	683b      	ldr	r3, [r7, #0]
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8002f14:	68e1      	ldr	r1, [r4, #12]
 8002f16:	1a5b      	subs	r3, r3, r1
        if(pi16Task->bActive &&
 8002f18:	68a1      	ldr	r1, [r4, #8]
 8002f1a:	4299      	cmp	r1, r3
 8002f1c:	d8f1      	bhi.n	8002f02 <SchedulerRun+0x12>
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	60e3      	str	r3, [r4, #12]
            pi16Task->pfnFunction(pi16Task->pvParam);
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	6860      	ldr	r0, [r4, #4]
 8002f26:	4798      	blx	r3
 8002f28:	e7eb      	b.n	8002f02 <SchedulerRun+0x12>
}
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2c:	20000028 	.word	0x20000028
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000388 	.word	0x20000388

08002f38 <memset>:
 8002f38:	4402      	add	r2, r0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <memset+0xa>
 8002f40:	4770      	bx	lr
 8002f42:	f803 1b01 	strb.w	r1, [r3], #1
 8002f46:	e7f9      	b.n	8002f3c <memset+0x4>

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2600      	movs	r6, #0
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4d0b      	ldr	r5, [pc, #44]	@ (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 f826 	bl	8002fac <_init>
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2600      	movs	r6, #0
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	08002fe4 	.word	0x08002fe4
 8002f84:	08002fe4 	.word	0x08002fe4
 8002f88:	08002fe4 	.word	0x08002fe4
 8002f8c:	08002fe8 	.word	0x08002fe8

08002f90 <memcpy>:
 8002f90:	440a      	add	r2, r1
 8002f92:	4291      	cmp	r1, r2
 8002f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f98:	d100      	bne.n	8002f9c <memcpy+0xc>
 8002f9a:	4770      	bx	lr
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d1f9      	bne.n	8002f9e <memcpy+0xe>
 8002faa:	bd10      	pop	{r4, pc}

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
