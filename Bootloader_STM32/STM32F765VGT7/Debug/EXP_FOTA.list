
EXP_FOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  00007054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800507c  0800507c  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800507c  0800507c  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08005084  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000054  080050d8  00007054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080050d8  0000737c  2**0
                  ALLOC
 11 .bkpram       0000000c  40024000  40024000  00008000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c125  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efe  00000000  00000000  000131a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  000160a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f7  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d55  00000000  00000000  0001782f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103cf  00000000  00000000  00041584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9158  00000000  00000000  00051953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014aaab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003558  00000000  00000000  0014aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0014e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000054 	.word	0x20000054
 8000214:	00000000 	.word	0x00000000
 8000218:	08005040 	.word	0x08005040

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000058 	.word	0x20000058
 8000234:	08005040 	.word	0x08005040

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db0b      	blt.n	80005aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 021f 	and.w	r2, r3, #31
 8000598:	4907      	ldr	r1, [pc, #28]	@ (80005b8 <__NVIC_EnableIRQ+0x38>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	2001      	movs	r0, #1
 80005a2:	fa00 f202 	lsl.w	r2, r0, r2
 80005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	@ (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	@ (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	@ 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	@ 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 0201 	orr.w	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	609a      	str	r2, [r3, #8]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d0:	4907      	ldr	r1, [pc, #28]	@ (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4013      	ands	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000700:	4907      	ldr	r1, [pc, #28]	@ (8000720 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <LL_APB1_GRP1_EnableClock+0x2c>)
 800070a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	40023800 	.word	0x40023800

08000724 <watchdog_handler>:
        .bActive = true                      		// Kích hoạt
    }
};

static void watchdog_handler(void*)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800072c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <watchdog_handler+0x1c>)
 8000732:	f001 f9ec 	bl	8001b0e <HAL_GPIO_TogglePin>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000748:	f000 f97c 	bl	8000a44 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fa5d 	bl	8000c0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f812 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f936 	bl	80009c4 <MX_GPIO_Init>
  MX_UART7_Init();
 8000758:	f000 f898 	bl	800088c <MX_UART7_Init>
  MX_CRC_Init();
 800075c:	f000 f874 	bl	8000848 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  SchedulerInit(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000764:	f004 fb42 	bl	8004dec <SchedulerInit>
  UART7_init();
 8000768:	f003 fba4 	bl	8003eb4 <UART7_init>
  validate_no_init_vars();
 800076c:	f004 fabe 	bl	8004cec <validate_no_init_vars>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 8000770:	f004 fb5e 	bl	8004e30 <SchedulerRun>
 8000774:	e7fc      	b.n	8000770 <main+0x2c>
	...

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fbac 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a27      	ldr	r2, [pc, #156]	@ (8000840 <SystemClock_Config+0xc8>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <SystemClock_Config+0xcc>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e8:	2364      	movs	r3, #100	@ 0x64
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 faf9 	bl	8001df4 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 f948 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000814:	2390      	movs	r3, #144	@ 0x90
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd92 	bl	8002350 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000832:	f000 f933 	bl	8000a9c <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_CRC_Init+0x3c>)
 800084e:	4a0e      	ldr	r2, [pc, #56]	@ (8000888 <MX_CRC_Init+0x40>)
 8000850:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_CRC_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_CRC_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_CRC_Init+0x3c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_CRC_Init+0x3c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_CRC_Init+0x3c>)
 800086c:	2201      	movs	r2, #1
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_CRC_Init+0x3c>)
 8000872:	f000 fbdd 	bl	8001030 <HAL_CRC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800087c:	f000 f90e 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000070 	.word	0x20000070
 8000888:	40023000 	.word	0x40023000

0800088c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b2      	sub	sp, #200	@ 0xc8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000892:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2290      	movs	r2, #144	@ 0x90
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fb10 	bl	8004ee4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 feef 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 80008dc:	f000 f8de 	bl	8000a9c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 80008e0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008e4:	f7ff ff06 	bl	80006f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80008e8:	2010      	movs	r0, #16
 80008ea:	f7ff feeb 	bl	80006c4 <LL_AHB1_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008f4:	2302      	movs	r3, #2
 80008f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800090c:	2308      	movs	r3, #8
 800090e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000916:	4619      	mov	r1, r3
 8000918:	4828      	ldr	r0, [pc, #160]	@ (80009bc <MX_UART7_Init+0x130>)
 800091a:	f002 fbc0 	bl	800309e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800091e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800093e:	2308      	movs	r3, #8
 8000940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000948:	4619      	mov	r1, r3
 800094a:	481c      	ldr	r0, [pc, #112]	@ (80009bc <MX_UART7_Init+0x130>)
 800094c:	f002 fba7 	bl	800309e <LL_GPIO_Init>

  /* UART7 interrupt Init */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000950:	f7ff fe08 	bl	8000564 <__NVIC_GetPriorityGrouping>
 8000954:	4603      	mov	r3, r0
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe58 	bl	8000610 <NVIC_EncodePriority>
 8000960:	4603      	mov	r3, r0
 8000962:	4619      	mov	r1, r3
 8000964:	2052      	movs	r0, #82	@ 0x52
 8000966:	f7ff fe29 	bl	80005bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 800096a:	2052      	movs	r0, #82	@ 0x52
 800096c:	f7ff fe08 	bl	8000580 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000970:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800098a:	230c      	movs	r3, #12
 800098c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  LL_USART_Init(UART7, &USART_InitStruct);
 800099c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_UART7_Init+0x134>)
 80009a4:	f002 ffc6 	bl	8003934 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART7);
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_UART7_Init+0x134>)
 80009aa:	f7ff fe74 	bl	8000696 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART7);
 80009ae:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_UART7_Init+0x134>)
 80009b0:	f7ff fe61 	bl	8000676 <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	37c8      	adds	r7, #200	@ 0xc8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40007800 	.word	0x40007800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_GPIO_Init+0x78>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <MX_GPIO_Init+0x78>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_GPIO_Init+0x78>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_GPIO_Init+0x78>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <MX_GPIO_Init+0x78>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_GPIO_Init+0x78>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_DONE_GPIO_Port, WD_DONE_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <MX_GPIO_Init+0x7c>)
 8000a12:	f001 f863 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_DONE_Pin */
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8000a16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_GPIO_Init+0x7c>)
 8000a30:	f000 fea8 	bl	8001784 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000

08000a44 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a56:	f000 fa73 	bl	8000f40 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a66:	231f      	movs	r3, #31
 8000a68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a6a:	2387      	movs	r3, #135	@ 0x87
 8000a6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a72:	2300      	movs	r3, #0
 8000a74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a86:	463b      	mov	r3, r7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa91 	bl	8000fb0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f000 fa6e 	bl	8000f70 <HAL_MPU_Enable>

}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_CRC_MspInit+0x38>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d10b      	bne.n	8000b1a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_CRC_MspInit+0x3c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a09      	ldr	r2, [pc, #36]	@ (8000b2c <HAL_CRC_MspInit+0x3c>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <HAL_CRC_MspInit+0x3c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023000 	.word	0x40023000
 8000b2c:	40023800 	.word	0x40023800

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <MemManage_Handler+0x4>

08000b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 8000b86:	f004 f917 	bl	8004db8 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f8af 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbc:	f7ff ffea 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f004 f985 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fdab 	bl	8000744 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000bfc:	08005084 	.word	0x08005084
  ldr r2, =_sbss
 8000c00:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000c04:	2000037c 	.word	0x2000037c

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>

08000c0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 f962 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c14:	200f      	movs	r0, #15
 8000c16:	f000 f839 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff ff45 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c62:	f04f 32ff 	mov.w	r2, #4294967295
 8000c66:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <HAL_DeInit+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000c6e:	f000 f805 	bl	8000c7c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f93b 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f911 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000040 	.word	0x20000040
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	20000044 	.word	0x20000044

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000048 	.word	0x20000048
 8000d10:	20000094 	.word	0x20000094

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000094 	.word	0x20000094

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000048 	.word	0x20000048

08000d74 <__NVIC_SetPriorityGrouping>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x40>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	05fa0000 	.word	0x05fa0000

08000dbc <__NVIC_GetPriorityGrouping>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff47 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5c 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f44:	f3bf 8f5f 	dmb	sy
}
 8000f48:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <HAL_MPU_Disable+0x28>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <HAL_MPU_Disable+0x28>)
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f54:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_MPU_Disable+0x2c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	e000ed90 	.word	0xe000ed90

08000f70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_MPU_Enable+0x38>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_MPU_Enable+0x3c>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <HAL_MPU_Enable+0x3c>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8e:	f3bf 8f4f 	dsb	sy
}
 8000f92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f94:	f3bf 8f6f 	isb	sy
}
 8000f98:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed90 	.word	0xe000ed90
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	785a      	ldrb	r2, [r3, #1]
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_MPU_ConfigRegion+0x7c>)
 8000fbe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_MPU_ConfigRegion+0x7c>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <HAL_MPU_ConfigRegion+0x7c>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_MPU_ConfigRegion+0x7c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b1b      	ldrb	r3, [r3, #12]
 8000fd8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7adb      	ldrb	r3, [r3, #11]
 8000fde:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7a9b      	ldrb	r3, [r3, #10]
 8000fe6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fe8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7b5b      	ldrb	r3, [r3, #13]
 8000fee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ff0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b9b      	ldrb	r3, [r3, #14]
 8000ff6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7bdb      	ldrb	r3, [r3, #15]
 8000ffe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a5b      	ldrb	r3, [r3, #9]
 8001006:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a1b      	ldrb	r3, [r3, #8]
 800100e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001010:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800101a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800101c:	6113      	str	r3, [r2, #16]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed90 	.word	0xe000ed90

08001030 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e054      	b.n	80010ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7f5b      	ldrb	r3, [r3, #29]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fd4c 	bl	8000af0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2202      	movs	r2, #2
 800105c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	791b      	ldrb	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_CRC_Init+0xc4>)
 800106c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0218 	bic.w	r2, r2, #24
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	e00c      	b.n	800109a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6899      	ldr	r1, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	461a      	mov	r2, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f834 	bl	80010f8 <HAL_CRCEx_Polynomial_Set>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e028      	b.n	80010ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	795b      	ldrb	r3, [r3, #5]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	e004      	b.n	80010b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6912      	ldr	r2, [r2, #16]
 80010b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	04c11db7 	.word	0x04c11db7

080010f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001108:	231f      	movs	r3, #31
 800110a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	e063      	b.n	80011e4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800111c:	bf00      	nop
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	613a      	str	r2, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <HAL_CRCEx_Polynomial_Set+0x44>
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b18      	cmp	r3, #24
 8001140:	d846      	bhi.n	80011d0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001142:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001148:	080011d7 	.word	0x080011d7
 800114c:	080011d1 	.word	0x080011d1
 8001150:	080011d1 	.word	0x080011d1
 8001154:	080011d1 	.word	0x080011d1
 8001158:	080011d1 	.word	0x080011d1
 800115c:	080011d1 	.word	0x080011d1
 8001160:	080011d1 	.word	0x080011d1
 8001164:	080011d1 	.word	0x080011d1
 8001168:	080011c5 	.word	0x080011c5
 800116c:	080011d1 	.word	0x080011d1
 8001170:	080011d1 	.word	0x080011d1
 8001174:	080011d1 	.word	0x080011d1
 8001178:	080011d1 	.word	0x080011d1
 800117c:	080011d1 	.word	0x080011d1
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011d1 	.word	0x080011d1
 8001188:	080011b9 	.word	0x080011b9
 800118c:	080011d1 	.word	0x080011d1
 8001190:	080011d1 	.word	0x080011d1
 8001194:	080011d1 	.word	0x080011d1
 8001198:	080011d1 	.word	0x080011d1
 800119c:	080011d1 	.word	0x080011d1
 80011a0:	080011d1 	.word	0x080011d1
 80011a4:	080011d1 	.word	0x080011d1
 80011a8:	080011ad 	.word	0x080011ad
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d913      	bls.n	80011da <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011b6:	e010      	b.n	80011da <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	d90f      	bls.n	80011de <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011c2:	e00c      	b.n	80011de <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	d90b      	bls.n	80011e2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011ce:	e008      	b.n	80011e2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	75fb      	strb	r3, [r7, #23]
        break;
 80011d4:	e006      	b.n	80011e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011d6:	bf00      	nop
 80011d8:	e004      	b.n	80011e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011da:	bf00      	nop
 80011dc:	e002      	b.n	80011e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011de:	bf00      	nop
 80011e0:	e000      	b.n	80011e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011e2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 0118 	bic.w	r1, r3, #24
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	430a      	orrs	r2, r1
 8001204:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001222:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 8001224:	7d1b      	ldrb	r3, [r3, #20]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_FLASH_Program+0x1a>
 800122a:	2302      	movs	r3, #2
 800122c:	e043      	b.n	80012b6 <HAL_FLASH_Program+0xa2>
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 8001230:	2201      	movs	r2, #1
 8001232:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001234:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001238:	f000 f878 	bl	800132c <FLASH_WaitForLastOperation>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d133      	bne.n	80012ae <HAL_FLASH_Program+0x9a>
  {
    switch(TypeProgram)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d823      	bhi.n	8001294 <HAL_FLASH_Program+0x80>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_FLASH_Program+0x40>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001265 	.word	0x08001265
 8001258:	08001271 	.word	0x08001271
 800125c:	0800127d 	.word	0x0800127d
 8001260:	08001289 	.word	0x08001289
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001264:	783b      	ldrb	r3, [r7, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f000 f921 	bl	80014b0 <FLASH_Program_Byte>
        break;
 800126e:	e012      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001270:	883b      	ldrh	r3, [r7, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f000 f8f5 	bl	8001464 <FLASH_Program_HalfWord>
        break;
 800127a:	e00c      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f000 f8c9 	bl	8001418 <FLASH_Program_Word>
        break;
 8001286:	e006      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f000 f88d 	bl	80013ac <FLASH_Program_DoubleWord>
        break;
 8001292:	e000      	b.n	8001296 <HAL_FLASH_Program+0x82>
      }
      default :
        break;
 8001294:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001296:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800129a:	f000 f847 	bl	800132c <FLASH_WaitForLastOperation>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_FLASH_Program+0xb0>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_FLASH_Program+0xb0>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <HAL_FLASH_Program+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	751a      	strb	r2, [r3, #20]

  return status;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000098 	.word	0x20000098
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0b      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012dc:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_FLASH_Unlock+0x3c>)
 80012de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_FLASH_Unlock+0x40>)
 80012e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da01      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023c00 	.word	0x40023c00
 8001304:	45670123 	.word	0x45670123
 8001308:	cdef89ab 	.word	0xcdef89ab

0800130c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <HAL_FLASH_Lock+0x1c>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_FLASH_Lock+0x1c>)
 8001316:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800131a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40023c00 	.word	0x40023c00

0800132c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <FLASH_WaitForLastOperation+0x78>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800133e:	f7ff fce9 	bl	8000d14 <HAL_GetTick>
 8001342:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001344:	e010      	b.n	8001368 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d00c      	beq.n	8001368 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <FLASH_WaitForLastOperation+0x38>
 8001354:	f7ff fcde 	bl	8000d14 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e019      	b.n	800139c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e8      	bne.n	8001346 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001380:	f000 f8ba 	bl	80014f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e009      	b.n	800139c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <FLASH_WaitForLastOperation+0x7c>)
 8001396:	2201      	movs	r2, #1
 8001398:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
  
}  
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000098 	.word	0x20000098
 80013a8:	40023c00 	.word	0x40023c00

080013ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80013ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <FLASH_Program_DoubleWord+0x68>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80013e2:	f3bf 8f6f 	isb	sy
}
 80013e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80013e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	000a      	movs	r2, r1
 80013f6:	2300      	movs	r3, #0
 80013f8:	68f9      	ldr	r1, [r7, #12]
 80013fa:	3104      	adds	r1, #4
 80013fc:	4613      	mov	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001400:	f3bf 8f4f 	dsb	sy
}
 8001404:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800142c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <FLASH_Program_Word+0x48>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <FLASH_Program_Word+0x48>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800147a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <FLASH_Program_HalfWord+0x48>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800149a:	f3bf 8f4f 	dsb	sy
}
 800149e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <FLASH_Program_Byte+0x44>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001508:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001512:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800152a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001542:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800155a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <FLASH_SetErrorCode+0x90>)
 8001572:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <FLASH_SetErrorCode+0x8c>)
 8001576:	22f2      	movs	r2, #242	@ 0xf2
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023c00 	.word	0x40023c00
 8001588:	20000098 	.word	0x20000098

0800158c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 800159c:	7d1b      	ldrb	r3, [r3, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_FLASHEx_Erase+0x1a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e056      	b.n	8001654 <HAL_FLASHEx_Erase+0xc8>
 80015a6:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015b0:	f7ff febc 	bl	800132c <FLASH_WaitForLastOperation>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d146      	bne.n	800164c <HAL_FLASHEx_Erase+0xc0>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d115      	bne.n	80015fa <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f000 f844 	bl	8001668 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015e4:	f7ff fea2 	bl	800132c <FLASH_WaitForLastOperation>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	491b      	ldr	r1, [pc, #108]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <HAL_FLASHEx_Erase+0xd8>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	610b      	str	r3, [r1, #16]
 80015f8:	e028      	b.n	800164c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	e01c      	b.n	800163c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f000 f868 	bl	80016e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001610:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001614:	f7ff fe8a 	bl	800132c <FLASH_WaitForLastOperation>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_FLASHEx_Erase+0xd4>)
 8001622:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001626:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	601a      	str	r2, [r3, #0]
          break;
 8001634:	e00a      	b.n	800164c <HAL_FLASHEx_Erase+0xc0>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4413      	add	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3da      	bcc.n	8001602 <HAL_FLASHEx_Erase+0x76>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_FLASHEx_Erase+0xd0>)
 800164e:	2200      	movs	r2, #0
 8001650:	751a      	strb	r2, [r3, #20]

  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000098 	.word	0x20000098
 8001660:	40023c00 	.word	0x40023c00
 8001664:	ffff7ffb 	.word	0xffff7ffb

08001668 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <FLASH_MassErase+0x74>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <FLASH_MassErase+0x74>)
 800167a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800167e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <FLASH_MassErase+0x74>)
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	4914      	ldr	r1, [pc, #80]	@ (80016dc <FLASH_MassErase+0x74>)
 800168c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001690:	4313      	orrs	r3, r2
 8001692:	610b      	str	r3, [r1, #16]
 8001694:	e00f      	b.n	80016b6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d106      	bne.n	80016aa <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <FLASH_MassErase+0x74>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <FLASH_MassErase+0x74>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a6:	6113      	str	r3, [r2, #16]
 80016a8:	e005      	b.n	80016b6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <FLASH_MassErase+0x74>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <FLASH_MassErase+0x74>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <FLASH_MassErase+0x74>)
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	4313      	orrs	r3, r2
 80016c0:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <FLASH_MassErase+0x74>)
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80016c8:	f3bf 8f4f 	dsb	sy
}
 80016cc:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e010      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d103      	bne.n	800170a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e009      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d103      	bne.n	8001718 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e002      	b.n	800171e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001718:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800171c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0b      	cmp	r3, #11
 8001722:	d902      	bls.n	800172a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	4911      	ldr	r1, [pc, #68]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001748:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800174c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4313      	orrs	r3, r2
 8001758:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <FLASH_Erase_Sector+0xa0>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e175      	b.n	8001a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8164 	bne.w	8001a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x56>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80be 	beq.w	8001a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b66      	ldr	r3, [pc, #408]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_GPIO_Init+0x324>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001926:	4a61      	ldr	r2, [pc, #388]	@ (8001aac <HAL_GPIO_Init+0x328>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_GPIO_Init+0x32c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d037      	beq.n	80019c2 <HAL_GPIO_Init+0x23e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a57      	ldr	r2, [pc, #348]	@ (8001ab4 <HAL_GPIO_Init+0x330>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <HAL_GPIO_Init+0x23a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_GPIO_Init+0x334>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x236>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <HAL_GPIO_Init+0x338>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x232>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a54      	ldr	r2, [pc, #336]	@ (8001ac0 <HAL_GPIO_Init+0x33c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x22e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a53      	ldr	r2, [pc, #332]	@ (8001ac4 <HAL_GPIO_Init+0x340>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x22a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_GPIO_Init+0x344>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	@ (8001acc <HAL_GPIO_Init+0x348>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_GPIO_Init+0x34c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_Init+0x350>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x21a>
 800199a:	2309      	movs	r3, #9
 800199c:	e012      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 800199e:	230a      	movs	r3, #10
 80019a0:	e010      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a2:	2308      	movs	r3, #8
 80019a4:	e00e      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	@ (8001aac <HAL_GPIO_Init+0x328>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a34      	ldr	r2, [pc, #208]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a29      	ldr	r2, [pc, #164]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae86 	bls.w	80017a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40022400 	.word	0x40022400
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	041a      	lsls	r2, r3, #16
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	400b      	ands	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40007000 	.word	0x40007000

08001b64 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000

08001b84 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]

  /* Enable Backup regulator */
  PWR->CSR1 |= PWR_CSR1_BRE;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_PWREx_EnableBkUpReg+0x54>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_PWREx_EnableBkUpReg+0x54>)
 8001b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b98:	6053      	str	r3, [r2, #4]
    
  /* Workaround for the following hardware bug: */
  /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
  PWR->CSR1 |= PWR_CSR1_EIWUP;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_PWREx_EnableBkUpReg+0x54>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <HAL_PWREx_EnableBkUpReg+0x54>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6053      	str	r3, [r2, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba6:	f7ff f8b5 	bl	8000d14 <HAL_GetTick>
 8001baa:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_PWREx_EnableBkUpReg+0x3e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8001bae:	f7ff f8b1 	bl	8000d14 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bbc:	d901      	bls.n	8001bc2 <HAL_PWREx_EnableBkUpReg+0x3e>
    {
      return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e006      	b.n	8001bd0 <HAL_PWREx_EnableBkUpReg+0x4c>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_PWREx_EnableBkUpReg+0x54>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d1ef      	bne.n	8001bae <HAL_PWREx_EnableBkUpReg+0x2a>
    } 
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40007000 	.word	0x40007000

08001bdc <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  
  /* Disable Backup regulator */
  PWR->CSR1 &= (uint32_t)~((uint32_t)PWR_CSR1_BRE);
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_PWREx_DisableBkUpReg+0x54>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <HAL_PWREx_DisableBkUpReg+0x54>)
 8001bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001bf0:	6053      	str	r3, [r2, #4]
  
  /* Workaround for the following hardware bug: */
  /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
  PWR->CSR1 |= PWR_CSR1_EIWUP;
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_PWREx_DisableBkUpReg+0x54>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_PWREx_DisableBkUpReg+0x54>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6053      	str	r3, [r2, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfe:	f7ff f889 	bl	8000d14 <HAL_GetTick>
 8001c02:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8001c04:	e009      	b.n	8001c1a <HAL_PWREx_DisableBkUpReg+0x3e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8001c06:	f7ff f885 	bl	8000d14 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c14:	d901      	bls.n	8001c1a <HAL_PWREx_DisableBkUpReg+0x3e>
    {
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e006      	b.n	8001c28 <HAL_PWREx_DisableBkUpReg+0x4c>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8001c1a:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_PWREx_DisableBkUpReg+0x54>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d0ef      	beq.n	8001c06 <HAL_PWREx_DisableBkUpReg+0x2a>
    } 
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001c3a:	f7ff f86b 	bl	8000d14 <HAL_GetTick>
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f861 	bl	8000d14 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001c60:	4b5e      	ldr	r3, [pc, #376]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a5a      	ldr	r2, [pc, #360]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001c78:	f7ff f84c 	bl	8000d14 <HAL_GetTick>
 8001c7c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001c7e:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7ff f845 	bl	8000d14 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e09a      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff f834 	bl	8000d14 <HAL_GetTick>
 8001cac:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001cae:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001cb4:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f82a 	bl	8000d14 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e081      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001cda:	f7ff f81b 	bl	8000d14 <HAL_GetTick>
 8001cde:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff f811 	bl	8000d14 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e068      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d00:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff f802 	bl	8000d14 <HAL_GetTick>
 8001d10:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001d12:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a31      	ldr	r2, [pc, #196]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d20:	f7fe fff8 	bl	8000d14 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	@ 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001d32:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d3e:	f7fe ffe9 	bl	8000d14 <HAL_GetTick>
 8001d42:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a24      	ldr	r2, [pc, #144]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d52:	f7fe ffdf 	bl	8000d14 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b64      	cmp	r3, #100	@ 0x64
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e036      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001d64:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d72:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_RCC_DeInit+0x1ac>)
 8001d74:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d78:	4a1a      	ldr	r2, [pc, #104]	@ (8001de4 <HAL_RCC_DeInit+0x1b0>)
 8001d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d80:	4a18      	ldr	r2, [pc, #96]	@ (8001de4 <HAL_RCC_DeInit+0x1b0>)
 8001d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001d90:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d9c:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	4a0e      	ldr	r2, [pc, #56]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dae:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_RCC_DeInit+0x1a8>)
 8001db0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db4:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_DeInit+0x1b4>)
 8001db8:	4a0c      	ldr	r2, [pc, #48]	@ (8001dec <HAL_RCC_DeInit+0x1b8>)
 8001dba:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <HAL_RCC_DeInit+0x1bc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe ff63 	bl	8000c8c <HAL_InitTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	24003010 	.word	0x24003010
 8001de4:	24003000 	.word	0x24003000
 8001de8:	20000040 	.word	0x20000040
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	20000044 	.word	0x20000044

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e29b      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b96      	ldr	r3, [pc, #600]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e24:	4b93      	ldr	r3, [pc, #588]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
 8001e30:	4b90      	ldr	r3, [pc, #576]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x130>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e275      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x7a>
 8001e60:	4b84      	ldr	r3, [pc, #528]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a83      	ldr	r2, [pc, #524]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x9c>
 8001e76:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b7c      	ldr	r3, [pc, #496]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7b      	ldr	r2, [pc, #492]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc0>
 8001e9a:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a75      	ldr	r2, [pc, #468]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b73      	ldr	r3, [pc, #460]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a72      	ldr	r2, [pc, #456]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7fe ff1e 	bl	8000d14 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe ff1a 	bl	8000d14 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e229      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe8>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff0a 	bl	8000d14 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe ff06 	bl	8000d14 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e215      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b57      	ldr	r3, [pc, #348]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x110>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d069      	beq.n	8002006 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x190>
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1e9      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	493d      	ldr	r1, [pc, #244]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e040      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a38      	ldr	r2, [pc, #224]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe febc 	bl	8000d14 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe feb8 	bl	8000d14 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1c7      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4929      	ldr	r1, [pc, #164]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe98 	bl	8000d14 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fe94 	bl	8000d14 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1a3      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d038      	beq.n	8002084 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d019      	beq.n	800204e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201e:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe fe75 	bl	8000d14 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202e:	f7fe fe71 	bl	8000d14 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e180      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x23a>
 800204c:	e01a      	b.n	8002084 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_RCC_OscConfig+0x280>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7fe fe5b 	bl	8000d14 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002062:	f7fe fe57 	bl	8000d14 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d903      	bls.n	8002078 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e166      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
 8002074:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b92      	ldr	r3, [pc, #584]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a4 	beq.w	80021da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b8c      	ldr	r3, [pc, #560]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b89      	ldr	r3, [pc, #548]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a88      	ldr	r2, [pc, #544]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b86      	ldr	r3, [pc, #536]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ba:	4b83      	ldr	r3, [pc, #524]	@ (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020c6:	4b80      	ldr	r3, [pc, #512]	@ (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7f      	ldr	r2, [pc, #508]	@ (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fe1f 	bl	8000d14 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7fe fe1b 	bl	8000d14 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	@ 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e12a      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ec:	4b76      	ldr	r3, [pc, #472]	@ (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x31a>
 8002100:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a6f      	ldr	r2, [pc, #444]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x33c>
 8002116:	4b6b      	ldr	r3, [pc, #428]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a6a      	ldr	r2, [pc, #424]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70
 8002122:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a67      	ldr	r2, [pc, #412]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x35e>
 8002138:	4b62      	ldr	r3, [pc, #392]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213c:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	@ 0x70
 8002144:	4b5f      	ldr	r3, [pc, #380]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 8002152:	4b5c      	ldr	r3, [pc, #368]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a5b      	ldr	r2, [pc, #364]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fdcf 	bl	8000d14 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fdcb 	bl	8000d14 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0d8      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b4c      	ldr	r3, [pc, #304]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x386>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7fe fdb9 	bl	8000d14 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fdb5 	bl	8000d14 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0c2      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a3c      	ldr	r2, [pc, #240]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80ae 	beq.w	8002340 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d06d      	beq.n	80022cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d14b      	bne.n	8002290 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a31      	ldr	r2, [pc, #196]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fd86 	bl	8000d14 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7fe fd82 	bl	8000d14 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e091      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	071b      	lsls	r3, r3, #28
 8002256:	491b      	ldr	r1, [pc, #108]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a18      	ldr	r2, [pc, #96]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fd54 	bl	8000d14 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fd50 	bl	8000d14 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e05f      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x47c>
 800228e:	e057      	b.n	8002340 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fd3a 	bl	8000d14 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fd36 	bl	8000d14 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e045      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4b0>
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x54c>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <HAL_RCC_OscConfig+0x558>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d129      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d122      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d119      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d10f      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d0      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b67      	ldr	r3, [pc, #412]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 020f 	bic.w	r2, r3, #15
 800237e:	4965      	ldr	r1, [pc, #404]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a58      	ldr	r2, [pc, #352]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4b53      	ldr	r3, [pc, #332]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a52      	ldr	r2, [pc, #328]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b50      	ldr	r3, [pc, #320]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	494d      	ldr	r1, [pc, #308]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d040      	beq.n	8002474 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e073      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3d      	ldr	r3, [pc, #244]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4936      	ldr	r1, [pc, #216]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fc66 	bl	8000d14 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fc62 	bl	8000d14 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e053      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d210      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 020f 	bic.w	r2, r3, #15
 800248a:	4922      	ldr	r1, [pc, #136]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4916      	ldr	r1, [pc, #88]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	490e      	ldr	r1, [pc, #56]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	490a      	ldr	r1, [pc, #40]	@ (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	5ccb      	ldrb	r3, [r1, r3]
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_ClockConfig+0x1d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fbc2 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00
 8002518:	40023800 	.word	0x40023800
 800251c:	0800505c 	.word	0x0800505c
 8002520:	20000040 	.word	0x20000040
 8002524:	20000044 	.word	0x20000044

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800252c:	b090      	sub	sp, #64	@ 0x40
 800252e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
 8002534:	2300      	movs	r3, #0
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002538:	2300      	movs	r3, #0
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002540:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d00d      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x40>
 800254c:	2b08      	cmp	r3, #8
 800254e:	f200 80a1 	bhi.w	8002694 <HAL_RCC_GetSysClockFreq+0x16c>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002556:	2b04      	cmp	r3, #4
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x3a>
 800255a:	e09b      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x184>)
 800255e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002560:	e09b      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002562:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002566:	e098      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002568:	4b4f      	ldr	r3, [pc, #316]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002572:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d028      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257e:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	2200      	movs	r2, #0
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	627a      	str	r2, [r7, #36]	@ 0x24
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002590:	2100      	movs	r1, #0
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002594:	fb03 f201 	mul.w	r2, r3, r1
 8002598:	2300      	movs	r3, #0
 800259a:	fb00 f303 	mul.w	r3, r0, r3
 800259e:	4413      	add	r3, r2
 80025a0:	4a43      	ldr	r2, [pc, #268]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a2:	fba0 1202 	umull	r1, r2, r0, r2
 80025a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a8:	460a      	mov	r2, r1
 80025aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ae:	4413      	add	r3, r2
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b4:	2200      	movs	r2, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	61fa      	str	r2, [r7, #28]
 80025ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025c2:	f7fd fe39 	bl	8000238 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4613      	mov	r3, r2
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ce:	e053      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d0:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	2200      	movs	r2, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	617a      	str	r2, [r7, #20]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025e2:	f04f 0b00 	mov.w	fp, #0
 80025e6:	4652      	mov	r2, sl
 80025e8:	465b      	mov	r3, fp
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002602:	eb63 090b 	sbc.w	r9, r3, fp
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002612:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002616:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800261a:	ebb2 0408 	subs.w	r4, r2, r8
 800261e:	eb63 0509 	sbc.w	r5, r3, r9
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	00eb      	lsls	r3, r5, #3
 800262c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002630:	00e2      	lsls	r2, r4, #3
 8002632:	4614      	mov	r4, r2
 8002634:	461d      	mov	r5, r3
 8002636:	eb14 030a 	adds.w	r3, r4, sl
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	eb45 030b 	adc.w	r3, r5, fp
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800264e:	4629      	mov	r1, r5
 8002650:	028b      	lsls	r3, r1, #10
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002658:	4621      	mov	r1, r4
 800265a:	028a      	lsls	r2, r1, #10
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	2200      	movs	r2, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800266c:	f7fd fde4 	bl	8000238 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002688:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002696:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800269c:	4618      	mov	r0, r3
 800269e:	3740      	adds	r7, #64	@ 0x40
 80026a0:	46bd      	mov	sp, r7
 80026a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	00f42400 	.word	0x00f42400
 80026b0:	017d7840 	.word	0x017d7840

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a68      	ldr	r2, [pc, #416]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f0:	4964      	ldr	r1, [pc, #400]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d017      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270e:	4b5d      	ldr	r3, [pc, #372]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002714:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	4959      	ldr	r1, [pc, #356]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800272c:	d101      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d017      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800274a:	4b4e      	ldr	r3, [pc, #312]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002750:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	494a      	ldr	r1, [pc, #296]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002768:	d101      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 808b 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4a39      	ldr	r2, [pc, #228]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a4:	4b37      	ldr	r3, [pc, #220]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b0:	4b35      	ldr	r3, [pc, #212]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a34      	ldr	r2, [pc, #208]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7fe faaa 	bl	8000d14 <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe faa6 	bl	8000d14 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e358      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e2:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d035      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d02e      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002800:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002808:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002822:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d114      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fa6e 	bl	8000d14 <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fa6a 	bl	8000d14 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e31a      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800286a:	d111      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800287a:	400b      	ands	r3, r1
 800287c:	4901      	ldr	r1, [pc, #4]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
 8002882:	e00b      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	0ffffcff 	.word	0x0ffffcff
 8002890:	4ba8      	ldr	r3, [pc, #672]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4aa7      	ldr	r2, [pc, #668]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002896:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800289a:	6093      	str	r3, [r2, #8]
 800289c:	4ba5      	ldr	r3, [pc, #660]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800289e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	49a2      	ldr	r1, [pc, #648]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d010      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c0:	4a9c      	ldr	r2, [pc, #624]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ca:	4b9a      	ldr	r3, [pc, #616]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	4997      	ldr	r1, [pc, #604]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e8:	4b92      	ldr	r3, [pc, #584]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f6:	498f      	ldr	r1, [pc, #572]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800290a:	4b8a      	ldr	r3, [pc, #552]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002918:	4986      	ldr	r1, [pc, #536]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292c:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293a:	497e      	ldr	r1, [pc, #504]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800294e:	4b79      	ldr	r3, [pc, #484]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4975      	ldr	r1, [pc, #468]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002970:	4b70      	ldr	r3, [pc, #448]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	496d      	ldr	r1, [pc, #436]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002992:	4b68      	ldr	r3, [pc, #416]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	f023 020c 	bic.w	r2, r3, #12
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	4964      	ldr	r1, [pc, #400]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	495c      	ldr	r1, [pc, #368]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d6:	4b57      	ldr	r3, [pc, #348]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e4:	4953      	ldr	r1, [pc, #332]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	494b      	ldr	r1, [pc, #300]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a1a:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	4942      	ldr	r1, [pc, #264]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	493a      	ldr	r1, [pc, #232]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a5e:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6c:	4931      	ldr	r1, [pc, #196]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a80:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a8e:	4929      	ldr	r1, [pc, #164]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab0:	4920      	ldr	r1, [pc, #128]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	4914      	ldr	r1, [pc, #80]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b04:	490b      	ldr	r1, [pc, #44]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00f      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b28:	4902      	ldr	r1, [pc, #8]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b44:	4b8a      	ldr	r3, [pc, #552]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	4986      	ldr	r1, [pc, #536]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b68:	4b81      	ldr	r3, [pc, #516]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b78:	497d      	ldr	r1, [pc, #500]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d006      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80d6 	beq.w	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b94:	4b76      	ldr	r3, [pc, #472]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a75      	ldr	r2, [pc, #468]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f8b8 	bl	8000d14 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ba8:	f7fe f8b4 	bl	8000d14 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e166      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bba:	4b6d      	ldr	r3, [pc, #436]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d021      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11d      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bda:	4b65      	ldr	r3, [pc, #404]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be8:	4b61      	ldr	r3, [pc, #388]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bee:	0e1b      	lsrs	r3, r3, #24
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	019a      	lsls	r2, r3, #6
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4958      	ldr	r1, [pc, #352]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x578>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02e      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c40:	d129      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c42:	4b4b      	ldr	r3, [pc, #300]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c50:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c56:	0f1b      	lsrs	r3, r3, #28
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	019a      	lsls	r2, r3, #6
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	071b      	lsls	r3, r3, #28
 8002c76:	493e      	ldr	r1, [pc, #248]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c84:	f023 021f 	bic.w	r2, r3, #31
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	4938      	ldr	r1, [pc, #224]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01d      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca8:	0e1b      	lsrs	r3, r3, #24
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb6:	0f1b      	lsrs	r3, r3, #28
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	019a      	lsls	r2, r3, #6
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	061b      	lsls	r3, r3, #24
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	071b      	lsls	r3, r3, #28
 8002cd6:	4926      	ldr	r1, [pc, #152]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	019a      	lsls	r2, r3, #6
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	071b      	lsls	r3, r3, #28
 8002d06:	491a      	ldr	r1, [pc, #104]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d0e:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a17      	ldr	r2, [pc, #92]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1a:	f7fd fffb 	bl	8000d14 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d22:	f7fd fff7 	bl	8000d14 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	@ 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0a9      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	f040 809f 	bne.w	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d54:	f7fd ffde 	bl	8000d14 <HAL_GetTick>
 8002d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d5c:	f7fd ffda 	bl	8000d14 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	@ 0x64
 8002d68:	d904      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e08c      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d74:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d80:	d0ec      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12a      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002daa:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002db8:	4b35      	ldr	r3, [pc, #212]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	0f1b      	lsrs	r3, r3, #28
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	019a      	lsls	r2, r3, #6
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	071b      	lsls	r3, r3, #28
 8002dde:	492c      	ldr	r1, [pc, #176]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002de6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	4925      	ldr	r1, [pc, #148]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d022      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e14:	d11d      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	0e1b      	lsrs	r3, r3, #24
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	0f1b      	lsrs	r3, r3, #28
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	019a      	lsls	r2, r3, #6
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	071b      	lsls	r3, r3, #28
 8002e4a:	4911      	ldr	r1, [pc, #68]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e52:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5e:	f7fd ff59 	bl	8000d14 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e66:	f7fd ff55 	bl	8000d14 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	@ 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e007      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e84:	d1ef      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800

08002e94 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	@ 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2103      	movs	r1, #3
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	61bb      	str	r3, [r7, #24]
  return result;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b089      	sub	sp, #36	@ 0x24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	613b      	str	r3, [r7, #16]
  return result;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2103      	movs	r1, #3
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	401a      	ands	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	61bb      	str	r3, [r7, #24]
  return result;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002f74:	bf00      	nop
 8002f76:	3724      	adds	r7, #36	@ 0x24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	613b      	str	r3, [r7, #16]
  return result;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61bb      	str	r3, [r7, #24]
  return result;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b089      	sub	sp, #36	@ 0x24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	613b      	str	r3, [r7, #16]
  return result;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	210f      	movs	r1, #15
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	401a      	ands	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	61bb      	str	r3, [r7, #24]
  return result;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003030:	bf00      	nop
 8003032:	3724      	adds	r7, #36	@ 0x24
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	@ 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	613b      	str	r3, [r7, #16]
  return result;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	210f      	movs	r1, #15
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	401a      	ands	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	61bb      	str	r3, [r7, #24]
  return result;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b088      	sub	sp, #32
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	613b      	str	r3, [r7, #16]
  return result;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80030c8:	e051      	b.n	800316e <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2101      	movs	r1, #1
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d043      	beq.n	8003168 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d003      	beq.n	80030f0 <LL_GPIO_Init+0x52>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d10e      	bne.n	800310e <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	461a      	mov	r2, r3
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff12 	bl	8002f22 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fef2 	bl	8002ef2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	461a      	mov	r2, r3
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff32 	bl	8002f80 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11a      	bne.n	800315a <LL_GPIO_Init+0xbc>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	60bb      	str	r3, [r7, #8]
  return result;
 8003130:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b07      	cmp	r3, #7
 800313a:	d807      	bhi.n	800314c <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	461a      	mov	r2, r3
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff4a 	bl	8002fde <LL_GPIO_SetAFPin_0_7>
 800314a:	e006      	b.n	800315a <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	461a      	mov	r2, r3
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff71 	bl	800303c <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	461a      	mov	r2, r3
 8003160:	69b9      	ldr	r1, [r7, #24]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe96 	bl	8002e94 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1a6      	bne.n	80030ca <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <LL_RCC_HSI_IsReady+0x20>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40023800 	.word	0x40023800

080031ac <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <LL_RCC_LSE_IsReady+0x20>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40023800 	.word	0x40023800

080031d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <LL_RCC_GetSysClkSource+0x18>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <LL_RCC_GetAHBPrescaler+0x18>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <LL_RCC_GetAPB1Prescaler+0x18>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <LL_RCC_GetAPB2Prescaler+0x18>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <LL_RCC_GetUSARTClockSource+0x24>)
 800324a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	4313      	orrs	r3, r2
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40023800 	.word	0x40023800

08003268 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <LL_RCC_GetUARTClockSource+0x24>)
 8003272:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	401a      	ands	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	4313      	orrs	r3, r2
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40023800 	.word	0x40023800

08003290 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <LL_RCC_PLL_GetN+0x18>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40023800 	.word	0x40023800

080032c8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <LL_RCC_PLL_GetP+0x18>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <LL_RCC_PLL_GetDivider+0x18>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d133      	bne.n	800337a <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff94 	bl	8003240 <LL_RCC_GetUSARTClockSource>
 8003318:	4603      	mov	r3, r0
 800331a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800331e:	d016      	beq.n	800334e <LL_RCC_GetUSARTClockFreq+0x4e>
 8003320:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8003324:	d81d      	bhi.n	8003362 <LL_RCC_GetUSARTClockFreq+0x62>
 8003326:	4a70      	ldr	r2, [pc, #448]	@ (80034e8 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <LL_RCC_GetUSARTClockFreq+0x34>
 800332c:	4a6f      	ldr	r2, [pc, #444]	@ (80034ec <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <LL_RCC_GetUSARTClockFreq+0x3c>
 8003332:	e016      	b.n	8003362 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003334:	f000 f9f2 	bl	800371c <RCC_GetSystemClockFreq>
 8003338:	60f8      	str	r0, [r7, #12]
        break;
 800333a:	e0cf      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800333c:	f7ff ff24 	bl	8003188 <LL_RCC_HSI_IsReady>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80bb 	beq.w	80034be <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8003348:	4b69      	ldr	r3, [pc, #420]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800334a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800334c:	e0b7      	b.n	80034be <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800334e:	f7ff ff2d 	bl	80031ac <LL_RCC_LSE_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80b4 	beq.w	80034c2 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003360:	e0af      	b.n	80034c2 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003362:	f000 f9db 	bl	800371c <RCC_GetSystemClockFreq>
 8003366:	4603      	mov	r3, r0
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f9ff 	bl	800376c <RCC_GetHCLKClockFreq>
 800336e:	4603      	mov	r3, r0
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fa25 	bl	80037c0 <RCC_GetPCLK2ClockFreq>
 8003376:	60f8      	str	r0, [r7, #12]
        break;
 8003378:	e0b0      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d133      	bne.n	80033e8 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff5d 	bl	8003240 <LL_RCC_GetUSARTClockSource>
 8003386:	4603      	mov	r3, r0
 8003388:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800338c:	d016      	beq.n	80033bc <LL_RCC_GetUSARTClockFreq+0xbc>
 800338e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8003392:	d81d      	bhi.n	80033d0 <LL_RCC_GetUSARTClockFreq+0xd0>
 8003394:	4a57      	ldr	r2, [pc, #348]	@ (80034f4 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <LL_RCC_GetUSARTClockFreq+0xa2>
 800339a:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <LL_RCC_GetUSARTClockFreq+0xaa>
 80033a0:	e016      	b.n	80033d0 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033a2:	f000 f9bb 	bl	800371c <RCC_GetSystemClockFreq>
 80033a6:	60f8      	str	r0, [r7, #12]
        break;
 80033a8:	e098      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80033aa:	f7ff feed 	bl	8003188 <LL_RCC_HSI_IsReady>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8088 	beq.w	80034c6 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 80033b6:	4b4e      	ldr	r3, [pc, #312]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80033b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033ba:	e084      	b.n	80034c6 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80033bc:	f7ff fef6 	bl	80031ac <LL_RCC_LSE_IsReady>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8081 	beq.w	80034ca <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 80033c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033ce:	e07c      	b.n	80034ca <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80033d0:	f000 f9a4 	bl	800371c <RCC_GetSystemClockFreq>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f9c8 	bl	800376c <RCC_GetHCLKClockFreq>
 80033dc:	4603      	mov	r3, r0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f9da 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 80033e4:	60f8      	str	r0, [r7, #12]
        break;
 80033e6:	e079      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033ee:	d131      	bne.n	8003454 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff25 	bl	8003240 <LL_RCC_GetUSARTClockSource>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 80033fc:	d015      	beq.n	800342a <LL_RCC_GetUSARTClockFreq+0x12a>
 80033fe:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8003402:	d81b      	bhi.n	800343c <LL_RCC_GetUSARTClockFreq+0x13c>
 8003404:	4a3d      	ldr	r2, [pc, #244]	@ (80034fc <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <LL_RCC_GetUSARTClockFreq+0x112>
 800340a:	4a3d      	ldr	r2, [pc, #244]	@ (8003500 <LL_RCC_GetUSARTClockFreq+0x200>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <LL_RCC_GetUSARTClockFreq+0x11a>
 8003410:	e014      	b.n	800343c <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003412:	f000 f983 	bl	800371c <RCC_GetSystemClockFreq>
 8003416:	60f8      	str	r0, [r7, #12]
        break;
 8003418:	e060      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800341a:	f7ff feb5 	bl	8003188 <LL_RCC_HSI_IsReady>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d054      	beq.n	80034ce <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8003424:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8003426:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003428:	e051      	b.n	80034ce <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800342a:	f7ff febf 	bl	80031ac <LL_RCC_LSE_IsReady>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d04e      	beq.n	80034d2 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8003434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003438:	60fb      	str	r3, [r7, #12]
        }
        break;
 800343a:	e04a      	b.n	80034d2 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800343c:	f000 f96e 	bl	800371c <RCC_GetSystemClockFreq>
 8003440:	4603      	mov	r3, r0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f992 	bl	800376c <RCC_GetHCLKClockFreq>
 8003448:	4603      	mov	r3, r0
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f9b8 	bl	80037c0 <RCC_GetPCLK2ClockFreq>
 8003450:	60f8      	str	r0, [r7, #12]
        break;
 8003452:	e043      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b30      	cmp	r3, #48	@ 0x30
 8003458:	d140      	bne.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff fef0 	bl	8003240 <LL_RCC_GetUSARTClockSource>
 8003460:	4603      	mov	r3, r0
 8003462:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003466:	d015      	beq.n	8003494 <LL_RCC_GetUSARTClockFreq+0x194>
 8003468:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800346c:	d81b      	bhi.n	80034a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800346e:	4a25      	ldr	r2, [pc, #148]	@ (8003504 <LL_RCC_GetUSARTClockFreq+0x204>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <LL_RCC_GetUSARTClockFreq+0x17c>
 8003474:	4a24      	ldr	r2, [pc, #144]	@ (8003508 <LL_RCC_GetUSARTClockFreq+0x208>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <LL_RCC_GetUSARTClockFreq+0x184>
 800347a:	e014      	b.n	80034a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800347c:	f000 f94e 	bl	800371c <RCC_GetSystemClockFreq>
 8003480:	60f8      	str	r0, [r7, #12]
          break;
 8003482:	e02b      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8003484:	f7ff fe80 	bl	8003188 <LL_RCC_HSI_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d023      	beq.n	80034d6 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 800348e:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8003490:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003492:	e020      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8003494:	f7ff fe8a 	bl	80031ac <LL_RCC_LSE_IsReady>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80034a4:	e019      	b.n	80034da <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034a6:	f000 f939 	bl	800371c <RCC_GetSystemClockFreq>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f95d 	bl	800376c <RCC_GetHCLKClockFreq>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f96f 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 80034ba:	60f8      	str	r0, [r7, #12]
          break;
 80034bc:	e00e      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034be:	bf00      	nop
 80034c0:	e00c      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034c2:	bf00      	nop
 80034c4:	e00a      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034c6:	bf00      	nop
 80034c8:	e008      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034ca:	bf00      	nop
 80034cc:	e006      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034ce:	bf00      	nop
 80034d0:	e004      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 80034da:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00030001 	.word	0x00030001
 80034ec:	00030002 	.word	0x00030002
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	000c0004 	.word	0x000c0004
 80034f8:	000c0008 	.word	0x000c0008
 80034fc:	0c000400 	.word	0x0c000400
 8003500:	0c000800 	.word	0x0c000800
 8003504:	00300010 	.word	0x00300010
 8003508:	00300020 	.word	0x00300020

0800350c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2bc0      	cmp	r3, #192	@ 0xc0
 800351c:	d133      	bne.n	8003586 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fea2 	bl	8003268 <LL_RCC_GetUARTClockSource>
 8003524:	4603      	mov	r3, r0
 8003526:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800352a:	d016      	beq.n	800355a <LL_RCC_GetUARTClockFreq+0x4e>
 800352c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8003530:	d81d      	bhi.n	800356e <LL_RCC_GetUARTClockFreq+0x62>
 8003532:	4a71      	ldr	r2, [pc, #452]	@ (80036f8 <LL_RCC_GetUARTClockFreq+0x1ec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <LL_RCC_GetUARTClockFreq+0x34>
 8003538:	4a70      	ldr	r2, [pc, #448]	@ (80036fc <LL_RCC_GetUARTClockFreq+0x1f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <LL_RCC_GetUARTClockFreq+0x3c>
 800353e:	e016      	b.n	800356e <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003540:	f000 f8ec 	bl	800371c <RCC_GetSystemClockFreq>
 8003544:	60f8      	str	r0, [r7, #12]
        break;
 8003546:	e0d1      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003548:	f7ff fe1e 	bl	8003188 <LL_RCC_HSI_IsReady>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80bd 	beq.w	80036ce <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8003556:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003558:	e0b9      	b.n	80036ce <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800355a:	f7ff fe27 	bl	80031ac <LL_RCC_LSE_IsReady>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80b6 	beq.w	80036d2 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8003566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800356c:	e0b1      	b.n	80036d2 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800356e:	f000 f8d5 	bl	800371c <RCC_GetSystemClockFreq>
 8003572:	4603      	mov	r3, r0
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f8f9 	bl	800376c <RCC_GetHCLKClockFreq>
 800357a:	4603      	mov	r3, r0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f90b 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 8003582:	60f8      	str	r0, [r7, #12]
        break;
 8003584:	e0b2      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358c:	d133      	bne.n	80035f6 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fe6a 	bl	8003268 <LL_RCC_GetUARTClockSource>
 8003594:	4603      	mov	r3, r0
 8003596:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800359a:	d016      	beq.n	80035ca <LL_RCC_GetUARTClockFreq+0xbe>
 800359c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80035a0:	d81d      	bhi.n	80035de <LL_RCC_GetUARTClockFreq+0xd2>
 80035a2:	4a58      	ldr	r2, [pc, #352]	@ (8003704 <LL_RCC_GetUARTClockFreq+0x1f8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <LL_RCC_GetUARTClockFreq+0xa4>
 80035a8:	4a57      	ldr	r2, [pc, #348]	@ (8003708 <LL_RCC_GetUARTClockFreq+0x1fc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <LL_RCC_GetUARTClockFreq+0xac>
 80035ae:	e016      	b.n	80035de <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80035b0:	f000 f8b4 	bl	800371c <RCC_GetSystemClockFreq>
 80035b4:	60f8      	str	r0, [r7, #12]
        break;
 80035b6:	e099      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80035b8:	f7ff fde6 	bl	8003188 <LL_RCC_HSI_IsReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8089 	beq.w	80036d6 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 80035c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003700 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80035c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035c8:	e085      	b.n	80036d6 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80035ca:	f7ff fdef 	bl	80031ac <LL_RCC_LSE_IsReady>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8082 	beq.w	80036da <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 80035d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035dc:	e07d      	b.n	80036da <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035de:	f000 f89d 	bl	800371c <RCC_GetSystemClockFreq>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f8c1 	bl	800376c <RCC_GetHCLKClockFreq>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f8d3 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 80035f2:	60f8      	str	r0, [r7, #12]
        break;
 80035f4:	e07a      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035fc:	d131      	bne.n	8003662 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe32 	bl	8003268 <LL_RCC_GetUARTClockSource>
 8003604:	4603      	mov	r3, r0
 8003606:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800360a:	d015      	beq.n	8003638 <LL_RCC_GetUARTClockFreq+0x12c>
 800360c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8003610:	d81b      	bhi.n	800364a <LL_RCC_GetUARTClockFreq+0x13e>
 8003612:	4a3e      	ldr	r2, [pc, #248]	@ (800370c <LL_RCC_GetUARTClockFreq+0x200>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <LL_RCC_GetUARTClockFreq+0x114>
 8003618:	4a3d      	ldr	r2, [pc, #244]	@ (8003710 <LL_RCC_GetUARTClockFreq+0x204>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <LL_RCC_GetUARTClockFreq+0x11c>
 800361e:	e014      	b.n	800364a <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003620:	f000 f87c 	bl	800371c <RCC_GetSystemClockFreq>
 8003624:	60f8      	str	r0, [r7, #12]
        break;
 8003626:	e061      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003628:	f7ff fdae 	bl	8003188 <LL_RCC_HSI_IsReady>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d055      	beq.n	80036de <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8003632:	4b33      	ldr	r3, [pc, #204]	@ (8003700 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8003634:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003636:	e052      	b.n	80036de <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003638:	f7ff fdb8 	bl	80031ac <LL_RCC_LSE_IsReady>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04f      	beq.n	80036e2 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003648:	e04b      	b.n	80036e2 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800364a:	f000 f867 	bl	800371c <RCC_GetSystemClockFreq>
 800364e:	4603      	mov	r3, r0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f88b 	bl	800376c <RCC_GetHCLKClockFreq>
 8003656:	4603      	mov	r3, r0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f89d 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 800365e:	60f8      	str	r0, [r7, #12]
        break;
 8003660:	e044      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003668:	d140      	bne.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fdfc 	bl	8003268 <LL_RCC_GetUARTClockSource>
 8003670:	4603      	mov	r3, r0
 8003672:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8003676:	d015      	beq.n	80036a4 <LL_RCC_GetUARTClockFreq+0x198>
 8003678:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800367c:	d81b      	bhi.n	80036b6 <LL_RCC_GetUARTClockFreq+0x1aa>
 800367e:	4a25      	ldr	r2, [pc, #148]	@ (8003714 <LL_RCC_GetUARTClockFreq+0x208>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <LL_RCC_GetUARTClockFreq+0x180>
 8003684:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <LL_RCC_GetUARTClockFreq+0x20c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <LL_RCC_GetUARTClockFreq+0x188>
 800368a:	e014      	b.n	80036b6 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 800368c:	f000 f846 	bl	800371c <RCC_GetSystemClockFreq>
 8003690:	60f8      	str	r0, [r7, #12]
          break;
 8003692:	e02b      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8003694:	f7ff fd78 	bl	8003188 <LL_RCC_HSI_IsReady>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d023      	beq.n	80036e6 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80036a0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80036a2:	e020      	b.n	80036e6 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 80036a4:	f7ff fd82 	bl	80031ac <LL_RCC_LSE_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80036b4:	e019      	b.n	80036ea <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80036b6:	f000 f831 	bl	800371c <RCC_GetSystemClockFreq>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f855 	bl	800376c <RCC_GetHCLKClockFreq>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f867 	bl	8003798 <RCC_GetPCLK1ClockFreq>
 80036ca:	60f8      	str	r0, [r7, #12]
          break;
 80036cc:	e00e      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036ce:	bf00      	nop
 80036d0:	e00c      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036d2:	bf00      	nop
 80036d4:	e00a      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036d6:	bf00      	nop
 80036d8:	e008      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036da:	bf00      	nop
 80036dc:	e006      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036de:	bf00      	nop
 80036e0:	e004      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 80036ea:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00c00040 	.word	0x00c00040
 80036fc:	00c00080 	.word	0x00c00080
 8003700:	00f42400 	.word	0x00f42400
 8003704:	03000100 	.word	0x03000100
 8003708:	03000200 	.word	0x03000200
 800370c:	30001000 	.word	0x30001000
 8003710:	30002000 	.word	0x30002000
 8003714:	c0004000 	.word	0xc0004000
 8003718:	c0008000 	.word	0xc0008000

0800371c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003726:	f7ff fd53 	bl	80031d0 <LL_RCC_GetSysClkSource>
 800372a:	4603      	mov	r3, r0
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00c      	beq.n	800374a <RCC_GetSystemClockFreq+0x2e>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d80e      	bhi.n	8003752 <RCC_GetSystemClockFreq+0x36>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <RCC_GetSystemClockFreq+0x22>
 8003738:	2b04      	cmp	r3, #4
 800373a:	d003      	beq.n	8003744 <RCC_GetSystemClockFreq+0x28>
 800373c:	e009      	b.n	8003752 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <RCC_GetSystemClockFreq+0x48>)
 8003740:	607b      	str	r3, [r7, #4]
      break;
 8003742:	e009      	b.n	8003758 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <RCC_GetSystemClockFreq+0x4c>)
 8003746:	607b      	str	r3, [r7, #4]
      break;
 8003748:	e006      	b.n	8003758 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800374a:	f000 f84d 	bl	80037e8 <RCC_PLL_GetFreqDomain_SYS>
 800374e:	6078      	str	r0, [r7, #4]
      break;
 8003750:	e002      	b.n	8003758 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <RCC_GetSystemClockFreq+0x48>)
 8003754:	607b      	str	r3, [r7, #4]
      break;
 8003756:	bf00      	nop
  }

  return frequency;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	00f42400 	.word	0x00f42400
 8003768:	017d7840 	.word	0x017d7840

0800376c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003774:	f7ff fd3a 	bl	80031ec <LL_RCC_GetAHBPrescaler>
 8003778:	4603      	mov	r3, r0
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	4a04      	ldr	r2, [pc, #16]	@ (8003794 <RCC_GetHCLKClockFreq+0x28>)
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	40d3      	lsrs	r3, r2
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	0800505c 	.word	0x0800505c

08003798 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80037a0:	f7ff fd32 	bl	8003208 <LL_RCC_GetAPB1Prescaler>
 80037a4:	4603      	mov	r3, r0
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <RCC_GetPCLK1ClockFreq+0x24>)
 80037aa:	5cd3      	ldrb	r3, [r2, r3]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	40d3      	lsrs	r3, r2
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	0800506c 	.word	0x0800506c

080037c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80037c8:	f7ff fd2c 	bl	8003224 <LL_RCC_GetAPB2Prescaler>
 80037cc:	4603      	mov	r3, r0
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80037d2:	5cd3      	ldrb	r3, [r2, r3]
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	40d3      	lsrs	r3, r2
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	0800506c 	.word	0x0800506c

080037e8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80037f6:	f7ff fd4b 	bl	8003290 <LL_RCC_PLL_GetMainSource>
 80037fa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003808:	d003      	beq.n	8003812 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800380a:	e005      	b.n	8003818 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800380c:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800380e:	607b      	str	r3, [r7, #4]
      break;
 8003810:	e005      	b.n	800381e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003812:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003814:	607b      	str	r3, [r7, #4]
      break;
 8003816:	e002      	b.n	800381e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800381a:	607b      	str	r3, [r7, #4]
      break;
 800381c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800381e:	f7ff fd61 	bl	80032e4 <LL_RCC_PLL_GetDivider>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	fbb3 f4f2 	udiv	r4, r3, r2
 800382a:	f7ff fd3f 	bl	80032ac <LL_RCC_PLL_GetN>
 800382e:	4603      	mov	r3, r0
 8003830:	fb03 f404 	mul.w	r4, r3, r4
 8003834:	f7ff fd48 	bl	80032c8 <LL_RCC_PLL_GetP>
 8003838:	4603      	mov	r3, r0
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	3301      	adds	r3, #1
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <LL_USART_IsEnabled>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <LL_USART_IsEnabled+0x18>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <LL_USART_IsEnabled+0x1a>
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_USART_SetStopBitsLength>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	605a      	str	r2, [r3, #4]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_USART_SetHWFlowCtrl>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_USART_SetBaudRate>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038da:	d11a      	bne.n	8003912 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	005a      	lsls	r2, r3, #1
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	441a      	add	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	60da      	str	r2, [r3, #12]
}
 8003910:	e00a      	b.n	8003928 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	085a      	lsrs	r2, r3, #1
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	441a      	add	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	60da      	str	r2, [r3, #12]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff84 	bl	8003854 <LL_USART_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d179      	bne.n	8003a46 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <LL_USART_Init+0x11c>)
 8003958:	4013      	ands	r3, r2
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6851      	ldr	r1, [r2, #4]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	6912      	ldr	r2, [r2, #16]
 8003968:	4311      	orrs	r1, r2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	6992      	ldr	r2, [r2, #24]
 800396e:	430a      	orrs	r2, r1
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff7c 	bl	800387a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff89 	bl	80038a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a30      	ldr	r2, [pc, #192]	@ (8003a54 <LL_USART_Init+0x120>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d104      	bne.n	80039a0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003996:	2003      	movs	r0, #3
 8003998:	f7ff fcb2 	bl	8003300 <LL_RCC_GetUSARTClockFreq>
 800399c:	60b8      	str	r0, [r7, #8]
 800399e:	e041      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a58 <LL_USART_Init+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d104      	bne.n	80039b2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80039a8:	200c      	movs	r0, #12
 80039aa:	f7ff fca9 	bl	8003300 <LL_RCC_GetUSARTClockFreq>
 80039ae:	60b8      	str	r0, [r7, #8]
 80039b0:	e038      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a29      	ldr	r2, [pc, #164]	@ (8003a5c <LL_USART_Init+0x128>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d104      	bne.n	80039c4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80039ba:	2030      	movs	r0, #48	@ 0x30
 80039bc:	f7ff fca0 	bl	8003300 <LL_RCC_GetUSARTClockFreq>
 80039c0:	60b8      	str	r0, [r7, #8]
 80039c2:	e02f      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <LL_USART_Init+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d104      	bne.n	80039d6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80039cc:	20c0      	movs	r0, #192	@ 0xc0
 80039ce:	f7ff fd9d 	bl	800350c <LL_RCC_GetUARTClockFreq>
 80039d2:	60b8      	str	r0, [r7, #8]
 80039d4:	e026      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a22      	ldr	r2, [pc, #136]	@ (8003a64 <LL_USART_Init+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d105      	bne.n	80039ea <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80039de:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80039e2:	f7ff fd93 	bl	800350c <LL_RCC_GetUARTClockFreq>
 80039e6:	60b8      	str	r0, [r7, #8]
 80039e8:	e01c      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <LL_USART_Init+0x134>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d105      	bne.n	80039fe <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 80039f2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80039f6:	f7ff fc83 	bl	8003300 <LL_RCC_GetUSARTClockFreq>
 80039fa:	60b8      	str	r0, [r7, #8]
 80039fc:	e012      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <LL_USART_Init+0x138>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d105      	bne.n	8003a12 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8003a06:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8003a0a:	f7ff fd7f 	bl	800350c <LL_RCC_GetUARTClockFreq>
 8003a0e:	60b8      	str	r0, [r7, #8]
 8003a10:	e008      	b.n	8003a24 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <LL_USART_Init+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d104      	bne.n	8003a24 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8003a1a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8003a1e:	f7ff fd75 	bl	800350c <LL_RCC_GetUARTClockFreq>
 8003a22:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff40 	bl	80038c6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40004400 	.word	0x40004400
 8003a5c:	40004800 	.word	0x40004800
 8003a60:	40004c00 	.word	0x40004c00
 8003a64:	40005000 	.word	0x40005000
 8003a68:	40011400 	.word	0x40011400
 8003a6c:	40007800 	.word	0x40007800
 8003a70:	40007c00 	.word	0x40007c00

08003a74 <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7c:	b672      	cpsid	i
}
 8003a7e:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8003a98:	b662      	cpsie	i
}
 8003a9a:	bf00      	nop
	__enable_irq();
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	6039      	str	r1, [r7, #0]
 8003b00:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	79fa      	ldrb	r2, [r7, #7]
 8003b10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b12:	b672      	cpsid	i
}
 8003b14:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3e:	b662      	cpsie	i
}
 8003b40:	bf00      	nop
	__enable_irq();
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b66:	b672      	cpsid	i
}
 8003b68:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8003b92:	b662      	cpsie	i
}
 8003b94:	bf00      	nop
	__enable_irq();
	return data;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d101      	bne.n	8003bbc <LL_USART_IsActiveFlag_FE+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_USART_IsActiveFlag_FE+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d101      	bne.n	8003be2 <LL_USART_IsActiveFlag_NE+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_USART_IsActiveFlag_NE+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d101      	bne.n	8003c08 <LL_USART_IsActiveFlag_ORE+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_USART_IsActiveFlag_ORE+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d101      	bne.n	8003c2e <LL_USART_IsActiveFlag_RXNE+0x18>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b80      	cmp	r3, #128	@ 0x80
 8003c4e:	d101      	bne.n	8003c54 <LL_USART_IsActiveFlag_TXE+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_USART_IsActiveFlag_TXE+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2204      	movs	r2, #4
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	61ba      	str	r2, [r7, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e9      	bne.n	8003cb8 <LL_USART_EnableIT_RXNE+0x8>
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b089      	sub	sp, #36	@ 0x24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	61ba      	str	r2, [r7, #24]
 8003d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e9      	bne.n	8003cfa <LL_USART_EnableIT_TXE+0x8>
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	3724      	adds	r7, #36	@ 0x24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	@ 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	61ba      	str	r2, [r7, #24]
 8003d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e9      	bne.n	8003d3c <LL_USART_DisableIT_TXE+0x8>
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	@ 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d101      	bne.n	8003d8e <LL_USART_IsEnabledIT_RXNE+0x18>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_USART_IsEnabledIT_RXNE+0x1a>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	b2db      	uxtb	r3, r3
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART7_IRQHandler>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void UART7_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(UART7)) {
 8003dda:	4834      	ldr	r0, [pc, #208]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003ddc:	f7ff ff2e 	bl	8003c3c <LL_USART_IsActiveFlag_TXE>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01e      	beq.n	8003e24 <UART7_IRQHandler+0x50>
        if (!rbuffer_empty(&p_UART7_meta->rb_tx)) {
 8003de6:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <UART7_IRQHandler+0xdc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fe6e 	bl	8003ad0 <rbuffer_empty>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f083 0301 	eor.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <UART7_IRQHandler+0x4a>
            data = rbuffer_remove(&p_UART7_meta->rb_tx);
 8003e00:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb0 <UART7_IRQHandler+0xdc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fea0 	bl	8003b4e <rbuffer_remove>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(UART7, (uint8_t)data);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4619      	mov	r1, r3
 8003e16:	4825      	ldr	r0, [pc, #148]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e18:	f7ff ffcd 	bl	8003db6 <LL_USART_TransmitData8>
 8003e1c:	e002      	b.n	8003e24 <UART7_IRQHandler+0x50>
        } else {
            LL_USART_DisableIT_TXE(UART7);
 8003e1e:	4823      	ldr	r0, [pc, #140]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e20:	f7ff ff88 	bl	8003d34 <LL_USART_DisableIT_TXE>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(UART7) != RESET) && (LL_USART_IsEnabledIT_RXNE(UART7) != RESET)) {
 8003e24:	4821      	ldr	r0, [pc, #132]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e26:	f7ff fef6 	bl	8003c16 <LL_USART_IsActiveFlag_RXNE>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03a      	beq.n	8003ea6 <UART7_IRQHandler+0xd2>
 8003e30:	481e      	ldr	r0, [pc, #120]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e32:	f7ff ffa0 	bl	8003d76 <LL_USART_IsEnabledIT_RXNE>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d034      	beq.n	8003ea6 <UART7_IRQHandler+0xd2>
        unsigned char data = LL_USART_ReceiveData8(UART7);
 8003e3c:	481b      	ldr	r0, [pc, #108]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e3e:	f7ff ffad 	bl	8003d9c <LL_USART_ReceiveData8>
 8003e42:	4603      	mov	r3, r0
 8003e44:	71bb      	strb	r3, [r7, #6]
        if ((LL_USART_IsActiveFlag_ORE(UART7) != RESET) ||
 8003e46:	4819      	ldr	r0, [pc, #100]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e48:	f7ff fed2 	bl	8003bf0 <LL_USART_IsActiveFlag_ORE>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <UART7_IRQHandler+0x96>
            (LL_USART_IsActiveFlag_FE(UART7) != RESET) ||
 8003e52:	4816      	ldr	r0, [pc, #88]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e54:	f7ff fea6 	bl	8003ba4 <LL_USART_IsActiveFlag_FE>
 8003e58:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(UART7) != RESET) ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <UART7_IRQHandler+0x96>
            (LL_USART_IsActiveFlag_NE(UART7) != RESET)) {
 8003e5e:	4813      	ldr	r0, [pc, #76]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e60:	f7ff feb3 	bl	8003bca <LL_USART_IsActiveFlag_NE>
 8003e64:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(UART7) != RESET) ||
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <UART7_IRQHandler+0xaa>
            LL_USART_ClearFlag_ORE(UART7);
 8003e6a:	4810      	ldr	r0, [pc, #64]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e6c:	f7ff ff13 	bl	8003c96 <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(UART7);
 8003e70:	480e      	ldr	r0, [pc, #56]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e72:	f7ff fef6 	bl	8003c62 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(UART7);
 8003e76:	480d      	ldr	r0, [pc, #52]	@ (8003eac <UART7_IRQHandler+0xd8>)
 8003e78:	f7ff ff00 	bl	8003c7c <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_UART7_meta->rb_rx)) {
                rbuffer_insert(data, &p_UART7_meta->rb_rx);
            }
        }
        return;
 8003e7c:	e012      	b.n	8003ea4 <UART7_IRQHandler+0xd0>
            if (!rbuffer_full(&p_UART7_meta->rb_rx)) {
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <UART7_IRQHandler+0xdc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fe10 	bl	8003aa8 <rbuffer_full>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f083 0301 	eor.w	r3, r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <UART7_IRQHandler+0xd0>
                rbuffer_insert(data, &p_UART7_meta->rb_rx);
 8003e94:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <UART7_IRQHandler+0xdc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79bb      	ldrb	r3, [r7, #6]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fe29 	bl	8003af6 <rbuffer_insert>
        return;
 8003ea4:	bf00      	nop
    }
}
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40007800 	.word	0x40007800
 8003eb0:	2000004c 	.word	0x2000004c

08003eb4 <UART7_init>:

void UART7_init(void) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
    rbuffer_init(&p_UART7_meta->rb_tx); // Init Tx buffer
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <UART7_init+0x28>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fdd7 	bl	8003a74 <rbuffer_init>
    rbuffer_init(&p_UART7_meta->rb_rx); // Init Rx buffer
 8003ec6:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <UART7_init+0x28>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fdd2 	bl	8003a74 <rbuffer_init>
    LL_USART_EnableIT_RXNE(UART7);
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <UART7_init+0x2c>)
 8003ed2:	f7ff feed 	bl	8003cb0 <LL_USART_EnableIT_RXNE>
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000004c 	.word	0x2000004c
 8003ee0:	40007800 	.word	0x40007800

08003ee4 <UART7_send_char>:

void UART7_send_char(char c) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_UART7_meta->rb_tx))
 8003eee:	bf00      	nop
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <UART7_send_char+0x40>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fdd5 	bl	8003aa8 <rbuffer_full>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f5      	bne.n	8003ef0 <UART7_send_char+0xc>
        ;
    rbuffer_insert(c, &p_UART7_meta->rb_tx);
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <UART7_send_char+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fdf0 	bl	8003af6 <rbuffer_insert>
    LL_USART_EnableIT_TXE(UART7);
 8003f16:	4804      	ldr	r0, [pc, #16]	@ (8003f28 <UART7_send_char+0x44>)
 8003f18:	f7ff feeb 	bl	8003cf2 <LL_USART_EnableIT_TXE>
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	2000004c 	.word	0x2000004c
 8003f28:	40007800 	.word	0x40007800

08003f2c <UART7_send_array>:
    while (*str) {
        UART7_send_char(*str++);
    }
}

void UART7_send_array(const char *str, uint8_t len) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e009      	b.n	8003f52 <UART7_send_array+0x26>
        UART7_send_char(*str++);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ffcc 	bl	8003ee4 <UART7_send_char>
    for (udx = 0; udx < len; udx++) {
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3f1      	bcc.n	8003f3e <UART7_send_array+0x12>
    }
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SCB_DisableICache>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003f68:	f3bf 8f4f 	dsb	sy
}
 8003f6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f6e:	f3bf 8f6f 	isb	sy
}
 8003f72:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <SCB_DisableICache+0x3c>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <SCB_DisableICache+0x3c>)
 8003f7a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f7e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <SCB_DisableICache+0x3c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003f88:	f3bf 8f4f 	dsb	sy
}
 8003f8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f8e:	f3bf 8f6f 	isb	sy
}
 8003f92:	bf00      	nop
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <SCB_InvalidateICache>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa8:	f3bf 8f4f 	dsb	sy
}
 8003fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fae:	f3bf 8f6f 	isb	sy
}
 8003fb2:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8003fb4:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <SCB_InvalidateICache+0x30>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003fbc:	f3bf 8f4f 	dsb	sy
}
 8003fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fc2:	f3bf 8f6f 	isb	sy
}
 8003fc6:	bf00      	nop
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <SCB_DisableDCache>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003fde:	4b1f      	ldr	r3, [pc, #124]	@ (800405c <SCB_DisableDCache+0x84>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe6:	f3bf 8f4f 	dsb	sy
}
 8003fea:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8003fec:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <SCB_DisableDCache+0x84>)
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800405c <SCB_DisableDCache+0x84>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ff8:	f3bf 8f4f 	dsb	sy
}
 8003ffc:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003ffe:	4b17      	ldr	r3, [pc, #92]	@ (800405c <SCB_DisableDCache+0x84>)
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004004:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0b5b      	lsrs	r3, r3, #13
 800400a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800400e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	08db      	lsrs	r3, r3, #3
 8004014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004018:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004022:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004028:	490c      	ldr	r1, [pc, #48]	@ (800405c <SCB_DisableDCache+0x84>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	60ba      	str	r2, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ef      	bne.n	800401a <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	60fa      	str	r2, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8004044:	f3bf 8f4f 	dsb	sy
}
 8004048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800404a:	f3bf 8f6f 	isb	sy
}
 800404e:	bf00      	nop
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <SCB_CleanInvalidateDCache>:
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <SCB_CleanInvalidateDCache+0x74>)
 8004068:	2200      	movs	r2, #0
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800406e:	f3bf 8f4f 	dsb	sy
}
 8004072:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004074:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <SCB_CleanInvalidateDCache+0x74>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407a:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0b5b      	lsrs	r3, r3, #13
 8004080:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004084:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408e:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004098:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800409e:	490d      	ldr	r1, [pc, #52]	@ (80040d4 <SCB_CleanInvalidateDCache+0x74>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	60ba      	str	r2, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ef      	bne.n	8004090 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1e5a      	subs	r2, r3, #1
 80040b4:	60fa      	str	r2, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80040ba:	f3bf 8f4f 	dsb	sy
}
 80040be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040c0:	f3bf 8f6f 	isb	sy
}
 80040c4:	bf00      	nop
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <LL_APB1_GRP1_ForceReset+0x20>)
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <LL_APB1_GRP1_ForceReset+0x20>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	620b      	str	r3, [r1, #32]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40023800 	.word	0x40023800

080040fc <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	43db      	mvns	r3, r3
 800410c:	4904      	ldr	r1, [pc, #16]	@ (8004120 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800410e:	4013      	ands	r3, r2
 8004110:	620b      	str	r3, [r1, #32]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <BL_UART_Fetch_Host_Command>:
bool receiving_frame = false;
uint16_t frame_timeout = 0;

/************************************ Software Interfaces Implementations ************************************/
void BL_UART_Fetch_Host_Command(void*)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    uint8_t data;
    if (receiving_frame)
 800412c:	4b60      	ldr	r3, [pc, #384]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80ad 	beq.w	8004290 <BL_UART_Fetch_Host_Command+0x16c>
    {
        if (frame_timeout++ > 500)
 8004136:	4b5f      	ldr	r3, [pc, #380]	@ (80042b4 <BL_UART_Fetch_Host_Command+0x190>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	b291      	uxth	r1, r2
 800413e:	4a5d      	ldr	r2, [pc, #372]	@ (80042b4 <BL_UART_Fetch_Host_Command+0x190>)
 8004140:	8011      	strh	r1, [r2, #0]
 8004142:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004146:	f240 80a3 	bls.w	8004290 <BL_UART_Fetch_Host_Command+0x16c>
        {
            receiving_frame = false;
 800414a:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
            frame_length = 0;
 8004150:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
            frame_index = 0;
 8004156:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
            frame_timeout = 0;
 800415c:	4b55      	ldr	r3, [pc, #340]	@ (80042b4 <BL_UART_Fetch_Host_Command+0x190>)
 800415e:	2200      	movs	r2, #0
 8004160:	801a      	strh	r2, [r3, #0]
        }
    }
    while (!rbuffer_empty(&p_UART7_meta->rb_rx))
 8004162:	e095      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
    {
        data = rbuffer_remove(&p_UART7_meta->rb_rx);
 8004164:	4b56      	ldr	r3, [pc, #344]	@ (80042c0 <BL_UART_Fetch_Host_Command+0x19c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fcf0 	bl	8003b4e <rbuffer_remove>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]
        if (!receiving_frame)
 8004172:	4b4f      	ldr	r3, [pc, #316]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	f083 0301 	eor.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01f      	beq.n	80041c0 <BL_UART_Fetch_Host_Command+0x9c>
        {
            // Nhận byte đầu tiên (FRAME LENGTH)
            frame_timeout = 0;
 8004180:	4b4c      	ldr	r3, [pc, #304]	@ (80042b4 <BL_UART_Fetch_Host_Command+0x190>)
 8004182:	2200      	movs	r2, #0
 8004184:	801a      	strh	r2, [r3, #0]
            frame_length = data;
 8004186:	4a4c      	ldr	r2, [pc, #304]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	7013      	strb	r3, [r2, #0]
            if (frame_length > 0 && frame_length < 255)
 800418c:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <BL_UART_Fetch_Host_Command+0x8e>
 8004194:	4b48      	ldr	r3, [pc, #288]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2bff      	cmp	r3, #255	@ 0xff
 800419a:	d00a      	beq.n	80041b2 <BL_UART_Fetch_Host_Command+0x8e>
            {
                BL_Host_Buffer[0] = frame_length;
 800419c:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	4b48      	ldr	r3, [pc, #288]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 80041a2:	701a      	strb	r2, [r3, #0]
                frame_index = 1;
 80041a4:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
                receiving_frame = true;
 80041aa:	4b41      	ldr	r3, [pc, #260]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e06e      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
            }
            else
            {
                // Nếu frame_length không hợp lệ, reset trạng thái
                frame_index = 0;
 80041b2:	4b42      	ldr	r3, [pc, #264]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
                receiving_frame = false;
 80041b8:	4b3d      	ldr	r3, [pc, #244]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e067      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
            }
        }
        else
        {
            BL_Host_Buffer[frame_index++] = data;
 80041c0:	4b3e      	ldr	r3, [pc, #248]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	b2d1      	uxtb	r1, r2
 80041c8:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 80041ca:	7011      	strb	r1, [r2, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	4a3d      	ldr	r2, [pc, #244]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	5453      	strb	r3, [r2, r1]

            if (frame_index >= frame_length + 1)
 80041d4:	4b38      	ldr	r3, [pc, #224]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 80041d6:	781a      	ldrb	r2, [r3, #0]
 80041d8:	4b38      	ldr	r3, [pc, #224]	@ (80042bc <BL_UART_Fetch_Host_Command+0x198>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d257      	bcs.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
            {
                receiving_frame = false;
 80041e0:	4b33      	ldr	r3, [pc, #204]	@ (80042b0 <BL_UART_Fetch_Host_Command+0x18c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
                frame_length = 0;
 80041e6:	4b34      	ldr	r3, [pc, #208]	@ (80042b8 <BL_UART_Fetch_Host_Command+0x194>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
                uint16_t Host_CMD_Packet_Len = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	81bb      	strh	r3, [r7, #12]
                uint32_t Host_CRC32 = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
                /* Extract the CRC32 and packet length sent by the HOST */
                Host_CMD_Packet_Len = BL_Host_Buffer[0] + 1;
 80041f4:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	81bb      	strh	r3, [r7, #12]
                Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80041fc:	89bb      	ldrh	r3, [r7, #12]
 80041fe:	3b04      	subs	r3, #4
 8004200:	4a30      	ldr	r2, [pc, #192]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 8004202:	4413      	add	r3, r2
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
                if (Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0], Host_CMD_Packet_Len - 4, Host_CRC32) != FOTA_SUCCESS)
 8004208:	89bb      	ldrh	r3, [r7, #12]
 800420a:	3b04      	subs	r3, #4
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4619      	mov	r1, r3
 8004210:	482c      	ldr	r0, [pc, #176]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 8004212:	f000 faf5 	bl	8004800 <Bootloader_CRC_Verify>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <BL_UART_Fetch_Host_Command+0xfe>
                {
                    Bootloader_Send_NACK();
 800421c:	f000 fb28 	bl	8004870 <Bootloader_Send_NACK>
                    return;
 8004220:	e042      	b.n	80042a8 <BL_UART_Fetch_Host_Command+0x184>
                }
                boot_timeout = BLD_TIMEOUT;
 8004222:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <BL_UART_Fetch_Host_Command+0x1a4>)
 8004224:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004228:	601a      	str	r2, [r3, #0]
                switch (BL_Host_Buffer[1])
 800422a:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	3b10      	subs	r3, #16
 8004230:	2b07      	cmp	r3, #7
 8004232:	d82c      	bhi.n	800428e <BL_UART_Fetch_Host_Command+0x16a>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <BL_UART_Fetch_Host_Command+0x118>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800425d 	.word	0x0800425d
 8004240:	0800428f 	.word	0x0800428f
 8004244:	08004265 	.word	0x08004265
 8004248:	0800426b 	.word	0x0800426b
 800424c:	08004273 	.word	0x08004273
 8004250:	0800428b 	.word	0x0800428b
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
                {
					case CBL_GET_CID_CMD:
						Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 800425c:	4819      	ldr	r0, [pc, #100]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 800425e:	f000 f85f 	bl	8004320 <Bootloader_Get_Chip_Identification_Number>
						break;
 8004262:	e015      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_GO_TO_ADDR_CMD:
						Bootloader_Jump_To_User_App();
 8004264:	f000 f910 	bl	8004488 <Bootloader_Jump_To_User_App>
						break;
 8004268:	e012      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_FLASH_ERASE_CMD:
						Bootloader_Erase_Flash(BL_Host_Buffer);
 800426a:	4816      	ldr	r0, [pc, #88]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 800426c:	f000 f978 	bl	8004560 <Bootloader_Erase_Flash>
						break;
 8004270:	e00e      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_MEM_WRITE_CMD:
						Bootloader_Memory_Write(BL_Host_Buffer);
 8004272:	4814      	ldr	r0, [pc, #80]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 8004274:	f000 fa14 	bl	80046a0 <Bootloader_Memory_Write>
						break;
 8004278:	e00a      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_SET_VERSION:
						Set_Firmware_Version(BL_Host_Buffer);
 800427a:	4812      	ldr	r0, [pc, #72]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 800427c:	f000 fb52 	bl	8004924 <Set_Firmware_Version>
						break;
 8004280:	e006      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_GET_VERSION:
						Get_Firmware_Version(BL_Host_Buffer);
 8004282:	4810      	ldr	r0, [pc, #64]	@ (80042c4 <BL_UART_Fetch_Host_Command+0x1a0>)
 8004284:	f000 fb8c 	bl	80049a0 <Get_Firmware_Version>
						break;
 8004288:	e002      	b.n	8004290 <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_CHECK_CONNECTION:
						Bootloader_check_connection();
 800428a:	f000 f81f 	bl	80042cc <Bootloader_check_connection>
					default:
						break;
 800428e:	bf00      	nop
    while (!rbuffer_empty(&p_UART7_meta->rb_rx))
 8004290:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <BL_UART_Fetch_Host_Command+0x19c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fc1b 	bl	8003ad0 <rbuffer_empty>
 800429a:	4603      	mov	r3, r0
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f47f af5e 	bne.w	8004164 <BL_UART_Fetch_Host_Command+0x40>
                }
            }
        }
    }
}
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000374 	.word	0x20000374
 80042b4:	20000376 	.word	0x20000376
 80042b8:	20000373 	.word	0x20000373
 80042bc:	20000372 	.word	0x20000372
 80042c0:	2000004c 	.word	0x2000004c
 80042c4:	200002dc 	.word	0x200002dc
 80042c8:	200002d8 	.word	0x200002d8

080042cc <Bootloader_check_connection>:

/************************************    Static Functions Implementations  ************************************/

static void Bootloader_check_connection(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
	uint8_t status[3] = {FOTA_SUCCESS, 'O', 'K'};
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <Bootloader_check_connection+0x28>)
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	4611      	mov	r1, r2
 80042da:	8019      	strh	r1, [r3, #0]
 80042dc:	3302      	adds	r3, #2
 80042de:	0c12      	lsrs	r2, r2, #16
 80042e0:	701a      	strb	r2, [r3, #0]
	Bootloader_Send_Data_To_Host((uint8_t*)status, 3);
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	2103      	movs	r1, #3
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fad0 	bl	800488c <Bootloader_Send_Data_To_Host>
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	08005058 	.word	0x08005058

080042f8 <Bootloader_Check_Timeout>:
//	}
//
//}

void Bootloader_Check_Timeout(void*)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	if(!boot_timeout)
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <Bootloader_Check_Timeout+0x24>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <Bootloader_Check_Timeout+0x1c>
	{
		boot_timeout = BLD_TIMEOUT;
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <Bootloader_Check_Timeout+0x24>)
 800430a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800430e:	601a      	str	r2, [r3, #0]
		Firmware_Check_Available();
 8004310:	f000 fc42 	bl	8004b98 <Firmware_Check_Available>
	}
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200002d8 	.word	0x200002d8

08004320 <Bootloader_Get_Chip_Identification_Number>:
/**
 * Lấy số nhận dạng chip và gửi về host
 * @param Host_Buffer: Buffer từ host (không dùng trong hàm này)
 */
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
    uint16_t MCU_Identification_Number = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	81fb      	strh	r3, [r7, #14]
    MCU_Identification_Number = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 800432c:	4b08      	ldr	r3, [pc, #32]	@ (8004350 <Bootloader_Get_Chip_Identification_Number+0x30>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004336:	b29b      	uxth	r3, r3
 8004338:	81fb      	strh	r3, [r7, #14]
    Bootloader_Send_Data_To_Host((uint8_t*)&MCU_Identification_Number, 2);
 800433a:	f107 030e 	add.w	r3, r7, #14
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 faa3 	bl	800488c <Bootloader_Send_Data_To_Host>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e0042000 	.word	0xe0042000

08004354 <Jump_To_App>:
/**
 * Nhảy đến ứng dụng người dùng
 * @param app_address: Địa chỉ bắt đầu của ứng dụng
 * @return true nếu nhảy thành công, false nếu thất bại
 */
uint8_t Jump_To_App(uint32_t app_address) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    if (*((volatile uint32_t*)app_address) != 0xFFFFFFFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	f000 8083 	beq.w	800446e <Jump_To_App+0x11a>
    {
        uint8_t status = FOTA_SUCCESS;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]

        Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 800436c:	f107 030f 	add.w	r3, r7, #15
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fa8a 	bl	800488c <Bootloader_Send_Data_To_Host>
        HAL_Delay(1);
 8004378:	2001      	movs	r0, #1
 800437a:	f7fc fcd7 	bl	8000d2c <HAL_Delay>

        while (!rbuffer_empty(&p_UART7_meta->rb_tx));
 800437e:	bf00      	nop
 8004380:	4b3d      	ldr	r3, [pc, #244]	@ (8004478 <Jump_To_App+0x124>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fba1 	bl	8003ad0 <rbuffer_empty>
 800438e:	4603      	mov	r3, r0
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f2      	bne.n	8004380 <Jump_To_App+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 800439a:	b672      	cpsid	i
}
 800439c:	bf00      	nop
        __disable_irq();

        for (uint8_t i = 0; i < 8; i++)
 800439e:	2300      	movs	r3, #0
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e010      	b.n	80043c6 <Jump_To_App+0x72>
        {
            NVIC->ICER[i] = 0xFFFFFFFF;
 80043a4:	4a35      	ldr	r2, [pc, #212]	@ (800447c <Jump_To_App+0x128>)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	3320      	adds	r3, #32
 80043aa:	f04f 31ff 	mov.w	r1, #4294967295
 80043ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 80043b2:	4a32      	ldr	r2, [pc, #200]	@ (800447c <Jump_To_App+0x128>)
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	3360      	adds	r3, #96	@ 0x60
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i < 8; i++)
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	3301      	adds	r3, #1
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d9eb      	bls.n	80043a4 <Jump_To_App+0x50>
        }

        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART7);
 80043cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043d0:	f7ff fe82 	bl	80040d8 <LL_APB1_GRP1_ForceReset>
        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART7);
 80043d4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043d8:	f7ff fe90 	bl	80040fc <LL_APB1_GRP1_ReleaseReset>

        if (SCB->CCR & SCB_CCR_DC_Msk)
 80043dc:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <Jump_To_App+0x12c>)
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <Jump_To_App+0x9c>
        {
            SCB_CleanInvalidateDCache();
 80043e8:	f7ff fe3a 	bl	8004060 <SCB_CleanInvalidateDCache>
            SCB_DisableDCache();
 80043ec:	f7ff fdf4 	bl	8003fd8 <SCB_DisableDCache>
        }
        if (SCB->CCR & SCB_CCR_IC_Msk)
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <Jump_To_App+0x12c>)
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <Jump_To_App+0xb0>
        {
            SCB_InvalidateICache();
 80043fc:	f7ff fdd2 	bl	8003fa4 <SCB_InvalidateICache>
            SCB_DisableICache();
 8004400:	f7ff fdb0 	bl	8003f64 <SCB_DisableICache>
        }

        HAL_RCC_DeInit();
 8004404:	f7fd fc16 	bl	8001c34 <HAL_RCC_DeInit>
        HAL_DeInit();
 8004408:	f7fc fc0c 	bl	8000c24 <HAL_DeInit>

        SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk | SCB_ICSR_PENDSTCLR_Msk;
 800440c:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <Jump_To_App+0x12c>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <Jump_To_App+0x12c>)
 8004412:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8004416:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8004418:	f3bf 8f4f 	dsb	sy
}
 800441c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800441e:	f3bf 8f6f 	isb	sy
}
 8004422:	bf00      	nop
        __DSB();
        __ISB();

        __set_MSP(*((volatile uint32_t*)app_address));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f383 8808 	msr	MSP, r3
}
 8004430:	bf00      	nop
        SCB->VTOR = app_address;
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <Jump_To_App+0x12c>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6093      	str	r3, [r2, #8]
        SysTick->CTRL = 0;
 8004438:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <Jump_To_App+0x130>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
        SysTick->LOAD = 0;
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <Jump_To_App+0x130>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
 8004444:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <Jump_To_App+0x130>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800444a:	f3bf 8f4f 	dsb	sy
}
 800444e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004450:	f3bf 8f6f 	isb	sy
}
 8004454:	bf00      	nop

        __DSB();
        __ISB();

        uint32_t MainAppAddr = *((volatile uint32_t*)(app_address + 4));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
        void (*reset_handler)(void) = (void(*)(void))MainAppAddr;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8004462:	b662      	cpsie	i
}
 8004464:	bf00      	nop

        __enable_irq();
        reset_handler();
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4798      	blx	r3

        return FOTA_SUCCESS;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <Jump_To_App+0x11c>
    }
    return FOTA_FAILED;
 800446e:	2301      	movs	r3, #1
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000004c 	.word	0x2000004c
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00
 8004484:	e000e010 	.word	0xe000e010

08004488 <Bootloader_Jump_To_User_App>:
/**
 * Xử lý lệnh nhảy đến ứng dụng từ host
 * @param Host_Buffer: Buffer chứa địa chỉ ứng dụng
 */
static void Bootloader_Jump_To_User_App(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	uint8_t status = Firmware_Check_Available();
 800448e:	f000 fb83 	bl	8004b98 <Firmware_Check_Available>
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
	if(status != FOTA_SUCCESS)
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <Bootloader_Jump_To_User_App+0x1e>
	{
		Bootloader_Send_Data_To_Host(&status, 1);
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f9f3 	bl	800488c <Bootloader_Send_Data_To_Host>
	}
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <Perform_Flash_Erase>:
 * @param Sector_Index: Số sector bắt đầu (0-15) hoặc CBL_FLASH_MASS_ERASE
 * @param Number_Of_Sectors: Số sector cần xóa
 * @return SUCCESSFUL_ERASE (0), UNSUCCESSFUL_ERASE (1), hoặc INVALID_Sector_Index (2)
 */
static uint8_t Perform_Flash_Erase(uint8_t Sector_Index, uint8_t Number_Of_Sectors)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	460a      	mov	r2, r1
 80044b8:	71fb      	strb	r3, [r7, #7]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71bb      	strb	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

    // Kiểm tra số sector hợp lệ
    if (Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER)
 80044d2:	79bb      	ldrb	r3, [r7, #6]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d901      	bls.n	80044dc <Perform_Flash_Erase+0x2e>
    {
        return FOTA_FAILED;
 80044d8:	2301      	movs	r3, #1
 80044da:	e03d      	b.n	8004558 <Perform_Flash_Erase+0xaa>
    }
    // Kiểm tra Sector_Index hợp lệ
    if ((Sector_Index != CBL_FLASH_MASS_ERASE) && (Sector_Index > 7))
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2bff      	cmp	r3, #255	@ 0xff
 80044e0:	d004      	beq.n	80044ec <Perform_Flash_Erase+0x3e>
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	d901      	bls.n	80044ec <Perform_Flash_Erase+0x3e>
    {
        return FOTA_FAILED;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e035      	b.n	8004558 <Perform_Flash_Erase+0xaa>
    }

    HAL_FLASH_Unlock(); // Mở khóa flash
 80044ec:	f7fc feec 	bl	80012c8 <HAL_FLASH_Unlock>
    // Xử lý mass erase
    if (Sector_Index == CBL_FLASH_MASS_ERASE)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	2bff      	cmp	r3, #255	@ 0xff
 80044f4:	d116      	bne.n	8004524 <Perform_Flash_Erase+0x76>
    {
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
        //EraseInitStruct.Banks = FLASH_BANK_BOTH; // Xóa cả hai bank
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80044fa:	2302      	movs	r3, #2
 80044fc:	61fb      	str	r3, [r7, #28]
        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd f83f 	bl	800158c <HAL_FLASHEx_Erase>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <Perform_Flash_Erase+0x6e>
        {
            HAL_FLASH_Lock();
 8004514:	f7fc fefa 	bl	800130c <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8004518:	2301      	movs	r3, #1
 800451a:	e01d      	b.n	8004558 <Perform_Flash_Erase+0xaa>
        }
        HAL_FLASH_Lock();
 800451c:	f7fc fef6 	bl	800130c <HAL_FLASH_Lock>
        return FOTA_SUCCESS;
 8004520:	2300      	movs	r3, #0
 8004522:	e019      	b.n	8004558 <Perform_Flash_Erase+0xaa>
    }

    // Xóa từng sector
//    if (Sector_Index < 8) 	EraseInitStruct.Banks = FLASH_BANK_1;
//    else					EraseInitStruct.Banks = FLASH_BANK_2;
    EraseInitStruct.Sector = Sector_Index;
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	617b      	str	r3, [r7, #20]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800452c:	2302      	movs	r3, #2
 800452e:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = Number_Of_Sectors;
 8004530:	79bb      	ldrb	r3, [r7, #6]
 8004532:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8004534:	f107 0208 	add.w	r2, r7, #8
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd f824 	bl	800158c <HAL_FLASHEx_Erase>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <Perform_Flash_Erase+0xa4>
    {
        HAL_FLASH_Lock();
 800454a:	f7fc fedf 	bl	800130c <HAL_FLASH_Lock>
        return FOTA_FAILED;
 800454e:	2301      	movs	r3, #1
 8004550:	e002      	b.n	8004558 <Perform_Flash_Erase+0xaa>
    }

    HAL_FLASH_Lock();
 8004552:	f7fc fedb 	bl	800130c <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <Bootloader_Erase_Flash>:
/**
 * Xóa firmware trong Flash dựa trên lựa chọn từ host
 * @param Host_Buffer: Dữ liệu từ host, Host_Buffer[2] chọn firmware (1: Bank 1, 2: Bank 2)
 */
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    uint8_t Erase_Status = FOTA_SUCCESS;
 8004568:	2300      	movs	r3, #0
 800456a:	77fb      	strb	r3, [r7, #31]
    s_firmware_info fw_info;
	fw_info.address = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
	fw_info.length = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
	fw_info.crc = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
	fw_info.version_major = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	763b      	strb	r3, [r7, #24]
	fw_info.version_minor = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	767b      	strb	r3, [r7, #25]
	fw_info.version_patch = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	76bb      	strb	r3, [r7, #26]

    switch (Host_Buffer[2])
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3302      	adds	r3, #2
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d125      	bne.n	80045da <Bootloader_Erase_Flash+0x7a>
    {
        case 1: // Xóa Firmware 1 (Với F7 chỉ có 1 core với 3 fw dự phòng)
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_SECTOR, FIRMWARE1_NUM_SECTORS);
 800458e:	2102      	movs	r1, #2
 8004590:	2004      	movs	r0, #4
 8004592:	f7ff ff8c 	bl	80044ae <Perform_Flash_Erase>
 8004596:	4603      	mov	r3, r0
 8004598:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Perform_Flash_Erase(FIRMWARE2_SECTOR, FIRMWARE2_NUM_SECTORS);
 800459a:	2101      	movs	r1, #1
 800459c:	2006      	movs	r0, #6
 800459e:	f7ff ff86 	bl	80044ae <Perform_Flash_Erase>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	4413      	add	r3, r2
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Perform_Flash_Erase(FIRMWARE3_SECTOR, FIRMWARE3_NUM_SECTORS);
 80045ae:	2101      	movs	r1, #1
 80045b0:	2007      	movs	r0, #7
 80045b2:	f7ff ff7c 	bl	80044ae <Perform_Flash_Erase>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
 80045bc:	4413      	add	r3, r2
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Flash_Write_Metadata(&fw_info);
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fa46 	bl	8004a58 <Flash_Write_Metadata>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	4413      	add	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	77fb      	strb	r3, [r7, #31]
		break;
 80045d8:	e002      	b.n	80045e0 <Bootloader_Erase_Flash+0x80>

        default:
            Erase_Status = FOTA_FAILED; // Lựa chọn không hợp lệ
 80045da:	2301      	movs	r3, #1
 80045dc:	77fb      	strb	r3, [r7, #31]
		break;
 80045de:	bf00      	nop
    }

    Bootloader_Send_Data_To_Host((uint8_t*)&Erase_Status, 1);
 80045e0:	f107 031f 	add.w	r3, r7, #31
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f950 	bl	800488c <Bootloader_Send_Data_To_Host>

}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <Flash_Memory_Write_Payload>:
 * @param Payload_Start_Address: Địa chỉ bắt đầu trong Flash
 * @param Payload_Len: Độ dài dữ liệu (byte)
 * @return FLASH_PAYLOAD_WRITE_PASSED (0) nếu thành công, FLASH_PAYLOAD_WRITE_FAILED (1) nếu lỗi
 */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
	if (Payload_Start_Address + Payload_Len > FLASH_END_ADDRESS) return FOTA_FAILED;
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4413      	add	r3, r2
 8004608:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800460c:	d301      	bcc.n	8004612 <Flash_Memory_Write_Payload+0x1e>
 800460e:	2301      	movs	r3, #1
 8004610:	e042      	b.n	8004698 <Flash_Memory_Write_Payload+0xa4>
	if (Host_Payload == NULL || Payload_Len == 0)	return FOTA_FAILED;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <Flash_Memory_Write_Payload+0x2a>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <Flash_Memory_Write_Payload+0x2e>
 800461e:	2301      	movs	r3, #1
 8004620:	e03a      	b.n	8004698 <Flash_Memory_Write_Payload+0xa4>

	HAL_FLASH_Unlock(); // Mở khóa flash
 8004622:	f7fc fe51 	bl	80012c8 <HAL_FLASH_Unlock>

    uint16_t i = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	82fb      	strh	r3, [r7, #22]
    while (i < Payload_Len)
 800462a:	e02e      	b.n	800468a <Flash_Memory_Write_Payload+0x96>
    {
        uint8_t buffer[4] __attribute__((aligned(4)));
        memset(buffer, 0xFF, sizeof(buffer));
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	2204      	movs	r2, #4
 8004632:	21ff      	movs	r1, #255	@ 0xff
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fc55 	bl	8004ee4 <memset>
        uint16_t bytes_to_write = (Payload_Len - i > 4) ? 4 : (Payload_Len - i);
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	8afb      	ldrh	r3, [r7, #22]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b04      	cmp	r3, #4
 8004642:	bfa8      	it	ge
 8004644:	2304      	movge	r3, #4
 8004646:	82bb      	strh	r3, [r7, #20]
        memcpy(buffer, &Host_Payload[i], bytes_to_write);
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	18d1      	adds	r1, r2, r3
 800464e:	8aba      	ldrh	r2, [r7, #20]
 8004650:	f107 0310 	add.w	r3, r7, #16
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fc71 	bl	8004f3c <memcpy>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Payload_Start_Address + i, *(uint32_t *)buffer) != HAL_OK)
 800465a:	8afa      	ldrh	r2, [r7, #22]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	18d1      	adds	r1, r2, r3
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	461c      	mov	r4, r3
 800466a:	4615      	mov	r5, r2
 800466c:	4622      	mov	r2, r4
 800466e:	462b      	mov	r3, r5
 8004670:	2002      	movs	r0, #2
 8004672:	f7fc fdcf 	bl	8001214 <HAL_FLASH_Program>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <Flash_Memory_Write_Payload+0x90>
        {
            HAL_FLASH_Lock();
 800467c:	f7fc fe46 	bl	800130c <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8004680:	2301      	movs	r3, #1
 8004682:	e009      	b.n	8004698 <Flash_Memory_Write_Payload+0xa4>
        }
        i += 4; // Tăng bước nhảy 4 byte
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	3304      	adds	r3, #4
 8004688:	82fb      	strh	r3, [r7, #22]
    while (i < Payload_Len)
 800468a:	8afa      	ldrh	r2, [r7, #22]
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3cc      	bcc.n	800462c <Flash_Memory_Write_Payload+0x38>
    }

    HAL_FLASH_Lock();
 8004692:	f7fc fe3b 	bl	800130c <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bdb0      	pop	{r4, r5, r7, pc}

080046a0 <Bootloader_Memory_Write>:
 * Byte 6-7: Total Frames
 * Byte 8...: Chunk data
 * Byte cuối (4 bytes): CRC32
 */
static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	uint8_t Payload_Len = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
	uint8_t Status = FOTA_SUCCESS;
 80046ac:	2300      	movs	r3, #0
 80046ae:	723b      	strb	r3, [r7, #8]
	uint16_t Frame_Index = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	81bb      	strh	r3, [r7, #12]
	uint16_t Total_Frame = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	817b      	strh	r3, [r7, #10]

	Frame_Index = *((uint16_t*) (&Host_Buffer[4]));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	889b      	ldrh	r3, [r3, #4]
 80046bc:	81bb      	strh	r3, [r7, #12]
	Total_Frame = *((uint16_t*) (&Host_Buffer[6]));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	88db      	ldrh	r3, [r3, #6]
 80046c2:	817b      	strh	r3, [r7, #10]
	uint8_t fw_number = Host_Buffer[2];
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	789b      	ldrb	r3, [r3, #2]
 80046c8:	727b      	strb	r3, [r7, #9]

	if(fw_number != 1)
 80046ca:	7a7b      	ldrb	r3, [r7, #9]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d008      	beq.n	80046e2 <Bootloader_Memory_Write+0x42>
	{
		Status = FOTA_FAILED;
 80046d0:	2301      	movs	r3, #1
 80046d2:	723b      	strb	r3, [r7, #8]
		Bootloader_Send_Data_To_Host((uint8_t*)&Status, 1);
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f8d6 	bl	800488c <Bootloader_Send_Data_To_Host>
		return;
 80046e0:	e084      	b.n	80047ec <Bootloader_Memory_Write+0x14c>
	}
	if(!Frame_Index)
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11b      	bne.n	8004720 <Bootloader_Memory_Write+0x80>
	{
		Address_to_write = FIRMWARE1_MEM_BASE;
 80046e8:	4b42      	ldr	r3, [pc, #264]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 80046ea:	4a43      	ldr	r2, [pc, #268]	@ (80047f8 <Bootloader_Memory_Write+0x158>)
 80046ec:	601a      	str	r2, [r3, #0]
		Status = Flash_Read_Metadata(&Temp_Firmware);
 80046ee:	4843      	ldr	r0, [pc, #268]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80046f0:	f000 fa1c 	bl	8004b2c <Flash_Read_Metadata>
 80046f4:	4603      	mov	r3, r0
 80046f6:	723b      	strb	r3, [r7, #8]
		if(Status != FOTA_SUCCESS)
 80046f8:	7a3b      	ldrb	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <Bootloader_Memory_Write+0x6c>
		{
			Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f8c1 	bl	800488c <Bootloader_Send_Data_To_Host>
			return;
 800470a:	e06f      	b.n	80047ec <Bootloader_Memory_Write+0x14c>
		}
		Temp_Firmware.address = Address_to_write;
 800470c:	4b39      	ldr	r3, [pc, #228]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3a      	ldr	r2, [pc, #232]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 8004712:	6013      	str	r3, [r2, #0]
		Temp_Firmware.crc = 0;
 8004714:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
		Temp_Firmware.length = 0;
 800471a:	4b38      	ldr	r3, [pc, #224]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
	}

	Payload_Len = Host_Buffer[3];	//Frame size
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	78db      	ldrb	r3, [r3, #3]
 8004724:	73fb      	strb	r3, [r7, #15]

	/* Write the payload to the Flash memory */
	Status = Flash_Memory_Write_Payload((uint8_t*) &Host_Buffer[8], Address_to_write, Payload_Len);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3308      	adds	r3, #8
 800472a:	4a32      	ldr	r2, [pc, #200]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 800472c:	6811      	ldr	r1, [r2, #0]
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	b292      	uxth	r2, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff5e 	bl	80045f4 <Flash_Memory_Write_Payload>
 8004738:	4603      	mov	r3, r0
 800473a:	723b      	strb	r3, [r7, #8]
	Status += Flash_Memory_Write_Payload((uint8_t*) &Host_Buffer[8], Address_to_write + FIRMWARE2_MEM_OFFSET, Payload_Len);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f103 0008 	add.w	r0, r3, #8
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f503 23c0 	add.w	r3, r3, #393216	@ 0x60000
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	b292      	uxth	r2, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f7ff ff50 	bl	80045f4 <Flash_Memory_Write_Payload>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	7a3b      	ldrb	r3, [r7, #8]
 800475a:	4413      	add	r3, r2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	723b      	strb	r3, [r7, #8]
	Status += Flash_Memory_Write_Payload((uint8_t*) &Host_Buffer[8], Address_to_write + FIRMWARE3_MEM_OFFSET, Payload_Len);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 0008 	add.w	r0, r3, #8
 8004766:	4b23      	ldr	r3, [pc, #140]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f503 2320 	add.w	r3, r3, #655360	@ 0xa0000
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	b292      	uxth	r2, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f7ff ff3e 	bl	80045f4 <Flash_Memory_Write_Payload>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	7a3b      	ldrb	r3, [r7, #8]
 800477e:	4413      	add	r3, r2
 8004780:	b2db      	uxtb	r3, r3
 8004782:	723b      	strb	r3, [r7, #8]

	if (Status == FOTA_SUCCESS)
 8004784:	7a3b      	ldrb	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d12a      	bne.n	80047e0 <Bootloader_Memory_Write+0x140>
	{
		Address_to_write += Payload_Len;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4413      	add	r3, r2
 8004792:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <Bootloader_Memory_Write+0x154>)
 8004794:	6013      	str	r3, [r2, #0]
		Temp_Firmware.length += Payload_Len;
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	4413      	add	r3, r2
 800479e:	4a17      	ldr	r2, [pc, #92]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80047a0:	6053      	str	r3, [r2, #4]

		if (Frame_Index == (Total_Frame - 1))
 80047a2:	89ba      	ldrh	r2, [r7, #12]
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d119      	bne.n	80047e0 <Bootloader_Memory_Write+0x140>
		{
			Temp_Firmware.crc = Firmware_CRC_Verification(Temp_Firmware.address, Temp_Firmware.length);
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80047b2:	6852      	ldr	r2, [r2, #4]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f878 	bl	80048ac <Firmware_CRC_Verification>
 80047bc:	4603      	mov	r3, r0
 80047be:	4a0f      	ldr	r2, [pc, #60]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80047c0:	6093      	str	r3, [r2, #8]
			Status = Flash_Write_Metadata(&Temp_Firmware);
 80047c2:	480e      	ldr	r0, [pc, #56]	@ (80047fc <Bootloader_Memory_Write+0x15c>)
 80047c4:	f000 f948 	bl	8004a58 <Flash_Write_Metadata>
 80047c8:	4603      	mov	r3, r0
 80047ca:	723b      	strb	r3, [r7, #8]
			if(Status != FOTA_SUCCESS)
 80047cc:	7a3b      	ldrb	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <Bootloader_Memory_Write+0x140>
			{
				Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f857 	bl	800488c <Bootloader_Send_Data_To_Host>
				return;
 80047de:	e005      	b.n	80047ec <Bootloader_Memory_Write+0x14c>
			}
		}
	}

	Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f850 	bl	800488c <Bootloader_Send_Data_To_Host>
}
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	200002d4 	.word	0x200002d4
 80047f8:	08020000 	.word	0x08020000
 80047fc:	200002c4 	.word	0x200002c4

08004800 <Bootloader_CRC_Verify>:
 * @param Data_Len: Độ dài dữ liệu
 * @param Host_CRC: Giá trị CRC từ host
 * @return CRC_VERIFICATION_PASSED (1) nếu khớp, CRC_VERIFICATION_FAILED (0) nếu không
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
    uint8_t CRC_Status = FOTA_SUCCESS;
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
    uint32_t MCU_CRC_Calculated = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
    if (Data_Len == 0xFFFFFFFF)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d102      	bne.n	8004822 <Bootloader_CRC_Verify+0x22>
        return MCU_CRC_Calculated;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e01d      	b.n	800485e <Bootloader_CRC_Verify+0x5e>
    CRC->CR = CRC_CR_RESET;
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <Bootloader_CRC_Verify+0x6c>)
 8004824:	2201      	movs	r2, #1
 8004826:	609a      	str	r2, [r3, #8]
    for (unsigned int i = 0; i < Data_Len; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e008      	b.n	8004840 <Bootloader_CRC_Verify+0x40>
        CRC->DR = (uint32_t) pData[i];
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	4413      	add	r3, r2
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <Bootloader_CRC_Verify+0x6c>)
 8004838:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < Data_Len; i++)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	3301      	adds	r3, #1
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	d3f2      	bcc.n	800482e <Bootloader_CRC_Verify+0x2e>
    if (CRC->DR == Host_CRC)
 8004848:	4b08      	ldr	r3, [pc, #32]	@ (800486c <Bootloader_CRC_Verify+0x6c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d102      	bne.n	8004858 <Bootloader_CRC_Verify+0x58>
    {
        CRC_Status = FOTA_SUCCESS;
 8004852:	2300      	movs	r3, #0
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e001      	b.n	800485c <Bootloader_CRC_Verify+0x5c>
    }
    else
    {
        CRC_Status = FOTA_FAILED;
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
    }

    return CRC_Status;
 800485c:	7ffb      	ldrb	r3, [r7, #31]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	@ 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40023000 	.word	0x40023000

08004870 <Bootloader_Send_NACK>:

/**
 * Gửi NACK về host
 */
static void Bootloader_Send_NACK(void) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
    uint8_t Ack_Value = CBL_SEND_NACK;
 8004876:	23ab      	movs	r3, #171	@ 0xab
 8004878:	71fb      	strb	r3, [r7, #7]
    UART7_send_array((const char*) &Ack_Value, 1);
 800487a:	1dfb      	adds	r3, r7, #7
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fb54 	bl	8003f2c <UART7_send_array>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <Bootloader_Send_Data_To_Host>:
/**
 * Gửi dữ liệu về host
 * @param Host_Buffer: Dữ liệu cần gửi
 * @param Data_Len: Độ dài dữ liệu
 */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    UART7_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fb45 	bl	8003f2c <UART7_send_array>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <Firmware_CRC_Verification>:
 * Tính CRC cho firmware
 * @param start_address: Địa chỉ bắt đầu
 * @param length: Độ dài firmware
 * @return Giá trị CRC
 */
static uint32_t Firmware_CRC_Verification(uint32_t start_address, uint32_t length) {
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
    if (length == 0) return 0;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <Firmware_CRC_Verification+0x14>
 80048bc:	2300      	movs	r3, #0
 80048be:	e029      	b.n	8004914 <Firmware_CRC_Verification+0x68>

    uint32_t address = start_address;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	617b      	str	r3, [r7, #20]
    uint32_t end_address = start_address + length;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	4413      	add	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    uint32_t data = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

    CRC->CR = CRC_CR_RESET;
 80048d0:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <Firmware_CRC_Verification+0x74>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	609a      	str	r2, [r3, #8]

    while (address < end_address - 3) {
 80048d6:	e008      	b.n	80048ea <Firmware_CRC_Verification+0x3e>
        data = *(uint32_t*)address;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
        CRC->DR = data;
 80048de:	4a10      	ldr	r2, [pc, #64]	@ (8004920 <Firmware_CRC_Verification+0x74>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6013      	str	r3, [r2, #0]
        address += 4;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3304      	adds	r3, #4
 80048e8:	617b      	str	r3, [r7, #20]
    while (address < end_address - 3) {
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3b03      	subs	r3, #3
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3f1      	bcc.n	80048d8 <Firmware_CRC_Verification+0x2c>
    }

    while (address < end_address) {
 80048f4:	e008      	b.n	8004908 <Firmware_CRC_Verification+0x5c>
        uint8_t byte = *(uint8_t*)address;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	72fb      	strb	r3, [r7, #11]
        CRC->DR = (uint32_t)byte;
 80048fc:	4a08      	ldr	r2, [pc, #32]	@ (8004920 <Firmware_CRC_Verification+0x74>)
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	6013      	str	r3, [r2, #0]
        address++;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
    while (address < end_address) {
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	429a      	cmp	r2, r3
 800490e:	d3f2      	bcc.n	80048f6 <Firmware_CRC_Verification+0x4a>
    }

    return CRC->DR;
 8004910:	4b03      	ldr	r3, [pc, #12]	@ (8004920 <Firmware_CRC_Verification+0x74>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40023000 	.word	0x40023000

08004924 <Set_Firmware_Version>:
/**
 * Thiết lập phiên bản firmware
 * @param Host_Buffer: Buffer chứa thông tin phiên bản
 */
static void Set_Firmware_Version(uint8_t *Host_Buffer)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

    uint8_t status = FOTA_SUCCESS;
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
    if(Host_Buffer[2] != 1)		// fw_number
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3302      	adds	r3, #2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d008      	beq.n	800494c <Set_Firmware_Version+0x28>
	{
    	status = FOTA_FAILED;
 800493a:	2301      	movs	r3, #1
 800493c:	77fb      	strb	r3, [r7, #31]
    	Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 800493e:	f107 031f 	add.w	r3, r7, #31
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ffa1 	bl	800488c <Bootloader_Send_Data_To_Host>
    	return;
 800494a:	e026      	b.n	800499a <Set_Firmware_Version+0x76>
	}

    s_firmware_info fw_info;

    status = Flash_Read_Metadata(&fw_info);
 800494c:	f107 030c 	add.w	r3, r7, #12
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f8eb 	bl	8004b2c <Flash_Read_Metadata>
 8004956:	4603      	mov	r3, r0
 8004958:	77fb      	strb	r3, [r7, #31]
    if(status != FOTA_SUCCESS)
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <Set_Firmware_Version+0x4a>
    {
		Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 8004960:	f107 031f 	add.w	r3, r7, #31
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff90 	bl	800488c <Bootloader_Send_Data_To_Host>
		return;
 800496c:	e015      	b.n	800499a <Set_Firmware_Version+0x76>
    }
    fw_info.version_major = Host_Buffer[3];
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	78db      	ldrb	r3, [r3, #3]
 8004972:	763b      	strb	r3, [r7, #24]
    fw_info.version_minor = Host_Buffer[4];
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	767b      	strb	r3, [r7, #25]
    fw_info.version_patch = Host_Buffer[5];
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	795b      	ldrb	r3, [r3, #5]
 800497e:	76bb      	strb	r3, [r7, #26]

    status = Flash_Write_Metadata(&fw_info);
 8004980:	f107 030c 	add.w	r3, r7, #12
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f867 	bl	8004a58 <Flash_Write_Metadata>
 800498a:	4603      	mov	r3, r0
 800498c:	77fb      	strb	r3, [r7, #31]
    Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 800498e:	f107 031f 	add.w	r3, r7, #31
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff79 	bl	800488c <Bootloader_Send_Data_To_Host>
}
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <Get_Firmware_Version>:
/**
 * Lấy phiên bản firmware
 * @param Host_Buffer: Buffer chứa yêu cầu
 */
static void Get_Firmware_Version(uint8_t *Host_Buffer)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
    uint8_t status[6];
    memset(status, 0, sizeof(status));
 80049a8:	f107 0318 	add.w	r3, r7, #24
 80049ac:	2206      	movs	r2, #6
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fa97 	bl	8004ee4 <memset>

    if(Host_Buffer[2] != 1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3302      	adds	r3, #2
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d008      	beq.n	80049d2 <Get_Firmware_Version+0x32>
	{
		status[0] = FOTA_FAILED;
 80049c0:	2301      	movs	r3, #1
 80049c2:	763b      	strb	r3, [r7, #24]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 80049c4:	f107 0318 	add.w	r3, r7, #24
 80049c8:	2106      	movs	r1, #6
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ff5e 	bl	800488c <Bootloader_Send_Data_To_Host>
		return;
 80049d0:	e03c      	b.n	8004a4c <Get_Firmware_Version+0xac>
	}

	s_firmware_info fw_info;

	if(Flash_Read_Metadata(&fw_info) != FOTA_SUCCESS)
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f8a8 	bl	8004b2c <Flash_Read_Metadata>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <Get_Firmware_Version+0x54>
	{
		status[0] = FOTA_FAILED;
 80049e2:	2301      	movs	r3, #1
 80049e4:	763b      	strb	r3, [r7, #24]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 80049e6:	f107 0318 	add.w	r3, r7, #24
 80049ea:	2106      	movs	r1, #6
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff4d 	bl	800488c <Bootloader_Send_Data_To_Host>
		return;
 80049f2:	e02b      	b.n	8004a4c <Get_Firmware_Version+0xac>
	}

	uint16_t fw_size = ceil(fw_info.length / 1024.0f);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049fe:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8004a54 <Get_Firmware_Version+0xb4>
 8004a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a0a:	eeb0 0b47 	vmov.f64	d0, d7
 8004a0e:	f000 faa3 	bl	8004f58 <ceil>
 8004a12:	eeb0 7b40 	vmov.f64	d7, d0
 8004a16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a1a:	ee17 3a90 	vmov	r3, s15
 8004a1e:	83fb      	strh	r3, [r7, #30]
    status[0] = FOTA_SUCCESS;
 8004a20:	2300      	movs	r3, #0
 8004a22:	763b      	strb	r3, [r7, #24]
    status[1] = fw_info.version_major;
 8004a24:	7d3b      	ldrb	r3, [r7, #20]
 8004a26:	767b      	strb	r3, [r7, #25]
    status[2] = fw_info.version_minor;
 8004a28:	7d7b      	ldrb	r3, [r7, #21]
 8004a2a:	76bb      	strb	r3, [r7, #26]
    status[3] = fw_info.version_patch;
 8004a2c:	7dbb      	ldrb	r3, [r7, #22]
 8004a2e:	76fb      	strb	r3, [r7, #27]
    status[4] = (uint8_t)(fw_size >> 8);
 8004a30:	8bfb      	ldrh	r3, [r7, #30]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	773b      	strb	r3, [r7, #28]
    status[5] = (uint8_t)fw_size;
 8004a3a:	8bfb      	ldrh	r3, [r7, #30]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	777b      	strb	r3, [r7, #29]
    Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 8004a40:	f107 0318 	add.w	r3, r7, #24
 8004a44:	2106      	movs	r1, #6
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff20 	bl	800488c <Bootloader_Send_Data_To_Host>
}
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	44800000 	.word	0x44800000

08004a58 <Flash_Write_Metadata>:
 * @param fw: Con trỏ tới thông tin firmware (s_firmware_info).
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu thành công, FLASH_PAYLOAD_WRITE_FAILED nếu lỗi hoặc đầu vào không hợp lệ.
 */
static uint8_t Flash_Write_Metadata(s_firmware_info* fw_info)
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	b09c      	sub	sp, #112	@ 0x70
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	if(fw_info == NULL) return FOTA_FAILED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <Flash_Write_Metadata+0x12>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e05a      	b.n	8004b20 <Flash_Write_Metadata+0xc8>

    uint32_t metadata_addr = METADATA_MEM_BASE;
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <Flash_Write_Metadata+0xd0>)
 8004a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint32_t fw_info_size = sizeof(s_firmware_info);
 8004a6e:	2310      	movs	r3, #16
 8004a70:	667b      	str	r3, [r7, #100]	@ 0x64
    /* Chuẩn bị mảng tạm */
    uint8_t temp_buffer[64] __attribute__((aligned(4))); /* Đủ lớn cho metadata, căn chỉnh 4 byte */
    memset(temp_buffer, 0xFF, sizeof(temp_buffer));
 8004a72:	f107 0320 	add.w	r3, r7, #32
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	21ff      	movs	r1, #255	@ 0xff
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fa32 	bl	8004ee4 <memset>
    memcpy(temp_buffer, fw_info, fw_info_size);
 8004a80:	f107 0320 	add.w	r3, r7, #32
 8004a84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fa57 	bl	8004f3c <memcpy>

    HAL_FLASH_Unlock();
 8004a8e:	f7fc fc1b 	bl	80012c8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8004a92:	f107 030c 	add.w	r3, r7, #12
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Sector = 3; 						// Metadata ở Sector 3
 8004aaa:	2303      	movs	r3, #3
 8004aac:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	61fb      	str	r3, [r7, #28]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8004ab6:	f107 0208 	add.w	r2, r7, #8
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fc fd63 	bl	800158c <HAL_FLASHEx_Erase>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <Flash_Write_Metadata+0x7c>
	{
		HAL_FLASH_Lock();
 8004acc:	f7fc fc1e 	bl	800130c <HAL_FLASH_Lock>
		return FOTA_FAILED;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e025      	b.n	8004b20 <Flash_Write_Metadata+0xc8>
	}

    for (uint32_t i = 0; i < fw_info_size; i += 4)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ad8:	e01b      	b.n	8004b12 <Flash_Write_Metadata+0xba>
    {
        uint32_t temp_data = *(uint32_t *)(temp_buffer + i);
 8004ada:	f107 0220 	add.w	r2, r7, #32
 8004ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ae0:	4413      	add	r3, r2
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	663b      	str	r3, [r7, #96]	@ 0x60
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, metadata_addr + i, temp_data) != HAL_OK)
 8004ae6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aea:	18d1      	adds	r1, r2, r3
 8004aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aee:	2200      	movs	r2, #0
 8004af0:	461c      	mov	r4, r3
 8004af2:	4615      	mov	r5, r2
 8004af4:	4622      	mov	r2, r4
 8004af6:	462b      	mov	r3, r5
 8004af8:	2002      	movs	r0, #2
 8004afa:	f7fc fb8b 	bl	8001214 <HAL_FLASH_Program>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <Flash_Write_Metadata+0xb4>
        {
            HAL_FLASH_Lock();
 8004b04:	f7fc fc02 	bl	800130c <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e009      	b.n	8004b20 <Flash_Write_Metadata+0xc8>
    for (uint32_t i = 0; i < fw_info_size; i += 4)
 8004b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0e:	3304      	adds	r3, #4
 8004b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3df      	bcc.n	8004ada <Flash_Write_Metadata+0x82>
        }
    }

    HAL_FLASH_Lock();
 8004b1a:	f7fc fbf7 	bl	800130c <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3770      	adds	r7, #112	@ 0x70
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bdb0      	pop	{r4, r5, r7, pc}
 8004b28:	08018000 	.word	0x08018000

08004b2c <Flash_Read_Metadata>:
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu đọc thành công và metadata hợp lệ,
 *         FLASH_PAYLOAD_WRITE_FAILED nếu fw_number không hợp lệ hoặc metadata không hợp lệ.
 */
static uint8_t Flash_Read_Metadata(s_firmware_info* fw_info)
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b08c      	sub	sp, #48	@ 0x30
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	uint32_t metadata_addr = METADATA_MEM_BASE;
 8004b34:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <Flash_Read_Metadata+0x68>)
 8004b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[32];
    uint32_t fw_info_size = sizeof(s_firmware_info);
 8004b38:	2310      	movs	r3, #16
 8004b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

    memcpy(data, (void*)metadata_addr, sizeof(data));
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	f107 0408 	add.w	r4, r7, #8
 8004b42:	461d      	mov	r5, r3
 8004b44:	6828      	ldr	r0, [r5, #0]
 8004b46:	6869      	ldr	r1, [r5, #4]
 8004b48:	68aa      	ldr	r2, [r5, #8]
 8004b4a:	68eb      	ldr	r3, [r5, #12]
 8004b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b4e:	6928      	ldr	r0, [r5, #16]
 8004b50:	6969      	ldr	r1, [r5, #20]
 8004b52:	69aa      	ldr	r2, [r5, #24]
 8004b54:	69eb      	ldr	r3, [r5, #28]
 8004b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy(fw_info, data, fw_info_size);
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f9eb 	bl	8004f3c <memcpy>

    if((fw_info->address == 0xffffffff)||
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d009      	beq.n	8004b84 <Flash_Read_Metadata+0x58>
	(fw_info->length == 0xffffffff)||
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
    if((fw_info->address == 0xffffffff)||
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d004      	beq.n	8004b84 <Flash_Read_Metadata+0x58>
	(fw_info->crc == 0xffffffff))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
	(fw_info->length == 0xffffffff)||
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d101      	bne.n	8004b88 <Flash_Read_Metadata+0x5c>
    	return FOTA_FAILED;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <Flash_Read_Metadata+0x5e>
    return FOTA_SUCCESS;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3730      	adds	r7, #48	@ 0x30
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bdb0      	pop	{r4, r5, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	08018000 	.word	0x08018000

08004b98 <Firmware_Check_Available>:

/**
 * Kiểm tra firmware có sẵn
 */
static uint8_t Firmware_Check_Available(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
    uint32_t CRC_Result = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
    s_firmware_info fw_info;

    // Kiểm tra Firmware 1
    if(Flash_Read_Metadata(&fw_info) == FOTA_FAILED)	return FOTA_FAILED;
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ffc1 	bl	8004b2c <Flash_Read_Metadata>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <Firmware_Check_Available+0x1c>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e03d      	b.n	8004c30 <Firmware_Check_Available+0x98>

    if(fw_info.address != FIRMWARE1_MEM_BASE) return FOTA_FAILED;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4a20      	ldr	r2, [pc, #128]	@ (8004c38 <Firmware_Check_Available+0xa0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d001      	beq.n	8004bc0 <Firmware_Check_Available+0x28>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e037      	b.n	8004c30 <Firmware_Check_Available+0x98>
    if (fw_info.length > 0)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d033      	beq.n	8004c2e <Firmware_Check_Available+0x96>
    {
		CRC_Result = Firmware_CRC_Verification(fw_info.address, fw_info.length);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fe6d 	bl	80048ac <Firmware_CRC_Verification>
 8004bd2:	6178      	str	r0, [r7, #20]
		if (CRC_Result != fw_info.crc)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d01a      	beq.n	8004c12 <Firmware_Check_Available+0x7a>
		{
			if (Flash_CopyData(FIRMWARE2_MEM_BASE, FIRMWARE1_MEM_BASE, fw_info.length) != FOTA_SUCCESS)		//copy fw2 to fw1 base
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	4915      	ldr	r1, [pc, #84]	@ (8004c38 <Firmware_Check_Available+0xa0>)
 8004be2:	4816      	ldr	r0, [pc, #88]	@ (8004c3c <Firmware_Check_Available+0xa4>)
 8004be4:	f000 f82e 	bl	8004c44 <Flash_CopyData>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <Firmware_Check_Available+0x6c>
			{
				if (Flash_CopyData(FIRMWARE3_MEM_BASE, FIRMWARE1_MEM_BASE, fw_info.length) != FOTA_SUCCESS)		//copy fw3 to fw1 base
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4911      	ldr	r1, [pc, #68]	@ (8004c38 <Firmware_Check_Available+0xa0>)
 8004bf4:	4812      	ldr	r0, [pc, #72]	@ (8004c40 <Firmware_Check_Available+0xa8>)
 8004bf6:	f000 f825 	bl	8004c44 <Flash_CopyData>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <Firmware_Check_Available+0x6c>
				{
					return FOTA_FAILED;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e015      	b.n	8004c30 <Firmware_Check_Available+0x98>
				}
			}
			CRC_Result = Firmware_CRC_Verification(fw_info.address, fw_info.length);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fe4e 	bl	80048ac <Firmware_CRC_Verification>
 8004c10:	6178      	str	r0, [r7, #20]
		}

		if (CRC_Result == fw_info.crc)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d109      	bne.n	8004c2e <Firmware_Check_Available+0x96>
		{
			uint32_t app_address = FIRMWARE1_MEM_BASE;
 8004c1a:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <Firmware_Check_Available+0xa0>)
 8004c1c:	613b      	str	r3, [r7, #16]
			if(Jump_To_App(app_address) != FOTA_SUCCESS) return FOTA_FAILED;
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f7ff fb98 	bl	8004354 <Jump_To_App>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <Firmware_Check_Available+0x96>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <Firmware_Check_Available+0x98>
		}
    }
    return FOTA_FAILED;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	08020000 	.word	0x08020000
 8004c3c:	08080000 	.word	0x08080000
 8004c40:	080c0000 	.word	0x080c0000

08004c44 <Flash_CopyData>:

static uint8_t Flash_CopyData(uint32_t src_addr, uint32_t dst_addr, uint32_t length)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
    if (length == 0)  return FOTA_FAILED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <Flash_CopyData+0x16>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e044      	b.n	8004ce4 <Flash_CopyData+0xa0>
	// First clear flash fw1
	if (Perform_Flash_Erase(FIRMWARE1_SECTOR, FIRMWARE1_NUM_SECTORS) == FOTA_FAILED)	return FOTA_FAILED;
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	2004      	movs	r0, #4
 8004c5e:	f7ff fc26 	bl	80044ae <Perform_Flash_Erase>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <Flash_CopyData+0x28>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e03b      	b.n	8004ce4 <Flash_CopyData+0xa0>

	HAL_FLASH_Unlock();
 8004c6c:	f7fc fb2c 	bl	80012c8 <HAL_FLASH_Unlock>

    uint32_t i = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
    while (i < length)
 8004c74:	e02f      	b.n	8004cd6 <Flash_CopyData+0x92>
    {
    	uint8_t temp_buffer[4] __attribute__((aligned(4)));
		memset(temp_buffer, 0xFF, 4);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	21ff      	movs	r1, #255	@ 0xff
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f930 	bl	8004ee4 <memset>
        uint16_t bytes_to_write = (length - i > 4) ? 4 : (length - i);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	837b      	strh	r3, [r7, #26]
        memcpy(temp_buffer, (void *)(src_addr + i), bytes_to_write);
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	8b7a      	ldrh	r2, [r7, #26]
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f94b 	bl	8004f3c <memcpy>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, dst_addr + i, *(uint32_t *)temp_buffer) != HAL_OK)
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	18d1      	adds	r1, r2, r3
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	461c      	mov	r4, r3
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	4622      	mov	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7fc faa9 	bl	8001214 <HAL_FLASH_Program>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <Flash_CopyData+0x8c>
        {
            HAL_FLASH_Lock();
 8004cc8:	f7fc fb20 	bl	800130c <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e009      	b.n	8004ce4 <Flash_CopyData+0xa0>
        }
        i += 4; // Tăng bước nhảy 4 byte
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	61fb      	str	r3, [r7, #28]
    while (i < length)
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d3cb      	bcc.n	8004c76 <Flash_CopyData+0x32>
    }

	HAL_FLASH_Lock();
 8004cde:	f7fc fb15 	bl	800130c <HAL_FLASH_Lock>
	return FOTA_SUCCESS;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bdb0      	pop	{r4, r5, r7, pc}

08004cec <validate_no_init_vars>:
    no_init_vars.reset_wdg_id = 0;
    DisableBackupRAM();
}

void validate_no_init_vars(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
	EnableBackupRAM();
 8004cf0:	f000 f82e 	bl	8004d50 <EnableBackupRAM>
    if (no_init_vars.magic != WDG_NO_INIT_VARS_MAGIC)
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a13      	ldr	r2, [pc, #76]	@ (8004d48 <validate_no_init_vars+0x5c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00d      	beq.n	8004d1a <validate_no_init_vars+0x2e>
    {
        memset(&no_init_vars, 0, sizeof(no_init_vars));
 8004cfe:	220c      	movs	r2, #12
 8004d00:	2100      	movs	r1, #0
 8004d02:	4810      	ldr	r0, [pc, #64]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d04:	f000 f8ee 	bl	8004ee4 <memset>
        no_init_vars.magic = WDG_NO_INIT_VARS_MAGIC;
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d48 <validate_no_init_vars+0x5c>)
 8004d0c:	601a      	str	r2, [r3, #0]
        no_init_vars.reset_cause = RESET_CAUSE_NORMAL;
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	605a      	str	r2, [r3, #4]
        no_init_vars.reset_wdg_id = 0xFF;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	609a      	str	r2, [r3, #8]

    }

    if (no_init_vars.reset_cause == RESET_CAUSE_BOOTLOADER)
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d104      	bne.n	8004d2c <validate_no_init_vars+0x40>
    {
		boot_timeout = BLD_TIMEOUT;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <validate_no_init_vars+0x60>)
 8004d24:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e007      	b.n	8004d3c <validate_no_init_vars+0x50>
    }

    else if (no_init_vars.reset_cause == RESET_CAUSE_NORMAL)
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <validate_no_init_vars+0x58>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <validate_no_init_vars+0x50>
	{
		boot_timeout = BLD_TIMEOUT_NORMAL;
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <validate_no_init_vars+0x60>)
 8004d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3a:	601a      	str	r2, [r3, #0]
	}

    DisableBackupRAM();
 8004d3c:	f000 f82c 	bl	8004d98 <DisableBackupRAM>
    return;
 8004d40:	bf00      	nop
}
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40024000 	.word	0x40024000
 8004d48:	deaddead 	.word	0xdeaddead
 8004d4c:	200002d8 	.word	0x200002d8

08004d50 <EnableBackupRAM>:

static void EnableBackupRAM(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
    HAL_PWR_EnableBkUpAccess();
 8004d56:	f7fc fef5 	bl	8001b44 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <EnableBackupRAM+0x40>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d90 <EnableBackupRAM+0x40>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <EnableBackupRAM+0x40>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
    HAL_PWREx_EnableBkUpReg();
 8004d72:	f7fc ff07 	bl	8001b84 <HAL_PWREx_EnableBkUpReg>
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_BRR));
 8004d76:	bf00      	nop
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <EnableBackupRAM+0x44>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d1f9      	bne.n	8004d78 <EnableBackupRAM+0x28>
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40007000 	.word	0x40007000

08004d98 <DisableBackupRAM>:

static void DisableBackupRAM(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
    HAL_PWREx_DisableBkUpReg();
 8004d9c:	f7fc ff1e 	bl	8001bdc <HAL_PWREx_DisableBkUpReg>
    __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <DisableBackupRAM+0x1c>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	4a03      	ldr	r2, [pc, #12]	@ (8004db4 <DisableBackupRAM+0x1c>)
 8004da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004daa:	6313      	str	r3, [r2, #48]	@ 0x30
    HAL_PWR_DisableBkUpAccess();
 8004dac:	f7fc feda 	bl	8001b64 <HAL_PWR_DisableBkUpAccess>
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40023800 	.word	0x40023800

08004db8 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <SchedulerSysTickIntHandler+0x2c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <SchedulerSysTickIntHandler+0x2c>)
 8004dc4:	6013      	str	r3, [r2, #0]
    if(boot_timeout)	boot_timeout--;
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <SchedulerSysTickIntHandler+0x30>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <SchedulerSysTickIntHandler+0x20>
 8004dce:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <SchedulerSysTickIntHandler+0x30>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <SchedulerSysTickIntHandler+0x30>)
 8004dd6:	6013      	str	r3, [r2, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000378 	.word	0x20000378
 8004de8:	200002d8 	.word	0x200002d8

08004dec <SchedulerInit>:
//!
//! \return None.
//
//*****************************************************************************
void SchedulerInit(uint32_t TicksPerSecond)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((SystemCoreClock / TicksPerSecond) - 1UL);  /* set reload register */
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <SchedulerInit+0x38>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <SchedulerInit+0x3c>)
 8004e00:	3b01      	subs	r3, #1
 8004e02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <SchedulerInit+0x3c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e0a:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <SchedulerInit+0x3c>)
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk	|
				   SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer interrupt */
  SchedulerTickPerSecond = TicksPerSecond;
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <SchedulerInit+0x40>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000040 	.word	0x20000040
 8004e28:	e000e010 	.word	0xe000e010
 8004e2c:	20000050 	.word	0x20000050

08004e30 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	e022      	b.n	8004e82 <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <SchedulerRun+0x68>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	7c1b      	ldrb	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f823 	bl	8004ea4 <SchedulerElapsedTicksGet>
 8004e5e:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d309      	bcc.n	8004e7c <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <SchedulerRun+0x6c>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <SchedulerRun+0x70>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d3d7      	bcc.n	8004e3c <SchedulerRun+0xc>
        }
    }
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000004 	.word	0x20000004
 8004e9c:	20000378 	.word	0x20000378
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <SchedulerElapsedTicksGet+0x20>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f808 	bl	8004ec8 <SchedulerElapsedTicksCalc>
 8004eb8:	4603      	mov	r3, r0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000378 	.word	0x20000378

08004ec8 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <memset>:
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8004f2c <__libc_init_array+0x38>)
 8004ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f30 <__libc_init_array+0x3c>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	2600      	movs	r6, #0
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	4d0b      	ldr	r5, [pc, #44]	@ (8004f34 <__libc_init_array+0x40>)
 8004f06:	4c0c      	ldr	r4, [pc, #48]	@ (8004f38 <__libc_init_array+0x44>)
 8004f08:	f000 f89a 	bl	8005040 <_init>
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	2600      	movs	r6, #0
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	0800507c 	.word	0x0800507c
 8004f30:	0800507c 	.word	0x0800507c
 8004f34:	0800507c 	.word	0x0800507c
 8004f38:	08005080 	.word	0x08005080

08004f3c <memcpy>:
 8004f3c:	440a      	add	r2, r1
 8004f3e:	4291      	cmp	r1, r2
 8004f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f44:	d100      	bne.n	8004f48 <memcpy+0xc>
 8004f46:	4770      	bx	lr
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f52:	4291      	cmp	r1, r2
 8004f54:	d1f9      	bne.n	8004f4a <memcpy+0xe>
 8004f56:	bd10      	pop	{r4, pc}

08004f58 <ceil>:
 8004f58:	ee10 1a90 	vmov	r1, s1
 8004f5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004f60:	ee10 0a10 	vmov	r0, s0
 8004f64:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 8004f68:	2b13      	cmp	r3, #19
 8004f6a:	b530      	push	{r4, r5, lr}
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	dc2e      	bgt.n	8004fce <ceil+0x76>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da12      	bge.n	8004f9a <ceil+0x42>
 8004f74:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 8005030 <ceil+0xd8>
 8004f78:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004f7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f84:	dd04      	ble.n	8004f90 <ceil+0x38>
 8004f86:	2900      	cmp	r1, #0
 8004f88:	db4b      	blt.n	8005022 <ceil+0xca>
 8004f8a:	4308      	orrs	r0, r1
 8004f8c:	d14d      	bne.n	800502a <ceil+0xd2>
 8004f8e:	4601      	mov	r1, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4602      	mov	r2, r0
 8004f94:	ec43 2b10 	vmov	d0, r2, r3
 8004f98:	e020      	b.n	8004fdc <ceil+0x84>
 8004f9a:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <ceil+0xe0>)
 8004f9c:	411a      	asrs	r2, r3
 8004f9e:	ea01 0402 	and.w	r4, r1, r2
 8004fa2:	4304      	orrs	r4, r0
 8004fa4:	d01a      	beq.n	8004fdc <ceil+0x84>
 8004fa6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005030 <ceil+0xd8>
 8004faa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004fae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	ddeb      	ble.n	8004f90 <ceil+0x38>
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	bfc2      	ittt	gt
 8004fbc:	f44f 1080 	movgt.w	r0, #1048576	@ 0x100000
 8004fc0:	fa40 f303 	asrgt.w	r3, r0, r3
 8004fc4:	18c9      	addgt	r1, r1, r3
 8004fc6:	ea21 0102 	bic.w	r1, r1, r2
 8004fca:	2000      	movs	r0, #0
 8004fcc:	e7e0      	b.n	8004f90 <ceil+0x38>
 8004fce:	2b33      	cmp	r3, #51	@ 0x33
 8004fd0:	dd05      	ble.n	8004fde <ceil+0x86>
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd6:	d101      	bne.n	8004fdc <ceil+0x84>
 8004fd8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004fdc:	bd30      	pop	{r4, r5, pc}
 8004fde:	f2a2 4413 	subw	r4, r2, #1043	@ 0x413
 8004fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe6:	40e2      	lsrs	r2, r4
 8004fe8:	4210      	tst	r0, r2
 8004fea:	d0f7      	beq.n	8004fdc <ceil+0x84>
 8004fec:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8005030 <ceil+0xd8>
 8004ff0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004ff4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	ddc8      	ble.n	8004f90 <ceil+0x38>
 8004ffe:	2900      	cmp	r1, #0
 8005000:	dd02      	ble.n	8005008 <ceil+0xb0>
 8005002:	2b14      	cmp	r3, #20
 8005004:	d103      	bne.n	800500e <ceil+0xb6>
 8005006:	3101      	adds	r1, #1
 8005008:	ea20 0002 	bic.w	r0, r0, r2
 800500c:	e7c0      	b.n	8004f90 <ceil+0x38>
 800500e:	2401      	movs	r4, #1
 8005010:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8005014:	fa04 f303 	lsl.w	r3, r4, r3
 8005018:	4418      	add	r0, r3
 800501a:	4285      	cmp	r5, r0
 800501c:	bf88      	it	hi
 800501e:	1909      	addhi	r1, r1, r4
 8005020:	e7f2      	b.n	8005008 <ceil+0xb0>
 8005022:	2000      	movs	r0, #0
 8005024:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005028:	e7b2      	b.n	8004f90 <ceil+0x38>
 800502a:	4904      	ldr	r1, [pc, #16]	@ (800503c <ceil+0xe4>)
 800502c:	2000      	movs	r0, #0
 800502e:	e7af      	b.n	8004f90 <ceil+0x38>
 8005030:	8800759c 	.word	0x8800759c
 8005034:	7e37e43c 	.word	0x7e37e43c
 8005038:	000fffff 	.word	0x000fffff
 800503c:	3ff00000 	.word	0x3ff00000

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
