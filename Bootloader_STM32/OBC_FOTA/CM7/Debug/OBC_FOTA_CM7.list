
OBC_FOTA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007028  08007028  00008028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800707c  0800707c  00009058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800707c  0800707c  00009058  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800707c  0800707c  00009058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800707c  0800707c  0000807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007080  08007080  00008080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  24000000  08007084  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  24000058  080070dc  00009058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000380  080070dc  00009380  2**0
                  ALLOC
 11 .bkpram       0000000c  38800000  38800000  0000a000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d67  00000000  00000000  00009086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c5  00000000  00000000  0001aded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0001e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d17  00000000  00000000  0001f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d8c6  00000000  00000000  0001ff57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ce3  00000000  00000000  0005d81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00187e34  00000000  00000000  00072500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001fa334  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c8  00000000  00000000  001fa378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001fea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000058 	.word	0x24000058
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007010 	.word	0x08007010

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400005c 	.word	0x2400005c
 80002d4:	08007010 	.word	0x08007010

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ExitRun0Mode+0x30>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f023 0306 	bic.w	r3, r3, #6
 8000440:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <ExitRun0Mode+0x30>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <ExitRun0Mode+0x30>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <__NVIC_GetPriorityGrouping+0x18>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	f003 0307 	and.w	r3, r3, #7
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800048e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000492:	2b00      	cmp	r3, #0
 8000494:	db0b      	blt.n	80004ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	f003 021f 	and.w	r2, r3, #31
 800049c:	4907      	ldr	r1, [pc, #28]	@ (80004bc <__NVIC_EnableIRQ+0x38>)
 800049e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004a2:	095b      	lsrs	r3, r3, #5
 80004a4:	2001      	movs	r0, #1
 80004a6:	fa00 f202 	lsl.w	r2, r0, r2
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	db0a      	blt.n	80004ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	490c      	ldr	r1, [pc, #48]	@ (800050c <__NVIC_SetPriority+0x4c>)
 80004da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004de:	0112      	lsls	r2, r2, #4
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e8:	e00a      	b.n	8000500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <__NVIC_SetPriority+0x50>)
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	3b04      	subs	r3, #4
 80004f8:	0112      	lsls	r2, r2, #4
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000514:	b480      	push	{r7}
 8000516:	b089      	sub	sp, #36	@ 0x24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f1c3 0307 	rsb	r3, r3, #7
 800052e:	2b04      	cmp	r3, #4
 8000530:	bf28      	it	cs
 8000532:	2304      	movcs	r3, #4
 8000534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	3304      	adds	r3, #4
 800053a:	2b06      	cmp	r3, #6
 800053c:	d902      	bls.n	8000544 <NVIC_EncodePriority+0x30>
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	3b03      	subs	r3, #3
 8000542:	e000      	b.n	8000546 <NVIC_EncodePriority+0x32>
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	f04f 32ff 	mov.w	r2, #4294967295
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43da      	mvns	r2, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	401a      	ands	r2, r3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43d9      	mvns	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	4313      	orrs	r3, r2
         );
}
 800056e:	4618      	mov	r0, r3
 8000570:	3724      	adds	r7, #36	@ 0x24
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f043 0201 	orr.w	r2, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b089      	sub	sp, #36	@ 0x24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3308      	adds	r3, #8
 80005c8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	e853 3f00 	ldrex	r3, [r3]
 80005d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	075b      	lsls	r3, r3, #29
 80005dc:	4313      	orrs	r3, r2
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3308      	adds	r3, #8
 80005e4:	69fa      	ldr	r2, [r7, #28]
 80005e6:	61ba      	str	r2, [r7, #24]
 80005e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005ea:	6979      	ldr	r1, [r7, #20]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	e841 2300 	strex	r3, r2, [r1]
 80005f2:	613b      	str	r3, [r7, #16]
   return(result);
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1e4      	bne.n	80005c4 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3724      	adds	r7, #36	@ 0x24
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000608:	b480      	push	{r7}
 800060a:	b089      	sub	sp, #36	@ 0x24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3308      	adds	r3, #8
 8000616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	e853 3f00 	ldrex	r3, [r3]
 800061e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	065b      	lsls	r3, r3, #25
 800062a:	4313      	orrs	r3, r2
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3308      	adds	r3, #8
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	61ba      	str	r2, [r7, #24]
 8000636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000638:	6979      	ldr	r1, [r7, #20]
 800063a:	69ba      	ldr	r2, [r7, #24]
 800063c:	e841 2300 	strex	r3, r2, [r1]
 8000640:	613b      	str	r3, [r7, #16]
   return(result);
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1e4      	bne.n	8000612 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3724      	adds	r7, #36	@ 0x24
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000696:	d101      	bne.n	800069c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80006be:	d101      	bne.n	80006c4 <LL_USART_IsActiveFlag_REACK+0x1a>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <LL_USART_IsActiveFlag_REACK+0x1c>
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80006e2:	4909      	ldr	r1, [pc, #36]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f8:	68fb      	ldr	r3, [r7, #12]
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	58024400 	.word	0x58024400

0800070c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <LL_APB1_GRP1_EnableClock+0x34>)
 8000716:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800071a:	4909      	ldr	r1, [pc, #36]	@ (8000740 <LL_APB1_GRP1_EnableClock+0x34>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <LL_APB1_GRP1_EnableClock+0x34>)
 8000726:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000730:	68fb      	ldr	r3, [r7, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	58024400 	.word	0x58024400

08000744 <watchdog_handler>:
        .bActive = true                      		// Kích hoạt
    }
};

static void watchdog_handler(void*)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	4803      	ldr	r0, [pc, #12]	@ (800075c <watchdog_handler+0x18>)
 8000750:	f001 fab7 	bl	8001cc2 <HAL_GPIO_TogglePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58020c00 	.word	0x58020c00

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000764:	f000 f99a 	bl	8000a9c <MPU_Config>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fa6a 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f812 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f950 	bl	8000a14 <MX_GPIO_Init>
  MX_CRC_Init();
 8000774:	f000 f88c 	bl	8000890 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000778:	f000 f8ac 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SchedulerInit(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f006 fb1c 	bl	8006dbc <SchedulerInit>
  USART2_init();
 8000784:	f005 faf2 	bl	8005d6c <USART2_init>
  validate_no_init_vars();
 8000788:	f006 fa92 	bl	8006cb0 <validate_no_init_vars>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 800078c:	f006 fb38 	bl	8006e00 <SchedulerRun>
 8000790:	e7fc      	b.n	800078c <main+0x2c>
	...

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	224c      	movs	r2, #76	@ 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fb86 	bl	8006eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fb80 	bl	8006eb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f001 fabf 	bl	8001d38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <SystemClock_Config+0xf4>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c2:	4a31      	ldr	r2, [pc, #196]	@ (8000888 <SystemClock_Config+0xf4>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <SystemClock_Config+0xf4>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <SystemClock_Config+0xf8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007dc:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <SystemClock_Config+0xf8>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <SystemClock_Config+0xf8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f0:	bf00      	nop
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <SystemClock_Config+0xf8>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fe:	d1f8      	bne.n	80007f2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000804:	2301      	movs	r3, #1
 8000806:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000818:	230c      	movs	r3, #12
 800081a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000828:	230c      	movs	r3, #12
 800082a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082c:	2300      	movs	r3, #0
 800082e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fc4d 	bl	80020d8 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000844:	f000 f956 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	233f      	movs	r3, #63	@ 0x3f
 800084a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000856:	2308      	movs	r3, #8
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f002 f88b 	bl	800298c <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800087c:	f000 f93a 	bl	8000af4 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3770      	adds	r7, #112	@ 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58000400 	.word	0x58000400
 800088c:	58024800 	.word	0x58024800

08000890 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_CRC_Init+0x3c>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <MX_CRC_Init+0x40>)
 8000898:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_CRC_Init+0x3c>)
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_CRC_Init+0x3c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_CRC_Init+0x3c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_CRC_Init+0x3c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_CRC_Init+0x3c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_CRC_Init+0x3c>)
 80008ba:	f000 fc45 	bl	8001148 <HAL_CRC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008c4:	f000 f916 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000074 	.word	0x24000074
 80008d0:	58024c00 	.word	0x58024c00

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0be      	sub	sp, #248	@ 0xf8
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008da:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80008de:	2220      	movs	r2, #32
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fae6 	bl	8006eb4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	22c0      	movs	r2, #192	@ 0xc0
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f006 fad7 	bl	8006eb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000906:	f04f 0202 	mov.w	r2, #2
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000912:	2300      	movs	r3, #0
 8000914:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fb67 	bl	8002fec <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000924:	f000 f8e6 	bl	8000af4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000928:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800092c:	f7ff feee 	bl	800070c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fecf 	bl	80006d4 <LL_AHB4_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000936:	230c      	movs	r3, #12
 8000938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000954:	2307      	movs	r3, #7
 8000956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800095e:	4619      	mov	r1, r3
 8000960:	482a      	ldr	r0, [pc, #168]	@ (8000a0c <MX_USART2_UART_Init+0x138>)
 8000962:	f003 ff8b 	bl	800487c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000966:	f7ff fd7f 	bl	8000468 <__NVIC_GetPriorityGrouping>
 800096a:	4603      	mov	r3, r0
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdcf 	bl	8000514 <NVIC_EncodePriority>
 8000976:	4603      	mov	r3, r0
 8000978:	4619      	mov	r1, r3
 800097a:	2026      	movs	r0, #38	@ 0x26
 800097c:	f7ff fda0 	bl	80004c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000980:	2026      	movs	r0, #38	@ 0x26
 8000982:	f7ff fd7f 	bl	8000484 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 800098c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000990:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009a6:	230c      	movs	r3, #12
 80009a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART2, &USART_InitStruct);
 80009b8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80009bc:	4619      	mov	r1, r3
 80009be:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009c0:	f004 ff0a 	bl	80057d8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 80009c4:	2100      	movs	r1, #0
 80009c6:	4812      	ldr	r0, [pc, #72]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009c8:	f7ff fdf7 	bl	80005ba <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 80009cc:	2100      	movs	r1, #0
 80009ce:	4810      	ldr	r0, [pc, #64]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009d0:	f7ff fe1a 	bl	8000608 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 80009d4:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009d6:	f7ff fde0 	bl	800059a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009dc:	f7ff fe3b 	bl	8000656 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009e2:	f7ff fdca 	bl	800057a <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 80009e6:	bf00      	nop
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009ea:	f7ff fe4a 	bl	8000682 <LL_USART_IsActiveFlag_TEACK>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f9      	beq.n	80009e8 <MX_USART2_UART_Init+0x114>
 80009f4:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_USART2_UART_Init+0x13c>)
 80009f6:	f7ff fe58 	bl	80006aa <LL_USART_IsActiveFlag_REACK>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f3      	beq.n	80009e8 <MX_USART2_UART_Init+0x114>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	37f8      	adds	r7, #248	@ 0xf8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	58020000 	.word	0x58020000
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_GPIO_Init+0x80>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_DONE_GPIO_Port, WD_DONE_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <MX_GPIO_Init+0x84>)
 8000a6c:	f001 f910 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_DONE_Pin */
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x84>)
 8000a88:	f000 ff52 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020c00 	.word	0x58020c00

08000a9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aae:	f000 fad3 	bl	8001058 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000abe:	231f      	movs	r3, #31
 8000ac0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ac2:	2387      	movs	r3, #135	@ 0x87
 8000ac4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 faf1 	bl	80010c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f000 face 	bl	8001088 <HAL_MPU_Enable>

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <HAL_MspInit+0x30>)
 8000b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b0c:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <HAL_MspInit+0x30>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_MspInit+0x30>)
 8000b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	58024400 	.word	0x58024400

08000b34 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <HAL_CRC_MspInit+0x3c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10e      	bne.n	8000b64 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_CRC_MspInit+0x40>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <HAL_CRC_MspInit+0x40>)
 8000b4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_CRC_MspInit+0x40>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	58024c00 	.word	0x58024c00
 8000b74:	58024400 	.word	0x58024400

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 8000bce:	f006 f8db 	bl	8006d88 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd2:	f000 f90d 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_IRQ();
 8000bde:	f005 f855 	bl	8005c8c <USART2_IRQ>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bec:	f7ff fc22 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf0:	f7ff fb72 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f006 f953 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fd9f 	bl	8000760 <main>
  bx  lr
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c2c:	24000058 	.word	0x24000058
  ldr r2, =_sidata
 8000c30:	08007084 	.word	0x08007084
  ldr r2, =_sbss
 8000c34:	24000058 	.word	0x24000058
  ldr r4, =_ebss
 8000c38:	24000380 	.word	0x24000380

08000c3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC3_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f000 f9d4 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c4c:	f002 f854 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8000c50:	4602      	mov	r2, r0
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <HAL_Init+0x68>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	4913      	ldr	r1, [pc, #76]	@ (8000cac <HAL_Init+0x6c>)
 8000c5e:	5ccb      	ldrb	r3, [r1, r3]
 8000c60:	f003 031f 	and.w	r3, r3, #31
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
 8000c68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_Init+0x68>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <HAL_Init+0x6c>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_Init+0x70>)
 8000c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <HAL_Init+0x74>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f87a 	bl	8000d84 <HAL_InitTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e002      	b.n	8000ca0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9a:	f7ff ff31 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	0800702c 	.word	0x0800702c
 8000cb0:	24000004 	.word	0x24000004
 8000cb4:	24000000 	.word	0x24000000

08000cb8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cbe:	4a27      	ldr	r2, [pc, #156]	@ (8000d5c <HAL_DeInit+0xa4>)
 8000cc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000cc2:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cca:	4a25      	ldr	r2, [pc, #148]	@ (8000d60 <HAL_DeInit+0xa8>)
 8000ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cda:	f240 2271 	movw	r2, #625	@ 0x271
 8000cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cec:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <HAL_DeInit+0xac>)
 8000cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000cfc:	2218      	movs	r2, #24
 8000cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d0c:	4a16      	ldr	r2, [pc, #88]	@ (8000d68 <HAL_DeInit+0xb0>)
 8000d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d1c:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000d20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_DeInit+0xb4>)
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <HAL_DeInit+0xb8>)
 8000d40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <HAL_DeInit+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d4c:	f000 f812 	bl	8000d74 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	00015031 	.word	0x00015031
 8000d60:	0a00c023 	.word	0x0a00c023
 8000d64:	032807ff 	.word	0x032807ff
 8000d68:	e8ffc3ff 	.word	0xe8ffc3ff
 8000d6c:	31d73033 	.word	0x31d73033
 8000d70:	0020deaa 	.word	0x0020deaa

08000d74 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_InitTick+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e021      	b.n	8000ddc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <HAL_InitTick+0x64>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_InitTick+0x60>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f945 	bl	800103e <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f91d 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_InitTick+0x68>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2400004c 	.word	0x2400004c
 8000de8:	24000000 	.word	0x24000000
 8000dec:	24000048 	.word	0x24000048

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2400004c 	.word	0x2400004c
 8000e14:	24000098 	.word	0x24000098

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	24000098 	.word	0x24000098

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2400004c 	.word	0x2400004c

08000e78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetREVID+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0c1b      	lsrs	r3, r3, #16
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	5c001000 	.word	0x5c001000

08000e90 <__NVIC_SetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	05fa0000 	.word	0x05fa0000

08000ed8 <__NVIC_GetPriorityGrouping>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_SetPriority>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff47 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff5e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffb2 	bl	8000fb0 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800105c:	f3bf 8f5f 	dmb	sy
}
 8001060:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_MPU_Disable+0x28>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_MPU_Disable+0x28>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800106c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_MPU_Disable+0x2c>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000ed90 	.word	0xe000ed90

08001088 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_MPU_Enable+0x38>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MPU_Enable+0x3c>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_MPU_Enable+0x3c>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010a6:	f3bf 8f4f 	dsb	sy
}
 80010aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ac:	f3bf 8f6f 	isb	sy
}
 80010b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed90 	.word	0xe000ed90
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010e4:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7adb      	ldrb	r3, [r3, #11]
 80010f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b5b      	ldrb	r3, [r3, #13]
 8001106:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b9b      	ldrb	r3, [r3, #14]
 800110e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7bdb      	ldrb	r3, [r3, #15]
 8001116:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001118:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7a5b      	ldrb	r3, [r3, #9]
 800111e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001120:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7a1b      	ldrb	r3, [r3, #8]
 8001126:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001128:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001132:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001134:	6113      	str	r3, [r2, #16]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed90 	.word	0xe000ed90

08001148 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e054      	b.n	8001204 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7f5b      	ldrb	r3, [r3, #29]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fce2 	bl	8000b34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a22      	ldr	r2, [pc, #136]	@ (800120c <HAL_CRC_Init+0xc4>)
 8001184:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0218 	bic.w	r2, r2, #24
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	e00c      	b.n	80011b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6899      	ldr	r1, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	461a      	mov	r2, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f834 	bl	8001210 <HAL_CRCEx_Polynomial_Set>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e028      	b.n	8001204 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	795b      	ldrb	r3, [r3, #5]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f04f 32ff 	mov.w	r2, #4294967295
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	e004      	b.n	80011d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6912      	ldr	r2, [r2, #16]
 80011ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	04c11db7 	.word	0x04c11db7

08001210 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001220:	231f      	movs	r3, #31
 8001222:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e063      	b.n	80012fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001234:	bf00      	nop
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	613a      	str	r2, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <HAL_CRCEx_Polynomial_Set+0x44>
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b18      	cmp	r3, #24
 8001258:	d846      	bhi.n	80012e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800125a:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <HAL_CRCEx_Polynomial_Set+0x50>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012e9 	.word	0x080012e9
 8001268:	080012e9 	.word	0x080012e9
 800126c:	080012e9 	.word	0x080012e9
 8001270:	080012e9 	.word	0x080012e9
 8001274:	080012e9 	.word	0x080012e9
 8001278:	080012e9 	.word	0x080012e9
 800127c:	080012e9 	.word	0x080012e9
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012e9 	.word	0x080012e9
 8001288:	080012e9 	.word	0x080012e9
 800128c:	080012e9 	.word	0x080012e9
 8001290:	080012e9 	.word	0x080012e9
 8001294:	080012e9 	.word	0x080012e9
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012e9 	.word	0x080012e9
 80012a0:	080012d1 	.word	0x080012d1
 80012a4:	080012e9 	.word	0x080012e9
 80012a8:	080012e9 	.word	0x080012e9
 80012ac:	080012e9 	.word	0x080012e9
 80012b0:	080012e9 	.word	0x080012e9
 80012b4:	080012e9 	.word	0x080012e9
 80012b8:	080012e9 	.word	0x080012e9
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	080012c5 	.word	0x080012c5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d913      	bls.n	80012f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012ce:	e010      	b.n	80012f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d90f      	bls.n	80012f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012da:	e00c      	b.n	80012f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	d90b      	bls.n	80012fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012e6:	e008      	b.n	80012fa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
        break;
 80012ec:	e006      	b.n	80012fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012ee:	bf00      	nop
 80012f0:	e004      	b.n	80012fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012f2:	bf00      	nop
 80012f4:	e002      	b.n	80012fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 0118 	bic.w	r1, r3, #24
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001340:	2308      	movs	r3, #8
 8001342:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001344:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <HAL_FLASH_Program+0x11c>)
 8001346:	7d1b      	ldrb	r3, [r3, #20]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_FLASH_Program+0x24>
 800134c:	2302      	movs	r3, #2
 800134e:	e076      	b.n	800143e <HAL_FLASH_Program+0x112>
 8001350:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_FLASH_Program+0x11c>)
 8001352:	2201      	movs	r2, #1
 8001354:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800135c:	d306      	bcc.n	800136c <HAL_FLASH_Program+0x40>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001364:	d202      	bcs.n	800136c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800136a:	e00c      	b.n	8001386 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001372:	d306      	bcc.n	8001382 <HAL_FLASH_Program+0x56>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 800137a:	d202      	bcs.n	8001382 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	e001      	b.n	8001386 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e05b      	b.n	800143e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001386:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_FLASH_Program+0x11c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001392:	f000 f8c1 	bl	8001518 <FLASH_WaitForLastOperation>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d147      	bne.n	8001434 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d106      	bne.n	80013b8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_FLASH_Program+0x120>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_FLASH_Program+0x120>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	60d3      	str	r3, [r2, #12]
 80013b6:	e007      	b.n	80013c8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_FLASH_Program+0x120>)
 80013ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_FLASH_Program+0x120>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	3304      	adds	r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
        src_addr++;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	61fb      	str	r3, [r7, #28]
        row_index--;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ef      	bne.n	80013d4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80013f4:	f3bf 8f6f 	isb	sy
}
 80013f8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
}
 80013fe:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001400:	69b9      	ldr	r1, [r7, #24]
 8001402:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001406:	f000 f887 	bl	8001518 <FLASH_WaitForLastOperation>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <HAL_FLASH_Program+0x120>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <HAL_FLASH_Program+0x120>)
 800141c:	f023 0302 	bic.w	r3, r3, #2
 8001420:	60d3      	str	r3, [r2, #12]
 8001422:	e007      	b.n	8001434 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_FLASH_Program+0x120>)
 8001426:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_FLASH_Program+0x120>)
 800142c:	f023 0302 	bic.w	r3, r3, #2
 8001430:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HAL_FLASH_Program+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	751a      	strb	r2, [r3, #20]

  return status;
 800143a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800143e:	4618      	mov	r0, r3
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2400009c 	.word	0x2400009c
 800144c:	52002000 	.word	0x52002000

08001450 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00d      	beq.n	800147c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 8001462:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <HAL_FLASH_Unlock+0x6c>)
 8001464:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 8001468:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_FLASH_Unlock+0x70>)
 800146a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e018      	b.n	80014ae <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 800147e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_FLASH_Unlock+0x6c>)
 800148e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_FLASH_Unlock+0x70>)
 8001496:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_FLASH_Unlock+0x68>)
 800149c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	52002000 	.word	0x52002000
 80014bc:	45670123 	.word	0x45670123
 80014c0:	cdef89ab 	.word	0xcdef89ab

080014c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e011      	b.n	8001508 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <HAL_FLASH_Lock+0x50>)
 80014f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	52002000 	.word	0x52002000

08001518 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800152a:	f7ff fc75 	bl	8000e18 <HAL_GetTick>
 800152e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d113      	bne.n	800155e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <FLASH_WaitForLastOperation+0x120>)
 8001538:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800153a:	e010      	b.n	800155e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001542:	d00c      	beq.n	800155e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001544:	f7ff fc68 	bl	8000e18 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d302      	bcc.n	800155a <FLASH_WaitForLastOperation+0x42>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e068      	b.n	8001630 <FLASH_WaitForLastOperation+0x118>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <FLASH_WaitForLastOperation+0x124>)
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10a      	bne.n	800157e <FLASH_WaitForLastOperation+0x66>
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	4013      	ands	r3, r2
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	429a      	cmp	r2, r3
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	e00c      	b.n	8001598 <FLASH_WaitForLastOperation+0x80>
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 8001580:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001584:	43da      	mvns	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1cf      	bne.n	800153c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <FLASH_WaitForLastOperation+0x12c>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e007      	b.n	80015be <FLASH_WaitForLastOperation+0xa6>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 80015b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <FLASH_WaitForLastOperation+0x12c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015bc:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <FLASH_WaitForLastOperation+0xde>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <FLASH_WaitForLastOperation+0x130>)
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <FLASH_WaitForLastOperation+0x130>)
 80015d2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <FLASH_WaitForLastOperation+0x124>)
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <FLASH_WaitForLastOperation+0xce>
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	6153      	str	r3, [r2, #20]
 80015e4:	e005      	b.n	80015f2 <FLASH_WaitForLastOperation+0xda>
 80015e6:	4a16      	ldr	r2, [pc, #88]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ee:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01c      	b.n	8001630 <FLASH_WaitForLastOperation+0x118>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10b      	bne.n	8001614 <FLASH_WaitForLastOperation+0xfc>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001608:	d111      	bne.n	800162e <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 800160c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	e00c      	b.n	800162e <FLASH_WaitForLastOperation+0x116>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 8001616:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800161a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001622:	d104      	bne.n	800162e <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <FLASH_WaitForLastOperation+0x128>)
 8001626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800162a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	80000004 	.word	0x80000004
 800163c:	e010fff0 	.word	0xe010fff0
 8001640:	52002000 	.word	0x52002000
 8001644:	17ee0000 	.word	0x17ee0000
 8001648:	2400009c 	.word	0x2400009c

0800164c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800165a:	4b5e      	ldr	r3, [pc, #376]	@ (80017d4 <HAL_FLASHEx_Erase+0x188>)
 800165c:	7d1b      	ldrb	r3, [r3, #20]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_FLASHEx_Erase+0x1a>
 8001662:	2302      	movs	r3, #2
 8001664:	e0b2      	b.n	80017cc <HAL_FLASHEx_Erase+0x180>
 8001666:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <HAL_FLASHEx_Erase+0x188>)
 8001668:	2201      	movs	r2, #1
 800166a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800166c:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <HAL_FLASHEx_Erase+0x188>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800167e:	2101      	movs	r1, #1
 8001680:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001684:	f7ff ff48 	bl	8001518 <FLASH_WaitForLastOperation>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800169e:	2102      	movs	r1, #2
 80016a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016a4:	f7ff ff38 	bl	8001518 <FLASH_WaitForLastOperation>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8085 	bne.w	80017c4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d136      	bne.n	8001730 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f000 f887 	bl	80017e0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00f      	beq.n	80016fe <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80016de:	2101      	movs	r1, #1
 80016e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016e4:	f7ff ff18 	bl	8001518 <FLASH_WaitForLastOperation>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a38      	ldr	r2, [pc, #224]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 80016f8:	f023 0308 	bic.w	r3, r3, #8
 80016fc:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800170a:	2102      	movs	r1, #2
 800170c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001710:	f7ff ff02 	bl	8001518 <FLASH_WaitForLastOperation>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001720:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001724:	4a2c      	ldr	r2, [pc, #176]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001726:	f023 0308 	bic.w	r3, r3, #8
 800172a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 800172e:	e049      	b.n	80017c4 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f04f 32ff 	mov.w	r2, #4294967295
 8001736:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	e039      	b.n	80017b4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	461a      	mov	r2, r3
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f000 f8b2 	bl	80018b4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800175c:	2101      	movs	r1, #1
 800175e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001762:	f7ff fed9 	bl	8001518 <FLASH_WaitForLastOperation>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800176a:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	491a      	ldr	r1, [pc, #104]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_FLASHEx_Erase+0x190>)
 8001772:	4013      	ands	r3, r2
 8001774:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8001782:	2102      	movs	r1, #2
 8001784:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001788:	f7ff fec6 	bl	8001518 <FLASH_WaitForLastOperation>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001792:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001796:	4910      	ldr	r1, [pc, #64]	@ (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001798:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_FLASHEx_Erase+0x190>)
 800179a:	4013      	ands	r3, r2
 800179c:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	601a      	str	r2, [r3, #0]
          break;
 80017ac:	e00a      	b.n	80017c4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3bd      	bcc.n	8001740 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <HAL_FLASHEx_Erase+0x188>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	751a      	strb	r2, [r3, #20]

  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400009c 	.word	0x2400009c
 80017d8:	52002000 	.word	0x52002000
 80017dc:	fffff8fb 	.word	0xfffff8fb

080017e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d122      	bne.n	800183a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <FLASH_MassErase+0xd0>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <FLASH_MassErase+0xd0>)
 80017fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017fe:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001802:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001806:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001808:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800180c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4926      	ldr	r1, [pc, #152]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800181e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001822:	4923      	ldr	r1, [pc, #140]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800182c:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a1f      	ldr	r2, [pc, #124]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8001838:	e033      	b.n	80018a2 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d011      	beq.n	8001868 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800184a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800184e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a13      	ldr	r2, [pc, #76]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001862:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8001866:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d017      	beq.n	80018a2 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001874:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800187a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800187e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001884:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001888:	4909      	ldr	r1, [pc, #36]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <FLASH_MassErase+0xd0>)
 8001894:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <FLASH_MassErase+0xd0>)
 800189a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800189e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	52002000 	.word	0x52002000

080018b4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d010      	beq.n	80018ec <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a17      	ldr	r2, [pc, #92]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018d0:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80018d4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0219      	lsls	r1, r3, #8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a11      	ldr	r2, [pc, #68]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018e6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80018ea:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d014      	beq.n	8001920 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80018fc:	4a0b      	ldr	r2, [pc, #44]	@ (800192c <FLASH_Erase_Sector+0x78>)
 80018fe:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8001902:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <FLASH_Erase_Sector+0x78>)
 8001908:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	0219      	lsls	r1, r3, #8
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	430b      	orrs	r3, r1
 8001914:	4313      	orrs	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <FLASH_Erase_Sector+0x78>)
 8001918:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800191c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	52002000 	.word	0x52002000

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800193e:	4b89      	ldr	r3, [pc, #548]	@ (8001b64 <HAL_GPIO_Init+0x234>)
 8001940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001942:	e194      	b.n	8001c6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8186 	beq.w	8001c68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x44>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 0201 	and.w	r2, r3, #1
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	69b9      	ldr	r1, [r7, #24]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e0 	beq.w	8001c68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aae:	4a2e      	ldr	r2, [pc, #184]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a29      	ldr	r2, [pc, #164]	@ (8001b6c <HAL_GPIO_Init+0x23c>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a20      	ldr	r2, [pc, #128]	@ (8001b70 <HAL_GPIO_Init+0x240>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d052      	beq.n	8001b98 <HAL_GPIO_Init+0x268>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_GPIO_Init+0x244>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_GPIO_Init+0x248>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1d      	ldr	r2, [pc, #116]	@ (8001b7c <HAL_GPIO_Init+0x24c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <HAL_GPIO_Init+0x250>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_GPIO_Init+0x254>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b88 <HAL_GPIO_Init+0x258>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_GPIO_Init+0x25c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x216>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x260>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x212>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_GPIO_Init+0x264>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	e02d      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b3e:	230a      	movs	r3, #10
 8001b40:	e02b      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b42:	2308      	movs	r3, #8
 8001b44:	e029      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e027      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e025      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e023      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e01f      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e01d      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e01b      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b62:	bf00      	nop
 8001b64:	58000080 	.word	0x58000080
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58000400 	.word	0x58000400
 8001b70:	58020000 	.word	0x58020000
 8001b74:	58020400 	.word	0x58020400
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020c00 	.word	0x58020c00
 8001b80:	58021000 	.word	0x58021000
 8001b84:	58021400 	.word	0x58021400
 8001b88:	58021800 	.word	0x58021800
 8001b8c:	58021c00 	.word	0x58021c00
 8001b90:	58022000 	.word	0x58022000
 8001b94:	58022400 	.word	0x58022400
 8001b98:	2300      	movs	r3, #0
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001baa:	4938      	ldr	r1, [pc, #224]	@ (8001c8c <HAL_GPIO_Init+0x35c>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f47f ae63 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3724      	adds	r7, #36	@ 0x24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	58000400 	.word	0x58000400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd4:	887a      	ldrh	r2, [r7, #2]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	58024800 	.word	0x58024800

08001d18 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	58024800 	.word	0x58024800

08001d38 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d40:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d00a      	beq.n	8001d62 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d4c:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e040      	b.n	8001de0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e03e      	b.n	8001de0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d6a:	491f      	ldr	r1, [pc, #124]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d72:	f7ff f851 	bl	8000e18 <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d78:	e009      	b.n	8001d8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d7a:	f7ff f84d 	bl	8000e18 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d88:	d901      	bls.n	8001d8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e028      	b.n	8001de0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d9a:	d1ee      	bne.n	8001d7a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b1e      	cmp	r3, #30
 8001da0:	d008      	beq.n	8001db4 <HAL_PWREx_ConfigSupply+0x7c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001da6:	d005      	beq.n	8001db4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b1d      	cmp	r3, #29
 8001dac:	d002      	beq.n	8001db4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001db2:	d114      	bne.n	8001dde <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001db4:	f7ff f830 	bl	8000e18 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dba:	e009      	b.n	8001dd0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dbc:	f7ff f82c 	bl	8000e18 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dca:	d901      	bls.n	8001dd0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e007      	b.n	8001de0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	58024800 	.word	0x58024800

08001dec <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_PWREx_EnableBkUpReg+0x48>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <HAL_PWREx_EnableBkUpReg+0x48>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001dfe:	f7ff f80b 	bl	8000e18 <HAL_GetTick>
 8001e02:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 8001e04:	e009      	b.n	8001e1a <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 8001e06:	f7ff f807 	bl	8000e18 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e14:	d901      	bls.n	8001e1a <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e007      	b.n	8001e2a <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_PWREx_EnableBkUpReg+0x48>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d1ee      	bne.n	8001e06 <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	58024800 	.word	0x58024800

08001e38 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_PWREx_DisableBkUpReg+0x48>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <HAL_PWREx_DisableBkUpReg+0x48>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e4a:	f7fe ffe5 	bl	8000e18 <HAL_GetTick>
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 8001e50:	e009      	b.n	8001e66 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 8001e52:	f7fe ffe1 	bl	8000e18 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e60:	d901      	bls.n	8001e66 <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e007      	b.n	8001e76 <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_PWREx_DisableBkUpReg+0x48>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e72:	d0ee      	beq.n	8001e52 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58024800 	.word	0x58024800

08001e84 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b89      	ldr	r3, [pc, #548]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d80f      	bhi.n	8001eb6 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8001e96:	4b86      	ldr	r3, [pc, #536]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 030f 	bic.w	r3, r3, #15
 8001e9e:	4a84      	ldr	r2, [pc, #528]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8001ea0:	f043 0307 	orr.w	r3, r3, #7
 8001ea4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	2b07      	cmp	r3, #7
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0f7      	b.n	80020a6 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001eb6:	f7fe ffaf 	bl	8000e18 <HAL_GetTick>
 8001eba:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ebc:	4b7d      	ldr	r3, [pc, #500]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7fe ffa5 	bl	8000e18 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0e4      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8001ee8:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a71      	ldr	r2, [pc, #452]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ef2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8001efa:	4b6f      	ldr	r3, [pc, #444]	@ (80020b8 <HAL_RCC_DeInit+0x234>)
 8001efc:	4a6f      	ldr	r2, [pc, #444]	@ (80020bc <HAL_RCC_DeInit+0x238>)
 8001efe:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8001f00:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <HAL_RCC_DeInit+0x23c>)
 8001f02:	4a6e      	ldr	r2, [pc, #440]	@ (80020bc <HAL_RCC_DeInit+0x238>)
 8001f04:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f06:	4b6f      	ldr	r3, [pc, #444]	@ (80020c4 <HAL_RCC_DeInit+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ff3a 	bl	8000d84 <HAL_InitTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0c5      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f1a:	f7fe ff7d 	bl	8000e18 <HAL_GetTick>
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe ff79 	bl	8000e18 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0b6      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f38:	4b5e      	ldr	r3, [pc, #376]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f44:	f7fe ff68 	bl	8000e18 <HAL_GetTick>
 8001f48:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4959      	ldr	r1, [pc, #356]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f50:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCC_DeInit+0x244>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff5e 	bl	8000e18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e09d      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f76:	f7fe ff4f 	bl	8000e18 <HAL_GetTick>
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4c      	ldr	r2, [pc, #304]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe ff45 	bl	8000e18 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e084      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f9c:	4b45      	ldr	r3, [pc, #276]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fa8:	f7fe ff36 	bl	8000e18 <HAL_GetTick>
 8001fac:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001fb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ff2c 	bl	8000e18 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e06b      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001fce:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fda:	f7fe ff1d 	bl	8000e18 <HAL_GetTick>
 8001fde:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8001fe0:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a33      	ldr	r2, [pc, #204]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ff13 	bl	8000e18 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e052      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002000:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 800200c:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002012:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002018:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 800201e:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002020:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <HAL_RCC_DeInit+0x248>)
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002026:	4a2a      	ldr	r2, [pc, #168]	@ (80020d0 <HAL_RCC_DeInit+0x24c>)
 8002028:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800202c:	4a29      	ldr	r2, [pc, #164]	@ (80020d4 <HAL_RCC_DeInit+0x250>)
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002030:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002032:	2200      	movs	r2, #0
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002038:	4a26      	ldr	r2, [pc, #152]	@ (80020d4 <HAL_RCC_DeInit+0x250>)
 800203a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800203e:	2200      	movs	r2, #0
 8002040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002044:	4a23      	ldr	r2, [pc, #140]	@ (80020d4 <HAL_RCC_DeInit+0x250>)
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800205c:	2200      	movs	r2, #0
 800205e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 800206a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <HAL_RCC_DeInit+0x230>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002074:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00f      	beq.n	80020a4 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 030f 	bic.w	r3, r3, #15
 800208c:	4a08      	ldr	r2, [pc, #32]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 800208e:	f043 0307 	orr.w	r3, r3, #7
 8002092:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_DeInit+0x22c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	2b07      	cmp	r3, #7
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	52002000 	.word	0x52002000
 80020b4:	58024400 	.word	0x58024400
 80020b8:	24000000 	.word	0x24000000
 80020bc:	03d09000 	.word	0x03d09000
 80020c0:	24000004 	.word	0x24000004
 80020c4:	24000048 	.word	0x24000048
 80020c8:	fff6ed45 	.word	0xfff6ed45
 80020cc:	02020200 	.word	0x02020200
 80020d0:	01ff0000 	.word	0x01ff0000
 80020d4:	01010280 	.word	0x01010280

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f000 bc48 	b.w	800297c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8088 	beq.w	800220a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fa:	4b99      	ldr	r3, [pc, #612]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002104:	4b96      	ldr	r3, [pc, #600]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800210a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210c:	2b10      	cmp	r3, #16
 800210e:	d007      	beq.n	8002120 <HAL_RCC_OscConfig+0x48>
 8002110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002112:	2b18      	cmp	r3, #24
 8002114:	d111      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
 8002116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	4b8f      	ldr	r3, [pc, #572]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d06d      	beq.n	8002208 <HAL_RCC_OscConfig+0x130>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d169      	bne.n	8002208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	f000 bc21 	b.w	800297c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a>
 8002144:	4b86      	ldr	r3, [pc, #536]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a85      	ldr	r2, [pc, #532]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x9c>
 800215a:	4b81      	ldr	r3, [pc, #516]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a80      	ldr	r2, [pc, #512]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b7e      	ldr	r3, [pc, #504]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7d      	ldr	r2, [pc, #500]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xc0>
 800217e:	4b78      	ldr	r3, [pc, #480]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b75      	ldr	r3, [pc, #468]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a74      	ldr	r2, [pc, #464]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002198:	4b71      	ldr	r3, [pc, #452]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a70      	ldr	r2, [pc, #448]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe2e 	bl	8000e18 <HAL_GetTick>
 80021bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe fe2a 	bl	8000e18 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e3d4      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d2:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe1a 	bl	8000e18 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe16 	bl	8000e18 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e3c0      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021fa:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x110>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80ca 	beq.w	80023ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002218:	4b51      	ldr	r3, [pc, #324]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002220:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002222:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_RCC_OscConfig+0x166>
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2b18      	cmp	r3, #24
 8002232:	d156      	bne.n	80022e2 <HAL_RCC_OscConfig+0x20a>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d151      	bne.n	80022e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223e:	4b48      	ldr	r3, [pc, #288]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x17e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e392      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002256:	4b42      	ldr	r3, [pc, #264]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0219 	bic.w	r2, r3, #25
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	493f      	ldr	r1, [pc, #252]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fdd6 	bl	8000e18 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe fdd2 	bl	8000e18 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e37c      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002282:	4b37      	ldr	r3, [pc, #220]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	f7fe fdf3 	bl	8000e78 <HAL_GetREVID>
 8002292:	4603      	mov	r3, r0
 8002294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002298:	4293      	cmp	r3, r2
 800229a:	d817      	bhi.n	80022cc <HAL_RCC_OscConfig+0x1f4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b40      	cmp	r3, #64	@ 0x40
 80022a2:	d108      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1de>
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	e07a      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	031b      	lsls	r3, r3, #12
 80022c4:	4926      	ldr	r1, [pc, #152]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ca:	e06f      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	4921      	ldr	r1, [pc, #132]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	e064      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d047      	beq.n	800237a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0219 	bic.w	r2, r3, #25
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	491a      	ldr	r1, [pc, #104]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd8c 	bl	8000e18 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fd88 	bl	8000e18 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e332      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002316:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	f7fe fda9 	bl	8000e78 <HAL_GetREVID>
 8002326:	4603      	mov	r3, r0
 8002328:	f241 0203 	movw	r2, #4099	@ 0x1003
 800232c:	4293      	cmp	r3, r2
 800232e:	d819      	bhi.n	8002364 <HAL_RCC_OscConfig+0x28c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b40      	cmp	r3, #64	@ 0x40
 8002336:	d108      	bne.n	800234a <HAL_RCC_OscConfig+0x272>
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 8002342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002346:	6053      	str	r3, [r2, #4]
 8002348:	e030      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	031b      	lsls	r3, r3, #12
 8002358:	4901      	ldr	r1, [pc, #4]	@ (8002360 <HAL_RCC_OscConfig+0x288>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e025      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
 8002360:	58024400 	.word	0x58024400
 8002364:	4b9a      	ldr	r3, [pc, #616]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	4997      	ldr	r1, [pc, #604]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	e018      	b.n	80023ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b95      	ldr	r3, [pc, #596]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a94      	ldr	r2, [pc, #592]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fd47 	bl	8000e18 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fd43 	bl	8000e18 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e2ed      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023a0:	4b8b      	ldr	r3, [pc, #556]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a9 	beq.w	800250c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b85      	ldr	r3, [pc, #532]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c4:	4b82      	ldr	r3, [pc, #520]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d007      	beq.n	80023e0 <HAL_RCC_OscConfig+0x308>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b18      	cmp	r3, #24
 80023d4:	d13a      	bne.n	800244c <HAL_RCC_OscConfig+0x374>
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d135      	bne.n	800244c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e0:	4b7b      	ldr	r3, [pc, #492]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_OscConfig+0x320>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e2c1      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023f8:	f7fe fd3e 	bl	8000e78 <HAL_GetREVID>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002402:	4293      	cmp	r3, r2
 8002404:	d817      	bhi.n	8002436 <HAL_RCC_OscConfig+0x35e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	2b20      	cmp	r3, #32
 800240c:	d108      	bne.n	8002420 <HAL_RCC_OscConfig+0x348>
 800240e:	4b70      	ldr	r3, [pc, #448]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002416:	4a6e      	ldr	r2, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800241c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800241e:	e075      	b.n	800250c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002420:	4b6b      	ldr	r3, [pc, #428]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	069b      	lsls	r3, r3, #26
 800242e:	4968      	ldr	r1, [pc, #416]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002434:	e06a      	b.n	800250c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002436:	4b66      	ldr	r3, [pc, #408]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	4962      	ldr	r1, [pc, #392]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800244a:	e05f      	b.n	800250c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d042      	beq.n	80024da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002454:	4b5e      	ldr	r3, [pc, #376]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5d      	ldr	r2, [pc, #372]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fcda 	bl	8000e18 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002468:	f7fe fcd6 	bl	8000e18 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e280      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800247a:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002486:	f7fe fcf7 	bl	8000e78 <HAL_GetREVID>
 800248a:	4603      	mov	r3, r0
 800248c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002490:	4293      	cmp	r3, r2
 8002492:	d817      	bhi.n	80024c4 <HAL_RCC_OscConfig+0x3ec>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	2b20      	cmp	r3, #32
 800249a:	d108      	bne.n	80024ae <HAL_RCC_OscConfig+0x3d6>
 800249c:	4b4c      	ldr	r3, [pc, #304]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024a4:	4a4a      	ldr	r2, [pc, #296]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e02e      	b.n	800250c <HAL_RCC_OscConfig+0x434>
 80024ae:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	4944      	ldr	r1, [pc, #272]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
 80024c2:	e023      	b.n	800250c <HAL_RCC_OscConfig+0x434>
 80024c4:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	493f      	ldr	r1, [pc, #252]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e018      	b.n	800250c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024da:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3c      	ldr	r2, [pc, #240]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fc97 	bl	8000e18 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ee:	f7fe fc93 	bl	8000e18 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e23d      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002500:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d036      	beq.n	8002586 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d019      	beq.n	8002554 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002520:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	4a2a      	ldr	r2, [pc, #168]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fc74 	bl	8000e18 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fc70 	bl	8000e18 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e21a      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x45c>
 8002552:	e018      	b.n	8002586 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002554:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002558:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fc5a 	bl	8000e18 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fc56 	bl	8000e18 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e200      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d039      	beq.n	8002606 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800259a:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a0c      	ldr	r2, [pc, #48]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fc37 	bl	8000e18 <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ae:	f7fe fc33 	bl	8000e18 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1dd      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x4d6>
 80025cc:	e01b      	b.n	8002606 <HAL_RCC_OscConfig+0x52e>
 80025ce:	bf00      	nop
 80025d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a9a      	ldr	r2, [pc, #616]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80025da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fc1a 	bl	8000e18 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e8:	f7fe fc16 	bl	8000e18 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1c0      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025fa:	4b92      	ldr	r3, [pc, #584]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8081 	beq.w	8002716 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002614:	4b8c      	ldr	r3, [pc, #560]	@ (8002848 <HAL_RCC_OscConfig+0x770>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a8b      	ldr	r2, [pc, #556]	@ (8002848 <HAL_RCC_OscConfig+0x770>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002620:	f7fe fbfa 	bl	8000e18 <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fbf6 	bl	8000e18 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1a0      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800263a:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <HAL_RCC_OscConfig+0x770>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x584>
 800264e:	4b7d      	ldr	r3, [pc, #500]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002652:	4a7c      	ldr	r2, [pc, #496]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	@ 0x70
 800265a:	e02d      	b.n	80026b8 <HAL_RCC_OscConfig+0x5e0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x5a6>
 8002664:	4b77      	ldr	r3, [pc, #476]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002668:	4a76      	ldr	r2, [pc, #472]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002670:	4b74      	ldr	r3, [pc, #464]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a73      	ldr	r2, [pc, #460]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x5e0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5c8>
 8002686:	4b6f      	ldr	r3, [pc, #444]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	4a6e      	ldr	r2, [pc, #440]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	@ 0x70
 8002692:	4b6c      	ldr	r3, [pc, #432]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a6b      	ldr	r2, [pc, #428]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x5e0>
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	4a67      	ldr	r2, [pc, #412]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ac:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	4a64      	ldr	r2, [pc, #400]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fbaa 	bl	8000e18 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fba6 	bl	8000e18 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e14e      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026de:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ee      	beq.n	80026c8 <HAL_RCC_OscConfig+0x5f0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fb94 	bl	8000e18 <HAL_GetTick>
 80026f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe fb90 	bl	8000e18 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e138      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800270a:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ee      	bne.n	80026f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 812d 	beq.w	800297a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002720:	4b48      	ldr	r3, [pc, #288]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002728:	2b18      	cmp	r3, #24
 800272a:	f000 80bd 	beq.w	80028a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	2b02      	cmp	r3, #2
 8002734:	f040 809e 	bne.w	8002874 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b42      	ldr	r3, [pc, #264]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a41      	ldr	r2, [pc, #260]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800273e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fb68 	bl	8000e18 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fb64 	bl	8000e18 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e10e      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276a:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800276c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <HAL_RCC_OscConfig+0x774>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	430a      	orrs	r2, r1
 800277e:	4931      	ldr	r1, [pc, #196]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	628b      	str	r3, [r1, #40]	@ 0x28
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	3b01      	subs	r3, #1
 800278a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002792:	3b01      	subs	r3, #1
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	b29b      	uxth	r3, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	3b01      	subs	r3, #1
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027b4:	4923      	ldr	r1, [pc, #140]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_RCC_OscConfig+0x778>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027d2:	00d2      	lsls	r2, r2, #3
 80027d4:	491b      	ldr	r1, [pc, #108]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	f023 020c 	bic.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4917      	ldr	r1, [pc, #92]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f023 0202 	bic.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f8:	4912      	ldr	r1, [pc, #72]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	4a10      	ldr	r2, [pc, #64]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280a:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	4a0d      	ldr	r2, [pc, #52]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_RCC_OscConfig+0x76c>)
 8002834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe faed 	bl	8000e18 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002840:	e011      	b.n	8002866 <HAL_RCC_OscConfig+0x78e>
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400
 8002848:	58024800 	.word	0x58024800
 800284c:	fffffc0c 	.word	0xfffffc0c
 8002850:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fae0 	bl	8000e18 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e08a      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x77c>
 8002872:	e082      	b.n	800297a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe faca 	bl	8000e18 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fac6 	bl	8000e18 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e070      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289a:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x7b0>
 80028a6:	e068      	b.n	800297a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028a8:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028ae:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d031      	beq.n	8002920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d12a      	bne.n	8002920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d122      	bne.n	8002920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11a      	bne.n	8002920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0a5b      	lsrs	r3, r3, #9
 80028ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d111      	bne.n	8002920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0e1b      	lsrs	r3, r3, #24
 8002912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02b      	b.n	800297c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002924:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800292e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d01f      	beq.n	800297a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002946:	f7fe fa67 	bl	8000e18 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800294c:	bf00      	nop
 800294e:	f7fe fa63 	bl	8000e18 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	4293      	cmp	r3, r2
 8002958:	d0f9      	beq.n	800294e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 800295c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_RCC_OscConfig+0x8b0>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	4906      	ldr	r1, [pc, #24]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 800296a:	4313      	orrs	r3, r2
 800296c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <HAL_RCC_OscConfig+0x8ac>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3730      	adds	r7, #48	@ 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	58024400 	.word	0x58024400
 8002988:	ffff0007 	.word	0xffff0007

0800298c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e19c      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b8a      	ldr	r3, [pc, #552]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b87      	ldr	r3, [pc, #540]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 020f 	bic.w	r2, r3, #15
 80029b6:	4985      	ldr	r1, [pc, #532]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b83      	ldr	r3, [pc, #524]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e184      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d908      	bls.n	80029fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029ec:	4b78      	ldr	r3, [pc, #480]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4975      	ldr	r1, [pc, #468]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d010      	beq.n	8002a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	4b70      	ldr	r3, [pc, #448]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d908      	bls.n	8002a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	496a      	ldr	r1, [pc, #424]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d908      	bls.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a48:	4b61      	ldr	r3, [pc, #388]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	495e      	ldr	r1, [pc, #376]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d908      	bls.n	8002a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a76:	4b56      	ldr	r3, [pc, #344]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4953      	ldr	r1, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f023 020f 	bic.w	r2, r3, #15
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4947      	ldr	r1, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d055      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ac2:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4940      	ldr	r1, [pc, #256]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002adc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0f6      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d115      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0ea      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b0c:	4b30      	ldr	r3, [pc, #192]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0de      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0d6      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4925      	ldr	r1, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3e:	f7fe f96b 	bl	8000e18 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b46:	f7fe f967 	bl	8000e18 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0be      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d1eb      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d208      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f023 020f 	bic.w	r2, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d214      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 020f 	bic.w	r2, r3, #15
 8002bb2:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e086      	b.n	8002cda <HAL_RCC_ClockConfig+0x34e>
 8002bcc:	52002000 	.word	0x52002000
 8002bd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4939      	ldr	r1, [pc, #228]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d208      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	492e      	ldr	r1, [pc, #184]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	4b28      	ldr	r3, [pc, #160]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d208      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4922      	ldr	r1, [pc, #136]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d208      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4917      	ldr	r1, [pc, #92]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c8c:	f000 f834 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	4912      	ldr	r1, [pc, #72]	@ (8002ce8 <HAL_RCC_ClockConfig+0x35c>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <HAL_RCC_ClockConfig+0x358>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <HAL_RCC_ClockConfig+0x35c>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <HAL_RCC_ClockConfig+0x360>)
 8002cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <HAL_RCC_ClockConfig+0x364>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_RCC_ClockConfig+0x368>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f858 	bl	8000d84 <HAL_InitTick>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	0800702c 	.word	0x0800702c
 8002cec:	24000004 	.word	0x24000004
 8002cf0:	24000000 	.word	0x24000000
 8002cf4:	24000048 	.word	0x24000048

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfe:	4bb3      	ldr	r3, [pc, #716]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d06:	2b18      	cmp	r3, #24
 8002d08:	f200 8155 	bhi.w	8002fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002fb7 	.word	0x08002fb7
 8002d1c:	08002fb7 	.word	0x08002fb7
 8002d20:	08002fb7 	.word	0x08002fb7
 8002d24:	08002fb7 	.word	0x08002fb7
 8002d28:	08002fb7 	.word	0x08002fb7
 8002d2c:	08002fb7 	.word	0x08002fb7
 8002d30:	08002fb7 	.word	0x08002fb7
 8002d34:	08002d9f 	.word	0x08002d9f
 8002d38:	08002fb7 	.word	0x08002fb7
 8002d3c:	08002fb7 	.word	0x08002fb7
 8002d40:	08002fb7 	.word	0x08002fb7
 8002d44:	08002fb7 	.word	0x08002fb7
 8002d48:	08002fb7 	.word	0x08002fb7
 8002d4c:	08002fb7 	.word	0x08002fb7
 8002d50:	08002fb7 	.word	0x08002fb7
 8002d54:	08002da5 	.word	0x08002da5
 8002d58:	08002fb7 	.word	0x08002fb7
 8002d5c:	08002fb7 	.word	0x08002fb7
 8002d60:	08002fb7 	.word	0x08002fb7
 8002d64:	08002fb7 	.word	0x08002fb7
 8002d68:	08002fb7 	.word	0x08002fb7
 8002d6c:	08002fb7 	.word	0x08002fb7
 8002d70:	08002fb7 	.word	0x08002fb7
 8002d74:	08002dab 	.word	0x08002dab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d78:	4b94      	ldr	r3, [pc, #592]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d84:	4b91      	ldr	r3, [pc, #580]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	4a90      	ldr	r2, [pc, #576]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d96:	e111      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d98:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d9a:	61bb      	str	r3, [r7, #24]
      break;
 8002d9c:	e10e      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002da0:	61bb      	str	r3, [r7, #24]
      break;
 8002da2:	e10b      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002da4:	4b8c      	ldr	r3, [pc, #560]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002da6:	61bb      	str	r3, [r7, #24]
      break;
 8002da8:	e108      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002daa:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002db4:	4b85      	ldr	r3, [pc, #532]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dc0:	4b82      	ldr	r3, [pc, #520]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dca:	4b80      	ldr	r3, [pc, #512]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80e1 	beq.w	8002fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f000 8083 	beq.w	8002efc <HAL_RCC_GetSysClockFreq+0x204>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	f200 80a1 	bhi.w	8002f40 <HAL_RCC_GetSysClockFreq+0x248>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x114>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d056      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e0a:	e099      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d02d      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e18:	4b6c      	ldr	r3, [pc, #432]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	4a6b      	ldr	r2, [pc, #428]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e42:	4b62      	ldr	r3, [pc, #392]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e72:	e087      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b51      	ldr	r3, [pc, #324]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eb6:	e065      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b40      	ldr	r3, [pc, #256]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002efa:	e043      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3e:	e021      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	0a5b      	lsrs	r3, r3, #9
 8002f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8e:	3301      	adds	r3, #1
 8002f90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa8:	ee17 3a90 	vmov	r3, s15
 8002fac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
      break;
 8002fb4:	e002      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fb8:	61bb      	str	r3, [r7, #24]
      break;
 8002fba:	bf00      	nop
  }

  return sysclockfreq;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	03d09000 	.word	0x03d09000
 8002fd4:	003d0900 	.word	0x003d0900
 8002fd8:	017d7840 	.word	0x017d7840
 8002fdc:	46000000 	.word	0x46000000
 8002fe0:	4c742400 	.word	0x4c742400
 8002fe4:	4a742400 	.word	0x4a742400
 8002fe8:	4bbebc20 	.word	0x4bbebc20

08002fec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0ca      	sub	sp, #296	@ 0x128
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003010:	2500      	movs	r5, #0
 8003012:	ea54 0305 	orrs.w	r3, r4, r5
 8003016:	d049      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800301e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003022:	d02f      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003024:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003028:	d828      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800302a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800302e:	d01a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003034:	d822      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800303a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800303e:	d007      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003040:	e01c      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003042:	4bb8      	ldr	r3, [pc, #736]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	4ab7      	ldr	r2, [pc, #732]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800304e:	e01a      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	3308      	adds	r3, #8
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f001 f9d1 	bl	8004400 <RCCEx_PLL2_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003064:	e00f      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306a:	3328      	adds	r3, #40	@ 0x28
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f001 fa78 	bl	8004564 <RCCEx_PLL3_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800308e:	4ba5      	ldr	r3, [pc, #660]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003092:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800309c:	4aa1      	ldr	r2, [pc, #644]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800309e:	430b      	orrs	r3, r1
 80030a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a2:	e003      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030b8:	f04f 0900 	mov.w	r9, #0
 80030bc:	ea58 0309 	orrs.w	r3, r8, r9
 80030c0:	d047      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d82a      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030cc:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030f7 	.word	0x080030f7
 80030dc:	0800310d 	.word	0x0800310d
 80030e0:	0800312b 	.word	0x0800312b
 80030e4:	0800312b 	.word	0x0800312b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	4a8d      	ldr	r2, [pc, #564]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030f4:	e01a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fa:	3308      	adds	r3, #8
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f97e 	bl	8004400 <RCCEx_PLL2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310a:	e00f      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003110:	3328      	adds	r3, #40	@ 0x28
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fa25 	bl	8004564 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003120:	e004      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800312a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003134:	4b7b      	ldr	r3, [pc, #492]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003138:	f023 0107 	bic.w	r1, r3, #7
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	4a78      	ldr	r2, [pc, #480]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003144:	430b      	orrs	r3, r1
 8003146:	6513      	str	r3, [r2, #80]	@ 0x50
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800315e:	f04f 0b00 	mov.w	fp, #0
 8003162:	ea5a 030b 	orrs.w	r3, sl, fp
 8003166:	d04c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003172:	d030      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003178:	d829      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800317a:	2bc0      	cmp	r3, #192	@ 0xc0
 800317c:	d02d      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800317e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003180:	d825      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003182:	2b80      	cmp	r3, #128	@ 0x80
 8003184:	d018      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003186:	2b80      	cmp	r3, #128	@ 0x80
 8003188:	d821      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800318e:	2b40      	cmp	r3, #64	@ 0x40
 8003190:	d007      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003192:	e01c      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003194:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	4a62      	ldr	r2, [pc, #392]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031a0:	e01c      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a6:	3308      	adds	r3, #8
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 f928 	bl	8004400 <RCCEx_PLL2_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031b6:	e011      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031bc:	3328      	adds	r3, #40	@ 0x28
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 f9cf 	bl	8004564 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d4:	e002      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800320e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003218:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800321c:	460b      	mov	r3, r1
 800321e:	4313      	orrs	r3, r2
 8003220:	d053      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003226:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800322a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800322e:	d035      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003230:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003234:	d82e      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003236:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800323a:	d031      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800323c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003240:	d828      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003246:	d01a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800324c:	d822      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003256:	d007      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003258:	e01c      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325a:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	4a31      	ldr	r2, [pc, #196]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003266:	e01c      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326c:	3308      	adds	r3, #8
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f001 f8c5 	bl	8004400 <RCCEx_PLL2_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800327c:	e011      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	3328      	adds	r3, #40	@ 0x28
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f001 f96c 	bl	8004564 <RCCEx_PLL3_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003292:	e006      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800329a:	e002      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800329c:	bf00      	nop
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80032e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d056      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f6:	d038      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032fc:	d831      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80032fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003302:	d034      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003304:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003308:	d82b      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800330a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800330e:	d01d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003314:	d825      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800331a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003320:	e01f      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003328:	4ba2      	ldr	r3, [pc, #648]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	4aa1      	ldr	r2, [pc, #644]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800332e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003334:	e01c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	3308      	adds	r3, #8
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f85e 	bl	8004400 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800334a:	e011      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	3328      	adds	r3, #40	@ 0x28
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f001 f905 	bl	8004564 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003368:	e002      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800336e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003378:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003388:	4a8a      	ldr	r2, [pc, #552]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6593      	str	r3, [r2, #88]	@ 0x58
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d03a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033be:	2b30      	cmp	r3, #48	@ 0x30
 80033c0:	d01f      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033c2:	2b30      	cmp	r3, #48	@ 0x30
 80033c4:	d819      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d815      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d111      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d6:	4b77      	ldr	r3, [pc, #476]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	4a76      	ldr	r2, [pc, #472]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	3308      	adds	r3, #8
 80033ea:	2102      	movs	r1, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 f807 	bl	8004400 <RCCEx_PLL2_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003410:	4b68      	ldr	r3, [pc, #416]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003414:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003420:	430b      	orrs	r3, r1
 8003422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800343a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003444:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d051      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003458:	d035      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800345a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800345e:	d82e      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003460:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003464:	d031      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003466:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800346a:	d828      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003470:	d01a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003476:	d822      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003480:	d007      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003482:	e01c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b4b      	ldr	r3, [pc, #300]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	4a4a      	ldr	r2, [pc, #296]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003490:	e01c      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	3308      	adds	r3, #8
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f000 ffb0 	bl	8004400 <RCCEx_PLL2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034a6:	e011      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	3328      	adds	r3, #40	@ 0x28
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 f857 	bl	8004564 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034bc:	e006      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034c4:	e002      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034d4:	4b37      	ldr	r3, [pc, #220]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e2:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80034fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003508:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d056      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351c:	d033      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800351e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003522:	d82c      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003528:	d02f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800352a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800352e:	d826      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003530:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003534:	d02b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003536:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800353a:	d820      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800353c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003540:	d012      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003546:	d81a      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d022      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d115      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	3308      	adds	r3, #8
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ff50 	bl	8004400 <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003566:	e015      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3328      	adds	r3, #40	@ 0x28
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fff7 	bl	8004564 <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800357c:	e00a      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003586:	bf00      	nop
 8003588:	e004      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035aa:	4a02      	ldr	r2, [pc, #8]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d055      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ec:	d033      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80035ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f2:	d82c      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f8:	d02f      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fe:	d826      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003604:	d02b      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800360a:	d820      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003610:	d012      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003616:	d81a      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d022      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800361c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003620:	d115      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	3308      	adds	r3, #8
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fee8 	bl	8004400 <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003636:	e015      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	3328      	adds	r3, #40	@ 0x28
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ff8f 	bl	8004564 <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800364c:	e00a      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003656:	bf00      	nop
 8003658:	e004      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800366c:	4ba3      	ldr	r3, [pc, #652]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800367c:	4a9f      	ldr	r2, [pc, #636]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800367e:	430b      	orrs	r3, r1
 8003680:	6593      	str	r3, [r2, #88]	@ 0x58
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d037      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b6:	d00e      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036bc:	d816      	bhi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036c6:	d111      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b8c      	ldr	r3, [pc, #560]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4a8b      	ldr	r2, [pc, #556]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036d4:	e00f      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	3308      	adds	r3, #8
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fe8e 	bl	8004400 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036ea:	e004      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80036f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036fe:	4b7f      	ldr	r3, [pc, #508]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003702:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370c:	4a7b      	ldr	r2, [pc, #492]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800370e:	430b      	orrs	r3, r1
 8003710:	6513      	str	r3, [r2, #80]	@ 0x50
 8003712:	e003      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003732:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d039      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	2b03      	cmp	r3, #3
 8003744:	d81c      	bhi.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003746:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003789 	.word	0x08003789
 8003750:	0800375d 	.word	0x0800375d
 8003754:	0800376b 	.word	0x0800376b
 8003758:	08003789 	.word	0x08003789
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375c:	4b67      	ldr	r3, [pc, #412]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	4a66      	ldr	r2, [pc, #408]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003768:	e00f      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	3308      	adds	r3, #8
 8003770:	2102      	movs	r1, #2
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fe44 	bl	8004400 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800377e:	e004      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003792:	4b5a      	ldr	r3, [pc, #360]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003796:	f023 0103 	bic.w	r1, r3, #3
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a0:	4a56      	ldr	r2, [pc, #344]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a2:	430b      	orrs	r3, r1
 80037a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037a6:	e003      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f000 809f 	beq.w	8003910 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037de:	f7fd fb1b 	bl	8000e18 <HAL_GetTick>
 80037e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037e6:	e00b      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fd fb16 	bl	8000e18 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	@ 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003800:	4b3f      	ldr	r3, [pc, #252]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ed      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003810:	2b00      	cmp	r3, #0
 8003812:	d179      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003814:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003820:	4053      	eors	r3, r2
 8003822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382a:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003832:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003836:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003840:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	4b2e      	ldr	r3, [pc, #184]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800384e:	4a2b      	ldr	r2, [pc, #172]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003850:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003854:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800385e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003862:	d118      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fad8 	bl	8000e18 <HAL_GetTick>
 8003868:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800386c:	e00d      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd fad3 	bl	8000e18 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800387e:	429a      	cmp	r2, r3
 8003880:	d903      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003888:	e005      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388a:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0eb      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389a:	2b00      	cmp	r3, #0
 800389c:	d129      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ae:	d10e      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038b0:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038c0:	091a      	lsrs	r2, r3, #4
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	4a0d      	ldr	r2, [pc, #52]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6113      	str	r3, [r2, #16]
 80038cc:	e005      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038d8:	6113      	str	r3, [r2, #16]
 80038da:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	e00e      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80038fa:	e009      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80038fc:	58024400 	.word	0x58024400
 8003900:	58024800 	.word	0x58024800
 8003904:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f002 0301 	and.w	r3, r2, #1
 800391c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003926:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	f000 8089 	beq.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003938:	2b28      	cmp	r3, #40	@ 0x28
 800393a:	d86b      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800393c:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003a1d 	.word	0x08003a1d
 8003948:	08003a15 	.word	0x08003a15
 800394c:	08003a15 	.word	0x08003a15
 8003950:	08003a15 	.word	0x08003a15
 8003954:	08003a15 	.word	0x08003a15
 8003958:	08003a15 	.word	0x08003a15
 800395c:	08003a15 	.word	0x08003a15
 8003960:	08003a15 	.word	0x08003a15
 8003964:	080039e9 	.word	0x080039e9
 8003968:	08003a15 	.word	0x08003a15
 800396c:	08003a15 	.word	0x08003a15
 8003970:	08003a15 	.word	0x08003a15
 8003974:	08003a15 	.word	0x08003a15
 8003978:	08003a15 	.word	0x08003a15
 800397c:	08003a15 	.word	0x08003a15
 8003980:	08003a15 	.word	0x08003a15
 8003984:	080039ff 	.word	0x080039ff
 8003988:	08003a15 	.word	0x08003a15
 800398c:	08003a15 	.word	0x08003a15
 8003990:	08003a15 	.word	0x08003a15
 8003994:	08003a15 	.word	0x08003a15
 8003998:	08003a15 	.word	0x08003a15
 800399c:	08003a15 	.word	0x08003a15
 80039a0:	08003a15 	.word	0x08003a15
 80039a4:	08003a1d 	.word	0x08003a1d
 80039a8:	08003a15 	.word	0x08003a15
 80039ac:	08003a15 	.word	0x08003a15
 80039b0:	08003a15 	.word	0x08003a15
 80039b4:	08003a15 	.word	0x08003a15
 80039b8:	08003a15 	.word	0x08003a15
 80039bc:	08003a15 	.word	0x08003a15
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003a1d 	.word	0x08003a1d
 80039c8:	08003a15 	.word	0x08003a15
 80039cc:	08003a15 	.word	0x08003a15
 80039d0:	08003a15 	.word	0x08003a15
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	08003a15 	.word	0x08003a15
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a1d 	.word	0x08003a1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	3308      	adds	r3, #8
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd05 	bl	8004400 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039fc:	e00f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	3328      	adds	r3, #40	@ 0x28
 8003a04:	2101      	movs	r1, #1
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fdac 	bl	8004564 <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a26:	4bbf      	ldr	r3, [pc, #764]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a34:	4abb      	ldr	r2, [pc, #748]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 0302 	and.w	r3, r2, #2
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	d041      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d824      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003ac1 	.word	0x08003ac1
 8003a78:	08003a8d 	.word	0x08003a8d
 8003a7c:	08003aa3 	.word	0x08003aa3
 8003a80:	08003ac1 	.word	0x08003ac1
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003ac1 	.word	0x08003ac1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	3308      	adds	r3, #8
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fcb3 	bl	8004400 <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	3328      	adds	r3, #40	@ 0x28
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fd5a 	bl	8004564 <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003aca:	4b96      	ldr	r3, [pc, #600]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	f023 0107 	bic.w	r1, r3, #7
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad8:	4a92      	ldr	r2, [pc, #584]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 0304 	and.w	r3, r2, #4
 8003af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003afe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d044      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d825      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b69 	.word	0x08003b69
 8003b20:	08003b35 	.word	0x08003b35
 8003b24:	08003b4b 	.word	0x08003b4b
 8003b28:	08003b69 	.word	0x08003b69
 8003b2c:	08003b69 	.word	0x08003b69
 8003b30:	08003b69 	.word	0x08003b69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	3308      	adds	r3, #8
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fc5f 	bl	8004400 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b48:	e00f      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	3328      	adds	r3, #40	@ 0x28
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fd06 	bl	8004564 <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b72:	4b6c      	ldr	r3, [pc, #432]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	f023 0107 	bic.w	r1, r3, #7
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b82:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f002 0320 	and.w	r3, r2, #32
 8003b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d055      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbe:	d033      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc4:	d82c      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd0:	d826      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd6:	d02b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bdc:	d820      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be2:	d012      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be8:	d81a      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d022      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fbff 	bl	8004400 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c08:	e015      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	3328      	adds	r3, #40	@ 0x28
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fca6 	bl	8004564 <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c26:	e006      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3e:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	4a35      	ldr	r2, [pc, #212]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	d058      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c8a:	d033      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c90:	d82c      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c96:	d02f      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9c:	d826      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca2:	d02b      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca8:	d820      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cae:	d012      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb4:	d81a      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d022      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbe:	d115      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fb99 	bl	8004400 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e015      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fc40 	bl	8004564 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cea:	e00a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e006      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d1a:	4a02      	ldr	r2, [pc, #8]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d20:	e006      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d055      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d5c:	d033      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d62:	d82c      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	d02f      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6e:	d826      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d74:	d02b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d7a:	d820      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d80:	d012      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d86:	d81a      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d022      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d90:	d115      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	3308      	adds	r3, #8
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fb30 	bl	8004400 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003da6:	e015      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dac:	3328      	adds	r3, #40	@ 0x28
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fbd7 	bl	8004564 <RCCEx_PLL3_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ddc:	4ba1      	ldr	r3, [pc, #644]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003dec:	4a9d      	ldr	r2, [pc, #628]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 0308 	and.w	r3, r2, #8
 8003e08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d01e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fb96 	bl	8004564 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e44:	4b87      	ldr	r3, [pc, #540]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e54:	4a83      	ldr	r2, [pc, #524]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f002 0310 	and.w	r3, r2, #16
 8003e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d01e      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	3328      	adds	r3, #40	@ 0x28
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb67 	bl	8004564 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea2:	4b70      	ldr	r3, [pc, #448]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ece:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	d03e      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee4:	d022      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eea:	d81b      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003ef6:	e015      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	3308      	adds	r3, #8
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fa7d 	bl	8004400 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f0c:	e00f      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	3328      	adds	r3, #40	@ 0x28
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb24 	bl	8004564 <RCCEx_PLL3_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f22:	e004      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f2a:	e000      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f36:	4b4b      	ldr	r3, [pc, #300]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f46:	4a47      	ldr	r2, [pc, #284]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f64:	2300      	movs	r3, #0
 8003f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f7e:	d01f      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f84:	d818      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f90:	d007      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003f92:	e011      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4b33      	ldr	r3, [pc, #204]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	4a32      	ldr	r2, [pc, #200]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00f      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	3328      	adds	r3, #40	@ 0x28
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fada 	bl	8004564 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fca:	4b26      	ldr	r3, [pc, #152]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe0:	e003      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ff6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ffc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004000:	460b      	mov	r3, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	d034      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d007      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4a11      	ldr	r2, [pc, #68]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004024:	e00e      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	3308      	adds	r3, #8
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f9e6 	bl	8004400 <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405a:	4a02      	ldr	r2, [pc, #8]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800405c:	430b      	orrs	r3, r1
 800405e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800407c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800407e:	2300      	movs	r3, #0
 8004080:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004082:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d00c      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	3328      	adds	r3, #40	@ 0x28
 8004092:	2102      	movs	r1, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fa65 	bl	8004564 <RCCEx_PLL3_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b4:	2300      	movs	r3, #0
 80040b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d038      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ce:	d018      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d4:	d811      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040da:	d014      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e0:	d80b      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d011      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ea:	d106      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4bc3      	ldr	r3, [pc, #780]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	4ac2      	ldr	r2, [pc, #776]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040f8:	e008      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004100:	e004      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800410a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004114:	4bb9      	ldr	r3, [pc, #740]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004124:	4ab5      	ldr	r2, [pc, #724]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6553      	str	r3, [r2, #84]	@ 0x54
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004142:	2300      	movs	r3, #0
 8004144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004146:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004150:	4baa      	ldr	r3, [pc, #680]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004154:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	4aa7      	ldr	r2, [pc, #668]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004160:	430b      	orrs	r3, r1
 8004162:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004170:	653b      	str	r3, [r7, #80]	@ 0x50
 8004172:	2300      	movs	r3, #0
 8004174:	657b      	str	r3, [r7, #84]	@ 0x54
 8004176:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800417a:	460b      	mov	r3, r1
 800417c:	4313      	orrs	r3, r2
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004180:	4b9e      	ldr	r3, [pc, #632]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004190:	4a9a      	ldr	r2, [pc, #616]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004192:	430b      	orrs	r3, r1
 8004194:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a4:	2300      	movs	r3, #0
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041b2:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c0:	4a8e      	ldr	r2, [pc, #568]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d4:	2300      	movs	r3, #0
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041dc:	460b      	mov	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e2:	4b86      	ldr	r3, [pc, #536]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a85      	ldr	r2, [pc, #532]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ec:	6113      	str	r3, [r2, #16]
 80041ee:	4b83      	ldr	r3, [pc, #524]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041f0:	6919      	ldr	r1, [r3, #16]
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80041fa:	4a80      	ldr	r2, [pc, #512]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800420e:	2300      	movs	r3, #0
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004212:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004216:	460b      	mov	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800421c:	4b77      	ldr	r3, [pc, #476]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004220:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	4a74      	ldr	r2, [pc, #464]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422c:	430b      	orrs	r3, r1
 800422e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
 800423e:	2300      	movs	r3, #0
 8004240:	637b      	str	r3, [r7, #52]	@ 0x34
 8004242:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004250:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800425c:	4a67      	ldr	r2, [pc, #412]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800425e:	430b      	orrs	r3, r1
 8004260:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	2100      	movs	r1, #0
 800426c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004274:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d011      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3308      	adds	r3, #8
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f8ba 	bl	8004400 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	2100      	movs	r1, #0
 80042ac:	6239      	str	r1, [r7, #32]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d011      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	3308      	adds	r3, #8
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f89a 	bl	8004400 <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	2100      	movs	r1, #0
 80042ec:	61b9      	str	r1, [r7, #24]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042f8:	460b      	mov	r3, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	d011      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3308      	adds	r3, #8
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f87a 	bl	8004400 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	2100      	movs	r1, #0
 800432c:	6139      	str	r1, [r7, #16]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d011      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	3328      	adds	r3, #40	@ 0x28
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f90c 	bl	8004564 <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	2100      	movs	r1, #0
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d011      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f8ec 	bl	8004564 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	2100      	movs	r1, #0
 80043ac:	6039      	str	r1, [r7, #0]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d011      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f8cc 	bl	8004564 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80043e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80043f6:	46bd      	mov	sp, r7
 80043f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fc:	58024400 	.word	0x58024400

08004400 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440e:	4b53      	ldr	r3, [pc, #332]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b03      	cmp	r3, #3
 8004418:	d101      	bne.n	800441e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e099      	b.n	8004552 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800441e:	4b4f      	ldr	r3, [pc, #316]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4e      	ldr	r2, [pc, #312]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004424:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442a:	f7fc fcf5 	bl	8000e18 <HAL_GetTick>
 800442e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004430:	e008      	b.n	8004444 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004432:	f7fc fcf1 	bl	8000e18 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e086      	b.n	8004552 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004444:	4b45      	ldr	r3, [pc, #276]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004450:	4b42      	ldr	r3, [pc, #264]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	493f      	ldr	r1, [pc, #252]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	628b      	str	r3, [r1, #40]	@ 0x28
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	3b01      	subs	r3, #1
 800446a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	3b01      	subs	r3, #1
 8004474:	025b      	lsls	r3, r3, #9
 8004476:	b29b      	uxth	r3, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	3b01      	subs	r3, #1
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004494:	4931      	ldr	r1, [pc, #196]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	492d      	ldr	r1, [pc, #180]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044ac:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	f023 0220 	bic.w	r2, r3, #32
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	4928      	ldr	r1, [pc, #160]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044be:	4b27      	ldr	r3, [pc, #156]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	4a26      	ldr	r2, [pc, #152]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044ca:	4b24      	ldr	r3, [pc, #144]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <RCCEx_PLL2_Config+0x160>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	69d2      	ldr	r2, [r2, #28]
 80044d6:	00d2      	lsls	r2, r2, #3
 80044d8:	4920      	ldr	r1, [pc, #128]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044de:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044e4:	f043 0310 	orr.w	r3, r3, #16
 80044e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044f0:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a19      	ldr	r2, [pc, #100]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 80044f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044fc:	e00f      	b.n	800451e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d106      	bne.n	8004512 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004504:	4b15      	ldr	r3, [pc, #84]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	4a14      	ldr	r2, [pc, #80]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800450e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004510:	e005      	b.n	800451e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	4a11      	ldr	r2, [pc, #68]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004518:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800451c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800451e:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0e      	ldr	r2, [pc, #56]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452a:	f7fc fc75 	bl	8000e18 <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004530:	e008      	b.n	8004544 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004532:	f7fc fc71 	bl	8000e18 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e006      	b.n	8004552 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <RCCEx_PLL2_Config+0x15c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	58024400 	.word	0x58024400
 8004560:	ffff0007 	.word	0xffff0007

08004564 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004572:	4b53      	ldr	r3, [pc, #332]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d101      	bne.n	8004582 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e099      	b.n	80046b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004582:	4b4f      	ldr	r3, [pc, #316]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a4e      	ldr	r2, [pc, #312]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458e:	f7fc fc43 	bl	8000e18 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004594:	e008      	b.n	80045a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004596:	f7fc fc3f 	bl	8000e18 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e086      	b.n	80046b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045a8:	4b45      	ldr	r3, [pc, #276]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045b4:	4b42      	ldr	r3, [pc, #264]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	051b      	lsls	r3, r3, #20
 80045c2:	493f      	ldr	r1, [pc, #252]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	025b      	lsls	r3, r3, #9
 80045da:	b29b      	uxth	r3, r3
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045f8:	4931      	ldr	r1, [pc, #196]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045fe:	4b30      	ldr	r3, [pc, #192]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	492d      	ldr	r1, [pc, #180]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800460c:	4313      	orrs	r3, r2
 800460e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004610:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	4928      	ldr	r1, [pc, #160]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004622:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	4a26      	ldr	r2, [pc, #152]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800462e:	4b24      	ldr	r3, [pc, #144]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <RCCEx_PLL3_Config+0x160>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	69d2      	ldr	r2, [r2, #28]
 800463a:	00d2      	lsls	r2, r2, #3
 800463c:	4920      	ldr	r1, [pc, #128]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004642:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	4a1e      	ldr	r2, [pc, #120]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004654:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800465a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800465e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004660:	e00f      	b.n	8004682 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d106      	bne.n	8004676 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800466e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004674:	e005      	b.n	8004682 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	4a11      	ldr	r2, [pc, #68]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 800467c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004680:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004682:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a0e      	ldr	r2, [pc, #56]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468e:	f7fc fbc3 	bl	8000e18 <HAL_GetTick>
 8004692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004694:	e008      	b.n	80046a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004696:	f7fc fbbf 	bl	8000e18 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e006      	b.n	80046b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <RCCEx_PLL3_Config+0x15c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	ffff0007 	.word	0xffff0007

080046c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	fb03 f203 	mul.w	r2, r3, r3
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	43db      	mvns	r3, r3
 80046e6:	ea01 0203 	and.w	r2, r1, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	fb03 f303 	mul.w	r3, r3, r3
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	43db      	mvns	r3, r3
 800471c:	401a      	ands	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	605a      	str	r2, [r3, #4]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	fb03 f203 	mul.w	r2, r3, r3
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	43db      	mvns	r3, r3
 8004756:	ea01 0203 	and.w	r2, r1, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fb03 f303 	mul.w	r3, r3, r3
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	431a      	orrs	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68d9      	ldr	r1, [r3, #12]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	fb03 f203 	mul.w	r2, r3, r3
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	43db      	mvns	r3, r3
 8004796:	ea01 0203 	and.w	r2, r1, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fb03 f303 	mul.w	r3, r3, r3
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	60da      	str	r2, [r3, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a19      	ldr	r1, [r3, #32]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	fb03 f303 	mul.w	r3, r3, r3
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	fb03 f202 	mul.w	r2, r3, r2
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	43db      	mvns	r3, r3
 80047e2:	ea01 0203 	and.w	r2, r1, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	fb03 f303 	mul.w	r3, r3, r3
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	431a      	orrs	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	0a12      	lsrs	r2, r2, #8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	0a12      	lsrs	r2, r2, #8
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	0a12      	lsrs	r2, r2, #8
 8004838:	fb03 f202 	mul.w	r2, r3, r2
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	43db      	mvns	r3, r3
 8004844:	ea01 0203 	and.w	r2, r1, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	0a09      	lsrs	r1, r1, #8
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	0a09      	lsrs	r1, r1, #8
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	0a09      	lsrs	r1, r1, #8
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	60fb      	str	r3, [r7, #12]
  return result;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <LL_GPIO_Init+0x26>
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e003      	b.n	80048aa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fab3 f383 	clz	r3, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80048ac:	e048      	b.n	8004940 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	2101      	movs	r1, #1
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d03a      	beq.n	800493a <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d003      	beq.n	80048d4 <LL_GPIO_Init+0x58>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d10e      	bne.n	80048f2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	461a      	mov	r2, r3
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff2b 	bl	8004738 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff0b 	bl	8004708 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	461a      	mov	r2, r3
 80048f8:	69b9      	ldr	r1, [r7, #24]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff3c 	bl	8004778 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d111      	bne.n	800492c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2bff      	cmp	r3, #255	@ 0xff
 800490c:	d807      	bhi.n	800491e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	461a      	mov	r2, r3
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff4e 	bl	80047b8 <LL_GPIO_SetAFPin_0_7>
 800491c:	e006      	b.n	800492c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	461a      	mov	r2, r3
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff72 	bl	8004810 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	461a      	mov	r2, r3
 8004932:	69b9      	ldr	r1, [r7, #24]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fec7 	bl	80046c8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1af      	bne.n	80048ae <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <LL_RCC_HSE_IsReady+0x24>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004968:	d101      	bne.n	800496e <LL_RCC_HSE_IsReady+0x16>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <LL_RCC_HSE_IsReady+0x18>
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	58024400 	.word	0x58024400

08004980 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <LL_RCC_HSI_IsReady+0x20>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d101      	bne.n	8004994 <LL_RCC_HSI_IsReady+0x14>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <LL_RCC_HSI_IsReady+0x16>
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	58024400 	.word	0x58024400

080049a4 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80049a8:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <LL_RCC_HSI_GetDivider+0x18>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0318 	and.w	r3, r3, #24
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400

080049c0 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 80049c4:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <LL_RCC_CSI_IsReady+0x24>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d0:	d101      	bne.n	80049d6 <LL_RCC_CSI_IsReady+0x16>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <LL_RCC_CSI_IsReady+0x18>
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400

080049e8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <LL_RCC_LSE_IsReady+0x20>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d101      	bne.n	80049fc <LL_RCC_LSE_IsReady+0x14>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <LL_RCC_LSE_IsReady+0x16>
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	58024400 	.word	0x58024400

08004a0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <LL_RCC_GetSysClkSource+0x18>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400

08004a28 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <LL_RCC_GetSysPrescaler+0x18>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400

08004a44 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <LL_RCC_GetAHBPrescaler+0x18>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400

08004a60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400

08004a7c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400

08004a98 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <LL_RCC_GetClockSource+0x48>)
 8004aa6:	4413      	add	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0e19      	lsrs	r1, r3, #24
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	401a      	ands	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	041a      	lsls	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4313      	orrs	r3, r2
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	5802444c 	.word	0x5802444c

08004ae4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ffd3 	bl	8004a98 <LL_RCC_GetClockSource>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8004b00:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <LL_RCC_PLL_GetSource+0x18>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	f003 0303 	and.w	r3, r3, #3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	58024400 	.word	0x58024400

08004b18 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <LL_RCC_PLL1P_IsEnabled+0x24>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b28:	d101      	bne.n	8004b2e <LL_RCC_PLL1P_IsEnabled+0x16>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <LL_RCC_PLL1P_IsEnabled+0x18>
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400

08004b40 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b50:	d101      	bne.n	8004b56 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400

08004b68 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8004b6c:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <LL_RCC_PLL1R_IsEnabled+0x24>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b78:	d101      	bne.n	8004b7e <LL_RCC_PLL1R_IsEnabled+0x16>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <LL_RCC_PLL1R_IsEnabled+0x18>
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400

08004b90 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	58024400 	.word	0x58024400

08004bb4 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <LL_RCC_PLL1_GetN+0x18>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	3301      	adds	r3, #1
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	58024400 	.word	0x58024400

08004bd0 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <LL_RCC_PLL1_GetM+0x18>)
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	58024400 	.word	0x58024400

08004bec <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <LL_RCC_PLL1_GetP+0x1c>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	0a5b      	lsrs	r3, r3, #9
 8004bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfa:	3301      	adds	r3, #1
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400

08004c0c <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <LL_RCC_PLL1_GetQ+0x1c>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1a:	3301      	adds	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400

08004c2c <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <LL_RCC_PLL1_GetR+0x1c>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3a:	3301      	adds	r3, #1
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400

08004c4c <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <LL_RCC_PLL1_GetFRACN+0x18>)
 8004c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	58024400 	.word	0x58024400

08004c68 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <LL_RCC_PLL2_IsReady+0x24>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c78:	d101      	bne.n	8004c7e <LL_RCC_PLL2_IsReady+0x16>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_RCC_PLL2_IsReady+0x18>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400

08004c90 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8004c94:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ca0:	d101      	bne.n	8004ca6 <LL_RCC_PLL2P_IsEnabled+0x16>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <LL_RCC_PLL2P_IsEnabled+0x18>
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400

08004cb8 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc8:	d101      	bne.n	8004cce <LL_RCC_PLL2Q_IsEnabled+0x16>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400

08004ce0 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8004ce4:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf0:	d101      	bne.n	8004cf6 <LL_RCC_PLL2R_IsEnabled+0x16>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <LL_RCC_PLL2R_IsEnabled+0x18>
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	58024400 	.word	0x58024400

08004d08 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d101      	bne.n	8004d1c <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	58024400 	.word	0x58024400

08004d2c <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <LL_RCC_PLL2_GetN+0x18>)
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	3301      	adds	r3, #1
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	58024400 	.word	0x58024400

08004d48 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <LL_RCC_PLL2_GetM+0x18>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	0b1b      	lsrs	r3, r3, #12
 8004d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	58024400 	.word	0x58024400

08004d64 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <LL_RCC_PLL2_GetP+0x1c>)
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	0a5b      	lsrs	r3, r3, #9
 8004d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d72:	3301      	adds	r3, #1
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400

08004d84 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <LL_RCC_PLL2_GetQ+0x1c>)
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d92:	3301      	adds	r3, #1
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400

08004da4 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <LL_RCC_PLL2_GetR+0x1c>)
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	0e1b      	lsrs	r3, r3, #24
 8004dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db2:	3301      	adds	r3, #1
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400

08004dc4 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8004dc8:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <LL_RCC_PLL2_GetFRACN+0x18>)
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	58024400 	.word	0x58024400

08004de0 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8004de4:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <LL_RCC_PLL3_IsReady+0x24>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df0:	d101      	bne.n	8004df6 <LL_RCC_PLL3_IsReady+0x16>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_RCC_PLL3_IsReady+0x18>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400

08004e08 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8004e0c:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <LL_RCC_PLL3P_IsEnabled+0x24>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e18:	d101      	bne.n	8004e1e <LL_RCC_PLL3P_IsEnabled+0x16>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <LL_RCC_PLL3P_IsEnabled+0x18>
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400

08004e30 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8004e34:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e40:	d101      	bne.n	8004e46 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400

08004e58 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8004e5c:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <LL_RCC_PLL3R_IsEnabled+0x24>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e68:	d101      	bne.n	8004e6e <LL_RCC_PLL3R_IsEnabled+0x16>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <LL_RCC_PLL3R_IsEnabled+0x18>
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400

08004e80 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8004e84:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e90:	d101      	bne.n	8004e96 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400

08004ea8 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8004eac:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <LL_RCC_PLL3_GetN+0x18>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	3301      	adds	r3, #1
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	58024400 	.word	0x58024400

08004ec4 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <LL_RCC_PLL3_GetM+0x18>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	0d1b      	lsrs	r3, r3, #20
 8004ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	58024400 	.word	0x58024400

08004ee0 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8004ee4:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <LL_RCC_PLL3_GetP+0x1c>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	0a5b      	lsrs	r3, r3, #9
 8004eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eee:	3301      	adds	r3, #1
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400

08004f00 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <LL_RCC_PLL3_GetQ+0x1c>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0e:	3301      	adds	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400

08004f20 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <LL_RCC_PLL3_GetR+0x1c>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	0e1b      	lsrs	r3, r3, #24
 8004f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f2e:	3301      	adds	r3, #1
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400

08004f40 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <LL_RCC_PLL3_GetFRACN+0x18>)
 8004f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	58024400 	.word	0x58024400

08004f5c <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004f6c:	f7ff fdc6 	bl	8004afc <LL_RCC_PLL_GetSource>
 8004f70:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d01f      	beq.n	8004fb8 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d824      	bhi.n	8004fc8 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <LL_RCC_GetPLL1ClockFreq+0x30>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00e      	beq.n	8004fa8 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004f8a:	e01d      	b.n	8004fc8 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004f8c:	f7ff fcf8 	bl	8004980 <LL_RCC_HSI_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01a      	beq.n	8004fcc <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004f96:	f7ff fd05 	bl	80049a4 <LL_RCC_HSI_GetDivider>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	08db      	lsrs	r3, r3, #3
 8004f9e:	4a38      	ldr	r2, [pc, #224]	@ (8005080 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	61fb      	str	r3, [r7, #28]
      break;
 8004fa6:	e011      	b.n	8004fcc <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004fa8:	f7ff fd0a 	bl	80049c0 <LL_RCC_CSI_IsReady>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00e      	beq.n	8004fd0 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004fb2:	4b34      	ldr	r3, [pc, #208]	@ (8005084 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8004fb4:	61fb      	str	r3, [r7, #28]
      break;
 8004fb6:	e00b      	b.n	8004fd0 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004fb8:	f7ff fcce 	bl	8004958 <LL_RCC_HSE_IsReady>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004fc2:	4b31      	ldr	r3, [pc, #196]	@ (8005088 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8004fc4:	61fb      	str	r3, [r7, #28]
      break;
 8004fc6:	e005      	b.n	8004fd4 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8004fc8:	bf00      	nop
 8004fca:	e004      	b.n	8004fd6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004fcc:	bf00      	nop
 8004fce:	e002      	b.n	8004fd6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004fd0:	bf00      	nop
 8004fd2:	e000      	b.n	8004fd6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004fd4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8004fe8:	f7ff fdf2 	bl	8004bd0 <LL_RCC_PLL1_GetM>
 8004fec:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8004fee:	f7ff fde1 	bl	8004bb4 <LL_RCC_PLL1_GetN>
 8004ff2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8004ff4:	f7ff fdcc 	bl	8004b90 <LL_RCC_PLL1FRACN_IsEnabled>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8004ffe:	f7ff fe25 	bl	8004c4c <LL_RCC_PLL1_GetFRACN>
 8005002:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d035      	beq.n	8005076 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800500a:	f7ff fd85 	bl	8004b18 <LL_RCC_PLL1P_IsEnabled>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8005014:	f7ff fdea 	bl	8004bec <LL_RCC_PLL1_GetP>
 8005018:	4603      	mov	r3, r0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	6939      	ldr	r1, [r7, #16]
 8005022:	69f8      	ldr	r0, [r7, #28]
 8005024:	f000 f964 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800502e:	f7ff fd87 	bl	8004b40 <LL_RCC_PLL1Q_IsEnabled>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00c      	beq.n	8005052 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8005038:	f7ff fde8 	bl	8004c0c <LL_RCC_PLL1_GetQ>
 800503c:	4603      	mov	r3, r0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6939      	ldr	r1, [r7, #16]
 8005046:	69f8      	ldr	r0, [r7, #28]
 8005048:	f000 f952 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8005052:	f7ff fd89 	bl	8004b68 <LL_RCC_PLL1R_IsEnabled>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800505c:	f7ff fde6 	bl	8004c2c <LL_RCC_PLL1_GetR>
 8005060:	4603      	mov	r3, r0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6939      	ldr	r1, [r7, #16]
 800506a:	69f8      	ldr	r0, [r7, #28]
 800506c:	f000 f940 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
    }
  }
}
 8005076:	bf00      	nop
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	03d09000 	.word	0x03d09000
 8005084:	003d0900 	.word	0x003d0900
 8005088:	017d7840 	.word	0x017d7840

0800508c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800509c:	f7ff fd2e 	bl	8004afc <LL_RCC_PLL_GetSource>
 80050a0:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d01f      	beq.n	80050e8 <LL_RCC_GetPLL2ClockFreq+0x5c>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d824      	bhi.n	80050f8 <LL_RCC_GetPLL2ClockFreq+0x6c>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <LL_RCC_GetPLL2ClockFreq+0x30>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d00e      	beq.n	80050d8 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80050ba:	e01d      	b.n	80050f8 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80050bc:	f7ff fc60 	bl	8004980 <LL_RCC_HSI_IsReady>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01a      	beq.n	80050fc <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80050c6:	f7ff fc6d 	bl	80049a4 <LL_RCC_HSI_GetDivider>
 80050ca:	4603      	mov	r3, r0
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	4a38      	ldr	r2, [pc, #224]	@ (80051b0 <LL_RCC_GetPLL2ClockFreq+0x124>)
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	61fb      	str	r3, [r7, #28]
      break;
 80050d6:	e011      	b.n	80050fc <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80050d8:	f7ff fc72 	bl	80049c0 <LL_RCC_CSI_IsReady>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80050e2:	4b34      	ldr	r3, [pc, #208]	@ (80051b4 <LL_RCC_GetPLL2ClockFreq+0x128>)
 80050e4:	61fb      	str	r3, [r7, #28]
      break;
 80050e6:	e00b      	b.n	8005100 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80050e8:	f7ff fc36 	bl	8004958 <LL_RCC_HSE_IsReady>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 80050f4:	61fb      	str	r3, [r7, #28]
      break;
 80050f6:	e005      	b.n	8005104 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80050f8:	bf00      	nop
 80050fa:	e004      	b.n	8005106 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8005104:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8005118:	f7ff fe16 	bl	8004d48 <LL_RCC_PLL2_GetM>
 800511c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800511e:	f7ff fe05 	bl	8004d2c <LL_RCC_PLL2_GetN>
 8005122:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8005124:	f7ff fdf0 	bl	8004d08 <LL_RCC_PLL2FRACN_IsEnabled>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800512e:	f7ff fe49 	bl	8004dc4 <LL_RCC_PLL2_GetFRACN>
 8005132:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d035      	beq.n	80051a6 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800513a:	f7ff fda9 	bl	8004c90 <LL_RCC_PLL2P_IsEnabled>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00c      	beq.n	800515e <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8005144:	f7ff fe0e 	bl	8004d64 <LL_RCC_PLL2_GetP>
 8005148:	4603      	mov	r3, r0
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	6939      	ldr	r1, [r7, #16]
 8005152:	69f8      	ldr	r0, [r7, #28]
 8005154:	f000 f8cc 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800515e:	f7ff fdab 	bl	8004cb8 <LL_RCC_PLL2Q_IsEnabled>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8005168:	f7ff fe0c 	bl	8004d84 <LL_RCC_PLL2_GetQ>
 800516c:	4603      	mov	r3, r0
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	69f8      	ldr	r0, [r7, #28]
 8005178:	f000 f8ba 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8005182:	f7ff fdad 	bl	8004ce0 <LL_RCC_PLL2R_IsEnabled>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800518c:	f7ff fe0a 	bl	8004da4 <LL_RCC_PLL2_GetR>
 8005190:	4603      	mov	r3, r0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	6939      	ldr	r1, [r7, #16]
 800519a:	69f8      	ldr	r0, [r7, #28]
 800519c:	f000 f8a8 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
    }
  }
}
 80051a6:	bf00      	nop
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	03d09000 	.word	0x03d09000
 80051b4:	003d0900 	.word	0x003d0900
 80051b8:	017d7840 	.word	0x017d7840

080051bc <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80051cc:	f7ff fc96 	bl	8004afc <LL_RCC_PLL_GetSource>
 80051d0:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d01f      	beq.n	8005218 <LL_RCC_GetPLL3ClockFreq+0x5c>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d824      	bhi.n	8005228 <LL_RCC_GetPLL3ClockFreq+0x6c>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <LL_RCC_GetPLL3ClockFreq+0x30>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00e      	beq.n	8005208 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80051ea:	e01d      	b.n	8005228 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80051ec:	f7ff fbc8 	bl	8004980 <LL_RCC_HSI_IsReady>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01a      	beq.n	800522c <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80051f6:	f7ff fbd5 	bl	80049a4 <LL_RCC_HSI_GetDivider>
 80051fa:	4603      	mov	r3, r0
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	4a39      	ldr	r2, [pc, #228]	@ (80052e4 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	61fb      	str	r3, [r7, #28]
      break;
 8005206:	e011      	b.n	800522c <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8005208:	f7ff fbda 	bl	80049c0 <LL_RCC_CSI_IsReady>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8005212:	4b35      	ldr	r3, [pc, #212]	@ (80052e8 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8005214:	61fb      	str	r3, [r7, #28]
      break;
 8005216:	e00b      	b.n	8005230 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8005218:	f7ff fb9e 	bl	8004958 <LL_RCC_HSE_IsReady>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8005222:	4b32      	ldr	r3, [pc, #200]	@ (80052ec <LL_RCC_GetPLL3ClockFreq+0x130>)
 8005224:	61fb      	str	r3, [r7, #28]
      break;
 8005226:	e005      	b.n	8005234 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8005228:	bf00      	nop
 800522a:	e004      	b.n	8005236 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800522c:	bf00      	nop
 800522e:	e002      	b.n	8005236 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8005234:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8005248:	f7ff fe3c 	bl	8004ec4 <LL_RCC_PLL3_GetM>
 800524c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800524e:	f7ff fe2b 	bl	8004ea8 <LL_RCC_PLL3_GetN>
 8005252:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8005254:	f7ff fe14 	bl	8004e80 <LL_RCC_PLL3FRACN_IsEnabled>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800525e:	f7ff fe6f 	bl	8004f40 <LL_RCC_PLL3_GetFRACN>
 8005262:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d038      	beq.n	80052dc <LL_RCC_GetPLL3ClockFreq+0x120>
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d035      	beq.n	80052dc <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8005270:	f7ff fdca 	bl	8004e08 <LL_RCC_PLL3P_IsEnabled>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800527a:	f7ff fe31 	bl	8004ee0 <LL_RCC_PLL3_GetP>
 800527e:	4603      	mov	r3, r0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	6939      	ldr	r1, [r7, #16]
 8005288:	69f8      	ldr	r0, [r7, #28]
 800528a:	f000 f831 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 800528e:	4602      	mov	r2, r0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005294:	f7ff fdcc 	bl	8004e30 <LL_RCC_PLL3Q_IsEnabled>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800529e:	f7ff fe2f 	bl	8004f00 <LL_RCC_PLL3_GetQ>
 80052a2:	4603      	mov	r3, r0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	6939      	ldr	r1, [r7, #16]
 80052ac:	69f8      	ldr	r0, [r7, #28]
 80052ae:	f000 f81f 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 80052b2:	4602      	mov	r2, r0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 80052b8:	f7ff fdce 	bl	8004e58 <LL_RCC_PLL3R_IsEnabled>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 80052c2:	f7ff fe2d 	bl	8004f20 <LL_RCC_PLL3_GetR>
 80052c6:	4603      	mov	r3, r0
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6939      	ldr	r1, [r7, #16]
 80052d0:	69f8      	ldr	r0, [r7, #28]
 80052d2:	f000 f80d 	bl	80052f0 <LL_RCC_CalcPLLClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	017d7840 	.word	0x017d7840

080052f0 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800532a:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800536c <LL_RCC_CalcPLLClockFreq+0x7c>
 800532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005348:	edd7 6a05 	vldr	s13, [r7, #20]
 800534c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005350:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8005354:	edd7 7a05 	vldr	s15, [r7, #20]
 8005358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535c:	ee17 3a90 	vmov	r3, s15
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	46000000 	.word	0x46000000

08005370 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fbb1 	bl	8004ae4 <LL_RCC_GetUSARTClockSource>
 8005382:	4603      	mov	r3, r0
 8005384:	4a62      	ldr	r2, [pc, #392]	@ (8005510 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	f000 80a9 	beq.w	80054de <LL_RCC_GetUSARTClockFreq+0x16e>
 800538c:	4a60      	ldr	r2, [pc, #384]	@ (8005510 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f200 80ae 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 8005394:	4a5f      	ldr	r2, [pc, #380]	@ (8005514 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f000 80a1 	beq.w	80054de <LL_RCC_GetUSARTClockFreq+0x16e>
 800539c:	4a5d      	ldr	r2, [pc, #372]	@ (8005514 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	f200 80a6 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005518 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f000 8091 	beq.w	80054ce <LL_RCC_GetUSARTClockFreq+0x15e>
 80053ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005518 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f200 809e 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053b4:	4a59      	ldr	r2, [pc, #356]	@ (800551c <LL_RCC_GetUSARTClockFreq+0x1ac>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f000 8089 	beq.w	80054ce <LL_RCC_GetUSARTClockFreq+0x15e>
 80053bc:	4a57      	ldr	r2, [pc, #348]	@ (800551c <LL_RCC_GetUSARTClockFreq+0x1ac>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f200 8096 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053c4:	4a56      	ldr	r2, [pc, #344]	@ (8005520 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d073      	beq.n	80054b2 <LL_RCC_GetUSARTClockFreq+0x142>
 80053ca:	4a55      	ldr	r2, [pc, #340]	@ (8005520 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	f200 808f 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053d2:	4a54      	ldr	r2, [pc, #336]	@ (8005524 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d06c      	beq.n	80054b2 <LL_RCC_GetUSARTClockFreq+0x142>
 80053d8:	4a52      	ldr	r2, [pc, #328]	@ (8005524 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	f200 8088 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053e0:	4a51      	ldr	r2, [pc, #324]	@ (8005528 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d058      	beq.n	8005498 <LL_RCC_GetUSARTClockFreq+0x128>
 80053e6:	4a50      	ldr	r2, [pc, #320]	@ (8005528 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	f200 8081 	bhi.w	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053ee:	4a4f      	ldr	r2, [pc, #316]	@ (800552c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d051      	beq.n	8005498 <LL_RCC_GetUSARTClockFreq+0x128>
 80053f4:	4a4d      	ldr	r2, [pc, #308]	@ (800552c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d87a      	bhi.n	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 80053fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005530 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03e      	beq.n	800547e <LL_RCC_GetUSARTClockFreq+0x10e>
 8005400:	4a4b      	ldr	r2, [pc, #300]	@ (8005530 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d874      	bhi.n	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 8005406:	4a4b      	ldr	r2, [pc, #300]	@ (8005534 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d038      	beq.n	800547e <LL_RCC_GetUSARTClockFreq+0x10e>
 800540c:	4a49      	ldr	r2, [pc, #292]	@ (8005534 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d86e      	bhi.n	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
 8005412:	4a49      	ldr	r2, [pc, #292]	@ (8005538 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d01a      	beq.n	800544e <LL_RCC_GetUSARTClockFreq+0xde>
 8005418:	4a48      	ldr	r2, [pc, #288]	@ (800553c <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d168      	bne.n	80054f0 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800541e:	f000 f895 	bl	800554c <RCC_GetSystemClockFreq>
 8005422:	4604      	mov	r4, r0
 8005424:	f7ff fb00 	bl	8004a28 <LL_RCC_GetSysPrescaler>
 8005428:	4603      	mov	r3, r0
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	4a43      	ldr	r2, [pc, #268]	@ (8005540 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8005432:	5cd3      	ldrb	r3, [r2, r3]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	fa24 f303 	lsr.w	r3, r4, r3
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f8e7 	bl	8005610 <RCC_GetHCLKClockFreq>
 8005442:	4603      	mov	r3, r0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f911 	bl	800566c <RCC_GetPCLK2ClockFreq>
 800544a:	6178      	str	r0, [r7, #20]
      break;
 800544c:	e05b      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800544e:	f000 f87d 	bl	800554c <RCC_GetSystemClockFreq>
 8005452:	4604      	mov	r4, r0
 8005454:	f7ff fae8 	bl	8004a28 <LL_RCC_GetSysPrescaler>
 8005458:	4603      	mov	r3, r0
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	4a37      	ldr	r2, [pc, #220]	@ (8005540 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa24 f303 	lsr.w	r3, r4, r3
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f8cf 	bl	8005610 <RCC_GetHCLKClockFreq>
 8005472:	4603      	mov	r3, r0
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f8e1 	bl	800563c <RCC_GetPCLK1ClockFreq>
 800547a:	6178      	str	r0, [r7, #20]
      break;
 800547c:	e043      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800547e:	f7ff fbf3 	bl	8004c68 <LL_RCC_PLL2_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d035      	beq.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fdfd 	bl	800508c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	617b      	str	r3, [r7, #20]
      }
      break;
 8005496:	e02d      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8005498:	f7ff fca2 	bl	8004de0 <LL_RCC_PLL3_IsReady>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d02a      	beq.n	80054f8 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fe88 	bl	80051bc <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	617b      	str	r3, [r7, #20]
      }
      break;
 80054b0:	e022      	b.n	80054f8 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 80054b2:	f7ff fa65 	bl	8004980 <LL_RCC_HSI_IsReady>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01f      	beq.n	80054fc <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80054bc:	f7ff fa72 	bl	80049a4 <LL_RCC_HSI_GetDivider>
 80054c0:	4603      	mov	r3, r0
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005544 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
      }
      break;
 80054cc:	e016      	b.n	80054fc <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 80054ce:	f7ff fa77 	bl	80049c0 <LL_RCC_CSI_IsReady>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d013      	beq.n	8005500 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80054d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80054da:	617b      	str	r3, [r7, #20]
      }
      break;
 80054dc:	e010      	b.n	8005500 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80054de:	f7ff fa83 	bl	80049e8 <LL_RCC_LSE_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80054e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ec:	617b      	str	r3, [r7, #20]
      }
      break;
 80054ee:	e009      	b.n	8005504 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 80054f0:	bf00      	nop
 80054f2:	e008      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80054f4:	bf00      	nop
 80054f6:	e006      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80054f8:	bf00      	nop
 80054fa:	e004      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80054fc:	bf00      	nop
 80054fe:	e002      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005500:	bf00      	nop
 8005502:	e000      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005504:	bf00      	nop
  }

  return usart_frequency;
 8005506:	697b      	ldr	r3, [r7, #20]
}
 8005508:	4618      	mov	r0, r3
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd90      	pop	{r4, r7, pc}
 8005510:	07050308 	.word	0x07050308
 8005514:	07050008 	.word	0x07050008
 8005518:	07040308 	.word	0x07040308
 800551c:	07040008 	.word	0x07040008
 8005520:	07030308 	.word	0x07030308
 8005524:	07030008 	.word	0x07030008
 8005528:	07020308 	.word	0x07020308
 800552c:	07020008 	.word	0x07020008
 8005530:	07010308 	.word	0x07010308
 8005534:	07010008 	.word	0x07010008
 8005538:	07000008 	.word	0x07000008
 800553c:	07000308 	.word	0x07000308
 8005540:	0800703c 	.word	0x0800703c
 8005544:	03d09000 	.word	0x03d09000
 8005548:	003d0900 	.word	0x003d0900

0800554c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005556:	f7ff fa59 	bl	8004a0c <LL_RCC_GetSysClkSource>
 800555a:	4603      	mov	r3, r0
 800555c:	2b18      	cmp	r3, #24
 800555e:	d84b      	bhi.n	80055f8 <RCC_GetSystemClockFreq+0xac>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <RCC_GetSystemClockFreq+0x1c>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	080055cd 	.word	0x080055cd
 800556c:	080055f9 	.word	0x080055f9
 8005570:	080055f9 	.word	0x080055f9
 8005574:	080055f9 	.word	0x080055f9
 8005578:	080055f9 	.word	0x080055f9
 800557c:	080055f9 	.word	0x080055f9
 8005580:	080055f9 	.word	0x080055f9
 8005584:	080055f9 	.word	0x080055f9
 8005588:	080055df 	.word	0x080055df
 800558c:	080055f9 	.word	0x080055f9
 8005590:	080055f9 	.word	0x080055f9
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080055f9 	.word	0x080055f9
 800559c:	080055f9 	.word	0x080055f9
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	080055e5 	.word	0x080055e5
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055f9 	.word	0x080055f9
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	080055f9 	.word	0x080055f9
 80055c8:	080055eb 	.word	0x080055eb
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80055cc:	f7ff f9ea 	bl	80049a4 <LL_RCC_HSI_GetDivider>
 80055d0:	4603      	mov	r3, r0
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005604 <RCC_GetSystemClockFreq+0xb8>)
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	60fb      	str	r3, [r7, #12]
      break;
 80055dc:	e00d      	b.n	80055fa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <RCC_GetSystemClockFreq+0xbc>)
 80055e0:	60fb      	str	r3, [r7, #12]
      break;
 80055e2:	e00a      	b.n	80055fa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80055e4:	4b09      	ldr	r3, [pc, #36]	@ (800560c <RCC_GetSystemClockFreq+0xc0>)
 80055e6:	60fb      	str	r3, [r7, #12]
      break;
 80055e8:	e007      	b.n	80055fa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80055ea:	463b      	mov	r3, r7
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fcb5 	bl	8004f5c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
      break;
 80055f6:	e000      	b.n	80055fa <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80055f8:	bf00      	nop
  }

  return frequency;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	03d09000 	.word	0x03d09000
 8005608:	003d0900 	.word	0x003d0900
 800560c:	017d7840 	.word	0x017d7840

08005610 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005618:	f7ff fa14 	bl	8004a44 <LL_RCC_GetAHBPrescaler>
 800561c:	4603      	mov	r3, r0
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <RCC_GetHCLKClockFreq+0x28>)
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	0800703c 	.word	0x0800703c

0800563c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005644:	f7ff fa0c 	bl	8004a60 <LL_RCC_GetAPB1Prescaler>
 8005648:	4603      	mov	r3, r0
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4a05      	ldr	r2, [pc, #20]	@ (8005668 <RCC_GetPCLK1ClockFreq+0x2c>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	0800703c 	.word	0x0800703c

0800566c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005674:	f7ff fa02 	bl	8004a7c <LL_RCC_GetAPB2Prescaler>
 8005678:	4603      	mov	r3, r0
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4a05      	ldr	r2, [pc, #20]	@ (8005698 <RCC_GetPCLK2ClockFreq+0x2c>)
 8005682:	5cd3      	ldrb	r3, [r2, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	0800703c 	.word	0x0800703c

0800569c <LL_USART_IsEnabled>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <LL_USART_IsEnabled+0x18>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <LL_USART_IsEnabled+0x1a>
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_USART_SetPrescaler>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	f023 030f 	bic.w	r3, r3, #15
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b292      	uxth	r2, r2
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <LL_USART_SetStopBitsLength>:
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	605a      	str	r2, [r3, #4]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_USART_SetHWFlowCtrl>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <LL_USART_SetBaudRate>:
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b0b      	cmp	r3, #11
 800574a:	d83c      	bhi.n	80057c6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d039      	beq.n	80057c6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005758:	d122      	bne.n	80057a0 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	4b1c      	ldr	r3, [pc, #112]	@ (80057d4 <LL_USART_SetBaudRate+0x9c>)
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	005a      	lsls	r2, r3, #1
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	441a      	add	r2, r3
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	b29b      	uxth	r3, r3
 800577c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	60da      	str	r2, [r3, #12]
}
 800579e:	e012      	b.n	80057c6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <LL_USART_SetBaudRate+0x9c>)
 80057a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	441a      	add	r2, r3
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	60da      	str	r2, [r3, #12]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	0800704c 	.word	0x0800704c

080057d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff ff56 	bl	800569c <LL_USART_IsEnabled>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d17f      	bne.n	80058f6 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b41      	ldr	r3, [pc, #260]	@ (8005900 <LL_USART_Init+0x128>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	6891      	ldr	r1, [r2, #8]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6912      	ldr	r2, [r2, #16]
 8005806:	4311      	orrs	r1, r2
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	6952      	ldr	r2, [r2, #20]
 800580c:	4311      	orrs	r1, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	69d2      	ldr	r2, [r2, #28]
 8005812:	430a      	orrs	r2, r1
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff62 	bl	80056ea <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff6f 	bl	8005710 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a33      	ldr	r2, [pc, #204]	@ (8005904 <LL_USART_Init+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d104      	bne.n	8005844 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800583a:	4833      	ldr	r0, [pc, #204]	@ (8005908 <LL_USART_Init+0x130>)
 800583c:	f7ff fd98 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 8005840:	60b8      	str	r0, [r7, #8]
 8005842:	e03d      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a31      	ldr	r2, [pc, #196]	@ (800590c <LL_USART_Init+0x134>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d104      	bne.n	8005856 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800584c:	4830      	ldr	r0, [pc, #192]	@ (8005910 <LL_USART_Init+0x138>)
 800584e:	f7ff fd8f 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 8005852:	60b8      	str	r0, [r7, #8]
 8005854:	e034      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2e      	ldr	r2, [pc, #184]	@ (8005914 <LL_USART_Init+0x13c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d104      	bne.n	8005868 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800585e:	482c      	ldr	r0, [pc, #176]	@ (8005910 <LL_USART_Init+0x138>)
 8005860:	f7ff fd86 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 8005864:	60b8      	str	r0, [r7, #8]
 8005866:	e02b      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a2b      	ldr	r2, [pc, #172]	@ (8005918 <LL_USART_Init+0x140>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d104      	bne.n	800587a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005870:	4827      	ldr	r0, [pc, #156]	@ (8005910 <LL_USART_Init+0x138>)
 8005872:	f7ff fd7d 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 8005876:	60b8      	str	r0, [r7, #8]
 8005878:	e022      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a27      	ldr	r2, [pc, #156]	@ (800591c <LL_USART_Init+0x144>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d104      	bne.n	800588c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005882:	4823      	ldr	r0, [pc, #140]	@ (8005910 <LL_USART_Init+0x138>)
 8005884:	f7ff fd74 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 8005888:	60b8      	str	r0, [r7, #8]
 800588a:	e019      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a24      	ldr	r2, [pc, #144]	@ (8005920 <LL_USART_Init+0x148>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d104      	bne.n	800589e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005894:	481c      	ldr	r0, [pc, #112]	@ (8005908 <LL_USART_Init+0x130>)
 8005896:	f7ff fd6b 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 800589a:	60b8      	str	r0, [r7, #8]
 800589c:	e010      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a20      	ldr	r2, [pc, #128]	@ (8005924 <LL_USART_Init+0x14c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d104      	bne.n	80058b0 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80058a6:	481a      	ldr	r0, [pc, #104]	@ (8005910 <LL_USART_Init+0x138>)
 80058a8:	f7ff fd62 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 80058ac:	60b8      	str	r0, [r7, #8]
 80058ae:	e007      	b.n	80058c0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <LL_USART_Init+0x150>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80058b8:	4815      	ldr	r0, [pc, #84]	@ (8005910 <LL_USART_Init+0x138>)
 80058ba:	f7ff fd59 	bl	8005370 <LL_RCC_GetUSARTClockFreq>
 80058be:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d011      	beq.n	80058ea <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	460b      	mov	r3, r1
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff27 	bl	8005738 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fee6 	bl	80056c2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	efff69f3 	.word	0xefff69f3
 8005904:	40011000 	.word	0x40011000
 8005908:	07000308 	.word	0x07000308
 800590c:	40004400 	.word	0x40004400
 8005910:	07000008 	.word	0x07000008
 8005914:	40004800 	.word	0x40004800
 8005918:	40004c00 	.word	0x40004c00
 800591c:	40005000 	.word	0x40005000
 8005920:	40011400 	.word	0x40011400
 8005924:	40007800 	.word	0x40007800
 8005928:	40007c00 	.word	0x40007c00

0800592c <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005934:	b672      	cpsid	i
}
 8005936:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005950:	b662      	cpsie	i
}
 8005952:	bf00      	nop
	__enable_irq();
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800596e:	b29b      	uxth	r3, r3
 8005970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	4603      	mov	r3, r0
 80059b6:	6039      	str	r1, [r7, #0]
 80059b8:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 80059c2:	b292      	uxth	r2, r2
 80059c4:	4413      	add	r3, r2
 80059c6:	79fa      	ldrb	r2, [r7, #7]
 80059c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059ca:	b672      	cpsid	i
}
 80059cc:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3301      	adds	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	b29a      	uxth	r2, r3
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80059f6:	b662      	cpsie	i
}
 80059f8:	bf00      	nop
	__enable_irq();
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8005a16:	b292      	uxth	r2, r2
 8005a18:	4413      	add	r3, r2
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1e:	b672      	cpsid	i
}
 8005a20:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005a4a:	b662      	cpsie	i
}
 8005a4c:	bf00      	nop
	__enable_irq();
	return data;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <LL_USART_IsActiveFlag_FE>:
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d101      	bne.n	8005a74 <LL_USART_IsActiveFlag_FE+0x18>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <LL_USART_IsActiveFlag_FE+0x1a>
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_USART_IsActiveFlag_NE>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d101      	bne.n	8005a9a <LL_USART_IsActiveFlag_NE+0x18>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <LL_USART_IsActiveFlag_NE+0x1a>
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_USART_IsActiveFlag_ORE>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d101      	bne.n	8005ac0 <LL_USART_IsActiveFlag_ORE+0x18>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d101      	bne.n	8005ae6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b80      	cmp	r3, #128	@ 0x80
 8005b06:	d101      	bne.n	8005b0c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	621a      	str	r2, [r3, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	621a      	str	r2, [r3, #32]
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	@ 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f043 0320 	orr.w	r3, r3, #32
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	61ba      	str	r2, [r7, #24]
 8005b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e9      	bne.n	8005b70 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b089      	sub	sp, #36	@ 0x24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	61ba      	str	r2, [r7, #24]
 8005bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e9      	bne.n	8005bb2 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	3724      	adds	r7, #36	@ 0x24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	61ba      	str	r2, [r7, #24]
 8005c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e9      	bne.n	8005bf4 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	3724      	adds	r7, #36	@ 0x24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d101      	bne.n	8005c46 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	b2db      	uxtb	r3, r3
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USART2_IRQ>:
usart_meta_t *p_USART2_meta = &USART2_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART2_IRQ(void) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8005c92:	4834      	ldr	r0, [pc, #208]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005c94:	f7ff ff2e 	bl	8005af4 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01e      	beq.n	8005cdc <USART2_IRQ+0x50>
        if (!rbuffer_empty(&p_USART2_meta->rb_tx)) {
 8005c9e:	4b32      	ldr	r3, [pc, #200]	@ (8005d68 <USART2_IRQ+0xdc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fe6e 	bl	8005988 <rbuffer_empty>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f083 0301 	eor.w	r3, r3, #1
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <USART2_IRQ+0x4a>
            data = rbuffer_remove(&p_USART2_meta->rb_tx);
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d68 <USART2_IRQ+0xdc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fea0 	bl	8005a06 <rbuffer_remove>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(USART2, (uint8_t)data);
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4825      	ldr	r0, [pc, #148]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005cd0:	f7ff ffcd 	bl	8005c6e <LL_USART_TransmitData8>
 8005cd4:	e002      	b.n	8005cdc <USART2_IRQ+0x50>
        } else {
            LL_USART_DisableIT_TXE(USART2);
 8005cd6:	4823      	ldr	r0, [pc, #140]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005cd8:	f7ff ff88 	bl	8005bec <LL_USART_DisableIT_TXE_TXFNF>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(USART2) != RESET) && (LL_USART_IsEnabledIT_RXNE(USART2) != RESET)) {
 8005cdc:	4821      	ldr	r0, [pc, #132]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005cde:	f7ff fef6 	bl	8005ace <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d03a      	beq.n	8005d5e <USART2_IRQ+0xd2>
 8005ce8:	481e      	ldr	r0, [pc, #120]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005cea:	f7ff ffa0 	bl	8005c2e <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d034      	beq.n	8005d5e <USART2_IRQ+0xd2>
        unsigned char data = LL_USART_ReceiveData8(USART2);
 8005cf4:	481b      	ldr	r0, [pc, #108]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005cf6:	f7ff ffad 	bl	8005c54 <LL_USART_ReceiveData8>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71bb      	strb	r3, [r7, #6]

        if ((LL_USART_IsActiveFlag_ORE(USART2) != RESET) ||
 8005cfe:	4819      	ldr	r0, [pc, #100]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d00:	f7ff fed2 	bl	8005aa8 <LL_USART_IsActiveFlag_ORE>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <USART2_IRQ+0x96>
            (LL_USART_IsActiveFlag_FE(USART2) != RESET) ||
 8005d0a:	4816      	ldr	r0, [pc, #88]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d0c:	f7ff fea6 	bl	8005a5c <LL_USART_IsActiveFlag_FE>
 8005d10:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(USART2) != RESET) ||
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d105      	bne.n	8005d22 <USART2_IRQ+0x96>
            (LL_USART_IsActiveFlag_NE(USART2) != RESET)) {
 8005d16:	4813      	ldr	r0, [pc, #76]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d18:	f7ff feb3 	bl	8005a82 <LL_USART_IsActiveFlag_NE>
 8005d1c:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(USART2) != RESET) ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <USART2_IRQ+0xaa>
            LL_USART_ClearFlag_ORE(USART2);
 8005d22:	4810      	ldr	r0, [pc, #64]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d24:	f7ff ff13 	bl	8005b4e <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(USART2);
 8005d28:	480e      	ldr	r0, [pc, #56]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d2a:	f7ff fef6 	bl	8005b1a <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(USART2);
 8005d2e:	480d      	ldr	r0, [pc, #52]	@ (8005d64 <USART2_IRQ+0xd8>)
 8005d30:	f7ff ff00 	bl	8005b34 <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_USART2_meta->rb_rx)) {
                rbuffer_insert(data, &p_USART2_meta->rb_rx);
            }
        }
        return;
 8005d34:	e012      	b.n	8005d5c <USART2_IRQ+0xd0>
            if (!rbuffer_full(&p_USART2_meta->rb_rx)) {
 8005d36:	4b0c      	ldr	r3, [pc, #48]	@ (8005d68 <USART2_IRQ+0xdc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fe10 	bl	8005960 <rbuffer_full>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f083 0301 	eor.w	r3, r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <USART2_IRQ+0xd0>
                rbuffer_insert(data, &p_USART2_meta->rb_rx);
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <USART2_IRQ+0xdc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	79bb      	ldrb	r3, [r7, #6]
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fe29 	bl	80059ae <rbuffer_insert>
        return;
 8005d5c:	bf00      	nop
    }
}
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40004400 	.word	0x40004400
 8005d68:	24000050 	.word	0x24000050

08005d6c <USART2_init>:

void USART2_init(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
    rbuffer_init(&p_USART2_meta->rb_tx); // Init Tx buffer
 8005d70:	4b08      	ldr	r3, [pc, #32]	@ (8005d94 <USART2_init+0x28>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fdd7 	bl	800592c <rbuffer_init>
    rbuffer_init(&p_USART2_meta->rb_rx); // Init Rx buffer
 8005d7e:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <USART2_init+0x28>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fdd2 	bl	800592c <rbuffer_init>
    LL_USART_EnableIT_RXNE(USART2);
 8005d88:	4803      	ldr	r0, [pc, #12]	@ (8005d98 <USART2_init+0x2c>)
 8005d8a:	f7ff feed 	bl	8005b68 <LL_USART_EnableIT_RXNE_RXFNE>
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	24000050 	.word	0x24000050
 8005d98:	40004400 	.word	0x40004400

08005d9c <USART2_send_char>:

void USART2_send_char(char c) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_USART2_meta->rb_tx));
 8005da6:	bf00      	nop
 8005da8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <USART2_send_char+0x40>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fdd5 	bl	8005960 <rbuffer_full>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f5      	bne.n	8005da8 <USART2_send_char+0xc>
    rbuffer_insert(c, &p_USART2_meta->rb_tx);
 8005dbc:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <USART2_send_char+0x40>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fdf0 	bl	80059ae <rbuffer_insert>
    LL_USART_EnableIT_TXE(USART2);
 8005dce:	4804      	ldr	r0, [pc, #16]	@ (8005de0 <USART2_send_char+0x44>)
 8005dd0:	f7ff feeb 	bl	8005baa <LL_USART_EnableIT_TXE_TXFNF>
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	24000050 	.word	0x24000050
 8005de0:	40004400 	.word	0x40004400

08005de4 <USART2_send_array>:
    while (*str) {
        USART2_send_char(*str++);
    }
}

void USART2_send_array(const char *str, uint8_t len) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e009      	b.n	8005e0a <USART2_send_array+0x26>
        USART2_send_char(*str++);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ffcc 	bl	8005d9c <USART2_send_char>
    for (udx = 0; udx < len; udx++) {
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	3301      	adds	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3f1      	bcc.n	8005df6 <USART2_send_array+0x12>
    }
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LRSTR, Periphs);
 8005e24:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <LL_APB1_GRP1_ForceReset+0x24>)
 8005e26:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005e2a:	4905      	ldr	r1, [pc, #20]	@ (8005e40 <LL_APB1_GRP1_ForceReset+0x24>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	58024400 	.word	0x58024400

08005e44 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1LRSTR, Periphs);
 8005e4c:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <LL_APB1_GRP1_ReleaseReset+0x28>)
 8005e4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	4905      	ldr	r1, [pc, #20]	@ (8005e6c <LL_APB1_GRP1_ReleaseReset+0x28>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400

08005e70 <BL_UART_Fetch_Host_Command>:
bool receiving_frame = false;
uint16_t frame_timeout = 0;

/************************************ Software Interfaces Implementations ************************************/
void BL_UART_Fetch_Host_Command(void*)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    uint8_t data;
    if (receiving_frame)
 8005e78:	4b60      	ldr	r3, [pc, #384]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80ad 	beq.w	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
    {
        if (frame_timeout++ > 500)
 8005e82:	4b5f      	ldr	r3, [pc, #380]	@ (8006000 <BL_UART_Fetch_Host_Command+0x190>)
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	b291      	uxth	r1, r2
 8005e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8006000 <BL_UART_Fetch_Host_Command+0x190>)
 8005e8c:	8011      	strh	r1, [r2, #0]
 8005e8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e92:	f240 80a3 	bls.w	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
        {
            receiving_frame = false;
 8005e96:	4b59      	ldr	r3, [pc, #356]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
            frame_length = 0;
 8005e9c:	4b59      	ldr	r3, [pc, #356]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
            frame_index = 0;
 8005ea2:	4b59      	ldr	r3, [pc, #356]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
            frame_timeout = 0;
 8005ea8:	4b55      	ldr	r3, [pc, #340]	@ (8006000 <BL_UART_Fetch_Host_Command+0x190>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]
        }
    }
    while (!rbuffer_empty(&p_USART2_meta->rb_rx))
 8005eae:	e095      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
    {
        data = rbuffer_remove(&p_USART2_meta->rb_rx);
 8005eb0:	4b56      	ldr	r3, [pc, #344]	@ (800600c <BL_UART_Fetch_Host_Command+0x19c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fda6 	bl	8005a06 <rbuffer_remove>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
        if (!receiving_frame)
 8005ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f083 0301 	eor.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01f      	beq.n	8005f0c <BL_UART_Fetch_Host_Command+0x9c>
        {
            // Nhận byte đầu tiên (FRAME LENGTH)
            frame_timeout = 0;
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8006000 <BL_UART_Fetch_Host_Command+0x190>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	801a      	strh	r2, [r3, #0]
            frame_length = data;
 8005ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	7013      	strb	r3, [r2, #0]
            if (frame_length > 0 && frame_length < 255)
 8005ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00e      	beq.n	8005efe <BL_UART_Fetch_Host_Command+0x8e>
 8005ee0:	4b48      	ldr	r3, [pc, #288]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2bff      	cmp	r3, #255	@ 0xff
 8005ee6:	d00a      	beq.n	8005efe <BL_UART_Fetch_Host_Command+0x8e>
            {
                BL_Host_Buffer[0] = frame_length;
 8005ee8:	4b46      	ldr	r3, [pc, #280]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	4b48      	ldr	r3, [pc, #288]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005eee:	701a      	strb	r2, [r3, #0]
                frame_index = 1;
 8005ef0:	4b45      	ldr	r3, [pc, #276]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
                receiving_frame = true;
 8005ef6:	4b41      	ldr	r3, [pc, #260]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e06e      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
            }
            else
            {
                // Nếu frame_length không hợp lệ, reset trạng thái
                frame_index = 0;
 8005efe:	4b42      	ldr	r3, [pc, #264]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
                receiving_frame = false;
 8005f04:	4b3d      	ldr	r3, [pc, #244]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e067      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
            }
        }
        else
        {
            BL_Host_Buffer[frame_index++] = data;
 8005f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	b2d1      	uxtb	r1, r2
 8005f14:	4a3c      	ldr	r2, [pc, #240]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005f16:	7011      	strb	r1, [r2, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	5453      	strb	r3, [r2, r1]

            if (frame_index >= frame_length + 1)
 8005f20:	4b38      	ldr	r3, [pc, #224]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	4b38      	ldr	r3, [pc, #224]	@ (8006008 <BL_UART_Fetch_Host_Command+0x198>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d257      	bcs.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
            {
                receiving_frame = false;
 8005f2c:	4b33      	ldr	r3, [pc, #204]	@ (8005ffc <BL_UART_Fetch_Host_Command+0x18c>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
                frame_length = 0;
 8005f32:	4b34      	ldr	r3, [pc, #208]	@ (8006004 <BL_UART_Fetch_Host_Command+0x194>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
                uint16_t Host_CMD_Packet_Len = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	81bb      	strh	r3, [r7, #12]
                uint32_t Host_CRC32 = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60bb      	str	r3, [r7, #8]
                /* Extract the CRC32 and packet length sent by the HOST */
                Host_CMD_Packet_Len = BL_Host_Buffer[0] + 1;
 8005f40:	4b33      	ldr	r3, [pc, #204]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	81bb      	strh	r3, [r7, #12]
                Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8005f48:	89bb      	ldrh	r3, [r7, #12]
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	4a30      	ldr	r2, [pc, #192]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005f4e:	4413      	add	r3, r2
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60bb      	str	r3, [r7, #8]
                if (Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0], Host_CMD_Packet_Len - 4, Host_CRC32) != FOTA_SUCCESS)
 8005f54:	89bb      	ldrh	r3, [r7, #12]
 8005f56:	3b04      	subs	r3, #4
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	482c      	ldr	r0, [pc, #176]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005f5e:	f000 fba9 	bl	80066b4 <Bootloader_CRC_Verify>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <BL_UART_Fetch_Host_Command+0xfe>
                {
                    Bootloader_Send_NACK();
 8005f68:	f000 fbdc 	bl	8006724 <Bootloader_Send_NACK>
                    return;
 8005f6c:	e042      	b.n	8005ff4 <BL_UART_Fetch_Host_Command+0x184>
                }
                boot_timeout = BLD_TIMEOUT;
 8005f6e:	4b29      	ldr	r3, [pc, #164]	@ (8006014 <BL_UART_Fetch_Host_Command+0x1a4>)
 8005f70:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005f74:	601a      	str	r2, [r3, #0]
                switch (BL_Host_Buffer[1])
 8005f76:	4b26      	ldr	r3, [pc, #152]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	3b10      	subs	r3, #16
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d82c      	bhi.n	8005fda <BL_UART_Fetch_Host_Command+0x16a>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <BL_UART_Fetch_Host_Command+0x118>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fdb 	.word	0x08005fdb
 8005f90:	08005fb1 	.word	0x08005fb1
 8005f94:	08005fb7 	.word	0x08005fb7
 8005f98:	08005fbf 	.word	0x08005fbf
 8005f9c:	08005fd7 	.word	0x08005fd7
 8005fa0:	08005fcf 	.word	0x08005fcf
 8005fa4:	08005fc7 	.word	0x08005fc7
                {
					case CBL_GET_CID_CMD:
						Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8005fa8:	4819      	ldr	r0, [pc, #100]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005faa:	f000 f85f 	bl	800606c <Bootloader_Get_Chip_Identification_Number>
						break;
 8005fae:	e015      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_GO_TO_ADDR_CMD:
						Bootloader_Jump_To_User_App();
 8005fb0:	f000 f9a2 	bl	80062f8 <Bootloader_Jump_To_User_App>
						break;
 8005fb4:	e012      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_FLASH_ERASE_CMD:
						Bootloader_Erase_Flash(BL_Host_Buffer);
 8005fb6:	4816      	ldr	r0, [pc, #88]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005fb8:	f000 fa11 	bl	80063de <Bootloader_Erase_Flash>
						break;
 8005fbc:	e00e      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_MEM_WRITE_CMD:
						Bootloader_Memory_Write(BL_Host_Buffer);
 8005fbe:	4814      	ldr	r0, [pc, #80]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005fc0:	f000 facc 	bl	800655c <Bootloader_Memory_Write>
						break;
 8005fc4:	e00a      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_SET_VERSION:
						Set_Firmware_Version(BL_Host_Buffer);
 8005fc6:	4812      	ldr	r0, [pc, #72]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005fc8:	f000 fc06 	bl	80067d8 <Set_Firmware_Version>
						break;
 8005fcc:	e006      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_GET_VERSION:
						Get_Firmware_Version(BL_Host_Buffer);
 8005fce:	4810      	ldr	r0, [pc, #64]	@ (8006010 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005fd0:	f000 fc48 	bl	8006864 <Get_Firmware_Version>
						break;
 8005fd4:	e002      	b.n	8005fdc <BL_UART_Fetch_Host_Command+0x16c>
					case CBL_CHECK_CONNECTION:
						Bootloader_check_connection();
 8005fd6:	f000 f81f 	bl	8006018 <Bootloader_check_connection>
					default:
						break;
 8005fda:	bf00      	nop
    while (!rbuffer_empty(&p_USART2_meta->rb_rx))
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <BL_UART_Fetch_Host_Command+0x19c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fcd1 	bl	8005988 <rbuffer_empty>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f083 0301 	eor.w	r3, r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f47f af5e 	bne.w	8005eb0 <BL_UART_Fetch_Host_Command+0x40>
                }
            }
        }
    }
}
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	24000378 	.word	0x24000378
 8006000:	2400037a 	.word	0x2400037a
 8006004:	24000377 	.word	0x24000377
 8006008:	24000376 	.word	0x24000376
 800600c:	24000050 	.word	0x24000050
 8006010:	240002e0 	.word	0x240002e0
 8006014:	240002dc 	.word	0x240002dc

08006018 <Bootloader_check_connection>:

/************************************    Static Functions Implementations  ************************************/

static void Bootloader_check_connection(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	uint8_t status[3] = {FOTA_SUCCESS, 'O', 'K'};
 800601e:	4a08      	ldr	r2, [pc, #32]	@ (8006040 <Bootloader_check_connection+0x28>)
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	4611      	mov	r1, r2
 8006026:	8019      	strh	r1, [r3, #0]
 8006028:	3302      	adds	r3, #2
 800602a:	0c12      	lsrs	r2, r2, #16
 800602c:	701a      	strb	r2, [r3, #0]
	Bootloader_Send_Data_To_Host((uint8_t*)status, 3);
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	2103      	movs	r1, #3
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fb84 	bl	8006740 <Bootloader_Send_Data_To_Host>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	08007028 	.word	0x08007028

08006044 <Bootloader_Check_Timeout>:
//	}
//
//}

void Bootloader_Check_Timeout(void*)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	if(!boot_timeout)
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <Bootloader_Check_Timeout+0x24>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <Bootloader_Check_Timeout+0x1c>
	{
		boot_timeout = BLD_TIMEOUT;
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <Bootloader_Check_Timeout+0x24>)
 8006056:	f247 5230 	movw	r2, #30000	@ 0x7530
 800605a:	601a      	str	r2, [r3, #0]
		Firmware_Check_Available();
 800605c:	f000 fd22 	bl	8006aa4 <Firmware_Check_Available>
	}
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	240002dc 	.word	0x240002dc

0800606c <Bootloader_Get_Chip_Identification_Number>:
/**
 * Lấy số nhận dạng chip và gửi về host
 * @param Host_Buffer: Buffer từ host (không dùng trong hàm này)
 */
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    uint16_t MCU_Identification_Number = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	81fb      	strh	r3, [r7, #14]
    MCU_Identification_Number = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 8006078:	4b08      	ldr	r3, [pc, #32]	@ (800609c <Bootloader_Get_Chip_Identification_Number+0x30>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	b29b      	uxth	r3, r3
 8006084:	81fb      	strh	r3, [r7, #14]
    Bootloader_Send_Data_To_Host((uint8_t*)&MCU_Identification_Number, 2);
 8006086:	f107 030e 	add.w	r3, r7, #14
 800608a:	2102      	movs	r1, #2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fb57 	bl	8006740 <Bootloader_Send_Data_To_Host>
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	5c001000 	.word	0x5c001000

080060a0 <Jump_To_App>:
 * Nhảy đến ứng dụng người dùng
 * @param app_address: Địa chỉ bắt đầu của ứng dụng
 * @return true nếu nhảy thành công, false nếu thất bại
 */
uint8_t Jump_To_App(uint32_t app_address)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	@ 0x38
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
    if (*((volatile uint32_t*)app_address) != 0xFFFFFFFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	f000 8114 	beq.w	80062dc <Jump_To_App+0x23c>
    {
        uint8_t status = FOTA_SUCCESS;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]

        Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 80060b8:	f107 030f 	add.w	r3, r7, #15
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb3e 	bl	8006740 <Bootloader_Send_Data_To_Host>
        HAL_Delay(1);
 80060c4:	2001      	movs	r0, #1
 80060c6:	f7fa feb3 	bl	8000e30 <HAL_Delay>

        while (!rbuffer_empty(&p_USART2_meta->rb_tx));
 80060ca:	bf00      	nop
 80060cc:	4b86      	ldr	r3, [pc, #536]	@ (80062e8 <Jump_To_App+0x248>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fc57 	bl	8005988 <rbuffer_empty>
 80060da:	4603      	mov	r3, r0
 80060dc:	f083 0301 	eor.w	r3, r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f2      	bne.n	80060cc <Jump_To_App+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 80060e6:	b672      	cpsid	i
}
 80060e8:	bf00      	nop
        __disable_irq();

        for (uint8_t i = 0; i < 8; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80060f0:	e014      	b.n	800611c <Jump_To_App+0x7c>
        {
            NVIC->ICER[i] = 0xFFFFFFFF;
 80060f2:	4a7e      	ldr	r2, [pc, #504]	@ (80062ec <Jump_To_App+0x24c>)
 80060f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060f8:	3320      	adds	r3, #32
 80060fa:	f04f 31ff 	mov.w	r1, #4294967295
 80060fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 8006102:	4a7a      	ldr	r2, [pc, #488]	@ (80062ec <Jump_To_App+0x24c>)
 8006104:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006108:	3360      	adds	r3, #96	@ 0x60
 800610a:	f04f 31ff 	mov.w	r1, #4294967295
 800610e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i < 8; i++)
 8006112:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006116:	3301      	adds	r3, #1
 8006118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800611c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006120:	2b07      	cmp	r3, #7
 8006122:	d9e6      	bls.n	80060f2 <Jump_To_App+0x52>
        }

        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
 8006124:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006128:	f7ff fe78 	bl	8005e1c <LL_APB1_GRP1_ForceReset>
        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
 800612c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006130:	f7ff fe88 	bl	8005e44 <LL_APB1_GRP1_ReleaseReset>

        if (SCB->CCR & SCB_CCR_DC_Msk)
 8006134:	4b6e      	ldr	r3, [pc, #440]	@ (80062f0 <Jump_To_App+0x250>)
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d06a      	beq.n	8006216 <Jump_To_App+0x176>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006140:	4b6b      	ldr	r3, [pc, #428]	@ (80062f0 <Jump_To_App+0x250>)
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006148:	f3bf 8f4f 	dsb	sy
}
 800614c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800614e:	4b68      	ldr	r3, [pc, #416]	@ (80062f0 <Jump_To_App+0x250>)
 8006150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006154:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	0b5b      	lsrs	r3, r3, #13
 800615a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800615e:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006168:	617b      	str	r3, [r7, #20]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8006172:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006178:	495d      	ldr	r1, [pc, #372]	@ (80062f0 <Jump_To_App+0x250>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1e5a      	subs	r2, r3, #1
 8006184:	617a      	str	r2, [r7, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1ef      	bne.n	800616a <Jump_To_App+0xca>
    } while(sets-- != 0U);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	61ba      	str	r2, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <Jump_To_App+0xc0>
  __ASM volatile ("dsb 0xF":::"memory");
 8006194:	f3bf 8f4f 	dsb	sy
}
 8006198:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800619a:	f3bf 8f6f 	isb	sy
}
 800619e:	bf00      	nop
}
 80061a0:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80061a2:	4b53      	ldr	r3, [pc, #332]	@ (80062f0 <Jump_To_App+0x250>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80061aa:	f3bf 8f4f 	dsb	sy
}
 80061ae:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80061b0:	4b4f      	ldr	r3, [pc, #316]	@ (80062f0 <Jump_To_App+0x250>)
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	4a4e      	ldr	r2, [pc, #312]	@ (80062f0 <Jump_To_App+0x250>)
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80061bc:	f3bf 8f4f 	dsb	sy
}
 80061c0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80061c2:	4b4b      	ldr	r3, [pc, #300]	@ (80062f0 <Jump_To_App+0x250>)
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	0b5b      	lsrs	r3, r3, #13
 80061ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061dc:	623b      	str	r3, [r7, #32]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80061e6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80061ec:	4940      	ldr	r1, [pc, #256]	@ (80062f0 <Jump_To_App+0x250>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	623a      	str	r2, [r7, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1ef      	bne.n	80061de <Jump_To_App+0x13e>
    } while(sets-- != 0U);
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	627a      	str	r2, [r7, #36]	@ 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e5      	bne.n	80061d4 <Jump_To_App+0x134>
  __ASM volatile ("dsb 0xF":::"memory");
 8006208:	f3bf 8f4f 	dsb	sy
}
 800620c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800620e:	f3bf 8f6f 	isb	sy
}
 8006212:	bf00      	nop
}
 8006214:	bf00      	nop
        {
            SCB_CleanInvalidateDCache();
            SCB_DisableDCache();
        }
        if (SCB->CCR & SCB_CCR_IC_Msk)
 8006216:	4b36      	ldr	r3, [pc, #216]	@ (80062f0 <Jump_To_App+0x250>)
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d027      	beq.n	8006272 <Jump_To_App+0x1d2>
  __ASM volatile ("dsb 0xF":::"memory");
 8006222:	f3bf 8f4f 	dsb	sy
}
 8006226:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006228:	f3bf 8f6f 	isb	sy
}
 800622c:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800622e:	4b30      	ldr	r3, [pc, #192]	@ (80062f0 <Jump_To_App+0x250>)
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006236:	f3bf 8f4f 	dsb	sy
}
 800623a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800623c:	f3bf 8f6f 	isb	sy
}
 8006240:	bf00      	nop
}
 8006242:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8006244:	f3bf 8f4f 	dsb	sy
}
 8006248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800624a:	f3bf 8f6f 	isb	sy
}
 800624e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8006250:	4b27      	ldr	r3, [pc, #156]	@ (80062f0 <Jump_To_App+0x250>)
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <Jump_To_App+0x250>)
 8006256:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800625a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800625c:	4b24      	ldr	r3, [pc, #144]	@ (80062f0 <Jump_To_App+0x250>)
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006264:	f3bf 8f4f 	dsb	sy
}
 8006268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800626a:	f3bf 8f6f 	isb	sy
}
 800626e:	bf00      	nop
}
 8006270:	bf00      	nop
        {
            SCB_InvalidateICache();
            SCB_DisableICache();
        }

        HAL_RCC_DeInit();
 8006272:	f7fb fe07 	bl	8001e84 <HAL_RCC_DeInit>
        HAL_DeInit();
 8006276:	f7fa fd1f 	bl	8000cb8 <HAL_DeInit>

        SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk | SCB_ICSR_PENDSTCLR_Msk;
 800627a:	4b1d      	ldr	r3, [pc, #116]	@ (80062f0 <Jump_To_App+0x250>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <Jump_To_App+0x250>)
 8006280:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8006284:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8006286:	f3bf 8f4f 	dsb	sy
}
 800628a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800628c:	f3bf 8f6f 	isb	sy
}
 8006290:	bf00      	nop
        __DSB();
        __ISB();

        __set_MSP(*((volatile uint32_t*)app_address));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f383 8808 	msr	MSP, r3
}
 800629e:	bf00      	nop
        SCB->VTOR = app_address;
 80062a0:	4a13      	ldr	r2, [pc, #76]	@ (80062f0 <Jump_To_App+0x250>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6093      	str	r3, [r2, #8]
        SysTick->CTRL = 0;
 80062a6:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <Jump_To_App+0x254>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
        SysTick->LOAD = 0;
 80062ac:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <Jump_To_App+0x254>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
 80062b2:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <Jump_To_App+0x254>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80062b8:	f3bf 8f4f 	dsb	sy
}
 80062bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062be:	f3bf 8f6f 	isb	sy
}
 80062c2:	bf00      	nop

        __DSB();
        __ISB();

        uint32_t MainAppAddr = *((volatile uint32_t*)(app_address + 4));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	633b      	str	r3, [r7, #48]	@ 0x30
        void (*reset_handler)(void) = (void(*)(void))MainAppAddr;
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsie i" : : : "memory");
 80062d0:	b662      	cpsie	i
}
 80062d2:	bf00      	nop

        __enable_irq();
        reset_handler();
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	4798      	blx	r3

        return FOTA_SUCCESS;
 80062d8:	2300      	movs	r3, #0
 80062da:	e000      	b.n	80062de <Jump_To_App+0x23e>
    }
    return FOTA_FAILED;
 80062dc:	2301      	movs	r3, #1
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3738      	adds	r7, #56	@ 0x38
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	24000050 	.word	0x24000050
 80062ec:	e000e100 	.word	0xe000e100
 80062f0:	e000ed00 	.word	0xe000ed00
 80062f4:	e000e010 	.word	0xe000e010

080062f8 <Bootloader_Jump_To_User_App>:
/**
 * Xử lý lệnh nhảy đến ứng dụng từ host
 * @param Host_Buffer: Buffer chứa địa chỉ ứng dụng
 */
static void Bootloader_Jump_To_User_App(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	uint8_t status = Firmware_Check_Available();
 80062fe:	f000 fbd1 	bl	8006aa4 <Firmware_Check_Available>
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
	if(status != FOTA_SUCCESS)
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <Bootloader_Jump_To_User_App+0x1e>
	{
		Bootloader_Send_Data_To_Host(&status, 1);
 800630c:	1dfb      	adds	r3, r7, #7
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fa15 	bl	8006740 <Bootloader_Send_Data_To_Host>
	}
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <Perform_Flash_Erase>:
 * @param Sector_Index: Số sector bắt đầu (0-15) hoặc CBL_FLASH_MASS_ERASE
 * @param Number_Of_Sectors: Số sector cần xóa
 * @return SUCCESSFUL_ERASE (0), UNSUCCESSFUL_ERASE (1), hoặc INVALID_Sector_Index (2)
 */
static uint8_t Perform_Flash_Erase(uint8_t Sector_Index, uint8_t Number_Of_Sectors, uint32_t bank)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b088      	sub	sp, #32
 8006322:	af00      	add	r7, sp, #0
 8006324:	4603      	mov	r3, r0
 8006326:	603a      	str	r2, [r7, #0]
 8006328:	71fb      	strb	r3, [r7, #7]
 800632a:	460b      	mov	r3, r1
 800632c:	71bb      	strb	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800632e:	f107 030c 	add.w	r3, r7, #12
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]

    if (Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Index)	return FOTA_FAILED;
 8006342:	79ba      	ldrb	r2, [r7, #6]
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	f1c3 0308 	rsb	r3, r3, #8
 800634a:	429a      	cmp	r2, r3
 800634c:	dd01      	ble.n	8006352 <Perform_Flash_Erase+0x34>
 800634e:	2301      	movs	r3, #1
 8006350:	e041      	b.n	80063d6 <Perform_Flash_Erase+0xb8>
    if ((Sector_Index != CBL_FLASH_MASS_ERASE) && (Sector_Index > 7))	return FOTA_FAILED;
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	2bff      	cmp	r3, #255	@ 0xff
 8006356:	d004      	beq.n	8006362 <Perform_Flash_Erase+0x44>
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b07      	cmp	r3, #7
 800635c:	d901      	bls.n	8006362 <Perform_Flash_Erase+0x44>
 800635e:	2301      	movs	r3, #1
 8006360:	e039      	b.n	80063d6 <Perform_Flash_Erase+0xb8>

    HAL_FLASH_Unlock();
 8006362:	f7fb f875 	bl	8001450 <HAL_FLASH_Unlock>

    if (Sector_Index == CBL_FLASH_MASS_ERASE)
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	2bff      	cmp	r3, #255	@ 0xff
 800636a:	d118      	bne.n	800639e <Perform_Flash_Erase+0x80>
    {
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800636c:	2301      	movs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
        EraseInitStruct.Banks = FLASH_BANK_BOTH; // Xóa cả hai bank
 8006370:	2303      	movs	r3, #3
 8006372:	613b      	str	r3, [r7, #16]
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8006374:	2320      	movs	r3, #32
 8006376:	61fb      	str	r3, [r7, #28]
        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8006378:	f107 0208 	add.w	r2, r7, #8
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f7fb f962 	bl	800164c <HAL_FLASHEx_Erase>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <Perform_Flash_Erase+0x78>
        {
            HAL_FLASH_Lock();
 800638e:	f7fb f899 	bl	80014c4 <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8006392:	2301      	movs	r3, #1
 8006394:	e01f      	b.n	80063d6 <Perform_Flash_Erase+0xb8>
        }
        HAL_FLASH_Lock();
 8006396:	f7fb f895 	bl	80014c4 <HAL_FLASH_Lock>
        return FOTA_SUCCESS;
 800639a:	2300      	movs	r3, #0
 800639c:	e01b      	b.n	80063d6 <Perform_Flash_Erase+0xb8>
    }

	EraseInitStruct.Banks = bank;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = Sector_Index;
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	617b      	str	r3, [r7, #20]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80063aa:	2320      	movs	r3, #32
 80063ac:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = Number_Of_Sectors;
 80063ae:	79bb      	ldrb	r3, [r7, #6]
 80063b0:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80063b2:	f107 0208 	add.w	r2, r7, #8
 80063b6:	f107 030c 	add.w	r3, r7, #12
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fb f945 	bl	800164c <HAL_FLASHEx_Erase>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <Perform_Flash_Erase+0xb2>
    {
        HAL_FLASH_Lock();
 80063c8:	f7fb f87c 	bl	80014c4 <HAL_FLASH_Lock>
        return FOTA_FAILED;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e002      	b.n	80063d6 <Perform_Flash_Erase+0xb8>
    }

    HAL_FLASH_Lock();
 80063d0:	f7fb f878 	bl	80014c4 <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <Bootloader_Erase_Flash>:
/**
 * Xóa firmware trong Flash dựa trên lựa chọn từ host
 * @param Host_Buffer: Dữ liệu từ host, Host_Buffer[2] chọn firmware (1: Bank 1, 2: Bank 2)
 */
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b088      	sub	sp, #32
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
    uint8_t Erase_Status;
    s_firmware_info fw_info;
	fw_info.address = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
	fw_info.length = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
	fw_info.crc = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
	fw_info.version_major = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	763b      	strb	r3, [r7, #24]
	fw_info.version_minor = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	767b      	strb	r3, [r7, #25]
	fw_info.version_patch = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	76bb      	strb	r3, [r7, #26]

    switch (Host_Buffer[2])
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3302      	adds	r3, #2
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d002      	beq.n	800640e <Bootloader_Erase_Flash+0x30>
 8006408:	2b02      	cmp	r3, #2
 800640a:	d01f      	beq.n	800644c <Bootloader_Erase_Flash+0x6e>
 800640c:	e03d      	b.n	800648a <Bootloader_Erase_Flash+0xac>
    {
        case 1: // Xóa Firmware 1 (Với H7 2 core mỗi core có 2 fw dự phòng)
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_CORE1_SECTOR, FIRMWARE1_CORE1_NUM_SECTORS, FLASH_BANK_1);
 800640e:	2201      	movs	r2, #1
 8006410:	2103      	movs	r1, #3
 8006412:	2002      	movs	r0, #2
 8006414:	f7ff ff83 	bl	800631e <Perform_Flash_Erase>
 8006418:	4603      	mov	r3, r0
 800641a:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Perform_Flash_Erase(FIRMWARE2_CORE1_SECTOR, FIRMWARE2_CORE1_NUM_SECTORS, FLASH_BANK_1);
 800641c:	2201      	movs	r2, #1
 800641e:	2103      	movs	r1, #3
 8006420:	2005      	movs	r0, #5
 8006422:	f7ff ff7c 	bl	800631e <Perform_Flash_Erase>
 8006426:	4603      	mov	r3, r0
 8006428:	461a      	mov	r2, r3
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	4413      	add	r3, r2
 800642e:	b2db      	uxtb	r3, r3
 8006430:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Flash_Write_Metadata(&fw_info, 1);
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	2101      	movs	r1, #1
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fa7b 	bl	8006934 <Flash_Write_Metadata>
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	7ffb      	ldrb	r3, [r7, #31]
 8006444:	4413      	add	r3, r2
 8006446:	b2db      	uxtb	r3, r3
 8006448:	77fb      	strb	r3, [r7, #31]
		break;
 800644a:	e021      	b.n	8006490 <Bootloader_Erase_Flash+0xb2>

        case 2: // Xóa Firmware 2 (Với H7 2 core mỗi core có 2 fw dự phòng)
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_CORE2_SECTOR, FIRMWARE1_CORE2_NUM_SECTORS, FLASH_BANK_2);
 800644c:	2202      	movs	r2, #2
 800644e:	2103      	movs	r1, #3
 8006450:	2002      	movs	r0, #2
 8006452:	f7ff ff64 	bl	800631e <Perform_Flash_Erase>
 8006456:	4603      	mov	r3, r0
 8006458:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Perform_Flash_Erase(FIRMWARE2_CORE2_SECTOR, FIRMWARE2_CORE2_NUM_SECTORS, FLASH_BANK_2);
 800645a:	2202      	movs	r2, #2
 800645c:	2103      	movs	r1, #3
 800645e:	2005      	movs	r0, #5
 8006460:	f7ff ff5d 	bl	800631e <Perform_Flash_Erase>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	7ffb      	ldrb	r3, [r7, #31]
 800646a:	4413      	add	r3, r2
 800646c:	b2db      	uxtb	r3, r3
 800646e:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Flash_Write_Metadata(&fw_info, 2);
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fa5c 	bl	8006934 <Flash_Write_Metadata>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	7ffb      	ldrb	r3, [r7, #31]
 8006482:	4413      	add	r3, r2
 8006484:	b2db      	uxtb	r3, r3
 8006486:	77fb      	strb	r3, [r7, #31]
		break;
 8006488:	e002      	b.n	8006490 <Bootloader_Erase_Flash+0xb2>

        default:
            Erase_Status = FOTA_FAILED; // Lựa chọn không hợp lệ
 800648a:	2301      	movs	r3, #1
 800648c:	77fb      	strb	r3, [r7, #31]
		break;
 800648e:	bf00      	nop
    }

    Bootloader_Send_Data_To_Host((uint8_t*)&Erase_Status, 1);
 8006490:	f107 031f 	add.w	r3, r7, #31
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f952 	bl	8006740 <Bootloader_Send_Data_To_Host>
}
 800649c:	bf00      	nop
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <Flash_Memory_Write_Payload>:
 * @param Payload_Start_Address: Địa chỉ bắt đầu trong Flash
 * @param Payload_Len: Độ dài dữ liệu (byte)
 * @return FLASH_PAYLOAD_WRITE_PASSED (0) nếu thành công, FLASH_PAYLOAD_WRITE_FAILED (1) nếu lỗi
 */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b095      	sub	sp, #84	@ 0x54
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
 80064b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80064b6:	3b40      	subs	r3, #64	@ 0x40
 80064b8:	331f      	adds	r3, #31
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	015c      	lsls	r4, r3, #5
	if (Payload_Start_Address + Payload_Len > FLASH_END_ADDRESS) return FOTA_FAILED;
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4413      	add	r3, r2
 80064c4:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 80064c8:	d301      	bcc.n	80064ce <Flash_Memory_Write_Payload+0x2a>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e042      	b.n	8006554 <Flash_Memory_Write_Payload+0xb0>
	if (Host_Payload == NULL || Payload_Len == 0)	return FOTA_FAILED;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <Flash_Memory_Write_Payload+0x36>
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <Flash_Memory_Write_Payload+0x3a>
 80064da:	2301      	movs	r3, #1
 80064dc:	e03a      	b.n	8006554 <Flash_Memory_Write_Payload+0xb0>

    uint16_t i = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t buffer[32] __attribute__((aligned(32))); 	// Bộ đệm 32 byte cho 256-bit

	HAL_FLASH_Unlock();
 80064e4:	f7fa ffb4 	bl	8001450 <HAL_FLASH_Unlock>

    while (i < Payload_Len)
 80064e8:	e02c      	b.n	8006544 <Flash_Memory_Write_Payload+0xa0>
    {
        memset(buffer, 0xFF, sizeof(buffer));
 80064ea:	2220      	movs	r2, #32
 80064ec:	21ff      	movs	r1, #255	@ 0xff
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 fce0 	bl	8006eb4 <memset>
        uint16_t bytes_to_write = (Payload_Len - i > 32) ? 32 : (Payload_Len - i);
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	bfa8      	it	ge
 8006500:	2320      	movge	r3, #32
 8006502:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        memcpy(buffer, &Host_Payload[i], bytes_to_write);
 8006506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8006512:	4619      	mov	r1, r3
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fcf9 	bl	8006f0c <memcpy>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Payload_Start_Address + i, (uint32_t)buffer) != HAL_OK)
 800651a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	4622      	mov	r2, r4
 8006524:	4619      	mov	r1, r3
 8006526:	2001      	movs	r0, #1
 8006528:	f7fa ff00 	bl	800132c <HAL_FLASH_Program>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <Flash_Memory_Write_Payload+0x96>
        {
            HAL_FLASH_Lock();
 8006532:	f7fa ffc7 	bl	80014c4 <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8006536:	2301      	movs	r3, #1
 8006538:	e00c      	b.n	8006554 <Flash_Memory_Write_Payload+0xb0>
        }
        i += 32; // Tăng bước nhảy 32 byte
 800653a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800653e:	3320      	adds	r3, #32
 8006540:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while (i < Payload_Len)
 8006544:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	429a      	cmp	r2, r3
 800654c:	d3cd      	bcc.n	80064ea <Flash_Memory_Write_Payload+0x46>
    }
    HAL_FLASH_Lock();
 800654e:	f7fa ffb9 	bl	80014c4 <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3754      	adds	r7, #84	@ 0x54
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}

0800655c <Bootloader_Memory_Write>:
 * Byte 6-7: Total Frames
 * Byte 8...: Chunk data
 * Byte cuối (4 bytes): CRC32
 */
static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	uint8_t Payload_Len = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
	uint8_t Status = FOTA_SUCCESS;
 8006568:	2300      	movs	r3, #0
 800656a:	723b      	strb	r3, [r7, #8]
	uint16_t Frame_Index = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	81bb      	strh	r3, [r7, #12]
	uint16_t Total_Frame = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	817b      	strh	r3, [r7, #10]

	Frame_Index = *((uint16_t*) (&Host_Buffer[4]));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	889b      	ldrh	r3, [r3, #4]
 8006578:	81bb      	strh	r3, [r7, #12]
	Total_Frame = *((uint16_t*) (&Host_Buffer[6]));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	88db      	ldrh	r3, [r3, #6]
 800657e:	817b      	strh	r3, [r7, #10]

	uint8_t fw_number = Host_Buffer[2];
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	789b      	ldrb	r3, [r3, #2]
 8006584:	727b      	strb	r3, [r7, #9]
	if((fw_number > 2)||(fw_number < 1))
 8006586:	7a7b      	ldrb	r3, [r7, #9]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d802      	bhi.n	8006592 <Bootloader_Memory_Write+0x36>
 800658c:	7a7b      	ldrb	r3, [r7, #9]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d108      	bne.n	80065a4 <Bootloader_Memory_Write+0x48>
	{
		Status = FOTA_FAILED;
 8006592:	2301      	movs	r3, #1
 8006594:	723b      	strb	r3, [r7, #8]
		Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 8006596:	f107 0308 	add.w	r3, r7, #8
 800659a:	2101      	movs	r1, #1
 800659c:	4618      	mov	r0, r3
 800659e:	f000 f8cf 	bl	8006740 <Bootloader_Send_Data_To_Host>
		return;
 80065a2:	e07b      	b.n	800669c <Bootloader_Memory_Write+0x140>
	}
	if(!Frame_Index)
 80065a4:	89bb      	ldrh	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d122      	bne.n	80065f0 <Bootloader_Memory_Write+0x94>
	{
		Address_to_write = (fw_number == 1) ? FIRMWARE1_CORE1_MEM_BASE : FIRMWARE1_CORE2_MEM_BASE;
 80065aa:	7a7b      	ldrb	r3, [r7, #9]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <Bootloader_Memory_Write+0x58>
 80065b0:	4b3c      	ldr	r3, [pc, #240]	@ (80066a4 <Bootloader_Memory_Write+0x148>)
 80065b2:	e000      	b.n	80065b6 <Bootloader_Memory_Write+0x5a>
 80065b4:	4b3c      	ldr	r3, [pc, #240]	@ (80066a8 <Bootloader_Memory_Write+0x14c>)
 80065b6:	4a3d      	ldr	r2, [pc, #244]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 80065b8:	6013      	str	r3, [r2, #0]
		Status = Flash_Read_Metadata(&Temp_Firmware, fw_number);
 80065ba:	7a7b      	ldrb	r3, [r7, #9]
 80065bc:	4619      	mov	r1, r3
 80065be:	483c      	ldr	r0, [pc, #240]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 80065c0:	f000 fa26 	bl	8006a10 <Flash_Read_Metadata>
 80065c4:	4603      	mov	r3, r0
 80065c6:	723b      	strb	r3, [r7, #8]
		if(Status != FOTA_SUCCESS)
 80065c8:	7a3b      	ldrb	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <Bootloader_Memory_Write+0x80>
		{
			Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f8b3 	bl	8006740 <Bootloader_Send_Data_To_Host>
			return;
 80065da:	e05f      	b.n	800669c <Bootloader_Memory_Write+0x140>
		}
		Temp_Firmware.address = Address_to_write;
 80065dc:	4b33      	ldr	r3, [pc, #204]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a33      	ldr	r2, [pc, #204]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 80065e2:	6013      	str	r3, [r2, #0]
		Temp_Firmware.crc = 0;
 80065e4:	4b32      	ldr	r3, [pc, #200]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
		Temp_Firmware.length = 0;
 80065ea:	4b31      	ldr	r3, [pc, #196]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	605a      	str	r2, [r3, #4]
	}

	Payload_Len = Host_Buffer[3];
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	73fb      	strb	r3, [r7, #15]
	Status = Flash_Memory_Write_Payload((uint8_t*)&Host_Buffer[8], Address_to_write, Payload_Len);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3308      	adds	r3, #8
 80065fa:	4a2c      	ldr	r2, [pc, #176]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	b292      	uxth	r2, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff ff4e 	bl	80064a4 <Flash_Memory_Write_Payload>
 8006608:	4603      	mov	r3, r0
 800660a:	723b      	strb	r3, [r7, #8]
	Status += Flash_Memory_Write_Payload((uint8_t*)&Host_Buffer[8], Address_to_write + FIRMWARE_MEM_OFFSET, Payload_Len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f103 0008 	add.w	r0, r3, #8
 8006612:	4b26      	ldr	r3, [pc, #152]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f503 23c0 	add.w	r3, r3, #393216	@ 0x60000
 800661a:	7bfa      	ldrb	r2, [r7, #15]
 800661c:	b292      	uxth	r2, r2
 800661e:	4619      	mov	r1, r3
 8006620:	f7ff ff40 	bl	80064a4 <Flash_Memory_Write_Payload>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	7a3b      	ldrb	r3, [r7, #8]
 800662a:	4413      	add	r3, r2
 800662c:	b2db      	uxtb	r3, r3
 800662e:	723b      	strb	r3, [r7, #8]

	if (Status == FOTA_SUCCESS)
 8006630:	7a3b      	ldrb	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d12c      	bne.n	8006690 <Bootloader_Memory_Write+0x134>
	{
		Address_to_write += Payload_Len;
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	4b1c      	ldr	r3, [pc, #112]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4413      	add	r3, r2
 800663e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <Bootloader_Memory_Write+0x150>)
 8006640:	6013      	str	r3, [r2, #0]
		Temp_Firmware.length += Payload_Len;
 8006642:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	4413      	add	r3, r2
 800664a:	4a19      	ldr	r2, [pc, #100]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 800664c:	6053      	str	r3, [r2, #4]
		if (Frame_Index == (Total_Frame - 1))
 800664e:	89ba      	ldrh	r2, [r7, #12]
 8006650:	897b      	ldrh	r3, [r7, #10]
 8006652:	3b01      	subs	r3, #1
 8006654:	429a      	cmp	r2, r3
 8006656:	d11b      	bne.n	8006690 <Bootloader_Memory_Write+0x134>
		{
			Temp_Firmware.crc = Firmware_CRC_Verification(Temp_Firmware.address, Temp_Firmware.length);
 8006658:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a14      	ldr	r2, [pc, #80]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 800665e:	6852      	ldr	r2, [r2, #4]
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f87c 	bl	8006760 <Firmware_CRC_Verification>
 8006668:	4603      	mov	r3, r0
 800666a:	4a11      	ldr	r2, [pc, #68]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 800666c:	6093      	str	r3, [r2, #8]
			Status = Flash_Write_Metadata(&Temp_Firmware, fw_number);
 800666e:	7a7b      	ldrb	r3, [r7, #9]
 8006670:	4619      	mov	r1, r3
 8006672:	480f      	ldr	r0, [pc, #60]	@ (80066b0 <Bootloader_Memory_Write+0x154>)
 8006674:	f000 f95e 	bl	8006934 <Flash_Write_Metadata>
 8006678:	4603      	mov	r3, r0
 800667a:	723b      	strb	r3, [r7, #8]
			if(Status != FOTA_SUCCESS)
 800667c:	7a3b      	ldrb	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <Bootloader_Memory_Write+0x134>
			{
				Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	2101      	movs	r1, #1
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f859 	bl	8006740 <Bootloader_Send_Data_To_Host>
				return;
 800668e:	e005      	b.n	800669c <Bootloader_Memory_Write+0x140>
			}
		}
	}

	Bootloader_Send_Data_To_Host((uint8_t*) &Status, 1);
 8006690:	f107 0308 	add.w	r3, r7, #8
 8006694:	2101      	movs	r1, #1
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f852 	bl	8006740 <Bootloader_Send_Data_To_Host>

}
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08040000 	.word	0x08040000
 80066a8:	08140000 	.word	0x08140000
 80066ac:	240002d8 	.word	0x240002d8
 80066b0:	240002c8 	.word	0x240002c8

080066b4 <Bootloader_CRC_Verify>:
 * @param Data_Len: Độ dài dữ liệu
 * @param Host_CRC: Giá trị CRC từ host
 * @return CRC_VERIFICATION_PASSED (1) nếu khớp, CRC_VERIFICATION_FAILED (0) nếu không
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	@ 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
    uint8_t CRC_Status = FOTA_SUCCESS;
 80066c0:	2300      	movs	r3, #0
 80066c2:	77fb      	strb	r3, [r7, #31]
    uint32_t MCU_CRC_Calculated = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
    if (Data_Len == 0xFFFFFFFF)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d102      	bne.n	80066d6 <Bootloader_CRC_Verify+0x22>
        return MCU_CRC_Calculated;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e01d      	b.n	8006712 <Bootloader_CRC_Verify+0x5e>
    CRC->CR = CRC_CR_RESET;
 80066d6:	4b12      	ldr	r3, [pc, #72]	@ (8006720 <Bootloader_CRC_Verify+0x6c>)
 80066d8:	2201      	movs	r2, #1
 80066da:	609a      	str	r2, [r3, #8]
    for (unsigned int i = 0; i < Data_Len; i++)
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e008      	b.n	80066f4 <Bootloader_CRC_Verify+0x40>
        CRC->DR = (uint32_t) pData[i];
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	4413      	add	r3, r2
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <Bootloader_CRC_Verify+0x6c>)
 80066ec:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < Data_Len; i++)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d3f2      	bcc.n	80066e2 <Bootloader_CRC_Verify+0x2e>
    if (CRC->DR == Host_CRC)
 80066fc:	4b08      	ldr	r3, [pc, #32]	@ (8006720 <Bootloader_CRC_Verify+0x6c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d102      	bne.n	800670c <Bootloader_CRC_Verify+0x58>
    {
        CRC_Status = FOTA_SUCCESS;
 8006706:	2300      	movs	r3, #0
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e001      	b.n	8006710 <Bootloader_CRC_Verify+0x5c>
    }
    else
    {
        CRC_Status = FOTA_FAILED;
 800670c:	2301      	movs	r3, #1
 800670e:	77fb      	strb	r3, [r7, #31]
    }

    return CRC_Status;
 8006710:	7ffb      	ldrb	r3, [r7, #31]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3724      	adds	r7, #36	@ 0x24
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	58024c00 	.word	0x58024c00

08006724 <Bootloader_Send_NACK>:


/**
 * Gửi NACK về host
 */
static void Bootloader_Send_NACK(void) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
    uint8_t Ack_Value = CBL_SEND_NACK;
 800672a:	23ab      	movs	r3, #171	@ 0xab
 800672c:	71fb      	strb	r3, [r7, #7]
    USART2_send_array((const char*) &Ack_Value, 1);
 800672e:	1dfb      	adds	r3, r7, #7
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fb56 	bl	8005de4 <USART2_send_array>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <Bootloader_Send_Data_To_Host>:
/**
 * Gửi dữ liệu về host
 * @param Host_Buffer: Dữ liệu cần gửi
 * @param Data_Len: Độ dài dữ liệu
 */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
    USART2_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fb47 	bl	8005de4 <USART2_send_array>
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <Firmware_CRC_Verification>:
 * Tính CRC cho firmware
 * @param start_address: Địa chỉ bắt đầu
 * @param length: Độ dài firmware
 * @return Giá trị CRC
 */
static uint32_t Firmware_CRC_Verification(uint32_t start_address, uint32_t length) {
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
    if (length == 0) return 0;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <Firmware_CRC_Verification+0x14>
 8006770:	2300      	movs	r3, #0
 8006772:	e029      	b.n	80067c8 <Firmware_CRC_Verification+0x68>

    uint32_t address = start_address;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	617b      	str	r3, [r7, #20]
    uint32_t end_address = start_address + length;
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	4413      	add	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
    uint32_t data = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

    CRC->CR = CRC_CR_RESET;
 8006784:	4b13      	ldr	r3, [pc, #76]	@ (80067d4 <Firmware_CRC_Verification+0x74>)
 8006786:	2201      	movs	r2, #1
 8006788:	609a      	str	r2, [r3, #8]

    while (address < end_address - 3) {
 800678a:	e008      	b.n	800679e <Firmware_CRC_Verification+0x3e>
        data = *(uint32_t*)address;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
        CRC->DR = data;
 8006792:	4a10      	ldr	r2, [pc, #64]	@ (80067d4 <Firmware_CRC_Verification+0x74>)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6013      	str	r3, [r2, #0]
        address += 4;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3304      	adds	r3, #4
 800679c:	617b      	str	r3, [r7, #20]
    while (address < end_address - 3) {
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	3b03      	subs	r3, #3
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3f1      	bcc.n	800678c <Firmware_CRC_Verification+0x2c>
    }

    while (address < end_address) {
 80067a8:	e008      	b.n	80067bc <Firmware_CRC_Verification+0x5c>
        uint8_t byte = *(uint8_t*)address;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	72fb      	strb	r3, [r7, #11]
        CRC->DR = (uint32_t)byte;
 80067b0:	4a08      	ldr	r2, [pc, #32]	@ (80067d4 <Firmware_CRC_Verification+0x74>)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	6013      	str	r3, [r2, #0]
        address++;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
    while (address < end_address) {
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3f2      	bcc.n	80067aa <Firmware_CRC_Verification+0x4a>
    }

    return CRC->DR;
 80067c4:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <Firmware_CRC_Verification+0x74>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	58024c00 	.word	0x58024c00

080067d8 <Set_Firmware_Version>:
/**
 * Thiết lập phiên bản firmware
 * @param Host_Buffer: Buffer chứa thông tin phiên bản
 */
static void Set_Firmware_Version(uint8_t *Host_Buffer)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
    uint8_t status = FOTA_SUCCESS;
 80067e0:	2300      	movs	r3, #0
 80067e2:	77bb      	strb	r3, [r7, #30]
    uint8_t fw_number = Host_Buffer[2];
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	789b      	ldrb	r3, [r3, #2]
 80067e8:	77fb      	strb	r3, [r7, #31]
    if((fw_number < 1)||(fw_number > 2))
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <Set_Firmware_Version+0x1e>
 80067f0:	7ffb      	ldrb	r3, [r7, #31]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d908      	bls.n	8006808 <Set_Firmware_Version+0x30>
	{
    	status = FOTA_FAILED;
 80067f6:	2301      	movs	r3, #1
 80067f8:	77bb      	strb	r3, [r7, #30]
    	Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 80067fa:	f107 031e 	add.w	r3, r7, #30
 80067fe:	2101      	movs	r1, #1
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff9d 	bl	8006740 <Bootloader_Send_Data_To_Host>
    	return;
 8006806:	e02a      	b.n	800685e <Set_Firmware_Version+0x86>
	}

    s_firmware_info fw_info;

    status = Flash_Read_Metadata(&fw_info, fw_number);
 8006808:	7ffa      	ldrb	r2, [r7, #31]
 800680a:	f107 030c 	add.w	r3, r7, #12
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f8fd 	bl	8006a10 <Flash_Read_Metadata>
 8006816:	4603      	mov	r3, r0
 8006818:	77bb      	strb	r3, [r7, #30]


    if(status != FOTA_SUCCESS)
 800681a:	7fbb      	ldrb	r3, [r7, #30]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d006      	beq.n	800682e <Set_Firmware_Version+0x56>
    {
		Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 8006820:	f107 031e 	add.w	r3, r7, #30
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ff8a 	bl	8006740 <Bootloader_Send_Data_To_Host>
		return;
 800682c:	e017      	b.n	800685e <Set_Firmware_Version+0x86>
    }
    fw_info.version_major = Host_Buffer[3];
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	763b      	strb	r3, [r7, #24]
    fw_info.version_minor = Host_Buffer[4];
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	791b      	ldrb	r3, [r3, #4]
 8006838:	767b      	strb	r3, [r7, #25]
    fw_info.version_patch = Host_Buffer[5];
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	795b      	ldrb	r3, [r3, #5]
 800683e:	76bb      	strb	r3, [r7, #26]

    status = Flash_Write_Metadata(&fw_info, fw_number);
 8006840:	7ffa      	ldrb	r2, [r7, #31]
 8006842:	f107 030c 	add.w	r3, r7, #12
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f873 	bl	8006934 <Flash_Write_Metadata>
 800684e:	4603      	mov	r3, r0
 8006850:	77bb      	strb	r3, [r7, #30]
    Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 8006852:	f107 031e 	add.w	r3, r7, #30
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff ff71 	bl	8006740 <Bootloader_Send_Data_To_Host>
}
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <Get_Firmware_Version>:
/**
 * Lấy phiên bản firmware
 * @param Host_Buffer: Buffer chứa yêu cầu
 */
static void Get_Firmware_Version(uint8_t *Host_Buffer)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	@ 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
    uint8_t fw_number = Host_Buffer[2];
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t status[6];
    memset(status, 0, sizeof(status));
 8006874:	f107 031c 	add.w	r3, r7, #28
 8006878:	2206      	movs	r2, #6
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fb19 	bl	8006eb4 <memset>

    if((fw_number < 1)||(fw_number > 2))
 8006882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <Get_Firmware_Version+0x2e>
 800688a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800688e:	2b02      	cmp	r3, #2
 8006890:	d908      	bls.n	80068a4 <Get_Firmware_Version+0x40>
	{
		status[0] = FOTA_FAILED;
 8006892:	2301      	movs	r3, #1
 8006894:	773b      	strb	r3, [r7, #28]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 8006896:	f107 031c 	add.w	r3, r7, #28
 800689a:	2106      	movs	r1, #6
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff ff4f 	bl	8006740 <Bootloader_Send_Data_To_Host>
		return;
 80068a2:	e041      	b.n	8006928 <Get_Firmware_Version+0xc4>
	}

	s_firmware_info fw_info;

	if(Flash_Read_Metadata(&fw_info, fw_number) != FOTA_SUCCESS)
 80068a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f8ae 	bl	8006a10 <Flash_Read_Metadata>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <Get_Firmware_Version+0x68>
	{
		status[0] = FOTA_FAILED;
 80068ba:	2301      	movs	r3, #1
 80068bc:	773b      	strb	r3, [r7, #28]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 80068be:	f107 031c 	add.w	r3, r7, #28
 80068c2:	2106      	movs	r1, #6
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff3b 	bl	8006740 <Bootloader_Send_Data_To_Host>
		return;
 80068ca:	e02d      	b.n	8006928 <Get_Firmware_Version+0xc4>
	}

	uint16_t fw_size = ceil(fw_info.length / 1024.0f);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068d6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8006930 <Get_Firmware_Version+0xcc>
 80068da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068e2:	eeb0 0b47 	vmov.f64	d0, d7
 80068e6:	f000 fb1f 	bl	8006f28 <ceil>
 80068ea:	eeb0 7b40 	vmov.f64	d7, d0
 80068ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068f2:	ee17 3a90 	vmov	r3, s15
 80068f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    status[0] = FOTA_SUCCESS;
 80068f8:	2300      	movs	r3, #0
 80068fa:	773b      	strb	r3, [r7, #28]
    status[1] = fw_info.version_major;
 80068fc:	7e3b      	ldrb	r3, [r7, #24]
 80068fe:	777b      	strb	r3, [r7, #29]
    status[2] = fw_info.version_minor;
 8006900:	7e7b      	ldrb	r3, [r7, #25]
 8006902:	77bb      	strb	r3, [r7, #30]
    status[3] = fw_info.version_patch;
 8006904:	7ebb      	ldrb	r3, [r7, #26]
 8006906:	77fb      	strb	r3, [r7, #31]
    status[4] = (uint8_t)(fw_size >> 8);
 8006908:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f887 3020 	strb.w	r3, [r7, #32]
    status[5] = (uint8_t)fw_size;
 8006914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    Bootloader_Send_Data_To_Host((uint8_t*)status, 6);
 800691c:	f107 031c 	add.w	r3, r7, #28
 8006920:	2106      	movs	r1, #6
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff ff0c 	bl	8006740 <Bootloader_Send_Data_To_Host>
}
 8006928:	3728      	adds	r7, #40	@ 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	44800000 	.word	0x44800000

08006934 <Flash_Write_Metadata>:
 * @param fw: Con trỏ tới thông tin firmware (s_firmware_info).
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu thành công, FLASH_PAYLOAD_WRITE_FAILED nếu lỗi hoặc đầu vào không hợp lệ.
 */
static uint8_t Flash_Write_Metadata(s_firmware_info* fw_info, uint8_t fw_number)
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b09b      	sub	sp, #108	@ 0x6c
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
 8006940:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006944:	3b60      	subs	r3, #96	@ 0x60
 8006946:	331f      	adds	r3, #31
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	015c      	lsls	r4, r3, #5
	if((fw_info == NULL)||(fw_number < 1)||(fw_number > 2))	return FOTA_FAILED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <Flash_Write_Metadata+0x2a>
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <Flash_Write_Metadata+0x2a>
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <Flash_Write_Metadata+0x2e>
 800695e:	2301      	movs	r3, #1
 8006960:	e04e      	b.n	8006a00 <Flash_Write_Metadata+0xcc>

	uint32_t metadata_addr = (fw_number == 1) ? METADATA_CORE1_MEM_BASE : METADATA_CORE2_MEM_BASE;
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <Flash_Write_Metadata+0x38>
 8006968:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <Flash_Write_Metadata+0xd4>)
 800696a:	e000      	b.n	800696e <Flash_Write_Metadata+0x3a>
 800696c:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <Flash_Write_Metadata+0xd8>)
 800696e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint32_t bank = (fw_number == 1) ? FLASH_BANK_1 : FLASH_BANK_2;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <Flash_Write_Metadata+0x46>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <Flash_Write_Metadata+0x48>
 800697a:	2302      	movs	r3, #2
 800697c:	663b      	str	r3, [r7, #96]	@ 0x60
    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 800697e:	2310      	movs	r3, #16
 8006980:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memset(data, 0xFF, sizeof(data));
 8006982:	2220      	movs	r2, #32
 8006984:	21ff      	movs	r1, #255	@ 0xff
 8006986:	4620      	mov	r0, r4
 8006988:	f000 fa94 	bl	8006eb4 <memset>
    memcpy(data, fw_info, fw_info_size);
 800698c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fabb 	bl	8006f0c <memcpy>

    HAL_FLASH_Unlock();
 8006996:	f7fa fd5b 	bl	8001450 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800699a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	609a      	str	r2, [r3, #8]
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	647b      	str	r3, [r7, #68]	@ 0x44
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80069ae:	2300      	movs	r3, #0
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	EraseInitStruct.Banks = bank;
 80069b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	EraseInitStruct.Sector = 1; 						// Metadata ở Sector 1
 80069b6:	2301      	movs	r3, #1
 80069b8:	653b      	str	r3, [r7, #80]	@ 0x50
	EraseInitStruct.NbSectors = 1;
 80069ba:	2301      	movs	r3, #1
 80069bc:	657b      	str	r3, [r7, #84]	@ 0x54
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80069be:	2320      	movs	r3, #32
 80069c0:	65bb      	str	r3, [r7, #88]	@ 0x58

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80069c2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80069c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fa fe3d 	bl	800164c <HAL_FLASHEx_Erase>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <Flash_Write_Metadata+0xac>
	{
		HAL_FLASH_Lock();
 80069d8:	f7fa fd74 	bl	80014c4 <HAL_FLASH_Lock>
		return FOTA_FAILED;
 80069dc:	2301      	movs	r3, #1
 80069de:	e00f      	b.n	8006a00 <Flash_Write_Metadata+0xcc>
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, metadata_addr, (uint32_t)data) != HAL_OK)
 80069e0:	4623      	mov	r3, r4
 80069e2:	461a      	mov	r2, r3
 80069e4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7fa fca0 	bl	800132c <HAL_FLASH_Program>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <Flash_Write_Metadata+0xc6>
	{
		HAL_FLASH_Lock();
 80069f2:	f7fa fd67 	bl	80014c4 <HAL_FLASH_Lock>
		return FOTA_FAILED;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e002      	b.n	8006a00 <Flash_Write_Metadata+0xcc>
	}
    HAL_FLASH_Lock();
 80069fa:	f7fa fd63 	bl	80014c4 <HAL_FLASH_Lock>
    return FOTA_SUCCESS;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	376c      	adds	r7, #108	@ 0x6c
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd90      	pop	{r4, r7, pc}
 8006a08:	08020000 	.word	0x08020000
 8006a0c:	08120000 	.word	0x08120000

08006a10 <Flash_Read_Metadata>:
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu đọc thành công và metadata hợp lệ,
 *         FLASH_PAYLOAD_WRITE_FAILED nếu fw_number không hợp lệ hoặc metadata không hợp lệ.
 */
static uint8_t Flash_Read_Metadata(s_firmware_info* fw_info, uint8_t fw_number)
{
 8006a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a12:	b093      	sub	sp, #76	@ 0x4c
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006a20:	3b40      	subs	r3, #64	@ 0x40
 8006a22:	331f      	adds	r3, #31
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	015e      	lsls	r6, r3, #5
	if((fw_number < 1)||(fw_number > 2)) return FOTA_FAILED;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <Flash_Read_Metadata+0x24>
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <Flash_Read_Metadata+0x28>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e02c      	b.n	8006a92 <Flash_Read_Metadata+0x82>

	uint32_t metadata_addr = (fw_number == 1) ? METADATA_CORE1_MEM_BASE : METADATA_CORE2_MEM_BASE;
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <Flash_Read_Metadata+0x32>
 8006a3e:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <Flash_Read_Metadata+0x8c>)
 8006a40:	e000      	b.n	8006a44 <Flash_Read_Metadata+0x34>
 8006a42:	4b17      	ldr	r3, [pc, #92]	@ (8006aa0 <Flash_Read_Metadata+0x90>)
 8006a44:	647b      	str	r3, [r7, #68]	@ 0x44

    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 8006a46:	2310      	movs	r3, #16
 8006a48:	643b      	str	r3, [r7, #64]	@ 0x40

    memcpy(data, (void*)metadata_addr, sizeof(data));
 8006a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4c:	4634      	mov	r4, r6
 8006a4e:	461d      	mov	r5, r3
 8006a50:	6828      	ldr	r0, [r5, #0]
 8006a52:	6869      	ldr	r1, [r5, #4]
 8006a54:	68aa      	ldr	r2, [r5, #8]
 8006a56:	68eb      	ldr	r3, [r5, #12]
 8006a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5a:	6928      	ldr	r0, [r5, #16]
 8006a5c:	6969      	ldr	r1, [r5, #20]
 8006a5e:	69aa      	ldr	r2, [r5, #24]
 8006a60:	69eb      	ldr	r3, [r5, #28]
 8006a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy(fw_info, data, fw_info_size);
 8006a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a66:	4631      	mov	r1, r6
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa4f 	bl	8006f0c <memcpy>

    if((fw_info->address == 0xffffffff)||
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d009      	beq.n	8006a8c <Flash_Read_Metadata+0x7c>
	(fw_info->length == 0xffffffff)||
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
    if((fw_info->address == 0xffffffff)||
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d004      	beq.n	8006a8c <Flash_Read_Metadata+0x7c>
	(fw_info->crc == 0xffffffff))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
	(fw_info->length == 0xffffffff)||
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d101      	bne.n	8006a90 <Flash_Read_Metadata+0x80>
    	return FOTA_FAILED;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <Flash_Read_Metadata+0x82>
    return FOTA_SUCCESS;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	374c      	adds	r7, #76	@ 0x4c
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08020000 	.word	0x08020000
 8006aa0:	08120000 	.word	0x08120000

08006aa4 <Firmware_Check_Available>:

/**
 * Kiểm tra firmware có sẵn
 */
static uint8_t Firmware_Check_Available(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	@ 0x28
 8006aa8:	af00      	add	r7, sp, #0
    uint32_t CRC_Result = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
    s_firmware_info fw_info1;
    s_firmware_info fw_info2;
    // Kiểm tra Firmware 1 core 1
    memset(&fw_info1, 0, sizeof(fw_info1));
 8006aae:	f107 0310 	add.w	r3, r7, #16
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f9fc 	bl	8006eb4 <memset>
    if(Flash_Read_Metadata(&fw_info1, 1) == FOTA_FAILED)	return FOTA_FAILED;
 8006abc:	f107 0310 	add.w	r3, r7, #16
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ffa4 	bl	8006a10 <Flash_Read_Metadata>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <Firmware_Check_Available+0x2e>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e076      	b.n	8006bc0 <Firmware_Check_Available+0x11c>

    if(fw_info1.address != FIRMWARE1_CORE1_MEM_BASE)	return FOTA_FAILED;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bc8 <Firmware_Check_Available+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d001      	beq.n	8006ade <Firmware_Check_Available+0x3a>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e070      	b.n	8006bc0 <Firmware_Check_Available+0x11c>

    if (fw_info1.length > 0)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d022      	beq.n	8006b2a <Firmware_Check_Available+0x86>
    {
		CRC_Result = Firmware_CRC_Verification(fw_info1.address, fw_info1.length);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fe38 	bl	8006760 <Firmware_CRC_Verification>
 8006af0:	6278      	str	r0, [r7, #36]	@ 0x24
		if (CRC_Result != fw_info1.crc)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d011      	beq.n	8006b1e <Firmware_Check_Available+0x7a>
		{
			if (Flash_CopyData(FIRMWARE2_CORE1_MEM_BASE, FIRMWARE1_CORE1_MEM_BASE, fw_info1.length) != FOTA_SUCCESS)	return FOTA_FAILED;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	461a      	mov	r2, r3
 8006afe:	4932      	ldr	r1, [pc, #200]	@ (8006bc8 <Firmware_Check_Available+0x124>)
 8006b00:	4832      	ldr	r0, [pc, #200]	@ (8006bcc <Firmware_Check_Available+0x128>)
 8006b02:	f000 f869 	bl	8006bd8 <Flash_CopyData>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <Firmware_Check_Available+0x6c>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e057      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
			CRC_Result = Firmware_CRC_Verification(fw_info1.address, fw_info1.length);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fe22 	bl	8006760 <Firmware_CRC_Verification>
 8006b1c:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		if (CRC_Result != fw_info1.crc)	return FOTA_FAILED;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d003      	beq.n	8006b2e <Firmware_Check_Available+0x8a>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e04a      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
    }

    else return FOTA_FAILED;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e048      	b.n	8006bc0 <Firmware_Check_Available+0x11c>

    // Kiểm tra Firmware 1 core 2
    memset(&fw_info2, 0, sizeof(fw_info2));
 8006b2e:	463b      	mov	r3, r7
 8006b30:	2210      	movs	r2, #16
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 f9bd 	bl	8006eb4 <memset>
    if(Flash_Read_Metadata(&fw_info2, 2) == FOTA_FAILED)	return FOTA_FAILED;
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff ff66 	bl	8006a10 <Flash_Read_Metadata>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <Firmware_Check_Available+0xaa>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e038      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
    if(fw_info2.address != FIRMWARE1_CORE2_MEM_BASE)	return FOTA_FAILED;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd0 <Firmware_Check_Available+0x12c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d001      	beq.n	8006b5a <Firmware_Check_Available+0xb6>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e032      	b.n	8006bc0 <Firmware_Check_Available+0x11c>

    if (fw_info2.length > 0)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d022      	beq.n	8006ba6 <Firmware_Check_Available+0x102>
    {
		CRC_Result = Firmware_CRC_Verification(fw_info2.address, fw_info2.length);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	4611      	mov	r1, r2
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fdfa 	bl	8006760 <Firmware_CRC_Verification>
 8006b6c:	6278      	str	r0, [r7, #36]	@ 0x24
		if (CRC_Result != fw_info2.crc)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d011      	beq.n	8006b9a <Firmware_Check_Available+0xf6>
		{
			if (Flash_CopyData(FIRMWARE2_CORE2_MEM_BASE, FIRMWARE1_CORE2_MEM_BASE, fw_info2.length) != FOTA_SUCCESS)	return FOTA_FAILED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4915      	ldr	r1, [pc, #84]	@ (8006bd0 <Firmware_Check_Available+0x12c>)
 8006b7c:	4815      	ldr	r0, [pc, #84]	@ (8006bd4 <Firmware_Check_Available+0x130>)
 8006b7e:	f000 f82b 	bl	8006bd8 <Flash_CopyData>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <Firmware_Check_Available+0xe8>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e019      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
			CRC_Result = Firmware_CRC_Verification(fw_info2.address, fw_info2.length);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fde4 	bl	8006760 <Firmware_CRC_Verification>
 8006b98:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		if (CRC_Result != fw_info2.crc)	return FOTA_FAILED;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d003      	beq.n	8006baa <Firmware_Check_Available+0x106>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e00c      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
    }

    else return FOTA_FAILED;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e00a      	b.n	8006bc0 <Firmware_Check_Available+0x11c>

	uint32_t app_address = FIRMWARE1_CORE1_MEM_BASE;
 8006baa:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <Firmware_Check_Available+0x124>)
 8006bac:	623b      	str	r3, [r7, #32]
	if(Jump_To_App(app_address) != FOTA_SUCCESS) return FOTA_FAILED;
 8006bae:	6a38      	ldr	r0, [r7, #32]
 8006bb0:	f7ff fa76 	bl	80060a0 <Jump_To_App>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <Firmware_Check_Available+0x11a>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <Firmware_Check_Available+0x11c>
	return FOTA_FAILED;
 8006bbe:	2301      	movs	r3, #1
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	@ 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	08040000 	.word	0x08040000
 8006bcc:	080a0000 	.word	0x080a0000
 8006bd0:	08140000 	.word	0x08140000
 8006bd4:	081a0000 	.word	0x081a0000

08006bd8 <Flash_CopyData>:


static uint8_t Flash_CopyData(uint32_t src_addr, uint32_t dst_addr, uint32_t length)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b095      	sub	sp, #84	@ 0x54
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006be8:	3b40      	subs	r3, #64	@ 0x40
 8006bea:	331f      	adds	r3, #31
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	015c      	lsls	r4, r3, #5
    if (length == 0)  return FOTA_FAILED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <Flash_CopyData+0x22>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e052      	b.n	8006ca0 <Flash_CopyData+0xc8>

	// First clear flash fw1
    if (dst_addr == FIRMWARE1_CORE1_MEM_BASE)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca8 <Flash_CopyData+0xd0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d109      	bne.n	8006c16 <Flash_CopyData+0x3e>
    {
    	if (Perform_Flash_Erase(FIRMWARE1_CORE1_SECTOR, FIRMWARE1_CORE1_NUM_SECTORS, FLASH_BANK_1) == FOTA_FAILED)	return FOTA_FAILED;
 8006c02:	2201      	movs	r2, #1
 8006c04:	2103      	movs	r1, #3
 8006c06:	2002      	movs	r0, #2
 8006c08:	f7ff fb89 	bl	800631e <Perform_Flash_Erase>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d111      	bne.n	8006c36 <Flash_CopyData+0x5e>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e044      	b.n	8006ca0 <Flash_CopyData+0xc8>
    }
    else if(dst_addr == FIRMWARE1_CORE2_MEM_BASE)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4a24      	ldr	r2, [pc, #144]	@ (8006cac <Flash_CopyData+0xd4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d109      	bne.n	8006c32 <Flash_CopyData+0x5a>
    {
    	if (Perform_Flash_Erase(FIRMWARE1_CORE2_SECTOR, FIRMWARE1_CORE2_NUM_SECTORS, FLASH_BANK_2) == FOTA_FAILED)	return FOTA_FAILED;
 8006c1e:	2202      	movs	r2, #2
 8006c20:	2103      	movs	r1, #3
 8006c22:	2002      	movs	r0, #2
 8006c24:	f7ff fb7b 	bl	800631e <Perform_Flash_Erase>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d103      	bne.n	8006c36 <Flash_CopyData+0x5e>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e036      	b.n	8006ca0 <Flash_CopyData+0xc8>
    }
    else return FOTA_FAILED;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e034      	b.n	8006ca0 <Flash_CopyData+0xc8>


	HAL_FLASH_Unlock();
 8006c36:	f7fa fc0b 	bl	8001450 <HAL_FLASH_Unlock>

    uint32_t i = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (i < length)
 8006c3e:	e028      	b.n	8006c92 <Flash_CopyData+0xba>
    {
    	uint8_t temp_buffer[32] __attribute__((aligned(32)));
		memset(temp_buffer, 0xFF, 32);
 8006c40:	2220      	movs	r2, #32
 8006c42:	21ff      	movs	r1, #255	@ 0xff
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 f935 	bl	8006eb4 <memset>
        uint16_t bytes_to_write = (length - i > 32) ? 32 : (length - i);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	bf28      	it	cs
 8006c54:	2320      	movcs	r3, #32
 8006c56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        memcpy(temp_buffer, (void *)(src_addr + i), bytes_to_write);
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5e:	4413      	add	r3, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c66:	461a      	mov	r2, r3
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f94f 	bl	8006f0c <memcpy>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, dst_addr + i, (uint32_t)temp_buffer) != HAL_OK)
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c72:	4413      	add	r3, r2
 8006c74:	4622      	mov	r2, r4
 8006c76:	4619      	mov	r1, r3
 8006c78:	2001      	movs	r0, #1
 8006c7a:	f7fa fb57 	bl	800132c <HAL_FLASH_Program>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <Flash_CopyData+0xb4>
        {
            HAL_FLASH_Lock();
 8006c84:	f7fa fc1e 	bl	80014c4 <HAL_FLASH_Lock>
            return FOTA_FAILED;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e009      	b.n	8006ca0 <Flash_CopyData+0xc8>
        }
        i += 32; // Tăng bước nhảy 32 byte
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8e:	3320      	adds	r3, #32
 8006c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (i < length)
 8006c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3d2      	bcc.n	8006c40 <Flash_CopyData+0x68>
    }

	HAL_FLASH_Lock();
 8006c9a:	f7fa fc13 	bl	80014c4 <HAL_FLASH_Lock>
	return FOTA_SUCCESS;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3754      	adds	r7, #84	@ 0x54
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd90      	pop	{r4, r7, pc}
 8006ca8:	08040000 	.word	0x08040000
 8006cac:	08140000 	.word	0x08140000

08006cb0 <validate_no_init_vars>:
    no_init_vars.reset_wdg_id = 0;
    DisableBackupRAM();
}

void validate_no_init_vars(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
	EnableBackupRAM();
 8006cb4:	f000 f82e 	bl	8006d14 <EnableBackupRAM>
    if (no_init_vars.magic != WDG_NO_INIT_VARS_MAGIC)
 8006cb8:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a13      	ldr	r2, [pc, #76]	@ (8006d0c <validate_no_init_vars+0x5c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00d      	beq.n	8006cde <validate_no_init_vars+0x2e>
    {
        memset(&no_init_vars, 0, sizeof(no_init_vars));
 8006cc2:	220c      	movs	r2, #12
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4810      	ldr	r0, [pc, #64]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cc8:	f000 f8f4 	bl	8006eb4 <memset>
        no_init_vars.magic = WDG_NO_INIT_VARS_MAGIC;
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cce:	4a0f      	ldr	r2, [pc, #60]	@ (8006d0c <validate_no_init_vars+0x5c>)
 8006cd0:	601a      	str	r2, [r3, #0]
        no_init_vars.reset_cause = RESET_CAUSE_NORMAL;
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
        no_init_vars.reset_wdg_id = 0xFF;
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cda:	22ff      	movs	r2, #255	@ 0xff
 8006cdc:	609a      	str	r2, [r3, #8]

    }

    if (no_init_vars.reset_cause == RESET_CAUSE_BOOTLOADER)
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d104      	bne.n	8006cf0 <validate_no_init_vars+0x40>
    {
		boot_timeout = BLD_TIMEOUT;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <validate_no_init_vars+0x60>)
 8006ce8:	f247 5230 	movw	r2, #30000	@ 0x7530
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e007      	b.n	8006d00 <validate_no_init_vars+0x50>
    }

    else if (no_init_vars.reset_cause == RESET_CAUSE_NORMAL)
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <validate_no_init_vars+0x58>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <validate_no_init_vars+0x50>
	{
		boot_timeout = BLD_TIMEOUT_NORMAL;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <validate_no_init_vars+0x60>)
 8006cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cfe:	601a      	str	r2, [r3, #0]
	}

    DisableBackupRAM();
 8006d00:	f000 f830 	bl	8006d64 <DisableBackupRAM>
    return;
 8006d04:	bf00      	nop
}
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	38800000 	.word	0x38800000
 8006d0c:	deaddead 	.word	0xdeaddead
 8006d10:	240002dc 	.word	0x240002dc

08006d14 <EnableBackupRAM>:

static void EnableBackupRAM(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
    HAL_PWR_EnableBkUpAccess();
 8006d1a:	f7fa ffed 	bl	8001cf8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKPRAM_CLK_ENABLE();
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d5c <EnableBackupRAM+0x48>)
 8006d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d24:	4a0d      	ldr	r2, [pc, #52]	@ (8006d5c <EnableBackupRAM+0x48>)
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <EnableBackupRAM+0x48>)
 8006d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
    HAL_PWREx_EnableBkUpReg();
 8006d3c:	f7fb f856 	bl	8001dec <HAL_PWREx_EnableBkUpReg>
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_BRR));
 8006d40:	bf00      	nop
 8006d42:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <EnableBackupRAM+0x4c>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4e:	d1f8      	bne.n	8006d42 <EnableBackupRAM+0x2e>
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	58024800 	.word	0x58024800

08006d64 <DisableBackupRAM>:

static void DisableBackupRAM(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
    HAL_PWREx_DisableBkUpReg();
 8006d68:	f7fb f866 	bl	8001e38 <HAL_PWREx_DisableBkUpReg>
    __HAL_RCC_BKPRAM_CLK_DISABLE();
 8006d6c:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <DisableBackupRAM+0x20>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d72:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <DisableBackupRAM+0x20>)
 8006d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    HAL_PWR_DisableBkUpAccess();
 8006d7c:	f7fa ffcc 	bl	8001d18 <HAL_PWR_DisableBkUpAccess>
}
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	58024400 	.word	0x58024400

08006d88 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 8006d8c:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <SchedulerSysTickIntHandler+0x2c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a08      	ldr	r2, [pc, #32]	@ (8006db4 <SchedulerSysTickIntHandler+0x2c>)
 8006d94:	6013      	str	r3, [r2, #0]
    if(boot_timeout)	boot_timeout--;
 8006d96:	4b08      	ldr	r3, [pc, #32]	@ (8006db8 <SchedulerSysTickIntHandler+0x30>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <SchedulerSysTickIntHandler+0x20>
 8006d9e:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <SchedulerSysTickIntHandler+0x30>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	4a04      	ldr	r2, [pc, #16]	@ (8006db8 <SchedulerSysTickIntHandler+0x30>)
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2400037c 	.word	0x2400037c
 8006db8:	240002dc 	.word	0x240002dc

08006dbc <SchedulerInit>:
//!
//! \return None.
//
//*****************************************************************************
void SchedulerInit(uint32_t TicksPerSecond)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((SystemCoreClock / TicksPerSecond) - 1UL);  /* set reload register */
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <SchedulerInit+0x38>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <SchedulerInit+0x3c>)
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006dd4:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <SchedulerInit+0x3c>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dda:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <SchedulerInit+0x3c>)
 8006ddc:	2207      	movs	r2, #7
 8006dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk	|
				   SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer interrupt */
  SchedulerTickPerSecond = TicksPerSecond;
 8006de0:	4a06      	ldr	r2, [pc, #24]	@ (8006dfc <SchedulerInit+0x40>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6013      	str	r3, [r2, #0]
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	24000000 	.word	0x24000000
 8006df8:	e000e010 	.word	0xe000e010
 8006dfc:	24000054 	.word	0x24000054

08006e00 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	e022      	b.n	8006e52 <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a14      	ldr	r2, [pc, #80]	@ (8006e68 <SchedulerRun+0x68>)
 8006e18:	4413      	add	r3, r2
 8006e1a:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d013      	beq.n	8006e4c <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f823 	bl	8006e74 <SchedulerElapsedTicksGet>
 8006e2e:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d309      	bcc.n	8006e4c <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8006e38:	4b0c      	ldr	r3, [pc, #48]	@ (8006e6c <SchedulerRun+0x6c>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	6852      	ldr	r2, [r2, #4]
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	4b07      	ldr	r3, [pc, #28]	@ (8006e70 <SchedulerRun+0x70>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3d7      	bcc.n	8006e0c <SchedulerRun+0xc>
        }
    }
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2400000c 	.word	0x2400000c
 8006e6c:	2400037c 	.word	0x2400037c
 8006e70:	24000008 	.word	0x24000008

08006e74 <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <SchedulerElapsedTicksGet+0x20>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f808 	bl	8006e98 <SchedulerElapsedTicksCalc>
 8006e88:	4603      	mov	r3, r0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2400037c 	.word	0x2400037c

08006e98 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <memset>:
 8006eb4:	4402      	add	r2, r0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d100      	bne.n	8006ebe <memset+0xa>
 8006ebc:	4770      	bx	lr
 8006ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec2:	e7f9      	b.n	8006eb8 <memset+0x4>

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f000 f89a 	bl	8007010 <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	0800707c 	.word	0x0800707c
 8006f00:	0800707c 	.word	0x0800707c
 8006f04:	0800707c 	.word	0x0800707c
 8006f08:	08007080 	.word	0x08007080

08006f0c <memcpy>:
 8006f0c:	440a      	add	r2, r1
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f14:	d100      	bne.n	8006f18 <memcpy+0xc>
 8006f16:	4770      	bx	lr
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f22:	4291      	cmp	r1, r2
 8006f24:	d1f9      	bne.n	8006f1a <memcpy+0xe>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <ceil>:
 8006f28:	ee10 1a90 	vmov	r1, s1
 8006f2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f30:	ee10 0a10 	vmov	r0, s0
 8006f34:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 8006f38:	2b13      	cmp	r3, #19
 8006f3a:	b530      	push	{r4, r5, lr}
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	dc2e      	bgt.n	8006f9e <ceil+0x76>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da12      	bge.n	8006f6a <ceil+0x42>
 8006f44:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 8007000 <ceil+0xd8>
 8006f48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006f4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f54:	dd04      	ble.n	8006f60 <ceil+0x38>
 8006f56:	2900      	cmp	r1, #0
 8006f58:	db4b      	blt.n	8006ff2 <ceil+0xca>
 8006f5a:	4308      	orrs	r0, r1
 8006f5c:	d14d      	bne.n	8006ffa <ceil+0xd2>
 8006f5e:	4601      	mov	r1, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4602      	mov	r2, r0
 8006f64:	ec43 2b10 	vmov	d0, r2, r3
 8006f68:	e020      	b.n	8006fac <ceil+0x84>
 8006f6a:	4a27      	ldr	r2, [pc, #156]	@ (8007008 <ceil+0xe0>)
 8006f6c:	411a      	asrs	r2, r3
 8006f6e:	ea01 0402 	and.w	r4, r1, r2
 8006f72:	4304      	orrs	r4, r0
 8006f74:	d01a      	beq.n	8006fac <ceil+0x84>
 8006f76:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007000 <ceil+0xd8>
 8006f7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006f7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f86:	ddeb      	ble.n	8006f60 <ceil+0x38>
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	bfc2      	ittt	gt
 8006f8c:	f44f 1080 	movgt.w	r0, #1048576	@ 0x100000
 8006f90:	fa40 f303 	asrgt.w	r3, r0, r3
 8006f94:	18c9      	addgt	r1, r1, r3
 8006f96:	ea21 0102 	bic.w	r1, r1, r2
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e7e0      	b.n	8006f60 <ceil+0x38>
 8006f9e:	2b33      	cmp	r3, #51	@ 0x33
 8006fa0:	dd05      	ble.n	8006fae <ceil+0x86>
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa6:	d101      	bne.n	8006fac <ceil+0x84>
 8006fa8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006fac:	bd30      	pop	{r4, r5, pc}
 8006fae:	f2a2 4413 	subw	r4, r2, #1043	@ 0x413
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	40e2      	lsrs	r2, r4
 8006fb8:	4210      	tst	r0, r2
 8006fba:	d0f7      	beq.n	8006fac <ceil+0x84>
 8006fbc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007000 <ceil+0xd8>
 8006fc0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006fc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fcc:	ddc8      	ble.n	8006f60 <ceil+0x38>
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	dd02      	ble.n	8006fd8 <ceil+0xb0>
 8006fd2:	2b14      	cmp	r3, #20
 8006fd4:	d103      	bne.n	8006fde <ceil+0xb6>
 8006fd6:	3101      	adds	r1, #1
 8006fd8:	ea20 0002 	bic.w	r0, r0, r2
 8006fdc:	e7c0      	b.n	8006f60 <ceil+0x38>
 8006fde:	2401      	movs	r4, #1
 8006fe0:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8006fe4:	fa04 f303 	lsl.w	r3, r4, r3
 8006fe8:	4418      	add	r0, r3
 8006fea:	4285      	cmp	r5, r0
 8006fec:	bf88      	it	hi
 8006fee:	1909      	addhi	r1, r1, r4
 8006ff0:	e7f2      	b.n	8006fd8 <ceil+0xb0>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006ff8:	e7b2      	b.n	8006f60 <ceil+0x38>
 8006ffa:	4904      	ldr	r1, [pc, #16]	@ (800700c <ceil+0xe4>)
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e7af      	b.n	8006f60 <ceil+0x38>
 8007000:	8800759c 	.word	0x8800759c
 8007004:	7e37e43c 	.word	0x7e37e43c
 8007008:	000fffff 	.word	0x000fffff
 800700c:	3ff00000 	.word	0x3ff00000

08007010 <_init>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr

0800701c <_fini>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr
